{
    "advisory_record": {
        "cve_id": "CVE-2018-1002201",
        "description": "zt-zip before 1.13 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in a Zip archive entry that is mishandled during extraction. This vulnerability is also known as 'Zip-Slip'.",
        "reserved_timestamp": 1664755200,
        "published_timestamp": 1664814100,
        "updated_timestamp": 1664814100,
        "repository_url": null,
        "references": {
            "": 108,
            "https://snyk.io/vuln/SNYK-JAVA-ORGZEROTURNAROUND-31681": 5,
            "https://snyk.io/research/zip-slip-vulnerability": 4,
            "commit::759b72f33bc8f4d69f84f09fcb7f010ad45d6fff": 4,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 4,
            "https://github.com/snyk/zip-slip-vulnerability": 2,
            "https://github.com/zeroturnaround/zt-zip/blob/zt-zip-1.13/Changelog.txt": 2,
            "https://github.com/features/actions": 2,
            "https://github.com/features/packages": 2,
            "https://github.com/features/security": 2,
            "https://github.com/features/codespaces": 2,
            "https://github.com/features/copilot": 2,
            "https://github.com/features/code-review": 2,
            "https://github.com/features/issues": 2,
            "https://github.com/features/discussions": 2,
            "https://github.com/features": 2,
            "https://docs.github.com": 2,
            "https://skills.github.com": 2,
            "https://github.blog": 2,
            "https://github.com/enterprise": 2,
            "https://github.com/team": 2,
            "https://github.com/enterprise/startups": 2,
            "https://github.com/solutions/industries/healthcare": 2,
            "https://github.com/solutions/industries/financial-services": 2,
            "https://github.com/solutions/industries/manufacturing": 2,
            "https://github.com/solutions/ci-cd": 2,
            "https://github.com/solutions/devops": 2,
            "https://github.com/solutions/devsecops": 2,
            "https://resources.github.com/learn/pathways": 2,
            "https://resources.github.com": 2,
            "https://github.com/customer-stories": 2,
            "https://partner.github.com": 2,
            "https://github.com/readme": 2,
            "https://github.com/topics": 2,
            "https://github.com/trending": 2,
            "https://github.com/collections": 2,
            "https://github.com/enterprise/advanced-security": 2,
            "https://github.com/pricing": 2,
            "commit::master": 2,
            "http://snyk.io/research/zip-slip-vulnerability": 2,
            "commit::09b5706aa9367972c09144a450bb4523049ee840": 2,
            "https://github.com/jenkinsci/jenkins/pull/3402": 2,
            "https://github.com": 2,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 2,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 2,
            "https://github.com/security": 2,
            "https://www.githubstatus.com/": 2,
            "https://docs.github.com/": 2,
            "https://support.github.com?tags=dotcom-footer": 2,
            "https://camo.githubusercontent.com/edca8a9a826c7de9b71109a52d2db89a90c1dc5a5ccdadc501c9e3aa6c06b842/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f736e796b2f696d6167652f75706c6f61642f665f6175746f2c715f6175746f2c635f7468756d622c685f3135302c775f3135302f76313532373135363431352f72657365617263682f7a6970736c69702e706e67": 1,
            "https://stackoverflow.com/questions/981578/how-to-unzip-files-recursively-in-java": 1,
            "https://github.com/snyk/zip-slip-vulnerability/blob/master/CONTRIBUTING.md": 1,
            "https://github.com/ZJONSSON/node-unzipper": 1,
            "https://snyk.io/vuln/npm:unzipper:20180415": 1,
            "https://github.com/ZJONSSON/node-unzipper/pull/59": 1,
            "https://github.com/cthackers/adm-zip": 1,
            "https://snyk.io/vuln/npm:adm-zip:20180415": 1,
            "https://github.com/cthackers/adm-zip/pull/212": 1,
            "https://github.com/codehaus-plexus/plexus-archiver": 1,
            "https://snyk.io/vuln/SNYK-JAVA-ORGCODEHAUSPLEXUS-31680": 1,
            "https://github.com/codehaus-plexus/plexus-archiver/pull/87": 1,
            "https://github.com/zeroturnaround/zt-zip": 1,
            "https://github.com/zeroturnaround/zt-zip/blob/master/src/main/java/org/zeroturnaround/zip/ZipUtil.java#L389:26": 1,
            "https://github.com/srikanth-lingala/zip4j": 1,
            "https://mvnrepository.com/artifact/net.lingala.zip4j/zip4j": 1,
            "https://snyk.io/vuln/SNYK-JAVA-NETLINGALAZIP4J-31679": 1,
            "https://github.com/srikanth-lingala/zip4j/blob/master/src/main/java/net/lingala/zip4j/zip/UnzipEngine.java#L148": 1,
            "https://github.com/haf/DotNetZip.Semverd": 1,
            "https://snyk.io/vuln/SNYK-DOTNET-DOTNETZIP-60245": 1,
            "https://github.com/haf/DotNetZip.Semverd/compare/master...shana:bugs/relative-paths?expand=1": 1,
            "https://github.com/adamhathcock/sharpcompress": 1,
            "https://snyk.io/vuln/SNYK-DOTNET-SHARPCOMPRESS-60246": 1,
            "https://github.com/adamhathcock/sharpcompress/blob/2a5494a804dd3d6f5bec1ec79a52d54ffce610f5/src/SharpCompress/Archives/IArchiveEntryExtensions.cs#L58-L67": 1,
            "https://github.com/apache/commons-compress/": 1,
            "https://github.com/icsharpcode/SharpZipLib": 1,
            "https://snyk.io/vuln/SNYK-DOTNET-SHARPZIPLIB-60247": 1,
            "https://bitbucket.org/winebarrel/zip-ruby/src/a0bceebd7bf031c8815a8359ba9befe6ead1bedc/zipruby/?at=default": 1,
            "https://github.com/rubyzip/rubyzip": 1,
            "https://github.com/rubyzip/rubyzip/issues/369": 1,
            "https://snyk.io/vuln/SNYK-RUBY-RUBYZIP-22039": 1,
            "https://github.com/fjg/zipruby": 1,
            "https://golang.org/pkg/archive/": 1,
            "https://docs.python.org/3/library/tarfile.html": 1,
            "https://github.com/stachenov/quazip/": 1,
            "https://github.com/Raynes/fs": 1,
            "https://github.com/cloudfoundry/archiver/": 1,
            "https://github.com/Chumper/Zipper": 1,
            "https://github.com/Chumper/Zipper/releases/tag/v1.0.3": 1,
            "https://github.com/genome-vendor/libarchive-zip-perl": 1,
            "https://snyk.io/vuln/SNYK-LINUX-LIBARCHIVEZIPPERL-171379": 1,
            "https://github.com/Majored/rs-async-zip": 1,
            "https://github.com/apache/storm/blob/master/storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java#L389": 1,
            "https://github.com/apache/storm/blob/master/storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java#L523": 1,
            "https://github.com/apache/storm/blob/master/storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java#L592": 1,
            "https://github.com/apache/storm/blob/master/storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java#L650": 1,
            "https://github.com/mholt/archiver": 1,
            "https://jenkins.io/security/advisory/2018-06-25/#SECURITY-870": 1,
            "https://github.com/jenkinsci/fortify-cloudscan-plugin/blob/cfa6d392abd900ce60a08bb830f99e821361b238/src/main/java/org/jenkinsci/plugins/fortifycloudscan/util/ArchiveUtil.java#L33:24": 1,
            "https://github.com/jeremylong/DependencyCheck/blob/master/RELEASE_NOTES.md#version-320-2018-05-21": 1,
            "https://jira.sonarsource.com/browse/SONAR-10661": 1,
            "https://github.com/SonarSource/sonarqube/blob/c0d2705e610d771b8c66ef22e64530c7bca4f538/sonar-plugin-api/src/main/java/org/sonar/api/utils/ZipUtils.java#L148": 1,
            "https://github.com/cinchapi/concourse/blob/a890d80a80298436995b42045474c6f01b53066b/concourse-driver-java/src/main/java/com/cinchapi/concourse/util/ZipFiles.java#L100": 1,
            "https://github.com/orientechnologies/orientdb/blob/1c184f1295d1ce1538e5debac05addc7ca69b5b8/core/src/main/java/com/orientechnologies/orient/core/compression/impl/OZIPCompressionUtil.java#L87": 1,
            "https://github.com/orientechnologies/orientdb/blob/5684b63f6efb03d407d0175b9eab616b36bbecbd/etl/src/main/java/com/orientechnologies/orient/etl/util/OFileManager.java#L76": 1,
            "https://github.com/FenixEdu/fenixedu-academic/blob/674a7081d6a28cfadcae1cf732c11e9599cdedee/src/main/java/org/fenixedu/academic/util/FileUtils.java#L118": 1,
            "https://github.com/lucee/Lucee/blob/ad2b44d9b6695e6ef8632eadf306c3f38e43885b/core/src/main/java/lucee/runtime/tag/Zip.java#L487": 1,
            "https://github.com/timyates/groovy-common-extensions/releases/tag/v0.7.1": 1,
            "https://github.com/timyates/groovy-common-extensions/blob/169fad28b6ec306979f06b5ec38cae4085bf05bd/src/main/groovy/com/bloidonia/groovy/extensions/FileExtensionMethods.groovy#L144": 1,
            "https://github.com/fabric8io/fabric8/blob/5d20ac54e81246b78dc343ff0504b815421f5704/components/fabric8-utils/src/main/java/io/fabric8/utils/Zips.java#L116": 1,
            "https://lists.apache.org/thread.html/ab2e1af38975f5fc462ba89b517971ef892ec3d06bee12ea2258895b@%3Cdev.tika.apache.org%3E": 1,
            "https://github.com/deeplearning4j/deeplearning4j/pull/6630": 1,
            "https://github.com/wixtoolset/issues/issues/6075": 1,
            "https://github.com/apache/kylin/blob/master/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/util/TarGZUtil.java#L43": 1,
            "https://github.com/apache/nifi/blob/master/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/UnpackContent.java#L312": 1,
            "https://github.com/elastic/elasticsearch/blob/ee802ad63c0f21d697a5095dd05dc6f94626ee4d/test/framework/src/main/java/org/elasticsearch/common/io/FileTestUtils.java#L68-L94": 1,
            "https://github.com/linkedin/pinot/blob/master/pinot-common/src/main/java/com/linkedin/pinot/common/utils/TarGzCompressionUtils.java#L183": 1,
            "https://github.com/ankidroid/Anki-Android/blob/eb540c2fd3aa99a646242c887b9094223ba4a8a1/AnkiDroid/src/main/java/com/ichi2/libanki/Utils.java#L633": 1,
            "https://github.com/ata4/bspsrc/blob/21e451142738463d999435d36de7353f48daaa15/src/main/java/info/ata4/bsplib/PakFile.java#L60-L89": 1,
            "https://github.com/eirslett/frontend-maven-plugin/blob/ef103230692cbf00a5f86ab7b909246d6b638243/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/ArchiveExtractor.java#L109": 1,
            "https://github.com/eirslett/frontend-maven-plugin/blob/ef103230692cbf00a5f86ab7b909246d6b638243/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/ArchiveExtractor.java#L81": 1,
            "https://github.com/unknwon/cae/blob/55a0b64484a12115b7322b9eed01e2c26113061d/zip/write.go#L100": 1,
            "https://github.com/unknwon/cae/blob/55a0b64484a12115b7322b9eed01e2c26113061d/tz/write.go#L122": 1,
            "https://github.com/JetBrains/intellij-community/blob/91fc0d0af2bf12a8faa8fac5296a92edf4ea268d/platform/util/src/com/intellij/util/io/TarUtil.java#L191": 1,
            "https://github.com/apache/apex-core/blob/master/engine/src/main/java/com/datatorrent/stram/client/AppPackage.java#L320": 1,
            "https://github.com/apache/zeppelin/blob/master/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java#L225": 1,
            "https://github.com/apache/reef/blob/561a336f2f0dda8f4a67a96179750a76167b038f/lang/java/reef-runtime-azbatch/src/main/java/org/apache/reef/runtime/azbatch/evaluator/EvaluatorShim.java#L295": 1,
            "https://github.com/apache/bookkeeper/blob/6dda0a6c68fbaf2ca198cfbb693db4ac93a0feef/tests/integration-tests-utils/src/main/java/org/apache/bookkeeper/tests/DockerUtils.java#L109": 1,
            "https://github.com/apache/incubator-pulsar/blob/44e06635c1524229a923e8fbb525df278fcecdec/tests/integration-tests-utils/src/main/java/org/apache/pulsar/tests/DockerUtils.java": 1,
            "https://github.com/apache/incubator-heron/blob/master/heron/downloaders/src/java/org/apache/heron/downloader/Extractor.java#L43": 1,
            "https://github.com/apache/incubator-gobblin/blob/4bdd0482e815013ee016ede4385a9ba339621f1b/gobblin-aws/src/main/java/org/apache/gobblin/aws/AWSJobConfigurationManager.java#L199": 1,
            "https://github.com/apache/incubator-gobblin/blob/5457af88d56b8fb89b172129fd1ff24ecdd4eba8/gobblin-data-management/src/main/java/org/apache/gobblin/data/management/copy/writer/TarArchiveInputStreamDataWriter.java#L81-L87": 1,
            "https://github.com/apache/systemml/blob/2e6b577c513393022f87e4770d7761a3726a07aa/dev/release/src/test/java/org/apache/sysml/validation/ValidateLicAndNotice.java#L485": 1,
            "https://github.com/gradle/gradle/blob/de937ae7c46389169888aca2e7d9f506547e78bf/subprojects/wrapper/src/main/java/org/gradle/wrapper/Install.java#L230": 1,
            "https://github.com/gradle/gradle/blob/4bbd605e2339dab76e441d91ac9aa0f5af2518f7/subprojects/build-cache/src/jmh/java/org/gradle/caching/internal/tasks/ZipPacker.java#L54:25": 1,
            "https://github.com/gradle/gradle/blob/f1efee61bcee87411f7b78761cbb492250e03b70/subprojects/core/src/main/java/org/gradle/api/internal/file/archive/ZipFileTree.java#L97": 1,
            "https://github.com/plasma-umass/doppio/blob/f58deb051f097c66cadc1e48a236e670d2d2731d/classes/util/Unzip.java#L25": 1,
            "https://github.com/streamsets/datacollector/blob/07c1dd23369ad55a30cd039d96751155a7dbfe8b/miniIT/src/test/java/com/streamsets/datacollector/util/UntarUtility.java#L61": 1,
            "https://github.com/grnd": 1,
            "https://github.com/aviadatsnyk": 1,
            "https://github.com/snoopysecurity": 1,
            "https://github.com/ggkitsas": 1,
            "https://github.com/leeyashalti": 1,
            "https://github.com/Joe-Bollen-Snyk": 1,
            "https://github.com/sjmaple": 1,
            "https://github.com/srikanth-lingala": 1,
            "https://github.com/dragos-cojocari": 1,
            "https://github.com/RDIL": 1,
            "https://github.com/benjifin": 1,
            "https://github.com/mowzk": 1,
            "https://github.com/conikeec": 1,
            "https://github.com/svick": 1
        },
        "affected_products": [
            "zt-zip",
            "Slip",
            "Zip"
        ],
        "versions": {
            "lessThan": "1.13",
            "status": "affected",
            "version": "unspecified",
            "versionType": "custom"
        },
        "files": [
            "Zip-Slip",
            "zt-zip"
        ],
        "keywords": [
            "directory",
            "extraction",
            "attacker",
            "file",
            "entry",
            "slip",
            "allow",
            "traversal",
            "write",
            "mishandle",
            "slash",
            "vulnerability",
            "know"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "759b72f33bc8f4d69f84f09fcb7f010ad45d6fff",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1524754357,
            "hunks": 4,
            "message": "Fixed potential security vulnerability reported by Snyk Security Research Team This is an arbitrary file write vulnerability, that can be achieved using a specially crafted zip archive, that holds path traversal filenames. So when the filename gets concatenated to the target extraction directory, the final path ends up outside of the target folder.",
            "diff": [
                "diff --git a/src/main/java/org/zeroturnaround/zip/ZipUtil.java b/src/main/java/org/zeroturnaround/zip/ZipUtil.java",
                "index 7ebc8dd..604866e 100644",
                "--- a/src/main/java/org/zeroturnaround/zip/ZipUtil.java",
                "+++ b/src/main/java/org/zeroturnaround/zip/ZipUtil.java",
                "@@ -1152,2 +1152,11 @@ public final class ZipUtil {",
                "         File file = new File(outputDir, name);",
                "+",
                "+        /* If we see the relative traversal string of \"..\" we need to make sure",
                "+         * that the outputdir + name doesn't leave the outputdir. See",
                "+         * DirectoryTraversalMaliciousTest for details.",
                "+         */",
                "+        if (name.indexOf(\"..\") != -1 && !file.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {",
                "+          throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");",
                "+        }",
                "+",
                "         if (zipEntry.isDirectory()) {",
                "@@ -1220,2 +1229,11 @@ public final class ZipUtil {",
                "           File destFile = new File(parentDirectory, dirs[dirs.length - 1]);",
                "+",
                "+          /* If we see the relative traversal string of \"..\" we need to make sure",
                "+           * that the outputdir + name doesn't leave the outputdir. See",
                "+           * DirectoryTraversalMaliciousTest for details.",
                "+           */",
                "+          if (name.indexOf(\"..\") != -1 && !destFile.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {",
                "+            throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");",
                "+          }",
                "+",
                "           FileUtils.copy(in, destFile);",
                "@@ -1225,2 +1243,11 @@ public final class ZipUtil {",
                "           File destFile = new File(outputDir, name);",
                "+",
                "+          /* If we see the relative traversal string of \"..\" we need to make sure",
                "+           * that the outputdir + name doesn't leave the outputdir. See",
                "+           * DirectoryTraversalMaliciousTest for details.",
                "+           */",
                "+          if (name.indexOf(\"..\") != -1 && !destFile.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {",
                "+            throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");",
                "+          }",
                "+",
                "           FileUtils.copy(in, destFile);",
                "@@ -1260,2 +1287,11 @@ public final class ZipUtil {",
                "         File file = new File(outputDir, name);",
                "+",
                "+        /* If we see the relative traversal string of \"..\" we need to make sure",
                "+         * that the outputdir + name doesn't leave the outputdir. See",
                "+         * DirectoryTraversalMaliciousTest for details.",
                "+         */",
                "+        if (name.indexOf(\"..\") != -1 && !file.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {",
                "+          throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");",
                "+        }",
                "+",
                "         if (zipEntry.isDirectory()) {"
            ],
            "changed_files": [
                "src/main/java/org/zeroturnaround/zip/ZipUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "zt-zip-1.13",
                "zt-zip-1.14",
                "zt-zip-1.15",
                "zt-zip-1.16",
                "zt-zip-1.17"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 4 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: vulnerability, security",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: extraction, directory, file, traversal, write, vulnerability",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e7d5e3478b877316dfc75e61509beeee140a93f8",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1524819380,
            "hunks": 46,
            "message": "Removing more and more reflection related code As we are moving to minimal JDK version of JDK8 we can remove a lot of reflection code that was used for dealing with file permissions and charsets.",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index c2ea0a8..bf8dd62 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -70,4 +70,4 @@",
                "         <configuration>",
                "-          <source>1.6</source>",
                "-          <target>1.6</target>",
                "+          <source>1.8</source>",
                "+          <target>1.8</target>",
                "         </configuration>",
                "diff --git a/src/main/java/org/zeroturnaround/zip/Java7Nio2ApiPermissionsStrategy.java b/src/main/java/org/zeroturnaround/zip/Java7Nio2ApiPermissionsStrategy.java",
                "deleted file mode 100644",
                "index 7ed3eff..0000000",
                "--- a/src/main/java/org/zeroturnaround/zip/Java7Nio2ApiPermissionsStrategy.java",
                "+++ /dev/null",
                "@@ -1,147 +0,0 @@",
                "-package org.zeroturnaround.zip;",
                "-",
                "-import java.io.File;",
                "-import java.lang.reflect.Array;",
                "-import java.lang.reflect.Method;",
                "-import java.util.HashSet;",
                "-import java.util.Set;",
                "-",
                "-/**",
                "- * ZTFilePermissionsStrategy which uses Java 7 posix file permissions",
                "- * ",
                "- * @author VIktor Karabut",
                "- */",
                "-class Java7Nio2ApiPermissionsStrategy implements ZTFilePermissionsStrategy {",
                "-  private final Class<? extends Enum<?>> posixFilePermissionClass;",
                "-  private final Class<?> filesClass;",
                "-  private final Class<?> pathClass;",
                "-  private final Class<? extends Enum<?>> linkOptionClass;",
                "-  private final Enum<?>[] linkOptionsArray;",
                "-  ",
                "-  private final Method toPathMethod;",
                "-  private final Method setPosixFilePermissionsMethod;",
                "-  private final Method getPosixFilePermissionsMethod;",
                "-  ",
                "-  private final Object OWNER_READ;",
                "-  private final Object OWNER_WRITE;",
                "-  private final Object OWNER_EXECUTE;",
                "-  private final Object GROUP_READ;",
                "-  private final Object GROUP_WRITE;",
                "-  private final Object GROUP_EXECUTE;",
                "-  private final Object OTHERS_READ;",
                "-  private final Object OTHERS_WRITE;",
                "-  private final Object OTHERS_EXECUTE;",
                "-  ",
                "-  ",
                "-  @SuppressWarnings(\"unchecked\")",
                "-  public Java7Nio2ApiPermissionsStrategy() {",
                "-    if (!isPosix()) {",
                "-      throw new ZipException(\"File system does not support POSIX file attributes\");",
                "-    }",
                "-    ",
                "-    posixFilePermissionClass = ",
                "-        (Class<? extends Enum<?>>) ZTZipReflectionUtil.getClassForName(\"java.nio.file.attribute.PosixFilePermission\", Enum.class);",
                "-    Enum<?>[] constants = posixFilePermissionClass.getEnumConstants();",
                "-    OWNER_READ = constants[0];",
                "-    OWNER_WRITE = constants[1];",
                "-    OWNER_EXECUTE = constants[2];",
                "-    GROUP_READ = constants[3];",
                "-    GROUP_WRITE = constants[4];",
                "-    GROUP_EXECUTE = constants[5];",
                "-    OTHERS_READ = constants[6];",
                "-    OTHERS_WRITE = constants[7];",
                "-    OTHERS_EXECUTE = constants[8];",
                "-    ",
                "-    linkOptionClass = ",
                "-        (Class<? extends Enum<?>>) ZTZipReflectionUtil.getClassForName(\"java.nio.file.LinkOption\", Enum.class);",
                "-    linkOptionsArray = (Enum<?>[]) Array.newInstance(linkOptionClass, 1);",
                "-    linkOptionsArray[0] = (Enum<?>) linkOptionClass.getEnumConstants()[0]; // LinkOption.NOFOLLOW_LINKS;",
                "-    ",
                "-    filesClass = ZTZipReflectionUtil.getClassForName(\"java.nio.file.Files\", Object.class);",
                "-    pathClass = ZTZipReflectionUtil.getClassForName(\"java.nio.file.Path\", Object.class);",
                "-    ",
                "-    toPathMethod = ZTZipReflectionUtil.getDeclaredMethod(File.class, \"toPath\");",
                "-    setPosixFilePermissionsMethod = ZTZipReflectionUtil.getDeclaredMethod(filesClass, \"setPosixFilePermissions\", pathClass, Set.class);",
                "-    getPosixFilePermissionsMethod = ZTZipReflectionUtil.getDeclaredMethod(filesClass, \"getPosixFilePermissions\", pathClass, linkOptionsArray.getClass());",
                "-  }",
                "-",
                "-  public ZTFilePermissions getPermissions(File file) {",
                "-    ZTFilePermissions permissions = new ZTFilePermissions();",
                "-    permissions.setDirectory(file.isDirectory());",
                "-    ",
                "-    Set<?> posixFilePermissions = getPosixFilePermissions(file);",
                "-    ",
                "-    permissions.setOwnerCanRead(   posixFilePermissions.contains(OWNER_READ));",
                "-    permissions.setOwnerCanWrite(  posixFilePermissions.contains(OWNER_WRITE));",
                "-    permissions.setOwnerCanExecute(posixFilePermissions.contains(OWNER_EXECUTE));",
                "-    ",
                "-    permissions.setGroupCanRead(   posixFilePermissions.contains(GROUP_READ));",
                "-    permissions.setGroupCanWrite(  posixFilePermissions.contains(GROUP_WRITE));",
                "-    permissions.setGroupCanExecute(posixFilePermissions.contains(GROUP_EXECUTE));",
                "-    ",
                "-    permissions.setOthersCanRead(   posixFilePermissions.contains(OTHERS_READ));",
                "-    permissions.setOthersCanWrite(  posixFilePermissions.contains(OTHERS_WRITE));",
                "-    permissions.setOthersCanExecute(posixFilePermissions.contains(OTHERS_EXECUTE));",
                "-    ",
                "-    return permissions;",
                "-  }",
                "-",
                "-  public void setPermissions(File file, ZTFilePermissions permissions) {",
                "-    Set<Object> set = new HashSet<Object>();",
                "-    addIf(permissions.isOwnerCanRead(), set, OWNER_READ);",
                "-    addIf(permissions.isOwnerCanRead(),   set,OWNER_READ);",
                "-    addIf(permissions.isOwnerCanWrite(),  set,OWNER_WRITE);",
                "-    addIf(permissions.isOwnerCanExecute(),set,OWNER_EXECUTE);",
                "-    ",
                "-    addIf(permissions.isGroupCanRead(),   set,GROUP_READ);",
                "-    addIf(permissions.isGroupCanWrite(),  set,GROUP_WRITE);",
                "-    addIf(permissions.isGroupCanExecute(),set,GROUP_EXECUTE);",
                "-    ",
                "-    addIf(permissions.isOthersCanRead(),   set,OTHERS_READ);",
                "-    addIf(permissions.isOthersCanWrite(),  set,OTHERS_WRITE);",
                "-    addIf(permissions.isOthersCanExecute(),set,OTHERS_EXECUTE);",
                "-    ",
                "-    setPosixFilePermissions(file, set);",
                "-  }",
                "-  ",
                "-  private <E> void addIf(boolean condition, Set<E> set, E el) {",
                "-    if (condition) {",
                "-      set.add(el);",
                "-    }",
                "-  }",
                "-  ",
                "-  /**",
                "-   * Construct java.nio.file.Path object from abstract path.",
                "-   * Invokes JDK7 <code>file.toPath()</code> method through reflection.",
                "-   * ",
                "-   * @param file",
                "-   * @return instance of java.nio.file.Path object",
                "-   */",
                "-  private Object toPath(File file) {",
                "-    return ZTZipReflectionUtil.invoke(toPathMethod, file);",
                "-  }",
                "-  ",
                "-  // Files.setPosixFilePermissions(file.toPath(), set);",
                "-  private void setPosixFilePermissions(File file, Set<?> set) {",
                "-    ZTZipReflectionUtil.invoke(setPosixFilePermissionsMethod, null, toPath(file), set);",
                "-  }",
                "-  ",
                "-  // Files.getPosixFilePermissions(file.toPath(), new LinkOption[]{ LinkOption.NOFOLLOW_LINKS });",
                "-  private Set<?> getPosixFilePermissions(File file) {",
                "-    return (Set<?>) ZTZipReflectionUtil.invoke(getPosixFilePermissionsMethod, null, toPath(file), linkOptionsArray);",
                "-  }",
                "-  ",
                "-  // FileSystems.getDefault().supportedFileAttrubuteViews().contains(\"posix\");",
                "-  private static boolean isPosix() {",
                "-    Method getDefaultMethod = ZTZipReflectionUtil.getDeclaredMethod(",
                "-        ZTZipReflectionUtil.getClassForName(\"java.nio.file.FileSystems\", Object.class), \"getDefault\");",
                "-    Method supportedFileAttributeViewsMethod = ZTZipReflectionUtil.getDeclaredMethod(",
                "-        ZTZipReflectionUtil.getClassForName(\"java.nio.file.FileSystem\", Object.class), \"supportedFileAttributeViews\");",
                "-    ",
                "-    Object fileSystem = ZTZipReflectionUtil.invoke(getDefaultMethod, null);",
                "-    @SuppressWarnings(\"unchecked\")",
                "-    Set<String> views = (Set<String>) ZTZipReflectionUtil.invoke(supportedFileAttributeViewsMethod, fileSystem);",
                "-    ",
                "-    return views.contains(\"posix\");",
                "-  }",
                "-}",
                "diff --git a/src/main/java/org/zeroturnaround/zip/ZTFilePermissionsStrategy.java b/src/main/java/org/zeroturnaround/zip/ZTFilePermissionsStrategy.java",
                "deleted file mode 100644",
                "index 4b71d26..0000000",
                "--- a/src/main/java/org/zeroturnaround/zip/ZTFilePermissionsStrategy.java",
                "+++ /dev/null",
                "@@ -1,28 +0,0 @@",
                "-package org.zeroturnaround.zip;",
                "-",
                "-import java.io.File;",
                "-",
                "-",
                "-/**",
                "- * Maps {@link ZTFilePermissions} to real filesystem-specific file attributes.",
                "- * ",
                "- * @author Viktor Karabut",
                "- */",
                "-public interface ZTFilePermissionsStrategy {",
                "-  ",
                "-  /**",
                "-   * Get {@link ZTFilePermissions} from file.",
                "-   * ",
                "-   * @param file file to get permissions for",
                "-   * @return permissions or <code>null</code> if cannot retrieve permissions info by some reason.",
                "-   */",
                "-  ZTFilePermissions getPermissions(File file);",
                "-  ",
                "-  /**",
                "-   * Set {@link ZTFilePermissions} to file",
                "-   * ",
                "-   * @param file file to get permissions for",
                "-   * @param permissions permission",
                "-   */",
                "-  void setPermissions(File file, ZTFilePermissions permissions);",
                "-}",
                "diff --git a/src/main/java/org/zeroturnaround/zip/ZTFilePermissionsUtil.java b/src/main/java/org/zeroturnaround/zip/ZTFilePermissionsUtil.java",
                "index 293c067..3e9530c 100644",
                "--- a/src/main/java/org/zeroturnaround/zip/ZTFilePermissionsUtil.java",
                "+++ b/src/main/java/org/zeroturnaround/zip/ZTFilePermissionsUtil.java",
                "@@ -3,2 +3,9 @@ package org.zeroturnaround.zip;",
                " import java.io.File;",
                "+import java.io.IOException;",
                "+import java.nio.file.FileSystems;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.LinkOption;",
                "+import java.nio.file.attribute.PosixFilePermission;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "@@ -14,23 +21,14 @@ class ZTFilePermissionsUtil {",
                "-  private static final int OWNER_READ_FLAG =     0400;",
                "-  private static final int OWNER_WRITE_FLAG =    0200;",
                "-  private static final int OWNER_EXECUTE_FLAG =  0100;",
                "+  private static final int OWNER_READ_FLAG = 0400;",
                "+  private static final int OWNER_WRITE_FLAG = 0200;",
                "+  private static final int OWNER_EXECUTE_FLAG = 0100;",
                "-  private static final int GROUP_READ_FLAG =     0040;",
                "-  private static final int GROUP_WRITE_FLAG =    0020;",
                "-  private static final int GROUP_EXECUTE_FLAG =  0010;",
                "+  private static final int GROUP_READ_FLAG = 0040;",
                "+  private static final int GROUP_WRITE_FLAG = 0020;",
                "+  private static final int GROUP_EXECUTE_FLAG = 0010;",
                "-  private static final int OTHERS_READ_FLAG =    0004;",
                "-  private static final int OTHERS_WRITE_FLAG =   0002;",
                "+  private static final int OTHERS_READ_FLAG = 0004;",
                "+  private static final int OTHERS_WRITE_FLAG = 0002;",
                "   private static final int OTHERS_EXECUTE_FLAG = 0001;",
                "-  /**",
                "-   * Get most appropriate {@link ZTFilePermissionsStrategy} based on Java version and OS.",
                "-   *",
                "-   * @return",
                "-   */",
                "-  static ZTFilePermissionsStrategy getDefaultStategy() {",
                "-    return DEFAULT_STRATEGY;",
                "-  }",
                "-",
                "   /**",
                "@@ -45,12 +43,12 @@ class ZTFilePermissionsUtil {",
                "-    mode |= addFlag(permissions.isOwnerCanExecute(),  OWNER_EXECUTE_FLAG);",
                "-    mode |= addFlag(permissions.isGroupCanExecute(),  GROUP_EXECUTE_FLAG);",
                "+    mode |= addFlag(permissions.isOwnerCanExecute(), OWNER_EXECUTE_FLAG);",
                "+    mode |= addFlag(permissions.isGroupCanExecute(), GROUP_EXECUTE_FLAG);",
                "     mode |= addFlag(permissions.isOthersCanExecute(), OTHERS_EXECUTE_FLAG);",
                "-    mode |= addFlag(permissions.isOwnerCanWrite(),  OWNER_WRITE_FLAG);",
                "-    mode |= addFlag(permissions.isGroupCanWrite(),  GROUP_WRITE_FLAG);",
                "+    mode |= addFlag(permissions.isOwnerCanWrite(), OWNER_WRITE_FLAG);",
                "+    mode |= addFlag(permissions.isGroupCanWrite(), GROUP_WRITE_FLAG);",
                "     mode |= addFlag(permissions.isOthersCanWrite(), OTHERS_WRITE_FLAG);",
                "-    mode |= addFlag(permissions.isOwnerCanRead(),  OWNER_READ_FLAG);",
                "-    mode |= addFlag(permissions.isGroupCanRead(),  GROUP_READ_FLAG);",
                "+    mode |= addFlag(permissions.isOwnerCanRead(), OWNER_READ_FLAG);",
                "+    mode |= addFlag(permissions.isGroupCanRead(), GROUP_READ_FLAG);",
                "     mode |= addFlag(permissions.isOthersCanRead(), OTHERS_READ_FLAG);",
                "@@ -73,13 +71,13 @@ class ZTFilePermissionsUtil {",
                "-    permissions.setOwnerCanExecute( (mode &  OWNER_EXECUTE_FLAG)  > 0 );",
                "-    permissions.setGroupCanExecute( (mode &  GROUP_EXECUTE_FLAG)  > 0 );",
                "-    permissions.setOthersCanExecute((mode &  OTHERS_EXECUTE_FLAG) > 0 );",
                "+    permissions.setOwnerCanExecute((mode & OWNER_EXECUTE_FLAG) > 0);",
                "+    permissions.setGroupCanExecute((mode & GROUP_EXECUTE_FLAG) > 0);",
                "+    permissions.setOthersCanExecute((mode & OTHERS_EXECUTE_FLAG) > 0);",
                "-    permissions.setOwnerCanWrite( (mode &  OWNER_WRITE_FLAG)  > 0 );",
                "-    permissions.setGroupCanWrite( (mode &  GROUP_WRITE_FLAG)  > 0 );",
                "-    permissions.setOthersCanWrite((mode &  OTHERS_WRITE_FLAG) > 0 );",
                "+    permissions.setOwnerCanWrite((mode & OWNER_WRITE_FLAG) > 0);",
                "+    permissions.setGroupCanWrite((mode & GROUP_WRITE_FLAG) > 0);",
                "+    permissions.setOthersCanWrite((mode & OTHERS_WRITE_FLAG) > 0);",
                "-    permissions.setOwnerCanRead( (mode &  OWNER_READ_FLAG)  > 0 );",
                "-    permissions.setGroupCanRead( (mode &  GROUP_READ_FLAG)  > 0 );",
                "-    permissions.setOthersCanRead((mode &  OTHERS_READ_FLAG) > 0 );",
                "+    permissions.setOwnerCanRead((mode & OWNER_READ_FLAG) > 0);",
                "+    permissions.setGroupCanRead((mode & GROUP_READ_FLAG) > 0);",
                "+    permissions.setOthersCanRead((mode & OTHERS_READ_FLAG) > 0);",
                "@@ -88,35 +86,64 @@ class ZTFilePermissionsUtil {",
                "-  /**",
                "-   * Empty {@link ZTFilePermissionsStrategy} implementation.",
                "-   */",
                "-  private static final ZTFilePermissionsStrategy NOP_STRATEGY = new ZTFilePermissionsStrategy() {",
                "-    public void setPermissions(File file, ZTFilePermissions permissions) {",
                "-      // do nothing",
                "+  public static ZTFilePermissions getPermissions(File file) {",
                "+    if (!isPosix()) {",
                "+      throw new ZipException(\"File system does not support POSIX file attributes\");",
                "     }",
                "-    public ZTFilePermissions getPermissions(File file) {",
                "-      // do nothing",
                "-      return null;",
                "+    ZTFilePermissions permissions = new ZTFilePermissions();",
                "+    permissions.setDirectory(file.isDirectory());",
                "+",
                "+    Set<?> posixFilePermissions = null;",
                "+",
                "+    try {",
                "+      posixFilePermissions = Files.getPosixFilePermissions(file.toPath(), new LinkOption[] { LinkOption.NOFOLLOW_LINKS });",
                "+    }",
                "+    catch (IOException e) {",
                "+      throw new ZipException(e);",
                "     }",
                "-  };",
                "-  private static final ZTFilePermissionsStrategy DEFAULT_STRATEGY = fetchDefaultStrategy();",
                "+    permissions.setOwnerCanRead(posixFilePermissions.contains(PosixFilePermission.OWNER_READ));",
                "+    permissions.setOwnerCanWrite(posixFilePermissions.contains(PosixFilePermission.OWNER_WRITE));",
                "+    permissions.setOwnerCanExecute(posixFilePermissions.contains(PosixFilePermission.OWNER_EXECUTE));",
                "-  private static ZTFilePermissionsStrategy fetchDefaultStrategy() {",
                "-    ZTFilePermissionsStrategy strategy = tryInstantiateStrategy(Java7Nio2ApiPermissionsStrategy.class);",
                "+    permissions.setGroupCanRead(posixFilePermissions.contains(PosixFilePermission.GROUP_READ));",
                "+    permissions.setGroupCanWrite(posixFilePermissions.contains(PosixFilePermission.GROUP_WRITE));",
                "+    permissions.setGroupCanExecute(posixFilePermissions.contains(PosixFilePermission.GROUP_EXECUTE));",
                "-    if (strategy == null) {",
                "-      strategy = NOP_STRATEGY;",
                "-    }",
                "+    permissions.setOthersCanRead(posixFilePermissions.contains(PosixFilePermission.OTHERS_READ));",
                "+    permissions.setOthersCanWrite(posixFilePermissions.contains(PosixFilePermission.OTHERS_WRITE));",
                "+    permissions.setOthersCanExecute(posixFilePermissions.contains(PosixFilePermission.OTHERS_EXECUTE));",
                "-    return strategy;",
                "+    return permissions;",
                "   }",
                "-  private static ZTFilePermissionsStrategy tryInstantiateStrategy(Class<? extends ZTFilePermissionsStrategy> clazz) {",
                "+  public static void setPermissions(File file, ZTFilePermissions permissions) {",
                "+    if (!isPosix()) {",
                "+      throw new ZipException(\"File system does not support POSIX file attributes\");",
                "+    }",
                "+",
                "+    Set<PosixFilePermission> set = new HashSet<PosixFilePermission>();",
                "+    addIf(permissions.isOwnerCanRead(), set, PosixFilePermission.OWNER_READ);",
                "+    addIf(permissions.isOwnerCanRead(), set, PosixFilePermission.OWNER_READ);",
                "+    addIf(permissions.isOwnerCanWrite(), set, PosixFilePermission.OWNER_WRITE);",
                "+    addIf(permissions.isOwnerCanExecute(), set, PosixFilePermission.OWNER_EXECUTE);",
                "+",
                "+    addIf(permissions.isGroupCanRead(), set, PosixFilePermission.GROUP_READ);",
                "+    addIf(permissions.isGroupCanWrite(), set, PosixFilePermission.GROUP_WRITE);",
                "+    addIf(permissions.isGroupCanExecute(), set, PosixFilePermission.GROUP_EXECUTE);",
                "+",
                "+    addIf(permissions.isOthersCanRead(), set, PosixFilePermission.OTHERS_READ);",
                "+    addIf(permissions.isOthersCanWrite(), set, PosixFilePermission.OTHERS_WRITE);",
                "+    addIf(permissions.isOthersCanExecute(), set, PosixFilePermission.OTHERS_EXECUTE);",
                "+",
                "     try {",
                "-      return clazz.newInstance();",
                "+      Files.setPosixFilePermissions(file.toPath(), set);",
                "+    }",
                "+    catch (IOException e) {",
                "+      throw new ZipException(e);",
                "     }",
                "-    catch (Exception e) {",
                "-      // failed to instantiate strategy by some reason",
                "-      return null;",
                "+  }",
                "+",
                "+  private static void addIf(boolean condition, Set<PosixFilePermission> set, PosixFilePermission el) {",
                "+    if (condition) {",
                "+      set.add(el);",
                "     }",
                "@@ -124,2 +151,5 @@ class ZTFilePermissionsUtil {",
                "+  private static boolean isPosix() {",
                "+    return FileSystems.getDefault().supportedFileAttributeViews().contains(\"posix\");",
                "+  }",
                " }",
                "diff --git a/src/main/java/org/zeroturnaround/zip/ZTZipReflectionUtil.java b/src/main/java/org/zeroturnaround/zip/ZTZipReflectionUtil.java",
                "deleted file mode 100644",
                "index 056504b..0000000",
                "--- a/src/main/java/org/zeroturnaround/zip/ZTZipReflectionUtil.java",
                "+++ /dev/null",
                "@@ -1,47 +0,0 @@",
                "-package org.zeroturnaround.zip;",
                "-",
                "-import java.lang.reflect.InvocationTargetException;",
                "-import java.lang.reflect.Method;",
                "-",
                "-class ZTZipReflectionUtil {",
                "-",
                "-  private ZTZipReflectionUtil() {",
                "-  }",
                "-",
                "-  static <T> Class<? extends T> getClassForName(String name, Class<T> clazz) {",
                "-    try {",
                "-      return Class.forName(name).asSubclass(clazz);",
                "-    }",
                "-    catch (ClassNotFoundException e) {",
                "-      throw new ZipException(e);",
                "-    }",
                "-    catch (ClassCastException e) {",
                "-      throw new ZipException(e);",
                "-    }",
                "-  }",
                "-",
                "-  static Method getDeclaredMethod(Class<?> clazz, String methodName, Class<?>... parameterTypes) {",
                "-    try {",
                "-      return clazz.getDeclaredMethod(methodName, parameterTypes);",
                "-    }",
                "-    catch (NoSuchMethodException e) {",
                "-      throw new ZipException(e);",
                "-    }",
                "-  }",
                "-",
                "-  static Object invoke(Method method, Object obj, Object... args) throws ZipException {",
                "-    try {",
                "-      return method.invoke(obj, args);",
                "-    }",
                "-    catch (IllegalAccessException e) {",
                "-      throw new ZipException(e);",
                "-    }",
                "-    catch (InvocationTargetException e) {",
                "-      throw new ZipException(e);",
                "-    }",
                "-    catch (IllegalArgumentException e) {",
                "-      throw new ZipException(e);",
                "-    }",
                "-  }",
                "-",
                "-}",
                "diff --git a/src/main/java/org/zeroturnaround/zip/ZipEntryUtil.java b/src/main/java/org/zeroturnaround/zip/ZipEntryUtil.java",
                "index 80cf7a4..2a25b55 100644",
                "--- a/src/main/java/org/zeroturnaround/zip/ZipEntryUtil.java",
                "+++ b/src/main/java/org/zeroturnaround/zip/ZipEntryUtil.java",
                "@@ -149,3 +149,3 @@ class ZipEntryUtil {",
                "-    ZTFilePermissions permissions = ZTFilePermissionsUtil.getDefaultStategy().getPermissions(file);",
                "+    ZTFilePermissions permissions = ZTFilePermissionsUtil.getPermissions(file);",
                "     if (permissions != null) {",
                "diff --git a/src/main/java/org/zeroturnaround/zip/ZipFileUtil.java b/src/main/java/org/zeroturnaround/zip/ZipFileUtil.java",
                "deleted file mode 100644",
                "index 8ec4d5d..0000000",
                "--- a/src/main/java/org/zeroturnaround/zip/ZipFileUtil.java",
                "+++ /dev/null",
                "@@ -1,129 +0,0 @@",
                "-package org.zeroturnaround.zip;",
                "-",
                "-import java.io.BufferedOutputStream;",
                "-import java.io.File;",
                "-import java.io.IOException;",
                "-import java.io.InputStream;",
                "-import java.io.OutputStream;",
                "-import java.lang.reflect.Constructor;",
                "-import java.lang.reflect.InvocationTargetException;",
                "-import java.nio.charset.Charset;",
                "-import java.util.zip.ZipFile;",
                "-import java.util.zip.ZipInputStream;",
                "-import java.util.zip.ZipOutputStream;",
                "-",
                "-/**",
                "- * Mainly methods to lookup Zip* class constructors. This is needed",
                "- * because Java 6 doesn't have constructors with Charsets that were",
                "- * introduced in Java 7.",
                "- */",
                "-class ZipFileUtil {",
                "-  private static final String MISSING_METHOD_PLEASE_UPGRADE = \"Your JRE doesn't support the ZipFile Charset constructor. Please upgrade JRE to 1.7 use this feature. Tried constructor ZipFile(File, Charset).\";",
                "-  private static final String CONSTRUCTOR_MESSAGE_FOR_ZIPFILE = \"Using constructor ZipFile(File, Charset) has failed: \";",
                "-  private static final String CONSTRUCTOR_MESSAGE_FOR_OUTPUT = \"Using constructor ZipOutputStream(OutputStream, Charset) has failed: \";",
                "-  private static final String CONSTRUCTOR_MESSAGE_FOR_INPUT = \"Using constructor ZipInputStream(InputStream, Charset) has failed: \";",
                "-",
                "-  // Private constructor for the utility class",
                "-  private ZipFileUtil() {",
                "-  }",
                "-",
                "-  /**",
                "-   * Returns a ZipInputStream opened with a given charset.",
                "-   */",
                "-  static ZipInputStream createZipInputStream(InputStream inStream, Charset charset) {",
                "-    if (charset == null)",
                "-      return new ZipInputStream(inStream);",
                "-",
                "-    try {",
                "-      Constructor<ZipInputStream> constructor = ZipInputStream.class.getConstructor(new Class[] { InputStream.class, Charset.class });",
                "-      return (ZipInputStream) constructor.newInstance(new Object[] { inStream, charset });",
                "-    }",
                "-    catch (NoSuchMethodException e) {",
                "-      throw new IllegalStateException(MISSING_METHOD_PLEASE_UPGRADE, e);",
                "-    }",
                "-    catch (InstantiationException e) {",
                "-      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_INPUT + e.getMessage(), e);",
                "-    }",
                "-    catch (IllegalAccessException e) {",
                "-      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_INPUT + e.getMessage(), e);",
                "-    }",
                "-    catch (IllegalArgumentException e) {",
                "-      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_INPUT + e.getMessage(), e);",
                "-    }",
                "-    catch (InvocationTargetException e) {",
                "-      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_INPUT + e.getMessage(), e);",
                "-    }",
                "-  }",
                "-",
                "-",
                "-  /**",
                "-   * Returns a ZipOutputStream opened with a given charset.",
                "-   */",
                "-  static ZipOutputStream createZipOutputStream(BufferedOutputStream outStream, Charset charset) {",
                "-    if (charset == null)",
                "-      return new ZipOutputStream(outStream);",
                "-",
                "-    try {",
                "-      Constructor<ZipOutputStream> constructor = ZipOutputStream.class.getConstructor(new Class[] { OutputStream.class, Charset.class });",
                "-      return (ZipOutputStream) constructor.newInstance(new Object[] { outStream, charset });",
                "-    }",
                "-    catch (NoSuchMethodException e) {",
                "-      throw new IllegalStateException(MISSING_METHOD_PLEASE_UPGRADE, e);",
                "-    }",
                "-    catch (InstantiationException e) {",
                "-      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_OUTPUT + e.getMessage(), e);",
                "-    }",
                "-    catch (IllegalAccessException e) {",
                "-      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_OUTPUT + e.getMessage(), e);",
                "-    }",
                "-    catch (IllegalArgumentException e) {",
                "-      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_OUTPUT + e.getMessage(), e);",
                "-    }",
                "-    catch (InvocationTargetException e) {",
                "-      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_OUTPUT + e.getMessage(), e);",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Returns a zipFile opened with a given charset",
                "-   */",
                "-  static ZipFile getZipFile(File src, Charset charset) throws IOException {",
                "-    if (charset == null) {",
                "-      return new ZipFile(src);",
                "-    }",
                "-",
                "-    try {",
                "-      Constructor<ZipFile> constructor = ZipFile.class.getConstructor(new Class[] { File.class, Charset.class });",
                "-      return (ZipFile) constructor.newInstance(new Object[] { src, charset });",
                "-    }",
                "-    catch (NoSuchMethodException e) {",
                "-      throw new IllegalStateException(MISSING_METHOD_PLEASE_UPGRADE, e);",
                "-    }",
                "-    catch (InstantiationException e) {",
                "-      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_ZIPFILE + e.getMessage(), e);",
                "-    }",
                "-    catch (IllegalAccessException e) {",
                "-      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_ZIPFILE + e.getMessage(), e);",
                "-    }",
                "-    catch (IllegalArgumentException e) {",
                "-      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_ZIPFILE + e.getMessage(), e);",
                "-    }",
                "-    catch (InvocationTargetException e) {",
                "-      throw new IllegalStateException(CONSTRUCTOR_MESSAGE_FOR_ZIPFILE + e.getMessage(), e);",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Returns <code>true</code> if charsets are supported in this JRE.",
                "-   */",
                "-  static boolean isCharsetSupported() throws IOException {",
                "-    try {",
                "-      ZipFile.class.getConstructor(new Class[] { File.class, Charset.class });",
                "-      return true;",
                "-    }",
                "-    catch (NoSuchMethodException e) {",
                "-      return false;",
                "-    }",
                "-  }",
                "-",
                "-}",
                "diff --git a/src/main/java/org/zeroturnaround/zip/ZipUtil.java b/src/main/java/org/zeroturnaround/zip/ZipUtil.java",
                "index a0244a4..87c4caa 100644",
                "--- a/src/main/java/org/zeroturnaround/zip/ZipUtil.java",
                "+++ b/src/main/java/org/zeroturnaround/zip/ZipUtil.java",
                "@@ -829,3 +829,3 @@ public final class ZipUtil {",
                "     }",
                "-    return ZipFileUtil.createZipInputStream(in, charset);",
                "+    return new ZipInputStream(in, charset);",
                "   }",
                "@@ -1153,3 +1153,4 @@ public final class ZipUtil {",
                "-        /* If we see the relative traversal string of \"..\" we need to make sure",
                "+        /*",
                "+         * If we see the relative traversal string of \"..\" we need to make sure",
                "          * that the outputdir + name doesn't leave the outputdir. See",
                "@@ -1158,3 +1159,3 @@ public final class ZipUtil {",
                "         if (name.indexOf(\"..\") != -1 && !file.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {",
                "-          throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");",
                "+          throw new ZipException(\"The file \" + name + \" is trying to leave the target output directory of \" + outputDir + \". Ignoring this file.\");",
                "         }",
                "@@ -1176,3 +1177,3 @@ public final class ZipUtil {",
                "         if (permissions != null) {",
                "-          ZTFilePermissionsUtil.getDefaultStategy().setPermissions(file, permissions);",
                "+          ZTFilePermissionsUtil.setPermissions(file, permissions);",
                "         }",
                "@@ -1230,3 +1231,4 @@ public final class ZipUtil {",
                "-          /* If we see the relative traversal string of \"..\" we need to make sure",
                "+          /*",
                "+           * If we see the relative traversal string of \"..\" we need to make sure",
                "            * that the outputdir + name doesn't leave the outputdir. See",
                "@@ -1235,3 +1237,3 @@ public final class ZipUtil {",
                "           if (name.indexOf(\"..\") != -1 && !destFile.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {",
                "-            throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");",
                "+            throw new ZipException(\"The file \" + name + \" is trying to leave the target output directory of \" + outputDir + \". Ignoring this file.\");",
                "           }",
                "@@ -1244,3 +1246,4 @@ public final class ZipUtil {",
                "-          /* If we see the relative traversal string of \"..\" we need to make sure",
                "+          /*",
                "+           * If we see the relative traversal string of \"..\" we need to make sure",
                "            * that the outputdir + name doesn't leave the outputdir. See",
                "@@ -1249,3 +1252,3 @@ public final class ZipUtil {",
                "           if (name.indexOf(\"..\") != -1 && !destFile.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {",
                "-            throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");",
                "+            throw new ZipException(\"The file \" + name + \" is trying to leave the target output directory of \" + outputDir + \". Ignoring this file.\");",
                "           }",
                "@@ -1288,3 +1291,4 @@ public final class ZipUtil {",
                "-        /* If we see the relative traversal string of \"..\" we need to make sure",
                "+        /*",
                "+         * If we see the relative traversal string of \"..\" we need to make sure",
                "          * that the outputdir + name doesn't leave the outputdir. See",
                "@@ -1293,3 +1297,3 @@ public final class ZipUtil {",
                "         if (name.indexOf(\"..\") != -1 && !file.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {",
                "-          throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");",
                "+          throw new ZipException(\"The file \" + name + \" is trying to leave the target output directory of \" + outputDir + \". Ignoring this file.\");",
                "         }",
                "@@ -2747,4 +2751,6 @@ public final class ZipUtil {",
                "   public static boolean transformEntry(File zip, String path, ZipEntryTransformer transformer, File destZip) {",
                "-    if(zip.equals(destZip)){throw new IllegalArgumentException(\"Input (\" +zip.getAbsolutePath()+ \") is the same as the destination!\" +",
                "-            \"Please use the transformEntry method without destination for in-place transformation.\" );}",
                "+    if (zip.equals(destZip)) {",
                "+      throw new IllegalArgumentException(\"Input (\" + zip.getAbsolutePath() + \") is the same as the destination!\" +",
                "+          \"Please use the transformEntry method without destination for in-place transformation.\");",
                "+    }",
                "     return transformEntry(zip, new ZipEntryTransformerEntry(path, transformer), destZip);",
                "diff --git a/src/main/java/org/zeroturnaround/zip/Zips.java b/src/main/java/org/zeroturnaround/zip/Zips.java",
                "index 6d81e19..68db103 100644",
                "--- a/src/main/java/org/zeroturnaround/zip/Zips.java",
                "+++ b/src/main/java/org/zeroturnaround/zip/Zips.java",
                "@@ -26,2 +26,3 @@ import java.io.PipedOutputStream;",
                " import java.nio.charset.Charset;",
                "+import java.nio.charset.StandardCharsets;",
                " import java.util.ArrayList;",
                "@@ -47,6 +48,5 @@ import org.zeroturnaround.zip.transform.ZipEntryTransformerEntry;",
                " /**",
                "- * Fluent api for zip handling.",
                "- *",
                "- * @author shelajev",
                "+ * Fluent API for Zip handling.",
                "  *",
                "+ * @author Oleg Shelajev",
                "  */",
                "@@ -65,5 +65,6 @@ public class Zips {",
                "   /**",
                "-   * Charset to use for entry names",
                "+   * Charset to use for entry names. Using the default from",
                "+   * java.util.zip.ZipOutputStream. Can be overridden.",
                "    */",
                "-  private Charset charset;",
                "+  private Charset charset = StandardCharsets.UTF_8;",
                "@@ -200,3 +201,3 @@ public class Zips {",
                "     }",
                "-    ",
                "+",
                "     Collection<File> files = ZTFileUtil.listFiles(file);",
                "@@ -356,3 +357,3 @@ public class Zips {",
                "       if (destinationFile.isFile()) {",
                "-        out = ZipFileUtil.createZipOutputStream(new BufferedOutputStream(new FileOutputStream(destinationFile)), charset);",
                "+        out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(destinationFile)), charset);",
                "         zipEntryAdapter = new ZipEntryOrInfoAdapter(new CopyingCallback(transformers, out, preserveTimestamps), null);",
                "@@ -368,3 +369,3 @@ public class Zips {",
                "       }",
                "-        handleInPlaceActions(destinationFile);",
                "+      handleInPlaceActions(destinationFile);",
                "     }",
                "@@ -387,4 +388,4 @@ public class Zips {",
                "   private File getDestinationFile() throws IOException {",
                "-    if(isUnpack()) {",
                "-      if(isInPlace()) {",
                "+    if (isUnpack()) {",
                "+      if (isInPlace()) {",
                "         File tempFile = File.createTempFile(\"zips\", null);",
                "@@ -407,3 +408,3 @@ public class Zips {",
                "       // we need a file",
                "-      if(isInPlace()) { // no destination specified, temp file",
                "+      if (isInPlace()) { // no destination specified, temp file",
                "         return File.createTempFile(\"zips\", \".zip\");",
                "@@ -411,3 +412,3 @@ public class Zips {",
                "       else {",
                "-        if(dest.isDirectory()) {",
                "+        if (dest.isDirectory()) {",
                "           // destination is a directory, actually we shouldn't be here, because this should mean we want an unpacked result.",
                "@@ -464,3 +465,3 @@ public class Zips {",
                "    * @return byte[]",
                "-   *           contents of the entry by given name",
                "+   *         contents of the entry by given name",
                "    */",
                "@@ -577,3 +578,3 @@ public class Zips {",
                "       finally {",
                "-         IOUtils.closeQuietly(entrySourceStream);",
                "+        IOUtils.closeQuietly(entrySourceStream);",
                "       }",
                "@@ -609,3 +610,3 @@ public class Zips {",
                "     // some node or not.",
                "-    for(String dirName : dirNames) {",
                "+    for (String dirName : dirNames) {",
                "       if (entryName.startsWith(dirName)) {",
                "@@ -627,3 +628,3 @@ public class Zips {",
                "   private ZipFile getZipFile() throws IOException {",
                "-    return ZipFileUtil.getZipFile(src, charset);",
                "+    return new ZipFile(src, charset);",
                "   }"
            ],
            "changed_files": [
                "pom.xml",
                "src/main/java/org/zeroturnaround/zip/Java7Nio2ApiPermissionsStrategy.java",
                "src/main/java/org/zeroturnaround/zip/ZTFilePermissionsStrategy.java",
                "src/main/java/org/zeroturnaround/zip/ZTFilePermissionsUtil.java",
                "src/main/java/org/zeroturnaround/zip/ZTZipReflectionUtil.java",
                "src/main/java/org/zeroturnaround/zip/ZipEntryUtil.java",
                "src/main/java/org/zeroturnaround/zip/ZipFileUtil.java",
                "src/main/java/org/zeroturnaround/zip/ZipUtil.java",
                "src/main/java/org/zeroturnaround/zip/Zips.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file, entry",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d5d512e3050b9cdce1cc3010f2a10af4db99e9b6",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1524810294,
            "hunks": 1,
            "message": "Spelt the author name out fully",
            "diff": [
                "diff --git a/src/main/java/org/zeroturnaround/zip/FileSource.java b/src/main/java/org/zeroturnaround/zip/FileSource.java",
                "index e034e26..08a137e 100644",
                "--- a/src/main/java/org/zeroturnaround/zip/FileSource.java",
                "+++ b/src/main/java/org/zeroturnaround/zip/FileSource.java",
                "@@ -26,3 +26,3 @@ import java.util.zip.ZipEntry;",
                "  * @author Toomas Romer",
                "- * @author shelajev",
                "+ * @author Oleg Shelajev",
                "  * @author Innokenty Shuvalov"
            ],
            "changed_files": [
                "src/main/java/org/zeroturnaround/zip/FileSource.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f25d0ad50e7991f5c21694c0737ccfe51567bec8",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1524810311,
            "hunks": 41,
            "message": "Removing pre java 8 stuff",
            "diff": [
                "diff --git a/src/main/java/org/zeroturnaround/zip/Java6FileApiPermissionsStrategy.java b/src/main/java/org/zeroturnaround/zip/Java6FileApiPermissionsStrategy.java",
                "deleted file mode 100644",
                "index 3e828d2..0000000",
                "--- a/src/main/java/org/zeroturnaround/zip/Java6FileApiPermissionsStrategy.java",
                "+++ /dev/null",
                "@@ -1,69 +0,0 @@",
                "-package org.zeroturnaround.zip;",
                "-",
                "-import java.io.File;",
                "-import java.lang.reflect.Method;",
                "-",
                "-class Java6FileApiPermissionsStrategy implements ZTFilePermissionsStrategy {",
                "-  private final Method canExecuteMethod;",
                "-  private final Method setExecutableMethod;",
                "-  private final Method setWritableMethod;",
                "-  private final Method setReadableMethod;",
                "-  ",
                "-  public Java6FileApiPermissionsStrategy() throws ZipException {",
                "-    canExecuteMethod = ZTZipReflectionUtil.getDeclaredMethod(File.class, \"canExecute\");",
                "-    setExecutableMethod = ZTZipReflectionUtil.getDeclaredMethod(File.class, \"setExecutable\", boolean.class, boolean.class);",
                "-    setReadableMethod = ZTZipReflectionUtil.getDeclaredMethod(File.class, \"setReadable\", boolean.class, boolean.class);",
                "-    setWritableMethod = ZTZipReflectionUtil.getDeclaredMethod(File.class, \"setWritable\", boolean.class, boolean.class);",
                "-  }",
                "-",
                "-  public ZTFilePermissions getPermissions(File file) {",
                "-    ZTFilePermissions permissions = new ZTFilePermissions();",
                "-    ",
                "-    permissions.setDirectory(file.isDirectory());",
                "-    ",
                "-    if (canExecute(file)) {",
                "-      // set execute flag only for owner",
                "-      permissions.setOwnerCanExecute(true);",
                "-    }",
                "-    ",
                "-    if (file.canWrite()) {",
                "-      // 0644 for files and 0666 for directories ",
                "-      // this is a quite common choice for shared installations",
                "-      permissions.setOwnerCanWrite(true); ",
                "-      if (file.isDirectory()) {",
                "-        permissions.setGroupCanWrite(true);",
                "-        permissions.setOthersCanWrite(true);",
                "-      }",
                "-    }",
                "-    ",
                "-    if (file.canRead()) {",
                "-      permissions.setOwnerCanRead(true);",
                "-      permissions.setGroupCanRead(true);",
                "-      permissions.setOthersCanRead(true);",
                "-    }",
                "-    ",
                "-    return permissions;",
                "-  }",
                "-",
                "-  public void setPermissions(File file, ZTFilePermissions permissions) {",
                "-    setExecutable(file, permissions.isOwnerCanExecute(), !permissions.isGroupCanExecute() && !permissions.isOthersCanExecute());",
                "-    setWritable(file, permissions.isOwnerCanWrite(), !permissions.isGroupCanWrite() && !permissions.isOthersCanWrite());",
                "-    setReadable(file, permissions.isOwnerCanRead(), !permissions.isGroupCanRead() && !permissions.isOthersCanRead());",
                "-  }",
                "-  ",
                "-  private boolean setExecutable(File file, boolean executable, boolean ownerOnly) {",
                "-    return (Boolean) ZTZipReflectionUtil.invoke(setExecutableMethod, file, executable, ownerOnly);",
                "-  }",
                "-  ",
                "-  private boolean setWritable(File file, boolean executable, boolean ownerOnly) {",
                "-    return (Boolean) ZTZipReflectionUtil.invoke(setWritableMethod, file, executable, ownerOnly);",
                "-  }",
                "-  ",
                "-  private boolean setReadable(File file, boolean executable, boolean ownerOnly) {",
                "-    return (Boolean) ZTZipReflectionUtil.invoke(setReadableMethod, file, executable, ownerOnly);",
                "-  }",
                "-  ",
                "-  private boolean canExecute(File file) {",
                "-    return (Boolean) ZTZipReflectionUtil.invoke(canExecuteMethod, file);",
                "-  }",
                "-}",
                "diff --git a/src/main/java/org/zeroturnaround/zip/ZTFilePermissionsUtil.java b/src/main/java/org/zeroturnaround/zip/ZTFilePermissionsUtil.java",
                "index b21bb80..293c067 100644",
                "--- a/src/main/java/org/zeroturnaround/zip/ZTFilePermissionsUtil.java",
                "+++ b/src/main/java/org/zeroturnaround/zip/ZTFilePermissionsUtil.java",
                "@@ -6,3 +6,3 @@ import java.io.File;",
                "  * Utilities to manipulate {@link ZTFilePermissions}.",
                "- * ",
                "+ *",
                "  * @author Viktor Karabut",
                "@@ -10,6 +10,6 @@ import java.io.File;",
                " class ZTFilePermissionsUtil {",
                "-  ",
                "+",
                "   private ZTFilePermissionsUtil() {",
                "   }",
                "-  ",
                "+",
                "   private static final int OWNER_READ_FLAG =     0400;",
                "@@ -17,3 +17,3 @@ class ZTFilePermissionsUtil {",
                "   private static final int OWNER_EXECUTE_FLAG =  0100;",
                "-  ",
                "+",
                "   private static final int GROUP_READ_FLAG =     0040;",
                "@@ -21,3 +21,3 @@ class ZTFilePermissionsUtil {",
                "   private static final int GROUP_EXECUTE_FLAG =  0010;",
                "-  ",
                "+",
                "   private static final int OTHERS_READ_FLAG =    0004;",
                "@@ -25,6 +25,6 @@ class ZTFilePermissionsUtil {",
                "   private static final int OTHERS_EXECUTE_FLAG = 0001;",
                "-  ",
                "+",
                "   /**",
                "    * Get most appropriate {@link ZTFilePermissionsStrategy} based on Java version and OS.",
                "-   * ",
                "+   *",
                "    * @return",
                "@@ -34,7 +34,7 @@ class ZTFilePermissionsUtil {",
                "   }",
                "-  ",
                "+",
                "   /**",
                "    * Convert {@link ZTFilePermissions} to POSIX file permission bit array.",
                "-   * ",
                "-   * ",
                "+   *",
                "+   *",
                "    * @param permissions permissions",
                "@@ -44,3 +44,3 @@ class ZTFilePermissionsUtil {",
                "     int mode = 0;",
                "-    ",
                "+",
                "     mode |= addFlag(permissions.isOwnerCanExecute(),  OWNER_EXECUTE_FLAG);",
                "@@ -48,3 +48,3 @@ class ZTFilePermissionsUtil {",
                "     mode |= addFlag(permissions.isOthersCanExecute(), OTHERS_EXECUTE_FLAG);",
                "-    ",
                "+",
                "     mode |= addFlag(permissions.isOwnerCanWrite(),  OWNER_WRITE_FLAG);",
                "@@ -52,3 +52,3 @@ class ZTFilePermissionsUtil {",
                "     mode |= addFlag(permissions.isOthersCanWrite(), OTHERS_WRITE_FLAG);",
                "-    ",
                "+",
                "     mode |= addFlag(permissions.isOwnerCanRead(),  OWNER_READ_FLAG);",
                "@@ -56,6 +56,6 @@ class ZTFilePermissionsUtil {",
                "     mode |= addFlag(permissions.isOthersCanRead(), OTHERS_READ_FLAG);",
                "-    ",
                "+",
                "     return mode;",
                "   }",
                "-  ",
                "+",
                "   private static int addFlag(boolean condition, int flag) {",
                "@@ -63,6 +63,6 @@ class ZTFilePermissionsUtil {",
                "   }",
                "-  ",
                "+",
                "   /**",
                "    * Convert Posix mode to {@link ZTFilePermissions}",
                "-   * ",
                "+   *",
                "    * @param mode",
                "@@ -72,3 +72,3 @@ class ZTFilePermissionsUtil {",
                "     ZTFilePermissions permissions = new ZTFilePermissions();",
                "-    ",
                "+",
                "     permissions.setOwnerCanExecute( (mode &  OWNER_EXECUTE_FLAG)  > 0 );",
                "@@ -76,3 +76,3 @@ class ZTFilePermissionsUtil {",
                "     permissions.setOthersCanExecute((mode &  OTHERS_EXECUTE_FLAG) > 0 );",
                "-    ",
                "+",
                "     permissions.setOwnerCanWrite( (mode &  OWNER_WRITE_FLAG)  > 0 );",
                "@@ -80,3 +80,3 @@ class ZTFilePermissionsUtil {",
                "     permissions.setOthersCanWrite((mode &  OTHERS_WRITE_FLAG) > 0 );",
                "-    ",
                "+",
                "     permissions.setOwnerCanRead( (mode &  OWNER_READ_FLAG)  > 0 );",
                "@@ -84,6 +84,6 @@ class ZTFilePermissionsUtil {",
                "     permissions.setOthersCanRead((mode &  OTHERS_READ_FLAG) > 0 );",
                "-    ",
                "+",
                "     return permissions;",
                "   }",
                "-  ",
                "+",
                "   /**",
                "@@ -95,3 +95,3 @@ class ZTFilePermissionsUtil {",
                "     }",
                "-    ",
                "+",
                "     public ZTFilePermissions getPermissions(File file) {",
                "@@ -101,12 +101,8 @@ class ZTFilePermissionsUtil {",
                "   };",
                "-  ",
                "+",
                "   private static final ZTFilePermissionsStrategy DEFAULT_STRATEGY = fetchDefaultStrategy();",
                "-  ",
                "+",
                "   private static ZTFilePermissionsStrategy fetchDefaultStrategy() {",
                "     ZTFilePermissionsStrategy strategy = tryInstantiateStrategy(Java7Nio2ApiPermissionsStrategy.class);",
                "-    ",
                "-    if (strategy == null) {",
                "-      strategy = tryInstantiateStrategy(Java6FileApiPermissionsStrategy.class);",
                "-    }",
                "-    ",
                "+",
                "     if (strategy == null) {",
                "@@ -114,6 +110,6 @@ class ZTFilePermissionsUtil {",
                "     }",
                "-    ",
                "+",
                "     return strategy;",
                "   }",
                "-  ",
                "+",
                "   private static ZTFilePermissionsStrategy tryInstantiateStrategy(Class<? extends ZTFilePermissionsStrategy> clazz) {",
                "@@ -127,3 +123,3 @@ class ZTFilePermissionsUtil {",
                "   }",
                "-  ",
                "+",
                " }",
                "diff --git a/src/main/java/org/zeroturnaround/zip/ZipEntryUtil.java b/src/main/java/org/zeroturnaround/zip/ZipEntryUtil.java",
                "index 917a506..80cf7a4 100644",
                "--- a/src/main/java/org/zeroturnaround/zip/ZipEntryUtil.java",
                "+++ b/src/main/java/org/zeroturnaround/zip/ZipEntryUtil.java",
                "@@ -29,3 +29,3 @@ import org.zeroturnaround.zip.extra.ExtraFieldUtils;",
                " import org.zeroturnaround.zip.extra.ZipExtraField;",
                "-import org.zeroturnaround.zip.timestamps.TimestampStrategyFactory;",
                "+import org.zeroturnaround.zip.timestamps.TimestampStrategy;",
                "@@ -108,3 +108,3 @@ class ZipEntryUtil {",
                "     if (preserveTimestamps) {",
                "-      TimestampStrategyFactory.getInstance().setTime(copy, originalEntry);",
                "+      TimestampStrategy.setTime(copy, originalEntry);",
                "     }",
                "@@ -113,3 +113,3 @@ class ZipEntryUtil {",
                "     }",
                "-    ",
                "+",
                "     addEntry(copy, new BufferedInputStream(in), out);",
                "@@ -137,3 +137,3 @@ class ZipEntryUtil {",
                "    * Create new Zip entry and fill it with associated with file meta-info",
                "-   * ",
                "+   *",
                "    * @param name Zip entry name",
                "@@ -159,3 +159,3 @@ class ZipEntryUtil {",
                "    * Current implementation adds \"ASi Unix\" (tag 0x756e) extra block to entry.",
                "-   * ",
                "+   *",
                "    * @param zipEntry ZIP entry",
                "@@ -185,3 +185,3 @@ class ZipEntryUtil {",
                "    * \"ASi Unix\"",
                "-   * ",
                "+   *",
                "    * @param zipEntry",
                "diff --git a/src/main/java/org/zeroturnaround/zip/timestamps/Java8TimestampStrategy.java b/src/main/java/org/zeroturnaround/zip/timestamps/Java8TimestampStrategy.java",
                "deleted file mode 100644",
                "index e5b7256..0000000",
                "--- a/src/main/java/org/zeroturnaround/zip/timestamps/Java8TimestampStrategy.java",
                "+++ /dev/null",
                "@@ -1,50 +0,0 @@",
                "-package org.zeroturnaround.zip.timestamps;",
                "-import java.nio.file.attribute.FileTime;",
                "-/**",
                "- *    Copyright (C) 2012 ZeroTurnaround LLC <support@zeroturnaround.com>",
                "- *",
                "- *    Licensed under the Apache License, Version 2.0 (the \"License\");",
                "- *    you may not use this file except in compliance with the License.",
                "- *    You may obtain a copy of the License at",
                "- *",
                "- *        http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- *    Unless required by applicable law or agreed to in writing, software",
                "- *    distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- *    See the License for the specific language governing permissions and",
                "- *    limitations under the License.",
                "- */",
                "-import java.util.zip.ZipEntry;",
                "-",
                "-/**",
                "- * This strategy will call lastModifiedTime, creationTime and",
                "- * lastAccessTime methods (added in Java 8). Don't use this class unless",
                "- * you are running Java 8.",
                "- * ",
                "- * @since 1.9",
                "- */",
                "-public class Java8TimestampStrategy implements TimestampStrategy {",
                "-",
                "-  public void setTime(ZipEntry newInstance, ZipEntry oldInstance) {",
                "-    {",
                "-      FileTime time = oldInstance.getCreationTime();",
                "-      if (time != null) {",
                "-        newInstance.setCreationTime(time);",
                "-      }",
                "-    }",
                "-    {",
                "-      FileTime time = oldInstance.getLastModifiedTime();",
                "-      if (time != null) {",
                "-        newInstance.setLastModifiedTime(time);",
                "-      }",
                "-    }",
                "-    {",
                "-      FileTime time = oldInstance.getLastAccessTime();",
                "-      if (time != null) {",
                "-        newInstance.setLastAccessTime(time);",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-}",
                "diff --git a/src/main/java/org/zeroturnaround/zip/timestamps/PreJava8TimestampStrategy.java b/src/main/java/org/zeroturnaround/zip/timestamps/PreJava8TimestampStrategy.java",
                "deleted file mode 100644",
                "index 18e7f87..0000000",
                "--- a/src/main/java/org/zeroturnaround/zip/timestamps/PreJava8TimestampStrategy.java",
                "+++ /dev/null",
                "@@ -1,33 +0,0 @@",
                "-package org.zeroturnaround.zip.timestamps;",
                "-/**",
                "- *    Copyright (C) 2012 ZeroTurnaround LLC <support@zeroturnaround.com>",
                "- *",
                "- *    Licensed under the Apache License, Version 2.0 (the \"License\");",
                "- *    you may not use this file except in compliance with the License.",
                "- *    You may obtain a copy of the License at",
                "- *",
                "- *        http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- *    Unless required by applicable law or agreed to in writing, software",
                "- *    distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- *    See the License for the specific language governing permissions and",
                "- *    limitations under the License.",
                "- */",
                "-import java.util.zip.ZipEntry;",
                "-",
                "-/**",
                "- * Setting the timestamp in pre-java-8 environments.",
                "- * ",
                "- * @since 1.9",
                "- */",
                "-public class PreJava8TimestampStrategy implements TimestampStrategy {",
                "-",
                "-  public void setTime(ZipEntry newInstance, ZipEntry oldInstance) {",
                "-    long time = oldInstance.getTime();",
                "-    if (time != -1) {",
                "-      newInstance.setTime(time);",
                "-    }",
                "-  }",
                "-",
                "-}",
                "diff --git a/src/main/java/org/zeroturnaround/zip/timestamps/TimestampStrategy.java b/src/main/java/org/zeroturnaround/zip/timestamps/TimestampStrategy.java",
                "index d7d5dee..0237177 100644",
                "--- a/src/main/java/org/zeroturnaround/zip/timestamps/TimestampStrategy.java",
                "+++ b/src/main/java/org/zeroturnaround/zip/timestamps/TimestampStrategy.java",
                "@@ -1,2 +1,4 @@",
                " package org.zeroturnaround.zip.timestamps;",
                "+",
                "+import java.nio.file.attribute.FileTime;",
                " /**",
                "@@ -19,10 +21,30 @@ import java.util.zip.ZipEntry;",
                " /**",
                "- * Strategy that we use to differentiate between JDK8 and older JDK",
                "- * ZipEntry method calls. ",
                "- * ",
                "+ * This strategy will call lastModifiedTime, creationTime and",
                "+ * lastAccessTime methods (added in Java 8). Don't use this class unless",
                "+ * you are running Java 8.",
                "+ *",
                "  * @since 1.9",
                "  */",
                "-public interface TimestampStrategy {",
                "+public class TimestampStrategy {",
                "-  void setTime(ZipEntry newInstance, ZipEntry oldInstance);",
                "+  public static void setTime(ZipEntry newInstance, ZipEntry oldInstance) {",
                "+    {",
                "+      FileTime time = oldInstance.getCreationTime();",
                "+      if (time != null) {",
                "+        newInstance.setCreationTime(time);",
                "+      }",
                "+    }",
                "+    {",
                "+      FileTime time = oldInstance.getLastModifiedTime();",
                "+      if (time != null) {",
                "+        newInstance.setLastModifiedTime(time);",
                "+      }",
                "+    }",
                "+    {",
                "+      FileTime time = oldInstance.getLastAccessTime();",
                "+      if (time != null) {",
                "+        newInstance.setLastAccessTime(time);",
                "+      }",
                "+    }",
                "+  }",
                "diff --git a/src/main/java/org/zeroturnaround/zip/timestamps/TimestampStrategyFactory.java b/src/main/java/org/zeroturnaround/zip/timestamps/TimestampStrategyFactory.java",
                "deleted file mode 100644",
                "index 76116a4..0000000",
                "--- a/src/main/java/org/zeroturnaround/zip/timestamps/TimestampStrategyFactory.java",
                "+++ /dev/null",
                "@@ -1,57 +0,0 @@",
                "-package org.zeroturnaround.zip.timestamps;",
                "-/**",
                "- *    Copyright (C) 2012 ZeroTurnaround LLC <support@zeroturnaround.com>",
                "- *",
                "- *    Licensed under the Apache License, Version 2.0 (the \"License\");",
                "- *    you may not use this file except in compliance with the License.",
                "- *    You may obtain a copy of the License at",
                "- *",
                "- *        http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- *    Unless required by applicable law or agreed to in writing, software",
                "- *    distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- *    See the License for the specific language governing permissions and",
                "- *    limitations under the License.",
                "- */",
                "-",
                "-import java.util.zip.ZipEntry;",
                "-",
                "-/**",
                "- * The getInstance() of this method will return a JDK8 implementation when",
                "- * running on JVM 8 and a no operation instance when running on older JVM.",
                "- * ",
                "- * @since 1.9",
                "- */",
                "-public class TimestampStrategyFactory {",
                "-",
                "-  public static boolean HAS_ZIP_ENTRY_FILE_TIME_METHODS = hasZipEntryFileTimeMethods();",
                "-",
                "-  private static TimestampStrategy INSTANCE = getStrategy();",
                "-",
                "-  private TimestampStrategyFactory() {",
                "-  }",
                "-",
                "-  private static boolean hasZipEntryFileTimeMethods() {",
                "-    try {",
                "-      ZipEntry.class.getDeclaredMethod(\"getCreationTime\");",
                "-      return true;",
                "-    }",
                "-    catch (Exception e) {",
                "-      return false;",
                "-    }",
                "-  }",
                "-",
                "-  private static TimestampStrategy getStrategy() {",
                "-    if (HAS_ZIP_ENTRY_FILE_TIME_METHODS) {",
                "-      return new Java8TimestampStrategy();",
                "-    }",
                "-    else {",
                "-      return new PreJava8TimestampStrategy();",
                "-    }",
                "-  }",
                "-  ",
                "-  public static TimestampStrategy getInstance() {",
                "-    return INSTANCE;",
                "-  }",
                "-}"
            ],
            "changed_files": [
                "src/main/java/org/zeroturnaround/zip/Java6FileApiPermissionsStrategy.java",
                "src/main/java/org/zeroturnaround/zip/ZTFilePermissionsUtil.java",
                "src/main/java/org/zeroturnaround/zip/ZipEntryUtil.java",
                "src/main/java/org/zeroturnaround/zip/timestamps/Java8TimestampStrategy.java",
                "src/main/java/org/zeroturnaround/zip/timestamps/PreJava8TimestampStrategy.java",
                "src/main/java/org/zeroturnaround/zip/timestamps/TimestampStrategy.java",
                "src/main/java/org/zeroturnaround/zip/timestamps/TimestampStrategyFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: file, entry",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a8d3484f59515e0909d2cd686d3f63c973fe1a3f",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1524754797,
            "hunks": 4,
            "message": "Added Maven Wrapper to the project, mvn ver 3.5.2",
            "diff": [
                "diff --git a/.mvn/wrapper/MavenWrapperDownloader.java b/.mvn/wrapper/MavenWrapperDownloader.java",
                "new file mode 100755",
                "index 0000000..d475a89",
                "--- /dev/null",
                "+++ b/.mvn/wrapper/MavenWrapperDownloader.java",
                "@@ -0,0 +1,110 @@",
                "+/*",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+*/",
                "+",
                "+import java.net.*;",
                "+import java.io.*;",
                "+import java.nio.channels.*;",
                "+import java.util.Properties;",
                "+",
                "+public class MavenWrapperDownloader {",
                "+",
                "+    /**",
                "+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.",
                "+     */",
                "+    private static final String DEFAULT_DOWNLOAD_URL =",
                "+            \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar\";",
                "+",
                "+    /**",
                "+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to",
                "+     * use instead of the default one.",
                "+     */",
                "+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =",
                "+            \".mvn/wrapper/maven-wrapper.properties\";",
                "+",
                "+    /**",
                "+     * Path where the maven-wrapper.jar will be saved to.",
                "+     */",
                "+    private static final String MAVEN_WRAPPER_JAR_PATH =",
                "+            \".mvn/wrapper/maven-wrapper.jar\";",
                "+",
                "+    /**",
                "+     * Name of the property which should be used to override the default download url for the wrapper.",
                "+     */",
                "+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";",
                "+",
                "+    public static void main(String args[]) {",
                "+        System.out.println(\"- Downloader started\");",
                "+        File baseDirectory = new File(args[0]);",
                "+        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());",
                "+",
                "+        // If the maven-wrapper.properties exists, read it and check if it contains a custom",
                "+        // wrapperUrl parameter.",
                "+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);",
                "+        String url = DEFAULT_DOWNLOAD_URL;",
                "+        if(mavenWrapperPropertyFile.exists()) {",
                "+            FileInputStream mavenWrapperPropertyFileInputStream = null;",
                "+            try {",
                "+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);",
                "+                Properties mavenWrapperProperties = new Properties();",
                "+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);",
                "+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);",
                "+            } catch (IOException e) {",
                "+                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");",
                "+            } finally {",
                "+                try {",
                "+                    if(mavenWrapperPropertyFileInputStream != null) {",
                "+                        mavenWrapperPropertyFileInputStream.close();",
                "+                    }",
                "+                } catch (IOException e) {",
                "+                    // Ignore ...",
                "+                }",
                "+            }",
                "+        }",
                "+        System.out.println(\"- Downloading from: : \" + url);",
                "+",
                "+        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);",
                "+        if(!outputFile.getParentFile().exists()) {",
                "+            if(!outputFile.getParentFile().mkdirs()) {",
                "+                System.out.println(",
                "+                        \"- ERROR creating output direcrory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");",
                "+            }",
                "+        }",
                "+        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());",
                "+        try {",
                "+            downloadFileFromURL(url, outputFile);",
                "+            System.out.println(\"Done\");",
                "+            System.exit(0);",
                "+        } catch (Throwable e) {",
                "+            System.out.println(\"- Error downloading\");",
                "+            e.printStackTrace();",
                "+            System.exit(1);",
                "+        }",
                "+    }",
                "+",
                "+    private static void downloadFileFromURL(String urlString, File destination) throws Exception {",
                "+        URL website = new URL(urlString);",
                "+        ReadableByteChannel rbc;",
                "+        rbc = Channels.newChannel(website.openStream());",
                "+        FileOutputStream fos = new FileOutputStream(destination);",
                "+        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);",
                "+        fos.close();",
                "+        rbc.close();",
                "+    }",
                "+",
                "+}",
                "diff --git a/.mvn/wrapper/maven-wrapper.jar b/.mvn/wrapper/maven-wrapper.jar",
                "new file mode 100755",
                "index 0000000..08ebbb6",
                "Binary files /dev/null and b/.mvn/wrapper/maven-wrapper.jar differ",
                "diff --git a/.mvn/wrapper/maven-wrapper.properties b/.mvn/wrapper/maven-wrapper.properties",
                "new file mode 100755",
                "index 0000000..a5fcc11",
                "--- /dev/null",
                "+++ b/.mvn/wrapper/maven-wrapper.properties",
                "@@ -0,0 +1 @@",
                "+distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.5.2/apache-maven-3.5.2-bin.zip",
                "\\ No newline at end of file",
                "diff --git a/mvnw b/mvnw",
                "new file mode 100755",
                "index 0000000..961a825",
                "--- /dev/null",
                "+++ b/mvnw",
                "@@ -0,0 +1,286 @@",
                "+#!/bin/sh",
                "+# ----------------------------------------------------------------------------",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#    http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+# ----------------------------------------------------------------------------",
                "+",
                "+# ----------------------------------------------------------------------------",
                "+# Maven2 Start Up Batch script",
                "+#",
                "+# Required ENV vars:",
                "+# ------------------",
                "+#   JAVA_HOME - location of a JDK home dir",
                "+#",
                "+# Optional ENV vars",
                "+# -----------------",
                "+#   M2_HOME - location of maven2's installed home dir",
                "+#   MAVEN_OPTS - parameters passed to the Java VM when running Maven",
                "+#     e.g. to debug Maven itself, use",
                "+#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000",
                "+#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files",
                "+# ----------------------------------------------------------------------------",
                "+",
                "+if [ -z \"$MAVEN_SKIP_RC\" ] ; then",
                "+",
                "+  if [ -f /etc/mavenrc ] ; then",
                "+    . /etc/mavenrc",
                "+  fi",
                "+",
                "+  if [ -f \"$HOME/.mavenrc\" ] ; then",
                "+    . \"$HOME/.mavenrc\"",
                "+  fi",
                "+",
                "+fi",
                "+",
                "+# OS specific support.  $var _must_ be set to either true or false.",
                "+cygwin=false;",
                "+darwin=false;",
                "+mingw=false",
                "+case \"`uname`\" in",
                "+  CYGWIN*) cygwin=true ;;",
                "+  MINGW*) mingw=true;;",
                "+  Darwin*) darwin=true",
                "+    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home",
                "+    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html",
                "+    if [ -z \"$JAVA_HOME\" ]; then",
                "+      if [ -x \"/usr/libexec/java_home\" ]; then",
                "+        export JAVA_HOME=\"`/usr/libexec/java_home`\"",
                "+      else",
                "+        export JAVA_HOME=\"/Library/Java/Home\"",
                "+      fi",
                "+    fi",
                "+    ;;",
                "+esac",
                "+",
                "+if [ -z \"$JAVA_HOME\" ] ; then",
                "+  if [ -r /etc/gentoo-release ] ; then",
                "+    JAVA_HOME=`java-config --jre-home`",
                "+  fi",
                "+fi",
                "+",
                "+if [ -z \"$M2_HOME\" ] ; then",
                "+  ## resolve links - $0 may be a link to maven's home",
                "+  PRG=\"$0\"",
                "+",
                "+  # need this for relative symlinks",
                "+  while [ -h \"$PRG\" ] ; do",
                "+    ls=`ls -ld \"$PRG\"`",
                "+    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`",
                "+    if expr \"$link\" : '/.*' > /dev/null; then",
                "+      PRG=\"$link\"",
                "+    else",
                "+      PRG=\"`dirname \"$PRG\"`/$link\"",
                "+    fi",
                "+  done",
                "+",
                "+  saveddir=`pwd`",
                "+",
                "+  M2_HOME=`dirname \"$PRG\"`/..",
                "+",
                "+  # make it fully qualified",
                "+  M2_HOME=`cd \"$M2_HOME\" && pwd`",
                "+",
                "+  cd \"$saveddir\"",
                "+  # echo Using m2 at $M2_HOME",
                "+fi",
                "+",
                "+# For Cygwin, ensure paths are in UNIX format before anything is touched",
                "+if $cygwin ; then",
                "+  [ -n \"$M2_HOME\" ] &&",
                "+    M2_HOME=`cygpath --unix \"$M2_HOME\"`",
                "+  [ -n \"$JAVA_HOME\" ] &&",
                "+    JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`",
                "+  [ -n \"$CLASSPATH\" ] &&",
                "+    CLASSPATH=`cygpath --path --unix \"$CLASSPATH\"`",
                "+fi",
                "+",
                "+# For Mingw, ensure paths are in UNIX format before anything is touched",
                "+if $mingw ; then",
                "+  [ -n \"$M2_HOME\" ] &&",
                "+    M2_HOME=\"`(cd \"$M2_HOME\"; pwd)`\"",
                "+  [ -n \"$JAVA_HOME\" ] &&",
                "+    JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"",
                "+  # TODO classpath?",
                "+fi",
                "+",
                "+if [ -z \"$JAVA_HOME\" ]; then",
                "+  javaExecutable=\"`which javac`\"",
                "+  if [ -n \"$javaExecutable\" ] && ! [ \"`expr \\\"$javaExecutable\\\" : '\\([^ ]*\\)'`\" = \"no\" ]; then",
                "+    # readlink(1) is not available as standard on Solaris 10.",
                "+    readLink=`which readlink`",
                "+    if [ ! `expr \"$readLink\" : '\\([^ ]*\\)'` = \"no\" ]; then",
                "+      if $darwin ; then",
                "+        javaHome=\"`dirname \\\"$javaExecutable\\\"`\"",
                "+        javaExecutable=\"`cd \\\"$javaHome\\\" && pwd -P`/javac\"",
                "+      else",
                "+        javaExecutable=\"`readlink -f \\\"$javaExecutable\\\"`\"",
                "+      fi",
                "+      javaHome=\"`dirname \\\"$javaExecutable\\\"`\"",
                "+      javaHome=`expr \"$javaHome\" : '\\(.*\\)/bin'`",
                "+      JAVA_HOME=\"$javaHome\"",
                "+      export JAVA_HOME",
                "+    fi",
                "+  fi",
                "+fi",
                "+",
                "+if [ -z \"$JAVACMD\" ] ; then",
                "+  if [ -n \"$JAVA_HOME\"  ] ; then",
                "+    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then",
                "+      # IBM's JDK on AIX uses strange locations for the executables",
                "+      JAVACMD=\"$JAVA_HOME/jre/sh/java\"",
                "+    else",
                "+      JAVACMD=\"$JAVA_HOME/bin/java\"",
                "+    fi",
                "+  else",
                "+    JAVACMD=\"`which java`\"",
                "+  fi",
                "+fi",
                "+",
                "+if [ ! -x \"$JAVACMD\" ] ; then",
                "+  echo \"Error: JAVA_HOME is not defined correctly.\" >&2",
                "+  echo \"  We cannot execute $JAVACMD\" >&2",
                "+  exit 1",
                "+fi",
                "+",
                "+if [ -z \"$JAVA_HOME\" ] ; then",
                "+  echo \"Warning: JAVA_HOME environment variable is not set.\"",
                "+fi",
                "+",
                "+CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher",
                "+",
                "+# traverses directory structure from process work directory to filesystem root",
                "+# first directory with .mvn subdirectory is considered project base directory",
                "+find_maven_basedir() {",
                "+",
                "+  if [ -z \"$1\" ]",
                "+  then",
                "+    echo \"Path not specified to find_maven_basedir\"",
                "+    return 1",
                "+  fi",
                "+",
                "+  basedir=\"$1\"",
                "+  wdir=\"$1\"",
                "+  while [ \"$wdir\" != '/' ] ; do",
                "+    if [ -d \"$wdir\"/.mvn ] ; then",
                "+      basedir=$wdir",
                "+      break",
                "+    fi",
                "+    # workaround for JBEAP-8937 (on Solaris 10/Sparc)",
                "+    if [ -d \"${wdir}\" ]; then",
                "+      wdir=`cd \"$wdir/..\"; pwd`",
                "+    fi",
                "+    # end of workaround",
                "+  done",
                "+  echo \"${basedir}\"",
                "+}",
                "+",
                "+# concatenates all lines of a file",
                "+concat_lines() {",
                "+  if [ -f \"$1\" ]; then",
                "+    echo \"$(tr -s '\\n' ' ' < \"$1\")\"",
                "+  fi",
                "+}",
                "+",
                "+BASE_DIR=`find_maven_basedir \"$(pwd)\"`",
                "+if [ -z \"$BASE_DIR\" ]; then",
                "+  exit 1;",
                "+fi",
                "+",
                "+##########################################################################################",
                "+# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central",
                "+# This allows using the maven wrapper in projects that prohibit checking in binary data.",
                "+##########################################################################################",
                "+if [ -r \"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\" ]; then",
                "+    if [ \"$MVNW_VERBOSE\" = true ]; then",
                "+      echo \"Found .mvn/wrapper/maven-wrapper.jar\"",
                "+    fi",
                "+else",
                "+    if [ \"$MVNW_VERBOSE\" = true ]; then",
                "+      echo \"Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ...\"",
                "+    fi",
                "+    jarUrl=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar\"",
                "+    while IFS=\"=\" read key value; do",
                "+      case \"$key\" in (wrapperUrl) jarUrl=\"$value\"; break ;;",
                "+      esac",
                "+    done < \"$BASE_DIR/.mvn/wrapper/maven-wrapper.properties\"",
                "+    if [ \"$MVNW_VERBOSE\" = true ]; then",
                "+      echo \"Downloading from: $jarUrl\"",
                "+    fi",
                "+    wrapperJarPath=\"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\"",
                "+",
                "+    if command -v wget > /dev/null; then",
                "+        if [ \"$MVNW_VERBOSE\" = true ]; then",
                "+          echo \"Found wget ... using wget\"",
                "+        fi",
                "+        wget \"$jarUrl\" -O \"$wrapperJarPath\"",
                "+    elif command -v curl > /dev/null; then",
                "+        if [ \"$MVNW_VERBOSE\" = true ]; then",
                "+          echo \"Found curl ... using curl\"",
                "+        fi",
                "+        curl -o \"$wrapperJarPath\" \"$jarUrl\"",
                "+    else",
                "+        if [ \"$MVNW_VERBOSE\" = true ]; then",
                "+          echo \"Falling back to using Java to download\"",
                "+        fi",
                "+        javaClass=\"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java\"",
                "+        if [ -e \"$javaClass\" ]; then",
                "+            if [ ! -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then",
                "+                if [ \"$MVNW_VERBOSE\" = true ]; then",
                "+                  echo \" - Compiling MavenWrapperDownloader.java ...\"",
                "+                fi",
                "+                # Compiling the Java class",
                "+                (\"$JAVA_HOME/bin/javac\" \"$javaClass\")",
                "+            fi",
                "+            if [ -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then",
                "+                # Running the downloader",
                "+                if [ \"$MVNW_VERBOSE\" = true ]; then",
                "+                  echo \" - Running MavenWrapperDownloader.java ...\"",
                "+                fi",
                "+                (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$MAVEN_PROJECTBASEDIR\")",
                "+            fi",
                "+        fi",
                "+    fi",
                "+fi",
                "+##########################################################################################",
                "+# End of extension",
                "+##########################################################################################",
                "+",
                "+export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}",
                "+if [ \"$MVNW_VERBOSE\" = true ]; then",
                "+  echo $MAVEN_PROJECTBASEDIR",
                "+fi",
                "+MAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"",
                "+",
                "+# For Cygwin, switch paths to Windows format before running java",
                "+if $cygwin; then",
                "+  [ -n \"$M2_HOME\" ] &&",
                "+    M2_HOME=`cygpath --path --windows \"$M2_HOME\"`",
                "+  [ -n \"$JAVA_HOME\" ] &&",
                "+    JAVA_HOME=`cygpath --path --windows \"$JAVA_HOME\"`",
                "+  [ -n \"$CLASSPATH\" ] &&",
                "+    CLASSPATH=`cygpath --path --windows \"$CLASSPATH\"`",
                "+  [ -n \"$MAVEN_PROJECTBASEDIR\" ] &&",
                "+    MAVEN_PROJECTBASEDIR=`cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\"`",
                "+fi",
                "+",
                "+WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain",
                "+",
                "+exec \"$JAVACMD\" \\",
                "+  $MAVEN_OPTS \\",
                "+  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\",
                "+  \"-Dmaven.home=${M2_HOME}\" \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\",
                "+  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\"",
                "diff --git a/mvnw.cmd b/mvnw.cmd",
                "new file mode 100755",
                "index 0000000..03d90e9",
                "--- /dev/null",
                "+++ b/mvnw.cmd",
                "@@ -0,0 +1,161 @@",
                "+@REM ----------------------------------------------------------------------------",
                "+@REM Licensed to the Apache Software Foundation (ASF) under one",
                "+@REM or more contributor license agreements.  See the NOTICE file",
                "+@REM distributed with this work for additional information",
                "+@REM regarding copyright ownership.  The ASF licenses this file",
                "+@REM to you under the Apache License, Version 2.0 (the",
                "+@REM \"License\"); you may not use this file except in compliance",
                "+@REM with the License.  You may obtain a copy of the License at",
                "+@REM",
                "+@REM    http://www.apache.org/licenses/LICENSE-2.0",
                "+@REM",
                "+@REM Unless required by applicable law or agreed to in writing,",
                "+@REM software distributed under the License is distributed on an",
                "+@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+@REM KIND, either express or implied.  See the License for the",
                "+@REM specific language governing permissions and limitations",
                "+@REM under the License.",
                "+@REM ----------------------------------------------------------------------------",
                "+",
                "+@REM ----------------------------------------------------------------------------",
                "+@REM Maven2 Start Up Batch script",
                "+@REM",
                "+@REM Required ENV vars:",
                "+@REM JAVA_HOME - location of a JDK home dir",
                "+@REM",
                "+@REM Optional ENV vars",
                "+@REM M2_HOME - location of maven2's installed home dir",
                "+@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands",
                "+@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a key stroke before ending",
                "+@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven",
                "+@REM     e.g. to debug Maven itself, use",
                "+@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000",
                "+@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files",
                "+@REM ----------------------------------------------------------------------------",
                "+",
                "+@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'",
                "+@echo off",
                "+@REM set title of command window",
                "+title %0",
                "+@REM enable echoing my setting MAVEN_BATCH_ECHO to 'on'",
                "+@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%",
                "+",
                "+@REM set %HOME% to equivalent of $HOME",
                "+if \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")",
                "+",
                "+@REM Execute a user defined script before this one",
                "+if not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre",
                "+@REM check for pre script, once with legacy .bat ending and once with .cmd ending",
                "+if exist \"%HOME%\\mavenrc_pre.bat\" call \"%HOME%\\mavenrc_pre.bat\"",
                "+if exist \"%HOME%\\mavenrc_pre.cmd\" call \"%HOME%\\mavenrc_pre.cmd\"",
                "+:skipRcPre",
                "+",
                "+@setlocal",
                "+",
                "+set ERROR_CODE=0",
                "+",
                "+@REM To isolate internal variables from possible post scripts, we use another setlocal",
                "+@setlocal",
                "+",
                "+@REM ==== START VALIDATION ====",
                "+if not \"%JAVA_HOME%\" == \"\" goto OkJHome",
                "+",
                "+echo.",
                "+echo Error: JAVA_HOME not found in your environment. >&2",
                "+echo Please set the JAVA_HOME variable in your environment to match the >&2",
                "+echo location of your Java installation. >&2",
                "+echo.",
                "+goto error",
                "+",
                "+:OkJHome",
                "+if exist \"%JAVA_HOME%\\bin\\java.exe\" goto init",
                "+",
                "+echo.",
                "+echo Error: JAVA_HOME is set to an invalid directory. >&2",
                "+echo JAVA_HOME = \"%JAVA_HOME%\" >&2",
                "+echo Please set the JAVA_HOME variable in your environment to match the >&2",
                "+echo location of your Java installation. >&2",
                "+echo.",
                "+goto error",
                "+",
                "+@REM ==== END VALIDATION ====",
                "+",
                "+:init",
                "+",
                "+@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".",
                "+@REM Fallback to current working directory if not found.",
                "+",
                "+set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%",
                "+IF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir",
                "+",
                "+set EXEC_DIR=%CD%",
                "+set WDIR=%EXEC_DIR%",
                "+:findBaseDir",
                "+IF EXIST \"%WDIR%\"\\.mvn goto baseDirFound",
                "+cd ..",
                "+IF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound",
                "+set WDIR=%CD%",
                "+goto findBaseDir",
                "+",
                "+:baseDirFound",
                "+set MAVEN_PROJECTBASEDIR=%WDIR%",
                "+cd \"%EXEC_DIR%\"",
                "+goto endDetectBaseDir",
                "+",
                "+:baseDirNotFound",
                "+set MAVEN_PROJECTBASEDIR=%EXEC_DIR%",
                "+cd \"%EXEC_DIR%\"",
                "+",
                "+:endDetectBaseDir",
                "+",
                "+IF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig",
                "+",
                "+@setlocal EnableExtensions EnableDelayedExpansion",
                "+for /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a",
                "+@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%",
                "+",
                "+:endReadAdditionalConfig",
                "+",
                "+SET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"",
                "+set WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"",
                "+set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain",
                "+",
                "+set DOWNLOAD_URL=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.0/maven-wrapper-0.4.0.jar\"",
                "+FOR /F \"tokens=1,2 delims==\" %%A IN (%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties) DO (",
                "+\tIF \"%%A\"==\"wrapperUrl\" SET DOWNLOAD_URL=%%B ",
                "+)",
                "+",
                "+@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central",
                "+@REM This allows using the maven wrapper in projects that prohibit checking in binary data.",
                "+if exist %WRAPPER_JAR% (",
                "+    echo Found %WRAPPER_JAR%",
                "+) else (",
                "+    echo Couldn't find %WRAPPER_JAR%, downloading it ...",
                "+\techo Downloading from: %DOWNLOAD_URL%",
                "+    powershell -Command \"(New-Object Net.WebClient).DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')\"",
                "+    echo Finished downloading %WRAPPER_JAR%",
                "+)",
                "+@REM End of extension",
                "+",
                "+%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*",
                "+if ERRORLEVEL 1 goto error",
                "+goto end",
                "+",
                "+:error",
                "+set ERROR_CODE=1",
                "+",
                "+:end",
                "+@endlocal & set ERROR_CODE=%ERROR_CODE%",
                "+",
                "+if not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPost",
                "+@REM check for post script, once with legacy .bat ending and once with .cmd ending",
                "+if exist \"%HOME%\\mavenrc_post.bat\" call \"%HOME%\\mavenrc_post.bat\"",
                "+if exist \"%HOME%\\mavenrc_post.cmd\" call \"%HOME%\\mavenrc_post.cmd\"",
                "+:skipRcPost",
                "+",
                "+@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'",
                "+if \"%MAVEN_BATCH_PAUSE%\" == \"on\" pause",
                "+",
                "+if \"%MAVEN_TERMINATE_CMD%\" == \"on\" exit %ERROR_CODE%",
                "+",
                "+exit /B %ERROR_CODE%"
            ],
            "changed_files": [
                ".mvn/wrapper/MavenWrapperDownloader.java",
                ".mvn/wrapper/maven-wrapper.jar",
                ".mvn/wrapper/maven-wrapper.properties",
                "mvnw",
                "mvnw.cmd"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "zt-zip-1.13",
                "zt-zip-1.14",
                "zt-zip-1.15",
                "zt-zip-1.16",
                "zt-zip-1.17"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5c68d2644037bc6a757c2069283acfcd60850761",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1524754815,
            "hunks": 1,
            "message": "Changed Travis to use the maven wrapper",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 56c6dfc..a97aedf 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -14,2 +14,2 @@ script:",
                "   - jdk_switcher use $TRAVIS_JDK_VERSION",
                "-  - mvn test -Dmaven.javadoc.skip=true",
                "+  - ./mvnw test -Dmaven.javadoc.skip=true"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "zt-zip-1.13",
                "zt-zip-1.14",
                "zt-zip-1.15",
                "zt-zip-1.16",
                "zt-zip-1.17"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b46dde03dac5e1f4a5757cb0871429c63e135336",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1524578143,
            "hunks": 1,
            "message": "Manually installing OpenJDK6 on Travis testing Based on https://github.com/travis-ci/travis-ci/issues/8199 changing around the Travis script a little.",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 3224a7f..b8f3ac4 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -6,2 +6,3 @@ addons:",
                "       - oracle-java8-installer",
                "+      - openjdk-6-jdk",
                " install:"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "zt-zip-1.13",
                "zt-zip-1.14",
                "zt-zip-1.15",
                "zt-zip-1.16",
                "zt-zip-1.17"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "efa56f1af9facba60a1ffe78aa7e614aac82f305",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1524587205,
            "hunks": 1,
            "message": "Installing custom mvn that would work with jdk6",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index b8f3ac4..447cc32 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -7,2 +7,7 @@ addons:",
                "       - openjdk-6-jdk",
                "+before_install:",
                "+  - wget https://archive.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.zip",
                "+  - unzip -qq apache-maven-3.3.9-bin.zip",
                "+  - export M2_HOME=$PWD/apache-maven-3.3.9",
                "+  - export PATH=$M2_HOME/bin:$PATH",
                " install:"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "zt-zip-1.13",
                "zt-zip-1.14",
                "zt-zip-1.15",
                "zt-zip-1.16",
                "zt-zip-1.17"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e713af91739c85709ad15bb0abf16ccffbcfb2cb",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1524754371,
            "hunks": 4,
            "message": "Renamed Unwraper to Unwrapper",
            "diff": [
                "diff --git a/src/main/java/org/zeroturnaround/zip/ZipUtil.java b/src/main/java/org/zeroturnaround/zip/ZipUtil.java",
                "index 604866e..a0244a4 100644",
                "--- a/src/main/java/org/zeroturnaround/zip/ZipUtil.java",
                "+++ b/src/main/java/org/zeroturnaround/zip/ZipUtil.java",
                "@@ -1030,3 +1030,3 @@ public final class ZipUtil {",
                "     log.debug(\"Unwrapping '{}' into '{}'.\", zip, outputDir);",
                "-    iterate(zip, new Unwraper(outputDir, mapper));",
                "+    iterate(zip, new Unwrapper(outputDir, mapper));",
                "   }",
                "@@ -1130,3 +1130,3 @@ public final class ZipUtil {",
                "     log.debug(\"Unwrapping {} into '{}'.\", is, outputDir);",
                "-    iterate(is, new Unwraper(outputDir, mapper));",
                "+    iterate(is, new Unwrapper(outputDir, mapper));",
                "   }",
                "@@ -1264,3 +1264,3 @@ public final class ZipUtil {",
                "    */",
                "-  private static class Unwraper implements ZipEntryCallback {",
                "+  private static class Unwrapper implements ZipEntryCallback {",
                "@@ -1270,3 +1270,3 @@ public final class ZipUtil {",
                "-    public Unwraper(File outputDir, NameMapper mapper) {",
                "+    public Unwrapper(File outputDir, NameMapper mapper) {",
                "       this.outputDir = outputDir;"
            ],
            "changed_files": [
                "src/main/java/org/zeroturnaround/zip/ZipUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "zt-zip-1.13",
                "zt-zip-1.14",
                "zt-zip-1.15",
                "zt-zip-1.16",
                "zt-zip-1.17"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "646b5336b277d12a0628c3f9f50ee6dc2554c3df",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1524775260,
            "hunks": 1,
            "message": "Added jdk9 and jdk10 into the matrix",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index a97aedf..91d302c 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -12,2 +12,4 @@ jdk:",
                "   - openjdk7",
                "+  - oraclejdk9",
                "+  - openjdk10",
                " script:"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "zt-zip-1.13",
                "zt-zip-1.14",
                "zt-zip-1.15",
                "zt-zip-1.16",
                "zt-zip-1.17"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d1c40776d2ff18550d95db2609d3d154692dea93",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1524596663,
            "hunks": 2,
            "message": "Removed OpenJDK6 from tested platforms on Travis Travis, openjdk6 and a compatible maven version is just too much trouble. Easier to move on.",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 447cc32..56c6dfc 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -6,8 +6,2 @@ addons:",
                "       - oracle-java8-installer",
                "-      - openjdk-6-jdk",
                "-before_install:",
                "-  - wget https://archive.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.zip",
                "-  - unzip -qq apache-maven-3.3.9-bin.zip",
                "-  - export M2_HOME=$PWD/apache-maven-3.3.9",
                "-  - export PATH=$M2_HOME/bin:$PATH",
                " install:",
                "@@ -18,3 +12,2 @@ jdk:",
                "   - openjdk7",
                "-  - openjdk6",
                " script:"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "zt-zip-1.13",
                "zt-zip-1.14",
                "zt-zip-1.15",
                "zt-zip-1.16",
                "zt-zip-1.17"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "2aa8c72a6b2a2cb14e8a5cd3891fbba4d6cbd905",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1525261566,
            "hunks": 1,
            "message": "Prepare release zt-zip-1.13",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index c2ea0a8..50178ed 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                "   <name>ZT Zip</name>",
                "-  <version>1.13-SNAPSHOT</version>",
                "+  <version>1.13</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "zt-zip-1.13",
                "zt-zip-1.14",
                "zt-zip-1.15",
                "zt-zip-1.16",
                "zt-zip-1.17"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "437b57eca0a47d6e444453f6819cec13d51b1019",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1524819426,
            "hunks": 2,
            "message": "Removed JDK7 testing from Travis",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 07c3bdd..0d56354 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -8,6 +8,5 @@ install:",
                "   - jdk_switcher use oraclejdk8",
                "-  - mvn install -DskipTests=true -Dmaven.javadoc.skip=true",
                "+  - ./mvnw install -DskipTests=true -Dmaven.javadoc.skip=true",
                " jdk:",
                "   - oraclejdk8",
                "-  - openjdk7",
                "   - oraclejdk9"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "7f59a57f1bf0ce01375665040a3e6facc0d7acb7",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1525261722,
            "hunks": 1,
            "message": "prepare for next development iteration",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 50178ed..9d71cea 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -7,3 +7,3 @@",
                "   <name>ZT Zip</name>",
                "-  <version>1.13</version>",
                "+  <version>1.14-SNAPSHOT</version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "zt-zip-1.14",
                "zt-zip-1.15",
                "zt-zip-1.16",
                "zt-zip-1.17"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a264aecf1166e290f01818295b483d78d33cec9e",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1524806061,
            "hunks": 1,
            "message": "Removing JDK10 from the Travis testing matrix Travis doesn't yet support jdk10 in such a manner. See https://github.com/travis-ci/travis-ci/issues/9368 for more details. I'll revisit this in a month or so.",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 91d302c..07c3bdd 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -13,3 +13,2 @@ jdk:",
                "   - oraclejdk9",
                "-  - openjdk10",
                " script:"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "zt-zip-1.13",
                "zt-zip-1.14",
                "zt-zip-1.15",
                "zt-zip-1.16",
                "zt-zip-1.17"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a4ec02da60d8b6b091a22952364a92e762ee72e3",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1525416633,
            "hunks": 0,
            "message": "Merge branch 'master' into drop-pre-jdk8-versions",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": []
        },
        {
            "commit_id": "bc0ac99843dfeee6ff76396c63dbf06671f90c13",
            "repository": "https://github.com/zeroturnaround/zt-zip",
            "timestamp": 1524577910,
            "hunks": 1,
            "message": "Removed oraclejdk from Travis testing Oracle JDK seems to have been removed from Travis based on https://github.com/travis-ci/travis-ci/issues/7884 As we still test with the OpenJDK version I don't see a problem from not having it.",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index c8b94a5..3224a7f 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -11,3 +11,2 @@ jdk:",
                "   - oraclejdk8",
                "-  - oraclejdk7",
                "   - openjdk7"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "zt-zip-1.13",
                "zt-zip-1.14",
                "zt-zip-1.15",
                "zt-zip-1.16",
                "zt-zip-1.17"
            ],
            "matched_rules": []
        }
    ]
}
