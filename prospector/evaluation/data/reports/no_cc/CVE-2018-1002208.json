{
    "advisory_record": {
        "cve_id": "CVE-2018-1002208",
        "description": "SharpZipLib before 1.0 RC1 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in a Zip archive entry that is mishandled during extraction. This vulnerability is also known as 'Zip-Slip'.",
        "reserved_timestamp": 1532476800,
        "published_timestamp": 1532538000,
        "updated_timestamp": 1568036778,
        "repository_url": null,
        "references": {
            "": 324,
            "https://github.com/icsharpcode/SharpZipLib/issues/232": 9,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 8,
            "https://snyk.io/vuln/SNYK-DOTNET-SHARPZIPLIB-60247": 5,
            "https://snyk.io/research/zip-slip-vulnerability": 4,
            "https://github.com/features/actions": 4,
            "https://github.com/features/packages": 4,
            "https://github.com/features/security": 4,
            "https://github.com/features/codespaces": 4,
            "https://github.com/features/copilot": 4,
            "https://github.com/features/code-review": 4,
            "https://github.com/features/issues": 4,
            "https://github.com/features/discussions": 4,
            "https://github.com/features": 4,
            "https://docs.github.com": 4,
            "https://skills.github.com": 4,
            "https://github.blog": 4,
            "https://github.com/enterprise": 4,
            "https://github.com/team": 4,
            "https://github.com/enterprise/startups": 4,
            "https://github.com/solutions/industries/healthcare": 4,
            "https://github.com/solutions/industries/financial-services": 4,
            "https://github.com/solutions/industries/manufacturing": 4,
            "https://github.com/solutions/ci-cd": 4,
            "https://github.com/solutions/devops": 4,
            "https://github.com/solutions/devsecops": 4,
            "https://resources.github.com/learn/pathways": 4,
            "https://resources.github.com": 4,
            "https://github.com/customer-stories": 4,
            "https://partner.github.com": 4,
            "https://github.com/readme": 4,
            "https://github.com/topics": 4,
            "https://github.com/trending": 4,
            "https://github.com/collections": 4,
            "https://github.com/enterprise/advanced-security": 4,
            "https://github.com/pricing": 4,
            "https://github.com": 4,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 4,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 4,
            "https://github.com/security": 4,
            "https://www.githubstatus.com/": 4,
            "https://docs.github.com/": 4,
            "https://support.github.com?tags=dotcom-footer": 4,
            "https://github.com/snyk/zip-slip-vulnerability": 3,
            "https://github.com/piksel": 3,
            "https://github.com/christophwille": 3,
            "https://github.com/icsharpcode/SharpZipLib/wiki/Release-1.0": 2,
            "https://github.com/mono/mono/issues/11492": 2,
            "https://docs.github.com/terms": 2,
            "https://docs.github.com/privacy": 2,
            "https://github.com/snyk/zip-slip-vulnerability#affected-libraries": 2,
            "http://snyk.io/research/zip-slip-vulnerability": 2,
            "https://github.com/jenkinsci/jenkins/pull/3402": 2,
            "https://gist.github.com/grnd/61e3244bfff85cbe025f5bd4c60ba842": 1,
            "https://github.com/yfakariya": 1,
            "https://github.com/icsharpcode/SharpZipLib/issues/232#issuecomment-396210231": 1,
            "https://github.com/notifications/unsubscribe-auth/AAVbBlfTxiVRtqRXg9bILWqn8uI-g5Khks5t7lMhgaJpZM4Uib19": 1,
            "https://docs.microsoft.com/en-us/dotnet/standard/net-standard#net-implementation-support": 1,
            "https://github.com/icsharpcode/SharpZipLib/issues/103": 1,
            "https://docs.microsoft.com/en-us/dotnet/api/system.io.stream.close?view=netstandard-2.0": 1,
            "https://github.com/icsharpcode/SharpZipLib/pull/235": 1,
            "https://github.com/icsharpcode/SharpZipLib/issues/253": 1,
            "https://github.com/icsharpcode/SharpZipLib/issues/164": 1,
            "https://github.com/icsharpcode/SharpZipLib/issues/229": 1,
            "https://github.com/icsharpcode/SharpZipLib/issues/121": 1,
            "https://github.com/icsharpcode/SharpZipLib/issues/151": 1,
            "https://github.com/icsharpcode/SharpZipLib/issues/183": 1,
            "https://github.com/icsharpcode/SharpZipLib/issues/213": 1,
            "https://github.com/icsharpcode/SharpZipLib/issues/13": 1,
            "https://github.com/icsharpcode/SharpZipLib/issues/11": 1,
            "https://github.com/icsharpcode/SharpZipLib/pull/138": 1,
            "https://github.com/zone117x": 1,
            "https://github.com/icsharpcode/SharpZipLib/pull/171": 1,
            "https://github.com/ViktorHofer": 1,
            "https://camo.githubusercontent.com/edca8a9a826c7de9b71109a52d2db89a90c1dc5a5ccdadc501c9e3aa6c06b842/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f736e796b2f696d6167652f75706c6f61642f665f6175746f2c715f6175746f2c635f7468756d622c685f3135302c775f3135302f76313532373135363431352f72657365617263682f7a6970736c69702e706e67": 1,
            "https://stackoverflow.com/questions/981578/how-to-unzip-files-recursively-in-java": 1,
            "https://github.com/snyk/zip-slip-vulnerability/blob/master/CONTRIBUTING.md": 1,
            "https://github.com/ZJONSSON/node-unzipper": 1,
            "https://snyk.io/vuln/npm:unzipper:20180415": 1,
            "https://github.com/ZJONSSON/node-unzipper/pull/59": 1,
            "https://github.com/cthackers/adm-zip": 1,
            "https://snyk.io/vuln/npm:adm-zip:20180415": 1,
            "https://github.com/cthackers/adm-zip/pull/212": 1,
            "https://github.com/codehaus-plexus/plexus-archiver": 1,
            "https://snyk.io/vuln/SNYK-JAVA-ORGCODEHAUSPLEXUS-31680": 1,
            "https://github.com/codehaus-plexus/plexus-archiver/pull/87": 1,
            "https://github.com/zeroturnaround/zt-zip": 1,
            "https://snyk.io/vuln/SNYK-JAVA-ORGZEROTURNAROUND-31681": 1,
            "https://github.com/zeroturnaround/zt-zip/blob/master/src/main/java/org/zeroturnaround/zip/ZipUtil.java#L389:26": 1,
            "https://github.com/srikanth-lingala/zip4j": 1,
            "https://mvnrepository.com/artifact/net.lingala.zip4j/zip4j": 1,
            "https://snyk.io/vuln/SNYK-JAVA-NETLINGALAZIP4J-31679": 1,
            "https://github.com/srikanth-lingala/zip4j/blob/master/src/main/java/net/lingala/zip4j/zip/UnzipEngine.java#L148": 1,
            "https://github.com/haf/DotNetZip.Semverd": 1,
            "https://snyk.io/vuln/SNYK-DOTNET-DOTNETZIP-60245": 1,
            "https://github.com/haf/DotNetZip.Semverd/compare/master...shana:bugs/relative-paths?expand=1": 1,
            "https://github.com/adamhathcock/sharpcompress": 1,
            "https://snyk.io/vuln/SNYK-DOTNET-SHARPCOMPRESS-60246": 1,
            "https://github.com/adamhathcock/sharpcompress/blob/2a5494a804dd3d6f5bec1ec79a52d54ffce610f5/src/SharpCompress/Archives/IArchiveEntryExtensions.cs#L58-L67": 1,
            "https://github.com/apache/commons-compress/": 1,
            "https://github.com/icsharpcode/SharpZipLib": 1,
            "https://bitbucket.org/winebarrel/zip-ruby/src/a0bceebd7bf031c8815a8359ba9befe6ead1bedc/zipruby/?at=default": 1,
            "https://github.com/rubyzip/rubyzip": 1,
            "https://github.com/rubyzip/rubyzip/issues/369": 1,
            "https://snyk.io/vuln/SNYK-RUBY-RUBYZIP-22039": 1,
            "https://github.com/fjg/zipruby": 1,
            "https://golang.org/pkg/archive/": 1,
            "https://docs.python.org/3/library/tarfile.html": 1,
            "https://github.com/stachenov/quazip/": 1,
            "https://github.com/Raynes/fs": 1,
            "https://github.com/cloudfoundry/archiver/": 1,
            "https://github.com/Chumper/Zipper": 1,
            "https://github.com/Chumper/Zipper/releases/tag/v1.0.3": 1,
            "https://github.com/genome-vendor/libarchive-zip-perl": 1,
            "https://snyk.io/vuln/SNYK-LINUX-LIBARCHIVEZIPPERL-171379": 1,
            "https://github.com/Majored/rs-async-zip": 1,
            "https://github.com/apache/storm/blob/master/storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java#L389": 1,
            "https://github.com/apache/storm/blob/master/storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java#L523": 1,
            "https://github.com/apache/storm/blob/master/storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java#L592": 1,
            "https://github.com/apache/storm/blob/master/storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java#L650": 1,
            "https://github.com/mholt/archiver": 1,
            "https://jenkins.io/security/advisory/2018-06-25/#SECURITY-870": 1,
            "https://github.com/jenkinsci/fortify-cloudscan-plugin/blob/cfa6d392abd900ce60a08bb830f99e821361b238/src/main/java/org/jenkinsci/plugins/fortifycloudscan/util/ArchiveUtil.java#L33:24": 1,
            "https://github.com/jeremylong/DependencyCheck/blob/master/RELEASE_NOTES.md#version-320-2018-05-21": 1,
            "https://jira.sonarsource.com/browse/SONAR-10661": 1,
            "https://github.com/SonarSource/sonarqube/blob/c0d2705e610d771b8c66ef22e64530c7bca4f538/sonar-plugin-api/src/main/java/org/sonar/api/utils/ZipUtils.java#L148": 1,
            "https://github.com/cinchapi/concourse/blob/a890d80a80298436995b42045474c6f01b53066b/concourse-driver-java/src/main/java/com/cinchapi/concourse/util/ZipFiles.java#L100": 1,
            "https://github.com/orientechnologies/orientdb/blob/1c184f1295d1ce1538e5debac05addc7ca69b5b8/core/src/main/java/com/orientechnologies/orient/core/compression/impl/OZIPCompressionUtil.java#L87": 1,
            "https://github.com/orientechnologies/orientdb/blob/5684b63f6efb03d407d0175b9eab616b36bbecbd/etl/src/main/java/com/orientechnologies/orient/etl/util/OFileManager.java#L76": 1,
            "https://github.com/FenixEdu/fenixedu-academic/blob/674a7081d6a28cfadcae1cf732c11e9599cdedee/src/main/java/org/fenixedu/academic/util/FileUtils.java#L118": 1,
            "https://github.com/lucee/Lucee/blob/ad2b44d9b6695e6ef8632eadf306c3f38e43885b/core/src/main/java/lucee/runtime/tag/Zip.java#L487": 1,
            "https://github.com/timyates/groovy-common-extensions/releases/tag/v0.7.1": 1,
            "https://github.com/timyates/groovy-common-extensions/blob/169fad28b6ec306979f06b5ec38cae4085bf05bd/src/main/groovy/com/bloidonia/groovy/extensions/FileExtensionMethods.groovy#L144": 1,
            "https://github.com/fabric8io/fabric8/blob/5d20ac54e81246b78dc343ff0504b815421f5704/components/fabric8-utils/src/main/java/io/fabric8/utils/Zips.java#L116": 1,
            "https://lists.apache.org/thread.html/ab2e1af38975f5fc462ba89b517971ef892ec3d06bee12ea2258895b@%3Cdev.tika.apache.org%3E": 1,
            "https://github.com/deeplearning4j/deeplearning4j/pull/6630": 1,
            "https://github.com/wixtoolset/issues/issues/6075": 1,
            "https://github.com/apache/kylin/blob/master/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/util/TarGZUtil.java#L43": 1,
            "https://github.com/apache/nifi/blob/master/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/UnpackContent.java#L312": 1,
            "https://github.com/elastic/elasticsearch/blob/ee802ad63c0f21d697a5095dd05dc6f94626ee4d/test/framework/src/main/java/org/elasticsearch/common/io/FileTestUtils.java#L68-L94": 1,
            "https://github.com/linkedin/pinot/blob/master/pinot-common/src/main/java/com/linkedin/pinot/common/utils/TarGzCompressionUtils.java#L183": 1,
            "https://github.com/ankidroid/Anki-Android/blob/eb540c2fd3aa99a646242c887b9094223ba4a8a1/AnkiDroid/src/main/java/com/ichi2/libanki/Utils.java#L633": 1,
            "https://github.com/ata4/bspsrc/blob/21e451142738463d999435d36de7353f48daaa15/src/main/java/info/ata4/bsplib/PakFile.java#L60-L89": 1,
            "https://github.com/eirslett/frontend-maven-plugin/blob/ef103230692cbf00a5f86ab7b909246d6b638243/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/ArchiveExtractor.java#L109": 1,
            "https://github.com/eirslett/frontend-maven-plugin/blob/ef103230692cbf00a5f86ab7b909246d6b638243/frontend-plugin-core/src/main/java/com/github/eirslett/maven/plugins/frontend/lib/ArchiveExtractor.java#L81": 1,
            "https://github.com/unknwon/cae/blob/55a0b64484a12115b7322b9eed01e2c26113061d/zip/write.go#L100": 1,
            "https://github.com/unknwon/cae/blob/55a0b64484a12115b7322b9eed01e2c26113061d/tz/write.go#L122": 1,
            "https://github.com/JetBrains/intellij-community/blob/91fc0d0af2bf12a8faa8fac5296a92edf4ea268d/platform/util/src/com/intellij/util/io/TarUtil.java#L191": 1,
            "https://github.com/apache/apex-core/blob/master/engine/src/main/java/com/datatorrent/stram/client/AppPackage.java#L320": 1,
            "https://github.com/apache/zeppelin/blob/master/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java#L225": 1,
            "https://github.com/apache/reef/blob/561a336f2f0dda8f4a67a96179750a76167b038f/lang/java/reef-runtime-azbatch/src/main/java/org/apache/reef/runtime/azbatch/evaluator/EvaluatorShim.java#L295": 1,
            "https://github.com/apache/bookkeeper/blob/6dda0a6c68fbaf2ca198cfbb693db4ac93a0feef/tests/integration-tests-utils/src/main/java/org/apache/bookkeeper/tests/DockerUtils.java#L109": 1,
            "https://github.com/apache/incubator-pulsar/blob/44e06635c1524229a923e8fbb525df278fcecdec/tests/integration-tests-utils/src/main/java/org/apache/pulsar/tests/DockerUtils.java": 1,
            "https://github.com/apache/incubator-heron/blob/master/heron/downloaders/src/java/org/apache/heron/downloader/Extractor.java#L43": 1,
            "https://github.com/apache/incubator-gobblin/blob/4bdd0482e815013ee016ede4385a9ba339621f1b/gobblin-aws/src/main/java/org/apache/gobblin/aws/AWSJobConfigurationManager.java#L199": 1,
            "https://github.com/apache/incubator-gobblin/blob/5457af88d56b8fb89b172129fd1ff24ecdd4eba8/gobblin-data-management/src/main/java/org/apache/gobblin/data/management/copy/writer/TarArchiveInputStreamDataWriter.java#L81-L87": 1,
            "https://github.com/apache/systemml/blob/2e6b577c513393022f87e4770d7761a3726a07aa/dev/release/src/test/java/org/apache/sysml/validation/ValidateLicAndNotice.java#L485": 1,
            "https://github.com/gradle/gradle/blob/de937ae7c46389169888aca2e7d9f506547e78bf/subprojects/wrapper/src/main/java/org/gradle/wrapper/Install.java#L230": 1,
            "https://github.com/gradle/gradle/blob/4bbd605e2339dab76e441d91ac9aa0f5af2518f7/subprojects/build-cache/src/jmh/java/org/gradle/caching/internal/tasks/ZipPacker.java#L54:25": 1,
            "https://github.com/gradle/gradle/blob/f1efee61bcee87411f7b78761cbb492250e03b70/subprojects/core/src/main/java/org/gradle/api/internal/file/archive/ZipFileTree.java#L97": 1,
            "https://github.com/plasma-umass/doppio/blob/f58deb051f097c66cadc1e48a236e670d2d2731d/classes/util/Unzip.java#L25": 1,
            "https://github.com/streamsets/datacollector/blob/07c1dd23369ad55a30cd039d96751155a7dbfe8b/miniIT/src/test/java/com/streamsets/datacollector/util/UntarUtility.java#L61": 1,
            "https://github.com/grnd": 1,
            "https://github.com/aviadatsnyk": 1,
            "https://github.com/snoopysecurity": 1,
            "https://github.com/ggkitsas": 1,
            "https://github.com/leeyashalti": 1,
            "https://github.com/Joe-Bollen-Snyk": 1,
            "https://github.com/sjmaple": 1,
            "https://github.com/srikanth-lingala": 1,
            "https://github.com/dragos-cojocari": 1,
            "https://github.com/RDIL": 1,
            "https://github.com/benjifin": 1,
            "https://github.com/mowzk": 1,
            "https://github.com/conikeec": 1,
            "https://github.com/svick": 1,
            "https://github.com/advisories/GHSA-cqj4-m2pc-v9m5": 1,
            "https://github.com/mono/mono/issues/6523": 1,
            "http://paste.ubuntu.com/p/gpjbwp6dWR/": 1
        },
        "affected_products": [
            "SharpZipLib",
            "Slip",
            "Zip"
        ],
        "versions": {
            "status": "affected",
            "version": "< 1.0 RC1"
        },
        "files": [
            "Zip-Slip",
            "SharpZipLib"
        ],
        "keywords": [
            "slip",
            "traversal",
            "entry",
            "attacker",
            "vulnerability",
            "mishandle",
            "sharpziplib",
            "file",
            "write",
            "know",
            "slash",
            "directory",
            "allow",
            "extraction"
        ],
        "files_extension": [],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "4ee3b24f503ff05a04c80df171648809c2e67848",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1531397647,
            "hunks": 3,
            "message": "Merge PR #240, Add support for POSIX Extended Headers Fixes #121 Only \"path\" keyword supported as it's used for non-GNU long file names.",
            "diff": [
                "diff --git a/src/ICSharpCode.SharpZipLib/Tar/TarExtendedHeaderReader.cs b/src/ICSharpCode.SharpZipLib/Tar/TarExtendedHeaderReader.cs",
                "new file mode 100644",
                "index 0000000..e1ab189",
                "--- /dev/null",
                "+++ b/src/ICSharpCode.SharpZipLib/Tar/TarExtendedHeaderReader.cs",
                "@@ -0,0 +1,89 @@",
                "+\u00ef\u00bb\u00bfusing System;",
                "+using System.Collections.Generic;",
                "+using System.IO;",
                "+using System.Text;",
                "+",
                "+namespace ICSharpCode.SharpZipLib.Tar",
                "+{",
                "+\tpublic class TarExtendedHeaderReader",
                "+\t{",
                "+\t\tconst byte LENGTH = 0;",
                "+\t\tconst byte KEY = 1;",
                "+\t\tconst byte VALUE = 2;",
                "+\t\tconst byte END = 3;",
                "+",
                "+\t\tprivate readonly Dictionary<string, string> headers = new Dictionary<string, string>();",
                "+",
                "+\t\tprivate string[] headerParts = new string[3];",
                "+",
                "+\t\tint bbIndex;",
                "+\t\tprivate byte[] byteBuffer;",
                "+\t\tprivate char[] charBuffer;",
                "+",
                "+\t\tprivate readonly StringBuilder sb = new StringBuilder();",
                "+\t\tprivate readonly Decoder decoder = Encoding.UTF8.GetDecoder();",
                "+",
                "+\t\tprivate int state = LENGTH;",
                "+",
                "+\t\tprivate static readonly byte[] StateNext = new[] { (byte)' ', (byte)'=', (byte)'\\n' };",
                "+",
                "+\t\tpublic TarExtendedHeaderReader()",
                "+\t\t{",
                "+\t\t\tResetBuffers();",
                "+\t\t}",
                "+",
                "+\t\tpublic void Read(byte[] buffer, int length)",
                "+\t\t{",
                "+\t\t\tfor (int i = 0; i < length; i++)",
                "+\t\t\t{",
                "+\t\t\t\tbyte next = buffer[i];",
                "+",
                "+\t\t\t\tif (next == StateNext[state])",
                "+\t\t\t\t{",
                "+\t\t\t\t\tFlush();",
                "+\t\t\t\t\theaderParts[state] = sb.ToString();",
                "+\t\t\t\t\tsb.Clear();",
                "+",
                "+\t\t\t\t\tif (++state == END)",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\theaders.Add(headerParts[KEY], headerParts[VALUE]);",
                "+\t\t\t\t\t\theaderParts = new string[3];",
                "+\t\t\t\t\t\tstate = LENGTH;",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t\telse",
                "+\t\t\t\t{",
                "+\t\t\t\t\tbyteBuffer[bbIndex++] = next;",
                "+\t\t\t\t\tif (bbIndex == 4)",
                "+\t\t\t\t\t\tFlush();",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tprivate void Flush()",
                "+\t\t{",
                "+\t\t\tdecoder.Convert(byteBuffer, 0, bbIndex, charBuffer, 0, 4, false, out int bytesUsed, out int charsUsed, out bool completed);",
                "+",
                "+\t\t\tsb.Append(charBuffer, 0, charsUsed);",
                "+\t\t\tResetBuffers();",
                "+\t\t}",
                "+",
                "+\t\tprivate void ResetBuffers()",
                "+\t\t{",
                "+\t\t\tcharBuffer = new char[4];",
                "+\t\t\tbyteBuffer = new byte[4];",
                "+\t\t\tbbIndex = 0;",
                "+\t\t}",
                "+",
                "+",
                "+\t\tpublic Dictionary<string, string> Headers",
                "+\t\t{",
                "+\t\t\tget",
                "+\t\t\t{",
                "+\t\t\t\t// TODO: Check for invalid state? -NM 2018-07-01",
                "+\t\t\t\treturn headers;",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t}",
                "+}",
                "diff --git a/src/ICSharpCode.SharpZipLib/Tar/TarInputStream.cs b/src/ICSharpCode.SharpZipLib/Tar/TarInputStream.cs",
                "index c398be0..59dff4c 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Tar/TarInputStream.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Tar/TarInputStream.cs",
                "@@ -436,3 +436,26 @@ namespace ICSharpCode.SharpZipLib.Tar",
                " \t\t\t\t\t} else if (header.TypeFlag == TarHeader.LF_XHDR) {  // POSIX extended header",
                "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Ignore things we dont understand completely for now",
                "+",
                "+\t\t\t\t\t\tbyte[] nameBuffer = new byte[TarBuffer.BlockSize];",
                "+\t\t\t\t\t\tlong numToRead = this.entrySize;",
                "+",
                "+\t\t\t\t\t\tvar xhr = new TarExtendedHeaderReader();",
                "+",
                "+\t\t\t\t\t\twhile (numToRead > 0)",
                "+\t\t\t\t\t\t{",
                "+\t\t\t\t\t\t\tint numRead = this.Read(nameBuffer, 0, (numToRead > nameBuffer.Length ? nameBuffer.Length : (int)numToRead));",
                "+",
                "+\t\t\t\t\t\t\tif (numRead == -1)",
                "+\t\t\t\t\t\t\t{",
                "+\t\t\t\t\t\t\t\tthrow new InvalidHeaderException(\"Failed to read long name entry\");",
                "+\t\t\t\t\t\t\t}",
                "+",
                "+\t\t\t\t\t\t\txhr.Read(nameBuffer, numRead);",
                "+\t\t\t\t\t\t\tnumToRead -= numRead;",
                "+\t\t\t\t\t\t}",
                "+",
                "+\t\t\t\t\t\tif (xhr.Headers.TryGetValue(\"path\", out string name))",
                "+\t\t\t\t\t\t{",
                "+\t\t\t\t\t\t\tlongName = new StringBuilder(name);",
                "+\t\t\t\t\t\t}",
                "+",
                " \t\t\t\t\t\tSkipToNextEntry();",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs b/test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs",
                "index 5f4b2a7..4e0e5f7 100644",
                "--- a/test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs",
                "@@ -233,2 +233,54 @@ namespace ICSharpCode.SharpZipLib.Tests.Tar",
                "+\t\t[Test]",
                "+\t\t[Category(\"Tar\")]",
                "+\t\tpublic void ExtendedHeaderLongName()",
                "+\t\t{",
                "+\t\t\tstring expectedName = \"lftest-0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999\";",
                "+",
                "+\t\t\tvar input64 = @\"Li9QYXhIZWFkZXJzLjExOTY5L2xmdGVzdC0wMDAwMDAwMDAwMTExMTExMTExMTIyMjIyMjIyMjIz",
                "+\t\t\t\t\t\t\tMzMzMzMzMzMzNDQ0NDQ0NDQ0NDU1NTU1NTU1NTU2NjY2NjY2NjY2Nzc3NzAwMDA2NDQAMDAwMDAw",
                "+\t\t\t\t\t\t\tMAAwMDAwMDAwADAwMDAwMDAwMzE3ADEzMzE2MTYyMzMzADAyMTYwNgAgeAAAAAAAAAAAAAAAAAAA",
                "+\t\t\t\t\t\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                "+\t\t\t\t\t\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                "+\t\t\t\t\t\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                "+\t\t\t\t\t\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                "+\t\t\t\t\t\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                "+\t\t\t\t\t\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAx",
                "+\t\t\t\t\t\t\tMTcgcGF0aD1sZnRlc3QtMDAwMDAwMDAwMDExMTExMTExMTEyMjIyMjIyMjIyMzMzMzMzMzMzMzQ0",
                "+\t\t\t\t\t\t\tNDQ0NDQ0NDQ1NTU1NTU1NTU1NjY2NjY2NjY2Njc3Nzc3Nzc3Nzc4ODg4ODg4ODg4OTk5OTk5OTk5",
                "+\t\t\t\t\t\t\tOQozMCBtdGltZT0xNTMwNDU1MjU5LjcwNjU0ODg4OAozMCBhdGltZT0xNTMwNDU1MjU5LjcwNjU0",
                "+\t\t\t\t\t\t\tODg4OAozMCBjdGltZT0xNTMwNDU1MjU5LjcwNjU0ODg4OAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                "+\t\t\t\t\t\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                "+\t\t\t\t\t\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                "+\t\t\t\t\t\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                "+\t\t\t\t\t\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                "+\t\t\t\t\t\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGxm",
                "+\t\t\t\t\t\t\tdGVzdC0wMDAwMDAwMDAwMTExMTExMTExMTIyMjIyMjIyMjIzMzMzMzMzMzMzNDQ0NDQ0NDQ0NDU1",
                "+\t\t\t\t\t\t\tNTU1NTU1NTU2NjY2NjY2NjY2Nzc3Nzc3Nzc3Nzg4ODg4ODg4ODg5OTkwMDAwNjY0ADAwMDE3NTAA",
                "+\t\t\t\t\t\t\tMDAwMTc1MAAwMDAwMDAwMDAwMAAxMzMxNjE2MjMzMwAwMjM3MjcAIDAAAAAAAAAAAAAAAAAAAAAA",
                "+\t\t\t\t\t\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                "+\t\t\t\t\t\t\tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIAMDBuaWxzAAAAAAAAAAAAAAAAAAAAAAAA",
                "+\t\t\t\t\t\t\tAAAAAAAAAAAAAG5pbHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwMAAwMDAwMDAw\";",
                "+",
                "+\t\t\tvar buffer = new byte[2560];",
                "+\t\t\tvar truncated = Convert.FromBase64String(input64);",
                "+\t\t\tArray.Copy(truncated, buffer, truncated.Length);",
                "+\t\t\ttruncated = null;",
                "+",
                "+\t\t\tusing (var ms = new MemoryStream(buffer))",
                "+\t\t\tusing (var tis = new TarInputStream(ms))",
                "+\t\t\t{",
                "+\t\t\t\tvar entry = tis.GetNextEntry();",
                "+\t\t\t\tAssert.IsNotNull(entry, \"Entry is null\");",
                "+",
                "+\t\t\t\tAssert.IsNotNull(entry.Name, \"Entry name is null\");",
                "+",
                "+\t\t\t\tAssert.AreEqual(expectedName.Length, entry.Name.Length, $\"Entry name is truncated to {entry.Name.Length} bytes.\");",
                "+",
                "+\t\t\t\tAssert.AreEqual(expectedName, entry.Name, \"Entry name does not match expected value\");",
                "+\t\t\t}",
                "+",
                "+\t\t}",
                "+",
                "+",
                " \t\t/// <summary>"
            ],
            "changed_files": [
                "src/ICSharpCode.SharpZipLib/Tar/TarExtendedHeaderReader.cs",
                "src/ICSharpCode.SharpZipLib/Tar/TarInputStream.cs",
                "test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "240": "",
                "121": "writing correct Tar UTF8 filenames #182 Add support for POSIX Extended Headers #240"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc1",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 121",
                    "relevance": 32
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/ICSharpCode.SharpZipLib/Tar/TarExtendedHeaderReader.cs, test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs, src/ICSharpCode.SharpZipLib/Tar/TarInputStream.cs",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sharpziplib",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 240, 121",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5376c2daf1c0e0665398dee765af2047e43146ca",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1530478195,
            "hunks": 15,
            "message": "Restrict path traversal on FastZip extraction (#235) Fixes #232 - Prevent traversal outside of extraction directory - Add new explicit exception for invalid names - Add tests for extraction path traversal Note: Use new parameter `allowParentTraversal` to re-enable past behaviour",
            "diff": [
                "diff --git a/src/ICSharpCode.SharpZipLib/Core/InvalidNameException.cs b/src/ICSharpCode.SharpZipLib/Core/InvalidNameException.cs",
                "new file mode 100644",
                "index 0000000..99cc0e7",
                "--- /dev/null",
                "+++ b/src/ICSharpCode.SharpZipLib/Core/InvalidNameException.cs",
                "@@ -0,0 +1,38 @@",
                "+\u00ef\u00bb\u00bfusing System;",
                "+using System.Collections.Generic;",
                "+using System.Text;",
                "+",
                "+namespace ICSharpCode.SharpZipLib.Core",
                "+{",
                "+",
                "+\t/// <summary>",
                "+\t/// InvalidNameException is thrown for invalid names such as directory traversal paths and names with invalid characters",
                "+\t/// </summary>",
                "+\tpublic class InvalidNameException: SharpZipBaseException",
                "+    {",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the InvalidNameException class with a default error message.",
                "+\t\t/// </summary>",
                "+\t\tpublic InvalidNameException(): base(\"An invalid name was specified\")",
                "+\t\t{",
                "+\t\t}",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the InvalidNameException class with a specified error message.",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"message\">A message describing the exception.</param>",
                "+\t\tpublic InvalidNameException(string message) : base(message)",
                "+\t\t{",
                "+\t\t}",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the InvalidNameException class with a specified",
                "+\t\t/// error message and a reference to the inner exception that is the cause of this exception.",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"message\">A message describing the exception.</param>",
                "+\t\t/// <param name=\"innerException\">The inner exception</param>",
                "+\t\tpublic InvalidNameException(string message, Exception innerException) : base(message, innerException)",
                "+\t\t{",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/src/ICSharpCode.SharpZipLib/Zip/FastZip.cs b/src/ICSharpCode.SharpZipLib/Zip/FastZip.cs",
                "index 14ef544..c58b4cc 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Zip/FastZip.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Zip/FastZip.cs",
                "@@ -387,8 +387,9 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\t/// <param name=\"restoreDateTime\">Flag indicating whether to restore the date and time for extracted files.</param>",
                "+\t\t/// <param name=\"allowParentTraversal\">Allow parent directory traversal in file paths (e.g. ../file)</param>",
                " \t\tpublic void ExtractZip(string zipFileName, string targetDirectory,",
                " \t\t\t\t\t\t\t   Overwrite overwrite, ConfirmOverwriteDelegate confirmDelegate,",
                "-\t\t\t\t\t\t\t   string fileFilter, string directoryFilter, bool restoreDateTime)",
                "+\t\t\t\t\t\t\t   string fileFilter, string directoryFilter, bool restoreDateTime, bool allowParentTraversal = false)",
                " \t\t{",
                " \t\t\tStream inputStream = File.Open(zipFileName, FileMode.Open, FileAccess.Read, FileShare.Read);",
                "-\t\t\tExtractZip(inputStream, targetDirectory, overwrite, confirmDelegate, fileFilter, directoryFilter, restoreDateTime, true);",
                "+\t\t\tExtractZip(inputStream, targetDirectory, overwrite, confirmDelegate, fileFilter, directoryFilter, restoreDateTime, true, allowParentTraversal);",
                " \t\t}",
                "@@ -406,2 +407,3 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\t/// <param name=\"isStreamOwner\">Flag indicating whether the inputStream will be closed by this method.</param>",
                "+\t\t/// <param name=\"allowParentTraversal\">Allow parent directory traversal in file paths (e.g. ../file)</param>",
                " \t\tpublic void ExtractZip(Stream inputStream, string targetDirectory,",
                "@@ -409,3 +411,3 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\t\t\t\t   string fileFilter, string directoryFilter, bool restoreDateTime,",
                "-\t\t\t\t\t   bool isStreamOwner)",
                "+\t\t\t\t\t   bool isStreamOwner, bool allowParentTraversal = false)",
                " \t\t{",
                "@@ -418,3 +420,3 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\t\tconfirmDelegate_ = confirmDelegate;",
                "-\t\t\textractNameTransform_ = new WindowsNameTransform(targetDirectory);",
                "+\t\t\textractNameTransform_ = new WindowsNameTransform(targetDirectory, allowParentTraversal);",
                "diff --git a/src/ICSharpCode.SharpZipLib/Zip/WindowsNameTransform.cs b/src/ICSharpCode.SharpZipLib/Zip/WindowsNameTransform.cs",
                "index 2dd32f8..5ae8415 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Zip/WindowsNameTransform.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Zip/WindowsNameTransform.cs",
                "@@ -21,2 +21,3 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\tchar _replacementChar = '_';",
                "+\t\tprivate bool _allowParentTraversal;",
                "@@ -40,9 +41,7 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\t/// <param name=\"baseDirectory\"></param>",
                "-\t\tpublic WindowsNameTransform(string baseDirectory)",
                "+\t\t/// <param name=\"allowParentTraversal\">Allow parent directory traversal in file paths (e.g. ../file)</param>",
                "+\t\tpublic WindowsNameTransform(string baseDirectory, bool allowParentTraversal = false)",
                " \t\t{",
                "-\t\t\tif (baseDirectory == null) {",
                "-\t\t\t\tthrow new ArgumentNullException(nameof(baseDirectory), \"Directory name is invalid\");",
                "-\t\t\t}",
                "-",
                "-\t\t\tBaseDirectory = baseDirectory;",
                "+\t\t\tBaseDirectory = baseDirectory ?? throw new ArgumentNullException(nameof(baseDirectory), \"Directory name is invalid\");",
                "+\t\t\tAllowParentTraversal = allowParentTraversal;",
                " \t\t}",
                "@@ -71,2 +70,11 @@ namespace ICSharpCode.SharpZipLib.Zip",
                "+\t\t/// <summary>",
                "+\t\t/// Allow parent directory traversal in file paths (e.g. ../file)",
                "+\t\t/// </summary>",
                "+\t\tpublic bool AllowParentTraversal",
                "+\t\t{",
                "+\t\t\tget => _allowParentTraversal;",
                "+\t\t\tset => _allowParentTraversal = value;",
                "+\t\t}",
                "+",
                " \t\t/// <summary>",
                "@@ -92,3 +100,3 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\t\t} else {",
                "-\t\t\t\tthrow new ZipException(\"Cannot have an empty directory name\");",
                "+\t\t\t\tthrow new InvalidNameException(\"Cannot have an empty directory name\");",
                " \t\t\t}",
                "@@ -115,2 +123,7 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\t\t\t\tname = Path.Combine(_baseDirectory, name);",
                "+",
                "+\t\t\t\t\tif(!_allowParentTraversal && !Path.GetFullPath(name).StartsWith(_baseDirectory, StringComparison.InvariantCultureIgnoreCase))",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tthrow new InvalidNameException(\"Parent traversal in paths is not allowed\");",
                "+\t\t\t\t\t}",
                " \t\t\t\t}",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/Zip/FastZipHandling.cs b/test/ICSharpCode.SharpZipLib.Tests/Zip/FastZipHandling.cs",
                "index 8044b6d..13c7232 100644",
                "--- a/test/ICSharpCode.SharpZipLib.Tests/Zip/FastZipHandling.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/Zip/FastZipHandling.cs",
                "@@ -1,2 +1,3 @@",
                "-\u00ef\u00bb\u00bfusing System.IO;",
                "+\u00ef\u00bb\u00bfusing System;",
                "+using System.IO;",
                " using System.Text.RegularExpressions;",
                "@@ -271,2 +272,75 @@ namespace ICSharpCode.SharpZipLib.Tests.Zip",
                " \t\t}",
                "+",
                "+",
                "+\t\t[Test]",
                "+\t\t[Category(\"Zip\")]",
                "+\t\t[Category(\"CreatesTempFile\")]",
                "+\t\tpublic void LimitExtractPath()",
                "+\t\t{",
                "+\t\t\tstring tempPath = GetTempFilePath();",
                "+\t\t\tAssert.IsNotNull(tempPath, \"No permission to execute this test?\");",
                "+",
                "+\t\t\tvar uniqueName = \"SharpZipLib.Test_\" + DateTime.Now.Ticks.ToString(\"x\");",
                "+",
                "+\t\t\ttempPath = Path.Combine(tempPath, uniqueName);",
                "+\t\t\tvar extractPath = Path.Combine(tempPath, \"output\");",
                "+",
                "+\t\t\tconst string contentFile = \"content.txt\";",
                "+",
                "+\t\t\tvar contentFilePathBad = Path.Combine(\"..\", contentFile);",
                "+\t\t\tvar extractFilePathBad = Path.Combine(tempPath, contentFile);",
                "+\t\t\tvar archiveFileBad = Path.Combine(tempPath, \"test-good.zip\");",
                "+",
                "+\t\t\tvar contentFilePathGood = Path.Combine(\"childDir\", contentFile);",
                "+\t\t\tvar extractFilePathGood = Path.Combine(extractPath, contentFilePathGood);",
                "+\t\t\tvar archiveFileGood = Path.Combine(tempPath, \"test-bad.zip\");",
                "+",
                "+\t\t\ttry",
                "+\t\t\t{",
                "+\t\t\t\tDirectory.CreateDirectory(extractPath);",
                "+",
                "+\t\t\t\t// Create test input",
                "+\t\t\t\tvoid CreateTestFile(string archiveFile, string contentPath)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tusing (var zf = ZipFile.Create(archiveFile))",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tzf.BeginUpdate();",
                "+\t\t\t\t\t\tzf.Add(new StringMemoryDataSource($\"Content of {archiveFile}\"), contentPath);",
                "+\t\t\t\t\t\tzf.CommitUpdate();",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\tCreateTestFile(archiveFileGood, contentFilePathGood);",
                "+\t\t\t\tCreateTestFile(archiveFileBad, contentFilePathBad);",
                "+",
                "+\t\t\t\tAssert.IsTrue(File.Exists(archiveFileGood), \"Good test archive was not created\");",
                "+\t\t\t\tAssert.IsTrue(File.Exists(archiveFileBad), \"Bad test archive was not created\");",
                "+",
                "+\t\t\t\tvar fastZip = new FastZip();",
                "+",
                "+\t\t\t\tAssert.DoesNotThrow(() => {",
                "+\t\t\t\t\tfastZip.ExtractZip(archiveFileGood, extractPath, \"\");",
                "+\t\t\t\t}, \"Threw exception on good file name\");",
                "+",
                "+\t\t\t\tAssert.IsTrue(File.Exists(extractFilePathGood), \"Good output file not created\");",
                "+",
                "+\t\t\t\tAssert.Throws<SharpZipLib.Core.InvalidNameException>(() => {",
                "+\t\t\t\t\tfastZip.ExtractZip(archiveFileBad, extractPath, \"\");",
                "+\t\t\t\t}, \"No exception was thrown for bad file name\");",
                "+",
                "+\t\t\t\tAssert.IsFalse(File.Exists(extractFilePathBad), \"Bad output file created\");",
                "+",
                "+\t\t\t\tAssert.DoesNotThrow(() => {",
                "+\t\t\t\t\tfastZip.ExtractZip(archiveFileBad, extractPath, FastZip.Overwrite.Never, null, \"\", \"\", true, true);",
                "+\t\t\t\t}, \"Threw exception on bad file name when traversal explicitly allowed\");",
                "+",
                "+\t\t\t\tAssert.IsTrue(File.Exists(extractFilePathBad), \"Bad output file not created when traversal explicitly allowed\");",
                "+",
                "+\t\t\t}",
                "+\t\t\tfinally",
                "+\t\t\t{",
                "+\t\t\t\tDirectory.Delete(tempPath, true);",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                " \t}"
            ],
            "changed_files": [
                "src/ICSharpCode.SharpZipLib/Core/InvalidNameException.cs",
                "src/ICSharpCode.SharpZipLib/Zip/FastZip.cs",
                "src/ICSharpCode.SharpZipLib/Zip/WindowsNameTransform.cs",
                "test/ICSharpCode.SharpZipLib.Tests/Zip/FastZipHandling.cs"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "235": "Update NuGet \ud83d\ude4f #244 Restrict path traversal on TarArchive extraction #519",
                "232": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc1",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 235, 232",
                    "relevance": 32
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/ICSharpCode.SharpZipLib/Zip/FastZip.cs, test/ICSharpCode.SharpZipLib.Tests/Zip/FastZipHandling.cs, src/ICSharpCode.SharpZipLib/Core/InvalidNameException.cs, src/ICSharpCode.SharpZipLib/Zip/WindowsNameTransform.cs",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: traversal, allow, directory, extraction",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sharpziplib",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 235, 232",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c162f19f60d8802eb26ce4a8732476fdcd6b2c48",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1531397564,
            "hunks": 13,
            "message": "Merge #233, Fix infinite loop on bad literal data * Fix infinite loop on bad literal data * Fixes #229. * Rewrite dynamic table header decoding * No more gotos (!) * Easier to read * Handles bad table lengths correctly",
            "diff": [
                "diff --git a/src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterDynHeader.cs b/src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterDynHeader.cs",
                "index 31a366d..b7c5c3f 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterDynHeader.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterDynHeader.cs",
                "@@ -8,11 +8,2 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                " \t\t#region Constants",
                "-\t\tconst int LNUM = 0;",
                "-\t\tconst int DNUM = 1;",
                "-\t\tconst int BLNUM = 2;",
                "-\t\tconst int BLLENS = 3;",
                "-\t\tconst int LENS = 4;",
                "-\t\tconst int REPS = 5;",
                "-",
                "-\t\tstatic readonly int[] repMin = { 3, 3, 11 };",
                "-\t\tstatic readonly int[] repBits = { 2, 3, 7 };",
                "@@ -24,113 +15,66 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                " \t\t{",
                "-\t\t\tdecode_loop:",
                "-\t\t\tfor (;;) {",
                "-\t\t\t\tswitch (mode) {",
                "-\t\t\t\t\tcase LNUM:",
                "-\t\t\t\t\t\tlnum = input.PeekBits(5);",
                "-\t\t\t\t\t\tif (lnum < 0) {",
                "-\t\t\t\t\t\t\treturn false;",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t\tlnum += 257;",
                "-\t\t\t\t\t\tinput.DropBits(5);",
                "-\t\t\t\t\t\t//  \t    System.err.println(\"LNUM: \"+lnum);",
                "-\t\t\t\t\t\tmode = DNUM;",
                "-\t\t\t\t\t\tgoto case DNUM; // fall through",
                "-\t\t\t\t\tcase DNUM:",
                "-\t\t\t\t\t\tdnum = input.PeekBits(5);",
                "-\t\t\t\t\t\tif (dnum < 0) {",
                "-\t\t\t\t\t\t\treturn false;",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t\tdnum++;",
                "-\t\t\t\t\t\tinput.DropBits(5);",
                "-\t\t\t\t\t\t//  \t    System.err.println(\"DNUM: \"+dnum);",
                "-\t\t\t\t\t\tnum = lnum + dnum;",
                "-\t\t\t\t\t\tlitdistLens = new byte[num];",
                "-\t\t\t\t\t\tmode = BLNUM;",
                "-\t\t\t\t\t\tgoto case BLNUM; // fall through",
                "-\t\t\t\t\tcase BLNUM:",
                "-\t\t\t\t\t\tblnum = input.PeekBits(4);",
                "-\t\t\t\t\t\tif (blnum < 0) {",
                "-\t\t\t\t\t\t\treturn false;",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t\tblnum += 4;",
                "-\t\t\t\t\t\tinput.DropBits(4);",
                "-\t\t\t\t\t\tblLens = new byte[19];",
                "-\t\t\t\t\t\tptr = 0;",
                "-\t\t\t\t\t\t//  \t    System.err.println(\"BLNUM: \"+blnum);",
                "-\t\t\t\t\t\tmode = BLLENS;",
                "-\t\t\t\t\t\tgoto case BLLENS; // fall through",
                "-\t\t\t\t\tcase BLLENS:",
                "-\t\t\t\t\t\twhile (ptr < blnum) {",
                "-\t\t\t\t\t\t\tint len = input.PeekBits(3);",
                "-\t\t\t\t\t\t\tif (len < 0) {",
                "-\t\t\t\t\t\t\t\treturn false;",
                "-\t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t\tinput.DropBits(3);",
                "-\t\t\t\t\t\t\t//  \t\tSystem.err.println(\"blLens[\"+BL_ORDER[ptr]+\"]: \"+len);",
                "-\t\t\t\t\t\t\tblLens[BL_ORDER[ptr]] = (byte)len;",
                "-\t\t\t\t\t\t\tptr++;",
                "+\t\t\ttry",
                "+\t\t\t{",
                "+\t\t\t\tlnum = input.GrabBits(5) + 257;",
                "+\t\t\t\tdnum = input.GrabBits(5) + 1;",
                "+\t\t\t\tblnum = input.GrabBits(4) + 4;",
                "+\t\t\t\tnum = lnum + dnum;",
                "+",
                "+\t\t\t\tlengths = new byte[19];",
                "+",
                "+\t\t\t\tfor (int i = 0; i < blnum; i++)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tlengths[BL_ORDER[i]] = (byte)input.GrabBits(3, true);",
                "+\t\t\t\t}",
                "+\t\t\t\tblTree = new InflaterHuffmanTree(lengths);",
                "+\t\t\t\tlengths = new byte[num];",
                "+",
                "+\t\t\t\tint index = 0;",
                "+\t\t\t\twhile (index < lnum + dnum)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tbyte len;",
                "+",
                "+\t\t\t\t\tint symbol = blTree.GetSymbol(input);",
                "+\t\t\t\t\tif (symbol < 0)",
                "+\t\t\t\t\t\treturn false;",
                "+\t\t\t\t\tif (symbol < 16)",
                "+\t\t\t\t\t\tlengths[index++] = (byte)symbol;",
                "+\t\t\t\t\telse",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tlen = 0;",
                "+\t\t\t\t\t\tif (symbol == 16)",
                "+\t\t\t\t\t\t{",
                "+\t\t\t\t\t\t\tif (index == 0)",
                "+\t\t\t\t\t\t\t\treturn false;   // No last length!",
                "+\t\t\t\t\t\t\tlen = lengths[index - 1];",
                "+\t\t\t\t\t\t\tsymbol = input.GrabBits(2, true) + 3;",
                " \t\t\t\t\t\t}",
                "-\t\t\t\t\t\tblTree = new InflaterHuffmanTree(blLens);",
                "-\t\t\t\t\t\tblLens = null;",
                "-\t\t\t\t\t\tptr = 0;",
                "-\t\t\t\t\t\tmode = LENS;",
                "-\t\t\t\t\t\tgoto case LENS; // fall through",
                "-\t\t\t\t\tcase LENS: {",
                "-\t\t\t\t\t\t\tint symbol;",
                "-\t\t\t\t\t\t\twhile (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {",
                "-\t\t\t\t\t\t\t\t/* Normal case: symbol in [0..15] */",
                "-",
                "-\t\t\t\t\t\t\t\t//  \t\t  System.err.println(\"litdistLens[\"+ptr+\"]: \"+symbol);",
                "-\t\t\t\t\t\t\t\tlitdistLens[ptr++] = lastLen = (byte)symbol;",
                "-",
                "-\t\t\t\t\t\t\t\tif (ptr == num) {",
                "-\t\t\t\t\t\t\t\t\t/* Finished */",
                "-\t\t\t\t\t\t\t\t\treturn true;",
                "-\t\t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t\t}",
                "-",
                "-\t\t\t\t\t\t\t/* need more input ? */",
                "-\t\t\t\t\t\t\tif (symbol < 0) {",
                "-\t\t\t\t\t\t\t\treturn false;",
                "-\t\t\t\t\t\t\t}",
                "-",
                "-\t\t\t\t\t\t\t/* otherwise repeat code */",
                "-\t\t\t\t\t\t\tif (symbol >= 17) {",
                "-\t\t\t\t\t\t\t\t/* repeat zero */",
                "-\t\t\t\t\t\t\t\t//  \t\t  System.err.println(\"repeating zero\");",
                "-\t\t\t\t\t\t\t\tlastLen = 0;",
                "-\t\t\t\t\t\t\t} else {",
                "-\t\t\t\t\t\t\t\tif (ptr == 0) {",
                "-\t\t\t\t\t\t\t\t\tthrow new SharpZipBaseException();",
                "-\t\t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t\trepSymbol = symbol - 16;",
                "+\t\t\t\t\t\telse if (symbol == 17)",
                "+\t\t\t\t\t\t{",
                "+\t\t\t\t\t\t\t// repeat zero 3..10 times",
                "+\t\t\t\t\t\t\tsymbol = input.GrabBits(3, true) + 3;",
                " \t\t\t\t\t\t}",
                "-\t\t\t\t\t\tmode = REPS;",
                "-\t\t\t\t\t\tgoto case REPS; // fall through",
                "-\t\t\t\t\tcase REPS: {",
                "-\t\t\t\t\t\t\tint bits = repBits[repSymbol];",
                "-\t\t\t\t\t\t\tint count = input.PeekBits(bits);",
                "-\t\t\t\t\t\t\tif (count < 0) {",
                "-\t\t\t\t\t\t\t\treturn false;",
                "-\t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t\tinput.DropBits(bits);",
                "-\t\t\t\t\t\t\tcount += repMin[repSymbol];",
                "-\t\t\t\t\t\t\t//  \t      System.err.println(\"litdistLens repeated: \"+count);",
                "-",
                "-\t\t\t\t\t\t\tif (ptr + count > num) {",
                "-\t\t\t\t\t\t\t\tthrow new SharpZipBaseException();",
                "-\t\t\t\t\t\t\t}",
                "-\t\t\t\t\t\t\twhile (count-- > 0) {",
                "-\t\t\t\t\t\t\t\tlitdistLens[ptr++] = lastLen;",
                "-\t\t\t\t\t\t\t}",
                "-",
                "-\t\t\t\t\t\t\tif (ptr == num) {",
                "-\t\t\t\t\t\t\t\t/* Finished */",
                "-\t\t\t\t\t\t\t\treturn true;",
                "-\t\t\t\t\t\t\t}",
                "+\t\t\t\t\t\telse",
                "+\t\t\t\t\t\t{",
                "+\t\t\t\t\t\t\t// (symbol == 18), repeat zero 11..138 times",
                "+\t\t\t\t\t\t\tsymbol = input.GrabBits(7, true) + 11;",
                " \t\t\t\t\t\t}",
                "-\t\t\t\t\t\tmode = LENS;",
                "-\t\t\t\t\t\tgoto decode_loop;",
                "+",
                "+\t\t\t\t\t\tif (index + symbol > lnum + dnum)",
                "+\t\t\t\t\t\t\treturn false; // too many lengths!",
                "+",
                "+\t\t\t\t\t\t// repeat last or zero symbol times",
                "+\t\t\t\t\t\twhile (symbol-- > 0)",
                "+\t\t\t\t\t\t\tlengths[index++] = len;",
                "+\t\t\t\t\t}",
                " \t\t\t\t}",
                "+",
                "+\t\t\t\tif (lengths[256] == 0)",
                "+\t\t\t\t\treturn false; // No end-of-block code!",
                "+",
                "+\t\t\t\treturn true;",
                "+\t\t\t}",
                "+\t\t\tcatch (Exception x)",
                "+\t\t\t{",
                "+\t\t\t\treturn false;",
                " \t\t\t}",
                "@@ -141,3 +85,3 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                " \t\t\tbyte[] litlenLens = new byte[lnum];",
                "-\t\t\tArray.Copy(litdistLens, 0, litlenLens, 0, lnum);",
                "+\t\t\tArray.Copy(lengths, 0, litlenLens, 0, lnum);",
                " \t\t\treturn new InflaterHuffmanTree(litlenLens);",
                "@@ -148,3 +92,3 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                " \t\t\tbyte[] distLens = new byte[dnum];",
                "-\t\t\tArray.Copy(litdistLens, lnum, distLens, 0, dnum);",
                "+\t\t\tArray.Copy(lengths, lnum, distLens, 0, dnum);",
                " \t\t\treturn new InflaterHuffmanTree(distLens);",
                "@@ -153,4 +97,3 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                " \t\t#region Instance Fields",
                "-\t\tbyte[] blLens;",
                "-\t\tbyte[] litdistLens;",
                "+\t\tbyte[] lengths;",
                "@@ -158,10 +101,3 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                "-\t\t/// <summary>",
                "-\t\t/// The current decode mode",
                "-\t\t/// </summary>",
                "-\t\tint mode;",
                " \t\tint lnum, dnum, blnum, num;",
                "-\t\tint repSymbol;",
                "-\t\tbyte lastLen;",
                "-\t\tint ptr;",
                " \t\t#endregion",
                "diff --git a/src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/InflaterInputStream.cs b/src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/InflaterInputStream.cs",
                "index 4485a4e..cd73fbb 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/InflaterInputStream.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/InflaterInputStream.cs",
                "@@ -602,3 +602,3 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression.Streams",
                " \t\t\t\t} else if (bytesRead == 0) {",
                "-\t\t\t\t\tthrow new ZipException(\"Dont know what to do\");",
                "+\t\t\t\t\tthrow new ZipException(\"Invalid input data\");",
                " \t\t\t\t}",
                "diff --git a/src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/StreamManipulator.cs b/src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/StreamManipulator.cs",
                "index e73a50c..80a26c4 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/StreamManipulator.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/StreamManipulator.cs",
                "@@ -43,2 +43,14 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression.Streams",
                "+\t\t/// <summary>",
                "+\t\t/// Grabs the next n bits from the input and throws if <paramref name=\"allowZero\"/> is false and the result is 0.",
                "+\t\t/// </summary>",
                "+\t\tpublic int GrabBits(int bitCount, bool allowZero = false)",
                "+\t\t{",
                "+\t\t\tvar val = PeekBits(bitCount);",
                "+\t\t\tif (!allowZero && val == 0)",
                "+\t\t\t\tthrow new SharpZipBaseException(bitCount + \"-bit value cannot be zero\");",
                "+\t\t\tDropBits(bitCount);",
                "+\t\t\treturn val;",
                "+\t\t} ",
                "+",
                " \t\t/// <summary>"
            ],
            "changed_files": [
                "src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterDynHeader.cs",
                "src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/InflaterInputStream.cs",
                "src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/StreamManipulator.cs"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "233": "Bug in OutputWindow.cs that will cause ZipInputStream.Read() to never run out of data in certain corrupt ZIP files #19 Update Inflater dynamic header reader to support partial reads #249",
                "229": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc1",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 229",
                    "relevance": 32
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterDynHeader.cs, src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/InflaterInputStream.cs, src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/StreamManipulator.cs",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: write",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sharpziplib",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 233, 229",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "96df4ca0bb577085dcb6e904909445e5a36bc776",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1531498407,
            "hunks": 7,
            "message": "Merge PR #245, Attempt to read two end blocks when reading tararchive * Attempt to read another block if EOA block found * Add test for #213 * Add disposable IO utils * Fixes #213",
            "diff": [
                "diff --git a/src/ICSharpCode.SharpZipLib/Tar/TarInputStream.cs b/src/ICSharpCode.SharpZipLib/Tar/TarInputStream.cs",
                "index 59dff4c..94a475e 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Tar/TarInputStream.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Tar/TarInputStream.cs",
                "@@ -392,6 +392,17 @@ namespace ICSharpCode.SharpZipLib.Tar",
                "-\t\t\tif (headerBuf == null) {",
                "+\t\t\tif (headerBuf == null)",
                "+\t\t\t{",
                "+\t\t\t\thasHitEOF = true;",
                "+\t\t\t}",
                "+\t\t\telse if (TarBuffer.IsEndOfArchiveBlock(headerBuf))",
                "+\t\t\t{",
                " \t\t\t\thasHitEOF = true;",
                "-\t\t\t} else",
                "-\t\t\t\thasHitEOF |= TarBuffer.IsEndOfArchiveBlock(headerBuf);",
                "+",
                "+\t\t\t\t// Read the second zero-filled block",
                "+\t\t\t\ttarBuffer.ReadBlock();",
                "+\t\t\t}",
                "+\t\t\telse",
                "+\t\t\t{",
                "+\t\t\t\thasHitEOF = false;",
                "+\t\t\t}",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs b/test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs",
                "index 4e0e5f7..0bcac4d 100644",
                "--- a/test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs",
                "@@ -667,2 +667,43 @@ namespace ICSharpCode.SharpZipLib.Tests.Tar",
                "+\t\t[Test]",
                "+\t\t[Category(\"Tar\")]",
                "+\t\tpublic void EndBlockHandling()",
                "+\t\t{",
                "+\t\t\tint dummySize = 70145;",
                "+",
                "+\t\t\tlong outCount, inCount;",
                "+",
                "+\t\t\tusing (var ms = new MemoryStream())",
                "+\t\t\t{",
                "+\t\t\t\tusing (var tarOut = TarArchive.CreateOutputTarArchive(ms))",
                "+\t\t\t\tusing (var dummyFile = Utils.GetDummyFile(dummySize))",
                "+\t\t\t\t{",
                "+\t\t\t\t\ttarOut.IsStreamOwner = false;",
                "+\t\t\t\t\ttarOut.WriteEntry(TarEntry.CreateEntryFromFile(dummyFile.Filename), false);",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\toutCount = ms.Position;",
                "+\t\t\t\tms.Seek(0, SeekOrigin.Begin);",
                "+",
                "+\t\t\t\tusing (var tarIn = TarArchive.CreateInputTarArchive(ms))",
                "+\t\t\t\tusing (var tempDir = new Utils.TempDir())",
                "+\t\t\t\t{",
                "+\t\t\t\t\ttarIn.IsStreamOwner = false;",
                "+\t\t\t\t\ttarIn.ExtractContents(tempDir.Fullpath);",
                "+",
                "+\t\t\t\t\tforeach (var file in Directory.GetFiles(tempDir.Fullpath, \"*\", SearchOption.AllDirectories))",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tConsole.WriteLine($\"Extracted \\\"{file}\\\"\");",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\tinCount = ms.Position;",
                "+",
                "+\t\t\t\tConsole.WriteLine($\"Output count: {outCount}\");",
                "+\t\t\t\tConsole.WriteLine($\"Input count: {inCount}\");",
                "+",
                "+\t\t\t\tAssert.AreEqual(inCount, outCount, \"Bytes read and bytes written should be equal\");",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                " \t\t[Test]",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/TestSupport/Utils.cs b/test/ICSharpCode.SharpZipLib.Tests/TestSupport/Utils.cs",
                "index c8cb5d2..f7a88c9 100644",
                "--- a/test/ICSharpCode.SharpZipLib.Tests/TestSupport/Utils.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/TestSupport/Utils.cs",
                "@@ -1,2 +1,3 @@",
                " using System;",
                "+using System.IO;",
                " using NUnit.Framework;",
                "@@ -10,2 +11,3 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t{",
                "+\t\tstatic Random random = new Random();",
                "@@ -27,3 +29,95 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                "+\t\tpublic static TempFile GetDummyFile(int size = -1)",
                "+\t\t{",
                "+\t\t\tvar tempFile = new TempFile();",
                "+\t\t\tif (size < 0)",
                "+\t\t\t{",
                "+\t\t\t\tFile.WriteAllText(tempFile.Filename, DateTime.UtcNow.Ticks.ToString(\"x16\"));",
                "+\t\t\t}",
                "+\t\t\telse if (size > 0)",
                "+\t\t\t{",
                "+\t\t\t\tvar bytes = Array.CreateInstance(typeof(byte), size) as byte[];",
                "+\t\t\t\trandom.NextBytes(bytes);",
                "+\t\t\t\tFile.WriteAllBytes(tempFile.Filename, bytes);",
                "+\t\t\t}",
                "+\t\t\treturn tempFile;",
                "+\t\t}",
                "+",
                "+\t\tpublic class TempFile : IDisposable",
                "+\t\t{",
                "+\t\t\tpublic string Filename { get; internal set; }",
                "+",
                "+\t\t\tpublic TempFile()",
                "+\t\t\t{",
                "+\t\t\t\tFilename = Path.GetTempFileName();",
                "+\t\t\t}",
                "+",
                "+\t\t\t#region IDisposable Support",
                "+\t\t\tprivate bool disposed = false; // To detect redundant calls",
                "+",
                "+",
                "+\t\t\tprotected virtual void Dispose(bool disposing)",
                "+\t\t\t{",
                "+\t\t\t\tif (!disposed)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tif (disposing && File.Exists(Filename))",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\ttry",
                "+\t\t\t\t\t\t{",
                "+\t\t\t\t\t\t\tFile.Delete(Filename);",
                "+\t\t\t\t\t\t}",
                "+\t\t\t\t\t\tcatch { }",
                "+\t\t\t\t\t}",
                "+",
                "+\t\t\t\t\tdisposed = true;",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+",
                "+\t\t\tpublic void Dispose()",
                "+\t\t\t\t=> Dispose(true);",
                "+",
                "+\t\t\t#endregion",
                "+",
                "+\t\t}",
                "+",
                "+\t\tpublic class TempDir : IDisposable",
                "+\t\t{",
                "+\t\t\tpublic string Fullpath { get; internal set; }",
                "+",
                "+\t\t\tpublic TempDir()",
                "+\t\t\t{",
                "+\t\t\t\tFullpath = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());",
                "+\t\t\t\tDirectory.CreateDirectory(Fullpath);",
                "+\t\t\t}",
                "+",
                "+\t\t\t#region IDisposable Support",
                "+\t\t\tprivate bool disposed = false; // To detect redundant calls",
                "+",
                "+",
                "+\t\t\tprotected virtual void Dispose(bool disposing)",
                "+\t\t\t{",
                "+\t\t\t\tif (!disposed)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tif (disposing && Directory.Exists(Fullpath))",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\ttry",
                "+\t\t\t\t\t\t{",
                "+\t\t\t\t\t\t\tDirectory.Delete(Fullpath, true);",
                "+\t\t\t\t\t\t}",
                "+\t\t\t\t\t\tcatch { }",
                "+\t\t\t\t\t}",
                "+",
                "+\t\t\t\t\tdisposed = true;",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+",
                "+\t\t\tpublic void Dispose()",
                "+\t\t\t\t=> Dispose(true);",
                "+",
                "+\t\t\t#endregion",
                "+",
                "+\t\t}",
                " \t}",
                "+",
                "+\t",
                " }"
            ],
            "changed_files": [
                "src/ICSharpCode.SharpZipLib/Tar/TarInputStream.cs",
                "test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs",
                "test/ICSharpCode.SharpZipLib.Tests/TestSupport/Utils.cs"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "245": "",
                "213": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc1",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 213",
                    "relevance": 32
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: test/ICSharpCode.SharpZipLib.Tests/TestSupport/Utils.cs, test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs, src/ICSharpCode.SharpZipLib/Tar/TarInputStream.cs",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sharpziplib",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 245, 213",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "083ca7a6c009313ff051aae494e2b2d1b3135600",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1531397774,
            "hunks": 9,
            "message": "Merge PR #241, Fix Gzip.Compress arguments * Fix Gzip.Compress and Gzip.Uncompress Fixes #151 Gzip.Compress does not take a \"block size\" but rather a buffer size * Add support for passing compression level to GZip.Compress Lower the minimum compression level on GzipOutputStream to the same minimum as Deflater.SetLevel",
            "diff": [
                "diff --git a/src/ICSharpCode.SharpZipLib/GZip/GZip.cs b/src/ICSharpCode.SharpZipLib/GZip/GZip.cs",
                "index 1354a6d..f3970bb 100644",
                "--- a/src/ICSharpCode.SharpZipLib/GZip/GZip.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/GZip/GZip.cs",
                "@@ -5,2 +5,4 @@ namespace ICSharpCode.SharpZipLib.GZip",
                " {",
                "+\tusing static Zip.Compression.Deflater;",
                "+",
                " \t/// <summary>",
                "@@ -17,15 +19,23 @@ namespace ICSharpCode.SharpZipLib.GZip",
                " \t\t/// <param name=\"isStreamOwner\">Both streams are closed on completion if true.</param>",
                "+\t\t/// <exception cref=\"ArgumentNullException\">Input or output stream is null</exception>",
                " \t\tpublic static void Decompress(Stream inStream, Stream outStream, bool isStreamOwner)",
                " \t\t{",
                "-\t\t\tif (inStream == null || outStream == null) {",
                "-\t\t\t\tthrow new Exception(\"Null Stream\");",
                "-\t\t\t}",
                "+\t\t\tif (inStream == null)",
                "+\t\t\t\tthrow new ArgumentNullException(nameof(inStream), \"Input stream is null\");",
                "+",
                "+\t\t\tif (outStream == null)",
                "+\t\t\t\tthrow new ArgumentNullException(nameof(outStream), \"Output stream is null\");",
                "-\t\t\ttry {",
                "-\t\t\t\tusing (GZipInputStream bzipInput = new GZipInputStream(inStream)) {",
                "-\t\t\t\t\tbzipInput.IsStreamOwner = isStreamOwner;",
                "-\t\t\t\t\tCore.StreamUtils.Copy(bzipInput, outStream, new byte[4096]);",
                "+\t\t\ttry",
                "+\t\t\t{",
                "+\t\t\t\tusing (GZipInputStream gzipInput = new GZipInputStream(inStream))",
                "+\t\t\t\t{",
                "+\t\t\t\t\tgzipInput.IsStreamOwner = isStreamOwner;",
                "+\t\t\t\t\tCore.StreamUtils.Copy(gzipInput, outStream, new byte[4096]);",
                " \t\t\t\t}",
                "-\t\t\t} finally {",
                "-\t\t\t\tif (isStreamOwner) {",
                "+\t\t\t}",
                "+\t\t\tfinally",
                "+\t\t\t{",
                "+\t\t\t\tif (isStreamOwner)",
                "+\t\t\t\t{",
                " \t\t\t\t\t// inStream is closed by the GZipInputStream if stream owner",
                "@@ -43,17 +53,34 @@ namespace ICSharpCode.SharpZipLib.GZip",
                " \t\t/// <param name=\"isStreamOwner\">Both streams are closed on completion if true.</param>",
                "-\t\t/// <param name=\"level\">Block size acts as compression level (1 to 9) with 1 giving ",
                "-\t\t/// the lowest compression and 9 the highest.</param>",
                "-\t\tpublic static void Compress(Stream inStream, Stream outStream, bool isStreamOwner, int level)",
                "+\t\t/// <param name=\"bufferSize\">Deflate buffer size, minimum 512</param>",
                "+\t\t/// <param name=\"level\">Deflate compression level, 0-9</param>",
                "+\t\t/// <exception cref=\"ArgumentNullException\">Input or output stream is null</exception>",
                "+\t\t/// <exception cref=\"ArgumentOutOfRangeException\">Buffer Size is smaller than 512</exception>",
                "+\t\t/// <exception cref=\"ArgumentOutOfRangeException\">Compression level outside 0-9</exception>",
                "+\t\tpublic static void Compress(Stream inStream, Stream outStream, bool isStreamOwner, int bufferSize = 512, int level = 6)",
                " \t\t{",
                "-\t\t\tif (inStream == null || outStream == null) {",
                "-\t\t\t\tthrow new Exception(\"Null Stream\");",
                "-\t\t\t}",
                "+\t\t\tif (inStream == null)",
                "+\t\t\t\tthrow new ArgumentNullException(nameof(inStream), \"Input stream is null\");",
                "-\t\t\ttry {",
                "-\t\t\t\tusing (GZipOutputStream bzipOutput = new GZipOutputStream(outStream, level)) {",
                "-\t\t\t\t\tbzipOutput.IsStreamOwner = isStreamOwner;",
                "-\t\t\t\t\tCore.StreamUtils.Copy(inStream, bzipOutput, new byte[4096]);",
                "+\t\t\tif(outStream == null)",
                "+\t\t\t\tthrow new ArgumentNullException(nameof(outStream), \"Output stream is null\");",
                "+",
                "+\t\t\tif (bufferSize < 512)",
                "+\t\t\t\tthrow new ArgumentOutOfRangeException(nameof(bufferSize), \"Deflate buffer size must be >= 512\");",
                "+",
                "+\t\t\tif (level<NO_COMPRESSION || level> BEST_COMPRESSION)",
                "+\t\t\t\tthrow new ArgumentOutOfRangeException(nameof(level), \"Compression level must be 0-9\");",
                "+",
                "+\t\t\ttry",
                "+\t\t\t{",
                "+\t\t\t\tusing (GZipOutputStream gzipOutput = new GZipOutputStream(outStream, bufferSize))",
                "+\t\t\t\t{",
                "+\t\t\t\t\tgzipOutput.SetLevel(level);",
                "+\t\t\t\t\tgzipOutput.IsStreamOwner = isStreamOwner;",
                "+\t\t\t\t\tCore.StreamUtils.Copy(inStream, gzipOutput, new byte[bufferSize]);",
                " \t\t\t\t}",
                "-\t\t\t} finally {",
                "-\t\t\t\tif (isStreamOwner) {",
                "+\t\t\t}",
                "+\t\t\tfinally",
                "+\t\t\t{",
                "+\t\t\t\tif (isStreamOwner)",
                "+\t\t\t\t{",
                " \t\t\t\t\t// outStream is closed by the GZipOutputStream if stream owner",
                "diff --git a/src/ICSharpCode.SharpZipLib/GZip/GzipOutputStream.cs b/src/ICSharpCode.SharpZipLib/GZip/GzipOutputStream.cs",
                "index e2d35ce..083ae08 100644",
                "--- a/src/ICSharpCode.SharpZipLib/GZip/GzipOutputStream.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/GZip/GzipOutputStream.cs",
                "@@ -82,3 +82,3 @@ namespace ICSharpCode.SharpZipLib.GZip",
                " \t\t/// <summary>",
                "-\t\t/// Sets the active compression level (1-9).  The new level will be activated",
                "+\t\t/// Sets the active compression level (0-9).  The new level will be activated",
                " \t\t/// immediately.",
                "@@ -92,5 +92,5 @@ namespace ICSharpCode.SharpZipLib.GZip",
                " \t\t{",
                "-\t\t\tif (level < Deflater.BEST_SPEED) {",
                "-\t\t\t\tthrow new ArgumentOutOfRangeException(nameof(level));",
                "-\t\t\t}",
                "+\t\t\tif (level < Deflater.NO_COMPRESSION || level > Deflater.BEST_COMPRESSION)",
                "+\t\t\t\tthrow new ArgumentOutOfRangeException(nameof(level), \"Compression level must be 0-9\");",
                "+",
                " \t\t\tdeflater_.SetLevel(level);"
            ],
            "changed_files": [
                "src/ICSharpCode.SharpZipLib/GZip/GZip.cs",
                "src/ICSharpCode.SharpZipLib/GZip/GzipOutputStream.cs"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "241": "GZip.Compress ArgumentOutOfRangeException:bufferSize #151",
                "151": "Fix Gzip.Compress arguments #241"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc1",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 151",
                    "relevance": 32
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/ICSharpCode.SharpZipLib/GZip/GzipOutputStream.cs, src/ICSharpCode.SharpZipLib/GZip/GZip.cs",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sharpziplib",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 241, 151",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "796b5be58a52ba36fc4a9b60ab3ca4d9e5d334a3",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1532118642,
            "hunks": 34,
            "message": "Merge PR #249, Update Inflater dynamic header reader to support partial reads * Use IList<byte> for building Huffman Trees * Permits using ArraySegment instead of copying the source array * Uses Enumerable state machine * Skips two array copies by using ArraySegment * Throw usable exceptions when invalid values are being read * Fixes #253",
            "diff": [
                "diff --git a/src/ICSharpCode.SharpZipLib/Zip/Compression/Inflater.cs b/src/ICSharpCode.SharpZipLib/Zip/Compression/Inflater.cs",
                "index c2c0bbc..e68009f 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Zip/Compression/Inflater.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Zip/Compression/Inflater.cs",
                "@@ -431,3 +431,3 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                " \t\t\t\t\t\tcase DeflaterConstants.DYN_TREES:",
                "-\t\t\t\t\t\t\tdynHeader = new InflaterDynHeader();",
                "+\t\t\t\t\t\t\tdynHeader = new InflaterDynHeader(input);",
                " \t\t\t\t\t\t\tmode = DECODE_DYN_HEADER;",
                "@@ -472,3 +472,3 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                " \t\t\t\tcase DECODE_DYN_HEADER:",
                "-\t\t\t\t\tif (!dynHeader.Decode(input)) {",
                "+\t\t\t\t\tif (!dynHeader.AttemptRead()) {",
                " \t\t\t\t\t\treturn false;",
                "@@ -476,4 +476,4 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                "-\t\t\t\t\tlitlenTree = dynHeader.BuildLitLenTree();",
                "-\t\t\t\t\tdistTree = dynHeader.BuildDistTree();",
                "+\t\t\t\t\tlitlenTree = dynHeader.LiteralLengthTree;",
                "+\t\t\t\t\tdistTree = dynHeader.DistanceTree;",
                " \t\t\t\t\tmode = DECODE_HUFFMAN;",
                "diff --git a/src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterDynHeader.cs b/src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterDynHeader.cs",
                "index b7c5c3f..b36b32c 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterDynHeader.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterDynHeader.cs",
                "@@ -1,2 +1,3 @@",
                " using System;",
                "+using System.Collections.Generic;",
                " using ICSharpCode.SharpZipLib.Zip.Compression.Streams;",
                "@@ -9,95 +10,142 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                "-\t\tstatic readonly int[] BL_ORDER =",
                "-\t\t{ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 };",
                "+\t\t// maximum number of literal/length codes",
                "+\t\tconst int LITLEN_MAX = 286;",
                "+",
                "+\t\t// maximum number of distance codes",
                "+\t\tconst int DIST_MAX = 30;",
                "+",
                "+\t\t// maximum data code lengths to read",
                "+\t\tconst int CODELEN_MAX = LITLEN_MAX + DIST_MAX;",
                "+",
                "+\t\t// maximum meta code length codes to read",
                "+\t\tconst int META_MAX = 19;",
                "+",
                "+\t\tstatic readonly int[] MetaCodeLengthIndex =",
                "+\t\t\t{ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 };",
                "+",
                " \t\t#endregion",
                "-\t\tpublic bool Decode(StreamManipulator input)",
                "+\t\t/// <summary>",
                "+\t\t/// Continue decoding header from <see cref=\"input\"/> until more bits are needed or decoding has been completed",
                "+\t\t/// </summary>",
                "+\t\t/// <returns>Returns whether decoding could be completed</returns>",
                "+\t\tpublic bool AttemptRead()",
                "+\t\t\t=> !state.MoveNext() || state.Current;",
                "+",
                "+\t\tpublic InflaterDynHeader(StreamManipulator input)",
                " \t\t{",
                "-\t\t\ttry",
                "+\t\t\tthis.input = input;",
                "+\t\t\tstateMachine = CreateStateMachine();",
                "+\t\t\tstate = stateMachine.GetEnumerator();",
                "+\t\t}",
                "+",
                "+\t\tprivate IEnumerable<bool> CreateStateMachine()",
                "+\t\t{",
                "+",
                "+\t\t\t// Read initial code length counts from header",
                "+\t\t\twhile (!input.TryGetBits(5, ref litLenCodeCount, 257)) yield return false;",
                "+\t\t\twhile (!input.TryGetBits(5, ref distanceCodeCount, 1)) yield return false;",
                "+\t\t\twhile (!input.TryGetBits(4, ref metaCodeCount, 4)) yield return false;",
                "+\t\t\tvar dataCodeCount = litLenCodeCount + distanceCodeCount;",
                "+",
                "+\t\t\tif (litLenCodeCount > LITLEN_MAX) throw new ValueOutOfRangeException(nameof(litLenCodeCount));",
                "+\t\t\tif (distanceCodeCount > DIST_MAX) throw new ValueOutOfRangeException(nameof(distanceCodeCount));",
                "+\t\t\tif (metaCodeCount > META_MAX) throw new ValueOutOfRangeException(nameof(metaCodeCount));",
                "+",
                "+\t\t\t// Load code lengths for the meta tree from the header bits",
                "+\t\t\tfor (int i=0; i < metaCodeCount; i++)",
                "+\t\t\t{",
                "+\t\t\t\twhile (!input.TryGetBits(3, ref codeLengths, MetaCodeLengthIndex[i])) yield return false;",
                "+\t\t\t}",
                "+",
                "+\t\t\tvar metaCodeTree = new InflaterHuffmanTree(codeLengths);",
                "+",
                "+\t\t\t// Decompress the meta tree symbols into the data table code lengths",
                "+\t\t\tint index = 0;",
                "+\t\t\twhile (index < dataCodeCount)",
                " \t\t\t{",
                "-\t\t\t\tlnum = input.GrabBits(5) + 257;",
                "-\t\t\t\tdnum = input.GrabBits(5) + 1;",
                "-\t\t\t\tblnum = input.GrabBits(4) + 4;",
                "-\t\t\t\tnum = lnum + dnum;",
                "+\t\t\t\tbyte codeLength;",
                "+\t\t\t\tint symbol;",
                "-\t\t\t\tlengths = new byte[19];",
                "+\t\t\t\twhile ((symbol = metaCodeTree.GetSymbol(input)) < 0) yield return false;",
                "-\t\t\t\tfor (int i = 0; i < blnum; i++)",
                "+\t\t\t\tif (symbol < 16)",
                " \t\t\t\t{",
                "-\t\t\t\t\tlengths[BL_ORDER[i]] = (byte)input.GrabBits(3, true);",
                "+\t\t\t\t\t// append literal code length",
                "+\t\t\t\t\tcodeLengths[index++] = (byte)symbol;",
                " \t\t\t\t}",
                "-\t\t\t\tblTree = new InflaterHuffmanTree(lengths);",
                "-\t\t\t\tlengths = new byte[num];",
                "-",
                "-\t\t\t\tint index = 0;",
                "-\t\t\t\twhile (index < lnum + dnum)",
                "+\t\t\t\telse",
                " \t\t\t\t{",
                "-\t\t\t\t\tbyte len;",
                "-",
                "-\t\t\t\t\tint symbol = blTree.GetSymbol(input);",
                "-\t\t\t\t\tif (symbol < 0)",
                "-\t\t\t\t\t\treturn false;",
                "-\t\t\t\t\tif (symbol < 16)",
                "-\t\t\t\t\t\tlengths[index++] = (byte)symbol;",
                "-\t\t\t\t\telse",
                "+\t\t\t\t\tint repeatCount = 0;",
                "+",
                "+\t\t\t\t\tif (symbol == 16) // Repeat last code length 3..6 times",
                "+\t\t\t\t\t{",
                "+",
                "+\t\t\t\t\t\tif (index == 0)",
                "+\t\t\t\t\t\t\tthrow new StreamDecodingException(\"Cannot repeat previous code length when no other code length has been read\");",
                "+",
                "+\t\t\t\t\t\tcodeLength = codeLengths[index - 1];",
                "+",
                "+\t\t\t\t\t\t// 2 bits + 3, [3..6]",
                "+\t\t\t\t\t\twhile(!input.TryGetBits(2, ref repeatCount, 3)) yield return false;",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\telse if (symbol == 17) // Repeat zero 3..10 times",
                " \t\t\t\t\t{",
                "-\t\t\t\t\t\tlen = 0;",
                "-\t\t\t\t\t\tif (symbol == 16)",
                "-\t\t\t\t\t\t{",
                "-\t\t\t\t\t\t\tif (index == 0)",
                "-\t\t\t\t\t\t\t\treturn false;   // No last length!",
                "-\t\t\t\t\t\t\tlen = lengths[index - 1];",
                "-\t\t\t\t\t\t\tsymbol = input.GrabBits(2, true) + 3;",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t\telse if (symbol == 17)",
                "-\t\t\t\t\t\t{",
                "-\t\t\t\t\t\t\t// repeat zero 3..10 times",
                "-\t\t\t\t\t\t\tsymbol = input.GrabBits(3, true) + 3;",
                "-\t\t\t\t\t\t}",
                "-\t\t\t\t\t\telse",
                "-\t\t\t\t\t\t{",
                "-\t\t\t\t\t\t\t// (symbol == 18), repeat zero 11..138 times",
                "-\t\t\t\t\t\t\tsymbol = input.GrabBits(7, true) + 11;",
                "-\t\t\t\t\t\t}",
                "-",
                "-\t\t\t\t\t\tif (index + symbol > lnum + dnum)",
                "-\t\t\t\t\t\t\treturn false; // too many lengths!",
                "-",
                "-\t\t\t\t\t\t// repeat last or zero symbol times",
                "-\t\t\t\t\t\twhile (symbol-- > 0)",
                "-\t\t\t\t\t\t\tlengths[index++] = len;",
                "+\t\t\t\t\t\tcodeLength = 0;",
                "+",
                "+\t\t\t\t\t\t// 3 bits + 3, [3..10]",
                "+\t\t\t\t\t\twhile (!input.TryGetBits(3, ref repeatCount, 3)) yield return false;",
                " \t\t\t\t\t}",
                "-\t\t\t\t}",
                "+\t\t\t\t\telse // (symbol == 18), Repeat zero 11..138 times",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tcodeLength = 0;",
                "-\t\t\t\tif (lengths[256] == 0)",
                "-\t\t\t\t\treturn false; // No end-of-block code!",
                "+\t\t\t\t\t\t// 7 bits + 11, [11..138]",
                "+\t\t\t\t\t\twhile (!input.TryGetBits(7, ref repeatCount, 11)) yield return false;",
                "+\t\t\t\t\t}",
                "-\t\t\t\treturn true;",
                "-\t\t\t}",
                "-\t\t\tcatch (Exception x)",
                "-\t\t\t{",
                "-\t\t\t\treturn false;",
                "+\t\t\t\t\tif (index + repeatCount > dataCodeCount)",
                "+\t\t\t\t\t\tthrow new StreamDecodingException(\"Cannot repeat code lengths past total number of data code lengths\");",
                "+",
                "+\t\t\t\t\twhile (repeatCount-- > 0)",
                "+\t\t\t\t\t\tcodeLengths[index++] = codeLength;",
                "+\t\t\t\t}",
                " \t\t\t}",
                "-\t\t}",
                "-\t\tpublic InflaterHuffmanTree BuildLitLenTree()",
                "-\t\t{",
                "-\t\t\tbyte[] litlenLens = new byte[lnum];",
                "-\t\t\tArray.Copy(lengths, 0, litlenLens, 0, lnum);",
                "-\t\t\treturn new InflaterHuffmanTree(litlenLens);",
                "-\t\t}",
                "+\t\t\tif (codeLengths[256] == 0)",
                "+\t\t\t\tthrow new StreamDecodingException(\"Inflater dynamic header end-of-block code missing\");",
                "-\t\tpublic InflaterHuffmanTree BuildDistTree()",
                "-\t\t{",
                "-\t\t\tbyte[] distLens = new byte[dnum];",
                "-\t\t\tArray.Copy(lengths, lnum, distLens, 0, dnum);",
                "-\t\t\treturn new InflaterHuffmanTree(distLens);",
                "+\t\t\tlitLenTree = new InflaterHuffmanTree(new ArraySegment<byte>(codeLengths, 0, litLenCodeCount));",
                "+\t\t\tdistTree = new InflaterHuffmanTree(new ArraySegment<byte>(codeLengths, litLenCodeCount, distanceCodeCount));",
                "+",
                "+\t\t\tyield return true;",
                " \t\t}",
                "+\t\t/// <summary>",
                "+\t\t/// Get literal/length huffman tree, must not be used before <see cref=\"AttemptRead\"/> has returned true",
                "+\t\t/// </summary>",
                "+\t\t/// <exception cref=\"StreamDecodingException\">If hader has not been successfully read by the state machine</exception>",
                "+\t\tpublic InflaterHuffmanTree LiteralLengthTree",
                "+\t\t\t=> litLenTree ?? throw new StreamDecodingException(\"Header properties were accessed before header had been successfully read\");",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Get distance huffman tree, must not be used before <see cref=\"AttemptRead\"/> has returned true",
                "+\t\t/// </summary>",
                "+\t\t/// <exception cref=\"StreamDecodingException\">If hader has not been successfully read by the state machine</exception>",
                "+\t\tpublic InflaterHuffmanTree DistanceTree",
                "+\t\t\t=> distTree ?? throw new StreamDecodingException(\"Header properties were accessed before header had been successfully read\");",
                "+",
                " \t\t#region Instance Fields",
                "-\t\tbyte[] lengths;",
                "-\t\tInflaterHuffmanTree blTree;",
                "+\t\tprivate readonly StreamManipulator input;",
                "+\t\tprivate readonly IEnumerator<bool> state;",
                "+\t\tprivate readonly IEnumerable<bool> stateMachine;",
                "+",
                "+\t\tprivate byte[] codeLengths = new byte[CODELEN_MAX];",
                "+",
                "+\t\tprivate InflaterHuffmanTree litLenTree;",
                "+\t\tprivate InflaterHuffmanTree distTree;",
                "+",
                "+\t\tint litLenCodeCount, distanceCodeCount, metaCodeCount;",
                "-\t\tint lnum, dnum, blnum, num;",
                " \t\t#endregion",
                "@@ -105,2 +153,3 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                " \t}",
                "+",
                " }",
                "diff --git a/src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterHuffmanTree.cs b/src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterHuffmanTree.cs",
                "index 152a402..ffb1419 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterHuffmanTree.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterHuffmanTree.cs",
                "@@ -1,2 +1,3 @@",
                " using System;",
                "+using System.Collections.Generic;",
                " using ICSharpCode.SharpZipLib.Zip.Compression.Streams;",
                "@@ -65,3 +66,3 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                " \t\t/// </param>",
                "-\t\tpublic InflaterHuffmanTree(byte[] codeLengths)",
                "+\t\tpublic InflaterHuffmanTree(IList<byte> codeLengths)",
                " \t\t{",
                "@@ -71,3 +72,3 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                "-\t\tvoid BuildTree(byte[] codeLengths)",
                "+\t\tvoid BuildTree(IList<byte> codeLengths)",
                " \t\t{",
                "@@ -76,3 +77,3 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                "-\t\t\tfor (int i = 0; i < codeLengths.Length; i++) {",
                "+\t\t\tfor (int i = 0; i < codeLengths.Count; i++) {",
                " \t\t\t\tint bits = codeLengths[i];",
                "@@ -117,3 +118,3 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                "-\t\t\tfor (int i = 0; i < codeLengths.Length; i++) {",
                "+\t\t\tfor (int i = 0; i < codeLengths.Count; i++) {",
                " \t\t\t\tint bits = codeLengths[i];",
                "@@ -156,4 +157,6 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                " \t\t\tint lookahead, symbol;",
                "-\t\t\tif ((lookahead = input.PeekBits(9)) >= 0) {",
                "-\t\t\t\tif ((symbol = tree[lookahead]) >= 0) {",
                "+\t\t\tif ((lookahead = input.PeekBits(9)) >= 0)",
                "+\t\t\t{",
                "+\t\t\t\tif ((symbol = tree[lookahead]) >= 0)",
                "+\t\t\t\t{",
                " \t\t\t\t\tinput.DropBits(symbol & 15);",
                "@@ -163,3 +166,4 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                " \t\t\t\tint bitlen = symbol & 15;",
                "-\t\t\t\tif ((lookahead = input.PeekBits(bitlen)) >= 0) {",
                "+\t\t\t\tif ((lookahead = input.PeekBits(bitlen)) >= 0)",
                "+\t\t\t\t{",
                " \t\t\t\t\tsymbol = tree[subtree | (lookahead >> 9)];",
                "@@ -167,3 +171,5 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                " \t\t\t\t\treturn symbol >> 4;",
                "-\t\t\t\t} else {",
                "+\t\t\t\t}",
                "+\t\t\t\telse",
                "+\t\t\t\t{",
                " \t\t\t\t\tint bits = input.AvailableBits;",
                "@@ -171,6 +177,9 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                " \t\t\t\t\tsymbol = tree[subtree | (lookahead >> 9)];",
                "-\t\t\t\t\tif ((symbol & 15) <= bits) {",
                "+\t\t\t\t\tif ((symbol & 15) <= bits)",
                "+\t\t\t\t\t{",
                " \t\t\t\t\t\tinput.DropBits(symbol & 15);",
                " \t\t\t\t\t\treturn symbol >> 4;",
                "-\t\t\t\t\t} else {",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\telse",
                "+\t\t\t\t\t{",
                " \t\t\t\t\t\treturn -1;",
                "@@ -178,3 +187,5 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                " \t\t\t\t}",
                "-\t\t\t} else {",
                "+\t\t\t}",
                "+\t\t\telse // Less than 9 bits",
                "+\t\t\t{",
                " \t\t\t\tint bits = input.AvailableBits;",
                "@@ -182,6 +193,9 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression",
                " \t\t\t\tsymbol = tree[lookahead];",
                "-\t\t\t\tif (symbol >= 0 && (symbol & 15) <= bits) {",
                "+\t\t\t\tif (symbol >= 0 && (symbol & 15) <= bits)",
                "+\t\t\t\t{",
                " \t\t\t\t\tinput.DropBits(symbol & 15);",
                " \t\t\t\t\treturn symbol >> 4;",
                "-\t\t\t\t} else {",
                "+\t\t\t\t}",
                "+\t\t\t\telse",
                "+\t\t\t\t{",
                " \t\t\t\t\treturn -1;",
                "diff --git a/src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/StreamManipulator.cs b/src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/StreamManipulator.cs",
                "index 80a26c4..f3850f5 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/StreamManipulator.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/StreamManipulator.cs",
                "@@ -44,12 +44,34 @@ namespace ICSharpCode.SharpZipLib.Zip.Compression.Streams",
                " \t\t/// <summary>",
                "-\t\t/// Grabs the next n bits from the input and throws if <paramref name=\"allowZero\"/> is false and the result is 0.",
                "+\t\t/// Tries to grab the next <paramref name=\"bitCount\"/> bits from the input and ",
                "+\t\t/// sets <paramref name=\"output\"/> to the value, adding <paramref name=\"outputOffset\"/>.",
                " \t\t/// </summary>",
                "-\t\tpublic int GrabBits(int bitCount, bool allowZero = false)",
                "+\t\t/// <returns>true if enough bits could be read, otherwise false</returns>",
                "+\t\tpublic bool TryGetBits(int bitCount, ref int output, int outputOffset = 0)",
                " \t\t{",
                "-\t\t\tvar val = PeekBits(bitCount);",
                "-\t\t\tif (!allowZero && val == 0)",
                "-\t\t\t\tthrow new SharpZipBaseException(bitCount + \"-bit value cannot be zero\");",
                "+\t\t\tvar bits = PeekBits(bitCount);",
                "+\t\t\tif (bits < 0)",
                "+\t\t\t{",
                "+\t\t\t\treturn false;",
                "+\t\t\t}",
                "+\t\t\toutput = bits + outputOffset;",
                " \t\t\tDropBits(bitCount);",
                "-\t\t\treturn val;",
                "-\t\t} ",
                "+\t\t\treturn true;",
                "+\t\t}",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Tries to grab the next <paramref name=\"bitCount\"/> bits from the input and ",
                "+\t\t/// sets <paramref name=\"output\"/> to the value, adding <paramref name=\"outputOffset\"/>.",
                "+\t\t/// </summary>",
                "+\t\t/// <returns>true if enough bits could be read, otherwise false</returns>",
                "+\t\tpublic bool TryGetBits(int bitCount, ref byte[] array, int index)",
                "+\t\t{",
                "+\t\t\tvar bits = PeekBits(bitCount);",
                "+\t\t\tif (bits < 0)",
                "+\t\t\t{",
                "+\t\t\t\treturn false;",
                "+\t\t\t}",
                "+\t\t\tarray[index] = (byte)bits;",
                "+\t\t\tDropBits(bitCount);",
                "+\t\t\treturn true;",
                "+\t\t}"
            ],
            "changed_files": [
                "src/ICSharpCode.SharpZipLib/Zip/Compression/Inflater.cs",
                "src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterDynHeader.cs",
                "src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterHuffmanTree.cs",
                "src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/StreamManipulator.cs"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "249": "",
                "253": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 253",
                    "relevance": 32
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterHuffmanTree.cs, src/ICSharpCode.SharpZipLib/Zip/Compression/Inflater.cs, src/ICSharpCode.SharpZipLib/Zip/Compression/InflaterDynHeader.cs, src/ICSharpCode.SharpZipLib/Zip/Compression/Streams/StreamManipulator.cs",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sharpziplib",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 249, 253",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e831547c45c070561c774e6d1f8c67d0060877f7",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1531397405,
            "hunks": 0,
            "message": "Merge pull request #226 from insylogo/master Fixes issue #164 by not accessing stream position to determine central signature offset (instead, use central directory offset + size of all entries)",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "226": "System.NotSupportedException when zipping more than ~4.2 gb of data to a stream that doesn't support seeking #164 Invalid CRC/Length when using compression mode = 0 and file size > 4 gigs #130",
                "164": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc1",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 164",
                    "relevance": 32
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: directory",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 226, 164",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6327312620307834c950cebac7db289b99036bba",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1531416236,
            "hunks": 0,
            "message": "Merge PR #202, Convert CRC checking to ArraySegment Convert crc checking to use ArraySegment for parameter validation. Fixes #183.",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "202": "CRC calculation can be improved #306",
                "183": "Convert crc checking to use ArraySegment for parameter validation. #202"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc1",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 183",
                    "relevance": 32
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 202, 183",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e2d4c88cdb8e8b22da1469a61e7bddf0dbf506b0",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1532186665,
            "hunks": 3,
            "message": "Update ICSharpCode.SharpZipLib.csproj (#256)",
            "diff": [
                "diff --git a/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj b/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                "index 97b82e6..724593c 100644",
                "--- a/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                "+++ b/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                "@@ -11,5 +11,5 @@",
                "   <PropertyGroup>",
                "-    <AssemblyVersion>1.0.0.3</AssemblyVersion>",
                "-    <FileVersion>1.0.0.3</FileVersion>",
                "-    <Version>1.0.0-rc1</Version>",
                "+    <AssemblyVersion>1.0.0.4</AssemblyVersion>",
                "+    <FileVersion>1.0.0.4</FileVersion>",
                "+    <Version>1.0.0-rc2</Version>",
                "     <PackageId>SharpZipLib </PackageId>",
                "@@ -47,2 +47,2 @@ Please see https://github.com/icsharpcode/SharpZipLib/wiki/Release-1.0 for more",
                "-</Project>",
                "\\ No newline at end of file",
                "+</Project>"
            ],
            "changed_files": [
                "src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "256": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: sharpziplib",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sharpziplib",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 256",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a8f1741699016b75bea39b84758f884555a2b23a",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1531510284,
            "hunks": 4,
            "message": "Merge PR #247, Update Nuget package for v1.0-rc1 * Remove Directory.build.props * Move Nuget settings to .csproj and update versions * Fix repository URL, license URL and update copyright year.",
            "diff": [
                "diff --git a/src/Directory.build.props b/src/Directory.build.props",
                "deleted file mode 100644",
                "index 640cae6..0000000",
                "--- a/src/Directory.build.props",
                "+++ /dev/null",
                "@@ -1,17 +0,0 @@",
                "-<Project>",
                "-  <PropertyGroup>",
                "-    <Company>ICSharpCode</Company>",
                "-    <Authors>ICSharpCode</Authors>",
                "-    <Description>SharpZipLib (#ziplib, formerly NZipLib) is a compression library for Zip, GZip, BZip2, and Tar written entirely in C# for .NET. It is implemented as an assembly (installable in the GAC), and thus can easily be incorporated into other projects (in any .NET language)</Description>",
                "-    <PackageLicenseUrl>http://icsharpcode.github.io/SharpZipLib/#license</PackageLicenseUrl>",
                "-    <PackageProjectUrl>http://icsharpcode.github.io/SharpZipLib/</PackageProjectUrl>",
                "-    <RepositoryUrl>https://github.com/PrismLibrary/Prism</RepositoryUrl>",
                "-    <ReleaseNotes>Please see https://github.com/icsharpcode/SharpZipLib/wiki/Release-1.0 for more information.</ReleaseNotes>",
                "-    <Copyright>Copyright \u00c2\u00a9 2000-2017 SharpZipLib Contributors</Copyright>",
                "-    <PackageTags>Compression Library Zip GZip BZip2 LZW Tar</PackageTags>",
                "-    <NeutralLanguage>en-US</NeutralLanguage>",
                "-    <Version>$(fullBuildSemanticVersion)</Version>",
                "-    <AssemblyVersion>$(fullBuildVersion)</AssemblyVersion>",
                "-    <FileVersion>$(fullBuildVersion)</FileVersion>",
                "-  </PropertyGroup>",
                "-</Project>",
                "\\ No newline at end of file",
                "diff --git a/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj b/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                "index db1440d..97b82e6 100644",
                "--- a/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                "+++ b/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                "@@ -4,3 +4,2 @@",
                "     <TargetFrameworks>netstandard2;net45</TargetFrameworks>",
                "-    <PackageId>SharpZipLib </PackageId>",
                "     <SignAssembly>True</SignAssembly>",
                "@@ -8,5 +7,20 @@",
                "     <GeneratePackageOnBuild>true</GeneratePackageOnBuild>",
                "-    <Version>1.0.0-alpha2</Version>",
                "+  </PropertyGroup>",
                "+  ",
                "+  <!-- Nuget specific tags -->",
                "+  <PropertyGroup>",
                "+    <AssemblyVersion>1.0.0.3</AssemblyVersion>",
                "+    <FileVersion>1.0.0.3</FileVersion>",
                "+    <Version>1.0.0-rc1</Version>",
                "+    <PackageId>SharpZipLib </PackageId>",
                "+    <Company>ICSharpCode</Company>",
                "+    <Authors>ICSharpCode</Authors>",
                "+    <Description>SharpZipLib (#ziplib, formerly NZipLib) is a compression library for Zip, GZip, BZip2, and Tar written entirely in C# for .NET. It is implemented as an assembly (installable in the GAC), and thus can easily be incorporated into other projects (in any .NET language)</Description>",
                "+    <PackageLicenseUrl>https://github.com/icsharpcode/SharpZipLib/raw/master/LICENSE.txt</PackageLicenseUrl>",
                "+    <PackageProjectUrl>http://icsharpcode.github.io/SharpZipLib/</PackageProjectUrl>",
                "     <RepositoryUrl>https://github.com/icsharpcode/SharpZipLib</RepositoryUrl>",
                "-    <PackageReleaseNotes>This is a pre-release version!",
                "+    <Copyright>Copyright \u00c2\u00a9 2000-2018 SharpZipLib Contributors</Copyright>",
                "+    <PackageTags>Compression Library Zip GZip BZip2 LZW Tar</PackageTags>",
                "+    <NeutralLanguage>en-US</NeutralLanguage>",
                "+    <PackageReleaseNotes>This is a release candidate for v1.0"
            ],
            "changed_files": [
                "src/Directory.build.props",
                "src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "247": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc1",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: directory",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: directory, sharpziplib",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 247",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "be7c86de0a21fdcb3ecd189b9051461ddf0a7de8",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1530437587,
            "hunks": 54,
            "message": "Update tests (#236) * Update/add performance tests for streams * Update RingBuffer to allow for token cancelation",
            "diff": [
                "diff --git a/.gitignore b/.gitignore",
                "index f1e3d20..d8a23b0 100644",
                "--- a/.gitignore",
                "+++ b/.gitignore",
                "@@ -252 +252,2 @@ paket-files/",
                " *.sln.iml",
                "+/test/ICSharpCode.SharpZipLib.TestBootstrapper/Properties/launchSettings.json",
                "diff --git a/test/ICSharpCode.SharpZipLib.TestBootstrapper/Program.cs b/test/ICSharpCode.SharpZipLib.TestBootstrapper/Program.cs",
                "index 3f13861..aa36286 100644",
                "--- a/test/ICSharpCode.SharpZipLib.TestBootstrapper/Program.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.TestBootstrapper/Program.cs",
                "@@ -11,4 +11,4 @@ namespace ICSharpCode.SharpZipLib.TestBootstrapper",
                " \t\t{",
                "-\t\t\tnew AutoRun(typeof(ICSharpCode.SharpZipLib.Tests.Base.InflaterDeflaterTestSuite).GetTypeInfo().Assembly)",
                "-\t\t\t.Execute(args, new ExtendedTextWrapper(Console.Out), Console.In);",
                "+\t\t\tnew AutoRun(typeof(Tests.Base.InflaterDeflaterTestSuite).GetTypeInfo().Assembly)",
                "+\t\t\t.Execute(args);",
                " \t\t}",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/BZip2/Bzip2Tests.cs b/test/ICSharpCode.SharpZipLib.Tests/BZip2/Bzip2Tests.cs",
                "index a807b0e..6bfc07c 100644",
                "--- a/test/ICSharpCode.SharpZipLib.Tests/BZip2/Bzip2Tests.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/BZip2/Bzip2Tests.cs",
                "@@ -6,2 +6,3 @@ using NUnit.Framework;",
                " using System.Threading;",
                "+using System.Diagnostics;",
                "@@ -88,87 +89,26 @@ namespace ICSharpCode.SharpZipLib.Tests.BZip2",
                " \t\t[Category(\"BZip2\")]",
                "-\t\t[Ignore(\"TODO : Fix this\")]",
                "-\t\tpublic void Performance()",
                "+\t\t[Category(\"Performance\")]",
                "+\t\t[Explicit(\"Long-running\")]",
                "+\t\tpublic void WriteThroughput()",
                " \t\t{",
                "-\t\t\twindow_ = new WindowedStream(0x150000);",
                "-",
                "-\t\t\toutStream_ = new BZip2OutputStream(window_, 1);",
                "-",
                "-\t\t\tconst long Target = 0x10000000;",
                "-\t\t\treadTarget_ = writeTarget_ = Target;",
                "-",
                "-\t\t\tThread reader = new Thread(Reader);",
                "-\t\t\treader.Name = \"Reader\";",
                "-",
                "-\t\t\tThread writer = new Thread(Writer);",
                "-\t\t\twriter.Name = \"Writer\";",
                "-",
                "-\t\t\tDateTime startTime = DateTime.Now;",
                "-\t\t\twriter.Start();",
                "-",
                "-\t\t\tinStream_ = new BZip2InputStream(window_);",
                "-",
                "-\t\t\treader.Start();",
                "-",
                "-\t\t\tAssert.IsTrue(writer.Join(TimeSpan.FromMinutes(5.0D)));",
                "-\t\t\tAssert.IsTrue(reader.Join(TimeSpan.FromMinutes(5.0D)));",
                "-",
                "-\t\t\tDateTime endTime = DateTime.Now;",
                "-\t\t\tTimeSpan span = endTime - startTime;",
                "-\t\t\tConsole.WriteLine(\"Time {0} throughput {1} KB/Sec\", span, (Target / 1024) / span.TotalSeconds);",
                "+\t\t\tPerformanceTesting.TestWrite(",
                "+\t\t\t\tsize: TestDataSize.Small,",
                "+\t\t\t\toutput: w => new BZip2OutputStream(w)",
                "+\t\t\t);",
                " \t\t}",
                "-\t\tvoid Reader()",
                "+\t\t[Test]",
                "+\t\t[Category(\"BZip2\")]",
                "+\t\t[Category(\"Performance\")]",
                "+\t\t[Explicit(\"Long-running\")]",
                "+\t\tpublic void ReadWriteThroughput()",
                " \t\t{",
                "-\t\t\tconst int Size = 8192;",
                "-\t\t\tint readBytes = 1;",
                "-\t\t\tbyte[] buffer = new byte[Size];",
                "-",
                "-\t\t\tlong passifierLevel = readTarget_ - 0x10000000;",
                "-",
                "-\t\t\twhile ((readTarget_ > 0) && (readBytes > 0)) {",
                "-\t\t\t\tint count = Size;",
                "-\t\t\t\tif (count > readTarget_) {",
                "-\t\t\t\t\tcount = (int)readTarget_;",
                "-\t\t\t\t}",
                "-",
                "-\t\t\t\treadBytes = inStream_.Read(buffer, 0, count);",
                "-\t\t\t\treadTarget_ -= readBytes;",
                "-",
                "-\t\t\t\tif (readTarget_ <= passifierLevel) {",
                "-\t\t\t\t\tConsole.WriteLine(\"Reader {0} bytes remaining\", readTarget_);",
                "-\t\t\t\t\tpassifierLevel = readTarget_ - 0x10000000;",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-",
                "-\t\t\tAssert.IsTrue(window_.IsClosed, \"Window should be closed\");",
                "-",
                "-\t\t\t// This shouldnt read any data but should read the footer",
                "-\t\t\treadBytes = inStream_.Read(buffer, 0, 1);",
                "-\t\t\tAssert.AreEqual(0, readBytes, \"Stream should be empty\");",
                "-\t\t\tAssert.AreEqual(0, window_.Length, \"Window should be closed\");",
                "-\t\t\tinStream_.Close();",
                "+\t\t\tPerformanceTesting.TestReadWrite(",
                "+\t\t\t\tsize: TestDataSize.Small,",
                "+\t\t\t\tinput: w => new BZip2InputStream(w),",
                "+\t\t\t\toutput: w => new BZip2OutputStream(w)",
                "+\t\t\t);",
                " \t\t}",
                "-\t\tvoid WriteTargetBytes()",
                "-\t\t{",
                "-\t\t\tconst int Size = 8192;",
                "-",
                "-\t\t\tbyte[] buffer = new byte[Size];",
                "-\t\t\twhile (writeTarget_ > 0) {",
                "-\t\t\t\tint thisTime = Size;",
                "-\t\t\t\tif (thisTime > writeTarget_) {",
                "-\t\t\t\t\tthisTime = (int)writeTarget_;",
                "-\t\t\t\t}",
                "-",
                "-\t\t\t\toutStream_.Write(buffer, 0, thisTime);",
                "-\t\t\t\twriteTarget_ -= thisTime;",
                "-\t\t\t}",
                "-\t\t}",
                "-",
                "-\t\tvoid Writer()",
                "-\t\t{",
                "-\t\t\tWriteTargetBytes();",
                "-\t\t\toutStream_.Close();",
                "-\t\t}",
                " \t}",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/GZip/GZipTests.cs b/test/ICSharpCode.SharpZipLib.Tests/GZip/GZipTests.cs",
                "index c5c97fc..941101d 100644",
                "--- a/test/ICSharpCode.SharpZipLib.Tests/GZip/GZipTests.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/GZip/GZipTests.cs",
                "@@ -6,2 +6,3 @@ using NUnit.Framework;",
                " using System.Threading;",
                "+using System.Diagnostics;",
                "@@ -282,87 +283,29 @@ namespace ICSharpCode.SharpZipLib.Tests.GZip",
                " \t\t[Category(\"GZip\")]",
                "+\t\t[Category(\"Performance\")]",
                " \t\t[Category(\"Long Running\")]",
                "-\t\t[Ignore(\"TODO : Fix this\")]",
                "-\t\tpublic void BigStream()",
                "+\t\t[Explicit(\"Long Running\")]",
                "+\t\tpublic void WriteThroughput()",
                " \t\t{",
                "-\t\t\twindow_ = new WindowedStream(0x3ffff);",
                "-\t\t\toutStream_ = new GZipOutputStream(window_);",
                "-\t\t\tinStream_ = new GZipInputStream(window_);",
                "+\t\t\tPerformanceTesting.TestWrite(",
                "+\t\t\t\tsize: TestDataSize.Large,",
                "+\t\t\t\toutput: w => new GZipOutputStream(w)",
                "+\t\t\t);",
                "-\t\t\tlong target = 0x10000000;",
                "-\t\t\treadTarget_ = writeTarget_ = target;",
                "-",
                "-\t\t\tThread reader = new Thread(Reader);",
                "-\t\t\treader.Name = \"Reader\";",
                "-\t\t\treader.Start();",
                "-",
                "-\t\t\tThread writer = new Thread(Writer);",
                "-\t\t\twriter.Name = \"Writer\";",
                "-",
                "-\t\t\tDateTime startTime = DateTime.Now;",
                "-\t\t\twriter.Start();",
                "-",
                "-\t\t\twriter.Join();",
                "-\t\t\treader.Join();",
                "-",
                "-\t\t\tDateTime endTime = DateTime.Now;",
                "-",
                "-\t\t\tTimeSpan span = endTime - startTime;",
                "-\t\t\tConsole.WriteLine(\"Time {0}  processes {1} KB/Sec\", span, (target / 1024) / span.TotalSeconds);",
                " \t\t}",
                "-\t\tvoid Reader()",
                "+\t\t[Test]",
                "+\t\t[Category(\"GZip\")]",
                "+\t\t[Category(\"Performance\")]",
                "+\t\t[Explicit(\"Long Running\")]",
                "+\t\tpublic void ReadWriteThroughput()",
                " \t\t{",
                "-\t\t\tconst int Size = 8192;",
                "-\t\t\tint readBytes = 1;",
                "-\t\t\tbyte[] buffer = new byte[Size];",
                "-",
                "-\t\t\tlong passifierLevel = readTarget_ - 0x10000000;",
                "-",
                "-\t\t\twhile ((readTarget_ > 0) && (readBytes > 0)) {",
                "-\t\t\t\tint count = Size;",
                "-\t\t\t\tif (count > readTarget_) {",
                "-\t\t\t\t\tcount = (int)readTarget_;",
                "-\t\t\t\t}",
                "-",
                "-\t\t\t\treadBytes = inStream_.Read(buffer, 0, count);",
                "-\t\t\t\treadTarget_ -= readBytes;",
                "+\t\t\tPerformanceTesting.TestReadWrite(",
                "+\t\t\t\tsize: TestDataSize.Large,",
                "+\t\t\t\tinput: w => new GZipInputStream(w),",
                "+\t\t\t\toutput: w => new GZipOutputStream(w)",
                "+\t\t\t);",
                "-\t\t\t\tif (readTarget_ <= passifierLevel) {",
                "-\t\t\t\t\tConsole.WriteLine(\"Reader {0} bytes remaining\", readTarget_);",
                "-\t\t\t\t\tpassifierLevel = readTarget_ - 0x10000000;",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-",
                "-\t\t\tAssert.IsTrue(window_.IsClosed, \"Window should be closed\");",
                "-",
                "-\t\t\t// This shouldnt read any data but should read the footer",
                "-\t\t\treadBytes = inStream_.Read(buffer, 0, 1);",
                "-\t\t\tAssert.AreEqual(0, readBytes, \"Stream should be empty\");",
                "-\t\t\tAssert.AreEqual(0, window_.Length, \"Window should be closed\");",
                "-\t\t\tinStream_.Close();",
                " \t\t}",
                "-\t\tvoid Writer()",
                "-\t\t{",
                "-\t\t\tconst int Size = 8192;",
                "-",
                "-\t\t\tbyte[] buffer = new byte[Size];",
                "-",
                "-\t\t\twhile (writeTarget_ > 0) {",
                "-\t\t\t\tint thisTime = Size;",
                "-\t\t\t\tif (thisTime > writeTarget_) {",
                "-\t\t\t\t\tthisTime = (int)writeTarget_;",
                "-\t\t\t\t}",
                "-",
                "-\t\t\t\toutStream_.Write(buffer, 0, thisTime);",
                "-\t\t\t\twriteTarget_ -= thisTime;",
                "-\t\t\t}",
                "-\t\t\toutStream_.Close();",
                "-\t\t}",
                "-\t\tWindowedStream window_;",
                "-\t\tGZipOutputStream outStream_;",
                "-\t\tGZipInputStream inStream_;",
                "-\t\tlong readTarget_;",
                "-\t\tlong writeTarget_;",
                " \t}",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs b/test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs",
                "index f5082a6..5f4b2a7 100644",
                "--- a/test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs",
                "@@ -614,2 +614,62 @@ namespace ICSharpCode.SharpZipLib.Tests.Tar",
                " \t\t}",
                "+",
                "+\t\t[Test]",
                "+\t\t[Category(\"Tar\")]",
                "+\t\t[Category(\"Performance\")]",
                "+\t\t[Explicit(\"Long Running\")]",
                "+\t\tpublic void WriteThroughput()",
                "+\t\t{",
                "+\t\t\tconst string EntryName = \"LargeTarEntry\";",
                "+",
                "+\t\t\tPerformanceTesting.TestWrite(TestDataSize.Large, bs =>",
                "+\t\t\t{",
                "+\t\t\t\tvar tos = new TarOutputStream(bs);",
                "+\t\t\t\ttos.PutNextEntry(new TarEntry(new TarHeader()",
                "+\t\t\t\t{",
                "+\t\t\t\t\tName = EntryName,",
                "+\t\t\t\t\tSize = (int)TestDataSize.Large,",
                "+\t\t\t\t}));",
                "+\t\t\t\treturn tos;",
                "+\t\t\t},",
                "+\t\t\tstream =>",
                "+\t\t\t{",
                "+\t\t\t\t((TarOutputStream)stream).CloseEntry();",
                "+\t\t\t});",
                "+\t\t}",
                "+",
                "+\t\t[Test]",
                "+\t\t[Category(\"Tar\")]",
                "+\t\t[Category(\"Performance\")]",
                "+\t\t[Explicit(\"Long Running\")]",
                "+\t\tpublic void SingleLargeEntry()",
                "+\t\t{",
                "+\t\t\tconst string EntryName = \"LargeTarEntry\";",
                "+\t\t\tconst TestDataSize dataSize = TestDataSize.Large;",
                "+",
                "+\t\t\tPerformanceTesting.TestReadWrite(",
                "+\t\t\t\tsize: dataSize,",
                "+\t\t\t\tinput: bs =>",
                "+\t\t\t\t{",
                "+\t\t\t\t\tvar tis = new TarInputStream(bs);",
                "+\t\t\t\t\tvar entry = tis.GetNextEntry();",
                "+",
                "+\t\t\t\t\tAssert.AreEqual(entry.Name, EntryName);",
                "+\t\t\t\t\treturn tis;",
                "+\t\t\t\t},",
                "+\t\t\t\toutput: bs =>",
                "+\t\t\t\t{",
                "+\t\t\t\t\tvar tos = new TarOutputStream(bs);",
                "+\t\t\t\t\ttos.PutNextEntry(new TarEntry(new TarHeader()",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tName = EntryName,",
                "+\t\t\t\t\t\tSize = (int)dataSize,",
                "+\t\t\t\t\t}));",
                "+\t\t\t\t\treturn tos;",
                "+\t\t\t\t},",
                "+\t\t\t\toutputClose: stream =>",
                "+\t\t\t\t{",
                "+\t\t\t\t\t((TarOutputStream)stream).CloseEntry();",
                "+\t\t\t\t}",
                "+\t\t\t);",
                "+\t\t}",
                " \t}",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/TestSupport/PerformanceTesting.cs b/test/ICSharpCode.SharpZipLib.Tests/TestSupport/PerformanceTesting.cs",
                "new file mode 100644",
                "index 0000000..15aad90",
                "--- /dev/null",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/TestSupport/PerformanceTesting.cs",
                "@@ -0,0 +1,236 @@",
                "+\u00ef\u00bb\u00bfusing NUnit.Framework;",
                "+using System;",
                "+using System.Collections.Generic;",
                "+using System.Diagnostics;",
                "+using System.IO;",
                "+using System.Runtime.ExceptionServices;",
                "+using System.Text;",
                "+using System.Threading;",
                "+",
                "+namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                "+{",
                "+    internal static class PerformanceTesting",
                "+    {",
                "+\t\tprivate const double ByteToMB = 1000000;",
                "+\t\tprivate const int PacifierOffset = 0x100000;",
                "+",
                "+\t\tpublic static void TestReadWrite(TestDataSize size, Func<Stream, Stream> input, Func<Stream, Stream> output, Action<Stream> outputClose = null)",
                "+\t\t\t=> TestReadWrite((int)size, input, output);",
                "+",
                "+\t\tpublic static void TestWrite(TestDataSize size, Func<Stream, Stream> output, Action<Stream> outputClose = null)",
                "+\t\t\t=> TestWrite((int)size, output, outputClose);",
                "+",
                "+\t\tpublic static void TestReadWrite(int size, Func<Stream, Stream> input, Func<Stream, Stream> output, Action<Stream> outputClose = null)",
                "+\t\t{",
                "+\t\t\tvar cts = new CancellationTokenSource(TimeSpan.FromMinutes(1));",
                "+\t\t\tvar window = new WindowedStream(size, cts.Token);",
                "+",
                "+\t\t\tvar readerState = new PerfWorkerState()",
                "+\t\t\t{",
                "+\t\t\t\tbytesLeft = size,",
                "+\t\t\t\ttoken = cts.Token,",
                "+\t\t\t\tbaseStream = window,",
                "+\t\t\t\tstreamCtr = input,",
                "+\t\t\t};",
                "+",
                "+\t\t\tvar writerState = new PerfWorkerState()",
                "+\t\t\t{",
                "+\t\t\t\tbytesLeft = size,",
                "+\t\t\t\ttoken = cts.Token,",
                "+\t\t\t\tbaseStream = window,",
                "+\t\t\t\tstreamCtr = output,",
                "+\t\t\t\tstreamCls = outputClose",
                "+\t\t\t};",
                "+",
                "+",
                "+",
                "+\t\t\tvar reader = new Thread(stateObject =>",
                "+\t\t\t{",
                "+\t\t\t\tvar state = (PerfWorkerState)stateObject;",
                "+\t\t\t\ttry",
                "+\t\t\t\t{",
                "+\t\t\t\t\t// Run output stream constructor",
                "+\t\t\t\t\tstate.InitStream();",
                "+",
                "+\t\t\t\t\t// Main read loop",
                "+\t\t\t\t\tReadTargetBytes(ref state);",
                "+",
                "+\t\t\t\t\tif (!state.token.IsCancellationRequested)",
                "+\t\t\t\t\t{",
                "+",
                "+\t\t\t\t\t\tAssert.IsFalse(state.baseStream.CanRead, \"Base Stream should be closed\");",
                "+",
                "+\t\t\t\t\t\t// This shouldnt read any data but should read the footer",
                "+\t\t\t\t\t\tvar buffer = new byte[1];",
                "+\t\t\t\t\t\tint readBytes = state.stream.Read(buffer, 0, 1);",
                "+\t\t\t\t\t\tAssert.LessOrEqual(readBytes, 0, \"Stream should be empty\");",
                "+\t\t\t\t\t}",
                "+",
                "+\t\t\t\t\t// Dispose of the input stream",
                "+\t\t\t\t\tstate.stream.Close();",
                "+\t\t\t\t}",
                "+\t\t\t\tcatch (Exception x)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tstate.exception = x;",
                "+\t\t\t\t}",
                "+\t\t\t});",
                "+",
                "+\t\t\tThread writer = new Thread(stateObject =>",
                "+\t\t\t{",
                "+\t\t\t\tvar state = (PerfWorkerState)stateObject;",
                "+\t\t\t\ttry",
                "+\t\t\t\t{",
                "+\t\t\t\t\t// Run input stream constructor",
                "+\t\t\t\t\tstate.InitStream();",
                "+",
                "+\t\t\t\t\t// Main write loop",
                "+\t\t\t\t\tWriteTargetBytes(ref state);",
                "+",
                "+\t\t\t\t\tstate.DeinitStream();",
                "+",
                "+\t\t\t\t\t// Dispose of the input stream",
                "+\t\t\t\t\tstate.stream.Close();",
                "+\t\t\t\t}",
                "+\t\t\t\tcatch (Exception x)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tstate.exception = x;",
                "+\t\t\t\t}",
                "+\t\t\t});",
                "+",
                "+\t\t\tvar sw = Stopwatch.StartNew();",
                "+",
                "+\t\t\twriter.Name = \"Writer\";",
                "+\t\t\twriter.Start(writerState);",
                "+",
                "+\t\t\t// Give the writer thread a couple of seconds to write headers",
                "+\t\t\tThread.Sleep(TimeSpan.FromSeconds(3));",
                "+",
                "+\t\t\treader.Name = \"Reader\";",
                "+\t\t\treader.Start(readerState);",
                "+",
                "+\t\t\tbool writerJoined = false, readerJoined = false;",
                "+\t\t\tconst int timeout = 100;",
                "+",
                "+\t\t\twhile (!writerJoined && !readerJoined)",
                "+\t\t\t{",
                "+\t\t\t\twriterJoined = writer.Join(timeout);",
                "+\t\t\t\tif (writerJoined && writerState.exception != null)",
                "+\t\t\t\t\tExceptionDispatchInfo.Capture(writerState.exception).Throw();",
                "+",
                "+\t\t\t\treaderJoined = reader.Join(timeout);",
                "+\t\t\t\tif (readerJoined && readerState.exception != null)",
                "+\t\t\t\t\tExceptionDispatchInfo.Capture(readerState.exception).Throw();",
                "+",
                "+\t\t\t\tif (cts.IsCancellationRequested) break;",
                "+\t\t\t}",
                "+",
                "+\t\t\t//Assert.IsTrue(writerJoined, \"Timed out waiting for reader thread to join\");",
                "+\t\t\t//Assert.IsTrue(readerJoined, \"Timed out waiting for writer thread to join\");",
                "+",
                "+",
                "+\t\t\tAssert.IsFalse(cts.IsCancellationRequested, \"Threads were cancelled before completing execution\");",
                "+",
                "+\t\t\tvar elapsed = sw.Elapsed;",
                "+\t\t\tvar testSize = size / ByteToMB;",
                "+\t\t\tConsole.WriteLine($\"Time {elapsed:mm\\\\:ss\\\\.fff} throughput {testSize / elapsed.TotalSeconds:f2} MB/s (using test size: {testSize:f2} MB)\");",
                "+\t\t}",
                "+",
                "+\t\tpublic static void TestWrite(int size, Func<Stream, Stream> output, Action<Stream> outputClose = null)",
                "+\t\t{",
                "+\t\t\tvar cts = new CancellationTokenSource(TimeSpan.FromMinutes(1));",
                "+",
                "+\t\t\tvar sw = Stopwatch.StartNew();",
                "+\t\t\tvar writerState = new PerfWorkerState()",
                "+\t\t\t{",
                "+\t\t\t\tbytesLeft = size,",
                "+\t\t\t\ttoken = cts.Token,",
                "+\t\t\t\tbaseStream = new NullStream(),",
                "+\t\t\t\tstreamCtr = output,",
                "+\t\t\t};",
                "+",
                "+\t\t\twriterState.InitStream();",
                "+\t\t\tWriteTargetBytes(ref writerState);",
                "+",
                "+\t\t\twriterState.DeinitStream();",
                "+",
                "+\t\t\twriterState.stream.Close();",
                "+",
                "+\t\t\tvar elapsed = sw.Elapsed;",
                "+\t\t\tvar testSize = size / ByteToMB;",
                "+\t\t\tConsole.WriteLine($\"Time {elapsed:mm\\\\:ss\\\\.fff} throughput {testSize / elapsed.TotalSeconds:f2} MB/s (using test size: {testSize:f2} MB)\");",
                "+\t\t}",
                "+",
                "+\t\tinternal static void WriteTargetBytes(ref PerfWorkerState state)",
                "+\t\t{",
                "+",
                "+\t\t\tconst int bufferSize = 8192;",
                "+\t\t\tbyte[] buffer = new byte[bufferSize];",
                "+\t\t\tint bytesToWrite = bufferSize;",
                "+",
                "+\t\t\twhile (state.bytesLeft > 0 && !state.token.IsCancellationRequested)",
                "+\t\t\t{",
                "+\t\t\t\tif (state.bytesLeft < bufferSize)",
                "+\t\t\t\t\tbytesToWrite = bufferSize;",
                "+",
                "+\t\t\t\tstate.stream.Write(buffer, 0, bytesToWrite);",
                "+\t\t\t\tstate.bytesLeft -= bytesToWrite;",
                "+\t\t\t}",
                "+",
                "+\t\t}",
                "+",
                "+\t\tinternal static void ReadTargetBytes(ref PerfWorkerState state)",
                "+\t\t{",
                "+\t\t\tconst int bufferSize = 8192;",
                "+\t\t\tbyte[] buffer = new byte[bufferSize];",
                "+\t\t\tint bytesRead, bytesToRead = bufferSize;",
                "+",
                "+\t\t\tint pacifierLevel = state.bytesLeft - PacifierOffset;",
                "+",
                "+\t\t\twhile ((state.bytesLeft > 0) && !state.token.IsCancellationRequested)",
                "+\t\t\t{",
                "+\t\t\t\tif (state.bytesLeft < bufferSize)",
                "+\t\t\t\t\tbytesToRead = bufferSize;",
                "+",
                "+\t\t\t\tbytesRead = state.stream.Read(buffer, 0, bytesToRead);",
                "+\t\t\t\tstate.bytesLeft -= bytesRead;",
                "+",
                "+\t\t\t\tif (state.bytesLeft <= pacifierLevel)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tDebug.WriteLine($\"Reader {state.bytesLeft} bytes remaining\");",
                "+\t\t\t\t\tpacifierLevel = state.bytesLeft - PacifierOffset;",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\tif (bytesRead == 0) break;",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t}",
                "+",
                "+\tinternal class PerfWorkerState",
                "+\t{",
                "+\t\tpublic Stream stream;",
                "+\t\tpublic Stream baseStream;",
                "+\t\tpublic int bytesLeft;",
                "+\t\tpublic Exception exception;",
                "+\t\tpublic CancellationToken token;",
                "+\t\tpublic Func<Stream, Stream> streamCtr;",
                "+\t\tpublic Action<Stream> streamCls;",
                "+",
                "+\t\tpublic void InitStream()",
                "+\t\t{",
                "+\t\t\tstream = streamCtr(baseStream);",
                "+\t\t}",
                "+",
                "+\t\tpublic void DeinitStream()",
                "+\t\t{",
                "+\t\t\tstreamCls?.Invoke(stream);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tpublic enum TestDataSize: int",
                "+\t{",
                "+\t\tLarge = 0x10000000,",
                "+\t\tMedium = 0x5000000,",
                "+\t\tSmall =  0x1400000,",
                "+\t}",
                "+}",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/TestSupport/RingBuffer.cs b/test/ICSharpCode.SharpZipLib.Tests/TestSupport/RingBuffer.cs",
                "index 19ae1f1..5bbcf5c 100644",
                "--- a/test/ICSharpCode.SharpZipLib.Tests/TestSupport/RingBuffer.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/TestSupport/RingBuffer.cs",
                "@@ -23,3 +23,3 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t/// <param name=\"size\">The size of the ring buffer to create.</param>",
                "-\t\tpublic ReadWriteRingBuffer(int size)",
                "+\t\tpublic ReadWriteRingBuffer(int size, CancellationToken? token = null)",
                " \t\t{",
                "@@ -31,2 +31,3 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t\tlockObject_ = new object();",
                "+\t\t\ttoken_ = token;",
                "@@ -83,2 +84,3 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t\t\tThread.Sleep(waitSpan_);",
                "+\t\t\t\ttoken_?.ThrowIfCancellationRequested();",
                " \t\t\t}",
                "@@ -124,2 +126,3 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t\t\t\tThread.Sleep(waitSpan_);",
                "+\t\t\t\t\ttoken_?.ThrowIfCancellationRequested();",
                " \t\t\t\t}",
                "@@ -179,2 +182,3 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t\t\tThread.Sleep(waitSpan_);",
                "+\t\t\t\ttoken_?.ThrowIfCancellationRequested();",
                " \t\t\t}",
                "@@ -219,2 +223,3 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t\t\t\tThread.Sleep(waitSpan_);",
                "+\t\t\t\t\ttoken_?.ThrowIfCancellationRequested();",
                " \t\t\t\t}",
                "@@ -356,3 +361,3 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\tobject lockObject_;",
                "-",
                "+\t\tprivate CancellationToken? token_;",
                " \t\tTimeSpan waitSpan_;",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/TestSupport/Streams.cs b/test/ICSharpCode.SharpZipLib.Tests/TestSupport/Streams.cs",
                "index 93aeed7..2f006ec 100644",
                "--- a/test/ICSharpCode.SharpZipLib.Tests/TestSupport/Streams.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/TestSupport/Streams.cs",
                "@@ -2,2 +2,3 @@ using System;",
                " using System.IO;",
                "+using System.Threading;",
                "@@ -262,5 +263,5 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t/// <param name=\"size\">The size.</param>",
                "-\t\tpublic WindowedStream(int size)",
                "+\t\tpublic WindowedStream(int size, CancellationToken? token = null)",
                " \t\t{",
                "-\t\t\tringBuffer_ = new ReadWriteRingBuffer(size);",
                "+\t\t\tringBuffer = new ReadWriteRingBuffer(size, token);",
                " \t\t}",
                "@@ -271,15 +272,12 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t/// <value></value>",
                "-\t\t/// <returns>true if the stream supports reading; otherwise, false.</returns>",
                "-\t\tpublic override bool CanRead {",
                "-\t\t\tget { return true; }",
                "-\t\t}",
                "+\t\t/// <returns>true if the stream is not closed.</returns>",
                "+\t\t/// <remarks>If the stream is closed, this property returns false.</remarks>",
                "+\t\tpublic override bool CanRead => !ringBuffer.IsClosed;",
                " \t\t/// <summary>",
                "-\t\t/// When overridden in a derived class, gets a value indicating whether the current stream supports seeking.",
                "+\t\t/// Gets a value indicating whether the current stream supports seeking.",
                " \t\t/// </summary>",
                " \t\t/// <value></value>",
                "-\t\t/// <returns>true if the stream supports seeking; otherwise, false.</returns>",
                "-\t\tpublic override bool CanSeek {",
                "-\t\t\tget { return false; }",
                "-\t\t}",
                "+\t\t/// <returns>false</returns>",
                "+\t\tpublic override bool CanSeek => false;",
                "@@ -289,6 +287,5 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t/// <value></value>",
                "-\t\t/// <returns>true if the stream supports writing; otherwise, false.</returns>",
                "-\t\tpublic override bool CanWrite {",
                "-\t\t\tget { return true; }",
                "-\t\t}",
                "+\t\t/// <returns>true if the stream is not closed.</returns>",
                "+\t\t/// <remarks>If the stream is closed, this property returns false.</remarks>",
                "+\t\tpublic override bool CanWrite => !ringBuffer.IsClosed;",
                "@@ -311,4 +308,3 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\tpublic override long Length {",
                "-\t\t\t// A bit of a HAK as its not true in the stream sense.",
                "-\t\t\tget { return ringBuffer_.Count; }",
                "+\t\t\tget => throw new NotSupportedException();",
                " \t\t}",
                "@@ -324,8 +320,4 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\tpublic override long Position {",
                "-\t\t\tget {",
                "-\t\t\t\tthrow new Exception(\"The method or operation is not implemented.\");",
                "-\t\t\t}",
                "-\t\t\tset {",
                "-\t\t\t\tthrow new Exception(\"The method or operation is not implemented.\");",
                "-\t\t\t}",
                "+\t\t\tget => throw new NotSupportedException();",
                "+\t\t\tset => throw new NotSupportedException();",
                " \t\t}",
                "@@ -353,3 +345,3 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t\twhile (count > 0) {",
                "-\t\t\t\tint value = ringBuffer_.ReadByte();",
                "+\t\t\t\tint value = ringBuffer.ReadByte();",
                " \t\t\t\tif (value >= 0) {",
                "@@ -368,3 +360,3 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t/// <summary>",
                "-\t\t/// When overridden in a derived class, sets the position within the current stream.",
                "+\t\t/// Not supported, throws <see cref=\"T:System.NotSupportedException\"/>.",
                " \t\t/// </summary>",
                "@@ -372,27 +364,15 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t/// <param name=\"origin\">A value of type <see cref=\"T:System.IO.SeekOrigin\"/> indicating the reference point used to obtain the new position.</param>",
                "-\t\t/// <returns>",
                "-\t\t/// The new position within the current stream.",
                "-\t\t/// </returns>",
                "-\t\t/// <exception cref=\"T:System.IO.IOException\">An I/O error occurs. </exception>",
                "+\t\t/// <returns></returns>",
                " \t\t/// <exception cref=\"T:System.NotSupportedException\">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>",
                "-\t\t/// <exception cref=\"T:System.ObjectDisposedException\">Methods were called after the stream was closed. </exception>",
                "-\t\tpublic override long Seek(long offset, SeekOrigin origin)",
                "-\t\t{",
                "-\t\t\tthrow new Exception(\"The method or operation is not implemented.\");",
                "-\t\t}",
                "+\t\tpublic override long Seek(long offset, SeekOrigin origin) => throw new NotSupportedException();",
                " \t\t/// <summary>",
                "-\t\t/// When overridden in a derived class, sets the length of the current stream.",
                "+\t\t/// Not supported, throws <see cref=\"T:System.NotSupportedException\"/>.",
                " \t\t/// </summary>",
                " \t\t/// <param name=\"value\">The desired length of the current stream in bytes.</param>",
                "-\t\t/// <exception cref=\"T:System.IO.IOException\">An I/O error occurs. </exception>",
                " \t\t/// <exception cref=\"T:System.NotSupportedException\">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>",
                "-\t\t/// <exception cref=\"T:System.ObjectDisposedException\">Methods were called after the stream was closed. </exception>",
                "-\t\tpublic override void SetLength(long value)",
                "-\t\t{",
                "-\t\t\tthrow new Exception(\"The method or operation is not implemented.\");",
                "-\t\t}",
                "+\t\tpublic override void SetLength(long value) => throw new NotSupportedException();",
                " \t\t/// <summary>",
                "-\t\t/// When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.",
                "+\t\t/// Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.",
                " \t\t/// </summary>",
                "@@ -412,3 +392,3 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t\tfor (int i = 0; i < count; ++i) {",
                "-\t\t\t\tringBuffer_.WriteByte(buffer[offset + i]);",
                "+\t\t\t\tringBuffer.WriteByte(buffer[offset + i]);",
                " \t\t\t}",
                "@@ -421,11 +401,14 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\tpublic bool IsClosed {",
                "-\t\t\tget { return ringBuffer_.IsClosed; }",
                "+\t\t\tget { return ringBuffer.IsClosed; }",
                " \t\t}",
                "-\t\t/// <summary>",
                "-\t\t/// Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.",
                "-\t\t/// </summary>",
                "-\t\tpublic override void Close()",
                "+\t\t/// <summary>Releases the unmanaged resources used by the <see cref=\"Stream\"></see> and optionally releases the managed resources.</summary>",
                "+\t\t/// <param name=\"disposing\">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>",
                "+\t\tprotected override void Dispose(bool disposing)",
                " \t\t{",
                "-\t\t\tringBuffer_.Close();",
                "+\t\t\tif(disposing && !ringBuffer.IsClosed)",
                "+\t\t\t{",
                "+\t\t\t\tringBuffer.Close();",
                "+\t\t\t}",
                "+\t\t\tbase.Dispose(disposing);",
                " \t\t}",
                "@@ -436,5 +419,3 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t/// <value>The bytes written.</value>",
                "-\t\tpublic long BytesWritten {",
                "-\t\t\tget { return ringBuffer_.BytesWritten; }",
                "-\t\t}",
                "+\t\tpublic long BytesWritten => ringBuffer.BytesWritten;",
                "@@ -444,10 +425,6 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t/// <value>The bytes read.</value>",
                "-\t\tpublic long BytesRead {",
                "-\t\t\tget { return ringBuffer_.BytesRead; }",
                "-\t\t}",
                "-",
                "-\t\treadonly",
                "+\t\tpublic long BytesRead => ringBuffer.BytesRead;",
                " \t\t#region Instance Fields",
                "-\t\tReadWriteRingBuffer ringBuffer_;",
                "+\t\tprivate readonly ReadWriteRingBuffer ringBuffer;",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/Zip/StreamHandling.cs b/test/ICSharpCode.SharpZipLib.Tests/Zip/StreamHandling.cs",
                "index a362617..2d3eeb4 100644",
                "--- a/test/ICSharpCode.SharpZipLib.Tests/Zip/StreamHandling.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/Zip/StreamHandling.cs",
                "@@ -267,20 +267,12 @@ namespace ICSharpCode.SharpZipLib.Tests.Zip",
                " \t\t[Category(\"Zip\")]",
                "-\t\t[Ignore(\"TODO : Fix this\")]",
                "+\t\t[Category(\"Performance\")]",
                "+\t\t[Explicit(\"Long Running\")]",
                " \t\tpublic void WriteThroughput()",
                " \t\t{",
                "-\t\t\toutStream_ = new ZipOutputStream(new NullStream());",
                "-",
                "-\t\t\tDateTime startTime = DateTime.Now;",
                "-",
                "-\t\t\tlong target = 0x10000000;",
                "-",
                "-\t\t\twriteTarget_ = target;",
                "-\t\t\toutStream_.PutNextEntry(new ZipEntry(\"0\"));",
                "-\t\t\tWriteTargetBytes();",
                "-",
                "-\t\t\toutStream_.Close();",
                "-",
                "-\t\t\tDateTime endTime = DateTime.Now;",
                "-\t\t\tTimeSpan span = endTime - startTime;",
                "-\t\t\tConsole.WriteLine(\"Time {0} throughput {1} KB/Sec\", span, (target / 1024.0) / span.TotalSeconds);",
                "+\t\t\tPerformanceTesting.TestWrite(0x10000000, bs =>",
                "+\t\t\t{",
                "+\t\t\t\tvar zos = new ZipOutputStream(bs);",
                "+\t\t\t\tzos.PutNextEntry(new ZipEntry(\"0\"));",
                "+\t\t\t\treturn zos;",
                "+\t\t\t});",
                " \t\t}",
                "@@ -289,97 +281,28 @@ namespace ICSharpCode.SharpZipLib.Tests.Zip",
                " \t\t[Category(\"Zip\")]",
                "-\t\t[Category(\"Long Running\")]",
                "-\t\t[Ignore(\"TODO : Fix this\")]",
                "+\t\t[Category(\"Performance\")]",
                "+\t\t[Explicit(\"Long Running\")]",
                " \t\tpublic void SingleLargeEntry()",
                " \t\t{",
                "-\t\t\twindow_ = new WindowedStream(0x10000);",
                "-\t\t\toutStream_ = new ZipOutputStream(window_);",
                "-\t\t\tinStream_ = new ZipInputStream(window_);",
                "-",
                "-\t\t\tlong target = 0x10000000;",
                "-\t\t\treadTarget_ = writeTarget_ = target;",
                "-",
                "-\t\t\tThread reader = new Thread(Reader);",
                "-\t\t\treader.Name = \"Reader\";",
                "-",
                "-\t\t\tThread writer = new Thread(Writer);",
                "-\t\t\twriter.Name = \"Writer\";",
                "-",
                "-\t\t\tDateTime startTime = DateTime.Now;",
                "-\t\t\treader.Start();",
                "-\t\t\twriter.Start();",
                "-",
                "-\t\t\twriter.Join();",
                "-\t\t\treader.Join();",
                "-",
                "-\t\t\tDateTime endTime = DateTime.Now;",
                "-\t\t\tTimeSpan span = endTime - startTime;",
                "-\t\t\tConsole.WriteLine(\"Time {0} throughput {1} KB/Sec\", span, (target / 1024.0) / span.TotalSeconds);",
                "-\t\t}",
                "-",
                "-\t\tvoid Reader()",
                "-\t\t{",
                "-\t\t\tconst int Size = 8192;",
                "-\t\t\tint readBytes = 1;",
                "-\t\t\tbyte[] buffer = new byte[Size];",
                "-",
                "-\t\t\tlong passifierLevel = readTarget_ - 0x10000000;",
                "-\t\t\tZipEntry single = inStream_.GetNextEntry();",
                "-",
                "-\t\t\tAssert.AreEqual(single.Name, \"CantSeek\");",
                "-\t\t\tAssert.IsTrue((single.Flags & (int)GeneralBitFlags.Descriptor) != 0);",
                "-",
                "-\t\t\twhile ((readTarget_ > 0) && (readBytes > 0)) {",
                "-\t\t\t\tint count = Size;",
                "-\t\t\t\tif (count > readTarget_) {",
                "-\t\t\t\t\tcount = (int)readTarget_;",
                "+\t\t\tconst string EntryName = \"CantSeek\";",
                "+",
                "+\t\t\tPerformanceTesting.TestReadWrite(",
                "+\t\t\t\tsize: TestDataSize.Large,",
                "+\t\t\t\tinput: bs =>",
                "+\t\t\t\t{",
                "+\t\t\t\t\tvar zis = new ZipInputStream(bs);",
                "+\t\t\t\t\tvar entry = zis.GetNextEntry();",
                "+",
                "+\t\t\t\t\tAssert.AreEqual(entry.Name, EntryName);",
                "+\t\t\t\t\tAssert.IsTrue((entry.Flags & (int)GeneralBitFlags.Descriptor) != 0);",
                "+\t\t\t\t\treturn zis;",
                "+\t\t\t\t},",
                "+\t\t\t\toutput: bs =>",
                "+\t\t\t\t{",
                "+\t\t\t\t\tvar zos = new ZipOutputStream(bs);",
                "+\t\t\t\t\tzos.PutNextEntry(new ZipEntry(EntryName));",
                "+\t\t\t\t\treturn zos;",
                " \t\t\t\t}",
                "-",
                "-\t\t\t\treadBytes = inStream_.Read(buffer, 0, count);",
                "-\t\t\t\treadTarget_ -= readBytes;",
                "-",
                "-\t\t\t\tif (readTarget_ <= passifierLevel) {",
                "-\t\t\t\t\tConsole.WriteLine(\"Reader {0} bytes remaining\", readTarget_);",
                "-\t\t\t\t\tpassifierLevel = readTarget_ - 0x10000000;",
                "-\t\t\t\t}",
                "-\t\t\t}",
                "-",
                "-\t\t\tAssert.IsTrue(window_.IsClosed, \"Window should be closed\");",
                "-",
                "-\t\t\t// This shouldnt read any data but should read the footer",
                "-\t\t\treadBytes = inStream_.Read(buffer, 0, 1);",
                "-\t\t\tAssert.AreEqual(0, readBytes, \"Stream should be empty\");",
                "-\t\t\tAssert.AreEqual(0, window_.Length, \"Window should be closed\");",
                "-\t\t\tinStream_.Close();",
                "+\t\t\t);",
                " \t\t}",
                "-\t\tvoid WriteTargetBytes()",
                "-\t\t{",
                "-\t\t\tconst int Size = 8192;",
                "-",
                "-\t\t\tbyte[] buffer = new byte[Size];",
                "-",
                "-\t\t\twhile (writeTarget_ > 0) {",
                "-\t\t\t\tint thisTime = Size;",
                "-\t\t\t\tif (thisTime > writeTarget_) {",
                "-\t\t\t\t\tthisTime = (int)writeTarget_;",
                "-\t\t\t\t}",
                "-",
                "-\t\t\t\toutStream_.Write(buffer, 0, thisTime);",
                "-\t\t\t\twriteTarget_ -= thisTime;",
                "-\t\t\t}",
                "-\t\t}",
                "-",
                "-\t\tvoid Writer()",
                "-\t\t{",
                "-\t\t\toutStream_.PutNextEntry(new ZipEntry(\"CantSeek\"));",
                "-\t\t\tWriteTargetBytes();",
                "-\t\t\toutStream_.Close();",
                "-\t\t}",
                "-",
                "-\t\tWindowedStream window_;",
                "-\t\tZipOutputStream outStream_;",
                "-\t\tZipInputStream inStream_;",
                "-\t\tlong readTarget_;",
                "-\t\tlong writeTarget_;",
                "-",
                " \t}"
            ],
            "changed_files": [
                ".gitignore",
                "test/ICSharpCode.SharpZipLib.TestBootstrapper/Program.cs",
                "test/ICSharpCode.SharpZipLib.Tests/BZip2/Bzip2Tests.cs",
                "test/ICSharpCode.SharpZipLib.Tests/GZip/GZipTests.cs",
                "test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs",
                "test/ICSharpCode.SharpZipLib.Tests/TestSupport/PerformanceTesting.cs",
                "test/ICSharpCode.SharpZipLib.Tests/TestSupport/RingBuffer.cs",
                "test/ICSharpCode.SharpZipLib.Tests/TestSupport/Streams.cs",
                "test/ICSharpCode.SharpZipLib.Tests/Zip/StreamHandling.cs"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "236": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc1",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: test/ICSharpCode.SharpZipLib.Tests/TestSupport/RingBuffer.cs, test/ICSharpCode.SharpZipLib.Tests/BZip2/Bzip2Tests.cs, test/ICSharpCode.SharpZipLib.Tests/TestSupport/Streams.cs, test/ICSharpCode.SharpZipLib.Tests/GZip/GZipTests.cs, test/ICSharpCode.SharpZipLib.TestBootstrapper/Program.cs, test/ICSharpCode.SharpZipLib.Tests/TestSupport/PerformanceTesting.cs, test/ICSharpCode.SharpZipLib.Tests/Zip/StreamHandling.cs, test/ICSharpCode.SharpZipLib.Tests/Tar/TarTests.cs",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sharpziplib",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 236",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fb9efd078f634d8e5f943cdde8f2ba32489cb038",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1532186305,
            "hunks": 43,
            "message": "Merge PR #255, Correctly handle Unicode strings * Split out string conversion from ZipConstants to ZipStrings * Switch ZipOutputStream to using ZipStrings * Add ZipConstants wrappers for backwards compability * Set IsUnicodeText based upon ZipStrings default code page * Update string transcoding to handle DefaultCodePage not Unicode * Update tests for string coding * Fixes #251",
            "diff": [
                "diff --git a/src/ICSharpCode.SharpZipLib/Zip/ZipConstants.cs b/src/ICSharpCode.SharpZipLib/Zip/ZipConstants.cs",
                "index 988e4eb..1fbe848 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Zip/ZipConstants.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Zip/ZipConstants.cs",
                "@@ -204,3 +204,3 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t/// </summary>",
                "-\tpublic sealed class ZipConstants",
                "+\tpublic static class ZipConstants",
                " \t{",
                "@@ -423,10 +423,2 @@ namespace ICSharpCode.SharpZipLib.Zip",
                "-\t\t/// <remarks>",
                "-\t\t/// The original Zip specification (https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT) states ",
                "-\t\t/// that file names should only be encoded with IBM Code Page 437 or UTF-8. ",
                "-\t\t/// In practice, most zip apps use OEM or system encoding (typically cp437 on Windows). ",
                "-\t\t/// Let's be good citizens and default to UTF-8 http://utf8everywhere.org/",
                "-\t\t/// </remarks>",
                "-\t\tstatic int defaultCodePage = Encoding.UTF8.CodePage;",
                "-",
                " \t\t/// <summary>",
                "@@ -437,149 +429,40 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\t/// </summary>",
                "-\t\tpublic static int DefaultCodePage {",
                "-\t\t\tget {",
                "-\t\t\t\treturn defaultCodePage;",
                "-\t\t\t}",
                "-\t\t\tset {",
                "-\t\t\t\tif ((value < 0) || (value > 65535) ||",
                "-\t\t\t\t\t(value == 1) || (value == 2) || (value == 3) || (value == 42)) {",
                "-\t\t\t\t\tthrow new ArgumentOutOfRangeException(nameof(value));",
                "-\t\t\t\t}",
                "-",
                "-\t\t\t\tdefaultCodePage = value;",
                "-\t\t\t}",
                "+\t\t[Obsolete(\"Use ZipStrings instead\")]",
                "+\t\tpublic static int DefaultCodePage",
                "+\t\t{",
                "+\t\t\tget => ZipStrings.CodePage;",
                "+\t\t\tset => ZipStrings.CodePage = value;",
                " \t\t}",
                "-\t\t/// <summary>",
                "-\t\t/// Convert a portion of a byte array to a string.",
                "-\t\t/// </summary>\t\t",
                "-\t\t/// <param name=\"data\">",
                "-\t\t/// Data to convert to string",
                "-\t\t/// </param>",
                "-\t\t/// <param name=\"count\">",
                "-\t\t/// Number of bytes to convert starting from index 0",
                "-\t\t/// </param>",
                "-\t\t/// <returns>",
                "-\t\t/// data[0]..data[count - 1] converted to a string",
                "-\t\t/// </returns>",
                "+\t\t/// <summary> Depracated wrapper for <see cref=\"ZipStrings.ConvertToString(byte[], int)\"/></summary>",
                "+\t\t[Obsolete(\"Use ZipStrings.ConvertToString instead\")]",
                " \t\tpublic static string ConvertToString(byte[] data, int count)",
                "-\t\t{",
                "-\t\t\tif (data == null) {",
                "-\t\t\t\treturn string.Empty;",
                "-\t\t\t}",
                "-",
                "-\t\t\treturn Encoding.GetEncoding(DefaultCodePage).GetString(data, 0, count);",
                "-\t\t}",
                "+\t\t\t=> ZipStrings.ConvertToString(data, count);",
                "-\t\t/// <summary>",
                "-\t\t/// Convert a byte array to string",
                "-\t\t/// </summary>",
                "-\t\t/// <param name=\"data\">",
                "-\t\t/// Byte array to convert",
                "-\t\t/// </param>",
                "-\t\t/// <returns>",
                "-\t\t/// <paramref name=\"data\">data</paramref>converted to a string",
                "-\t\t/// </returns>",
                "+\t\t/// <summary> Depracated wrapper for <see cref=\"ZipStrings.ConvertToString(byte[])\"/></summary>",
                "+\t\t[Obsolete(\"Use ZipStrings.ConvertToString instead\")]",
                " \t\tpublic static string ConvertToString(byte[] data)",
                "-\t\t{",
                "-\t\t\tif (data == null) {",
                "-\t\t\t\treturn string.Empty;",
                "-\t\t\t}",
                "-\t\t\treturn ConvertToString(data, data.Length);",
                "-\t\t}",
                "+\t\t\t=> ZipStrings.ConvertToString(data);",
                "-\t\t/// <summary>",
                "-\t\t/// Convert a byte array to string",
                "-\t\t/// </summary>",
                "-\t\t/// <param name=\"flags\">The applicable general purpose bits flags</param>",
                "-\t\t/// <param name=\"data\">",
                "-\t\t/// Byte array to convert",
                "-\t\t/// </param>",
                "-\t\t/// <param name=\"count\">The number of bytes to convert.</param>",
                "-\t\t/// <returns>",
                "-\t\t/// <paramref name=\"data\">data</paramref>converted to a string",
                "-\t\t/// </returns>",
                "+\t\t/// <summary> Depracated wrapper for <see cref=\"ZipStrings.ConvertToStringExt(int, byte[], int)\"/></summary>",
                "+\t\t[Obsolete(\"Use ZipStrings.ConvertToStringExt instead\")]",
                " \t\tpublic static string ConvertToStringExt(int flags, byte[] data, int count)",
                "-\t\t{",
                "-\t\t\tif (data == null) {",
                "-\t\t\t\treturn string.Empty;",
                "-\t\t\t}",
                "-",
                "-\t\t\tif ((flags & (int)GeneralBitFlags.UnicodeText) != 0) {",
                "-\t\t\t\treturn Encoding.UTF8.GetString(data, 0, count);",
                "-\t\t\t} else {",
                "-\t\t\t\treturn ConvertToString(data, count);",
                "-\t\t\t}",
                "-\t\t}",
                "+\t\t\t=> ZipStrings.ConvertToStringExt(flags, data, count);",
                "-\t\t/// <summary>",
                "-\t\t/// Convert a byte array to string",
                "-\t\t/// </summary>",
                "-\t\t/// <param name=\"data\">",
                "-\t\t/// Byte array to convert",
                "-\t\t/// </param>",
                "-\t\t/// <param name=\"flags\">The applicable general purpose bits flags</param>",
                "-\t\t/// <returns>",
                "-\t\t/// <paramref name=\"data\">data</paramref>converted to a string",
                "-\t\t/// </returns>",
                "+\t\t/// <summary> Depracated wrapper for <see cref=\"ZipStrings.ConvertToStringExt(int, byte[])\"/></summary>",
                "+\t\t[Obsolete(\"Use ZipStrings.ConvertToStringExt instead\")]",
                " \t\tpublic static string ConvertToStringExt(int flags, byte[] data)",
                "-\t\t{",
                "-\t\t\tif (data == null) {",
                "-\t\t\t\treturn string.Empty;",
                "-\t\t\t}",
                "-",
                "-\t\t\tif ((flags & (int)GeneralBitFlags.UnicodeText) != 0) {",
                "-\t\t\t\treturn Encoding.UTF8.GetString(data, 0, data.Length);",
                "-\t\t\t} else {",
                "-\t\t\t\treturn ConvertToString(data, data.Length);",
                "-\t\t\t}",
                "-\t\t}",
                "+\t\t\t=> ZipStrings.ConvertToStringExt(flags, data);",
                "-\t\t/// <summary>",
                "-\t\t/// Convert a string to a byte array",
                "-\t\t/// </summary>",
                "-\t\t/// <param name=\"str\">",
                "-\t\t/// String to convert to an array",
                "-\t\t/// </param>",
                "-\t\t/// <returns>Converted array</returns>",
                "+\t\t/// <summary> Depracated wrapper for <see cref=\"ZipStrings.ConvertToArray(string)\"/></summary>",
                "+\t\t[Obsolete(\"Use ZipStrings.ConvertToArray instead\")]",
                " \t\tpublic static byte[] ConvertToArray(string str)",
                "-\t\t{",
                "-\t\t\tif (str == null) {",
                "-\t\t\t\treturn new byte[0];",
                "-\t\t\t}",
                "+\t\t\t=> ZipStrings.ConvertToArray(str);",
                "-\t\t\treturn Encoding.GetEncoding(DefaultCodePage).GetBytes(str);",
                "-\t\t}",
                "-",
                "-\t\t/// <summary>",
                "-\t\t/// Convert a string to a byte array",
                "-\t\t/// </summary>",
                "-\t\t/// <param name=\"flags\">The applicable <see cref=\"GeneralBitFlags\">general purpose bits flags</see></param>",
                "-\t\t/// <param name=\"str\">",
                "-\t\t/// String to convert to an array",
                "-\t\t/// </param>",
                "-\t\t/// <returns>Converted array</returns>",
                "+\t\t/// <summary> Depracated wrapper for <see cref=\"ZipStrings.ConvertToArray(int, string)\"/></summary>",
                "+\t\t[Obsolete(\"Use ZipStrings.ConvertToArray instead\")]",
                " \t\tpublic static byte[] ConvertToArray(int flags, string str)",
                "-\t\t{",
                "-\t\t\tif (str == null) {",
                "-\t\t\t\treturn new byte[0];",
                "-\t\t\t}",
                "-",
                "-\t\t\tif ((flags & (int)GeneralBitFlags.UnicodeText) != 0) {",
                "-\t\t\t\treturn Encoding.UTF8.GetBytes(str);",
                "-\t\t\t} else {",
                "-\t\t\t\treturn ConvertToArray(str);",
                "-\t\t\t}",
                "-\t\t}",
                "+\t\t\t=> ZipStrings.ConvertToArray(flags, str);",
                "-\t\t/// <summary>",
                "-\t\t/// Initialise default instance of <see cref=\"ZipConstants\">ZipConstants</see>",
                "-\t\t/// </summary>",
                "-\t\t/// <remarks>",
                "-\t\t/// Private to prevent instances being created.",
                "-\t\t/// </remarks>",
                "-\t\tZipConstants()",
                "-\t\t{",
                "-\t\t\t// Do nothing",
                "-\t\t}",
                " \t}",
                "diff --git a/src/ICSharpCode.SharpZipLib/Zip/ZipEntry.cs b/src/ICSharpCode.SharpZipLib/Zip/ZipEntry.cs",
                "index b0f1ecb..5a39fa3 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Zip/ZipEntry.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Zip/ZipEntry.cs",
                "@@ -193,2 +193,4 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\t\tthis.method = method;",
                "+",
                "+\t\t\tIsUnicodeText = ZipStrings.UseUnicode;",
                " \t\t}",
                "diff --git a/src/ICSharpCode.SharpZipLib/Zip/ZipEntryFactory.cs b/src/ICSharpCode.SharpZipLib/Zip/ZipEntryFactory.cs",
                "index 4fdbff8..d34c626 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Zip/ZipEntryFactory.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Zip/ZipEntryFactory.cs",
                "@@ -61,2 +61,3 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\t\tnameTransform_ = new ZipNameTransform();",
                "+\t\t\tisUnicodeText_ = ZipStrings.UseUnicode;",
                " \t\t}",
                "@@ -67,6 +68,5 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\t/// <param name=\"timeSetting\">The <see cref=\"TimeSetting\">time setting</see> to use when creating <see cref=\"ZipEntry\">Zip entries</see>.</param>",
                "-\t\tpublic ZipEntryFactory(TimeSetting timeSetting)",
                "+\t\tpublic ZipEntryFactory(TimeSetting timeSetting): this()",
                " \t\t{",
                " \t\t\ttimeSetting_ = timeSetting;",
                "-\t\t\tnameTransform_ = new ZipNameTransform();",
                " \t\t}",
                "@@ -77,3 +77,3 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\t/// <param name=\"time\">The time to set all <see cref=\"ZipEntry.DateTime\"/> values to.</param>",
                "-\t\tpublic ZipEntryFactory(DateTime time)",
                "+\t\tpublic ZipEntryFactory(DateTime time): this()",
                " \t\t{",
                "@@ -81,3 +81,2 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\t\tFixedDateTime = time;",
                "-\t\t\tnameTransform_ = new ZipNameTransform();",
                " \t\t}",
                "diff --git a/src/ICSharpCode.SharpZipLib/Zip/ZipOutputStream.cs b/src/ICSharpCode.SharpZipLib/Zip/ZipOutputStream.cs",
                "index 1b8a23b..f62a7ec 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Zip/ZipOutputStream.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Zip/ZipOutputStream.cs",
                "@@ -100,3 +100,3 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\t\t// TODO: Its not yet clear how to handle unicode comments here.",
                "-\t\t\tbyte[] commentBytes = ZipConstants.ConvertToArray(comment);",
                "+\t\t\tbyte[] commentBytes = ZipStrings.ConvertToArray(comment);",
                " \t\t\tif (commentBytes.Length > 0xffff) {",
                "@@ -322,3 +322,3 @@ namespace ICSharpCode.SharpZipLib.Zip",
                "-\t\t\tbyte[] name = ZipConstants.ConvertToArray(entry.Flags, entry.Name);",
                "+\t\t\tbyte[] name = ZipStrings.ConvertToArray(entry.Flags, entry.Name);",
                "@@ -671,3 +671,3 @@ namespace ICSharpCode.SharpZipLib.Zip",
                "-\t\t\t\tbyte[] name = ZipConstants.ConvertToArray(entry.Flags, entry.Name);",
                "+\t\t\t\tbyte[] name = ZipStrings.ConvertToArray(entry.Flags, entry.Name);",
                "@@ -707,3 +707,3 @@ namespace ICSharpCode.SharpZipLib.Zip",
                " \t\t\t\t\t(entry.Comment != null) ?",
                "-\t\t\t\t\tZipConstants.ConvertToArray(entry.Flags, entry.Comment) :",
                "+\t\t\t\t\tZipStrings.ConvertToArray(entry.Flags, entry.Comment) :",
                " \t\t\t\t\tnew byte[0];",
                "diff --git a/src/ICSharpCode.SharpZipLib/Zip/ZipStrings.cs b/src/ICSharpCode.SharpZipLib/Zip/ZipStrings.cs",
                "new file mode 100644",
                "index 0000000..e38ef7f",
                "--- /dev/null",
                "+++ b/src/ICSharpCode.SharpZipLib/Zip/ZipStrings.cs",
                "@@ -0,0 +1,184 @@",
                "+\u00ef\u00bb\u00bfusing System;",
                "+using System.Text;",
                "+",
                "+namespace ICSharpCode.SharpZipLib.Zip",
                "+{",
                "+\t/// <summary>",
                "+\t/// This static class contains functions for encoding and decoding zip file strings",
                "+\t/// </summary>",
                "+\tpublic static class ZipStrings",
                "+\t{",
                "+",
                "+\t\tstatic ZipStrings()",
                "+\t\t{",
                "+\t\t\ttry",
                "+\t\t\t{",
                "+\t\t\t\tvar codePage = Encoding.GetEncoding(0).CodePage;",
                "+\t\t\t\tSystemDefaultCodePage = (codePage == 1 || codePage == 2 || codePage == 3 || codePage == 42) ? FallbackCodePage : codePage;",
                "+\t\t\t}",
                "+\t\t\tcatch",
                "+\t\t\t{",
                "+\t\t\t\tSystemDefaultCodePage = FallbackCodePage;",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\t/// <summary>Code page backing field</summary>",
                "+\t\t/// <remarks>",
                "+\t\t/// The original Zip specification (https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT) states ",
                "+\t\t/// that file names should only be encoded with IBM Code Page 437 or UTF-8. ",
                "+\t\t/// In practice, most zip apps use OEM or system encoding (typically cp437 on Windows). ",
                "+\t\t/// Let's be good citizens and default to UTF-8 http://utf8everywhere.org/",
                "+\t\t/// </remarks>",
                "+\t\tprivate static int codePage = Encoding.UTF8.CodePage;",
                "+",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Encoding used for string conversion. Setting this to 65001 (UTF-8) will",
                "+\t\t/// also set the Language encoding flag to indicate UTF-8 encoded file names.",
                "+\t\t/// </summary>",
                "+\t\tpublic static int CodePage",
                "+\t\t{",
                "+\t\t\tget",
                "+\t\t\t{",
                "+\t\t\t\treturn codePage;",
                "+\t\t\t}",
                "+\t\t\tset",
                "+\t\t\t{",
                "+\t\t\t\tif ((value < 0) || (value > 65535) ||",
                "+\t\t\t\t\t(value == 1) || (value == 2) || (value == 3) || (value == 42))",
                "+\t\t\t\t{",
                "+\t\t\t\t\tthrow new ArgumentOutOfRangeException(nameof(value));",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\tcodePage = value;",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+",
                "+\t\tprivate const int FallbackCodePage = 437;",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Attempt to get the operating system default codepage, or failing that, to",
                "+\t\t/// the fallback code page IBM 437.",
                "+\t\t/// </summary>",
                "+\t\tpublic static int SystemDefaultCodePage { get; }",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Get wether the default codepage is set to UTF-8. Setting this property to false will",
                "+\t\t/// set the <see cref=\"CodePage\"/> to <see cref=\"SystemDefaultCodePage\"/>",
                "+\t\t/// </summary>",
                "+\t\t/// <remarks>",
                "+\t\t/// /// Get OEM codepage from NetFX, which parses the NLP file with culture info table etc etc.",
                "+\t\t/// But sometimes it yields the special value of 1 which is nicknamed <c>CodePageNoOEM</c> in <see cref=\"Encoding\"/> sources (might also mean <c>CP_OEMCP</c>, but Encoding puts it so).",
                "+\t\t/// This was observed on Ukranian and Hindu systems.",
                "+\t\t/// Given this value, <see cref=\"Encoding.GetEncoding(int)\"/> throws an <see cref=\"ArgumentException\"/>.",
                "+\t\t/// So replace it with <see cref=\"FallbackCodePage\"/>, (IBM 437 which is the default code page in a default Windows installation console.",
                "+\t\t/// </remarks>",
                "+\t\tpublic static bool UseUnicode",
                "+\t\t{",
                "+\t\t\tget",
                "+\t\t\t{",
                "+\t\t\t\treturn codePage == Encoding.UTF8.CodePage;",
                "+\t\t\t}",
                "+\t\t\tset",
                "+\t\t\t{",
                "+\t\t\t\tif (value)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tcodePage = Encoding.UTF8.CodePage;",
                "+\t\t\t\t}",
                "+\t\t\t\telse",
                "+\t\t\t\t{",
                "+\t\t\t\t\tcodePage = SystemDefaultCodePage;",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Convert a portion of a byte array to a string using <see cref=\"CodePage\"/>",
                "+\t\t/// </summary>\t\t",
                "+\t\t/// <param name=\"data\">",
                "+\t\t/// Data to convert to string",
                "+\t\t/// </param>",
                "+\t\t/// <param name=\"count\">",
                "+\t\t/// Number of bytes to convert starting from index 0",
                "+\t\t/// </param>",
                "+\t\t/// <returns>",
                "+\t\t/// data[0]..data[count - 1] converted to a string",
                "+\t\t/// </returns>",
                "+\t\tpublic static string ConvertToString(byte[] data, int count) ",
                "+\t\t\t=> data == null",
                "+\t\t\t? string.Empty",
                "+\t\t\t: Encoding.GetEncoding(CodePage).GetString(data, 0, count);",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Convert a byte array to a string using <see cref=\"CodePage\"/>",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"data\">",
                "+\t\t/// Byte array to convert",
                "+\t\t/// </param>",
                "+\t\t/// <returns>",
                "+\t\t/// <paramref name=\"data\">data</paramref>converted to a string",
                "+\t\t/// </returns>",
                "+\t\tpublic static string ConvertToString(byte[] data)",
                "+\t\t\t=> ConvertToString(data, data.Length);",
                "+",
                "+\t\tprivate static Encoding EncodingFromFlag(int flags)",
                "+\t\t\t=> ((flags & (int)GeneralBitFlags.UnicodeText) != 0)",
                "+\t\t\t\t? Encoding.UTF8",
                "+\t\t\t\t: Encoding.GetEncoding(SystemDefaultCodePage);",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Convert a byte array to a string  using <see cref=\"CodePage\"/>",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"flags\">The applicable general purpose bits flags</param>",
                "+\t\t/// <param name=\"data\">",
                "+\t\t/// Byte array to convert",
                "+\t\t/// </param>",
                "+\t\t/// <param name=\"count\">The number of bytes to convert.</param>",
                "+\t\t/// <returns>",
                "+\t\t/// <paramref name=\"data\">data</paramref>converted to a string",
                "+\t\t/// </returns>",
                "+\t\tpublic static string ConvertToStringExt(int flags, byte[] data, int count)",
                "+\t\t\t=> (data == null)",
                "+\t\t\t\t? string.Empty",
                "+\t\t\t\t: EncodingFromFlag(flags).GetString(data, 0, count);",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Convert a byte array to a string using <see cref=\"CodePage\"/>",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"data\">",
                "+\t\t/// Byte array to convert",
                "+\t\t/// </param>",
                "+\t\t/// <param name=\"flags\">The applicable general purpose bits flags</param>",
                "+\t\t/// <returns>",
                "+\t\t/// <paramref name=\"data\">data</paramref>converted to a string",
                "+\t\t/// </returns>",
                "+\t\tpublic static string ConvertToStringExt(int flags, byte[] data)",
                "+\t\t\t=> ConvertToStringExt(flags, data, data.Length);",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Convert a string to a byte array using <see cref=\"CodePage\"/>",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"str\">",
                "+\t\t/// String to convert to an array",
                "+\t\t/// </param>",
                "+\t\t/// <returns>Converted array</returns>",
                "+\t\tpublic static byte[] ConvertToArray(string str)",
                "+\t\t\t=> str == null",
                "+\t\t\t? new byte[0]",
                "+\t\t\t: Encoding.GetEncoding(CodePage).GetBytes(str);",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Convert a string to a byte array using <see cref=\"CodePage\"/>",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"flags\">The applicable <see cref=\"GeneralBitFlags\">general purpose bits flags</see></param>",
                "+\t\t/// <param name=\"str\">",
                "+\t\t/// String to convert to an array",
                "+\t\t/// </param>",
                "+\t\t/// <returns>Converted array</returns>",
                "+\t\tpublic static byte[] ConvertToArray(int flags, string str)",
                "+\t\t\t=> (string.IsNullOrEmpty(str))",
                "+\t\t\t\t? new byte[0]",
                "+\t\t\t\t: EncodingFromFlag(flags).GetBytes(str);",
                "+\t}",
                "+}",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/TestSupport/StringTesting.cs b/test/ICSharpCode.SharpZipLib.Tests/TestSupport/StringTesting.cs",
                "new file mode 100644",
                "index 0000000..9419e54",
                "--- /dev/null",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/TestSupport/StringTesting.cs",
                "@@ -0,0 +1,42 @@",
                "+\u00ef\u00bb\u00bfusing System;",
                "+using System.Collections.Generic;",
                "+using System.Text;",
                "+",
                "+namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                "+{",
                "+    public static class StringTesting",
                "+    {",
                "+\t\tstatic StringTesting()",
                "+\t\t{",
                "+\t\t\tAddLanguage(\"Chinese\", \"\u00e6\u00b8\u00ac\u00e8\u00a9\u00a6.txt\", \"big5\");",
                "+\t\t\tAddLanguage(\"Greek\", \"\u00cf\u008f\u00ce\u00b0.txt\", \"windows-1253\");",
                "+\t\t\tAddLanguage(\"Nordic\", \"\u00c3\u0085\u00c3\u00a6.txt\", \"windows-1252\");",
                "+\t\t\tAddLanguage(\"Arabic\", \"\u00da\u0080\u00da\u0085.txt\", \"windows-1256\");",
                "+\t\t}",
                "+",
                "+\t\tprivate static void AddLanguage(string language, string filename, string encoding)",
                "+\t\t{",
                "+\t\t\tlanguages.Add(language);",
                "+\t\t\tfilenames.Add(filename);",
                "+\t\t\tencodings.Add(encoding);",
                "+\t\t\tentries++;",
                "+\t\t}",
                "+",
                "+\t\tprivate static int entries = 0;",
                "+\t\tprivate static List<string> languages = new List<string>();",
                "+\t\tprivate static List<string> filenames = new List<string>();",
                "+\t\tprivate static List<string> encodings = new List<string>();",
                "+",
                "+\t\tpublic static IEnumerable<string> Languages => filenames.AsReadOnly();",
                "+\t\tpublic static IEnumerable<string> Filenames => filenames.AsReadOnly();",
                "+\t\tpublic static IEnumerable<string> Encodings => filenames.AsReadOnly();",
                "+",
                "+\t\tpublic static IEnumerable<(string language, string filename, string encoding)> GetTestSamples()",
                "+\t\t{",
                "+\t\t\tfor (int i = 0; i < entries; i++)",
                "+\t\t\t{",
                "+\t\t\t\tyield return (languages[i], filenames[i], encodings[i]);",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/TestSupport/Utils.cs b/test/ICSharpCode.SharpZipLib.Tests/TestSupport/Utils.cs",
                "index f7a88c9..90f6b13 100644",
                "--- a/test/ICSharpCode.SharpZipLib.Tests/TestSupport/Utils.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/TestSupport/Utils.cs",
                "@@ -2,2 +2,3 @@ using System;",
                " using System.IO;",
                "+using System.Text;",
                " using NUnit.Framework;",
                "@@ -29,8 +30,7 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                "-\t\tpublic static TempFile GetDummyFile(int size = -1)",
                "+\t\tpublic static void WriteDummyData(string fileName, int size = -1)",
                " \t\t{",
                "-\t\t\tvar tempFile = new TempFile();",
                " \t\t\tif (size < 0)",
                " \t\t\t{",
                "-\t\t\t\tFile.WriteAllText(tempFile.Filename, DateTime.UtcNow.Ticks.ToString(\"x16\"));",
                "+\t\t\t\tFile.WriteAllText(fileName, DateTime.UtcNow.Ticks.ToString(\"x16\"));",
                " \t\t\t}",
                "@@ -40,4 +40,10 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                " \t\t\t\trandom.NextBytes(bytes);",
                "-\t\t\t\tFile.WriteAllBytes(tempFile.Filename, bytes);",
                "+\t\t\t\tFile.WriteAllBytes(fileName, bytes);",
                " \t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tpublic static TempFile GetDummyFile(int size = -1)",
                "+\t\t{",
                "+\t\t\tvar tempFile = new TempFile();",
                "+\t\t\tWriteDummyData(tempFile.Filename, size);",
                " \t\t\treturn tempFile;",
                "@@ -45,2 +51,5 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                "+\t\tpublic static string GetDummyFileName()",
                "+\t\t\t=> $\"{random.Next():x8}{random.Next():x8}{random.Next():x8}\";",
                "+",
                " \t\tpublic class TempFile : IDisposable",
                "@@ -116,2 +125,12 @@ namespace ICSharpCode.SharpZipLib.Tests.TestSupport",
                "+\t\t\tinternal string CreateDummyFile(int size = -1)",
                "+\t\t\t\t=> CreateDummyFile(GetDummyFileName(), size);",
                "+",
                "+\t\t\tinternal string CreateDummyFile(string name, int size = -1)",
                "+\t\t\t{",
                "+\t\t\t\tvar fileName = Path.Combine(Fullpath, name);",
                "+\t\t\t\tWriteDummyData(fileName, size);",
                "+\t\t\t\treturn fileName;",
                "+\t\t\t}",
                "+",
                " \t\t\t#endregion",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/Zip/FastZipHandling.cs b/test/ICSharpCode.SharpZipLib.Tests/Zip/FastZipHandling.cs",
                "index 13c7232..43b5244 100644",
                "--- a/test/ICSharpCode.SharpZipLib.Tests/Zip/FastZipHandling.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/Zip/FastZipHandling.cs",
                "@@ -1,4 +1,8 @@",
                " \u00ef\u00bb\u00bfusing System;",
                "+using System.Collections.Generic;",
                " using System.IO;",
                "+using System.Linq;",
                "+using System.Text;",
                " using System.Text.RegularExpressions;",
                "+using ICSharpCode.SharpZipLib.Tests.TestSupport;",
                " using ICSharpCode.SharpZipLib.Zip;",
                "@@ -139,30 +143,93 @@ namespace ICSharpCode.SharpZipLib.Tests.Zip",
                "-\t\t[Test]",
                "-\t\t[Category(\"Zip\")]",
                "-\t\tpublic void UnicodeText()",
                "+\t\t#region String testing helper",
                "+",
                "+\t\tprivate void TestFileNames(params string[] names)",
                "+\t\t\t=> TestFileNames((IEnumerable<string>)names);",
                "+",
                "+\t\tprivate void TestFileNames(IEnumerable<string> names)",
                " \t\t{",
                " \t\t\tvar zippy = new FastZip();",
                "-\t\t\tvar factory = new ZipEntryFactory();",
                "-\t\t\tfactory.IsUnicodeText = true;",
                "-\t\t\tzippy.EntryFactory = factory;",
                "-\t\t\tstring tempFilePath = GetTempFilePath();",
                "-\t\t\tAssert.IsNotNull(tempFilePath, \"No permission to execute this test?\");",
                "+\t\t\tusing (var tempDir = new Utils.TempDir())",
                "+\t\t\tusing (var tempZip = new Utils.TempFile())",
                "+\t\t\t{",
                "+\t\t\t\tint nameCount = 0;",
                "+\t\t\t\tforeach (var name in names)",
                "+\t\t\t\t{",
                "+\t\t\t\t\ttempDir.CreateDummyFile(name);",
                "+\t\t\t\t\tnameCount++;",
                "+\t\t\t\t}",
                "-\t\t\tconst string tempName1 = \"a.dat\";",
                "-\t\t\tstring addFile = Path.Combine(tempFilePath, tempName1);",
                "-\t\t\tMakeTempFile(addFile, 1);",
                "+\t\t\t\tzippy.CreateZip(tempZip.Filename, tempDir.Fullpath, true, null, null);",
                "-\t\t\ttry {",
                "-\t\t\t\tvar target = new MemoryStream();",
                "-\t\t\t\tzippy.CreateZip(target, tempFilePath, false, Regex.Escape(tempName1), null);",
                "+\t\t\t\tusing (ZipFile z = new ZipFile(tempZip.Filename))",
                "+\t\t\t\t{",
                "+\t\t\t\t\tAssert.AreEqual(nameCount, z.Count);",
                "+\t\t\t\t\tforeach (var name in names)",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tvar index = z.FindEntry(name, true);",
                "-\t\t\t\tvar archive = new MemoryStream(target.ToArray());",
                "+\t\t\t\t\t\tAssert.AreNotEqual(index, -1, \"Zip entry \\\"{0}\\\" not found\", name);",
                "+",
                "+\t\t\t\t\t\tvar entry = z[index];",
                "+",
                "+\t\t\t\t\t\tif (ZipStrings.UseUnicode)",
                "+\t\t\t\t\t\t{",
                "+\t\t\t\t\t\t\tAssert.IsTrue(entry.IsUnicodeText, \"Zip entry #{0} not marked as unicode\", index);",
                "+\t\t\t\t\t\t}",
                "+\t\t\t\t\t\telse",
                "+\t\t\t\t\t\t{",
                "+\t\t\t\t\t\t\tAssert.IsFalse(entry.IsUnicodeText, \"Zip entry #{0} marked as unicode\", index);",
                "+\t\t\t\t\t\t}",
                "+",
                "+\t\t\t\t\t\tAssert.AreEqual(name, entry.Name);",
                "+",
                "+\t\t\t\t\t\tvar nameBytes = string.Join(' ', Encoding.BigEndianUnicode.GetBytes(entry.Name).Select(b => b.ToString(\"x2\")));",
                "-\t\t\t\tusing (ZipFile z = new ZipFile(archive)) {",
                "-\t\t\t\t\tAssert.AreEqual(1, z.Count);",
                "-\t\t\t\t\tAssert.IsTrue(z[0].IsUnicodeText);",
                "+\t\t\t\t\t\tConsole.WriteLine($\" - Zip entry: {entry.Name} ({nameBytes})\");",
                "+\t\t\t\t\t}",
                " \t\t\t\t}",
                "-\t\t\t} finally {",
                "-\t\t\t\tFile.Delete(addFile);",
                "+",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+#endregion",
                "+",
                "+\t\t[Test]",
                "+\t\t[Category(\"Zip\")]",
                "+\t\t[Category(\"Unicode\")]",
                "+\t\tpublic void UnicodeText()",
                "+\t\t{",
                "+\t\t\tvar preCp = ZipStrings.CodePage;",
                "+\t\t\ttry",
                "+\t\t\t{",
                "+\t\t\t\tTestFileNames(StringTesting.Filenames);",
                "+\t\t\t}",
                "+\t\t\tfinally",
                "+\t\t\t{",
                "+\t\t\t\tZipStrings.CodePage = preCp;",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\t[Test]",
                "+\t\t[Category(\"Zip\")]",
                "+\t\t[Category(\"Unicode\")]",
                "+\t\tpublic void NonUnicodeText()",
                "+\t\t{",
                "+\t\t\tvar preCp = ZipStrings.CodePage;",
                "+\t\t\ttry",
                "+\t\t\t{",
                "+\t\t\t\tEncoding.RegisterProvider(CodePagesEncodingProvider.Instance);",
                "+",
                "+\t\t\t\tforeach((string language, string filename, string encoding) in StringTesting.GetTestSamples())",
                "+\t\t\t\t{",
                "+\t\t\t\t\tConsole.WriteLine($\"{language} filename \\\"{filename}\\\" using \\\"{encoding}\\\":\");",
                "+\t\t\t\t\tZipStrings.CodePage = Encoding.GetEncoding(encoding).CodePage;",
                "+\t\t\t\t\tTestFileNames(filename);",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t}",
                "+\t\t\tfinally",
                "+\t\t\t{",
                "+\t\t\t\tZipStrings.CodePage = preCp;",
                " \t\t\t}",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/Zip/GeneralHandling.cs b/test/ICSharpCode.SharpZipLib.Tests/Zip/GeneralHandling.cs",
                "index e9d04e9..ff8c432 100644",
                "--- a/test/ICSharpCode.SharpZipLib.Tests/Zip/GeneralHandling.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/Zip/GeneralHandling.cs",
                "@@ -807,4 +807,4 @@ namespace ICSharpCode.SharpZipLib.Tests.Zip",
                " \t\t{",
                "-\t\t\tbyte[] intermediate = ZipConstants.ConvertToArray(toCheck);",
                "-\t\t\tstring final = ZipConstants.ConvertToString(intermediate);",
                "+\t\t\tbyte[] intermediate = ZipStrings.ConvertToArray(toCheck);",
                "+\t\t\tstring final = ZipStrings.ConvertToString(intermediate);",
                "@@ -832,6 +832,6 @@ namespace ICSharpCode.SharpZipLib.Tests.Zip",
                "-\t\t\tstring converted = ZipConstants.ConvertToStringExt(0, rawData);",
                "+\t\t\tstring converted = ZipStrings.ConvertToStringExt(0, rawData);",
                " \t\t\tAssert.AreEqual(sample, converted);",
                "-\t\t\tconverted = ZipConstants.ConvertToStringExt((int)GeneralBitFlags.UnicodeText, rawData);",
                "+\t\t\tconverted = ZipStrings.ConvertToStringExt((int)GeneralBitFlags.UnicodeText, rawData);",
                " \t\t\tAssert.AreEqual(sample, converted);",
                "@@ -842,3 +842,3 @@ namespace ICSharpCode.SharpZipLib.Tests.Zip",
                "-\t\t\tconverted = ZipConstants.ConvertToStringExt((int)GeneralBitFlags.UnicodeText, rawData);",
                "+\t\t\tconverted = ZipStrings.ConvertToStringExt((int)GeneralBitFlags.UnicodeText, rawData);",
                " \t\t\tAssert.AreEqual(sample, converted);",
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/Zip/ZipFileHandling.cs b/test/ICSharpCode.SharpZipLib.Tests/Zip/ZipFileHandling.cs",
                "index 17c94c8..cdcbcdb 100644",
                "--- a/test/ICSharpCode.SharpZipLib.Tests/Zip/ZipFileHandling.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/Zip/ZipFileHandling.cs",
                "@@ -786,29 +786,45 @@ namespace ICSharpCode.SharpZipLib.Tests.Zip",
                " \t\t[Category(\"Zip\")]",
                "+\t\t[Category(\"Unicode\")]",
                " \t\tpublic void UnicodeNames()",
                " \t\t{",
                "-\t\t\tvar memStream = new MemoryStream();",
                "-\t\t\tusing (ZipFile f = new ZipFile(memStream)) {",
                "-\t\t\t\tf.IsStreamOwner = false;",
                "+\t\t\tusing (var memStream = new MemoryStream())",
                "+\t\t\t{",
                "+\t\t\t\tusing (ZipFile f = new ZipFile(memStream))",
                "+\t\t\t\t{",
                "+\t\t\t\t\tf.IsStreamOwner = false;",
                "-\t\t\t\tf.BeginUpdate(new MemoryArchiveStorage());",
                "+\t\t\t\t\tf.BeginUpdate(new MemoryArchiveStorage());",
                "+\t\t\t\t\tforeach ((string language, string name, _) in StringTesting.GetTestSamples())",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tf.Add(new StringMemoryDataSource(language), name,",
                "+\t\t\t\t\t\t\t  CompressionMethod.Deflated, true);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tf.CommitUpdate();",
                "-\t\t\t\tvar names = new string[]",
                "-\t\t\t\t{",
                "-\t\t\t\t\t\"\\u030A\\u03B0\",     // Greek",
                "-                    \"\\u0680\\u0685\"      // Arabic",
                "-                };",
                "+\t\t\t\t\tAssert.IsTrue(f.TestArchive(true));",
                "-\t\t\t\tforeach (string name in names) {",
                "-\t\t\t\t\tf.Add(new StringMemoryDataSource(\"Hello world\"), name,",
                "-\t\t\t\t\t\t  CompressionMethod.Deflated, true);",
                " \t\t\t\t}",
                "-\t\t\t\tf.CommitUpdate();",
                "-\t\t\t\tAssert.IsTrue(f.TestArchive(true));",
                "+\t\t\t\tmemStream.Seek(0, SeekOrigin.Begin);",
                "+\t\t\t\tusing (var zf = new ZipFile(memStream))",
                "+\t\t\t\t{",
                "+\t\t\t\t\tforeach (string name in StringTesting.Filenames)",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\t//int index = zf.FindEntry(name, true);",
                "+\t\t\t\t\t\tvar content = \"\";",
                "+\t\t\t\t\t\tvar index = zf.FindEntry(name, true);",
                "+\t\t\t\t\t\tvar entry = zf[index];",
                "-\t\t\t\tforeach (string name in names) {",
                "-\t\t\t\t\tint index = f.FindEntry(name, true);",
                "+\t\t\t\t\t\tusing (var entryStream = zf.GetInputStream(entry))",
                "+\t\t\t\t\t\tusing(var sr= new StreamReader(entryStream))",
                "+\t\t\t\t\t\t{",
                "+\t\t\t\t\t\t\tcontent = sr.ReadToEnd();",
                "+\t\t\t\t\t\t}",
                "-\t\t\t\t\tAssert.IsTrue(index >= 0);",
                "-\t\t\t\t\tZipEntry found = f[index];",
                "-\t\t\t\t\tAssert.AreEqual(name, found.Name);",
                "+\t\t\t\t\t\t\t//var content = ",
                "+",
                "+\t\t\t\t\t\t\tConsole.WriteLine($\"Entry #{index}: {name}, Content: {content}\");",
                "+",
                "+\t\t\t\t\t\tAssert.IsTrue(index >= 0);",
                "+\t\t\t\t\t\tAssert.AreEqual(name, entry.Name);",
                "+\t\t\t\t\t}",
                " \t\t\t\t}"
            ],
            "changed_files": [
                "src/ICSharpCode.SharpZipLib/Zip/ZipConstants.cs",
                "src/ICSharpCode.SharpZipLib/Zip/ZipEntry.cs",
                "src/ICSharpCode.SharpZipLib/Zip/ZipEntryFactory.cs",
                "src/ICSharpCode.SharpZipLib/Zip/ZipOutputStream.cs",
                "src/ICSharpCode.SharpZipLib/Zip/ZipStrings.cs",
                "test/ICSharpCode.SharpZipLib.Tests/TestSupport/StringTesting.cs",
                "test/ICSharpCode.SharpZipLib.Tests/TestSupport/Utils.cs",
                "test/ICSharpCode.SharpZipLib.Tests/Zip/FastZipHandling.cs",
                "test/ICSharpCode.SharpZipLib.Tests/Zip/GeneralHandling.cs",
                "test/ICSharpCode.SharpZipLib.Tests/Zip/ZipFileHandling.cs"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "255": "ZipFile: Bugfix: Use unicode encoding to read the name string if UseUnicode is set #284",
                "251": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/ICSharpCode.SharpZipLib/Zip/ZipEntryFactory.cs, test/ICSharpCode.SharpZipLib.Tests/TestSupport/StringTesting.cs, src/ICSharpCode.SharpZipLib/Zip/ZipStrings.cs, src/ICSharpCode.SharpZipLib/Zip/ZipOutputStream.cs, src/ICSharpCode.SharpZipLib/Zip/ZipConstants.cs, test/ICSharpCode.SharpZipLib.Tests/Zip/ZipFileHandling.cs, test/ICSharpCode.SharpZipLib.Tests/Zip/FastZipHandling.cs, test/ICSharpCode.SharpZipLib.Tests/TestSupport/Utils.cs, src/ICSharpCode.SharpZipLib/Zip/ZipEntry.cs, test/ICSharpCode.SharpZipLib.Tests/Zip/GeneralHandling.cs",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sharpziplib, entry, file",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 255, 251",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0008e715ea08e17163bd3eb63d9e4a9e048ad962",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1537112522,
            "hunks": 6,
            "message": "Merge PR #271, Add test for AES decompress",
            "diff": [
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/Zip/ZipEncryptionHandling.cs b/test/ICSharpCode.SharpZipLib.Tests/Zip/ZipEncryptionHandling.cs",
                "index 956a5ca..cef7e79 100644",
                "--- a/test/ICSharpCode.SharpZipLib.Tests/Zip/ZipEncryptionHandling.cs",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/Zip/ZipEncryptionHandling.cs",
                "@@ -29,2 +29,32 @@ namespace ICSharpCode.SharpZipLib.Tests.Zip",
                "+\t\t[Test]",
                "+\t\t[Category(\"Encryption\")]",
                "+\t\t[Category(\"Zip\")]",
                "+\t\tpublic void ZipFileAesDecryption()",
                "+\t\t{",
                "+\t\t\tvar password = \"password\";",
                "+",
                "+\t\t\tusing (var ms = new MemoryStream())",
                "+\t\t\t{",
                "+\t\t\t\tWriteEncryptedZipToStream(ms, password, 256);",
                "+",
                "+\t\t\t\tvar zipFile = new ZipFile(ms)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tPassword = password",
                "+\t\t\t\t};",
                "+",
                "+\t\t\t\tforeach (ZipEntry entry in zipFile)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tif (!entry.IsFile) continue;",
                "+\t\t\t\t\t",
                "+\t\t\t\t\tusing(var zis = zipFile.GetInputStream(entry))",
                "+\t\t\t\t\tusing (var sr = new StreamReader(zis, Encoding.UTF8))",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tvar content = sr.ReadToEnd();",
                "+\t\t\t\t\t\tAssert.AreEqual(DummyDataString, content, \"Decompressed content does not match input data\");",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                " \t\tprivate static readonly string[] possible7zPaths = new[] {",
                "@@ -76,31 +106,33 @@ namespace ICSharpCode.SharpZipLib.Tests.Zip",
                "-\t\tpublic void CreateZipWithEncryptedEntries(string password, int keySize)",
                "+\t\tpublic void WriteEncryptedZipToStream(Stream stream, string password, int keySize)",
                " \t\t{",
                "-\t\t\tusing (var ms = new MemoryStream())",
                "+\t\t\tusing (var zs = new ZipOutputStream(stream))",
                " \t\t\t{",
                "-\t\t\t\tusing (var zs = new ZipOutputStream(ms))",
                "-\t\t\t\t{",
                "-\t\t\t\t\tzs.IsStreamOwner = false;",
                "-\t\t\t\t\tzs.SetLevel(9); // 0-9, 9 being the highest level of compression",
                "-\t\t\t\t\tzs.Password = password;  // optional. Null is the same as not setting. Required if using AES.",
                "+\t\t\t\tzs.IsStreamOwner = false;",
                "+\t\t\t\tzs.SetLevel(9); // 0-9, 9 being the highest level of compression",
                "+\t\t\t\tzs.Password = password;  // optional. Null is the same as not setting. Required if using AES.",
                "-\t\t\t\t\tZipEntry zipEntry = new ZipEntry(\"test\");",
                "-\t\t\t\t\tzipEntry.AESKeySize = keySize;",
                "-\t\t\t\t\tzipEntry.DateTime = DateTime.Now;",
                "+\t\t\t\tZipEntry zipEntry = new ZipEntry(\"test\");",
                "+\t\t\t\tzipEntry.AESKeySize = keySize;",
                "+\t\t\t\tzipEntry.DateTime = DateTime.Now;",
                "-\t\t\t\t\tzs.PutNextEntry(zipEntry);",
                "+\t\t\t\tzs.PutNextEntry(zipEntry);",
                "-\t\t\t\t\tbyte[] dummyData = Encoding.UTF8.GetBytes(@\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. ",
                "-Fusce bibendum diam ac nunc rutrum ornare. Maecenas blandit elit ligula, eget suscipit lectus rutrum eu. ",
                "-Maecenas aliquam, purus mattis pulvinar pharetra, nunc orci maximus justo, sed facilisis massa dui sed lorem. ",
                "-Vestibulum id iaculis leo. Duis porta ante lorem. Duis condimentum enim nec lorem tristique interdum. Fusce in faucibus libero.\");",
                "+\t\t\t\tbyte[] dummyData = Encoding.UTF8.GetBytes(DummyDataString);",
                "-\t\t\t\t\tusing (var dummyStream = new MemoryStream(dummyData))",
                "-\t\t\t\t\t{",
                "-\t\t\t\t\t\tdummyStream.CopyTo(zs);",
                "-\t\t\t\t\t}",
                "-",
                "-\t\t\t\t\tzs.CloseEntry();",
                "+\t\t\t\tusing (var dummyStream = new MemoryStream(dummyData))",
                "+\t\t\t\t{",
                "+\t\t\t\t\tdummyStream.CopyTo(zs);",
                " \t\t\t\t}",
                "+\t\t\t\tzs.CloseEntry();",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\tpublic void CreateZipWithEncryptedEntries(string password, int keySize)",
                "+\t\t{",
                "+\t\t\tusing (var ms = new MemoryStream())",
                "+\t\t\t{",
                "+\t\t\t\tWriteEncryptedZipToStream(ms, password, keySize);",
                "+",
                " \t\t\t\tif (TryGet7zBinPath(out string path7z))",
                "@@ -142,2 +174,7 @@ Vestibulum id iaculis leo. Duis porta ante lorem. Duis condimentum enim nec lore",
                " \t\t}",
                "+",
                "+\t\tconst string DummyDataString = @\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. ",
                "+Fusce bibendum diam ac nunc rutrum ornare. Maecenas blandit elit ligula, eget suscipit lectus rutrum eu. ",
                "+Maecenas aliquam, purus mattis pulvinar pharetra, nunc orci maximus justo, sed facilisis massa dui sed lorem. ",
                "+Vestibulum id iaculis leo. Duis porta ante lorem. Duis condimentum enim nec lorem tristique interdum. Fusce in faucibus libero.\";",
                " \t}"
            ],
            "changed_files": [
                "test/ICSharpCode.SharpZipLib.Tests/Zip/ZipEncryptionHandling.cs"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "271": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: test/ICSharpCode.SharpZipLib.Tests/Zip/ZipEncryptionHandling.cs",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sharpziplib",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 271",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "28e14cc49e790534a306f962ed63cc0f09886365",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1531951821,
            "hunks": 5,
            "message": "Merge PR #248, Add generic decoding exception classes",
            "diff": [
                "diff --git a/src/ICSharpCode.SharpZipLib/Core/Exceptions/SharpZipBaseException.cs b/src/ICSharpCode.SharpZipLib/Core/Exceptions/SharpZipBaseException.cs",
                "new file mode 100644",
                "index 0000000..45686ef",
                "--- /dev/null",
                "+++ b/src/ICSharpCode.SharpZipLib/Core/Exceptions/SharpZipBaseException.cs",
                "@@ -0,0 +1,40 @@",
                "+using System;",
                "+",
                "+namespace ICSharpCode.SharpZipLib",
                "+{",
                "+    /// <summary>",
                "+    /// SharpZipBaseException is the base exception class for SharpZipLib.",
                "+    /// All library exceptions are derived from this.",
                "+    /// </summary>",
                "+    /// <remarks>NOTE: Not all exceptions thrown will be derived from this class.",
                "+    /// A variety of other exceptions are possible for example <see cref=\"ArgumentNullException\"></see></remarks>",
                "+\tpublic class SharpZipBaseException : Exception",
                "+\t{",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the SharpZipBaseException class.",
                "+\t\t/// </summary>",
                "+\t\tpublic SharpZipBaseException()",
                "+\t\t{",
                "+\t\t}",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the SharpZipBaseException class with a specified error message.",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"message\">A message describing the exception.</param>",
                "+\t\tpublic SharpZipBaseException(string message)",
                "+\t\t\t: base(message)",
                "+\t\t{",
                "+\t\t}",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the SharpZipBaseException class with a specified",
                "+\t\t/// error message and a reference to the inner exception that is the cause of this exception.",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"message\">A message describing the exception.</param>",
                "+\t\t/// <param name=\"innerException\">The inner exception</param>",
                "+\t\tpublic SharpZipBaseException(string message, Exception innerException)",
                "+\t\t\t: base(message, innerException)",
                "+\t\t{",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/src/ICSharpCode.SharpZipLib/Core/Exceptions/StreamDecodingException.cs b/src/ICSharpCode.SharpZipLib/Core/Exceptions/StreamDecodingException.cs",
                "new file mode 100644",
                "index 0000000..4882a9f",
                "--- /dev/null",
                "+++ b/src/ICSharpCode.SharpZipLib/Core/Exceptions/StreamDecodingException.cs",
                "@@ -0,0 +1,35 @@",
                "+\u00ef\u00bb\u00bfusing System;",
                "+using System.Collections.Generic;",
                "+using System.Text;",
                "+",
                "+namespace ICSharpCode.SharpZipLib",
                "+{",
                "+    /// <summary>",
                "+    /// Indicates that an error occured during decoding of a input stream due to corrupt ",
                "+\t/// data or (unintentional) library incompability.",
                "+    /// </summary>",
                "+    public class StreamDecodingException: SharpZipBaseException",
                "+    {",
                "+\t\tprivate const string GenericMessage = \"Input stream could not be decoded\";",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the StreamDecodingException with a generic message",
                "+\t\t/// </summary>",
                "+\t\tpublic StreamDecodingException() : base(GenericMessage) { }",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the StreamDecodingException class with a specified error message.",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"message\">A message describing the exception.</param>",
                "+\t\tpublic StreamDecodingException(string message) : base(message) { }",
                "+",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the StreamDecodingException class with a specified",
                "+\t\t/// error message and a reference to the inner exception that is the cause of this exception.",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"message\">A message describing the exception.</param>",
                "+\t\t/// <param name=\"innerException\">The inner exception</param>",
                "+\t\tpublic StreamDecodingException(string message, Exception innerException) : base(message, innerException) { }",
                "+\t}",
                "+}",
                "diff --git a/src/ICSharpCode.SharpZipLib/Core/Exceptions/StreamUnsupportedException.cs b/src/ICSharpCode.SharpZipLib/Core/Exceptions/StreamUnsupportedException.cs",
                "new file mode 100644",
                "index 0000000..ff8579c",
                "--- /dev/null",
                "+++ b/src/ICSharpCode.SharpZipLib/Core/Exceptions/StreamUnsupportedException.cs",
                "@@ -0,0 +1,33 @@",
                "+\u00ef\u00bb\u00bfusing System;",
                "+",
                "+namespace ICSharpCode.SharpZipLib",
                "+{",
                "+\t/// <summary>",
                "+\t/// Indicates that the input stream could not decoded due to known library incompability or missing features",
                "+\t/// </summary>",
                "+\tpublic class StreamUnsupportedException : StreamDecodingException",
                "+\t{",
                "+\t\tprivate const string GenericMessage = \"Input stream is in a unsupported format\";",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the StreamUnsupportedException with a generic message",
                "+\t\t/// </summary>",
                "+\t\tpublic StreamUnsupportedException() : base(GenericMessage) { }",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the StreamUnsupportedException class with a specified error message.",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"message\">A message describing the exception.</param>",
                "+\t\tpublic StreamUnsupportedException(string message) : base(message) { }",
                "+",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the StreamUnsupportedException class with a specified",
                "+\t\t/// error message and a reference to the inner exception that is the cause of this exception.",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"message\">A message describing the exception.</param>",
                "+\t\t/// <param name=\"innerException\">The inner exception</param>",
                "+\t\tpublic StreamUnsupportedException(string message, Exception innerException) : base(message, innerException) { }",
                "+",
                "+\t}",
                "+}",
                "diff --git a/src/ICSharpCode.SharpZipLib/Core/Exceptions/UnexpectedEndOfStreamException.cs b/src/ICSharpCode.SharpZipLib/Core/Exceptions/UnexpectedEndOfStreamException.cs",
                "new file mode 100644",
                "index 0000000..975d6f7",
                "--- /dev/null",
                "+++ b/src/ICSharpCode.SharpZipLib/Core/Exceptions/UnexpectedEndOfStreamException.cs",
                "@@ -0,0 +1,33 @@",
                "+\u00ef\u00bb\u00bfusing System;",
                "+",
                "+namespace ICSharpCode.SharpZipLib",
                "+{",
                "+\t/// <summary>",
                "+\t/// Indicates that the input stream could not decoded due to the stream ending before enough data had been provided",
                "+\t/// </summary>",
                "+\tpublic class UnexpectedEndOfStreamException : StreamDecodingException",
                "+\t{",
                "+\t\tprivate const string GenericMessage = \"Input stream ended unexpectedly\";",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the UnexpectedEndOfStreamException with a generic message",
                "+\t\t/// </summary>",
                "+\t\tpublic UnexpectedEndOfStreamException() : base(GenericMessage) { }",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the UnexpectedEndOfStreamException class with a specified error message.",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"message\">A message describing the exception.</param>",
                "+\t\tpublic UnexpectedEndOfStreamException(string message) : base(message) { }",
                "+",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the UnexpectedEndOfStreamException class with a specified",
                "+\t\t/// error message and a reference to the inner exception that is the cause of this exception.",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"message\">A message describing the exception.</param>",
                "+\t\t/// <param name=\"innerException\">The inner exception</param>",
                "+\t\tpublic UnexpectedEndOfStreamException(string message, Exception innerException) : base(message, innerException) { }",
                "+",
                "+\t}",
                "+}",
                "diff --git a/src/ICSharpCode.SharpZipLib/Core/Exceptions/ValueOutOfRangeException.cs b/src/ICSharpCode.SharpZipLib/Core/Exceptions/ValueOutOfRangeException.cs",
                "new file mode 100644",
                "index 0000000..47a3aae",
                "--- /dev/null",
                "+++ b/src/ICSharpCode.SharpZipLib/Core/Exceptions/ValueOutOfRangeException.cs",
                "@@ -0,0 +1,45 @@",
                "+\u00ef\u00bb\u00bfusing System;",
                "+using System.Collections.Generic;",
                "+using System.Text;",
                "+",
                "+namespace ICSharpCode.SharpZipLib",
                "+{",
                "+",
                "+\t/// <summary>",
                "+\t/// Indicates that a value was outside of the expected range when decoding an input stream",
                "+\t/// </summary>",
                "+\tpublic class ValueOutOfRangeException : StreamDecodingException",
                "+\t{",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the ValueOutOfRangeException class naming the the causing variable",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"nameOfValue\">Name of the variable, use: nameof()</param>",
                "+\t\tpublic ValueOutOfRangeException(string nameOfValue ) ",
                "+\t\t\t: base($\"{nameOfValue} out of range\") { }",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the ValueOutOfRangeException class naming the the causing variable,",
                "+\t\t/// it's current value and expected range.",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"nameOfValue\">Name of the variable, use: nameof()</param>",
                "+\t\t/// <param name=\"value\">The invalid value</param>",
                "+\t\t/// <param name=\"maxValue\">Expected maximum value</param>",
                "+\t\t/// <param name=\"minValue\">Expected minimum value</param>",
                "+\t\tpublic ValueOutOfRangeException(string nameOfValue, long value, long maxValue, long minValue = 0) ",
                "+\t\t\t: this(nameOfValue, value.ToString(), maxValue.ToString(), minValue.ToString()) { }",
                "+",
                "+\t\t/// <summary>",
                "+\t\t/// Initializes a new instance of the ValueOutOfRangeException class naming the the causing variable,",
                "+\t\t/// it's current value and expected range.",
                "+\t\t/// </summary>",
                "+\t\t/// <param name=\"nameOfValue\">Name of the variable, use: nameof()</param>",
                "+\t\t/// <param name=\"value\">The invalid value</param>",
                "+\t\t/// <param name=\"maxValue\">Expected maximum value</param>",
                "+\t\t/// <param name=\"minValue\">Expected minimum value</param>",
                "+\t\tpublic ValueOutOfRangeException(string nameOfValue, string value, string maxValue, string minValue = \"0\") :",
                "+\t\t\tbase($\"{nameOfValue} out of range: {value}, should be {minValue}..{maxValue}\") { }",
                "+",
                "+\t\tprivate ValueOutOfRangeException() { }",
                "+\t\tprivate ValueOutOfRangeException(string message, Exception innerException) : base(message, innerException) {}",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "src/ICSharpCode.SharpZipLib/Core/Exceptions/SharpZipBaseException.cs",
                "src/ICSharpCode.SharpZipLib/Core/Exceptions/StreamDecodingException.cs",
                "src/ICSharpCode.SharpZipLib/Core/Exceptions/StreamUnsupportedException.cs",
                "src/ICSharpCode.SharpZipLib/Core/Exceptions/UnexpectedEndOfStreamException.cs",
                "src/ICSharpCode.SharpZipLib/Core/Exceptions/ValueOutOfRangeException.cs"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "248": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/ICSharpCode.SharpZipLib/Core/Exceptions/StreamUnsupportedException.cs, src/ICSharpCode.SharpZipLib/Core/Exceptions/UnexpectedEndOfStreamException.cs, src/ICSharpCode.SharpZipLib/Core/Exceptions/SharpZipBaseException.cs, src/ICSharpCode.SharpZipLib/Core/Exceptions/StreamDecodingException.cs, src/ICSharpCode.SharpZipLib/Core/Exceptions/ValueOutOfRangeException.cs",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sharpziplib",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 248",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "88302c560806565a20698f710aa36564448ec03a",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1535138040,
            "hunks": 1,
            "message": "Merge PR #265, Add AES encryption tests Add ZIP encryption tests for AES128 and AES256",
            "diff": [
                "diff --git a/test/ICSharpCode.SharpZipLib.Tests/Zip/ZipEncryptionHandling.cs b/test/ICSharpCode.SharpZipLib.Tests/Zip/ZipEncryptionHandling.cs",
                "new file mode 100644",
                "index 0000000..956a5ca",
                "--- /dev/null",
                "+++ b/test/ICSharpCode.SharpZipLib.Tests/Zip/ZipEncryptionHandling.cs",
                "@@ -0,0 +1,144 @@",
                "+\u00ef\u00bb\u00bfusing ICSharpCode.SharpZipLib.Zip;",
                "+using NUnit.Framework;",
                "+using System;",
                "+using System.Collections.Generic;",
                "+using System.Diagnostics;",
                "+using System.IO;",
                "+using System.Text;",
                "+",
                "+namespace ICSharpCode.SharpZipLib.Tests.Zip",
                "+{",
                "+\t[TestFixture]",
                "+    public class ZipEncryptionHandling",
                "+    {",
                "+\t\t[Test]",
                "+\t\t[Category(\"Encryption\")]",
                "+\t\t[Category(\"Zip\")]",
                "+\t\tpublic void Aes128Encryption()",
                "+\t\t{",
                "+\t\t\tCreateZipWithEncryptedEntries(\"foo\", 128);",
                "+\t\t}",
                "+",
                "+\t\t[Test]",
                "+\t\t[Category(\"Encryption\")]",
                "+\t\t[Category(\"Zip\")]",
                "+\t\tpublic void Aes256Encryption()",
                "+\t\t{",
                "+\t\t\tCreateZipWithEncryptedEntries(\"foo\", 256);",
                "+\t\t}",
                "+",
                "+\t\tprivate static readonly string[] possible7zPaths = new[] {",
                "+\t\t\t// Check in PATH",
                "+\t\t\t\"7z\", \"7za\",",
                "+",
                "+\t\t\t// Check in default install location",
                "+\t\t\tPath.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), \"7-Zip\", \"7z.exe\"),",
                "+\t\t\tPath.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86), \"7-Zip\", \"7z.exe\"),",
                "+\t\t};",
                "+",
                "+\t\tpublic static bool TryGet7zBinPath(out string path7z)",
                "+\t\t{",
                "+\t\t\tvar runTimeLimit = TimeSpan.FromSeconds(3);",
                "+",
                "+\t\t\tforeach (var testPath in possible7zPaths)",
                "+\t\t\t{",
                "+\t\t\t\ttry",
                "+\t\t\t\t{",
                "+\t\t\t\t\tvar p = Process.Start(new ProcessStartInfo(testPath, \"i\")",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tRedirectStandardOutput = true",
                "+\t\t\t\t\t});",
                "+\t\t\t\t\twhile (!p.StandardOutput.EndOfStream && (DateTime.Now - p.StartTime) < runTimeLimit)",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tp.StandardOutput.DiscardBufferedData();",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tif (!p.HasExited)",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tp.Close();",
                "+\t\t\t\t\t\tAssert.Warn($\"Timed out checking for 7z binary in \\\"{testPath}\\\"!\");",
                "+\t\t\t\t\t\tcontinue;",
                "+\t\t\t\t\t}",
                "+",
                "+\t\t\t\t\tif (p.ExitCode == 0)",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tpath7z = testPath;",
                "+\t\t\t\t\t\treturn true;",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t\tcatch (Exception)",
                "+\t\t\t\t{",
                "+\t\t\t\t\tcontinue;",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t\tpath7z = null;",
                "+\t\t\treturn false;",
                "+\t\t}",
                "+",
                "+\t\tpublic void CreateZipWithEncryptedEntries(string password, int keySize)",
                "+\t\t{",
                "+\t\t\tusing (var ms = new MemoryStream())",
                "+\t\t\t{",
                "+\t\t\t\tusing (var zs = new ZipOutputStream(ms))",
                "+\t\t\t\t{",
                "+\t\t\t\t\tzs.IsStreamOwner = false;",
                "+\t\t\t\t\tzs.SetLevel(9); // 0-9, 9 being the highest level of compression",
                "+\t\t\t\t\tzs.Password = password;  // optional. Null is the same as not setting. Required if using AES.",
                "+",
                "+\t\t\t\t\tZipEntry zipEntry = new ZipEntry(\"test\");",
                "+\t\t\t\t\tzipEntry.AESKeySize = keySize;",
                "+\t\t\t\t\tzipEntry.DateTime = DateTime.Now;",
                "+",
                "+\t\t\t\t\tzs.PutNextEntry(zipEntry);",
                "+",
                "+\t\t\t\t\tbyte[] dummyData = Encoding.UTF8.GetBytes(@\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. ",
                "+Fusce bibendum diam ac nunc rutrum ornare. Maecenas blandit elit ligula, eget suscipit lectus rutrum eu. ",
                "+Maecenas aliquam, purus mattis pulvinar pharetra, nunc orci maximus justo, sed facilisis massa dui sed lorem. ",
                "+Vestibulum id iaculis leo. Duis porta ante lorem. Duis condimentum enim nec lorem tristique interdum. Fusce in faucibus libero.\");",
                "+",
                "+\t\t\t\t\tusing (var dummyStream = new MemoryStream(dummyData))",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tdummyStream.CopyTo(zs);",
                "+\t\t\t\t\t}",
                "+",
                "+\t\t\t\t\tzs.CloseEntry();",
                "+\t\t\t\t}",
                "+",
                "+\t\t\t\tif (TryGet7zBinPath(out string path7z))",
                "+\t\t\t\t{",
                "+\t\t\t\t\tConsole.WriteLine($\"Using 7z path: \\\"{path7z}\\\"\");",
                "+",
                "+\t\t\t\t\tms.Seek(0, SeekOrigin.Begin);",
                "+",
                "+\t\t\t\t\tvar fileName = Path.GetTempFileName();",
                "+",
                "+\t\t\t\t\ttry",
                "+\t\t\t\t\t{",
                "+",
                "+\t\t\t\t\t\tusing (var fs = File.OpenWrite(fileName))",
                "+\t\t\t\t\t\t{",
                "+\t\t\t\t\t\t\tms.CopyTo(fs);",
                "+\t\t\t\t\t\t}",
                "+",
                "+\t\t\t\t\t\tvar p = Process.Start(path7z, $\"t -p{password} {fileName}\");",
                "+\t\t\t\t\t\tif (!p.WaitForExit(2000))",
                "+\t\t\t\t\t\t{",
                "+\t\t\t\t\t\t\tAssert.Warn(\"Timed out verifying zip file!\");",
                "+\t\t\t\t\t\t}",
                "+",
                "+\t\t\t\t\t\tAssert.AreEqual(0, p.ExitCode, \"Archive verification failed\");",
                "+",
                "+\t\t\t\t\t}",
                "+\t\t\t\t\tfinally",
                "+\t\t\t\t\t{",
                "+\t\t\t\t\t\tFile.Delete(fileName);",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t\telse",
                "+\t\t\t\t{",
                "+\t\t\t\t\tAssert.Warn(\"Skipping file verification since 7za is not in path\");",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+",
                "+\t\t}",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "test/ICSharpCode.SharpZipLib.Tests/Zip/ZipEncryptionHandling.cs"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "265": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: test/ICSharpCode.SharpZipLib.Tests/Zip/ZipEncryptionHandling.cs",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sharpziplib",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 265",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "18b6e4741dd9e9ecd64a43b1613c20b5a858d93b",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1537104954,
            "hunks": 3,
            "message": "Merge PR #260, Fix AES256 encryption Fixes #181 by using an empty IV for AES encryption instead of the second derived key Co-authored-by: FastJack2 <FastJack2@users.noreply.github.com>",
            "diff": [
                "diff --git a/src/ICSharpCode.SharpZipLib/Encryption/ZipAESTransform.cs b/src/ICSharpCode.SharpZipLib/Encryption/ZipAESTransform.cs",
                "index 22bc14d..81c4a44 100644",
                "--- a/src/ICSharpCode.SharpZipLib/Encryption/ZipAESTransform.cs",
                "+++ b/src/ICSharpCode.SharpZipLib/Encryption/ZipAESTransform.cs",
                "@@ -80,11 +80,13 @@ namespace ICSharpCode.SharpZipLib.Encryption",
                " \t\t\tvar pdb = new Rfc2898DeriveBytes(key, saltBytes, KEY_ROUNDS);",
                "-            var rm = Aes.Create();",
                "+\t\t\tvar rm = Aes.Create();",
                " \t\t\trm.Mode = CipherMode.ECB;           // No feedback from cipher for CTR mode",
                " \t\t\t_counterNonce = new byte[_blockSize];",
                "-\t\t\tbyte[] byteKey1 = pdb.GetBytes(_blockSize);",
                "-\t\t\tbyte[] byteKey2 = pdb.GetBytes(_blockSize);",
                "-\t\t\t_encryptor = rm.CreateEncryptor(byteKey1, byteKey2);",
                "+\t\t\tbyte[] key1bytes = pdb.GetBytes(_blockSize);",
                "+\t\t\tbyte[] key2bytes = pdb.GetBytes(_blockSize);",
                "+\t\t\t",
                "+\t\t\t// Use empty IV for AES",
                "+\t\t\t_encryptor = rm.CreateEncryptor(key1bytes, new byte[16]);",
                " \t\t\t_pwdVerifier = pdb.GetBytes(PWD_VER_LENGTH);",
                " \t\t\t//",
                "-\t\t\t_hmacsha1 = IncrementalHash.CreateHMAC(HashAlgorithmName.SHA1, byteKey2);",
                "+\t\t\t_hmacsha1 = IncrementalHash.CreateHMAC(HashAlgorithmName.SHA1, key2bytes);",
                " \t\t\t_writeMode = writeMode;"
            ],
            "changed_files": [
                "src/ICSharpCode.SharpZipLib/Encryption/ZipAESTransform.cs"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "260": "256 bit AES Encryption doesn't work #181",
                "181": "WinZipAES256 problem on UWP #212 Read more bytes if returned count does not match the requested length\u2026 #304 ArgumentNullException is thrown if we use AESKeySize = 256. 128 does work #447"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/ICSharpCode.SharpZipLib/Encryption/ZipAESTransform.cs",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sharpziplib",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 260, 181",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fa75398a594b80a8945280ae8e7fb2cf1e7dfa70",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1534352989,
            "hunks": 2,
            "message": "Update csproj for v1.0.0 stable (#259)",
            "diff": [
                "diff --git a/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj b/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                "index 724593c..f51596b 100644",
                "--- a/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                "+++ b/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                "@@ -11,6 +11,6 @@",
                "   <PropertyGroup>",
                "-    <AssemblyVersion>1.0.0.4</AssemblyVersion>",
                "-    <FileVersion>1.0.0.4</FileVersion>",
                "-    <Version>1.0.0-rc2</Version>",
                "-    <PackageId>SharpZipLib </PackageId>",
                "+    <AssemblyVersion>1.0.0.5</AssemblyVersion>",
                "+    <FileVersion>1.0.0.5</FileVersion>",
                "+    <Version>1.0.0</Version>",
                "+    <PackageId>SharpZipLib</PackageId>",
                "     <Company>ICSharpCode</Company>",
                "@@ -24,3 +24,3 @@",
                "     <NeutralLanguage>en-US</NeutralLanguage>",
                "-    <PackageReleaseNotes>This is a release candidate for v1.0",
                "+    <PackageReleaseNotes>This is the first stable release for v1.0"
            ],
            "changed_files": [
                "src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "259": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sharpziplib",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 259",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3438880049475b838caf841c549abef517b84dd8",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1529186097,
            "hunks": 3,
            "message": "Set target frameworks to netstandard2 + net45",
            "diff": [
                "diff --git a/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj b/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                "index d7ea559..db1440d 100644",
                "--- a/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                "+++ b/src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                "@@ -3,3 +3,3 @@",
                "   <PropertyGroup>",
                "-    <TargetFrameworks>netstandard1.3;net45</TargetFrameworks>",
                "+    <TargetFrameworks>netstandard2;net45</TargetFrameworks>",
                "     <PackageId>SharpZipLib </PackageId>",
                "@@ -17,8 +17,8 @@ Please see https://github.com/icsharpcode/SharpZipLib/wiki/Release-1.0 for more",
                "-  <PropertyGroup Condition=\"'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|netstandard1.3|AnyCPU'\">",
                "-    <DocumentationFile>bin\\Debug\\netstandard1.3\\ICSharpCode.SharpZipLib.xml</DocumentationFile>",
                "+  <PropertyGroup Condition=\"'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|netstandard2|AnyCPU'\">",
                "+    <DocumentationFile>bin\\Debug\\netstandard2\\ICSharpCode.SharpZipLib.xml</DocumentationFile>",
                "   </PropertyGroup>",
                "-  <PropertyGroup Condition=\"'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|netstandard1.3|AnyCPU'\">",
                "-    <DocumentationFile>bin\\Release\\netstandard1.3\\ICSharpCode.SharpZipLib.xml</DocumentationFile>",
                "+  <PropertyGroup Condition=\"'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|netstandard2|AnyCPU'\">",
                "+    <DocumentationFile>bin\\Release\\netstandard2\\ICSharpCode.SharpZipLib.xml</DocumentationFile>",
                "   </PropertyGroup>"
            ],
            "changed_files": [
                "src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc1",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: sharpziplib",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e3aa36d71ee26fd68a53b25f26e95423c8fcf1ea",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1530439517,
            "hunks": 6,
            "message": "Fix travis (#238) - Use dotnet cli and netcoreapp2/netstandard2 for testing - Ignore _testRunner directory (currently not enabled)",
            "diff": [
                "diff --git a/.gitignore b/.gitignore",
                "index d8a23b0..045735d3 100644",
                "--- a/.gitignore",
                "+++ b/.gitignore",
                "@@ -253 +253,2 @@ paket-files/",
                " /test/ICSharpCode.SharpZipLib.TestBootstrapper/Properties/launchSettings.json",
                "+_testRunner/",
                "diff --git a/.travis.yml b/.travis.yml",
                "index 6d42096..9b54b3f 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -1,20 +1,30 @@",
                " language: csharp",
                "-mono:",
                "-  - latest",
                "-os:",
                "-  - linux",
                "-  - osx",
                " solution: ICSharpCode.SharpZipLib.sln",
                "+",
                "+#matrix:",
                "+#  include:",
                "+#   - mono: latest",
                "+#   - mono: none",
                "+#     env: NETCORE=1",
                "+#     dotnet: 2.1",
                "+mono: none",
                "+dotnet: 2.1",
                "+os: linux",
                " install:",
                "-  - nuget restore ICSharpCode.SharpZipLib.sln",
                "+  - dotnet restore",
                "+# - nuget restore ICSharpCode.SharpZipLib.sln",
                "+# - nuget install NUnit.Console -Version 3.8.0 -OutputDirectory _testRunner",
                " script:",
                "-  - xbuild /p:Configuration=Debug ICSharpCode.SharpZipLib.sln",
                "-  - xbuild /p:Configuration=Release ICSharpCode.SharpZipLib.sln",
                "-  - mono ./packages/NUnit.ConsoleRunner.3.2.1/tools/nunit3-console.exe --framework=mono-4.0 --labels=All --result=./Documentation/nunit3-test-results-travis.xml ./bin/Release/ICSharpCode.SharpZipLib.Tests.dll",
                "+  - dotnet build -f netstandard2 src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                "+  - dotnet run -c Debug -f netcoreapp2 -p test/ICSharpCode.SharpZipLib.TestBootstrapper/ICSharpCode.SharpZipLib.TestBootstrapper.csproj -- --where \"class !~ WindowsNameTransformHandling & test !~ ZipEntryFactoryHandling.CreatedValues & test !~ ZipNameTransformHandling.FilenameCleaning\" --result=docs/nunit3-test-results-debug.xml",
                "+  - dotnet run -c Release -f netcoreapp2 -p test/ICSharpCode.SharpZipLib.TestBootstrapper/ICSharpCode.SharpZipLib.TestBootstrapper.csproj -- --where \"class !~ WindowsNameTransformHandling & test !~ ZipEntryFactoryHandling.CreatedValues & test !~ ZipNameTransformHandling.FilenameCleaning\" --result=docs\\nunit3-test-results-release.xml",
                "+#  - dotnet test test/ICSharpCode.SharpZipLib.Tests/ICSharpCode.SharpZipLib.Tests.csproj",
                "+#  - xbuild /p:Configuration=Release ICSharpCode.SharpZipLib.sln",
                "+#  - mono ./packages/NUnit.ConsoleRunner.3.2.1/tools/nunit3-console.exe --framework=mono-4.0 --labels=All --result=./Documentation/nunit3-test-results-travis.xml ./bin/Release/ICSharpCode.SharpZipLib.Tests.dll",
                " after_script:",
                "-  - nuget pack Build/ICSharpCode.SharpZipLib.nuspec -BasePath Build -OutputDirectory bin/Release",
                "-cache:",
                "-  directories:",
                "-    - bin",
                "-    - Documentation",
                "+  - dotnet pack -f netstandard2 -o _dist/ src/ICSharpCode.SharpZipLib/ICSharpCode.SharpZipLib.csproj",
                "+#cache:",
                "+#  directories:",
                "+#    - bin",
                "+#    - Documentation",
                " #deploy:"
            ],
            "changed_files": [
                ".gitignore",
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "238": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc1",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: directory",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 238",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5578c8fee04a4ff9c5a2a6ac99a1c5e370092713",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1531951359,
            "hunks": 1,
            "message": "Merge PR #246, Add new appveyor.yml Correctly works with the new SDK .csproj format and netcore2 testing (unsupported by appveyor?) Builds nuget packages with the commit as the suffix.",
            "diff": [
                "diff --git a/appveyor.yml b/appveyor.yml",
                "new file mode 100644",
                "index 0000000..20bff86",
                "--- /dev/null",
                "+++ b/appveyor.yml",
                "@@ -0,0 +1,73 @@",
                "+version: '{build}'",
                "+image: Visual Studio 2017",
                "+configuration:",
                "+- Debug",
                "+- Release",
                "+dotnet_csproj:",
                "+  patch: true",
                "+  file: '**\\*.csproj'",
                "+  version: $(VERSION)",
                "+  package_version: $(VERSION)",
                "+  assembly_version: 1.0.0.999",
                "+  file_version: 1.0.0.999",
                "+  informational_version: $(VERSION)",
                "+install:",
                "+- ps: |-",
                "+    $commit = $(git rev-parse --short HEAD)",
                "+",
                "+    $masterBranches = @(\"master\");",
                "+",
                "+    if ($masterBranches -contains $env:APPVEYOR_REPO_BRANCH) {",
                "+    \t$branch = \"\";",
                "+    } else {",
                "+    \t$branch = \"-$env:APPVEYOR_REPO_BRANCH\";",
                "+    }",
                "+",
                "+    if ($env:APPVEYOR_PULL_REQUEST_NUMBER) {",
                "+    \t$suffix = \"-pr$env:APPVEYOR_PULL_REQUEST_NUMBER\";",
                "+    } else {",
                "+    \t$suffix = \"\";",
                "+    }",
                "+",
                "+    $build = \"_${env:APPVEYOR_BUILD_NUMBER}\"",
                "+",
                "+    $version = \"1.0-git$commit\";",
                "+",
                "+    $av_version = \"$version$branch$suffix$build\";",
                "+    $env:APPVEYOR_BUILD_VERSION=$av_version;",
                "+    $env:VERSION=$version;",
                "+",
                "+    write-host -n \"new version: \";",
                "+    write-host -f green $av_version;",
                "+",
                "+    appveyor UpdateBuild -Version $av_version",
                "+nuget:",
                "+  project_feed: true",
                "+  disable_publish_on_pr: true",
                "+before_build:",
                "+- ps: nuget restore ICSharpCode.SharpZipLib.sln",
                "+build:",
                "+  project: ICSharpCode.SharpZipLib.sln",
                "+  publish_nuget: true",
                "+  publish_nuget_symbols: true",
                "+  verbosity: normal",
                "+test_script:",
                "+- ps: |-",
                "+    $proj = \".\\test\\ICSharpCode.SharpZipLib.TestBootstrapper\\ICSharpCode.SharpZipLib.TestBootstrapper.csproj\";",
                "+    $resxml = \".\\docs\\nunit3-test-results-debug.xml\";",
                "+",
                "+    # Nuget 3 Console runner:",
                "+    #$tester = \"nunit3-console .\\test\\ICSharpCode.SharpZipLib.Tests\\bin\\$($env:CONFIGURATION)\\netcoreapp2.0\\ICSharpCode.SharpZipLib.Tests.dll\"",
                "+",
                "+    # Bootstrapper:",
                "+    $tester = \"dotnet run -f netcoreapp2 -p $proj -c $env:CONFIGURATION\";",
                "+    iex \"$tester --explore=tests.xml\";",
                "+",
                "+    [xml]$xml = Get-Content(\"tests.xml\");",
                "+    $assembly = select-xml \"/test-suite[@type='Assembly']\" $xml | select -f 1 -exp Node;",
                "+    $testcases = select-xml \"//test-case\" $xml | % { Add-AppveyorTest -Name $_.Node.fullname -Framework NUnit -Filename $assembly.name };",
                "+",
                "+    iex \"$tester --result=$resxml\";",
                "+    ",
                "+    $wc = New-Object 'System.Net.WebClient';",
                "+    $wc.UploadFile(\"https://ci.appveyor.com/api/testresults/nunit3/$($env:APPVEYOR_JOB_ID)\", (Resolve-Path $resxml));"
            ],
            "changed_files": [
                "appveyor.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "246": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SharpZipLib",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 246",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "29a2af849f0a0dd47c0cd01d4ace557f22731f07",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1529184419,
            "hunks": 0,
            "message": "Merge pull request #1 from PingmanTools/net45-fix Merge #198",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1": "MIT License? #103",
                "198": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc1",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1, 198",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8feb39a0c26e83b80e7fb0c481834e88d35297ee",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1529224619,
            "hunks": 0,
            "message": "Merge pull request #234 from piksel/netcore2-net45 Update framework targets to netstandard2 and net45",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "234": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc1",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 234",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "02acb4475214a42dadde1d4c46c6f74bd3a4a760",
            "repository": "https://github.com/icsharpcode/SharpZipLib",
            "timestamp": 1530487077,
            "hunks": 0,
            "message": "Update LICENSE.txt so that Github recognizes it",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "upm/v1.3.1",
                "upm/v1.3.2",
                "upm/v1.3.3",
                "upm/v1.3.3-repkg.1",
                "upm/v1.4.1",
                "v1.0.0",
                "v1.0.0-rc1",
                "v1.0.0-rc2",
                "v1.1.0",
                "v1.2.0",
                "v1.3.0",
                "v1.3.1",
                "v1.3.2",
                "v1.3.3",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2"
            ],
            "matched_rules": []
        }
    ]
}
