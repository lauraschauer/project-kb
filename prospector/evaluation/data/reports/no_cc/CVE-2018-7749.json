{
    "advisory_record": {
        "cve_id": "CVE-2018-7749",
        "description": "The SSH server implementation of AsyncSSH before 1.12.1 does not properly check whether authentication is completed before processing other requests. A customized SSH client can simply skip the authentication step.",
        "reserved_timestamp": 1520380800,
        "published_timestamp": 1520881200,
        "updated_timestamp": 1521057421,
        "repository_url": null,
        "references": {
            "https://groups.google.com/forum/#%21msg/asyncssh-announce/57_5O7kiHSA/8BXZ_hxHAQAJ": 2,
            "commit::c161e26cdc0d41b745b63d9f17b437f073bf7ba4": 2,
            "commit::16e6ebfa893167c7d9d3f6dc7a2c0d197e47f43a": 2
        },
        "affected_products": [
            "n/a",
            "AsyncSSH",
            "SSH"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "AsyncSSH",
            "SSH"
        ],
        "keywords": [
            "client",
            "process",
            "asyncssh",
            "skip",
            "authentication",
            "implementation",
            "check",
            "server",
            "request",
            "step",
            "complete"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "16e6ebfa893167c7d9d3f6dc7a2c0d197e47f43a",
            "repository": "https://github.com/ronf/asyncssh",
            "timestamp": 1520132987,
            "hunks": 4,
            "message": "Reject global and channel requests sent prior to auth being completed",
            "diff": [
                "diff --git a/asyncssh/connection.py b/asyncssh/connection.py",
                "index 0277627..91a511e 100644",
                "--- a/asyncssh/connection.py",
                "+++ b/asyncssh/connection.py",
                "@@ -748,2 +748,6 @@ class SSHConnection(SSHPacketHandler):",
                "                 processed = self._auth.process_packet(pkttype, seq, packet)",
                "+            elif pkttype > MSG_USERAUTH_LAST and not self._auth_complete:",
                "+                raise DisconnectError(DISC_PROTOCOL_ERROR,",
                "+                                      'Invalid request received before '",
                "+                                      'authentication was complete')",
                "             else:",
                "diff --git a/tests/test_connection.py b/tests/test_connection.py",
                "index aa2623c..b9c935a 100644",
                "--- a/tests/test_connection.py",
                "+++ b/tests/test_connection.py",
                "@@ -132,2 +132,24 @@ class _FailingGCMShim(GCMShim):",
                "+class _PreAuthRequestClient(asyncssh.SSHClient):",
                "+    \"\"\"Test sending a request prior to auth complete\"\"\"",
                "+",
                "+    def __init__(self):",
                "+        self._conn = None",
                "+",
                "+    def connection_made(self, conn):",
                "+        \"\"\"Save connection for use later\"\"\"",
                "+",
                "+        self._conn = conn",
                "+",
                "+    def password_auth_requested(self):",
                "+        \"\"\"Attempt to execute a command before authentication is complete\"\"\"",
                "+",
                "+        # pylint: disable=protected-access",
                "+        self._conn._auth_complete = True",
                "+",
                "+        self._conn.send_packet(MSG_GLOBAL_REQUEST, String(b'\\xff'),",
                "+                               Boolean(True))",
                "+        return 'pw'",
                "+",
                "+",
                " class _InternalErrorClient(asyncssh.SSHClient):",
                "@@ -972,4 +994,4 @@ class _TestConnectionAbort(ServerTestCase):",
                "-class _TestConnectionCloseDurngAuth(ServerTestCase):",
                "-    \"\"\"Unit test for connection close during long auth callback\"\"\"",
                "+class _TestDuringAuth(ServerTestCase):",
                "+    \"\"\"Unit test for operations during auth\"\"\"",
                "@@ -990,2 +1012,11 @@ class _TestConnectionCloseDurngAuth(ServerTestCase):",
                "+    @asynctest",
                "+    def test_request_during_auth(self):",
                "+        \"\"\"Test sending a request prior to auth complete\"\"\"",
                "+",
                "+        with self.assertRaises(asyncssh.DisconnectError):",
                "+            yield from self.create_connection(_PreAuthRequestClient,",
                "+                                              username='user',",
                "+                                              compression_algs=['none'])",
                "+"
            ],
            "changed_files": [
                "asyncssh/connection.py",
                "tests/test_connection.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v1.12.1",
                "v1.12.2",
                "v1.13.0",
                "v1.13.1",
                "v1.13.2",
                "v1.13.3",
                "v1.14.0",
                "v1.15.0",
                "v1.15.1",
                "v1.16.0",
                "v1.16.1",
                "v1.17.0",
                "v1.17.1",
                "v1.18.0",
                "v2.0.0",
                "v2.0.1",
                "v2.1.0",
                "v2.10.0",
                "v2.10.1",
                "v2.11.0",
                "v2.12.0",
                "v2.13.0",
                "v2.13.1",
                "v2.13.2",
                "v2.14.0",
                "v2.14.1",
                "v2.14.2",
                "v2.15.0",
                "v2.2.0",
                "v2.2.1",
                "v2.3.0",
                "v2.4.0",
                "v2.4.1",
                "v2.4.2",
                "v2.5.0",
                "v2.6.0",
                "v2.7.0",
                "v2.7.1",
                "v2.7.2",
                "v2.8.0",
                "v2.8.1",
                "v2.9.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request, complete",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c161e26cdc0d41b745b63d9f17b437f073bf7ba4",
            "repository": "https://github.com/ronf/asyncssh",
            "timestamp": 1520705379,
            "hunks": 1,
            "message": "Bump version number up to 1.12.1 and update change log and copyright",
            "diff": [
                "diff --git a/asyncssh/version.py b/asyncssh/version.py",
                "index 225f662..4238824 100644",
                "--- a/asyncssh/version.py",
                "+++ b/asyncssh/version.py",
                "@@ -20,2 +20,2 @@ __url__ = 'http://asyncssh.timeheart.net'",
                "-__version__ = '1.12.0'",
                "+__version__ = '1.12.1'"
            ],
            "changed_files": [
                "asyncssh/version.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v1.12.1",
                "v1.12.2",
                "v1.13.0",
                "v1.13.1",
                "v1.13.2",
                "v1.13.3",
                "v1.14.0",
                "v1.15.0",
                "v1.15.1",
                "v1.16.0",
                "v1.16.1",
                "v1.17.0",
                "v1.17.1",
                "v1.18.0",
                "v2.0.0",
                "v2.0.1",
                "v2.1.0",
                "v2.10.0",
                "v2.10.1",
                "v2.11.0",
                "v2.12.0",
                "v2.13.0",
                "v2.13.1",
                "v2.13.2",
                "v2.14.0",
                "v2.14.1",
                "v2.14.2",
                "v2.15.0",
                "v2.2.0",
                "v2.2.1",
                "v2.3.0",
                "v2.4.0",
                "v2.4.1",
                "v2.4.2",
                "v2.5.0",
                "v2.6.0",
                "v2.7.0",
                "v2.7.1",
                "v2.7.2",
                "v2.8.0",
                "v2.8.1",
                "v2.9.0"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                }
            ]
        },
        {
            "commit_id": "5a7ca8db48427a8e3a8d6ca167e5cb88ed0ecb47",
            "repository": "https://github.com/ronf/asyncssh",
            "timestamp": 1520318403,
            "hunks": 30,
            "message": "Additional work to simplify packet logging This commit continues to simplify the packet logging code, such that all logging is isolated to the SSHConnection send_packet() and recv_packet() methods for regular SSH logs, and something similar is done in the SFTPHandler send_packet() and recv_packets() methods, with a bit of special-casing for the FXP_INIT and FXP_VERSION messages, due to their lack of a packet ID. This commit also eliminates the need to explicit pass the array of handler names to use for logging into the send_packet() function. Calling functions which are derived from the SSHPacketLogger class can simply pass \"self\", and the log calls are actually done by calling back into this handler so that the right handler names are automatically picked up. Finally, this commit now properly catches a decode error when a channel message is sent without a channel number, treating this as another special case where we skip processing but log the packet with a note attached before raising a disconnect error.",
            "diff": [
                "diff --git a/asyncssh/auth.py b/asyncssh/auth.py",
                "index 1b1bae1..e8aae84 100644",
                "--- a/asyncssh/auth.py",
                "+++ b/asyncssh/auth.py",
                "@@ -65,4 +65,3 @@ class _Auth(SSHPacketHandler):",
                "-        self._conn.send_packet(pkttype, *args,",
                "-                               handler_names=self._handler_names)",
                "+        self._conn.send_packet(pkttype, *args, handler=self)",
                "diff --git a/asyncssh/channel.py b/asyncssh/channel.py",
                "index d9b3051..77fe847 100644",
                "--- a/asyncssh/channel.py",
                "+++ b/asyncssh/channel.py",
                "@@ -628,4 +628,3 @@ class SSHChannel(SSHPacketHandler):",
                "                                UInt32(self._recv_window),",
                "-                               UInt32(self._recv_pktsize), *args,",
                "-                               handler_names=self._handler_names)",
                "+                               UInt32(self._recv_pktsize), *args, handler=self)",
                "@@ -641,4 +640,3 @@ class SSHChannel(SSHPacketHandler):",
                "-        self._conn.send_packet(pkttype, payload,",
                "-                               handler_names=self._handler_names)",
                "+        self._conn.send_packet(pkttype, payload, handler=self)",
                "diff --git a/asyncssh/connection.py b/asyncssh/connection.py",
                "index 6a39475..45d0de9 100644",
                "--- a/asyncssh/connection.py",
                "+++ b/asyncssh/connection.py",
                "@@ -729,4 +729,4 @@ class SSHConnection(SSHPacketHandler):",
                "         handler = self",
                "-        note = None",
                "-        exc = None",
                "+        skip_reason = None",
                "+        exc_reason = None",
                "@@ -734,4 +734,3 @@ class SSHConnection(SSHPacketHandler):",
                "             if self._ignore_first_kex: # pragma: no cover",
                "-                handler = None",
                "-                note = 'ignored first kex'",
                "+                skip_reason = 'ignored first kex'",
                "                 self._ignore_first_kex = False",
                "@@ -743,17 +742,19 @@ class SSHConnection(SSHPacketHandler):",
                "         elif pkttype > MSG_USERAUTH_LAST and not self._auth_complete:",
                "-            handler = None",
                "-            note = 'rejected prior to auth'",
                "-            exc = DisconnectError(DISC_PROTOCOL_ERROR,",
                "-                                  'Invalid request received before '",
                "-                                  'authentication was complete')",
                "+            skip_reason = 'invalid request before auth complete'",
                "+            exc_reason = 'Invalid request before authentication was complete'",
                "         elif MSG_CHANNEL_FIRST <= pkttype <= MSG_CHANNEL_LAST:",
                "-            recv_chan = packet.get_uint32()",
                "-            handler = self._channels.get(recv_chan)",
                "-",
                "-            if not handler:",
                "-                note = 'invalid channel number'",
                "-                exc = DisconnectError(DISC_PROTOCOL_ERROR,",
                "-                                      'Invalid channel number received')",
                "-",
                "-        if handler:",
                "+            try:",
                "+                recv_chan = packet.get_uint32()",
                "+                handler = self._channels[recv_chan]",
                "+            except KeyError:",
                "+                skip_reason = 'invalid channel number'",
                "+                exc_reason = 'Invalid channel number %d received' % recv_chan",
                "+            except PacketDecodeError:",
                "+                skip_reason = 'incomplete channel request'",
                "+                exc_reason = 'Incomplete channel request received'",
                "+",
                "+        handler.log_received_packet(pkttype, seq,",
                "+                                    packet.get_full_payload(), skip_reason)",
                "+",
                "+        if not skip_reason:",
                "             try:",
                "@@ -766,7 +767,5 @@ class SSHConnection(SSHPacketHandler):",
                "                 self.send_packet(MSG_UNIMPLEMENTED, UInt32(seq))",
                "-        else:",
                "-            self.log_unprocessed_packet(pkttype, seq, packet, note)",
                "-            if exc: # pragma: no branch",
                "-                raise exc # pylint: disable=raising-bad-type",
                "+        if exc_reason:",
                "+            raise DisconnectError(DISC_PROTOCOL_ERROR, exc_reason)",
                "@@ -778,3 +777,3 @@ class SSHConnection(SSHPacketHandler):",
                "-    def send_packet(self, pkttype, *args, handler_names=_handler_names):",
                "+    def send_packet(self, pkttype, *args, handler=None):",
                "         \"\"\"Send an SSH packet\"\"\"",
                "@@ -847,3 +846,6 @@ class SSHConnection(SSHPacketHandler):",
                "-        self.log_sent_packet(pkttype, seq, log_data, handler_names)",
                "+        if not handler:",
                "+            handler = self",
                "+",
                "+        handler.log_sent_packet(pkttype, seq, log_data)",
                "diff --git a/asyncssh/kex.py b/asyncssh/kex.py",
                "index c2ec69a..e638f25 100644",
                "--- a/asyncssh/kex.py",
                "+++ b/asyncssh/kex.py",
                "@@ -41,4 +41,3 @@ class Kex(SSHPacketHandler):",
                "-        self._conn.send_packet(pkttype, *args,",
                "-                               handler_names=self._handler_names)",
                "+        self._conn.send_packet(pkttype, *args, handler=self)",
                "diff --git a/asyncssh/packet.py b/asyncssh/packet.py",
                "index c3be2d6..a3d286f 100644",
                "--- a/asyncssh/packet.py",
                "+++ b/asyncssh/packet.py",
                "@@ -160,3 +160,3 @@ class SSHPacketLogger:",
                "-    def _log_packet(self, msg, note, pkttype, pktid, payload, handler_names):",
                "+    def _log_packet(self, msg, pkttype, pktid, payload, note):",
                "         \"\"\"Log a sent/received packet\"\"\"",
                "@@ -164,3 +164,3 @@ class SSHPacketLogger:",
                "         try:",
                "-            name = '%s (%d)' % (handler_names[pkttype], pkttype)",
                "+            name = '%s (%d)' % (self._handler_names[pkttype], pkttype)",
                "         except KeyError:",
                "@@ -176,16 +176,12 @@ class SSHPacketLogger:",
                "-    def log_sent_packet(self, pkttype, pktid, payload,",
                "-                        handler_names, note=''):",
                "+    def log_sent_packet(self, pkttype, pktid, payload, note=''):",
                "         \"\"\"Log a sent packet\"\"\"",
                "-        self._log_packet('Sent', note, pkttype, pktid,",
                "-                         payload, handler_names)",
                "+        self._log_packet('Sent', pkttype, pktid, payload, note)",
                "-    def log_received_packet(self, pkttype, pktid, payload,",
                "-                            handler_names, note=''):",
                "+    def log_received_packet(self, pkttype, pktid, payload, note=''):",
                "         \"\"\"Log a received packet\"\"\"",
                "-        self._log_packet('Received', note, pkttype, pktid,",
                "-                         payload, handler_names)",
                "+        self._log_packet('Received', pkttype, pktid, payload, note)",
                "@@ -206,5 +202,2 @@ class SSHPacketHandler(SSHPacketLogger):",
                "-        self.log_received_packet(pkttype, pktid, packet.get_full_payload(),",
                "-                                 self._handler_names)",
                "-",
                "         if pkttype in self._packet_handlers:",
                "@@ -214,7 +207 @@ class SSHPacketHandler(SSHPacketLogger):",
                "             return False",
                "-",
                "-    def log_unprocessed_packet(self, pkttype, pktid, packet, note):",
                "-        \"\"\"Log a received packet we decided not to process\"\"\"",
                "-",
                "-        self.log_received_packet(pkttype, pktid, packet.get_full_payload(),",
                "-                                 self._handler_names, note)",
                "diff --git a/asyncssh/sftp.py b/asyncssh/sftp.py",
                "index 2e79d97..0e4249d 100644",
                "--- a/asyncssh/sftp.py",
                "+++ b/asyncssh/sftp.py",
                "@@ -754,3 +754,3 @@ class SFTPHandler(SSHPacketLogger):",
                "-        self.log_sent_packet(pkttype, pktid, payload, self._handler_names)",
                "+        self.log_sent_packet(pkttype, pktid, payload)",
                "@@ -777,2 +777,5 @@ class SFTPHandler(SSHPacketLogger):",
                "+                self.log_received_packet(pkttype, pktid,",
                "+                                         packet.get_full_payload())",
                "+",
                "                 yield from self._process_packet(pkttype, pktid, packet)",
                "@@ -823,5 +826,2 @@ class SFTPClientHandler(SFTPHandler):",
                "-        self.log_received_packet(pkttype, pktid, packet.get_full_payload(),",
                "-                                 self._handler_names)",
                "-",
                "         try:",
                "@@ -985,4 +985,3 @@ class SFTPClientHandler(SFTPHandler):",
                "-            self.log_received_packet(resptype, None, resp.get_full_payload(),",
                "-                                     self._handler_names)",
                "+            self.log_received_packet(resptype, None, resp.get_full_payload())",
                "@@ -3101,5 +3100,2 @@ class SFTPServerHandler(SFTPHandler):",
                "         try:",
                "-            self.log_received_packet(pkttype, pktid, packet.get_full_payload(),",
                "-                                     self._handler_names)",
                "-",
                "             if pkttype == FXP_EXTENDED:",
                "@@ -3698,4 +3694,3 @@ class SFTPServerHandler(SFTPHandler):",
                "-            self.log_received_packet(pkttype, None, packet.get_full_payload(),",
                "-                                     self._handler_names)",
                "+            self.log_received_packet(pkttype, None, packet.get_full_payload())",
                "@@ -3709,3 +3704,2 @@ class SFTPServerHandler(SFTPHandler):",
                "                 extensions.append((name, data))",
                "-",
                "         except PacketDecodeError as exc:",
                "diff --git a/tests/test_connection.py b/tests/test_connection.py",
                "index b9c935a..ddd69e0 100644",
                "--- a/tests/test_connection.py",
                "+++ b/tests/test_connection.py",
                "@@ -958,2 +958,12 @@ class _TestConnection(ServerTestCase):",
                "+    @asynctest",
                "+    def test_missing_data_channel_number(self):",
                "+        \"\"\"Test missing channel number in channel data message\"\"\"",
                "+",
                "+        conn = yield from self.connect()",
                "+",
                "+        conn.send_packet(MSG_CHANNEL_DATA)",
                "+",
                "+        yield from conn.wait_closed()",
                "+",
                "     @asynctest",
                "@@ -964,3 +974,3 @@ class _TestConnection(ServerTestCase):",
                "-        conn.send_packet(MSG_CHANNEL_DATA, String(''))",
                "+        conn.send_packet(MSG_CHANNEL_DATA, UInt32(99), String(''))",
                "diff --git a/tests/test_packet.py b/tests/test_packet.py",
                "index 03f2673..f6a68e9 100644",
                "--- a/tests/test_packet.py",
                "+++ b/tests/test_packet.py",
                "@@ -17,7 +17,4 @@ import unittest",
                "-from asyncssh.logging import logger",
                "-",
                " from asyncssh.packet import Byte, Boolean, UInt32, UInt64, String, MPInt",
                " from asyncssh.packet import NameList, PacketDecodeError, SSHPacket",
                "-from asyncssh.packet import SSHPacketHandler",
                "@@ -164,25 +161 @@ class _TestPacket(unittest.TestCase):",
                "         self.assertEqual(String('\\u2000'), b'\\x00\\x00\\x00\\x03\\xe2\\x80\\x80')",
                "-",
                "-    def test_handler(self):",
                "-        \"\"\"Unit test SSH packet handler\"\"\"",
                "-",
                "-        class _TestPacketHandler(SSHPacketHandler):",
                "-            \"\"\"Class for unit testing SSHPacketHandler\"\"\"",
                "-",
                "-            @property",
                "-            def logger(self):",
                "-                \"\"\"A logger associated with this packet handler\"\"\"",
                "-",
                "-                return logger",
                "-",
                "-            def _handler1(self, pkttype, pktid, packet):",
                "-                \"\"\"Packet handler for unit testing\"\"\"",
                "-",
                "-            _packet_handlers = {",
                "-                1: _handler1",
                "-            }",
                "-",
                "-        handler = _TestPacketHandler()",
                "-        packet = SSHPacket(b'')",
                "-        self.assertTrue(handler.process_packet(1, 1, packet))",
                "-        self.assertFalse(handler.process_packet(2, 2, packet))"
            ],
            "changed_files": [
                "asyncssh/auth.py",
                "asyncssh/channel.py",
                "asyncssh/connection.py",
                "asyncssh/kex.py",
                "asyncssh/packet.py",
                "asyncssh/sftp.py",
                "tests/test_connection.py",
                "tests/test_packet.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v1.12.1",
                "v1.12.2",
                "v1.13.0",
                "v1.13.1",
                "v1.13.2",
                "v1.13.3",
                "v1.14.0",
                "v1.15.0",
                "v1.15.1",
                "v1.16.0",
                "v1.16.1",
                "v1.17.0",
                "v1.17.1",
                "v1.18.0",
                "v2.0.0",
                "v2.0.1",
                "v2.1.0",
                "v2.10.0",
                "v2.10.1",
                "v2.11.0",
                "v2.12.0",
                "v2.13.0",
                "v2.13.1",
                "v2.13.2",
                "v2.14.0",
                "v2.14.1",
                "v2.14.2",
                "v2.15.0",
                "v2.2.0",
                "v2.2.1",
                "v2.3.0",
                "v2.4.0",
                "v2.4.1",
                "v2.4.2",
                "v2.5.0",
                "v2.6.0",
                "v2.7.0",
                "v2.7.1",
                "v2.7.2",
                "v2.8.0",
                "v2.8.1",
                "v2.9.0"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: SSH",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: skip, process",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fe048cadba41a9e24161a16572632c31bf6a8172",
            "repository": "https://github.com/ronf/asyncssh",
            "timestamp": 1520665064,
            "hunks": 2,
            "message": "Fix logging of MAC algorithm for Chacha and GCM ciphers This commit fixes the debug logging to show the cipher name as both the cipher and MAC algorithm in the case of AEAD ciphers such as Chacha and GCM. Previously, this was recorded correctly in the \"extra\" info on the connection after the key exchange completed, but the debug logging printed the value before the MAC algorithm was updated.",
            "diff": [
                "diff --git a/asyncssh/connection.py b/asyncssh/connection.py",
                "index 9f3c5ac..66a5ef9 100644",
                "--- a/asyncssh/connection.py",
                "+++ b/asyncssh/connection.py",
                "@@ -979,2 +979,11 @@ class SSHConnection(SSHPacketHandler):",
                "+        self.logger.debug2('  Client to server:')",
                "+        self.logger.debug2('    Encryption alg: %s', self._enc_alg_cs)",
                "+        self.logger.debug2('    MAC alg: %s', self._mac_alg_cs)",
                "+        self.logger.debug2('    Compression alg: %s', self._cmp_alg_cs)",
                "+        self.logger.debug2('  Server to client:')",
                "+        self.logger.debug2('    Encryption alg: %s', self._enc_alg_sc)",
                "+        self.logger.debug2('    MAC alg: %s', self._mac_alg_sc)",
                "+        self.logger.debug2('    Compression alg: %s', self._cmp_alg_sc)",
                "+",
                "         self.send_packet(MSG_NEWKEYS)",
                "@@ -1371,10 +1380,2 @@ class SSHConnection(SSHPacketHandler):",
                "         self.logger.debug2('  Key exchange alg: %s', self._kex.algorithm)",
                "-        self.logger.debug2('  Client to server:')",
                "-        self.logger.debug2('    Encryption alg: %s', self._enc_alg_cs)",
                "-        self.logger.debug2('    MAC alg: %s', self._mac_alg_cs)",
                "-        self.logger.debug2('    Compression alg: %s', self._cmp_alg_cs)",
                "-        self.logger.debug2('  Server to client:')",
                "-        self.logger.debug2('    Encryption alg: %s', self._enc_alg_sc)",
                "-        self.logger.debug2('    MAC alg: %s', self._mac_alg_sc)",
                "-        self.logger.debug2('    Compression alg: %s', self._cmp_alg_sc)"
            ],
            "changed_files": [
                "asyncssh/connection.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v1.12.1",
                "v1.12.2",
                "v1.13.0",
                "v1.13.1",
                "v1.13.2",
                "v1.13.3",
                "v1.14.0",
                "v1.15.0",
                "v1.15.1",
                "v1.16.0",
                "v1.16.1",
                "v1.17.0",
                "v1.17.1",
                "v1.18.0",
                "v2.0.0",
                "v2.0.1",
                "v2.1.0",
                "v2.10.0",
                "v2.10.1",
                "v2.11.0",
                "v2.12.0",
                "v2.13.0",
                "v2.13.1",
                "v2.13.2",
                "v2.14.0",
                "v2.14.1",
                "v2.14.2",
                "v2.15.0",
                "v2.2.0",
                "v2.2.1",
                "v2.3.0",
                "v2.4.0",
                "v2.4.1",
                "v2.4.2",
                "v2.5.0",
                "v2.6.0",
                "v2.7.0",
                "v2.7.1",
                "v2.7.2",
                "v2.8.0",
                "v2.8.1",
                "v2.9.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: complete",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "56a8c99188382b68e678d47dcbf54a6cf9b74f1f",
            "repository": "https://github.com/ronf/asyncssh",
            "timestamp": 1520187754,
            "hunks": 10,
            "message": "Rework handling of unprocessed packets to make it more maintainable This commit consolidates received packet processing and logging of unprocessed packets in a single location, simplifying the design and making it less likely that future changes will miss this logging. In the process, I was also able to remove some ugliness in the previous design where certain packet types had to be manually excluded from being logged inside of process_packet().",
            "diff": [
                "diff --git a/asyncssh/connection.py b/asyncssh/connection.py",
                "index 692c5c9..6a39475 100644",
                "--- a/asyncssh/connection.py",
                "+++ b/asyncssh/connection.py",
                "@@ -52,6 +52,4 @@ from .constants import MSG_SERVICE_REQUEST, MSG_SERVICE_ACCEPT, MSG_EXT_INFO",
                " from .constants import MSG_CHANNEL_OPEN, MSG_CHANNEL_OPEN_CONFIRMATION",
                "-from .constants import MSG_CHANNEL_OPEN_FAILURE, MSG_CHANNEL_WINDOW_ADJUST",
                "-from .constants import MSG_CHANNEL_DATA, MSG_CHANNEL_EXTENDED_DATA",
                "-from .constants import MSG_CHANNEL_EOF, MSG_CHANNEL_CLOSE, MSG_CHANNEL_REQUEST",
                "-from .constants import MSG_CHANNEL_SUCCESS, MSG_CHANNEL_FAILURE",
                "+from .constants import MSG_CHANNEL_OPEN_FAILURE",
                "+from .constants import MSG_CHANNEL_FIRST, MSG_CHANNEL_LAST",
                " from .constants import MSG_KEXINIT, MSG_NEWKEYS, MSG_KEX_FIRST, MSG_KEX_LAST",
                "@@ -196,9 +194,2 @@ class SSHConnection(SSHPacketHandler):",
                "-    # Don't log received packets of these types at the connection level.",
                "-    # Instead, wait and log them at the channel level.",
                "-    _excluded_recv_pkttypes = {MSG_CHANNEL_WINDOW_ADJUST, MSG_CHANNEL_DATA,",
                "-                               MSG_CHANNEL_EXTENDED_DATA, MSG_CHANNEL_EOF,",
                "-                               MSG_CHANNEL_CLOSE, MSG_CHANNEL_REQUEST,",
                "-                               MSG_CHANNEL_SUCCESS, MSG_CHANNEL_FAILURE}",
                "-",
                "     _handler_names = get_symbol_names(globals(), 'MSG_')",
                "@@ -735,35 +726,47 @@ class SSHConnection(SSHPacketHandler):",
                "-        try:",
                "-            packet = SSHPacket(payload)",
                "-            pkttype = packet.get_byte()",
                "-",
                "-            if self._kex and MSG_KEX_FIRST <= pkttype <= MSG_KEX_LAST:",
                "-                if self._ignore_first_kex: # pragma: no cover",
                "-                    self.log_unprocessed_packet(pkttype, seq, packet,",
                "-                                                'ignored first kex')",
                "-",
                "-                    self._ignore_first_kex = False",
                "-                    processed = True",
                "-                else:",
                "-                    processed = self._kex.process_packet(pkttype, seq, packet)",
                "-            elif (self._auth and",
                "-                  MSG_USERAUTH_FIRST <= pkttype <= MSG_USERAUTH_LAST):",
                "-                processed = self._auth.process_packet(pkttype, seq, packet)",
                "-            elif pkttype > MSG_USERAUTH_LAST and not self._auth_complete:",
                "-                self.log_unprocessed_packet(pkttype, seq, packet,",
                "-                                            'rejected prior to auth')",
                "-",
                "-                raise DisconnectError(DISC_PROTOCOL_ERROR,",
                "-                                      'Invalid request received before '",
                "-                                      'authentication was complete')",
                "+        packet = SSHPacket(payload)",
                "+        pkttype = packet.get_byte()",
                "+        handler = self",
                "+        note = None",
                "+        exc = None",
                "+",
                "+        if self._kex and MSG_KEX_FIRST <= pkttype <= MSG_KEX_LAST:",
                "+            if self._ignore_first_kex: # pragma: no cover",
                "+                handler = None",
                "+                note = 'ignored first kex'",
                "+                self._ignore_first_kex = False",
                "             else:",
                "-                processed = self.process_packet(pkttype, seq, packet,",
                "-                                                pkttype not in",
                "-                                                self._excluded_recv_pkttypes)",
                "-        except PacketDecodeError as exc:",
                "-            raise DisconnectError(DISC_PROTOCOL_ERROR, str(exc)) from None",
                "+                handler = self._kex",
                "+        elif (self._auth and",
                "+              MSG_USERAUTH_FIRST <= pkttype <= MSG_USERAUTH_LAST):",
                "+            handler = self._auth",
                "+        elif pkttype > MSG_USERAUTH_LAST and not self._auth_complete:",
                "+            handler = None",
                "+            note = 'rejected prior to auth'",
                "+            exc = DisconnectError(DISC_PROTOCOL_ERROR,",
                "+                                  'Invalid request received before '",
                "+                                  'authentication was complete')",
                "+        elif MSG_CHANNEL_FIRST <= pkttype <= MSG_CHANNEL_LAST:",
                "+            recv_chan = packet.get_uint32()",
                "+            handler = self._channels.get(recv_chan)",
                "+",
                "+            if not handler:",
                "+                note = 'invalid channel number'",
                "+                exc = DisconnectError(DISC_PROTOCOL_ERROR,",
                "+                                      'Invalid channel number received')",
                "+",
                "+        if handler:",
                "+            try:",
                "+                processed = handler.process_packet(pkttype, seq, packet)",
                "+            except PacketDecodeError as exc:",
                "+                raise DisconnectError(DISC_PROTOCOL_ERROR, str(exc)) from None",
                "+",
                "+            if not processed:",
                "+                self.logger.debug1('Unknown packet type %d received', pkttype)",
                "+                self.send_packet(MSG_UNIMPLEMENTED, UInt32(seq))",
                "+        else:",
                "+            self.log_unprocessed_packet(pkttype, seq, packet, note)",
                "-        if not processed:",
                "-            self.logger.debug1('Unknown packet type %d received', pkttype)",
                "-            self.send_packet(MSG_UNIMPLEMENTED, UInt32(seq))",
                "+            if exc: # pragma: no branch",
                "+                raise exc # pylint: disable=raising-bad-type",
                "@@ -1661,20 +1664,2 @@ class SSHConnection(SSHPacketHandler):",
                "-    def _process_channel_msg(self, pkttype, pktid, packet):",
                "-        \"\"\"Process a channel-specific message\"\"\"",
                "-",
                "-        recv_chan = packet.get_uint32()",
                "-",
                "-        chan = self._channels.get(recv_chan)",
                "-        if chan:",
                "-            chan.process_packet(pkttype, pktid, packet)",
                "-        else:",
                "-            self.log_unprocessed_packet(pkttype, pktid, packet,",
                "-                                        'invalid channel number')",
                "-",
                "-            self.logger.debug1('Received channel message for unknown '",
                "-                               'channel %d', recv_chan)",
                "-",
                "-            raise DisconnectError(DISC_PROTOCOL_ERROR,",
                "-                                  'Invalid channel number')",
                "-",
                "     _packet_handlers = {",
                "@@ -1702,11 +1687,3 @@ class SSHConnection(SSHPacketHandler):",
                "         MSG_CHANNEL_OPEN_CONFIRMATION:  _process_channel_open_confirmation,",
                "-        MSG_CHANNEL_OPEN_FAILURE:       _process_channel_open_failure,",
                "-        MSG_CHANNEL_WINDOW_ADJUST:      _process_channel_msg,",
                "-        MSG_CHANNEL_DATA:               _process_channel_msg,",
                "-        MSG_CHANNEL_EXTENDED_DATA:      _process_channel_msg,",
                "-        MSG_CHANNEL_EOF:                _process_channel_msg,",
                "-        MSG_CHANNEL_CLOSE:              _process_channel_msg,",
                "-        MSG_CHANNEL_REQUEST:            _process_channel_msg,",
                "-        MSG_CHANNEL_SUCCESS:            _process_channel_msg,",
                "-        MSG_CHANNEL_FAILURE:            _process_channel_msg",
                "+        MSG_CHANNEL_OPEN_FAILURE:       _process_channel_open_failure",
                "     }",
                "diff --git a/asyncssh/constants.py b/asyncssh/constants.py",
                "index f48dcbf..994a0ea 100644",
                "--- a/asyncssh/constants.py",
                "+++ b/asyncssh/constants.py",
                "@@ -49,2 +49,3 @@ MSG_CHANNEL_OPEN_CONFIRMATION       = 91",
                " MSG_CHANNEL_OPEN_FAILURE            = 92",
                "+",
                " MSG_CHANNEL_WINDOW_ADJUST           = 93",
                "@@ -58,2 +59,6 @@ MSG_CHANNEL_FAILURE                 = 100",
                "+# Messages 90-92 are excluded here as they relate to opening a new channel",
                "+MSG_CHANNEL_FIRST                   = 93",
                "+MSG_CHANNEL_LAST                    = 127",
                "+",
                " # SSH disconnect reason codes",
                "diff --git a/asyncssh/packet.py b/asyncssh/packet.py",
                "index 96dbb6e..c3be2d6 100644",
                "--- a/asyncssh/packet.py",
                "+++ b/asyncssh/packet.py",
                "@@ -203,8 +203,7 @@ class SSHPacketHandler(SSHPacketLogger):",
                "-    def process_packet(self, pkttype, pktid, packet, log=True):",
                "+    def process_packet(self, pkttype, pktid, packet):",
                "         \"\"\"Log and process a received packet\"\"\"",
                "-        if log:",
                "-            self.log_received_packet(pkttype, pktid, packet.get_full_payload(),",
                "-                                     self._handler_names)",
                "+        self.log_received_packet(pkttype, pktid, packet.get_full_payload(),",
                "+                                 self._handler_names)"
            ],
            "changed_files": [
                "asyncssh/connection.py",
                "asyncssh/constants.py",
                "asyncssh/packet.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v1.12.1",
                "v1.12.2",
                "v1.13.0",
                "v1.13.1",
                "v1.13.2",
                "v1.13.3",
                "v1.14.0",
                "v1.15.0",
                "v1.15.1",
                "v1.16.0",
                "v1.16.1",
                "v1.17.0",
                "v1.17.1",
                "v1.18.0",
                "v2.0.0",
                "v2.0.1",
                "v2.1.0",
                "v2.10.0",
                "v2.10.1",
                "v2.11.0",
                "v2.12.0",
                "v2.13.0",
                "v2.13.1",
                "v2.13.2",
                "v2.14.0",
                "v2.14.1",
                "v2.14.2",
                "v2.15.0",
                "v2.2.0",
                "v2.2.1",
                "v2.3.0",
                "v2.4.0",
                "v2.4.1",
                "v2.4.2",
                "v2.5.0",
                "v2.6.0",
                "v2.7.0",
                "v2.7.1",
                "v2.7.2",
                "v2.8.0",
                "v2.8.1",
                "v2.9.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: process",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "30d50b1ca7c3961c1f77f2e2a3ca7707fc1962e1",
            "repository": "https://github.com/ronf/asyncssh",
            "timestamp": 1520142081,
            "hunks": 9,
            "message": "Fix an issue where some unprocessed packets were not being logged This commit fixes an issue where logging was not being done for packets which bypassed processing, such as the first kex message in cases where it was skipped or channel messages sent to an invalid channel number. Other log entries were produced in some of these cases, but the packet triggering those was not actually being logged. This corrects that problem, and adds a notation to such packets indicating why they weren't processed.",
            "diff": [
                "diff --git a/asyncssh/connection.py b/asyncssh/connection.py",
                "index 91a511e..c3d58e9 100644",
                "--- a/asyncssh/connection.py",
                "+++ b/asyncssh/connection.py",
                "@@ -741,2 +741,5 @@ class SSHConnection(SSHPacketHandler):",
                "                 if self._ignore_first_kex: # pragma: no cover",
                "+                    self.log_unprocessed_packet(pkttype, seq, packet,",
                "+                                                'ignored first kex')",
                "+",
                "                     self._ignore_first_kex = False",
                "@@ -749,2 +752,5 @@ class SSHConnection(SSHPacketHandler):",
                "             elif pkttype > MSG_USERAUTH_LAST and not self._auth_complete:",
                "+                self.log_unprocessed_packet(pkttype, seq, packet,",
                "+                                            'rejected prior to auth')",
                "+",
                "                 raise DisconnectError(DISC_PROTOCOL_ERROR,",
                "@@ -1667,2 +1673,5 @@ class SSHConnection(SSHPacketHandler):",
                "+            self.log_unprocessed_packet(pkttype, pktid, packet,",
                "+                                        'invalid channel number')",
                "+",
                "             raise DisconnectError(DISC_PROTOCOL_ERROR,",
                "diff --git a/asyncssh/packet.py b/asyncssh/packet.py",
                "index faba866..96dbb6e 100644",
                "--- a/asyncssh/packet.py",
                "+++ b/asyncssh/packet.py",
                "@@ -14,2 +14,4 @@",
                "+from .misc import plural",
                "+",
                "@@ -158,3 +160,3 @@ class SSHPacketLogger:",
                "-    def _log_packet(self, msg, pkttype, pktid, payload, handler_names):",
                "+    def _log_packet(self, msg, note, pkttype, pktid, payload, handler_names):",
                "         \"\"\"Log a sent/received packet\"\"\"",
                "@@ -166,17 +168,24 @@ class SSHPacketLogger:",
                "-        count = len(payload)",
                "-        count = '%d byte%s' % (count, 's' if count > 1 else '')",
                "+        count = plural(len(payload), 'byte')",
                "+",
                "+        if note:",
                "+            note = ' (%s)' % note",
                "-        self.logger.packet(pktid, payload, '%s %s, %s', msg, name, count)",
                "+        self.logger.packet(pktid, payload, '%s %s, %s%s',",
                "+                           msg, name, count, note)",
                "-    def log_sent_packet(self, pkttype, pktid, payload, handler_names):",
                "+    def log_sent_packet(self, pkttype, pktid, payload,",
                "+                        handler_names, note=''):",
                "         \"\"\"Log a sent packet\"\"\"",
                "-        self._log_packet('Sent', pkttype, pktid, payload, handler_names)",
                "+        self._log_packet('Sent', note, pkttype, pktid,",
                "+                         payload, handler_names)",
                "-    def log_received_packet(self, pkttype, pktid, payload, handler_names):",
                "+    def log_received_packet(self, pkttype, pktid, payload,",
                "+                            handler_names, note=''):",
                "         \"\"\"Log a received packet\"\"\"",
                "-        self._log_packet('Received', pkttype, pktid, payload, handler_names)",
                "+        self._log_packet('Received', note, pkttype, pktid,",
                "+                         payload, handler_names)",
                "@@ -206 +215,7 @@ class SSHPacketHandler(SSHPacketLogger):",
                "             return False",
                "+",
                "+    def log_unprocessed_packet(self, pkttype, pktid, packet, note):",
                "+        \"\"\"Log a received packet we decided not to process\"\"\"",
                "+",
                "+        self.log_received_packet(pkttype, pktid, packet.get_full_payload(),",
                "+                                 self._handler_names, note)"
            ],
            "changed_files": [
                "asyncssh/connection.py",
                "asyncssh/packet.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v1.12.1",
                "v1.12.2",
                "v1.13.0",
                "v1.13.1",
                "v1.13.2",
                "v1.13.3",
                "v1.14.0",
                "v1.15.0",
                "v1.15.1",
                "v1.16.0",
                "v1.16.1",
                "v1.17.0",
                "v1.17.1",
                "v1.18.0",
                "v2.0.0",
                "v2.0.1",
                "v2.1.0",
                "v2.10.0",
                "v2.10.1",
                "v2.11.0",
                "v2.12.0",
                "v2.13.0",
                "v2.13.1",
                "v2.13.2",
                "v2.14.0",
                "v2.14.1",
                "v2.14.2",
                "v2.15.0",
                "v2.2.0",
                "v2.2.1",
                "v2.3.0",
                "v2.4.0",
                "v2.4.1",
                "v2.4.2",
                "v2.5.0",
                "v2.6.0",
                "v2.7.0",
                "v2.7.1",
                "v2.7.2",
                "v2.8.0",
                "v2.8.1",
                "v2.9.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: skip, process",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8153f3c91ca66457fe22bac4339e4d01183655ed",
            "repository": "https://github.com/ronf/asyncssh",
            "timestamp": 1520320772,
            "hunks": 12,
            "message": "One additional packet logging simplification and a small bug fix",
            "diff": [
                "diff --git a/asyncssh/connection.py b/asyncssh/connection.py",
                "index 45d0de9..9f3c5ac 100644",
                "--- a/asyncssh/connection.py",
                "+++ b/asyncssh/connection.py",
                "@@ -729,4 +729,4 @@ class SSHConnection(SSHPacketHandler):",
                "         handler = self",
                "-        skip_reason = None",
                "-        exc_reason = None",
                "+        skip_reason = ''",
                "+        exc_reason = ''",
                "@@ -755,4 +755,3 @@ class SSHConnection(SSHPacketHandler):",
                "-        handler.log_received_packet(pkttype, seq,",
                "-                                    packet.get_full_payload(), skip_reason)",
                "+        handler.log_received_packet(pkttype, seq, packet, skip_reason)",
                "diff --git a/asyncssh/packet.py b/asyncssh/packet.py",
                "index a3d286f..4b0f160 100644",
                "--- a/asyncssh/packet.py",
                "+++ b/asyncssh/packet.py",
                "@@ -160,5 +160,8 @@ class SSHPacketLogger:",
                "-    def _log_packet(self, msg, pkttype, pktid, payload, note):",
                "+    def _log_packet(self, msg, pkttype, pktid, packet, note):",
                "         \"\"\"Log a sent/received packet\"\"\"",
                "+        if isinstance(packet, SSHPacket):",
                "+            packet = packet.get_full_payload()",
                "+",
                "         try:",
                "@@ -168,3 +171,3 @@ class SSHPacketLogger:",
                "-        count = plural(len(payload), 'byte')",
                "+        count = plural(len(packet), 'byte')",
                "@@ -173,15 +176,15 @@ class SSHPacketLogger:",
                "-        self.logger.packet(pktid, payload, '%s %s, %s%s',",
                "+        self.logger.packet(pktid, packet, '%s %s, %s%s',",
                "                            msg, name, count, note)",
                "-    def log_sent_packet(self, pkttype, pktid, payload, note=''):",
                "+    def log_sent_packet(self, pkttype, pktid, packet, note=''):",
                "         \"\"\"Log a sent packet\"\"\"",
                "-        self._log_packet('Sent', pkttype, pktid, payload, note)",
                "+        self._log_packet('Sent', pkttype, pktid, packet, note)",
                "-    def log_received_packet(self, pkttype, pktid, payload, note=''):",
                "+    def log_received_packet(self, pkttype, pktid, packet, note=''):",
                "         \"\"\"Log a received packet\"\"\"",
                "-        self._log_packet('Received', pkttype, pktid, payload, note)",
                "+        self._log_packet('Received', pkttype, pktid, packet, note)",
                "diff --git a/asyncssh/sftp.py b/asyncssh/sftp.py",
                "index 0e4249d..466b33c 100644",
                "--- a/asyncssh/sftp.py",
                "+++ b/asyncssh/sftp.py",
                "@@ -777,4 +777,3 @@ class SFTPHandler(SSHPacketLogger):",
                "-                self.log_received_packet(pkttype, pktid,",
                "-                                         packet.get_full_payload())",
                "+                self.log_received_packet(pkttype, pktid, packet)",
                "@@ -985,3 +984,3 @@ class SFTPClientHandler(SFTPHandler):",
                "-            self.log_received_packet(resptype, None, resp.get_full_payload())",
                "+            self.log_received_packet(resptype, None, resp)",
                "@@ -3694,3 +3693,3 @@ class SFTPServerHandler(SFTPHandler):",
                "-            self.log_received_packet(pkttype, None, packet.get_full_payload())",
                "+            self.log_received_packet(pkttype, None, packet)"
            ],
            "changed_files": [
                "asyncssh/connection.py",
                "asyncssh/packet.py",
                "asyncssh/sftp.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v1.12.1",
                "v1.12.2",
                "v1.13.0",
                "v1.13.1",
                "v1.13.2",
                "v1.13.3",
                "v1.14.0",
                "v1.15.0",
                "v1.15.1",
                "v1.16.0",
                "v1.16.1",
                "v1.17.0",
                "v1.17.1",
                "v1.18.0",
                "v2.0.0",
                "v2.0.1",
                "v2.1.0",
                "v2.10.0",
                "v2.10.1",
                "v2.11.0",
                "v2.12.0",
                "v2.13.0",
                "v2.13.1",
                "v2.13.2",
                "v2.14.0",
                "v2.14.1",
                "v2.14.2",
                "v2.15.0",
                "v2.2.0",
                "v2.2.1",
                "v2.3.0",
                "v2.4.0",
                "v2.4.1",
                "v2.4.2",
                "v2.5.0",
                "v2.6.0",
                "v2.7.0",
                "v2.7.1",
                "v2.7.2",
                "v2.8.0",
                "v2.8.1",
                "v2.9.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "03effdddd8cfdbcb1fe6b628748d3921c8cfbf12",
            "repository": "https://github.com/ronf/asyncssh",
            "timestamp": 1520147545,
            "hunks": 2,
            "message": "Move logging of packet with bad channel to before other debug message This moves the packet dump of a packet with a bad channel number in it to just before the debug level 1 error indicating that the channel number was bad. This reads a bit better than seeing the error first and then the \"received\" packet dump.",
            "diff": [
                "diff --git a/asyncssh/connection.py b/asyncssh/connection.py",
                "index c3d58e9..692c5c9 100644",
                "--- a/asyncssh/connection.py",
                "+++ b/asyncssh/connection.py",
                "@@ -1670,5 +1670,2 @@ class SSHConnection(SSHPacketHandler):",
                "         else:",
                "-            self.logger.debug1('Received channel message for unknown '",
                "-                               'channel %d', recv_chan)",
                "-",
                "             self.log_unprocessed_packet(pkttype, pktid, packet,",
                "@@ -1676,2 +1673,5 @@ class SSHConnection(SSHPacketHandler):",
                "+            self.logger.debug1('Received channel message for unknown '",
                "+                               'channel %d', recv_chan)",
                "+",
                "             raise DisconnectError(DISC_PROTOCOL_ERROR,"
            ],
            "changed_files": [
                "asyncssh/connection.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v1.12.1",
                "v1.12.2",
                "v1.13.0",
                "v1.13.1",
                "v1.13.2",
                "v1.13.3",
                "v1.14.0",
                "v1.15.0",
                "v1.15.1",
                "v1.16.0",
                "v1.16.1",
                "v1.17.0",
                "v1.17.1",
                "v1.18.0",
                "v2.0.0",
                "v2.0.1",
                "v2.1.0",
                "v2.10.0",
                "v2.10.1",
                "v2.11.0",
                "v2.12.0",
                "v2.13.0",
                "v2.13.1",
                "v2.13.2",
                "v2.14.0",
                "v2.14.1",
                "v2.14.2",
                "v2.15.0",
                "v2.2.0",
                "v2.2.1",
                "v2.3.0",
                "v2.4.0",
                "v2.4.1",
                "v2.4.2",
                "v2.5.0",
                "v2.6.0",
                "v2.7.0",
                "v2.7.1",
                "v2.7.2",
                "v2.8.0",
                "v2.8.1",
                "v2.9.0"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: SSH",
                    "relevance": 8
                }
            ]
        }
    ]
}
