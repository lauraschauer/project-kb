{
    "advisory_record": {
        "cve_id": "CVE-2018-6331",
        "description": "Buck parser-cache command loads/saves state using Java serialized object. If the state information is maliciously crafted, deserializing it could lead to code execution. This issue affects Buck versions prior to v2018.06.25.01.",
        "reserved_timestamp": 1516924800,
        "published_timestamp": 1546297200,
        "updated_timestamp": 1546297021,
        "repository_url": null,
        "references": {
            "commit::8c5500981812564877bd122c0f8fab48d3528ddf": 2
        },
        "affected_products": [
            "command",
            "cache",
            "Java",
            "Buck"
        ],
        "versions": {
            "status": "affected",
            "version": "v2018.06.25.01"
        },
        "files": [
            "parser-cache"
        ],
        "keywords": [
            "java",
            "code",
            "execution",
            "information",
            "save",
            "affect",
            "state",
            "buck",
            "cache",
            "version",
            "parser",
            "issue",
            "deserialize",
            "object",
            "command",
            "load",
            "craft",
            "lead"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "8c5500981812564877bd122c0f8fab48d3528ddf",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522261440,
            "hunks": 10,
            "message": "Prevent deserialization of random objects Summary: Fixed security issue with buck parser-cache command. This diff prevent deserialization of random objects. Reviewed By: jtorkkola fbshipit-source-id: 24e8221",
            "diff": [
                "diff --git a/src/com/facebook/buck/cli/ParserCacheCommand.java b/src/com/facebook/buck/cli/ParserCacheCommand.java",
                "index e448573761..bf7fde1086 100644",
                "--- a/src/com/facebook/buck/cli/ParserCacheCommand.java",
                "+++ b/src/com/facebook/buck/cli/ParserCacheCommand.java",
                "@@ -19,2 +19,3 @@ package com.facebook.buck.cli;",
                " import com.facebook.buck.parser.ParserConfig;",
                "+import com.facebook.buck.parser.ParserStateObjectInputStream;",
                " import com.facebook.buck.parser.thrift.RemoteDaemonicParserState;",
                "@@ -90,3 +91,3 @@ public class ParserCacheCommand extends AbstractCommand {",
                "         Preconditions.checkState(entry.getName().equals(\"parser_data\"));",
                "-        try (ObjectInputStream ois = new ObjectInputStream(zipis)) {",
                "+        try (ObjectInputStream ois = new ParserStateObjectInputStream(zipis)) {",
                "           RemoteDaemonicParserState state;",
                "diff --git a/src/com/facebook/buck/parser/BUCK b/src/com/facebook/buck/parser/BUCK",
                "index b7c45ed0fd..f3419fa498 100644",
                "--- a/src/com/facebook/buck/parser/BUCK",
                "+++ b/src/com/facebook/buck/parser/BUCK",
                "@@ -37,2 +37,3 @@ java_immutables_library(",
                "         \"ParserPythonInterpreterProvider.java\",",
                "+        \"ParserStateObjectInputStream.java\",",
                "         \"ParserTargetNodeFactory.java\",",
                "diff --git a/src/com/facebook/buck/parser/ParserStateObjectInputStream.java b/src/com/facebook/buck/parser/ParserStateObjectInputStream.java",
                "new file mode 100644",
                "index 0000000000..6cd7f2ebc3",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/parser/ParserStateObjectInputStream.java",
                "@@ -0,0 +1,48 @@",
                "+/*",
                "+ * Copyright 2013-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.parser;",
                "+",
                "+import com.facebook.buck.parser.thrift.RemoteDaemonicParserState;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.io.InvalidClassException;",
                "+import java.io.ObjectInputStream;",
                "+import java.io.ObjectStreamClass;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "+",
                "+/** A ObjectInputStream that will deserialize only RemoteDaemonicParserState. */",
                "+public class ParserStateObjectInputStream extends ObjectInputStream {",
                "+",
                "+  private Set<String> whitelist;",
                "+",
                "+  public ParserStateObjectInputStream(InputStream inputStream) throws IOException {",
                "+    super(inputStream);",
                "+",
                "+    whitelist = new HashSet<>();",
                "+    whitelist.add(RemoteDaemonicParserState.class.getName());",
                "+  }",
                "+",
                "+  @Override",
                "+  protected Class<?> resolveClass(ObjectStreamClass desc)",
                "+      throws IOException, ClassNotFoundException {",
                "+    if (!whitelist.contains(desc.getName())) {",
                "+      throw new InvalidClassException(desc.getName(), \"Can't deserialize this class\");",
                "+    }",
                "+    return super.resolveClass(desc);",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/cli/ParserCacheCommandIntegrationTest.java b/test/com/facebook/buck/cli/ParserCacheCommandIntegrationTest.java",
                "index 50a9ed9e72..0de3e511a1 100644",
                "--- a/test/com/facebook/buck/cli/ParserCacheCommandIntegrationTest.java",
                "+++ b/test/com/facebook/buck/cli/ParserCacheCommandIntegrationTest.java",
                "@@ -30,3 +30,6 @@ import com.facebook.buck.util.HumanReadableException;",
                " import com.facebook.buck.util.NamedTemporaryFile;",
                "+import java.io.FileOutputStream;",
                " import java.io.IOException;",
                "+import java.io.InvalidClassException;",
                "+import java.io.ObjectOutputStream;",
                " import java.nio.charset.StandardCharsets;",
                "@@ -34,2 +37,6 @@ import java.nio.file.Files;",
                " import java.nio.file.Path;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+import java.util.zip.ZipEntry;",
                "+import java.util.zip.ZipOutputStream;",
                " import org.hamcrest.Matchers;",
                "@@ -37,2 +44,3 @@ import org.junit.Rule;",
                " import org.junit.Test;",
                "+import org.junit.rules.ExpectedException;",
                "@@ -41,2 +49,3 @@ public class ParserCacheCommandIntegrationTest {",
                "   @Rule public TemporaryPaths tmp = new TemporaryPaths();",
                "+  @Rule public ExpectedException thrown = ExpectedException.none();",
                "@@ -148,2 +157,26 @@ public class ParserCacheCommandIntegrationTest {",
                "   }",
                "+",
                "+  @Test",
                "+  public void testInvalidData() throws IOException {",
                "+    Map<String, String> invalidData = new HashMap();",
                "+    invalidData.put(\"foo\", \"bar\");",
                "+",
                "+    NamedTemporaryFile tempFile = new NamedTemporaryFile(\"invalid_parser_data\", null);",
                "+    try (FileOutputStream fos = new FileOutputStream(tempFile.get().toString());",
                "+        ZipOutputStream zipos = new ZipOutputStream(fos)) {",
                "+      zipos.putNextEntry(new ZipEntry(\"parser_data\"));",
                "+      try (ObjectOutputStream oos = new ObjectOutputStream(zipos)) {",
                "+        oos.writeObject(invalidData);",
                "+      }",
                "+    }",
                "+",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"parser_with_cell\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    // Load the invalid parser cache data.",
                "+    thrown.expect(InvalidClassException.class);",
                "+    thrown.expectMessage(\"Can't deserialize this class\");",
                "+    workspace.runBuckCommand(\"parser-cache\", \"--load\", tempFile.get().toString());",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/com/facebook/buck/cli/ParserCacheCommand.java",
                "src/com/facebook/buck/parser/BUCK",
                "src/com/facebook/buck/parser/ParserStateObjectInputStream.java",
                "test/com/facebook/buck/cli/ParserCacheCommandIntegrationTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 2 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: parser-cache",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: parser-cache",
                    "relevance": 8
                },
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: parser, issue, object, command, cache",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, parser, object, command, state, cache",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8568edf59d9c34b06fe87311eab3f9290d2bfc0f",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522440615,
            "hunks": 18,
            "message": "Add cache injection to async transformation engine Summary: Allow a cache to be injected into the async transformation engine so that we can use any cache we want, and reuse cache across different instances of the transformation engine. Use of a cache in addition to the computeIndex of Futures allows us to remove the references to the Future and store only the raw result for reuse during computation, which saves memory overhead of the Future Reviewed By: ttsugriy fbshipit-source-id: c4702a0",
            "diff": [
                "diff --git a/src/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngine.java b/src/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngine.java",
                "index 4dccb5901c..f6ed3e951d 100644",
                "--- a/src/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngine.java",
                "+++ b/src/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngine.java",
                "@@ -20,2 +20,3 @@ import com.facebook.buck.log.Logger;",
                " import com.facebook.buck.util.RichStream;",
                "+import com.google.common.annotations.VisibleForTesting;",
                " import com.google.common.collect.ImmutableMap;",
                "@@ -25,2 +26,3 @@ import java.util.Map;",
                " import java.util.Map.Entry;",
                "+import java.util.Optional;",
                " import java.util.concurrent.CompletableFuture;",
                "@@ -37,3 +39,4 @@ import java.util.function.Function;",
                "  * request dependent results of other transformations through {@link",
                "- * TransformationEnvironment#evaluate(Object, Function)}.",
                "+ * TransformationEnvironment#evaluate(Object, Function)} or {@link",
                "+ * TransformationEnvironment#evaluateAll(Iterable, Function)}.",
                "  *",
                "@@ -44,2 +47,4 @@ import java.util.function.Function;",
                "  *",
                "+ * <p>A custom cache can be supplied to the engine to cache the computation as desired.",
                "+ *",
                "  * <p>Transformations will be applied asynchronously, so independent transformations can be executed",
                "@@ -66,2 +71,12 @@ public final class DefaultAsyncTransformationEngine<ComputeKey, ComputeResult>",
                "+  /**",
                "+   * Internally, on the first request, AsyncTransformation schedules the requested key to be",
                "+   * completed via a Future, and stores the Future in a map with key of ComputeKey. Subsequent",
                "+   * requests for the same ComputeKey will reuse the stored Future, where async operations are then",
                "+   * added to the scheduled Future.",
                "+   *",
                "+   * <p>Due to memory overhead of the Future, upon Future completion, the future is deleted from the",
                "+   * stored map to allow it to be garbage collected. The raw result will be put into the result",
                "+   * cache. Subsequent requests will reuse the raw result from the cache directly.",
                "+   */",
                "   private static final Logger LOG = Logger.get(DefaultAsyncTransformationEngine.class);",
                "@@ -70,8 +85,54 @@ public final class DefaultAsyncTransformationEngine<ComputeKey, ComputeResult>",
                "-  private final ConcurrentHashMap<ComputeKey, CompletableFuture<ComputeResult>> computationIndex;",
                "+  @VisibleForTesting",
                "+  final ConcurrentHashMap<ComputeKey, CompletableFuture<ComputeResult>> computationIndex;",
                "+",
                "+  // for caching the completed results.",
                "+  private final TransformationEngineCache<ComputeKey, ComputeResult> resultCache;",
                "+  /**",
                "+   * Constructs a {@link DefaultAsyncTransformationEngine} with an internal cache that uses the",
                "+   * {@link ComputeKey} for reusability.",
                "+   *",
                "+   * @param transformer the {@link AsyncTransformer} this engine executes",
                "+   * @param estimatedNumOps the estimated number of operations this engine will execute given a",
                "+   *     computation, to reserve the size of its computation index",
                "+   */",
                "   public DefaultAsyncTransformationEngine(",
                "       AsyncTransformer<ComputeKey, ComputeResult> transformer, int estimatedNumOps) {",
                "+    this(",
                "+        transformer,",
                "+        estimatedNumOps,",
                "+        // Default Cache is just a ConcurrentHashMap",
                "+        new TransformationEngineCache<ComputeKey, ComputeResult>() {",
                "+          private final ConcurrentHashMap<ComputeKey, ComputeResult> map =",
                "+              new ConcurrentHashMap<>(estimatedNumOps);",
                "+",
                "+          @Override",
                "+          public Optional<ComputeResult> get(ComputeKey k) {",
                "+            return Optional.ofNullable(map.get(k));",
                "+          }",
                "+",
                "+          @Override",
                "+          public void put(ComputeKey k, ComputeResult v) {",
                "+            map.put(k, v);",
                "+          }",
                "+        });",
                "+  }",
                "+",
                "+  /**",
                "+   * Constructs a {@link DefaultAsyncTransformationEngine} with an internal cache that uses the",
                "+   * {@link ComputeKey} for reusability.",
                "+   *",
                "+   * @param transformer the {@link AsyncTransformer} this engine executes",
                "+   * @param estimatedNumOps the estimated number of operations this engine will execute given a",
                "+   *     computation, to reserve the size of its computation index",
                "+   * @param cache the cache to store the computed results",
                "+   */",
                "+  public DefaultAsyncTransformationEngine(",
                "+      AsyncTransformer<ComputeKey, ComputeResult> transformer,",
                "+      int estimatedNumOps,",
                "+      TransformationEngineCache<ComputeKey, ComputeResult> cache) {",
                "     this.transformer = transformer;",
                "     this.computationIndex = new ConcurrentHashMap<>(estimatedNumOps);",
                "+    this.resultCache = cache;",
                "   }",
                "@@ -106,3 +167,8 @@ public final class DefaultAsyncTransformationEngine<ComputeKey, ComputeResult>",
                "       ComputeKey key, TransformationEnvironment<ComputeKey, ComputeResult> env) {",
                "-    LOG.verbose(\"Computing transformation for requested key: %s\", key);",
                "+    LOG.verbose(\"Attempting to load from cache for key: %s\", key);",
                "+    Optional<ComputeResult> result = resultCache.get(key);",
                "+    if (result.isPresent()) {",
                "+      return CompletableFuture.completedFuture(result.get());",
                "+    }",
                "+",
                "     return computationIndex.computeIfAbsent(",
                "@@ -110,4 +176,20 @@ public final class DefaultAsyncTransformationEngine<ComputeKey, ComputeResult>",
                "         mapKey -> {",
                "+          // recheck the resultCache in event that the cache got populated while we were waiting to",
                "+          // access the computationIndex.",
                "+          Optional<ComputeResult> cachedResult = resultCache.get(mapKey);",
                "+          if (cachedResult.isPresent()) {",
                "+            return CompletableFuture.completedFuture(cachedResult.get());",
                "+          }",
                "+",
                "+          LOG.verbose(\"Result cache miss. Computing transformation for requested key: %s\", key);",
                "           return CompletableFuture.supplyAsync(() -> mapKey)",
                "-              .thenComposeAsync(computeKey -> transformer.transform(computeKey, env));",
                "+              .thenComposeAsync(computeKey -> transformer.transform(computeKey, env))",
                "+              .thenApplyAsync(",
                "+                  computedResult -> {",
                "+                    // add to the result cache first then remove from the computationIndex to ensure",
                "+                    // the result is reused.",
                "+                    resultCache.put(mapKey, computedResult);",
                "+                    computationIndex.remove(mapKey);",
                "+                    return computedResult;",
                "+                  });",
                "         });",
                "diff --git a/src/com/facebook/buck/graph/transformation/TransformationEngineCache.java b/src/com/facebook/buck/graph/transformation/TransformationEngineCache.java",
                "new file mode 100644",
                "index 0000000000..56f15b1349",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/graph/transformation/TransformationEngineCache.java",
                "@@ -0,0 +1,47 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.graph.transformation;",
                "+",
                "+import java.util.Optional;",
                "+",
                "+/**",
                "+ * Interface for a Cache object that {@link DefaultAsyncTransformationEngine} uses to store results",
                "+ * that have finished computing so that the results can be reused.",
                "+ *",
                "+ * <p>The cache should be thread safe",
                "+ *",
                "+ * @param <Key> Key to the cache",
                "+ * @param <Value> Value stored by Cache",
                "+ */",
                "+public interface TransformationEngineCache<Key, Value> {",
                "+",
                "+  /**",
                "+   * Optionally returns the cached result given the key",
                "+   *",
                "+   * @param key The desired key",
                "+   * @return the result if cached, otherwise an empty Optional",
                "+   */",
                "+  Optional<Value> get(Key key);",
                "+",
                "+  /**",
                "+   * Offers the given key and value for caching",
                "+   *",
                "+   * @param key the key to cache",
                "+   * @param value the value to cache",
                "+   */",
                "+  void put(Key key, Value value);",
                "+}",
                "diff --git a/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java b/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java",
                "index 93dbcf4ae9..2b5c56918c 100644",
                "--- a/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java",
                "+++ b/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java",
                "@@ -20,4 +20,10 @@ import static org.junit.Assert.assertEquals;",
                "+import com.google.common.collect.ImmutableMap;",
                " import com.google.common.graph.GraphBuilder;",
                " import com.google.common.graph.MutableGraph;",
                "+import java.util.Optional;",
                "+import java.util.concurrent.CompletionStage;",
                "+import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.concurrent.atomic.LongAdder;",
                "+import org.junit.Assert;",
                " import org.junit.Before;",
                "@@ -29,2 +35,3 @@ public class DefaultAsyncTransformationEngineTest {",
                "   private MutableGraph<Long> graph;",
                "+  private TrackingCache cache;",
                "@@ -58,2 +65,35 @@ public class DefaultAsyncTransformationEngineTest {",
                "     graph.putEdge(2L, 3L);",
                "+",
                "+    cache = new TrackingCache();",
                "+  }",
                "+",
                "+  /**",
                "+   * Demonstration of usage of {@link TransformationEngineCache} with stats tracking used to verify",
                "+   * behaviour of the {@link DefaultAsyncTransformationEngine}.",
                "+   */",
                "+  private final class TrackingCache implements TransformationEngineCache<Long, Long> {",
                "+",
                "+    private final ConcurrentHashMap<Long, Long> cache = new ConcurrentHashMap<>();",
                "+    private final ConcurrentHashMap<Long, LongAdder> hitStats = new ConcurrentHashMap<>();",
                "+",
                "+    @Override",
                "+    public Optional<Long> get(Long k) {",
                "+      Optional<Long> result = Optional.ofNullable(cache.get(k));",
                "+      result.ifPresent(r -> hitStats.get(k).increment());",
                "+      return result;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void put(Long k, Long v) {",
                "+      cache.put(k, v);",
                "+      hitStats.put(k, new LongAdder());",
                "+    }",
                "+",
                "+    public ImmutableMap<Long, LongAdder> getStats() {",
                "+      return ImmutableMap.copyOf(hitStats);",
                "+    }",
                "+",
                "+    public int getSize() {",
                "+      return cache.size();",
                "+    }",
                "   }",
                "@@ -63,6 +103,7 @@ public class DefaultAsyncTransformationEngineTest {",
                "     ChildrenAdder transformer = new ChildrenAdder(graph);",
                "-    assertEquals(",
                "-        (Long) 3L,",
                "-        new DefaultAsyncTransformationEngine<>(transformer, graph.nodes().size())",
                "-            .computeUnchecked((Long) 3L));",
                "+    DefaultAsyncTransformationEngine<Long, Long> engine =",
                "+        new DefaultAsyncTransformationEngine<>(transformer, graph.nodes().size());",
                "+    assertEquals((Long) 3L, engine.computeUnchecked(3L));",
                "+",
                "+    assertEquals(0, engine.computationIndex.size());",
                "   }",
                "@@ -72,6 +113,85 @@ public class DefaultAsyncTransformationEngineTest {",
                "     ChildrenAdder transformer = new ChildrenAdder(graph);",
                "-    assertEquals(",
                "-        (Long) 19L,",
                "-        new DefaultAsyncTransformationEngine<>(transformer, graph.nodes().size())",
                "-            .computeUnchecked((Long) 1L));",
                "+    DefaultAsyncTransformationEngine<Long, Long> engine =",
                "+        new DefaultAsyncTransformationEngine<>(transformer, graph.nodes().size());",
                "+    assertEquals((Long) 19L, engine.computeUnchecked(1L));",
                "+",
                "+    assertEquals(0, engine.computationIndex.size());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void canReuseCachedResult() {",
                "+    ChildrenAdder transformer = new ChildrenAdder(graph);",
                "+",
                "+    DefaultAsyncTransformationEngine<Long, Long> engine =",
                "+        new DefaultAsyncTransformationEngine<>(transformer, graph.nodes().size(), cache);",
                "+    Long result = engine.computeUnchecked(3L);",
                "+",
                "+    assertEquals((Long) 3L, result);",
                "+",
                "+    transformer =",
                "+        new ChildrenAdder(graph) {",
                "+          @Override",
                "+          public CompletionStage<Long> transform(",
                "+              Long node, TransformationEnvironment<Long, Long> env) {",
                "+            Assert.fail(\"Did not expect call as cache should be used\");",
                "+            return super.transform(node, env);",
                "+          }",
                "+        };",
                "+",
                "+    engine = new DefaultAsyncTransformationEngine<>(transformer, graph.nodes().size(), cache);",
                "+    Long newResult = engine.computeUnchecked(3L);",
                "+",
                "+    assertEquals(result, newResult);",
                "+",
                "+    // all Futures should be removed",
                "+    assertEquals(0, engine.computationIndex.size());",
                "+    assertEquals(1, cache.getSize());",
                "+    assertEquals(1, cache.hitStats.get((Long) 3L).intValue());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void canReusePartiallyCachedResult() {",
                "+    ChildrenAdder transformer = new ChildrenAdder(graph);",
                "+    DefaultAsyncTransformationEngine<Long, Long> engine =",
                "+        new DefaultAsyncTransformationEngine<>(transformer, graph.nodes().size(), cache);",
                "+",
                "+    assertEquals((Long) 9L, engine.computeUnchecked(5L));",
                "+    assertEquals((Long) 3L, engine.computeUnchecked(3L));",
                "+",
                "+    /**",
                "+     *",
                "+     *",
                "+     * <pre>",
                "+     *            1",
                "+     *         /  |  \\",
                "+     *        2  4 <- 5",
                "+     *       /",
                "+     *      3",
                "+     * </pre>",
                "+     *",
                "+     * <p>So we now have 5, 4, 3 in the cache to be reused.",
                "+     */",
                "+    transformer =",
                "+        new ChildrenAdder(graph) {",
                "+          @Override",
                "+          public CompletionStage<Long> transform(",
                "+              Long node, TransformationEnvironment<Long, Long> env) {",
                "+            if (node == 5L || node == 4L || node == 3L) {",
                "+              Assert.fail(\"Did not expect call as cache should be used\");",
                "+            }",
                "+            return super.transform(node, env);",
                "+          }",
                "+        };",
                "+",
                "+    // reuse the cache",
                "+    assertEquals((Long) 19L, engine.computeUnchecked(1L));",
                "+",
                "+    // all Futures should be removed",
                "+    assertEquals(0, engine.computationIndex.size());",
                "+    assertEquals(5, cache.getSize());",
                "+    assertEquals(0, cache.hitStats.get((Long) 1L).intValue());",
                "+    assertEquals(0, cache.hitStats.get((Long) 2L).intValue());",
                "+    assertEquals(1, cache.hitStats.get((Long) 5L).intValue());",
                "+    assertEquals(1, cache.hitStats.get((Long) 3L).intValue());",
                "+    assertEquals(1, cache.hitStats.get((Long) 4L).intValue());",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngine.java",
                "src/com/facebook/buck/graph/transformation/TransformationEngineCache.java",
                "test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: injection",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: save, cache",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, cache",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e50f13900a94085df3f19696a629965b6f6de95c",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521500422,
            "hunks": 100,
            "message": "Filtering platform specific source files Summary: This PR fixes #1701 Known issue: `srcs=['.']` will crash on `go_binary` rules but not on `go_library`. The crash happens before `GoCompile.getBuildSteps` gets called. Temporary workaround is to use `srcs=glob([\"*.go\"])`. The filtering still works. Closes https://github.com/facebook/buck/pull/1782 Reviewed By: styurin Pulled By: styurin fbshipit-source-id: ec7b572",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index c1156991de..066ab7c63f 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -141,4 +141,4 @@ before_install:",
                "     fi",
                "-  # Install go 1.8, required for cgo -srcdir flag to work",
                "-  - eval \"$(gimme 1.8)\"",
                "+  # Install go 1.8+, required for cgo -srcdir flag to work",
                "+  - eval \"$(gimme 1.9)\"",
                "   - echo -e \"[go]\\n  root = ${GOROOT}\" >> .buckconfig.local",
                "diff --git a/src/com/facebook/buck/go/FilteredSourceFiles.java b/src/com/facebook/buck/go/FilteredSourceFiles.java",
                "new file mode 100644",
                "index 0000000000..502aaf1160",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/go/FilteredSourceFiles.java",
                "@@ -0,0 +1,90 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.go;",
                "+",
                "+import com.facebook.buck.go.GoListStep.FileType;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import java.nio.file.Path;",
                "+import java.util.Collection;",
                "+import java.util.HashMap;",
                "+import java.util.HashSet;",
                "+import java.util.Iterator;",
                "+import java.util.List;",
                "+",
                "+public class FilteredSourceFiles implements Iterable<Path> {",
                "+  private final ImmutableList<Path> rawSrcFiles;",
                "+  private final ImmutableList<Path> extraSrcFiles;",
                "+  private final ImmutableMap<Path, GoListStep> filterSteps;",
                "+",
                "+  public FilteredSourceFiles(",
                "+      List<Path> rawSrcFiles,",
                "+      BuildTarget buildTarget,",
                "+      GoToolchain goToolchain,",
                "+      GoPlatform platform,",
                "+      List<FileType> fileTypes) {",
                "+    this(rawSrcFiles, ImmutableList.of(), buildTarget, goToolchain, platform, fileTypes);",
                "+  }",
                "+",
                "+  public FilteredSourceFiles(",
                "+      List<Path> rawSrcFiles,",
                "+      List<Path> extraSrcFiles,",
                "+      BuildTarget buildTarget,",
                "+      GoToolchain goToolchain,",
                "+      GoPlatform platform,",
                "+      List<FileType> fileTypes) {",
                "+    this.rawSrcFiles = ImmutableList.copyOf(rawSrcFiles);",
                "+    this.extraSrcFiles = ImmutableList.copyOf(extraSrcFiles);",
                "+    filterSteps = createFilterSteps(buildTarget, goToolchain, platform, fileTypes);",
                "+  }",
                "+",
                "+  private ImmutableMap<Path, GoListStep> createFilterSteps(",
                "+      BuildTarget buildTarget,",
                "+      GoToolchain goToolchain,",
                "+      GoPlatform platform,",
                "+      List<FileType> fileTypes) {",
                "+    HashMap<Path, GoListStep> filterSteps = new HashMap<>();",
                "+    for (Path srcFile : rawSrcFiles) {",
                "+      Path absPath = srcFile.getParent();",
                "+      if (!filterSteps.containsKey(absPath)) {",
                "+        filterSteps.put(",
                "+            absPath, new GoListStep(buildTarget, absPath, goToolchain, platform, fileTypes));",
                "+      }",
                "+    }",
                "+    return ImmutableMap.copyOf(filterSteps);",
                "+  }",
                "+",
                "+  public Collection<GoListStep> getFilterSteps() {",
                "+    return filterSteps.values();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Iterator<Path> iterator() {",
                "+    HashSet<Path> sourceFiles = new HashSet<>();",
                "+    for (Path srcFile : rawSrcFiles) {",
                "+      GoListStep step = filterSteps.get(srcFile.getParent());",
                "+      Preconditions.checkNotNull(step, \"No GoListStep is found for \" + srcFile.toString());",
                "+      if (step.getSourceFiles().contains(srcFile)) {",
                "+        sourceFiles.add(srcFile);",
                "+      }",
                "+    }",
                "+    sourceFiles.addAll(extraSrcFiles);",
                "+    return sourceFiles.iterator();",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/go/GoAssembleStep.java b/src/com/facebook/buck/go/GoAssembleStep.java",
                "index e258517f0a..55fdd64019 100644",
                "--- a/src/com/facebook/buck/go/GoAssembleStep.java",
                "+++ b/src/com/facebook/buck/go/GoAssembleStep.java",
                "@@ -24,2 +24,3 @@ import com.google.common.collect.ImmutableMap;",
                " import java.nio.file.Path;",
                "+import java.util.ArrayList;",
                " import java.util.Optional;",
                "@@ -31,3 +32,3 @@ public class GoAssembleStep extends ShellStep {",
                "   private final ImmutableList<String> flags;",
                "-  private final Path src;",
                "+  private final Iterable<Path> srcs;",
                "   private final ImmutableList<Path> includeDirectories;",
                "@@ -42,3 +43,3 @@ public class GoAssembleStep extends ShellStep {",
                "       ImmutableList<String> flags,",
                "-      Path src,",
                "+      Iterable<Path> srcs,",
                "       ImmutableList<Path> includeDirectories,",
                "@@ -50,3 +51,3 @@ public class GoAssembleStep extends ShellStep {",
                "     this.flags = flags;",
                "-    this.src = src;",
                "+    this.srcs = srcs;",
                "     this.includeDirectories = includeDirectories;",
                "@@ -58,18 +59,24 @@ public class GoAssembleStep extends ShellStep {",
                "   protected ImmutableList<String> getShellCommandInternal(ExecutionContext context) {",
                "-    ImmutableList.Builder<String> commandBuilder =",
                "-        ImmutableList.<String>builder()",
                "-            .addAll(asmCommandPrefix)",
                "-            .add(\"-trimpath\", workingDirectory.toString())",
                "-            .addAll(flags)",
                "-            .add(\"-D\", \"GOOS_\" + platform.getGoOs())",
                "-            .add(\"-D\", \"GOARCH_\" + platform.getGoArch())",
                "-            .add(\"-o\", output.toString());",
                "-",
                "-    for (Path dir : includeDirectories) {",
                "-      commandBuilder.add(\"-I\", dir.toString());",
                "+    ArrayList<String> pathStrings = new ArrayList<>();",
                "+    for (Path path : srcs) {",
                "+      pathStrings.add(path.toString());",
                "     }",
                "+    if (pathStrings.size() > 0) {",
                "+      ImmutableList.Builder<String> commandBuilder =",
                "+          ImmutableList.<String>builder()",
                "+              .addAll(asmCommandPrefix)",
                "+              .add(\"-trimpath\", workingDirectory.toString())",
                "+              .addAll(flags)",
                "+              .add(\"-D\", \"GOOS_\" + platform.getGoOs())",
                "+              .add(\"-D\", \"GOARCH_\" + platform.getGoArch())",
                "+              .add(\"-o\", output.toString());",
                "-    commandBuilder.add(src.toString());",
                "-",
                "-    return commandBuilder.build();",
                "+      for (Path dir : includeDirectories) {",
                "+        commandBuilder.add(\"-I\", dir.toString());",
                "+      }",
                "+      commandBuilder.addAll(pathStrings);",
                "+      return commandBuilder.build();",
                "+    } else {",
                "+      return ImmutableList.of();",
                "+    }",
                "   }",
                "diff --git a/src/com/facebook/buck/go/GoCompile.java b/src/com/facebook/buck/go/GoCompile.java",
                "index c4238c6090..61a1789378 100644",
                "--- a/src/com/facebook/buck/go/GoCompile.java",
                "+++ b/src/com/facebook/buck/go/GoCompile.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.go;",
                "+import com.facebook.buck.go.GoListStep.FileType;",
                " import com.facebook.buck.io.BuildCellRelativePath;",
                "@@ -30,2 +31,3 @@ import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                " import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                " import com.facebook.buck.rules.SymlinkTree;",
                "@@ -44,2 +46,3 @@ import java.nio.file.Path;",
                " import java.util.ArrayList;",
                "+import java.util.Arrays;",
                " import java.util.List;",
                "@@ -58,2 +61,3 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "   @AddToRuleKey private final ImmutableSet<SourcePath> srcs;",
                "+  @AddToRuleKey private final ImmutableSet<SourcePath> generatedSrcs;",
                "   @AddToRuleKey private final ImmutableList<String> compilerFlags;",
                "@@ -69,2 +73,4 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "   private final Path output;",
                "+  private final GoToolchain goToolchain;",
                "+  private final List<FileType> goFileTypes;",
                "@@ -78,10 +84,9 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "       ImmutableSet<SourcePath> srcs,",
                "+      ImmutableSet<SourcePath> generatedSrcs,",
                "+      GoToolchain goToolchain,",
                "       ImmutableList<String> compilerFlags,",
                "-      Tool compiler,",
                "       ImmutableList<String> assemblerFlags,",
                "-      ImmutableList<Path> assemblerIncludeDirs,",
                "-      Tool assembler,",
                "-      Tool packer,",
                "       GoPlatform platform,",
                "-      ImmutableList<SourcePath> extraAsmOutputs) {",
                "+      ImmutableList<SourcePath> extraAsmOutputs,",
                "+      List<FileType> goFileTypes) {",
                "     super(buildTarget, projectFilesystem, params);",
                "@@ -89,2 +94,3 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "     this.srcs = srcs;",
                "+    this.generatedSrcs = generatedSrcs;",
                "     this.symlinkTree = symlinkTree;",
                "@@ -92,7 +98,8 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "     this.compilerFlags = compilerFlags;",
                "-    this.compiler = compiler;",
                "+    this.goToolchain = goToolchain;",
                "+    this.compiler = goToolchain.getCompiler();",
                "     this.assemblerFlags = assemblerFlags;",
                "-    this.assemblerIncludeDirs = assemblerIncludeDirs;",
                "-    this.assembler = assembler;",
                "-    this.packer = packer;",
                "+    this.assemblerIncludeDirs = goToolchain.getAssemblerIncludeDirs();",
                "+    this.assembler = goToolchain.getAssembler();",
                "+    this.packer = goToolchain.getPacker();",
                "     this.platform = platform;",
                "@@ -104,2 +111,3 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "     this.extraAsmOutputs = extraAsmOutputs;",
                "+    this.goFileTypes = goFileTypes;",
                "   }",
                "@@ -115,3 +123,3 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "     ImmutableList.Builder<Path> asmSrcListBuilder = ImmutableList.builder();",
                "-    List<Path> srcFiles = getSourceFiles(context);",
                "+    List<Path> srcFiles = getSourceFiles(srcs, context);",
                "     for (Path sourceFile : srcFiles) {",
                "@@ -127,7 +135,8 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "-    ImmutableList<Path> compileSrcs = compileSrcListBuilder.build();",
                "+    ImmutableList<Path> rawCompileSrcs = compileSrcListBuilder.build();",
                "     ImmutableList<Path> headerSrcs = headerSrcListBuilder.build();",
                "-    ImmutableList<Path> asmSrcs = asmSrcListBuilder.build();",
                "+    ImmutableList<Path> rawAsmSrcs = asmSrcListBuilder.build();",
                "     ImmutableList.Builder<Step> steps = ImmutableList.builder();",
                "+",
                "     steps.add(",
                "@@ -139,3 +148,3 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "-    if (!asmSrcs.isEmpty()) {",
                "+    if (!rawAsmSrcs.isEmpty()) {",
                "       asmHeaderPath =",
                "@@ -158,7 +167,17 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "-    boolean allowExternalReferences = !asmSrcs.isEmpty() || !extraAsmOutputs.isEmpty();",
                "+    boolean allowExternalReferences = !rawAsmSrcs.isEmpty() || !extraAsmOutputs.isEmpty();",
                "-    if (compileSrcs.isEmpty()) {",
                "+    SourcePathResolver pathResolver = context.getSourcePathResolver();",
                "+    if (rawCompileSrcs.isEmpty()) {",
                "       steps.add(new TouchStep(getProjectFilesystem(), output));",
                "     } else {",
                "+      FilteredSourceFiles filteredCompileSrcs =",
                "+          new FilteredSourceFiles(",
                "+              rawCompileSrcs,",
                "+              getSourceFiles(generatedSrcs, context),",
                "+              getBuildTarget(),",
                "+              goToolchain,",
                "+              platform,",
                "+              goFileTypes);",
                "+      steps.addAll(filteredCompileSrcs.getFilterSteps());",
                "       steps.add(",
                "@@ -167,7 +186,7 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "               getProjectFilesystem().getRootPath(),",
                "-              compiler.getEnvironment(context.getSourcePathResolver()),",
                "-              compiler.getCommandPrefix(context.getSourcePathResolver()),",
                "+              compiler.getEnvironment(pathResolver),",
                "+              compiler.getCommandPrefix(pathResolver),",
                "               compilerFlags,",
                "               packageName,",
                "-              compileSrcs,",
                "+              filteredCompileSrcs,",
                "               importPathMap,",
                "@@ -181,3 +200,7 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "     ImmutableList.Builder<Path> asmOutputs = ImmutableList.builder();",
                "-    if (!asmSrcs.isEmpty()) {",
                "+    if (!rawAsmSrcs.isEmpty()) {",
                "+      FilteredSourceFiles filteredAsmSrcs =",
                "+          new FilteredSourceFiles(",
                "+              rawAsmSrcs, getBuildTarget(), goToolchain, platform, Arrays.asList(FileType.SFiles));",
                "+      steps.addAll(filteredAsmSrcs.getFilterSteps());",
                "       Path asmIncludeDir =",
                "@@ -196,3 +219,3 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "         for (Path header :",
                "-            Stream.of(headerSrcs, asmSrcs)",
                "+            Stream.of(headerSrcs, rawAsmSrcs)",
                "                 .flatMap(ImmutableList::stream)",
                "@@ -218,26 +241,22 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "                   context.getBuildCellRootPath(), getProjectFilesystem(), asmOutputDir)));",
                "-",
                "-      for (Path asmSrc : asmSrcs) {",
                "-        Path outputPath =",
                "-            asmOutputDir.resolve(asmSrc.getFileName().toString().replaceAll(\"\\\\.[sS]$\", \".o\"));",
                "-        steps.add(",
                "-            new GoAssembleStep(",
                "-                getBuildTarget(),",
                "-                getProjectFilesystem().getRootPath(),",
                "-                assembler.getEnvironment(context.getSourcePathResolver()),",
                "-                assembler.getCommandPrefix(context.getSourcePathResolver()),",
                "-                assemblerFlags,",
                "-                asmSrc,",
                "-                ImmutableList.<Path>builder()",
                "-                    .addAll(assemblerIncludeDirs)",
                "-                    .add(asmHeaderPath.get().getParent())",
                "-                    .add(asmIncludeDir)",
                "-                    .build(),",
                "-                platform,",
                "-                outputPath));",
                "-        asmOutputs.add(outputPath);",
                "-      }",
                "+      Path asmOutputPath = asmOutputDir.resolve(getBuildTarget().getShortName() + \".o\");",
                "+      steps.add(",
                "+          new GoAssembleStep(",
                "+              getBuildTarget(),",
                "+              getProjectFilesystem().getRootPath(),",
                "+              assembler.getEnvironment(pathResolver),",
                "+              assembler.getCommandPrefix(pathResolver),",
                "+              assemblerFlags,",
                "+              filteredAsmSrcs,",
                "+              ImmutableList.<Path>builder()",
                "+                  .addAll(assemblerIncludeDirs)",
                "+                  .add(asmHeaderPath.get().getParent())",
                "+                  .add(asmIncludeDir)",
                "+                  .build(),",
                "+              platform,",
                "+              asmOutputPath));",
                "+      asmOutputs.add(asmOutputPath);",
                "     }",
                "-    if (!asmSrcs.isEmpty() || !extraAsmOutputs.isEmpty()) {",
                "+    if (!rawAsmSrcs.isEmpty() || !extraAsmOutputs.isEmpty()) {",
                "       steps.add(",
                "@@ -246,4 +265,4 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "               getProjectFilesystem().getRootPath(),",
                "-              packer.getEnvironment(context.getSourcePathResolver()),",
                "-              packer.getCommandPrefix(context.getSourcePathResolver()),",
                "+              packer.getEnvironment(pathResolver),",
                "+              packer.getCommandPrefix(pathResolver),",
                "               GoPackStep.Operation.APPEND,",
                "@@ -251,6 +270,3 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "                   .addAll(",
                "-                      extraAsmOutputs",
                "-                          .stream()",
                "-                          .map(x -> context.getSourcePathResolver().getAbsolutePath(x))",
                "-                          .iterator())",
                "+                      extraAsmOutputs.stream().map(x -> pathResolver.getAbsolutePath(x)).iterator())",
                "                   .build(),",
                "@@ -262,5 +278,6 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "-  private List<Path> getSourceFiles(BuildContext context) {",
                "+  private static List<Path> getSourceFiles(",
                "+      ImmutableSet<SourcePath> srcPaths, BuildContext context) {",
                "     List<Path> srcFiles = new ArrayList<>();",
                "-    for (SourcePath path : srcs) {",
                "+    for (SourcePath path : srcPaths) {",
                "       Path srcPath = context.getSourcePathResolver().getAbsolutePath(path);",
                "diff --git a/src/com/facebook/buck/go/GoCompileStep.java b/src/com/facebook/buck/go/GoCompileStep.java",
                "index 0437c50319..ac788eaf05 100644",
                "--- a/src/com/facebook/buck/go/GoCompileStep.java",
                "+++ b/src/com/facebook/buck/go/GoCompileStep.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.go;",
                "+import com.facebook.buck.log.Logger;",
                " import com.facebook.buck.model.BuildTarget;",
                "@@ -24,2 +25,3 @@ import com.google.common.collect.ImmutableMap;",
                " import java.nio.file.Path;",
                "+import java.util.ArrayList;",
                " import java.util.Map;",
                "@@ -33,3 +35,3 @@ public class GoCompileStep extends ShellStep {",
                "   private final ImmutableList<String> flags;",
                "-  private final ImmutableList<Path> srcs;",
                "+  private final Iterable<Path> srcs;",
                "   private final ImmutableMap<Path, Path> importPathMap;",
                "@@ -40,2 +42,3 @@ public class GoCompileStep extends ShellStep {",
                "   private final Path output;",
                "+  private static final Logger LOG = Logger.get(GoCompileStep.class);",
                "@@ -48,3 +51,3 @@ public class GoCompileStep extends ShellStep {",
                "       Path packageName,",
                "-      ImmutableList<Path> srcs,",
                "+      Iterable<Path> srcs,",
                "       ImmutableMap<Path, Path> importPathMap,",
                "@@ -71,33 +74,42 @@ public class GoCompileStep extends ShellStep {",
                "   protected ImmutableList<String> getShellCommandInternal(ExecutionContext context) {",
                "-    ImmutableList.Builder<String> commandBuilder =",
                "-        ImmutableList.<String>builder()",
                "-            .addAll(compilerCommandPrefix)",
                "-            .add(\"-p\", packageName.toString())",
                "-            .add(\"-pack\")",
                "-            .add(\"-trimpath\", workingDirectory.toString())",
                "-            .add(\"-nolocalimports\")",
                "-            .addAll(flags)",
                "-            .add(\"-o\", output.toString());",
                "-",
                "-    for (Path dir : includeDirectories) {",
                "-      commandBuilder.add(\"-I\", dir.toString());",
                "+    ArrayList<String> pathStrings = new ArrayList<>();",
                "+    for (Path path : srcs) {",
                "+      pathStrings.add(path.toString());",
                "     }",
                "+    if (pathStrings.size() > 0) {",
                "+      ImmutableList.Builder<String> commandBuilder =",
                "+          ImmutableList.<String>builder()",
                "+              .addAll(compilerCommandPrefix)",
                "+              .add(\"-p\", packageName.toString())",
                "+              .add(\"-pack\")",
                "+              .add(\"-trimpath\", workingDirectory.toString())",
                "+              .add(\"-nolocalimports\")",
                "+              .addAll(flags)",
                "+              .add(\"-o\", output.toString());",
                "-    for (Map.Entry<Path, Path> importMap : importPathMap.entrySet()) {",
                "-      commandBuilder.add(\"-importmap\", importMap.getKey() + \"=\" + importMap.getValue());",
                "-    }",
                "+      for (Path dir : includeDirectories) {",
                "+        commandBuilder.add(\"-I\", dir.toString());",
                "+      }",
                "-    if (asmHeaderPath.isPresent()) {",
                "-      commandBuilder.add(\"-asmhdr\", asmHeaderPath.get().toString());",
                "-    }",
                "+      for (Map.Entry<Path, Path> entry : importPathMap.entrySet()) {",
                "+        commandBuilder.add(\"-importmap\", entry.getKey() + \"=\" + entry.getValue());",
                "+      }",
                "-    if (!allowExternalReferences) {",
                "-      // -complete means the package does not use any non Go code, so external functions",
                "-      // (e.g. Cgo, asm) aren't allowed.",
                "-      commandBuilder.add(\"-complete\");",
                "-    }",
                "+      if (asmHeaderPath.isPresent()) {",
                "+        commandBuilder.add(\"-asmhdr\", asmHeaderPath.get().toString());",
                "+      }",
                "+",
                "+      if (!allowExternalReferences) {",
                "+        // -complete means the package does not use any non Go code, so external functions",
                "+        // (e.g. Cgo, asm) aren't allowed.",
                "+        commandBuilder.add(\"-complete\");",
                "+      }",
                "-    commandBuilder.addAll(srcs.stream().map(Object::toString).iterator());",
                "+      commandBuilder.addAll(pathStrings);",
                "-    return commandBuilder.build();",
                "+      return commandBuilder.build();",
                "+    } else {",
                "+      LOG.warn(\"No source files found in \" + workingDirectory);",
                "+      return ImmutableList.of();",
                "+    }",
                "   }",
                "diff --git a/src/com/facebook/buck/go/GoDescriptors.java b/src/com/facebook/buck/go/GoDescriptors.java",
                "index dd278b79f1..96aff16c09 100644",
                "--- a/src/com/facebook/buck/go/GoDescriptors.java",
                "+++ b/src/com/facebook/buck/go/GoDescriptors.java",
                "@@ -21,2 +21,3 @@ import com.facebook.buck.cxx.toolchain.linker.Linker;",
                " import com.facebook.buck.file.WriteFile;",
                "+import com.facebook.buck.go.GoListStep.FileType;",
                " import com.facebook.buck.graph.AbstractBreadthFirstTraversal;",
                "@@ -54,2 +55,3 @@ import java.nio.file.Path;",
                " import java.nio.file.Paths;",
                "+import java.util.Arrays;",
                " import java.util.HashMap;",
                "@@ -108,3 +110,4 @@ abstract class GoDescriptors {",
                "       Iterable<BuildTarget> deps,",
                "-      ImmutableSortedSet<BuildTarget> cgoDeps) {",
                "+      ImmutableSortedSet<BuildTarget> cgoDeps,",
                "+      List<FileType> goFileTypes) {",
                "     SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(resolver);",
                "@@ -127,5 +130,4 @@ abstract class GoDescriptors {",
                "     ImmutableList.Builder<SourcePath> extraAsmOutputsBuilder = ImmutableList.builder();",
                "-    ImmutableSet.Builder<SourcePath> compileSrcBuilder = ImmutableSet.builder();",
                "-    compileSrcBuilder.addAll(srcs);",
                "+    ImmutableSet.Builder<SourcePath> generatedSrcBuilder = ImmutableSet.builder();",
                "     for (BuildTarget dep : cgoDeps) {",
                "@@ -138,3 +140,3 @@ abstract class GoDescriptors {",
                "       CGoLibrary lib = (CGoLibrary) rule;",
                "-      compileSrcBuilder.addAll(lib.getGeneratedGoSource());",
                "+      generatedSrcBuilder.addAll(lib.getGeneratedGoSource());",
                "       extraAsmOutputsBuilder.add(lib.getOutput());",
                "@@ -145,7 +147,3 @@ abstract class GoDescriptors {",
                "-    ImmutableSet<SourcePath> compileSrcs = compileSrcBuilder.build();",
                "-    ImmutableList<BuildRule> srcDependencies = getDependenciesFromSources(ruleFinder, compileSrcs);",
                "-",
                "     LOG.verbose(\"Symlink tree for compiling %s: %s\", buildTarget, symlinkTree.getLinks());",
                "-",
                "     return new GoCompile(",
                "@@ -156,3 +154,3 @@ abstract class GoDescriptors {",
                "             .copyAppendingExtraDeps(ImmutableList.of(symlinkTree))",
                "-            .copyAppendingExtraDeps(srcDependencies),",
                "+            .copyAppendingExtraDeps(getDependenciesFromSources(ruleFinder, srcs)),",
                "         symlinkTree,",
                "@@ -166,11 +164,10 @@ abstract class GoDescriptors {",
                "                 .collect(ImmutableList.toImmutableList())),",
                "-        compileSrcBuilder.build(),",
                "+        srcs,",
                "+        generatedSrcBuilder.build(),",
                "+        goToolchain,",
                "         ImmutableList.copyOf(compilerFlags),",
                "-        goToolchain.getCompiler(),",
                "         ImmutableList.copyOf(assemblerFlags),",
                "-        goToolchain.getAssemblerIncludeDirs(),",
                "-        goToolchain.getAssembler(),",
                "-        goToolchain.getPacker(),",
                "         platform,",
                "-        extraAsmOutputsBuilder.build());",
                "+        extraAsmOutputsBuilder.build(),",
                "+        goFileTypes);",
                "   }",
                "@@ -239,3 +236,4 @@ abstract class GoDescriptors {",
                "                 .collect(ImmutableList.toImmutableList()),",
                "-            cgoDeps);",
                "+            cgoDeps,",
                "+            Arrays.asList(FileType.GoFiles));",
                "     resolver.addToIndex(library);",
                "diff --git a/src/com/facebook/buck/go/GoLibraryDescription.java b/src/com/facebook/buck/go/GoLibraryDescription.java",
                "index 6fa2ad7e8f..f0309aaf0f 100644",
                "--- a/src/com/facebook/buck/go/GoLibraryDescription.java",
                "+++ b/src/com/facebook/buck/go/GoLibraryDescription.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.go;",
                "+import com.facebook.buck.go.GoListStep.FileType;",
                " import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "@@ -46,2 +47,3 @@ import com.google.common.collect.Iterables;",
                " import java.nio.file.Paths;",
                "+import java.util.Arrays;",
                " import java.util.Optional;",
                "@@ -144,3 +146,4 @@ public class GoLibraryDescription",
                "               .build(),",
                "-          args.getCgoDeps());",
                "+          args.getCgoDeps(),",
                "+          Arrays.asList(FileType.GoFiles));",
                "     }",
                "diff --git a/src/com/facebook/buck/go/GoListStep.java b/src/com/facebook/buck/go/GoListStep.java",
                "new file mode 100644",
                "index 0000000000..505d6321a6",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/go/GoListStep.java",
                "@@ -0,0 +1,105 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.go;",
                "+",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.shell.ShellStep;",
                "+import com.facebook.buck.step.ExecutionContext;",
                "+import com.facebook.buck.util.ProcessExecutor.Option;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import java.nio.file.Path;",
                "+import java.util.Arrays;",
                "+import java.util.List;",
                "+import java.util.Optional;",
                "+import java.util.Set;",
                "+import java.util.stream.Collectors;",
                "+",
                "+public class GoListStep extends ShellStep {",
                "+  enum FileType {",
                "+    GoFiles,",
                "+    CgoFiles,",
                "+    SFiles,",
                "+    HFiles,",
                "+    TestGoFiles,",
                "+    XTestGoFiles",
                "+  }",
                "+",
                "+  private final GoToolchain goToolchain;",
                "+  private final List<FileType> fileTypes;",
                "+  private final GoPlatform platform;",
                "+",
                "+  public GoListStep(",
                "+      BuildTarget buildTarget,",
                "+      Path workingDirectory,",
                "+      GoToolchain goToolchain,",
                "+      GoPlatform platform,",
                "+      List<FileType> fileTypes) {",
                "+    super(Optional.of(buildTarget), workingDirectory);",
                "+    this.goToolchain = goToolchain;",
                "+    this.platform = platform;",
                "+    this.fileTypes = fileTypes;",
                "+  }",
                "+",
                "+  @Override",
                "+  protected ImmutableList<String> getShellCommandInternal(ExecutionContext context) {",
                "+    ImmutableList.Builder<String> commandBuilder =",
                "+        ImmutableList.<String>builder()",
                "+            .add(goToolchain.getGoRoot().resolve(\"bin\").resolve(\"go\").toString())",
                "+            .add(\"list\")",
                "+            .add(\"-f\")",
                "+            .add(",
                "+                String.join(",
                "+                    \":\",",
                "+                    fileTypes",
                "+                        .stream()",
                "+                        .map(fileType -> \"{{join .\" + fileType.name() + \" \\\":\\\"}}\")",
                "+                        .collect(Collectors.toList())));",
                "+",
                "+    return commandBuilder.build();",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getShortName() {",
                "+    return \"go list\";",
                "+  }",
                "+",
                "+  @Override",
                "+  protected void addOptions(ImmutableSet.Builder<Option> options) {",
                "+    super.addOptions(options);",
                "+    options.add(Option.EXPECTING_STD_OUT);",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableMap<String, String> getEnvironmentVariables(ExecutionContext context) {",
                "+    return ImmutableMap.<String, String>builder()",
                "+        // The go list command relies on these environment variables, so they are set here",
                "+        // in case the inherited/default ones are wrong",
                "+        .put(\"GOROOT\", goToolchain.getGoRoot().toString())",
                "+        .put(\"GOOS\", platform.getGoOs())",
                "+        .put(\"GOARCH\", platform.getGoArch())",
                "+        .build();",
                "+  }",
                "+",
                "+  public Set<Path> getSourceFiles() {",
                "+    String stdout = getStdout();",
                "+    return Arrays.stream(stdout.trim().split(\":\"))",
                "+        .map(workingDirectory::resolve)",
                "+        .collect(Collectors.toSet());",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/go/GoTestDescription.java b/src/com/facebook/buck/go/GoTestDescription.java",
                "index 1ff8f5ed5e..301e15d6fe 100644",
                "--- a/src/com/facebook/buck/go/GoTestDescription.java",
                "+++ b/src/com/facebook/buck/go/GoTestDescription.java",
                "@@ -22,2 +22,3 @@ import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                " import com.facebook.buck.cxx.toolchain.DefaultCxxPlatforms;",
                "+import com.facebook.buck.go.GoListStep.FileType;",
                " import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "@@ -60,2 +61,3 @@ import java.nio.file.Path;",
                " import java.nio.file.Paths;",
                "+import java.util.Arrays;",
                " import java.util.Optional;",
                "@@ -426,3 +428,4 @@ public class GoTestDescription",
                "                   .addAll(args.getCgoDeps())",
                "-                  .build());",
                "+                  .build(),",
                "+              Arrays.asList(FileType.GoFiles, FileType.TestGoFiles));",
                "     } else {",
                "@@ -447,3 +450,4 @@ public class GoTestDescription",
                "                   .collect(ImmutableList.toImmutableList()),",
                "-              args.getCgoDeps());",
                "+              args.getCgoDeps(),",
                "+              Arrays.asList(FileType.GoFiles, FileType.TestGoFiles, FileType.XTestGoFiles));",
                "     }",
                "diff --git a/src/com/facebook/buck/shell/ShellStep.java b/src/com/facebook/buck/shell/ShellStep.java",
                "index ffe116bd01..b88344f6c2 100644",
                "--- a/src/com/facebook/buck/shell/ShellStep.java",
                "+++ b/src/com/facebook/buck/shell/ShellStep.java",
                "@@ -93,6 +93,10 @@ public abstract class ShellStep implements Step {",
                "       throws InterruptedException, IOException {",
                "+    ImmutableList<String> command = getShellCommand(context);",
                "+    if (command.size() == 0) {",
                "+      return StepExecutionResult.of(0);",
                "+    }",
                "+",
                "     // Kick off a Process in which this ShellCommand will be run.",
                "     ProcessExecutorParams.Builder builder = ProcessExecutorParams.builder();",
                "-",
                "-    builder.setCommand(getShellCommand(context));",
                "+    builder.setCommand(command);",
                "     Map<String, String> environment = new HashMap<>();",
                "@@ -206,3 +210,5 @@ public abstract class ShellStep implements Step {",
                "       shellCommandArgs = getShellCommandInternal(context);",
                "-      LOG.debug(\"Command: %s\", Joiner.on(\" \").join(shellCommandArgs));",
                "+      if (shellCommandArgs.size() > 0) {",
                "+        LOG.debug(\"Command: %s\", Joiner.on(\" \").join(shellCommandArgs));",
                "+      }",
                "     }",
                "diff --git a/test/com/facebook/buck/go/BUCK b/test/com/facebook/buck/go/BUCK",
                "index 9d713ae1ed..094e1cc610 100644",
                "--- a/test/com/facebook/buck/go/BUCK",
                "+++ b/test/com/facebook/buck/go/BUCK",
                "@@ -5,2 +5,5 @@ java_test(",
                "     srcs = glob([\"*IntegrationTest.java\"]),",
                "+    env = {",
                "+        \"GOROOT\": read_config(\"go\", \"root\", \"\"),",
                "+    },",
                "     deps = [",
                "diff --git a/test/com/facebook/buck/go/GoBinaryIntegrationTest.java b/test/com/facebook/buck/go/GoBinaryIntegrationTest.java",
                "index 1e5acd3380..2bcab73e13 100644",
                "--- a/test/com/facebook/buck/go/GoBinaryIntegrationTest.java",
                "+++ b/test/com/facebook/buck/go/GoBinaryIntegrationTest.java",
                "@@ -137,4 +137,4 @@ public class GoBinaryIntegrationTest {",
                "     workspace.writeContentsToPath(",
                "-        workspace.getFileContents(\"messenger/printer.go\").replace('!', '?'),",
                "-        \"messenger/printer.go\");",
                "+        workspace.getFileContents(\"messenger/printer/printer.go\").replace('!', '?'),",
                "+        \"messenger/printer/printer.go\");",
                "     assertThat(",
                "@@ -208,2 +208,10 @@ public class GoBinaryIntegrationTest {",
                "   }",
                "+",
                "+  @Test",
                "+  public void buildConstraints() throws IOException, InterruptedException {",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"build_constraints\", tmp);",
                "+    workspace.setUp();",
                "+    workspace.runBuckBuild(\"//:family\").assertSuccess();",
                "+  }",
                " }",
                "diff --git a/test/com/facebook/buck/go/GoDescriptorsTest.java b/test/com/facebook/buck/go/GoDescriptorsTest.java",
                "index 34dc6eccf5..b4c7d486d3 100644",
                "--- a/test/com/facebook/buck/go/GoDescriptorsTest.java",
                "+++ b/test/com/facebook/buck/go/GoDescriptorsTest.java",
                "@@ -22,2 +22,3 @@ import com.facebook.buck.config.FakeBuckConfig;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.go.GoListStep.FileType;",
                " import com.facebook.buck.io.file.MorePaths;",
                "@@ -44,2 +45,3 @@ import com.google.common.collect.Maps;",
                " import java.nio.file.Paths;",
                "+import java.util.Arrays;",
                " import org.hamcrest.Matchers;",
                "@@ -169,3 +171,4 @@ public class GoDescriptorsTest {",
                "             ImmutableList.of(),",
                "-            ImmutableSortedSet.of());",
                "+            ImmutableSortedSet.of(),",
                "+            Arrays.asList(FileType.GoFiles));",
                "diff --git a/test/com/facebook/buck/go/GoTestIntegrationTest.java b/test/com/facebook/buck/go/GoTestIntegrationTest.java",
                "index cf2913f224..6d6e37a033 100644",
                "--- a/test/com/facebook/buck/go/GoTestIntegrationTest.java",
                "+++ b/test/com/facebook/buck/go/GoTestIntegrationTest.java",
                "@@ -69,6 +69,6 @@ public class GoTestIntegrationTest {",
                "-    workspace.replaceFileContents(\"base.go\", \"n1 + n2\", \"n1 + n2 + 1\");",
                "+    workspace.replaceFileContents(\"buck_base/base.go\", \"n1 + n2\", \"n1 + n2 + 1\");",
                "     workspace.runBuckCommand(\"test\", \"//:test-success\").assertTestFailure();",
                "-    workspace.replaceFileContents(\"base.go\", \"n1 + n2 + 1\", \"n1 + n2 * 1\");",
                "+    workspace.replaceFileContents(\"buck_base/base.go\", \"n1 + n2 + 1\", \"n1 + n2 * 1\");",
                "     workspace.runBuckCommand(\"test\", \"//:test-success\").assertSuccess();",
                "diff --git a/test/com/facebook/buck/go/testdata/binary_with_library/messenger/BUCK.fixture b/test/com/facebook/buck/go/testdata/binary_with_library/messenger/BUCK.fixture",
                "index cbd322babf..4ca3913221 100644",
                "--- a/test/com/facebook/buck/go/testdata/binary_with_library/messenger/BUCK.fixture",
                "+++ b/test/com/facebook/buck/go/testdata/binary_with_library/messenger/BUCK.fixture",
                "@@ -17,3 +17,3 @@ go_library(",
                "     srcs = [",
                "-        \"printer.go\",",
                "+        \"printer/printer.go\",",
                "     ],",
                "diff --git a/test/com/facebook/buck/go/testdata/binary_with_library/messenger/printer/printer.go b/test/com/facebook/buck/go/testdata/binary_with_library/messenger/printer/printer.go",
                "new file mode 100644",
                "index 0000000000..c155d05ec5",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/binary_with_library/messenger/printer/printer.go",
                "@@ -0,0 +1,7 @@",
                "+package printer",
                "+",
                "+import \"fmt\"",
                "+",
                "+func Print(m string) {",
                "+\tfmt.Println(m)",
                "+}",
                "diff --git a/test/com/facebook/buck/go/testdata/build_constraints/BUCK.fixture b/test/com/facebook/buck/go/testdata/build_constraints/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..c462be266d",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/build_constraints/BUCK.fixture",
                "@@ -0,0 +1,4 @@",
                "+go_binary(",
                "+    name = \"family\",",
                "+    srcs = glob([\"*.go\"]),",
                "+)",
                "diff --git a/test/com/facebook/buck/go/testdata/build_constraints/constants_others.go b/test/com/facebook/buck/go/testdata/build_constraints/constants_others.go",
                "new file mode 100644",
                "index 0000000000..fa650b6b08",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/build_constraints/constants_others.go",
                "@@ -0,0 +1,4 @@",
                "+// +build !windows",
                "+package main",
                "+",
                "+const NAME = \"UNIX like\"",
                "diff --git a/test/com/facebook/buck/go/testdata/build_constraints/constants_windows.go b/test/com/facebook/buck/go/testdata/build_constraints/constants_windows.go",
                "new file mode 100644",
                "index 0000000000..af5aaf7966",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/build_constraints/constants_windows.go",
                "@@ -0,0 +1,4 @@",
                "+// +build windows",
                "+package main",
                "+",
                "+const NAME = \"Windows\"",
                "diff --git a/test/com/facebook/buck/go/testdata/build_constraints/main.go b/test/com/facebook/buck/go/testdata/build_constraints/main.go",
                "new file mode 100644",
                "index 0000000000..eeb7f0e507",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/build_constraints/main.go",
                "@@ -0,0 +1,9 @@",
                "+package main",
                "+",
                "+import (",
                "+\t\"fmt\"",
                "+)",
                "+",
                "+func main() {",
                "+\tfmt.Println(NAME)",
                "+}",
                "diff --git a/test/com/facebook/buck/go/testdata/exported_deps/BUCK.fixture b/test/com/facebook/buck/go/testdata/exported_deps/BUCK.fixture",
                "index f21cd16dc3..a8007dc2c6 100644",
                "--- a/test/com/facebook/buck/go/testdata/exported_deps/BUCK.fixture",
                "+++ b/test/com/facebook/buck/go/testdata/exported_deps/BUCK.fixture",
                "@@ -14,3 +14,3 @@ go_library(",
                "     srcs = [",
                "-        \"a.go\",",
                "+        \"a/a.go\",",
                "     ],",
                "@@ -25,3 +25,3 @@ go_library(",
                "     srcs = [",
                "-        \"b.go\",",
                "+        \"b/b.go\",",
                "     ],",
                "diff --git a/test/com/facebook/buck/go/testdata/exported_deps/a/a.go b/test/com/facebook/buck/go/testdata/exported_deps/a/a.go",
                "new file mode 100644",
                "index 0000000000..d59ffe63aa",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/exported_deps/a/a.go",
                "@@ -0,0 +1,7 @@",
                "+package a",
                "+",
                "+import \"b\"",
                "+",
                "+func A() {",
                "+  b.B()",
                "+}",
                "diff --git a/test/com/facebook/buck/go/testdata/exported_deps/b/b.go b/test/com/facebook/buck/go/testdata/exported_deps/b/b.go",
                "new file mode 100644",
                "index 0000000000..029a5323ed",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/exported_deps/b/b.go",
                "@@ -0,0 +1,4 @@",
                "+package b",
                "+",
                "+func B() {",
                "+}",
                "diff --git a/test/com/facebook/buck/go/testdata/go_test/BUCK.fixture b/test/com/facebook/buck/go/testdata/go_test/BUCK.fixture",
                "index aacab02e30..380f911640 100644",
                "--- a/test/com/facebook/buck/go/testdata/go_test/BUCK.fixture",
                "+++ b/test/com/facebook/buck/go/testdata/go_test/BUCK.fixture",
                "@@ -3,3 +3,3 @@ go_library(",
                "     package_name = \"buck_base\",",
                "-    srcs = [\"base.go\"],",
                "+    srcs = [\"buck_base/base.go\"],",
                " )",
                "@@ -54,3 +54,3 @@ go_test(",
                "     name = \"test-with-resources\",",
                "-    srcs = [\"test_with_resources.go\"],",
                "+    srcs = [\"resources_test.go\"],",
                "     resources = [\"testdata/input\"],",
                "@@ -60,3 +60,3 @@ go_test(",
                "     name = \"test-spinning\",",
                "-    srcs = [\"test_spinning.go\"],",
                "+    srcs = [\"spinning_test.go\"],",
                "     test_rule_timeout_ms = 500,",
                "diff --git a/test/com/facebook/buck/go/testdata/go_test/buck_base/base.go b/test/com/facebook/buck/go/testdata/go_test/buck_base/base.go",
                "new file mode 100644",
                "index 0000000000..87fef2df32",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/go_test/buck_base/base.go",
                "@@ -0,0 +1,5 @@",
                "+package buck_base",
                "+",
                "+func Add(n1, n2 int) int {",
                "+\treturn n1 + n2",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/test/com/facebook/buck/go/testdata/go_test/resources_test.go b/test/com/facebook/buck/go/testdata/go_test/resources_test.go",
                "new file mode 100644",
                "index 0000000000..c1c7853914",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/go_test/resources_test.go",
                "@@ -0,0 +1,17 @@",
                "+package lib_test",
                "+",
                "+import (",
                "+    \"io/ioutil\"",
                "+    \"testing\"",
                "+)",
                "+",
                "+func TestResource(t *testing.T) {",
                "+    out, err := ioutil.ReadFile(\"testdata/input\")",
                "+    if err != nil {",
                "+        t.Error(\"Could not read file 'testdata/input':\", err)",
                "+    }",
                "+",
                "+    if string(out) != \"hello\\n\" {",
                "+        t.Errorf(\"Bad data read - expected 'hello\\n', go %v\", string(out))",
                "+    }",
                "+}",
                "diff --git a/test/com/facebook/buck/go/testdata/go_test/spinning_test.go b/test/com/facebook/buck/go/testdata/go_test/spinning_test.go",
                "new file mode 100644",
                "index 0000000000..483aa1c341",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/go_test/spinning_test.go",
                "@@ -0,0 +1,10 @@",
                "+package lib_test",
                "+",
                "+import \"testing\"",
                "+import \"time\"",
                "+",
                "+func TestLib(t *testing.T) {",
                "+    for {",
                "+        time.Sleep(100 * time.Millisecond)",
                "+    }",
                "+}",
                "diff --git a/test/com/facebook/buck/go/testdata/go_test/subtests.go b/test/com/facebook/buck/go/testdata/go_test/subtests.go",
                "index 178f086e24..e37cfa274d 100644",
                "--- a/test/com/facebook/buck/go/testdata/go_test/subtests.go",
                "+++ b/test/com/facebook/buck/go/testdata/go_test/subtests.go",
                "@@ -1,2 +1,2 @@",
                "-package main",
                "+package lib",
                "diff --git a/test/com/facebook/buck/go/testdata/library_with_prefix/messenger/BUCK.fixture b/test/com/facebook/buck/go/testdata/library_with_prefix/messenger/BUCK.fixture",
                "index d817af4b1a..9af2322903 100644",
                "--- a/test/com/facebook/buck/go/testdata/library_with_prefix/messenger/BUCK.fixture",
                "+++ b/test/com/facebook/buck/go/testdata/library_with_prefix/messenger/BUCK.fixture",
                "@@ -17,3 +17,3 @@ go_library(",
                "     srcs = [",
                "-        \"printer.go\",",
                "+        \"printer/printer.go\",",
                "     ],",
                "diff --git a/test/com/facebook/buck/go/testdata/library_with_prefix/messenger/printer/printer.go b/test/com/facebook/buck/go/testdata/library_with_prefix/messenger/printer/printer.go",
                "new file mode 100644",
                "index 0000000000..32ae6449ac",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/library_with_prefix/messenger/printer/printer.go",
                "@@ -0,0 +1,7 @@",
                "+package printer",
                "+",
                "+import \"fmt\"",
                "+",
                "+func Print(m string) {",
                "+\tfmt.Println(m + \"!\")",
                "+}",
                "diff --git a/test/com/facebook/buck/go/testdata/transitive_dep/BUCK.fixture b/test/com/facebook/buck/go/testdata/transitive_dep/BUCK.fixture",
                "index a2ff64f461..5620dcdecc 100644",
                "--- a/test/com/facebook/buck/go/testdata/transitive_dep/BUCK.fixture",
                "+++ b/test/com/facebook/buck/go/testdata/transitive_dep/BUCK.fixture",
                "@@ -14,3 +14,3 @@ go_library(",
                "     srcs = [",
                "-        \"a.go\",",
                "+        \"a/a.go\",",
                "     ],",
                "@@ -25,3 +25,3 @@ go_library(",
                "     srcs = [",
                "-        \"b.go\",",
                "+        \"b/b.go\",",
                "     ],",
                "diff --git a/test/com/facebook/buck/go/testdata/transitive_dep/a/a.go b/test/com/facebook/buck/go/testdata/transitive_dep/a/a.go",
                "new file mode 100644",
                "index 0000000000..d59ffe63aa",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/transitive_dep/a/a.go",
                "@@ -0,0 +1,7 @@",
                "+package a",
                "+",
                "+import \"b\"",
                "+",
                "+func A() {",
                "+  b.B()",
                "+}",
                "diff --git a/test/com/facebook/buck/go/testdata/transitive_dep/b/b.go b/test/com/facebook/buck/go/testdata/transitive_dep/b/b.go",
                "new file mode 100644",
                "index 0000000000..029a5323ed",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/transitive_dep/b/b.go",
                "@@ -0,0 +1,4 @@",
                "+package b",
                "+",
                "+func B() {",
                "+}"
            ],
            "changed_files": [
                ".travis.yml",
                "src/com/facebook/buck/go/FilteredSourceFiles.java",
                "src/com/facebook/buck/go/GoAssembleStep.java",
                "src/com/facebook/buck/go/GoCompile.java",
                "src/com/facebook/buck/go/GoCompileStep.java",
                "src/com/facebook/buck/go/GoDescriptors.java",
                "src/com/facebook/buck/go/GoLibraryDescription.java",
                "src/com/facebook/buck/go/GoListStep.java",
                "src/com/facebook/buck/go/GoTestDescription.java",
                "src/com/facebook/buck/shell/ShellStep.java",
                "test/com/facebook/buck/go/BUCK",
                "test/com/facebook/buck/go/GoBinaryIntegrationTest.java",
                "test/com/facebook/buck/go/GoDescriptorsTest.java",
                "test/com/facebook/buck/go/GoTestIntegrationTest.java",
                "test/com/facebook/buck/go/testdata/binary_with_library/messenger/BUCK.fixture",
                "test/com/facebook/buck/go/testdata/binary_with_library/messenger/printer/printer.go",
                "test/com/facebook/buck/go/testdata/build_constraints/BUCK.fixture",
                "test/com/facebook/buck/go/testdata/build_constraints/constants_others.go",
                "test/com/facebook/buck/go/testdata/build_constraints/constants_windows.go",
                "test/com/facebook/buck/go/testdata/build_constraints/main.go",
                "test/com/facebook/buck/go/testdata/exported_deps/BUCK.fixture",
                "test/com/facebook/buck/go/testdata/exported_deps/a/a.go",
                "test/com/facebook/buck/go/testdata/exported_deps/b/b.go",
                "test/com/facebook/buck/go/testdata/go_test/BUCK.fixture",
                "test/com/facebook/buck/go/testdata/go_test/buck_base/base.go",
                "test/com/facebook/buck/go/testdata/go_test/resources_test.go",
                "test/com/facebook/buck/go/testdata/go_test/spinning_test.go",
                "test/com/facebook/buck/go/testdata/go_test/subtests.go",
                "test/com/facebook/buck/go/testdata/library_with_prefix/messenger/BUCK.fixture",
                "test/com/facebook/buck/go/testdata/library_with_prefix/messenger/printer/printer.go",
                "test/com/facebook/buck/go/testdata/transitive_dep/BUCK.fixture",
                "test/com/facebook/buck/go/testdata/transitive_dep/a/a.go",
                "test/com/facebook/buck/go/testdata/transitive_dep/b/b.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "1701": "Filtering platform specific source files #1782"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 1701",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c74a5db9f9c09ae334ef84ea9342b24d587394d1",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522169247,
            "hunks": 102,
            "message": "#956 Add kotlin annotation processor (kapt) support. Summary: This is still a major work in progress but I wanted to get the ball rolling. Currently this is building but fails at runtime to find the generated classes. I have only tested running it on an Android Project. A huge shoutout to my former colleague runningcode who helped tremendously on this. #956 outlines the steps that he discovered when running kapt via Gradle. I've created a simple [tool](https://github.com/cwoodwar6/kapt-cli) to better understand what steps are required when kapt is plugged into the compiler. I'll continue to update this PR and the tool as I make more progress. Feedback is welcome, looking for suggestions early so we can get this added as soon as possible. Closes https://github.com/facebook/buck/pull/1584 Reviewed By: jkeljo Pulled By: jkeljo fbshipit-source-id: 47a9598",
            "diff": [
                "diff --git a/docs/rule/kotlin_library.soy b/docs/rule/kotlin_library.soy",
                "index 89fb7015d2..6f3fff6df2 100644",
                "--- a/docs/rule/kotlin_library.soy",
                "+++ b/docs/rule/kotlin_library.soy",
                "@@ -36,3 +36,6 @@ of the compiled class files and resources.",
                "   {param desc}",
                "-  The set of <code>.kt</code> or <code>.kts</code> files to compile for this rule.",
                "+  The set of <code>.kt</code>, <code>.java</code> or <code>.kts</code> files to compile for this rule.",
                "+  If any of the files in this list end in <code>.src.zip</code>,",
                "+  then the entries in the ZIP file that end in <code>.java</code> or <code>.kt</code> will be",
                "+  included as ordinary inputs to compilation.",
                "   {/param}",
                "diff --git a/src/com/facebook/buck/jvm/java/BUCK b/src/com/facebook/buck/jvm/java/BUCK",
                "index d0a220c066..f6e2aa0490 100644",
                "--- a/src/com/facebook/buck/jvm/java/BUCK",
                "+++ b/src/com/facebook/buck/jvm/java/BUCK",
                "@@ -204,2 +204,3 @@ java_immutables_library(",
                "         \"//src/com/facebook/buck/jvm/java/abi/source/api:api\",",
                "+        \"//src/com/facebook/buck/jvm/java/javax:javax\",",
                "         \"//src/com/facebook/buck/jvm/java/lang/model:model\",",
                "diff --git a/src/com/facebook/buck/jvm/java/JdkProvidedInMemoryJavac.java b/src/com/facebook/buck/jvm/java/JdkProvidedInMemoryJavac.java",
                "index be70418a82..55de940e9b 100644",
                "--- a/src/com/facebook/buck/jvm/java/JdkProvidedInMemoryJavac.java",
                "+++ b/src/com/facebook/buck/jvm/java/JdkProvidedInMemoryJavac.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.jvm.java;",
                "+import com.facebook.buck.jvm.java.javax.SynchronizedToolProvider;",
                " import com.facebook.buck.rules.SourcePathResolver;",
                "@@ -21,3 +22,2 @@ import com.facebook.buck.util.HumanReadableException;",
                " import javax.tools.JavaCompiler;",
                "-import javax.tools.ToolProvider;",
                "@@ -27,9 +27,3 @@ public class JdkProvidedInMemoryJavac extends Jsr199Javac {",
                "       JavacExecutionContext context, SourcePathResolver pathResolver) {",
                "-    JavaCompiler compiler;",
                "-    synchronized (ToolProvider.class) {",
                "-      // ToolProvider has no synchronization internally, so if we don't synchronize from the",
                "-      // outside we could wind up loading the compiler classes multiple times from different",
                "-      // class loaders.",
                "-      compiler = ToolProvider.getSystemJavaCompiler();",
                "-    }",
                "+    JavaCompiler compiler = SynchronizedToolProvider.getSystemJavaCompiler();",
                "diff --git a/src/com/facebook/buck/jvm/java/Jsr199JavacInvocation.java b/src/com/facebook/buck/jvm/java/Jsr199JavacInvocation.java",
                "index ada88be6cf..7b4b2c132b 100644",
                "--- a/src/com/facebook/buck/jvm/java/Jsr199JavacInvocation.java",
                "+++ b/src/com/facebook/buck/jvm/java/Jsr199JavacInvocation.java",
                "@@ -185,2 +185,3 @@ class Jsr199JavacInvocation implements Javac.Invocation {",
                "   private class CompilerWorker implements AutoCloseable {",
                "+",
                "     private final ListeningExecutorService executor;",
                "@@ -415,3 +416,10 @@ class Jsr199JavacInvocation implements Javac.Invocation {",
                "                   try {",
                "-                    boolean success = javacTask.call();",
                "+                    boolean success = false;",
                "+                    try {",
                "+                      success = javacTask.call();",
                "+                    } catch (IllegalStateException ex) {",
                "+                      if (ex.getLocalizedMessage().equals(\"no source files\")) {",
                "+                        success = true;",
                "+                      }",
                "+                    }",
                "                     if (javacTask instanceof FrontendOnlyJavacTaskProxy) {",
                "diff --git a/src/com/facebook/buck/jvm/java/javax/BUCK b/src/com/facebook/buck/jvm/java/javax/BUCK",
                "new file mode 100644",
                "index 0000000000..ccd91c40fb",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/jvm/java/javax/BUCK",
                "@@ -0,0 +1,7 @@",
                "+java_library(",
                "+    name = \"javax\",",
                "+    srcs = glob([",
                "+        \"*.java\",",
                "+    ]),",
                "+    visibility = [\"PUBLIC\"],",
                "+)",
                "diff --git a/src/com/facebook/buck/jvm/java/javax/SynchronizedToolProvider.java b/src/com/facebook/buck/jvm/java/javax/SynchronizedToolProvider.java",
                "new file mode 100644",
                "index 0000000000..6a0e6057b0",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/jvm/java/javax/SynchronizedToolProvider.java",
                "@@ -0,0 +1,43 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.jvm.java.javax;",
                "+",
                "+import javax.tools.JavaCompiler;",
                "+import javax.tools.ToolProvider;",
                "+",
                "+/**",
                "+ * ToolProvider has no synchronization internally, so if we don't synchronize from the outside we",
                "+ * could wind up loading the compiler classes multiple times from different class loaders.",
                "+ */",
                "+public class SynchronizedToolProvider {",
                "+",
                "+  public static JavaCompiler getSystemJavaCompiler() {",
                "+    JavaCompiler compiler;",
                "+    synchronized (ToolProvider.class) {",
                "+      compiler = ToolProvider.getSystemJavaCompiler();",
                "+    }",
                "+    return compiler;",
                "+  }",
                "+",
                "+  public static ClassLoader getSystemToolClassLoader() {",
                "+    ClassLoader classLoader;",
                "+    synchronized (ToolProvider.class) {",
                "+      classLoader = ToolProvider.getSystemToolClassLoader();",
                "+    }",
                "+    return classLoader;",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/jvm/kotlin/AbstractKotlincVersion.java b/src/com/facebook/buck/jvm/kotlin/AbstractKotlincVersion.java",
                "index cbb0dc44c0..42c9a37e0c 100644",
                "--- a/src/com/facebook/buck/jvm/kotlin/AbstractKotlincVersion.java",
                "+++ b/src/com/facebook/buck/jvm/kotlin/AbstractKotlincVersion.java",
                "@@ -17,2 +17,3 @@ package com.facebook.buck.jvm.kotlin;",
                "+import com.facebook.buck.rules.AddsToRuleKey;",
                " import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "@@ -22,3 +23,4 @@ import org.immutables.value.Value;",
                " @BuckStyleImmutable",
                "-abstract class AbstractKotlincVersion {",
                "+abstract class AbstractKotlincVersion implements AddsToRuleKey {",
                "+",
                "   @Value.Parameter",
                "diff --git a/src/com/facebook/buck/jvm/kotlin/BUCK b/src/com/facebook/buck/jvm/kotlin/BUCK",
                "index 1e9ba7a9fa..2987355369 100644",
                "--- a/src/com/facebook/buck/jvm/kotlin/BUCK",
                "+++ b/src/com/facebook/buck/jvm/kotlin/BUCK",
                "@@ -19,2 +19,3 @@ java_library_with_plugins(",
                "         \"//src/com/facebook/buck/jvm/java:support\",",
                "+        \"//src/com/facebook/buck/jvm/java/javax:javax\",",
                "         \"//src/com/facebook/buck/jvm/java/toolchain:toolchain\",",
                "@@ -33,2 +34,3 @@ java_library_with_plugins(",
                "         \"//src/com/facebook/buck/step:step\",",
                "+        \"//src/com/facebook/buck/step/fs:fs\",",
                "         \"//src/com/facebook/buck/toolchain:toolchain\",",
                "@@ -40,3 +42,6 @@ java_library_with_plugins(",
                "         \"//src/com/facebook/buck/util/immutables:immutables\",",
                "+        \"//src/com/facebook/buck/util/unarchive:unarchive\",",
                "+        \"//src/com/facebook/buck/util/zip:zip\",",
                "         \"//src/com/facebook/buck/versions:versions\",",
                "+        \"//src/com/facebook/buck/zip:zip\",",
                "         \"//third-party/java/guava:guava\",",
                "diff --git a/src/com/facebook/buck/jvm/kotlin/ExternalKotlinc.java b/src/com/facebook/buck/jvm/kotlin/ExternalKotlinc.java",
                "index f4cde67ab4..015c210d43 100644",
                "--- a/src/com/facebook/buck/jvm/kotlin/ExternalKotlinc.java",
                "+++ b/src/com/facebook/buck/jvm/kotlin/ExternalKotlinc.java",
                "@@ -27,2 +27,3 @@ import com.facebook.buck.util.Console;",
                " import com.facebook.buck.util.DefaultProcessExecutor;",
                "+import com.facebook.buck.util.HumanReadableException;",
                " import com.facebook.buck.util.MoreSuppliers;",
                "@@ -107,2 +108,16 @@ public class ExternalKotlinc implements Kotlinc, RuleKeyAppendable {",
                "+    ImmutableList<Path> expandedSources;",
                "+    try {",
                "+      expandedSources =",
                "+          getExpandedSourcePaths(",
                "+              projectFilesystem,",
                "+              context.getProjectFilesystemFactory(),",
                "+              kotlinSourceFilePaths,",
                "+              workingDirectory);",
                "+    } catch (Throwable throwable) {",
                "+      throwable.printStackTrace();",
                "+      throw new HumanReadableException(",
                "+          \"Unable to expand sources for %s into %s\", invokingRule, workingDirectory);",
                "+    }",
                "+",
                "     ImmutableList<String> command =",
                "@@ -110,5 +125,6 @@ public class ExternalKotlinc implements Kotlinc, RuleKeyAppendable {",
                "             .add(pathToKotlinc.toString())",
                "+            .addAll(options)",
                "             .addAll(",
                "                 transform(",
                "-                    kotlinSourceFilePaths,",
                "+                    expandedSources,",
                "                     path -> projectFilesystem.resolve(path).toAbsolutePath().toString()))",
                "@@ -159,2 +175,12 @@ public class ExternalKotlinc implements Kotlinc, RuleKeyAppendable {",
                "+  @Override",
                "+  public Path getAnnotationProcessorPath() {",
                "+    throw new IllegalStateException(\"Not supported yet\");",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path getStdlibPath() {",
                "+    throw new IllegalStateException(\"Not supported yet\");",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/com/facebook/buck/jvm/kotlin/JarBackedReflectedKotlinc.java b/src/com/facebook/buck/jvm/kotlin/JarBackedReflectedKotlinc.java",
                "index d6459bbfd8..baccb12996 100644",
                "--- a/src/com/facebook/buck/jvm/kotlin/JarBackedReflectedKotlinc.java",
                "+++ b/src/com/facebook/buck/jvm/kotlin/JarBackedReflectedKotlinc.java",
                "@@ -21,2 +21,3 @@ import static com.google.common.collect.Iterables.transform;",
                " import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.jvm.java.javax.SynchronizedToolProvider;",
                " import com.facebook.buck.model.BuildTarget;",
                "@@ -28,2 +29,3 @@ import com.facebook.buck.step.ExecutionContext;",
                " import com.facebook.buck.util.ClassLoaderCache;",
                "+import com.facebook.buck.util.HumanReadableException;",
                " import com.google.common.base.Joiner;",
                "@@ -66,5 +68,12 @@ public class JarBackedReflectedKotlinc implements Kotlinc {",
                "   @AddToRuleKey private final ImmutableSet<SourcePath> compilerClassPath;",
                "+  private final Path annotationProcessingClassPath;",
                "+  private final Path standardLibraryClasspath;",
                "-  JarBackedReflectedKotlinc(ImmutableSet<SourcePath> compilerClassPath) {",
                "+  JarBackedReflectedKotlinc(",
                "+      ImmutableSet<SourcePath> compilerClassPath,",
                "+      Path annotationProcessingClassPath,",
                "+      Path standardLibraryClasspath) {",
                "     this.compilerClassPath = compilerClassPath;",
                "+    this.annotationProcessingClassPath = annotationProcessingClassPath;",
                "+    this.standardLibraryClasspath = standardLibraryClasspath;",
                "   }",
                "@@ -94,2 +103,12 @@ public class JarBackedReflectedKotlinc implements Kotlinc {",
                "+  @Override",
                "+  public Path getAnnotationProcessorPath() {",
                "+    return annotationProcessingClassPath;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path getStdlibPath() {",
                "+    return standardLibraryClasspath;",
                "+  }",
                "+",
                "   @Override",
                "@@ -109,2 +128,16 @@ public class JarBackedReflectedKotlinc implements Kotlinc {",
                "+    ImmutableList<Path> expandedSources;",
                "+    try {",
                "+      expandedSources =",
                "+          getExpandedSourcePaths(",
                "+              projectFilesystem,",
                "+              context.getProjectFilesystemFactory(),",
                "+              kotlinSourceFilePaths,",
                "+              workingDirectory);",
                "+    } catch (Throwable throwable) {",
                "+      throwable.printStackTrace();",
                "+      throw new HumanReadableException(",
                "+          \"Unable to expand sources for %s into %s\", invokingRule, workingDirectory);",
                "+    }",
                "+",
                "     ImmutableList<String> args =",
                "@@ -114,3 +147,3 @@ public class JarBackedReflectedKotlinc implements Kotlinc {",
                "                 transform(",
                "-                    kotlinSourceFilePaths,",
                "+                    expandedSources,",
                "                     path -> projectFilesystem.resolve(path).toAbsolutePath().toString()))",
                "@@ -158,3 +191,3 @@ public class JarBackedReflectedKotlinc implements Kotlinc {",
                "           classLoaderCache.getClassLoaderForClassPath(",
                "-              null /* parent classloader */,",
                "+              SynchronizedToolProvider.getSystemToolClassLoader(),",
                "               ImmutableList.copyOf(",
                "diff --git a/src/com/facebook/buck/jvm/kotlin/KotlinBuckConfig.java b/src/com/facebook/buck/jvm/kotlin/KotlinBuckConfig.java",
                "index 56d0deca7b..8c4de575f7 100644",
                "--- a/src/com/facebook/buck/jvm/kotlin/KotlinBuckConfig.java",
                "+++ b/src/com/facebook/buck/jvm/kotlin/KotlinBuckConfig.java",
                "@@ -20,2 +20,3 @@ import com.facebook.buck.config.BuckConfig;",
                " import com.facebook.buck.io.ExecutableFinder;",
                "+import com.facebook.buck.log.Logger;",
                " import com.facebook.buck.rules.SourcePath;",
                "@@ -23,2 +24,3 @@ import com.facebook.buck.util.HumanReadableException;",
                " import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                " import java.io.IOException;",
                "@@ -31,2 +33,5 @@ import javax.annotation.Nullable;",
                " public class KotlinBuckConfig {",
                "+",
                "+  private static final Logger LOG = Logger.get(KotlinBuckConfig.class);",
                "+",
                "   private static final String SECTION = \"kotlin\";",
                "@@ -53,3 +58,4 @@ public class KotlinBuckConfig {",
                "-      return new JarBackedReflectedKotlinc(classpathEntries);",
                "+      return new JarBackedReflectedKotlinc(",
                "+          classpathEntries, getPathToAnnotationProcessingJar(), getPathToStdlibJar());",
                "     }",
                "@@ -57,2 +63,11 @@ public class KotlinBuckConfig {",
                "+  public ImmutableSortedSet<Path> getKotlinHomeLibraries() {",
                "+    return ImmutableSortedSet.copyOf(",
                "+        ImmutableSortedSet.of(",
                "+            getPathToStdlibJar(),",
                "+            getPathToReflectJar(),",
                "+            getPathToScriptRuntimeJar(),",
                "+            getPathToCompilerJar()));",
                "+  }",
                "+",
                "   Path getPathToCompilerBinary() {",
                "@@ -69,41 +84,34 @@ public class KotlinBuckConfig {",
                "-  /**",
                "-   * Get the path to the Kotlin runtime jar.",
                "-   *",
                "-   * @return the Kotlin runtime jar path",
                "-   */",
                "-  Path getPathToStdlibJar() {",
                "-    Path stdlib = getKotlinHome().resolve(\"kotlin-stdlib.jar\");",
                "-    if (Files.isRegularFile(stdlib)) {",
                "-      return stdlib.normalize();",
                "-    }",
                "-",
                "-    stdlib = getKotlinHome().resolve(Paths.get(\"lib\", \"kotlin-stdlib.jar\"));",
                "-    if (Files.isRegularFile(stdlib)) {",
                "-      return stdlib.normalize();",
                "+  private Path getPathToJar(String jarName) {",
                "+    Path reflect = getKotlinHome().resolve(jarName + \".jar\");",
                "+    if (Files.isRegularFile(reflect)) {",
                "+      return reflect.normalize();",
                "     }",
                "-    stdlib = getKotlinHome().resolve(Paths.get(\"libexec\", \"lib\", \"kotlin-stdlib.jar\"));",
                "-    if (Files.isRegularFile(stdlib)) {",
                "-      return stdlib.normalize();",
                "+    reflect = getKotlinHome().resolve(Paths.get(\"lib\", jarName + \".jar\"));",
                "+    if (Files.isRegularFile(reflect)) {",
                "+      return reflect.normalize();",
                "     }",
                "-    // Support for Kotlin < 1.1 ... kotlin-stdlib used to be kotlin-runtime.",
                "-    stdlib = getKotlinHome().resolve(\"kotlin-runtime.jar\");",
                "-    if (Files.isRegularFile(stdlib)) {",
                "-      return stdlib.normalize();",
                "+    reflect = getKotlinHome().resolve(Paths.get(\"libexec\", \"lib\", jarName + \".jar\"));",
                "+    if (Files.isRegularFile(reflect)) {",
                "+      return reflect.normalize();",
                "     }",
                "-    stdlib = getKotlinHome().resolve(Paths.get(\"lib\", \"kotlin-runtime.jar\"));",
                "-    if (Files.isRegularFile(stdlib)) {",
                "-      return stdlib.normalize();",
                "-    }",
                "+    throw new HumanReadableException(",
                "+        \"Could not resolve \" + jarName + \" JAR location (kotlin home:\" + getKotlinHome() + \").\");",
                "+  }",
                "-    stdlib = getKotlinHome().resolve(Paths.get(\"libexec\", \"lib\", \"kotlin-runtime.jar\"));",
                "-    if (Files.isRegularFile(stdlib)) {",
                "-      return stdlib.normalize();",
                "+  /**",
                "+   * Get the path to the Kotlin runtime jar.",
                "+   *",
                "+   * @return the Kotlin runtime jar path",
                "+   */",
                "+  Path getPathToStdlibJar() {",
                "+    try {",
                "+      return getPathToJar(\"kotlin-stdlib\");",
                "+    } catch (HumanReadableException e) {",
                "+      // TODO: Check if kt version < 1.1",
                "+      return getPathToJar(\"kotlin-runtime\");",
                "     }",
                "-",
                "-    throw new HumanReadableException(",
                "-        \"Could not resolve kotlin stdlib JAR location (kotlin home:\" + getKotlinHome() + \").\");",
                "   }",
                "@@ -116,19 +124,3 @@ public class KotlinBuckConfig {",
                "   Path getPathToReflectJar() {",
                "-    Path reflect = getKotlinHome().resolve(\"kotlin-reflect.jar\");",
                "-    if (Files.isRegularFile(reflect)) {",
                "-      return reflect.normalize();",
                "-    }",
                "-",
                "-    reflect = getKotlinHome().resolve(Paths.get(\"lib\", \"kotlin-reflect.jar\"));",
                "-    if (Files.isRegularFile(reflect)) {",
                "-      return reflect.normalize();",
                "-    }",
                "-",
                "-    reflect = getKotlinHome().resolve(Paths.get(\"libexec\", \"lib\", \"kotlin-reflect.jar\"));",
                "-    if (Files.isRegularFile(reflect)) {",
                "-      return reflect.normalize();",
                "-    }",
                "-",
                "-    throw new HumanReadableException(",
                "-        \"Could not resolve kotlin reflect JAR location (kotlin home:\" + getKotlinHome() + \").\");",
                "+    return getPathToJar(\"kotlin-reflect\");",
                "   }",
                "@@ -141,21 +133,3 @@ public class KotlinBuckConfig {",
                "   Path getPathToScriptRuntimeJar() {",
                "-    Path script = getKotlinHome().resolve(\"kotlin-script-runtime.jar\");",
                "-    if (Files.isRegularFile(script)) {",
                "-      return script.normalize();",
                "-    }",
                "-",
                "-    script = getKotlinHome().resolve(Paths.get(\"lib\", \"kotlin-script-runtime.jar\"));",
                "-    if (Files.isRegularFile(script)) {",
                "-      return script.normalize();",
                "-    }",
                "-",
                "-    script = getKotlinHome().resolve(Paths.get(\"libexec\", \"lib\", \"kotlin-script-runtime.jar\"));",
                "-    if (Files.isRegularFile(script)) {",
                "-      return script.normalize();",
                "-    }",
                "-",
                "-    throw new HumanReadableException(",
                "-        \"Could not resolve kotlin script runtime JAR location (kotlin home:\"",
                "-            + getKotlinHome()",
                "-            + \").\");",
                "+    return getPathToJar(\"kotlin-script-runtime\");",
                "   }",
                "@@ -168,19 +142,38 @@ public class KotlinBuckConfig {",
                "   Path getPathToCompilerJar() {",
                "-    Path compiler = getKotlinHome().resolve(\"kotlin-compiler.jar\");",
                "-    if (Files.isRegularFile(compiler)) {",
                "-      return compiler.normalize();",
                "-    }",
                "-",
                "-    compiler = getKotlinHome().resolve(Paths.get(\"lib\", \"kotlin-compiler.jar\"));",
                "-    if (Files.isRegularFile(compiler)) {",
                "-      return compiler.normalize();",
                "+    try {",
                "+      return getPathToJar(\"kotlin-compiler-embeddable\");",
                "+    } catch (HumanReadableException e) {",
                "+      LOG.warn(",
                "+          \"kotlin-compiler-embeddable.jar was not found in \"",
                "+              + kotlinHome",
                "+              + \" directory, this\"",
                "+              + \" may result in kapt not working properly. Proceeding with kotlin-compiler.jar\");",
                "+      return getPathToJar(\"kotlin-compiler\");",
                "     }",
                "+  }",
                "-    compiler = getKotlinHome().resolve(Paths.get(\"libexec\", \"lib\", \"kotlin-compiler.jar\"));",
                "-    if (Files.isRegularFile(compiler)) {",
                "-      return compiler.normalize();",
                "+  /**",
                "+   * Get the path to the Kotlin annotation processing jar.",
                "+   *",
                "+   * @return the Kotlin annotation processing jar path",
                "+   */",
                "+  Path getPathToAnnotationProcessingJar() {",
                "+    try {",
                "+      return getPathToJar(\"kotlin-annotation-processing-gradle\");",
                "+    } catch (HumanReadableException e) {",
                "+      LOG.warn(",
                "+          \"kotlin-annotation-processing-gradle.jar was not found in \"",
                "+              + kotlinHome",
                "+              + \" directory, searching for kotlin-annotation-processing-maven.jar\");",
                "+      try {",
                "+        return getPathToJar(\"kotlin-annotation-processing-maven\");",
                "+      } catch (HumanReadableException er) {",
                "+        LOG.warn(",
                "+            \"kotlin-annotation-processing-maven.jar was not found in \"",
                "+                + kotlinHome",
                "+                + \" directory, this\"",
                "+                + \" may result in kapt not working properly. Proceeding with kotlin-annotation-processing.jar\");",
                "+        return getPathToJar(\"kotlin-annotation-processing\");",
                "+      }",
                "     }",
                "-",
                "-    throw new HumanReadableException(",
                "-        \"Could not resolve kotlin compiler JAR location (kotlin home:\" + getKotlinHome() + \").\");",
                "   }",
                "diff --git a/src/com/facebook/buck/jvm/kotlin/KotlinConfiguredCompilerFactory.java b/src/com/facebook/buck/jvm/kotlin/KotlinConfiguredCompilerFactory.java",
                "index 1f3ec82030..c03bc909f8 100644",
                "--- a/src/com/facebook/buck/jvm/kotlin/KotlinConfiguredCompilerFactory.java",
                "+++ b/src/com/facebook/buck/jvm/kotlin/KotlinConfiguredCompilerFactory.java",
                "@@ -70,2 +70,3 @@ public class KotlinConfiguredCompilerFactory extends ConfiguredCompilerFactory {",
                "         kotlinBuckConfig.getKotlinc(),",
                "+        kotlinBuckConfig.getKotlinHomeLibraries(),",
                "         Preconditions.checkNotNull((KotlinLibraryDescription.CoreArg) args)",
                "diff --git a/src/com/facebook/buck/jvm/kotlin/Kotlinc.java b/src/com/facebook/buck/jvm/kotlin/Kotlinc.java",
                "index 52803e59e1..31d3bf7964 100644",
                "--- a/src/com/facebook/buck/jvm/kotlin/Kotlinc.java",
                "+++ b/src/com/facebook/buck/jvm/kotlin/Kotlinc.java",
                "@@ -18,3 +18,7 @@ package com.facebook.buck.jvm.kotlin;",
                "+import static com.facebook.buck.jvm.java.Javac.SRC_JAR;",
                "+import static com.facebook.buck.jvm.java.Javac.SRC_ZIP;",
                "+",
                " import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystemFactory;",
                " import com.facebook.buck.model.BuildTarget;",
                "@@ -22,4 +26,8 @@ import com.facebook.buck.rules.Tool;",
                " import com.facebook.buck.step.ExecutionContext;",
                "+import com.facebook.buck.util.unarchive.ArchiveFormat;",
                "+import com.facebook.buck.util.unarchive.ExistingFileMode;",
                " import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSet;",
                " import com.google.common.collect.ImmutableSortedSet;",
                "+import java.io.IOException;",
                " import java.nio.file.Path;",
                "@@ -48,2 +56,45 @@ public interface Kotlinc extends Tool {",
                "   String getShortName();",
                "+",
                "+  Path getAnnotationProcessorPath();",
                "+",
                "+  Path getStdlibPath();",
                "+",
                "+  default ImmutableList<Path> getExpandedSourcePaths(",
                "+      ProjectFilesystem projectFilesystem,",
                "+      ProjectFilesystemFactory projectFilesystemFactory,",
                "+      ImmutableSet<Path> kotlinSourceFilePaths,",
                "+      Optional<Path> workingDirectory)",
                "+      throws InterruptedException, IOException {",
                "+",
                "+    // Add sources file or sources list to command",
                "+    ImmutableList.Builder<Path> sources = ImmutableList.builder();",
                "+    for (Path path : kotlinSourceFilePaths) {",
                "+      String pathString = path.toString();",
                "+      if (pathString.endsWith(\".kt\")",
                "+          || pathString.endsWith(\".kts\")",
                "+          || pathString.endsWith(\".java\")) {",
                "+        sources.add(path);",
                "+      } else if (pathString.endsWith(SRC_ZIP) || pathString.endsWith(SRC_JAR)) {",
                "+        // For a Zip of .java files, create a JavaFileObject for each .java entry.",
                "+        ImmutableList<Path> zipPaths =",
                "+            ArchiveFormat.ZIP",
                "+                .getUnarchiver()",
                "+                .extractArchive(",
                "+                    projectFilesystemFactory,",
                "+                    projectFilesystem.resolve(path),",
                "+                    projectFilesystem.resolve(workingDirectory.orElse(path)),",
                "+                    ExistingFileMode.OVERWRITE);",
                "+        sources.addAll(",
                "+            zipPaths",
                "+                .stream()",
                "+                .filter(",
                "+                    input ->",
                "+                        input.toString().endsWith(\".kt\")",
                "+                            || input.toString().endsWith(\".kts\")",
                "+                            || input.toString().endsWith(\".java\"))",
                "+                .iterator());",
                "+      }",
                "+    }",
                "+    return sources.build();",
                "+  }",
                " }",
                "diff --git a/src/com/facebook/buck/jvm/kotlin/KotlincStep.java b/src/com/facebook/buck/jvm/kotlin/KotlincStep.java",
                "index 7820d53e26..45de9ee6f9 100644",
                "--- a/src/com/facebook/buck/jvm/kotlin/KotlincStep.java",
                "+++ b/src/com/facebook/buck/jvm/kotlin/KotlincStep.java",
                "@@ -37,5 +37,8 @@ import java.util.Optional;",
                " public class KotlincStep implements Step {",
                "-  private static final String CLASSPATH_FLAG = \"-cp\";",
                "+",
                "+  private static final String CLASSPATH_FLAG = \"-classpath\";",
                "   private static final String DESTINATION_FLAG = \"-d\";",
                "   private static final String INCLUDE_RUNTIME_FLAG = \"-include-runtime\";",
                "+  private static final String EXCLUDE_REFLECT = \"-no-reflect\";",
                "+  private static final String VERBOSE = \"-verbose\";",
                "@@ -49,2 +52,3 @@ public class KotlincStep implements Step {",
                "   private final BuildTarget invokingRule;",
                "+  private final Optional<Path> workingDirectory;",
                "@@ -58,3 +62,4 @@ public class KotlincStep implements Step {",
                "       ImmutableList<String> extraArguments,",
                "-      ProjectFilesystem filesystem) {",
                "+      ProjectFilesystem filesystem,",
                "+      Optional<Path> workingDirectory) {",
                "     this.invokingRule = invokingRule;",
                "@@ -67,2 +72,3 @@ public class KotlincStep implements Step {",
                "     this.filesystem = filesystem;",
                "+    this.workingDirectory = workingDirectory;",
                "   }",
                "@@ -92,3 +98,3 @@ public class KotlincStep implements Step {",
                "               pathToSrcsList,",
                "-              Optional.empty(),",
                "+              workingDirectory,",
                "               filesystem);",
                "@@ -138,3 +144,5 @@ public class KotlincStep implements Step {",
                "-    builder.add(INCLUDE_RUNTIME_FLAG);",
                "+    if (outputDirectory != null) {",
                "+      builder.add(DESTINATION_FLAG, filesystem.resolve(outputDirectory).toString());",
                "+    }",
                "@@ -150,3 +158,5 @@ public class KotlincStep implements Step {",
                "-    builder.add(DESTINATION_FLAG, filesystem.resolve(outputDirectory).toString());",
                "+    builder.add(INCLUDE_RUNTIME_FLAG);",
                "+    builder.add(EXCLUDE_REFLECT);",
                "+    builder.add(VERBOSE);",
                "diff --git a/src/com/facebook/buck/jvm/kotlin/KotlincToJarStepFactory.java b/src/com/facebook/buck/jvm/kotlin/KotlincToJarStepFactory.java",
                "index 62cacb7ceb..ac842797c1 100644",
                "--- a/src/com/facebook/buck/jvm/kotlin/KotlincToJarStepFactory.java",
                "+++ b/src/com/facebook/buck/jvm/kotlin/KotlincToJarStepFactory.java",
                "@@ -18,4 +18,8 @@ package com.facebook.buck.jvm.kotlin;",
                "-import com.facebook.buck.io.filesystem.PathOrGlobMatcher;",
                "+import static com.facebook.buck.jvm.java.Javac.SRC_ZIP;",
                "+import static javax.xml.bind.DatatypeConverter.printBase64Binary;",
                "+",
                "+import com.facebook.buck.io.BuildCellRelativePath;",
                " import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.jvm.java.AnnotationProcessingParams;",
                " import com.facebook.buck.jvm.java.CompileToJarStepFactory;",
                "@@ -25,4 +29,7 @@ import com.facebook.buck.jvm.java.Javac;",
                " import com.facebook.buck.jvm.java.JavacOptions;",
                "+import com.facebook.buck.jvm.java.JavacPluginJsr199Fields;",
                " import com.facebook.buck.jvm.java.JavacToJarStepFactory;",
                "+import com.facebook.buck.jvm.java.ResolvedJavacPluginProperties;",
                " import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                " import com.facebook.buck.rules.AddToRuleKey;",
                "@@ -35,2 +42,8 @@ import com.facebook.buck.rules.Tool;",
                " import com.facebook.buck.step.Step;",
                "+import com.facebook.buck.step.fs.CopyStep;",
                "+import com.facebook.buck.step.fs.CopyStep.DirectoryMode;",
                "+import com.facebook.buck.step.fs.MakeCleanDirectoryStep;",
                "+import com.facebook.buck.util.zip.ZipCompressionLevel;",
                "+import com.facebook.buck.zip.ZipStep;",
                "+import com.google.common.base.Joiner;",
                " import com.google.common.base.Preconditions;",
                "@@ -38,4 +51,11 @@ import com.google.common.collect.ImmutableList;",
                " import com.google.common.collect.ImmutableList.Builder;",
                "+import com.google.common.collect.ImmutableSet;",
                " import com.google.common.collect.ImmutableSortedSet;",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.ObjectOutputStream;",
                " import java.nio.file.Path;",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "+import java.util.Map;",
                " import java.util.Optional;",
                "@@ -45,5 +65,2 @@ public class KotlincToJarStepFactory extends CompileToJarStepFactory implements",
                "-  private static final PathOrGlobMatcher JAVA_PATH_MATCHER = new PathOrGlobMatcher(\"**.java\");",
                "-  private static final PathOrGlobMatcher KOTLIN_PATH_MATCHER = new PathOrGlobMatcher(\"**.kt\");",
                "-",
                "   @AddToRuleKey private final Kotlinc kotlinc;",
                "@@ -51,2 +68,28 @@ public class KotlincToJarStepFactory extends CompileToJarStepFactory implements",
                "   @AddToRuleKey private final ExtraClasspathProvider extraClassPath;",
                "+",
                "+  private static final String COMPILER_BUILTINS = \"-Xadd-compiler-builtins\";",
                "+  private static final String LOAD_BUILTINS_FROM = \"-Xload-builtins-from-dependencies\";",
                "+  private static final String PLUGIN = \"-P\";",
                "+  private static final String APT_MODE = \"aptMode=\";",
                "+  private static final String X_PLUGIN_ARG = \"-Xplugin=\";",
                "+  private static final String KAPT3_PLUGIN = \"plugin:org.jetbrains.kotlin.kapt3:\";",
                "+  private static final String AP_CLASSPATH_ARG = KAPT3_PLUGIN + \"apclasspath=\";",
                "+  // output path for generated sources;",
                "+  private static final String SOURCES_ARG = KAPT3_PLUGIN + \"sources=\";",
                "+  private static final String CLASSES_ARG = KAPT3_PLUGIN + \"classes=\";",
                "+  private static final String INCREMENTAL_ARG = KAPT3_PLUGIN + \"incrementalData=\";",
                "+  // output path for java stubs;",
                "+  private static final String STUBS_ARG = KAPT3_PLUGIN + \"stubs=\";",
                "+  private static final String LIGHT_ANALYSIS = KAPT3_PLUGIN + \"useLightAnalysis=\";",
                "+  private static final String CORRECT_ERROR_TYPES = KAPT3_PLUGIN + \"correctErrorTypes=\";",
                "+  private static final String VERBOSE_ARG = KAPT3_PLUGIN + \"verbose=\";",
                "+  private static final String JAVAC_ARG = KAPT3_PLUGIN + \"javacArguments=\";",
                "+  private static final String AP_OPTIONS = KAPT3_PLUGIN + \"apoptions=\";",
                "+  private static final String KAPT_GENERATED = \"kapt.kotlin.generated\";",
                "+  private static final String MODULE_NAME = \"-module-name\";",
                "+  private static final String NO_STDLIB = \"-no-stdlib\";",
                "+  private static final String NO_REFLECT = \"-no-reflect\";",
                "+  private static final String VERBOSE = \"-verbose\";",
                "+",
                "+  private final ImmutableSortedSet<Path> kotlinHomeLibraries;",
                "   private final Javac javac;",
                "@@ -54,3 +97,3 @@ public class KotlincToJarStepFactory extends CompileToJarStepFactory implements",
                "-  public KotlincToJarStepFactory(",
                "+  KotlincToJarStepFactory(",
                "       SourcePathResolver resolver,",
                "@@ -59,2 +102,3 @@ public class KotlincToJarStepFactory extends CompileToJarStepFactory implements",
                "       Kotlinc kotlinc,",
                "+      ImmutableSortedSet<Path> kotlinHomeLibraries,",
                "       ImmutableList<String> extraArguments,",
                "@@ -65,2 +109,3 @@ public class KotlincToJarStepFactory extends CompileToJarStepFactory implements",
                "     this.kotlinc = kotlinc;",
                "+    this.kotlinHomeLibraries = kotlinHomeLibraries;",
                "     this.extraArguments = extraArguments;",
                "@@ -85,4 +130,86 @@ public class KotlincToJarStepFactory extends CompileToJarStepFactory implements",
                "-    // Don't invoke kotlinc if we don't have any kotlin files.",
                "-    if (sourceFilePaths.stream().anyMatch(KOTLIN_PATH_MATCHER::matches)) {",
                "+    Path stubsOutput =",
                "+        BuildTargets.getAnnotationPath(projectFilesystem, invokingRule, \"__%s_stubs__\");",
                "+    Path sourcesOutput =",
                "+        BuildTargets.getAnnotationPath(projectFilesystem, invokingRule, \"__%s_sources__\");",
                "+    Path classesOutput =",
                "+        BuildTargets.getAnnotationPath(projectFilesystem, invokingRule, \"__%s_classes__\");",
                "+    Path kaptGeneratedOutput =",
                "+        BuildTargets.getAnnotationPath(projectFilesystem, invokingRule, \"__%s_kapt_generated__\");",
                "+    Path incrementalDataOutput =",
                "+        BuildTargets.getAnnotationPath(projectFilesystem, invokingRule, \"__%s_incremental_data__\");",
                "+    Path tmpFolder =",
                "+        BuildTargets.getScratchPath(projectFilesystem, invokingRule, \"__%s_gen_sources__\");",
                "+    Path genOutputFolder =",
                "+        BuildTargets.getGenPath(projectFilesystem, invokingRule, \"__%s_gen_sources__\");",
                "+    Path genOutput =",
                "+        BuildTargets.getGenPath(",
                "+            projectFilesystem, invokingRule, \"__%s_gen_sources__/generated\" + SRC_ZIP);",
                "+",
                "+    // Only invoke kotlinc if we have kotlin files.",
                "+    if (sourceFilePaths.stream().anyMatch(PathMatchers.KOTLIN_PATH_MATCHER::matches)) {",
                "+      ImmutableSortedSet<Path> sourcePaths =",
                "+          ImmutableSortedSet.<Path>naturalOrder().add(genOutput).addAll(sourceFilePaths).build();",
                "+",
                "+      // Javac requires that the root directory for generated sources already exist.",
                "+      addCreateFolderStep(steps, projectFilesystem, buildableContext, buildContext, stubsOutput);",
                "+      addCreateFolderStep(steps, projectFilesystem, buildableContext, buildContext, classesOutput);",
                "+      addCreateFolderStep(",
                "+          steps, projectFilesystem, buildableContext, buildContext, kaptGeneratedOutput);",
                "+      addCreateFolderStep(",
                "+          steps, projectFilesystem, buildableContext, buildContext, incrementalDataOutput);",
                "+      addCreateFolderStep(steps, projectFilesystem, buildableContext, buildContext, sourcesOutput);",
                "+      addCreateFolderStep(steps, projectFilesystem, buildableContext, buildContext, tmpFolder);",
                "+      addCreateFolderStep(",
                "+          steps, projectFilesystem, buildableContext, buildContext, genOutputFolder);",
                "+",
                "+      ImmutableSortedSet<Path> allClasspaths =",
                "+          ImmutableSortedSet.<Path>naturalOrder()",
                "+              .addAll(",
                "+                  Optional.ofNullable(extraClassPath.getExtraClasspath())",
                "+                      .orElse(ImmutableList.of()))",
                "+              .addAll(declaredClasspathEntries)",
                "+              .addAll(kotlinHomeLibraries)",
                "+              .build();",
                "+",
                "+      boolean generatingCode = !javacOptions.getAnnotationProcessingParams().isEmpty();",
                "+      if (generatingCode) {",
                "+",
                "+        addAnnotationGenFolderStep(",
                "+            invokingRule,",
                "+            steps,",
                "+            outputDirectory,",
                "+            projectFilesystem,",
                "+            sourceFilePaths,",
                "+            pathToSrcsList,",
                "+            allClasspaths,",
                "+            extraArguments,",
                "+            kaptGeneratedOutput,",
                "+            stubsOutput,",
                "+            incrementalDataOutput,",
                "+            classesOutput,",
                "+            sourcesOutput,",
                "+            parameters.getWorkingDirectory(),",
                "+            resolver);",
                "+      }",
                "+",
                "+      steps.add(",
                "+          CopyStep.forDirectory(",
                "+              projectFilesystem, sourcesOutput, tmpFolder, DirectoryMode.CONTENTS_ONLY));",
                "+      steps.add(",
                "+          CopyStep.forDirectory(",
                "+              projectFilesystem, classesOutput, tmpFolder, DirectoryMode.CONTENTS_ONLY));",
                "+      steps.add(",
                "+          CopyStep.forDirectory(",
                "+              projectFilesystem, kaptGeneratedOutput, tmpFolder, DirectoryMode.CONTENTS_ONLY));",
                "+",
                "+      steps.add(",
                "+          new ZipStep(",
                "+              projectFilesystem,",
                "+              genOutput,",
                "+              ImmutableSet.of(),",
                "+              false,",
                "+              ZipCompressionLevel.DEFAULT,",
                "+              tmpFolder));",
                "+",
                "       steps.add(",
                "@@ -91,41 +218,158 @@ public class KotlincToJarStepFactory extends CompileToJarStepFactory implements",
                "               outputDirectory,",
                "-              sourceFilePaths,",
                "+              sourcePaths,",
                "               pathToSrcsList,",
                "-              ImmutableSortedSet.<Path>naturalOrder()",
                "-                  .addAll(",
                "-                      Optional.ofNullable(extraClassPath.getExtraClasspath())",
                "-                          .orElse(ImmutableList.of()))",
                "-                  .addAll(declaredClasspathEntries)",
                "-                  .build(),",
                "+              allClasspaths,",
                "               kotlinc,",
                "-              extraArguments,",
                "-              projectFilesystem));",
                "+              ImmutableList.<String>builder()",
                "+                  .addAll(extraArguments)",
                "+                  .add(NO_STDLIB)",
                "+                  .add(NO_REFLECT)",
                "+                  .add(COMPILER_BUILTINS)",
                "+                  .add(LOAD_BUILTINS_FROM)",
                "+                  .add(VERBOSE)",
                "+                  .add()",
                "+                  .build(),",
                "+              projectFilesystem,",
                "+              Optional.of(parameters.getWorkingDirectory())));",
                "     }",
                "+    ImmutableSortedSet<Path> sources =",
                "+        ImmutableSortedSet.<Path>naturalOrder().add(genOutput).addAll(sourceFilePaths).build();",
                "+",
                "     ImmutableSortedSet<Path> javaSourceFiles =",
                "         ImmutableSortedSet.copyOf(",
                "-            sourceFilePaths",
                "+            sources",
                "                 .stream()",
                "-                .filter(JAVA_PATH_MATCHER::matches)",
                "+                .filter(input -> !PathMatchers.KOTLIN_PATH_MATCHER.matches(input))",
                "                 .collect(Collectors.toSet()));",
                "-    // Don't invoke javac if we don't have any java files.",
                "-    if (!javaSourceFiles.isEmpty()) {",
                "-      CompilerParameters javacParameters =",
                "-          CompilerParameters.builder()",
                "-              .from(parameters)",
                "-              .setClasspathEntries(",
                "-                  ImmutableSortedSet.<Path>naturalOrder()",
                "-                      .add(projectFilesystem.resolve(outputDirectory))",
                "-                      .addAll(",
                "-                          Optional.ofNullable(extraClassPath.getExtraClasspath())",
                "-                              .orElse(ImmutableList.of()))",
                "-                      .addAll(declaredClasspathEntries)",
                "-                      .build())",
                "-              .setSourceFilePaths(javaSourceFiles)",
                "-              .build();",
                "-      new JavacToJarStepFactory(",
                "-              resolver, ruleFinder, projectFilesystem, javac, javacOptions, extraClassPath)",
                "-          .createCompileStep(buildContext, invokingRule, javacParameters, steps, buildableContext);",
                "-    }",
                "+    CompilerParameters javacParameters =",
                "+        CompilerParameters.builder()",
                "+            .from(parameters)",
                "+            .setClasspathEntries(",
                "+                ImmutableSortedSet.<Path>naturalOrder()",
                "+                    .add(projectFilesystem.resolve(outputDirectory))",
                "+                    .addAll(",
                "+                        Optional.ofNullable(extraClassPath.getExtraClasspath())",
                "+                            .orElse(ImmutableList.of()))",
                "+                    .addAll(declaredClasspathEntries)",
                "+                    .build())",
                "+            .setSourceFilePaths(javaSourceFiles)",
                "+            .build();",
                "+",
                "+    new JavacToJarStepFactory(",
                "+            resolver,",
                "+            ruleFinder,",
                "+            projectFilesystem,",
                "+            javac,",
                "+            javacOptions.withAnnotationProcessingParams(AnnotationProcessingParams.EMPTY),",
                "+            extraClassPath)",
                "+        .createCompileStep(buildContext, invokingRule, javacParameters, steps, buildableContext);",
                "+  }",
                "+",
                "+  private void addAnnotationGenFolderStep(",
                "+      BuildTarget invokingRule,",
                "+      ImmutableList.Builder<Step> steps,",
                "+      Path outputDirectory,",
                "+      ProjectFilesystem filesystem,",
                "+      ImmutableSortedSet<Path> sourceFilePaths,",
                "+      Path pathToSrcsList,",
                "+      Iterable<? extends Path> declaredClasspathEntries,",
                "+      ImmutableList<String> extraArguments,",
                "+      Path kaptGenerated,",
                "+      Path stubsOutput,",
                "+      Path incrementalData,",
                "+      Path classesOutput,",
                "+      Path sourcesOutput,",
                "+      Path workingDirectory,",
                "+      SourcePathResolver resolver) {",
                "+",
                "+    ImmutableList<String> pluginFields =",
                "+        ImmutableList.copyOf(",
                "+            javacOptions",
                "+                .getAnnotationProcessingParams()",
                "+                .getAnnotationProcessors(filesystem, resolver)",
                "+                .stream()",
                "+                .map(ResolvedJavacPluginProperties::getJavacPluginJsr199Fields)",
                "+                .map(JavacPluginJsr199Fields::getClasspath)",
                "+                .flatMap(List::stream)",
                "+                .map(url -> AP_CLASSPATH_ARG + url.getFile())",
                "+                .collect(Collectors.toList()));",
                "+",
                "+    ImmutableList<String> kaptPluginOptions =",
                "+        ImmutableList.<String>builder()",
                "+            .add(AP_CLASSPATH_ARG + kotlinc.getAnnotationProcessorPath())",
                "+            .add(AP_CLASSPATH_ARG + kotlinc.getStdlibPath())",
                "+            .addAll(pluginFields)",
                "+            .add(SOURCES_ARG + filesystem.resolve(sourcesOutput))",
                "+            .add(CLASSES_ARG + filesystem.resolve(classesOutput))",
                "+            .add(INCREMENTAL_ARG + filesystem.resolve(incrementalData))",
                "+            .add(STUBS_ARG + filesystem.resolve(stubsOutput))",
                "+            .add(",
                "+                AP_OPTIONS",
                "+                    + encodeOptions(",
                "+                        Collections.singletonMap(",
                "+                            KAPT_GENERATED, filesystem.resolve(kaptGenerated).toString())))",
                "+            .add(JAVAC_ARG + encodeOptions(Collections.emptyMap()))",
                "+            .add(LIGHT_ANALYSIS + \"true\") // TODO: Provide value as argument",
                "+            .add(CORRECT_ERROR_TYPES + \"false\") // TODO: Provide value as argument",
                "+            .add(VERBOSE_ARG + \"true\") // TODO: Provide value as argument",
                "+            .build();",
                "+    String join = Joiner.on(\",\").join(kaptPluginOptions);",
                "+",
                "+    // First generate java stubs",
                "+    steps.add(",
                "+        new KotlincStep(",
                "+            invokingRule,",
                "+            outputDirectory,",
                "+            sourceFilePaths,",
                "+            pathToSrcsList,",
                "+            ImmutableSortedSet.<Path>naturalOrder()",
                "+                .add(kotlinc.getStdlibPath())",
                "+                .addAll(",
                "+                    Optional.ofNullable(extraClassPath.getExtraClasspath())",
                "+                        .orElse(ImmutableList.of()))",
                "+                .addAll(declaredClasspathEntries)",
                "+                .build(),",
                "+            kotlinc,",
                "+            ImmutableList.<String>builder()",
                "+                .addAll(extraArguments)",
                "+                .add(MODULE_NAME)",
                "+                .add(invokingRule.getShortNameAndFlavorPostfix())",
                "+                .add(COMPILER_BUILTINS)",
                "+                .add(LOAD_BUILTINS_FROM)",
                "+                .add(PLUGIN)",
                "+                .add(KAPT3_PLUGIN + APT_MODE + \"stubs,\" + join)",
                "+                .add(X_PLUGIN_ARG + kotlinc.getAnnotationProcessorPath())",
                "+                .build(),",
                "+            filesystem,",
                "+            Optional.of(workingDirectory)));",
                "+",
                "+    // Then run the annotation processor",
                "+    steps.add(",
                "+        new KotlincStep(",
                "+            invokingRule,",
                "+            outputDirectory,",
                "+            sourceFilePaths,",
                "+            pathToSrcsList,",
                "+            ImmutableSortedSet.<Path>naturalOrder()",
                "+                .add(kotlinc.getStdlibPath())",
                "+                .addAll(",
                "+                    Optional.ofNullable(extraClassPath.getExtraClasspath())",
                "+                        .orElse(ImmutableList.of()))",
                "+                .addAll(declaredClasspathEntries)",
                "+                .build(),",
                "+            kotlinc,",
                "+            ImmutableList.<String>builder()",
                "+                .addAll(extraArguments)",
                "+                .add(MODULE_NAME)",
                "+                .add(invokingRule.getShortNameAndFlavorPostfix())",
                "+                .add(COMPILER_BUILTINS)",
                "+                .add(LOAD_BUILTINS_FROM)",
                "+                .add(PLUGIN)",
                "+                .add(KAPT3_PLUGIN + APT_MODE + \"apt,\" + join)",
                "+                .add(X_PLUGIN_ARG + kotlinc.getAnnotationProcessorPath())",
                "+                .build(),",
                "+            filesystem,",
                "+            Optional.of(workingDirectory)));",
                "   }",
                "@@ -141,2 +385,32 @@ public class KotlincToJarStepFactory extends CompileToJarStepFactory implements",
                "   }",
                "+",
                "+  private void addCreateFolderStep(",
                "+      ImmutableList.Builder<Step> steps,",
                "+      ProjectFilesystem filesystem,",
                "+      BuildableContext buildableContext,",
                "+      BuildContext buildContext,",
                "+      Path location) {",
                "+    steps.addAll(",
                "+        MakeCleanDirectoryStep.of(",
                "+            BuildCellRelativePath.fromCellRelativePath(",
                "+                buildContext.getBuildCellRootPath(), filesystem, location)));",
                "+    buildableContext.recordArtifact(location);",
                "+  }",
                "+",
                "+  private String encodeOptions(Map<String, String> options) {",
                "+    try (ByteArrayOutputStream os = new ByteArrayOutputStream();",
                "+        ObjectOutputStream oos = new ObjectOutputStream(os)) {",
                "+",
                "+      oos.writeInt(options.size());",
                "+      for (Map.Entry<String, String> entry : options.entrySet()) {",
                "+        oos.writeUTF(entry.getKey());",
                "+        oos.writeUTF(entry.getValue());",
                "+      }",
                "+",
                "+      oos.flush();",
                "+      return printBase64Binary(os.toByteArray());",
                "+    } catch (IOException e) {",
                "+      throw new RuntimeException(e);",
                "+    }",
                "+  }",
                " }",
                "diff --git a/src/com/facebook/buck/jvm/kotlin/PathMatchers.java b/src/com/facebook/buck/jvm/kotlin/PathMatchers.java",
                "new file mode 100644",
                "index 0000000000..851e89f87f",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/jvm/kotlin/PathMatchers.java",
                "@@ -0,0 +1,26 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.jvm.kotlin;",
                "+",
                "+import com.facebook.buck.io.filesystem.PathOrGlobMatcher;",
                "+",
                "+public class PathMatchers {",
                "+",
                "+  public static final PathOrGlobMatcher KOTLIN_PATH_MATCHER = new PathOrGlobMatcher(\"**.kt\");",
                "+",
                "+  public static final PathOrGlobMatcher JAVA_PATH_MATCHER = new PathOrGlobMatcher(\"**.java\");",
                "+}",
                "diff --git a/src/com/facebook/buck/zip/BUCK b/src/com/facebook/buck/zip/BUCK",
                "index cb015fd9f3..ae8542de0e 100644",
                "--- a/src/com/facebook/buck/zip/BUCK",
                "+++ b/src/com/facebook/buck/zip/BUCK",
                "@@ -13,2 +13,3 @@ java_immutables_library(",
                "         \"//src/com/facebook/buck/jvm/java:rules\",",
                "+        \"//src/com/facebook/buck/jvm/kotlin:kotlin\",",
                "         \"//src/com/facebook/buck/rules:rules\",",
                "diff --git a/test/com/facebook/buck/android/testdata/android_project/kotlin/kotlinc/lib/kotlin-annotation-processing.jar b/test/com/facebook/buck/android/testdata/android_project/kotlin/kotlinc/lib/kotlin-annotation-processing.jar",
                "new file mode 100644",
                "index 0000000000..a5430ba968",
                "Binary files /dev/null and b/test/com/facebook/buck/android/testdata/android_project/kotlin/kotlinc/lib/kotlin-annotation-processing.jar differ",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/KotlinLibraryIntegrationTest.java b/test/com/facebook/buck/jvm/kotlin/KotlinLibraryIntegrationTest.java",
                "index 48d9fd4446..2c093d5809 100644",
                "--- a/test/com/facebook/buck/jvm/kotlin/KotlinLibraryIntegrationTest.java",
                "+++ b/test/com/facebook/buck/jvm/kotlin/KotlinLibraryIntegrationTest.java",
                "@@ -52,2 +52,8 @@ public class KotlinLibraryIntegrationTest {",
                "+  @Test",
                "+  public void shouldAnnotationProcessorClass() throws Exception {",
                "+    ProcessResult buildResult = workspace.runBuckCommand(\"build\", \"//com/example/ap:kotlin\");",
                "+    buildResult.assertSuccess(\"Build should have succeeded.\");",
                "+  }",
                "+",
                "   @Test",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/AJavaClass.java b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/AJavaClass.java",
                "new file mode 100644",
                "index 0000000000..e0a92f1587",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/AJavaClass.java",
                "@@ -0,0 +1,10 @@",
                "+package com.example.ap;",
                "+",
                "+class AJavaClass {",
                "+  public void foo() {",
                "+    new JavaClassWithJavaAnnotation_();",
                "+    new KotlinClassWithJavaAnnotation_();",
                "+    new JavaClassWithKotlinAnnotation_();",
                "+    new KotlinClassWithJavaAnnotation_();",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/AKotlinClass.kt b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/AKotlinClass.kt",
                "new file mode 100644",
                "index 0000000000..09c55a7450",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/AKotlinClass.kt",
                "@@ -0,0 +1,10 @@",
                "+package com.example.ap",
                "+",
                "+class AKotlinClass {",
                "+    fun foo() {",
                "+        JavaClassWithJavaAnnotation_()",
                "+        KotlinClassWithJavaAnnotation_()",
                "+        JavaClassWithKotlinAnnotation_()",
                "+        KotlinClassWithJavaAnnotation_()",
                "+    }",
                "+}",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/BUCK.fixture b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..4f0b5c5a83",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/BUCK.fixture",
                "@@ -0,0 +1,18 @@",
                "+kotlin_library(",
                "+    name = \"kotlin\",",
                "+    srcs = glob([",
                "+        \"*.kt\",",
                "+        \"*.java\",",
                "+    ]),",
                "+    plugins = [",
                "+        \"//com/example/ap/javaap:ap\",",
                "+        \"//com/example/ap/kotlinap:ap\",",
                "+    ],",
                "+    visibility = [",
                "+        \"PUBLIC\",",
                "+    ],",
                "+    deps = [",
                "+        \"//com/example/ap/javaannotation:annotation-lib\",",
                "+        \"//com/example/ap/kotlinannotation:annotation-lib\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/JavaClassWithJavaAnnotation.java b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/JavaClassWithJavaAnnotation.java",
                "new file mode 100644",
                "index 0000000000..4d97c9992d",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/JavaClassWithJavaAnnotation.java",
                "@@ -0,0 +1,6 @@",
                "+package com.example.ap;",
                "+",
                "+import com.example.ap.javaannotation.JavaAnnotation;",
                "+",
                "+@JavaAnnotation",
                "+class JavaClassWithJavaAnnotation {}",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/JavaClassWithKotlinAnnotation.java b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/JavaClassWithKotlinAnnotation.java",
                "new file mode 100644",
                "index 0000000000..54f579f4de",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/JavaClassWithKotlinAnnotation.java",
                "@@ -0,0 +1,6 @@",
                "+package com.example.ap;",
                "+",
                "+import com.example.ap.kotlinannotation.KotlinAnnotation;",
                "+",
                "+@KotlinAnnotation",
                "+class JavaClassWithKotlinAnnotation {}",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/KotlinClassWithJavaAnnotation.kt b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/KotlinClassWithJavaAnnotation.kt",
                "new file mode 100644",
                "index 0000000000..2fc60cf079",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/KotlinClassWithJavaAnnotation.kt",
                "@@ -0,0 +1,6 @@",
                "+package com.example.ap",
                "+",
                "+import com.example.ap.javaannotation.JavaAnnotation",
                "+",
                "+@JavaAnnotation",
                "+class KotlinClassWithJavaAnnotation",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/KotlinClassWithKotlinAnnotation.kt b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/KotlinClassWithKotlinAnnotation.kt",
                "new file mode 100644",
                "index 0000000000..ab69754b83",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/KotlinClassWithKotlinAnnotation.kt",
                "@@ -0,0 +1,6 @@",
                "+package com.example.ap",
                "+",
                "+import com.example.ap.kotlinannotation.KotlinAnnotation",
                "+",
                "+@KotlinAnnotation",
                "+class KotlinClassWithKotlinAnnotation",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaannotation/BUCK.fixture b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaannotation/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..19695f0735",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaannotation/BUCK.fixture",
                "@@ -0,0 +1,9 @@",
                "+java_library(",
                "+    name = \"annotation-lib\",",
                "+    srcs = [",
                "+        \"JavaAnnotation.java\",",
                "+    ],",
                "+    visibility = [",
                "+        \"PUBLIC\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaannotation/JavaAnnotation.java b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaannotation/JavaAnnotation.java",
                "new file mode 100644",
                "index 0000000000..a0cc91ea97",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaannotation/JavaAnnotation.java",
                "@@ -0,0 +1,10 @@",
                "+package com.example.ap.javaannotation;",
                "+",
                "+import java.lang.annotation.ElementType;",
                "+import java.lang.annotation.Retention;",
                "+import java.lang.annotation.RetentionPolicy;",
                "+import java.lang.annotation.Target;",
                "+",
                "+@Target(ElementType.TYPE)",
                "+@Retention(RetentionPolicy.RUNTIME)",
                "+public @interface JavaAnnotation {}",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaap/AnnotationProcessor.java b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaap/AnnotationProcessor.java",
                "new file mode 100644",
                "index 0000000000..365a041992",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaap/AnnotationProcessor.java",
                "@@ -0,0 +1,48 @@",
                "+package com.example.ap.javaap;",
                "+",
                "+import com.example.ap.javaannotation.JavaAnnotation;",
                "+import com.squareup.javapoet.JavaFile;",
                "+import com.squareup.javapoet.TypeSpec;",
                "+import java.io.IOException;",
                "+import java.util.Set;",
                "+import javax.annotation.processing.AbstractProcessor;",
                "+import javax.annotation.processing.RoundEnvironment;",
                "+import javax.annotation.processing.SupportedAnnotationTypes;",
                "+import javax.annotation.processing.SupportedOptions;",
                "+import javax.annotation.processing.SupportedSourceVersion;",
                "+import javax.lang.model.SourceVersion;",
                "+import javax.lang.model.element.Element;",
                "+import javax.lang.model.element.Modifier;",
                "+import javax.lang.model.element.TypeElement;",
                "+",
                "+@SupportedAnnotationTypes(\"com.example.ap.javaannotation.JavaAnnotation\")",
                "+@SupportedSourceVersion(SourceVersion.RELEASE_8)",
                "+@SupportedOptions({})",
                "+public class AnnotationProcessor extends AbstractProcessor {",
                "+",
                "+  @Override",
                "+  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {",
                "+    Set<? extends Element> elements = roundEnv.getElementsAnnotatedWith(JavaAnnotation.class);",
                "+    for (Element e : elements) {",
                "+      try {",
                "+        String className = e.getSimpleName().toString();",
                "+        String pkg = processingEnv.getElementUtils().getPackageOf(e).toString();",
                "+        generateClass(className, pkg);",
                "+      } catch (IOException ex) {",
                "+        throw new RuntimeException(ex);",
                "+      }",
                "+    }",
                "+    return true;",
                "+  }",
                "+",
                "+  public void generateClass(String name, String pkg) throws IOException {",
                "+    String fileName = name + \"_\";",
                "+",
                "+    TypeSpec helloWorld =",
                "+        TypeSpec.classBuilder(fileName).addModifiers(Modifier.PUBLIC, Modifier.FINAL).build();",
                "+",
                "+    JavaFile javaFile = JavaFile.builder(pkg, helloWorld).build();",
                "+",
                "+    javaFile.writeTo(processingEnv.getFiler());",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaap/BUCK.fixture b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaap/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..85d314d9da",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaap/BUCK.fixture",
                "@@ -0,0 +1,30 @@",
                "+java_annotation_processor(",
                "+    name = \"ap\",",
                "+    processor_class = \"\",",
                "+    visibility = [",
                "+        \"PUBLIC\",",
                "+    ],",
                "+    deps = [",
                "+        \":ap-lib\",",
                "+    ],",
                "+)",
                "+",
                "+java_library(",
                "+    name = \"ap-lib\",",
                "+    srcs = [",
                "+        \"AnnotationProcessor.java\",",
                "+    ],",
                "+    resources = glob([",
                "+        \"resources/**\",",
                "+    ]),",
                "+    resources_root = \"resources\",",
                "+    source = \"8\",",
                "+    target = \"8\",",
                "+    visibility = [",
                "+        \"//com/example/ap/javaap:ap\",",
                "+    ],",
                "+    deps = [",
                "+        \"//com/example/ap/javaannotation:annotation-lib\",",
                "+        \"//com/example/ap/libs:javapoet.jar\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaap/resources/META-INF/services/javax.annotation.processing.Processor b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaap/resources/META-INF/services/javax.annotation.processing.Processor",
                "new file mode 100644",
                "index 0000000000..4c69774f11",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaap/resources/META-INF/services/javax.annotation.processing.Processor",
                "@@ -0,0 +1 @@",
                "+com.example.ap.javaap.AnnotationProcessor",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinannotation/BUCK.fixture b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinannotation/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..73731449ad",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinannotation/BUCK.fixture",
                "@@ -0,0 +1,9 @@",
                "+kotlin_library(",
                "+    name = \"annotation-lib\",",
                "+    srcs = [",
                "+        \"KotlinAnnotation.kt\",",
                "+    ],",
                "+    visibility = [",
                "+        \"PUBLIC\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinannotation/KotlinAnnotation.kt b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinannotation/KotlinAnnotation.kt",
                "new file mode 100644",
                "index 0000000000..8610cd75fa",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinannotation/KotlinAnnotation.kt",
                "@@ -0,0 +1,3 @@",
                "+package com.example.ap.kotlinannotation",
                "+",
                "+annotation class KotlinAnnotation",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinap/AnnotationProcessorKotlin.kt b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinap/AnnotationProcessorKotlin.kt",
                "new file mode 100644",
                "index 0000000000..1ff4323111",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinap/AnnotationProcessorKotlin.kt",
                "@@ -0,0 +1,46 @@",
                "+package com.example.ap.kotlinap",
                "+",
                "+import java.io.File",
                "+import java.io.OutputStreamWriter",
                "+import java.nio.charset.StandardCharsets",
                "+import java.nio.file.Files",
                "+import javax.annotation.processing.*",
                "+import javax.lang.model.SourceVersion",
                "+import javax.lang.model.element.TypeElement",
                "+",
                "+import com.example.ap.kotlinannotation.KotlinAnnotation",
                "+import com.squareup.kotlinpoet.FileSpec",
                "+import com.squareup.kotlinpoet.TypeSpec",
                "+",
                "+class AnnotationProcessorKotlin : AbstractProcessor() {",
                "+",
                "+    override fun getSupportedAnnotationTypes(): MutableSet<String> {",
                "+        return mutableSetOf(KotlinAnnotation::class.java.name)",
                "+    }",
                "+",
                "+    override fun getSupportedSourceVersion(): SourceVersion {",
                "+        return SourceVersion.latest()",
                "+    }",
                "+",
                "+    override fun process(annotations: MutableSet<out TypeElement>, roundEnv: RoundEnvironment): Boolean {",
                "+        roundEnv.getElementsAnnotatedWith(KotlinAnnotation::class.java)",
                "+                .forEach {",
                "+                    val className = it.simpleName.toString()",
                "+                    val pkg = processingEnv.elementUtils.getPackageOf(it).toString()",
                "+                    generateClass(className, pkg)",
                "+                }",
                "+        return true",
                "+    }",
                "+",
                "+    private fun generateClass(name: String, pkg: String) {",
                "+        val genDir = processingEnv.options[\"kapt.kotlin.generated\"]",
                "+        val fileName = \"${name}_\"",
                "+        val file = FileSpec",
                "+                .builder(pkg, fileName)",
                "+                .addType(TypeSpec",
                "+                        .classBuilder(fileName)",
                "+                        .build()",
                "+                ).build()",
                "+        file.writeTo(File(genDir))",
                "+    }",
                "+}",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinap/BUCK.fixture b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinap/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..29c0a7f773",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinap/BUCK.fixture",
                "@@ -0,0 +1,28 @@",
                "+java_annotation_processor(",
                "+    name = \"ap\",",
                "+    processor_class = \"\",",
                "+    visibility = [",
                "+        \"PUBLIC\",",
                "+    ],",
                "+    deps = [",
                "+        \":ap-lib\",",
                "+    ],",
                "+)",
                "+",
                "+kotlin_library(",
                "+    name = \"ap-lib\",",
                "+    srcs = [",
                "+        \"AnnotationProcessorKotlin.kt\",",
                "+    ],",
                "+    resources = glob([",
                "+        \"resources/**\",",
                "+    ]),",
                "+    resources_root = \"resources\",",
                "+    visibility = [",
                "+        \"PUBLIC\",",
                "+    ],",
                "+    deps = [",
                "+        \"//com/example/ap/kotlinannotation:annotation-lib\",",
                "+        \"//com/example/ap/libs:kotlinpoet.jar\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinap/resources/META-INF/services/javax.annotation.processing.Processor b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinap/resources/META-INF/services/javax.annotation.processing.Processor",
                "new file mode 100644",
                "index 0000000000..2de309ad41",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinap/resources/META-INF/services/javax.annotation.processing.Processor",
                "@@ -0,0 +1 @@",
                "+com.example.ap.kotlinap.AnnotationProcessorKotlin",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/libs/BUCK.fixture b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/libs/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..e6b9e19411",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/libs/BUCK.fixture",
                "@@ -0,0 +1,14 @@",
                "+import re",
                "+",
                "+file_name_regex = re.compile(",
                "+    \"^.*/([^/]+)\\.(jar|aar)$\",",
                "+    re.IGNORECASE,",
                "+)",
                "+",
                "+for jar in glob(['*.jar']):",
                "+  name = file_name_regex.sub(r'\\1', jar)",
                "+  prebuilt_jar(",
                "+    name = jar,",
                "+    binary_jar = jar,",
                "+    visibility = ['PUBLIC'],",
                "+  )",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/libs/javapoet.jar b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/libs/javapoet.jar",
                "new file mode 100644",
                "index 0000000000..1b595cce9e",
                "Binary files /dev/null and b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/libs/javapoet.jar differ",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/libs/kotlinpoet.jar b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/libs/kotlinpoet.jar",
                "new file mode 100644",
                "index 0000000000..5f6aa1018b",
                "Binary files /dev/null and b/test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/libs/kotlinpoet.jar differ",
                "diff --git a/test/com/facebook/buck/jvm/kotlin/testdata/kotlinc/lib/kotlin-annotation-processing.jar b/test/com/facebook/buck/jvm/kotlin/testdata/kotlinc/lib/kotlin-annotation-processing.jar",
                "new file mode 100644",
                "index 0000000000..a5430ba968",
                "Binary files /dev/null and b/test/com/facebook/buck/jvm/kotlin/testdata/kotlinc/lib/kotlin-annotation-processing.jar differ"
            ],
            "changed_files": [
                "docs/rule/kotlin_library.soy",
                "src/com/facebook/buck/jvm/java/BUCK",
                "src/com/facebook/buck/jvm/java/JdkProvidedInMemoryJavac.java",
                "src/com/facebook/buck/jvm/java/Jsr199JavacInvocation.java",
                "src/com/facebook/buck/jvm/java/javax/BUCK",
                "src/com/facebook/buck/jvm/java/javax/SynchronizedToolProvider.java",
                "src/com/facebook/buck/jvm/kotlin/AbstractKotlincVersion.java",
                "src/com/facebook/buck/jvm/kotlin/BUCK",
                "src/com/facebook/buck/jvm/kotlin/ExternalKotlinc.java",
                "src/com/facebook/buck/jvm/kotlin/JarBackedReflectedKotlinc.java",
                "src/com/facebook/buck/jvm/kotlin/KotlinBuckConfig.java",
                "src/com/facebook/buck/jvm/kotlin/KotlinConfiguredCompilerFactory.java",
                "src/com/facebook/buck/jvm/kotlin/Kotlinc.java",
                "src/com/facebook/buck/jvm/kotlin/KotlincStep.java",
                "src/com/facebook/buck/jvm/kotlin/KotlincToJarStepFactory.java",
                "src/com/facebook/buck/jvm/kotlin/PathMatchers.java",
                "src/com/facebook/buck/zip/BUCK",
                "test/com/facebook/buck/android/testdata/android_project/kotlin/kotlinc/lib/kotlin-annotation-processing.jar",
                "test/com/facebook/buck/jvm/kotlin/KotlinLibraryIntegrationTest.java",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/AJavaClass.java",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/AKotlinClass.kt",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/BUCK.fixture",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/JavaClassWithJavaAnnotation.java",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/JavaClassWithKotlinAnnotation.java",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/KotlinClassWithJavaAnnotation.kt",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/KotlinClassWithKotlinAnnotation.kt",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaannotation/BUCK.fixture",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaannotation/JavaAnnotation.java",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaap/AnnotationProcessor.java",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaap/BUCK.fixture",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/javaap/resources/META-INF/services/javax.annotation.processing.Processor",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinannotation/BUCK.fixture",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinannotation/KotlinAnnotation.kt",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinap/AnnotationProcessorKotlin.kt",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinap/BUCK.fixture",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/kotlinap/resources/META-INF/services/javax.annotation.processing.Processor",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/libs/BUCK.fixture",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/libs/javapoet.jar",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlin_library_description/com/example/ap/libs/kotlinpoet.jar",
                "test/com/facebook/buck/jvm/kotlin/testdata/kotlinc/lib/kotlin-annotation-processing.jar"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "956": "Kotlin support uber/okbuck#323 Kotlin in-memory compiler support. #1283 Kotlin Support Tracker uber/okbuck#400 #956 Add kotlin annotation processor (kapt) support. #1584 Confusion around kapt's generated option #1891 Automatic recompilation for Kotlin sources on quarkusDev does not work with Quarkus 2.0.0.CR3 (with gradle) quarkusio/quarkus#18166"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, version",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 956",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9c57d5b1679bd9fc1f24b03f937715e308d6656f",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521715031,
            "hunks": 33,
            "message": "Adding LOCAL_BUILD_WITH_REMOTE_EXECUTION mode to stampede.thrift file. Summary: Paving the way to support another build mode in Stampede. See comments about it in the [stampede.thrift] changed file. Test Plan: CI (thrift generated code update) Reviewed By: aiked fbshipit-source-id: aa31f4b",
            "diff": [
                "diff --git a/src-gen/com/facebook/buck/distributed/thrift/BuildMode.java b/src-gen/com/facebook/buck/distributed/thrift/BuildMode.java",
                "index 0cee10165c..742e0772e8 100644",
                "--- a/src-gen/com/facebook/buck/distributed/thrift/BuildMode.java",
                "+++ b/src-gen/com/facebook/buck/distributed/thrift/BuildMode.java",
                "@@ -17,3 +17,4 @@ public enum BuildMode implements org.apache.thrift.TEnum {",
                "   DISTRIBUTED_BUILD_WITH_REMOTE_COORDINATOR(2),",
                "-  DISTRIBUTED_BUILD_WITH_LOCAL_COORDINATOR(3);",
                "+  DISTRIBUTED_BUILD_WITH_LOCAL_COORDINATOR(3),",
                "+  LOCAL_BUILD_WITH_REMOTE_EXECUTION(4);",
                "@@ -46,2 +47,4 @@ public enum BuildMode implements org.apache.thrift.TEnum {",
                "         return DISTRIBUTED_BUILD_WITH_LOCAL_COORDINATOR;",
                "+      case 4:",
                "+        return LOCAL_BUILD_WITH_REMOTE_EXECUTION;",
                "       default:",
                "diff --git a/src-gen/com/facebook/buck/distributed/thrift/FetchRuleKeyLogsResponse.java b/src-gen/com/facebook/buck/distributed/thrift/FetchRuleKeyLogsResponse.java",
                "index 2b746e4436..5fafc7669c 100644",
                "--- a/src-gen/com/facebook/buck/distributed/thrift/FetchRuleKeyLogsResponse.java",
                "+++ b/src-gen/com/facebook/buck/distributed/thrift/FetchRuleKeyLogsResponse.java",
                "@@ -14,2 +14,3 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "   private static final org.apache.thrift.protocol.TField RULE_KEY_LOGS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"ruleKeyLogs\", org.apache.thrift.protocol.TType.LIST, (short)1);",
                "+  private static final org.apache.thrift.protocol.TField LOOKED_UP_STORE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"lookedUpStoreIds\", org.apache.thrift.protocol.TType.LIST, (short)2);",
                "@@ -19,2 +20,3 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "   public java.util.List<RuleKeyLogEntry> ruleKeyLogs; // optional",
                "+  public java.util.List<java.lang.String> lookedUpStoreIds; // optional",
                "@@ -22,3 +24,4 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "   public enum _Fields implements org.apache.thrift.TFieldIdEnum {",
                "-    RULE_KEY_LOGS((short)1, \"ruleKeyLogs\");",
                "+    RULE_KEY_LOGS((short)1, \"ruleKeyLogs\"),",
                "+    LOOKED_UP_STORE_IDS((short)2, \"lookedUpStoreIds\");",
                "@@ -39,2 +42,4 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "           return RULE_KEY_LOGS;",
                "+        case 2: // LOOKED_UP_STORE_IDS",
                "+          return LOOKED_UP_STORE_IDS;",
                "         default:",
                "@@ -79,3 +84,3 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "   // isset id assignments",
                "-  private static final _Fields optionals[] = {_Fields.RULE_KEY_LOGS};",
                "+  private static final _Fields optionals[] = {_Fields.RULE_KEY_LOGS,_Fields.LOOKED_UP_STORE_IDS};",
                "   public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;",
                "@@ -86,2 +91,5 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RuleKeyLogEntry.class))));",
                "+    tmpMap.put(_Fields.LOOKED_UP_STORE_IDS, new org.apache.thrift.meta_data.FieldMetaData(\"lookedUpStoreIds\", org.apache.thrift.TFieldRequirementType.OPTIONAL, ",
                "+        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, ",
                "+            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));",
                "     metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);",
                "@@ -104,2 +112,6 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "     }",
                "+    if (other.isSetLookedUpStoreIds()) {",
                "+      java.util.List<java.lang.String> __this__lookedUpStoreIds = new java.util.ArrayList<java.lang.String>(other.lookedUpStoreIds);",
                "+      this.lookedUpStoreIds = __this__lookedUpStoreIds;",
                "+    }",
                "   }",
                "@@ -113,2 +125,3 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "     this.ruleKeyLogs = null;",
                "+    this.lookedUpStoreIds = null;",
                "   }",
                "@@ -154,2 +167,41 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "+  public int getLookedUpStoreIdsSize() {",
                "+    return (this.lookedUpStoreIds == null) ? 0 : this.lookedUpStoreIds.size();",
                "+  }",
                "+",
                "+  public java.util.Iterator<java.lang.String> getLookedUpStoreIdsIterator() {",
                "+    return (this.lookedUpStoreIds == null) ? null : this.lookedUpStoreIds.iterator();",
                "+  }",
                "+",
                "+  public void addToLookedUpStoreIds(java.lang.String elem) {",
                "+    if (this.lookedUpStoreIds == null) {",
                "+      this.lookedUpStoreIds = new java.util.ArrayList<java.lang.String>();",
                "+    }",
                "+    this.lookedUpStoreIds.add(elem);",
                "+  }",
                "+",
                "+  public java.util.List<java.lang.String> getLookedUpStoreIds() {",
                "+    return this.lookedUpStoreIds;",
                "+  }",
                "+",
                "+  public FetchRuleKeyLogsResponse setLookedUpStoreIds(java.util.List<java.lang.String> lookedUpStoreIds) {",
                "+    this.lookedUpStoreIds = lookedUpStoreIds;",
                "+    return this;",
                "+  }",
                "+",
                "+  public void unsetLookedUpStoreIds() {",
                "+    this.lookedUpStoreIds = null;",
                "+  }",
                "+",
                "+  /** Returns true if field lookedUpStoreIds is set (has been assigned a value) and false otherwise */",
                "+  public boolean isSetLookedUpStoreIds() {",
                "+    return this.lookedUpStoreIds != null;",
                "+  }",
                "+",
                "+  public void setLookedUpStoreIdsIsSet(boolean value) {",
                "+    if (!value) {",
                "+      this.lookedUpStoreIds = null;",
                "+    }",
                "+  }",
                "+",
                "   public void setFieldValue(_Fields field, java.lang.Object value) {",
                "@@ -164,2 +216,10 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "+    case LOOKED_UP_STORE_IDS:",
                "+      if (value == null) {",
                "+        unsetLookedUpStoreIds();",
                "+      } else {",
                "+        setLookedUpStoreIds((java.util.List<java.lang.String>)value);",
                "+      }",
                "+      break;",
                "+",
                "     }",
                "@@ -172,2 +232,5 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "+    case LOOKED_UP_STORE_IDS:",
                "+      return getLookedUpStoreIds();",
                "+",
                "     }",
                "@@ -185,2 +248,4 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "       return isSetRuleKeyLogs();",
                "+    case LOOKED_UP_STORE_IDS:",
                "+      return isSetLookedUpStoreIds();",
                "     }",
                "@@ -213,2 +278,11 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "+    boolean this_present_lookedUpStoreIds = true && this.isSetLookedUpStoreIds();",
                "+    boolean that_present_lookedUpStoreIds = true && that.isSetLookedUpStoreIds();",
                "+    if (this_present_lookedUpStoreIds || that_present_lookedUpStoreIds) {",
                "+      if (!(this_present_lookedUpStoreIds && that_present_lookedUpStoreIds))",
                "+        return false;",
                "+      if (!this.lookedUpStoreIds.equals(that.lookedUpStoreIds))",
                "+        return false;",
                "+    }",
                "+",
                "     return true;",
                "@@ -224,2 +298,6 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "+    hashCode = hashCode * 8191 + ((isSetLookedUpStoreIds()) ? 131071 : 524287);",
                "+    if (isSetLookedUpStoreIds())",
                "+      hashCode = hashCode * 8191 + lookedUpStoreIds.hashCode();",
                "+",
                "     return hashCode;",
                "@@ -245,2 +323,12 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "     }",
                "+    lastComparison = java.lang.Boolean.valueOf(isSetLookedUpStoreIds()).compareTo(other.isSetLookedUpStoreIds());",
                "+    if (lastComparison != 0) {",
                "+      return lastComparison;",
                "+    }",
                "+    if (isSetLookedUpStoreIds()) {",
                "+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookedUpStoreIds, other.lookedUpStoreIds);",
                "+      if (lastComparison != 0) {",
                "+        return lastComparison;",
                "+      }",
                "+    }",
                "     return 0;",
                "@@ -274,2 +362,12 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "     }",
                "+    if (isSetLookedUpStoreIds()) {",
                "+      if (!first) sb.append(\", \");",
                "+      sb.append(\"lookedUpStoreIds:\");",
                "+      if (this.lookedUpStoreIds == null) {",
                "+        sb.append(\"null\");",
                "+      } else {",
                "+        sb.append(this.lookedUpStoreIds);",
                "+      }",
                "+      first = false;",
                "+    }",
                "     sb.append(\")\");",
                "@@ -336,2 +434,20 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "             break;",
                "+          case 2: // LOOKED_UP_STORE_IDS",
                "+            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {",
                "+              {",
                "+                org.apache.thrift.protocol.TList _list187 = iprot.readListBegin();",
                "+                struct.lookedUpStoreIds = new java.util.ArrayList<java.lang.String>(_list187.size);",
                "+                java.lang.String _elem188;",
                "+                for (int _i189 = 0; _i189 < _list187.size; ++_i189)",
                "+                {",
                "+                  _elem188 = iprot.readString();",
                "+                  struct.lookedUpStoreIds.add(_elem188);",
                "+                }",
                "+                iprot.readListEnd();",
                "+              }",
                "+              struct.setLookedUpStoreIdsIsSet(true);",
                "+            } else { ",
                "+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);",
                "+            }",
                "+            break;",
                "           default:",
                "@@ -356,5 +472,19 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ruleKeyLogs.size()));",
                "-            for (RuleKeyLogEntry _iter187 : struct.ruleKeyLogs)",
                "+            for (RuleKeyLogEntry _iter190 : struct.ruleKeyLogs)",
                "             {",
                "-              _iter187.write(oprot);",
                "+              _iter190.write(oprot);",
                "+            }",
                "+            oprot.writeListEnd();",
                "+          }",
                "+          oprot.writeFieldEnd();",
                "+        }",
                "+      }",
                "+      if (struct.lookedUpStoreIds != null) {",
                "+        if (struct.isSetLookedUpStoreIds()) {",
                "+          oprot.writeFieldBegin(LOOKED_UP_STORE_IDS_FIELD_DESC);",
                "+          {",
                "+            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.lookedUpStoreIds.size()));",
                "+            for (java.lang.String _iter191 : struct.lookedUpStoreIds)",
                "+            {",
                "+              oprot.writeString(_iter191);",
                "             }",
                "@@ -386,3 +516,6 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "       }",
                "-      oprot.writeBitSet(optionals, 1);",
                "+      if (struct.isSetLookedUpStoreIds()) {",
                "+        optionals.set(1);",
                "+      }",
                "+      oprot.writeBitSet(optionals, 2);",
                "       if (struct.isSetRuleKeyLogs()) {",
                "@@ -390,5 +523,14 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "           oprot.writeI32(struct.ruleKeyLogs.size());",
                "-          for (RuleKeyLogEntry _iter188 : struct.ruleKeyLogs)",
                "+          for (RuleKeyLogEntry _iter192 : struct.ruleKeyLogs)",
                "+          {",
                "+            _iter192.write(oprot);",
                "+          }",
                "+        }",
                "+      }",
                "+      if (struct.isSetLookedUpStoreIds()) {",
                "+        {",
                "+          oprot.writeI32(struct.lookedUpStoreIds.size());",
                "+          for (java.lang.String _iter193 : struct.lookedUpStoreIds)",
                "           {",
                "-            _iter188.write(oprot);",
                "+            oprot.writeString(_iter193);",
                "           }",
                "@@ -401,13 +543,13 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "       org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;",
                "-      java.util.BitSet incoming = iprot.readBitSet(1);",
                "+      java.util.BitSet incoming = iprot.readBitSet(2);",
                "       if (incoming.get(0)) {",
                "         {",
                "-          org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());",
                "-          struct.ruleKeyLogs = new java.util.ArrayList<RuleKeyLogEntry>(_list189.size);",
                "-          RuleKeyLogEntry _elem190;",
                "-          for (int _i191 = 0; _i191 < _list189.size; ++_i191)",
                "+          org.apache.thrift.protocol.TList _list194 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());",
                "+          struct.ruleKeyLogs = new java.util.ArrayList<RuleKeyLogEntry>(_list194.size);",
                "+          RuleKeyLogEntry _elem195;",
                "+          for (int _i196 = 0; _i196 < _list194.size; ++_i196)",
                "           {",
                "-            _elem190 = new RuleKeyLogEntry();",
                "-            _elem190.read(iprot);",
                "-            struct.ruleKeyLogs.add(_elem190);",
                "+            _elem195 = new RuleKeyLogEntry();",
                "+            _elem195.read(iprot);",
                "+            struct.ruleKeyLogs.add(_elem195);",
                "           }",
                "@@ -416,2 +558,15 @@ public class FetchRuleKeyLogsResponse implements org.apache.thrift.TBase<FetchRu",
                "       }",
                "+      if (incoming.get(1)) {",
                "+        {",
                "+          org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());",
                "+          struct.lookedUpStoreIds = new java.util.ArrayList<java.lang.String>(_list197.size);",
                "+          java.lang.String _elem198;",
                "+          for (int _i199 = 0; _i199 < _list197.size; ++_i199)",
                "+          {",
                "+            _elem198 = iprot.readString();",
                "+            struct.lookedUpStoreIds.add(_elem198);",
                "+          }",
                "+        }",
                "+        struct.setLookedUpStoreIdsIsSet(true);",
                "+      }",
                "     }",
                "diff --git a/src/com/facebook/buck/distributed/thrift/stampede.thrift b/src/com/facebook/buck/distributed/thrift/stampede.thrift",
                "index 1f24cc6003..390e375a30 100644",
                "--- a/src/com/facebook/buck/distributed/thrift/stampede.thrift",
                "+++ b/src/com/facebook/buck/distributed/thrift/stampede.thrift",
                "@@ -116,7 +116,15 @@ enum BuildMode {",
                "   UNKNOWN = 0,",
                "+",
                "   REMOTE_BUILD = 1,",
                "+",
                "   // A random BuildSlave will be the Coordinator.",
                "   DISTRIBUTED_BUILD_WITH_REMOTE_COORDINATOR = 2",
                "+",
                "   // The machine launching the build is the Coordinator.",
                "   DISTRIBUTED_BUILD_WITH_LOCAL_COORDINATOR = 3,",
                "+",
                "+  // The machine launching the build is the Coordinator and proceeds to a normal",
                "+  // local build using the CachingBuildEngine. Build nodes are sent to be built",
                "+  // remotely in a strategy similar to distcc.",
                "+  LOCAL_BUILD_WITH_REMOTE_EXECUTION = 4,",
                " }",
                "@@ -435,2 +443,3 @@ struct FetchRuleKeyLogsResponse {",
                "   1: optional list<RuleKeyLogEntry> ruleKeyLogs;",
                "+  2: optional list<string> lookedUpStoreIds;",
                " }"
            ],
            "changed_files": [
                "src-gen/com/facebook/buck/distributed/thrift/BuildMode.java",
                "src-gen/com/facebook/buck/distributed/thrift/FetchRuleKeyLogsResponse.java",
                "src/com/facebook/buck/distributed/thrift/stampede.thrift"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, execution",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "48f5999179cf2c43d3dcb30f2bf5688eab9a50bf",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521703806,
            "hunks": 1,
            "message": "`WorkerProcessPoolTest`: Also accept `WAITING` Summary: `WorkerProcessPoolTest` is waiting for a test thread to either terminate, or get blocked. This is achieved by waiting for the thread to either reach the `TERMINATED` or `BLOCKED` state. Occasionally, the thread will be in a `WAITING` state, and the test will time out after 90 seconds. Here, we also check whether for `WAITING`, and assert once reached. Test Plan: Running the test a couple of times did not block. However, we will have to monitor timeouts on CI over a certain amount of time to find out whether this change is enough Reviewed By: bobyangyf fbshipit-source-id: e4d26dd",
            "diff": [
                "diff --git a/test/com/facebook/buck/worker/WorkerProcessPoolTest.java b/test/com/facebook/buck/worker/WorkerProcessPoolTest.java",
                "index 0eca3b9b7a..c947786c51 100644",
                "--- a/test/com/facebook/buck/worker/WorkerProcessPoolTest.java",
                "+++ b/test/com/facebook/buck/worker/WorkerProcessPoolTest.java",
                "@@ -247,3 +247,3 @@ public class WorkerProcessPoolTest {",
                "-    awaitThreadState(firstThread, State.TERMINATED, State.BLOCKED);",
                "+    awaitThreadState(firstThread, State.TERMINATED, State.BLOCKED, State.WAITING);",
                "     // here, thread 1 has borrowed a worker two times, or is blocked returning the first worker."
            ],
            "changed_files": [
                "test/com/facebook/buck/worker/WorkerProcessPoolTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: state",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "12904a1b8c9ef56b23b256581998063acccf3922",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521754583,
            "hunks": 12,
            "message": "ocaml: dedup flags setup code into a helper method Test Plan: CI Reviewed By: bobyangyf fbshipit-source-id: abc4464",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "index 2e0d6fa924..8b3e5d5912 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "@@ -28,3 +28,2 @@ import com.facebook.buck.rules.ImplicitDepsInferringDescription;",
                " import com.facebook.buck.rules.args.Arg;",
                "-import com.facebook.buck.rules.args.StringArg;",
                " import com.facebook.buck.rules.coercer.OcamlSource;",
                "@@ -69,5 +68,5 @@ public class OcamlBinaryDescription",
                "     ImmutableList<OcamlSource> srcs = args.getSrcs();",
                "-    ImmutableList.Builder<Arg> flags = ImmutableList.builder();",
                "-    flags.addAll(",
                "-        OcamlDescriptionEnhancer.toStringWithMacrosArgs(",
                "+",
                "+    ImmutableList<Arg> flags =",
                "+        OcamlRuleBuilder.getFlags(",
                "             buildTarget,",
                "@@ -75,9 +74,5 @@ public class OcamlBinaryDescription",
                "             context.getBuildRuleResolver(),",
                "-            args.getCompilerFlags()));",
                "-    if (ocamlPlatform.getWarningsFlags().isPresent() || args.getWarningsFlags().isPresent()) {",
                "-      flags.addAll(StringArg.from(\"-w\"));",
                "-      flags.addAll(",
                "-          StringArg.from(",
                "-              ocamlPlatform.getWarningsFlags().orElse(\"\") + args.getWarningsFlags().orElse(\"\")));",
                "-    }",
                "+            ocamlPlatform,",
                "+            args.getCompilerFlags(),",
                "+            args.getWarningsFlags());",
                "@@ -97,3 +92,3 @@ public class OcamlBinaryDescription",
                "               args.getBytecodeOnly().orElse(false),",
                "-              flags.build(),",
                "+              flags,",
                "               args.getOcamldepFlags(),",
                "@@ -113,3 +108,3 @@ public class OcamlBinaryDescription",
                "               args.getBytecodeOnly().orElse(false),",
                "-              flags.build(),",
                "+              flags,",
                "               args.getOcamldepFlags());",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "index 871682761f..a31911fe33 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "@@ -32,3 +32,2 @@ import com.facebook.buck.rules.SourcePathRuleFinder;",
                " import com.facebook.buck.rules.args.Arg;",
                "-import com.facebook.buck.rules.args.StringArg;",
                " import com.facebook.buck.rules.coercer.OcamlSource;",
                "@@ -76,5 +75,5 @@ public class OcamlLibraryDescription",
                "     ImmutableList<OcamlSource> srcs = args.getSrcs();",
                "-    ImmutableList.Builder<Arg> flagsBuilder = ImmutableList.builder();",
                "-    flagsBuilder.addAll(",
                "-        OcamlDescriptionEnhancer.toStringWithMacrosArgs(",
                "+",
                "+    ImmutableList<Arg> flags =",
                "+        OcamlRuleBuilder.getFlags(",
                "             buildTarget,",
                "@@ -82,10 +81,5 @@ public class OcamlLibraryDescription",
                "             context.getBuildRuleResolver(),",
                "-            args.getCompilerFlags()));",
                "-    if (ocamlPlatform.getWarningsFlags().isPresent() || args.getWarningsFlags().isPresent()) {",
                "-      flagsBuilder.addAll(",
                "-          StringArg.from(",
                "-              \"-w\",",
                "-              ocamlPlatform.getWarningsFlags().orElse(\"\") + args.getWarningsFlags().orElse(\"\")));",
                "-    }",
                "-    ImmutableList<Arg> flags = flagsBuilder.build();",
                "+            ocamlPlatform,",
                "+            args.getCompilerFlags(),",
                "+            args.getWarningsFlags());",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "index 18ffb427a1..5e0e8ece8f 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "@@ -36,2 +36,3 @@ import com.facebook.buck.rules.BuildTargetSourcePath;",
                " import com.facebook.buck.rules.BuildableSupport;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                " import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "@@ -41,3 +42,5 @@ import com.facebook.buck.rules.SourcePathRuleFinder;",
                " import com.facebook.buck.rules.args.Arg;",
                "+import com.facebook.buck.rules.args.StringArg;",
                " import com.facebook.buck.rules.coercer.OcamlSource;",
                "+import com.facebook.buck.rules.macros.StringWithMacros;",
                " import com.facebook.buck.util.Console;",
                "@@ -483,2 +486,20 @@ public class OcamlRuleBuilder {",
                "   }",
                "+",
                "+  static ImmutableList<Arg> getFlags(",
                "+      BuildTarget target,",
                "+      CellPathResolver cellRoots,",
                "+      BuildRuleResolver resolver,",
                "+      OcamlPlatform platform,",
                "+      ImmutableList<StringWithMacros> compilerFlags,",
                "+      Optional<String> warningsFlags) {",
                "+    ImmutableList.Builder<Arg> flags = ImmutableList.builder();",
                "+    flags.addAll(",
                "+        OcamlDescriptionEnhancer.toStringWithMacrosArgs(",
                "+            target, cellRoots, resolver, compilerFlags));",
                "+    if (platform.getWarningsFlags().isPresent() || warningsFlags.isPresent()) {",
                "+      flags.addAll(",
                "+          StringArg.from(\"-w\", platform.getWarningsFlags().orElse(\"\") + warningsFlags.orElse(\"\")));",
                "+    }",
                "+    return flags.build();",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlRuleBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d94bfa75b676eb811e04d87e059eed951e81eb19",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521844491,
            "hunks": 17,
            "message": "ocaml: don't pass OcamlLibrary rules into build context Summary: These are only every use to extract bytecode include dirs, so just do the extraction in `OcamlRuleBuilder` and pass them in. Reviewed By: styurin fbshipit-source-id: 94cf9b4",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java b/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "index b0e106ebc6..819926abd9 100644",
                "--- a/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "+++ b/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "@@ -86,2 +86,4 @@ abstract class AbstractOcamlBuildContext implements AddsToRuleKey {",
                "+  public abstract ImmutableSortedSet<String> getTransitiveBytecodeIncludes();",
                "+",
                "   /** Inputs for the native (ocamlopt) build */",
                "@@ -95,4 +97,2 @@ abstract class AbstractOcamlBuildContext implements AddsToRuleKey {",
                "-  public abstract List<OcamlLibrary> getOcamlInput();",
                "-",
                "   public abstract CxxPreprocessorInput getCxxPreprocessorInput();",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlBuildRulesGenerator.java b/src/com/facebook/buck/ocaml/OcamlBuildRulesGenerator.java",
                "index 80e0fdfe27..0b528ee607 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlBuildRulesGenerator.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlBuildRulesGenerator.java",
                "@@ -251,3 +251,3 @@ public class OcamlBuildRulesGenerator {",
                "                 ocamlContext.getBytecodeOutput(),",
                "-                ocamlContext.getOcamlInput(),",
                "+                ocamlContext.getTransitiveBytecodeIncludes(),",
                "                 ocamlContext.getBytecodeIncludeFlags()));",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlBuildStep.java b/src/com/facebook/buck/ocaml/OcamlBuildStep.java",
                "index f26946133b..0b6ee56366 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlBuildStep.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlBuildStep.java",
                "@@ -184,3 +184,3 @@ public class OcamlBuildStep implements Step {",
                "                   ocamlContext.getBytecodeOutput(),",
                "-                  ocamlContext.getOcamlInput(),",
                "+                  ocamlContext.getTransitiveBytecodeIncludes(),",
                "                   ocamlContext.getBytecodeIncludeFlags()));",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlDebugLauncherStep.java b/src/com/facebook/buck/ocaml/OcamlDebugLauncherStep.java",
                "index b39f0bed54..87c3f71b7c 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlDebugLauncherStep.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlDebugLauncherStep.java",
                "@@ -30,4 +30,4 @@ import com.facebook.buck.util.MoreIterables;",
                " import com.google.common.base.Joiner;",
                "-import com.google.common.collect.FluentIterable;",
                " import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                " import com.google.common.collect.Iterables;",
                "@@ -77,6 +77,2 @@ public class OcamlDebugLauncherStep implements Step {",
                "-    Iterable<String> includesBytecodeDirs =",
                "-        FluentIterable.from(args.ocamlInput)",
                "-            .transformAndConcat(OcamlLibrary::getBytecodeIncludeDirs);",
                "-",
                "     ImmutableList<String> includesBytecodeFlags =",
                "@@ -84,3 +80,4 @@ public class OcamlDebugLauncherStep implements Step {",
                "             MoreIterables.zipAndConcat(",
                "-                Iterables.cycle(OcamlCompilables.OCAML_INCLUDE_FLAG), includesBytecodeDirs));",
                "+                Iterables.cycle(OcamlCompilables.OCAML_INCLUDE_FLAG),",
                "+                args.transitiveBytecodeIncludes));",
                "@@ -109,3 +106,3 @@ public class OcamlDebugLauncherStep implements Step {",
                "-    public final ImmutableList<OcamlLibrary> ocamlInput;",
                "+    public final ImmutableSortedSet<String> transitiveBytecodeIncludes;",
                "     @AddToRuleKey public final ImmutableList<String> bytecodeIncludeFlags;",
                "@@ -115,3 +112,3 @@ public class OcamlDebugLauncherStep implements Step {",
                "         Path bytecodeOutput,",
                "-        List<OcamlLibrary> ocamlInput,",
                "+        ImmutableSortedSet<String> transitiveBytecodeIncludes,",
                "         List<String> bytecodeIncludeFlags) {",
                "@@ -119,3 +116,3 @@ public class OcamlDebugLauncherStep implements Step {",
                "       this.bytecodeOutput = bytecodeOutput;",
                "-      this.ocamlInput = ImmutableList.copyOf(ocamlInput);",
                "+      this.transitiveBytecodeIncludes = transitiveBytecodeIncludes;",
                "       this.bytecodeIncludeFlags = ImmutableList.copyOf(bytecodeIncludeFlags);",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "index 5e0e8ece8f..5d0cfb62fc 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "@@ -239,2 +239,4 @@ public class OcamlRuleBuilder {",
                "         ImmutableSortedSet.naturalOrder();",
                "+    ImmutableSortedSet.Builder<String> transitiveBytecodeIncludesBuilder =",
                "+        ImmutableSortedSet.naturalOrder();",
                "     for (OcamlLibrary library : ocamlInput) {",
                "@@ -243,2 +245,3 @@ public class OcamlRuleBuilder {",
                "       bytecodeLinkDepsBuilder.addAll(library.getBytecodeLinkDeps());",
                "+      transitiveBytecodeIncludesBuilder.addAll(library.getBytecodeIncludeDirs());",
                "     }",
                "@@ -252,3 +255,3 @@ public class OcamlRuleBuilder {",
                "             .setBytecodeIncludes(bytecodeIncludes)",
                "-            .setOcamlInput(ocamlInput)",
                "+            .setTransitiveBytecodeIncludes(transitiveBytecodeIncludesBuilder.build())",
                "             .setNativeLinkableInput(nativeLinkableInput)",
                "@@ -354,2 +357,4 @@ public class OcamlRuleBuilder {",
                "         ImmutableSortedSet.naturalOrder();",
                "+    ImmutableSortedSet.Builder<String> transitiveBytecodeIncludesBuilder =",
                "+        ImmutableSortedSet.naturalOrder();",
                "     for (OcamlLibrary library : ocamlInput) {",
                "@@ -358,2 +363,3 @@ public class OcamlRuleBuilder {",
                "       bytecodeLinkDepsBuilder.addAll(library.getBytecodeLinkDeps());",
                "+      transitiveBytecodeIncludesBuilder.addAll(library.getBytecodeIncludeDirs());",
                "     }",
                "@@ -367,3 +373,3 @@ public class OcamlRuleBuilder {",
                "             .setBytecodeIncludes(bytecodeIncludes)",
                "-            .setOcamlInput(ocamlInput)",
                "+            .setTransitiveBytecodeIncludes(transitiveBytecodeIncludesBuilder.build())",
                "             .setNativeLinkableInput(nativeLinkableInput)"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "src/com/facebook/buck/ocaml/OcamlBuildRulesGenerator.java",
                "src/com/facebook/buck/ocaml/OcamlBuildStep.java",
                "src/com/facebook/buck/ocaml/OcamlDebugLauncherStep.java",
                "src/com/facebook/buck/ocaml/OcamlRuleBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "74dc5cd005edc12ba7887f04ac94aff9b2774a3a",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521561013,
            "hunks": 6,
            "message": "Write a soy template SkylarkSignature renderer. Summary: This will be used to generate templates for all SkylarkSignature fields in Buck's codebase. In order to not have to write any special infra for live updates, the rendering format will be exactly the same as the rest of Python DSL docs. Test Plan: CI Reviewed By: philipjameson fbshipit-source-id: 0d826d4",
            "diff": [
                "diff --git a/.idea/libraries/stringtemplate.xml b/.idea/libraries/stringtemplate.xml",
                "new file mode 100644",
                "index 0000000000..dbed12b0b7",
                "--- /dev/null",
                "+++ b/.idea/libraries/stringtemplate.xml",
                "@@ -0,0 +1,10 @@",
                "+<component name=\"libraryTable\">",
                "+  <library name=\"stringtemplate\">",
                "+    <CLASSES>",
                "+      <root url=\"file://$PROJECT_DIR$/third-party/java/stringtemplate\" />",
                "+    </CLASSES>",
                "+    <JAVADOC />",
                "+    <SOURCES />",
                "+    <jarDirectory url=\"file://$PROJECT_DIR$/third-party/java/stringtemplate\" recursive=\"false\" />",
                "+  </library>",
                "+</component>",
                "\\ No newline at end of file",
                "diff --git a/tools/documentation_generator/documentation_generator.iml b/tools/documentation_generator/documentation_generator.iml",
                "index 371dc19d53..1a46a3158c 100644",
                "--- a/tools/documentation_generator/documentation_generator.iml",
                "+++ b/tools/documentation_generator/documentation_generator.iml",
                "@@ -14,3 +14,4 @@",
                "     <orderEntry type=\"module\" module-name=\"buck\" scope=\"TEST\" />",
                "+    <orderEntry type=\"library\" name=\"stringtemplate\" level=\"project\" />",
                "   </component>",
                "-</module>",
                "+</module>",
                "\\ No newline at end of file",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/BUCK b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/BUCK",
                "new file mode 100644",
                "index 0000000000..ece622eb63",
                "--- /dev/null",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/BUCK",
                "@@ -0,0 +1,11 @@",
                "+java_library(",
                "+    name = \"rendering\",",
                "+    srcs = [\"SoyTemplateSkylarkSignatureRenderer.java\"],",
                "+    resources = [\"signature_template.stg\"],",
                "+    visibility = [\"//tools/documentation_generator/...\"],",
                "+    deps = [",
                "+        \"//third-party/java/bazel:skylark-lang\",",
                "+        \"//third-party/java/guava:guava\",",
                "+        \"//third-party/java/stringtemplate:stringtemplate\",",
                "+    ],",
                "+)",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java",
                "new file mode 100644",
                "index 0000000000..202d272ab8",
                "--- /dev/null",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java",
                "@@ -0,0 +1,90 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.tools.documentation.generator.skylark.rendering;",
                "+",
                "+import com.google.common.base.Suppliers;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.io.Resources;",
                "+import com.google.common.util.concurrent.UncheckedExecutionException;",
                "+import com.google.devtools.build.lib.skylarkinterface.Param;",
                "+import com.google.devtools.build.lib.skylarkinterface.SkylarkSignature;",
                "+import java.io.IOException;",
                "+import java.net.URL;",
                "+import java.nio.charset.StandardCharsets;",
                "+import java.util.Arrays;",
                "+import java.util.function.Supplier;",
                "+import java.util.stream.Collectors;",
                "+import org.stringtemplate.v4.ST;",
                "+",
                "+/** Renders a soy template suitable for usage with the rest of buckbuild website documents. */",
                "+class SoyTemplateSkylarkSignatureRenderer {",
                "+",
                "+  private static final char DELIMITER_START_CHAR = '%';",
                "+  private static final char DELIMITER_STOP_CHAR = '%';",
                "+  private static final String TEMPLATE_NAME = \"signature_template.stg\";",
                "+",
                "+  private final Supplier<String> stringTemplateSupplier;",
                "+",
                "+  SoyTemplateSkylarkSignatureRenderer() {",
                "+    this.stringTemplateSupplier =",
                "+        Suppliers.memoize(",
                "+            () -> {",
                "+              try {",
                "+                return loadTemplate();",
                "+              } catch (IOException e) {",
                "+                throw new UncheckedExecutionException(e);",
                "+              }",
                "+            });",
                "+  }",
                "+",
                "+  /**",
                "+   * Renders provided Skylark signature into a soy template content similar to manually written",
                "+   * templates for all Python DSL functions.",
                "+   */",
                "+  String render(SkylarkSignature skylarkSignature) {",
                "+    ST stringTemplate =",
                "+        new ST(stringTemplateSupplier.get(), DELIMITER_START_CHAR, DELIMITER_STOP_CHAR);",
                "+    // open and close brace characters are not allowed inside of StringTemplate loops and using",
                "+    // named parameters seems nicer than their unicode identifiers",
                "+    stringTemplate.add(\"openCurly\", \"{\");",
                "+    stringTemplate.add(\"closeCurly\", \"}\");",
                "+    stringTemplate.add(\"signature\", toMap(skylarkSignature));",
                "+    return stringTemplate.render();",
                "+  }",
                "+",
                "+  private String loadTemplate() throws IOException {",
                "+    URL template = Resources.getResource(SoyTemplateSkylarkSignatureRenderer.class, TEMPLATE_NAME);",
                "+    return Resources.toString(template, StandardCharsets.UTF_8);",
                "+  }",
                "+",
                "+  private static ImmutableMap<String, Object> toMap(SkylarkSignature skylarkSignature) {",
                "+    return ImmutableMap.of(",
                "+        \"name\", skylarkSignature.name(),",
                "+        \"doc\", skylarkSignature.doc(),",
                "+        \"parameters\",",
                "+            Arrays.stream(skylarkSignature.parameters())",
                "+                .map(SoyTemplateSkylarkSignatureRenderer::toMap)",
                "+                .collect(Collectors.toList()));",
                "+  }",
                "+",
                "+  private static ImmutableMap<String, String> toMap(Param param) {",
                "+    return ImmutableMap.of(",
                "+        \"name\", param.name(),",
                "+        \"doc\", param.doc(),",
                "+        \"defaultValue\", param.defaultValue());",
                "+  }",
                "+}",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg",
                "new file mode 100644",
                "index 0000000000..cb0018d4cb",
                "--- /dev/null",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg",
                "@@ -0,0 +1,36 @@",
                "+{namespace buck.%signature.name%}",
                "+",
                "+/***/",
                "+{template .soyweb}",
                "+  {call buck.page}",
                "+    {param title: '%signature.name%()' /}",
                "+    {param navid: 'function_%signature.name%' /}",
                "+    {param prettify: true /}",
                "+    {param description}",
                "+      %signature.doc%",
                "+    {/param}",
                "+    {param content}",
                "+",
                "+      {call buck.function}",
                "+        {param status: 'UNFROZEN' /}",
                "+        {param overview}",
                "+          %signature.doc%",
                "+        {/param}",
                "+",
                "+        {param args}",
                "+",
                "+          %signature.parameters :{parameter |",
                "+            %openCurly% call buck.functionArg %closeCurly%",
                "+              %openCurly% param name : '%parameter.name%' /%closeCurly%",
                "+              %openCurly% param desc %closeCurly%",
                "+                %parameter.doc%",
                "+              %openCurly%/param%closeCurly%",
                "+              %openCurly% param default : '%parameter.defaultValue%' /%closeCurly%",
                "+            %openCurly%/call%closeCurly%",
                "+          }%",
                "+",
                "+        {/param}",
                "+      {/call}",
                "+    {/param} // content",
                "+  {/call}",
                "+{/template}"
            ],
            "changed_files": [
                ".idea/libraries/stringtemplate.xml",
                "tools/documentation_generator/documentation_generator.iml",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/BUCK",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b0f2b053476fcaaa03e7ca8601b7def18b0dfc8b",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522283383,
            "hunks": 1,
            "message": "Add missing GuardedBy annotation. Summary: Error:(116, 47) java: [GuardedBy] This access should be guarded by 'this.createdWorkers', which is not currently held     (see http://errorprone.info/bugpattern/GuardedBy) Reviewed By: jtorkkola fbshipit-source-id: a402513",
            "diff": [
                "diff --git a/src/com/facebook/buck/worker/WorkerProcessPool.java b/src/com/facebook/buck/worker/WorkerProcessPool.java",
                "index a97ef31c72..4cf166e552 100644",
                "--- a/src/com/facebook/buck/worker/WorkerProcessPool.java",
                "+++ b/src/com/facebook/buck/worker/WorkerProcessPool.java",
                "@@ -114,2 +114,3 @@ public abstract class WorkerProcessPool implements Closeable {",
                "   @Nullable",
                "+  @GuardedBy(\"createdWorkers\")",
                "   private AtomicReference<WorkerProcess> findRefForWorkerProcess(WorkerProcess workerProcess) {"
            ],
            "changed_files": [
                "src/com/facebook/buck/worker/WorkerProcessPool.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: java",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2646f16895114b4d247ecec8e9f9d48e46eb7bc4",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521506997,
            "hunks": 16,
            "message": "Remove BuildRuleResolver reference from NativeLinkableCache Summary: A step toward removing `BuildRuleResolver` field references from `BuildRule`s and related objects. Test Plan: CI Reviewed By: ttsugriy fbshipit-source-id: 2eca55f",
            "diff": [
                "diff --git a/src/com/facebook/buck/apple/PrebuiltAppleFramework.java b/src/com/facebook/buck/apple/PrebuiltAppleFramework.java",
                "index 83265c04ad..1c84a10808 100644",
                "--- a/src/com/facebook/buck/apple/PrebuiltAppleFramework.java",
                "+++ b/src/com/facebook/buck/apple/PrebuiltAppleFramework.java",
                "@@ -51,2 +51,4 @@ import com.facebook.buck.step.fs.RmStep;",
                " import com.google.common.base.Preconditions;",
                "+import com.google.common.cache.CacheBuilder;",
                "+import com.google.common.cache.CacheLoader;",
                " import com.google.common.cache.LoadingCache;",
                "@@ -78,3 +80,3 @@ public class PrebuiltAppleFramework extends AbstractBuildRuleWithDeclaredAndExtr",
                "   private final LoadingCache<NativeLinkableCacheKey, NativeLinkableInput> nativeLinkableCache =",
                "-      NativeLinkable.getNativeLinkableInputCache(this::getNativeLinkableInputUncached);",
                "+      CacheBuilder.newBuilder().build(CacheLoader.from(this::getNativeLinkableInputUncached));",
                "diff --git a/src/com/facebook/buck/cxx/CxxLibrary.java b/src/com/facebook/buck/cxx/CxxLibrary.java",
                "index bc580b8b24..ce6e27a247 100644",
                "--- a/src/com/facebook/buck/cxx/CxxLibrary.java",
                "+++ b/src/com/facebook/buck/cxx/CxxLibrary.java",
                "@@ -47,3 +47,4 @@ import com.facebook.buck.util.function.QuadFunction;",
                " import com.google.common.base.Preconditions;",
                "-import com.google.common.cache.LoadingCache;",
                "+import com.google.common.cache.Cache;",
                "+import com.google.common.cache.CacheBuilder;",
                " import com.google.common.collect.ImmutableList;",
                "@@ -54,2 +55,3 @@ import com.google.common.collect.Iterables;",
                " import com.google.common.collect.Sets;",
                "+import com.google.common.util.concurrent.UncheckedExecutionException;",
                " import java.nio.file.Path;",
                "@@ -58,2 +60,3 @@ import java.util.Set;",
                " import java.util.SortedSet;",
                "+import java.util.concurrent.ExecutionException;",
                " import java.util.function.BiFunction;",
                "@@ -104,4 +107,4 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  private final LoadingCache<NativeLinkableCacheKey, NativeLinkableInput> nativeLinkableCache =",
                "-      NativeLinkable.getNativeLinkableInputCache(this::getNativeLinkableInputUncached);",
                "+  private final Cache<NativeLinkableCacheKey, NativeLinkableInput> nativeLinkableCache =",
                "+      CacheBuilder.newBuilder().build();",
                "@@ -296,3 +299,4 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  private NativeLinkableInput getNativeLinkableInputUncached(NativeLinkableCacheKey key) {",
                "+  private NativeLinkableInput computeNativeLinkableInputUncached(",
                "+      NativeLinkableCacheKey key, BuildRuleResolver ruleResolver) {",
                "     CxxPlatform cxxPlatform = key.getCxxPlatform();",
                "@@ -389,4 +393,10 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       BuildRuleResolver ruleResolver) {",
                "-    return nativeLinkableCache.getUnchecked(",
                "-        NativeLinkableCacheKey.of(cxxPlatform.getFlavor(), type, forceLinkWhole, cxxPlatform));",
                "+    NativeLinkableCacheKey key =",
                "+        NativeLinkableCacheKey.of(cxxPlatform.getFlavor(), type, forceLinkWhole, cxxPlatform);",
                "+    try {",
                "+      return nativeLinkableCache.get(",
                "+          key, () -> computeNativeLinkableInputUncached(key, ruleResolver));",
                "+    } catch (ExecutionException e) {",
                "+      throw new UncheckedExecutionException(e.getCause());",
                "+    }",
                "   }",
                "diff --git a/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java b/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "index f54323f68f..b4773b1326 100644",
                "--- a/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "+++ b/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "@@ -72,3 +72,4 @@ import com.facebook.buck.versions.VersionPropagator;",
                " import com.google.common.base.Preconditions;",
                "-import com.google.common.cache.LoadingCache;",
                "+import com.google.common.cache.Cache;",
                "+import com.google.common.cache.CacheBuilder;",
                " import com.google.common.collect.FluentIterable;",
                "@@ -82,2 +83,3 @@ import com.google.common.collect.Iterables;",
                " import com.google.common.collect.Multimaps;",
                "+import com.google.common.util.concurrent.UncheckedExecutionException;",
                " import java.nio.file.Path;",
                "@@ -86,2 +88,3 @@ import java.util.Map;",
                " import java.util.Optional;",
                "+import java.util.concurrent.ExecutionException;",
                " import java.util.function.Function;",
                "@@ -489,4 +492,4 @@ public class PrebuiltCxxLibraryDescription",
                "-      private final LoadingCache<NativeLinkableCacheKey, NativeLinkableInput> nativeLinkableCache =",
                "-          NativeLinkable.getNativeLinkableInputCache(this::getNativeLinkableInputUncached);",
                "+      private final Cache<NativeLinkableCacheKey, NativeLinkableInput> nativeLinkableCache =",
                "+          CacheBuilder.newBuilder().build();",
                "@@ -669,3 +672,4 @@ public class PrebuiltCxxLibraryDescription",
                "-      private NativeLinkableInput getNativeLinkableInputUncached(NativeLinkableCacheKey key) {",
                "+      private NativeLinkableInput computeNativeLinkableInputUncached(",
                "+          NativeLinkableCacheKey key, BuildRuleResolver ruleResolver) {",
                "         CxxPlatform cxxPlatform = key.getCxxPlatform();",
                "@@ -732,4 +736,10 @@ public class PrebuiltCxxLibraryDescription",
                "           BuildRuleResolver ruleResolver) {",
                "-        return nativeLinkableCache.getUnchecked(",
                "-            NativeLinkableCacheKey.of(cxxPlatform.getFlavor(), type, forceLinkWhole, cxxPlatform));",
                "+        NativeLinkableCacheKey key =",
                "+            NativeLinkableCacheKey.of(cxxPlatform.getFlavor(), type, forceLinkWhole, cxxPlatform);",
                "+        try {",
                "+          return nativeLinkableCache.get(",
                "+              key, () -> computeNativeLinkableInputUncached(key, ruleResolver));",
                "+        } catch (ExecutionException e) {",
                "+          throw new UncheckedExecutionException(e.getCause());",
                "+        }",
                "       }",
                "diff --git a/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkable.java b/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkable.java",
                "index 1de1174e5e..114404c875 100644",
                "--- a/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkable.java",
                "+++ b/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkable.java",
                "@@ -23,5 +23,2 @@ import com.facebook.buck.rules.BuildRuleResolver;",
                " import com.facebook.buck.rules.SourcePath;",
                "-import com.google.common.cache.CacheBuilder;",
                "-import com.google.common.cache.CacheLoader;",
                "-import com.google.common.cache.LoadingCache;",
                " import com.google.common.collect.ImmutableMap;",
                "@@ -108,11 +105,2 @@ public interface NativeLinkable {",
                "-  /**",
                "-   * @param loader the method to load missing element to cache",
                "-   * @return a LoadingCache for native linkable",
                "-   */",
                "-  static LoadingCache<NativeLinkableCacheKey, NativeLinkableInput> getNativeLinkableInputCache(",
                "-      com.google.common.base.Function<NativeLinkableCacheKey, NativeLinkableInput> loader) {",
                "-    return CacheBuilder.newBuilder().build(CacheLoader.from(loader));",
                "-  }",
                "-",
                "   enum Linkage {"
            ],
            "changed_files": [
                "src/com/facebook/buck/apple/PrebuiltAppleFramework.java",
                "src/com/facebook/buck/cxx/CxxLibrary.java",
                "src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkable.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: object, cache",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "9071c1b3c678e236f13859a10e9e054dfb14cd98",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522197621,
            "hunks": 6,
            "message": "Add type hints to buck_version.py. Summary: This is in preparation to fixing types when Python 3 is used. Reviewed By: styurin fbshipit-source-id: 0292547",
            "diff": [
                "diff --git a/programs/buck_version.py b/programs/buck_version.py",
                "index 6a024184d4..256ad43611 100644",
                "--- a/programs/buck_version.py",
                "+++ b/programs/buck_version.py",
                "@@ -35,3 +35,3 @@ class EmptyTempFile(object):",
                "-def is_git(dirpath):",
                "+def is_git(dirpath):  # type: (str) -> bool",
                "     dot_git = os.path.join(dirpath, '.git')",
                "@@ -52,3 +52,3 @@ def is_git(dirpath):",
                "-def is_dirty(dirpath):",
                "+def is_dirty(dirpath):  # type: (str) -> bool",
                "     # Ignore any changes under these paths for the purposes of forcing a rebuild",
                "@@ -69,3 +69,3 @@ def is_dirty(dirpath):",
                "-def get_git_revision(dirpath):",
                "+def get_git_revision(dirpath):  # type: (str) -> str",
                "     output = check_output(",
                "@@ -76,3 +76,3 @@ def get_git_revision(dirpath):",
                "-def get_git_revision_timestamp(dirpath):",
                "+def get_git_revision_timestamp(dirpath):  # type: (str) -> str",
                "     return check_output(",
                "@@ -82,3 +82,3 @@ def get_git_revision_timestamp(dirpath):",
                "-def get_clean_buck_version(dirpath, allow_dirty=False):",
                "+def get_clean_buck_version(dirpath, allow_dirty=False):  # type: (str, bool) -> str",
                "     if not is_git(dirpath):",
                "@@ -89,3 +89,3 @@ def get_clean_buck_version(dirpath, allow_dirty=False):",
                "-def get_dirty_buck_version(dirpath):",
                "+def get_dirty_buck_version(dirpath):  # type: (str) -> str",
                "     git_tree_in = check_output("
            ],
            "changed_files": [
                "programs/buck_version.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7f965f9d981a488b60e8f12db7d1a6c24f537ea2",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522283344,
            "hunks": 1,
            "message": "Fix error-prone compiler error. Summary: Error:(131, 52) java: [TypeParameterQualifier] Type parameter used as type qualifier     (see http://errorprone.info/bugpattern/TypeParameterQualifier)   Did you mean '<T extends BuildRuleInfoProvider> T getProvider(BuildRuleInfoProvider.ProviderKey providerKey)'? Reviewed By: jtorkkola fbshipit-source-id: 7cd891a",
            "diff": [
                "diff --git a/src/com/facebook/buck/rules/BuildRule.java b/src/com/facebook/buck/rules/BuildRule.java",
                "index bc26b2fbeb..8936745f0e 100644",
                "--- a/src/com/facebook/buck/rules/BuildRule.java",
                "+++ b/src/com/facebook/buck/rules/BuildRule.java",
                "@@ -130,3 +130,3 @@ public interface BuildRule extends Comparable<BuildRule> {",
                "    */",
                "-  <T extends BuildRuleInfoProvider> T getProvider(T.ProviderKey providerKey)",
                "+  <T extends BuildRuleInfoProvider> T getProvider(BuildRuleInfoProvider.ProviderKey providerKey)",
                "       throws MissingProviderException;"
            ],
            "changed_files": [
                "src/com/facebook/buck/rules/BuildRule.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: java",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "90657cef833ac31977bb7e030736a7d16f2892bb",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1523036937,
            "hunks": 4,
            "message": "Move where dontobfuscate proguard config is being used to allow the dex_produced_from_java_library internal rule to be used by E2E tests in android Summary: this took me way too long to determine that the proguard_config was the issue Reviewed By: sbalabanov fbshipit-source-id: 85138cf",
            "diff": [
                "diff --git a/test/com/facebook/buck/android/endtoend/AndroidEndToEndTest.java b/test/com/facebook/buck/android/endtoend/AndroidEndToEndTest.java",
                "index 357747eea0..ce67f7cbee 100644",
                "--- a/test/com/facebook/buck/android/endtoend/AndroidEndToEndTest.java",
                "+++ b/test/com/facebook/buck/android/endtoend/AndroidEndToEndTest.java",
                "@@ -37,5 +37,5 @@ import org.junit.runner.RunWith;",
                "  *                                                  +",
                "- *       +------------+-------------+---------------+----------------------------+",
                "- *       v            v             v                                            v",
                "- * export_file     manifest     keystore                                  android_library",
                "+ *                    +-------------+---------------+----------------------------+",
                "+ *                    v             v                                            v",
                "+ *                 manifest     keystore                                  android_library",
                "  *                    +                                                          +",
                "@@ -45,5 +45,5 @@ import org.junit.runner.RunWith;",
                "  *                    +                                       +                  +                                       +",
                "- *    +---------------+                                       |                  |                                       |",
                "- *    v               v                                       v                  v                                       v",
                "- * genrule      python_binary                      android_prebuilt_aar       genrule                               cxx_library",
                "+ *    +---------------+                  +--------------------+                  |                                       |",
                "+ *    v               v                  v                    v                  v                                       v",
                "+ * genrule      python_binary       export_file     android_prebuilt_aar       genrule                               cxx_library",
                "  *                                                                               +",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/BUCK.fixture",
                "index 938f3a34a7..8b339b583b 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/BUCK.fixture",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/BUCK.fixture",
                "@@ -10,3 +10,2 @@ android_binary(",
                "     manifest = \"//android/manifest:generated_manifest\",",
                "-    proguard_config = \"//android/configs:dont_obfuscate\",",
                "     deps = [",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/BUCK.fixture",
                "index 5cb07677f0..e4238e6153 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/BUCK.fixture",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/BUCK.fixture",
                "@@ -16,2 +16,3 @@ android_library(",
                "     ],",
                "+    proguard_config = \"//android/configs:dont_obfuscate\",",
                "     visibility = ["
            ],
            "changed_files": [
                "test/com/facebook/buck/android/endtoend/AndroidEndToEndTest.java",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/BUCK.fixture"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: java, issue",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2100c8d0f25c2637e5b6c2ac31ae59ddd726361c",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1523039781,
            "hunks": 42,
            "message": "Remove project --view Summary: This feature is not used and there is no reason to keep it. https://github.com/facebook/buck/issues/1567 Reviewed By: mkillianey, ttsugriy fbshipit-source-id: f598f53",
            "diff": [
                "diff --git a/src/com/facebook/buck/cli/ProjectCommand.java b/src/com/facebook/buck/cli/ProjectCommand.java",
                "index 6e2b5a7284..b711b4ad6d 100644",
                "--- a/src/com/facebook/buck/cli/ProjectCommand.java",
                "+++ b/src/com/facebook/buck/cli/ProjectCommand.java",
                "@@ -23,3 +23,2 @@ import com.facebook.buck.cli.output.PrintStreamPathOutputPresenter;",
                " import com.facebook.buck.cli.parameter_extractors.ProjectGeneratorParameters;",
                "-import com.facebook.buck.cli.parameter_extractors.ProjectViewParameters;",
                " import com.facebook.buck.config.BuckConfig;",
                "@@ -236,19 +235,2 @@ public class ProjectCommand extends BuildCommand {",
                "-  @Option(",
                "-    name = \"--view\",",
                "-    usage =",
                "-        \"Deprecated: this feature will be removed in future versions, see \"",
                "-            + \"https://github.com/facebook/buck/issues/1567.\"",
                "-            + \"\\n\"",
                "-            + \"Option that builds a Project View which is a directory containing symlinks to a single\"",
                "-            + \" project's code and resources. This directory looks a lot like a standard IntelliJ \"",
                "-            + \"project with all resources under /res, but what's really important is that it \"",
                "-            + \"generates a single IntelliJ module, so that editing is much faster than when you \"",
                "-            + \"use 'plain' `buck project`.\\n\"",
                "-            + \"\\n\"",
                "-            + \"This option specifies the path to the Project View directory.\"",
                "-  )",
                "-  @Nullable",
                "-  private String projectView = null;",
                "-",
                "   private Optional<String> getPathToPreProcessScript(BuckConfig buckConfig) {",
                "@@ -306,4 +288,4 @@ public class ProjectCommand extends BuildCommand {",
                "-            ProjectViewParameters projectViewParameters =",
                "-                new ProjectViewParametersImplementation(params);",
                "+            ProjectGeneratorParameters projectGeneratorParameters =",
                "+                new ProjectGeneratorParametersImplementation(params);",
                "             IjProjectCommandHelper projectCommandHelper =",
                "@@ -323,3 +305,3 @@ public class ProjectCommand extends BuildCommand {",
                "                     arguments -> parseArgumentsAsTargetNodeSpecs(params.getBuckConfig(), arguments),",
                "-                    projectViewParameters);",
                "+                    projectGeneratorParameters);",
                "             result = projectCommandHelper.parseTargetsAndRunProjectGenerator(getArguments());",
                "@@ -436,3 +418,3 @@ public class ProjectCommand extends BuildCommand {",
                "                     .put(\"BUCK_PROJECT_TARGETS\", Joiner.on(\" \").join(getArguments()))",
                "-                    .put(\"BUCK_PROJECT_TYPE\", detectBuckProjectType(projectIde))",
                "+                    .put(\"BUCK_PROJECT_TYPE\", projectIde.toString().toLowerCase())",
                "                     .build())",
                "@@ -456,9 +438,2 @@ public class ProjectCommand extends BuildCommand {",
                "-  private String detectBuckProjectType(Ide projectIde) {",
                "-    if (projectIde == Ide.INTELLIJ && projectView != null) {",
                "-      return \"intellij-view\";",
                "-    }",
                "-    return projectIde.toString().toLowerCase();",
                "-  }",
                "-",
                "   @Override",
                "@@ -531,21 +506,2 @@ public class ProjectCommand extends BuildCommand {",
                "   }",
                "-",
                "-  private class ProjectViewParametersImplementation extends ProjectGeneratorParametersImplementation",
                "-      implements ProjectViewParameters {",
                "-",
                "-    private ProjectViewParametersImplementation(CommandRunnerParams parameters) {",
                "-      super(parameters);",
                "-    }",
                "-",
                "-    @Override",
                "-    public boolean hasViewPath() {",
                "-      return projectView != null && !projectView.trim().isEmpty(); // --view '' is possible",
                "-    }",
                "-",
                "-    @Override",
                "-    @Nullable",
                "-    public String getViewPath() {",
                "-      return projectView;",
                "-    }",
                "-  }",
                " }",
                "diff --git a/src/com/facebook/buck/ide/intellij/BUCK b/src/com/facebook/buck/ide/intellij/BUCK",
                "index e4995d12d2..95d37d2331 100644",
                "--- a/src/com/facebook/buck/ide/intellij/BUCK",
                "+++ b/src/com/facebook/buck/ide/intellij/BUCK",
                "@@ -4,8 +4,3 @@ java_immutables_library(",
                "     name = \"intellij\",",
                "-    srcs = glob(",
                "-        [\"**/*.java\"],",
                "-        exclude = [",
                "-            \"projectview/**\",",
                "-        ],",
                "-    ),",
                "+    srcs = glob([\"**/*.java\"]),",
                "     resources = glob([\"templates/*.st\"]),",
                "@@ -28,3 +23,2 @@ java_immutables_library(",
                "         \"//src/com/facebook/buck/graph:graph\",",
                "-        \"//src/com/facebook/buck/ide/intellij/projectview:projectview\",",
                "         \"//src/com/facebook/buck/io:io\",",
                "diff --git a/src/com/facebook/buck/ide/intellij/IjProjectCommandHelper.java b/src/com/facebook/buck/ide/intellij/IjProjectCommandHelper.java",
                "index b45532cb00..65a3e87304 100644",
                "--- a/src/com/facebook/buck/ide/intellij/IjProjectCommandHelper.java",
                "+++ b/src/com/facebook/buck/ide/intellij/IjProjectCommandHelper.java",
                "@@ -19,3 +19,2 @@ package com.facebook.buck.ide.intellij;",
                " import com.facebook.buck.cli.parameter_extractors.ProjectGeneratorParameters;",
                "-import com.facebook.buck.cli.parameter_extractors.ProjectViewParameters;",
                " import com.facebook.buck.config.BuckConfig;",
                "@@ -27,3 +26,2 @@ import com.facebook.buck.ide.intellij.aggregation.AggregationMode;",
                " import com.facebook.buck.ide.intellij.model.IjProjectConfig;",
                "-import com.facebook.buck.ide.intellij.projectview.ProjectView;",
                " import com.facebook.buck.jvm.core.JavaPackageFinder;",
                "@@ -90,3 +88,2 @@ public class IjProjectCommandHelper {",
                "   private final ProjectGeneratorParameters projectGeneratorParameters;",
                "-  private final ProjectViewParameters projectViewParameters;",
                "@@ -105,7 +102,7 @@ public class IjProjectCommandHelper {",
                "       Function<Iterable<String>, ImmutableList<TargetNodeSpec>> argsParser,",
                "-      ProjectViewParameters projectViewParameters) {",
                "+      ProjectGeneratorParameters projectGeneratorParameters) {",
                "     this.buckEventBus = buckEventBus;",
                "-    this.console = projectViewParameters.getConsole();",
                "+    this.console = projectGeneratorParameters.getConsole();",
                "     this.executor = executor;",
                "-    this.parser = projectViewParameters.getParser();",
                "+    this.parser = projectGeneratorParameters.getParser();",
                "     this.buckConfig = buckConfig;",
                "@@ -121,4 +118,3 @@ public class IjProjectCommandHelper {",
                "-    this.projectGeneratorParameters = projectViewParameters;",
                "-    this.projectViewParameters = projectViewParameters;",
                "+    this.projectGeneratorParameters = projectGeneratorParameters;",
                "   }",
                "@@ -127,11 +123,2 @@ public class IjProjectCommandHelper {",
                "       throws IOException, InterruptedException {",
                "-    if (projectViewParameters.hasViewPath() && arguments.isEmpty()) {",
                "-      throw new CommandLineException(",
                "-          \"params are view_path target(s), but you didn't supply any targets\");",
                "-    }",
                "-",
                "-    if (projectViewParameters.hasViewPath()) {",
                "-      console.printErrorText(\"`--view` option is deprecated and will be removed soon.\");",
                "-    }",
                "-",
                "     if (projectGeneratorParameters.isUpdateOnly()",
                "@@ -197,15 +184,2 @@ public class IjProjectCommandHelper {",
                "-    if (projectViewParameters.hasViewPath()) {",
                "-      if (isWithTests()) {",
                "-        projectGraph = targetGraphAndTargets.getTargetGraph();",
                "-      }",
                "-",
                "-      return ExitCode.map(",
                "-          ProjectView.run(",
                "-              projectViewParameters,",
                "-              projectGraph,",
                "-              passedInTargetsSet,",
                "-              getActionGraph(projectGraph)));",
                "-    }",
                "-",
                "     if (projectGeneratorParameters.isDryRun()) {",
                "diff --git a/src/com/facebook/buck/ide/intellij/projectview/BUCK b/src/com/facebook/buck/ide/intellij/projectview/BUCK",
                "deleted file mode 100644",
                "index 8e5c37ac27..0000000000",
                "--- a/src/com/facebook/buck/ide/intellij/projectview/BUCK",
                "+++ /dev/null",
                "@@ -1,35 +0,0 @@",
                "-load(\"//tools/build_rules:java_rules.bzl\", \"java_immutables_library\")",
                "-",
                "-java_immutables_library(",
                "-    name = \"projectview\",",
                "-    srcs = glob(",
                "-        [\"*.java\"],",
                "-        exclude = [\"shared/*.*\"],",
                "-    ),",
                "-    visibility = [",
                "-        \"//src/com/facebook/buck/ide/intellij:intellij\",",
                "-    ],",
                "-    deps = [",
                "-        \"//src/com/facebook/buck/android:rules\",",
                "-        \"//src/com/facebook/buck/cli/parameter_extractors:parameter_extractors\",",
                "-        \"//src/com/facebook/buck/config:config\",",
                "-        \"//src/com/facebook/buck/event:interfaces\",",
                "-        \"//src/com/facebook/buck/graph:graph\",",
                "-        \"//src/com/facebook/buck/ide/intellij/projectview/shared:shared\",",
                "-        \"//src/com/facebook/buck/io:io\",",
                "-        \"//src/com/facebook/buck/io/file:file\",",
                "-        \"//src/com/facebook/buck/jvm/core:core\",",
                "-        \"//src/com/facebook/buck/jvm/java:rules\",",
                "-        \"//src/com/facebook/buck/jvm/java:support\",",
                "-        \"//src/com/facebook/buck/model:model\",",
                "-        \"//src/com/facebook/buck/rules:build_rule\",",
                "-        \"//src/com/facebook/buck/rules:rules\",",
                "-        \"//src/com/facebook/buck/rules:source_path\",",
                "-        \"//src/com/facebook/buck/rules:types\",",
                "-        \"//src/com/facebook/buck/rules/keys:keys\",",
                "-        \"//src/com/facebook/buck/util:process_executor\",",
                "-        \"//src/com/facebook/buck/util:util\",",
                "-        \"//src/com/facebook/buck/util/config:config\",",
                "-        \"//third-party/java/jdom:jdom\",",
                "-    ],",
                "-)",
                "diff --git a/src/com/facebook/buck/ide/intellij/projectview/Patterns.java b/src/com/facebook/buck/ide/intellij/projectview/Patterns.java",
                "deleted file mode 100644",
                "index d8a5812621..0000000000",
                "--- a/src/com/facebook/buck/ide/intellij/projectview/Patterns.java",
                "+++ /dev/null",
                "@@ -1,199 +0,0 @@",
                "-/*",
                "- * Copyright 2017-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-package com.facebook.buck.ide.intellij.projectview;",
                "-",
                "-import com.google.common.base.Joiner;",
                "-import java.util.ArrayList;",
                "-import java.util.List;",
                "-import java.util.regex.Matcher;",
                "-import java.util.regex.Pattern;",
                "-",
                "-/**",
                "- * Utility code for working with {@link java.util.regex.Pattern regex patterns.} Only",
                "- * package-visible, for now at least, because the APIs are not very general.",
                "- */",
                "-class Patterns {",
                "-  private final Pattern[] patterns;",
                "-",
                "-  private Patterns(Pattern... patterns) {",
                "-    this.patterns = patterns;",
                "-  }",
                "-",
                "-  private Patterns(String... patterns) {",
                "-    Pattern[] compiled = new Pattern[patterns.length];",
                "-    for (int index = 0, length = patterns.length; index < length; ++index) {",
                "-      compiled[index] = Pattern.compile(patterns[index]);",
                "-    }",
                "-    this.patterns = compiled;",
                "-  }",
                "-",
                "-  /**",
                "-   * Parameter to {@link #onAnyMatch(String, MatchHandler)}. Normally will be implemented as a",
                "-   * lambda.",
                "-   */",
                "-  interface MatchHandler {",
                "-    /**",
                "-     * Called when {@link #onAnyMatch(String, MatchHandler)} finds a match",
                "-     *",
                "-     * @param matcher The {@link Matcher} with match location, captures, &c",
                "-     * @param text The text that was passed to {@link #onMatch(Matcher, String)}",
                "-     */",
                "-    void onMatch(Matcher matcher, String text);",
                "-  }",
                "-",
                "-  /**",
                "-   * Passes {@code target} to each regex passed to the constructor. Calls {@code handler} on first",
                "-   * match.",
                "-   *",
                "-   * @param target Text to match against each regex",
                "-   * @param handler Code to call on first match",
                "-   * @return {@code true} if any regex matched; {@code false} if no regex matched",
                "-   */",
                "-  boolean onAnyMatch(String target, MatchHandler handler) {",
                "-    for (Pattern pattern : patterns) {",
                "-      Matcher match = pattern.matcher(target);",
                "-      if (match.find()) {",
                "-        handler.onMatch(match, target);",
                "-        return true;",
                "-      }",
                "-    }",
                "-    return false;",
                "-  }",
                "-",
                "-  /**",
                "-   * The {@link Patterns} constructor takes either a {@code String...} parameter or a {@code",
                "-   * Pattern...} parameter. This {@code Builder} is an alternative to {@code new Patterns(compile(a,",
                "-   * b, c), compile(d, e, f))}",
                "-   */",
                "-  static Builder builder() {",
                "-    return new Builder();",
                "-  }",
                "-",
                "-  static class Builder {",
                "-    private final List<String> patterns = new ArrayList<>();",
                "-",
                "-    /** Add a regex to the Builder */",
                "-    Builder add(String pattern) {",
                "-      patterns.add(pattern);",
                "-      return this;",
                "-    }",
                "-",
                "-    /** Add a regex to the Builder */",
                "-    Builder add(String... elements) {",
                "-      return add(join(elements));",
                "-    }",
                "-",
                "-    /** Create a new {@#link Patterns} */",
                "-    Patterns build() {",
                "-      String[] patternArray = new String[patterns.size()];",
                "-      return new Patterns(patterns.toArray(patternArray));",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Factory method to create a single-regex {@link Patterns}: equivalent to {@code",
                "-   * Patterns.builder().add(pattern).build()} but smaller and more efficient",
                "-   */",
                "-  static Patterns build(String pattern) {",
                "-    return new Patterns(pattern);",
                "-  }",
                "-",
                "-  /**",
                "-   * Factory method to create a single-regex {@link Patterns}: equivalent to {@code",
                "-   * Patterns.builder().add(elements).build()} but smaller and more efficient",
                "-   */",
                "-  static Patterns build(String... elements) {",
                "-    return new Patterns(join(elements));",
                "-  }",
                "-",
                "-  /**",
                "-   * Convenience function to compile a complex regex from a comma-delimited stream of elements. This",
                "-   * can be easier to read than a single long string or {@code \"...\" + \"...\"}.",
                "-   *",
                "-   * @param elements A stream of regex elements",
                "-   * @return A compiled regex",
                "-   */",
                "-  static Pattern compile(String... elements) {",
                "-    return compile(0, elements);",
                "-  }",
                "-",
                "-  /**",
                "-   * Convenience function to compile a complex regex from a comma-delimited stream of elements. This",
                "-   * can be easier to read than a single long string or {@code \"...\" + \"...\"}.",
                "-   *",
                "-   * @param flags {@link Pattern#compile(String, int) Pattern.compile() flags}",
                "-   * @param elements A stream of regex elements",
                "-   * @return A compiled regex",
                "-   */",
                "-  static Pattern compile(int flags, String... elements) {",
                "-    return Pattern.compile(join(elements), flags);",
                "-  }",
                "-",
                "-  /**",
                "-   * Convenience function to generate a capture group. {@code \"capture(\"foo\")} is bigger (and more",
                "-   * expensive) than {@code \"(foo)\"} but it's very explicit, and contrasts naturally with {@link",
                "-   * #noncapture(String)}.",
                "-   */",
                "-  static String capture(String element) {",
                "-    return \"(\" + element + \")\";",
                "-  }",
                "-",
                "-  /**",
                "-   * Convenience function to generate a capture group. {@code \"capture(\"foo\")} is bigger (and more",
                "-   * expensive) than {@code \"(foo)\"} but it's very explicit, and contrasts naturally with {@link",
                "-   * #noncapture(String)}.",
                "-   */",
                "-  static String capture(String... elements) {",
                "-    return capture(join(elements));",
                "-  }",
                "-",
                "-  /**",
                "-   * Convenience function to generate a non-capture group. {@code \"noncapture(\"foo\"} is easier to",
                "-   * read than {@code \"(?:foo)\"}.",
                "-   */",
                "-  static String noncapture(String element) {",
                "-    return \"(?:\" + element + \")\";",
                "-  }",
                "-",
                "-  /**",
                "-   * Convenience function to generate a non-capture group. {@code \"noncapture(\"foo\"} is easier to",
                "-   * read than {@code \"(?:foo)\"}.",
                "-   */",
                "-  static String noncapture(String... elements) {",
                "-    return noncapture(join(elements));",
                "-  }",
                "-",
                "-  /**",
                "-   * Convenience function to generate an optional regex element. {@code optional(noncapture(\"foo\"))}",
                "-   * is a lot easier to read/verify than {@code \"(?:foo)?\"}.",
                "-   */",
                "-  static String optional(String element) {",
                "-    return element + \"?\";",
                "-  }",
                "-",
                "-  /**",
                "-   * Convenience function to generate an optional regex element. {@code optional(noncapture(\"foo\"))}",
                "-   * is a lot easier to read/verify than {@code \"(?:foo)?\"}.",
                "-   */",
                "-  static String optional(String... elements) {",
                "-    return optional(join(elements));",
                "-  }",
                "-",
                "-  private static String join(String... elements) {",
                "-    return Joiner.on(\"\").join(elements);",
                "-  }",
                "-}",
                "diff --git a/src/com/facebook/buck/ide/intellij/projectview/ProjectView.java b/src/com/facebook/buck/ide/intellij/projectview/ProjectView.java",
                "deleted file mode 100644",
                "index 89758f9dc2..0000000000",
                "--- a/src/com/facebook/buck/ide/intellij/projectview/ProjectView.java",
                "+++ /dev/null",
                "@@ -1,1490 +0,0 @@",
                "-/*",
                "- * Copyright 2017-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-package com.facebook.buck.ide.intellij.projectview;",
                "-",
                "-import static com.facebook.buck.ide.intellij.projectview.Patterns.capture;",
                "-import static com.facebook.buck.ide.intellij.projectview.Patterns.noncapture;",
                "-import static com.facebook.buck.ide.intellij.projectview.Patterns.optional;",
                "-",
                "-import com.facebook.buck.android.AndroidLibrary;",
                "-import com.facebook.buck.android.GenAidl;",
                "-import com.facebook.buck.cli.parameter_extractors.ProjectViewParameters;",
                "-import com.facebook.buck.graph.AbstractBreadthFirstTraversal;",
                "-import com.facebook.buck.ide.intellij.projectview.shared.SharedConstants;",
                "-import com.facebook.buck.io.file.MostFiles;",
                "-import com.facebook.buck.io.filesystem.BuckPaths;",
                "-import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "-import com.facebook.buck.jvm.core.JavaLibrary;",
                "-import com.facebook.buck.model.BuildTarget;",
                "-import com.facebook.buck.model.BuildTargets;",
                "-import com.facebook.buck.rules.ActionGraphAndResolver;",
                "-import com.facebook.buck.rules.BuildRule;",
                "-import com.facebook.buck.rules.BuildRuleResolver;",
                "-import com.facebook.buck.rules.CommonDescriptionArg;",
                "-import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "-import com.facebook.buck.rules.SourcePath;",
                "-import com.facebook.buck.rules.SourcePathResolver;",
                "-import com.facebook.buck.rules.SourcePathRuleFinder;",
                "-import com.facebook.buck.rules.TargetGraph;",
                "-import com.facebook.buck.rules.TargetNode;",
                "-import com.facebook.buck.rules.TargetNodes;",
                "-import com.facebook.buck.util.DirtyPrintStreamDecorator;",
                "-import com.facebook.buck.util.RichStream;",
                "-import com.facebook.buck.util.Verbosity;",
                "-import com.facebook.buck.util.config.Config;",
                "-import com.google.common.base.Preconditions;",
                "-import com.google.common.collect.ImmutableSet;",
                "-import com.google.common.collect.Iterables;",
                "-import java.io.File;",
                "-import java.io.FileWriter;",
                "-import java.io.FilenameFilter;",
                "-import java.io.IOException;",
                "-import java.io.Writer;",
                "-import java.nio.file.FileAlreadyExistsException;",
                "-import java.nio.file.Files;",
                "-import java.nio.file.LinkOption;",
                "-import java.nio.file.Path;",
                "-import java.nio.file.Paths;",
                "-import java.nio.file.attribute.BasicFileAttributes;",
                "-import java.util.ArrayList;",
                "-import java.util.Collection;",
                "-import java.util.Collections;",
                "-import java.util.HashMap;",
                "-import java.util.HashSet;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-import java.util.Objects;",
                "-import java.util.Optional;",
                "-import java.util.Set;",
                "-import java.util.regex.Matcher;",
                "-import java.util.regex.Pattern;",
                "-import java.util.stream.Collectors;",
                "-import java.util.stream.Stream;",
                "-import javax.annotation.Nullable;",
                "-import org.jdom2.Attribute;",
                "-import org.jdom2.Document;",
                "-import org.jdom2.Element;",
                "-import org.jdom2.output.Format;",
                "-import org.jdom2.output.XMLOutputter;",
                "-",
                "-public class ProjectView {",
                "-",
                "-  // region Public API",
                "-",
                "-  public static int run(",
                "-      ProjectViewParameters projectViewParameters,",
                "-      TargetGraph targetGraph,",
                "-      ImmutableSet<BuildTarget> buildTargets,",
                "-      ActionGraphAndResolver actionGraph) {",
                "-    return new ProjectView(projectViewParameters, targetGraph, buildTargets, actionGraph).run();",
                "-  }",
                "-",
                "-  // endregion Public API",
                "-",
                "-  // region Private implementation",
                "-",
                "-  // external filenames: true constants",
                "-  private static final String ANDROID_MANIFEST = \"AndroidManifest.xml\";",
                "-  private static final String CODE_STYLE_SETTINGS = \"codeStyleSettings.xml\";",
                "-  private static final String DOT_IDEA = \".idea\";",
                "-  private static final String DOT_XML = \".xml\";",
                "-",
                "-  // configurable folder names: read from .buckconfig",
                "-  private final String INPUT_RESOURCE_FOLDERS;",
                "-  private static final String INPUT_RESOURCE_FOLDERS_KEY = \"input_resource_folders\";",
                "-  private static final String INPUT_RESOURCE_FOLDERS_DEFAULT = \"android_res\";",
                "-  private final String OUTPUT_ASSETS_FOLDER;",
                "-  private static final String OUTPUT_ASSETS_FOLDER_KEY = \"output_assets_folder\";",
                "-  private static final String OUTPUT_ASSETS_FOLDER_DEFAULT = \"assets\";",
                "-  private final String OUTPUT_FONTS_FOLDER;",
                "-  private static final String OUTPUT_FONTS_FOLDER_KEY = \"output_fonts_folder\";",
                "-  private static final String OUTPUT_FONTS_FOLDER_DEFAULT = \"fonts\";",
                "-  private final String OUTPUT_RESOURCE_FOLDER;",
                "-  private static final String OUTPUT_RESOURCE_FOLDER_KEY = \"output_resource_folder\";",
                "-  private static final String OUTPUT_RESOURCE_FOLDER_DEFAULT = \"res\";",
                "-",
                "-  private final DirtyPrintStreamDecorator stdErr;",
                "-  private final String viewPath;",
                "-  private final boolean dryRun;",
                "-  private final boolean withTests;",
                "-  private final Config config;",
                "-  private final Verbosity verbosity;",
                "-",
                "-  private final TargetGraph targetGraph;",
                "-  private final ImmutableSet<BuildTarget> buildTargets;",
                "-  private final ActionGraphAndResolver actionGraph;",
                "-  private final SourcePathResolver sourcePathResolver;",
                "-",
                "-  private final Set<BuildTarget> testTargets = new HashSet<>();",
                "-  /** {@code Sets.union(buildTargets, allTargets)} */",
                "-  private final Set<BuildTarget> allTargets = new HashSet<>();",
                "-",
                "-  private final String repository;",
                "-",
                "-  private final Path configuredBuckOut;",
                "-  private final Path configuredBuckOutGen;",
                "-",
                "-  private ProjectView(",
                "-      ProjectViewParameters projectViewParameters,",
                "-      TargetGraph targetGraph,",
                "-      ImmutableSet<BuildTarget> buildTargets,",
                "-      ActionGraphAndResolver actionGraph) {",
                "-    this.repository = projectViewParameters.getPath().toString();",
                "-    this.stdErr = projectViewParameters.getStdErr();",
                "-    this.viewPath = Preconditions.checkNotNull(projectViewParameters.getViewPath());",
                "-    this.dryRun = projectViewParameters.isDryRun();",
                "-    this.withTests = projectViewParameters.isWithTests();",
                "-    this.config = projectViewParameters.getConfig();",
                "-    this.verbosity = projectViewParameters.getVerbosity();",
                "-",
                "-    this.targetGraph = targetGraph;",
                "-    this.buildTargets = buildTargets;",
                "-    this.actionGraph = actionGraph;",
                "-",
                "-    BuildRuleResolver buildRuleResolver = actionGraph.getResolver();",
                "-    SourcePathRuleFinder sourcePathRuleFinder = new SourcePathRuleFinder(buildRuleResolver);",
                "-    this.sourcePathResolver = DefaultSourcePathResolver.from(sourcePathRuleFinder);",
                "-",
                "-    INPUT_RESOURCE_FOLDERS =",
                "-        getIntellijSectionValue(INPUT_RESOURCE_FOLDERS_KEY, INPUT_RESOURCE_FOLDERS_DEFAULT);",
                "-    OUTPUT_ASSETS_FOLDER =",
                "-        getIntellijSectionValue(OUTPUT_ASSETS_FOLDER_KEY, OUTPUT_ASSETS_FOLDER_DEFAULT);",
                "-    OUTPUT_FONTS_FOLDER =",
                "-        getIntellijSectionValue(OUTPUT_FONTS_FOLDER_KEY, OUTPUT_FONTS_FOLDER_DEFAULT);",
                "-    OUTPUT_RESOURCE_FOLDER =",
                "-        getIntellijSectionValue(OUTPUT_RESOURCE_FOLDER_KEY, OUTPUT_RESOURCE_FOLDER_DEFAULT);",
                "-",
                "-    BuildRule buildRule = Iterables.getFirst(actionGraph.getActionGraph().getNodes(), null);",
                "-    if (buildRule == null) {",
                "-      // If somehow there are no rules, we'll just use the default paths",
                "-      configuredBuckOut = Paths.get(BUCK_OUT);",
                "-      configuredBuckOutGen = configuredBuckOut.resolve(\"gen\");",
                "-    } else {",
                "-      BuckPaths buckPaths = buildRule.getProjectFilesystem().getBuckPaths();",
                "-      configuredBuckOut = buckPaths.getBuckOut();",
                "-      configuredBuckOutGen = buckPaths.getGenDir();",
                "-    }",
                "-  }",
                "-",
                "-  private int run() {",
                "-    getTestTargets();",
                "-",
                "-    List<String> inputs = getPrunedInputs();",
                "-",
                "-    scanExistingView();",
                "-",
                "-    List<String> sourceFiles = new ArrayList<>();",
                "-    for (String input : inputs) {",
                "-      if (input.startsWith(\"android_res/\")) {",
                "-        linkResourceFile(input);",
                "-      } else {",
                "-        sourceFiles.add(input);",
                "-      }",
                "-    }",
                "-    Set<String> roots = generateRoots(sourceFiles);",
                "-    buildRootLinks(roots);",
                "-",
                "-    writeRootDotIml(sourceFiles, roots, buildDotIdeaFolder(inputs));",
                "-",
                "-    buildAllDirectoriesAndSymlinks();",
                "-",
                "-    stderr(\"\\nSuccess.\\n\");",
                "-    showAnyWarnings();",
                "-",
                "-    return 0;",
                "-  }",
                "-",
                "-  private void showAnyWarnings() {",
                "-    int warnings = nameCollisions.size(); // We don't count \"Can't handle\" messages as warnings",
                "-    if (warnings == 0) {",
                "-      return;",
                "-    }",
                "-",
                "-    String pluralMarker = warnings == 1 ? \"\" : \"s\";",
                "-    stderr(",
                "-        \"%,d warning%s.%s\\n\",",
                "-        warnings,",
                "-        pluralMarker,",
                "-        verbose() ? \"\" : String.format(\" (Use -v 2 to see the warning message%s.)\", pluralMarker));",
                "-  }",
                "-",
                "-  // region getTestTargets",
                "-",
                "-  private void getTestTargets() {",
                "-    if (withTests) {",
                "-      AbstractBreadthFirstTraversal.<TargetNode<?, ?>>traverse(",
                "-          targetGraph.getAll(buildTargets),",
                "-          node -> {",
                "-            testTargets.addAll(TargetNodes.getTestTargetsForNode(node));",
                "-            return targetGraph.getAll(node.getBuildDeps());",
                "-          });",
                "-    }",
                "-",
                "-    allTargets.addAll(buildTargets);",
                "-    allTargets.addAll(testTargets);",
                "-  }",
                "-",
                "-  // endregion getTestTargets",
                "-",
                "-  // region getPrunedInputs()",
                "-",
                "-  private List<String> getPrunedInputs() {",
                "-    return pruneInputs(getAllInputs());",
                "-  }",
                "-",
                "-  private Collection<String> getAllInputs() {",
                "-",
                "-    Set<String> inputs = new HashSet<>();",
                "-",
                "-    for (TargetNode<?, ?> node : targetGraph.getNodes()) {",
                "-      node.getInputs().forEach(input -> inputs.add(input.toString()));",
                "-    }",
                "-",
                "-    return inputs",
                "-        .stream()",
                "-        // Ignore non-english strings, and localized /res/raw files",
                "-        .filter(",
                "-            input ->",
                "-                !((input.contains(\"/res/values-\") && input.endsWith(\"strings.xml\"))",
                "-                    || input.contains(\"/res/raw-\")))",
                "-        .collect(Collectors.toList());",
                "-  }",
                "-",
                "-  private List<String> pruneInputs(Collection<String> allInputs) {",
                "-    // We'll use this to group all the resources that are alternative versions of the same content,",
                "-    // like drawables of different resolutions",
                "-    Pattern resource = Pattern.compile(\"/res/(?!(?:values(?:-[^/]+)?|raw)/)\");",
                "-",
                "-    List<String> result = new ArrayList<>();",
                "-    Map<String, List<String>> resources = new HashMap<>();",
                "-",
                "-    for (String input : allInputs) {",
                "-      Matcher matcher = resource.matcher(input);",
                "-      if (matcher.find()) {",
                "-        String basename = basename(input);",
                "-        List<String> candidates = resources.get(basename);",
                "-        if (candidates == null) {",
                "-          resources.put(basename, candidates = new ArrayList<>());",
                "-        }",
                "-        candidates.add(input);",
                "-      } else {",
                "-        result.add(input);",
                "-      }",
                "-    }",
                "-",
                "-    for (Map.Entry<String, List<String>> mapping : resources.entrySet()) {",
                "-      List<String> candidateList = mapping.getValue();",
                "-      Stream<String> candidateStream = candidateList.stream();",
                "-      if (candidateList.size() > 1) {",
                "-        candidateStream = candidateStream.sorted();",
                "-      }",
                "-      result.add(candidateStream.findFirst().get());",
                "-    }",
                "-",
                "-    return result;",
                "-  }",
                "-",
                "-  // endregion getPrunedInputs()",
                "-",
                "-  // region linkResourceFile",
                "-",
                "-  private static final String DASH_PART = \"-[^/]+\";",
                "-  private static final String NONCAPTURE_DASH_PART = optional(noncapture(DASH_PART));",
                "-",
                "-  private static final Patterns SIMPLE_RESOURCE_PATTERNS =",
                "-      Patterns.builder()",
                "-          // These are ordered based on the frequency in two large Android projects.",
                "-          // This ordering will not be ideal for every project, but it's probably not too far off.",
                "-          .add(\"/res/\", capture(\"drawable\", NONCAPTURE_DASH_PART), \"/\")",
                "-          .add(\"/res/\", capture(\"layout\", NONCAPTURE_DASH_PART), \"/\")",
                "-          .add(\"/res/\", capture(\"raw\", NONCAPTURE_DASH_PART), \"/\")",
                "-          .add(\"/res/\", capture(\"anim\", NONCAPTURE_DASH_PART), \"/\")",
                "-          .add(\"/res/\", capture(\"xml\", NONCAPTURE_DASH_PART), \"/\")",
                "-          .add(\"/res/\", capture(\"menu\", NONCAPTURE_DASH_PART), \"/\")",
                "-          .add(\"/res/\", capture(\"mipmap\", NONCAPTURE_DASH_PART), \"/\")",
                "-          .add(\"/res/\", capture(\"animator\"), \"/\")",
                "-          .build();",
                "-",
                "-  private static final String CAPTURE_ALL = capture(\".*\");",
                "-  private static final String CAPTURE_DASH_PART = optional(capture(DASH_PART));",
                "-",
                "-  private static final Patterns MANGLED_RESOURCE_PATTERNS =",
                "-      Patterns.builder()",
                "-          // These are also ordered based on the frequency in the same two large Android projects.",
                "-          .add(\"^android_res/\", CAPTURE_ALL, \"res/(values)\", CAPTURE_DASH_PART, \"/\")",
                "-          .add(\"^android_res/\", CAPTURE_ALL, \"res/(color)\", CAPTURE_DASH_PART, \"/\")",
                "-          .build();",
                "-",
                "-  // Group 1 has any path under ...//assets/ while group 2 has the filename",
                "-  private static final Patterns ASSETS_RES =",
                "-      Patterns.build(\"/assets/\", capture(noncapture(\"[^/]+/\"), \"*\"), CAPTURE_ALL);",
                "-",
                "-  private static final Patterns FONTS_RES = Patterns.build(\"/fonts/\", capture(\".*\\\\.\\\\w+\"));",
                "-",
                "-  private void linkResourceFile(String input) {",
                "-    // TODO(shemitz) Convert (say) \"res/drawable-hdpi/\" to \"res/drawable/\"",
                "-",
                "-    if (SIMPLE_RESOURCE_PATTERNS.onAnyMatch(input, this::simpleResourceLink)) {",
                "-      return;",
                "-    }",
                "-",
                "-    if (MANGLED_RESOURCE_PATTERNS.onAnyMatch(input, this::mangledResourceLink)) {",
                "-      return;",
                "-    }",
                "-",
                "-    if (ASSETS_RES.onAnyMatch(input, this::assetsLink)) {",
                "-      return;",
                "-    }",
                "-",
                "-    if (FONTS_RES.onAnyMatch(input, this::fontsLink)) {",
                "-      return;",
                "-    }",
                "-",
                "-    if (input.contains(\".\") && veryVerbose()) {",
                "-      stderr(\"Can't handle %s\\n\", input);",
                "-    }",
                "-  }",
                "-",
                "-  private void simpleResourceLink(Matcher match, String input) {",
                "-    String name = basename(input);",
                "-",
                "-    String directory =",
                "-        fileJoin(viewPath, OUTPUT_RESOURCE_FOLDER, flattenResourceDirectoryName(match.group(1)));",
                "-    mkdir(directory);",
                "-",
                "-    symlink(fileJoin(repository, input), fileJoin(directory, name));",
                "-  }",
                "-",
                "-  private void mangledResourceLink(Matcher match, String input) {",
                "-    if (!input.endsWith(DOT_XML)) {",
                "-      stderr(\"Ignoring %s, which does not end with .xml!\\n\", input);",
                "-      return;",
                "-    }",
                "-",
                "-    String fileName = basename(input);",
                "-    String name = fileName.substring(0, fileName.length() - DOT_XML.length());",
                "-",
                "-    String path = match.group(1).replace('/', '_');",
                "-",
                "-    String configQualifier = match.group(3);",
                "-    if (configQualifier == null) {",
                "-      configQualifier = \"\";",
                "-    }",
                "-",
                "-    String directory = fileJoin(viewPath, OUTPUT_RESOURCE_FOLDER, match.group(2));",
                "-    mkdir(directory);",
                "-",
                "-    symlink(",
                "-        fileJoin(repository, input), fileJoin(directory, path + name + configQualifier + DOT_XML));",
                "-  }",
                "-",
                "-  private static String flattenResourceDirectoryName(String name) {",
                "-    int dash = name.indexOf('-');",
                "-    return dash < 0 ? name : name.substring(0, dash);",
                "-  }",
                "-",
                "-  private void assetsLink(Matcher match, String input) {",
                "-    String inside = match.group(1); // everything between .../assets/ and filename",
                "-    String name = match.group(2); // basename(input)",
                "-",
                "-    String directory = fileJoin(viewPath, OUTPUT_ASSETS_FOLDER, inside);",
                "-    mkdir(directory);",
                "-",
                "-    symlink(fileJoin(repository, input), fileJoin(directory, name));",
                "-  }",
                "-",
                "-  private void fontsLink(Matcher match, String input) {",
                "-    String target = fileJoin(viewPath, OUTPUT_FONTS_FOLDER, match.group(1));",
                "-    String path = dirname(target);",
                "-    mkdir(path);",
                "-    symlink(fileJoin(repository, input), target);",
                "-  }",
                "-",
                "-  // endregion linkResourceFile",
                "-",
                "-  // region roots",
                "-",
                "-  /**",
                "-   * This is a complex routine that takes a list of source files and builds the best set of roots -",
                "-   * symlinks to directories - that contains the source files.",
                "-   *",
                "-   * <p>Any folder with a {@code BUCK} file could be a root: the best root is the one that requires",
                "-   * the fewest {@code excludedFolder} tags, but sometimes we need to pick a less-good root. If we",
                "-   * have {@code foo/bar/baz/tom}, {@code foo/bar/baz/dick}, and {@code foo/bar/harry}, the best",
                "-   * root for {@code foo/bar/baz/tom} and {@code foo/bar/baz/dick} may be {@code foo/bar/baz} while",
                "-   * the best root for {@code foo/bar/harry} may be {@code foo/bar} ... which would be the directory",
                "-   * containing {@code foo/bar/baz}, so we need to pick {@code foo/bar} for {@code foo/bar/baz/tom}.",
                "-   *",
                "-   * <p>We do this in two passes. The first pass builds a set of candidates and a map from source",
                "-   * directory index to candidate, where a candidate is the best root by {@code excludedFolder}",
                "-   * count. The second pass examines each candidate, and replaces it with the highest ancestor from",
                "-   * the set of candidate values, if any.",
                "-   */",
                "-  private Set<String> generateRoots(List<String> sourceFiles) {",
                "-    // Setup: Get a sorted (so that a, a/b, and a/c are all together) list of source paths",
                "-    RootsHelper helper = new RootsHelper();",
                "-",
                "-    for (String sourceFile : sourceFiles) {",
                "-      String path = dirname(sourceFile);",
                "-      if (!isNullOrEmpty(path)) {",
                "-        helper.addSourcePath(path);",
                "-      }",
                "-    }",
                "-    List<String> paths = helper.getSortedSourcePaths();",
                "-",
                "-    // First pass: Build the candidate map",
                "-    Set<String> candidates = new HashSet<>();",
                "-    String[] candidateMap = new String[paths.size()]; // paths' index -> candidate",
                "-    for (int index = 0, size = paths.size(); index < size; /*increment in loop*/ ) {",
                "-      String path = pathWithBuck(paths.get(index));",
                "-      if (path == null) {",
                "-        index += 1;",
                "-        continue;",
                "-      }",
                "-",
                "-      int lowestCost = helper.excludesUnder(path);",
                "-      String bestRoot = path;",
                "-      String parent = dirname(bestRoot);",
                "-      while (!isNullOrEmpty(parent)) {",
                "-        int cost = helper.excludesUnder(parent);",
                "-        if (cost < lowestCost) {",
                "-          lowestCost = cost;",
                "-          bestRoot = parent;",
                "-        }",
                "-        parent = pathWithBuck(dirname(parent));",
                "-      }",
                "-      candidates.add(bestRoot);",
                "-      candidateMap[index] = bestRoot;",
                "-",
                "-      index += 1;",
                "-      String prefix = guaranteeEndsWithFileSeparator(bestRoot);",
                "-      while (index < size && paths.get(index).startsWith(prefix)) {",
                "-        index += 1;",
                "-      }",
                "-    }",
                "-",
                "-    // Second pass: Possibly replace candidates with ancestors",
                "-    Set<String> roots = new HashSet<>();",
                "-    for (int index = 0, size = paths.size(); index < size; /*increment in loop*/ ) {",
                "-      String candidate = candidateMap[index];",
                "-      if (candidate == null) {",
                "-        index += 1;",
                "-        continue;",
                "-      }",
                "-",
                "-      String bestRoot = candidate;",
                "-      String parent = dirname(bestRoot);",
                "-      while (!isNullOrEmpty(parent)) {",
                "-        if (candidates.contains(parent)) {",
                "-          bestRoot = parent;",
                "-        }",
                "-        parent = dirname(parent);",
                "-      }",
                "-      roots.add(bestRoot);",
                "-",
                "-      index += 1;",
                "-      String prefix = guaranteeEndsWithFileSeparator(bestRoot);",
                "-      while (index < size && paths.get(index).startsWith(prefix)) {",
                "-        index += 1;",
                "-      }",
                "-    }",
                "-",
                "-    return roots;",
                "-  }",
                "-",
                "-  /**",
                "-   * Returns path, if it contains a BUCK file. Else returns the closest parent with a BUCK file, or",
                "-   * null if there are no BUCK files 'above' path",
                "-   */",
                "-  private String pathWithBuck(String path) {",
                "-    while (path != null && !Files.exists(Paths.get(repository, path, \"BUCK\"))) {",
                "-      path = dirname(path);",
                "-    }",
                "-    return path;",
                "-  }",
                "-",
                "-  private void buildRootLinks(Set<String> roots) {",
                "-    for (String root : roots) {",
                "-      symlink(fileJoin(repository, root), fileJoin(viewPath, root));",
                "-    }",
                "-  }",
                "-",
                "-  /** Maintains a set of source paths, and a map of paths -> excludes */",
                "-  private class RootsHelper {",
                "-    private final Set<String> sourcePaths = new HashSet<>();",
                "-    private final Map<String, Integer> excludes = new HashMap<>();",
                "-",
                "-    void addSourcePath(String sourcePath) {",
                "-      sourcePaths.add(sourcePath);",
                "-    }",
                "-",
                "-    boolean isSourcePath(String sourcePath) {",
                "-      return sourcePaths.contains(sourcePath);",
                "-    }",
                "-",
                "-    List<String> getSortedSourcePaths() {",
                "-      return sourcePaths.stream().sorted().collect(Collectors.toList());",
                "-    }",
                "-",
                "-    int excludesUnder(String path) {",
                "-      if (excludes.containsKey(path)) {",
                "-        return excludes.get(path);",
                "-      }",
                "-",
                "-      int sum = 0;",
                "-      File absolute = new File(repository, path);",
                "-      String[] files = absolute.list(neitherDotOrDotDot);",
                "-      if (files != null) {",
                "-        for (String entry : files) {",
                "-          String child = fileJoin(path, entry);",
                "-          if (isDirectory(fileJoin(repository, child))) {",
                "-            if (!isSourcePath(child)) {",
                "-              sum += 1;",
                "-            }",
                "-            sum += excludesUnder(child);",
                "-          }",
                "-        }",
                "-      }",
                "-      excludes.put(path, sum);",
                "-      return sum;",
                "-    }",
                "-  }",
                "-",
                "-  // endregion roots",
                "-",
                "-  // region .idea folder",
                "-",
                "-  private static final String BIN = \"bin\";",
                "-  private static final String BUCK_OUT = \"buck-out\";",
                "-  private static final String COMPONENT = \"component\";",
                "-  private static final String CONTENT = \"content\";",
                "-  private static final String EXCLUDE_FOLDER = \"excludeFolder\";",
                "-  private static final String IS_TEST_SOURCE = \"isTestSource\";",
                "-  private static final String LIBRARY = \"library\";",
                "-  private static final String LOG = \"log\";",
                "-  private static final String MODULES = \"modules\";",
                "-  private static final String NAME = \"name\";",
                "-  private static final String OPTION = \"option\";",
                "-  private static final String ORDER_ENTRY = \"orderEntry\";",
                "-  private static final String ROOT_IML = SharedConstants.ROOT_MODULE_NAME + \".iml\";",
                "-  private static final String SOURCE_FOLDER = \"sourceFolder\";",
                "-  private static final String TRASH = \".trash\";",
                "-  private static final String TYPE = \"type\";",
                "-  private static final String URL = \"url\";",
                "-  private static final String VALUE = \"value\";",
                "-  private static final String VERSION = \"version\";",
                "-",
                "-  private static final String MODULE_DIR = \"$MODULE_DIR$\";",
                "-  private static final String FILE_MODULE_DIR = \"file://\" + MODULE_DIR;",
                "-",
                "-  // region XML utilities",
                "-",
                "-  private enum XML {",
                "-    DECLARATION,",
                "-    NO_DECLARATION",
                "-  }",
                "-",
                "-  private static Document newDocument(Element root) {",
                "-    return new Document(root);",
                "-  }",
                "-",
                "-  private void saveDocument(String path, String filename, XML mode, Document document) {",
                "-    if (path != null) {",
                "-      filename = fileJoin(path, filename);",
                "-    }",
                "-",
                "-    if (dryRun) {",
                "-      stderr(\"Writing %s\\n\", filename);",
                "-      return;",
                "-    }",
                "-",
                "-    Format prettyFormat = Format.getPrettyFormat();",
                "-    prettyFormat.setOmitDeclaration(mode == XML.NO_DECLARATION);",
                "-    XMLOutputter outputter = new XMLOutputter(prettyFormat);",
                "-    try (Writer writer = new FileWriter(filename)) {",
                "-      outputter.output(document, writer);",
                "-    } catch (IOException e) {",
                "-      stderr(\"%s exception writing %s\\n\", e.getClass().getSimpleName(), filename);",
                "-    }",
                "-  }",
                "-",
                "-  private void saveDocument(String path, String filename, XML mode, Element root) {",
                "-    saveDocument(path, filename, mode, newDocument(root));",
                "-  }",
                "-",
                "-  private static Element addElement(Element parent, String name, Attribute... attributes) {",
                "-    Element child = newElement(name, attributes);",
                "-    parent.addContent(child);",
                "-    return child;",
                "-  }",
                "-",
                "-  private static Element addElement(Element parent, String name, List<Attribute> attributes) {",
                "-    return addElement(parent, name, attributes.toArray(new Attribute[attributes.size()]));",
                "-  }",
                "-",
                "-  private static Attribute attribute(String name, String value) {",
                "-    return new Attribute(name, value);",
                "-  }",
                "-",
                "-  private static Attribute attribute(String name, Object value) {",
                "-    return attribute(name, value.toString());",
                "-  }",
                "-",
                "-  private static Attribute attribute(String name, String pattern, Object... parameters) {",
                "-    return attribute(name, String.format(pattern, parameters));",
                "-  }",
                "-",
                "-  private static Element newElement(String name, Attribute attribute) {",
                "-    Element element = new Element(name);",
                "-    element.setAttribute(attribute);",
                "-    return element;",
                "-  }",
                "-",
                "-  private static Element newElement(String name, Attribute... attributes) {",
                "-    Element element = new Element(name);",
                "-    if (attributes != null) {",
                "-      for (Attribute attribute : attributes) {",
                "-        element.setAttribute(attribute);",
                "-      }",
                "-    }",
                "-    return element;",
                "-  }",
                "-",
                "-  // endregion XML utilities",
                "-",
                "-  private List<String> buildDotIdeaFolder(List<String> inputs) {",
                "-    String dotIdea = fileJoin(viewPath, DOT_IDEA);",
                "-    immediateMkdir(dotIdea);",
                "-",
                "-    writeModulesXml(dotIdea);",
                "-    writeMiscXml(dotIdea);",
                "-",
                "-    symlink(",
                "-        fileJoin(repository, DOT_IDEA, CODE_STYLE_SETTINGS),",
                "-        fileJoin(dotIdea, CODE_STYLE_SETTINGS));",
                "-",
                "-    return buildDotIdeaDotLibrariesFolder(dotIdea, inputs);",
                "-  }",
                "-",
                "-  private void writeModulesXml(String dotIdea) {",
                "-    String filepath = fileJoin(\"$PROJECT_DIR$\", ROOT_IML);",
                "-    String fileurl = \"file://\" + filepath;",
                "-",
                "-    Element project = newElement(\"project\", attribute(VERSION, 4));",
                "-    Element component = addElement(project, COMPONENT, attribute(NAME, \"ProjectModuleManager\"));",
                "-    Element modules = addElement(component, MODULES);",
                "-    addElement(",
                "-        modules,",
                "-        \"module\",",
                "-        attribute(\"fileurl\", fileurl),",
                "-        attribute(\"filepath\", filepath),",
                "-        attribute(\"group\", MODULES));",
                "-",
                "-    saveDocument(dotIdea, \"modules.xml\", XML.DECLARATION, project);",
                "-  }",
                "-",
                "-  private void writeMiscXml(String dotIdea) {",
                "-    Element project = newElement(\"project\", attribute(VERSION, 4));",
                "-    addElement(",
                "-        project,",
                "-        COMPONENT,",
                "-        attribute(NAME, \"FrameworkDetectionExcludesConfiguration\"),",
                "-        attribute(\"detection-enabled\", false));",
                "-",
                "-    String languageLevel = getIntellijSectionValue(INTELLIJ_LANGUAGE_LEVEL, \"JDK_1_7\");",
                "-    String jdkName = getIntellijSectionValue(INTELLIJ_JDK_NAME, \"Android API 23 Platform\");",
                "-    String jdkType = getIntellijSectionValue(INTELLIJ_JDK_TYPE, \"Android SDK\");",
                "-",
                "-    addElement(",
                "-        project,",
                "-        COMPONENT,",
                "-        attribute(NAME, \"ProjectRootManager\"),",
                "-        attribute(\"VERSION\", 2),",
                "-        attribute(\"languageLevel\", languageLevel),",
                "-        attribute(\"assert-keyword\", true),",
                "-        attribute(\"jdk-15\", jdk15(languageLevel)),",
                "-        attribute(\"project-jdk-name\", jdkName),",
                "-        attribute(\"project-jdk-type\", jdkType));",
                "-",
                "-    saveDocument(dotIdea, \"misc.xml\", XML.DECLARATION, project);",
                "-  }",
                "-",
                "-  // region .buckconfig wrappers",
                "-",
                "-  /** All the values we currently read come from the [intellij] section of the .buckconfig file */",
                "-  private static final String INTELLIJ_SECTION = \"intellij\";",
                "-",
                "-  // Values in the [intellij] section",
                "-  private static final String INTELLIJ_LANGUAGE_LEVEL = \"language_level\";",
                "-  private static final String INTELLIJ_JDK_NAME = \"jdk_name\";",
                "-  private static final String INTELLIJ_JDK_TYPE = \"jdk_type\";",
                "-",
                "-  private Optional<String> getIntellijSectionValue(String propertyName) {",
                "-    return config.getValue(INTELLIJ_SECTION, propertyName);",
                "-  }",
                "-",
                "-  private String getIntellijSectionValue(String propertyName, String defaultValue) {",
                "-    return getIntellijSectionValue(propertyName).orElse(defaultValue);",
                "-  }",
                "-",
                "-  /**",
                "-   * Tries to parse the language level. Will always return {@code false} if the string doesn't look",
                "-   * like {@code /JDK_\\d_\\d/}. Otherwise, will return {@code true} iff language level {@literal >=}",
                "-   * 1.5",
                "-   */",
                "-  private static boolean jdk15(String languageLevel) {",
                "-    if (languageLevel.length() < 7 || !languageLevel.startsWith(\"JDK_\")) {",
                "-      return false;",
                "-    }",
                "-    if (languageLevel.charAt(3) != '_' || languageLevel.charAt(5) != '_') {",
                "-      return false;",
                "-    }",
                "-    char major = languageLevel.charAt(4);",
                "-    char minor = languageLevel.charAt(6);",
                "-    if (!Character.isDigit(major) || !Character.isDigit(minor)) {",
                "-      return false;",
                "-    }",
                "-",
                "-    // If we get here, languageLevel looks like /JDK_\\d_\\d/",
                "-    int majorValue = Character.getNumericValue(major);",
                "-    int minorValue = Character.getNumericValue(minor);",
                "-    if (majorValue < 1 || minorValue < 1) {",
                "-      // We passed the isDigit() tests, but either MIGHT be 0 ...",
                "-      return false;",
                "-    }",
                "-    if (majorValue > 1) {",
                "-      return true;",
                "-    }",
                "-    // majorValue == 1",
                "-    return minorValue >= 5;",
                "-  }",
                "-",
                "-  // endregion .buckconfig wrappers",
                "-",
                "-  private List<String> buildDotIdeaDotLibrariesFolder(String dotIdea, List<String> inputs) {",
                "-    String libraries = fileJoin(dotIdea, \"libraries\");",
                "-    immediateMkdir(libraries);",
                "-",
                "-    List<String> libraryXmls = new ArrayList<>();",
                "-",
                "-    // .jar files in the inputs",
                "-    describeInputJars(inputs, libraries, libraryXmls);",
                "-",
                "-    // .jar files in the action graph",
                "-    describeAidlJars(libraries, libraryXmls);",
                "-",
                "-    return libraryXmls;",
                "-  }",
                "-",
                "-  private void describeInputJars(List<String> inputs, String libraries, List<String> libraryXmls) {",
                "-    Map<String, List<String>> directories = new HashMap<>();",
                "-    inputs",
                "-        .stream()",
                "-        .filter((input) -> input.endsWith(\".jar\"))",
                "-        .forEach(",
                "-            jar -> {",
                "-              String dirname = dirname(jar);",
                "-              String basename = basename(jar);",
                "-              List<String> basenames = directories.get(dirname);",
                "-              if (basenames == null) {",
                "-                basenames = new ArrayList<>();",
                "-                directories.put(dirname, basenames);",
                "-              }",
                "-              basenames.add(basename);",
                "-            });",
                "-",
                "-    for (Map.Entry<String, List<String>> entry : directories.entrySet()) {",
                "-      libraryXmls.add(",
                "-          buildLibraryFile(libraries, entry.getKey(), entry.getValue(), Collections.emptyList()));",
                "-    }",
                "-  }",
                "-",
                "-  private void describeAidlJars(String libraries, List<String> libraryXmls) {",
                "-    for (BuildRule rule : actionGraph.getActionGraph().getNodes()) {",
                "-      if (rule instanceof AndroidLibrary) {",
                "-        AndroidLibrary androidLibrary = (AndroidLibrary) rule;",
                "-        Collection<BuildRule> aidlSource =",
                "-            RichStream.from(androidLibrary.getBuildDeps())",
                "-                .filter(GenAidl.class)",
                "-                .collect(Collectors.toSet());",
                "-        if (!aidlSource.isEmpty()) {",
                "-          SourcePath sourcePath = rule.getSourcePathToOutput();",
                "-          if (sourcePath != null) {",
                "-            Path path =",
                "-                rule.getProjectFilesystem()",
                "-                    .getRootPath()",
                "-                    .relativize(sourcePathResolver.getAbsolutePath(sourcePath));",
                "-",
                "-            String dirname = path.getParent().toString();",
                "-            String basename = path.getFileName().toString();",
                "-            libraryXmls.add(",
                "-                buildLibraryFile(",
                "-                    libraries, dirname, Collections.singletonList(basename), aidlSource));",
                "-          }",
                "-        }",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  private String buildLibraryFile(",
                "-      String libraries, String directory, List<String> jars, Collection<BuildRule> sourceRules) {",
                "-    String filename = \"library_\" + directory.replace('-', '_').replace('/', '_');",
                "-    List<String> urls =",
                "-        jars.stream()",
                "-            .map((jar) -> fileJoin(\"jar://$PROJECT_DIR$\", directory, jar) + \"!/\")",
                "-            .collect(Collectors.toList());",
                "-",
                "-    Element component = newElement(COMPONENT, attribute(NAME, \"libraryTable\"));",
                "-    Element library = addElement(component, LIBRARY, attribute(NAME, filename));",
                "-    Element classes = addElement(library, \"CLASSES\"); // believe it or not, case matters, here!",
                "-    for (String url : urls) {",
                "-      addElement(classes, \"root\", attribute(URL, url));",
                "-    }",
                "-    addElement(library, \"JAVADOC\");",
                "-    Element sources = addElement(library, \"SOURCES\");",
                "-    for (BuildRule sourceRule : sourceRules) {",
                "-      SourcePath sourcePath = sourceRule.getSourcePathToOutput();",
                "-      if (sourcePath != null) {",
                "-        Path absolutePath = sourcePathResolver.getAbsolutePath(sourcePath);",
                "-        addElement(sources, \"root\", attribute(URL, \"jar://%s!/\", absolutePath));",
                "-      }",
                "-    }",
                "-",
                "-    saveDocument(libraries, filename + \".xml\", XML.NO_DECLARATION, component);",
                "-",
                "-    return filename;",
                "-  }",
                "-",
                "-  private void writeRootDotIml(",
                "-      List<String> sourceFiles, Set<String> roots, List<String> libraries) {",
                "-    String configuredBuckOutAsString = configuredBuckOut.toString();",
                "-    String buckOut = fileJoin(viewPath, configuredBuckOutAsString);",
                "-    symlink(fileJoin(repository, configuredBuckOutAsString), buckOut);",
                "-",
                "-    String apkPath = null;",
                "-    Map<BuildTarget, String> outputs = getOutputs();",
                "-    // Find the 1st target that has output",
                "-    for (BuildTarget target : buildTargets) {",
                "-      String output = outputs.get(target);",
                "-      if (output != null && output.endsWith(\".apk\")) {",
                "-        apkPath = File.separator + output;",
                "-",
                "-        break;",
                "-      }",
                "-    }",
                "-",
                "-    String manifestPath = fileJoin(File.separator, OUTPUT_RESOURCE_FOLDER, ANDROID_MANIFEST);",
                "-    symlink(",
                "-        fileJoin(repository, INPUT_RESOURCE_FOLDERS, ANDROID_MANIFEST),",
                "-        fileJoin(viewPath, manifestPath));",
                "-",
                "-    Element module = newElement(\"module\", attribute(TYPE, \"JAVA_MODULE\"), attribute(VERSION, 4));",
                "-",
                "-    Element facetManager = addElement(module, COMPONENT, attribute(NAME, \"FacetManager\"));",
                "-    Element facet =",
                "-        addElement(facetManager, \"facet\", attribute(TYPE, \"android\"), attribute(NAME, \"Android\"));",
                "-",
                "-    Element configuration = addElement(facet, \"configuration\");",
                "-",
                "-    String genFolder = fileJoin(File.separator, configuredBuckOutGen.toString());",
                "-    addElement(",
                "-        configuration,",
                "-        OPTION,",
                "-        attribute(NAME, \"GEN_FOLDER_RELATIVE_PATH_APT\"),",
                "-        attribute(VALUE, genFolder));",
                "-    addElement(",
                "-        configuration,",
                "-        OPTION,",
                "-        attribute(NAME, \"GEN_FOLDER_RELATIVE_PATH_AIDL\"),",
                "-        attribute(VALUE, fileJoin(genFolder, \"aidl\")));",
                "-",
                "-    addElement(",
                "-        configuration,",
                "-        OPTION,",
                "-        attribute(NAME, \"MANIFEST_FILE_RELATIVE_PATH\"),",
                "-        attribute(VALUE, manifestPath));",
                "-    addElement(",
                "-        configuration,",
                "-        OPTION,",
                "-        attribute(NAME, \"RES_FOLDERS_RELATIVE_PATH\"),",
                "-        attribute(VALUE, \"/res\"));",
                "-    if (apkPath != null) {",
                "-      addElement(configuration, OPTION, attribute(NAME, \"APK_PATH\"), attribute(VALUE, apkPath));",
                "-    }",
                "-    addElement(",
                "-        configuration,",
                "-        OPTION,",
                "-        attribute(NAME, \"ENABLE_SOURCES_AUTOGENERATION\"),",
                "-        attribute(VALUE, true));",
                "-    addElement(configuration, \"includeAssetsFromLibraries\").addContent(\"true\");",
                "-",
                "-    Element rootManager =",
                "-        addElement(",
                "-            module,",
                "-            COMPONENT,",
                "-            attribute(NAME, \"NewModuleRootManager\"),",
                "-            attribute(\"inherit-compiler-output\", true));",
                "-    addElement(rootManager, \"exclude-output\");",
                "-",
                "-    Element folders = addElement(rootManager, CONTENT, attribute(URL, FILE_MODULE_DIR));",
                "-",
                "-    Set<String> sourceFolders =",
                "-        sourceFiles.stream().map((folder) -> dirname(folder)).collect(Collectors.toSet());",
                "-    sourceFolders.remove(null);",
                "-",
                "-    for (String source : sortSourceFolders(sourceFolders)) {",
                "-      List<Attribute> attributes = new ArrayList<>(3);",
                "-      attributes.add(attribute(URL, fileJoin(FILE_MODULE_DIR, source)));",
                "-      attributes.add(attribute(IS_TEST_SOURCE, false));",
                "-",
                "-      String packagePrefix = getPackage(fileJoin(repository, source));",
                "-      if (packagePrefix != null) {",
                "-        attributes.add(attribute(\"packagePrefix\", packagePrefix));",
                "-      }",
                "-      addElement(folders, SOURCE_FOLDER, attributes);",
                "-    }",
                "-",
                "-    for (String excluded : getExcludedFolders(sourceFolders, roots)) {",
                "-      addElement(folders, EXCLUDE_FOLDER, attribute(URL, fileJoin(FILE_MODULE_DIR, excluded)));",
                "-    }",
                "-",
                "-    addElement(rootManager, ORDER_ENTRY, attribute(TYPE, \"inheritedJdk\"));",
                "-    addElement(",
                "-        rootManager, ORDER_ENTRY, attribute(TYPE, SOURCE_FOLDER), attribute(\"forTests\", false));",
                "-",
                "-    for (String library : libraries) {",
                "-      addElement(",
                "-          rootManager,",
                "-          ORDER_ENTRY,",
                "-          attribute(TYPE, LIBRARY),",
                "-          attribute(NAME, library),",
                "-          attribute(\"level\", \"project\"));",
                "-    }",
                "-",
                "-    for (String relativeFolder : getAnnotationAndGeneratedFolders()) {",
                "-      String folder = fileJoin(FILE_MODULE_DIR, relativeFolder);",
                "-      Attribute url = attribute(URL, folder);",
                "-      Element content = addElement(rootManager, CONTENT, url);",
                "-      addElement(",
                "-          content,",
                "-          SOURCE_FOLDER,",
                "-          url.clone(),",
                "-          attribute(IS_TEST_SOURCE, false),",
                "-          attribute(\"generated\", true));",
                "-    }",
                "-",
                "-    saveDocument(viewPath, ROOT_IML, XML.DECLARATION, module);",
                "-  }",
                "-",
                "-  private Map<BuildTarget, String> getOutputs() {",
                "-    Map<BuildTarget, String> outputs = new HashMap<>(buildTargets.size());",
                "-",
                "-    BuildRuleResolver ruleResolver = actionGraph.getResolver();",
                "-    SourcePathResolver pathResolver =",
                "-        DefaultSourcePathResolver.from(new SourcePathRuleFinder(ruleResolver));",
                "-",
                "-    for (BuildTarget target : buildTargets) {",
                "-      BuildRule rule = ruleResolver.getRule(target);",
                "-      SourcePath sourcePathToOutput = rule.getSourcePathToOutput();",
                "-      if (sourcePathToOutput == null) {",
                "-        continue;",
                "-      }",
                "-      Path outputPath = pathResolver.getRelativePath(sourcePathToOutput);",
                "-      outputs.put(target, outputPath.toString());",
                "-    }",
                "-",
                "-    return outputs;",
                "-  }",
                "-",
                "-  private List<String> sortSourceFolders(Set<String> sourceFolders) {",
                "-    return sourceFolders.stream().sorted().collect(Collectors.toList());",
                "-  }",
                "-",
                "-  private Set<String> getExcludedFolders(Set<String> sourceFolders, Set<String> roots) {",
                "-    Set<String> candidates = allFoldersUnder(roots);",
                "-",
                "-    // Remove any folder that's explicitly a source folder",
                "-    candidates.removeAll(sourceFolders);",
                "-",
                "-    // Remove any folder that's the parent of a source folder. (IntelliJ can handle a sourceFolder",
                "-    // under an excludeFolder; Android Studio can not.) This is a quadratic operation, but in",
                "-    // practice only adds a couple of seconds on a large project",
                "-    Set<String> excludes =",
                "-        candidates",
                "-            .stream()",
                "-            .filter(",
                "-                root -> {",
                "-                  String probe = guaranteeEndsWithFileSeparator(root);",
                "-                  return !sourceFolders.stream().anyMatch(source -> source.startsWith(probe));",
                "-                })",
                "-            .collect(Collectors.toSet());",
                "-",
                "-    // Add buck-out directories besides gen and annotation",
                "-    // FIXME(shemitz) This is too hard-coded: This really should get the 'non-excludes' from",
                "-    // pruneListOfAnnotationAndGeneratedFolders(), and look at the actual directories under buck-out",
                "-    excludes.add(fileJoin(BUCK_OUT, BIN));",
                "-    excludes.add(fileJoin(BUCK_OUT, LOG));",
                "-    excludes.add(fileJoin(BUCK_OUT, TRASH));",
                "-",
                "-    return excludes;",
                "-  }",
                "-",
                "-  private static Set<String> allFoldersUnder(Set<String> roots) {",
                "-    Set<String> result = new HashSet<>();",
                "-    for (String root : roots) {",
                "-      result.addAll(foldersUnder(root));",
                "-    }",
                "-    return result;",
                "-  }",
                "-",
                "-  private static Set<String> foldersUnder(String root) {",
                "-    // TODO(shemitz) This really should use Files.find() ...",
                "-    Set<String> result = new HashSet<>();",
                "-    File directory = new File(root);",
                "-    if (directory.isDirectory()) {",
                "-      String[] children = directory.list(neitherDotOrDotDot);",
                "-      if (children != null) {",
                "-        for (String child : children) {",
                "-          String qualified = fileJoin(root, child);",
                "-          if (isDirectory(qualified)) {",
                "-            result.add(qualified);",
                "-            result.addAll(foldersUnder(qualified));",
                "-          }",
                "-        }",
                "-      }",
                "-    }",
                "-    return result;",
                "-  }",
                "-",
                "-  private static final Pattern PACKAGE = Pattern.compile(\"package\\\\s+([\\\\w\\\\.]+);\");",
                "-",
                "-  @Nullable",
                "-  private static String getPackage(String path) {",
                "-    File folder = new File(path);",
                "-    File[] files = folder.listFiles((child) -> child.isFile() && child.getName().endsWith(\".java\"));",
                "-    if (files != null) {",
                "-      for (File file : files) {",
                "-        String text;",
                "-        try {",
                "-          text = new String(Files.readAllBytes(file.toPath()));",
                "-        } catch (IOException e) {",
                "-          continue;",
                "-        }",
                "-        Matcher matcher = PACKAGE.matcher(text);",
                "-        if (matcher.find()) {",
                "-          return matcher.group(1);",
                "-        }",
                "-      }",
                "-    }",
                "-    return null;",
                "-  }",
                "-",
                "-  private Collection<String> getAnnotationAndGeneratedFolders() {",
                "-    Collection<String> folders = new HashSet<>();",
                "-",
                "-    getAnnotationFolders(folders);",
                "-    getGeneratedFolders(folders);",
                "-",
                "-    return pruneListOfAnnotationAndGeneratedFolders(",
                "-        folders.stream().sorted().collect(Collectors.toList()));",
                "-  }",
                "-",
                "-  private void getAnnotationFolders(Collection<String> folders) {",
                "-    for (BuildRule buildRule : actionGraph.getActionGraph().getNodes()) {",
                "-      if (buildRule instanceof JavaLibrary) {",
                "-        Optional<Path> generatedSourcePath = ((JavaLibrary) buildRule).getGeneratedSourcePath();",
                "-        if (generatedSourcePath.isPresent()) {",
                "-          folders.add(generatedSourcePath.get().toString());",
                "-        }",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  private void getGeneratedFolders(Collection<String> folders) {",
                "-    Map<String, String> labelToGeneratedSourcesMap =",
                "-        config.getMap(INTELLIJ_SECTION, \"generated_sources_label_map\");",
                "-    Pattern name = Pattern.compile(\"%name%\");",
                "-",
                "-    AbstractBreadthFirstTraversal.<TargetNode<?, ?>>traverse(",
                "-        targetGraph.getAll(allTargets),",
                "-        node -> {",
                "-          ProjectFilesystem filesystem = node.getFilesystem();",
                "-          Set<BuildTarget> buildDeps = node.getBuildDeps();",
                "-          for (BuildTarget buildTarget : buildDeps) {",
                "-            Object constructorArg = node.getConstructorArg();",
                "-            if (constructorArg instanceof CommonDescriptionArg) {",
                "-              CommonDescriptionArg commonDescriptionArg = (CommonDescriptionArg) constructorArg;",
                "-              folders.addAll(",
                "-                  commonDescriptionArg",
                "-                      .getLabels()",
                "-                      .stream()",
                "-                      .map(labelToGeneratedSourcesMap::get)",
                "-                      .filter(Objects::nonNull)",
                "-                      .map(",
                "-                          pattern ->",
                "-                              name.matcher(pattern)",
                "-                                  .replaceAll(buildTarget.getShortNameAndFlavorPostfix()))",
                "-                      .map(",
                "-                          (String path) ->",
                "-                              BuildTargets.getGenPath(filesystem, buildTarget, path).toString())",
                "-                      .collect(Collectors.toSet()));",
                "-            }",
                "-          }",
                "-          return targetGraph.getAll(buildDeps);",
                "-        });",
                "-  }",
                "-",
                "-  private Collection<String> pruneListOfAnnotationAndGeneratedFolders(List<String> folders) {",
                "-    int buckOutNameCount = configuredBuckOut.getNameCount();",
                "-    Set<String> prunedPaths = new HashSet<>();",
                "-",
                "-    for (String folder : folders) {",
                "-      Path path = Paths.get(folder);",
                "-      if (!path.startsWith(configuredBuckOut) || path.equals(configuredBuckOut)) {",
                "-        // The folder is not under the configured buck-out or *is* the configured buck-out.",
                "-        // Likely, neither will never happen, but we don't want to blow up if either does",
                "-        prunedPaths.add(folder);",
                "-      } else {",
                "-        Path nextName = path.getName(buckOutNameCount);",
                "-        prunedPaths.add(configuredBuckOut.resolve(nextName).toString());",
                "-      }",
                "-    }",
                "-",
                "-    return prunedPaths;",
                "-  }",
                "-",
                "-  // endregion .idea folder",
                "-",
                "-  // region symlinks, mkdir, and other file utilities",
                "-",
                "-  /**",
                "-   * This is <em>not</em> all directories in the view; this is all 'terminals' that have symlinks.",
                "-   * That is, if we have {@code foo/bar/baz/link}, we will record {@code foo/bar/baz} but not {@code",
                "-   * foo/bar} or {@code foo}.",
                "-   */",
                "-  private final Set<Path> existingDirectories = new HashSet<>();",
                "-  /** basefile -> link */",
                "-  private final Map<Path, Path> existingSymlinks = new HashMap<>();",
                "-",
                "-  private final Set<Path> directoriesToMake = new HashSet<>();",
                "-  /** basefile -> link */",
                "-  private final Map<Path, Path> symlinksToCreate = new HashMap<>();",
                "-",
                "-  private final Set<Path> nameCollisions = new HashSet<>();",
                "-",
                "-  private void scanExistingView() {",
                "-    Path root = Paths.get(viewPath);",
                "-    if (!Files.exists(root)) {",
                "-      return;",
                "-    }",
                "-    try {",
                "-      Files.find(",
                "-              root,",
                "-              Integer.MAX_VALUE,",
                "-              (Path ignored, BasicFileAttributes attributes) ->",
                "-                  attributes.isDirectory() || attributes.isSymbolicLink())",
                "-          .forEach(",
                "-              path -> {",
                "-                if (Files.isDirectory(path, LinkOption.NOFOLLOW_LINKS)) {",
                "-                  if (hasSymbolicLink(path)) {",
                "-                    existingDirectories.add(path.toAbsolutePath());",
                "-                  }",
                "-                } else if (Files.isSymbolicLink(path)) {",
                "-                  try {",
                "-                    existingSymlinks.put(Files.readSymbolicLink(path), path);",
                "-                  } catch (IOException e) {",
                "-                    stderr(\"'%s' reading %s\", e.getMessage(), path);",
                "-                  }",
                "-                }",
                "-              });",
                "-    } catch (IOException e) {",
                "-      stderr(\"'%s' scanning the existing links and directories\\n\", e.getMessage());",
                "-    }",
                "-  }",
                "-",
                "-  private boolean hasSymbolicLink(Path path) {",
                "-    try (Stream<Path> paths = Files.list(path)) {",
                "-      return paths.anyMatch(Files::isSymbolicLink);",
                "-    } catch (IOException e) {",
                "-      stderr(\"'%s' enumerating %s\", e.getMessage(), path);",
                "-      return true;",
                "-    }",
                "-  }",
                "-",
                "-  private void buildAllDirectoriesAndSymlinks() {",
                "-    Set<Path> deletedDirectories = new HashSet<>();",
                "-    Set<Path> absoluteDirectoriesToMake =",
                "-        directoriesToMake.stream().map(Path::toAbsolutePath).collect(Collectors.toSet());",
                "-",
                "-    // Delete any directories that should no longer exist",
                "-    for (Path path : existingDirectories) {",
                "-      if (!absoluteDirectoriesToMake.contains(path)) {",
                "-        if (dryRun) {",
                "-          stderr(\"rm -rf %s\\n\", path);",
                "-        } else {",
                "-          deleteAll(path);",
                "-          deletedDirectories.add(path);",
                "-        }",
                "-      }",
                "-    }",
                "-",
                "-    // Delete any symlinks that should no longer exist; remove existing links from Map",
                "-    existingSymlinks.forEach(",
                "-        (filePath, linkPath) -> {",
                "-          if (linkPath.equals(symlinksToCreate.get(filePath))) {",
                "-            symlinksToCreate.remove(filePath);",
                "-          } else {",
                "-            if (dryRun) {",
                "-              stderr(\"rm %s\\n\", linkPath);",
                "-            } else {",
                "-              try {",
                "-                Files.delete(linkPath);",
                "-              } catch (IOException e) {",
                "-                if (!linkInDeletedDirectories(deletedDirectories, linkPath.toAbsolutePath())) {",
                "-                  stderr(\"%s deleting symlink %s\\n\", e.getClass().getSimpleName(), linkPath);",
                "-                }",
                "-              }",
                "-            }",
                "-          }",
                "-        });",
                "-",
                "-    // Create any symlinks that don't already exist",
                "-    symlinksToCreate.forEach(",
                "-        (filePath, linkPath) -> {",
                "-          if (dryRun) {",
                "-            stderr(\"symlink(%s, %s)\\n\", filePath, linkPath);",
                "-          } else {",
                "-            createSymbolicLink(filePath, linkPath);",
                "-          }",
                "-        });",
                "-  }",
                "-",
                "-  private boolean linkInDeletedDirectories(Set<Path> deletedDirectories, Path linkPath) {",
                "-    Path linkDirectory = linkPath;",
                "-    while ((linkDirectory = linkDirectory.getParent()) != null) {",
                "-      if (deletedDirectories.contains(linkDirectory)) {",
                "-        return true;",
                "-      }",
                "-    }",
                "-    return false;",
                "-  }",
                "-",
                "-  private static String basename(File file) {",
                "-    return file.getName();",
                "-  }",
                "-",
                "-  private static String basename(String filename) {",
                "-    return basename(new File(filename));",
                "-  }",
                "-",
                "-  private static String dirname(File file) {",
                "-    return file.getParent();",
                "-  }",
                "-",
                "-  private static String dirname(String filename) {",
                "-    return dirname(new File(filename));",
                "-  }",
                "-",
                "-  private static String fileJoin(String... components) {",
                "-    StringBuilder join = new StringBuilder();",
                "-    if (components != null) {",
                "-      for (String component : components) {",
                "-        if (needSeparator(join, component)) {",
                "-          join.append(File.separatorChar);",
                "-        }",
                "-        join.append(component);",
                "-      }",
                "-    }",
                "-    return join.toString();",
                "-  }",
                "-",
                "-  private static boolean needSeparator(StringBuilder join, String next) {",
                "-    int length = join.length();",
                "-    if (length == 0) {",
                "-      return false;",
                "-    }",
                "-    if (join.charAt(length - 1) == File.separatorChar) {",
                "-      return false;",
                "-    }",
                "-    return !next.startsWith(File.separator);",
                "-  }",
                "-",
                "-  private void mkdir(String name) {",
                "-    directoriesToMake.add(Paths.get(name));",
                "-  }",
                "-",
                "-  private void immediateMkdir(String path) {",
                "-    immediateMkdir(Paths.get(path));",
                "-  }",
                "-",
                "-  private void immediateMkdir(Path path) {",
                "-    if (dryRun) {",
                "-      stderr(\"mkdir(%s)\\n\", path);",
                "-    } else {",
                "-      try {",
                "-        Files.createDirectories(path);",
                "-      } catch (IOException e) {",
                "-        stderr(\"'%s' creating directory %s\\n\", e.getMessage(), path);",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  private void symlink(String filename, String linkname) {",
                "-    File link = new File(linkname);",
                "-    Path linkPath = link.toPath();",
                "-    mkdir(dirname(link));",
                "-",
                "-    Path filePath = Paths.get(filename);",
                "-",
                "-    symlinksToCreate.put(filePath, linkPath);",
                "-  }",
                "-",
                "-  /** Parameter order is compatible with Ruby library code, for porting transparency */",
                "-  private void createSymbolicLink(Path oldPath, Path newPath) {",
                "-    Path directory = newPath.getParent();",
                "-    if (directory != null && Files.notExists(directory)) {",
                "-      immediateMkdir(directory);",
                "-    }",
                "-",
                "-    try {",
                "-      Files.createSymbolicLink(newPath, oldPath);",
                "-    } catch (FileAlreadyExistsException e) {",
                "-      int locationIndex = indexOf(oldPath, \"assets\", \"raw\");",
                "-      if (locationIndex >= 0) {",
                "-        Path tail = oldPath.subpath(locationIndex, oldPath.getNameCount());",
                "-",
                "-        if (nameCollisions.contains(tail)) {",
                "-          return; // It's already been reported",
                "-        }",
                "-        nameCollisions.add(tail);",
                "-",
                "-        if (!verbose()) {",
                "-          return; // suppress the warning",
                "-        }",
                "-",
                "-        stderr(",
                "-            \"\\nWarning: Name collision in the Android '%s' directory!\\n\",",
                "-            oldPath.getName(locationIndex));",
                "-        targetGraph",
                "-            .getNodes()",
                "-            .stream()",
                "-            .filter(node -> node.getInputs().stream().anyMatch(input -> input.endsWith(tail)))",
                "-            .forEach(target -> stderr(\"\\t%s brings in %s\\n\", target, tail));",
                "-        try {",
                "-          Path linked = Files.readSymbolicLink(newPath);",
                "-          Path shortLink =",
                "-              linked.subpath(Paths.get(repository).getNameCount(), linked.getNameCount());",
                "-          stderr(\"Your Project View includes %s\\n\", shortLink);",
                "-        } catch (IOException shouldBeImpossible) {",
                "-          stderr(\"\\nSomehow we got %s reading an existing symlink?\\n\", shouldBeImpossible);",
                "-        }",
                "-      } else {",
                "-        unexpectedExceptionInCreateSymbolicLink(oldPath, newPath, e);",
                "-      }",
                "-    } catch (IOException e) {",
                "-      unexpectedExceptionInCreateSymbolicLink(oldPath, newPath, e);",
                "-    }",
                "-  }",
                "-",
                "-  private void unexpectedExceptionInCreateSymbolicLink(Path oldPath, Path newPath, IOException e) {",
                "-    stderr(",
                "-        \"createSymbolicLink(%s, %s)\\n%s:\\n%s\\n\\n\",",
                "-        oldPath, newPath, e.getClass().getSimpleName(), e.getMessage());",
                "-  }",
                "-",
                "-  /**",
                "-   * Returns the index of the first element of {@code components} that is contained in the {@code",
                "-   * path}, or -1 if none are. Only makes sense if the {@code path} will contain one (or none) of",
                "-   * the {@code components}, or perhaps if sometimes you have (say) {@code .../foo/bar...} and other",
                "-   * times you have {@code .../bar/foo/...}",
                "-   */",
                "-  private static int indexOf(Path path, String... components) {",
                "-    for (String component : components) {",
                "-      int index = indexOf(path, component);",
                "-      if (index >= 0) {",
                "-        return index;",
                "-      }",
                "-    }",
                "-    return -1;",
                "-  }",
                "-",
                "-  private static int indexOf(Path path, String component) {",
                "-    return indexOf(path, Paths.get(component));",
                "-  }",
                "-",
                "-  private static int indexOf(Path path, Path component) {",
                "-    for (int index = 0, count = path.getNameCount(); index < count; ++index) {",
                "-      if (component.equals(path.getName(index))) {",
                "-        return index;",
                "-      }",
                "-    }",
                "-    return -1;",
                "-  }",
                "-",
                "-  private void deleteAll(Path root) {",
                "-    try {",
                "-      MostFiles.deleteRecursivelyIfExists(root);",
                "-    } catch (IOException e) {",
                "-      stderr(\"'%s' deleting %s\\n\", e.getMessage(), root);",
                "-    }",
                "-  }",
                "-",
                "-  private static boolean isDirectory(String name) {",
                "-    File file = new File(name);",
                "-    return file.isDirectory();",
                "-  }",
                "-",
                "-  private static final FilenameFilter neitherDotOrDotDot =",
                "-      new FilenameFilter() {",
                "-        @Override",
                "-        public boolean accept(File dir, String name) {",
                "-          return !(name.equals(\".\") || name.equals(\"..\"));",
                "-        }",
                "-      };",
                "-",
                "-  private static String guaranteeEndsWithFileSeparator(String name) {",
                "-    return name.endsWith(File.separator) ? name : name + File.separator;",
                "-  }",
                "-",
                "-  // endregion symlinks, mkdir, and other file utilities",
                "-",
                "-  // region Console IO",
                "-",
                "-  private void stderr(String pattern, Object... parameters) {",
                "-    stdErr.format(pattern, parameters);",
                "-  }",
                "-",
                "-  private boolean verbose() {",
                "-    return verbosity.ordinal() > Verbosity.STANDARD_INFORMATION.ordinal();",
                "-  }",
                "-",
                "-  private boolean veryVerbose() {",
                "-    return verbosity.ordinal() > Verbosity.BINARY_OUTPUTS.ordinal();",
                "-  }",
                "-",
                "-  // endregion Console IO",
                "-",
                "-  // region Random crap",
                "-",
                "-  private static boolean isNullOrEmpty(String s) {",
                "-    return s == null || s.isEmpty();",
                "-  }",
                "-",
                "-  // endregion Random crap",
                "-",
                "-  // endregion Private implementation",
                "-}",
                "diff --git a/src/com/facebook/buck/ide/intellij/projectview/shared/BUCK b/src/com/facebook/buck/ide/intellij/projectview/shared/BUCK",
                "deleted file mode 100644",
                "index 2fe2064119..0000000000",
                "--- a/src/com/facebook/buck/ide/intellij/projectview/shared/BUCK",
                "+++ /dev/null",
                "@@ -1,11 +0,0 @@",
                "-load(\"//tools/build_rules:java_rules.bzl\", \"java_immutables_library\")",
                "-",
                "-java_immutables_library(",
                "-    name = \"shared\",",
                "-    srcs = glob([\"*.java\"]),",
                "-    visibility = [",
                "-        \"PUBLIC\",",
                "-    ],",
                "-    deps = [",
                "-    ],",
                "-)",
                "diff --git a/src/com/facebook/buck/ide/intellij/projectview/shared/SharedConstants.java b/src/com/facebook/buck/ide/intellij/projectview/shared/SharedConstants.java",
                "deleted file mode 100644",
                "index b5ff2d36be..0000000000",
                "--- a/src/com/facebook/buck/ide/intellij/projectview/shared/SharedConstants.java",
                "+++ /dev/null",
                "@@ -1,27 +0,0 @@",
                "-/*",
                "- * Copyright 2017-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-package com.facebook.buck.ide.intellij.projectview.shared;",
                "-",
                "-/**",
                "- * Values shared by Project View generator, and various IJ plugins that need to 'know about' Project",
                "- * Views",
                "- */",
                "-public class SharedConstants {",
                "-  private SharedConstants() {}",
                "-",
                "-  public static final String ROOT_MODULE_NAME = \"root\";",
                "-}",
                "diff --git a/src/com/facebook/buck/ide/intellij/projectview/shared/package-info.java b/src/com/facebook/buck/ide/intellij/projectview/shared/package-info.java",
                "deleted file mode 100644",
                "index 7ba313064e..0000000000",
                "--- a/src/com/facebook/buck/ide/intellij/projectview/shared/package-info.java",
                "+++ /dev/null",
                "@@ -1,21 +0,0 @@",
                "-/*",
                "- * Copyright 2017-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-/**",
                "- * Files shared by Project View generator, and various IJ plugins that need to 'know about' Project",
                "- * Views",
                "- */",
                "-package com.facebook.buck.ide.intellij.projectview.shared;",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/BUCK b/test/com/facebook/buck/ide/intellij/projectview/BUCK",
                "deleted file mode 100644",
                "index 572c3cf25b..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/BUCK",
                "+++ /dev/null",
                "@@ -1,128 +0,0 @@",
                "-load(\"//tools/build_rules:java_rules.bzl\", \"java_test\")",
                "-",
                "-java_test(",
                "-    name = \"projectview\",",
                "-    srcs = glob([\"*.java\"]),",
                "-    deps = [",
                "-        \"//src-gen:thrift\",",
                "-        \"//src/com/facebook/buck/android:helpers\",",
                "-        \"//src/com/facebook/buck/android:rules\",",
                "-        \"//src/com/facebook/buck/android:split_dex\",",
                "-        \"//src/com/facebook/buck/android:steps\",",
                "-        \"//src/com/facebook/buck/android:utils\",",
                "-        \"//src/com/facebook/buck/android/aapt:aapt\",",
                "-        \"//src/com/facebook/buck/android/redex:options\",",
                "-        \"//src/com/facebook/buck/android/toolchain/ndk/impl:impl\",",
                "-        \"//src/com/facebook/buck/apple/project_generator:project_generator\",",
                "-        \"//src/com/facebook/buck/apple/xcode:xcode\",",
                "-        \"//src/com/facebook/buck/artifact_cache:artifact_cache\",",
                "-        \"//src/com/facebook/buck/config:config\",",
                "-        \"//src/com/facebook/buck/counters:counters\",",
                "-        \"//src/com/facebook/buck/cxx:rules\",",
                "-        \"//src/com/facebook/buck/distributed:distributed\",",
                "-        \"//src/com/facebook/buck/doctor/config:config\",",
                "-        \"//src/com/facebook/buck/event:event\",",
                "-        \"//src/com/facebook/buck/event:interfaces\",",
                "-        \"//src/com/facebook/buck/event/external:external_lib\",",
                "-        \"//src/com/facebook/buck/event/listener:BroadcastEventListener\",",
                "-        \"//src/com/facebook/buck/event/listener:listener\",",
                "-        \"//src/com/facebook/buck/graph:graph\",",
                "-        \"//src/com/facebook/buck/ide/intellij:intellij\",",
                "-        \"//src/com/facebook/buck/io:executable-finder\",",
                "-        \"//src/com/facebook/buck/io:io\",",
                "-        \"//src/com/facebook/buck/io:transport\",",
                "-        \"//src/com/facebook/buck/io:watchman\",",
                "-        \"//src/com/facebook/buck/io/file:file\",",
                "-        \"//src/com/facebook/buck/json:json\",",
                "-        \"//src/com/facebook/buck/jvm/core:core\",",
                "-        \"//src/com/facebook/buck/jvm/groovy:groovy\",",
                "-        \"//src/com/facebook/buck/log:log\",",
                "-        \"//src/com/facebook/buck/maven:util\",",
                "-        \"//src/com/facebook/buck/model:build_id\",",
                "-        \"//src/com/facebook/buck/model:model\",",
                "-        \"//src/com/facebook/buck/parser:config\",",
                "-        \"//src/com/facebook/buck/parser:parser\",",
                "-        \"//src/com/facebook/buck/parser:rule_pattern\",",
                "-        \"//src/com/facebook/buck/query:query\",",
                "-        \"//src/com/facebook/buck/rules:rules\",",
                "-        \"//src/com/facebook/buck/rules:types\",",
                "-        \"//src/com/facebook/buck/rules/args:args\",",
                "-        \"//src/com/facebook/buck/rules/coercer:coercer\",",
                "-        \"//src/com/facebook/buck/rules/coercer:interface\",",
                "-        \"//src/com/facebook/buck/rules/keys:keys\",",
                "-        \"//src/com/facebook/buck/rules/macros:macros\",",
                "-        \"//src/com/facebook/buck/rules/macros:types\",",
                "-        \"//src/com/facebook/buck/rules/query:types\",",
                "-        \"//src/com/facebook/buck/shell:rules\",",
                "-        \"//src/com/facebook/buck/shell:steps\",",
                "-        \"//src/com/facebook/buck/shell:worker\",",
                "-        \"//src/com/facebook/buck/shell:worker_tool\",",
                "-        \"//src/com/facebook/buck/slb:slb\",",
                "-        \"//src/com/facebook/buck/step:step\",",
                "-        \"//src/com/facebook/buck/swift:swift\",",
                "-        \"//src/com/facebook/buck/test:test\",",
                "-        \"//src/com/facebook/buck/test/result/type:type\",",
                "-        \"//src/com/facebook/buck/test/selectors:selectors\",",
                "-        \"//src/com/facebook/buck/util:exceptions\",",
                "-        \"//src/com/facebook/buck/util:io\",",
                "-        \"//src/com/facebook/buck/util:packaged_resource\",",
                "-        \"//src/com/facebook/buck/util:process_executor\",",
                "-        \"//src/com/facebook/buck/util:util\",",
                "-        \"//src/com/facebook/buck/util/cache:cache\",",
                "-        \"//src/com/facebook/buck/util/concurrent:concurrent\",",
                "-        \"//src/com/facebook/buck/util/environment:environment\",",
                "-        \"//src/com/facebook/buck/util/environment:platform\",",
                "-        \"//src/com/facebook/buck/util/immutables:immutables\",",
                "-        \"//src/com/facebook/buck/util/network/hostname:hostname\",",
                "-        \"//src/com/facebook/buck/util/sha1:sha1\",",
                "-        \"//src/com/facebook/buck/util/trace:trace\",",
                "-        \"//src/com/facebook/buck/util/unit:unit\",",
                "-        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol\",",
                "-        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_config\",",
                "-        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_generator\",",
                "-        \"//src/com/facebook/buck/versions:translator\",",
                "-        \"//src/com/facebook/buck/versions:types\",",
                "-        \"//src/com/facebook/buck/versions:versions\",",
                "-        \"//src/com/facebook/buck/worker:worker_job_params\",",
                "-        \"//src/com/facebook/buck/worker:worker_pool_factory\",",
                "-        \"//src/com/facebook/buck/worker:worker_process\",",
                "-        \"//test/com/facebook/buck/android:testutil\",",
                "-        \"//test/com/facebook/buck/cxx:testutil\",",
                "-        \"//test/com/facebook/buck/jvm/groovy:testutil\",",
                "-        \"//test/com/facebook/buck/jvm/java:fakepackagefinder\",",
                "-        \"//test/com/facebook/buck/jvm/java:javac-env\",",
                "-        \"//test/com/facebook/buck/jvm/java:testutil\",",
                "-        \"//test/com/facebook/buck/jvm/kotlin:testutil\",",
                "-        \"//test/com/facebook/buck/model:testutil\",",
                "-        \"//test/com/facebook/buck/rules:testutil\",",
                "-        \"//test/com/facebook/buck/shell:testutil\",",
                "-        \"//test/com/facebook/buck/step:testutil\",",
                "-        \"//test/com/facebook/buck/testutil:testutil\",",
                "-        \"//test/com/facebook/buck/testutil/integration:util\",",
                "-        \"//third-party/java/aether:aether-api\",",
                "-        \"//third-party/java/android:ddmlib\",",
                "-        \"//third-party/java/android:tools-sdk-common\",",
                "-        \"//third-party/java/aosp:aosp\",",
                "-        \"//third-party/java/args4j:args4j\",",
                "-        \"//third-party/java/asm:asm\",",
                "-        \"//third-party/java/dd-plist:dd-plist\",",
                "-        \"//third-party/java/easymock:easymock\",",
                "-        \"//third-party/java/guava:guava\",",
                "-        \"//third-party/java/hamcrest:java-hamcrest\",",
                "-        \"//third-party/java/immutables:immutables\",",
                "-        \"//third-party/java/infer-annotations:infer-annotations\",",
                "-        \"//third-party/java/jackson:jackson-annotations\",",
                "-        \"//third-party/java/jackson:jackson-core\",",
                "-        \"//third-party/java/jackson:jackson-databind\",",
                "-        \"//third-party/java/jna:jna\",",
                "-        \"//third-party/java/jsr:jsr305\",",
                "-        \"//third-party/java/junit:junit\",",
                "-        \"//third-party/java/maven:maven-model\",",
                "-        \"//third-party/java/nailgun:nailgun\",",
                "-        \"//third-party/java/nuprocess:nuprocess\",",
                "-        \"//third-party/java/okhttp:okhttp\",",
                "-        \"//third-party/java/okio:okio\",",
                "-        \"//third-party/java/stringtemplate:stringtemplate\",",
                "-        \"//third-party/java/thrift:libthrift\",",
                "-    ],",
                "-)",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/ProjectViewIntegrationTest.java b/test/com/facebook/buck/ide/intellij/projectview/ProjectViewIntegrationTest.java",
                "deleted file mode 100644",
                "index 5e8b32b87f..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/ProjectViewIntegrationTest.java",
                "+++ /dev/null",
                "@@ -1,211 +0,0 @@",
                "-/*",
                "- * Copyright 2012-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-package com.facebook.buck.ide.intellij.projectview;",
                "-",
                "-import static org.junit.Assert.assertEquals;",
                "-import static org.junit.Assert.assertFalse;",
                "-import static org.junit.Assert.assertTrue;",
                "-",
                "-import com.facebook.buck.android.AssumeAndroidPlatform;",
                "-import com.facebook.buck.io.file.MostFiles;",
                "-import com.facebook.buck.testutil.ProcessResult;",
                "-import com.facebook.buck.testutil.TemporaryPaths;",
                "-import com.facebook.buck.testutil.integration.ProjectWorkspace;",
                "-import com.facebook.buck.testutil.integration.TestDataHelper;",
                "-import com.google.common.collect.Lists;",
                "-import java.io.IOException;",
                "-import java.nio.file.FileVisitOption;",
                "-import java.nio.file.Files;",
                "-import java.nio.file.Path;",
                "-import java.util.HashSet;",
                "-import java.util.Set;",
                "-import java.util.stream.Stream;",
                "-import org.junit.After;",
                "-import org.junit.Before;",
                "-import org.junit.Rule;",
                "-import org.junit.Test;",
                "-",
                "-public class ProjectViewIntegrationTest {",
                "-",
                "-  @Rule public TemporaryPaths temporaryFolder = new TemporaryPaths();",
                "-  private Path viewPath;",
                "-  private ProjectWorkspace workspace;",
                "-",
                "-  @Before",
                "-  public void before() throws IOException {",
                "-    viewPath = Files.createTempDirectory(\"view\");",
                "-  }",
                "-",
                "-  @After",
                "-  public void after() throws IOException {",
                "-    MostFiles.deleteRecursivelyIfExists(viewPath);",
                "-    viewPath = null;",
                "-    workspace = null;",
                "-  }",
                "-",
                "-  private ProcessResult runBuckProjectAndVerify(",
                "-      String folderWithTestData, boolean doSetup, String... commandArgs)",
                "-      throws InterruptedException, IOException {",
                "-    AssumeAndroidPlatform.assumeSdkIsAvailable();",
                "-",
                "-    if (doSetup) {",
                "-      workspace =",
                "-          TestDataHelper.createProjectWorkspaceForScenario(",
                "-              this, folderWithTestData, temporaryFolder);",
                "-      workspace.setUp();",
                "-    }",
                "-",
                "-    ProcessResult result =",
                "-        workspace.runBuckCommand(Lists.asList(\"project\", commandArgs).toArray(new String[0]));",
                "-    result.assertSuccess(\"buck project should exit cleanly\");",
                "-",
                "-    return result;",
                "-  }",
                "-",
                "-  // region Structural tests",
                "-",
                "-  @Test",
                "-  public void testProjectView() throws IOException, InterruptedException {",
                "-    assertTrue(Files.exists(viewPath));",
                "-    assertEquals(0, viewPath.toFile().list().length);",
                "-",
                "-    runBuckProjectAndVerify(",
                "-        \"structuralTests\", true, \"--view\", viewPath.toString(), \"//testdata:testdata\");",
                "-",
                "-    assertTrue(Files.exists(viewPath));",
                "-    assertTrue(viewPath.toFile().list().length > 0);",
                "-",
                "-    checkRootDotIml();",
                "-    checkBuckOut();",
                "-    checkResDirectory();",
                "-    checkJavaDirectory();",
                "-    checkDotIdeaDirectory();",
                "-  }",
                "-",
                "-  private void checkRootDotIml() {",
                "-    Path rootDotIml = viewPath.resolve(\"root.iml\");",
                "-    assertTrue(Files.exists(rootDotIml));",
                "-    // TODO(shemitz) Look inside the file!",
                "-  }",
                "-",
                "-  private void checkBuckOut() {",
                "-    Path buckOut = viewPath.resolve(\"buck-out\");",
                "-    assertTrue(Files.exists(buckOut));",
                "-    assertTrue(Files.isSymbolicLink(buckOut));",
                "-  }",
                "-",
                "-  private void checkResDirectory() {",
                "-    Path resDirectory = viewPath.resolve(\"res\");",
                "-    assertTrue(Files.exists(resDirectory));",
                "-    assertTrue(Files.isDirectory(resDirectory));",
                "-",
                "-    // Everything under /res should be either a link (AndroidManifest.xml) or a directory of links",
                "-    walk(resDirectory, 2)",
                "-        .filter(child -> !child.equals(resDirectory))",
                "-        .forEach(",
                "-            child -> {",
                "-              if (Files.isDirectory(child)) {",
                "-                walk(child)",
                "-                    .filter(grandchild -> !grandchild.equals(child))",
                "-                    .forEach(grandchild -> assertTrue(Files.isSymbolicLink(grandchild)));",
                "-              } else {",
                "-                assertTrue(Files.isSymbolicLink(child));",
                "-              }",
                "-            });",
                "-  }",
                "-",
                "-  private void checkJavaDirectory() {",
                "-    Path javaDirectory = viewPath.resolve(\"java\");",
                "-    if (!Files.exists(javaDirectory)) {",
                "-      return;",
                "-    }",
                "-    assertTrue(Files.isDirectory(javaDirectory));",
                "-",
                "-    // Everything under /java should be either a link or a directory of links",
                "-    walk(javaDirectory)",
                "-        .forEach(child -> assertTrue(Files.isDirectory(child) || Files.isSymbolicLink(child)));",
                "-  }",
                "-",
                "-  private void checkDotIdeaDirectory() {",
                "-    Path dotIdeaDirectory = viewPath.resolve(\".idea\");",
                "-    assertTrue(Files.exists(dotIdeaDirectory));",
                "-    assertTrue(Files.isDirectory(dotIdeaDirectory));",
                "-",
                "-    String[] children = dotIdeaDirectory.toFile().list();",
                "-    Set<String> childSet = new HashSet<>(children.length);",
                "-    for (String child : children) {",
                "-      childSet.add(child);",
                "-    }",
                "-",
                "-    String[] expected =",
                "-        new String[] {",
                "-          \"codeStyleSettings.xml\", \"libraries\", \"misc.xml\", \"modules.xml\",",
                "-        };",
                "-    for (String expectation : expected) {",
                "-      assertTrue(childSet.contains(expectation));",
                "-    }",
                "-  }",
                "-",
                "-  private static Stream<Path> walk(Path start, FileVisitOption... options) {",
                "-    try {",
                "-      return Files.walk(start, options);",
                "-    } catch (IOException e) {",
                "-      throw new RuntimeException(e);",
                "-    }",
                "-  }",
                "-",
                "-  private static Stream<Path> walk(Path start, int maxDepth, FileVisitOption... options) {",
                "-    try {",
                "-      return Files.walk(start, maxDepth, options);",
                "-    } catch (IOException e) {",
                "-      throw new RuntimeException(e);",
                "-    }",
                "-  }",
                "-",
                "-  // endregion Structural tests",
                "-",
                "-  // region Update tests",
                "-",
                "-  @Test",
                "-  public void testRefresh() throws IOException, InterruptedException {",
                "-    Path rootDotIml = viewPath.resolve(\"root.iml\");",
                "-    Path buckOut = viewPath.resolve(\"buck-out\");",
                "-",
                "-    assertTrue(Files.exists(viewPath));",
                "-    assertFalse(Files.exists(rootDotIml));",
                "-    assertEquals(0, viewPath.toFile().list().length);",
                "-",
                "-    runBuckProjectAndVerify(",
                "-        \"structuralTests\", true, \"--view\", viewPath.toString(), \"//testdata:testdata\");",
                "-",
                "-    assertTrue(Files.exists(viewPath));",
                "-    assertTrue(Files.exists(rootDotIml));",
                "-    assertTrue(Files.exists(buckOut));",
                "-    assertTrue(Files.isSymbolicLink(buckOut));",
                "-",
                "-    runBuckProjectAndVerify(",
                "-        \"structuralTests\", false, \"--view\", viewPath.toString(), \"//testdata:testdata\");",
                "-",
                "-    assertTrue(Files.exists(viewPath));",
                "-    assertTrue(Files.exists(rootDotIml));",
                "-    assertTrue(Files.exists(buckOut));",
                "-    assertTrue(Files.isSymbolicLink(buckOut));",
                "-  }",
                "-",
                "-  // endregion Update tests",
                "-",
                "-}",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/.buckconfig b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/.buckconfig",
                "deleted file mode 100644",
                "index dd5291c322..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/.buckconfig",
                "+++ /dev/null",
                "@@ -1,10 +0,0 @@",
                "-[color]",
                "-  ui = false",
                "-[alias]",
                "-  root=//:root_repo",
                "-[project]",
                "-  ignore = buck-out",
                "-  intellij_aggregation_mode = shallow",
                "-  ide = intellij",
                "-[intellij]",
                "-  android_module_sdk_name = Android SDK",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/BUCK.fixture b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/BUCK.fixture",
                "deleted file mode 100644",
                "index 9e0b4a5ea5..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/BUCK.fixture",
                "+++ /dev/null",
                "@@ -1,18 +0,0 @@",
                "-android_binary(",
                "-    name = \"testdata\",",
                "-    keystore = \":debug_keystore\",",
                "-    manifest = \"main/AndroidManifest.xml\",",
                "-    visibility = [",
                "-        \"PUBLIC\",",
                "-    ],",
                "-    deps = [",
                "-        \"//testdata/android_res:android_res\",",
                "-        \"//testdata/src:src\",",
                "-    ],",
                "-)",
                "-",
                "-keystore(",
                "-    name = \"debug_keystore\",",
                "-    properties = \"debug.keystore.properties\",",
                "-    store = \"debug.keystore\",",
                "-)",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/BUCK.fixture b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/BUCK.fixture",
                "deleted file mode 100644",
                "index 48cf3b936e..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/BUCK.fixture",
                "+++ /dev/null",
                "@@ -1,8 +0,0 @@",
                "-android_resource(",
                "-    name = \"android_res\",",
                "-    package = \"com.facebook.projectviewtestapp\",",
                "-    res = subdir_glob([(\"res\", \"**\")]),",
                "-    visibility = [",
                "-        \"PUBLIC\",",
                "-    ],",
                "-)",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/drawable/ic_launcher.png b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/drawable/ic_launcher.png",
                "deleted file mode 100644",
                "index e69de29bb2..0000000000",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/layout/activity_main.xml b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/layout/activity_main.xml",
                "deleted file mode 100644",
                "index 0a611020c7..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/layout/activity_main.xml",
                "+++ /dev/null",
                "@@ -1,35 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                "-<android.support.design.widget.CoordinatorLayout",
                "-    xmlns:android=\"http://schemas.android.com/apk/res/android\"",
                "-    xmlns:app=\"http://schemas.android.com/apk/res-auto\"",
                "-    xmlns:tools=\"http://schemas.android.com/tools\"",
                "-    android:layout_width=\"match_parent\"",
                "-    android:layout_height=\"match_parent\"",
                "-    android:fitsSystemWindows=\"true\"",
                "-    tools:context=\"projectview.facebook.com.projectviewtestapp.MainActivity\">",
                "-",
                "-    <android.support.design.widget.AppBarLayout",
                "-        android:layout_height=\"wrap_content\"",
                "-        android:layout_width=\"match_parent\"",
                "-        android:theme=\"@style/AppTheme.AppBarOverlay\">",
                "-",
                "-        <android.support.v7.widget.Toolbar",
                "-            android:id=\"@+id/toolbar\"",
                "-            android:layout_width=\"match_parent\"",
                "-            android:layout_height=\"?attr/actionBarSize\"",
                "-            android:background=\"?attr/colorPrimary\"",
                "-            app:popupTheme=\"@style/AppTheme.PopupOverlay\" />",
                "-",
                "-    </android.support.design.widget.AppBarLayout>",
                "-",
                "-    <include layout=\"@layout/content_main\"/>",
                "-",
                "-    <android.support.design.widget.FloatingActionButton",
                "-        android:id=\"@+id/fab\"",
                "-        android:layout_width=\"wrap_content\"",
                "-        android:layout_height=\"wrap_content\"",
                "-        android:layout_gravity=\"bottom|end\"",
                "-        android:layout_margin=\"@dimen/fab_margin\"",
                "-        app:srcCompat=\"@android:drawable/ic_dialog_email\" />",
                "-",
                "-</android.support.design.widget.CoordinatorLayout>",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/layout/content_main.xml b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/layout/content_main.xml",
                "deleted file mode 100644",
                "index b41723d848..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/layout/content_main.xml",
                "+++ /dev/null",
                "@@ -1,21 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                "-<RelativeLayout",
                "-    xmlns:android=\"http://schemas.android.com/apk/res/android\"",
                "-    xmlns:tools=\"http://schemas.android.com/tools\"",
                "-    xmlns:app=\"http://schemas.android.com/apk/res-auto\"",
                "-    android:id=\"@+id/content_main\"",
                "-    android:layout_width=\"match_parent\"",
                "-    android:layout_height=\"match_parent\"",
                "-    android:paddingLeft=\"@dimen/activity_horizontal_margin\"",
                "-    android:paddingRight=\"@dimen/activity_horizontal_margin\"",
                "-    android:paddingTop=\"@dimen/activity_vertical_margin\"",
                "-    android:paddingBottom=\"@dimen/activity_vertical_margin\"",
                "-    app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"",
                "-    tools:showIn=\"@layout/activity_main\"",
                "-    tools:context=\"projectview.facebook.com.projectviewtestapp.MainActivity\">",
                "-",
                "-    <TextView",
                "-        android:layout_width=\"wrap_content\"",
                "-        android:layout_height=\"wrap_content\"",
                "-        android:text=\"Hello World!\" />",
                "-</RelativeLayout>",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/menu/menu_main.xml b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/menu/menu_main.xml",
                "deleted file mode 100644",
                "index 7ac20dd4db..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/menu/menu_main.xml",
                "+++ /dev/null",
                "@@ -1,9 +0,0 @@",
                "-<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"",
                "-    xmlns:app=\"http://schemas.android.com/apk/res-auto\"",
                "-    xmlns:tools=\"http://schemas.android.com/tools\"",
                "-    tools:context=\"projectview.facebook.com.projectviewtestapp.MainActivity\" >",
                "-    <item android:id=\"@+id/action_settings\"",
                "-        android:title=\"@string/action_settings\"",
                "-        android:orderInCategory=\"100\"",
                "-        app:showAsAction=\"never\" />",
                "-</menu>",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values-v21/styles.xml b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values-v21/styles.xml",
                "deleted file mode 100644",
                "index 2ea3a226fa..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values-v21/styles.xml",
                "+++ /dev/null",
                "@@ -1,8 +0,0 @@",
                "-<resources>",
                "-            <style name=\"AppTheme.NoActionBar\">",
                "-            <item name=\"windowActionBar\">false</item>",
                "-            <item name=\"windowNoTitle\">true</item>",
                "-            <item name=\"android:windowDrawsSystemBarBackgrounds\">true</item>",
                "-            <item name=\"android:statusBarColor\">@android:color/transparent</item>",
                "-        </style>",
                "-</resources>",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values-w820dp/dimens.xml b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values-w820dp/dimens.xml",
                "deleted file mode 100644",
                "index 63fc816444..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values-w820dp/dimens.xml",
                "+++ /dev/null",
                "@@ -1,6 +0,0 @@",
                "-<resources>",
                "-    <!-- Example customization of dimensions originally defined in res/values/dimens.xml",
                "-         (such as screen margins) for screens with more than 820dp of available width. This",
                "-         would include 7\" and 10\" devices in landscape (~960dp and ~1280dp respectively). -->",
                "-    <dimen name=\"activity_horizontal_margin\">64dp</dimen>",
                "-</resources>",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/colors.xml b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/colors.xml",
                "deleted file mode 100644",
                "index 3ab3e9cbce..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/colors.xml",
                "+++ /dev/null",
                "@@ -1,6 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                "-<resources>",
                "-    <color name=\"colorPrimary\">#3F51B5</color>",
                "-    <color name=\"colorPrimaryDark\">#303F9F</color>",
                "-    <color name=\"colorAccent\">#FF4081</color>",
                "-</resources>",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/dimens.xml b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/dimens.xml",
                "deleted file mode 100644",
                "index 812cb7be0a..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/dimens.xml",
                "+++ /dev/null",
                "@@ -1,6 +0,0 @@",
                "-<resources>",
                "-    <!-- Default screen margins, per the Android Design guidelines. -->",
                "-    <dimen name=\"activity_horizontal_margin\">16dp</dimen>",
                "-    <dimen name=\"activity_vertical_margin\">16dp</dimen>",
                "-    <dimen name=\"fab_margin\">16dp</dimen>",
                "-</resources>",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/strings.xml b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/strings.xml",
                "deleted file mode 100644",
                "index 06d3a5105c..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/strings.xml",
                "+++ /dev/null",
                "@@ -1,4 +0,0 @@",
                "-<resources>",
                "-    <string name=\"app_name\">Project View Test App</string>",
                "-    <string name=\"action_settings\">Settings</string>",
                "-</resources>",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/styles.xml b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/styles.xml",
                "deleted file mode 100644",
                "index 16dbab30f2..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/styles.xml",
                "+++ /dev/null",
                "@@ -1,17 +0,0 @@",
                "-<resources>",
                "-",
                "-    <!-- Base application theme. -->",
                "-    <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">",
                "-        <!-- Customize your theme here. -->",
                "-        <item name=\"colorPrimary\">@color/colorPrimary</item>",
                "-        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>",
                "-        <item name=\"colorAccent\">@color/colorAccent</item>",
                "-    </style>",
                "-    <style name=\"AppTheme.NoActionBar\">",
                "-        <item name=\"windowActionBar\">false</item>",
                "-        <item name=\"windowNoTitle\">true</item>",
                "-    </style>",
                "-    <style name=\"AppTheme.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\"/>",
                "-    <style name=\"AppTheme.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\"/>",
                "-",
                "-</resources>",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/debug.keystore.properties/.gitkeep b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/debug.keystore.properties/.gitkeep",
                "deleted file mode 100644",
                "index e69de29bb2..0000000000",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/debug.keystore/.gitkeep b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/debug.keystore/.gitkeep",
                "deleted file mode 100644",
                "index e69de29bb2..0000000000",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/main/AndroidManifest.xml b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/main/AndroidManifest.xml",
                "deleted file mode 100644",
                "index 83f38f222b..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/main/AndroidManifest.xml",
                "+++ /dev/null",
                "@@ -1,15 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                "-<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"",
                "-    package=\"projectview.facebook.com.projectviewtestapp\" >",
                "-",
                "-    <application>",
                "-        <activity android:name=\".MainActivity\">",
                "-            <intent-filter>",
                "-                <action android:name=\"android.intent.action.MAIN\" />",
                "-",
                "-                <category android:name=\"android.intent.category.LAUNCHER\" />",
                "-            </intent-filter>",
                "-        </activity>",
                "-    </application>",
                "-",
                "-</manifest>",
                "\\ No newline at end of file",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/src/BUCK.fixture b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/src/BUCK.fixture",
                "deleted file mode 100644",
                "index b579c765aa..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/src/BUCK.fixture",
                "+++ /dev/null",
                "@@ -1,9 +0,0 @@",
                "-android_library(",
                "-    name = \"src\",",
                "-    srcs = glob([\"**/*.java\"]),",
                "-    visibility = [",
                "-        \"PUBLIC\",",
                "-    ],",
                "-    deps = [",
                "-    ],",
                "-)",
                "diff --git a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/src/com/facebook/projectviewtestapp/MainActivity.java b/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/src/com/facebook/projectviewtestapp/MainActivity.java",
                "deleted file mode 100644",
                "index c876880bdc..0000000000",
                "--- a/test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/src/com/facebook/projectviewtestapp/MainActivity.java",
                "+++ /dev/null",
                "@@ -1,14 +0,0 @@",
                "-package com.facebook.projectviewtestapp;",
                "-",
                "-import android.os.Bundle;",
                "-import android.support.design.widget.FloatingActionButton;",
                "-import android.support.design.widget.Snackbar;",
                "-import android.support.v7.app.AppCompatActivity;",
                "-import android.support.v7.widget.Toolbar;",
                "-import android.view.View;",
                "-import android.view.Menu;",
                "-import android.view.MenuItem;",
                "-",
                "-public class MainActivity extends AppCompatActivity {",
                "-",
                "-}",
                "diff --git a/third-party/java/jdom/BUCK b/third-party/java/jdom/BUCK",
                "deleted file mode 100644",
                "index fe37cc2b72..0000000000",
                "--- a/third-party/java/jdom/BUCK",
                "+++ /dev/null",
                "@@ -1,11 +0,0 @@",
                "-prebuilt_jar(",
                "-    name = \"jdom\",",
                "-    binary_jar = \"jdom-2.0.6.jar\",",
                "-    licenses = [",
                "-        \"LICENSE.txt.osx\",",
                "-    ],",
                "-    source_jar = \"jdom-2.0.6-sources.jar\",",
                "-    visibility = [",
                "-        \"PUBLIC\",",
                "-    ],",
                "-)",
                "diff --git a/third-party/java/jdom/jdom-2.0.6-contrib.jar b/third-party/java/jdom/jdom-2.0.6-contrib.jar",
                "deleted file mode 100644",
                "index 78fa2c8593..0000000000",
                "Binary files a/third-party/java/jdom/jdom-2.0.6-contrib.jar and /dev/null differ",
                "diff --git a/third-party/java/jdom/jdom-2.0.6-javadoc.jar b/third-party/java/jdom/jdom-2.0.6-javadoc.jar",
                "deleted file mode 100644",
                "index 1b107873b7..0000000000",
                "Binary files a/third-party/java/jdom/jdom-2.0.6-javadoc.jar and /dev/null differ",
                "diff --git a/third-party/java/jdom/jdom-2.0.6-junit.jar b/third-party/java/jdom/jdom-2.0.6-junit.jar",
                "deleted file mode 100644",
                "index 08ff33c15f..0000000000",
                "Binary files a/third-party/java/jdom/jdom-2.0.6-junit.jar and /dev/null differ",
                "diff --git a/third-party/java/jdom/jdom-2.0.6-sources.jar b/third-party/java/jdom/jdom-2.0.6-sources.jar",
                "deleted file mode 100644",
                "index afeb101740..0000000000",
                "Binary files a/third-party/java/jdom/jdom-2.0.6-sources.jar and /dev/null differ",
                "diff --git a/third-party/java/jdom/jdom-2.0.6.jar b/third-party/java/jdom/jdom-2.0.6.jar",
                "deleted file mode 100644",
                "index 2850ca10cf..0000000000",
                "Binary files a/third-party/java/jdom/jdom-2.0.6.jar and /dev/null differ",
                "diff --git a/third-party/java/jdom/lib/jaxen-1.1.6.jar b/third-party/java/jdom/lib/jaxen-1.1.6.jar",
                "deleted file mode 100644",
                "index 52f47a4f43..0000000000",
                "Binary files a/third-party/java/jdom/lib/jaxen-1.1.6.jar and /dev/null differ",
                "diff --git a/third-party/java/jdom/lib/xalan/serializer-2.7.2.jar b/third-party/java/jdom/lib/xalan/serializer-2.7.2.jar",
                "deleted file mode 100644",
                "index 10c881c100..0000000000",
                "Binary files a/third-party/java/jdom/lib/xalan/serializer-2.7.2.jar and /dev/null differ",
                "diff --git a/third-party/java/jdom/lib/xalan/xalan-2.7.2.jar b/third-party/java/jdom/lib/xalan/xalan-2.7.2.jar",
                "deleted file mode 100644",
                "index abdabe33ec..0000000000",
                "Binary files a/third-party/java/jdom/lib/xalan/xalan-2.7.2.jar and /dev/null differ",
                "diff --git a/third-party/java/jdom/lib/xercesImpl.jar b/third-party/java/jdom/lib/xercesImpl.jar",
                "deleted file mode 100644",
                "index 0aaa990f3e..0000000000",
                "Binary files a/third-party/java/jdom/lib/xercesImpl.jar and /dev/null differ",
                "diff --git a/third-party/java/jdom/lib/xml-apis.jar b/third-party/java/jdom/lib/xml-apis.jar",
                "deleted file mode 100644",
                "index 46733464fc..0000000000",
                "Binary files a/third-party/java/jdom/lib/xml-apis.jar and /dev/null differ"
            ],
            "changed_files": [
                "src/com/facebook/buck/cli/ProjectCommand.java",
                "src/com/facebook/buck/ide/intellij/BUCK",
                "src/com/facebook/buck/ide/intellij/IjProjectCommandHelper.java",
                "src/com/facebook/buck/ide/intellij/projectview/BUCK",
                "src/com/facebook/buck/ide/intellij/projectview/Patterns.java",
                "src/com/facebook/buck/ide/intellij/projectview/ProjectView.java",
                "src/com/facebook/buck/ide/intellij/projectview/shared/BUCK",
                "src/com/facebook/buck/ide/intellij/projectview/shared/SharedConstants.java",
                "src/com/facebook/buck/ide/intellij/projectview/shared/package-info.java",
                "test/com/facebook/buck/ide/intellij/projectview/BUCK",
                "test/com/facebook/buck/ide/intellij/projectview/ProjectViewIntegrationTest.java",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/.buckconfig",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/BUCK.fixture",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/BUCK.fixture",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/drawable/ic_launcher.png",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/layout/activity_main.xml",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/layout/content_main.xml",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/menu/menu_main.xml",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values-v21/styles.xml",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values-w820dp/dimens.xml",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/colors.xml",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/dimens.xml",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/strings.xml",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/android_res/res/values/styles.xml",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/debug.keystore.properties/.gitkeep",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/debug.keystore/.gitkeep",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/main/AndroidManifest.xml",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/src/BUCK.fixture",
                "test/com/facebook/buck/ide/intellij/projectview/testdata/structuralTests/testdata/src/com/facebook/projectviewtestapp/MainActivity.java",
                "third-party/java/jdom/BUCK",
                "third-party/java/jdom/jdom-2.0.6-contrib.jar",
                "third-party/java/jdom/jdom-2.0.6-javadoc.jar",
                "third-party/java/jdom/jdom-2.0.6-junit.jar",
                "third-party/java/jdom/jdom-2.0.6-sources.jar",
                "third-party/java/jdom/jdom-2.0.6.jar",
                "third-party/java/jdom/lib/jaxen-1.1.6.jar",
                "third-party/java/jdom/lib/xalan/serializer-2.7.2.jar",
                "third-party/java/jdom/lib/xalan/xalan-2.7.2.jar",
                "third-party/java/jdom/lib/xercesImpl.jar",
                "third-party/java/jdom/lib/xml-apis.jar"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, command",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "999270f5c41784dd8d4a1ba5b242bb0645a08d88",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521487678,
            "hunks": 4,
            "message": "- don't duplicate force load flags from the bundle on application test targets Summary: to fix missing symbol or duplicate symbol errors during linking Test Plan: Run Tests Reviewed By: dinhviethoa fbshipit-source-id: a36f43e",
            "diff": [
                "diff --git a/src/com/facebook/buck/apple/project_generator/ProjectGenerator.java b/src/com/facebook/buck/apple/project_generator/ProjectGenerator.java",
                "index 7c1f2e4b8e..f45f9c23ed 100644",
                "--- a/src/com/facebook/buck/apple/project_generator/ProjectGenerator.java",
                "+++ b/src/com/facebook/buck/apple/project_generator/ProjectGenerator.java",
                "@@ -1106,17 +1106,11 @@ public class ProjectGenerator {",
                "             collectRecursiveLibraryDependencies(targetNode);",
                "-        ImmutableSet<PBXFileReference> excludedDeps =",
                "-            targetNode",
                "-                .castArg(AppleTestDescriptionArg.class)",
                "-                .flatMap(",
                "-                    testNode -> {",
                "-                      // only application tests share a runtime with their host application and need",
                "-                      // to avoid linking dependencies already linked by the host. we know this is",
                "-                      // an application test if it is not a UI test and has a bundle loader.",
                "-                      return testNode.getConstructorArg().getIsUiTest()",
                "-                          ? Optional.empty()",
                "-                          : bundleLoaderNode;",
                "-                    })",
                "-                .map(this::collectRecursiveLibraryDependencies)",
                "-                .orElse(ImmutableSet.of());",
                "-        mutator.setArchives(Sets.difference(targetNodeDeps, excludedDeps));",
                "+        if (isTargetNodeApplicationTestTarget(targetNode, bundleLoaderNode)) {",
                "+          ImmutableSet<PBXFileReference> bundleLoaderDeps =",
                "+              bundleLoaderNode.isPresent()",
                "+                  ? collectRecursiveLibraryDependencies(bundleLoaderNode.get())",
                "+                  : ImmutableSet.of();",
                "+          mutator.setArchives(Sets.difference(targetNodeDeps, bundleLoaderDeps));",
                "+        } else {",
                "+          mutator.setArchives(targetNodeDeps);",
                "+        }",
                "       }",
                "@@ -1508,3 +1502,3 @@ public class ProjectGenerator {",
                "                             collectRecursiveExportedLinkerFlags(targetNode))))",
                "-                .addAll(collectRecursiveForceLoadLinkerFlags(targetNode))",
                "+                .addAll(collectRecursiveForceLoadLinkerFlags(targetNode, bundleLoaderNode))",
                "                 .addAll(swiftDebugLinkerFlagsBuilder.build())",
                "@@ -3121,6 +3115,33 @@ public class ProjectGenerator {",
                "-  private ImmutableList<String> collectRecursiveForceLoadLinkerFlags(TargetNode<?, ?> targetNode) {",
                "+  private boolean isTargetNodeApplicationTestTarget(",
                "+      TargetNode<?, ?> targetNode,",
                "+      Optional<TargetNode<AppleBundleDescriptionArg, ?>> bundleLoaderNode) {",
                "+    // This is an application test if it is not a UI test and has a bundle loader.",
                "+    Optional<TargetNode<AppleTestDescriptionArg, ?>> testNode =",
                "+        targetNode.castArg(AppleTestDescriptionArg.class);",
                "+    if (testNode.isPresent() && bundleLoaderNode.isPresent()) {",
                "+      AppleTestDescriptionArg testArg = testNode.get().getConstructorArg();",
                "+      return !testArg.getIsUiTest();",
                "+    } else {",
                "+      return false;",
                "+    }",
                "+  }",
                "+",
                "+  private ImmutableList<String> collectRecursiveForceLoadLinkerFlags(",
                "+      TargetNode<?, ?> targetNode,",
                "+      Optional<TargetNode<AppleBundleDescriptionArg, ?>> bundleLoaderNode) {",
                "     if (shouldAddLinkerFlagsForLinkWholeLibraries()) {",
                "-      return collectRecursiveLibraryDepTargetsWithOptions(targetNode, false)",
                "+      FluentIterable<TargetNode<?, ?>> allDeps =",
                "+          collectRecursiveLibraryDepTargetsWithOptions(targetNode, false);",
                "+",
                "+      // Don't duplicate force_load params from the test host app if this is an app test.",
                "+      if (isTargetNodeApplicationTestTarget(targetNode, bundleLoaderNode)",
                "+          && bundleLoaderNode.isPresent()) {",
                "+        FluentIterable<TargetNode<?, ?>> bundleDeps =",
                "+            collectRecursiveLibraryDepTargetsWithOptions(bundleLoaderNode.get(), false);",
                "+        Set<TargetNode<?, ?>> directDeps = Sets.difference(allDeps.toSet(), bundleDeps.toSet());",
                "+        allDeps = FluentIterable.from(ImmutableSet.copyOf(directDeps));",
                "+      }",
                "+      return allDeps",
                "           .append(targetNode)"
            ],
            "changed_files": [
                "src/com/facebook/buck/apple/project_generator/ProjectGenerator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: load",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b44787e9ac66d8d8f83beafc8a45b25435c64114",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522340761,
            "hunks": 48,
            "message": "Add support for exported_provided_deps in Java-based rules Summary: This change adds support for `exported_provided_deps` in Java-based rules which allows specifying dependencies that combine properties of `exported_deps` and `provided_deps`. This will be used in buck modules framework (which uses `provided_deps` and needs to have `exported_provided_deps`.) Reviewed By: ttsugriy fbshipit-source-id: 6ae7a7a",
            "diff": [
                "diff --git a/docs/__jvm_common.soy b/docs/__jvm_common.soy",
                "index af58cd50a8..ab908bc3ed 100644",
                "--- a/docs/__jvm_common.soy",
                "+++ b/docs/__jvm_common.soy",
                "@@ -112,2 +112,15 @@",
                "+/***/",
                "+{template .exported_provided_deps}",
                "+{call buck.arg}",
                "+  {param name: 'exported_provided_deps' /}",
                "+  {param default: '[]' /}",
                "+  {param desc}",
                "+  This is a combination of <code>provided_deps</code> and <code>exported_deps</code>. Rules listed",
                "+  in this parameter will be added to classpath of rules that depend on this rule, but they will not",
                "+  be included in a binary if binary depends on a such target.",
                "+  {/param}",
                "+{/call}",
                "+{/template}",
                "+",
                " /***/",
                "diff --git a/docs/rule/android_library.soy b/docs/rule/android_library.soy",
                "index 29ae6f8542..3e48e3643d 100644",
                "--- a/docs/rule/android_library.soy",
                "+++ b/docs/rule/android_library.soy",
                "@@ -169,2 +169,4 @@ compiled class files and resources.",
                "+{call jvm_common.exported_provided_deps /}",
                "+",
                " {call buck.deps_query_arg /}",
                "diff --git a/docs/rule/java_library.soy b/docs/rule/java_library.soy",
                "index fcdb4d1460..858932e842 100644",
                "--- a/docs/rule/java_library.soy",
                "+++ b/docs/rule/java_library.soy",
                "@@ -135,5 +135,7 @@ of the compiled class files and resources.",
                " {call jvm_common.provided_deps}",
                "-  {param binary: 'java_binary' /}",
                "+  {param binary: 'java_library' /}",
                " {/call}",
                "+{call jvm_common.exported_provided_deps /}",
                "+",
                " {call jvm_common.abi_generation_mode /}",
                "diff --git a/docs/rule/kotlin_library.soy b/docs/rule/kotlin_library.soy",
                "index 6f3fff6df2..3aa0dd9e83 100644",
                "--- a/docs/rule/kotlin_library.soy",
                "+++ b/docs/rule/kotlin_library.soy",
                "@@ -72,2 +72,4 @@ of the compiled class files and resources.",
                "+{call jvm_common.exported_provided_deps /}",
                "+",
                " {call buck.labels_arg /}",
                "diff --git a/src/com/facebook/buck/android/AndroidBuildConfigJavaLibrary.java b/src/com/facebook/buck/android/AndroidBuildConfigJavaLibrary.java",
                "index ddac159cda..5a47ba8911 100644",
                "--- a/src/com/facebook/buck/android/AndroidBuildConfigJavaLibrary.java",
                "+++ b/src/com/facebook/buck/android/AndroidBuildConfigJavaLibrary.java",
                "@@ -100,2 +100,3 @@ class AndroidBuildConfigJavaLibrary extends DefaultJavaLibrary implements Androi",
                "         /* providedDeps */ ImmutableSortedSet.of(),",
                "+        ImmutableSortedSet.of(),",
                "         HasJavaAbi.getClassAbiJar(buildTarget),",
                "diff --git a/src/com/facebook/buck/android/AndroidLibrary.java b/src/com/facebook/buck/android/AndroidLibrary.java",
                "index 3b68be6159..d612fbea11 100644",
                "--- a/src/com/facebook/buck/android/AndroidLibrary.java",
                "+++ b/src/com/facebook/buck/android/AndroidLibrary.java",
                "@@ -95,2 +95,3 @@ public class AndroidLibrary extends DefaultJavaLibrary implements AndroidPackage",
                "       ImmutableSortedSet<BuildRule> fullJarProvidedDeps,",
                "+      ImmutableSortedSet<BuildRule> fullJarExportedProvidedDeps,",
                "       @Nullable BuildTarget abiJar,",
                "@@ -113,2 +114,3 @@ public class AndroidLibrary extends DefaultJavaLibrary implements AndroidPackage",
                "         fullJarProvidedDeps,",
                "+        fullJarExportedProvidedDeps,",
                "         abiJar,",
                "@@ -174,2 +176,3 @@ public class AndroidLibrary extends DefaultJavaLibrary implements AndroidPackage",
                "                 ImmutableSortedSet<BuildRule> fullJarProvidedDeps,",
                "+                ImmutableSortedSet<BuildRule> fullJarExportedProvidedDeps,",
                "                 @Nullable BuildTarget abiJar,",
                "@@ -191,2 +194,3 @@ public class AndroidLibrary extends DefaultJavaLibrary implements AndroidPackage",
                "                   fullJarProvidedDeps,",
                "+                  fullJarExportedProvidedDeps,",
                "                   abiJar,",
                "diff --git a/src/com/facebook/buck/android/AndroidPrebuiltAar.java b/src/com/facebook/buck/android/AndroidPrebuiltAar.java",
                "index d3aaf8f9dc..8837cd8cd7 100644",
                "--- a/src/com/facebook/buck/android/AndroidPrebuiltAar.java",
                "+++ b/src/com/facebook/buck/android/AndroidPrebuiltAar.java",
                "@@ -98,2 +98,3 @@ public class AndroidPrebuiltAar extends AndroidLibrary",
                "         /* providedDeps */ ImmutableSortedSet.of(),",
                "+        ImmutableSortedSet.of(),",
                "         HasJavaAbi.getClassAbiJar(androidLibraryBuildTarget),",
                "diff --git a/src/com/facebook/buck/jvm/java/AbstractDefaultJavaLibraryClasspaths.java b/src/com/facebook/buck/jvm/java/AbstractDefaultJavaLibraryClasspaths.java",
                "index 2fe060d0e6..9a0526365a 100644",
                "--- a/src/com/facebook/buck/jvm/java/AbstractDefaultJavaLibraryClasspaths.java",
                "+++ b/src/com/facebook/buck/jvm/java/AbstractDefaultJavaLibraryClasspaths.java",
                "@@ -167,3 +167,5 @@ abstract class AbstractDefaultJavaLibraryClasspaths {",
                "     return Iterables.concat(",
                "-        getAllFirstOrderNonProvidedDeps(), Preconditions.checkNotNull(getDeps()).getProvidedDeps());",
                "+        getAllFirstOrderNonProvidedDeps(),",
                "+        Preconditions.checkNotNull(getDeps()).getProvidedDeps(),",
                "+        Preconditions.checkNotNull(getDeps()).getExportedProvidedDeps());",
                "   }",
                "diff --git a/src/com/facebook/buck/jvm/java/AbstractUnusedDependenciesFinder.java b/src/com/facebook/buck/jvm/java/AbstractUnusedDependenciesFinder.java",
                "index 378bfa109f..6fc88416ae 100644",
                "--- a/src/com/facebook/buck/jvm/java/AbstractUnusedDependenciesFinder.java",
                "+++ b/src/com/facebook/buck/jvm/java/AbstractUnusedDependenciesFinder.java",
                "@@ -128,2 +128,7 @@ public abstract class AbstractUnusedDependenciesFinder implements Step {",
                "         messageHandler, usedJars, javaLibraryDeps.getExportedDepTargets(), \"exported_deps\");",
                "+    findUnusedDependenciesAndProcessMessages(",
                "+        messageHandler,",
                "+        usedJars,",
                "+        javaLibraryDeps.getExportedProvidedDepTargets(),",
                "+        \"exported_provided_deps\");",
                "   }",
                "diff --git a/src/com/facebook/buck/jvm/java/DefaultJavaLibrary.java b/src/com/facebook/buck/jvm/java/DefaultJavaLibrary.java",
                "index 35c82225c1..43c9a4c239 100644",
                "--- a/src/com/facebook/buck/jvm/java/DefaultJavaLibrary.java",
                "+++ b/src/com/facebook/buck/jvm/java/DefaultJavaLibrary.java",
                "@@ -118,2 +118,3 @@ public class DefaultJavaLibrary extends AbstractBuildRule",
                "   private final ImmutableSortedSet<BuildRule> fullJarProvidedDeps;",
                "+  private final ImmutableSortedSet<BuildRule> fullJarExportedProvidedDeps;",
                "@@ -165,2 +166,3 @@ public class DefaultJavaLibrary extends AbstractBuildRule",
                "       ImmutableSortedSet<BuildRule> fullJarProvidedDeps,",
                "+      ImmutableSortedSet<BuildRule> fullJarExportedProvidedDeps,",
                "       @Nullable BuildTarget abiJar,",
                "@@ -180,14 +182,4 @@ public class DefaultJavaLibrary extends AbstractBuildRule",
                "     // and so only make sense for java library types.",
                "-    for (BuildRule dep : fullJarExportedDeps) {",
                "-      if (!(dep instanceof JavaLibrary)) {",
                "-        throw new HumanReadableException(",
                "-            buildTarget",
                "-                + \": exported dep \"",
                "-                + dep.getBuildTarget()",
                "-                + \" (\"",
                "-                + dep.getType()",
                "-                + \") \"",
                "-                + \"must be a type of java library.\");",
                "-      }",
                "-    }",
                "+    validateExportedDepsType(buildTarget, fullJarExportedDeps);",
                "+    validateExportedDepsType(buildTarget, fullJarExportedProvidedDeps);",
                "@@ -202,2 +194,3 @@ public class DefaultJavaLibrary extends AbstractBuildRule",
                "     this.fullJarProvidedDeps = fullJarProvidedDeps;",
                "+    this.fullJarExportedProvidedDeps = fullJarExportedProvidedDeps;",
                "     this.mavenCoords = mavenCoords;",
                "@@ -229,2 +222,18 @@ public class DefaultJavaLibrary extends AbstractBuildRule",
                "+  private static void validateExportedDepsType(",
                "+      BuildTarget buildTarget, ImmutableSortedSet<BuildRule> exportedDeps) {",
                "+    for (BuildRule dep : exportedDeps) {",
                "+      if (!(dep instanceof JavaLibrary)) {",
                "+        throw new HumanReadableException(",
                "+            buildTarget",
                "+                + \": exported dep \"",
                "+                + dep.getBuildTarget()",
                "+                + \" (\"",
                "+                + dep.getType()",
                "+                + \") \"",
                "+                + \"must be a type of java library.\");",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "   @Override",
                "@@ -325,2 +334,7 @@ public class DefaultJavaLibrary extends AbstractBuildRule",
                "+  @Override",
                "+  public SortedSet<BuildRule> getExportedProvidedDeps() {",
                "+    return fullJarExportedProvidedDeps;",
                "+  }",
                "+",
                "   /**",
                "@@ -391,8 +405,10 @@ public class DefaultJavaLibrary extends AbstractBuildRule",
                "     // do it when assembling the contents of a java_binary), but it is long-standing and projects",
                "-    // are depending upon it. The long term direction should be that we add an",
                "-    // `exported_provided_deps` field and either require that a dependency be present in only one",
                "-    // list or define a strict order of precedence among the lists (exported overrides deps",
                "-    // overrides exported_provided overrides provided.)",
                "+    // are depending upon it. The long term direction should be that we either require that",
                "+    // a dependency be present in only one list or define a strict order of precedence among",
                "+    // the lists (exported overrides deps overrides exported_provided overrides provided.)",
                "     return AndroidPackageableCollector.getPackageableRules(",
                "-        ImmutableSortedSet.copyOf(Sets.difference(firstOrderPackageableDeps, fullJarProvidedDeps)));",
                "+        ImmutableSortedSet.copyOf(",
                "+            Sets.difference(",
                "+                firstOrderPackageableDeps,",
                "+                Sets.union(fullJarProvidedDeps, fullJarExportedProvidedDeps))));",
                "   }",
                "diff --git a/src/com/facebook/buck/jvm/java/DefaultJavaLibraryRules.java b/src/com/facebook/buck/jvm/java/DefaultJavaLibraryRules.java",
                "index 1a57ad9221..146a50a287 100644",
                "--- a/src/com/facebook/buck/jvm/java/DefaultJavaLibraryRules.java",
                "+++ b/src/com/facebook/buck/jvm/java/DefaultJavaLibraryRules.java",
                "@@ -66,2 +66,3 @@ public abstract class DefaultJavaLibraryRules {",
                "         ImmutableSortedSet<BuildRule> fullJarProvidedDeps,",
                "+        ImmutableSortedSet<BuildRule> fullJarExportedProvidedDeps,",
                "         @Nullable BuildTarget abiJar,",
                "@@ -416,2 +417,3 @@ public abstract class DefaultJavaLibraryRules {",
                "                 Preconditions.checkNotNull(getDeps()).getProvidedDeps(),",
                "+                Preconditions.checkNotNull(getDeps()).getExportedProvidedDeps(),",
                "                 getAbiJar(),",
                "diff --git a/src/com/facebook/buck/jvm/java/JavaLibraryDeps.java b/src/com/facebook/buck/jvm/java/JavaLibraryDeps.java",
                "index efc506e055..fccf470c08 100644",
                "--- a/src/com/facebook/buck/jvm/java/JavaLibraryDeps.java",
                "+++ b/src/com/facebook/buck/jvm/java/JavaLibraryDeps.java",
                "@@ -48,2 +48,3 @@ public abstract class JavaLibraryDeps {",
                "             .setProvidedDepTargets(args.getProvidedDeps())",
                "+            .setExportedProvidedDepTargets(args.getExportedProvidedDeps())",
                "             .setSourceOnlyAbiDepTargets(args.getSourceOnlyAbiDeps());",
                "@@ -71,2 +72,5 @@ public abstract class JavaLibraryDeps {",
                "+  @Value.NaturalOrder",
                "+  abstract ImmutableSortedSet<BuildTarget> getExportedProvidedDepTargets();",
                "+",
                "   @Value.NaturalOrder",
                "@@ -92,2 +96,3 @@ public abstract class JavaLibraryDeps {",
                "             getProvidedDepTargets(),",
                "+            getExportedProvidedDepTargets(),",
                "             getProvidedDepsQuery().map(Query::getResolvedQuery).orElse(ImmutableSortedSet.of())));",
                "@@ -100,2 +105,7 @@ public abstract class JavaLibraryDeps {",
                "+  @Value.Lazy",
                "+  public ImmutableSortedSet<BuildRule> getExportedProvidedDeps() {",
                "+    return resolve(getExportedProvidedDepTargets());",
                "+  }",
                "+",
                "   @Value.Lazy",
                "diff --git a/src/com/facebook/buck/jvm/java/JavaTest.java b/src/com/facebook/buck/jvm/java/JavaTest.java",
                "index c336e3e518..f6c94b1533 100644",
                "--- a/src/com/facebook/buck/jvm/java/JavaTest.java",
                "+++ b/src/com/facebook/buck/jvm/java/JavaTest.java",
                "@@ -503,2 +503,7 @@ public class JavaTest extends AbstractBuildRuleWithDeclaredAndExtraDeps",
                "+  @Override",
                "+  public SortedSet<BuildRule> getExportedProvidedDeps() {",
                "+    return ImmutableSortedSet.of();",
                "+  }",
                "+",
                "   @VisibleForTesting",
                "diff --git a/src/com/facebook/buck/jvm/java/PrebuiltJar.java b/src/com/facebook/buck/jvm/java/PrebuiltJar.java",
                "index c185905792..e980273f3e 100644",
                "--- a/src/com/facebook/buck/jvm/java/PrebuiltJar.java",
                "+++ b/src/com/facebook/buck/jvm/java/PrebuiltJar.java",
                "@@ -223,2 +223,7 @@ public class PrebuiltJar extends AbstractBuildRuleWithDeclaredAndExtraDeps",
                "+  @Override",
                "+  public SortedSet<BuildRule> getExportedProvidedDeps() {",
                "+    return ImmutableSortedSet.of();",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/com/facebook/buck/rules/BuildRules.java b/src/com/facebook/buck/rules/BuildRules.java",
                "index 3733e372fe..96e7ae294d 100644",
                "--- a/src/com/facebook/buck/rules/BuildRules.java",
                "+++ b/src/com/facebook/buck/rules/BuildRules.java",
                "@@ -21,3 +21,2 @@ import com.facebook.buck.model.BuildTarget;",
                " import com.facebook.buck.util.HumanReadableException;",
                "-import com.google.common.collect.FluentIterable;",
                " import com.google.common.collect.ImmutableCollection;",
                "@@ -27,3 +26,6 @@ import com.google.common.collect.Iterables;",
                " import java.util.Optional;",
                "+import java.util.Set;",
                " import java.util.function.Predicate;",
                "+import java.util.stream.Collectors;",
                "+import java.util.stream.Stream;",
                "@@ -77,3 +79,3 @@ public class BuildRules {",
                "-  public static void buildExportedRules(",
                "+  private static void buildExportedRules(",
                "       Iterable<? extends BuildRule> rules, ImmutableCollection.Builder<BuildRule> exportedRules) {",
                "@@ -84,5 +86,10 @@ public class BuildRules {",
                "           public Iterable<ExportDependencies> visit(ExportDependencies exporter) {",
                "-            Iterable<BuildRule> exported = exporter.getExportedDeps();",
                "+            Set<BuildRule> exported = exporter.getExportedDeps();",
                "+            Set<BuildRule> exportedProvided = exporter.getExportedProvidedDeps();",
                "             exportedRules.addAll(exported);",
                "-            return FluentIterable.from(exported).filter(ExportDependencies.class).toSet();",
                "+            exportedRules.addAll(exportedProvided);",
                "+            return Stream.concat(exported.stream(), exportedProvided.stream())",
                "+                .filter(ExportDependencies.class::isInstance)",
                "+                .map(ExportDependencies.class::cast)",
                "+                .collect(Collectors.toSet());",
                "           }",
                "diff --git a/src/com/facebook/buck/rules/ExportDependencies.java b/src/com/facebook/buck/rules/ExportDependencies.java",
                "index d807c17fc7..89fcea9df4 100644",
                "--- a/src/com/facebook/buck/rules/ExportDependencies.java",
                "+++ b/src/com/facebook/buck/rules/ExportDependencies.java",
                "@@ -23,2 +23,4 @@ public interface ExportDependencies extends BuildRule {",
                "   SortedSet<BuildRule> getExportedDeps();",
                "+",
                "+  SortedSet<BuildRule> getExportedProvidedDeps();",
                " }",
                "diff --git a/src/com/facebook/buck/rules/HasProvidedDeps.java b/src/com/facebook/buck/rules/HasProvidedDeps.java",
                "index a704c5a9aa..d3d95f2b92 100644",
                "--- a/src/com/facebook/buck/rules/HasProvidedDeps.java",
                "+++ b/src/com/facebook/buck/rules/HasProvidedDeps.java",
                "@@ -25,2 +25,5 @@ public interface HasProvidedDeps {",
                "   ImmutableSortedSet<BuildTarget> getProvidedDeps();",
                "+",
                "+  @Value.NaturalOrder",
                "+  ImmutableSortedSet<BuildTarget> getExportedProvidedDeps();",
                " }",
                "diff --git a/test/com/facebook/buck/jvm/java/DefaultJavaLibraryIntegrationTest.java b/test/com/facebook/buck/jvm/java/DefaultJavaLibraryIntegrationTest.java",
                "index 23b510e51d..ba058c5ac0 100644",
                "--- a/test/com/facebook/buck/jvm/java/DefaultJavaLibraryIntegrationTest.java",
                "+++ b/test/com/facebook/buck/jvm/java/DefaultJavaLibraryIntegrationTest.java",
                "@@ -1031,2 +1031,50 @@ public class DefaultJavaLibraryIntegrationTest extends AbiCompilationModeTest {",
                "+  @Test",
                "+  public void testExportedProvidedDepsPropagated() throws IOException {",
                "+    setUpProjectWorkspaceForScenario(\"exported_provided_deps\");",
                "+",
                "+    ProcessResult buildResult =",
                "+        workspace.runBuckCommand(\"build\", \"//:lib_with_implicit_dep_on_provided_lib\");",
                "+    buildResult.assertSuccess();",
                "+",
                "+    workspace.verify();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void testExportedProvidedDepsPropagatedThroughExportedDeps() throws IOException {",
                "+    setUpProjectWorkspaceForScenario(\"exported_provided_deps\");",
                "+",
                "+    ProcessResult buildResult =",
                "+        workspace.runBuckCommand(",
                "+            \"build\", \"//:lib_with_implicit_dep_on_provided_lib_through_exported_deps\");",
                "+    buildResult.assertSuccess();",
                "+",
                "+    workspace.verify();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void testExportedProvidedDepsPropagatedThroughProvidedDeps() throws IOException {",
                "+    setUpProjectWorkspaceForScenario(\"exported_provided_deps\");",
                "+",
                "+    ProcessResult buildResult =",
                "+        workspace.runBuckCommand(",
                "+            \"build\", \"//:lib_with_implicit_dep_on_provided_lib_through_provided_deps\");",
                "+    buildResult.assertSuccess();",
                "+",
                "+    workspace.verify();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void testExportedProvidedDepsPropagatedThroughExportedDepsOfAnotherLibrary()",
                "+      throws IOException {",
                "+    setUpProjectWorkspaceForScenario(\"exported_provided_deps\");",
                "+",
                "+    ProcessResult buildResult =",
                "+        workspace.runBuckCommand(",
                "+            \"build\", \"//:lib_with_implicit_dep_on_provided_lib_through_exported_library_deps\");",
                "+    buildResult.assertSuccess();",
                "+",
                "+    workspace.verify();",
                "+  }",
                "+",
                "   /** Asserts that the specified file exists and returns its contents. */",
                "diff --git a/test/com/facebook/buck/jvm/java/JavaBinaryIntegrationTest.java b/test/com/facebook/buck/jvm/java/JavaBinaryIntegrationTest.java",
                "index 532535c56e..be1f8ac3bf 100644",
                "--- a/test/com/facebook/buck/jvm/java/JavaBinaryIntegrationTest.java",
                "+++ b/test/com/facebook/buck/jvm/java/JavaBinaryIntegrationTest.java",
                "@@ -24,2 +24,3 @@ import static org.junit.Assert.assertEquals;",
                " import static org.junit.Assert.assertNotNull;",
                "+import static org.junit.Assert.assertNull;",
                " import static org.junit.Assert.assertThat;",
                "@@ -235,2 +236,11 @@ public class JavaBinaryIntegrationTest extends AbiCompilationModeTest {",
                "+  @Test",
                "+  public void testExportedProvidedDepsExcludedFromBinary() throws IOException {",
                "+    setUpProjectWorkspaceForScenario(\"exported_provided_deps\");",
                "+    Path jar = workspace.buildAndReturnOutput(\"//:binary_without_exported_provided_dep\");",
                "+    try (JarFile jarFile = new JarFile(jar.toFile())) {",
                "+      assertNull(jarFile.getEntry(\"com/test/ExportedProvidedLibraryClass.class\"));",
                "+    }",
                "+  }",
                "+",
                "   private ProjectWorkspace setUpProjectWorkspaceForScenario(String scenario) throws IOException {",
                "diff --git a/test/com/facebook/buck/jvm/java/UnusedDependenciesFinderIntegrationTest.java b/test/com/facebook/buck/jvm/java/UnusedDependenciesFinderIntegrationTest.java",
                "index 2f0772cff0..b80ee18579 100644",
                "--- a/test/com/facebook/buck/jvm/java/UnusedDependenciesFinderIntegrationTest.java",
                "+++ b/test/com/facebook/buck/jvm/java/UnusedDependenciesFinderIntegrationTest.java",
                "@@ -155,2 +155,20 @@ public class UnusedDependenciesFinderIntegrationTest {",
                "   }",
                "+",
                "+  @Test",
                "+  public void testShowWarningAboutExportedProvidedDeps() throws IOException {",
                "+    ProcessResult processResult =",
                "+        workspace.runBuckCommand(",
                "+            \"build\",",
                "+            \"-c\",",
                "+            \"java.unused_dependencies_action=warn\",",
                "+            \":bar_with_exported_provided_dep\");",
                "+",
                "+    processResult.assertSuccess();",
                "+    assertThat(",
                "+        processResult.getStderr(),",
                "+        Matchers.allOf(",
                "+            Matchers.containsString(",
                "+                \"Target //:bar_with_exported_provided_dep is declared with unused targets in exported_provided_deps:\"),",
                "+            Matchers.containsString(\"buck//third-party/java/jsr:jsr305\")));",
                "+  }",
                " }",
                "diff --git a/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/.buckconfig b/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/.buckconfig",
                "new file mode 100644",
                "index 0000000000..e69de29bb2",
                "diff --git a/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/BUCK.fixture b/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..c8a0de33c9",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/BUCK.fixture",
                "@@ -0,0 +1,39 @@",
                "+java_library(",
                "+    name = \"exported_provided_lib\",",
                "+    srcs = [\"ExportedProvidedLibraryClass.java\"],",
                "+)",
                "+",
                "+java_library(",
                "+    name = \"lib_that_use_provided_lib\",",
                "+    srcs = [\"ClassThatUseExportedProvidedLibraryClass.java\"],",
                "+    exported_provided_deps = [\":exported_provided_lib\"],",
                "+)",
                "+",
                "+java_library(",
                "+    name = \"lib_with_implicit_dep_on_provided_lib\",",
                "+    srcs = [\"ClassWithImplicitDependencyOnExportedProvidedLibraryClass.java\"],",
                "+    deps = [\":lib_that_use_provided_lib\"],",
                "+)",
                "+",
                "+java_library(",
                "+    name = \"lib_with_implicit_dep_on_provided_lib_through_exported_deps\",",
                "+    srcs = [\"ClassWithImplicitDependencyOnExportedProvidedLibraryClass.java\"],",
                "+    exported_deps = [\":lib_that_use_provided_lib\"],",
                "+)",
                "+",
                "+java_library(",
                "+    name = \"lib_with_implicit_dep_on_provided_lib_through_provided_deps\",",
                "+    srcs = [\"ClassWithImplicitDependencyOnExportedProvidedLibraryClass.java\"],",
                "+    provided_deps = [\":lib_that_use_provided_lib\"],",
                "+)",
                "+",
                "+java_library(",
                "+    name = \"lib_with_implicit_dep_on_provided_lib_through_exported_library_deps\",",
                "+    srcs = [\"ClassWithImplicitDependencyOnExportedProvidedLibraryClassThroughExportedDeps.java\"],",
                "+    deps = [\":lib_with_implicit_dep_on_provided_lib_through_exported_deps\"],",
                "+)",
                "+",
                "+java_binary(",
                "+    name = \"binary_without_exported_provided_dep\",",
                "+    deps = [\":lib_with_implicit_dep_on_provided_lib\"],",
                "+)",
                "diff --git a/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ClassThatUseExportedProvidedLibraryClass.java b/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ClassThatUseExportedProvidedLibraryClass.java",
                "new file mode 100644",
                "index 0000000000..fe91e08020",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ClassThatUseExportedProvidedLibraryClass.java",
                "@@ -0,0 +1,3 @@",
                "+package com.test;",
                "+",
                "+class ClassThatUseExportedProvidedLibraryClass extends ExportedProvidedLibraryClass {}",
                "diff --git a/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ClassWithImplicitDependencyOnExportedProvidedLibraryClass.java b/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ClassWithImplicitDependencyOnExportedProvidedLibraryClass.java",
                "new file mode 100644",
                "index 0000000000..61171334ac",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ClassWithImplicitDependencyOnExportedProvidedLibraryClass.java",
                "@@ -0,0 +1,4 @@",
                "+package com.test;",
                "+",
                "+public class ClassWithImplicitDependencyOnExportedProvidedLibraryClass",
                "+    extends ClassThatUseExportedProvidedLibraryClass {}",
                "diff --git a/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ClassWithImplicitDependencyOnExportedProvidedLibraryClassThroughExportedDeps.java b/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ClassWithImplicitDependencyOnExportedProvidedLibraryClassThroughExportedDeps.java",
                "new file mode 100644",
                "index 0000000000..3e7d71cfb3",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ClassWithImplicitDependencyOnExportedProvidedLibraryClassThroughExportedDeps.java",
                "@@ -0,0 +1,4 @@",
                "+package com.test;",
                "+",
                "+public class ClassWithImplicitDependencyOnExportedProvidedLibraryClassThroughExportedDeps",
                "+    extends ClassWithImplicitDependencyOnExportedProvidedLibraryClass {}",
                "diff --git a/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ExportedProvidedLibraryClass.java b/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ExportedProvidedLibraryClass.java",
                "new file mode 100644",
                "index 0000000000..d5707f98db",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ExportedProvidedLibraryClass.java",
                "@@ -0,0 +1,3 @@",
                "+package com.test;",
                "+",
                "+public class ExportedProvidedLibraryClass {}",
                "diff --git a/test/com/facebook/buck/jvm/java/testdata/unused_dependencies/BUCK.fixture b/test/com/facebook/buck/jvm/java/testdata/unused_dependencies/BUCK.fixture",
                "index ef7c40dbe4..2e63c77bd3 100644",
                "--- a/test/com/facebook/buck/jvm/java/testdata/unused_dependencies/BUCK.fixture",
                "+++ b/test/com/facebook/buck/jvm/java/testdata/unused_dependencies/BUCK.fixture",
                "@@ -97 +97,12 @@ java_library(",
                " )",
                "+",
                "+java_library(",
                "+    name = \"bar_with_exported_provided_dep\",",
                "+    srcs = [\"Bar.java\"],",
                "+    exported_provided_deps = [",
                "+        \"buck//third-party/java/jsr:jsr305\",",
                "+    ],",
                "+    visibility = [",
                "+        \"PUBLIC\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/rules/FakeExportDependenciesRule.java b/test/com/facebook/buck/rules/FakeExportDependenciesRule.java",
                "deleted file mode 100644",
                "index 871bf9fd2d..0000000000",
                "--- a/test/com/facebook/buck/rules/FakeExportDependenciesRule.java",
                "+++ /dev/null",
                "@@ -1,35 +0,0 @@",
                "-/*",
                "- * Copyright 2015-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-package com.facebook.buck.rules;",
                "-",
                "-import com.google.common.collect.ImmutableSortedSet;",
                "-import java.util.SortedSet;",
                "-",
                "-public class FakeExportDependenciesRule extends FakeBuildRule implements ExportDependencies {",
                "-",
                "-  private final ImmutableSortedSet<BuildRule> exportedDeps;",
                "-",
                "-  public FakeExportDependenciesRule(String target, BuildRule... deps) {",
                "-    super(target, deps);",
                "-    this.exportedDeps = ImmutableSortedSet.copyOf(deps);",
                "-  }",
                "-",
                "-  @Override",
                "-  public SortedSet<BuildRule> getExportedDeps() {",
                "-    return exportedDeps;",
                "-  }",
                "-}"
            ],
            "changed_files": [
                "docs/__jvm_common.soy",
                "docs/rule/android_library.soy",
                "docs/rule/java_library.soy",
                "docs/rule/kotlin_library.soy",
                "src/com/facebook/buck/android/AndroidBuildConfigJavaLibrary.java",
                "src/com/facebook/buck/android/AndroidLibrary.java",
                "src/com/facebook/buck/android/AndroidPrebuiltAar.java",
                "src/com/facebook/buck/jvm/java/AbstractDefaultJavaLibraryClasspaths.java",
                "src/com/facebook/buck/jvm/java/AbstractUnusedDependenciesFinder.java",
                "src/com/facebook/buck/jvm/java/DefaultJavaLibrary.java",
                "src/com/facebook/buck/jvm/java/DefaultJavaLibraryRules.java",
                "src/com/facebook/buck/jvm/java/JavaLibraryDeps.java",
                "src/com/facebook/buck/jvm/java/JavaTest.java",
                "src/com/facebook/buck/jvm/java/PrebuiltJar.java",
                "src/com/facebook/buck/rules/BuildRules.java",
                "src/com/facebook/buck/rules/ExportDependencies.java",
                "src/com/facebook/buck/rules/HasProvidedDeps.java",
                "test/com/facebook/buck/jvm/java/DefaultJavaLibraryIntegrationTest.java",
                "test/com/facebook/buck/jvm/java/JavaBinaryIntegrationTest.java",
                "test/com/facebook/buck/jvm/java/UnusedDependenciesFinderIntegrationTest.java",
                "test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/.buckconfig",
                "test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/BUCK.fixture",
                "test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ClassThatUseExportedProvidedLibraryClass.java",
                "test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ClassWithImplicitDependencyOnExportedProvidedLibraryClass.java",
                "test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ClassWithImplicitDependencyOnExportedProvidedLibraryClassThroughExportedDeps.java",
                "test/com/facebook/buck/jvm/java/testdata/exported_provided_deps/ExportedProvidedLibraryClass.java",
                "test/com/facebook/buck/jvm/java/testdata/unused_dependencies/BUCK.fixture",
                "test/com/facebook/buck/rules/FakeExportDependenciesRule.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: java",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "71431d51e9c3bf3fe637d82867c47fd6f5a2a022",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522947011,
            "hunks": 10,
            "message": "Fix rare race condition in TransformationEngine test Summary: There is a rare race condition in the test where due to dependencies using the cached value in the TransformationEngine, the future to cleanup the computationIndex has yet to occur before the unit test tries to verify the emptiness of computationIndex. This fixes it. Reviewed By: ttsugriy fbshipit-source-id: 72861ed",
            "diff": [
                "diff --git a/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java b/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java",
                "index 2b5c56918c..979a0a8c2b 100644",
                "--- a/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java",
                "+++ b/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java",
                "@@ -23,3 +23,5 @@ import com.google.common.graph.GraphBuilder;",
                " import com.google.common.graph.MutableGraph;",
                "+import com.google.common.util.concurrent.Futures;",
                " import java.util.Optional;",
                "+import java.util.concurrent.CompletableFuture;",
                " import java.util.concurrent.CompletionStage;",
                "@@ -29,3 +31,5 @@ import org.junit.Assert;",
                " import org.junit.Before;",
                "+import org.junit.Rule;",
                " import org.junit.Test;",
                "+import org.junit.rules.Timeout;",
                "@@ -34,2 +38,4 @@ public class DefaultAsyncTransformationEngineTest {",
                "+  @Rule public Timeout timeout = Timeout.seconds(10);",
                "+",
                "   private MutableGraph<Long> graph;",
                "@@ -107,3 +113,3 @@ public class DefaultAsyncTransformationEngineTest {",
                "-    assertEquals(0, engine.computationIndex.size());",
                "+    assertComputationIndexBecomesEmpty(engine.computationIndex);",
                "   }",
                "@@ -117,3 +123,3 @@ public class DefaultAsyncTransformationEngineTest {",
                "-    assertEquals(0, engine.computationIndex.size());",
                "+    assertComputationIndexBecomesEmpty(engine.computationIndex);",
                "   }",
                "@@ -146,3 +152,3 @@ public class DefaultAsyncTransformationEngineTest {",
                "     // all Futures should be removed",
                "-    assertEquals(0, engine.computationIndex.size());",
                "+    assertComputationIndexBecomesEmpty(engine.computationIndex);",
                "     assertEquals(1, cache.getSize());",
                "@@ -189,3 +195,3 @@ public class DefaultAsyncTransformationEngineTest {",
                "     // all Futures should be removed",
                "-    assertEquals(0, engine.computationIndex.size());",
                "+    assertComputationIndexBecomesEmpty(engine.computationIndex);",
                "     assertEquals(5, cache.getSize());",
                "@@ -197,2 +203,18 @@ public class DefaultAsyncTransformationEngineTest {",
                "   }",
                "+",
                "+  /**",
                "+   * Asserts that the computationIndex of the {@link AsyncTransformationEngine} eventually becomes",
                "+   * empty.",
                "+   *",
                "+   * @param computationIndex the computationIndex of the engine",
                "+   */",
                "+  private static void assertComputationIndexBecomesEmpty(",
                "+      ConcurrentHashMap<Long, CompletableFuture<Long>> computationIndex) {",
                "+    // wait for all futures to complete in the computation.",
                "+    // we can have situation where the computation was completed by using the cache.",
                "+    Futures.getUnchecked(",
                "+        CompletableFuture.allOf(computationIndex.values().toArray(new CompletableFuture[] {})));",
                "+",
                "+    assertEquals(0, computationIndex.size());",
                "+  }",
                " }"
            ],
            "changed_files": [
                "test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: cache",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "50d5cc889aeadab55d935748998864452ce21454",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521487550,
            "hunks": 2,
            "message": "Patch Skylark to report location of unconfigured functions. Summary: Previously, if for some reason of the Skylark functions is not configured before it's used, the error would be something very unhelpful as: ``` java.lang.IllegalStateException: Function struct was not configured ``` and a Java strack trace with original of this exception. But unfortunately it does not give any context as to where this function was used. This patch replaces `IllegalStateException` with `EvalException` that carries location context that is used to create nice error messages pointing at where in the build or extension file this function was invoked. Test Plan: CI Reviewed By: philipjameson fbshipit-source-id: 78563cb",
            "diff": [
                "diff --git a/test/com/facebook/buck/skylark/parser/SkylarkExceptionHandlingTest.java b/test/com/facebook/buck/skylark/parser/SkylarkExceptionHandlingTest.java",
                "new file mode 100644",
                "index 0000000000..bfb30ce8e3",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/skylark/parser/SkylarkExceptionHandlingTest.java",
                "@@ -0,0 +1,57 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.skylark.parser;",
                "+",
                "+import static org.hamcrest.CoreMatchers.is;",
                "+import static org.junit.Assert.assertThat;",
                "+",
                "+import com.google.devtools.build.lib.events.Event;",
                "+import com.google.devtools.build.lib.events.EventCollector;",
                "+import com.google.devtools.build.lib.events.EventKind;",
                "+import com.google.devtools.build.lib.syntax.BaseFunction;",
                "+import com.google.devtools.build.lib.syntax.BuildFileAST;",
                "+import com.google.devtools.build.lib.syntax.Environment;",
                "+import com.google.devtools.build.lib.syntax.Mutability;",
                "+import com.google.devtools.build.lib.syntax.ParserInputSource;",
                "+import com.google.devtools.build.lib.vfs.PathFragment;",
                "+import java.util.Iterator;",
                "+import org.junit.Test;",
                "+",
                "+public class SkylarkExceptionHandlingTest {",
                "+  @Test",
                "+  public void locationIsIncludedWhenUnconfiguredFunctionIsReported() throws Exception {",
                "+    try (Mutability mutability = Mutability.create(\"BUCK\")) {",
                "+      Environment env = Environment.builder(mutability).useDefaultSemantics().build();",
                "+      env.setup(\"foo\", new BaseFunction(\"foo\") {});",
                "+",
                "+      EventCollector eventHandler = new EventCollector();",
                "+      BuildFileAST ast =",
                "+          BuildFileAST.parseBuildFile(",
                "+              ParserInputSource.create(\"foo()\", PathFragment.create(\"BUCK\")), eventHandler);",
                "+      assertThat(ast.containsErrors(), is(false));",
                "+      boolean success = ast.exec(env, eventHandler);",
                "+      assertThat(success, is(false));",
                "+      Iterator<Event> errors = eventHandler.filtered(EventKind.ERROR).iterator();",
                "+      assertThat(errors.hasNext(), is(true));",
                "+      Event event = errors.next();",
                "+      assertThat(errors.hasNext(), is(false));",
                "+      assertThat(event.getLocation().toString(), is(\"BUCK:1:1\"));",
                "+      assertThat(event.getMessage(), is(\"Function foo was not configured\"));",
                "+      assertThat(event.getKind(), is(EventKind.ERROR));",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/third-party/java/bazel/skylark-lang.patch b/third-party/java/bazel/skylark-lang.patch",
                "index 658f6e047a..e0bc0335d2 100644",
                "--- a/third-party/java/bazel/skylark-lang.patch",
                "+++ b/third-party/java/bazel/skylark-lang.patch",
                "@@ -2302 +2302,21 @@ index 5623847960..c087cb1ceb 100644",
                "  }",
                "+diff --git i/src/main/java/com/google/devtools/build/lib/syntax/BaseFunction.java w/src/main/java/com/google/devtools/build/lib/syntax/BaseFunction.java",
                "+index e445e46cf8..21e3931b1f 100644",
                "+--- i/src/main/java/com/google/devtools/build/lib/syntax/BaseFunction.java",
                "++++ w/src/main/java/com/google/devtools/build/lib/syntax/BaseFunction.java",
                "+@@ -431,11 +431,13 @@ public abstract class BaseFunction implements SkylarkValue {",
                "+       @Nullable FuncallExpression ast,",
                "+       Environment env)",
                "+       throws EvalException, InterruptedException {",
                "+-    Preconditions.checkState(isConfigured(), \"Function %s was not configured\", getName());",
                "+-",
                "+     // ast is null when called from Java (as there's no Skylark call site).",
                "+     Location loc = ast == null ? Location.BUILTIN : ast.getLocation();",
                "+ ",
                "++    if (!isConfigured()) {",
                "++      throw new EvalException(loc, String.format(\"Function %s was not configured\", getName()));",
                "++    }",
                "++",
                "+     Object[] arguments = processArguments(args, kwargs, loc, env);",
                "+     canonicalizeArguments(arguments, loc);",
                "+ ",
                "diff --git a/third-party/java/bazel/skylark-lang_deploy-src.jar b/third-party/java/bazel/skylark-lang_deploy-src.jar",
                "index 5c1fb4fcaf..31b33ebc8b 100644",
                "Binary files a/third-party/java/bazel/skylark-lang_deploy-src.jar and b/third-party/java/bazel/skylark-lang_deploy-src.jar differ",
                "diff --git a/third-party/java/bazel/skylark-lang_deploy.jar b/third-party/java/bazel/skylark-lang_deploy.jar",
                "index 76182c1298..b2f7026765 100644",
                "Binary files a/third-party/java/bazel/skylark-lang_deploy.jar and b/third-party/java/bazel/skylark-lang_deploy.jar differ"
            ],
            "changed_files": [
                "test/com/facebook/buck/skylark/parser/SkylarkExceptionHandlingTest.java",
                "third-party/java/bazel/skylark-lang.patch",
                "third-party/java/bazel/skylark-lang_deploy-src.jar",
                "third-party/java/bazel/skylark-lang_deploy.jar"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: java, state",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, parser",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ac809da24ed4089cadb50687e491499b0ac42de6",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521549769,
            "hunks": 11,
            "message": "Introduce --local flag to easily disable stampede conversion. Summary: This diff introduces a user-friendly way to disable stampede conversion for a one-off build. Test Plan: CI Reviewed By: michsien fbshipit-source-id: 60657b5",
            "diff": [
                "diff --git a/src/com/facebook/buck/cli/BuildCommand.java b/src/com/facebook/buck/cli/BuildCommand.java",
                "index a12ad31a0e..797f8785ce 100644",
                "--- a/src/com/facebook/buck/cli/BuildCommand.java",
                "+++ b/src/com/facebook/buck/cli/BuildCommand.java",
                "@@ -167,2 +167,3 @@ public class BuildCommand extends AbstractCommand {",
                "   private static final String SHOW_RULEKEY_LONG_ARG = \"--show-rulekey\";",
                "+  private static final String LOCAL_BUILD_LONG_ARG = \"--local\";",
                "   private static final String DISTRIBUTED_LONG_ARG = \"--distributed\";",
                "@@ -249,2 +250,8 @@ public class BuildCommand extends AbstractCommand {",
                "+  @Option(",
                "+    name = LOCAL_BUILD_LONG_ARG,",
                "+    usage = \"Disable distributed build (overrides --distributed).\"",
                "+  )",
                "+  private boolean forceDisableDistributedBuild = false;",
                "+",
                "   @Option(",
                "@@ -254,3 +261,3 @@ public class BuildCommand extends AbstractCommand {",
                "   )",
                "-  private boolean useDistributedBuild = false;",
                "+  private boolean useDistributedBuild = false; // Must be accessed via the getter method.",
                "@@ -344,3 +351,8 @@ public class BuildCommand extends AbstractCommand {",
                "-  public boolean isUseDistributedBuild() {",
                "+  /** Whether this build is using stampede or not. */",
                "+  public boolean isUsingDistributedBuild() {",
                "+    if (forceDisableDistributedBuild) {",
                "+      useDistributedBuild = false;",
                "+    }",
                "+",
                "     return useDistributedBuild;",
                "@@ -352,7 +364,19 @@ public class BuildCommand extends AbstractCommand {",
                "    * @param config to retrieve the message (if any) to be shown to the user.",
                "+   * @return true if the build was converted to stampede.",
                "    */",
                "-  public void autoConversionToStampede(DistBuildConfig config) {",
                "-    this.autoDistBuild = true;",
                "-    this.useDistributedBuild = true;",
                "-    this.autoDistBuildMessage = config.getAutoDistributedBuildMessage();",
                "+  public boolean tryConvertingToStampede(DistBuildConfig config) {",
                "+    if (forceDisableDistributedBuild) {",
                "+      LOG.warn(",
                "+          String.format(",
                "+              \"%s has been specified. Will not auto-convert build to stampede.\",",
                "+              LOCAL_BUILD_LONG_ARG));",
                "+",
                "+      useDistributedBuild = false; // Make sure",
                "+      return false;",
                "+    }",
                "+",
                "+    autoDistBuild = true;",
                "+    useDistributedBuild = true;",
                "+    autoDistBuildMessage = config.getAutoDistributedBuildMessage();",
                "+    return true;",
                "   }",
                "@@ -527,3 +551,3 @@ public class BuildCommand extends AbstractCommand {",
                "     ActionAndTargetGraphs graphs;",
                "-    if (useDistributedBuild) {",
                "+    if (isUsingDistributedBuild()) {",
                "       DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());",
                "@@ -1334,3 +1358,3 @@ public class BuildCommand extends AbstractCommand {",
                "             isKeepGoing(),",
                "-            useDistributedBuild,",
                "+            isUsingDistributedBuild(),",
                "             isDownloadHeavyBuild,",
                "@@ -1412,3 +1436,3 @@ public class BuildCommand extends AbstractCommand {",
                "     ImmutableList.Builder<BuckEventListener> listeners = ImmutableList.builder();",
                "-    if (useDistributedBuild) {",
                "+    if (isUsingDistributedBuild()) {",
                "       distBuildClientEventListener = new DistBuildClientEventListener();",
                "diff --git a/src/com/facebook/buck/cli/Main.java b/src/com/facebook/buck/cli/Main.java",
                "index a16be6238f..fa82c9a79e 100644",
                "--- a/src/com/facebook/buck/cli/Main.java",
                "+++ b/src/com/facebook/buck/cli/Main.java",
                "@@ -616,6 +616,5 @@ public final class Main {",
                "       BuildCommand subcommand = (BuildCommand) command.subcommand;",
                "-      isUsingDistributedBuild = subcommand.isUseDistributedBuild();",
                "+      isUsingDistributedBuild = subcommand.isUsingDistributedBuild();",
                "       if (!isUsingDistributedBuild && distBuildConfig.shouldUseDistributedBuild(buildId)) {",
                "-        isUsingDistributedBuild = true;",
                "-        subcommand.autoConversionToStampede(distBuildConfig);",
                "+        isUsingDistributedBuild = subcommand.tryConvertingToStampede(distBuildConfig);",
                "       }"
            ],
            "changed_files": [
                "src/com/facebook/buck/cli/BuildCommand.java",
                "src/com/facebook/buck/cli/Main.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, command",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "323cdf1ee13e8c48dd8e7d07aa323c61e58b8bcb",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522428332,
            "hunks": 1,
            "message": "Eliminate expensive hash code Summary: `DependencyType.putWithMerge` is called at least once (and usually many times) on every `IJModule` in the project. The calling code uses a `HashMap`, which leads to a lot of CPU time spent calculating the hash code of an `IJModule`. This is expensive due to the large number of lists of strings contained in the `IJModule`. This change switches to using the module's name (which is guaranteed to be unique because it is based on the filepath) as the source of truth for `equals` and `hashCode`. Reviewed By: mkillianey, styurin fbshipit-source-id: fdffb6d",
            "diff": [
                "diff --git a/src/com/facebook/buck/ide/intellij/model/AbstractIjModule.java b/src/com/facebook/buck/ide/intellij/model/AbstractIjModule.java",
                "index a415d03286..6881350f82 100644",
                "--- a/src/com/facebook/buck/ide/intellij/model/AbstractIjModule.java",
                "+++ b/src/com/facebook/buck/ide/intellij/model/AbstractIjModule.java",
                "@@ -137,2 +137,14 @@ abstract class AbstractIjModule implements IjProjectElement {",
                "   }",
                "+",
                "+  @Override",
                "+  public int hashCode() {",
                "+    return getModuleImlFilePath().hashCode();",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean equals(Object another) {",
                "+    return this == another",
                "+        || another instanceof IjModule",
                "+            && getModuleImlFilePath().equals(((IjModule) another).getModuleImlFilePath());",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/com/facebook/buck/ide/intellij/model/AbstractIjModule.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, lead",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "bcaa122b63ecaf06d48253145dfe008a41e22395",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521754571,
            "hunks": 31,
            "message": "ocaml: refactor some rule builder code Summary: Move binary and library specific code into the descriptions. Test Plan: CI Reviewed By: bobyangyf fbshipit-source-id: a496e1f",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/AbstractOcamlGeneratedBuildRules.java b/src/com/facebook/buck/ocaml/AbstractOcamlGeneratedBuildRules.java",
                "index 53fad21e87..1bf9a15a9d 100644",
                "--- a/src/com/facebook/buck/ocaml/AbstractOcamlGeneratedBuildRules.java",
                "+++ b/src/com/facebook/buck/ocaml/AbstractOcamlGeneratedBuildRules.java",
                "@@ -37,2 +37,4 @@ abstract class AbstractOcamlGeneratedBuildRules {",
                "   public abstract BuildRule getBytecodeLink();",
                "+",
                "+  public abstract OcamlBuildContext getOcamlContext();",
                " }",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "index 4e7b56fc50..2e0d6fa924 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "@@ -34,4 +34,6 @@ import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                " import com.facebook.buck.versions.VersionRoot;",
                "+import com.google.common.base.Suppliers;",
                " import com.google.common.collect.ImmutableCollection;",
                " import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                " import java.util.Optional;",
                "@@ -80,17 +82,48 @@ public class OcamlBinaryDescription",
                "     }",
                "-    ImmutableList<String> linkerFlags = args.getLinkerFlags();",
                "-    return OcamlRuleBuilder.createBuildRule(",
                "-        ocamlPlatform,",
                "+    BuildTarget compileBuildTarget = OcamlRuleBuilder.createOcamlLinkTarget(buildTarget);",
                "+",
                "+    ImmutableList<BuildRule> rules;",
                "+    if (OcamlRuleBuilder.shouldUseFineGrainedRules(context.getBuildRuleResolver(), srcs)) {",
                "+      OcamlGeneratedBuildRules result =",
                "+          OcamlRuleBuilder.createFineGrainedBuildRules(",
                "+              ocamlPlatform,",
                "+              compileBuildTarget,",
                "+              context.getProjectFilesystem(),",
                "+              params,",
                "+              context.getBuildRuleResolver(),",
                "+              srcs,",
                "+              /* isLibrary */ false,",
                "+              args.getBytecodeOnly().orElse(false),",
                "+              flags.build(),",
                "+              args.getOcamldepFlags(),",
                "+              /* buildNativePlugin */ false);",
                "+      rules = result.getRules();",
                "+    } else {",
                "+",
                "+      OcamlBuild ocamlLibraryBuild =",
                "+          OcamlRuleBuilder.createBulkCompileRule(",
                "+              ocamlPlatform,",
                "+              compileBuildTarget,",
                "+              context.getProjectFilesystem(),",
                "+              params,",
                "+              context.getBuildRuleResolver(),",
                "+              srcs,",
                "+              /* isLibrary */ false,",
                "+              args.getBytecodeOnly().orElse(false),",
                "+              flags.build(),",
                "+              args.getOcamldepFlags());",
                "+      rules = ImmutableList.of(ocamlLibraryBuild);",
                "+    }",
                "+",
                "+    return new OcamlBinary(",
                "         buildTarget,",
                "         context.getProjectFilesystem(),",
                "-        params,",
                "-        context.getBuildRuleResolver(),",
                "-        srcs,",
                "-        /*isLibrary*/ false,",
                "-        args.getBytecodeOnly().orElse(false),",
                "-        flags.build(),",
                "-        linkerFlags,",
                "-        args.getOcamldepFlags(),",
                "-        /*buildNativePlugin*/ false);",
                "+        params.withDeclaredDeps(",
                "+            Suppliers.ofInstance(",
                "+                ImmutableSortedSet.<BuildRule>naturalOrder()",
                "+                    .addAll(params.getDeclaredDeps().get())",
                "+                    .addAll(rules)",
                "+                    .build())),",
                "+        rules.get(0));",
                "   }",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlBuild.java b/src/com/facebook/buck/ocaml/OcamlBuild.java",
                "index 66cc7106a8..1790050a88 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlBuild.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlBuild.java",
                "@@ -104,2 +104,6 @@ public class OcamlBuild extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "   }",
                "+",
                "+  public OcamlBuildContext getOcamlContext() {",
                "+    return ocamlContext;",
                "+  }",
                " }",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlBuildRulesGenerator.java b/src/com/facebook/buck/ocaml/OcamlBuildRulesGenerator.java",
                "index df4f4f7a5e..80e0fdfe27 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlBuildRulesGenerator.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlBuildRulesGenerator.java",
                "@@ -144,2 +144,3 @@ public class OcamlBuildRulesGenerator {",
                "         .setBytecodeLink(bytecodeLink)",
                "+        .setOcamlContext(ocamlContext)",
                "         .build();",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "index 04b0549377..5777c25244 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "@@ -24,5 +24,9 @@ import com.facebook.buck.rules.CellPathResolver;",
                " import com.facebook.buck.rules.CommonDescriptionArg;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                " import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                " import com.facebook.buck.rules.HasDeclaredDeps;",
                " import com.facebook.buck.rules.ImplicitDepsInferringDescription;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                " import com.facebook.buck.rules.args.Arg;",
                "@@ -34,4 +38,6 @@ import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                " import com.facebook.buck.versions.VersionPropagator;",
                "+import com.google.common.base.Suppliers;",
                " import com.google.common.collect.ImmutableCollection;",
                " import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                " import java.util.Optional;",
                "@@ -63,2 +69,5 @@ public class OcamlLibraryDescription",
                "+    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getBuildRuleResolver());",
                "+    SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);",
                "+",
                "     OcamlToolchain ocamlToolchain =",
                "@@ -68,4 +77,4 @@ public class OcamlLibraryDescription",
                "     ImmutableList<OcamlSource> srcs = args.getSrcs();",
                "-    ImmutableList.Builder<Arg> flags = ImmutableList.builder();",
                "-    flags.addAll(",
                "+    ImmutableList.Builder<Arg> flagsBuilder = ImmutableList.builder();",
                "+    flagsBuilder.addAll(",
                "         OcamlDescriptionEnhancer.toStringWithMacrosArgs(",
                "@@ -76,3 +85,3 @@ public class OcamlLibraryDescription",
                "     if (ocamlPlatform.getWarningsFlags().isPresent() || args.getWarningsFlags().isPresent()) {",
                "-      flags.addAll(",
                "+      flagsBuilder.addAll(",
                "           StringArg.from(",
                "@@ -81,20 +90,78 @@ public class OcamlLibraryDescription",
                "     }",
                "-    ImmutableList<String> linkerflags = args.getLinkerFlags();",
                "-",
                "-    boolean bytecodeOnly = args.getBytecodeOnly();",
                "-    boolean nativePlugin = !bytecodeOnly && args.getNativePlugin();",
                "-",
                "-    return OcamlRuleBuilder.createBuildRule(",
                "-        ocamlPlatform,",
                "-        buildTarget,",
                "-        context.getProjectFilesystem(),",
                "-        params,",
                "-        context.getBuildRuleResolver(),",
                "-        srcs,",
                "-        /*isLibrary*/ true,",
                "-        bytecodeOnly,",
                "-        flags.build(),",
                "-        linkerflags,",
                "-        args.getOcamldepFlags(),",
                "-        nativePlugin);",
                "+    ImmutableList<Arg> flags = flagsBuilder.build();",
                "+",
                "+    BuildTarget compileBuildTarget = OcamlRuleBuilder.createStaticLibraryBuildTarget(buildTarget);",
                "+",
                "+    if (OcamlRuleBuilder.shouldUseFineGrainedRules(context.getBuildRuleResolver(), srcs)) {",
                "+      OcamlGeneratedBuildRules result =",
                "+          OcamlRuleBuilder.createFineGrainedBuildRules(",
                "+              ocamlPlatform,",
                "+              compileBuildTarget,",
                "+              context.getProjectFilesystem(),",
                "+              params,",
                "+              context.getBuildRuleResolver(),",
                "+              srcs,",
                "+              /* isLibrary */ true,",
                "+              args.getBytecodeOnly(),",
                "+              flags,",
                "+              args.getOcamldepFlags(),",
                "+              !args.getBytecodeOnly() && args.getNativePlugin());",
                "+      return new OcamlStaticLibrary(",
                "+          buildTarget,",
                "+          compileBuildTarget,",
                "+          context.getProjectFilesystem(),",
                "+          params.withDeclaredDeps(",
                "+              Suppliers.ofInstance(",
                "+                  ImmutableSortedSet.<BuildRule>naturalOrder()",
                "+                      .addAll(params.getDeclaredDeps().get())",
                "+                      .addAll(result.getRules())",
                "+                      .build())),",
                "+          args.getLinkerFlags(),",
                "+          result.getObjectFiles(),",
                "+          result.getOcamlContext(),",
                "+          result.getRules().get(0),",
                "+          result.getNativeCompileDeps(),",
                "+          result.getBytecodeCompileDeps(),",
                "+          ImmutableSortedSet.<BuildRule>naturalOrder()",
                "+              .add(result.getBytecodeLink())",
                "+              .addAll(ruleFinder.filterBuildRuleInputs(result.getObjectFiles()))",
                "+              .build());",
                "+",
                "+    } else {",
                "+      OcamlBuild ocamlLibraryBuild =",
                "+          OcamlRuleBuilder.createBulkCompileRule(",
                "+              ocamlPlatform,",
                "+              compileBuildTarget,",
                "+              context.getProjectFilesystem(),",
                "+              params,",
                "+              context.getBuildRuleResolver(),",
                "+              srcs,",
                "+              /* isLibrary */ true,",
                "+              args.getBytecodeOnly(),",
                "+              flags,",
                "+              args.getOcamldepFlags());",
                "+      return new OcamlStaticLibrary(",
                "+          buildTarget,",
                "+          compileBuildTarget,",
                "+          context.getProjectFilesystem(),",
                "+          params.withDeclaredDeps(",
                "+              Suppliers.ofInstance(",
                "+                  ImmutableSortedSet.<BuildRule>naturalOrder()",
                "+                      .addAll(params.getDeclaredDeps().get())",
                "+                      .add(ocamlLibraryBuild)",
                "+                      .build())),",
                "+          args.getLinkerFlags(),",
                "+          srcs.stream()",
                "+              .map(OcamlSource::getSource)",
                "+              .map(pathResolver::getAbsolutePath)",
                "+              .filter(OcamlUtil.ext(OcamlCompilables.OCAML_C))",
                "+              .map(ocamlLibraryBuild.getOcamlContext()::getCOutput)",
                "+              .map(input -> ExplicitBuildTargetSourcePath.of(compileBuildTarget, input))",
                "+              .collect(ImmutableList.toImmutableList()),",
                "+          ocamlLibraryBuild.getOcamlContext(),",
                "+          ocamlLibraryBuild,",
                "+          ImmutableSortedSet.of(ocamlLibraryBuild),",
                "+          ImmutableSortedSet.of(ocamlLibraryBuild),",
                "+          ImmutableSortedSet.of(ocamlLibraryBuild));",
                "+    }",
                "   }",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "index 698289b5a2..18ffb427a1 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "@@ -37,3 +37,2 @@ import com.facebook.buck.rules.BuildableSupport;",
                " import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "-import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                " import com.facebook.buck.rules.SourcePath;",
                "@@ -50,3 +49,2 @@ import com.google.common.annotations.VisibleForTesting;",
                " import com.google.common.base.Joiner;",
                "-import com.google.common.base.Suppliers;",
                " import com.google.common.collect.FluentIterable;",
                "@@ -102,15 +100,4 @@ public class OcamlRuleBuilder {",
                "-  public static BuildRule createBuildRule(",
                "-      OcamlPlatform ocamlPlatform,",
                "-      BuildTarget buildTarget,",
                "-      ProjectFilesystem projectFilesystem,",
                "-      BuildRuleParams params,",
                "-      BuildRuleResolver resolver,",
                "-      ImmutableList<OcamlSource> srcs,",
                "-      boolean isLibrary,",
                "-      boolean bytecodeOnly,",
                "-      ImmutableList<Arg> argFlags,",
                "-      ImmutableList<String> linkerFlags,",
                "-      ImmutableList<String> ocamlDepFlags,",
                "-      boolean buildNativePlugin) {",
                "+  static boolean shouldUseFineGrainedRules(",
                "+      BuildRuleResolver resolver, ImmutableList<OcamlSource> srcs) {",
                "     SourcePathResolver pathResolver =",
                "@@ -128,30 +115,3 @@ public class OcamlRuleBuilder {",
                "             .isEmpty();",
                "-    if (noYaccOrLexSources && noGeneratedSources) {",
                "-      return createFineGrainedBuildRule(",
                "-          ocamlPlatform,",
                "-          buildTarget,",
                "-          projectFilesystem,",
                "-          params,",
                "-          resolver,",
                "-          srcs,",
                "-          isLibrary,",
                "-          bytecodeOnly,",
                "-          argFlags,",
                "-          linkerFlags,",
                "-          ocamlDepFlags,",
                "-          buildNativePlugin);",
                "-    } else {",
                "-      return createBulkBuildRule(",
                "-          ocamlPlatform,",
                "-          buildTarget,",
                "-          projectFilesystem,",
                "-          params,",
                "-          resolver,",
                "-          srcs,",
                "-          isLibrary,",
                "-          bytecodeOnly,",
                "-          argFlags,",
                "-          linkerFlags,",
                "-          ocamlDepFlags);",
                "-    }",
                "+    return noYaccOrLexSources && noGeneratedSources;",
                "   }",
                "@@ -198,5 +158,5 @@ public class OcamlRuleBuilder {",
                "-  public static BuildRule createBulkBuildRule(",
                "+  static OcamlBuild createBulkCompileRule(",
                "       OcamlPlatform ocamlPlatform,",
                "-      BuildTarget buildTarget,",
                "+      BuildTarget compileBuildTarget,",
                "       ProjectFilesystem projectFilesystem,",
                "@@ -208,3 +168,2 @@ public class OcamlRuleBuilder {",
                "       ImmutableList<Arg> argFlags,",
                "-      ImmutableList<String> linkerFlags,",
                "       ImmutableList<String> ocamlDepFlags) {",
                "@@ -268,7 +227,2 @@ public class OcamlRuleBuilder {",
                "-    BuildTarget compileBuildTarget =",
                "-        isLibrary",
                "-            ? createStaticLibraryBuildTarget(buildTarget)",
                "-            : createOcamlLinkTarget(buildTarget);",
                "-",
                "     ImmutableList.Builder<Arg> flagsBuilder = ImmutableList.builder();",
                "@@ -309,3 +263,3 @@ public class OcamlRuleBuilder {",
                "-    OcamlBuild ocamlLibraryBuild =",
                "+    return resolver.addToIndex(",
                "         new OcamlBuild(",
                "@@ -317,46 +271,8 @@ public class OcamlRuleBuilder {",
                "             ocamlPlatform.getCxxCompiler().resolve(resolver),",
                "-            bytecodeOnly);",
                "-    resolver.addToIndex(ocamlLibraryBuild);",
                "-",
                "-    if (isLibrary) {",
                "-      return new OcamlStaticLibrary(",
                "-          buildTarget,",
                "-          compileBuildTarget,",
                "-          projectFilesystem,",
                "-          params.withDeclaredDeps(",
                "-              Suppliers.ofInstance(",
                "-                  ImmutableSortedSet.<BuildRule>naturalOrder()",
                "-                      .addAll(params.getDeclaredDeps().get())",
                "-                      .add(ocamlLibraryBuild)",
                "-                      .build())),",
                "-          linkerFlags,",
                "-          srcs.stream()",
                "-              .map(OcamlSource::getSource)",
                "-              .map(pathResolver::getAbsolutePath)",
                "-              .filter(OcamlUtil.ext(OcamlCompilables.OCAML_C))",
                "-              .map(ocamlContext::getCOutput)",
                "-              .map(input -> ExplicitBuildTargetSourcePath.of(compileBuildTarget, input))",
                "-              .collect(ImmutableList.toImmutableList()),",
                "-          ocamlContext,",
                "-          ocamlLibraryBuild,",
                "-          ImmutableSortedSet.of(ocamlLibraryBuild),",
                "-          ImmutableSortedSet.of(ocamlLibraryBuild),",
                "-          ImmutableSortedSet.of(ocamlLibraryBuild));",
                "-    } else {",
                "-      return new OcamlBinary(",
                "-          buildTarget,",
                "-          projectFilesystem,",
                "-          params.withDeclaredDeps(",
                "-              Suppliers.ofInstance(",
                "-                  ImmutableSortedSet.<BuildRule>naturalOrder()",
                "-                      .addAll(params.getDeclaredDeps().get())",
                "-                      .add(ocamlLibraryBuild)",
                "-                      .build())),",
                "-          ocamlLibraryBuild);",
                "-    }",
                "+            bytecodeOnly));",
                "   }",
                "-  public static BuildRule createFineGrainedBuildRule(",
                "+  static OcamlGeneratedBuildRules createFineGrainedBuildRules(",
                "       OcamlPlatform ocamlPlatform,",
                "-      BuildTarget buildTarget,",
                "+      BuildTarget compileBuildTarget,",
                "       ProjectFilesystem projectFilesystem,",
                "@@ -368,3 +284,2 @@ public class OcamlRuleBuilder {",
                "       ImmutableList<Arg> argFlags,",
                "-      ImmutableList<String> linkerFlags,",
                "       ImmutableList<String> ocamlDepFlags,",
                "@@ -401,7 +316,2 @@ public class OcamlRuleBuilder {",
                "-    BuildTarget compileBuildTarget =",
                "-        isLibrary",
                "-            ? createStaticLibraryBuildTarget(buildTarget)",
                "-            : createOcamlLinkTarget(buildTarget);",
                "-",
                "     BuildRuleParams compileParams =",
                "@@ -490,37 +400,3 @@ public class OcamlRuleBuilder {",
                "-    OcamlGeneratedBuildRules result = generator.generate();",
                "-",
                "-    if (isLibrary) {",
                "-      return new OcamlStaticLibrary(",
                "-          buildTarget,",
                "-          compileBuildTarget,",
                "-          projectFilesystem,",
                "-          params.withDeclaredDeps(",
                "-              Suppliers.ofInstance(",
                "-                  ImmutableSortedSet.<BuildRule>naturalOrder()",
                "-                      .addAll(params.getDeclaredDeps().get())",
                "-                      .addAll(result.getRules())",
                "-                      .build())),",
                "-          linkerFlags,",
                "-          result.getObjectFiles(),",
                "-          ocamlContext,",
                "-          result.getRules().get(0),",
                "-          result.getNativeCompileDeps(),",
                "-          result.getBytecodeCompileDeps(),",
                "-          ImmutableSortedSet.<BuildRule>naturalOrder()",
                "-              .add(result.getBytecodeLink())",
                "-              .addAll(ruleFinder.filterBuildRuleInputs(result.getObjectFiles()))",
                "-              .build());",
                "-    } else {",
                "-      return new OcamlBinary(",
                "-          buildTarget,",
                "-          projectFilesystem,",
                "-          params.withDeclaredDeps(",
                "-              Suppliers.ofInstance(",
                "-                  ImmutableSortedSet.<BuildRule>naturalOrder()",
                "-                      .addAll(params.getDeclaredDeps().get())",
                "-                      .addAll(result.getRules())",
                "-                      .build())),",
                "-          result.getRules().get(0));",
                "-    }",
                "+    return generator.generate();",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/AbstractOcamlGeneratedBuildRules.java",
                "src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlBuild.java",
                "src/com/facebook/buck/ocaml/OcamlBuildRulesGenerator.java",
                "src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlRuleBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b7a21f89a28a53c13285314125f6c2755b7e68a7",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521851249,
            "hunks": 29,
            "message": "python: add parameter to exclude deps from omnibus Summary: Allows python rules to opt their deps out of omnibus linking.  For example, if a prebuilt python library contains native code which cannot be relinked. Reviewed By: ttsugriy fbshipit-source-id: 43f65ed",
            "diff": [
                "diff --git a/docs/__python_common.soy b/docs/__python_common.soy",
                "index 3a7191d544..9cb466e8c2 100644",
                "--- a/docs/__python_common.soy",
                "+++ b/docs/__python_common.soy",
                "@@ -113 +113,15 @@",
                " {/template}",
                "+",
                "+/***/",
                "+{template .exclude_deps_from_merged_linking_arg}",
                "+{call buck.arg}",
                "+  {param name : 'exclude_deps_from_merged_linking' /}",
                "+  {param default : 'False' /}",
                "+  {param desc}",
                "+  When linking the top-level binary with a <code>merged</code> <code>native_link_style</code>,",
                "+  do not merge or re-link any native transitive deps of this library.  This is useful if",
                "+  this library wraps prebuilt native extensions which cannot be re-linked as part of",
                "+  library merging.",
                "+  {/param}",
                "+{/call}",
                "+{/template}",
                "diff --git a/docs/rule/prebuilt_python_library.soy b/docs/rule/prebuilt_python_library.soy",
                "index f1b25b68cb..5b8d2e4ff1 100644",
                "--- a/docs/rule/prebuilt_python_library.soy",
                "+++ b/docs/rule/prebuilt_python_library.soy",
                "@@ -48,2 +48,4 @@ To create an egg for a package, run <code>python setup.py bdist_egg</code> in th",
                "+{call python_common.exclude_deps_from_merged_linking_arg /}",
                "+",
                " {/param} // close args",
                "diff --git a/docs/rule/python_library.soy b/docs/rule/python_library.soy",
                "index 3dbe635927..7ff259faaa 100644",
                "--- a/docs/rule/python_library.soy",
                "+++ b/docs/rule/python_library.soy",
                "@@ -49,2 +49,4 @@ and resources to be packaged into a top-level {call buck.python_binary /} rule.",
                "+{call python_common.exclude_deps_from_merged_linking_arg /}",
                "+",
                " {/param} // close args",
                "diff --git a/docs/rule/python_test.soy b/docs/rule/python_test.soy",
                "index 9451af4685..4c94bbae69 100644",
                "--- a/docs/rule/python_test.soy",
                "+++ b/docs/rule/python_test.soy",
                "@@ -40,2 +40,4 @@ files that contain tests to run via the <a href=\"https://docs.python.org/2/libra",
                "+{call python_common.exclude_deps_from_merged_linking_arg /}",
                "+",
                " {call buck.arg}",
                "diff --git a/src/com/facebook/buck/python/PrebuiltPythonLibrary.java b/src/com/facebook/buck/python/PrebuiltPythonLibrary.java",
                "index f45705b688..fa4948594d 100644",
                "--- a/src/com/facebook/buck/python/PrebuiltPythonLibrary.java",
                "+++ b/src/com/facebook/buck/python/PrebuiltPythonLibrary.java",
                "@@ -52,2 +52,3 @@ public class PrebuiltPythonLibrary extends AbstractBuildRuleWithDeclaredAndExtra",
                "   private final Path extractedOutput;",
                "+  private final boolean excludeDepsFromOmnibus;",
                "@@ -57,3 +58,4 @@ public class PrebuiltPythonLibrary extends AbstractBuildRuleWithDeclaredAndExtra",
                "       BuildRuleParams params,",
                "-      SourcePath binarySrc) {",
                "+      SourcePath binarySrc,",
                "+      boolean excludeDepsFromOmnibus) {",
                "     super(buildTarget, projectFilesystem, params);",
                "@@ -62,2 +64,3 @@ public class PrebuiltPythonLibrary extends AbstractBuildRuleWithDeclaredAndExtra",
                "         BuildTargets.getGenPath(projectFilesystem, buildTarget, \"__%s__extracted\");",
                "+    this.excludeDepsFromOmnibus = excludeDepsFromOmnibus;",
                "   }",
                "@@ -107,2 +110,7 @@ public class PrebuiltPythonLibrary extends AbstractBuildRuleWithDeclaredAndExtra",
                "   }",
                "+",
                "+  @Override",
                "+  public boolean doesPythonPackageDisallowOmnibus() {",
                "+    return excludeDepsFromOmnibus;",
                "+  }",
                " }",
                "diff --git a/src/com/facebook/buck/python/PrebuiltPythonLibraryDescription.java b/src/com/facebook/buck/python/PrebuiltPythonLibraryDescription.java",
                "index 2cad8acfbb..f004cd4512 100644",
                "--- a/src/com/facebook/buck/python/PrebuiltPythonLibraryDescription.java",
                "+++ b/src/com/facebook/buck/python/PrebuiltPythonLibraryDescription.java",
                "@@ -43,3 +43,7 @@ public class PrebuiltPythonLibraryDescription",
                "     return new PrebuiltPythonLibrary(",
                "-        buildTarget, context.getProjectFilesystem(), params, args.getBinarySrc());",
                "+        buildTarget,",
                "+        context.getProjectFilesystem(),",
                "+        params,",
                "+        args.getBinarySrc(),",
                "+        args.isExcludeDepsFromMergedLinking());",
                "   }",
                "@@ -51,2 +55,7 @@ public class PrebuiltPythonLibraryDescription",
                "     SourcePath getBinarySrc();",
                "+",
                "+    @Value.Default",
                "+    default boolean isExcludeDepsFromMergedLinking() {",
                "+      return false;",
                "+    }",
                "   }",
                "diff --git a/src/com/facebook/buck/python/PythonLibrary.java b/src/com/facebook/buck/python/PythonLibrary.java",
                "index aeb7bb445f..d7eee5f0f3 100644",
                "--- a/src/com/facebook/buck/python/PythonLibrary.java",
                "+++ b/src/com/facebook/buck/python/PythonLibrary.java",
                "@@ -34,5 +34,11 @@ public class PythonLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "+  private boolean excludeDepsFromOmnibus;",
                "+",
                "   PythonLibrary(",
                "-      BuildTarget buildTarget, ProjectFilesystem projectFilesystem, BuildRuleParams params) {",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams params,",
                "+      boolean excludeDepsFromOmnibus) {",
                "     super(buildTarget, projectFilesystem, params);",
                "+    this.excludeDepsFromOmnibus = excludeDepsFromOmnibus;",
                "   }",
                "@@ -72,2 +78,7 @@ public class PythonLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   }",
                "+",
                "+  @Override",
                "+  public boolean doesPythonPackageDisallowOmnibus() {",
                "+    return excludeDepsFromOmnibus;",
                "+  }",
                " }",
                "diff --git a/src/com/facebook/buck/python/PythonLibraryDescription.java b/src/com/facebook/buck/python/PythonLibraryDescription.java",
                "index 13c500bf7f..dd1cf028cf 100644",
                "--- a/src/com/facebook/buck/python/PythonLibraryDescription.java",
                "+++ b/src/com/facebook/buck/python/PythonLibraryDescription.java",
                "@@ -80,3 +80,4 @@ public class PythonLibraryDescription",
                "       PythonLibraryDescriptionArg args) {",
                "-    return new PythonLibrary(buildTarget, context.getProjectFilesystem(), params);",
                "+    return new PythonLibrary(",
                "+        buildTarget, context.getProjectFilesystem(), params, args.isExcludeDepsFromMergedLinking());",
                "   }",
                "@@ -233,2 +234,7 @@ public class PythonLibraryDescription",
                "     Optional<Boolean> getZipSafe();",
                "+",
                "+    @Value.Default",
                "+    default boolean isExcludeDepsFromMergedLinking() {",
                "+      return false;",
                "+    }",
                "   }",
                "diff --git a/src/com/facebook/buck/python/PythonPackagable.java b/src/com/facebook/buck/python/PythonPackagable.java",
                "index 40de149c26..5c1a796d15 100644",
                "--- a/src/com/facebook/buck/python/PythonPackagable.java",
                "+++ b/src/com/facebook/buck/python/PythonPackagable.java",
                "@@ -30,2 +30,10 @@ public interface PythonPackagable {",
                "       PythonPlatform pythonPlatform, CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver);",
                "+",
                "+  /**",
                "+   * @return whether this {@link PythonPackagable}'s transitive deps must be excluded from omnibus",
                "+   *     linking.",
                "+   */",
                "+  default boolean doesPythonPackageDisallowOmnibus() {",
                "+    return false;",
                "+  }",
                " }",
                "diff --git a/src/com/facebook/buck/python/PythonUtil.java b/src/com/facebook/buck/python/PythonUtil.java",
                "index 49dcd90b8a..16be0d5fe7 100644",
                "--- a/src/com/facebook/buck/python/PythonUtil.java",
                "+++ b/src/com/facebook/buck/python/PythonUtil.java",
                "@@ -228,3 +228,3 @@ public class PythonUtil {",
                "           allComponents.addComponent(comps, rule.getBuildTarget());",
                "-          if (comps.hasNativeCode(cxxPlatform)) {",
                "+          if (packagable.doesPythonPackageDisallowOmnibus() || comps.hasNativeCode(cxxPlatform)) {",
                "             for (BuildRule dep :",
                "diff --git a/test/com/facebook/buck/python/PrebuiltPythonLibraryBuilder.java b/test/com/facebook/buck/python/PrebuiltPythonLibraryBuilder.java",
                "new file mode 100644",
                "index 0000000000..dc901e59af",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/python/PrebuiltPythonLibraryBuilder.java",
                "@@ -0,0 +1,52 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.python;",
                "+",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.AbstractNodeBuilder;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+",
                "+public class PrebuiltPythonLibraryBuilder",
                "+    extends AbstractNodeBuilder<",
                "+        PrebuiltPythonLibraryDescriptionArg.Builder, PrebuiltPythonLibraryDescriptionArg,",
                "+        PrebuiltPythonLibraryDescription, PrebuiltPythonLibrary> {",
                "+",
                "+  PrebuiltPythonLibraryBuilder(BuildTarget target) {",
                "+    super(new PrebuiltPythonLibraryDescription(), target);",
                "+  }",
                "+",
                "+  public static PrebuiltPythonLibraryBuilder createBuilder(BuildTarget target) {",
                "+    return new PrebuiltPythonLibraryBuilder(target);",
                "+  }",
                "+",
                "+  public PrebuiltPythonLibraryBuilder setDeps(ImmutableSortedSet<BuildTarget> deps) {",
                "+    getArgForPopulating().setDeps(deps);",
                "+    return this;",
                "+  }",
                "+",
                "+  public PrebuiltPythonLibraryBuilder setBinarySrc(SourcePath binarySrc) {",
                "+    getArgForPopulating().setBinarySrc(binarySrc);",
                "+    return this;",
                "+  }",
                "+",
                "+  public PrebuiltPythonLibraryBuilder setExcludeDepsFromMergedLinking(",
                "+      boolean excludeDepsFromOmnibus) {",
                "+    getArgForPopulating().setExcludeDepsFromMergedLinking(excludeDepsFromOmnibus);",
                "+    return this;",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/python/PrebuiltPythonLibraryDescriptionTest.java b/test/com/facebook/buck/python/PrebuiltPythonLibraryDescriptionTest.java",
                "new file mode 100644",
                "index 0000000000..1d9c660df7",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/python/PrebuiltPythonLibraryDescriptionTest.java",
                "@@ -0,0 +1,80 @@",
                "+/*",
                "+ * Copyright 2014-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.python;",
                "+",
                "+import static org.junit.Assert.assertThat;",
                "+",
                "+import com.facebook.buck.config.FakeBuckConfig;",
                "+import com.facebook.buck.cxx.CxxLibraryBuilder;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkStrategy;",
                "+import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.FakeSourcePath;",
                "+import com.facebook.buck.rules.SourceWithFlags;",
                "+import com.facebook.buck.rules.TestBuildRuleResolver;",
                "+import com.facebook.buck.testutil.TargetGraphFactory;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import com.google.common.collect.Iterables;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Test;",
                "+",
                "+public class PrebuiltPythonLibraryDescriptionTest {",
                "+",
                "+  @Test",
                "+  public void excludingTransitiveNativeDepsUsingMergedNativeLinkStrategy() {",
                "+    CxxLibraryBuilder cxxDepBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:dep\"))",
                "+            .setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"dep.c\"))));",
                "+    CxxLibraryBuilder cxxBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:cxx\"))",
                "+            .setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"cxx.c\"))))",
                "+            .setDeps(ImmutableSortedSet.of(cxxDepBuilder.getTarget()));",
                "+    PrebuiltPythonLibraryBuilder libBuilder =",
                "+        new PrebuiltPythonLibraryBuilder(BuildTargetFactory.newInstance(\"//:lib\"))",
                "+            .setDeps(ImmutableSortedSet.of(cxxBuilder.getTarget()))",
                "+            .setBinarySrc(FakeSourcePath.of(\"test.whl\"))",
                "+            .setExcludeDepsFromMergedLinking(true);",
                "+",
                "+    PythonBuckConfig config =",
                "+        new PythonBuckConfig(FakeBuckConfig.builder().build()) {",
                "+          @Override",
                "+          public NativeLinkStrategy getNativeLinkStrategy() {",
                "+            return NativeLinkStrategy.MERGED;",
                "+          }",
                "+        };",
                "+    PythonBinaryBuilder binaryBuilder =",
                "+        PythonBinaryBuilder.create(",
                "+            BuildTargetFactory.newInstance(\"//:bin\"), config, PythonTestUtils.PYTHON_PLATFORMS);",
                "+    binaryBuilder.setMainModule(\"main\");",
                "+    binaryBuilder.setDeps(ImmutableSortedSet.of(libBuilder.getTarget()));",
                "+",
                "+    BuildRuleResolver resolver =",
                "+        new TestBuildRuleResolver(",
                "+            TargetGraphFactory.newInstance(",
                "+                cxxDepBuilder.build(),",
                "+                cxxBuilder.build(),",
                "+                libBuilder.build(),",
                "+                binaryBuilder.build()));",
                "+    cxxDepBuilder.build(resolver);",
                "+    cxxBuilder.build(resolver);",
                "+    libBuilder.build(resolver);",
                "+    PythonBinary binary = binaryBuilder.build(resolver);",
                "+    assertThat(",
                "+        Iterables.transform(binary.getComponents().getNativeLibraries().keySet(), Object::toString),",
                "+        Matchers.containsInAnyOrder(\"libdep.so\", \"libcxx.so\"));",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/python/PythonLibraryBuilder.java b/test/com/facebook/buck/python/PythonLibraryBuilder.java",
                "index 1c621f819a..03b66def8e 100644",
                "--- a/test/com/facebook/buck/python/PythonLibraryBuilder.java",
                "+++ b/test/com/facebook/buck/python/PythonLibraryBuilder.java",
                "@@ -105,2 +105,7 @@ public class PythonLibraryBuilder",
                "   }",
                "+",
                "+  public PythonLibraryBuilder setExcludeDepsFromMergedLinking(boolean excludeDepsFromOmnibus) {",
                "+    getArgForPopulating().setExcludeDepsFromMergedLinking(excludeDepsFromOmnibus);",
                "+    return this;",
                "+  }",
                " }",
                "diff --git a/test/com/facebook/buck/python/PythonLibraryDescriptionTest.java b/test/com/facebook/buck/python/PythonLibraryDescriptionTest.java",
                "index de2db91547..76452d9301 100644",
                "--- a/test/com/facebook/buck/python/PythonLibraryDescriptionTest.java",
                "+++ b/test/com/facebook/buck/python/PythonLibraryDescriptionTest.java",
                "@@ -21,5 +21,8 @@ import static org.junit.Assert.assertThat;",
                "+import com.facebook.buck.config.FakeBuckConfig;",
                " import com.facebook.buck.cxx.CxxGenrule;",
                " import com.facebook.buck.cxx.CxxGenruleBuilder;",
                "+import com.facebook.buck.cxx.CxxLibraryBuilder;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkStrategy;",
                " import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "@@ -32,2 +35,3 @@ import com.facebook.buck.rules.FakeSourcePath;",
                " import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourceWithFlags;",
                " import com.facebook.buck.rules.TargetGraph;",
                "@@ -50,2 +54,3 @@ import com.google.common.collect.ImmutableSet;",
                " import com.google.common.collect.ImmutableSortedSet;",
                "+import com.google.common.collect.Iterables;",
                " import java.nio.file.Paths;",
                "@@ -310,2 +315,45 @@ public class PythonLibraryDescriptionTest {",
                "   }",
                "+",
                "+  @Test",
                "+  public void excludingTransitiveNativeDepsUsingMergedNativeLinkStrategy() {",
                "+    CxxLibraryBuilder cxxDepBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:dep\"))",
                "+            .setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"dep.c\"))));",
                "+    CxxLibraryBuilder cxxBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:cxx\"))",
                "+            .setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"cxx.c\"))))",
                "+            .setDeps(ImmutableSortedSet.of(cxxDepBuilder.getTarget()));",
                "+    PythonLibraryBuilder libBuilder =",
                "+        new PythonLibraryBuilder(BuildTargetFactory.newInstance(\"//:lib\"))",
                "+            .setDeps(ImmutableSortedSet.of(cxxBuilder.getTarget()))",
                "+            .setExcludeDepsFromMergedLinking(true);",
                "+",
                "+    PythonBuckConfig config =",
                "+        new PythonBuckConfig(FakeBuckConfig.builder().build()) {",
                "+          @Override",
                "+          public NativeLinkStrategy getNativeLinkStrategy() {",
                "+            return NativeLinkStrategy.MERGED;",
                "+          }",
                "+        };",
                "+    PythonBinaryBuilder binaryBuilder =",
                "+        PythonBinaryBuilder.create(",
                "+            BuildTargetFactory.newInstance(\"//:bin\"), config, PythonTestUtils.PYTHON_PLATFORMS);",
                "+    binaryBuilder.setMainModule(\"main\");",
                "+    binaryBuilder.setDeps(ImmutableSortedSet.of(libBuilder.getTarget()));",
                "+",
                "+    BuildRuleResolver resolver =",
                "+        new TestBuildRuleResolver(",
                "+            TargetGraphFactory.newInstance(",
                "+                cxxDepBuilder.build(),",
                "+                cxxBuilder.build(),",
                "+                libBuilder.build(),",
                "+                binaryBuilder.build()));",
                "+    cxxDepBuilder.build(resolver);",
                "+    cxxBuilder.build(resolver);",
                "+    libBuilder.build(resolver);",
                "+    PythonBinary binary = binaryBuilder.build(resolver);",
                "+    assertThat(",
                "+        Iterables.transform(binary.getComponents().getNativeLibraries().keySet(), Object::toString),",
                "+        Matchers.containsInAnyOrder(\"libdep.so\", \"libcxx.so\"));",
                "+  }",
                " }",
                "diff --git a/test/com/facebook/buck/python/PythonLibraryIntegrationTest.java b/test/com/facebook/buck/python/PythonLibraryIntegrationTest.java",
                "new file mode 100644",
                "index 0000000000..5ff87f05bb",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/python/PythonLibraryIntegrationTest.java",
                "@@ -0,0 +1,46 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.python;",
                "+",
                "+import static org.junit.Assume.assumeThat;",
                "+",
                "+import com.facebook.buck.testutil.TemporaryPaths;",
                "+import com.facebook.buck.testutil.integration.ProjectWorkspace;",
                "+import com.facebook.buck.testutil.integration.TestDataHelper;",
                "+import com.facebook.buck.util.environment.Platform;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Rule;",
                "+import org.junit.Test;",
                "+",
                "+public class PythonLibraryIntegrationTest {",
                "+",
                "+  @Rule public TemporaryPaths tmp = new TemporaryPaths();",
                "+",
                "+  public ProjectWorkspace workspace;",
                "+",
                "+  @Test",
                "+  public void excludeDepsFromOmnibus() throws Exception {",
                "+    assumeThat(Platform.detect(), Matchers.not(Matchers.is(Platform.WINDOWS)));",
                "+",
                "+    workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(",
                "+            this, \"exclude_deps_from_merged_linking\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    workspace.runBuckBuild(\"-c\", \"python.native_link_strategy=merged\", \"//:bin\");",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/python/testdata/exclude_deps_from_merged_linking/BUCK.fixture b/test/com/facebook/buck/python/testdata/exclude_deps_from_merged_linking/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..800855e636",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/python/testdata/exclude_deps_from_merged_linking/BUCK.fixture",
                "@@ -0,0 +1,35 @@",
                "+python_binary(",
                "+    name = \"bin\",",
                "+    main_module = \"main\",",
                "+    deps = [",
                "+        \":lib\",",
                "+    ],",
                "+)",
                "+",
                "+python_library(",
                "+    name = \"lib\",",
                "+    srcs = [",
                "+        \"main.py\",",
                "+    ],",
                "+    exclude_deps_from_merged_linking = True,",
                "+    deps = [",
                "+        \":cxx\",",
                "+    ],",
                "+)",
                "+",
                "+cxx_library(",
                "+    name = \"cxx\",",
                "+    srcs = [",
                "+        \"cxx.c\",",
                "+    ],",
                "+    deps = [",
                "+        \":transitive-cxx\",",
                "+    ],",
                "+)",
                "+",
                "+cxx_library(",
                "+    name = \"transitive-cxx\",",
                "+    srcs = [",
                "+        \"transitive-cxx.c\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/python/testdata/exclude_deps_from_merged_linking/cxx.c b/test/com/facebook/buck/python/testdata/exclude_deps_from_merged_linking/cxx.c",
                "new file mode 100644",
                "index 0000000000..e69de29bb2",
                "diff --git a/test/com/facebook/buck/python/testdata/exclude_deps_from_merged_linking/main.py b/test/com/facebook/buck/python/testdata/exclude_deps_from_merged_linking/main.py",
                "new file mode 100644",
                "index 0000000000..e69de29bb2",
                "diff --git a/test/com/facebook/buck/python/testdata/exclude_deps_from_merged_linking/transitive-cxx.c b/test/com/facebook/buck/python/testdata/exclude_deps_from_merged_linking/transitive-cxx.c",
                "new file mode 100644",
                "index 0000000000..e69de29bb2"
            ],
            "changed_files": [
                "docs/__python_common.soy",
                "docs/rule/prebuilt_python_library.soy",
                "docs/rule/python_library.soy",
                "docs/rule/python_test.soy",
                "src/com/facebook/buck/python/PrebuiltPythonLibrary.java",
                "src/com/facebook/buck/python/PrebuiltPythonLibraryDescription.java",
                "src/com/facebook/buck/python/PythonLibrary.java",
                "src/com/facebook/buck/python/PythonLibraryDescription.java",
                "src/com/facebook/buck/python/PythonPackagable.java",
                "src/com/facebook/buck/python/PythonUtil.java",
                "test/com/facebook/buck/python/PrebuiltPythonLibraryBuilder.java",
                "test/com/facebook/buck/python/PrebuiltPythonLibraryDescriptionTest.java",
                "test/com/facebook/buck/python/PythonLibraryBuilder.java",
                "test/com/facebook/buck/python/PythonLibraryDescriptionTest.java",
                "test/com/facebook/buck/python/PythonLibraryIntegrationTest.java",
                "test/com/facebook/buck/python/testdata/exclude_deps_from_merged_linking/BUCK.fixture",
                "test/com/facebook/buck/python/testdata/exclude_deps_from_merged_linking/cxx.c",
                "test/com/facebook/buck/python/testdata/exclude_deps_from_merged_linking/main.py",
                "test/com/facebook/buck/python/testdata/exclude_deps_from_merged_linking/transitive-cxx.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "cf5eb1558c013b9dcf63cab8794220f525ac2c04",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522526897,
            "hunks": 2,
            "message": "Implement native.package_name() in Python DSL. Summary: The implementation is compatible with Bazel's https://docs.bazel.build/versions/master/skylark/lib/native.html#repository_name Reviewed By: styurin fbshipit-source-id: c532941",
            "diff": [
                "diff --git a/python-dsl/buck_parser/buck.py b/python-dsl/buck_parser/buck.py",
                "index ee40da28df..ac638c0178 100644",
                "--- a/python-dsl/buck_parser/buck.py",
                "+++ b/python-dsl/buck_parser/buck.py",
                "@@ -604,2 +604,23 @@ def get_cell_name(build_env=None):",
                "+@provide_as_native_rule",
                "+def repository_name(build_env=None):",
                "+    \"\"\"",
                "+    Get the repository (cell) name of the build file that was initially",
                "+    evaluated.",
                "+",
                "+    This function is intended to be used from within a build defs file that",
                "+    likely contains macros that could be called from any build file.",
                "+    Such macros may need to know the base path of the file in which they",
                "+    are defining new build rules.",
                "+",
                "+    :return: a string, such as \"@cell\". The return value will be \"@\" if",
                "+             the build file is in the main (standalone) repository.",
                "+             :rtype: str",
                "+",
                "+    \"\"\"",
                "+    assert isinstance(build_env, BuildFileContext), (",
                "+        \"Cannot use `repository_name()` at the top-level of an included file.\")",
                "+    return \"@\" + build_env.cell_name",
                "+",
                "+",
                " def flatten_list_of_dicts(list_of_dicts):",
                "diff --git a/python-dsl/buck_parser/processor_test.py b/python-dsl/buck_parser/processor_test.py",
                "index 097a4f77e4..1b76a331e7 100644",
                "--- a/python-dsl/buck_parser/processor_test.py",
                "+++ b/python-dsl/buck_parser/processor_test.py",
                "@@ -574,2 +574,31 @@ class BuckTest(unittest.TestCase):",
                "+    def test_can_read_main_repository_name(self):",
                "+        \"\"\"",
                "+        Verify that the builtin native `repository_name()` function works.",
                "+        \"\"\"",
                "+",
                "+        build_file = ProjectFile(",
                "+            self.project_root,",
                "+            path='BUCK',",
                "+            contents=(",
                "+                'assert native.repository_name() == \"@\"',",
                "+            ))",
                "+        self.write_file(build_file)",
                "+        build_file_processor = self.create_build_file_processor()",
                "+        build_file_processor.process(build_file.root, build_file.prefix, build_file.path,",
                "+                                     [])",
                "+",
                "+    def test_can_read_custom_repository_name(self):",
                "+        build_file = ProjectFile(",
                "+            self.project_root,",
                "+            path='BUCK',",
                "+            contents=(",
                "+                'assert native.repository_name() == \"@foo\"',",
                "+            ))",
                "+        self.write_file(build_file)",
                "+        self.cell_name = 'foo'",
                "+        build_file_processor = self.create_build_file_processor()",
                "+        build_file_processor.process(build_file.root, build_file.prefix, build_file.path,",
                "+                                     [])",
                "+",
                "     def test_struct_is_available(self):"
            ],
            "changed_files": [
                "python-dsl/buck_parser/buck.py",
                "python-dsl/buck_parser/processor_test.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: parser",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6b4ba5111379e5697d2ccef588db8e48df79b041",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522744774,
            "hunks": 16,
            "message": "Add state machine enum to the ThriftCoordinatorClient for improved debug msgs/errors. Summary: [stampede] Add state machine enum to the ThriftCoordinatorClient for improved debug msgs/errors. Reviewed By: shivanker fbshipit-source-id: 0086ba9",
            "diff": [
                "diff --git a/src/com/facebook/buck/distributed/build_slave/ThriftCoordinatorClient.java b/src/com/facebook/buck/distributed/build_slave/ThriftCoordinatorClient.java",
                "index bb0f33f8ea..7500fbd4e2 100644",
                "--- a/src/com/facebook/buck/distributed/build_slave/ThriftCoordinatorClient.java",
                "+++ b/src/com/facebook/buck/distributed/build_slave/ThriftCoordinatorClient.java",
                "@@ -44,2 +44,9 @@ public class ThriftCoordinatorClient implements Closeable {",
                "   private static final TimedLogger LOG = new TimedLogger(Logger.get(ThriftCoordinatorClient.class));",
                "+",
                "+  private enum State {",
                "+    NOT_STARTED,",
                "+    STARTED,",
                "+    STOPPED,",
                "+  }",
                "+",
                "   private final String remoteHost;",
                "@@ -47,2 +54,3 @@ public class ThriftCoordinatorClient implements Closeable {",
                "   private final int connectionTimeoutMillis;",
                "+  private State state;",
                "@@ -58,2 +66,3 @@ public class ThriftCoordinatorClient implements Closeable {",
                "     this.connectionTimeoutMillis = connectionTimeoutMillis;",
                "+    this.state = State.NOT_STARTED;",
                "   }",
                "@@ -63,2 +72,4 @@ public class ThriftCoordinatorClient implements Closeable {",
                "     LOG.info(\"Starting ThriftCoordinatorClient (for MinionModeRunner)...\");",
                "+    Preconditions.checkState(",
                "+        state == State.NOT_STARTED, \"Cannot start service while in state [%s].\", state);",
                "     transport = new TFramedTransport(new TSocket(remoteHost, remotePort, connectionTimeoutMillis));",
                "@@ -68,2 +79,3 @@ public class ThriftCoordinatorClient implements Closeable {",
                "     } catch (TTransportException e) {",
                "+      transport = null;",
                "       throw new ThriftException(e);",
                "@@ -73,2 +85,3 @@ public class ThriftCoordinatorClient implements Closeable {",
                "     client = new CoordinatorService.Client(protocol);",
                "+    this.state = State.STARTED;",
                "     LOG.info(\"Started ThriftCoordinatorClient.\");",
                "@@ -79,5 +92,6 @@ public class ThriftCoordinatorClient implements Closeable {",
                "   public synchronized ThriftCoordinatorClient stop() {",
                "-    Preconditions.checkNotNull(transport, \"The client has already been stopped.\");",
                "+    Preconditions.checkState(",
                "+        state == State.STARTED, \"The client is in state [%s] and cannot be stopped.\", state);",
                "     LOG.info(\"Stopping ThriftCoordinatorClient (for MinionModeRunner)...\");",
                "-    transport.close();",
                "+    Preconditions.checkNotNull(transport).close();",
                "     LOG.info(\"Stopped ThriftCoordinatorClient.\");",
                "@@ -85,2 +99,3 @@ public class ThriftCoordinatorClient implements Closeable {",
                "     client = null;",
                "+    state = State.STOPPED;",
                "     return this;",
                "@@ -96,3 +111,3 @@ public class ThriftCoordinatorClient implements Closeable {",
                "             minionId, finishedTargets.size(), maxWorkUnitsToFetch));",
                "-    Client checkedClient = checkThriftClientRunning();",
                "+    Client checkedClient = checkThriftClientRunningOrThrow();",
                "@@ -120,3 +135,3 @@ public class ThriftCoordinatorClient implements Closeable {",
                "     LOG.info(\"Sending ReportMinionAliveRequest.\");",
                "-    Client checkedClient = checkThriftClientRunning();",
                "+    Client checkedClient = checkThriftClientRunningOrThrow();",
                "@@ -136,3 +151,3 @@ public class ThriftCoordinatorClient implements Closeable {",
                "   public synchronized void close() {",
                "-    if (client != null) {",
                "+    if (state == State.STARTED) {",
                "       LOG.info(\"Closing ThriftCoordinatorClient.\");",
                "@@ -141,2 +156,4 @@ public class ThriftCoordinatorClient implements Closeable {",
                "     }",
                "+",
                "+    state = State.STOPPED;",
                "   }",
                "@@ -155,4 +172,4 @@ public class ThriftCoordinatorClient implements Closeable {",
                "-  private CoordinatorService.Client checkThriftClientRunning() {",
                "-    if (client == null) {",
                "+  private CoordinatorService.Client checkThriftClientRunningOrThrow() {",
                "+    if (state != State.STARTED) {",
                "       // Immediately log the error, with stack trace. Otherwise might not appear",
                "@@ -161,3 +178,3 @@ public class ThriftCoordinatorClient implements Closeable {",
                "           new RuntimeException(",
                "-              \"Request received, but client was not started, or has already stopped.\");",
                "+              String.format(\"Request received but client is in state [%s].\", state));",
                "       LOG.error(exception);",
                "@@ -166,3 +183,3 @@ public class ThriftCoordinatorClient implements Closeable {",
                "-    return client;",
                "+    return Preconditions.checkNotNull(client);",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/distributed/build_slave/ThriftCoordinatorClient.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: state",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "418486cd502eab858344541cb0e8f5d4ccd4f874",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522390234,
            "hunks": 20,
            "message": "Factor out RuleFunctionFactory. Summary: It's a significant part of the parser class, which it should not be. Reviewed By: styurin fbshipit-source-id: f14d2a3",
            "diff": [
                "diff --git a/src/com/facebook/buck/skylark/parser/ParseContext.java b/src/com/facebook/buck/skylark/parser/ParseContext.java",
                "index d20dc020b2..232f6aa1cf 100644",
                "--- a/src/com/facebook/buck/skylark/parser/ParseContext.java",
                "+++ b/src/com/facebook/buck/skylark/parser/ParseContext.java",
                "@@ -19,3 +19,7 @@ package com.facebook.buck.skylark.parser;",
                " import com.google.common.collect.ImmutableList;",
                "+import com.google.devtools.build.lib.syntax.Environment;",
                "+import com.google.devtools.build.lib.syntax.EvalException;",
                "+import com.google.devtools.build.lib.syntax.FuncallExpression;",
                " import java.util.Map;",
                "+import javax.annotation.Nullable;",
                "@@ -29,2 +33,5 @@ class ParseContext {",
                "   private final ImmutableList.Builder<Map<String, Object>> rawRuleBuilder;",
                "+  // internal variable exposed to rules that is used to track parse events. This allows us to",
                "+  // remove parse state from rules and as such makes rules reusable across parse invocations",
                "+  private static final String PARSE_CONTEXT = \"$parse_context\";",
                "@@ -46,2 +53,20 @@ class ParseContext {",
                "   }",
                "+",
                "+  /** Get the {@link ParseContext} by looking up in the environment. */",
                "+  static ParseContext getParseContext(Environment env, FuncallExpression ast) throws EvalException {",
                "+    @Nullable ParseContext value = (ParseContext) env.lookup(PARSE_CONTEXT);",
                "+    if (value == null) {",
                "+      // if PARSE_CONTEXT is missing, we're not called from a build file. This happens if someone",
                "+      // uses native.some_func() in the wrong place.",
                "+      throw new EvalException(",
                "+          ast.getLocation(),",
                "+          \"The native module cannot be accessed from here. \"",
                "+              + \"Wrap the function in a macro and call it from a BUCK file\");",
                "+    }",
                "+    return value;",
                "+  }",
                "+",
                "+  public void setup(Environment env) {",
                "+    env.setupDynamic(PARSE_CONTEXT, this);",
                "+  }",
                " }",
                "diff --git a/src/com/facebook/buck/skylark/parser/RuleFunctionFactory.java b/src/com/facebook/buck/skylark/parser/RuleFunctionFactory.java",
                "new file mode 100644",
                "index 0000000000..da689371ab",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/skylark/parser/RuleFunctionFactory.java",
                "@@ -0,0 +1,151 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.skylark.parser;",
                "+",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.coercer.CoercedTypeCache;",
                "+import com.facebook.buck.rules.coercer.ParamInfo;",
                "+import com.facebook.buck.rules.coercer.TypeCoercerFactory;",
                "+import com.google.common.base.CaseFormat;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.devtools.build.lib.syntax.BuiltinFunction;",
                "+import com.google.devtools.build.lib.syntax.Environment;",
                "+import com.google.devtools.build.lib.syntax.EvalException;",
                "+import com.google.devtools.build.lib.syntax.FuncallExpression;",
                "+import com.google.devtools.build.lib.syntax.FunctionSignature;",
                "+import com.google.devtools.build.lib.syntax.Runtime;",
                "+import java.util.Map;",
                "+import java.util.stream.Collectors;",
                "+",
                "+/**",
                "+ * Responsible for creating instances of Skylark functions based on Buck's {@link Description}s.",
                "+ *",
                "+ * <p>For example for a {@link com.facebook.buck.jvm.java.JavaLibraryDescription} instance, a",
                "+ * Skylark function using snake case of its name prefix will be created - {@code java_library}.",
                "+ *",
                "+ * <p>Callers can setup created functions in the {@link Environment}.",
                "+ */",
                "+class RuleFunctionFactory {",
                "+",
                "+  private static final ImmutableSet<String> IMPLICIT_ATTRIBUTES =",
                "+      ImmutableSet.of(\"visibility\", \"within_view\");",
                "+  // URL prefix for all build rule documentation pages",
                "+  private static final String BUCK_RULE_DOC_URL_PREFIX = \"https://buckbuild.com/rule/\";",
                "+",
                "+  private final TypeCoercerFactory typeCoercerFactory;",
                "+",
                "+  RuleFunctionFactory(TypeCoercerFactory typeCoercerFactory) {",
                "+    this.typeCoercerFactory = typeCoercerFactory;",
                "+  }",
                "+",
                "+  /**",
                "+   * Create a Skylark function definition for the {@code ruleClass} rule.",
                "+   *",
                "+   * <p>This creates functions like @{code java_library}. All they do is capture passed attribute",
                "+   * values in a map and records them in a {@link ParseContext}. They can be queried using {@link",
                "+   * ParseContext#getRecordedRules()}.",
                "+   *",
                "+   * @param ruleClass The name of the rule to to define.",
                "+   * @return Skylark function to handle the Buck rule.",
                "+   */",
                "+  BuiltinFunction create(Description<?> ruleClass) {",
                "+    String name = Description.getBuildRuleType(ruleClass).getName();",
                "+    return new BuiltinFunction(",
                "+        name, FunctionSignature.KWARGS, BuiltinFunction.USE_AST_ENV, /*isRule=*/ true) {",
                "+",
                "+      @SuppressWarnings({\"unused\"})",
                "+      public Runtime.NoneType invoke(",
                "+          Map<String, Object> kwargs, FuncallExpression ast, Environment env) throws EvalException {",
                "+        ImmutableMap.Builder<String, Object> builder =",
                "+            ImmutableMap.<String, Object>builder()",
                "+                .put(\"buck.base_path\", env.lookup(Runtime.PKG_NAME))",
                "+                .put(\"buck.type\", name);",
                "+        ImmutableMap<String, ParamInfo> allParamInfo =",
                "+            CoercedTypeCache.INSTANCE.getAllParamInfo(",
                "+                typeCoercerFactory, ruleClass.getConstructorArgType());",
                "+        populateAttributes(kwargs, builder, allParamInfo);",
                "+        throwOnMissingRequiredAttribute(kwargs, allParamInfo, getName(), ast);",
                "+        ParseContext parseContext = ParseContext.getParseContext(env, ast);",
                "+        parseContext.recordRule(builder.build());",
                "+        return Runtime.NONE;",
                "+      }",
                "+    };",
                "+  }",
                "+",
                "+  /**",
                "+   * Validates attributes passed to the rule and in case any required attribute is not provided,",
                "+   * throws an {@link IllegalArgumentException}.",
                "+   *",
                "+   * @param kwargs The keyword arguments passed to the rule.",
                "+   * @param allParamInfo The mapping from build rule attributes to their information.",
                "+   * @param name The build rule name. (e.g. {@code java_library}).",
                "+   * @param ast The abstract syntax tree of the build rule function invocation.",
                "+   */",
                "+  private void throwOnMissingRequiredAttribute(",
                "+      Map<String, Object> kwargs,",
                "+      ImmutableMap<String, ParamInfo> allParamInfo,",
                "+      String name,",
                "+      FuncallExpression ast)",
                "+      throws EvalException {",
                "+    ImmutableList<ParamInfo> missingAttributes =",
                "+        allParamInfo",
                "+            .values()",
                "+            .stream()",
                "+            .filter(param -> !param.isOptional() && !kwargs.containsKey(param.getPythonName()))",
                "+            .collect(ImmutableList.toImmutableList());",
                "+    if (!missingAttributes.isEmpty()) {",
                "+      throw new EvalException(",
                "+          ast.getLocation(),",
                "+          name",
                "+              + \" requires \"",
                "+              + missingAttributes",
                "+                  .stream()",
                "+                  .map(ParamInfo::getPythonName)",
                "+                  .collect(Collectors.joining(\" and \"))",
                "+              + \" but they are not provided.\",",
                "+          BUCK_RULE_DOC_URL_PREFIX + name);",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Populates provided {@code builder} with values from {@code kwargs} assuming {@code ruleClass}",
                "+   * as the target {@link Description} class.",
                "+   *",
                "+   * @param kwargs The keyword arguments and their values passed to rule function in build file.",
                "+   * @param builder The map builder used for storing extracted attributes and their values.",
                "+   * @param allParamInfo The parameter information for every build rule attribute.",
                "+   */",
                "+  private void populateAttributes(",
                "+      Map<String, Object> kwargs,",
                "+      ImmutableMap.Builder<String, Object> builder,",
                "+      ImmutableMap<String, ParamInfo> allParamInfo) {",
                "+    for (Map.Entry<String, Object> kwargEntry : kwargs.entrySet()) {",
                "+      String paramName =",
                "+          CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, kwargEntry.getKey());",
                "+      if (!allParamInfo.containsKey(paramName)",
                "+          && !(IMPLICIT_ATTRIBUTES.contains(kwargEntry.getKey()))) {",
                "+        throw new IllegalArgumentException(kwargEntry.getKey() + \" is not a recognized attribute\");",
                "+      }",
                "+      if (Runtime.NONE.equals(kwargEntry.getValue())) {",
                "+        continue;",
                "+      }",
                "+      builder.put(paramName, kwargEntry.getValue());",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "index 4bb2ed92e1..da785c63e5 100644",
                "--- a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "+++ b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "@@ -25,5 +25,2 @@ import com.facebook.buck.parser.exceptions.BuildFileParseException;",
                " import com.facebook.buck.parser.options.ProjectBuildFileParserOptions;",
                "-import com.facebook.buck.rules.Description;",
                "-import com.facebook.buck.rules.coercer.CoercedTypeCache;",
                "-import com.facebook.buck.rules.coercer.ParamInfo;",
                " import com.facebook.buck.rules.coercer.TypeCoercerFactory;",
                "@@ -35,3 +32,2 @@ import com.facebook.buck.skylark.packages.PackageFactory;",
                " import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "-import com.google.common.base.CaseFormat;",
                " import com.google.common.base.Throwables;",
                "@@ -42,3 +38,2 @@ import com.google.common.collect.ImmutableList;",
                " import com.google.common.collect.ImmutableMap;",
                "-import com.google.common.collect.ImmutableSet;",
                " import com.google.common.collect.ImmutableSortedSet;",
                "@@ -51,8 +46,4 @@ import com.google.devtools.build.lib.events.EventHandler;",
                " import com.google.devtools.build.lib.syntax.BuildFileAST;",
                "-import com.google.devtools.build.lib.syntax.BuiltinFunction;",
                " import com.google.devtools.build.lib.syntax.Environment;",
                " import com.google.devtools.build.lib.syntax.Environment.Extension;",
                "-import com.google.devtools.build.lib.syntax.EvalException;",
                "-import com.google.devtools.build.lib.syntax.FuncallExpression;",
                "-import com.google.devtools.build.lib.syntax.FunctionSignature;",
                " import com.google.devtools.build.lib.syntax.Mutability;",
                "@@ -69,3 +60,2 @@ import java.util.Optional;",
                " import java.util.concurrent.atomic.AtomicLong;",
                "-import java.util.stream.Collectors;",
                " import javax.annotation.Nonnull;",
                "@@ -84,7 +74,2 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "-  // internal variable exposed to rules that is used to track parse events. This allows us to",
                "-  // remove parse state from rules and as such makes rules reusable across parse invocations",
                "-  private static final String PARSE_CONTEXT = \"$parse_context\";",
                "-  private static final ImmutableSet<String> IMPLICIT_ATTRIBUTES =",
                "-      ImmutableSet.of(\"visibility\", \"within_view\");",
                "   // Dummy label used for resolving paths for other labels.",
                "@@ -92,7 +77,5 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "       Label.createUnvalidated(PackageIdentifier.EMPTY_PACKAGE_ID, \"\");",
                "-  // URL prefix for all build rule documentation pages",
                "-  private static final String BUCK_RULE_DOC_URL_PREFIX = \"https://buckbuild.com/rule/\";",
                "   private final FileSystem fileSystem;",
                "-  private final TypeCoercerFactory typeCoercerFactory;",
                "+",
                "   private final ProjectBuildFileParserOptions options;",
                "@@ -112,4 +95,6 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "     this.fileSystem = fileSystem;",
                "-    this.typeCoercerFactory = typeCoercerFactory;",
                "     this.eventHandler = eventHandler;",
                "+    // TODO(ttsugrii): request factory and globals through a constructor instead of creating them",
                "+    // here",
                "+    RuleFunctionFactory ruleFunctionFactory = new RuleFunctionFactory(typeCoercerFactory);",
                "     this.buckGlobals =",
                "@@ -118,3 +103,3 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "             .setDisableImplicitNativeRules(options.getDisableImplicitNativeRules())",
                "-            .setRuleFunctionFactory(this::newRuleDefinition)",
                "+            .setRuleFunctionFactory(ruleFunctionFactory::create)",
                "             .build();",
                "@@ -259,3 +244,3 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "     env.setupDynamic(Runtime.PKG_NAME, basePath);",
                "-    env.setupDynamic(PARSE_CONTEXT, parseContext);",
                "+    parseContext.setup(env);",
                "     env.setup(\"glob\", Glob.create());",
                "@@ -422,96 +407,2 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "-  /**",
                "-   * Create a Skylark definition for the {@code ruleClass} rule.",
                "-   *",
                "-   * <p>This makes functions like @{code java_library} available in build files. All they do is",
                "-   * capture passed attribute values in a map and adds them to the {@code ruleRegistry}.",
                "-   *",
                "-   * @param ruleClass The name of the rule to to define.",
                "-   * @return Skylark function to handle the Buck rule.",
                "-   */",
                "-  private BuiltinFunction newRuleDefinition(Description<?> ruleClass) {",
                "-    String name = Description.getBuildRuleType(ruleClass).getName();",
                "-    return new BuiltinFunction(",
                "-        name, FunctionSignature.KWARGS, BuiltinFunction.USE_AST_ENV, /*isRule=*/ true) {",
                "-",
                "-      @SuppressWarnings({\"unused\"})",
                "-      public Runtime.NoneType invoke(",
                "-          Map<String, Object> kwargs, FuncallExpression ast, Environment env) throws EvalException {",
                "-        ImmutableMap.Builder<String, Object> builder =",
                "-            ImmutableMap.<String, Object>builder()",
                "-                .put(\"buck.base_path\", env.lookup(Runtime.PKG_NAME))",
                "-                .put(\"buck.type\", name);",
                "-        ImmutableMap<String, ParamInfo> allParamInfo =",
                "-            CoercedTypeCache.INSTANCE.getAllParamInfo(",
                "-                typeCoercerFactory, ruleClass.getConstructorArgType());",
                "-        populateAttributes(kwargs, builder, allParamInfo);",
                "-        throwOnMissingRequiredAttribute(kwargs, allParamInfo, getName(), ast);",
                "-        ParseContext parseContext = getParseContext(env, ast);",
                "-        parseContext.recordRule(builder.build());",
                "-        return Runtime.NONE;",
                "-      }",
                "-    };",
                "-  }",
                "-",
                "-  /**",
                "-   * Validates attributes passed to the rule and in case any required attribute is not provided,",
                "-   * throws an {@link IllegalArgumentException}.",
                "-   *",
                "-   * @param kwargs The keyword arguments passed to the rule.",
                "-   * @param allParamInfo The mapping from build rule attributes to their information.",
                "-   * @param name The build rule name. (e.g. {@code java_library}).",
                "-   * @param ast The abstract syntax tree of the build rule function invocation.",
                "-   */",
                "-  private void throwOnMissingRequiredAttribute(",
                "-      Map<String, Object> kwargs,",
                "-      ImmutableMap<String, ParamInfo> allParamInfo,",
                "-      String name,",
                "-      FuncallExpression ast)",
                "-      throws EvalException {",
                "-    ImmutableList<ParamInfo> missingAttributes =",
                "-        allParamInfo",
                "-            .values()",
                "-            .stream()",
                "-            .filter(param -> !param.isOptional() && !kwargs.containsKey(param.getPythonName()))",
                "-            .collect(ImmutableList.toImmutableList());",
                "-    if (!missingAttributes.isEmpty()) {",
                "-      throw new EvalException(",
                "-          ast.getLocation(),",
                "-          name",
                "-              + \" requires \"",
                "-              + missingAttributes",
                "-                  .stream()",
                "-                  .map(ParamInfo::getPythonName)",
                "-                  .collect(Collectors.joining(\" and \"))",
                "-              + \" but they are not provided.\",",
                "-          BUCK_RULE_DOC_URL_PREFIX + name);",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Populates provided {@code builder} with values from {@code kwargs} assuming {@code ruleClass}",
                "-   * as the target {@link Description} class.",
                "-   *",
                "-   * @param kwargs The keyword arguments and their values passed to rule function in build file.",
                "-   * @param builder The map builder used for storing extracted attributes and their values.",
                "-   * @param allParamInfo The parameter information for every build rule attribute.",
                "-   */",
                "-  private void populateAttributes(",
                "-      Map<String, Object> kwargs,",
                "-      ImmutableMap.Builder<String, Object> builder,",
                "-      ImmutableMap<String, ParamInfo> allParamInfo) {",
                "-    for (Map.Entry<String, Object> kwargEntry : kwargs.entrySet()) {",
                "-      String paramName =",
                "-          CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, kwargEntry.getKey());",
                "-      if (!allParamInfo.containsKey(paramName)",
                "-          && !(IMPLICIT_ATTRIBUTES.contains(kwargEntry.getKey()))) {",
                "-        throw new IllegalArgumentException(kwargEntry.getKey() + \" is not a recognized attribute\");",
                "-      }",
                "-      if (Runtime.NONE.equals(kwargEntry.getValue())) {",
                "-        continue;",
                "-      }",
                "-      builder.put(paramName, kwargEntry.getValue());",
                "-    }",
                "-  }",
                "-",
                "   @Override",
                "@@ -526,17 +417,2 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "-  /** Get the {@link ParseContext} by looking up in the environment. */",
                "-  private static ParseContext getParseContext(Environment env, FuncallExpression ast)",
                "-      throws EvalException {",
                "-    @Nullable ParseContext value = (ParseContext) env.lookup(PARSE_CONTEXT);",
                "-    if (value == null) {",
                "-      // if PARSE_CONTEXT is missing, we're not called from a build file. This happens if someone",
                "-      // uses native.some_func() in the wrong place.",
                "-      throw new EvalException(",
                "-          ast.getLocation(),",
                "-          \"The native module cannot be accessed from here. \"",
                "-              + \"Wrap the function in a macro and call it from a BUCK file\");",
                "-    }",
                "-    return value;",
                "-  }",
                "-",
                "   /**"
            ],
            "changed_files": [
                "src/com/facebook/buck/skylark/parser/ParseContext.java",
                "src/com/facebook/buck/skylark/parser/RuleFunctionFactory.java",
                "src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: parser",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, parser",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "324a7d932930ac652dbaf2c0cae5d5bea46c91b6",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522387452,
            "hunks": 2,
            "message": "Cache Skylark globals. Summary: Previously all Skylark extension globals would be repeatedly setup for each individual extension file, which is wasteful, especially since some of that work is using reflection under the hood. Reviewed By: styurin fbshipit-source-id: 1d85b96",
            "diff": [
                "diff --git a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "index 3d07ff9873..46251da157 100644",
                "--- a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "+++ b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "@@ -146,3 +146,12 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "   private Environment.GlobalFrame getBuckLoadContextGlobals() {",
                "-    return getBuckGlobals(true);",
                "+    try (Mutability mutability = Mutability.create(\"global_load_ctx\")) {",
                "+      Environment extensionEnv =",
                "+          Environment.builder(mutability)",
                "+              .useDefaultSemantics()",
                "+              .setGlobals(getBuckGlobals(true))",
                "+              .build();",
                "+      extensionEnv.setup(\"native\", nativeModuleSupplier.get());",
                "+      Runtime.setupModuleGlobals(extensionEnv, SkylarkExtensionFunctions.class);",
                "+      return extensionEnv.getGlobals();",
                "+    }",
                "   }",
                "@@ -394,4 +403,2 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "       Environment extensionEnv = envBuilder.useDefaultSemantics().build();",
                "-      extensionEnv.setup(\"native\", nativeModuleSupplier.get());",
                "-      Runtime.setupModuleGlobals(extensionEnv, SkylarkExtensionFunctions.class);",
                "       boolean success = extensionAst.exec(extensionEnv, eventHandler);"
            ],
            "changed_files": [
                "src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: cache",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, parser",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "cea128d5310206095e46eafc25b467322a9461bf",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522205447,
            "hunks": 3,
            "message": "Do not crash when same extension file is loaded multiple times. Summary: Tools like buildozer can be used to merge loads into a single one and remove duplicates, but parser should not crash in any case :) Reviewed By: jtorkkola fbshipit-source-id: 0df0eb6",
            "diff": [
                "diff --git a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "index 1965cd7d51..cd73cd147a 100644",
                "--- a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "+++ b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "@@ -360,2 +360,3 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "         .stream()",
                "+        .distinct() // it's possible to have multiple loads from the same extension file",
                "         .collect(",
                "diff --git a/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java b/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java",
                "index ceffb8e720..16182de0f6 100644",
                "--- a/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java",
                "+++ b/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java",
                "@@ -25,2 +25,3 @@ import static org.junit.Assert.assertEquals;",
                " import static org.junit.Assert.assertThat;",
                "+import static org.junit.Assert.assertTrue;",
                " import static org.junit.Assert.fail;",
                "@@ -274,2 +275,11 @@ public class SkylarkProjectBuildFileParserTest {",
                "+  @Test",
                "+  public void canLoadSameExtensionMultipleTimes() throws Exception {",
                "+    Path buildFile = projectFilesystem.resolve(\"BUCK\");",
                "+    Files.write(buildFile, Arrays.asList(\"load('//:ext.bzl', 'ext')\", \"load('//:ext.bzl', 'ext')\"));",
                "+    Path extensionFile = projectFilesystem.resolve(\"ext.bzl\");",
                "+    Files.write(extensionFile, Arrays.asList(\"ext = 'hello'\", \"print('hello world')\"));",
                "+    assertTrue(parser.getAll(buildFile, new AtomicLong()).isEmpty());",
                "+  }",
                "+",
                "   @Test"
            ],
            "changed_files": [
                "src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: load, parser",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, parser",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "cc8b7ee0ef2d72f6a2b1ac3a1e556480c1e5ebef",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521506987,
            "hunks": 57,
            "message": "Make TransitiveCxxPreprocessorInputCache not hold onto BuildResolver Summary: A step toward not holding `BuildRuleResolver` references in `BuildRule`s and related objects. Extracts a `TransitiveCxxPreprocessorInputCache` class which encapsulate the underlying cache object, so that we can pass in the value loader function during `get`. Previously this used a `LoadingCache`, which took the value loader (which has a `BuildRuleResolver` dependency) in during construction. Test Plan: CI Reviewed By: ttsugriy fbshipit-source-id: c85c4a8",
            "diff": [
                "diff --git a/src/com/facebook/buck/apple/AppleLibraryDescriptionSwiftEnhancer.java b/src/com/facebook/buck/apple/AppleLibraryDescriptionSwiftEnhancer.java",
                "index ca7b0d2794..1603034f07 100644",
                "--- a/src/com/facebook/buck/apple/AppleLibraryDescriptionSwiftEnhancer.java",
                "+++ b/src/com/facebook/buck/apple/AppleLibraryDescriptionSwiftEnhancer.java",
                "@@ -21,3 +21,2 @@ import com.facebook.buck.cxx.CxxLibrary;",
                " import com.facebook.buck.cxx.CxxLibraryDescription;",
                "-import com.facebook.buck.cxx.CxxPreprocessables;",
                " import com.facebook.buck.cxx.CxxPreprocessorInput;",
                "@@ -25,2 +24,3 @@ import com.facebook.buck.cxx.HeaderSymlinkTreeWithHeaderMap;",
                " import com.facebook.buck.cxx.PreprocessorFlags;",
                "+import com.facebook.buck.cxx.TransitiveCxxPreprocessorInputCache;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "@@ -111,3 +111,3 @@ public class AppleLibraryDescriptionSwiftEnhancer {",
                "     ImmutableMap<BuildTarget, CxxPreprocessorInput> transitiveMap =",
                "-        CxxPreprocessables.computeTransitiveCxxToPreprocessorInputMap(",
                "+        TransitiveCxxPreprocessorInputCache.computeTransitiveCxxToPreprocessorInputMap(",
                "             platform, lib, false, resolver);",
                "diff --git a/src/com/facebook/buck/apple/PrebuiltAppleFramework.java b/src/com/facebook/buck/apple/PrebuiltAppleFramework.java",
                "index 7c4b69d07e..b78da96d05 100644",
                "--- a/src/com/facebook/buck/apple/PrebuiltAppleFramework.java",
                "+++ b/src/com/facebook/buck/apple/PrebuiltAppleFramework.java",
                "@@ -20,5 +20,5 @@ import com.facebook.buck.apple.platform_type.ApplePlatformType;",
                " import com.facebook.buck.apple.toolchain.AppleCxxPlatform;",
                "-import com.facebook.buck.cxx.CxxPreprocessables;",
                " import com.facebook.buck.cxx.CxxPreprocessorDep;",
                " import com.facebook.buck.cxx.CxxPreprocessorInput;",
                "+import com.facebook.buck.cxx.TransitiveCxxPreprocessorInputCache;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "@@ -80,4 +80,4 @@ public class PrebuiltAppleFramework extends AbstractBuildRuleWithDeclaredAndExtr",
                "-  private final LoadingCache<CxxPlatform, ImmutableMap<BuildTarget, CxxPreprocessorInput>>",
                "-      transitiveCxxPreprocessorInputCache;",
                "+  private final TransitiveCxxPreprocessorInputCache transitiveCxxPreprocessorInputCache =",
                "+      new TransitiveCxxPreprocessorInputCache(this);",
                "@@ -87,3 +87,2 @@ public class PrebuiltAppleFramework extends AbstractBuildRuleWithDeclaredAndExtr",
                "       BuildRuleParams params,",
                "-      BuildRuleResolver ruleResolver,",
                "       SourcePathResolver pathResolver,",
                "@@ -106,4 +105,2 @@ public class PrebuiltAppleFramework extends AbstractBuildRuleWithDeclaredAndExtr",
                "     this.applePlatformFlavorDomain = applePlatformFlavorDomain;",
                "-    this.transitiveCxxPreprocessorInputCache =",
                "-        CxxPreprocessables.getTransitiveCxxPreprocessorInputCache(this, ruleResolver);",
                "   }",
                "@@ -185,3 +182,3 @@ public class PrebuiltAppleFramework extends AbstractBuildRuleWithDeclaredAndExtr",
                "       CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "-    return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform);",
                "+    return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform, ruleResolver);",
                "   }",
                "diff --git a/src/com/facebook/buck/apple/PrebuiltAppleFrameworkDescription.java b/src/com/facebook/buck/apple/PrebuiltAppleFrameworkDescription.java",
                "index dff001c9a9..b9049ca574 100644",
                "--- a/src/com/facebook/buck/apple/PrebuiltAppleFrameworkDescription.java",
                "+++ b/src/com/facebook/buck/apple/PrebuiltAppleFrameworkDescription.java",
                "@@ -117,3 +117,2 @@ public class PrebuiltAppleFrameworkDescription",
                "         params,",
                "-        context.getBuildRuleResolver(),",
                "         DefaultSourcePathResolver.from(new SourcePathRuleFinder(context.getBuildRuleResolver())),",
                "diff --git a/src/com/facebook/buck/cxx/AbstractPrebuiltCxxLibraryGroupDescription.java b/src/com/facebook/buck/cxx/AbstractPrebuiltCxxLibraryGroupDescription.java",
                "index 6a936fafd7..6ceeecc7bc 100644",
                "--- a/src/com/facebook/buck/cxx/AbstractPrebuiltCxxLibraryGroupDescription.java",
                "+++ b/src/com/facebook/buck/cxx/AbstractPrebuiltCxxLibraryGroupDescription.java",
                "@@ -51,3 +51,2 @@ import com.facebook.buck.util.types.Pair;",
                " import com.facebook.buck.versions.VersionPropagator;",
                "-import com.google.common.cache.LoadingCache;",
                " import com.google.common.collect.FluentIterable;",
                "@@ -173,5 +172,4 @@ abstract class AbstractPrebuiltCxxLibraryGroupDescription",
                "-      private final LoadingCache<CxxPlatform, ImmutableMap<BuildTarget, CxxPreprocessorInput>>",
                "-          transitiveCxxPreprocessorInputCache =",
                "-              CxxPreprocessables.getTransitiveCxxPreprocessorInputCache(this, ruleResolver);",
                "+      private final TransitiveCxxPreprocessorInputCache transitiveCxxPreprocessorInputCache =",
                "+          new TransitiveCxxPreprocessorInputCache(this);",
                "@@ -218,3 +216,3 @@ abstract class AbstractPrebuiltCxxLibraryGroupDescription",
                "           CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "-        return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform);",
                "+        return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform, ruleResolver);",
                "       }",
                "diff --git a/src/com/facebook/buck/cxx/CxxLibrary.java b/src/com/facebook/buck/cxx/CxxLibrary.java",
                "index b1272a3919..008b638a8f 100644",
                "--- a/src/com/facebook/buck/cxx/CxxLibrary.java",
                "+++ b/src/com/facebook/buck/cxx/CxxLibrary.java",
                "@@ -107,4 +107,3 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  private final LoadingCache<CxxPlatform, ImmutableMap<BuildTarget, CxxPreprocessorInput>>",
                "-      transitiveCxxPreprocessorInputCache;",
                "+  private final TransitiveCxxPreprocessorInputCache transitiveCxxPreprocessorInputCache;",
                "@@ -155,4 +154,3 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "     this.transitiveCxxPreprocessorInputCache =",
                "-        CxxPreprocessables.getTransitiveCxxPreprocessorInputCache(",
                "-            this, ruleResolver, ruleResolver.getParallelizer());",
                "+        new TransitiveCxxPreprocessorInputCache(this, ruleResolver.getParallelizer());",
                "   }",
                "@@ -238,3 +236,3 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "-    return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform);",
                "+    return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform, ruleResolver);",
                "   }",
                "diff --git a/src/com/facebook/buck/cxx/CxxPreprocessables.java b/src/com/facebook/buck/cxx/CxxPreprocessables.java",
                "index 465d29ba5b..4a11c818a2 100644",
                "--- a/src/com/facebook/buck/cxx/CxxPreprocessables.java",
                "+++ b/src/com/facebook/buck/cxx/CxxPreprocessables.java",
                "@@ -32,8 +32,3 @@ import com.facebook.buck.rules.args.StringArg;",
                " import com.facebook.buck.rules.coercer.FrameworkPath;",
                "-import com.facebook.buck.util.RichStream;",
                "-import com.facebook.buck.util.concurrent.Parallelizer;",
                " import com.google.common.base.Preconditions;",
                "-import com.google.common.cache.CacheBuilder;",
                "-import com.google.common.cache.CacheLoader;",
                "-import com.google.common.cache.LoadingCache;",
                " import com.google.common.collect.ImmutableList;",
                "@@ -49,4 +44,2 @@ import java.util.Map;",
                " import java.util.function.Predicate;",
                "-import java.util.stream.Stream;",
                "-import javax.annotation.Nonnull;",
                "@@ -226,66 +219,2 @@ public class CxxPreprocessables {",
                "   }",
                "-",
                "-  public static LoadingCache<CxxPlatform, ImmutableMap<BuildTarget, CxxPreprocessorInput>>",
                "-      getTransitiveCxxPreprocessorInputCache(",
                "-          CxxPreprocessorDep preprocessorDep, BuildRuleResolver ruleResolver) {",
                "-    return getTransitiveCxxPreprocessorInputCache(",
                "-        preprocessorDep, ruleResolver, Parallelizer.SERIAL);",
                "-  }",
                "-",
                "-  public static LoadingCache<CxxPlatform, ImmutableMap<BuildTarget, CxxPreprocessorInput>>",
                "-      getTransitiveCxxPreprocessorInputCache(",
                "-          CxxPreprocessorDep preprocessorDep,",
                "-          BuildRuleResolver ruleResolver,",
                "-          Parallelizer parallelizer) {",
                "-    return CacheBuilder.newBuilder()",
                "-        .build(",
                "-            new CacheLoader<CxxPlatform, ImmutableMap<BuildTarget, CxxPreprocessorInput>>() {",
                "-              @Override",
                "-              public ImmutableMap<BuildTarget, CxxPreprocessorInput> load(",
                "-                  @Nonnull CxxPlatform key) {",
                "-                return computeTransitiveCxxToPreprocessorInputMap(",
                "-                    key, preprocessorDep, true, ruleResolver, parallelizer);",
                "-              }",
                "-            });",
                "-  }",
                "-",
                "-  public static ImmutableMap<BuildTarget, CxxPreprocessorInput>",
                "-      computeTransitiveCxxToPreprocessorInputMap(",
                "-          @Nonnull CxxPlatform key,",
                "-          CxxPreprocessorDep preprocessorDep,",
                "-          boolean includeDep,",
                "-          BuildRuleResolver ruleResolver) {",
                "-    return computeTransitiveCxxToPreprocessorInputMap(",
                "-        key, preprocessorDep, includeDep, ruleResolver, Parallelizer.SERIAL);",
                "-  }",
                "-",
                "-  private static ImmutableMap<BuildTarget, CxxPreprocessorInput>",
                "-      computeTransitiveCxxToPreprocessorInputMap(",
                "-          @Nonnull CxxPlatform key,",
                "-          CxxPreprocessorDep preprocessorDep,",
                "-          boolean includeDep,",
                "-          BuildRuleResolver ruleResolver,",
                "-          Parallelizer parallelizer) {",
                "-    Map<BuildTarget, CxxPreprocessorInput> builder = new LinkedHashMap<>();",
                "-    if (includeDep) {",
                "-      builder.put(",
                "-          preprocessorDep.getBuildTarget(),",
                "-          preprocessorDep.getCxxPreprocessorInput(key, ruleResolver));",
                "-    }",
                "-",
                "-    Stream<CxxPreprocessorDep> transitiveDepInputs =",
                "-        parallelizer.maybeParallelize(",
                "-            RichStream.from(preprocessorDep.getCxxPreprocessorDeps(key, ruleResolver)));",
                "-",
                "-    // We get CxxProcessorInput in parallel for each dep.",
                "-    // We have one cache per CxxPreprocessable. Cache miss may trigger the creation of more",
                "-    // BuildRules, acyclicly.",
                "-    // The creation of new BuildRules will be through forked tasks, and because we wait on the",
                "-    // Futures of the tasks directly, FJP will have current thread steal the work for those tasks",
                "-    // and no deadlock will occur {@link BuildRuleResolverTest.deadLockOnDependencyTest() }.",
                "-    transitiveDepInputs",
                "-        .map(dep -> dep.getTransitiveCxxPreprocessorInput(key, ruleResolver))",
                "-        .forEachOrdered(builder::putAll);",
                "-    return ImmutableMap.copyOf(builder);",
                "-  }",
                " }",
                "diff --git a/src/com/facebook/buck/cxx/PreInclude.java b/src/com/facebook/buck/cxx/PreInclude.java",
                "index 609933ba59..302f3644b6 100644",
                "--- a/src/com/facebook/buck/cxx/PreInclude.java",
                "+++ b/src/com/facebook/buck/cxx/PreInclude.java",
                "@@ -41,3 +41,2 @@ import com.facebook.buck.rules.coercer.FrameworkPath;",
                " import com.facebook.buck.util.RichStream;",
                "-import com.google.common.cache.LoadingCache;",
                " import com.google.common.collect.ImmutableList;",
                "@@ -98,4 +97,2 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "     this.absoluteHeaderPath = pathResolver.getAbsolutePath(sourcePath);",
                "-    this.transitiveCxxPreprocessorInputCache =",
                "-        CxxPreprocessables.getTransitiveCxxPreprocessorInputCache(this, ruleResolver);",
                "   }",
                "@@ -190,4 +187,4 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  private final LoadingCache<CxxPlatform, ImmutableMap<BuildTarget, CxxPreprocessorInput>>",
                "-      transitiveCxxPreprocessorInputCache;",
                "+  private final TransitiveCxxPreprocessorInputCache transitiveCxxPreprocessorInputCache =",
                "+      new TransitiveCxxPreprocessorInputCache(this);",
                "@@ -196,3 +193,3 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "-    return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform);",
                "+    return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform, ruleResolver);",
                "   }",
                "diff --git a/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java b/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "index 0a7d204a1c..041d04c736 100644",
                "--- a/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "+++ b/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "@@ -492,5 +492,4 @@ public class PrebuiltCxxLibraryDescription",
                "-      private final LoadingCache<CxxPlatform, ImmutableMap<BuildTarget, CxxPreprocessorInput>>",
                "-          transitiveCxxPreprocessorInputCache =",
                "-              CxxPreprocessables.getTransitiveCxxPreprocessorInputCache(this, ruleResolver);",
                "+      private final TransitiveCxxPreprocessorInputCache transitiveCxxPreprocessorInputCache =",
                "+          new TransitiveCxxPreprocessorInputCache(this);",
                "@@ -629,3 +628,3 @@ public class PrebuiltCxxLibraryDescription",
                "           CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "-        return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform);",
                "+        return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform, ruleResolver);",
                "       }",
                "diff --git a/src/com/facebook/buck/cxx/TransitiveCxxPreprocessorInputCache.java b/src/com/facebook/buck/cxx/TransitiveCxxPreprocessorInputCache.java",
                "new file mode 100644",
                "index 0000000000..d85c1695b4",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/cxx/TransitiveCxxPreprocessorInputCache.java",
                "@@ -0,0 +1,104 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.cxx;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.facebook.buck.util.concurrent.Parallelizer;",
                "+import com.google.common.cache.Cache;",
                "+import com.google.common.cache.CacheBuilder;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.util.concurrent.UncheckedExecutionException;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.Map;",
                "+import java.util.concurrent.ExecutionException;",
                "+import java.util.stream.Stream;",
                "+import javax.annotation.Nonnull;",
                "+",
                "+/** Transitive C++ preprocessor input cache */",
                "+public class TransitiveCxxPreprocessorInputCache {",
                "+  private final Cache<CxxPlatform, ImmutableMap<BuildTarget, CxxPreprocessorInput>> cache =",
                "+      CacheBuilder.newBuilder().build();",
                "+  private final CxxPreprocessorDep preprocessorDep;",
                "+  private final Parallelizer parallelizer;",
                "+",
                "+  public TransitiveCxxPreprocessorInputCache(CxxPreprocessorDep preprocessorDep) {",
                "+    this(preprocessorDep, Parallelizer.SERIAL);",
                "+  }",
                "+",
                "+  public TransitiveCxxPreprocessorInputCache(",
                "+      CxxPreprocessorDep preprocessorDep, Parallelizer parallelizer) {",
                "+    this.preprocessorDep = preprocessorDep;",
                "+    this.parallelizer = parallelizer;",
                "+  }",
                "+",
                "+  /** Get a value from the cache */",
                "+  public ImmutableMap<BuildTarget, CxxPreprocessorInput> getUnchecked(",
                "+      CxxPlatform key, BuildRuleResolver ruleResolver) {",
                "+    try {",
                "+      return cache.get(",
                "+          key,",
                "+          () ->",
                "+              computeTransitiveCxxToPreprocessorInputMap(",
                "+                  key, preprocessorDep, true, ruleResolver, parallelizer));",
                "+    } catch (ExecutionException e) {",
                "+      throw new UncheckedExecutionException(e.getCause());",
                "+    }",
                "+  }",
                "+",
                "+  public static ImmutableMap<BuildTarget, CxxPreprocessorInput>",
                "+      computeTransitiveCxxToPreprocessorInputMap(",
                "+          @Nonnull CxxPlatform key,",
                "+          CxxPreprocessorDep preprocessorDep,",
                "+          boolean includeDep,",
                "+          BuildRuleResolver ruleResolver) {",
                "+    return computeTransitiveCxxToPreprocessorInputMap(",
                "+        key, preprocessorDep, includeDep, ruleResolver, Parallelizer.SERIAL);",
                "+  }",
                "+",
                "+  private static ImmutableMap<BuildTarget, CxxPreprocessorInput>",
                "+      computeTransitiveCxxToPreprocessorInputMap(",
                "+          @Nonnull CxxPlatform key,",
                "+          CxxPreprocessorDep preprocessorDep,",
                "+          boolean includeDep,",
                "+          BuildRuleResolver ruleResolver,",
                "+          Parallelizer parallelizer) {",
                "+    Map<BuildTarget, CxxPreprocessorInput> builder = new LinkedHashMap<>();",
                "+    if (includeDep) {",
                "+      builder.put(",
                "+          preprocessorDep.getBuildTarget(),",
                "+          preprocessorDep.getCxxPreprocessorInput(key, ruleResolver));",
                "+    }",
                "+",
                "+    Stream<CxxPreprocessorDep> transitiveDepInputs =",
                "+        parallelizer.maybeParallelize(",
                "+            RichStream.from(preprocessorDep.getCxxPreprocessorDeps(key, ruleResolver)));",
                "+",
                "+    // We get CxxProcessorInput in parallel for each dep.",
                "+    // We have one cache per CxxPreprocessable. Cache miss may trigger the creation of more",
                "+    // BuildRules, acyclically.",
                "+    // The creation of new BuildRules will be through forked tasks, and because we wait on the",
                "+    // Futures of the tasks directly, FJP will have current thread steal the work for those tasks",
                "+    // and no deadlock will occur {@link BuildRuleResolverTest.deadLockOnDependencyTest() }.",
                "+    transitiveDepInputs",
                "+        .map(dep -> dep.getTransitiveCxxPreprocessorInput(key, ruleResolver))",
                "+        .forEachOrdered(builder::putAll);",
                "+    return ImmutableMap.copyOf(builder);",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/halide/HalideLibrary.java b/src/com/facebook/buck/halide/HalideLibrary.java",
                "index f906146776..4ba06d9361 100644",
                "--- a/src/com/facebook/buck/halide/HalideLibrary.java",
                "+++ b/src/com/facebook/buck/halide/HalideLibrary.java",
                "@@ -23,2 +23,3 @@ import com.facebook.buck.cxx.CxxPreprocessorDep;",
                " import com.facebook.buck.cxx.CxxPreprocessorInput;",
                "+import com.facebook.buck.cxx.TransitiveCxxPreprocessorInputCache;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "@@ -38,3 +39,2 @@ import com.facebook.buck.rules.args.SourcePathArg;",
                " import com.google.common.base.Preconditions;",
                "-import com.google.common.cache.LoadingCache;",
                " import com.google.common.collect.FluentIterable;",
                "@@ -53,4 +53,4 @@ public class HalideLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  private final LoadingCache<CxxPlatform, ImmutableMap<BuildTarget, CxxPreprocessorInput>>",
                "-      transitiveCxxPreprocessorInputCache;",
                "+  private final TransitiveCxxPreprocessorInputCache transitiveCxxPreprocessorInputCache =",
                "+      new TransitiveCxxPreprocessorInputCache(this);",
                "@@ -65,4 +65,2 @@ public class HalideLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "     this.supportedPlatformsRegex = supportedPlatformsRegex;",
                "-    this.transitiveCxxPreprocessorInputCache =",
                "-        CxxPreprocessables.getTransitiveCxxPreprocessorInputCache(this, ruleResolver);",
                "   }",
                "@@ -103,3 +101,3 @@ public class HalideLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "-    return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform);",
                "+    return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform, ruleResolver);",
                "   }",
                "diff --git a/src/com/facebook/buck/haskell/HaskellLibraryDescription.java b/src/com/facebook/buck/haskell/HaskellLibraryDescription.java",
                "index 029957a2ff..5cdeaab395 100644",
                "--- a/src/com/facebook/buck/haskell/HaskellLibraryDescription.java",
                "+++ b/src/com/facebook/buck/haskell/HaskellLibraryDescription.java",
                "@@ -30,2 +30,3 @@ import com.facebook.buck.cxx.ExplicitCxxToolFlags;",
                " import com.facebook.buck.cxx.PreprocessorFlags;",
                "+import com.facebook.buck.cxx.TransitiveCxxPreprocessorInputCache;",
                " import com.facebook.buck.cxx.toolchain.ArchiveContents;",
                "@@ -70,3 +71,2 @@ import com.facebook.buck.versions.VersionPropagator;",
                " import com.google.common.base.Preconditions;",
                "-import com.google.common.cache.LoadingCache;",
                " import com.google.common.collect.ImmutableCollection;",
                "@@ -852,3 +852,3 @@ public class HaskellLibraryDescription",
                "           CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "-        return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform);",
                "+        return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform, ruleResolver);",
                "       }",
                "@@ -861,5 +861,4 @@ public class HaskellLibraryDescription",
                "-      private final LoadingCache<CxxPlatform, ImmutableMap<BuildTarget, CxxPreprocessorInput>>",
                "-          transitiveCxxPreprocessorInputCache =",
                "-              CxxPreprocessables.getTransitiveCxxPreprocessorInputCache(this, resolver);",
                "+      private final TransitiveCxxPreprocessorInputCache transitiveCxxPreprocessorInputCache =",
                "+          new TransitiveCxxPreprocessorInputCache(this);",
                "diff --git a/src/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescription.java b/src/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescription.java",
                "index c3d2a684ba..2908ad8a18 100644",
                "--- a/src/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescription.java",
                "+++ b/src/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescription.java",
                "@@ -22,2 +22,3 @@ import com.facebook.buck.cxx.CxxPreprocessorDep;",
                " import com.facebook.buck.cxx.CxxPreprocessorInput;",
                "+import com.facebook.buck.cxx.TransitiveCxxPreprocessorInputCache;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "@@ -41,3 +42,2 @@ import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                " import com.facebook.buck.versions.VersionPropagator;",
                "-import com.google.common.cache.LoadingCache;",
                " import com.google.common.collect.FluentIterable;",
                "@@ -67,5 +67,4 @@ public class HaskellPrebuiltLibraryDescription",
                "-      private final LoadingCache<CxxPlatform, ImmutableMap<BuildTarget, CxxPreprocessorInput>>",
                "-          transitiveCxxPreprocessorInputCache =",
                "-              CxxPreprocessables.getTransitiveCxxPreprocessorInputCache(this, resolver);",
                "+      private final TransitiveCxxPreprocessorInputCache transitiveCxxPreprocessorInputCache =",
                "+          new TransitiveCxxPreprocessorInputCache(this);",
                "@@ -183,3 +182,3 @@ public class HaskellPrebuiltLibraryDescription",
                "           CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "-        return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform);",
                "+        return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform, ruleResolver);",
                "       }",
                "diff --git a/src/com/facebook/buck/swift/SwiftLibrary.java b/src/com/facebook/buck/swift/SwiftLibrary.java",
                "index f6e7adddfe..326b351b3f 100644",
                "--- a/src/com/facebook/buck/swift/SwiftLibrary.java",
                "+++ b/src/com/facebook/buck/swift/SwiftLibrary.java",
                "@@ -28,2 +28,3 @@ import com.facebook.buck.cxx.CxxPreprocessorDep;",
                " import com.facebook.buck.cxx.CxxPreprocessorInput;",
                "+import com.facebook.buck.cxx.TransitiveCxxPreprocessorInputCache;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "@@ -49,3 +50,2 @@ import com.facebook.buck.swift.toolchain.SwiftPlatform;",
                " import com.facebook.buck.util.RichStream;",
                "-import com.google.common.cache.LoadingCache;",
                " import com.google.common.collect.ImmutableList;",
                "@@ -66,4 +66,4 @@ class SwiftLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  private final LoadingCache<CxxPlatform, ImmutableMap<BuildTarget, CxxPreprocessorInput>>",
                "-      transitiveCxxPreprocessorInputCache;",
                "+  private final TransitiveCxxPreprocessorInputCache transitiveCxxPreprocessorInputCache =",
                "+      new TransitiveCxxPreprocessorInputCache(this);",
                "@@ -92,4 +92,2 @@ class SwiftLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "     super(buildTarget, projectFilesystem, params);",
                "-    this.transitiveCxxPreprocessorInputCache =",
                "-        CxxPreprocessables.getTransitiveCxxPreprocessorInputCache(this, ruleResolver);",
                "     this.ruleResolver = ruleResolver;",
                "@@ -288,3 +286,3 @@ class SwiftLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "     } else {",
                "-      return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform);",
                "+      return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform, ruleResolver);",
                "     }",
                "diff --git a/test/com/facebook/buck/cxx/CxxDescriptionEnhancerTest.java b/test/com/facebook/buck/cxx/CxxDescriptionEnhancerTest.java",
                "index 099d8551a8..51966876f3 100644",
                "--- a/test/com/facebook/buck/cxx/CxxDescriptionEnhancerTest.java",
                "+++ b/test/com/facebook/buck/cxx/CxxDescriptionEnhancerTest.java",
                "@@ -62,3 +62,2 @@ public class CxxDescriptionEnhancerTest {",
                "             libParams,",
                "-            ruleResolver,",
                "             BuildTargetFactory.newInstance(\"//:header\"),",
                "@@ -116,3 +115,2 @@ public class CxxDescriptionEnhancerTest {",
                "             otherlibParams,",
                "-            ruleResolver,",
                "             BuildTargetFactory.newInstance(\"//:otherheader\"),",
                "@@ -135,3 +133,2 @@ public class CxxDescriptionEnhancerTest {",
                "             libParams,",
                "-            ruleResolver,",
                "             BuildTargetFactory.newInstance(\"//:header\"),",
                "@@ -192,3 +189,2 @@ public class CxxDescriptionEnhancerTest {",
                "             libParams,",
                "-            ruleResolver,",
                "             BuildTargetFactory.newInstance(\"//:header\"),",
                "diff --git a/test/com/facebook/buck/cxx/CxxLibraryTest.java b/test/com/facebook/buck/cxx/CxxLibraryTest.java",
                "index 98c367a3fb..73d1b3c09f 100644",
                "--- a/test/com/facebook/buck/cxx/CxxLibraryTest.java",
                "+++ b/test/com/facebook/buck/cxx/CxxLibraryTest.java",
                "@@ -84,3 +84,2 @@ public class CxxLibraryTest {",
                "             params,",
                "-            ruleResolver,",
                "             publicHeaderTarget,",
                "diff --git a/test/com/facebook/buck/cxx/CxxPrecompiledHeaderRuleTest.java b/test/com/facebook/buck/cxx/CxxPrecompiledHeaderRuleTest.java",
                "index 9f96101539..6168b4e4a1 100644",
                "--- a/test/com/facebook/buck/cxx/CxxPrecompiledHeaderRuleTest.java",
                "+++ b/test/com/facebook/buck/cxx/CxxPrecompiledHeaderRuleTest.java",
                "@@ -380,3 +380,2 @@ public class CxxPrecompiledHeaderRuleTest {",
                "                 libParams,",
                "-                ruleResolver,",
                "                 publicHeaderTarget,",
                "diff --git a/test/com/facebook/buck/cxx/FakeCxxLibrary.java b/test/com/facebook/buck/cxx/FakeCxxLibrary.java",
                "index 4c6f510bfb..c10526f021 100644",
                "--- a/test/com/facebook/buck/cxx/FakeCxxLibrary.java",
                "+++ b/test/com/facebook/buck/cxx/FakeCxxLibrary.java",
                "@@ -35,3 +35,2 @@ import com.facebook.buck.rules.args.SourcePathArg;",
                " import com.facebook.buck.util.types.Either;",
                "-import com.google.common.cache.LoadingCache;",
                " import com.google.common.collect.FluentIterable;",
                "@@ -59,4 +58,4 @@ public final class FakeCxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  private final LoadingCache<CxxPlatform, ImmutableMap<BuildTarget, CxxPreprocessorInput>>",
                "-      transitiveCxxPreprocessorInputCache;",
                "+  private final TransitiveCxxPreprocessorInputCache transitiveCxxPreprocessorInputCache =",
                "+      new TransitiveCxxPreprocessorInputCache(this);",
                "@@ -66,3 +65,2 @@ public final class FakeCxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       BuildRuleParams params,",
                "-      BuildRuleResolver ruleResolver,",
                "       BuildTarget publicHeaderTarget,",
                "@@ -86,4 +84,2 @@ public final class FakeCxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "     this.tests = tests;",
                "-    transitiveCxxPreprocessorInputCache =",
                "-        CxxPreprocessables.getTransitiveCxxPreprocessorInputCache(this, ruleResolver);",
                "   }",
                "@@ -136,3 +132,3 @@ public final class FakeCxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "-    return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform);",
                "+    return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform, ruleResolver);",
                "   }",
                "diff --git a/test/com/facebook/buck/swift/SwiftLibraryIntegrationTest.java b/test/com/facebook/buck/swift/SwiftLibraryIntegrationTest.java",
                "index d54f274f28..e47101cc64 100644",
                "--- a/test/com/facebook/buck/swift/SwiftLibraryIntegrationTest.java",
                "+++ b/test/com/facebook/buck/swift/SwiftLibraryIntegrationTest.java",
                "@@ -104,3 +104,2 @@ public class SwiftLibraryIntegrationTest {",
                "             libParams,",
                "-            resolver,",
                "             BuildTargetFactory.newInstance(\"//:header\"),"
            ],
            "changed_files": [
                "src/com/facebook/buck/apple/AppleLibraryDescriptionSwiftEnhancer.java",
                "src/com/facebook/buck/apple/PrebuiltAppleFramework.java",
                "src/com/facebook/buck/apple/PrebuiltAppleFrameworkDescription.java",
                "src/com/facebook/buck/cxx/AbstractPrebuiltCxxLibraryGroupDescription.java",
                "src/com/facebook/buck/cxx/CxxLibrary.java",
                "src/com/facebook/buck/cxx/CxxPreprocessables.java",
                "src/com/facebook/buck/cxx/PreInclude.java",
                "src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "src/com/facebook/buck/cxx/TransitiveCxxPreprocessorInputCache.java",
                "src/com/facebook/buck/halide/HalideLibrary.java",
                "src/com/facebook/buck/haskell/HaskellLibraryDescription.java",
                "src/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescription.java",
                "src/com/facebook/buck/swift/SwiftLibrary.java",
                "test/com/facebook/buck/cxx/CxxDescriptionEnhancerTest.java",
                "test/com/facebook/buck/cxx/CxxLibraryTest.java",
                "test/com/facebook/buck/cxx/CxxPrecompiledHeaderRuleTest.java",
                "test/com/facebook/buck/cxx/FakeCxxLibrary.java",
                "test/com/facebook/buck/swift/SwiftLibraryIntegrationTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: object, cache, load",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, cache",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "80a807b39367780a9c06f30cb14f21eeaaaa4b74",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522348435,
            "hunks": 46,
            "message": "Remove BuckMessageBus from BuildRuleResolver Summary: BuildRuleResolver is a long living object (unfortunately) and keeping some other objects under it causes them to not die once the command completes. For any usage, message bus should be passed directly to a function that needs it as a parameter. Reviewed By: jtorkkola fbshipit-source-id: 7ce795f",
            "diff": [
                "diff --git a/src/com/facebook/buck/android/AndroidBinaryDescription.java b/src/com/facebook/buck/android/AndroidBinaryDescription.java",
                "index 322c0be04e..0a714f1056 100644",
                "--- a/src/com/facebook/buck/android/AndroidBinaryDescription.java",
                "+++ b/src/com/facebook/buck/android/AndroidBinaryDescription.java",
                "@@ -35,4 +35,2 @@ import com.facebook.buck.config.BuckConfig;",
                " import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "-import com.facebook.buck.event.PerfEventId;",
                "-import com.facebook.buck.event.SimplePerfEvent;",
                " import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "@@ -164,256 +162,248 @@ public class AndroidBinaryDescription",
                "-    try (SimplePerfEvent.Scope ignored =",
                "-        SimplePerfEvent.scope(",
                "-            Optional.ofNullable(resolver.getEventBus()),",
                "-            PerfEventId.of(\"AndroidBinaryDescription\"),",
                "-            \"target\",",
                "-            buildTarget.toString())) {",
                "-      params = params.withoutExtraDeps();",
                "-",
                "-      // All of our supported flavors are constructed as side-effects",
                "-      // of the main target.",
                "-      for (Flavor flavor : FLAVORS) {",
                "-        if (buildTarget.getFlavors().contains(flavor)) {",
                "-          resolver.requireRule(buildTarget.withoutFlavors(flavor));",
                "-          return resolver.getRule(buildTarget);",
                "-        }",
                "-      }",
                "-",
                "-      // We don't support requiring other flavors right now.",
                "-      if (buildTarget.isFlavored()) {",
                "-        throw new HumanReadableException(",
                "-            \"Requested target %s contains an unrecognized flavor\", buildTarget);",
                "-      }",
                "+    params = params.withoutExtraDeps();",
                "-      BuildRule keystore = resolver.getRule(args.getKeystore());",
                "-      if (!(keystore instanceof Keystore)) {",
                "-        throw new HumanReadableException(",
                "-            \"In %s, keystore='%s' must be a keystore() but was %s().\",",
                "-            buildTarget, keystore.getFullyQualifiedName(), keystore.getType());",
                "+    // All of our supported flavors are constructed as side-effects",
                "+    // of the main target.",
                "+    for (Flavor flavor : FLAVORS) {",
                "+      if (buildTarget.getFlavors().contains(flavor)) {",
                "+        resolver.requireRule(buildTarget.withoutFlavors(flavor));",
                "+        return resolver.getRule(buildTarget);",
                "       }",
                "+    }",
                "-      APKModuleGraph apkModuleGraph = null;",
                "-      if (!args.getApplicationModuleConfigs().isEmpty()) {",
                "-        apkModuleGraph =",
                "-            new APKModuleGraph(",
                "-                Optional.of(args.getApplicationModuleConfigs()),",
                "-                args.getApplicationModuleDependencies(),",
                "-                context.getTargetGraph(),",
                "-                buildTarget);",
                "-      } else {",
                "-        apkModuleGraph =",
                "-            new APKModuleGraph(",
                "-                context.getTargetGraph(),",
                "-                buildTarget,",
                "-                Optional.of(args.getApplicationModuleTargets()));",
                "-      }",
                "+    // We don't support requiring other flavors right now.",
                "+    if (buildTarget.isFlavored()) {",
                "+      throw new HumanReadableException(",
                "+          \"Requested target %s contains an unrecognized flavor\", buildTarget);",
                "+    }",
                "-      EnumSet<ExopackageMode> exopackageModes = EnumSet.noneOf(ExopackageMode.class);",
                "-      if (!args.getExopackageModes().isEmpty()) {",
                "-        exopackageModes = EnumSet.copyOf(args.getExopackageModes());",
                "-      } else if (args.isExopackage().orElse(false)) {",
                "-        LOG.error(",
                "-            \"Target %s specified exopackage=True, which is deprecated. Use exopackage_modes.\",",
                "-            buildTarget);",
                "-        exopackageModes = EnumSet.of(ExopackageMode.SECONDARY_DEX);",
                "-      }",
                "+    BuildRule keystore = resolver.getRule(args.getKeystore());",
                "+    if (!(keystore instanceof Keystore)) {",
                "+      throw new HumanReadableException(",
                "+          \"In %s, keystore='%s' must be a keystore() but was %s().\",",
                "+          buildTarget, keystore.getFullyQualifiedName(), keystore.getType());",
                "+    }",
                "+",
                "+    APKModuleGraph apkModuleGraph = null;",
                "+    if (!args.getApplicationModuleConfigs().isEmpty()) {",
                "+      apkModuleGraph =",
                "+          new APKModuleGraph(",
                "+              Optional.of(args.getApplicationModuleConfigs()),",
                "+              args.getApplicationModuleDependencies(),",
                "+              context.getTargetGraph(),",
                "+              buildTarget);",
                "+    } else {",
                "+      apkModuleGraph =",
                "+          new APKModuleGraph(",
                "+              context.getTargetGraph(),",
                "+              buildTarget,",
                "+              Optional.of(args.getApplicationModuleTargets()));",
                "+    }",
                "-      DexSplitMode dexSplitMode = createDexSplitMode(args, exopackageModes);",
                "+    EnumSet<ExopackageMode> exopackageModes = EnumSet.noneOf(ExopackageMode.class);",
                "+    if (!args.getExopackageModes().isEmpty()) {",
                "+      exopackageModes = EnumSet.copyOf(args.getExopackageModes());",
                "+    } else if (args.isExopackage().orElse(false)) {",
                "+      LOG.error(",
                "+          \"Target %s specified exopackage=True, which is deprecated. Use exopackage_modes.\",",
                "+          buildTarget);",
                "+      exopackageModes = EnumSet.of(ExopackageMode.SECONDARY_DEX);",
                "+    }",
                "-      PackageType packageType = getPackageType(args);",
                "+    DexSplitMode dexSplitMode = createDexSplitMode(args, exopackageModes);",
                "-      ProGuardObfuscateStep.SdkProguardType androidSdkProguardConfig =",
                "-          args.getAndroidSdkProguardConfig().orElse(ProGuardObfuscateStep.SdkProguardType.NONE);",
                "+    PackageType packageType = getPackageType(args);",
                "-      boolean shouldProguard =",
                "-          args.getProguardConfig().isPresent()",
                "-              || !ProGuardObfuscateStep.SdkProguardType.NONE.equals(androidSdkProguardConfig);",
                "+    ProGuardObfuscateStep.SdkProguardType androidSdkProguardConfig =",
                "+        args.getAndroidSdkProguardConfig().orElse(ProGuardObfuscateStep.SdkProguardType.NONE);",
                "-      boolean shouldPreDex =",
                "-          !args.getDisablePreDex()",
                "-              && !shouldProguard",
                "-              && !args.getPreprocessJavaClassesBash().isPresent();",
                "+    boolean shouldProguard =",
                "+        args.getProguardConfig().isPresent()",
                "+            || !ProGuardObfuscateStep.SdkProguardType.NONE.equals(androidSdkProguardConfig);",
                "-      // Build rules added to \"no_dx\" are only hints, not hard dependencies. Therefore, although a",
                "-      // target may be mentioned in that parameter, it may not be present as a build rule.",
                "-      ImmutableSortedSet.Builder<BuildRule> builder = ImmutableSortedSet.naturalOrder();",
                "-      for (BuildTarget noDxTarget : args.getNoDx()) {",
                "-        Optional<BuildRule> ruleOptional = resolver.getRuleOptional(noDxTarget);",
                "-        if (ruleOptional.isPresent()) {",
                "-          builder.add(ruleOptional.get());",
                "-        } else {",
                "-          LOG.info(\"%s: no_dx target not a dependency: %s\", buildTarget, noDxTarget);",
                "-        }",
                "-      }",
                "+    boolean shouldPreDex =",
                "+        !args.getDisablePreDex()",
                "+            && !shouldProguard",
                "+            && !args.getPreprocessJavaClassesBash().isPresent();",
                "-      ImmutableSortedSet<BuildRule> buildRulesToExcludeFromDex = builder.build();",
                "-      ImmutableSortedSet<JavaLibrary> rulesToExcludeFromDex =",
                "-          RichStream.from(buildRulesToExcludeFromDex)",
                "-              .filter(JavaLibrary.class)",
                "-              .collect(ImmutableSortedSet.toImmutableSortedSet(Ordering.natural()));",
                "-",
                "-      ToolchainProvider toolchainProvider = context.getToolchainProvider();",
                "-      ListeningExecutorService dxExecutorService =",
                "-          toolchainProvider",
                "-              .getByName(DxToolchain.DEFAULT_NAME, DxToolchain.class)",
                "-              .getDxExecutorService();",
                "-",
                "-      JavaOptionsProvider javaOptionsProvider =",
                "-          toolchainProvider.getByName(JavaOptionsProvider.DEFAULT_NAME, JavaOptionsProvider.class);",
                "-",
                "-      CellPathResolver cellRoots = context.getCellPathResolver();",
                "-",
                "-      NonPredexedDexBuildableArgs nonPreDexedDexBuildableArgs =",
                "-          NonPredexedDexBuildableArgs.builder()",
                "-              .setProguardAgentPath(proGuardConfig.getProguardAgentPath())",
                "-              .setProguardJarOverride(proGuardConfig.getProguardJarOverride())",
                "-              .setProguardMaxHeapSize(proGuardConfig.getProguardMaxHeapSize())",
                "-              .setSdkProguardConfig(androidSdkProguardConfig)",
                "-              .setPreprocessJavaClassesBash(",
                "-                  getPreprocessJavaClassesBash(args, buildTarget, resolver, cellRoots))",
                "-              .setReorderClassesIntraDex(args.isReorderClassesIntraDex())",
                "-              .setDexReorderToolFile(args.getDexReorderToolFile())",
                "-              .setDexReorderDataDumpFile(args.getDexReorderDataDumpFile())",
                "-              .setDxExecutorService(dxExecutorService)",
                "-              .setDxMaxHeapSize(dxConfig.getDxMaxHeapSize())",
                "-              .setOptimizationPasses(args.getOptimizationPasses())",
                "-              .setProguardJvmArgs(args.getProguardJvmArgs())",
                "-              .setSkipProguard(args.isSkipProguard())",
                "-              .setJavaRuntimeLauncher(javaOptionsProvider.getJavaOptions().getJavaRuntimeLauncher())",
                "-              .setProguardConfigPath(args.getProguardConfig())",
                "-              .setShouldProguard(shouldProguard)",
                "-              .build();",
                "-",
                "-      ResourceFilter resourceFilter = new ResourceFilter(args.getResourceFilter());",
                "-      SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(resolver);",
                "-",
                "-      AndroidPlatformTarget androidPlatformTarget =",
                "-          toolchainProvider.getByName(",
                "-              AndroidPlatformTarget.DEFAULT_NAME, AndroidPlatformTarget.class);",
                "-",
                "-      ProjectFilesystem projectFilesystem = context.getProjectFilesystem();",
                "-",
                "-      AndroidBinaryGraphEnhancer graphEnhancer =",
                "-          new AndroidBinaryGraphEnhancer(",
                "-              toolchainProvider,",
                "-              cellRoots,",
                "-              buildTarget,",
                "-              projectFilesystem,",
                "-              androidPlatformTarget,",
                "-              params,",
                "-              resolver,",
                "-              args.getAaptMode(),",
                "-              args.getResourceCompression(),",
                "-              resourceFilter,",
                "-              args.getEffectiveBannedDuplicateResourceTypes(),",
                "-              args.getDuplicateResourceWhitelist(),",
                "-              args.getResourceUnionPackage(),",
                "-              addFallbackLocales(args.getLocales()),",
                "-              args.getLocalizedStringFileName(),",
                "-              args.getManifest(),",
                "-              args.getManifestSkeleton(),",
                "-              packageType,",
                "-              ImmutableSet.copyOf(args.getCpuFilters()),",
                "-              args.isBuildStringSourceMap(),",
                "-              shouldPreDex,",
                "-              dexSplitMode,",
                "-              args.getNoDx(),",
                "-              /* resourcesToExclude */ ImmutableSet.of(),",
                "-              args.isSkipCrunchPngs(),",
                "-              args.isIncludesVectorDrawables(),",
                "-              args.isNoAutoVersionResources(),",
                "-              javaBuckConfig,",
                "-              JavacFactory.create(ruleFinder, javaBuckConfig, null),",
                "-              toolchainProvider",
                "-                  .getByName(JavacOptionsProvider.DEFAULT_NAME, JavacOptionsProvider.class)",
                "-                  .getJavacOptions(),",
                "-              exopackageModes,",
                "-              args.getBuildConfigValues(),",
                "-              args.getBuildConfigValuesFile(),",
                "-              Optional.empty(),",
                "-              args.isTrimResourceIds(),",
                "-              args.getKeepResourcePattern(),",
                "-              args.isIgnoreAaptProguardConfig(),",
                "-              Optional.of(args.getNativeLibraryMergeMap()),",
                "-              args.getNativeLibraryMergeGlue(),",
                "-              args.getNativeLibraryMergeCodeGenerator(),",
                "-              args.getNativeLibraryMergeLocalizedSymbols(),",
                "-              shouldProguard ? args.getNativeLibraryProguardConfigGenerator() : Optional.empty(),",
                "-              args.isEnableRelinker() ? RelinkerMode.ENABLED : RelinkerMode.DISABLED,",
                "-              args.getRelinkerWhitelist(),",
                "-              dxExecutorService,",
                "-              args.getManifestEntries(),",
                "-              cxxBuckConfig,",
                "-              apkModuleGraph,",
                "-              dxConfig,",
                "-              args.getDexTool(),",
                "-              getPostFilterResourcesArgs(args, buildTarget, resolver, cellRoots),",
                "-              nonPreDexedDexBuildableArgs,",
                "-              rulesToExcludeFromDex);",
                "-      AndroidGraphEnhancementResult result = graphEnhancer.createAdditionalBuildables();",
                "-",
                "-      Optional<BuildRule> moduleVerification;",
                "-      if (args.getAndroidAppModularityResult().isPresent()) {",
                "-        moduleVerification =",
                "-            Optional.of(",
                "-                new AndroidAppModularityVerification(",
                "-                    ruleFinder,",
                "-                    buildTarget.withFlavors(ANDROID_MODULARITY_VERIFICATION_FLAVOR),",
                "-                    projectFilesystem,",
                "-                    args.getAndroidAppModularityResult().get(),",
                "-                    args.isSkipProguard(),",
                "-                    result.getDexFilesInfo().proguardTextFilesPath,",
                "-                    result.getPackageableCollection()));",
                "-        resolver.addToIndex(moduleVerification.get());",
                "+    // Build rules added to \"no_dx\" are only hints, not hard dependencies. Therefore, although a",
                "+    // target may be mentioned in that parameter, it may not be present as a build rule.",
                "+    ImmutableSortedSet.Builder<BuildRule> builder = ImmutableSortedSet.naturalOrder();",
                "+    for (BuildTarget noDxTarget : args.getNoDx()) {",
                "+      Optional<BuildRule> ruleOptional = resolver.getRuleOptional(noDxTarget);",
                "+      if (ruleOptional.isPresent()) {",
                "+        builder.add(ruleOptional.get());",
                "       } else {",
                "-        moduleVerification = Optional.empty();",
                "+        LOG.info(\"%s: no_dx target not a dependency: %s\", buildTarget, noDxTarget);",
                "       }",
                "+    }",
                "-      AndroidBinaryFilesInfo filesInfo =",
                "-          new AndroidBinaryFilesInfo(result, exopackageModes, args.isPackageAssetLibraries());",
                "+    ImmutableSortedSet<BuildRule> buildRulesToExcludeFromDex = builder.build();",
                "+    ImmutableSortedSet<JavaLibrary> rulesToExcludeFromDex =",
                "+        RichStream.from(buildRulesToExcludeFromDex)",
                "+            .filter(JavaLibrary.class)",
                "+            .collect(ImmutableSortedSet.toImmutableSortedSet(Ordering.natural()));",
                "+",
                "+    ToolchainProvider toolchainProvider = context.getToolchainProvider();",
                "+    ListeningExecutorService dxExecutorService =",
                "+        toolchainProvider",
                "+            .getByName(DxToolchain.DEFAULT_NAME, DxToolchain.class)",
                "+            .getDxExecutorService();",
                "+",
                "+    JavaOptionsProvider javaOptionsProvider =",
                "+        toolchainProvider.getByName(JavaOptionsProvider.DEFAULT_NAME, JavaOptionsProvider.class);",
                "+",
                "+    CellPathResolver cellRoots = context.getCellPathResolver();",
                "+",
                "+    NonPredexedDexBuildableArgs nonPreDexedDexBuildableArgs =",
                "+        NonPredexedDexBuildableArgs.builder()",
                "+            .setProguardAgentPath(proGuardConfig.getProguardAgentPath())",
                "+            .setProguardJarOverride(proGuardConfig.getProguardJarOverride())",
                "+            .setProguardMaxHeapSize(proGuardConfig.getProguardMaxHeapSize())",
                "+            .setSdkProguardConfig(androidSdkProguardConfig)",
                "+            .setPreprocessJavaClassesBash(",
                "+                getPreprocessJavaClassesBash(args, buildTarget, resolver, cellRoots))",
                "+            .setReorderClassesIntraDex(args.isReorderClassesIntraDex())",
                "+            .setDexReorderToolFile(args.getDexReorderToolFile())",
                "+            .setDexReorderDataDumpFile(args.getDexReorderDataDumpFile())",
                "+            .setDxExecutorService(dxExecutorService)",
                "+            .setDxMaxHeapSize(dxConfig.getDxMaxHeapSize())",
                "+            .setOptimizationPasses(args.getOptimizationPasses())",
                "+            .setProguardJvmArgs(args.getProguardJvmArgs())",
                "+            .setSkipProguard(args.isSkipProguard())",
                "+            .setJavaRuntimeLauncher(javaOptionsProvider.getJavaOptions().getJavaRuntimeLauncher())",
                "+            .setProguardConfigPath(args.getProguardConfig())",
                "+            .setShouldProguard(shouldProguard)",
                "+            .build();",
                "-      AndroidBinary androidBinary =",
                "-          new AndroidBinary(",
                "-              buildTarget,",
                "-              projectFilesystem,",
                "-              toolchainProvider.getByName(",
                "-                  AndroidSdkLocation.DEFAULT_NAME, AndroidSdkLocation.class),",
                "-              androidPlatformTarget,",
                "-              params,",
                "-              ruleFinder,",
                "-              Optional.of(args.getProguardJvmArgs()),",
                "-              (Keystore) keystore,",
                "-              dexSplitMode,",
                "-              args.getNoDx(),",
                "-              androidSdkProguardConfig,",
                "-              args.getOptimizationPasses(),",
                "-              args.getProguardConfig(),",
                "-              args.isSkipProguard(),",
                "-              getRedexOptions(buildTarget, resolver, cellRoots, args),",
                "-              args.getResourceCompression(),",
                "-              args.getCpuFilters(),",
                "-              resourceFilter,",
                "-              exopackageModes,",
                "-              rulesToExcludeFromDex,",
                "-              result,",
                "-              args.getXzCompressionLevel(),",
                "-              args.isPackageAssetLibraries(),",
                "-              args.isCompressAssetLibraries(),",
                "-              args.getManifestEntries(),",
                "-              javaOptionsProvider.getJavaOptions().getJavaRuntimeLauncher(),",
                "-              args.getIsCacheable(),",
                "-              moduleVerification,",
                "-              filesInfo.getDexFilesInfo(),",
                "-              filesInfo.getNativeFilesInfo(),",
                "-              filesInfo.getResourceFilesInfo(),",
                "-              ImmutableSortedSet.copyOf(result.getAPKModuleGraph().getAPKModules()),",
                "-              filesInfo.getExopackageInfo(),",
                "-              apkConfig.getCompressionLevel());",
                "-      // The exo installer is always added to the index so that the action graph is the same",
                "-      // between build and install calls.",
                "-      new AndroidBinaryInstallGraphEnhancer(",
                "-              androidInstallConfig, projectFilesystem, buildTarget, androidBinary)",
                "-          .enhance(resolver);",
                "-      return androidBinary;",
                "-    }",
                "+    ResourceFilter resourceFilter = new ResourceFilter(args.getResourceFilter());",
                "+    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(resolver);",
                "+",
                "+    AndroidPlatformTarget androidPlatformTarget =",
                "+        toolchainProvider.getByName(",
                "+            AndroidPlatformTarget.DEFAULT_NAME, AndroidPlatformTarget.class);",
                "+",
                "+    ProjectFilesystem projectFilesystem = context.getProjectFilesystem();",
                "+",
                "+    AndroidBinaryGraphEnhancer graphEnhancer =",
                "+        new AndroidBinaryGraphEnhancer(",
                "+            toolchainProvider,",
                "+            cellRoots,",
                "+            buildTarget,",
                "+            projectFilesystem,",
                "+            androidPlatformTarget,",
                "+            params,",
                "+            resolver,",
                "+            args.getAaptMode(),",
                "+            args.getResourceCompression(),",
                "+            resourceFilter,",
                "+            args.getEffectiveBannedDuplicateResourceTypes(),",
                "+            args.getDuplicateResourceWhitelist(),",
                "+            args.getResourceUnionPackage(),",
                "+            addFallbackLocales(args.getLocales()),",
                "+            args.getLocalizedStringFileName(),",
                "+            args.getManifest(),",
                "+            args.getManifestSkeleton(),",
                "+            packageType,",
                "+            ImmutableSet.copyOf(args.getCpuFilters()),",
                "+            args.isBuildStringSourceMap(),",
                "+            shouldPreDex,",
                "+            dexSplitMode,",
                "+            args.getNoDx(),",
                "+            /* resourcesToExclude */ ImmutableSet.of(),",
                "+            args.isSkipCrunchPngs(),",
                "+            args.isIncludesVectorDrawables(),",
                "+            args.isNoAutoVersionResources(),",
                "+            javaBuckConfig,",
                "+            JavacFactory.create(ruleFinder, javaBuckConfig, null),",
                "+            toolchainProvider",
                "+                .getByName(JavacOptionsProvider.DEFAULT_NAME, JavacOptionsProvider.class)",
                "+                .getJavacOptions(),",
                "+            exopackageModes,",
                "+            args.getBuildConfigValues(),",
                "+            args.getBuildConfigValuesFile(),",
                "+            Optional.empty(),",
                "+            args.isTrimResourceIds(),",
                "+            args.getKeepResourcePattern(),",
                "+            args.isIgnoreAaptProguardConfig(),",
                "+            Optional.of(args.getNativeLibraryMergeMap()),",
                "+            args.getNativeLibraryMergeGlue(),",
                "+            args.getNativeLibraryMergeCodeGenerator(),",
                "+            args.getNativeLibraryMergeLocalizedSymbols(),",
                "+            shouldProguard ? args.getNativeLibraryProguardConfigGenerator() : Optional.empty(),",
                "+            args.isEnableRelinker() ? RelinkerMode.ENABLED : RelinkerMode.DISABLED,",
                "+            args.getRelinkerWhitelist(),",
                "+            dxExecutorService,",
                "+            args.getManifestEntries(),",
                "+            cxxBuckConfig,",
                "+            apkModuleGraph,",
                "+            dxConfig,",
                "+            args.getDexTool(),",
                "+            getPostFilterResourcesArgs(args, buildTarget, resolver, cellRoots),",
                "+            nonPreDexedDexBuildableArgs,",
                "+            rulesToExcludeFromDex);",
                "+    AndroidGraphEnhancementResult result = graphEnhancer.createAdditionalBuildables();",
                "+",
                "+    Optional<BuildRule> moduleVerification;",
                "+    if (args.getAndroidAppModularityResult().isPresent()) {",
                "+      moduleVerification =",
                "+          Optional.of(",
                "+              new AndroidAppModularityVerification(",
                "+                  ruleFinder,",
                "+                  buildTarget.withFlavors(ANDROID_MODULARITY_VERIFICATION_FLAVOR),",
                "+                  projectFilesystem,",
                "+                  args.getAndroidAppModularityResult().get(),",
                "+                  args.isSkipProguard(),",
                "+                  result.getDexFilesInfo().proguardTextFilesPath,",
                "+                  result.getPackageableCollection()));",
                "+      resolver.addToIndex(moduleVerification.get());",
                "+    } else {",
                "+      moduleVerification = Optional.empty();",
                "+    }",
                "+",
                "+    AndroidBinaryFilesInfo filesInfo =",
                "+        new AndroidBinaryFilesInfo(result, exopackageModes, args.isPackageAssetLibraries());",
                "+",
                "+    AndroidBinary androidBinary =",
                "+        new AndroidBinary(",
                "+            buildTarget,",
                "+            projectFilesystem,",
                "+            toolchainProvider.getByName(AndroidSdkLocation.DEFAULT_NAME, AndroidSdkLocation.class),",
                "+            androidPlatformTarget,",
                "+            params,",
                "+            ruleFinder,",
                "+            Optional.of(args.getProguardJvmArgs()),",
                "+            (Keystore) keystore,",
                "+            dexSplitMode,",
                "+            args.getNoDx(),",
                "+            androidSdkProguardConfig,",
                "+            args.getOptimizationPasses(),",
                "+            args.getProguardConfig(),",
                "+            args.isSkipProguard(),",
                "+            getRedexOptions(buildTarget, resolver, cellRoots, args),",
                "+            args.getResourceCompression(),",
                "+            args.getCpuFilters(),",
                "+            resourceFilter,",
                "+            exopackageModes,",
                "+            rulesToExcludeFromDex,",
                "+            result,",
                "+            args.getXzCompressionLevel(),",
                "+            args.isPackageAssetLibraries(),",
                "+            args.isCompressAssetLibraries(),",
                "+            args.getManifestEntries(),",
                "+            javaOptionsProvider.getJavaOptions().getJavaRuntimeLauncher(),",
                "+            args.getIsCacheable(),",
                "+            moduleVerification,",
                "+            filesInfo.getDexFilesInfo(),",
                "+            filesInfo.getNativeFilesInfo(),",
                "+            filesInfo.getResourceFilesInfo(),",
                "+            ImmutableSortedSet.copyOf(result.getAPKModuleGraph().getAPKModules()),",
                "+            filesInfo.getExopackageInfo(),",
                "+            apkConfig.getCompressionLevel());",
                "+    // The exo installer is always added to the index so that the action graph is the same",
                "+    // between build and install calls.",
                "+    new AndroidBinaryInstallGraphEnhancer(",
                "+            androidInstallConfig, projectFilesystem, buildTarget, androidBinary)",
                "+        .enhance(resolver);",
                "+    return androidBinary;",
                "   }",
                "diff --git a/src/com/facebook/buck/android/AndroidBinaryInstallGraphEnhancer.java b/src/com/facebook/buck/android/AndroidBinaryInstallGraphEnhancer.java",
                "index 22e870a73a..67d68a7284 100644",
                "--- a/src/com/facebook/buck/android/AndroidBinaryInstallGraphEnhancer.java",
                "+++ b/src/com/facebook/buck/android/AndroidBinaryInstallGraphEnhancer.java",
                "@@ -64,4 +64,3 @@ class AndroidBinaryInstallGraphEnhancer {",
                "   public void enhance(BuildRuleResolver resolver) {",
                "-    if (androidInstallConfig.getConcurrentInstallEnabled(",
                "-        Optional.ofNullable(resolver.getEventBus()))) {",
                "+    if (androidInstallConfig.getConcurrentInstallEnabled(Optional.empty())) {",
                "       if (exopackageEnabled()) {",
                "diff --git a/src/com/facebook/buck/apple/project_generator/ProjectGenerator.java b/src/com/facebook/buck/apple/project_generator/ProjectGenerator.java",
                "index f45f9c23ed..ba506fea12 100644",
                "--- a/src/com/facebook/buck/apple/project_generator/ProjectGenerator.java",
                "+++ b/src/com/facebook/buck/apple/project_generator/ProjectGenerator.java",
                "@@ -354,4 +354,3 @@ public class ProjectGenerator {",
                "                     new DefaultTargetNodeToBuildRuleTransformer(),",
                "-                    cell.getCellProvider(),",
                "-                    buckEventBus)));",
                "+                    cell.getCellProvider())));",
                "     this.buckEventBus = buckEventBus;",
                "@@ -962,4 +961,3 @@ public class ProjectGenerator {",
                "             new DefaultTargetNodeToBuildRuleTransformer(),",
                "-            projectCell.getCellProvider(),",
                "-            buckEventBus);",
                "+            projectCell.getCellProvider());",
                "     ImmutableList.Builder<String> result = new ImmutableList.Builder<>();",
                "diff --git a/src/com/facebook/buck/apple/project_generator/XCodeProjectCommandHelper.java b/src/com/facebook/buck/apple/project_generator/XCodeProjectCommandHelper.java",
                "index 5155780949..f7177185d3 100644",
                "--- a/src/com/facebook/buck/apple/project_generator/XCodeProjectCommandHelper.java",
                "+++ b/src/com/facebook/buck/apple/project_generator/XCodeProjectCommandHelper.java",
                "@@ -404,4 +404,3 @@ public class XCodeProjectCommandHelper {",
                "     LazyActionGraph lazyActionGraph =",
                "-        new LazyActionGraph(",
                "-            targetGraphAndTargets.getTargetGraph(), cell.getCellProvider(), buckEventBus);",
                "+        new LazyActionGraph(targetGraphAndTargets.getTargetGraph(), cell.getCellProvider());",
                "@@ -838,4 +837,3 @@ public class XCodeProjectCommandHelper {",
                "-    public LazyActionGraph(",
                "-        TargetGraph targetGraph, CellProvider cellProvider, BuckEventBus buckEventBus) {",
                "+    public LazyActionGraph(TargetGraph targetGraph, CellProvider cellProvider) {",
                "       this.targetGraph = targetGraph;",
                "@@ -843,6 +841,3 @@ public class XCodeProjectCommandHelper {",
                "           new SingleThreadedBuildRuleResolver(",
                "-              targetGraph,",
                "-              new DefaultTargetNodeToBuildRuleTransformer(),",
                "-              cellProvider,",
                "-              buckEventBus);",
                "+              targetGraph, new DefaultTargetNodeToBuildRuleTransformer(), cellProvider);",
                "     }",
                "diff --git a/src/com/facebook/buck/cli/JavaBuildGraphProcessor.java b/src/com/facebook/buck/cli/JavaBuildGraphProcessor.java",
                "index b83a4632fb..0b576e4169 100644",
                "--- a/src/com/facebook/buck/cli/JavaBuildGraphProcessor.java",
                "+++ b/src/com/facebook/buck/cli/JavaBuildGraphProcessor.java",
                "@@ -126,4 +126,3 @@ final class JavaBuildGraphProcessor {",
                "               new DefaultTargetNodeToBuildRuleTransformer(),",
                "-              params.getCell().getCellProvider(),",
                "-              params.getBuckEventBus());",
                "+              params.getCell().getCellProvider());",
                "       SourcePathRuleFinder sourcePathRuleFinder = new SourcePathRuleFinder(buildRuleResolver);",
                "diff --git a/src/com/facebook/buck/cli/VerifyCachesCommand.java b/src/com/facebook/buck/cli/VerifyCachesCommand.java",
                "index ec763d9fd5..071a51268a 100644",
                "--- a/src/com/facebook/buck/cli/VerifyCachesCommand.java",
                "+++ b/src/com/facebook/buck/cli/VerifyCachesCommand.java",
                "@@ -18,3 +18,2 @@ package com.facebook.buck.cli;",
                "-import com.facebook.buck.event.BuckEventBus;",
                " import com.facebook.buck.rules.BuildRule;",
                "@@ -65,3 +64,2 @@ public class VerifyCachesCommand extends AbstractCommand {",
                "   private boolean verifyRuleKeyCache(",
                "-      BuckEventBus eventBus,",
                "       CellProvider cellProvider,",
                "@@ -75,6 +73,3 @@ public class VerifyCachesCommand extends AbstractCommand {",
                "         new SingleThreadedBuildRuleResolver(",
                "-            TargetGraph.EMPTY,",
                "-            new DefaultTargetNodeToBuildRuleTransformer(),",
                "-            cellProvider,",
                "-            eventBus);",
                "+            TargetGraph.EMPTY, new DefaultTargetNodeToBuildRuleTransformer(), cellProvider);",
                "     contents.forEach(e -> resolver.addToIndex(e.getKey()));",
                "@@ -130,3 +125,2 @@ public class VerifyCachesCommand extends AbstractCommand {",
                "                     verifyRuleKeyCache(",
                "-                        params.getBuckEventBus(),",
                "                         params.getCell().getCellProvider(),",
                "diff --git a/src/com/facebook/buck/rules/ActionGraphCache.java b/src/com/facebook/buck/rules/ActionGraphCache.java",
                "index a672896a0c..9e81b98a3f 100644",
                "--- a/src/com/facebook/buck/rules/ActionGraphCache.java",
                "+++ b/src/com/facebook/buck/rules/ActionGraphCache.java",
                "@@ -345,8 +345,3 @@ public class ActionGraphCache {",
                "         return createActionGraphInParallel(",
                "-            eventBus,",
                "-            transformer,",
                "-            targetGraph,",
                "-            cellProvider,",
                "-            incrementalActionGraphMode,",
                "-            poolSupplier.get());",
                "+            transformer, targetGraph, cellProvider, incrementalActionGraphMode, poolSupplier.get());",
                "       case DISABLED:",
                "@@ -368,3 +363,2 @@ public class ActionGraphCache {",
                "   private ActionGraphAndResolver createActionGraphInParallel(",
                "-      BuckEventBus eventBus,",
                "       TargetNodeToBuildRuleTransformer transformer,",
                "@@ -375,3 +369,3 @@ public class ActionGraphCache {",
                "     BuildRuleResolver resolver =",
                "-        new MultiThreadedBuildRuleResolver(pool, targetGraph, transformer, cellProvider, eventBus);",
                "+        new MultiThreadedBuildRuleResolver(pool, targetGraph, transformer, cellProvider);",
                "     HashMap<BuildTarget, CompletableFuture<BuildRule>> futures = new HashMap<>();",
                "@@ -444,3 +438,3 @@ public class ActionGraphCache {",
                "     BuildRuleResolver resolver =",
                "-        new SingleThreadedBuildRuleResolver(targetGraph, transformer, cellProvider, eventBus);",
                "+        new SingleThreadedBuildRuleResolver(targetGraph, transformer, cellProvider);",
                "diff --git a/src/com/facebook/buck/rules/BuildRuleResolver.java b/src/com/facebook/buck/rules/BuildRuleResolver.java",
                "index 6ff3700116..99d76ac724 100644",
                "--- a/src/com/facebook/buck/rules/BuildRuleResolver.java",
                "+++ b/src/com/facebook/buck/rules/BuildRuleResolver.java",
                "@@ -17,3 +17,2 @@ package com.facebook.buck.rules;",
                "-import com.facebook.buck.event.BuckEventBus;",
                " import com.facebook.buck.model.BuildTarget;",
                "@@ -26,3 +25,2 @@ import java.util.Optional;",
                " import java.util.function.Function;",
                "-import javax.annotation.Nullable;",
                "@@ -70,9 +68,2 @@ public interface BuildRuleResolver {",
                "-  /**",
                "-   * An event bus to send log messages. It's just here for convenience and has no relation with how",
                "-   * BuildRuleResolver works.",
                "-   */",
                "-  @Nullable",
                "-  BuckEventBus getEventBus();",
                "-",
                "   /**",
                "diff --git a/src/com/facebook/buck/rules/MultiThreadedBuildRuleResolver.java b/src/com/facebook/buck/rules/MultiThreadedBuildRuleResolver.java",
                "index 3b8339f32c..ce082646f7 100644",
                "--- a/src/com/facebook/buck/rules/MultiThreadedBuildRuleResolver.java",
                "+++ b/src/com/facebook/buck/rules/MultiThreadedBuildRuleResolver.java",
                "@@ -18,3 +18,2 @@ package com.facebook.buck.rules;",
                "-import com.facebook.buck.event.BuckEventBus;",
                " import com.facebook.buck.model.BuildTarget;",
                "@@ -52,3 +51,2 @@ public class MultiThreadedBuildRuleResolver implements BuildRuleResolver {",
                "   private final TargetNodeToBuildRuleTransformer buildRuleGenerator;",
                "-  @Nullable private final BuckEventBus eventBus;",
                "   private final CellProvider cellProvider;",
                "@@ -62,4 +60,3 @@ public class MultiThreadedBuildRuleResolver implements BuildRuleResolver {",
                "       TargetNodeToBuildRuleTransformer buildRuleGenerator,",
                "-      CellProvider cellProvider,",
                "-      BuckEventBus eventBus) {",
                "+      CellProvider cellProvider) {",
                "     this.forkJoinPool = forkJoinPool;",
                "@@ -67,3 +64,2 @@ public class MultiThreadedBuildRuleResolver implements BuildRuleResolver {",
                "     this.buildRuleGenerator = buildRuleGenerator;",
                "-    this.eventBus = eventBus;",
                "     this.cellProvider = cellProvider;",
                "@@ -159,9 +155,2 @@ public class MultiThreadedBuildRuleResolver implements BuildRuleResolver {",
                "-  @Nullable",
                "-  @Override",
                "-  public BuckEventBus getEventBus() {",
                "-    Preconditions.checkState(isValid);",
                "-    return eventBus;",
                "-  }",
                "-",
                "   @Override",
                "diff --git a/src/com/facebook/buck/rules/SingleThreadedBuildRuleResolver.java b/src/com/facebook/buck/rules/SingleThreadedBuildRuleResolver.java",
                "index b47cd128a5..8002fb5705 100644",
                "--- a/src/com/facebook/buck/rules/SingleThreadedBuildRuleResolver.java",
                "+++ b/src/com/facebook/buck/rules/SingleThreadedBuildRuleResolver.java",
                "@@ -18,3 +18,2 @@ package com.facebook.buck.rules;",
                "-import com.facebook.buck.event.BuckEventBus;",
                " import com.facebook.buck.model.BuildTarget;",
                "@@ -27,3 +26,2 @@ import java.util.concurrent.ConcurrentHashMap;",
                " import java.util.function.Function;",
                "-import javax.annotation.Nullable;",
                "@@ -40,5 +38,2 @@ public class SingleThreadedBuildRuleResolver implements BuildRuleResolver {",
                "-  /** Event bus for reporting performance information. Will likely be null in unit tests. */",
                "-  @Nullable private final BuckEventBus eventBus;",
                "-",
                "   private final ConcurrentHashMap<BuildTarget, BuildRule> buildRuleIndex;",
                "@@ -49,4 +44,3 @@ public class SingleThreadedBuildRuleResolver implements BuildRuleResolver {",
                "       TargetNodeToBuildRuleTransformer buildRuleGenerator,",
                "-      CellProvider cellProvider,",
                "-      @Nullable BuckEventBus eventBus) {",
                "+      CellProvider cellProvider) {",
                "     this.targetGraph = targetGraph;",
                "@@ -54,3 +48,2 @@ public class SingleThreadedBuildRuleResolver implements BuildRuleResolver {",
                "     this.cellProvider = cellProvider;",
                "-    this.eventBus = eventBus;",
                "@@ -147,9 +140,2 @@ public class SingleThreadedBuildRuleResolver implements BuildRuleResolver {",
                "-  @Override",
                "-  @Nullable",
                "-  public BuckEventBus getEventBus() {",
                "-    Preconditions.checkState(isValid);",
                "-    return eventBus;",
                "-  }",
                "-",
                "   @Override",
                "diff --git a/src/com/facebook/buck/rules/macros/QueryMacroExpander.java b/src/com/facebook/buck/rules/macros/QueryMacroExpander.java",
                "index 8df85c6d5e..88bfad8970 100644",
                "--- a/src/com/facebook/buck/rules/macros/QueryMacroExpander.java",
                "+++ b/src/com/facebook/buck/rules/macros/QueryMacroExpander.java",
                "@@ -18,4 +18,2 @@ package com.facebook.buck.rules.macros;",
                "-import com.facebook.buck.event.PerfEventId;",
                "-import com.facebook.buck.event.SimplePerfEvent;",
                " import com.facebook.buck.model.BuildTarget;",
                "@@ -102,8 +100,3 @@ public abstract class QueryMacroExpander<T extends QueryMacro>",
                "             ImmutableSet.of());",
                "-    try (SimplePerfEvent.Scope ignored =",
                "-        SimplePerfEvent.scope(",
                "-            Optional.ofNullable(resolver.getEventBus()),",
                "-            PerfEventId.of(\"resolve_query_macro\"),",
                "-            \"target\",",
                "-            target.toString())) {",
                "+    try {",
                "       QueryExpression parsedExp = QueryExpression.parse(queryExpression, env);",
                "diff --git a/src/com/facebook/buck/rules/query/QueryUtils.java b/src/com/facebook/buck/rules/query/QueryUtils.java",
                "index e0bfea071a..2741f46e48 100644",
                "--- a/src/com/facebook/buck/rules/query/QueryUtils.java",
                "+++ b/src/com/facebook/buck/rules/query/QueryUtils.java",
                "@@ -18,4 +18,2 @@ package com.facebook.buck.rules.query;",
                "-import com.facebook.buck.event.PerfEventId;",
                "-import com.facebook.buck.event.SimplePerfEvent;",
                " import com.facebook.buck.model.BuildTarget;",
                "@@ -114,8 +112,3 @@ public final class QueryUtils {",
                "             declaredDeps);",
                "-    try (SimplePerfEvent.Scope ignored =",
                "-        SimplePerfEvent.scope(",
                "-            Optional.ofNullable(resolver.getEventBus()),",
                "-            PerfEventId.of(\"resolve_dep_query\"),",
                "-            \"target\",",
                "-            target.toString())) {",
                "+    try {",
                "       QueryExpression parsedExp = QueryExpression.parse(query.getQuery(), env);",
                "diff --git a/test/com/facebook/buck/rules/ActionGraphNodeCacheTest.java b/test/com/facebook/buck/rules/ActionGraphNodeCacheTest.java",
                "index 4eef1117ec..d5eb42cdb6 100644",
                "--- a/test/com/facebook/buck/rules/ActionGraphNodeCacheTest.java",
                "+++ b/test/com/facebook/buck/rules/ActionGraphNodeCacheTest.java",
                "@@ -553,4 +553,3 @@ public class ActionGraphNodeCacheTest {",
                "         new DefaultTargetNodeToBuildRuleTransformer(),",
                "-        new TestCellBuilder().build().getCellProvider(),",
                "-        null);",
                "+        new TestCellBuilder().build().getCellProvider());",
                "   }",
                "diff --git a/test/com/facebook/buck/rules/BuildRuleResolverTest.java b/test/com/facebook/buck/rules/BuildRuleResolverTest.java",
                "index 6c56f09495..38e37d6917 100644",
                "--- a/test/com/facebook/buck/rules/BuildRuleResolverTest.java",
                "+++ b/test/com/facebook/buck/rules/BuildRuleResolverTest.java",
                "@@ -81,3 +81,3 @@ public class BuildRuleResolverTest {",
                "                     new SingleThreadedBuildRuleResolver(",
                "-                        graph, transformer, new TestCellBuilder().build().getCellProvider(), null),",
                "+                        graph, transformer, new TestCellBuilder().build().getCellProvider()),",
                "             MoreExecutors.newDirectExecutorService(),",
                "@@ -89,7 +89,3 @@ public class BuildRuleResolverTest {",
                "                     new MultiThreadedBuildRuleResolver(",
                "-                        pool,",
                "-                        graph,",
                "-                        transformer,",
                "-                        new TestCellBuilder().build().getCellProvider(),",
                "-                        null),",
                "+                        pool, graph, transformer, new TestCellBuilder().build().getCellProvider()),",
                "             pool,",
                "@@ -375,4 +371,3 @@ public class BuildRuleResolverTest {",
                "               },",
                "-              new TestCellBuilder().build().getCellProvider(),",
                "-              null);",
                "+              new TestCellBuilder().build().getCellProvider());",
                "diff --git a/test/com/facebook/buck/rules/TestBuildRuleResolver.java b/test/com/facebook/buck/rules/TestBuildRuleResolver.java",
                "index 4d61cc338b..23ca68e125 100644",
                "--- a/test/com/facebook/buck/rules/TestBuildRuleResolver.java",
                "+++ b/test/com/facebook/buck/rules/TestBuildRuleResolver.java",
                "@@ -30,4 +30,3 @@ public class TestBuildRuleResolver extends SingleThreadedBuildRuleResolver {",
                "         buildRuleGenerator,",
                "-        new TestCellBuilder().setToolchainProvider(toolchainProvider).build().getCellProvider(),",
                "-        null);",
                "+        new TestCellBuilder().setToolchainProvider(toolchainProvider).build().getCellProvider());",
                "   }",
                "@@ -38,3 +37,3 @@ public class TestBuildRuleResolver extends SingleThreadedBuildRuleResolver {",
                "       CellProvider cellProvider) {",
                "-    super(targetGraph, buildRuleGenerator, cellProvider, null);",
                "+    super(targetGraph, buildRuleGenerator, cellProvider);",
                "   }",
                "@@ -43,3 +42,3 @@ public class TestBuildRuleResolver extends SingleThreadedBuildRuleResolver {",
                "       TargetGraph targetGraph, TargetNodeToBuildRuleTransformer buildRuleGenerator) {",
                "-    super(targetGraph, buildRuleGenerator, new TestCellBuilder().build().getCellProvider(), null);",
                "+    super(targetGraph, buildRuleGenerator, new TestCellBuilder().build().getCellProvider());",
                "   }",
                "diff --git a/test/com/facebook/buck/rules/keys/RuleKeyBuilderTest.java b/test/com/facebook/buck/rules/keys/RuleKeyBuilderTest.java",
                "index a586682584..efd93b019f 100644",
                "--- a/test/com/facebook/buck/rules/keys/RuleKeyBuilderTest.java",
                "+++ b/test/com/facebook/buck/rules/keys/RuleKeyBuilderTest.java",
                "@@ -271,4 +271,3 @@ public class RuleKeyBuilderTest {",
                "           new DefaultTargetNodeToBuildRuleTransformer(),",
                "-          new TestCellBuilder().build().getCellProvider(),",
                "-          null);",
                "+          new TestCellBuilder().build().getCellProvider());",
                "       this.ruleMap = ruleMap;"
            ],
            "changed_files": [
                "src/com/facebook/buck/android/AndroidBinaryDescription.java",
                "src/com/facebook/buck/android/AndroidBinaryInstallGraphEnhancer.java",
                "src/com/facebook/buck/apple/project_generator/ProjectGenerator.java",
                "src/com/facebook/buck/apple/project_generator/XCodeProjectCommandHelper.java",
                "src/com/facebook/buck/cli/JavaBuildGraphProcessor.java",
                "src/com/facebook/buck/cli/VerifyCachesCommand.java",
                "src/com/facebook/buck/rules/ActionGraphCache.java",
                "src/com/facebook/buck/rules/BuildRuleResolver.java",
                "src/com/facebook/buck/rules/MultiThreadedBuildRuleResolver.java",
                "src/com/facebook/buck/rules/SingleThreadedBuildRuleResolver.java",
                "src/com/facebook/buck/rules/macros/QueryMacroExpander.java",
                "src/com/facebook/buck/rules/query/QueryUtils.java",
                "test/com/facebook/buck/rules/ActionGraphNodeCacheTest.java",
                "test/com/facebook/buck/rules/BuildRuleResolverTest.java",
                "test/com/facebook/buck/rules/TestBuildRuleResolver.java",
                "test/com/facebook/buck/rules/keys/RuleKeyBuilderTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: object, command",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, command, cache, code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "156cf3fa1ad966e25fa444b4ff4008fedca5ef95",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522702327,
            "hunks": 20,
            "message": "Implement native.repository_name() function. Summary: This function provides a way to query currently used cell name. https://docs.bazel.build/versions/master/skylark/lib/native.html#repository_name Reviewed By: sbalabanov fbshipit-source-id: c23251c",
            "diff": [
                "diff --git a/src/com/facebook/buck/skylark/function/SkylarkNativeModule.java b/src/com/facebook/buck/skylark/function/SkylarkNativeModule.java",
                "index 060d5dd160..bc1a2199f0 100644",
                "--- a/src/com/facebook/buck/skylark/function/SkylarkNativeModule.java",
                "+++ b/src/com/facebook/buck/skylark/function/SkylarkNativeModule.java",
                "@@ -18,2 +18,5 @@ package com.facebook.buck.skylark.function;",
                "+import com.facebook.buck.skylark.packages.PackageContext;",
                "+import com.facebook.buck.skylark.packages.PackageFactory;",
                "+import com.google.devtools.build.lib.events.Location;",
                " import com.google.devtools.build.lib.skylarkinterface.SkylarkModule;",
                "@@ -25,2 +28,3 @@ import com.google.devtools.build.lib.syntax.EvalException;",
                " import com.google.devtools.build.lib.syntax.FuncallExpression;",
                "+import com.google.devtools.build.lib.syntax.Runtime;",
                " import com.google.devtools.build.lib.syntax.SkylarkSignatureProcessor;",
                "@@ -63,3 +67,28 @@ public class SkylarkNativeModule {",
                "           env.checkLoadingPhase(\"native.package_name\", ast.getLocation());",
                "-          return (String) env.lookup(\"PACKAGE_NAME\");",
                "+          return (String) env.lookup(Runtime.PKG_NAME);",
                "+        }",
                "+      };",
                "+",
                "+  @SkylarkSignature(",
                "+    name = \"repository_name\",",
                "+    objectType = SkylarkNativeModule.class,",
                "+    returnType = String.class,",
                "+    doc =",
                "+        \"The name of the repository the rule or build extension is called from. \"",
                "+            + \"For example, in packages that are called into existence inside of the cell \"",
                "+            + \"<code>foo</code> it will return <code>@foo</code>. In packages in the main \"",
                "+            + \"repository (or standalone project), it will be set to <code>@</code>.\",",
                "+    parameters = {},",
                "+    useLocation = true,",
                "+    useAst = true,",
                "+    useEnvironment = true",
                "+  )",
                "+  public static final BuiltinFunction repositoryName =",
                "+      new BuiltinFunction(\"repository_name\") {",
                "+        @SuppressWarnings(\"unused\")",
                "+        public String invoke(Location location, FuncallExpression ast, Environment env)",
                "+            throws EvalException {",
                "+          env.checkLoadingPhase(\"native.repository_name\", location);",
                "+          PackageContext packageContext = PackageFactory.getPackageContext(env, ast);",
                "+          return packageContext.getPackageIdentifier().getRepository().getName();",
                "         }",
                "diff --git a/src/com/facebook/buck/skylark/packages/AbstractPackageContext.java b/src/com/facebook/buck/skylark/packages/AbstractPackageContext.java",
                "index 43fc85d09d..d68b8dfcb0 100644",
                "--- a/src/com/facebook/buck/skylark/packages/AbstractPackageContext.java",
                "+++ b/src/com/facebook/buck/skylark/packages/AbstractPackageContext.java",
                "@@ -21,2 +21,3 @@ import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                " import com.google.common.collect.ImmutableMap;",
                "+import com.google.devtools.build.lib.cmdline.PackageIdentifier;",
                " import org.immutables.value.Value;",
                "@@ -35,2 +36,5 @@ abstract class AbstractPackageContext {",
                "   public abstract ImmutableMap<String, ImmutableMap<String, String>> getRawConfig();",
                "+",
                "+  /** Returns a package identifier of the build file that is being parsed. */",
                "+  public abstract PackageIdentifier getPackageIdentifier();",
                " }",
                "diff --git a/src/com/facebook/buck/skylark/parser/AbstractBuckGlobals.java b/src/com/facebook/buck/skylark/parser/AbstractBuckGlobals.java",
                "index 9e40b68d7b..210e7fa921 100644",
                "--- a/src/com/facebook/buck/skylark/parser/AbstractBuckGlobals.java",
                "+++ b/src/com/facebook/buck/skylark/parser/AbstractBuckGlobals.java",
                "@@ -109,2 +109,4 @@ abstract class AbstractBuckGlobals {",
                "     builder.put(\"host_info\", HostInfo.create());",
                "+    BuiltinFunction repositoryName = SkylarkNativeModule.repositoryName;",
                "+    builder.put(repositoryName.getName(), repositoryName);",
                "     return NativeProvider.STRUCT.create(builder.build(), \"no native function or rule '%s'\");",
                "diff --git a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "index 356470f454..fdace2fb9e 100644",
                "--- a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "+++ b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "@@ -238,2 +238,3 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "     env.setup(\"package_name\", SkylarkNativeModule.packageName);",
                "+    env.setup(\"repository_name\", SkylarkNativeModule.repositoryName);",
                "     PackageContext packageContext =",
                "@@ -242,2 +243,6 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "             .setRawConfig(options.getRawConfig())",
                "+            .setPackageIdentifier(",
                "+                PackageIdentifier.create(",
                "+                    RepositoryName.createFromValidStrippedName(options.getCellName()),",
                "+                    PathFragment.create(basePath)))",
                "             .build();",
                "diff --git a/test/com/facebook/buck/skylark/function/GlobTest.java b/test/com/facebook/buck/skylark/function/GlobTest.java",
                "index 289d50aef5..f1023d5afd 100644",
                "--- a/test/com/facebook/buck/skylark/function/GlobTest.java",
                "+++ b/test/com/facebook/buck/skylark/function/GlobTest.java",
                "@@ -29,2 +29,4 @@ import com.facebook.buck.util.types.Pair;",
                " import com.google.common.collect.ImmutableList;",
                "+import com.google.devtools.build.lib.cmdline.PackageIdentifier;",
                "+import com.google.devtools.build.lib.cmdline.RepositoryName;",
                " import com.google.devtools.build.lib.events.Event;",
                "@@ -42,2 +44,3 @@ import com.google.devtools.build.lib.vfs.FileSystemUtils;",
                " import com.google.devtools.build.lib.vfs.Path;",
                "+import com.google.devtools.build.lib.vfs.PathFragment;",
                " import java.io.IOException;",
                "@@ -196,3 +199,7 @@ public class GlobTest {",
                "         PackageFactory.PACKAGE_CONTEXT,",
                "-        PackageContext.builder().setGlobber(SimpleGlobber.create(root)).build());",
                "+        PackageContext.builder()",
                "+            .setGlobber(SimpleGlobber.create(root))",
                "+            .setPackageIdentifier(",
                "+                PackageIdentifier.create(RepositoryName.DEFAULT, PathFragment.create(\"pkg\")))",
                "+            .build());",
                "     env.setup(\"glob\", Glob.create());",
                "diff --git a/test/com/facebook/buck/skylark/function/ReadConfigTest.java b/test/com/facebook/buck/skylark/function/ReadConfigTest.java",
                "index 0fa9a321ce..cef89eac02 100644",
                "--- a/test/com/facebook/buck/skylark/function/ReadConfigTest.java",
                "+++ b/test/com/facebook/buck/skylark/function/ReadConfigTest.java",
                "@@ -28,2 +28,4 @@ import com.facebook.buck.testutil.FakeProjectFilesystem;",
                " import com.google.common.collect.ImmutableMap;",
                "+import com.google.devtools.build.lib.cmdline.PackageIdentifier;",
                "+import com.google.devtools.build.lib.cmdline.RepositoryName;",
                " import com.google.devtools.build.lib.events.EventKind;",
                "@@ -38,2 +40,3 @@ import com.google.devtools.build.lib.vfs.FileSystemUtils;",
                " import com.google.devtools.build.lib.vfs.Path;",
                "+import com.google.devtools.build.lib.vfs.PathFragment;",
                " import java.io.IOException;",
                "@@ -106,2 +109,4 @@ public class ReadConfigTest {",
                "             .setRawConfig(rawConfig)",
                "+            .setPackageIdentifier(",
                "+                PackageIdentifier.create(RepositoryName.DEFAULT, PathFragment.create(\"pkg\")))",
                "             .build());",
                "diff --git a/test/com/facebook/buck/skylark/function/SkylarkNativeModuleTest.java b/test/com/facebook/buck/skylark/function/SkylarkNativeModuleTest.java",
                "index 1803c3e79f..74bd31b0ce 100644",
                "--- a/test/com/facebook/buck/skylark/function/SkylarkNativeModuleTest.java",
                "+++ b/test/com/facebook/buck/skylark/function/SkylarkNativeModuleTest.java",
                "@@ -28,2 +28,4 @@ import com.facebook.buck.testutil.FakeProjectFilesystem;",
                " import com.google.common.collect.ImmutableMap;",
                "+import com.google.devtools.build.lib.cmdline.PackageIdentifier;",
                "+import com.google.devtools.build.lib.cmdline.RepositoryName;",
                " import com.google.devtools.build.lib.events.EventKind;",
                "@@ -38,2 +40,3 @@ import com.google.devtools.build.lib.vfs.FileSystemUtils;",
                " import com.google.devtools.build.lib.vfs.Path;",
                "+import com.google.devtools.build.lib.vfs.PathFragment;",
                " import java.io.IOException;",
                "@@ -89,2 +92,3 @@ public class SkylarkNativeModuleTest {",
                "             .build();",
                "+    String packageName = \"my/package\";",
                "     env.setupDynamic(",
                "@@ -94,5 +98,7 @@ public class SkylarkNativeModuleTest {",
                "             .setRawConfig(rawConfig)",
                "+            .setPackageIdentifier(",
                "+                PackageIdentifier.create(RepositoryName.DEFAULT, PathFragment.create(packageName)))",
                "             .build());",
                "     env.setup(\"package_name\", SkylarkNativeModule.packageName);",
                "-    env.setup(\"PACKAGE_NAME\", \"my/package\");",
                "+    env.setup(\"PACKAGE_NAME\", packageName);",
                "     boolean exec = buildFileAst.exec(env, eventHandler);",
                "diff --git a/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java b/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java",
                "index d9afb9c69d..d991ba3c21 100644",
                "--- a/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java",
                "+++ b/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java",
                "@@ -306,2 +306,33 @@ public class SkylarkProjectBuildFileParserTest {",
                "+  @Test",
                "+  public void repositoryNameFunctionInExtensionReturnsCellName() throws Exception {",
                "+    Path buildFileDirectory = projectFilesystem.resolve(\"test\");",
                "+    Files.createDirectories(buildFileDirectory);",
                "+    Path buildFile = buildFileDirectory.resolve(\"BUCK\");",
                "+    Path extensionFileDirectory = buildFileDirectory.resolve(\"ext\");",
                "+    Files.createDirectories(extensionFileDirectory);",
                "+    Path extensionFile = extensionFileDirectory.resolve(\"build_rules.bzl\");",
                "+    Files.write(",
                "+        buildFile,",
                "+        Arrays.asList(",
                "+            \"load('//test/ext:build_rules.bzl', 'get_name')\",",
                "+            \"prebuilt_jar(name='foo', binary_jar=get_name())\"));",
                "+    Files.write(",
                "+        extensionFile, Arrays.asList(\"def get_name():\", \"  return native.repository_name()\"));",
                "+    Map<String, Object> rule = getSingleRule(buildFile);",
                "+    assertThat(rule.get(\"binaryJar\"), equalTo(\"@\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void repositoryNameFunctionInBuildFileReturnsCellName() throws Exception {",
                "+    Path buildFileDirectory = projectFilesystem.resolve(\"test\");",
                "+    Files.createDirectories(buildFileDirectory);",
                "+    Path buildFile = buildFileDirectory.resolve(\"BUCK\");",
                "+    Path extensionFileDirectory = buildFileDirectory.resolve(\"ext\");",
                "+    Files.createDirectories(extensionFileDirectory);",
                "+    Files.write(buildFile, Arrays.asList(\"prebuilt_jar(name='foo', binary_jar=repository_name())\"));",
                "+    Map<String, Object> rule = getSingleRule(buildFile);",
                "+    assertThat(rule.get(\"binaryJar\"), equalTo(\"@\"));",
                "+  }",
                "+",
                "   @Test"
            ],
            "changed_files": [
                "src/com/facebook/buck/skylark/function/SkylarkNativeModule.java",
                "src/com/facebook/buck/skylark/packages/AbstractPackageContext.java",
                "src/com/facebook/buck/skylark/parser/AbstractBuckGlobals.java",
                "src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "test/com/facebook/buck/skylark/function/GlobTest.java",
                "test/com/facebook/buck/skylark/function/ReadConfigTest.java",
                "test/com/facebook/buck/skylark/function/SkylarkNativeModuleTest.java",
                "test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, parser",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e9bb636eaaa05a98f7040a0fa9c27c355fd8ca9f",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521507001,
            "hunks": 12,
            "message": "Add BuildRuleResolver param to CanProvideNativeLinkTarget Summary: Another step toward removing `BuildRuleResolver` field references from `BuildRule`s and related objects. Test Plan: CI Reviewed By: ttsugriy fbshipit-source-id: 065fe74",
            "diff": [
                "diff --git a/src/com/facebook/buck/cxx/AbstractOmnibusRoots.java b/src/com/facebook/buck/cxx/AbstractOmnibusRoots.java",
                "index 9731d8f63f..b2200a02d5 100644",
                "--- a/src/com/facebook/buck/cxx/AbstractOmnibusRoots.java",
                "+++ b/src/com/facebook/buck/cxx/AbstractOmnibusRoots.java",
                "@@ -89,3 +89,4 @@ abstract class AbstractOmnibusRoots {",
                "     public void addPotentialRoot(NativeLinkable node) {",
                "-      Optional<NativeLinkTarget> target = NativeLinkables.getNativeLinkTarget(node, cxxPlatform);",
                "+      Optional<NativeLinkTarget> target =",
                "+          NativeLinkables.getNativeLinkTarget(node, cxxPlatform, ruleResolver);",
                "       if (target.isPresent()",
                "diff --git a/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java b/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "index b4773b1326..75db071ecd 100644",
                "--- a/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "+++ b/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "@@ -807,4 +807,5 @@ public class PrebuiltCxxLibraryDescription",
                "       @Override",
                "-      public Optional<NativeLinkTarget> getNativeLinkTarget(CxxPlatform cxxPlatform) {",
                "-        if (getPreferredLinkage(cxxPlatform, ruleResolver) == Linkage.SHARED) {",
                "+      public Optional<NativeLinkTarget> getNativeLinkTarget(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+        if (getPreferredLinkage(cxxPlatform, this.ruleResolver) == Linkage.SHARED) {",
                "           return Optional.empty();",
                "diff --git a/src/com/facebook/buck/cxx/toolchain/nativelink/CanProvideNativeLinkTarget.java b/src/com/facebook/buck/cxx/toolchain/nativelink/CanProvideNativeLinkTarget.java",
                "index db5682a8d1..c9732c711f 100644",
                "--- a/src/com/facebook/buck/cxx/toolchain/nativelink/CanProvideNativeLinkTarget.java",
                "+++ b/src/com/facebook/buck/cxx/toolchain/nativelink/CanProvideNativeLinkTarget.java",
                "@@ -19,2 +19,3 @@ package com.facebook.buck.cxx.toolchain.nativelink;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                " import java.util.Optional;",
                "@@ -25,3 +26,4 @@ import java.util.Optional;",
                " public interface CanProvideNativeLinkTarget {",
                "-  Optional<NativeLinkTarget> getNativeLinkTarget(CxxPlatform cxxPlatform);",
                "+  Optional<NativeLinkTarget> getNativeLinkTarget(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver);",
                " }",
                "diff --git a/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkables.java b/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkables.java",
                "index 3b262eb397..614debb0c9 100644",
                "--- a/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkables.java",
                "+++ b/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkables.java",
                "@@ -329,3 +329,3 @@ public class NativeLinkables {",
                "   public static Optional<NativeLinkTarget> getNativeLinkTarget(",
                "-      Object object, CxxPlatform cxxPlatform) {",
                "+      Object object, CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     if (object instanceof NativeLinkTarget) {",
                "@@ -334,3 +334,3 @@ public class NativeLinkables {",
                "     if (object instanceof CanProvideNativeLinkTarget) {",
                "-      return ((CanProvideNativeLinkTarget) object).getNativeLinkTarget(cxxPlatform);",
                "+      return ((CanProvideNativeLinkTarget) object).getNativeLinkTarget(cxxPlatform, ruleResolver);",
                "     }",
                "diff --git a/test/com/facebook/buck/cxx/PrebuiltCxxLibraryDescriptionTest.java b/test/com/facebook/buck/cxx/PrebuiltCxxLibraryDescriptionTest.java",
                "index 081d40046f..93063f6a07 100644",
                "--- a/test/com/facebook/buck/cxx/PrebuiltCxxLibraryDescriptionTest.java",
                "+++ b/test/com/facebook/buck/cxx/PrebuiltCxxLibraryDescriptionTest.java",
                "@@ -702,3 +702,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "         (PrebuiltCxxLibrary) prebuiltCxxLibraryBuilder.build(resolver, filesystem, targetGraph);",
                "-    assertFalse(rule.getNativeLinkTarget(CXX_PLATFORM).isPresent());",
                "+    assertFalse(rule.getNativeLinkTarget(CXX_PLATFORM, resolver).isPresent());",
                "   }",
                "@@ -716,3 +716,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "         (PrebuiltCxxLibrary) prebuiltCxxLibraryBuilder.build(resolver, filesystem, targetGraph);",
                "-    assertFalse(rule.getNativeLinkTarget(CXX_PLATFORM).isPresent());",
                "+    assertFalse(rule.getNativeLinkTarget(CXX_PLATFORM, resolver).isPresent());",
                "   }",
                "@@ -728,3 +728,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "         (PrebuiltCxxLibrary) prebuiltCxxLibraryBuilder.build(resolver, filesystem, targetGraph);",
                "-    assertTrue(rule.getNativeLinkTarget(CXX_PLATFORM).isPresent());",
                "+    assertTrue(rule.getNativeLinkTarget(CXX_PLATFORM, resolver).isPresent());",
                "   }",
                "@@ -742,3 +742,5 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     assertThat(",
                "-        rule.getNativeLinkTarget(CXX_PLATFORM).get().getNativeLinkTargetMode(CXX_PLATFORM),",
                "+        rule.getNativeLinkTarget(CXX_PLATFORM, resolver)",
                "+            .get()",
                "+            .getNativeLinkTargetMode(CXX_PLATFORM),",
                "         Matchers.equalTo(NativeLinkTargetMode.library(\"libsoname.so\")));",
                "@@ -769,3 +771,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "         ImmutableList.copyOf(",
                "-            rule.getNativeLinkTarget(CXX_PLATFORM)",
                "+            rule.getNativeLinkTarget(CXX_PLATFORM, resolver)",
                "                 .get()",
                "@@ -789,3 +791,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     NativeLinkableInput input =",
                "-        rule.getNativeLinkTarget(CXX_PLATFORM)",
                "+        rule.getNativeLinkTarget(CXX_PLATFORM, resolver)",
                "             .get()"
            ],
            "changed_files": [
                "src/com/facebook/buck/cxx/AbstractOmnibusRoots.java",
                "src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "src/com/facebook/buck/cxx/toolchain/nativelink/CanProvideNativeLinkTarget.java",
                "src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkables.java",
                "test/com/facebook/buck/cxx/PrebuiltCxxLibraryDescriptionTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: object",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8305663e5ea534fcc2f9d65e54fc1cc4d64e3682",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521764602,
            "hunks": 1,
            "message": "Remove unnecessary hash table lookup on every perf event. Summary: This is also causing ConcurrentModificationException on Java 9+ since previous code was essentially modifying the map while computeIf block is running. Test Plan: CI Reviewed By: jtorkkola fbshipit-source-id: 3784ad3",
            "diff": [
                "diff --git a/src/com/facebook/buck/event/listener/PerfTimesEventListener.java b/src/com/facebook/buck/event/listener/PerfTimesEventListener.java",
                "index e841d7a539..164e15e92e 100644",
                "--- a/src/com/facebook/buck/event/listener/PerfTimesEventListener.java",
                "+++ b/src/com/facebook/buck/event/listener/PerfTimesEventListener.java",
                "@@ -106,5 +106,3 @@ public class PerfTimesEventListener implements BuckEventListener {",
                "   public synchronized void onRuleKeyCalculationStarted(BuildRuleEvent.StartedRuleKeyCalc event) {",
                "-    ruleKeysCosts.computeIfAbsent(",
                "-        event.getBuildRule(),",
                "-        buildRule -> ruleKeysCosts.put(buildRule, new TimeCostEntry<>(event)));",
                "+    ruleKeysCosts.computeIfAbsent(event.getBuildRule(), buildRule -> new TimeCostEntry<>(event));",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/event/listener/PerfTimesEventListener.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: java, code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "126d764ccb03a303922978615be151a777ea7070",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521480393,
            "hunks": 3,
            "message": "E2E mobile template: visible_android library (load) Summary: Incredibly basic macro that tests load at a basic level Test Plan: Built locally Reviewed By: styurin fbshipit-source-id: 4dc66ea",
            "diff": [
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/buck_imports/visible_android_library.bzl b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/buck_imports/visible_android_library.bzl",
                "new file mode 100644",
                "index 0000000000..b88b69cda5",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/buck_imports/visible_android_library.bzl",
                "@@ -0,0 +1,12 @@",
                "+# Copyright 2018-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+\"\"\"Exposes an auto-public version of android_library\"\"\"",
                "+",
                "+def visible_android_library(**kwargs):",
                "+    \"\"\"android_library that is by default public\"\"\"",
                "+    kwargs[\"visibility\"] = [\"PUBLIC\"]",
                "+    android_library(**kwargs)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "index b432f1fcbd..bb339f5048 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "@@ -6,8 +6,7 @@",
                "-android_library(",
                "+load(\"//android/buck_imports:visible_android_library.bzl\", \"visible_android_library\")",
                "+",
                "+visible_android_library(",
                "     name = \"lib\",",
                "     srcs = glob([\"*.java\"]),",
                "-    visibility = [",
                "-        \"PUBLIC\",",
                "-    ],",
                "     deps = ["
            ],
            "changed_files": [
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/buck_imports/visible_android_library.bzl",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: load",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1e63bd9fade3ac4f0bc396de7ad013f12df60077",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522705941,
            "hunks": 15,
            "message": "propagate extra deps for go_test in order to use buildtargets in srcs Summary: philipjameson fixed the issue (D6839251) where we couldn't use buildtargets in srcs. For go test the .withoutExtraDeps is being used in test-main-src part of the code. This is because the filtered deps are within declared deps (if that makes sense to you). I am extending the dependencies to include missing targets Reviewed By: styurin fbshipit-source-id: 62b5c29",
            "diff": [
                "diff --git a/src/com/facebook/buck/go/GoTestDescription.java b/src/com/facebook/buck/go/GoTestDescription.java",
                "index 301e15d6fe..f1436a3d48 100644",
                "--- a/src/com/facebook/buck/go/GoTestDescription.java",
                "+++ b/src/com/facebook/buck/go/GoTestDescription.java",
                "@@ -150,3 +150,2 @@ public class GoTestDescription",
                "       Path packageName,",
                "-      ImmutableSortedSet<BuildRule> extraDeps,",
                "       ImmutableSortedSet<BuildTarget> cgoDeps) {",
                "@@ -169,9 +168,6 @@ public class GoTestDescription",
                "             projectFilesystem,",
                "-            params",
                "-                .withDeclaredDeps(",
                "-                    ImmutableSortedSet.<BuildRule>naturalOrder()",
                "-                        .addAll(BuildableSupport.getDepsCollection(testMainGenerator, ruleFinder))",
                "-                        .addAll(extraDeps)",
                "-                        .build())",
                "-                .withoutExtraDeps(),",
                "+            params.withDeclaredDeps(",
                "+                ImmutableSortedSet.<BuildRule>naturalOrder()",
                "+                    .addAll(BuildableSupport.getDepsCollection(testMainGenerator, ruleFinder))",
                "+                    .build()),",
                "             testMainGenerator,",
                "@@ -258,3 +254,2 @@ public class GoTestDescription",
                "             args,",
                "-            extraDeps.build(),",
                "             platform);",
                "@@ -286,3 +281,2 @@ public class GoTestDescription",
                "       GoTestDescriptionArg args,",
                "-      ImmutableSortedSet<BuildRule> extraDeps,",
                "       GoPlatform platform) {",
                "@@ -306,3 +300,2 @@ public class GoTestDescription",
                "             packageName,",
                "-            extraDeps,",
                "             args.getCgoDeps());",
                "diff --git a/test/com/facebook/buck/go/GoTestIntegrationTest.java b/test/com/facebook/buck/go/GoTestIntegrationTest.java",
                "index 6d6e37a033..e62c7c174c 100644",
                "--- a/test/com/facebook/buck/go/GoTestIntegrationTest.java",
                "+++ b/test/com/facebook/buck/go/GoTestIntegrationTest.java",
                "@@ -128,2 +128,14 @@ public class GoTestIntegrationTest {",
                "   }",
                "+",
                "+  @Test",
                "+  public void testGenRuleAsSrc() throws IOException {",
                "+    ProcessResult result = workspace.runBuckCommand(\"test\", \"//genrule_as_src:test\");",
                "+    result.assertSuccess();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void testGenRuleWithLibAsSrc() throws IOException {",
                "+    ProcessResult result = workspace.runBuckCommand(\"test\", \"//genrule_wtih_lib_as_src:test\");",
                "+    result.assertSuccess();",
                "+  }",
                " }",
                "diff --git a/test/com/facebook/buck/go/testdata/go_test/genrule_as_src/BUCK.fixture b/test/com/facebook/buck/go/testdata/go_test/genrule_as_src/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..b18647d8b2",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/go_test/genrule_as_src/BUCK.fixture",
                "@@ -0,0 +1,23 @@",
                "+go_binary(",
                "+    name = \"copy\",",
                "+    srcs = [",
                "+        \"copy.go\",",
                "+    ],",
                "+)",
                "+",
                "+genrule(",
                "+    name = \"gen_source_go\",",
                "+    srcs = [",
                "+        \"file.go\",",
                "+    ],",
                "+    out = \"out.go\",",
                "+    cmd = \"$(exe :copy) mod $OUT $SRCS\",",
                "+)",
                "+",
                "+go_test(",
                "+    name = \"test\",",
                "+    srcs = [",
                "+        \"test.go\",",
                "+        \":gen_source_go\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/go/testdata/go_test/genrule_as_src/copy.go b/test/com/facebook/buck/go/testdata/go_test/genrule_as_src/copy.go",
                "new file mode 100644",
                "index 0000000000..201306d874",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/go_test/genrule_as_src/copy.go",
                "@@ -0,0 +1,19 @@",
                "+package main",
                "+",
                "+import (",
                "+\t\"io\"",
                "+\t\"os\"",
                "+)",
                "+",
                "+func main() {",
                "+\tsrc := os.Args[3]",
                "+\tdst := os.Args[2]",
                "+",
                "+\tin, _ := os.Open(src)",
                "+\tdefer in.Close()",
                "+",
                "+\tout, _ := os.Create(dst)",
                "+\tdefer out.Close()",
                "+",
                "+\tio.Copy(out, in)",
                "+}",
                "diff --git a/test/com/facebook/buck/go/testdata/go_test/genrule_as_src/file.go b/test/com/facebook/buck/go/testdata/go_test/genrule_as_src/file.go",
                "new file mode 100644",
                "index 0000000000..84645a1789",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/go_test/genrule_as_src/file.go",
                "@@ -0,0 +1,5 @@",
                "+package main",
                "+",
                "+func testSource() string {",
                "+\treturn \"source_included\"",
                "+}",
                "diff --git a/test/com/facebook/buck/go/testdata/go_test/genrule_as_src/test.go b/test/com/facebook/buck/go/testdata/go_test/genrule_as_src/test.go",
                "new file mode 100644",
                "index 0000000000..b6599b7a86",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/go_test/genrule_as_src/test.go",
                "@@ -0,0 +1,9 @@",
                "+package main",
                "+",
                "+import \"testing\"",
                "+",
                "+func TestGenRuleSource(t *testing.T) {",
                "+\tif testSource() != \"source_included\" {",
                "+\t\tt.Fatalf(\"wrong output\")",
                "+\t}",
                "+}",
                "diff --git a/test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/BUCK.fixture b/test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..53f9da746b",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/BUCK.fixture",
                "@@ -0,0 +1,34 @@",
                "+go_binary(",
                "+    name = \"copy\",",
                "+    srcs = [",
                "+        \"copy/copy.go\",",
                "+    ],",
                "+)",
                "+",
                "+genrule(",
                "+    name = \"gen_source_go\",",
                "+    srcs = [",
                "+        \"raw_files/file.go\",",
                "+    ],",
                "+    out = \"out.go\",",
                "+    cmd = \"$(exe :copy) mod $OUT $SRCS\",",
                "+)",
                "+",
                "+go_library(",
                "+    name = \"lib\",",
                "+    package_name = \"lib\",",
                "+    srcs = [",
                "+        \"lib/lib.go\",",
                "+        \":gen_source_go\",",
                "+    ],",
                "+)",
                "+",
                "+go_test(",
                "+    name = \"test\",",
                "+    srcs = [",
                "+        \"test.go\",",
                "+    ],",
                "+    deps = [",
                "+        \":lib\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/copy/copy.go b/test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/copy/copy.go",
                "new file mode 100644",
                "index 0000000000..1c8de5a350",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/copy/copy.go",
                "@@ -0,0 +1,23 @@",
                "+package main",
                "+",
                "+import (",
                "+\t\"io\"",
                "+\t\"os\"",
                "+)",
                "+",
                "+func c() int {",
                "+\treturn 2",
                "+}",
                "+",
                "+func main() {",
                "+\tsrc := os.Args[3]",
                "+\tdst := os.Args[2]",
                "+",
                "+\tin, _ := os.Open(src)",
                "+\tdefer in.Close()",
                "+",
                "+\tout, _ := os.Create(dst)",
                "+\tdefer out.Close()",
                "+",
                "+\tio.Copy(out, in)",
                "+}",
                "diff --git a/test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/lib/lib.go b/test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/lib/lib.go",
                "new file mode 100644",
                "index 0000000000..26f318c968",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/lib/lib.go",
                "@@ -0,0 +1,5 @@",
                "+package lib",
                "+",
                "+func LibFn() string {",
                "+\treturn testSource()",
                "+}",
                "diff --git a/test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/raw_files/file.go b/test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/raw_files/file.go",
                "new file mode 100644",
                "index 0000000000..9a057d1389",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/raw_files/file.go",
                "@@ -0,0 +1,5 @@",
                "+package lib",
                "+",
                "+func testSource() string {",
                "+\treturn \"source_included\"",
                "+}",
                "diff --git a/test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/test.go b/test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/test.go",
                "new file mode 100644",
                "index 0000000000..f5ff962e6e",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/test.go",
                "@@ -0,0 +1,10 @@",
                "+package main",
                "+",
                "+import \"testing\"",
                "+import \"lib\"",
                "+",
                "+func TestGenRuleSource(t *testing.T) {",
                "+\tif lib.LibFn() != \"source_included\" {",
                "+\t\tt.Fatalf(\"wrong output\")",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "src/com/facebook/buck/go/GoTestDescription.java",
                "test/com/facebook/buck/go/GoTestIntegrationTest.java",
                "test/com/facebook/buck/go/testdata/go_test/genrule_as_src/BUCK.fixture",
                "test/com/facebook/buck/go/testdata/go_test/genrule_as_src/copy.go",
                "test/com/facebook/buck/go/testdata/go_test/genrule_as_src/file.go",
                "test/com/facebook/buck/go/testdata/go_test/genrule_as_src/test.go",
                "test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/BUCK.fixture",
                "test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/copy/copy.go",
                "test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/lib/lib.go",
                "test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/raw_files/file.go",
                "test/com/facebook/buck/go/testdata/go_test/genrule_wtih_lib_as_src/test.go"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, issue",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ad68ef6d386d251dbd3c8fa9ce77a7233f40a98f",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522885819,
            "hunks": 8,
            "message": "Disable ProgressEstimator for non-buildy commands Summary: Loading it can be expensive because it tries to record every build command we do, and it doesn't seem to work in these cases anyway. Reviewed By: ttsugriy fbshipit-source-id: 8d058b7",
            "diff": [
                "diff --git a/src/com/facebook/buck/cli/AbstractCommand.java b/src/com/facebook/buck/cli/AbstractCommand.java",
                "index f71ccae3b8..ea1b6813da 100644",
                "--- a/src/com/facebook/buck/cli/AbstractCommand.java",
                "+++ b/src/com/facebook/buck/cli/AbstractCommand.java",
                "@@ -373,2 +373,7 @@ public abstract class AbstractCommand implements Command {",
                "   }",
                "+",
                "+  @Override",
                "+  public boolean performsBuild() {",
                "+    return false;",
                "+  }",
                " }",
                "diff --git a/src/com/facebook/buck/cli/AbstractContainerCommand.java b/src/com/facebook/buck/cli/AbstractContainerCommand.java",
                "index fa7091b043..2453eb69c9 100644",
                "--- a/src/com/facebook/buck/cli/AbstractContainerCommand.java",
                "+++ b/src/com/facebook/buck/cli/AbstractContainerCommand.java",
                "@@ -161,2 +161,10 @@ public abstract class AbstractContainerCommand implements Command {",
                "   }",
                "+",
                "+  @Override",
                "+  public boolean performsBuild() {",
                "+    if (!getSubcommand().isPresent()) {",
                "+      return false;",
                "+    }",
                "+    return getSubcommand().get().performsBuild();",
                "+  }",
                " }",
                "diff --git a/src/com/facebook/buck/cli/BuildCommand.java b/src/com/facebook/buck/cli/BuildCommand.java",
                "index a93c33c4df..78b3d32165 100644",
                "--- a/src/com/facebook/buck/cli/BuildCommand.java",
                "+++ b/src/com/facebook/buck/cli/BuildCommand.java",
                "@@ -1460,2 +1460,7 @@ public class BuildCommand extends AbstractCommand {",
                "   }",
                "+",
                "+  @Override",
                "+  public boolean performsBuild() {",
                "+    return true;",
                "+  }",
                " }",
                "diff --git a/src/com/facebook/buck/cli/Command.java b/src/com/facebook/buck/cli/Command.java",
                "index 3f34e611e5..7130d815d4 100644",
                "--- a/src/com/facebook/buck/cli/Command.java",
                "+++ b/src/com/facebook/buck/cli/Command.java",
                "@@ -66,2 +66,4 @@ public interface Command {",
                "   void printUsage(PrintStream stream);",
                "+",
                "+  boolean performsBuild();",
                " }",
                "diff --git a/src/com/facebook/buck/cli/InstallCommand.java b/src/com/facebook/buck/cli/InstallCommand.java",
                "index 358f262fef..48a2ac4050 100644",
                "--- a/src/com/facebook/buck/cli/InstallCommand.java",
                "+++ b/src/com/facebook/buck/cli/InstallCommand.java",
                "@@ -1053,2 +1053,7 @@ public class InstallCommand extends BuildCommand {",
                "   }",
                "+",
                "+  @Override",
                "+  public boolean performsBuild() {",
                "+    return true;",
                "+  }",
                " }",
                "diff --git a/src/com/facebook/buck/cli/Main.java b/src/com/facebook/buck/cli/Main.java",
                "index 778dd79104..1b62bb30c5 100644",
                "--- a/src/com/facebook/buck/cli/Main.java",
                "+++ b/src/com/facebook/buck/cli/Main.java",
                "@@ -984,9 +984,16 @@ public final class Main {",
                "-          ProgressEstimator progressEstimator =",
                "-              new ProgressEstimator(",
                "-                  filesystem",
                "-                      .resolve(filesystem.getBuckPaths().getBuckOut())",
                "-                      .resolve(ProgressEstimator.PROGRESS_ESTIMATIONS_JSON),",
                "-                  buildEventBus);",
                "-          consoleListener.setProgressEstimator(progressEstimator);",
                "+          // No need to kick off ProgressEstimator for commands that",
                "+          // don't build anything -- it has overhead and doesn't seem",
                "+          // to work for (e.g.) query anyway. ProgressEstimator has",
                "+          // special support for project so we have to include it",
                "+          // there too.",
                "+          if (command.performsBuild() || command.subcommand instanceof ProjectCommand) {",
                "+            ProgressEstimator progressEstimator =",
                "+                new ProgressEstimator(",
                "+                    filesystem",
                "+                        .resolve(filesystem.getBuckPaths().getBuckOut())",
                "+                        .resolve(ProgressEstimator.PROGRESS_ESTIMATIONS_JSON),",
                "+                    buildEventBus);",
                "+            consoleListener.setProgressEstimator(progressEstimator);",
                "+          }",
                "diff --git a/src/com/facebook/buck/cli/RunCommand.java b/src/com/facebook/buck/cli/RunCommand.java",
                "index 4b574ccfcd..2b58aef83a 100644",
                "--- a/src/com/facebook/buck/cli/RunCommand.java",
                "+++ b/src/com/facebook/buck/cli/RunCommand.java",
                "@@ -211,2 +211,7 @@ public final class RunCommand extends AbstractCommand {",
                "   }",
                "+",
                "+  @Override",
                "+  public boolean performsBuild() {",
                "+    return true;",
                "+  }",
                " }",
                "diff --git a/src/com/facebook/buck/cli/TestCommand.java b/src/com/facebook/buck/cli/TestCommand.java",
                "index 0b795cfe21..46701a7e9e 100644",
                "--- a/src/com/facebook/buck/cli/TestCommand.java",
                "+++ b/src/com/facebook/buck/cli/TestCommand.java",
                "@@ -814,2 +814,7 @@ public class TestCommand extends BuildCommand {",
                "   }",
                "+",
                "+  @Override",
                "+  public boolean performsBuild() {",
                "+    return true;",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/com/facebook/buck/cli/AbstractCommand.java",
                "src/com/facebook/buck/cli/AbstractContainerCommand.java",
                "src/com/facebook/buck/cli/BuildCommand.java",
                "src/com/facebook/buck/cli/Command.java",
                "src/com/facebook/buck/cli/InstallCommand.java",
                "src/com/facebook/buck/cli/Main.java",
                "src/com/facebook/buck/cli/RunCommand.java",
                "src/com/facebook/buck/cli/TestCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: command, load",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, command",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "263b819665078c52f8368d1a12a53f17c640c18d",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522447049,
            "hunks": 12,
            "message": "Remove unnecessary parsing work Summary: When creating an intellij project, we need to know the package of our source files. Since not all source files are located in their canonical package location in the folder hierarchy, we need to parse the source in order to determine the package. Prior to this diff, the source was parsed in its entirety, but in reality, we only need the `package ...;`. This diff saves I/O work as well as java AST parsing work by only parsing the first package line. Reviewed By: styurin fbshipit-source-id: 8522ebc",
            "diff": [
                "diff --git a/src/com/facebook/buck/ide/intellij/lang/java/ParsingJavaPackageFinder.java b/src/com/facebook/buck/ide/intellij/lang/java/ParsingJavaPackageFinder.java",
                "index 9943a4770c..62b7ae39b9 100644",
                "--- a/src/com/facebook/buck/ide/intellij/lang/java/ParsingJavaPackageFinder.java",
                "+++ b/src/com/facebook/buck/ide/intellij/lang/java/ParsingJavaPackageFinder.java",
                "@@ -22,2 +22,3 @@ import com.facebook.buck.jvm.java.DefaultJavaPackageFinder;",
                " import com.facebook.buck.jvm.java.JavaFileParser;",
                "+import com.facebook.buck.log.Logger;",
                " import com.facebook.buck.model.BuildTarget;",
                "@@ -26,3 +27,7 @@ import com.google.common.collect.ImmutableSet;",
                " import com.google.common.collect.ImmutableSortedSet;",
                "+import java.io.BufferedReader;",
                " import java.io.File;",
                "+import java.io.IOException;",
                "+import java.io.InputStreamReader;",
                "+import java.nio.file.LinkOption;",
                " import java.nio.file.Path;",
                "@@ -31,2 +36,3 @@ import java.util.Comparator;",
                " import java.util.Optional;",
                "+import java.util.regex.Pattern;",
                "@@ -34,3 +40,6 @@ import java.util.Optional;",
                " public abstract class ParsingJavaPackageFinder {",
                "+  private static final Logger logger = Logger.get(ParsingJavaPackageFinder.class);",
                "+  private static final Pattern END_OF_PRELUDE =",
                "+      Pattern.compile(\"^\\\\s*(import|public|protected|class|interface|enum)\");",
                "   /**",
                "@@ -53,5 +62,14 @@ public abstract class ParsingJavaPackageFinder {",
                "     for (Path path : ImmutableSortedSet.copyOf(new PathComponentCountOrder(), filesToParse)) {",
                "+      // Try to read a small subset of the file to extract just the package line",
                "       Optional<String> packageNameFromSource =",
                "           Optionals.bind(",
                "-              projectFilesystem.readFileIfItExists(path), javaFileParser::getPackageNameFromSource);",
                "+              getPackageSourceLineIfFileExists(path, projectFilesystem),",
                "+              javaFileParser::getPackageNameFromSource);",
                "+      // Fall back to parsing the whole file",
                "+      if (!packageNameFromSource.isPresent()) {",
                "+        packageNameFromSource =",
                "+            Optionals.bind(",
                "+                projectFilesystem.readFileIfItExists(path),",
                "+                javaFileParser::getPackageNameFromSource);",
                "+      }",
                "       if (packageNameFromSource.isPresent()) {",
                "@@ -64,2 +82,29 @@ public abstract class ParsingJavaPackageFinder {",
                "+  private static Optional<String> getPackageSourceLineIfFileExists(",
                "+      Path pathRelativeToProjectRoot, ProjectFilesystem projectFilesystem) {",
                "+    if (!projectFilesystem.isFile(pathRelativeToProjectRoot, LinkOption.NOFOLLOW_LINKS)) {",
                "+      return Optional.empty();",
                "+    }",
                "+    try (BufferedReader reader =",
                "+        new BufferedReader(",
                "+            new InputStreamReader(",
                "+                projectFilesystem.newFileInputStream(pathRelativeToProjectRoot)))) {",
                "+      StringBuilder block = new StringBuilder();",
                "+      String line;",
                "+      while ((line = reader.readLine()) != null) {",
                "+        if (END_OF_PRELUDE.matcher(line).find()) {",
                "+          break;",
                "+        }",
                "+        block.append(line);",
                "+      }",
                "+      return Optional.of(block.toString());",
                "+    } catch (IOException e) {",
                "+      logger.warn(",
                "+          e,",
                "+          \"Unable to read source file when trying to determine its package: \"",
                "+              + pathRelativeToProjectRoot);",
                "+      return Optional.empty();",
                "+    }",
                "+  }",
                "+",
                "   private static Path findPackageFolderWithJavaPackage(String javaPackage) {",
                "diff --git a/test/com/facebook/buck/ide/intellij/ParsingJavaPackageFinderTest.java b/test/com/facebook/buck/ide/intellij/ParsingJavaPackageFinderTest.java",
                "index 11d1f61751..6314a5f28e 100644",
                "--- a/test/com/facebook/buck/ide/intellij/ParsingJavaPackageFinderTest.java",
                "+++ b/test/com/facebook/buck/ide/intellij/ParsingJavaPackageFinderTest.java",
                "@@ -95,2 +95,38 @@ public class ParsingJavaPackageFinderTest {",
                "+  @Test",
                "+  public void testMisleadingCommentsWithPackageStatement() {",
                "+    Path misleadingPath = Paths.get(\"case1/org/test/package1/Foo.java\");",
                "+    fakeProjectFilesystem.writeContentsToPath(",
                "+        \"/**\\n\"",
                "+            + \"package misleading;\\n\"",
                "+            + \"import haha;\\n\"",
                "+            + \"*/\\n\"",
                "+            + \"package org.is.correct;\\n\"",
                "+            + \"\\n\"",
                "+            + \"class Foo{}\",",
                "+        misleadingPath);",
                "+    JavaPackageFinder parsingJavaPackageFinder =",
                "+        ParsingJavaPackageFinder.preparse(",
                "+            javaFileParser,",
                "+            fakeProjectFilesystem,",
                "+            ImmutableSortedSet.of(misleadingPath),",
                "+            dummyPackageFinder);",
                "+    assertEquals(\"org.is.correct\", parsingJavaPackageFinder.findJavaPackage(misleadingPath));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void testMisleadingCommentsWithoutPackageGoesToFallback() {",
                "+    Path misleadingPath = Paths.get(\"case1/org/test/package1/Foo.java\");",
                "+    fakeProjectFilesystem.writeContentsToPath(",
                "+        \"/**\\n\" + \"package misleading;\\n\" + \"import haha;\\n\" + \"*/\\n\" + \"class Foo{}\",",
                "+        misleadingPath);",
                "+    JavaPackageFinder parsingJavaPackageFinder =",
                "+        ParsingJavaPackageFinder.preparse(",
                "+            javaFileParser,",
                "+            fakeProjectFilesystem,",
                "+            ImmutableSortedSet.of(misleadingPath),",
                "+            dummyPackageFinder);",
                "+    assertEquals(\"dummy\", parsingJavaPackageFinder.findJavaPackage(misleadingPath));",
                "+  }",
                "+",
                "   @Test",
                "diff --git a/test/com/facebook/buck/jvm/java/JavaFileParserTest.java b/test/com/facebook/buck/jvm/java/JavaFileParserTest.java",
                "index bb9e6c15a8..26b231ed91 100644",
                "--- a/test/com/facebook/buck/jvm/java/JavaFileParserTest.java",
                "+++ b/test/com/facebook/buck/jvm/java/JavaFileParserTest.java",
                "@@ -20,2 +20,3 @@ import static com.facebook.buck.jvm.java.JavaCompilationConstants.DEFAULT_JAVAC_",
                " import static org.junit.Assert.assertEquals;",
                "+import static org.junit.Assert.assertTrue;",
                "@@ -23,2 +24,3 @@ import com.google.common.base.Joiner;",
                " import com.google.common.collect.ImmutableSortedSet;",
                "+import java.util.Optional;",
                " import org.junit.Rule;",
                "@@ -762,2 +764,21 @@ public class JavaFileParserTest {",
                "   }",
                "+",
                "+  @Test",
                "+  public void testPackageParsingWithoutRestOfFile() {",
                "+    JavaFileParser parser = JavaFileParser.createJavaFileParser(DEFAULT_JAVAC_OPTIONS);",
                "+    final Optional<String> packageNameFromSource =",
                "+        parser.getPackageNameFromSource(\"package com.domain.subdomain;\");",
                "+    assertTrue(packageNameFromSource.isPresent());",
                "+    assertEquals(\"com.domain.subdomain\", packageNameFromSource.get());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void testPackageParsingWithMisleadingComments() {",
                "+    JavaFileParser parser = JavaFileParser.createJavaFileParser(DEFAULT_JAVAC_OPTIONS);",
                "+    final Optional<String> packageNameFromSource =",
                "+        parser.getPackageNameFromSource(",
                "+            \"/**\\n\" + \"package misleading;\\n\" + \"*/\\n\" + \"package com.domain.subdomain;\");",
                "+    assertTrue(packageNameFromSource.isPresent());",
                "+    assertEquals(\"com.domain.subdomain\", packageNameFromSource.get());",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/com/facebook/buck/ide/intellij/lang/java/ParsingJavaPackageFinder.java",
                "test/com/facebook/buck/ide/intellij/ParsingJavaPackageFinderTest.java",
                "test/com/facebook/buck/jvm/java/JavaFileParserTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: save, java",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, parser",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8ce226cd2da6ac107d7db9535d6db4a1ac16211a",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522238126,
            "hunks": 1,
            "message": "BuildCommand: the default result is an error Summary: The current logic and implementation may result that in SimpleConsole (with `-c ui.superconsole=DISABLED`) a failure may be reported as a success first and then as a true failure. This can happen because `BuildCommand`: 1. assumes SUCCESS as an initial status 2. doesn't handle all exceptions 3. issues a build finished `event` in the finally block `params.getBuckEventBus().post(BuildEvent.finished(started, exitCode));` This change ensures that for `buck build` success will be reported only if it was a real success Reviewed By: ttsugriy fbshipit-source-id: 2c40ce9",
            "diff": [
                "diff --git a/src/com/facebook/buck/cli/BuildCommand.java b/src/com/facebook/buck/cli/BuildCommand.java",
                "index 797f8785ce..5e36c2691f 100644",
                "--- a/src/com/facebook/buck/cli/BuildCommand.java",
                "+++ b/src/com/facebook/buck/cli/BuildCommand.java",
                "@@ -473,3 +473,3 @@ public class BuildCommand extends AbstractCommand {",
                "     BuildEvent.Started started = postBuildStartedEvent(params);",
                "-    ExitCode exitCode = ExitCode.SUCCESS;",
                "+    ExitCode exitCode = ExitCode.BUILD_ERROR;",
                "     try (CloseableMemoizedSupplier<ForkJoinPool> poolSupplier ="
            ],
            "changed_files": [
                "src/com/facebook/buck/cli/BuildCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, command, issue",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, command",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "33266e587dc0f5bb9c65aca451ca521062c53f33",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522693333,
            "hunks": 49,
            "message": "Add memory-efficient java.nio.file.Path implementation Summary: This replaces all usages sun.nio.fs.UnixPath for BuckUnixPath which is more memory-efficient. Only for OSX / Linux. Filesystem calls still use default filesystem and BuckUnixPath is converted to default Path (UnixPath) for each call. Performance impact is negligible. Reviewed By: ttsugriy fbshipit-source-id: 902ff04",
            "diff": [
                "diff --git a/programs/buck_tool.py b/programs/buck_tool.py",
                "index 03676c512c..b15f2906a7 100644",
                "--- a/programs/buck_tool.py",
                "+++ b/programs/buck_tool.py",
                "@@ -636,6 +636,14 @@ class BuckTool(object):",
                "                 \"-Dbuck.binary_hash={0}\".format(self._get_buck_binary_hash()),",
                "-                \"-Djava.nio.file.spi.DefaultFileSystemProvider=\"",
                "-                \"com.facebook.buck.cli.bootstrapper.filesystem.BuckFileSystemProvider\",",
                "             ]",
                "+            if \"BUCK_DEFAULT_FILESYSTEM\" not in os.environ and (",
                "+                sys.platform == \"darwin\" or sys.platform.startswith(\"linux\")",
                "+            ):",
                "+                # Change default filesystem to custom filesystem for memory optimizations",
                "+                # Calls like Paths.get() would return optimized Path implementation",
                "+                java_args.append(",
                "+                  \"-Djava.nio.file.spi.DefaultFileSystemProvider=\"",
                "+                  \"com.facebook.buck.cli.bootstrapper.filesystem.BuckFileSystemProvider\"",
                "+                )",
                "+",
                "             resource_lock_path = self._get_resource_lock_path()",
                "diff --git a/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystem.java b/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystem.java",
                "index b61e60659f..c79124f62b 100644",
                "--- a/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystem.java",
                "+++ b/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystem.java",
                "@@ -26,2 +26,3 @@ import java.nio.file.attribute.UserPrincipalLookupService;",
                " import java.nio.file.spi.FileSystemProvider;",
                "+import java.util.ArrayList;",
                " import java.util.Set;",
                "@@ -29,4 +30,4 @@ import java.util.Set;",
                " /**",
                "- * File system implementation that returns memory-optimized Path object. It delegates other calls to",
                "- * default file system.",
                "+ * File system implementation that returns memory footprint optimized Path object. It delegates",
                "+ * other calls to Java-default file system.",
                "  */",
                "@@ -34,14 +35,19 @@ public class BuckFileSystem extends FileSystem {",
                "-  private FileSystem defaultFileSystem;",
                "-  private FileSystemProvider provider;",
                "+  private BuckFileSystemProvider provider;",
                "+  private BuckUnixPath rootDirectory = new BuckUnixPath(this, new String[] {\"\"}, true);",
                "+  private BuckUnixPath emptyPath = new BuckUnixPath(this, new String[0], false);",
                "+  private BuckUnixPath defaultDirectory;",
                "-  public BuckFileSystem(FileSystem defaultFileSystem, FileSystemProvider provider) {",
                "-    this.defaultFileSystem = defaultFileSystem;",
                "-    this.provider = provider;",
                "-  }",
                "   /**",
                "-   * Returns the provider that created this file system.",
                "+   * Create a new filesystem that returns Path object optimized for memory usage",
                "    *",
                "-   * @return The provider that created this file system.",
                "+   * @param provider File system provider that created this filesystem",
                "+   * @param defaultDirectory The directory to use when constructing absolute paths out of relative",
                "+   *     paths, usually this is a user directory",
                "    */",
                "+  public BuckFileSystem(BuckFileSystemProvider provider, String defaultDirectory) {",
                "+    this.provider = provider;",
                "+    this.defaultDirectory = BuckUnixPath.of(this, defaultDirectory);",
                "+  }",
                "+",
                "   @Override",
                "@@ -51,5 +57,27 @@ public class BuckFileSystem extends FileSystem {",
                "+  /** @return root directory of current filesystem */",
                "+  BuckUnixPath getRootDirectory() {",
                "+    return rootDirectory;",
                "+  }",
                "+",
                "+  /** @return default directory, usually user directory */",
                "+  BuckUnixPath getDefaultDirectory() {",
                "+    return defaultDirectory;",
                "+  }",
                "+",
                "+  /** @return empty path, used to indicate that path has no elements */",
                "+  BuckUnixPath getEmptyPath() {",
                "+    return emptyPath;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return delegate file system, i.e. the one used originally by Java runtime for current platform",
                "+   */",
                "+  FileSystem getDefaultFileSystem() {",
                "+    return provider.getDefaultFileSystem();",
                "+  }",
                "+",
                "   @Override",
                "   public void close() throws IOException {",
                "-    defaultFileSystem.close();",
                "+    getDefaultFileSystem().close();",
                "   }",
                "@@ -58,3 +86,3 @@ public class BuckFileSystem extends FileSystem {",
                "   public boolean isOpen() {",
                "-    return defaultFileSystem.isOpen();",
                "+    return getDefaultFileSystem().isOpen();",
                "   }",
                "@@ -63,3 +91,3 @@ public class BuckFileSystem extends FileSystem {",
                "   public boolean isReadOnly() {",
                "-    return defaultFileSystem.isReadOnly();",
                "+    return getDefaultFileSystem().isReadOnly();",
                "   }",
                "@@ -68,3 +96,3 @@ public class BuckFileSystem extends FileSystem {",
                "   public String getSeparator() {",
                "-    return defaultFileSystem.getSeparator();",
                "+    return getDefaultFileSystem().getSeparator();",
                "   }",
                "@@ -73,3 +101,7 @@ public class BuckFileSystem extends FileSystem {",
                "   public Iterable<Path> getRootDirectories() {",
                "-    return defaultFileSystem.getRootDirectories();",
                "+    ArrayList<Path> buckRootDirs = new ArrayList<>();",
                "+    getDefaultFileSystem()",
                "+        .getRootDirectories()",
                "+        .forEach(dir -> buckRootDirs.add(BuckUnixPath.of(this, dir.toString())));",
                "+    return buckRootDirs;",
                "   }",
                "@@ -78,3 +110,3 @@ public class BuckFileSystem extends FileSystem {",
                "   public Iterable<FileStore> getFileStores() {",
                "-    return defaultFileSystem.getFileStores();",
                "+    return getDefaultFileSystem().getFileStores();",
                "   }",
                "@@ -83,3 +115,3 @@ public class BuckFileSystem extends FileSystem {",
                "   public Set<String> supportedFileAttributeViews() {",
                "-    return defaultFileSystem.supportedFileAttributeViews();",
                "+    return getDefaultFileSystem().supportedFileAttributeViews();",
                "   }",
                "@@ -88,3 +120,19 @@ public class BuckFileSystem extends FileSystem {",
                "   public Path getPath(String first, String... more) {",
                "-    return defaultFileSystem.getPath(first, more);",
                "+    String path;",
                "+    if (more.length == 0) {",
                "+      path = first;",
                "+    } else {",
                "+      StringBuilder sb = new StringBuilder();",
                "+      sb.append(first);",
                "+      for (String segment : more) {",
                "+        if (!segment.isEmpty()) {",
                "+          if (sb.length() > 0) {",
                "+            sb.append('/');",
                "+          }",
                "+          sb.append(segment);",
                "+        }",
                "+      }",
                "+      path = sb.toString();",
                "+    }",
                "+    return BuckUnixPath.of(this, path);",
                "   }",
                "@@ -93,3 +141,3 @@ public class BuckFileSystem extends FileSystem {",
                "   public PathMatcher getPathMatcher(String syntaxAndPattern) {",
                "-    return defaultFileSystem.getPathMatcher(syntaxAndPattern);",
                "+    return getDefaultFileSystem().getPathMatcher(syntaxAndPattern);",
                "   }",
                "@@ -98,3 +146,3 @@ public class BuckFileSystem extends FileSystem {",
                "   public UserPrincipalLookupService getUserPrincipalLookupService() {",
                "-    return defaultFileSystem.getUserPrincipalLookupService();",
                "+    return getDefaultFileSystem().getUserPrincipalLookupService();",
                "   }",
                "@@ -103,3 +151,3 @@ public class BuckFileSystem extends FileSystem {",
                "   public WatchService newWatchService() throws IOException {",
                "-    return defaultFileSystem.newWatchService();",
                "+    return getDefaultFileSystem().newWatchService();",
                "   }",
                "diff --git a/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystemProvider.java b/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystemProvider.java",
                "index 0cf305746e..1a5cab07d3 100644",
                "--- a/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystemProvider.java",
                "+++ b/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystemProvider.java",
                "@@ -20,2 +20,5 @@ import java.io.IOException;",
                " import java.net.URI;",
                "+import java.net.URISyntaxException;",
                "+import java.nio.channels.AsynchronousFileChannel;",
                "+import java.nio.channels.FileChannel;",
                " import java.nio.channels.SeekableByteChannel;",
                "@@ -27,2 +30,3 @@ import java.nio.file.FileStore;",
                " import java.nio.file.FileSystem;",
                "+import java.nio.file.FileSystemAlreadyExistsException;",
                " import java.nio.file.LinkOption;",
                "@@ -34,6 +38,12 @@ import java.nio.file.attribute.FileAttributeView;",
                " import java.nio.file.spi.FileSystemProvider;",
                "+import java.util.Iterator;",
                " import java.util.Map;",
                " import java.util.Set;",
                "+import java.util.concurrent.ExecutorService;",
                "-/** File system provider that replaces default HotSpot provider for Buck-specific optimizations */",
                "+/**",
                "+ * File system provider that replaces default Java provider for Buck-specific optimizations, mostly",
                "+ * memory footprint on Path implementation. The provider works like a wrapper, delegating most calls",
                "+ * to default FileSystemProvider by converting {@code BuckUnixPath} to java-default Path",
                "+ */",
                " public class BuckFileSystemProvider extends FileSystemProvider {",
                "@@ -41,2 +51,4 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "   private FileSystemProvider defaultProvider;",
                "+  private BuckFileSystem fileSystem;",
                "+  private FileSystem defaultFileSystem;",
                "@@ -44,2 +56,5 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "     this.defaultProvider = defaultProvider;",
                "+    this.defaultFileSystem = defaultProvider.getFileSystem(getRootURI(defaultProvider.getScheme()));",
                "+    String userDir = System.getProperty(\"user.dir\");",
                "+    fileSystem = new BuckFileSystem(this, userDir == null ? \"\" : userDir);",
                "   }",
                "@@ -47,6 +62,10 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "   /**",
                "-   * Returns the URI scheme that identifies this provider.",
                "-   *",
                "-   * @return The URI scheme",
                "+   * @return Default filesystem, i.e. filesystem that would be created if program started without",
                "+   *     filesystem override. This is used to delegate calls that do not need to be intercepted or",
                "+   *     replaced.",
                "    */",
                "+  FileSystem getDefaultFileSystem() {",
                "+    return defaultFileSystem;",
                "+  }",
                "+",
                "   @Override",
                "@@ -56,5 +75,42 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "+  private static URI getRootURI(String scheme) {",
                "+    try {",
                "+      return new URI(scheme, null, \"/\", null, null);",
                "+    } catch (URISyntaxException ex) {",
                "+      throw new IllegalArgumentException(ex);",
                "+    }",
                "+  }",
                "+",
                "+  private void checkUri(URI uri) {",
                "+    if (!uri.getScheme().equalsIgnoreCase(this.getScheme())) {",
                "+      throw new IllegalArgumentException(\"URI does not match this provider\");",
                "+    } else if (uri.getAuthority() != null) {",
                "+      throw new IllegalArgumentException(\"Authority component present\");",
                "+    } else if (uri.getPath() == null) {",
                "+      throw new IllegalArgumentException(\"Path component is undefined\");",
                "+    } else if (!uri.getPath().equals(\"/\")) {",
                "+      throw new IllegalArgumentException(\"Path component should be '/'\");",
                "+    } else if (uri.getQuery() != null) {",
                "+      throw new IllegalArgumentException(\"Query component present\");",
                "+    } else if (uri.getFragment() != null) {",
                "+      throw new IllegalArgumentException(\"Fragment component present\");",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Convert {@code path} to default java path implementation. This is required for default file",
                "+   * system / provider to work properly because it assumes Path to be an object of specific type",
                "+   * (more precisely, it has to be UnixPath for Sun Java implementation)",
                "+   */",
                "+  private Path asDefault(Path path) {",
                "+    if (path instanceof BuckUnixPath) {",
                "+      return ((BuckUnixPath) path).asDefault();",
                "+    }",
                "+    return path;",
                "+  }",
                "+",
                "   @Override",
                "-  public FileSystem newFileSystem(URI uri, Map<String, ?> env) throws IOException {",
                "-    return defaultProvider.newFileSystem(uri, env);",
                "+  public FileSystem newFileSystem(URI uri, Map<String, ?> env) {",
                "+    checkUri(uri);",
                "+    throw new FileSystemAlreadyExistsException();",
                "   }",
                "@@ -63,3 +119,4 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "   public FileSystem getFileSystem(URI uri) {",
                "-    return defaultProvider.getFileSystem(uri);",
                "+    checkUri(uri);",
                "+    return fileSystem;",
                "   }",
                "@@ -68,4 +125,3 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "   public Path getPath(URI uri) {",
                "-    // TODO: return proper path",
                "-    return defaultProvider.getPath(uri);",
                "+    return BuckUnixPath.of(fileSystem, defaultProvider.getPath(uri).toString());",
                "   }",
                "@@ -75,3 +131,3 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "       Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {",
                "-    return defaultProvider.newByteChannel(path, options, attrs);",
                "+    return defaultProvider.newByteChannel(asDefault(path), options, attrs);",
                "   }",
                "@@ -81,3 +137,33 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "       throws IOException {",
                "-    return newDirectoryStream(dir, filter);",
                "+    DirectoryStream<Path> defaultStream =",
                "+        defaultProvider.newDirectoryStream(asDefault(dir), filter);",
                "+",
                "+    // convert DirectoryStream<Path> to DirectoryStream<BuckUnixPath>",
                "+    return new DirectoryStream<Path>() {",
                "+      @Override",
                "+      public Iterator<Path> iterator() {",
                "+        return new Iterator<Path>() {",
                "+          private Iterator<Path> defaultIterator = defaultStream.iterator();",
                "+",
                "+          @Override",
                "+          public boolean hasNext() {",
                "+            return defaultIterator.hasNext();",
                "+          }",
                "+",
                "+          @Override",
                "+          public Path next() {",
                "+            Path next = defaultIterator.next();",
                "+            if (next instanceof BuckUnixPath) {",
                "+              return next;",
                "+            }",
                "+            return BuckUnixPath.of(fileSystem, next.toString());",
                "+          }",
                "+        };",
                "+      }",
                "+",
                "+      @Override",
                "+      public void close() throws IOException {",
                "+        defaultStream.close();",
                "+      }",
                "+    };",
                "   }",
                "@@ -86,3 +172,3 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "   public void createDirectory(Path dir, FileAttribute<?>... attrs) throws IOException {",
                "-    defaultProvider.createDirectory(dir, attrs);",
                "+    defaultProvider.createDirectory(asDefault(dir), attrs);",
                "   }",
                "@@ -91,3 +177,3 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "   public void delete(Path path) throws IOException {",
                "-    defaultProvider.delete(path);",
                "+    defaultProvider.delete(asDefault(path));",
                "   }",
                "@@ -96,3 +182,3 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "   public void copy(Path source, Path target, CopyOption... options) throws IOException {",
                "-    defaultProvider.copy(source, target, options);",
                "+    defaultProvider.copy(asDefault(source), asDefault(target), options);",
                "   }",
                "@@ -101,3 +187,3 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "   public void move(Path source, Path target, CopyOption... options) throws IOException {",
                "-    defaultProvider.move(source, target, options);",
                "+    defaultProvider.move(asDefault(source), asDefault(target), options);",
                "   }",
                "@@ -106,3 +192,3 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "   public boolean isSameFile(Path path, Path path2) throws IOException {",
                "-    return defaultProvider.isSameFile(path, path2);",
                "+    return defaultProvider.isSameFile(asDefault(path), asDefault(path2));",
                "   }",
                "@@ -111,3 +197,3 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "   public boolean isHidden(Path path) throws IOException {",
                "-    return defaultProvider.isHidden(path);",
                "+    return defaultProvider.isHidden(asDefault(path));",
                "   }",
                "@@ -116,3 +202,3 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "   public FileStore getFileStore(Path path) throws IOException {",
                "-    return defaultProvider.getFileStore(path);",
                "+    return defaultProvider.getFileStore(asDefault(path));",
                "   }",
                "@@ -121,3 +207,3 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "   public void checkAccess(Path path, AccessMode... modes) throws IOException {",
                "-    defaultProvider.checkAccess(path, modes);",
                "+    defaultProvider.checkAccess(asDefault(path), modes);",
                "   }",
                "@@ -127,3 +213,3 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "       Path path, Class<V> type, LinkOption... options) {",
                "-    return defaultProvider.getFileAttributeView(path, type, options);",
                "+    return defaultProvider.getFileAttributeView(asDefault(path), type, options);",
                "   }",
                "@@ -133,3 +219,3 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "       Path path, Class<A> type, LinkOption... options) throws IOException {",
                "-    return defaultProvider.readAttributes(path, type, options);",
                "+    return defaultProvider.readAttributes(asDefault(path), type, options);",
                "   }",
                "@@ -139,3 +225,3 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "       throws IOException {",
                "-    return defaultProvider.readAttributes(path, attributes, options);",
                "+    return defaultProvider.readAttributes(asDefault(path), attributes, options);",
                "   }",
                "@@ -145,3 +231,36 @@ public class BuckFileSystemProvider extends FileSystemProvider {",
                "       throws IOException {",
                "-    defaultProvider.setAttribute(path, attribute, value, options);",
                "+    defaultProvider.setAttribute(asDefault(path), attribute, value, options);",
                "+  }",
                "+",
                "+  @Override",
                "+  public FileChannel newFileChannel(",
                "+      Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {",
                "+    return defaultProvider.newFileChannel(asDefault(path), options, attrs);",
                "+  }",
                "+",
                "+  @Override",
                "+  public AsynchronousFileChannel newAsynchronousFileChannel(",
                "+      Path path,",
                "+      Set<? extends OpenOption> options,",
                "+      ExecutorService executor,",
                "+      FileAttribute<?>... attrs)",
                "+      throws IOException {",
                "+    return defaultProvider.newAsynchronousFileChannel(asDefault(path), options, executor, attrs);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void createSymbolicLink(Path link, Path target, FileAttribute<?>... attrs)",
                "+      throws IOException {",
                "+    defaultProvider.createSymbolicLink(asDefault(link), asDefault(target), attrs);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void createLink(Path link, Path existing) throws IOException {",
                "+    defaultProvider.createLink(asDefault(link), asDefault(existing));",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path readSymbolicLink(Path link) throws IOException {",
                "+    Path defaultPath = defaultProvider.readSymbolicLink(asDefault(link));",
                "+    return BuckUnixPath.of(fileSystem, defaultPath.toString());",
                "   }",
                "diff --git a/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPath.java b/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPath.java",
                "new file mode 100644",
                "index 0000000000..91d53cb685",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPath.java",
                "@@ -0,0 +1,523 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.cli.bootstrapper.filesystem;",
                "+",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+import java.net.URI;",
                "+import java.nio.file.FileSystem;",
                "+import java.nio.file.InvalidPathException;",
                "+import java.nio.file.LinkOption;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.ProviderMismatchException;",
                "+import java.nio.file.WatchEvent;",
                "+import java.nio.file.WatchEvent.Kind;",
                "+import java.nio.file.WatchEvent.Modifier;",
                "+import java.nio.file.WatchKey;",
                "+import java.nio.file.WatchService;",
                "+import java.util.Arrays;",
                "+import java.util.HashSet;",
                "+import java.util.Iterator;",
                "+import java.util.NoSuchElementException;",
                "+import java.util.Objects;",
                "+import java.util.Set;",
                "+import java.util.Stack;",
                "+import java.util.stream.IntStream;",
                "+import java.util.stream.Stream;",
                "+",
                "+/** Buck-specific implementation of java.nio.file.Path optimized for memory footprint */",
                "+class BuckUnixPath implements Path {",
                "+  private final String[] segments;",
                "+  private final BuckFileSystem fs;",
                "+",
                "+  BuckUnixPath(BuckFileSystem fs, String[] segments, boolean intern) {",
                "+    this.fs = fs;",
                "+    String[] internedSegments;",
                "+    if (!intern) {",
                "+      internedSegments = segments;",
                "+    } else {",
                "+      internedSegments = new String[segments.length];",
                "+      // using plain old loops for performance",
                "+      for (int i = 0; i < segments.length; i++) {",
                "+        internedSegments[i] = segments[i].intern();",
                "+      }",
                "+    }",
                "+    this.segments = internedSegments;",
                "+  }",
                "+",
                "+  /**",
                "+   * Create a new instance of BuckUnixPath. The implementation may use interning.",
                "+   *",
                "+   * @param fs Filesystem that created this instance",
                "+   * @param path String representation of a path",
                "+   */",
                "+  public static BuckUnixPath of(BuckFileSystem fs, String path) {",
                "+    if (path.isEmpty()) {",
                "+      return fs.getEmptyPath();",
                "+    }",
                "+    if (path.equals(\"/\")) {",
                "+      return fs.getRootDirectory();",
                "+    }",
                "+    return new BuckUnixPath(fs, normalizeAndCheck(path).split(\"/\"), true);",
                "+  }",
                "+",
                "+  /** Return Java default implementation of Path inferred from current instance */",
                "+  Path asDefault() {",
                "+    return fs.getDefaultFileSystem().getPath(toString());",
                "+  }",
                "+",
                "+  /** Remove redundant slashes and check input for invalid characters */",
                "+  private static String normalizeAndCheck(String input) {",
                "+    int n = input.length();",
                "+    char prevChar = 0;",
                "+    for (int i = 0; i < n; i++) {",
                "+      char c = input.charAt(i);",
                "+      if ((c == '/') && (prevChar == '/')) {",
                "+        return normalize(input, n, i - 1);",
                "+      }",
                "+      checkNotNul(input, c);",
                "+      prevChar = c;",
                "+    }",
                "+    if (prevChar == '/') {",
                "+      return normalize(input, n, n - 1);",
                "+    }",
                "+    return input;",
                "+  }",
                "+",
                "+  private static void checkNotNul(String input, char c) {",
                "+    if (c == '\\u0000') {",
                "+      throw new InvalidPathException(input, \"Nul character not allowed\");",
                "+    }",
                "+  }",
                "+",
                "+  private static String normalize(String input, int len, int off) {",
                "+    if (len == 0) {",
                "+      return input;",
                "+    }",
                "+    int n = len;",
                "+    while ((n > 0) && (input.charAt(n - 1) == '/')) {",
                "+      n--;",
                "+    }",
                "+    if (n == 0) {",
                "+      return \"/\";",
                "+    }",
                "+    StringBuilder sb = new StringBuilder(input.length());",
                "+    if (off > 0) {",
                "+      sb.append(input.substring(0, off));",
                "+    }",
                "+    char prevChar = 0;",
                "+    for (int i = off; i < n; i++) {",
                "+      char c = input.charAt(i);",
                "+      if ((c == '/') && (prevChar == '/')) {",
                "+        continue;",
                "+      }",
                "+      checkNotNul(input, c);",
                "+      sb.append(c);",
                "+      prevChar = c;",
                "+    }",
                "+    return sb.toString();",
                "+  }",
                "+",
                "+  // Convert given path to BuckUnixPath",
                "+  private BuckUnixPath toUnixPath(Path obj) {",
                "+    if (obj == null) {",
                "+      throw new NullPointerException();",
                "+    }",
                "+",
                "+    if (obj instanceof BuckUnixPath) {",
                "+      return (BuckUnixPath) obj;",
                "+    }",
                "+",
                "+    FileSystem otherFs = obj.getFileSystem();",
                "+    if (!fs.equals(otherFs) && !fs.getDefaultFileSystem().equals(otherFs)) {",
                "+      throw new ProviderMismatchException(",
                "+          \"Unable to convert Path to BuckUnixPath because file systems do not match\");",
                "+    }",
                "+    return BuckUnixPath.of(fs, obj.toString());",
                "+  }",
                "+",
                "+  /** @return {@code true} if this path is an empty path */",
                "+  private boolean isEmpty() {",
                "+    return segments.length == 0;",
                "+  }",
                "+",
                "+  /** @return an empty path */",
                "+  private BuckUnixPath emptyPath() {",
                "+    return fs.getEmptyPath();",
                "+  }",
                "+",
                "+  @Override",
                "+  public FileSystem getFileSystem() {",
                "+    return fs;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path getRoot() {",
                "+    if (segments.length > 0 && segments[0].isEmpty()) {",
                "+      return fs.getRootDirectory();",
                "+    }",
                "+    return null;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path getFileName() {",
                "+    if (isEmpty()) {",
                "+      return null;",
                "+    }",
                "+    return new BuckUnixPath(fs, new String[] {segments[segments.length - 1]}, false);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path getParent() {",
                "+    if (segments.length < 2) {",
                "+      return null;",
                "+    }",
                "+    if (segments[segments.length - 2].isEmpty()) {",
                "+      return getRoot();",
                "+    }",
                "+    return new BuckUnixPath(fs, Arrays.copyOf(segments, segments.length - 1), false);",
                "+  }",
                "+",
                "+  @Override",
                "+  public int getNameCount() {",
                "+    if (isEmpty()) {",
                "+      return 0;",
                "+    }",
                "+    return segments.length - (isAbsolute() ? 1 : 0);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path getName(int index) {",
                "+    if (index < 0) {",
                "+      throw new IllegalArgumentException();",
                "+    }",
                "+",
                "+    index += isAbsolute() ? 1 : 0;",
                "+",
                "+    if (index >= segments.length) {",
                "+      throw new IllegalArgumentException();",
                "+    }",
                "+",
                "+    return new BuckUnixPath(fs, new String[] {segments[index]}, false);",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuckUnixPath subpath(int beginIndex, int endIndex) {",
                "+    if (beginIndex < 0) {",
                "+      throw new IllegalArgumentException();",
                "+    }",
                "+",
                "+    int offset = isAbsolute() ? 1 : 0;",
                "+    beginIndex += offset;",
                "+    endIndex += offset;",
                "+",
                "+    if (beginIndex >= segments.length) {",
                "+      throw new IllegalArgumentException();",
                "+    }",
                "+    if (endIndex > segments.length) {",
                "+      throw new IllegalArgumentException();",
                "+    }",
                "+    if (beginIndex >= endIndex) {",
                "+      throw new IllegalArgumentException();",
                "+    }",
                "+",
                "+    return new BuckUnixPath(fs, Arrays.copyOfRange(segments, beginIndex, endIndex), false);",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean isAbsolute() {",
                "+    return (!isEmpty() && segments[0].isEmpty());",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path resolve(Path obj) {",
                "+    BuckUnixPath other = toUnixPath(obj);",
                "+",
                "+    if (other.isEmpty()) {",
                "+      return this;",
                "+    }",
                "+",
                "+    if (isEmpty() || other.isAbsolute()) {",
                "+      return other;",
                "+    }",
                "+",
                "+    return new BuckUnixPath(fs, concatSegments(segments, other.segments), false);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path resolve(String other) {",
                "+    return resolve(fs.getPath(other));",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path resolveSibling(Path other) {",
                "+    if (other == null) {",
                "+      throw new NullPointerException();",
                "+    }",
                "+    Path parent = getParent();",
                "+    return parent == null ? other : parent.resolve(other);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path resolveSibling(String other) {",
                "+    return resolveSibling(fs.getPath(other));",
                "+  }",
                "+",
                "+  private String[] concatSegments(String[] first, String[] second) {",
                "+    return Stream.concat(Arrays.stream(first), Arrays.stream(second)).toArray(String[]::new);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path relativize(Path obj) {",
                "+    BuckUnixPath other = toUnixPath(obj);",
                "+",
                "+    if (other.equals(this)) {",
                "+      return emptyPath();",
                "+    }",
                "+",
                "+    // can only relativize paths of the same type",
                "+    if (this.isAbsolute() != other.isAbsolute()) {",
                "+      throw new IllegalArgumentException(\"'other' is different type of Path\");",
                "+    }",
                "+",
                "+    // this path is the empty path",
                "+    if (this.isEmpty()) {",
                "+      return other;",
                "+    }",
                "+",
                "+    int nameCount = getNameCount();",
                "+    int otherNameCount = other.getNameCount();",
                "+",
                "+    // skip matching names",
                "+    int minCount = (nameCount > otherNameCount) ? otherNameCount : nameCount;",
                "+    int i = 0;",
                "+    while (i < minCount) {",
                "+      if (!getName(i).equals(other.getName(i))) {",
                "+        break;",
                "+      }",
                "+      i++;",
                "+    }",
                "+",
                "+    int dotdots = nameCount - i;",
                "+    if (i < otherNameCount) {",
                "+      // remaining name components in other",
                "+      BuckUnixPath remainder = other.subpath(i, otherNameCount);",
                "+      if (dotdots == 0) {",
                "+        return remainder;",
                "+      }",
                "+",
                "+      // result is a  \"../\" for each remaining name in base",
                "+      // followed by the remaining names in other. If the remainder is",
                "+      // the empty path then we don't add the final trailing slash.",
                "+      String[] newSegments = new String[dotdots];",
                "+      Arrays.fill(newSegments, \"..\");",
                "+      return new BuckUnixPath(fs, concatSegments(newSegments, remainder.segments), true);",
                "+    }",
                "+",
                "+    // no remaining names in other so result is simply a sequence of \"..\"",
                "+    String[] newSegments = new String[dotdots];",
                "+    Arrays.fill(newSegments, \"..\");",
                "+    return new BuckUnixPath(fs, newSegments, true);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path normalize() {",
                "+    if (isEmpty()) {",
                "+      return this;",
                "+    }",
                "+",
                "+    Set<Integer> ignore = new HashSet<>();",
                "+    Stack<Integer> realNames = new Stack<>();",
                "+",
                "+    for (int i = 0; i < segments.length; i++) {",
                "+      String segment = segments[i];",
                "+      if (segment.equals(\".\")) {",
                "+        ignore.add(i);",
                "+      } else if (segment.equals(\"..\")) {",
                "+        if (!realNames.empty()) {",
                "+          ignore.add(realNames.pop());",
                "+          ignore.add(i);",
                "+        }",
                "+      } else if (!segment.isEmpty()) {",
                "+        realNames.push(i);",
                "+      }",
                "+    }",
                "+",
                "+    if (ignore.isEmpty()) {",
                "+      return this;",
                "+    }",
                "+",
                "+    String[] filtered =",
                "+        IntStream.range(0, segments.length)",
                "+            .filter(i -> !ignore.contains(i))",
                "+            .mapToObj(i -> segments[i])",
                "+            .toArray(String[]::new);",
                "+",
                "+    return new BuckUnixPath(fs, filtered, false);",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean startsWith(Path other) {",
                "+    return compareSegmentsFrom(other, true);",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean endsWith(Path other) {",
                "+    return compareSegmentsFrom(other, false);",
                "+  }",
                "+",
                "+  private boolean compareSegmentsFrom(Path other, boolean startOrEnd) {",
                "+    if (!(Objects.requireNonNull(other) instanceof BuckUnixPath)) {",
                "+      return false;",
                "+    }",
                "+",
                "+    BuckUnixPath that = toUnixPath(other);",
                "+",
                "+    if (isEmpty() || that.isEmpty()) {",
                "+      if (isEmpty() && that.isEmpty()) {",
                "+        return true;",
                "+      }",
                "+      return false;",
                "+    }",
                "+",
                "+    if (that.segments.length > segments.length) {",
                "+      return false;",
                "+    }",
                "+",
                "+    int start = startOrEnd ? 0 : (segments.length - that.segments.length);",
                "+",
                "+    for (int i = 0; i < that.segments.length; i++) {",
                "+      if (!segments[i + start].equals(that.segments[i])) {",
                "+        return false;",
                "+      }",
                "+    }",
                "+",
                "+    return true;",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean startsWith(String other) {",
                "+    return startsWith(fs.getPath(other));",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean endsWith(String other) {",
                "+    return endsWith(fs.getPath(other));",
                "+  }",
                "+",
                "+  @Override",
                "+  public int compareTo(Path other) {",
                "+    return toString().compareTo(other.toString());",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean equals(Object ob) {",
                "+    if ((ob != null) && (ob instanceof BuckUnixPath)) {",
                "+      return Arrays.equals(segments, ((BuckUnixPath) ob).segments);",
                "+    }",
                "+    return false;",
                "+  }",
                "+",
                "+  @Override",
                "+  public int hashCode() {",
                "+    return Arrays.hashCode(segments);",
                "+  }",
                "+",
                "+  @Override",
                "+  public String toString() {",
                "+    if (isEmpty()) {",
                "+      return \"\";",
                "+    }",
                "+    if (isAbsolute() && segments.length == 1) {",
                "+      return \"/\";",
                "+    }",
                "+    return String.join(\"/\", segments);",
                "+  }",
                "+",
                "+  // resolve current path against default path",
                "+  private Path resolveDefault() {",
                "+    BuckUnixPath defDir = fs.getDefaultDirectory();",
                "+    return defDir.resolve(this);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path toAbsolutePath() {",
                "+    if (isAbsolute()) {",
                "+      return this;",
                "+    }",
                "+",
                "+    return resolveDefault();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path toRealPath(LinkOption... options) throws IOException {",
                "+    // TODO(buck_team): reimplement this",
                "+    Path path = asDefault().toRealPath(options);",
                "+    return BuckUnixPath.of(fs, path.toString());",
                "+  }",
                "+",
                "+  @Override",
                "+  public File toFile() {",
                "+    return new File(toString());",
                "+  }",
                "+",
                "+  @Override",
                "+  public URI toUri() {",
                "+    // TODO(buck_team): do not recourse to default Path implementation",
                "+    return asDefault().toUri();",
                "+  }",
                "+",
                "+  @Override",
                "+  public WatchKey register(",
                "+      WatchService watcher, WatchEvent.Kind<?>[] events, WatchEvent.Modifier... modifiers)",
                "+      throws IOException {",
                "+    // TODO(buck_team): do not recourse to default Path implementation",
                "+    return asDefault().register(watcher, events, modifiers);",
                "+  }",
                "+",
                "+  @Override",
                "+  public WatchKey register(WatchService watcher, Kind<?>... events) throws IOException {",
                "+    return this.register(watcher, events, new Modifier[0]);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Iterator<Path> iterator() {",
                "+    return new Iterator<Path>() {",
                "+      private int i = 0;",
                "+",
                "+      @Override",
                "+      public boolean hasNext() {",
                "+        return i < getNameCount();",
                "+      }",
                "+",
                "+      @Override",
                "+      public Path next() {",
                "+        if (i >= getNameCount()) {",
                "+          throw new NoSuchElementException();",
                "+        }",
                "+        Path current = getName(i);",
                "+        i++;",
                "+        return current;",
                "+      }",
                "+",
                "+      @Override",
                "+      public void remove() {",
                "+        throw new UnsupportedOperationException();",
                "+      }",
                "+    };",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/cli/bootstrapper/filesystem/BUCK b/test/com/facebook/buck/cli/bootstrapper/filesystem/BUCK",
                "new file mode 100644",
                "index 0000000000..c72ba6e2e6",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cli/bootstrapper/filesystem/BUCK",
                "@@ -0,0 +1,9 @@",
                "+load(\"//tools/build_rules:java_rules.bzl\", \"standard_java_test\")",
                "+",
                "+standard_java_test(",
                "+    name = \"filesystem\",",
                "+    deps = [",
                "+        \"//src/com/facebook/buck/cli/bootstrapper/filesystem:filesystem_lib\",",
                "+        \"//third-party/java/junit:junit\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPathTest.java b/test/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPathTest.java",
                "new file mode 100644",
                "index 0000000000..730720da42",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPathTest.java",
                "@@ -0,0 +1,234 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.cli.bootstrapper.filesystem;",
                "+",
                "+import static org.junit.Assert.assertArrayEquals;",
                "+import static org.junit.Assert.assertEquals;",
                "+import static org.junit.Assert.assertTrue;",
                "+",
                "+import java.net.URI;",
                "+import java.nio.file.FileSystems;",
                "+import java.nio.file.Path;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import org.junit.Test;",
                "+",
                "+public class BuckUnixPathTest {",
                "+",
                "+  private BuckUnixPath createPath(String pathString) {",
                "+    BuckFileSystemProvider provider =",
                "+        new BuckFileSystemProvider(FileSystems.getDefault().provider());",
                "+    Path path = provider.getFileSystem(URI.create(\"file:///\")).getPath(pathString);",
                "+    assertTrue(path instanceof BuckUnixPath);",
                "+    return (BuckUnixPath) path;",
                "+  }",
                "+",
                "+  @Test",
                "+  public void toStringMethod() {",
                "+    String data = \"/\";",
                "+    Path path = createPath(data);",
                "+    assertEquals(data, path.toString());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void compareToMethod() {",
                "+    String data1 = \"/\";",
                "+    String data2 = \"/\";",
                "+    int expected = 0;",
                "+",
                "+    Path path1 = createPath(data1);",
                "+    Path path2 = createPath(data2);",
                "+",
                "+    assertEquals(expected, path1.compareTo(path2));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void endsWithMethod() {",
                "+    String data1 = \"/path/1/2\";",
                "+    String data2 = \"1/2\";",
                "+    boolean expected = true;",
                "+",
                "+    Path path1 = createPath(data1);",
                "+    Path path2 = createPath(data2);",
                "+",
                "+    assertEquals(expected, path1.endsWith(path2));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void equalsMethod() {",
                "+    String data1 = \"/path/to/something\";",
                "+    String data2 = \"/path/to/something\";",
                "+    boolean expected = true;",
                "+",
                "+    Path path1 = createPath(data1);",
                "+    Path path2 = createPath(data2);",
                "+",
                "+    assertEquals(expected, path1.equals(path2));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void getFileNameMethod() {",
                "+    String data = \"/path/to/something\";",
                "+    String expected = \"something\";",
                "+",
                "+    Path path = createPath(data);",
                "+",
                "+    assertEquals(expected, path.getFileName().toString());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void getFileSystemMethod() {",
                "+    String data = \"/path/to/something\";",
                "+",
                "+    Path path = createPath(data);",
                "+",
                "+    assertTrue(path.getFileSystem() instanceof BuckFileSystem);",
                "+  }",
                "+",
                "+  @Test",
                "+  public void getNameMethod() {",
                "+    String data = \"/path/to/something\";",
                "+    int index = 1;",
                "+    String expected = \"to\";",
                "+",
                "+    Path path = createPath(data);",
                "+",
                "+    assertEquals(expected, path.getName(index).toString());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void getNameCountMethod() {",
                "+    String data = \"/path/to/something\";",
                "+    int expected = 3;",
                "+",
                "+    Path path = createPath(data);",
                "+",
                "+    assertEquals(expected, path.getNameCount());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void getParentMethod() {",
                "+    String data = \"/path/to/something\";",
                "+    String expected = \"/path/to\";",
                "+",
                "+    Path path = createPath(data);",
                "+",
                "+    assertEquals(expected, path.getParent().toString());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void getRootMethod() {",
                "+    String data = \"/path/to/something\";",
                "+    String expected = \"/\";",
                "+",
                "+    Path path = createPath(data);",
                "+",
                "+    assertEquals(expected, path.getRoot().toString());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void hashcodeMethod() {",
                "+    String data1 = \"/\";",
                "+    String data2 = \"/\";",
                "+",
                "+    Path path1 = createPath(data1);",
                "+    Path path2 = createPath(data2);",
                "+",
                "+    assertEquals(path1.hashCode(), path2.hashCode());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void isAbsoluteMethod() {",
                "+    String data = \"/path/to/something\";",
                "+    boolean expected = true;",
                "+",
                "+    Path path = createPath(data);",
                "+",
                "+    assertEquals(expected, path.isAbsolute());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void iteratorMethod() {",
                "+    String data = \"/path/to/something\";",
                "+    String[] expected = {\"path\", \"to\", \"something\"};",
                "+",
                "+    Path path = createPath(data);",
                "+",
                "+    List<Path> list = new ArrayList<>();",
                "+    path.iterator().forEachRemaining(list::add);",
                "+",
                "+    assertArrayEquals(expected, list.stream().map(Path::toString).toArray(String[]::new));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void normalizeMethod() {",
                "+    String data = \"/path/to/something/../something/.\";",
                "+    String expected = \"/path/to/something\";",
                "+",
                "+    Path path = createPath(data);",
                "+",
                "+    assertEquals(expected, path.normalize().toString());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void relativizeMethod() {",
                "+    String data1 = \"/path/to/something/\";",
                "+    String data2 = \"/path/to\";",
                "+    String expected = \"..\";",
                "+",
                "+    Path path1 = createPath(data1);",
                "+    Path path2 = createPath(data2);",
                "+",
                "+    assertEquals(expected, path1.relativize(path2).toString());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void resolveMethod() {",
                "+    String data1 = \"/path/to\";",
                "+    String data2 = \"something\";",
                "+    String expected = \"/path/to/something\";",
                "+",
                "+    Path path1 = createPath(data1);",
                "+    Path path2 = createPath(data2);",
                "+",
                "+    assertEquals(expected, path1.resolve(path2).toString());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void startsWithMethod() {",
                "+    String data1 = \"/path/1/2\";",
                "+    String data2 = \"/path/1\";",
                "+    boolean expected = true;",
                "+",
                "+    Path path1 = createPath(data1);",
                "+    Path path2 = createPath(data2);",
                "+",
                "+    assertEquals(expected, path1.startsWith(path2));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void subpathMethod() {",
                "+    String data = \"/path/to/something/great\";",
                "+    int beginIndex = 1;",
                "+    int endIndex = 3;",
                "+    String expected = \"to/something\";",
                "+",
                "+    Path path = createPath(data);",
                "+",
                "+    assertEquals(expected, path.subpath(beginIndex, endIndex).toString());",
                "+  }",
                "+}"
            ],
            "changed_files": [
                "programs/buck_tool.py",
                "src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystem.java",
                "src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystemProvider.java",
                "src/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPath.java",
                "test/com/facebook/buck/cli/bootstrapper/filesystem/BUCK",
                "test/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPathTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: java",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "3241accf75f8b5c37dc7b2b2f829017d1df5076e",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521763068,
            "hunks": 1,
            "message": "Reduce code nesting. Test Plan: CI Reviewed By: styurin fbshipit-source-id: 03bb6ad",
            "diff": [
                "diff --git a/src/com/facebook/buck/cli/Main.java b/src/com/facebook/buck/cli/Main.java",
                "index fa82c9a79e..6fff064823 100644",
                "--- a/src/com/facebook/buck/cli/Main.java",
                "+++ b/src/com/facebook/buck/cli/Main.java",
                "@@ -444,5 +444,3 @@ public final class Main {",
                "       exitCode = ExitCode.SIGNAL_INTERRUPT;",
                "-      if (context.isPresent()) {",
                "-        context.get().getNGServer().shutdown(false);",
                "-      }",
                "+      context.ifPresent(ngContext -> ngContext.getNGServer().shutdown(false));",
                "     } catch (BuckIsDyingException e) {"
            ],
            "changed_files": [
                "src/com/facebook/buck/cli/Main.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "54e9debc120647a0c0d6fdc96690ac94d6a28867",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521647562,
            "hunks": 2,
            "message": "Better error message on duplicate rules Summary: Before this diff parser output full rule definition with all attributes incuded unset and it was hard to find which rule exactly was redefined. Now it prints rule name first. Test Plan: CI Reviewed By: styurin fbshipit-source-id: 874d34f",
            "diff": [
                "diff --git a/python-dsl/buck_parser/buck.py b/python-dsl/buck_parser/buck.py",
                "index 8838773479..ee40da28df 100644",
                "--- a/python-dsl/buck_parser/buck.py",
                "+++ b/python-dsl/buck_parser/buck.py",
                "@@ -396,4 +396,4 @@ def add_rule(rule, build_env):",
                "     if rule_name in build_env.rules:",
                "-        raise ValueError('Duplicate rule definition found.  Found %s and %s' %",
                "-                         (rule, build_env.rules[rule_name]))",
                "+        raise ValueError('Duplicate rule definition \\'%s\\' found.  Found %s and %s' %",
                "+                         (rule_name, rule, build_env.rules[rule_name]))",
                "     rule['buck.base_path'] = build_env.base_path",
                "diff --git a/test/com/facebook/buck/parser/ParserTest.java b/test/com/facebook/buck/parser/ParserTest.java",
                "index 72622d4468..b921ebf053 100644",
                "--- a/test/com/facebook/buck/parser/ParserTest.java",
                "+++ b/test/com/facebook/buck/parser/ParserTest.java",
                "@@ -437,3 +437,3 @@ public class ParserTest {",
                "     thrown.expect(BuildFileParseException.class);",
                "-    thrown.expectMessage(\"Duplicate rule definition found.\");",
                "+    thrown.expectMessage(\"Duplicate rule definition 'cake' found.\");"
            ],
            "changed_files": [
                "python-dsl/buck_parser/buck.py",
                "test/com/facebook/buck/parser/ParserTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: parser",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, parser",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "5c994b11b98a30d72d9c858f8da5f7931cb9d870",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522288292,
            "hunks": 1,
            "message": "Replace lambda with a method reference. Summary: Small nit that I noticed while reading the codebase... Reviewed By: styurin fbshipit-source-id: 1bc211e",
            "diff": [
                "diff --git a/src/com/facebook/buck/io/WatchmanWatcher.java b/src/com/facebook/buck/io/WatchmanWatcher.java",
                "index d771be681b..e038b63f45 100644",
                "--- a/src/com/facebook/buck/io/WatchmanWatcher.java",
                "+++ b/src/com/facebook/buck/io/WatchmanWatcher.java",
                "@@ -107,3 +107,3 @@ public class WatchmanWatcher {",
                "         fileChangeEventBus,",
                "-        () -> watchman.createClient(),",
                "+        watchman::createClient,",
                "         DEFAULT_TIMEOUT_MILLIS,"
            ],
            "changed_files": [
                "src/com/facebook/buck/io/WatchmanWatcher.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fd6f857f111a95ba58ab946ff7e4a85a6c1e209d",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522693349,
            "hunks": 56,
            "message": "Replace PathFragment back to Path Summary: Using Skylarks' PathFragment is no longer an optimal strategy for memory management because of - In latest version PathFragment was rewritten and does not use fragments anymore, causing memory regression - Path implementation was optimized in Buck So let's use Path back again. Reviewed By: jtorkkola, ttsugriy fbshipit-source-id: cd98c11",
            "diff": [
                "diff --git a/src/com/facebook/buck/util/cache/JarContentHasher.java b/src/com/facebook/buck/util/cache/JarContentHasher.java",
                "index 608e1a1595..1b186c84d9 100644",
                "--- a/src/com/facebook/buck/util/cache/JarContentHasher.java",
                "+++ b/src/com/facebook/buck/util/cache/JarContentHasher.java",
                "@@ -18,3 +18,2 @@ package com.facebook.buck.util.cache;",
                " import com.google.common.collect.ImmutableMap;",
                "-import com.google.devtools.build.lib.vfs.PathFragment;",
                " import java.io.IOException;",
                "@@ -24,3 +23,3 @@ public interface JarContentHasher {",
                "-  PathFragment getJarRelativePath();",
                "+  Path getJarRelativePath();",
                "diff --git a/src/com/facebook/buck/util/cache/impl/DefaultFileHashCache.java b/src/com/facebook/buck/util/cache/impl/DefaultFileHashCache.java",
                "index f2d8b32643..f7a678293a 100644",
                "--- a/src/com/facebook/buck/util/cache/impl/DefaultFileHashCache.java",
                "+++ b/src/com/facebook/buck/util/cache/impl/DefaultFileHashCache.java",
                "@@ -28,3 +28,2 @@ import com.facebook.buck.util.cache.JarHashCodeAndFileType;",
                " import com.facebook.buck.util.cache.ProjectFileHashCache;",
                "-import com.facebook.buck.util.filesystem.PathFragments;",
                " import com.facebook.buck.util.hashing.PathHashing;",
                "@@ -200,4 +199,3 @@ public class DefaultFileHashCache implements ProjectFileHashCache {",
                "       return JarHashCodeAndFileType.ofArchive(",
                "-          getFileHashCode(path),",
                "-          new DefaultJarContentHasher(projectFilesystem, PathFragments.pathToFragment(path)));",
                "+          getFileHashCode(path), new DefaultJarContentHasher(projectFilesystem, path));",
                "     }",
                "@@ -305,4 +303,3 @@ public class DefaultFileHashCache implements ProjectFileHashCache {",
                "                   projectFilesystem,",
                "-                  PathFragments.pathToFragment(",
                "-                      projectFilesystem.getPathRelativeToProjectRoot(relativePath).get())));",
                "+                  projectFilesystem.getPathRelativeToProjectRoot(relativePath).get()));",
                "     } else {",
                "diff --git a/src/com/facebook/buck/util/cache/impl/DefaultJarContentHasher.java b/src/com/facebook/buck/util/cache/impl/DefaultJarContentHasher.java",
                "index 852a0df83f..3f979bbd64 100644",
                "--- a/src/com/facebook/buck/util/cache/impl/DefaultJarContentHasher.java",
                "+++ b/src/com/facebook/buck/util/cache/impl/DefaultJarContentHasher.java",
                "@@ -20,3 +20,2 @@ import com.facebook.buck.util.cache.HashCodeAndFileType;",
                " import com.facebook.buck.util.cache.JarContentHasher;",
                "-import com.facebook.buck.util.filesystem.PathFragments;",
                " import com.facebook.buck.util.zip.CustomJarOutputStream;",
                "@@ -25,3 +24,2 @@ import com.google.common.collect.ImmutableMap;",
                " import com.google.common.hash.HashCode;",
                "-import com.google.devtools.build.lib.vfs.PathFragment;",
                " import java.io.IOException;",
                "@@ -36,5 +34,5 @@ class DefaultJarContentHasher implements JarContentHasher {",
                "   private final ProjectFilesystem filesystem;",
                "-  private final PathFragment jarRelativePath;",
                "+  private final Path jarRelativePath;",
                "-  public DefaultJarContentHasher(ProjectFilesystem filesystem, PathFragment jarRelativePath) {",
                "+  public DefaultJarContentHasher(ProjectFilesystem filesystem, Path jarRelativePath) {",
                "     Preconditions.checkState(!jarRelativePath.isAbsolute());",
                "@@ -45,3 +43,3 @@ class DefaultJarContentHasher implements JarContentHasher {",
                "   @Override",
                "-  public PathFragment getJarRelativePath() {",
                "+  public Path getJarRelativePath() {",
                "     return jarRelativePath;",
                "@@ -51,3 +49,3 @@ class DefaultJarContentHasher implements JarContentHasher {",
                "   public ImmutableMap<Path, HashCodeAndFileType> getContentHashes() throws IOException {",
                "-    Manifest manifest = filesystem.getJarManifest(PathFragments.fragmentToPath(jarRelativePath));",
                "+    Manifest manifest = filesystem.getJarManifest(jarRelativePath);",
                "     if (manifest == null) {",
                "diff --git a/src/com/facebook/buck/util/cache/impl/FileSystemMapFileHashCache.java b/src/com/facebook/buck/util/cache/impl/FileSystemMapFileHashCache.java",
                "index 5e695de6c2..fbe57ecfe7 100644",
                "--- a/src/com/facebook/buck/util/cache/impl/FileSystemMapFileHashCache.java",
                "+++ b/src/com/facebook/buck/util/cache/impl/FileSystemMapFileHashCache.java",
                "@@ -24,3 +24,2 @@ import com.facebook.buck.util.cache.JarHashCodeAndFileType;",
                " import com.facebook.buck.util.filesystem.FileSystemMap;",
                "-import com.facebook.buck.util.filesystem.PathFragments;",
                " import com.google.common.hash.HashCode;",
                "@@ -41,6 +40,4 @@ class FileSystemMapFileHashCache implements FileHashCacheEngine {",
                "       ValueLoader<HashCodeAndFileType> hashLoader, ValueLoader<Long> sizeLoader) {",
                "-    this.loadingCache =",
                "-        new FileSystemMap<>(fragment -> hashLoader.load(PathFragments.fragmentToPath(fragment)));",
                "-    this.sizeCache =",
                "-        new FileSystemMap<>(fragment -> sizeLoader.load(PathFragments.fragmentToPath(fragment)));",
                "+    this.loadingCache = new FileSystemMap<>(fragment -> hashLoader.load(fragment));",
                "+    this.sizeCache = new FileSystemMap<>(fragment -> sizeLoader.load(fragment));",
                "   }",
                "diff --git a/src/com/facebook/buck/util/cache/impl/LimitedFileHashCacheEngine.java b/src/com/facebook/buck/util/cache/impl/LimitedFileHashCacheEngine.java",
                "index 9a2c00b4f6..1f9cde8b15 100644",
                "--- a/src/com/facebook/buck/util/cache/impl/LimitedFileHashCacheEngine.java",
                "+++ b/src/com/facebook/buck/util/cache/impl/LimitedFileHashCacheEngine.java",
                "@@ -24,3 +24,2 @@ import com.facebook.buck.util.cache.JarHashCodeAndFileType;",
                " import com.facebook.buck.util.filesystem.FileSystemMap;",
                "-import com.facebook.buck.util.filesystem.PathFragments;",
                " import com.google.common.base.Preconditions;",
                "@@ -29,3 +28,2 @@ import com.google.common.collect.Maps;",
                " import com.google.common.hash.HashCode;",
                "-import com.google.devtools.build.lib.vfs.PathFragment;",
                " import java.io.IOException;",
                "@@ -64,3 +62,3 @@ class LimitedFileHashCacheEngine implements FileHashCacheEngine {",
                "   private final class Data {",
                "-    private final PathFragment path;",
                "+    private final Path path;",
                "@@ -73,4 +71,4 @@ class LimitedFileHashCacheEngine implements FileHashCacheEngine {",
                "-    private Data(PathFragment path) {",
                "-      this.fileType = loadType(PathFragments.fragmentToPath(path));",
                "+    private Data(Path path) {",
                "+      this.fileType = loadType(path);",
                "       this.path = path;",
                "@@ -93,3 +91,2 @@ class LimitedFileHashCacheEngine implements FileHashCacheEngine {",
                "     private HashCodeAndFileType loadHashCodeAndFileType() {",
                "-      Path asPath = PathFragments.fragmentToPath(path);",
                "       switch (fileType) {",
                "@@ -97,4 +94,4 @@ class LimitedFileHashCacheEngine implements FileHashCacheEngine {",
                "         case FILE_TYPE_SYMLINK:",
                "-          HashCode loadedValue = fileHashLoader.load(asPath);",
                "-          if (isArchive(asPath)) {",
                "+          HashCode loadedValue = fileHashLoader.load(path);",
                "+          if (isArchive(path)) {",
                "             return JarHashCodeAndFileType.ofArchive(",
                "@@ -104,3 +101,3 @@ class LimitedFileHashCacheEngine implements FileHashCacheEngine {",
                "         case FILE_TYPE_DIRECTORY:",
                "-          HashCodeAndFileType loadedDirValue = dirHashLoader.load(asPath);",
                "+          HashCodeAndFileType loadedDirValue = dirHashLoader.load(path);",
                "           Preconditions.checkState(loadedDirValue.getType() == HashCodeAndFileType.TYPE_DIRECTORY);",
                "@@ -112,3 +109,3 @@ class LimitedFileHashCacheEngine implements FileHashCacheEngine {",
                "     private long loadSize() {",
                "-      return sizeLoader.load(PathFragments.fragmentToPath(path));",
                "+      return sizeLoader.load(path);",
                "     }",
                "diff --git a/src/com/facebook/buck/util/filesystem/FileSystemMap.java b/src/com/facebook/buck/util/filesystem/FileSystemMap.java",
                "index db924a9419..9eabf547d9 100644",
                "--- a/src/com/facebook/buck/util/filesystem/FileSystemMap.java",
                "+++ b/src/com/facebook/buck/util/filesystem/FileSystemMap.java",
                "@@ -20,4 +20,4 @@ import com.google.common.base.Preconditions;",
                " import com.google.common.collect.ImmutableMap;",
                "-import com.google.devtools.build.lib.vfs.PathFragment;",
                " import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                " import java.util.HashMap;",
                "@@ -56,3 +56,3 @@ public class FileSystemMap<T> {",
                "   public interface ValueLoader<T> {",
                "-    T load(PathFragment path);",
                "+    T load(Path path);",
                "   }",
                "@@ -80,5 +80,5 @@ public class FileSystemMap<T> {",
                "-    private final PathFragment key;",
                "+    private final Path key;",
                "-    private Entry(PathFragment path) {",
                "+    private Entry(Path path) {",
                "       // We're creating an empty node here, so it is associated with no value.",
                "@@ -87,3 +87,3 @@ public class FileSystemMap<T> {",
                "-    private Entry(PathFragment path, @Nullable T value) {",
                "+    private Entry(Path path, @Nullable T value) {",
                "       this.key = path;",
                "@@ -93,3 +93,3 @@ public class FileSystemMap<T> {",
                "     @VisibleForTesting",
                "-    PathFragment getKey() {",
                "+    Path getKey() {",
                "       return key;",
                "@@ -123,6 +123,5 @@ public class FileSystemMap<T> {",
                "-  @VisibleForTesting final Entry<T> root = new Entry<>(PathFragment.create(\"\"));",
                "+  @VisibleForTesting final Entry<T> root = new Entry<>(Paths.get(\"\"));",
                "-  @VisibleForTesting",
                "-  final ConcurrentHashMap<PathFragment, Entry<T>> map = new ConcurrentHashMap<>();",
                "+  @VisibleForTesting final ConcurrentHashMap<Path, Entry<T>> map = new ConcurrentHashMap<>();",
                "@@ -141,11 +140,6 @@ public class FileSystemMap<T> {",
                "   public void put(Path path, T value) {",
                "-    put(PathFragments.pathToFragment(path), value);",
                "-  }",
                "-",
                "-  /** @see #put(Path, Object) */",
                "-  public void put(PathFragment fragment, T value) {",
                "-    Entry<T> maybe = map.get(fragment);",
                "+    Entry<T> maybe = map.get(path);",
                "     if (maybe == null) {",
                "       synchronized (root) {",
                "-        maybe = map.computeIfAbsent(fragment, this::putEntry);",
                "+        maybe = map.computeIfAbsent(path, this::putEntry);",
                "       }",
                "@@ -157,9 +151,9 @@ public class FileSystemMap<T> {",
                "   // with the given path.",
                "-  private Entry<T> putEntry(PathFragment path) {",
                "+  private Entry<T> putEntry(Path path) {",
                "     synchronized (root) {",
                "       Entry<T> parent = root;",
                "-      PathFragment relPath = parent.getKey();",
                "-      for (String p : path.getSegments()) {",
                "-        relPath = relPath.getRelative(p);",
                "-        // Create the intermediate node only if it's missing.",
                "+      Path relPath = parent.getKey();",
                "+      for (Path p : path) {",
                "+        String pString = p.toString();",
                "+        relPath = Paths.get(relPath.toString(), pString);",
                "         if (parent.subLevels == null) {",
                "@@ -167,4 +161,8 @@ public class FileSystemMap<T> {",
                "         }",
                "-        PathFragment curPath = relPath; // cheat Java compiler to make it think curPath is final",
                "-        parent = parent.subLevels.computeIfAbsent(p, key -> new Entry<>(curPath));",
                "+        // Create the intermediate node only if it's missing.",
                "+        if (!parent.subLevels.containsKey(pString)) {",
                "+          Entry<T> newEntry = new Entry<>(relPath);",
                "+          parent.subLevels.put(pString, newEntry);",
                "+        }",
                "+        parent = parent.subLevels.get(pString);",
                "         // parent should never be null.",
                "@@ -290,8 +288,3 @@ public class FileSystemMap<T> {",
                "   public T get(Path path) {",
                "-    return get(PathFragments.pathToFragment(path));",
                "-  }",
                "-",
                "-  /** @see #get(Path) */",
                "-  public T get(PathFragment fragment) {",
                "-    Entry<T> entry = map.get(fragment);",
                "+    Entry<T> maybe = map.get(path);",
                "     // get() and remove() shouldn't overlap, but for performance reason (to hold the root lock for",
                "@@ -301,5 +294,5 @@ public class FileSystemMap<T> {",
                "     // even if the entry is removed meanwhile.",
                "-    if (entry == null) {",
                "+    if (maybe == null) {",
                "       synchronized (root) {",
                "-        entry = map.computeIfAbsent(fragment, this::putEntry);",
                "+        maybe = map.computeIfAbsent(path, this::putEntry);",
                "       }",
                "@@ -308,3 +301,3 @@ public class FileSystemMap<T> {",
                "     // value was never computed before (or has been removed).",
                "-    if (entry.value == null) {",
                "+    if (maybe.value == null) {",
                "       // It is possible that maybe.load() will call back into other methods on this FileSystemMap.",
                "@@ -313,6 +306,5 @@ public class FileSystemMap<T> {",
                "       Preconditions.checkState(!Thread.holdsLock(root));",
                "-      entry.load(loader);",
                "+      maybe.load(loader);",
                "     }",
                "-    return Preconditions.checkNotNull(",
                "-        entry.value, \"Should either be loaded or not null in the first place.\");",
                "+    return maybe.value;",
                "   }",
                "@@ -327,9 +319,3 @@ public class FileSystemMap<T> {",
                "   public T getIfPresent(Path path) {",
                "-    return getIfPresent(PathFragments.pathToFragment(path));",
                "-  }",
                "-",
                "-  /** @see #getIfPresent(Path) */",
                "-  @Nullable",
                "-  public T getIfPresent(PathFragment fragment) {",
                "-    Entry<T> entry = map.get(fragment);",
                "+    Entry<T> entry = map.get(path);",
                "     return entry == null ? null : entry.value;",
                "@@ -345,5 +331,4 @@ public class FileSystemMap<T> {",
                "         (k, v) -> {",
                "-          T value = v.value;",
                "-          if (value != null) {",
                "-            builder.put(PathFragments.fragmentToPath(k), value);",
                "+          if (v.value != null) {",
                "+            builder.put(k, v.value);",
                "           }",
                "diff --git a/test/com/facebook/buck/util/filesystem/FileSystemMapTest.java b/test/com/facebook/buck/util/filesystem/FileSystemMapTest.java",
                "index 02e5d37d16..205ab15371 100644",
                "--- a/test/com/facebook/buck/util/filesystem/FileSystemMapTest.java",
                "+++ b/test/com/facebook/buck/util/filesystem/FileSystemMapTest.java",
                "@@ -26,3 +26,2 @@ import static org.junit.Assert.assertTrue;",
                " import com.facebook.buck.util.filesystem.FileSystemMap.Entry;",
                "-import com.google.devtools.build.lib.vfs.PathFragment;",
                " import java.nio.file.Path;",
                "@@ -47,4 +46,4 @@ public class FileSystemMapTest {",
                "     assertTrue(file.getWithoutLoading());",
                "-    assertEquals(fsMap.map.size(), 1);",
                "-    assertTrue(fsMap.map.get(PathFragments.pathToFragment(path)).getWithoutLoading());",
                "+    assertEquals(1, fsMap.map.size());",
                "+    assertTrue(fsMap.map.get(path).getWithoutLoading());",
                "   }",
                "@@ -62,3 +61,3 @@ public class FileSystemMapTest {",
                "     fsMap.put(path, true);",
                "-    assertEquals(fsMap.root.subLevels.get(\"usr\").size(), 0);",
                "+    assertEquals(0, fsMap.root.subLevels.get(\"usr\").size());",
                "     Entry<Boolean> file =",
                "@@ -66,4 +65,4 @@ public class FileSystemMapTest {",
                "     assertTrue(file.getWithoutLoading());",
                "-    assertEquals(fsMap.map.size(), 2);",
                "-    assertTrue(fsMap.map.get(PathFragments.pathToFragment(path)).getWithoutLoading());",
                "+    assertEquals(2, fsMap.map.size());",
                "+    assertTrue(fsMap.map.get(path).getWithoutLoading());",
                "   }",
                "@@ -78,3 +77,3 @@ public class FileSystemMapTest {",
                "     FileSystemMap.Entry<Boolean> usr = fsMap.root.subLevels.get(\"usr\");",
                "-    Entry<Boolean> helloWorld = fsMap.map.get(PathFragments.pathToFragment(path));",
                "+    Entry<Boolean> helloWorld = fsMap.map.get(path);",
                "     assertTrue(helloWorld.getWithoutLoading());",
                "@@ -92,3 +91,3 @@ public class FileSystemMapTest {",
                "     assertEquals(fsMap.map.size(), 1);",
                "-    assertFalse(fsMap.map.get(PathFragments.pathToFragment(path)).getWithoutLoading());",
                "+    assertFalse(fsMap.map.get(path).getWithoutLoading());",
                "   }",
                "@@ -112,4 +111,4 @@ public class FileSystemMapTest {",
                "     assertTrue(file.getWithoutLoading());",
                "-    assertEquals(fsMap.map.size(), 2);",
                "-    assertTrue(fsMap.map.get(PathFragments.pathToFragment(path)).getWithoutLoading());",
                "+    assertEquals(2, fsMap.map.size());",
                "+    assertTrue(fsMap.map.get(path).getWithoutLoading());",
                "   }",
                "@@ -129,3 +128,3 @@ public class FileSystemMapTest {",
                "     assertFalse(fsMap.root.subLevels != null && fsMap.root.subLevels.containsKey(\"usr\"));",
                "-    assertEquals(fsMap.map.size(), 0);",
                "+    assertEquals(0, fsMap.map.size());",
                "   }",
                "@@ -144,4 +143,4 @@ public class FileSystemMapTest {",
                "     assertTrue(fsMap.root.subLevels.get(\"usr\").subLevels.containsKey(\"Yo.java\"));",
                "-    assertEquals(fsMap.map.size(), 1);",
                "-    assertTrue(fsMap.map.get(PathFragment.create(\"usr/Yo.java\")).getWithoutLoading());",
                "+    assertEquals(1, fsMap.map.size());",
                "+    assertTrue(fsMap.map.get(Paths.get(\"usr/Yo.java\")).getWithoutLoading());",
                "   }",
                "@@ -156,3 +155,3 @@ public class FileSystemMapTest {",
                "     assertEquals(0, fsMap.map.size());",
                "-    assertFalse(fsMap.map.containsKey(PathFragments.pathToFragment(path)));",
                "+    assertFalse(fsMap.map.containsKey(path));",
                "   }",
                "@@ -170,5 +169,5 @@ public class FileSystemMapTest {",
                "     assertFalse(fsMap.root.subLevels != null && fsMap.root.subLevels.containsKey(\"usr\"));",
                "-    assertFalse(fsMap.map.containsKey(PathFragments.pathToFragment(path)));",
                "-    assertFalse(fsMap.map.containsKey(PathFragment.create(\"usr/HelloWorld.java\")));",
                "-    assertFalse(fsMap.map.containsKey(PathFragment.create(\"usr/Yo.java\")));",
                "+    assertFalse(fsMap.map.containsKey(path));",
                "+    assertFalse(fsMap.map.containsKey(Paths.get(\"usr/HelloWorld.java\")));",
                "+    assertFalse(fsMap.map.containsKey(Paths.get(\"usr/Yo.java\")));",
                "   }",
                "@@ -180,8 +179,8 @@ public class FileSystemMapTest {",
                "     fsMap.put(Paths.get(\"usr/Yo.java\"), true);",
                "-    assertEquals(fsMap.root.size(), 1);",
                "-    assertEquals(fsMap.map.size(), 2);",
                "+    assertEquals(1, fsMap.root.size());",
                "+    assertEquals(2, fsMap.map.size());",
                "     fsMap.removeAll();",
                "-    assertEquals(fsMap.root.size(), 0);",
                "-    assertEquals(fsMap.map.size(), 0);",
                "+    assertEquals(0, fsMap.root.size());",
                "+    assertEquals(0, fsMap.map.size());",
                "   }",
                "@@ -203,3 +202,3 @@ public class FileSystemMapTest {",
                "     assertEquals(fsMap.root.size(), 1);",
                "-    assertTrue(fsMap.map.get(PathFragments.pathToFragment(path)).getWithoutLoading());",
                "+    assertTrue(fsMap.map.get(path).getWithoutLoading());",
                "   }",
                "@@ -213,3 +212,3 @@ public class FileSystemMapTest {",
                "     assertEquals(fsMap.root.size(), 1);",
                "-    assertTrue(fsMap.map.get(PathFragments.pathToFragment(path)).getWithoutLoading());",
                "+    assertTrue(fsMap.map.get(path).getWithoutLoading());",
                "   }",
                "@@ -229,3 +228,3 @@ public class FileSystemMapTest {",
                "     assertEquals(fsMap.map.size(), 2);",
                "-    assertTrue(fsMap.map.get(PathFragments.pathToFragment(path)).getWithoutLoading());",
                "+    assertTrue(fsMap.map.get(path).getWithoutLoading());",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/util/cache/JarContentHasher.java",
                "src/com/facebook/buck/util/cache/impl/DefaultFileHashCache.java",
                "src/com/facebook/buck/util/cache/impl/DefaultJarContentHasher.java",
                "src/com/facebook/buck/util/cache/impl/FileSystemMapFileHashCache.java",
                "src/com/facebook/buck/util/cache/impl/LimitedFileHashCacheEngine.java",
                "src/com/facebook/buck/util/filesystem/FileSystemMap.java",
                "test/com/facebook/buck/util/filesystem/FileSystemMapTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, cache",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7b1e922be44d137dc60d662b0ed957bdc5d5db00",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522390236,
            "hunks": 22,
            "message": "Use DI instead of constructing instances in parser class. Summary: This reduces parser class complexity and will enable us to reuse some data structures across parsers used for different cells in the future. Reviewed By: jtorkkola fbshipit-source-id: fe3d10a",
            "diff": [
                "diff --git a/src/com/facebook/buck/parser/ProjectBuildFileParserFactory.java b/src/com/facebook/buck/parser/ProjectBuildFileParserFactory.java",
                "index 37cff2e1fe..9c1f986883 100644",
                "--- a/src/com/facebook/buck/parser/ProjectBuildFileParserFactory.java",
                "+++ b/src/com/facebook/buck/parser/ProjectBuildFileParserFactory.java",
                "@@ -31,3 +31,5 @@ import com.facebook.buck.rules.Description;",
                " import com.facebook.buck.rules.coercer.TypeCoercerFactory;",
                "+import com.facebook.buck.skylark.parser.BuckGlobals;",
                " import com.facebook.buck.skylark.parser.ConsoleEventHandler;",
                "+import com.facebook.buck.skylark.parser.RuleFunctionFactory;",
                " import com.facebook.buck.skylark.parser.SkylarkProjectBuildFileParser;",
                "@@ -152,2 +154,3 @@ public class ProjectBuildFileParserFactory {",
                "     if (parserConfig.isPolyglotParsingEnabled()) {",
                "+      RuleFunctionFactory ruleFunctionFactory = new RuleFunctionFactory(typeCoercerFactory);",
                "       return HybridProjectBuildFileParser.using(",
                "@@ -161,3 +164,8 @@ public class ProjectBuildFileParserFactory {",
                "                   SkylarkFilesystem.using(cell.getFilesystem()),",
                "-                  typeCoercerFactory,",
                "+                  BuckGlobals.builder()",
                "+                      .setDisableImplicitNativeRules(",
                "+                          buildFileParserOptions.getDisableImplicitNativeRules())",
                "+                      .setDescriptions(buildFileParserOptions.getDescriptions())",
                "+                      .setRuleFunctionFactory(ruleFunctionFactory)",
                "+                      .build(),",
                "                   new ConsoleEventHandler(eventBus, EventKind.ALL_EVENTS))),",
                "diff --git a/src/com/facebook/buck/skylark/parser/AbstractBuckGlobals.java b/src/com/facebook/buck/skylark/parser/AbstractBuckGlobals.java",
                "index ed3af3ec4e..9e40b68d7b 100644",
                "--- a/src/com/facebook/buck/skylark/parser/AbstractBuckGlobals.java",
                "+++ b/src/com/facebook/buck/skylark/parser/AbstractBuckGlobals.java",
                "@@ -35,3 +35,2 @@ import com.google.devtools.build.lib.syntax.Mutability;",
                " import com.google.devtools.build.lib.syntax.Runtime;",
                "-import java.util.function.Function;",
                " import org.immutables.value.Value;",
                "@@ -77,3 +76,3 @@ abstract class AbstractBuckGlobals {",
                "   /** @return A Skylark rule function factory. */",
                "-  abstract Function<Description<?>, BuiltinFunction> getRuleFunctionFactory();",
                "+  abstract RuleFunctionFactory getRuleFunctionFactory();",
                "@@ -89,3 +88,3 @@ abstract class AbstractBuckGlobals {",
                "         .stream()",
                "-        .map(this.getRuleFunctionFactory())",
                "+        .map(getRuleFunctionFactory()::create)",
                "         .collect(ImmutableList.toImmutableList());",
                "diff --git a/src/com/facebook/buck/skylark/parser/RuleFunctionFactory.java b/src/com/facebook/buck/skylark/parser/RuleFunctionFactory.java",
                "index da689371ab..bb4716098f 100644",
                "--- a/src/com/facebook/buck/skylark/parser/RuleFunctionFactory.java",
                "+++ b/src/com/facebook/buck/skylark/parser/RuleFunctionFactory.java",
                "@@ -43,3 +43,3 @@ import java.util.stream.Collectors;",
                "  */",
                "-class RuleFunctionFactory {",
                "+public class RuleFunctionFactory {",
                "@@ -52,3 +52,3 @@ class RuleFunctionFactory {",
                "-  RuleFunctionFactory(TypeCoercerFactory typeCoercerFactory) {",
                "+  public RuleFunctionFactory(TypeCoercerFactory typeCoercerFactory) {",
                "     this.typeCoercerFactory = typeCoercerFactory;",
                "diff --git a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "index da785c63e5..356470f454 100644",
                "--- a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "+++ b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "@@ -25,3 +25,2 @@ import com.facebook.buck.parser.exceptions.BuildFileParseException;",
                " import com.facebook.buck.parser.options.ProjectBuildFileParserOptions;",
                "-import com.facebook.buck.rules.coercer.TypeCoercerFactory;",
                " import com.facebook.buck.skylark.function.Glob;",
                "@@ -90,3 +89,3 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "       FileSystem fileSystem,",
                "-      TypeCoercerFactory typeCoercerFactory,",
                "+      BuckGlobals buckGlobals,",
                "       EventHandler eventHandler) {",
                "@@ -96,11 +95,3 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "     this.eventHandler = eventHandler;",
                "-    // TODO(ttsugrii): request factory and globals through a constructor instead of creating them",
                "-    // here",
                "-    RuleFunctionFactory ruleFunctionFactory = new RuleFunctionFactory(typeCoercerFactory);",
                "-    this.buckGlobals =",
                "-        BuckGlobals.builder()",
                "-            .setDescriptions(options.getDescriptions())",
                "-            .setDisableImplicitNativeRules(options.getDisableImplicitNativeRules())",
                "-            .setRuleFunctionFactory(ruleFunctionFactory::create)",
                "-            .build();",
                "+    this.buckGlobals = buckGlobals;",
                "@@ -122,6 +113,6 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "       FileSystem fileSystem,",
                "-      TypeCoercerFactory typeCoercerFactory,",
                "+      BuckGlobals buckGlobals,",
                "       EventHandler eventHandler) {",
                "     return new SkylarkProjectBuildFileParser(",
                "-        options, buckEventBus, fileSystem, typeCoercerFactory, eventHandler);",
                "+        options, buckEventBus, fileSystem, buckGlobals, eventHandler);",
                "   }",
                "diff --git a/test/com/facebook/buck/skylark/function/HostInfoTest.java b/test/com/facebook/buck/skylark/function/HostInfoTest.java",
                "index bc516e0ad6..cabc988c29 100644",
                "--- a/test/com/facebook/buck/skylark/function/HostInfoTest.java",
                "+++ b/test/com/facebook/buck/skylark/function/HostInfoTest.java",
                "@@ -26,2 +26,4 @@ import com.facebook.buck.rules.TestCellBuilder;",
                " import com.facebook.buck.rules.coercer.DefaultTypeCoercerFactory;",
                "+import com.facebook.buck.skylark.parser.BuckGlobals;",
                "+import com.facebook.buck.skylark.parser.RuleFunctionFactory;",
                " import com.facebook.buck.skylark.parser.SkylarkProjectBuildFileParser;",
                "@@ -262,3 +264,3 @@ public class HostInfoTest {",
                "       ProjectFilesystem filesystem, EventHandler eventHandler) {",
                "-    return SkylarkProjectBuildFileParser.using(",
                "+    ProjectBuildFileParserOptions options =",
                "         ProjectBuildFileParserOptions.builder()",
                "@@ -270,6 +272,14 @@ public class HostInfoTest {",
                "             .setPythonInterpreter(\"skylark\")",
                "-            .build(),",
                "+            .build();",
                "+    RuleFunctionFactory ruleFunctionFactory =",
                "+        new RuleFunctionFactory(new DefaultTypeCoercerFactory());",
                "+    return SkylarkProjectBuildFileParser.using(",
                "+        options,",
                "         BuckEventBusForTests.newInstance(),",
                "         SkylarkFilesystem.using(filesystem),",
                "-        new DefaultTypeCoercerFactory(),",
                "+        BuckGlobals.builder()",
                "+            .setDescriptions(options.getDescriptions())",
                "+            .setDisableImplicitNativeRules(options.getDisableImplicitNativeRules())",
                "+            .setRuleFunctionFactory(ruleFunctionFactory)",
                "+            .build(),",
                "         eventHandler);",
                "diff --git a/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java b/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java",
                "index 16182de0f6..d9afb9c69d 100644",
                "--- a/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java",
                "+++ b/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java",
                "@@ -106,3 +106,7 @@ public class SkylarkProjectBuildFileParserTest {",
                "         SkylarkFilesystem.using(projectFilesystem),",
                "-        new DefaultTypeCoercerFactory(),",
                "+        BuckGlobals.builder()",
                "+            .setRuleFunctionFactory(new RuleFunctionFactory(new DefaultTypeCoercerFactory()))",
                "+            .setDescriptions(options.getDescriptions())",
                "+            .setDisableImplicitNativeRules(options.getDisableImplicitNativeRules())",
                "+            .build(),",
                "         eventHandler);",
                "@@ -542,17 +546,23 @@ public class SkylarkProjectBuildFileParserTest {",
                "+    ProjectBuildFileParserOptions options =",
                "+        ProjectBuildFileParserOptions.builder()",
                "+            .setProjectRoot(cell.getRoot())",
                "+            .setAllowEmptyGlobs(ParserConfig.DEFAULT_ALLOW_EMPTY_GLOBS)",
                "+            .setIgnorePaths(ImmutableSet.of())",
                "+            .setBuildFileName(\"BUCK\")",
                "+            .setDescriptions(knownBuildRuleTypesProvider.get(cell).getDescriptions())",
                "+            .setBuildFileImportWhitelist(ImmutableList.of())",
                "+            .setPythonInterpreter(\"skylark\")",
                "+            .setCellRoots(ImmutableMap.of(\"tp2\", anotherCell))",
                "+            .build();",
                "     parser =",
                "         SkylarkProjectBuildFileParser.using(",
                "-            ProjectBuildFileParserOptions.builder()",
                "-                .setProjectRoot(cell.getRoot())",
                "-                .setAllowEmptyGlobs(ParserConfig.DEFAULT_ALLOW_EMPTY_GLOBS)",
                "-                .setIgnorePaths(ImmutableSet.of())",
                "-                .setBuildFileName(\"BUCK\")",
                "-                .setDescriptions(knownBuildRuleTypesProvider.get(cell).getDescriptions())",
                "-                .setBuildFileImportWhitelist(ImmutableList.of())",
                "-                .setPythonInterpreter(\"skylark\")",
                "-                .setCellRoots(ImmutableMap.of(\"tp2\", anotherCell))",
                "-                .build(),",
                "+            options,",
                "             BuckEventBusForTests.newInstance(),",
                "             SkylarkFilesystem.using(projectFilesystem),",
                "-            new DefaultTypeCoercerFactory(),",
                "+            BuckGlobals.builder()",
                "+                .setDisableImplicitNativeRules(options.getDisableImplicitNativeRules())",
                "+                .setDescriptions(options.getDescriptions())",
                "+                .setRuleFunctionFactory(new RuleFunctionFactory(new DefaultTypeCoercerFactory()))",
                "+                .build(),",
                "             new PrintingEventHandler(EnumSet.allOf(EventKind.class)));"
            ],
            "changed_files": [
                "src/com/facebook/buck/parser/ProjectBuildFileParserFactory.java",
                "src/com/facebook/buck/skylark/parser/AbstractBuckGlobals.java",
                "src/com/facebook/buck/skylark/parser/RuleFunctionFactory.java",
                "src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "test/com/facebook/buck/skylark/function/HostInfoTest.java",
                "test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: parser",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, parser",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ce9132c5135a3006bda2c32bc52b95d561aabc61",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522286048,
            "hunks": 14,
            "message": "Avoid adding dependencies from all cxx platforms Summary: There is no need to load dependencies of all cxx platforms. The only dependency that needs to be added is from the platform identified by the flavor in the target. Reviewed By: ttsugriy fbshipit-source-id: cb1caf2",
            "diff": [
                "diff --git a/src/com/facebook/buck/apple/AppleLibraryDescription.java b/src/com/facebook/buck/apple/AppleLibraryDescription.java",
                "index ada9473d51..43ff11ce5d 100644",
                "--- a/src/com/facebook/buck/apple/AppleLibraryDescription.java",
                "+++ b/src/com/facebook/buck/apple/AppleLibraryDescription.java",
                "@@ -801,3 +801,4 @@ public class AppleLibraryDescription",
                "     extraDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(getCxxPlatformsProvider().getCxxPlatforms().getValues()));",
                "+        CxxPlatforms.getParseTimeDeps(",
                "+            getCxxPlatformsProvider().getCxxPlatforms().getValues(buildTarget)));",
                "   }",
                "diff --git a/src/com/facebook/buck/apple/AppleTestDescription.java b/src/com/facebook/buck/apple/AppleTestDescription.java",
                "index 4ecf5bb090..9ca0eeaf37 100644",
                "--- a/src/com/facebook/buck/apple/AppleTestDescription.java",
                "+++ b/src/com/facebook/buck/apple/AppleTestDescription.java",
                "@@ -481,3 +481,4 @@ public class AppleTestDescription",
                "     extraDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(getCxxPlatformsProvider().getCxxPlatforms().getValues()));",
                "+        CxxPlatforms.getParseTimeDeps(",
                "+            getCxxPlatformsProvider().getCxxPlatforms().getValues(buildTarget)));",
                "   }",
                "diff --git a/src/com/facebook/buck/cxx/CxxLibraryDescription.java b/src/com/facebook/buck/cxx/CxxLibraryDescription.java",
                "index c2ad1d3330..bebcd8a60c 100644",
                "--- a/src/com/facebook/buck/cxx/CxxLibraryDescription.java",
                "+++ b/src/com/facebook/buck/cxx/CxxLibraryDescription.java",
                "@@ -256,3 +256,4 @@ public class CxxLibraryDescription",
                "     targetGraphOnlyDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(getCxxPlatformsProvider().getCxxPlatforms().getValues()));",
                "+        CxxPlatforms.getParseTimeDeps(",
                "+            getCxxPlatformsProvider().getCxxPlatforms().getValues(buildTarget)));",
                "   }",
                "diff --git a/src/com/facebook/buck/model/FlavorDomain.java b/src/com/facebook/buck/model/FlavorDomain.java",
                "index c68e63000f..4aea3a6d13 100644",
                "--- a/src/com/facebook/buck/model/FlavorDomain.java",
                "+++ b/src/com/facebook/buck/model/FlavorDomain.java",
                "@@ -21,2 +21,3 @@ import com.google.common.base.Joiner;",
                " import com.google.common.collect.ImmutableCollection;",
                "+import com.google.common.collect.ImmutableList;",
                " import com.google.common.collect.ImmutableMap;",
                "@@ -105,2 +106,14 @@ public class FlavorDomain<T> {",
                "+  /**",
                "+   * @return a list of values for flavors that are present in this domain. Non-existing flavors are",
                "+   *     ignored.",
                "+   */",
                "+  private ImmutableList<T> getValues(Set<Flavor> flavors) {",
                "+    return flavors",
                "+        .stream()",
                "+        .filter(translation::containsKey)",
                "+        .map(translation::get)",
                "+        .collect(ImmutableList.toImmutableList());",
                "+  }",
                "+",
                "   public Optional<T> getValue(BuildTarget buildTarget) {",
                "@@ -114,2 +127,10 @@ public class FlavorDomain<T> {",
                "+  /**",
                "+   * @return a list of values for the flavors from the given target. Target's flavors that are not",
                "+   *     present in this domain are ignored.",
                "+   */",
                "+  public ImmutableList<T> getValues(BuildTarget buildTarget) {",
                "+    return getValues(buildTarget.getFlavors());",
                "+  }",
                "+",
                "   public T getRequiredValue(BuildTarget buildTarget) {",
                "diff --git a/src/com/facebook/buck/python/CxxPythonExtensionDescription.java b/src/com/facebook/buck/python/CxxPythonExtensionDescription.java",
                "index 74781047f0..cb4f06cb01 100644",
                "--- a/src/com/facebook/buck/python/CxxPythonExtensionDescription.java",
                "+++ b/src/com/facebook/buck/python/CxxPythonExtensionDescription.java",
                "@@ -581,3 +581,4 @@ public class CxxPythonExtensionDescription",
                "     // Get any parse time deps from the C/C++ platforms.",
                "-    extraDepsBuilder.addAll(CxxPlatforms.getParseTimeDeps(getCxxPlatforms().getValues()));",
                "+    extraDepsBuilder.addAll(",
                "+        CxxPlatforms.getParseTimeDeps(getCxxPlatforms().getValues(buildTarget)));",
                "diff --git a/src/com/facebook/buck/rust/RustBinaryDescription.java b/src/com/facebook/buck/rust/RustBinaryDescription.java",
                "index 502856cb19..5f37e2595e 100644",
                "--- a/src/com/facebook/buck/rust/RustBinaryDescription.java",
                "+++ b/src/com/facebook/buck/rust/RustBinaryDescription.java",
                "@@ -122,3 +122,4 @@ public class RustBinaryDescription",
                "     extraDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(getCxxPlatformsProvider().getCxxPlatforms().getValues()));",
                "+        CxxPlatforms.getParseTimeDeps(",
                "+            getCxxPlatformsProvider().getCxxPlatforms().getValues(buildTarget)));",
                "     extraDepsBuilder.addAll(",
                "diff --git a/src/com/facebook/buck/rust/RustLibraryDescription.java b/src/com/facebook/buck/rust/RustLibraryDescription.java",
                "index ccbe7ec6df..74fdeded4c 100644",
                "--- a/src/com/facebook/buck/rust/RustLibraryDescription.java",
                "+++ b/src/com/facebook/buck/rust/RustLibraryDescription.java",
                "@@ -437,3 +437,4 @@ public class RustLibraryDescription",
                "     extraDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(getCxxPlatformsProvider().getCxxPlatforms().getValues()));",
                "+        CxxPlatforms.getParseTimeDeps(",
                "+            getCxxPlatformsProvider().getCxxPlatforms().getValues(buildTarget)));",
                "   }",
                "diff --git a/src/com/facebook/buck/rust/RustTestDescription.java b/src/com/facebook/buck/rust/RustTestDescription.java",
                "index ced58952a9..9c32432def 100644",
                "--- a/src/com/facebook/buck/rust/RustTestDescription.java",
                "+++ b/src/com/facebook/buck/rust/RustTestDescription.java",
                "@@ -147,3 +147,4 @@ public class RustTestDescription",
                "     extraDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(getCxxPlatformsProvider().getCxxPlatforms().getValues()));",
                "+        CxxPlatforms.getParseTimeDeps(",
                "+            getCxxPlatformsProvider().getCxxPlatforms().getValues(buildTarget)));",
                "   }",
                "diff --git a/test/com/facebook/buck/cxx/CxxBinaryIntegrationTest.java b/test/com/facebook/buck/cxx/CxxBinaryIntegrationTest.java",
                "index d1dce6ebfb..0b683203c2 100644",
                "--- a/test/com/facebook/buck/cxx/CxxBinaryIntegrationTest.java",
                "+++ b/test/com/facebook/buck/cxx/CxxBinaryIntegrationTest.java",
                "@@ -2483,2 +2483,10 @@ public class CxxBinaryIntegrationTest {",
                "+  @Test",
                "+  public void testPlatformDependenciesNotResolvedEagerly() throws IOException {",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"cxx_binary_platform_deps\", tmp);",
                "+    workspace.setUp();",
                "+    workspace.runBuckBuild(\":binary#working-platform\").assertSuccess();",
                "+  }",
                "+",
                "   private ImmutableSortedSet<Path> findFiles(Path root, PathMatcher matcher) throws IOException {",
                "diff --git a/test/com/facebook/buck/cxx/testdata/cxx_binary_platform_deps/.buckconfig b/test/com/facebook/buck/cxx/testdata/cxx_binary_platform_deps/.buckconfig",
                "new file mode 100644",
                "index 0000000000..90d0ef3b87",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cxx/testdata/cxx_binary_platform_deps/.buckconfig",
                "@@ -0,0 +1,5 @@",
                "+[cxx#working-platform]",
                "+",
                "+[cxx#broken-platform]",
                "+  cpp = //non/existing:target",
                "+  cpp_type = clang",
                "\\ No newline at end of file",
                "diff --git a/test/com/facebook/buck/cxx/testdata/cxx_binary_platform_deps/BUCK.fixture b/test/com/facebook/buck/cxx/testdata/cxx_binary_platform_deps/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..898cd15e12",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cxx/testdata/cxx_binary_platform_deps/BUCK.fixture",
                "@@ -0,0 +1,11 @@",
                "+cxx_binary(",
                "+    name = \"binary\",",
                "+    deps = [",
                "+        \":echo\",",
                "+    ],",
                "+)",
                "+",
                "+cxx_library(",
                "+    name = \"echo\",",
                "+    srcs = [\"echo.cpp\"],",
                "+)",
                "diff --git a/test/com/facebook/buck/cxx/testdata/cxx_binary_platform_deps/echo.cpp b/test/com/facebook/buck/cxx/testdata/cxx_binary_platform_deps/echo.cpp",
                "new file mode 100644",
                "index 0000000000..d123e0977a",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cxx/testdata/cxx_binary_platform_deps/echo.cpp",
                "@@ -0,0 +1,4 @@",
                "+int main(int argc, char** argv)",
                "+{",
                "+  return 0;",
                "+}"
            ],
            "changed_files": [
                "src/com/facebook/buck/apple/AppleLibraryDescription.java",
                "src/com/facebook/buck/apple/AppleTestDescription.java",
                "src/com/facebook/buck/cxx/CxxLibraryDescription.java",
                "src/com/facebook/buck/model/FlavorDomain.java",
                "src/com/facebook/buck/python/CxxPythonExtensionDescription.java",
                "src/com/facebook/buck/rust/RustBinaryDescription.java",
                "src/com/facebook/buck/rust/RustLibraryDescription.java",
                "src/com/facebook/buck/rust/RustTestDescription.java",
                "test/com/facebook/buck/cxx/CxxBinaryIntegrationTest.java",
                "test/com/facebook/buck/cxx/testdata/cxx_binary_platform_deps/.buckconfig",
                "test/com/facebook/buck/cxx/testdata/cxx_binary_platform_deps/BUCK.fixture",
                "test/com/facebook/buck/cxx/testdata/cxx_binary_platform_deps/echo.cpp"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: load",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d5c47aed855f58fc381d7d3212e899a8d9177db5",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521233716,
            "hunks": 24,
            "message": "Add the `flavors` command to `buck audit`. And other changes. Summary: Add the `flavors` command to `buck audit`. And other changes. - Add the `flavors` command. - Add a syntax block. - Add a note about the available examples, which are \"below the fold\". - Hyperlink `.buckconfig` and `Buck File` when they are first used. - Add a **See Also** section with links to `.buckconfig` and `Buck File`. - List _all_ the parameters in the **Parameters** section. - Use imperative voice in command and parameter descriptions. - Improve paragraph formatting. Test Plan: - Render the docs with soyweb-local - Visually inspect and check links - Spellcheck the changed topics Reviewed By: ttsugriy fbshipit-source-id: 033a72b",
            "diff": [
                "diff --git a/docs/command/audit.soy b/docs/command/audit.soy",
                "index 10881973e6..ffea48e961 100644",
                "--- a/docs/command/audit.soy",
                "+++ b/docs/command/audit.soy",
                "@@ -15,5 +15,16 @@",
                " {param overview}",
                "+",
                "+<p>",
                " Provide build information about build targets and outputs.",
                "+</p>",
                " <p>",
                "+Syntax:",
                "+</p>",
                "+",
                "+<pre>buck audit &lt;command&gt; [ &lt;parameter&gt; . . . ] &lt;target&gt;  . . .</pre> ",
                "+",
                "+<p>",
                "+Example:",
                "+</p>",
                "@@ -21,2 +32,6 @@ Provide build information about build targets and outputs.",
                "+<p>",
                "+For more examples, see the <b>Examples</b> section below.",
                "+</p>",
                "+",
                " <h2>Commands</h2>",
                "@@ -28,6 +43,4 @@ Provide build information about build targets and outputs.",
                "     {param desc}",
                "-    Lists the set of aliases declared in",
                "-    either <tt>.buckconfig</tt> or <tt>.buckconfig.local</tt>.",
                "-    (Currently, <tt>--list</tt> is the only flag supported",
                "-    by <tt>buck audit alias</tt>, but we are considering others.)",
                "+    List the aliases declared in",
                "+    either {call buck.concept_buckconfig /} or <tt>.buckconfig.local</tt>.",
                "    {/param}",
                "@@ -39,3 +52,3 @@ Provide build information about build targets and outputs.",
                "     {param desc}",
                "-    Lists the classpath used to build the given targets. This does",
                "+    List the classpath used to build the given targets. This does",
                "     not work for all build rule types.",
                "@@ -45,8 +58,9 @@ Provide build information about build targets and outputs.",
                "   {call buck.param}",
                "-    {param name: 'config <section.property>[,...]' /}",
                "+    {param name: 'config <section.property> [,...]' /}",
                "     {param nodash: true /}",
                "     {param desc}",
                "-    Outputs values from .buckconfig (and .buckconfig.local) for the specified",
                "+    List values from <code>.buckconfig</code> (and",
                "+    {sp}<code>.buckconfig.local</code>) for the specified",
                "     sections and properties. Use <code>--tab</code> to get tab-delimited",
                "-    details. For example, to get the C and C++ compiler, one might run one of",
                "+    details. For example, to get the C and C++ compiler, use",
                "     {literal}",
                "@@ -54,4 +68,4 @@ Provide build information about build targets and outputs.",
                " buck audit config invalid_section.novalue cxx.cc cxx.cxx",
                "-buck audit config --tab invalid_section.novalue cxx.cc cxx.cxx",
                " </pre>",
                "+",
                " <pre class=\"prettyprint lang-py\">",
                "@@ -60,2 +74,10 @@ buck audit config --tab invalid_section.novalue cxx.cc cxx.cxx",
                "     cxx = /usr/bin/g++",
                "+</pre>",
                "+    {/literal}",
                "+<p>",
                "+or",
                "+</p>",
                "+    {literal}",
                "+    <pre class=\"prettyprint lang-py\">",
                "+buck audit config --tab invalid_section.novalue cxx.cc cxx.cxx",
                " </pre>",
                "@@ -74,9 +96,11 @@ cxx.cxx&#9;/usr/bin/g++",
                "     {param desc}",
                "-    Lists the dependencies used to build the given targets. Results are listed",
                "-    in alphabetical order. By default, only direct dependencies are listed.",
                "-    To show transitive dependencies, use the <code>--transitive</code> flag.",
                "-    To show tests for a rule, use the <code>--include-tests</code> flag. This",
                "-    prints out a rule's tests as if they were a dependency of the rule.",
                "-    Combined with the <code>--transitive</code> flag, this will print out all",
                "-    of the test's dependencies as well.",
                "+    List the dependencies used to build the given targets. Results are",
                "+    listed in alphabetical order. By default, only direct dependencies",
                "+    are listed; to show transitive dependencies, use ",
                "+    the <code>--transitive</code> parameter.  To show tests for a rule, use",
                "+    the <code>--include-tests</code> parameter. This prints out a rule's",
                "+    tests as if they were dependencies of the rule.  To print out all of",
                "+    the <em>test's</em> dependencies as well, ",
                "+    combine <code>--include-tests</code> with the <code>--transitive</code> parameter. ",
                "+",
                "     {/param}",
                "@@ -84,2 +108,17 @@ cxx.cxx&#9;/usr/bin/g++",
                "+  {call buck.param}",
                "+    {param name: 'flavors <targets>' /}",
                "+    {param nodash: true /}",
                "+    {param desc}",
                "+    List the flavors that are available for the specified targets and",
                "+    what the default flavor is for each target. ",
                "+    If the <code>flavors</code> command prints <code>no flavors</code>, ",
                "+    it indicates that, although the target rule supports flavors, Buck ",
                "+    was not able to extract any. If the <code>flavors</code> command ",
                "+    prints <code>unknown</code>, it indicates that the target rule",
                "+    doesn't support flavors. The <code>flavors</code> command supports",
                "+    the <code>--json</code> parameter for JSON-formatted output.",
                "+   {/param}",
                "+  {/call}",
                "+",
                "   {call buck.param}",
                "@@ -88,3 +127,3 @@ cxx.cxx&#9;/usr/bin/g++",
                "     {param desc}",
                "-    Lists the input source and resource files used to build the",
                "+    List the input source and resource files used to build the",
                "     given targets.",
                "@@ -97,3 +136,4 @@ cxx.cxx&#9;/usr/bin/g++",
                "     {param desc}",
                "-        Lists build files and their extensions included in given build file.",
                "+        List the {call buck.build_file /}s, and their extensions, that ",
                "+        are included in the given build file.",
                "     {/param}",
                "@@ -105,7 +145,8 @@ cxx.cxx&#9;/usr/bin/g++",
                "     {param desc}",
                "-    Lists the tests for the given targets. Results are listed in alphabetical",
                "+    List the tests for the given targets. Results are listed in alphabetical",
                "     order. Only tests for the given targets are printed, though multiple",
                "-    targets may be provided at once. This command is meant to be used in",
                "+    targets may be specified on a single command line. ",
                "+    This command is intended to be used in",
                "     conjunction with the <code>audit dependencies</code> command. For example,",
                "-    to retrieve a list of all tests for a given project, use",
                "+    to retrieve a list of all tests for a given project, use:",
                "     <br>",
                "@@ -122,2 +163,11 @@ cxx.cxx&#9;/usr/bin/g++",
                "+{call buck.param}",
                "+  {param name: 'include-tests' /}",
                "+  {param desc}",
                "+  Show the tests for the specified targets. Can be combined with ",
                "+  the <code>--transitive</code> parameter. For more information, see ",
                "+  the <code>dependencies</code> command.   ",
                "+  {/param}",
                "+{/call}",
                "+",
                " {call buck.param}",
                "@@ -125,3 +175,12 @@ cxx.cxx&#9;/usr/bin/g++",
                "   {param desc}",
                "-  Outputs the results as JSON.",
                "+  Output the results as JSON.",
                "+  {/param}",
                "+{/call}",
                "+",
                "+{call buck.param}",
                "+  {param name: 'list' /}",
                "+  {param desc}",
                "+  List <code>.buckconfig</code> and <code>.buckconfig.local</code> aliases. ",
                "+  Used only with the <code>aliases</code> command. For more information, see ",
                "+  that command.",
                "   {/param}",
                "@@ -129,2 +188,21 @@ cxx.cxx&#9;/usr/bin/g++",
                "+{call buck.param}",
                "+  {param name: 'tab' /}",
                "+  {param desc}",
                "+  Output the results using tab delimiters.",
                "+  Used only with the <code>config</code> command. For more information, see ",
                "+  that command.",
                "+  {/param}",
                "+{/call}",
                "+",
                "+{call buck.param}",
                "+  {param name: 'transitive' /}",
                "+  {param desc}",
                "+  Show transitive dependencies in addition to direct dependencies. Can",
                "+  be combined with the <code>--include-tests</code> parameter. For",
                "+  more information, see the <code>dependencies</code> command. ",
                "+  {/param}",
                "+{/call}",
                "+",
                "+",
                " {/param}",
                "@@ -249,2 +327,13 @@ Outputs a JSON representation of the direct dependencies of the{sp}",
                "+",
                "+<h2>See also</h2>",
                "+",
                "+<p>",
                "+{call buck.concept_buckconfig /}",
                "+</p>",
                "+",
                "+<p>",
                "+{call buck.build_file /} ",
                "+</p>",
                "+",
                "     {/param}  // content",
                "@@ -252 +341,2 @@ Outputs a JSON representation of the direct dependencies of the{sp}",
                " {/template}",
                "+"
            ],
            "changed_files": [
                "docs/command/audit.soy"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: command",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: command",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a166d42c9844e5a651b357043f308818029a9873",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522440620,
            "hunks": 6,
            "message": "Add BuildRuleKey and BuildRuleContextWithEnvironment for AG construction in AsyncTransformationEngine Summary: We will use AsyncTransformationEngine to perform TargetNode to BuildRule transformation. BuildRuleKey will be used to pass BuildRuleCreationContext and the desired BuildTarget around to specify what BuildRule to compute, and any necessary information to construct the BuildRule passed down from the parent. It will also act as the cache key for incrementality. BuildRuleContextWithEnvironment will be used to wrap the BuildRuleCreationContext for BuildRule creation functions to access dependencies in a restricted way, and allow BuildRule creation to trigger asynchronous creations of dependent BuildRules via the engine. Reviewed By: jtorkkola fbshipit-source-id: fbd8f66",
            "diff": [
                "diff --git a/src/com/facebook/buck/rules/graphbuilder/BUCK b/src/com/facebook/buck/rules/graphbuilder/BUCK",
                "new file mode 100644",
                "index 0000000000..eb0c6b4687",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/rules/graphbuilder/BUCK",
                "@@ -0,0 +1,19 @@",
                "+load(\"//tools/build_rules:java_rules.bzl\", \"java_immutables_library\")",
                "+",
                "+java_immutables_library(",
                "+    name = \"graphbuilder\",",
                "+    srcs = glob([\"*.java\"]),",
                "+    exported_deps = [",
                "+        \"//src/com/facebook/buck/rules:build_rule\",",
                "+        \"//src/com/facebook/buck/rules:interfaces\",",
                "+        \"//src/com/facebook/buck/rules/provider:provider\",",
                "+    ],",
                "+    tests = [",
                "+        \"//test/com/facebook/buck/rules/graphbuilder:graphbuilder\",",
                "+    ],",
                "+    visibility = [\"PUBLIC\"],",
                "+    deps = [",
                "+        \"//src/com/facebook/buck/graph/transformation:transformation\",",
                "+        \"//third-party/java/guava:guava\",",
                "+    ],",
                "+)",
                "diff --git a/src/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironment.java b/src/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironment.java",
                "new file mode 100644",
                "index 0000000000..db5aa8f579",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironment.java",
                "@@ -0,0 +1,168 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.rules.graphbuilder;",
                "+",
                "+import com.facebook.buck.graph.transformation.TransformationEnvironment;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleCreationContext;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                "+import com.facebook.buck.rules.TargetNode;",
                "+import com.facebook.buck.rules.provider.BuildRuleInfoProvider;",
                "+import com.facebook.buck.rules.provider.BuildRuleInfoProviderCollection;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import com.google.common.collect.Maps;",
                "+import java.util.concurrent.CompletionStage;",
                "+import java.util.function.Function;",
                "+import org.immutables.value.Value;",
                "+import org.immutables.value.Value.Style.ImplementationVisibility;",
                "+",
                "+/**",
                "+ * Context information used for construction of ActionGraph in {@link",
                "+ * com.facebook.buck.graph.transformationengine.AsyncTransformationEngine}.",
                "+ *",
                "+ * <p>This wraps the {@link BuildRuleCreationContext} needed for constructing {@link BuildRule}s",
                "+ * with {@link TransformationEnvironment} from the {@link",
                "+ * com.facebook.buck.graph.transformationengine.AsyncTransformationEngine}.",
                "+ *",
                "+ * <p>Access to the {@link TransformationEnvironment} is limited to restrict access of BuildRule",
                "+ * construction logic to {@link BuildRule}s. Construction phase can only access information to",
                "+ * dependencies via {@link com.facebook.buck.rules.provider.BuildRuleInfoProvider}s. Those",
                "+ * dependencies not yet created will be implicitly created by this class using the wrapped {@link",
                "+ * TransformationEnvironment}.",
                "+ *",
                "+ * <p>This context is not part of the {@link BuildRuleKey} as {@link TransformationEnvironment}",
                "+ * should not be part of the identifier of what {@link BuildRule} to compute.",
                "+ *",
                "+ * <p>Instances should only be created in {@link",
                "+ * com.facebook.buck.graph.transformationengine.AsyncTransformer#transform(Object,",
                "+ * TransformationEnvironment)} implementation for ActionGraph construction. Hence, we have",
                "+ * package-private implementation which hides constructor.",
                "+ */",
                "+@Value.Immutable(builder = false, copy = false, prehash = false)",
                "+@Value.Style(visibility = ImplementationVisibility.PACKAGE)",
                "+public abstract class BuildRuleContextWithEnvironment {",
                "+",
                "+  @Value.Parameter",
                "+  protected abstract BuildRuleKey getKey();",
                "+",
                "+  protected BuildRuleCreationContext getCreationContext() {",
                "+    return getKey().getBuildRuleCreationContext();",
                "+  }",
                "+",
                "+  /** @return the {@link TargetNode} of the current desired {@link BuildRule} */",
                "+  @Value.Lazy",
                "+  protected TargetNode<?, ?> getCurrentNode() {",
                "+    return getCreationContext().getTargetGraph().get(getKey().getBuildTarget());",
                "+  }",
                "+",
                "+  @Value.Parameter",
                "+  protected abstract TransformationEnvironment<BuildRuleKey, BuildRule> getEnv();",
                "+",
                "+  public ProjectFilesystem getProjectFilesystem() {",
                "+    return getCreationContext().getProjectFilesystem();",
                "+  }",
                "+",
                "+  public CellPathResolver getCellPathResolver() {",
                "+    return getCreationContext().getCellPathResolver();",
                "+  }",
                "+",
                "+  public ToolchainProvider getToolchainProvider() {",
                "+    return getCreationContext().getToolchainProvider();",
                "+  }",
                "+",
                "+  /**",
                "+   * Access to {@link com.facebook.buck.rules.TargetGraph} and {@link TargetNode} is limited during",
                "+   * ActionGraph construction. The list of target graph dependencies can only be accessed through",
                "+   * this context via the three methods below.",
                "+   */",
                "+",
                "+  /** @return The {@link TargetNode#getDeclaredDeps()} */",
                "+  public ImmutableSet<BuildTarget> getDeclaredDeps() {",
                "+    return getCurrentNode().getDeclaredDeps();",
                "+  }",
                "+",
                "+  /** @return The {@link TargetNode#getExtraDeps()} */",
                "+  public ImmutableSortedSet<BuildTarget> getExtraDeps() {",
                "+    return getCurrentNode().getExtraDeps();",
                "+  }",
                "+",
                "+  /** @return The {@link TargetNode#getTargetGraphOnlyDeps()} ()} */",
                "+  public ImmutableSortedSet<BuildTarget> getTargetGraphOnlyDeps() {",
                "+    return getCurrentNode().getTargetGraphOnlyDeps();",
                "+  }",
                "+",
                "+  /**",
                "+   * Access to {@link TransformationEnvironment} and dependencies as {@link BuildRule}s is limited.",
                "+   * The two methods below are used to asynchronously retrieve the {@link BuildRuleInfoProvider}s of",
                "+   * dependencies and create new {@link BuildRule}s using their information.",
                "+   */",
                "+",
                "+  /**",
                "+   * A method for Action Graph construction phase to access information from a dependency by",
                "+   * retrieving all {@link BuildRuleInfoProvider}s of the dependent {@link BuildRule}.",
                "+   *",
                "+   * <p>The result is then asynchronously given to the supplied Function, which can use the {@link",
                "+   * BuildRuleInfoProvider}s to create the current desired {@link BuildRule}.",
                "+   *",
                "+   * @param depKey the {@link BuildRuleKey} of the desired dependency",
                "+   * @param createBuildRuleWithDep the function that uses the dependencies to create the current",
                "+   *     {@link BuildRule}",
                "+   * @return a future of the {@link BuildRule} to be created",
                "+   */",
                "+  public CompletionStage<BuildRule> getDependencyProviderCollection(",
                "+      BuildRuleKey depKey,",
                "+      Function<BuildRuleInfoProviderCollection, BuildRule> createBuildRuleWithDep) {",
                "+    return getEnv()",
                "+        .evaluate(",
                "+            depKey,",
                "+            depBuildRule -> {",
                "+              return createBuildRuleWithDep.apply(depBuildRule.getProviderCollection());",
                "+            });",
                "+  }",
                "+",
                "+  /**",
                "+   * A method for Action Graph construction phase to access information from many dependencies by",
                "+   * retrieving all {@link BuildRuleInfoProvider}s of the dependencies {@link BuildRule}.",
                "+   *",
                "+   * <p>The result is then asynchronously given to the supplied Function, which can use the {@link",
                "+   * BuildRuleInfoProvider}s of the dependencies as a Map to create the current desired {@link",
                "+   * BuildRule}.",
                "+   *",
                "+   * @param depKeys the {@link BuildRuleKey} of the desired dependency",
                "+   * @param createBuildRuleWithDeps the function that uses the dependencies to create the current",
                "+   *     {@link BuildRule}",
                "+   * @return a future of the {@link BuildRule} to be created",
                "+   */",
                "+  public CompletionStage<BuildRule> getDependenciesProviderCollection(",
                "+      Iterable<BuildRuleKey> depKeys,",
                "+      Function<ImmutableMap<BuildRuleKey, BuildRuleInfoProviderCollection>, BuildRule>",
                "+          createBuildRuleWithDeps) {",
                "+    return getEnv()",
                "+        .evaluateAll(",
                "+            depKeys,",
                "+            depBuildRules -> {",
                "+              return createBuildRuleWithDeps.apply(",
                "+                  ImmutableMap.copyOf(",
                "+                      Maps.transformValues(depBuildRules, rule -> rule.getProviderCollection())));",
                "+            });",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/rules/graphbuilder/BuildRuleKey.java b/src/com/facebook/buck/rules/graphbuilder/BuildRuleKey.java",
                "new file mode 100644",
                "index 0000000000..0352fa4f92",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/rules/graphbuilder/BuildRuleKey.java",
                "@@ -0,0 +1,52 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.rules.graphbuilder;",
                "+",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BuildRuleCreationContext;",
                "+import com.facebook.buck.rules.TargetNode;",
                "+import org.immutables.value.Value;",
                "+",
                "+/**",
                "+ * An Immutable Key to a {@link BuildRule} for computation in {@link",
                "+ * com.facebook.buck.graph.transformationengine.AsyncTransformationEngine}. The Key is used to",
                "+ * represent what {@link com.facebook.buck.rules.BuildRule} subgraph we are attempting to compute.",
                "+ *",
                "+ * <p>The {@link com.facebook.buck.rules.BuildRule} subgraph is identified by:",
                "+ *",
                "+ * <ul>",
                "+ *   <li>the {@link com.facebook.buck.rules.TargetNode} corresponding to the {@link BuildTarget}",
                "+ *       which contains information about the desired {@link BuildTarget}, including flavour",
                "+ *       information, and cell path, etc.",
                "+ * </ul>",
                "+ */",
                "+@Value.Immutable(builder = false, copy = false, prehash = true)",
                "+public abstract class BuildRuleKey {",
                "+",
                "+  @Value.Parameter",
                "+  @Value.Auxiliary",
                "+  public abstract BuildTarget getBuildTarget();",
                "+",
                "+  @Value.Derived",
                "+  public TargetNode<?, ?> getTargetNode() {",
                "+    return getBuildRuleCreationContext().getTargetGraph().get(getBuildTarget());",
                "+  }",
                "+",
                "+  @Value.Parameter",
                "+  @Value.Auxiliary",
                "+  public abstract BuildRuleCreationContext getBuildRuleCreationContext();",
                "+}",
                "diff --git a/test/com/facebook/buck/rules/graphbuilder/BUCK b/test/com/facebook/buck/rules/graphbuilder/BUCK",
                "new file mode 100644",
                "index 0000000000..3dc0648696",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/rules/graphbuilder/BUCK",
                "@@ -0,0 +1,17 @@",
                "+load(\"//tools/build_rules:java_rules.bzl\", \"java_immutables_library\", \"java_test\")",
                "+",
                "+java_test(",
                "+    name = \"graphbuilder\",",
                "+    srcs = glob([\"*Test.java\"]),",
                "+    has_immutable_types = True,",
                "+    deps = [",
                "+        \"//src/com/facebook/buck/graph/transformation:transformation\",",
                "+        \"//src/com/facebook/buck/rules/graphbuilder:graphbuilder\",",
                "+        \"//test/com/facebook/buck/model:testutil\",",
                "+        \"//test/com/facebook/buck/rules:testutil\",",
                "+        \"//test/com/facebook/buck/rules/provider:testutil\",",
                "+        \"//test/com/facebook/buck/testutil:testutil\",",
                "+        \"//third-party/java/easymock:easymock\",",
                "+        \"//third-party/java/junit:junit\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironmentTest.java b/test/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironmentTest.java",
                "new file mode 100644",
                "index 0000000000..eb960a102e",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironmentTest.java",
                "@@ -0,0 +1,206 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.rules.graphbuilder;",
                "+",
                "+import static org.junit.Assert.assertEquals;",
                "+",
                "+import com.facebook.buck.graph.MutableDirectedGraph;",
                "+import com.facebook.buck.graph.transformation.TransformationEnvironment;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                "+import com.facebook.buck.rules.FakeBuildRule;",
                "+import com.facebook.buck.rules.FakeTargetNodeBuilder;",
                "+import com.facebook.buck.rules.ImmutableBuildRuleCreationContext;",
                "+import com.facebook.buck.rules.TargetGraph;",
                "+import com.facebook.buck.rules.TargetNode;",
                "+import com.facebook.buck.rules.TestBuildRuleResolver;",
                "+import com.facebook.buck.rules.TestCellBuilder;",
                "+import com.facebook.buck.rules.provider.BuildRuleInfoProviderCollection;",
                "+import com.facebook.buck.rules.provider.DefaultBuildRuleInfoProvider;",
                "+import com.facebook.buck.rules.provider.FakeBuildRuleInfoProvider;",
                "+import com.facebook.buck.rules.provider.FakeBuildRuleWithProviders;",
                "+import com.facebook.buck.testutil.FakeProjectFilesystem;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.util.concurrent.Futures;",
                "+import java.util.concurrent.CompletableFuture;",
                "+import java.util.function.Function;",
                "+import org.easymock.Capture;",
                "+import org.easymock.EasyMock;",
                "+import org.junit.Before;",
                "+import org.junit.Test;",
                "+",
                "+/**",
                "+ * Test and demonstration of {@link BuildRuleContextWithEnvironment} to verify that it calls into",
                "+ * {@link TransformationEnvironment} and responds with correct {@link",
                "+ * BuildRuleInfoProviderCollection}.",
                "+ */",
                "+public class BuildRuleContextWithEnvironmentTest {",
                "+",
                "+  private MutableDirectedGraph<TargetNode<?, ?>> mutableTargetGraph;",
                "+  private BuildRuleResolver ruleResolver;",
                "+  private ProjectFilesystem projectFilesystem;",
                "+  private CellPathResolver cellPathResolver;",
                "+  private ToolchainProvider toolchainProvider;",
                "+  private BuildRuleInfoProviderCollection.Builder providerCollectionBuilder;",
                "+",
                "+  @Before",
                "+  public void setUp() {",
                "+    mutableTargetGraph = new MutableDirectedGraph<>();",
                "+    ruleResolver = new TestBuildRuleResolver();",
                "+    projectFilesystem = new FakeProjectFilesystem();",
                "+    cellPathResolver = new TestCellBuilder().build().getCellPathResolver();",
                "+    toolchainProvider = EasyMock.createMock(ToolchainProvider.class);",
                "+",
                "+    providerCollectionBuilder =",
                "+        BuildRuleInfoProviderCollection.builder()",
                "+            .put(",
                "+                DefaultBuildRuleInfoProvider.of(",
                "+                    FakeBuildRuleWithProviders.class,",
                "+                    BuildTargetFactory.newInstance(\"//fake:rule\"),",
                "+                    null,",
                "+                    projectFilesystem));",
                "+",
                "+    mutableTargetGraph.addNode(",
                "+        FakeTargetNodeBuilder.build(",
                "+            new FakeBuildRuleWithProviders(providerCollectionBuilder.build())));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void canRetrieveSingleDependency() {",
                "+    TransformationEnvironment<BuildRuleKey, BuildRule> environment =",
                "+        EasyMock.createMock(TransformationEnvironment.class);",
                "+",
                "+    BuildTarget fakeKeyTarget = BuildTargetFactory.newInstance(\"//fake:key\");",
                "+    TargetNode fakeTargetNode = FakeTargetNodeBuilder.build(new FakeBuildRule(fakeKeyTarget));",
                "+    mutableTargetGraph.addNode(fakeTargetNode);",
                "+",
                "+    BuildRuleKey key =",
                "+        ImmutableBuildRuleKey.of(",
                "+            fakeKeyTarget,",
                "+            ImmutableBuildRuleCreationContext.of(",
                "+                new TargetGraph(mutableTargetGraph, ImmutableMap.of(fakeKeyTarget, fakeTargetNode)),",
                "+                ruleResolver,",
                "+                projectFilesystem,",
                "+                cellPathResolver,",
                "+                toolchainProvider));",
                "+",
                "+    BuildTarget buildTarget = BuildTargetFactory.newInstance(\"//fake:fake\");",
                "+    BuildRule expectedRule = new FakeBuildRule(buildTarget);",
                "+",
                "+    BuildRule returnedRule = new FakeBuildRuleWithProviders(providerCollectionBuilder.build());",
                "+",
                "+    Capture<Function<BuildRule, BuildRule>> functionCapture = EasyMock.newCapture();",
                "+    EasyMock.expect(environment.evaluate(EasyMock.eq(key), EasyMock.capture(functionCapture)))",
                "+        .andAnswer(",
                "+            () ->",
                "+                CompletableFuture.completedFuture(functionCapture.getValue().apply(returnedRule)));",
                "+    EasyMock.replay(environment);",
                "+",
                "+    BuildRuleContextWithEnvironment context =",
                "+        ImmutableBuildRuleContextWithEnvironment.of(key, environment);",
                "+    assertEquals(",
                "+        expectedRule,",
                "+        Futures.getUnchecked(",
                "+            context",
                "+                .getDependencyProviderCollection(",
                "+                    key,",
                "+                    providerCollection -> {",
                "+                      assertEquals(returnedRule.getProviderCollection(), providerCollection);",
                "+                      return expectedRule;",
                "+                    })",
                "+                .toCompletableFuture()));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void canRetrieveMultipleDependencies() {",
                "+    TransformationEnvironment<BuildRuleKey, BuildRule> environment =",
                "+        EasyMock.createMock(TransformationEnvironment.class);",
                "+",
                "+    BuildTarget fakeKeyTarget1 = BuildTargetFactory.newInstance(\"//fake:key1\");",
                "+    BuildTarget fakeKeyTarget2 = BuildTargetFactory.newInstance(\"//fake:key2\");",
                "+",
                "+    TargetNode fakeTargetNode1 = FakeTargetNodeBuilder.build(new FakeBuildRule(fakeKeyTarget1));",
                "+    mutableTargetGraph.addNode(fakeTargetNode1);",
                "+    TargetNode fakeTargetNode2 = FakeTargetNodeBuilder.build(new FakeBuildRule(fakeKeyTarget2));",
                "+    mutableTargetGraph.addNode(fakeTargetNode2);",
                "+",
                "+    TargetGraph targetGraph =",
                "+        new TargetGraph(",
                "+            mutableTargetGraph,",
                "+            ImmutableMap.of(fakeKeyTarget1, fakeTargetNode1, fakeKeyTarget2, fakeTargetNode2));",
                "+",
                "+    BuildRuleKey key1 =",
                "+        ImmutableBuildRuleKey.of(",
                "+            fakeKeyTarget1,",
                "+            ImmutableBuildRuleCreationContext.of(",
                "+                targetGraph, ruleResolver, projectFilesystem, cellPathResolver, toolchainProvider));",
                "+",
                "+    BuildRuleKey key2 =",
                "+        ImmutableBuildRuleKey.of(",
                "+            fakeKeyTarget2,",
                "+            ImmutableBuildRuleCreationContext.of(",
                "+                targetGraph, ruleResolver, projectFilesystem, cellPathResolver, toolchainProvider));",
                "+",
                "+    BuildTarget buildTarget = BuildTargetFactory.newInstance(\"//fake:fake\");",
                "+    BuildRule expectedRule = new FakeBuildRule(buildTarget);",
                "+",
                "+    BuildRule returnedRule1 = new FakeBuildRuleWithProviders(providerCollectionBuilder.build());",
                "+    BuildRule returnedRule2 =",
                "+        new FakeBuildRuleWithProviders(",
                "+            providerCollectionBuilder.put(new FakeBuildRuleInfoProvider(1)).build());",
                "+",
                "+    Capture<Function<ImmutableMap<BuildRuleKey, BuildRule>, BuildRule>> functionCapture =",
                "+        EasyMock.newCapture();",
                "+    EasyMock.expect(",
                "+            environment.evaluateAll(",
                "+                EasyMock.eq(ImmutableSet.of(key1, key2)), EasyMock.capture(functionCapture)))",
                "+        .andAnswer(",
                "+            () ->",
                "+                CompletableFuture.completedFuture(",
                "+                    functionCapture",
                "+                        .getValue()",
                "+                        .apply(ImmutableMap.of(key1, returnedRule1, key2, returnedRule2))));",
                "+",
                "+    EasyMock.replay(environment);",
                "+",
                "+    BuildRuleContextWithEnvironment context =",
                "+        ImmutableBuildRuleContextWithEnvironment.of(key1, environment);",
                "+    assertEquals(",
                "+        expectedRule,",
                "+        Futures.getUnchecked(",
                "+            context",
                "+                .getDependenciesProviderCollection(",
                "+                    ImmutableSet.of(key1, key2),",
                "+                    providerCollectionImmutableMap -> {",
                "+                      assertEquals(2, providerCollectionImmutableMap.size());",
                "+                      assertEquals(",
                "+                          returnedRule1.getProviderCollection(),",
                "+                          providerCollectionImmutableMap.get(key1));",
                "+                      assertEquals(",
                "+                          returnedRule2.getProviderCollection(),",
                "+                          providerCollectionImmutableMap.get(key2));",
                "+                      return expectedRule;",
                "+                    })",
                "+                .toCompletableFuture()));",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/rules/provider/FakeBuildRuleWithProviders.java b/test/com/facebook/buck/rules/provider/FakeBuildRuleWithProviders.java",
                "index e92beea9fd..6f47b91005 100644",
                "--- a/test/com/facebook/buck/rules/provider/FakeBuildRuleWithProviders.java",
                "+++ b/test/com/facebook/buck/rules/provider/FakeBuildRuleWithProviders.java",
                "@@ -32,3 +32,3 @@ public class FakeBuildRuleWithProviders extends AbstractBuildRuleWithProviders {",
                "-  protected FakeBuildRuleWithProviders(BuildRuleInfoProviderCollection providers) {",
                "+  public FakeBuildRuleWithProviders(BuildRuleInfoProviderCollection providers) {",
                "     super(providers);"
            ],
            "changed_files": [
                "src/com/facebook/buck/rules/graphbuilder/BUCK",
                "src/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironment.java",
                "src/com/facebook/buck/rules/graphbuilder/BuildRuleKey.java",
                "test/com/facebook/buck/rules/graphbuilder/BUCK",
                "test/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironmentTest.java",
                "test/com/facebook/buck/rules/provider/FakeBuildRuleWithProviders.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: cache, information",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "3b9946b58ff65142d7191212e641b17516e10f38",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522430473,
            "hunks": 10,
            "message": "Replace busy wait w/ `Thread#join()` Summary: These tests were using a busy wait approach in order to avoid timeouts on CI systems like Travis. Test threads get into different states across different test runs and systems. Here, we replace all busy waits for thread states with `Thread#join(500)`. Given the small workloads of the test threads, this should be enough even for Travis CI. Closes https://github.com/facebook/buck/pull/1826 Reviewed By: ttsugriy, davidaurelio Pulled By: davidaurelio fbshipit-source-id: 8828660",
            "diff": [
                "diff --git a/test/com/facebook/buck/worker/WorkerProcessPoolTest.java b/test/com/facebook/buck/worker/WorkerProcessPoolTest.java",
                "index 39dbf4ee3c..ace5537e04 100644",
                "--- a/test/com/facebook/buck/worker/WorkerProcessPoolTest.java",
                "+++ b/test/com/facebook/buck/worker/WorkerProcessPoolTest.java",
                "@@ -27,7 +27,4 @@ import com.google.common.hash.Hashing;",
                " import java.io.IOException;",
                "-import java.lang.Thread.State;",
                "-import java.util.Arrays;",
                " import java.util.Collections;",
                " import java.util.HashSet;",
                "-import java.util.List;",
                " import java.util.Set;",
                "@@ -50,2 +47,3 @@ public class WorkerProcessPoolTest {",
                "+  private static final int WAIT_FOR_TEST_THREADS_TIMEOUT = 500;",
                "   private TestThreads testThreads;",
                "@@ -71,8 +69,4 @@ public class WorkerProcessPoolTest {",
                "     }",
                "+    testThreads.join(WAIT_FOR_TEST_THREADS_TIMEOUT);",
                "-    testThreads.awaitThreadStates(State.TERMINATED, State.WAITING);",
                "-",
                "-    State[] testThreadStates =",
                "-        testThreads.threads().stream().map(Thread::getState).toArray(State[]::new);",
                "-    assertThat(Arrays.asList(testThreadStates), Matchers.everyItem(Matchers.is(State.TERMINATED)));",
                "     assertThat(createdWorkers.size(), Matchers.is(maxWorkers));",
                "@@ -206,5 +200,3 @@ public class WorkerProcessPoolTest {",
                "-    awaitThreadState(secondThread, State.TERMINATED, State.BLOCKED);",
                "-",
                "-    assertThat(secondThread.getState(), Matchers.is(State.TERMINATED));",
                "+    secondThread.join(WAIT_FOR_TEST_THREADS_TIMEOUT);",
                "@@ -251,6 +243,5 @@ public class WorkerProcessPoolTest {",
                "-    awaitThreadState(firstThread, State.TERMINATED, State.BLOCKED, State.WAITING);",
                "+    firstThread.join(WAIT_FOR_TEST_THREADS_TIMEOUT);",
                "     // here, thread 1 has borrowed a worker two times, or is blocked returning the first worker.",
                "-    assertThat(firstThread.getState(), Matchers.is(State.TERMINATED));",
                "     assertThat(secondBorrowedWorker.get(), Matchers.is(firstBorrowedWorker.get()));",
                "@@ -324,14 +315,2 @@ public class WorkerProcessPoolTest {",
                "-  private static void awaitThreadState(Thread thread, State... desiredState)",
                "-      throws InterruptedException {",
                "-    awaitThreadState(thread, Arrays.asList(desiredState));",
                "-  }",
                "-",
                "-  private static void awaitThreadState(Thread thread, List<State> desiredState)",
                "-      throws InterruptedException {",
                "-    while (!desiredState.contains(thread.getState())) {",
                "-      Thread.sleep(1);",
                "-    }",
                "-  }",
                "-",
                "   @FunctionalInterface",
                "@@ -376,6 +355,5 @@ public class WorkerProcessPoolTest {",
                "-    void awaitThreadStates(State... desiredStates) throws InterruptedException {",
                "-      List<State> states = Arrays.asList(desiredStates);",
                "+    void join(int millis) throws InterruptedException {",
                "       for (Thread thread : threads) {",
                "-        awaitThreadState(thread, states);",
                "+        thread.join(millis);",
                "       }"
            ],
            "changed_files": [
                "test/com/facebook/buck/worker/WorkerProcessPoolTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: load, state",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "806d978cdfd6dbbaac3e2e529d8c91de4ea30c97",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521506991,
            "hunks": 213,
            "message": "Add BuildRuleResolver param to more NativeLinkable methods Summary: A step toward removing `BuildRuleResolver` field references from `BuildRule`s and related objects. Test Plan: CI Reviewed By: ttsugriy fbshipit-source-id: 1224623",
            "diff": [
                "diff --git a/src/com/facebook/buck/android/AndroidNativeLibsPackageableGraphEnhancer.java b/src/com/facebook/buck/android/AndroidNativeLibsPackageableGraphEnhancer.java",
                "index bdb5098f37..995b53d34d 100644",
                "--- a/src/com/facebook/buck/android/AndroidNativeLibsPackageableGraphEnhancer.java",
                "+++ b/src/com/facebook/buck/android/AndroidNativeLibsPackageableGraphEnhancer.java",
                "@@ -148,6 +148,6 @@ public class AndroidNativeLibsPackageableGraphEnhancer {",
                "       NativeLinkable nativeLinkable = linkableEntry.getValue();",
                "-      if (nativeLinkable.getPreferredLinkage(platform.getCxxPlatform())",
                "+      if (nativeLinkable.getPreferredLinkage(platform.getCxxPlatform(), ruleResolver)",
                "           != NativeLinkable.Linkage.STATIC) {",
                "         ImmutableMap<String, SourcePath> solibs =",
                "-            nativeLinkable.getSharedLibraries(platform.getCxxPlatform());",
                "+            nativeLinkable.getSharedLibraries(platform.getCxxPlatform(), ruleResolver);",
                "         for (Map.Entry<String, SourcePath> entry : solibs.entrySet()) {",
                "diff --git a/src/com/facebook/buck/android/NativeLibraryMergeEnhancer.java b/src/com/facebook/buck/android/NativeLibraryMergeEnhancer.java",
                "index 9b8f49dbcb..5fe0d020a2 100644",
                "--- a/src/com/facebook/buck/android/NativeLibraryMergeEnhancer.java",
                "+++ b/src/com/facebook/buck/android/NativeLibraryMergeEnhancer.java",
                "@@ -168,3 +168,4 @@ class NativeLibraryMergeEnhancer {",
                "         sonameMapBuilder,",
                "-        sonameTargetsBuilder);",
                "+        sonameTargetsBuilder,",
                "+        ruleResolver);",
                "     builder.setSonameMapping(sonameMapBuilder.build());",
                "@@ -334,3 +335,4 @@ class NativeLibraryMergeEnhancer {",
                "       ImmutableSortedMap.Builder<String, String> sonameMapBuilder,",
                "-      ImmutableSetMultimap.Builder<String, String> sonameTargetsBuilder) {",
                "+      ImmutableSetMultimap.Builder<String, String> sonameTargetsBuilder,",
                "+      BuildRuleResolver ruleResolver) {",
                "     for (Map.Entry<NativeLinkable, MergedNativeLibraryConstituents> entry :",
                "@@ -339,3 +341,3 @@ class NativeLibraryMergeEnhancer {",
                "       for (Map.Entry<String, SourcePath> sonameEntry :",
                "-          entry.getKey().getSharedLibraries(anyAndroidCxxPlatform).entrySet()) {",
                "+          entry.getKey().getSharedLibraries(anyAndroidCxxPlatform, ruleResolver).entrySet()) {",
                "         String origName = sonameEntry.getKey();",
                "@@ -668,3 +670,3 @@ class NativeLibraryMergeEnhancer {",
                "       ImmutableMap<String, SourcePath> shared =",
                "-          constituents.getLinkables().iterator().next().getSharedLibraries(platform);",
                "+          constituents.getLinkables().iterator().next().getSharedLibraries(platform, ruleResolver);",
                "       Preconditions.checkState(shared.size() == 1);",
                "@@ -798,3 +800,4 @@ class NativeLibraryMergeEnhancer {",
                "         boolean forceLinkWhole,",
                "-        ImmutableSet<LanguageExtensions> languageExtensions) {",
                "+        ImmutableSet<LanguageExtensions> languageExtensions,",
                "+        BuildRuleResolver ruleResolver) {",
                "@@ -805,3 +808,4 @@ class NativeLibraryMergeEnhancer {",
                "           builder.add(",
                "-              linkable.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.STATIC_PIC));",
                "+              linkable.getNativeLinkableInput(",
                "+                  cxxPlatform, Linker.LinkableDepType.STATIC_PIC, ruleResolver));",
                "         }",
                "@@ -815,3 +819,4 @@ class NativeLibraryMergeEnhancer {",
                "       // TODO(dreiss): Should we cache the output of getSharedLibraries per-platform?",
                "-      ImmutableMap<String, SourcePath> sharedLibraries = getSharedLibraries(cxxPlatform);",
                "+      ImmutableMap<String, SourcePath> sharedLibraries =",
                "+          getSharedLibraries(cxxPlatform, ruleResolver);",
                "       for (SourcePath sharedLib : sharedLibraries.values()) {",
                "@@ -857,3 +862,4 @@ class NativeLibraryMergeEnhancer {",
                "           NativeLinkableInput staticPic =",
                "-              linkable.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.STATIC_PIC);",
                "+              linkable.getNativeLinkableInput(",
                "+                  cxxPlatform, Linker.LinkableDepType.STATIC_PIC, ruleResolver);",
                "           builder.add(",
                "@@ -867,3 +873,3 @@ class NativeLibraryMergeEnhancer {",
                "     @Override",
                "-    public Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+    public Linkage getPreferredLinkage(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "       // If we have any non-static constituents, our preferred linkage is shared",
                "@@ -875,3 +881,3 @@ class NativeLibraryMergeEnhancer {",
                "       for (NativeLinkable linkable : constituents.getLinkables()) {",
                "-        if (linkable.getPreferredLinkage(cxxPlatform) != Linkage.STATIC) {",
                "+        if (linkable.getPreferredLinkage(cxxPlatform, ruleResolver) != Linkage.STATIC) {",
                "           return Linkage.SHARED;",
                "@@ -884,4 +890,5 @@ class NativeLibraryMergeEnhancer {",
                "     @Override",
                "-    public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "-      if (getPreferredLinkage(cxxPlatform) == Linkage.STATIC) {",
                "+    public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+        CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+      if (getPreferredLinkage(cxxPlatform, ruleResolver) == Linkage.STATIC) {",
                "         return ImmutableMap.of();",
                "@@ -890,3 +897,7 @@ class NativeLibraryMergeEnhancer {",
                "       ImmutableMap<String, SourcePath> originalSharedLibraries =",
                "-          constituents.getLinkables().iterator().next().getSharedLibraries(cxxPlatform);",
                "+          constituents",
                "+              .getLinkables()",
                "+              .iterator()",
                "+              .next()",
                "+              .getSharedLibraries(cxxPlatform, ruleResolver);",
                "       if (canUseOriginal",
                "diff --git a/src/com/facebook/buck/apple/PrebuiltAppleFramework.java b/src/com/facebook/buck/apple/PrebuiltAppleFramework.java",
                "index b78da96d05..83265c04ad 100644",
                "--- a/src/com/facebook/buck/apple/PrebuiltAppleFramework.java",
                "+++ b/src/com/facebook/buck/apple/PrebuiltAppleFramework.java",
                "@@ -244,3 +244,4 @@ public class PrebuiltAppleFramework extends AbstractBuildRuleWithDeclaredAndExtr",
                "       boolean forceLinkWhole,",
                "-      ImmutableSet<LanguageExtensions> languageExtensions) {",
                "+      ImmutableSet<LanguageExtensions> languageExtensions,",
                "+      BuildRuleResolver ruleResolver) {",
                "     // forceLinkWhole is not needed for PrebuiltAppleFramework so we provide constant value",
                "@@ -251,3 +252,4 @@ public class PrebuiltAppleFramework extends AbstractBuildRuleWithDeclaredAndExtr",
                "   @Override",
                "-  public NativeLinkable.Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+  public NativeLinkable.Linkage getPreferredLinkage(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return this.preferredLinkage;",
                "@@ -256,3 +258,4 @@ public class PrebuiltAppleFramework extends AbstractBuildRuleWithDeclaredAndExtr",
                "   @Override",
                "-  public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+  public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return ImmutableMap.of();",
                "diff --git a/src/com/facebook/buck/cxx/AbstractOmnibusRoots.java b/src/com/facebook/buck/cxx/AbstractOmnibusRoots.java",
                "index df9b750c4c..9731d8f63f 100644",
                "--- a/src/com/facebook/buck/cxx/AbstractOmnibusRoots.java",
                "+++ b/src/com/facebook/buck/cxx/AbstractOmnibusRoots.java",
                "@@ -50,4 +50,5 @@ abstract class AbstractOmnibusRoots {",
                "-  public static Builder builder(CxxPlatform cxxPlatform, ImmutableSet<BuildTarget> excludes) {",
                "-    return new Builder(cxxPlatform, excludes);",
                "+  public static Builder builder(",
                "+      CxxPlatform cxxPlatform, ImmutableSet<BuildTarget> excludes, BuildRuleResolver ruleResolver) {",
                "+    return new Builder(cxxPlatform, excludes, ruleResolver);",
                "   }",
                "@@ -58,2 +59,3 @@ abstract class AbstractOmnibusRoots {",
                "     private final ImmutableSet<BuildTarget> excludes;",
                "+    private final BuildRuleResolver ruleResolver;",
                "@@ -62,5 +64,9 @@ abstract class AbstractOmnibusRoots {",
                "-    private Builder(CxxPlatform cxxPlatform, ImmutableSet<BuildTarget> excludes) {",
                "+    private Builder(",
                "+        CxxPlatform cxxPlatform,",
                "+        ImmutableSet<BuildTarget> excludes,",
                "+        BuildRuleResolver ruleResolver) {",
                "       this.cxxPlatform = cxxPlatform;",
                "       this.excludes = excludes;",
                "+      this.ruleResolver = ruleResolver;",
                "     }",
                "@@ -86,3 +92,3 @@ abstract class AbstractOmnibusRoots {",
                "           && !excludes.contains(node.getBuildTarget())",
                "-          && node.supportsOmnibusLinking(cxxPlatform)) {",
                "+          && node.supportsOmnibusLinking(cxxPlatform, ruleResolver)) {",
                "         addIncludedRoot(target.get());",
                "@@ -93,4 +99,3 @@ abstract class AbstractOmnibusRoots {",
                "-    private ImmutableMap<BuildTarget, NativeLinkable> buildExcluded(",
                "-        BuildRuleResolver ruleResolver) {",
                "+    private ImmutableMap<BuildTarget, NativeLinkable> buildExcluded() {",
                "       Map<BuildTarget, NativeLinkable> excluded = new LinkedHashMap<>();",
                "@@ -108,3 +113,3 @@ abstract class AbstractOmnibusRoots {",
                "         public Iterable<NativeLinkable> visit(NativeLinkable linkable) throws RuntimeException {",
                "-          if (!linkable.supportsOmnibusLinking(cxxPlatform)) {",
                "+          if (!linkable.supportsOmnibusLinking(cxxPlatform, ruleResolver)) {",
                "             excluded.put(linkable.getBuildTarget(), linkable);",
                "@@ -149,4 +154,4 @@ abstract class AbstractOmnibusRoots {",
                "-    public OmnibusRoots build(BuildRuleResolver ruleResolver) {",
                "-      ImmutableMap<BuildTarget, NativeLinkable> excluded = buildExcluded(ruleResolver);",
                "+    public OmnibusRoots build() {",
                "+      ImmutableMap<BuildTarget, NativeLinkable> excluded = buildExcluded();",
                "       ImmutableMap<BuildTarget, NativeLinkTarget> included = buildIncluded(excluded.keySet());",
                "diff --git a/src/com/facebook/buck/cxx/AbstractPrebuiltCxxLibraryGroupDescription.java b/src/com/facebook/buck/cxx/AbstractPrebuiltCxxLibraryGroupDescription.java",
                "index 6ceeecc7bc..945e83ae74 100644",
                "--- a/src/com/facebook/buck/cxx/AbstractPrebuiltCxxLibraryGroupDescription.java",
                "+++ b/src/com/facebook/buck/cxx/AbstractPrebuiltCxxLibraryGroupDescription.java",
                "@@ -238,3 +238,4 @@ abstract class AbstractPrebuiltCxxLibraryGroupDescription",
                "           boolean forceLinkWhole,",
                "-          ImmutableSet<LanguageExtensions> languageExtensions) {",
                "+          ImmutableSet<LanguageExtensions> languageExtensions,",
                "+          BuildRuleResolver ruleResolver) {",
                "@@ -280,3 +281,3 @@ abstract class AbstractPrebuiltCxxLibraryGroupDescription",
                "       @Override",
                "-      public Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+      public Linkage getPreferredLinkage(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "@@ -303,4 +304,5 @@ abstract class AbstractPrebuiltCxxLibraryGroupDescription",
                "       @Override",
                "-      public boolean supportsOmnibusLinking(CxxPlatform cxxPlatform) {",
                "-        return getPreferredLinkage(cxxPlatform) != Linkage.SHARED;",
                "+      public boolean supportsOmnibusLinking(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+        return getPreferredLinkage(cxxPlatform, this.ruleResolver) != Linkage.SHARED;",
                "       }",
                "@@ -326,3 +328,4 @@ abstract class AbstractPrebuiltCxxLibraryGroupDescription",
                "       @Override",
                "-      public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+      public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "         if (!isPlatformSupported(cxxPlatform)) {",
                "diff --git a/src/com/facebook/buck/cxx/CxxGenruleDescription.java b/src/com/facebook/buck/cxx/CxxGenruleDescription.java",
                "index 77a473d7ff..86fe6f9fc1 100644",
                "--- a/src/com/facebook/buck/cxx/CxxGenruleDescription.java",
                "+++ b/src/com/facebook/buck/cxx/CxxGenruleDescription.java",
                "@@ -637,3 +637,4 @@ public class CxxGenruleDescription extends AbstractGenruleDescription<CxxGenrule",
                "         nativeLinkableInputs.add(",
                "-            NativeLinkables.getNativeLinkableInput(cxxPlatform, depType, nativeLinkable));",
                "+            NativeLinkables.getNativeLinkableInput(",
                "+                cxxPlatform, depType, nativeLinkable, ruleResolver));",
                "       }",
                "diff --git a/src/com/facebook/buck/cxx/CxxLibrary.java b/src/com/facebook/buck/cxx/CxxLibrary.java",
                "index 008b638a8f..bc580b8b24 100644",
                "--- a/src/com/facebook/buck/cxx/CxxLibrary.java",
                "+++ b/src/com/facebook/buck/cxx/CxxLibrary.java",
                "@@ -387,3 +387,4 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       boolean forceLinkWhole,",
                "-      ImmutableSet<LanguageExtensions> languageExtensions) {",
                "+      ImmutableSet<LanguageExtensions> languageExtensions,",
                "+      BuildRuleResolver ruleResolver) {",
                "     return nativeLinkableCache.getUnchecked(",
                "@@ -407,3 +408,4 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   @Override",
                "-  public NativeLinkable.Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+  public NativeLinkable.Linkage getPreferredLinkage(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return linkage;",
                "@@ -431,3 +433,4 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   @Override",
                "-  public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+  public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     if (headerOnly.test(cxxPlatform)) {",
                "diff --git a/src/com/facebook/buck/cxx/CxxLinkableEnhancer.java b/src/com/facebook/buck/cxx/CxxLinkableEnhancer.java",
                "index 2b3f6c59f3..02c6fbf445 100644",
                "--- a/src/com/facebook/buck/cxx/CxxLinkableEnhancer.java",
                "+++ b/src/com/facebook/buck/cxx/CxxLinkableEnhancer.java",
                "@@ -197,3 +197,4 @@ public class CxxLinkableEnhancer {",
                "                 nativeLinkable -> {",
                "-                  NativeLinkable.Linkage link = nativeLinkable.getPreferredLinkage(cxxPlatform);",
                "+                  NativeLinkable.Linkage link =",
                "+                      nativeLinkable.getPreferredLinkage(cxxPlatform, ruleResolver);",
                "                   NativeLinkableInput input =",
                "@@ -203,3 +204,4 @@ public class CxxLinkableEnhancer {",
                "                           linkWholeDeps.contains(nativeLinkable.getBuildTarget()),",
                "-                          ImmutableSet.of());",
                "+                          ImmutableSet.of(),",
                "+                          ruleResolver);",
                "                   LOG.verbose(\"Native linkable %s returned input %s\", nativeLinkable, input);",
                "diff --git a/src/com/facebook/buck/cxx/Omnibus.java b/src/com/facebook/buck/cxx/Omnibus.java",
                "index 4354d166e7..b09bfe1a46 100644",
                "--- a/src/com/facebook/buck/cxx/Omnibus.java",
                "+++ b/src/com/facebook/buck/cxx/Omnibus.java",
                "@@ -143,3 +143,3 @@ public class Omnibus {",
                "             NativeLinkables.getLinkStyle(",
                "-                dep.getPreferredLinkage(cxxPlatform), Linker.LinkableDepType.SHARED);",
                "+                dep.getPreferredLinkage(cxxPlatform, ruleResolver), Linker.LinkableDepType.SHARED);",
                "         Preconditions.checkState(linkStyle != Linker.LinkableDepType.STATIC);",
                "@@ -173,3 +173,3 @@ public class Omnibus {",
                "         nativeLinkables.putAll(deps);",
                "-        if (!nativeLinkable.supportsOmnibusLinking(cxxPlatform)) {",
                "+        if (!nativeLinkable.supportsOmnibusLinking(cxxPlatform, ruleResolver)) {",
                "           excluded.add(target);",
                "@@ -324,3 +324,4 @@ public class Omnibus {",
                "           NativeLinkables.getLinkStyle(",
                "-              nativeLinkable.getPreferredLinkage(cxxPlatform), Linker.LinkableDepType.SHARED);",
                "+              nativeLinkable.getPreferredLinkage(cxxPlatform, ruleResolver),",
                "+              Linker.LinkableDepType.SHARED);",
                "@@ -329,3 +330,4 @@ public class Omnibus {",
                "         Preconditions.checkState(linkStyle == Linker.LinkableDepType.STATIC_PIC);",
                "-        argsBuilder.addAll(nativeLinkable.getNativeLinkableInput(cxxPlatform, linkStyle).getArgs());",
                "+        argsBuilder.addAll(",
                "+            nativeLinkable.getNativeLinkableInput(cxxPlatform, linkStyle, ruleResolver).getArgs());",
                "         continue;",
                "@@ -355,3 +357,4 @@ public class Omnibus {",
                "       Preconditions.checkState(spec.getExcluded().containsKey(linkableTarget));",
                "-      argsBuilder.addAll(nativeLinkable.getNativeLinkableInput(cxxPlatform, linkStyle).getArgs());",
                "+      argsBuilder.addAll(",
                "+          nativeLinkable.getNativeLinkableInput(cxxPlatform, linkStyle, ruleResolver).getArgs());",
                "     }",
                "@@ -579,3 +582,3 @@ public class Omnibus {",
                "           NativeLinkables.getNativeLinkableInput(",
                "-              cxxPlatform, Linker.LinkableDepType.STATIC_PIC, nativeLinkable);",
                "+              cxxPlatform, Linker.LinkableDepType.STATIC_PIC, nativeLinkable, ruleResolver);",
                "       argsBuilder.addAll(input.getArgs());",
                "@@ -591,3 +594,3 @@ public class Omnibus {",
                "           NativeLinkables.getNativeLinkableInput(",
                "-              cxxPlatform, Linker.LinkableDepType.SHARED, nativeLinkable);",
                "+              cxxPlatform, Linker.LinkableDepType.SHARED, nativeLinkable, ruleResolver);",
                "       argsBuilder.addAll(input.getArgs());",
                "@@ -742,5 +745,6 @@ public class Omnibus {",
                "       if (spec.getExcludedRoots().contains(nativeLinkable.getBuildTarget())",
                "-          || nativeLinkable.getPreferredLinkage(cxxPlatform) != NativeLinkable.Linkage.STATIC) {",
                "+          || nativeLinkable.getPreferredLinkage(cxxPlatform, ruleResolver)",
                "+              != NativeLinkable.Linkage.STATIC) {",
                "         for (Map.Entry<String, SourcePath> ent :",
                "-            nativeLinkable.getSharedLibraries(cxxPlatform).entrySet()) {",
                "+            nativeLinkable.getSharedLibraries(cxxPlatform, ruleResolver).entrySet()) {",
                "           libs.addLibraries(OmnibusLibrary.of(ent.getKey(), ent.getValue()));",
                "diff --git a/src/com/facebook/buck/cxx/PreInclude.java b/src/com/facebook/buck/cxx/PreInclude.java",
                "index 302f3644b6..4faadbc9c6 100644",
                "--- a/src/com/facebook/buck/cxx/PreInclude.java",
                "+++ b/src/com/facebook/buck/cxx/PreInclude.java",
                "@@ -149,3 +149,3 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   @Override",
                "-  public Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+  public Linkage getPreferredLinkage(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return Linkage.ANY;",
                "@@ -155,3 +155,4 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   @Override",
                "-  public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+  public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return ImmutableMap.of();",
                "@@ -171,3 +172,4 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       boolean forceLinkWhole,",
                "-      ImmutableSet<LanguageExtensions> languageExtensions) {",
                "+      ImmutableSet<LanguageExtensions> languageExtensions,",
                "+      BuildRuleResolver ruleResolver) {",
                "     return NativeLinkableInput.of();",
                "diff --git a/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java b/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "index 041d04c736..f54323f68f 100644",
                "--- a/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "+++ b/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "@@ -687,3 +687,4 @@ public class PrebuiltCxxLibraryDescription",
                "           if (type == Linker.LinkableDepType.SHARED) {",
                "-            Preconditions.checkState(getPreferredLinkage(cxxPlatform) != Linkage.STATIC);",
                "+            Preconditions.checkState(",
                "+                getPreferredLinkage(cxxPlatform, ruleResolver) != Linkage.STATIC);",
                "             SourcePath sharedLibrary = requireSharedLibrary(cxxPlatform, true);",
                "@@ -699,3 +700,4 @@ public class PrebuiltCxxLibraryDescription",
                "           } else {",
                "-            Preconditions.checkState(getPreferredLinkage(cxxPlatform) != Linkage.SHARED);",
                "+            Preconditions.checkState(",
                "+                getPreferredLinkage(cxxPlatform, ruleResolver) != Linkage.SHARED);",
                "             Optional<SourcePath> staticLibraryPath =",
                "@@ -728,3 +730,4 @@ public class PrebuiltCxxLibraryDescription",
                "           boolean forceLinkWhole,",
                "-          ImmutableSet<LanguageExtensions> languageExtensions) {",
                "+          ImmutableSet<LanguageExtensions> languageExtensions,",
                "+          BuildRuleResolver ruleResolver) {",
                "         return nativeLinkableCache.getUnchecked(",
                "@@ -734,3 +737,4 @@ public class PrebuiltCxxLibraryDescription",
                "       @Override",
                "-      public NativeLinkable.Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+      public NativeLinkable.Linkage getPreferredLinkage(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "         if (args.isHeaderOnly()) {",
                "@@ -748,3 +752,3 @@ public class PrebuiltCxxLibraryDescription",
                "         Optional<Linkage> inferredLinkage =",
                "-            paths.getLinkage(projectFilesystem, ruleResolver, cellRoots, cxxPlatform);",
                "+            paths.getLinkage(projectFilesystem, this.ruleResolver, cellRoots, cxxPlatform);",
                "         if (inferredLinkage.isPresent()) {",
                "@@ -756,5 +760,6 @@ public class PrebuiltCxxLibraryDescription",
                "       @Override",
                "-      public boolean supportsOmnibusLinking(CxxPlatform cxxPlatform) {",
                "+      public boolean supportsOmnibusLinking(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "         return args.getSupportsMergedLinking()",
                "-            .orElse(getPreferredLinkage(cxxPlatform) != Linkage.SHARED);",
                "+            .orElse(getPreferredLinkage(cxxPlatform, this.ruleResolver) != Linkage.SHARED);",
                "       }",
                "@@ -776,3 +781,4 @@ public class PrebuiltCxxLibraryDescription",
                "       @Override",
                "-      public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+      public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "         if (!isPlatformSupported(cxxPlatform)) {",
                "@@ -792,3 +798,3 @@ public class PrebuiltCxxLibraryDescription",
                "       public Optional<NativeLinkTarget> getNativeLinkTarget(CxxPlatform cxxPlatform) {",
                "-        if (getPreferredLinkage(cxxPlatform) == Linkage.SHARED) {",
                "+        if (getPreferredLinkage(cxxPlatform, ruleResolver) == Linkage.SHARED) {",
                "           return Optional.empty();",
                "diff --git a/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkable.java b/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkable.java",
                "index b85b82dd56..1de1174e5e 100644",
                "--- a/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkable.java",
                "+++ b/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkable.java",
                "@@ -81,3 +81,4 @@ public interface NativeLinkable {",
                "       boolean forceLinkWhole,",
                "-      ImmutableSet<LanguageExtensions> languageExtensions);",
                "+      ImmutableSet<LanguageExtensions> languageExtensions,",
                "+      BuildRuleResolver ruleResolver);",
                "@@ -88,7 +89,7 @@ public interface NativeLinkable {",
                "   default NativeLinkableInput getNativeLinkableInput(",
                "-      CxxPlatform cxxPlatform, Linker.LinkableDepType type) {",
                "-    return getNativeLinkableInput(cxxPlatform, type, false, ImmutableSet.of());",
                "+      CxxPlatform cxxPlatform, Linker.LinkableDepType type, BuildRuleResolver ruleResolver) {",
                "+    return getNativeLinkableInput(cxxPlatform, type, false, ImmutableSet.of(), ruleResolver);",
                "   }",
                "-  Linkage getPreferredLinkage(CxxPlatform cxxPlatform);",
                "+  Linkage getPreferredLinkage(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver);",
                "@@ -98,6 +99,8 @@ public interface NativeLinkable {",
                "    */",
                "-  ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform);",
                "+  ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver);",
                "   /** @return whether this {@link NativeLinkable} supports omnibus linking. */",
                "-  default boolean supportsOmnibusLinking(@SuppressWarnings(\"unused\") CxxPlatform cxxPlatform) {",
                "+  @SuppressWarnings(\"unused\")",
                "+  default boolean supportsOmnibusLinking(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return true;",
                "diff --git a/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkables.java b/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkables.java",
                "index b274bccafe..3b262eb397 100644",
                "--- a/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkables.java",
                "+++ b/src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkables.java",
                "@@ -148,3 +148,3 @@ public class NativeLinkables {",
                "     boolean shouldTraverse;",
                "-    switch (nativeLinkable.getPreferredLinkage(cxxPlatform)) {",
                "+    switch (nativeLinkable.getPreferredLinkage(cxxPlatform, ruleResolver)) {",
                "       case ANY:",
                "@@ -225,5 +225,9 @@ public class NativeLinkables {",
                "   public static NativeLinkableInput getNativeLinkableInput(",
                "-      CxxPlatform cxxPlatform, Linker.LinkableDepType linkStyle, NativeLinkable nativeLinkable) {",
                "-    NativeLinkable.Linkage link = nativeLinkable.getPreferredLinkage(cxxPlatform);",
                "-    return nativeLinkable.getNativeLinkableInput(cxxPlatform, getLinkStyle(link, linkStyle));",
                "+      CxxPlatform cxxPlatform,",
                "+      Linker.LinkableDepType linkStyle,",
                "+      NativeLinkable nativeLinkable,",
                "+      BuildRuleResolver ruleResolver) {",
                "+    NativeLinkable.Linkage link = nativeLinkable.getPreferredLinkage(cxxPlatform, ruleResolver);",
                "+    return nativeLinkable.getNativeLinkableInput(",
                "+        cxxPlatform, getLinkStyle(link, linkStyle), ruleResolver);",
                "   }",
                "@@ -248,3 +252,4 @@ public class NativeLinkables {",
                "     for (NativeLinkable nativeLinkable : nativeLinkables.values()) {",
                "-      nativeLinkableInputs.add(getNativeLinkableInput(cxxPlatform, depType, nativeLinkable));",
                "+      nativeLinkableInputs.add(",
                "+          getNativeLinkableInput(cxxPlatform, depType, nativeLinkable, ruleResolver));",
                "     }",
                "@@ -315,5 +320,6 @@ public class NativeLinkables {",
                "             e ->",
                "-                e.getValue().getPreferredLinkage(cxxPlatform) != NativeLinkable.Linkage.STATIC",
                "+                e.getValue().getPreferredLinkage(cxxPlatform, ruleResolver)",
                "+                        != NativeLinkable.Linkage.STATIC",
                "                     || (alwaysIncludeRoots && roots.containsKey(e.getKey())))",
                "-        .forEach(e -> builder.add(cxxPlatform, e.getValue()));",
                "+        .forEach(e -> builder.add(cxxPlatform, e.getValue(), ruleResolver));",
                "     return builder.build();",
                "@@ -342,4 +348,6 @@ public class NativeLinkables {",
                "     /** Adds libraries from the given {@link NativeLinkable}. */",
                "-    public SharedLibrariesBuilder add(CxxPlatform cxxPlatform, NativeLinkable linkable) {",
                "-      ImmutableMap<String, SourcePath> libs = linkable.getSharedLibraries(cxxPlatform);",
                "+    public SharedLibrariesBuilder add(",
                "+        CxxPlatform cxxPlatform, NativeLinkable linkable, BuildRuleResolver ruleResolver) {",
                "+      ImmutableMap<String, SourcePath> libs =",
                "+          linkable.getSharedLibraries(cxxPlatform, ruleResolver);",
                "       for (Map.Entry<String, SourcePath> lib : libs.entrySet()) {",
                "diff --git a/src/com/facebook/buck/d/DLibrary.java b/src/com/facebook/buck/d/DLibrary.java",
                "index 968cbf9f45..cc7d248c85 100644",
                "--- a/src/com/facebook/buck/d/DLibrary.java",
                "+++ b/src/com/facebook/buck/d/DLibrary.java",
                "@@ -66,3 +66,4 @@ public class DLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps implements N",
                "       boolean forceLinkWhole,",
                "-      ImmutableSet<LanguageExtensions> languageExtensions) {",
                "+      ImmutableSet<LanguageExtensions> languageExtensions,",
                "+      BuildRuleResolver ruleResolver) {",
                "     Archive archive =",
                "@@ -78,3 +79,4 @@ public class DLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps implements N",
                "   @Override",
                "-  public NativeLinkable.Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+  public NativeLinkable.Linkage getPreferredLinkage(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return Linkage.STATIC;",
                "@@ -83,3 +85,4 @@ public class DLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps implements N",
                "   @Override",
                "-  public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+  public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return ImmutableMap.of();",
                "diff --git a/src/com/facebook/buck/halide/HalideLibrary.java b/src/com/facebook/buck/halide/HalideLibrary.java",
                "index 4ba06d9361..24347e9c57 100644",
                "--- a/src/com/facebook/buck/halide/HalideLibrary.java",
                "+++ b/src/com/facebook/buck/halide/HalideLibrary.java",
                "@@ -142,3 +142,4 @@ public class HalideLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       boolean forceLinkWhole,",
                "-      ImmutableSet<LanguageExtensions> languageExtensions) {",
                "+      ImmutableSet<LanguageExtensions> languageExtensions,",
                "+      BuildRuleResolver ruleResolver) {",
                "     if (!isPlatformSupported(cxxPlatform)) {",
                "@@ -153,3 +154,4 @@ public class HalideLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   @Override",
                "-  public NativeLinkable.Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+  public NativeLinkable.Linkage getPreferredLinkage(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return NativeLinkable.Linkage.STATIC;",
                "@@ -158,3 +160,4 @@ public class HalideLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   @Override",
                "-  public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+  public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return ImmutableMap.of();",
                "diff --git a/src/com/facebook/buck/haskell/HaskellDescriptionUtils.java b/src/com/facebook/buck/haskell/HaskellDescriptionUtils.java",
                "index 73974d0951..d9f4a2e887 100644",
                "--- a/src/com/facebook/buck/haskell/HaskellDescriptionUtils.java",
                "+++ b/src/com/facebook/buck/haskell/HaskellDescriptionUtils.java",
                "@@ -299,3 +299,4 @@ public class HaskellDescriptionUtils {",
                "             .values()) {",
                "-      NativeLinkable.Linkage link = nativeLinkable.getPreferredLinkage(platform.getCxxPlatform());",
                "+      NativeLinkable.Linkage link =",
                "+          nativeLinkable.getPreferredLinkage(platform.getCxxPlatform(), resolver);",
                "       NativeLinkableInput input =",
                "@@ -305,3 +306,4 @@ public class HaskellDescriptionUtils {",
                "               linkWholeDeps.contains(nativeLinkable.getBuildTarget()),",
                "-              ImmutableSet.of());",
                "+              ImmutableSet.of(),",
                "+              resolver);",
                "       linkerArgsBuilder.addAll(input.getArgs());",
                "@@ -534,4 +536,4 @@ public class HaskellDescriptionUtils {",
                "         // Skip statically linked libraries.",
                "-        .filter(l -> l.getPreferredLinkage(platform.getCxxPlatform()) != Linkage.STATIC)",
                "-        .forEach(l -> sharedLibsBuilder.add(platform.getCxxPlatform(), l));",
                "+        .filter(l -> l.getPreferredLinkage(platform.getCxxPlatform(), resolver) != Linkage.STATIC)",
                "+        .forEach(l -> sharedLibsBuilder.add(platform.getCxxPlatform(), l, resolver));",
                "     ImmutableSortedMap<String, SourcePath> sharedLibs = sharedLibsBuilder.build();",
                "@@ -549,5 +551,5 @@ public class HaskellDescriptionUtils {",
                "             l ->",
                "-                l.getPreferredLinkage(platform.getCxxPlatform()) != Linkage.STATIC",
                "+                l.getPreferredLinkage(platform.getCxxPlatform(), resolver) != Linkage.STATIC",
                "                     || omnibusSpec.getExcludedRoots().containsKey(l.getBuildTarget()))",
                "-        .forEach(l -> preloadLibsBuilder.add(platform.getCxxPlatform(), l));",
                "+        .forEach(l -> preloadLibsBuilder.add(platform.getCxxPlatform(), l, resolver));",
                "     ImmutableSortedMap<String, SourcePath> preloadLibs = preloadLibsBuilder.build();",
                "diff --git a/src/com/facebook/buck/haskell/HaskellGhciDescription.java b/src/com/facebook/buck/haskell/HaskellGhciDescription.java",
                "index 8943c564b0..ea29817443 100644",
                "--- a/src/com/facebook/buck/haskell/HaskellGhciDescription.java",
                "+++ b/src/com/facebook/buck/haskell/HaskellGhciDescription.java",
                "@@ -92,3 +92,4 @@ public class HaskellGhciDescription",
                "   /** Whether the nativeLinkable should be linked shared or othewise */",
                "-  public static boolean isPrebuiltSO(NativeLinkable nativeLinkable, CxxPlatform cxxPlatform) {",
                "+  public static boolean isPrebuiltSO(",
                "+      NativeLinkable nativeLinkable, CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "@@ -103,3 +104,3 @@ public class HaskellGhciDescription",
                "     ImmutableMap<String, SourcePath> sharedLibraries =",
                "-        nativeLinkable.getSharedLibraries(cxxPlatform);",
                "+        nativeLinkable.getSharedLibraries(cxxPlatform, ruleResolver);",
                "@@ -157,3 +158,3 @@ public class HaskellGhciDescription",
                "         // a multi-pass walk first.",
                "-        if (isPrebuiltSO(nativeLinkable, cxxPlatform)) {",
                "+        if (isPrebuiltSO(nativeLinkable, cxxPlatform, ruleResolver)) {",
                "           builder.putDeps(nativeLinkable.getBuildTarget(), nativeLinkable);",
                "@@ -218,3 +219,3 @@ public class HaskellGhciDescription",
                "       if (nativeLinkable instanceof CxxLibrary) {",
                "-        NativeLinkable.Linkage link = nativeLinkable.getPreferredLinkage(cxxPlatform);",
                "+        NativeLinkable.Linkage link = nativeLinkable.getPreferredLinkage(cxxPlatform, ruleResolver);",
                "         nativeLinkableInputs.add(",
                "@@ -224,3 +225,4 @@ public class HaskellGhciDescription",
                "                 true,",
                "-                ImmutableSet.of()));",
                "+                ImmutableSet.of(),",
                "+                ruleResolver));",
                "         LOG.verbose(",
                "@@ -235,3 +237,3 @@ public class HaskellGhciDescription",
                "             NativeLinkables.getNativeLinkableInput(",
                "-                cxxPlatform, Linker.LinkableDepType.STATIC_PIC, nativeLinkable));",
                "+                cxxPlatform, Linker.LinkableDepType.STATIC_PIC, nativeLinkable, ruleResolver));",
                "         LOG.verbose(",
                "@@ -253,3 +255,4 @@ public class HaskellGhciDescription",
                "       nativeLinkableInputs.add(",
                "-          NativeLinkables.getNativeLinkableInput(cxxPlatform, LinkableDepType.SHARED, linkable));",
                "+          NativeLinkables.getNativeLinkableInput(",
                "+              cxxPlatform, LinkableDepType.SHARED, linkable, ruleResolver));",
                "     }",
                "diff --git a/src/com/facebook/buck/haskell/HaskellLibraryDescription.java b/src/com/facebook/buck/haskell/HaskellLibraryDescription.java",
                "index 5cdeaab395..121af85000 100644",
                "--- a/src/com/facebook/buck/haskell/HaskellLibraryDescription.java",
                "+++ b/src/com/facebook/buck/haskell/HaskellLibraryDescription.java",
                "@@ -885,3 +885,4 @@ public class HaskellLibraryDescription",
                "           boolean forceLinkWhole,",
                "-          ImmutableSet<LanguageExtensions> languageExtensions) {",
                "+          ImmutableSet<LanguageExtensions> languageExtensions,",
                "+          BuildRuleResolver ruleResolver) {",
                "         Iterable<Arg> linkArgs;",
                "@@ -932,3 +933,3 @@ public class HaskellLibraryDescription",
                "       @Override",
                "-      public Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+      public Linkage getPreferredLinkage(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "         return args.getPreferredLinkage();",
                "@@ -937,3 +938,4 @@ public class HaskellLibraryDescription",
                "       @Override",
                "-      public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+      public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "         ImmutableMap.Builder<String, SourcePath> libs = ImmutableMap.builder();",
                "diff --git a/src/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescription.java b/src/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescription.java",
                "index 2908ad8a18..0150cf1007 100644",
                "--- a/src/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescription.java",
                "+++ b/src/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescription.java",
                "@@ -132,3 +132,4 @@ public class HaskellPrebuiltLibraryDescription",
                "           boolean forceLinkWhole,",
                "-          ImmutableSet<LanguageExtensions> languageExtensions) {",
                "+          ImmutableSet<LanguageExtensions> languageExtensions,",
                "+          BuildRuleResolver ruleResolver) {",
                "         NativeLinkableInput.Builder builder = NativeLinkableInput.builder();",
                "@@ -154,3 +155,3 @@ public class HaskellPrebuiltLibraryDescription",
                "       @Override",
                "-      public Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+      public Linkage getPreferredLinkage(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "         return Linkage.ANY;",
                "@@ -159,3 +160,4 @@ public class HaskellPrebuiltLibraryDescription",
                "       @Override",
                "-      public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+      public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "         return args.getSharedLibs();",
                "diff --git a/src/com/facebook/buck/lua/LuaBinaryDescription.java b/src/com/facebook/buck/lua/LuaBinaryDescription.java",
                "index fc2587843a..f47a2f63fe 100644",
                "--- a/src/com/facebook/buck/lua/LuaBinaryDescription.java",
                "+++ b/src/com/facebook/buck/lua/LuaBinaryDescription.java",
                "@@ -309,3 +309,4 @@ public class LuaBinaryDescription",
                "     LuaPackageComponents.Builder builder = LuaPackageComponents.builder();",
                "-    OmnibusRoots.Builder omnibusRoots = OmnibusRoots.builder(cxxPlatform, ImmutableSet.of());",
                "+    OmnibusRoots.Builder omnibusRoots =",
                "+        OmnibusRoots.builder(cxxPlatform, ImmutableSet.of(), ruleResolver);",
                "@@ -398,3 +399,3 @@ public class LuaBinaryDescription",
                "       // Build the omnibus libraries.",
                "-      OmnibusRoots roots = omnibusRoots.build(ruleResolver);",
                "+      OmnibusRoots roots = omnibusRoots.build();",
                "       OmnibusLibraries libraries =",
                "@@ -503,5 +504,7 @@ public class LuaBinaryDescription",
                "               .values()) {",
                "-        NativeLinkable.Linkage linkage = nativeLinkable.getPreferredLinkage(cxxPlatform);",
                "+        NativeLinkable.Linkage linkage =",
                "+            nativeLinkable.getPreferredLinkage(cxxPlatform, ruleResolver);",
                "         if (linkage != NativeLinkable.Linkage.STATIC) {",
                "-          builder.putAllNativeLibraries(nativeLinkable.getSharedLibraries(cxxPlatform));",
                "+          builder.putAllNativeLibraries(",
                "+              nativeLinkable.getSharedLibraries(cxxPlatform, ruleResolver));",
                "         }",
                "diff --git a/src/com/facebook/buck/lua/SystemLuaCxxLibrary.java b/src/com/facebook/buck/lua/SystemLuaCxxLibrary.java",
                "index 504428f94d..8461652174 100644",
                "--- a/src/com/facebook/buck/lua/SystemLuaCxxLibrary.java",
                "+++ b/src/com/facebook/buck/lua/SystemLuaCxxLibrary.java",
                "@@ -90,3 +90,4 @@ public class SystemLuaCxxLibrary implements AbstractCxxLibrary {",
                "       boolean forceLinkWhole,",
                "-      ImmutableSet<LanguageExtensions> languageExtensions) {",
                "+      ImmutableSet<LanguageExtensions> languageExtensions,",
                "+      BuildRuleResolver ruleResolver) {",
                "     return NativeLinkableInput.builder().addAllArgs(StringArg.from(\"-llua\")).build();",
                "@@ -95,3 +96,3 @@ public class SystemLuaCxxLibrary implements AbstractCxxLibrary {",
                "   @Override",
                "-  public Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+  public Linkage getPreferredLinkage(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return Linkage.SHARED;",
                "@@ -100,3 +101,3 @@ public class SystemLuaCxxLibrary implements AbstractCxxLibrary {",
                "   @Override",
                "-  public boolean supportsOmnibusLinking(CxxPlatform cxxPlatform) {",
                "+  public boolean supportsOmnibusLinking(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return false;",
                "@@ -105,3 +106,4 @@ public class SystemLuaCxxLibrary implements AbstractCxxLibrary {",
                "   @Override",
                "-  public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+  public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return ImmutableMap.of();",
                "diff --git a/src/com/facebook/buck/python/PythonUtil.java b/src/com/facebook/buck/python/PythonUtil.java",
                "index e94c69d1a0..2688edf6f8 100644",
                "--- a/src/com/facebook/buck/python/PythonUtil.java",
                "+++ b/src/com/facebook/buck/python/PythonUtil.java",
                "@@ -195,3 +195,4 @@ public class PythonUtil {",
                "-    OmnibusRoots.Builder omnibusRoots = OmnibusRoots.builder(cxxPlatform, preloadDeps);",
                "+    OmnibusRoots.Builder omnibusRoots =",
                "+        OmnibusRoots.builder(cxxPlatform, preloadDeps, ruleResolver);",
                "@@ -248,3 +249,3 @@ public class PythonUtil {",
                "     if (nativeLinkStrategy == NativeLinkStrategy.MERGED) {",
                "-      OmnibusRoots roots = omnibusRoots.build(ruleResolver);",
                "+      OmnibusRoots roots = omnibusRoots.build();",
                "       OmnibusLibraries libraries =",
                "@@ -317,6 +318,8 @@ public class PythonUtil {",
                "       for (NativeLinkable nativeLinkable : nativeLinkables.values()) {",
                "-        NativeLinkable.Linkage linkage = nativeLinkable.getPreferredLinkage(cxxPlatform);",
                "+        NativeLinkable.Linkage linkage =",
                "+            nativeLinkable.getPreferredLinkage(cxxPlatform, ruleResolver);",
                "         if (nativeLinkableRoots.containsKey(nativeLinkable.getBuildTarget())",
                "             || linkage != NativeLinkable.Linkage.STATIC) {",
                "-          ImmutableMap<String, SourcePath> libs = nativeLinkable.getSharedLibraries(cxxPlatform);",
                "+          ImmutableMap<String, SourcePath> libs =",
                "+              nativeLinkable.getSharedLibraries(cxxPlatform, ruleResolver);",
                "           for (Map.Entry<String, SourcePath> ent : libs.entrySet()) {",
                "@@ -345,3 +348,3 @@ public class PythonUtil {",
                "             .filter(NativeLinkable.class)) {",
                "-      builder.addAll(nativeLinkable.getSharedLibraries(cxxPlatform).keySet());",
                "+      builder.addAll(nativeLinkable.getSharedLibraries(cxxPlatform, resolver).keySet());",
                "     }",
                "diff --git a/src/com/facebook/buck/rust/RustLibraryDescription.java b/src/com/facebook/buck/rust/RustLibraryDescription.java",
                "index e104514733..ccbe7ec6df 100644",
                "--- a/src/com/facebook/buck/rust/RustLibraryDescription.java",
                "+++ b/src/com/facebook/buck/rust/RustLibraryDescription.java",
                "@@ -348,3 +348,4 @@ public class RustLibraryDescription",
                "           boolean forceLinkWhole,",
                "-          ImmutableSet<LanguageExtensions> languageExtensions) {",
                "+          ImmutableSet<LanguageExtensions> languageExtensions,",
                "+          BuildRuleResolver ruleResolver) {",
                "         CrateType crateType;",
                "@@ -391,3 +392,3 @@ public class RustLibraryDescription",
                "       @Override",
                "-      public Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+      public Linkage getPreferredLinkage(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "         return args.getPreferredLinkage();",
                "@@ -396,3 +397,4 @@ public class RustLibraryDescription",
                "       @Override",
                "-      public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+      public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "         ImmutableMap.Builder<String, SourcePath> libs = ImmutableMap.builder();",
                "diff --git a/src/com/facebook/buck/swift/SwiftLibrary.java b/src/com/facebook/buck/swift/SwiftLibrary.java",
                "index 326b351b3f..dd691f4627 100644",
                "--- a/src/com/facebook/buck/swift/SwiftLibrary.java",
                "+++ b/src/com/facebook/buck/swift/SwiftLibrary.java",
                "@@ -145,3 +145,4 @@ class SwiftLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       boolean forceLinkWhole,",
                "-      ImmutableSet<LanguageExtensions> languageExtensions) {",
                "+      ImmutableSet<LanguageExtensions> languageExtensions,",
                "+      BuildRuleResolver ruleResolver) {",
                "     SwiftCompile rule = requireSwiftCompileRule(cxxPlatform.getFlavor());",
                "@@ -153,3 +154,3 @@ class SwiftLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "     boolean isDynamic;",
                "-    Linkage preferredLinkage = getPreferredLinkage(cxxPlatform);",
                "+    Linkage preferredLinkage = getPreferredLinkage(cxxPlatform, ruleResolver);",
                "     switch (preferredLinkage) {",
                "@@ -180,3 +181,4 @@ class SwiftLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   @Override",
                "-  public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+  public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     if (!isPlatformSupported(cxxPlatform)) {",
                "@@ -232,3 +234,4 @@ class SwiftLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   @Override",
                "-  public NativeLinkable.Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+  public NativeLinkable.Linkage getPreferredLinkage(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     // don't create dylib for swift companion target.",
                "diff --git a/src/com/facebook/buck/swift/SwiftLibraryDescription.java b/src/com/facebook/buck/swift/SwiftLibraryDescription.java",
                "index bbbba79e16..d3b97b08bb 100644",
                "--- a/src/com/facebook/buck/swift/SwiftLibraryDescription.java",
                "+++ b/src/com/facebook/buck/swift/SwiftLibraryDescription.java",
                "@@ -357,3 +357,3 @@ public class SwiftLibraryDescription implements Description<SwiftLibraryDescript",
                "                 swiftRuntimeLinkable.getNativeLinkableInput(",
                "-                    cxxPlatform, Linker.LinkableDepType.SHARED))",
                "+                    cxxPlatform, Linker.LinkableDepType.SHARED, resolver))",
                "             .addAllArgs(rule.getAstLinkArgs())",
                "diff --git a/src/com/facebook/buck/swift/SwiftRuntimeNativeLinkable.java b/src/com/facebook/buck/swift/SwiftRuntimeNativeLinkable.java",
                "index e40bc40431..463d8ad09b 100644",
                "--- a/src/com/facebook/buck/swift/SwiftRuntimeNativeLinkable.java",
                "+++ b/src/com/facebook/buck/swift/SwiftRuntimeNativeLinkable.java",
                "@@ -77,3 +77,4 @@ public final class SwiftRuntimeNativeLinkable implements NativeLinkable {",
                "       boolean forceLinkWhole,",
                "-      ImmutableSet<LanguageExtensions> languageExtensions) {",
                "+      ImmutableSet<LanguageExtensions> languageExtensions,",
                "+      BuildRuleResolver ruleResolver) {",
                "     NativeLinkableInput.Builder inputBuilder = NativeLinkableInput.builder();",
                "@@ -88,3 +89,3 @@ public final class SwiftRuntimeNativeLinkable implements NativeLinkable {",
                "   @Override",
                "-  public Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+  public Linkage getPreferredLinkage(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return Linkage.ANY;",
                "@@ -93,3 +94,4 @@ public final class SwiftRuntimeNativeLinkable implements NativeLinkable {",
                "   @Override",
                "-  public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+  public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return ImmutableMap.of();",
                "diff --git a/test/com/facebook/buck/android/NdkLibraryDescriptionTest.java b/test/com/facebook/buck/android/NdkLibraryDescriptionTest.java",
                "index 8c884c6607..b9cc3859d5 100644",
                "--- a/test/com/facebook/buck/android/NdkLibraryDescriptionTest.java",
                "+++ b/test/com/facebook/buck/android/NdkLibraryDescriptionTest.java",
                "@@ -64,3 +64,4 @@ public class NdkLibraryDescriptionTest {",
                "         boolean forceLinkWhole,",
                "-        ImmutableSet<NativeLinkable.LanguageExtensions> languageExtensions) {",
                "+        ImmutableSet<NativeLinkable.LanguageExtensions> languageExtensions,",
                "+        BuildRuleResolver ruleResolver) {",
                "       return NativeLinkableInput.builder().addArgs(SourcePathArg.of(input)).build();",
                "@@ -69,3 +70,4 @@ public class NdkLibraryDescriptionTest {",
                "     @Override",
                "-    public NativeLinkable.Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+    public NativeLinkable.Linkage getPreferredLinkage(",
                "+        CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "       return Linkage.ANY;",
                "@@ -74,3 +76,4 @@ public class NdkLibraryDescriptionTest {",
                "     @Override",
                "-    public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+    public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+        CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "       return ImmutableMap.of();",
                "diff --git a/test/com/facebook/buck/cxx/CxxLibraryDescriptionTest.java b/test/com/facebook/buck/cxx/CxxLibraryDescriptionTest.java",
                "index 1433fa2692..3e84a5ee32 100644",
                "--- a/test/com/facebook/buck/cxx/CxxLibraryDescriptionTest.java",
                "+++ b/test/com/facebook/buck/cxx/CxxLibraryDescriptionTest.java",
                "@@ -283,3 +283,3 @@ public class CxxLibraryDescriptionTest {",
                "     // Verify that the archive rule has the correct deps: the object files from our sources.",
                "-    rule.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.STATIC);",
                "+    rule.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.STATIC, resolver);",
                "     BuildRule archiveRule =",
                "@@ -423,3 +423,3 @@ public class CxxLibraryDescriptionTest {",
                "     NativeLinkableInput input =",
                "-        normal.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.STATIC);",
                "+        normal.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.STATIC, resolver);",
                "     assertThat(",
                "@@ -444,3 +444,3 @@ public class CxxLibraryDescriptionTest {",
                "     NativeLinkableInput linkWholeInput =",
                "-        linkWhole.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.STATIC);",
                "+        linkWhole.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.STATIC, resolver);",
                "     assertThat(",
                "@@ -545,3 +545,3 @@ public class CxxLibraryDescriptionTest {",
                "     // Verify that the archive rule has the correct deps: the object files from our sources.",
                "-    rule.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.STATIC);",
                "+    rule.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.STATIC, resolver);",
                "     BuildRule staticRule =",
                "@@ -600,3 +600,3 @@ public class CxxLibraryDescriptionTest {",
                "             filesystem.getRootPath(), target, cxxPlatform, cxxBuckConfig, PicType.PIC);",
                "-    rule.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.SHARED);",
                "+    rule.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.SHARED, resolver);",
                "     BuildRule sharedRule =",
                "@@ -668,3 +668,4 @@ public class CxxLibraryDescriptionTest {",
                "     assertThat(",
                "-        cxxLibrary.getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM).entrySet(), not(empty()));",
                "+        cxxLibrary.getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM, resolver1).entrySet(),",
                "+        not(empty()));",
                "     assertThat(",
                "@@ -672,3 +673,3 @@ public class CxxLibraryDescriptionTest {",
                "             .getNativeLinkableInput(",
                "-                CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED)",
                "+                CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver1)",
                "             .getArgs(),",
                "@@ -682,3 +683,4 @@ public class CxxLibraryDescriptionTest {",
                "     assertThat(",
                "-        cxxLibrary.getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM).entrySet(), empty());",
                "+        cxxLibrary.getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM, resolver2).entrySet(),",
                "+        empty());",
                "     assertThat(",
                "@@ -686,3 +688,3 @@ public class CxxLibraryDescriptionTest {",
                "             .getNativeLinkableInput(",
                "-                CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED)",
                "+                CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver2)",
                "             .getArgs(),",
                "@@ -703,3 +705,3 @@ public class CxxLibraryDescriptionTest {",
                "         lib.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC);",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC, resolver);",
                "     Arg firstArg = nativeLinkableInput.getArgs().get(0);",
                "@@ -885,3 +887,3 @@ public class CxxLibraryDescriptionTest {",
                "         lib.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED);",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver);",
                "     SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(resolver);",
                "@@ -928,3 +930,3 @@ public class CxxLibraryDescriptionTest {",
                "         lib.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED);",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver);",
                "     SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(resolver);",
                "@@ -973,3 +975,3 @@ public class CxxLibraryDescriptionTest {",
                "         lib.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED);",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver);",
                "     SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(resolver);",
                "@@ -1252,3 +1254,3 @@ public class CxxLibraryDescriptionTest {",
                "     assertThat(",
                "-        rule.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM),",
                "+        rule.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "         equalTo(NativeLinkable.Linkage.STATIC));",
                "diff --git a/test/com/facebook/buck/cxx/CxxLibraryTest.java b/test/com/facebook/buck/cxx/CxxLibraryTest.java",
                "index 73d1b3c09f..b6665c26be 100644",
                "--- a/test/com/facebook/buck/cxx/CxxLibraryTest.java",
                "+++ b/test/com/facebook/buck/cxx/CxxLibraryTest.java",
                "@@ -145,3 +145,4 @@ public class CxxLibraryTest {",
                "         expectedStaticNativeLinkableInput,",
                "-        cxxLibrary.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.STATIC));",
                "+        cxxLibrary.getNativeLinkableInput(",
                "+            cxxPlatform, Linker.LinkableDepType.STATIC, ruleResolver));",
                "@@ -156,3 +157,4 @@ public class CxxLibraryTest {",
                "         expectedSharedNativeLinkableInput,",
                "-        cxxLibrary.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.SHARED));",
                "+        cxxLibrary.getNativeLinkableInput(",
                "+            cxxPlatform, Linker.LinkableDepType.SHARED, ruleResolver));",
                "@@ -212,3 +214,4 @@ public class CxxLibraryTest {",
                "         expectedSharedNativeLinkableInput,",
                "-        cxxLibrary.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.SHARED));",
                "+        cxxLibrary.getNativeLinkableInput(",
                "+            cxxPlatform, Linker.LinkableDepType.SHARED, ruleResolver));",
                "   }",
                "diff --git a/test/com/facebook/buck/cxx/CxxLinkableEnhancerTest.java b/test/com/facebook/buck/cxx/CxxLinkableEnhancerTest.java",
                "index 0b4760fe64..aba97ad9d6 100644",
                "--- a/test/com/facebook/buck/cxx/CxxLinkableEnhancerTest.java",
                "+++ b/test/com/facebook/buck/cxx/CxxLinkableEnhancerTest.java",
                "@@ -113,3 +113,4 @@ public class CxxLinkableEnhancerTest {",
                "         boolean forceLinkWhole,",
                "-        ImmutableSet<NativeLinkable.LanguageExtensions> languageExtensions) {",
                "+        ImmutableSet<NativeLinkable.LanguageExtensions> languageExtensions,",
                "+        BuildRuleResolver ruleResolver) {",
                "       return type == Linker.LinkableDepType.STATIC ? staticInput : sharedInput;",
                "@@ -118,3 +119,4 @@ public class CxxLinkableEnhancerTest {",
                "     @Override",
                "-    public NativeLinkable.Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+    public NativeLinkable.Linkage getPreferredLinkage(",
                "+        CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "       return Linkage.ANY;",
                "@@ -123,3 +125,4 @@ public class CxxLinkableEnhancerTest {",
                "     @Override",
                "-    public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+    public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+        CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "       return ImmutableMap.of();",
                "diff --git a/test/com/facebook/buck/cxx/FakeCxxLibrary.java b/test/com/facebook/buck/cxx/FakeCxxLibrary.java",
                "index c10526f021..218858c4a7 100644",
                "--- a/test/com/facebook/buck/cxx/FakeCxxLibrary.java",
                "+++ b/test/com/facebook/buck/cxx/FakeCxxLibrary.java",
                "@@ -150,3 +150,4 @@ public final class FakeCxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       boolean forceLinkWhole,",
                "-      ImmutableSet<NativeLinkable.LanguageExtensions> languageExtensions) {",
                "+      ImmutableSet<NativeLinkable.LanguageExtensions> languageExtensions,",
                "+      BuildRuleResolver ruleResolver) {",
                "     return type == Linker.LinkableDepType.STATIC",
                "@@ -163,3 +164,4 @@ public final class FakeCxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   @Override",
                "-  public NativeLinkable.Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+  public NativeLinkable.Linkage getPreferredLinkage(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return Linkage.ANY;",
                "@@ -176,3 +178,4 @@ public final class FakeCxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   @Override",
                "-  public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+  public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return ImmutableMap.of(",
                "diff --git a/test/com/facebook/buck/cxx/OmnibusExcludedNode.java b/test/com/facebook/buck/cxx/OmnibusExcludedNode.java",
                "index 1c6becc0b8..ed12305636 100644",
                "--- a/test/com/facebook/buck/cxx/OmnibusExcludedNode.java",
                "+++ b/test/com/facebook/buck/cxx/OmnibusExcludedNode.java",
                "@@ -19,2 +19,3 @@ import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "@@ -32,3 +33,3 @@ class OmnibusExcludedNode extends OmnibusNode {",
                "   @Override",
                "-  public boolean supportsOmnibusLinking(CxxPlatform cxxPlatform) {",
                "+  public boolean supportsOmnibusLinking(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return false;",
                "diff --git a/test/com/facebook/buck/cxx/OmnibusNode.java b/test/com/facebook/buck/cxx/OmnibusNode.java",
                "index 56717d9346..661ff02617 100644",
                "--- a/test/com/facebook/buck/cxx/OmnibusNode.java",
                "+++ b/test/com/facebook/buck/cxx/OmnibusNode.java",
                "@@ -85,3 +85,4 @@ class OmnibusNode implements NativeLinkable {",
                "       boolean forceLinkWhole,",
                "-      ImmutableSet<NativeLinkable.LanguageExtensions> languageExtensions) {",
                "+      ImmutableSet<NativeLinkable.LanguageExtensions> languageExtensions,",
                "+      BuildRuleResolver ruleResolver) {",
                "     return NativeLinkableInput.builder().addArgs(StringArg.of(getBuildTarget().toString())).build();",
                "@@ -90,3 +91,4 @@ class OmnibusNode implements NativeLinkable {",
                "   @Override",
                "-  public NativeLinkable.Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+  public NativeLinkable.Linkage getPreferredLinkage(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return linkage;",
                "@@ -95,3 +97,4 @@ class OmnibusNode implements NativeLinkable {",
                "   @Override",
                "-  public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+  public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return ImmutableMap.of(",
                "diff --git a/test/com/facebook/buck/cxx/OmnibusRootsTest.java b/test/com/facebook/buck/cxx/OmnibusRootsTest.java",
                "index 9b0e97d62f..1eea892dcd 100644",
                "--- a/test/com/facebook/buck/cxx/OmnibusRootsTest.java",
                "+++ b/test/com/facebook/buck/cxx/OmnibusRootsTest.java",
                "@@ -24,2 +24,3 @@ import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                " import com.facebook.buck.parser.exceptions.NoSuchBuildTargetException;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                " import com.facebook.buck.rules.TestBuildRuleResolver;",
                "@@ -41,6 +42,7 @@ public class OmnibusRootsTest {",
                "     OmnibusRoots.Builder builder =",
                "-        OmnibusRoots.builder(CxxPlatformUtils.DEFAULT_PLATFORM, ImmutableSet.of());",
                "+        OmnibusRoots.builder(",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, ImmutableSet.of(), new TestBuildRuleResolver());",
                "     builder.addIncludedRoot(root);",
                "     builder.addIncludedRoot(transitiveRoot);",
                "-    OmnibusRoots roots = builder.build(new TestBuildRuleResolver());",
                "+    OmnibusRoots roots = builder.build();",
                "@@ -56,3 +58,4 @@ public class OmnibusRootsTest {",
                "           @Override",
                "-          public boolean supportsOmnibusLinking(CxxPlatform cxxPlatform) {",
                "+          public boolean supportsOmnibusLinking(",
                "+              CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "             return false;",
                "@@ -61,6 +64,7 @@ public class OmnibusRootsTest {",
                "+    BuildRuleResolver ruleResolver = new TestBuildRuleResolver();",
                "     OmnibusRoots.Builder builder =",
                "-        OmnibusRoots.builder(CxxPlatformUtils.DEFAULT_PLATFORM, ImmutableSet.of());",
                "+        OmnibusRoots.builder(CxxPlatformUtils.DEFAULT_PLATFORM, ImmutableSet.of(), ruleResolver);",
                "     builder.addPotentialRoot(root);",
                "-    OmnibusRoots roots = builder.build(new TestBuildRuleResolver());",
                "+    OmnibusRoots roots = builder.build();",
                "diff --git a/test/com/facebook/buck/cxx/OmnibusTest.java b/test/com/facebook/buck/cxx/OmnibusTest.java",
                "index 6bc5ce4f63..533c00c6c5 100644",
                "--- a/test/com/facebook/buck/cxx/OmnibusTest.java",
                "+++ b/test/com/facebook/buck/cxx/OmnibusTest.java",
                "@@ -103,5 +103,5 @@ public class OmnibusTest {",
                "         a.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC),",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC, resolver),",
                "         b.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC));",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC, resolver));",
                "   }",
                "@@ -156,3 +156,4 @@ public class OmnibusTest {",
                "             CxxPlatformUtils.DEFAULT_PLATFORM, resolver, pathResolver, ruleFinder),",
                "-        b.getNativeLinkableInput(CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED));",
                "+        b.getNativeLinkableInput(",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver));",
                "     assertThat(",
                "@@ -164,3 +165,3 @@ public class OmnibusTest {",
                "         a.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC));",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC, resolver));",
                "   }",
                "@@ -221,3 +222,4 @@ public class OmnibusTest {",
                "             CxxPlatformUtils.DEFAULT_PLATFORM, resolver, pathResolver, ruleFinder),",
                "-        c.getNativeLinkableInput(CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED));",
                "+        c.getNativeLinkableInput(",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver));",
                "     assertThat(",
                "@@ -232,3 +234,3 @@ public class OmnibusTest {",
                "         a.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC));",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC, resolver));",
                "   }",
                "@@ -299,3 +301,3 @@ public class OmnibusTest {",
                "         a.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC));",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC, resolver));",
                "   }",
                "@@ -412,3 +414,3 @@ public class OmnibusTest {",
                "         a.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC));",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC, resolver));",
                "     assertCxxLinkContainsNativeLinkableInput(",
                "@@ -417,3 +419,3 @@ public class OmnibusTest {",
                "         b.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC));",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC, resolver));",
                "   }",
                "diff --git a/test/com/facebook/buck/cxx/PrebuiltCxxLibraryDescriptionTest.java b/test/com/facebook/buck/cxx/PrebuiltCxxLibraryDescriptionTest.java",
                "index 41ac121ba4..081d40046f 100644",
                "--- a/test/com/facebook/buck/cxx/PrebuiltCxxLibraryDescriptionTest.java",
                "+++ b/test/com/facebook/buck/cxx/PrebuiltCxxLibraryDescriptionTest.java",
                "@@ -128,3 +128,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "         expectedStaticLinkableInput,",
                "-        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.STATIC));",
                "+        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.STATIC, resolver));",
                "@@ -140,3 +140,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "         expectedSharedLinkableInput,",
                "-        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.SHARED));",
                "+        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.SHARED, resolver));",
                "   }",
                "@@ -158,3 +158,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "         expectedStaticLinkableInput,",
                "-        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.STATIC));",
                "+        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.STATIC, resolver));",
                "@@ -165,3 +165,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "         expectedSharedLinkableInput,",
                "-        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.SHARED));",
                "+        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.SHARED, resolver));",
                "   }",
                "@@ -190,3 +190,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "         expectedSharedLinkableInput,",
                "-        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.SHARED));",
                "+        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.SHARED, resolver));",
                "   }",
                "@@ -204,3 +204,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     NativeLinkableInput nativeLinkableInput =",
                "-        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.SHARED);",
                "+        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.SHARED, resolver);",
                "     BuildRule rule =",
                "@@ -224,3 +224,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     NativeLinkableInput nativeLinkableInput =",
                "-        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.SHARED);",
                "+        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.SHARED, resolver);",
                "     assertThat(",
                "@@ -246,3 +246,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "             PathSourcePath.of(filesystem, TARGET.getBasePath().resolve(\"libfoo.so\"))),",
                "-        lib.getSharedLibraries(CXX_PLATFORM));",
                "+        lib.getSharedLibraries(CXX_PLATFORM, resolver));",
                "   }",
                "@@ -509,3 +509,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     NativeLinkableInput nativeLinkableInput =",
                "-        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.STATIC_PIC);",
                "+        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.STATIC_PIC, resolver);",
                "     assertThat(",
                "@@ -529,3 +529,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     NativeLinkableInput nativeLinkableInput =",
                "-        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.STATIC_PIC);",
                "+        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.STATIC_PIC, resolver);",
                "     assertThat(",
                "@@ -544,3 +544,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "         (PrebuiltCxxLibrary) libBuilder.build(resolver, filesystem, targetGraph);",
                "-    lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.STATIC_PIC);",
                "+    lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.STATIC_PIC, resolver);",
                "   }",
                "@@ -560,3 +560,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     assertThat(",
                "-        prebuiltCxxLibrary.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM),",
                "+        prebuiltCxxLibrary.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "         Matchers.equalTo(NativeLinkable.Linkage.STATIC));",
                "@@ -683,3 +683,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     NativeLinkableInput input =",
                "-        rule.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.SHARED);",
                "+        rule.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.SHARED, resolver);",
                "     assertThat(",
                "@@ -805,3 +805,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "         (PrebuiltCxxLibrary) prebuiltCxxLibraryBuilder.build(resolver, filesystem, targetGraph);",
                "-    assertThat(rule.getSharedLibraries(CXX_PLATFORM).entrySet(), empty());",
                "+    assertThat(rule.getSharedLibraries(CXX_PLATFORM, resolver).entrySet(), empty());",
                "   }",
                "@@ -819,3 +819,4 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     assertThat(",
                "-        rule.getPreferredLinkage(CXX_PLATFORM), Matchers.equalTo(NativeLinkable.Linkage.ANY));",
                "+        rule.getPreferredLinkage(CXX_PLATFORM, resolver),",
                "+        Matchers.equalTo(NativeLinkable.Linkage.ANY));",
                "   }",
                "@@ -836,3 +837,5 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     assertThat(",
                "-        prebuiltCxxLibrary.getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM).entrySet(),",
                "+        prebuiltCxxLibrary",
                "+            .getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM, resolver1)",
                "+            .entrySet(),",
                "         Matchers.not(empty()));",
                "@@ -841,3 +844,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "             .getNativeLinkableInput(",
                "-                CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED)",
                "+                CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver1)",
                "             .getArgs(),",
                "@@ -854,3 +857,5 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     assertThat(",
                "-        prebuiltCxxLibrary.getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM).entrySet(),",
                "+        prebuiltCxxLibrary",
                "+            .getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM, resolver2)",
                "+            .entrySet(),",
                "         empty());",
                "@@ -859,3 +864,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "             .getNativeLinkableInput(",
                "-                CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED)",
                "+                CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver2)",
                "             .getArgs(),",
                "@@ -882,3 +887,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     NativeLinkableInput nativeLinkableInput =",
                "-        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.STATIC);",
                "+        lib.getNativeLinkableInput(CXX_PLATFORM, Linker.LinkableDepType.STATIC, resolver);",
                "     assertThat(",
                "diff --git a/test/com/facebook/buck/cxx/PrebuiltCxxLibraryGroupDescriptionTest.java b/test/com/facebook/buck/cxx/PrebuiltCxxLibraryGroupDescriptionTest.java",
                "index 1a174ef759..784b515513 100644",
                "--- a/test/com/facebook/buck/cxx/PrebuiltCxxLibraryGroupDescriptionTest.java",
                "+++ b/test/com/facebook/buck/cxx/PrebuiltCxxLibraryGroupDescriptionTest.java",
                "@@ -90,3 +90,3 @@ public class PrebuiltCxxLibraryGroupDescriptionTest {",
                "         lib.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC),",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, resolver),",
                "         Matchers.equalTo(",
                "@@ -113,3 +113,3 @@ public class PrebuiltCxxLibraryGroupDescriptionTest {",
                "         lib.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC),",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC, resolver),",
                "         Matchers.equalTo(",
                "@@ -139,3 +139,3 @@ public class PrebuiltCxxLibraryGroupDescriptionTest {",
                "         lib.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED),",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver),",
                "         Matchers.equalTo(",
                "@@ -182,3 +182,3 @@ public class PrebuiltCxxLibraryGroupDescriptionTest {",
                "         lib.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED),",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver),",
                "         Matchers.equalTo(",
                "@@ -188,3 +188,3 @@ public class PrebuiltCxxLibraryGroupDescriptionTest {",
                "     assertThat(",
                "-        lib.getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM),",
                "+        lib.getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "         Matchers.equalTo(ImmutableMap.of(\"lib1.so\", lib1)));",
                "@@ -203,3 +203,3 @@ public class PrebuiltCxxLibraryGroupDescriptionTest {",
                "     assertThat(",
                "-        any.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM),",
                "+        any.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "         Matchers.equalTo(NativeLinkable.Linkage.ANY));",
                "@@ -212,3 +212,3 @@ public class PrebuiltCxxLibraryGroupDescriptionTest {",
                "     assertThat(",
                "-        staticOnly.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM),",
                "+        staticOnly.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "         Matchers.equalTo(NativeLinkable.Linkage.STATIC));",
                "@@ -221,3 +221,3 @@ public class PrebuiltCxxLibraryGroupDescriptionTest {",
                "     assertThat(",
                "-        sharedOnly.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM),",
                "+        sharedOnly.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "         Matchers.equalTo(NativeLinkable.Linkage.SHARED));",
                "@@ -243,3 +243,3 @@ public class PrebuiltCxxLibraryGroupDescriptionTest {",
                "         library.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC);",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, resolver);",
                "     SourcePath lib = cxxGenrule.getGenrule(CxxPlatformUtils.DEFAULT_PLATFORM);",
                "@@ -274,3 +274,3 @@ public class PrebuiltCxxLibraryGroupDescriptionTest {",
                "         lib.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED),",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver),",
                "         Matchers.equalTo(NativeLinkableInput.of()));",
                "@@ -285,3 +285,4 @@ public class PrebuiltCxxLibraryGroupDescriptionTest {",
                "-    assertThat(lib.getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM), Matchers.anEmptyMap());",
                "+    assertThat(",
                "+        lib.getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM, resolver), Matchers.anEmptyMap());",
                "diff --git a/test/com/facebook/buck/cxx/PrebuiltCxxLibraryTest.java b/test/com/facebook/buck/cxx/PrebuiltCxxLibraryTest.java",
                "index fe208ee657..5718d0dfb1 100644",
                "--- a/test/com/facebook/buck/cxx/PrebuiltCxxLibraryTest.java",
                "+++ b/test/com/facebook/buck/cxx/PrebuiltCxxLibraryTest.java",
                "@@ -74,3 +74,3 @@ public class PrebuiltCxxLibraryTest {",
                "     PrebuiltCxxLibrary lib = (PrebuiltCxxLibrary) builder.build(resolver, filesystem, targetGraph);",
                "-    lib.getNativeLinkableInput(platform, Linker.LinkableDepType.STATIC);",
                "+    lib.getNativeLinkableInput(platform, Linker.LinkableDepType.STATIC, resolver);",
                "diff --git a/test/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkablesTest.java b/test/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkablesTest.java",
                "index d6709ac70c..2023be0a67 100644",
                "--- a/test/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkablesTest.java",
                "+++ b/test/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkablesTest.java",
                "@@ -85,3 +85,4 @@ public class NativeLinkablesTest {",
                "         boolean forceLinkWhole,",
                "-        ImmutableSet<NativeLinkable.LanguageExtensions> languageExtensions) {",
                "+        ImmutableSet<NativeLinkable.LanguageExtensions> languageExtensions,",
                "+        BuildRuleResolver ruleResolver) {",
                "       return nativeLinkableInput;",
                "@@ -90,3 +91,4 @@ public class NativeLinkablesTest {",
                "     @Override",
                "-    public NativeLinkable.Linkage getPreferredLinkage(CxxPlatform cxxPlatform) {",
                "+    public NativeLinkable.Linkage getPreferredLinkage(",
                "+        CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "       return preferredLinkage;",
                "@@ -95,3 +97,4 @@ public class NativeLinkablesTest {",
                "     @Override",
                "-    public ImmutableMap<String, SourcePath> getSharedLibraries(CxxPlatform cxxPlatform) {",
                "+    public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+        CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "       return sharedLibraries;",
                "diff --git a/test/com/facebook/buck/halide/HalideLibraryDescriptionTest.java b/test/com/facebook/buck/halide/HalideLibraryDescriptionTest.java",
                "index dc1efeb40e..74680fd8ee 100644",
                "--- a/test/com/facebook/buck/halide/HalideLibraryDescriptionTest.java",
                "+++ b/test/com/facebook/buck/halide/HalideLibraryDescriptionTest.java",
                "@@ -108,3 +108,3 @@ public class HalideLibraryDescriptionTest {",
                "     NativeLinkableInput input =",
                "-        lib.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.STATIC);",
                "+        lib.getNativeLinkableInput(cxxPlatform, Linker.LinkableDepType.STATIC, resolver);",
                "     BuildRule buildRule =",
                "@@ -132,3 +132,3 @@ public class HalideLibraryDescriptionTest {",
                "             .getNativeLinkableInput(",
                "-                CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC)",
                "+                CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, resolver1)",
                "             .getArgs(),",
                "@@ -144,3 +144,3 @@ public class HalideLibraryDescriptionTest {",
                "             .getNativeLinkableInput(",
                "-                CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC)",
                "+                CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, resolver2)",
                "             .getArgs(),",
                "diff --git a/test/com/facebook/buck/haskell/HaskellLibraryDescriptionTest.java b/test/com/facebook/buck/haskell/HaskellLibraryDescriptionTest.java",
                "index 7ba5f096cf..8650fd1bd5 100644",
                "--- a/test/com/facebook/buck/haskell/HaskellLibraryDescriptionTest.java",
                "+++ b/test/com/facebook/buck/haskell/HaskellLibraryDescriptionTest.java",
                "@@ -138,3 +138,3 @@ public class HaskellLibraryDescriptionTest {",
                "         library.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC);",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, resolver);",
                "     assertThat(",
                "@@ -146,3 +146,3 @@ public class HaskellLibraryDescriptionTest {",
                "         library.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC);",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC, resolver);",
                "     assertThat(",
                "@@ -154,3 +154,3 @@ public class HaskellLibraryDescriptionTest {",
                "         library.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED);",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver);",
                "     assertThat(",
                "@@ -168,3 +168,3 @@ public class HaskellLibraryDescriptionTest {",
                "     assertThat(",
                "-        defaultLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM),",
                "+        defaultLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "         Matchers.is(NativeLinkable.Linkage.ANY));",
                "@@ -177,3 +177,3 @@ public class HaskellLibraryDescriptionTest {",
                "     assertThat(",
                "-        anyLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM),",
                "+        anyLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "         Matchers.is(NativeLinkable.Linkage.ANY));",
                "@@ -186,3 +186,3 @@ public class HaskellLibraryDescriptionTest {",
                "     assertThat(",
                "-        staticLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM),",
                "+        staticLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "         Matchers.is(NativeLinkable.Linkage.STATIC));",
                "@@ -195,3 +195,3 @@ public class HaskellLibraryDescriptionTest {",
                "     assertThat(",
                "-        sharedLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM),",
                "+        sharedLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "         Matchers.is(NativeLinkable.Linkage.SHARED));",
                "@@ -221,3 +221,3 @@ public class HaskellLibraryDescriptionTest {",
                "         library.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC);",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, resolver);",
                "     assertThat(",
                "diff --git a/test/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescriptionTest.java b/test/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescriptionTest.java",
                "index 09bd5c0eb6..fec852055f 100644",
                "--- a/test/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescriptionTest.java",
                "+++ b/test/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescriptionTest.java",
                "@@ -65,3 +65,3 @@ public class HaskellPrebuiltLibraryDescriptionTest {",
                "         library.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC);",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, resolver);",
                "     assertThat(",
                "@@ -92,3 +92,3 @@ public class HaskellPrebuiltLibraryDescriptionTest {",
                "         library.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED);",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver);",
                "     assertThat(",
                "@@ -176,3 +176,3 @@ public class HaskellPrebuiltLibraryDescriptionTest {",
                "         library.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC);",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, resolver);",
                "     assertThat(Arg.stringify(staticInput.getArgs(), pathResolver), Matchers.contains(flag));",
                "@@ -180,3 +180,3 @@ public class HaskellPrebuiltLibraryDescriptionTest {",
                "         library.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED);",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver);",
                "     assertThat(Arg.stringify(sharedInput.getArgs(), pathResolver), Matchers.contains(flag));",
                "diff --git a/test/com/facebook/buck/python/CxxPythonExtensionDescriptionTest.java b/test/com/facebook/buck/python/CxxPythonExtensionDescriptionTest.java",
                "index 318eff201a..7abe653104 100644",
                "--- a/test/com/facebook/buck/python/CxxPythonExtensionDescriptionTest.java",
                "+++ b/test/com/facebook/buck/python/CxxPythonExtensionDescriptionTest.java",
                "@@ -175,3 +175,3 @@ public class CxxPythonExtensionDescriptionTest {",
                "         dep.getNativeLinkableInput(",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED);",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver);"
            ],
            "changed_files": [
                "src/com/facebook/buck/android/AndroidNativeLibsPackageableGraphEnhancer.java",
                "src/com/facebook/buck/android/NativeLibraryMergeEnhancer.java",
                "src/com/facebook/buck/apple/PrebuiltAppleFramework.java",
                "src/com/facebook/buck/cxx/AbstractOmnibusRoots.java",
                "src/com/facebook/buck/cxx/AbstractPrebuiltCxxLibraryGroupDescription.java",
                "src/com/facebook/buck/cxx/CxxGenruleDescription.java",
                "src/com/facebook/buck/cxx/CxxLibrary.java",
                "src/com/facebook/buck/cxx/CxxLinkableEnhancer.java",
                "src/com/facebook/buck/cxx/Omnibus.java",
                "src/com/facebook/buck/cxx/PreInclude.java",
                "src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkable.java",
                "src/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkables.java",
                "src/com/facebook/buck/d/DLibrary.java",
                "src/com/facebook/buck/halide/HalideLibrary.java",
                "src/com/facebook/buck/haskell/HaskellDescriptionUtils.java",
                "src/com/facebook/buck/haskell/HaskellGhciDescription.java",
                "src/com/facebook/buck/haskell/HaskellLibraryDescription.java",
                "src/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescription.java",
                "src/com/facebook/buck/lua/LuaBinaryDescription.java",
                "src/com/facebook/buck/lua/SystemLuaCxxLibrary.java",
                "src/com/facebook/buck/python/PythonUtil.java",
                "src/com/facebook/buck/rust/RustLibraryDescription.java",
                "src/com/facebook/buck/swift/SwiftLibrary.java",
                "src/com/facebook/buck/swift/SwiftLibraryDescription.java",
                "src/com/facebook/buck/swift/SwiftRuntimeNativeLinkable.java",
                "test/com/facebook/buck/android/NdkLibraryDescriptionTest.java",
                "test/com/facebook/buck/cxx/CxxLibraryDescriptionTest.java",
                "test/com/facebook/buck/cxx/CxxLibraryTest.java",
                "test/com/facebook/buck/cxx/CxxLinkableEnhancerTest.java",
                "test/com/facebook/buck/cxx/FakeCxxLibrary.java",
                "test/com/facebook/buck/cxx/OmnibusExcludedNode.java",
                "test/com/facebook/buck/cxx/OmnibusNode.java",
                "test/com/facebook/buck/cxx/OmnibusRootsTest.java",
                "test/com/facebook/buck/cxx/OmnibusTest.java",
                "test/com/facebook/buck/cxx/PrebuiltCxxLibraryDescriptionTest.java",
                "test/com/facebook/buck/cxx/PrebuiltCxxLibraryGroupDescriptionTest.java",
                "test/com/facebook/buck/cxx/PrebuiltCxxLibraryTest.java",
                "test/com/facebook/buck/cxx/toolchain/nativelink/NativeLinkablesTest.java",
                "test/com/facebook/buck/halide/HalideLibraryDescriptionTest.java",
                "test/com/facebook/buck/haskell/HaskellLibraryDescriptionTest.java",
                "test/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescriptionTest.java",
                "test/com/facebook/buck/python/CxxPythonExtensionDescriptionTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: object",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b26214235344ff2563387e4bb0c44a869527e74c",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521766279,
            "hunks": 13,
            "message": "Add 'audit modules' command Summary: This command can be used list modules known to Buck as well as get their dependencies and hashes. Test Plan: Unit tests and local testing. Reviewed By: ttsugriy fbshipit-source-id: 01542c1",
            "diff": [
                "diff --git a/buck.iml b/buck.iml",
                "index b772161ac5..703635b00e 100644",
                "--- a/buck.iml",
                "+++ b/buck.iml",
                "@@ -14,2 +14,3 @@",
                "       <sourceFolder url=\"file://$MODULE_DIR$/test/com/facebook/buck/android/toolchain/ndk/impl/testdata\" type=\"java-test-resource\" />",
                "+      <sourceFolder url=\"file://$MODULE_DIR$/test/com/facebook/buck/cli/testdata\" type=\"java-test-resource\" relativeOutputPath=\"com/facebook/buck/cli/testdata\" />",
                "       <excludeFolder url=\"file://$MODULE_DIR$/.buckd\" />",
                "diff --git a/docs/command/audit.soy b/docs/command/audit.soy",
                "index ffea48e961..bc2b68e265 100644",
                "--- a/docs/command/audit.soy",
                "+++ b/docs/command/audit.soy",
                "@@ -141,2 +141,10 @@ cxx.cxx&#9;/usr/bin/g++",
                "+  {call buck.param}",
                "+    {param name: 'modules' /}",
                "+    {param nodash: true /}",
                "+    {param desc}",
                "+        List the modules known by Buck as well as their content hashes and dependencies.",
                "+    {/param}",
                "+  {/call}",
                "+",
                "   {call buck.param}",
                "diff --git a/src/com/facebook/buck/cli/AuditCommand.java b/src/com/facebook/buck/cli/AuditCommand.java",
                "index 3266b499a5..1e9d59719f 100644",
                "--- a/src/com/facebook/buck/cli/AuditCommand.java",
                "+++ b/src/com/facebook/buck/cli/AuditCommand.java",
                "@@ -38,2 +38,3 @@ public class AuditCommand extends AbstractContainerCommand {",
                "     @SubCommand(name = \"input\", impl = AuditInputCommand.class),",
                "+    @SubCommand(name = \"modules\", impl = AuditModulesCommand.class),",
                "     @SubCommand(name = \"owner\", impl = AuditOwnerCommand.class),",
                "diff --git a/src/com/facebook/buck/cli/AuditModulesCommand.java b/src/com/facebook/buck/cli/AuditModulesCommand.java",
                "new file mode 100644",
                "index 0000000000..dc165002c0",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/cli/AuditModulesCommand.java",
                "@@ -0,0 +1,131 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.cli;",
                "+",
                "+import com.facebook.buck.module.BuckModuleManager;",
                "+import com.facebook.buck.util.Console;",
                "+import com.facebook.buck.util.ExitCode;",
                "+import com.facebook.buck.util.json.ObjectMappers;",
                "+import com.google.common.annotations.VisibleForTesting;",
                "+import com.google.common.base.Joiner;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.io.IOException;",
                "+import java.io.PrintStream;",
                "+import java.io.StringWriter;",
                "+import org.kohsuke.args4j.Option;",
                "+",
                "+/**",
                "+ * Prints the following information about all modules:",
                "+ *",
                "+ * <ul>",
                "+ *   <li>id,",
                "+ *   <li>hash,",
                "+ *   <li>dependencies.",
                "+ * </ul>",
                "+ */",
                "+public class AuditModulesCommand extends AbstractCommand {",
                "+",
                "+  @Option(name = \"--json\", usage = \"Output in JSON format\")",
                "+  private boolean generateJsonOutput;",
                "+",
                "+  @Override",
                "+  public ExitCode runWithoutHelp(CommandRunnerParams params)",
                "+      throws IOException, InterruptedException {",
                "+",
                "+    collectAndDumpModuleInformation(",
                "+        params.getConsole(), params.getBuckModuleManager(), generateJsonOutput);",
                "+",
                "+    return ExitCode.SUCCESS;",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean isReadOnly() {",
                "+    return true;",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getShortDescription() {",
                "+    return \"List information about Buck modules\";",
                "+  }",
                "+",
                "+  @VisibleForTesting",
                "+  static void collectAndDumpModuleInformation(",
                "+      Console console, BuckModuleManager moduleManager, boolean generateJsonOutput) {",
                "+    ImmutableList<AuditModuleInformation> modules = collectModuleInformation(moduleManager);",
                "+",
                "+    if (generateJsonOutput) {",
                "+      dumpModuleInformationInJsonFormat(console, modules);",
                "+    } else {",
                "+      dumpModuleInformationInRawFormat(console, modules);",
                "+    }",
                "+  }",
                "+",
                "+  private static ImmutableList<AuditModuleInformation> collectModuleInformation(",
                "+      BuckModuleManager moduleManager) {",
                "+    ImmutableList.Builder<AuditModuleInformation> modules = ImmutableList.builder();",
                "+",
                "+    for (String moduleId : moduleManager.getModuleIds()) {",
                "+      modules.add(",
                "+          new AuditModuleInformation(",
                "+              moduleId,",
                "+              moduleManager.getModuleHash(moduleId),",
                "+              moduleManager.getModuleDependencies(moduleId)));",
                "+    }",
                "+",
                "+    return modules.build();",
                "+  }",
                "+",
                "+  private static void dumpModuleInformationInJsonFormat(",
                "+      Console console, ImmutableList<AuditModuleInformation> modules) {",
                "+    StringWriter stringWriter = new StringWriter();",
                "+    try {",
                "+      ObjectMappers.WRITER.withDefaultPrettyPrinter().writeValue(stringWriter, modules);",
                "+    } catch (IOException e) {",
                "+      throw new RuntimeException(e);",
                "+    }",
                "+    console.getStdOut().println(stringWriter.getBuffer().toString());",
                "+  }",
                "+",
                "+  private static void dumpModuleInformationInRawFormat(",
                "+      Console console, ImmutableList<AuditModuleInformation> modules) {",
                "+",
                "+    modules.forEach(module -> dumpModuleInformationInRawFormat(console.getStdOut(), module));",
                "+  }",
                "+",
                "+  private static void dumpModuleInformationInRawFormat(",
                "+      PrintStream stdout, AuditModuleInformation module) {",
                "+    stdout.println(String.format(\"Module id: %s\", module.id));",
                "+    stdout.println(String.format(\"Module hash: %s\", module.hash));",
                "+    stdout.println(",
                "+        String.format(\"Module dependencies: %s\", Joiner.on(\", \").join(module.dependencies)));",
                "+    stdout.println();",
                "+  }",
                "+",
                "+  private static class AuditModuleInformation {",
                "+    public final String id;",
                "+    public final String hash;",
                "+    public final ImmutableSortedSet<String> dependencies;",
                "+",
                "+    private AuditModuleInformation(",
                "+        String id, String hash, ImmutableSortedSet<String> dependencies) {",
                "+      this.id = id;",
                "+      this.hash = hash;",
                "+      this.dependencies = dependencies;",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/module/BUCK b/src/com/facebook/buck/module/BUCK",
                "index e30ec02d77..11a397a194 100644",
                "--- a/src/com/facebook/buck/module/BUCK",
                "+++ b/src/com/facebook/buck/module/BUCK",
                "@@ -6,2 +6,3 @@ java_library(",
                "     exported_deps = [",
                "+        \"//third-party/java/guava:guava\",",
                "         \"//third-party/java/pf4j:pf4j\",",
                "diff --git a/src/com/facebook/buck/module/BuckModuleManager.java b/src/com/facebook/buck/module/BuckModuleManager.java",
                "index 181f074f87..6e7e65101a 100644",
                "--- a/src/com/facebook/buck/module/BuckModuleManager.java",
                "+++ b/src/com/facebook/buck/module/BuckModuleManager.java",
                "@@ -18,2 +18,4 @@ package com.facebook.buck.module;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+",
                " /** Provides access to module information. */",
                "@@ -24,2 +26,11 @@ public interface BuckModuleManager {",
                "   String getModuleHash(Class<?> cls);",
                "+",
                "+  /** @return the hash of module's content (which includes code and resources.) */",
                "+  String getModuleHash(String moduleId);",
                "+",
                "+  /** @return IDs of all modules known to this instance. */",
                "+  ImmutableSortedSet<String> getModuleIds();",
                "+",
                "+  /** @return IDs of all modules the provided module depends on. */",
                "+  ImmutableSortedSet<String> getModuleDependencies(String moduleId);",
                " }",
                "diff --git a/src/com/facebook/buck/module/impl/DefaultBuckModuleManager.java b/src/com/facebook/buck/module/impl/DefaultBuckModuleManager.java",
                "index 1941641908..1aa2bf2de8 100644",
                "--- a/src/com/facebook/buck/module/impl/DefaultBuckModuleManager.java",
                "+++ b/src/com/facebook/buck/module/impl/DefaultBuckModuleManager.java",
                "@@ -22,2 +22,3 @@ import com.google.common.cache.CacheLoader;",
                " import com.google.common.cache.LoadingCache;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                " import com.google.common.hash.Hasher;",
                "@@ -26,2 +27,3 @@ import java.lang.reflect.Field;",
                " import org.pf4j.PluginClassLoader;",
                "+import org.pf4j.PluginDependency;",
                " import org.pf4j.PluginDescriptor;",
                "@@ -79,3 +81,29 @@ public class DefaultBuckModuleManager implements BuckModuleManager {",
                "   public String getModuleHash(Class<?> cls) {",
                "-    return moduleHashCache.getUnchecked(getPluginIdByClass(cls));",
                "+    return getModuleHash(getPluginIdByClass(cls));",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getModuleHash(String moduleId) {",
                "+    return moduleHashCache.getUnchecked(moduleId);",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableSortedSet<String> getModuleIds() {",
                "+    ImmutableSortedSet.Builder<String> moduleIds = ImmutableSortedSet.naturalOrder();",
                "+    for (PluginWrapper pluginWrapper : pluginManager.getPlugins()) {",
                "+      moduleIds.add(pluginWrapper.getPluginId());",
                "+    }",
                "+    return moduleIds.build();",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableSortedSet<String> getModuleDependencies(String moduleId) {",
                "+    ImmutableSortedSet.Builder<String> dependencies = ImmutableSortedSet.naturalOrder();",
                "+",
                "+    for (PluginDependency dependency :",
                "+        pluginManager.getPlugin(moduleId).getDescriptor().getDependencies()) {",
                "+      dependencies.add(dependency.getPluginId());",
                "+    }",
                "+",
                "+    return dependencies.build();",
                "   }",
                "diff --git a/test/com/facebook/buck/cli/AuditModulesCommandTest.java b/test/com/facebook/buck/cli/AuditModulesCommandTest.java",
                "new file mode 100644",
                "index 0000000000..26431dd4aa",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cli/AuditModulesCommandTest.java",
                "@@ -0,0 +1,138 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.cli;",
                "+",
                "+import static com.facebook.buck.util.MoreStringsForTests.equalToIgnoringPlatformNewlines;",
                "+import static org.hamcrest.Matchers.is;",
                "+import static org.junit.Assert.assertEquals;",
                "+import static org.junit.Assert.assertThat;",
                "+",
                "+import com.facebook.buck.module.BuckModuleManager;",
                "+import com.facebook.buck.testutil.TemporaryPaths;",
                "+import com.facebook.buck.testutil.TestConsole;",
                "+import com.facebook.buck.util.MoreStrings;",
                "+import com.facebook.buck.util.MoreStringsForTests;",
                "+import com.google.common.base.Charsets;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import com.google.common.collect.Ordering;",
                "+import com.google.common.io.Resources;",
                "+import java.io.IOException;",
                "+import java.util.List;",
                "+import java.util.stream.Collectors;",
                "+import org.junit.Before;",
                "+import org.junit.Rule;",
                "+import org.junit.Test;",
                "+",
                "+public class AuditModulesCommandTest {",
                "+",
                "+  @Rule public TemporaryPaths tmp = new TemporaryPaths();",
                "+",
                "+  private TestConsole console;",
                "+  private BuckModuleManager moduleManager;",
                "+",
                "+  @Before",
                "+  public void setUp() throws IOException, InterruptedException {",
                "+    console = new TestConsole();",
                "+",
                "+    ImmutableMap.Builder<String, ModuleInformation> modules = ImmutableMap.builder();",
                "+    modules.put(\"module1.id\", new ModuleInformation(\"hash1\", ImmutableSortedSet.of()));",
                "+    modules.put(\"module2.id\", new ModuleInformation(\"hash1\", ImmutableSortedSet.of(\"module1.id\")));",
                "+    modules.put(",
                "+        \"module3.id\",",
                "+        new ModuleInformation(\"hash1\", ImmutableSortedSet.of(\"module1.id\", \"module2.id\")));",
                "+",
                "+    moduleManager = new TestBuckModuleManager(modules.build());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void testBuildInfoPrintedInJsonFormat() throws IOException {",
                "+    AuditModulesCommand.collectAndDumpModuleInformation(console, moduleManager, true);",
                "+    String output = console.getTextWrittenToStdOut();",
                "+",
                "+    String expected =",
                "+        Resources.toString(",
                "+            Resources.getResource(",
                "+                AuditModulesCommandTest.class, \"testdata/audit_modules/stdout-json.in\"),",
                "+            Charsets.UTF_8);",
                "+",
                "+    assertThat(output, is(equalToIgnoringPlatformNewlines(expected)));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void testBuildInfoPrintedInPlainFormat() throws IOException {",
                "+    AuditModulesCommand.collectAndDumpModuleInformation(console, moduleManager, false);",
                "+    List<String> output =",
                "+        MoreStrings.lines(console.getTextWrittenToStdOut())",
                "+            .stream()",
                "+            .map(String::trim)",
                "+            .map(MoreStringsForTests::normalizeNewlines)",
                "+            .collect(Collectors.toList());",
                "+",
                "+    String expected =",
                "+        Resources.toString(",
                "+            Resources.getResource(",
                "+                AuditModulesCommandTest.class, \"testdata/audit_modules/stdout-raw.in\"),",
                "+            Charsets.UTF_8);",
                "+",
                "+    assertEquals(output, MoreStrings.lines(expected));",
                "+  }",
                "+",
                "+  private static class ModuleInformation {",
                "+    public final String hash;",
                "+    public final ImmutableSortedSet<String> dependencies;",
                "+",
                "+    private ModuleInformation(String hash, ImmutableSortedSet<String> dependencies) {",
                "+      this.hash = hash;",
                "+      this.dependencies = dependencies;",
                "+    }",
                "+  }",
                "+",
                "+  private static class TestBuckModuleManager implements BuckModuleManager {",
                "+",
                "+    private final ImmutableMap<String, ModuleInformation> modules;",
                "+",
                "+    private TestBuckModuleManager(ImmutableMap<String, ModuleInformation> modules) {",
                "+      this.modules = modules;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isClassInModule(Class<?> cls) {",
                "+      throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getModuleHash(Class<?> cls) {",
                "+      throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getModuleHash(String moduleId) {",
                "+      return modules.get(moduleId).hash;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ImmutableSortedSet<String> getModuleIds() {",
                "+      return ImmutableSortedSet.copyOf(Ordering.natural(), modules.keySet());",
                "+    }",
                "+",
                "+    @Override",
                "+    public ImmutableSortedSet<String> getModuleDependencies(String moduleId) {",
                "+      return modules.get(moduleId).dependencies;",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/cli/testdata/audit_modules/stdout-json.in b/test/com/facebook/buck/cli/testdata/audit_modules/stdout-json.in",
                "new file mode 100644",
                "index 0000000000..b4fa42f441",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cli/testdata/audit_modules/stdout-json.in",
                "@@ -0,0 +1,13 @@",
                "+[ {",
                "+  \"id\" : \"module1.id\",",
                "+  \"hash\" : \"hash1\",",
                "+  \"dependencies\" : [ ]",
                "+}, {",
                "+  \"id\" : \"module2.id\",",
                "+  \"hash\" : \"hash1\",",
                "+  \"dependencies\" : [ \"module1.id\" ]",
                "+}, {",
                "+  \"id\" : \"module3.id\",",
                "+  \"hash\" : \"hash1\",",
                "+  \"dependencies\" : [ \"module1.id\", \"module2.id\" ]",
                "+} ]",
                "diff --git a/test/com/facebook/buck/cli/testdata/audit_modules/stdout-raw.in b/test/com/facebook/buck/cli/testdata/audit_modules/stdout-raw.in",
                "new file mode 100644",
                "index 0000000000..e4e71371c4",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cli/testdata/audit_modules/stdout-raw.in",
                "@@ -0,0 +1,12 @@",
                "+Module id: module1.id",
                "+Module hash: hash1",
                "+Module dependencies:",
                "+",
                "+Module id: module2.id",
                "+Module hash: hash1",
                "+Module dependencies: module1.id",
                "+",
                "+Module id: module3.id",
                "+Module hash: hash1",
                "+Module dependencies: module1.id, module2.id",
                "+"
            ],
            "changed_files": [
                "buck.iml",
                "docs/command/audit.soy",
                "src/com/facebook/buck/cli/AuditCommand.java",
                "src/com/facebook/buck/cli/AuditModulesCommand.java",
                "src/com/facebook/buck/module/BUCK",
                "src/com/facebook/buck/module/BuckModuleManager.java",
                "src/com/facebook/buck/module/impl/DefaultBuckModuleManager.java",
                "test/com/facebook/buck/cli/AuditModulesCommandTest.java",
                "test/com/facebook/buck/cli/testdata/audit_modules/stdout-json.in",
                "test/com/facebook/buck/cli/testdata/audit_modules/stdout-raw.in"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: command",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, command",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8239b0a081309a0006d6b5eaa508da9c5661daec",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522390229,
            "hunks": 15,
            "message": "Extract global frames into a separate class. Summary: Parser class is already too large. Future changes will remove more functions from the parser still. Reviewed By: styurin fbshipit-source-id: ff9a721",
            "diff": [
                "diff --git a/src/com/facebook/buck/skylark/parser/AbstractBuckGlobals.java b/src/com/facebook/buck/skylark/parser/AbstractBuckGlobals.java",
                "new file mode 100644",
                "index 0000000000..ed3af3ec4e",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/skylark/parser/AbstractBuckGlobals.java",
                "@@ -0,0 +1,137 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.skylark.parser;",
                "+",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.skylark.function.Glob;",
                "+import com.facebook.buck.skylark.function.HostInfo;",
                "+import com.facebook.buck.skylark.function.ReadConfig;",
                "+import com.facebook.buck.skylark.function.SkylarkExtensionFunctions;",
                "+import com.facebook.buck.skylark.function.SkylarkNativeModule;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.devtools.build.lib.packages.NativeProvider;",
                "+import com.google.devtools.build.lib.syntax.BazelLibrary;",
                "+import com.google.devtools.build.lib.syntax.BuiltinFunction;",
                "+import com.google.devtools.build.lib.syntax.ClassObject;",
                "+import com.google.devtools.build.lib.syntax.Environment;",
                "+import com.google.devtools.build.lib.syntax.Mutability;",
                "+import com.google.devtools.build.lib.syntax.Runtime;",
                "+import java.util.function.Function;",
                "+import org.immutables.value.Value;",
                "+import org.immutables.value.Value.Lazy;",
                "+",
                "+/**",
                "+ * Provides access to global Skylark interpreter frames.",
                "+ *",
                "+ * <p>It's recommended to use global frames for all globally accessible variables for improved",
                "+ * performance and easier maintenance, since there is only one place to check for variable",
                "+ * definitions.",
                "+ */",
                "+@Value.Immutable",
                "+@BuckStyleImmutable",
                "+abstract class AbstractBuckGlobals {",
                "+",
                "+  /** Always disable implicit native imports in skylark rules, they should utilize native.foo */",
                "+  @Lazy",
                "+  Environment.GlobalFrame getBuckLoadContextGlobals() {",
                "+    try (Mutability mutability = Mutability.create(\"global_load_ctx\")) {",
                "+      Environment extensionEnv =",
                "+          Environment.builder(mutability)",
                "+              .useDefaultSemantics()",
                "+              .setGlobals(getBuckGlobals(true))",
                "+              .build();",
                "+      extensionEnv.setup(\"native\", getNativeModule());",
                "+      Runtime.setupModuleGlobals(extensionEnv, SkylarkExtensionFunctions.class);",
                "+      return extensionEnv.getGlobals();",
                "+    }",
                "+  }",
                "+",
                "+  /** Disable implicit native rules depending on configuration */",
                "+  @Lazy",
                "+  Environment.GlobalFrame getBuckBuildFileContextGlobals() {",
                "+    return getBuckGlobals(getDisableImplicitNativeRules());",
                "+  }",
                "+",
                "+  /**",
                "+   * @return Whether implicit native rules should not be available in the context of extension file.",
                "+   */",
                "+  abstract boolean getDisableImplicitNativeRules();",
                "+",
                "+  /** @return A Skylark rule function factory. */",
                "+  abstract Function<Description<?>, BuiltinFunction> getRuleFunctionFactory();",
                "+",
                "+  /** @return A set of rules supported by Buck. */",
                "+  abstract ImmutableSet<Description<?>> getDescriptions();",
                "+",
                "+  /**",
                "+   * @return The list of functions supporting all native Buck functions like {@code java_library}.",
                "+   */",
                "+  @Lazy",
                "+  ImmutableList<BuiltinFunction> getBuckRuleFunctions() {",
                "+    return getDescriptions()",
                "+        .stream()",
                "+        .map(this.getRuleFunctionFactory())",
                "+        .collect(ImmutableList.toImmutableList());",
                "+  }",
                "+",
                "+  /**",
                "+   * Returns a native module with built-in functions and Buck rules.",
                "+   *",
                "+   * <p>It's the module that handles method calls like {@code native.glob} or {@code",
                "+   * native.cxx_library}.",
                "+   */",
                "+  @Lazy",
                "+  ClassObject getNativeModule() {",
                "+    ImmutableMap.Builder<String, Object> builder = new ImmutableMap.Builder<>();",
                "+    BuiltinFunction packageName = SkylarkNativeModule.packageName;",
                "+    builder.put(packageName.getName(), packageName);",
                "+    BuiltinFunction glob = Glob.create();",
                "+    builder.put(glob.getName(), glob);",
                "+    for (BuiltinFunction ruleFunction : getBuckRuleFunctions()) {",
                "+      builder.put(ruleFunction.getName(), ruleFunction);",
                "+    }",
                "+    builder.put(\"host_info\", HostInfo.create());",
                "+    return NativeProvider.STRUCT.create(builder.build(), \"no native function or rule '%s'\");",
                "+  }",
                "+",
                "+  /**",
                "+   * @return The environment frame with configured buck globals. This includes built-in rules like",
                "+   *     {@code java_library}.",
                "+   * @param disableImplicitNativeRules If true, do not export native rules into the provided context",
                "+   */",
                "+  private Environment.GlobalFrame getBuckGlobals(boolean disableImplicitNativeRules) {",
                "+    try (Mutability mutability = Mutability.create(\"global\")) {",
                "+      Environment globalEnv =",
                "+          Environment.builder(mutability)",
                "+              .setGlobals(BazelLibrary.GLOBALS)",
                "+              .useDefaultSemantics()",
                "+              .build();",
                "+",
                "+      BuiltinFunction readConfigFunction = ReadConfig.create();",
                "+      globalEnv.setup(readConfigFunction.getName(), readConfigFunction);",
                "+      if (!disableImplicitNativeRules) {",
                "+        for (BuiltinFunction buckRuleFunction : getBuckRuleFunctions()) {",
                "+          globalEnv.setup(buckRuleFunction.getName(), buckRuleFunction);",
                "+        }",
                "+      }",
                "+      return globalEnv.getGlobals();",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "index 46251da157..4bb2ed92e1 100644",
                "--- a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "+++ b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "@@ -30,5 +30,2 @@ import com.facebook.buck.rules.coercer.TypeCoercerFactory;",
                " import com.facebook.buck.skylark.function.Glob;",
                "-import com.facebook.buck.skylark.function.HostInfo;",
                "-import com.facebook.buck.skylark.function.ReadConfig;",
                "-import com.facebook.buck.skylark.function.SkylarkExtensionFunctions;",
                " import com.facebook.buck.skylark.function.SkylarkNativeModule;",
                "@@ -37,3 +34,2 @@ import com.facebook.buck.skylark.packages.PackageContext;",
                " import com.facebook.buck.skylark.packages.PackageFactory;",
                "-import com.facebook.buck.util.MoreSuppliers;",
                " import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "@@ -54,7 +50,4 @@ import com.google.devtools.build.lib.cmdline.RepositoryName;",
                " import com.google.devtools.build.lib.events.EventHandler;",
                "-import com.google.devtools.build.lib.packages.NativeProvider;",
                "-import com.google.devtools.build.lib.syntax.BazelLibrary;",
                " import com.google.devtools.build.lib.syntax.BuildFileAST;",
                " import com.google.devtools.build.lib.syntax.BuiltinFunction;",
                "-import com.google.devtools.build.lib.syntax.ClassObject;",
                " import com.google.devtools.build.lib.syntax.Environment;",
                "@@ -76,3 +69,2 @@ import java.util.Optional;",
                " import java.util.concurrent.atomic.AtomicLong;",
                "-import java.util.function.Supplier;",
                " import java.util.stream.Collectors;",
                "@@ -108,7 +100,4 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "   private final EventHandler eventHandler;",
                "-  private final Supplier<ImmutableList<BuiltinFunction>> buckRuleFunctionsSupplier;",
                "-  private final Supplier<ClassObject> nativeModuleSupplier;",
                "-  private final Supplier<Environment.GlobalFrame> buckLoadContextGlobalsSupplier;",
                "-  private final Supplier<Environment.GlobalFrame> buckBuildFileContextGlobalsSupplier;",
                "   private final LoadingCache<LoadImport, ExtensionData> extensionDataCache;",
                "+  private final BuckGlobals buckGlobals;",
                "@@ -125,10 +114,9 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "     this.eventHandler = eventHandler;",
                "-    // since Skylark parser is currently disabled by default, avoid creating functions in case",
                "-    // it's never used",
                "-    // TODO(ttsugrii): replace suppliers with eager loading once Skylark parser is on by default",
                "-    this.buckRuleFunctionsSupplier = MoreSuppliers.memoize(this::getBuckRuleFunctions);",
                "-    this.nativeModuleSupplier = MoreSuppliers.memoize(this::newNativeModule);",
                "-    this.buckLoadContextGlobalsSupplier = MoreSuppliers.memoize(this::getBuckLoadContextGlobals);",
                "-    this.buckBuildFileContextGlobalsSupplier =",
                "-        MoreSuppliers.memoize(this::getBuckBuildFileContextGlobals);",
                "+    this.buckGlobals =",
                "+        BuckGlobals.builder()",
                "+            .setDescriptions(options.getDescriptions())",
                "+            .setDisableImplicitNativeRules(options.getDisableImplicitNativeRules())",
                "+            .setRuleFunctionFactory(this::newRuleDefinition)",
                "+            .build();",
                "+",
                "     this.extensionDataCache =",
                "@@ -144,21 +132,2 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "-  /** Always disable implicit native imports in skylark rules, they should utilize native.foo */",
                "-  private Environment.GlobalFrame getBuckLoadContextGlobals() {",
                "-    try (Mutability mutability = Mutability.create(\"global_load_ctx\")) {",
                "-      Environment extensionEnv =",
                "-          Environment.builder(mutability)",
                "-              .useDefaultSemantics()",
                "-              .setGlobals(getBuckGlobals(true))",
                "-              .build();",
                "-      extensionEnv.setup(\"native\", nativeModuleSupplier.get());",
                "-      Runtime.setupModuleGlobals(extensionEnv, SkylarkExtensionFunctions.class);",
                "-      return extensionEnv.getGlobals();",
                "-    }",
                "-  }",
                "-",
                "-  /** Disable implicit native rules depending on configuration */",
                "-  private Environment.GlobalFrame getBuckBuildFileContextGlobals() {",
                "-    return getBuckGlobals(options.getDisableImplicitNativeRules());",
                "-  }",
                "-",
                "   /** Create an instance of Skylark project build file parser using provided options. */",
                "@@ -283,3 +252,3 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "             .setImportedExtensions(importMap)",
                "-            .setGlobals(buckBuildFileContextGlobalsSupplier.get())",
                "+            .setGlobals(buckGlobals.getBuckBuildFileContextGlobals())",
                "             .setPhase(Environment.Phase.LOADING)",
                "@@ -397,3 +366,3 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "               .setEventHandler(eventHandler)",
                "-              .setGlobals(buckLoadContextGlobalsSupplier.get());",
                "+              .setGlobals(buckGlobals.getBuckLoadContextGlobals());",
                "       if (!extensionAst.getImports().isEmpty()) {",
                "@@ -418,26 +387,2 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "-  /**",
                "-   * @return The environment frame with configured buck globals. This includes built-in rules like",
                "-   *     {@code java_library}.",
                "-   * @param disableImplicitNativeRules If true, do not export native rules into the provided context",
                "-   */",
                "-  private Environment.GlobalFrame getBuckGlobals(boolean disableImplicitNativeRules) {",
                "-    try (Mutability mutability = Mutability.create(\"global\")) {",
                "-      Environment globalEnv =",
                "-          Environment.builder(mutability)",
                "-              .setGlobals(BazelLibrary.GLOBALS)",
                "-              .useDefaultSemantics()",
                "-              .build();",
                "-",
                "-      BuiltinFunction readConfigFunction = ReadConfig.create();",
                "-      globalEnv.setup(readConfigFunction.getName(), readConfigFunction);",
                "-      if (!disableImplicitNativeRules) {",
                "-        for (BuiltinFunction buckRuleFunction : buckRuleFunctionsSupplier.get()) {",
                "-          globalEnv.setup(buckRuleFunction.getName(), buckRuleFunction);",
                "-        }",
                "-      }",
                "-      return globalEnv.getGlobals();",
                "-    }",
                "-  }",
                "-",
                "   /**",
                "@@ -477,13 +422,2 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "-  /**",
                "-   * @return The list of functions supporting all native Buck functions like {@code java_library}.",
                "-   */",
                "-  private ImmutableList<BuiltinFunction> getBuckRuleFunctions() {",
                "-    return options",
                "-        .getDescriptions()",
                "-        .stream()",
                "-        .map(this::newRuleDefinition)",
                "-        .collect(ImmutableList.toImmutableList());",
                "-  }",
                "-",
                "   /**",
                "@@ -592,21 +526,2 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "-  /**",
                "-   * Returns a native module with built-in functions and Buck rules.",
                "-   *",
                "-   * <p>It's the module that handles method calls like {@code native.glob} or {@code",
                "-   * native.cxx_library}.",
                "-   */",
                "-  private ClassObject newNativeModule() {",
                "-    ImmutableMap.Builder<String, Object> builder = new ImmutableMap.Builder<>();",
                "-    BuiltinFunction packageName = SkylarkNativeModule.packageName;",
                "-    builder.put(packageName.getName(), packageName);",
                "-    BuiltinFunction glob = Glob.create();",
                "-    builder.put(glob.getName(), glob);",
                "-    for (BuiltinFunction ruleFunction : buckRuleFunctionsSupplier.get()) {",
                "-      builder.put(ruleFunction.getName(), ruleFunction);",
                "-    }",
                "-    builder.put(\"host_info\", HostInfo.create());",
                "-    return NativeProvider.STRUCT.create(builder.build(), \"no native function or rule '%s'\");",
                "-  }",
                "-",
                "   /** Get the {@link ParseContext} by looking up in the environment. */"
            ],
            "changed_files": [
                "src/com/facebook/buck/skylark/parser/AbstractBuckGlobals.java",
                "src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: parser",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, parser",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6fb1d97405388ce7e42c63091ceff7e67e55537e",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522447829,
            "hunks": 2,
            "message": "Make --help print in stdout Summary: `--help` by convension should print in stdout and return success exit code while incorrect and missing arguemnts should print to stderr. This allows `buck targets --help | less` Reviewed By: styurin fbshipit-source-id: 0339c08",
            "diff": [
                "diff --git a/src/com/facebook/buck/cli/AbstractCommand.java b/src/com/facebook/buck/cli/AbstractCommand.java",
                "index 8892f33407..f71ccae3b8 100644",
                "--- a/src/com/facebook/buck/cli/AbstractCommand.java",
                "+++ b/src/com/facebook/buck/cli/AbstractCommand.java",
                "@@ -223,3 +223,3 @@ public abstract class AbstractCommand implements Command {",
                "     if (help) {",
                "-      printUsage(params.getConsole().getStdErr());",
                "+      printUsage(params.getConsole().getStdOut());",
                "       return ExitCode.SUCCESS;",
                "diff --git a/src/com/facebook/buck/cli/Main.java b/src/com/facebook/buck/cli/Main.java",
                "index 3ccf0aab22..87232b93d2 100644",
                "--- a/src/com/facebook/buck/cli/Main.java",
                "+++ b/src/com/facebook/buck/cli/Main.java",
                "@@ -579,3 +579,3 @@ public final class Main {",
                "     // Return help strings fast if the command is a help request.",
                "-    Optional<ExitCode> result = command.runHelp(stdErr);",
                "+    Optional<ExitCode> result = command.runHelp(stdOut);",
                "     if (result.isPresent()) {"
            ],
            "changed_files": [
                "src/com/facebook/buck/cli/AbstractCommand.java",
                "src/com/facebook/buck/cli/Main.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, command",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f7495fe6479363c16164e9780cb0d3423f8353c5",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522703227,
            "hunks": 15,
            "message": "Support Apple TV simulator Summary: Supporting the Apple TV simulator in a macOS computer is simple by using the support already provided to support iPhone simulators. A new default Apple TV simulator name is provided to check for in case of the Apple TV Simulator SDK being used. This mirrors the current support for iPhone simulator which checks for a default iPhone simulator name. One can provide a different name with the usual command line switch if needed (to support 4k devices, for example). Includes tests (and a fixture) to check for the Apple TV simulator basic use cases. The tests are copied from the iPhone simulator ones and fixed them to pass the assumptions and not be skipped (the iPhone simulator ones will be fixed in a different diff). Reviewed By: ttsugriy fbshipit-source-id: 75fd891",
            "diff": [
                "diff --git a/src/com/facebook/buck/cli/InstallCommand.java b/src/com/facebook/buck/cli/InstallCommand.java",
                "index 860c27d269..358f262fef 100644",
                "--- a/src/com/facebook/buck/cli/InstallCommand.java",
                "+++ b/src/com/facebook/buck/cli/InstallCommand.java",
                "@@ -101,2 +101,3 @@ public class InstallCommand extends BuildCommand {",
                "   private static final String DEFAULT_APPLE_SIMULATOR_NAME = \"iPhone 5s\";",
                "+  private static final String DEFAULT_APPLE_TV_SIMULATOR_NAME = \"Apple TV\";",
                "   private static final InstallResult FAILURE =",
                "@@ -478,3 +479,4 @@ public class InstallCommand extends BuildCommand {",
                "       throws IOException, InterruptedException, NoSuchBuildTargetException {",
                "-    if (appleBundle.getPlatformName().equals(ApplePlatform.IPHONESIMULATOR.getName())) {",
                "+    String platformName = appleBundle.getPlatformName();",
                "+    if (isSimulator(platformName)) {",
                "       return installAppleBundleForSimulator(",
                "@@ -482,3 +484,3 @@ public class InstallCommand extends BuildCommand {",
                "     }",
                "-    if (appleBundle.getPlatformName().equals(ApplePlatform.IPHONEOS.getName())) {",
                "+    if (isDevice(platformName)) {",
                "       return installAppleBundleForDevice(",
                "@@ -942,5 +944,10 @@ public class InstallCommand extends BuildCommand {",
                "         // looking for a more recent simulator with this name.",
                "-      } else if (simulator.getName().equals(DEFAULT_APPLE_SIMULATOR_NAME)) {",
                "+      } else if (isIPhoneSimulator(appleBundle.getPlatformName())",
                "+          && simulator.getName().equals(DEFAULT_APPLE_SIMULATOR_NAME)) {",
                "         LOG.debug(\"Got default match (%s): %s\", DEFAULT_APPLE_SIMULATOR_NAME, simulator);",
                "         defaultSimulator = Optional.of(simulator);",
                "+      } else if (isAppleTVSimulator(appleBundle.getPlatformName())",
                "+          && simulator.getName().equals(DEFAULT_APPLE_TV_SIMULATOR_NAME)) {",
                "+        LOG.debug(\"Got default match (%s): %s\", DEFAULT_APPLE_TV_SIMULATOR_NAME, simulator);",
                "+        defaultSimulator = Optional.of(simulator);",
                "       }",
                "@@ -981,2 +988,19 @@ public class InstallCommand extends BuildCommand {",
                "+  private boolean isSimulator(String platformName) {",
                "+    return platformName.equals(ApplePlatform.IPHONESIMULATOR.getName())",
                "+        || platformName.equals(ApplePlatform.APPLETVSIMULATOR.getName());",
                "+  }",
                "+",
                "+  private boolean isDevice(String platformName) {",
                "+    return platformName.equals(ApplePlatform.IPHONEOS.getName());",
                "+  }",
                "+",
                "+  private boolean isIPhoneSimulator(String platformName) {",
                "+    return platformName.equals(ApplePlatform.IPHONESIMULATOR.getName());",
                "+  }",
                "+",
                "+  private boolean isAppleTVSimulator(String platformName) {",
                "+    return platformName.equals(ApplePlatform.APPLETVSIMULATOR.getName());",
                "+  }",
                "+",
                "   private static class TriggerCloseable implements Closeable {",
                "diff --git a/test/com/facebook/buck/cli/BUCK b/test/com/facebook/buck/cli/BUCK",
                "index 21c1a28dbc..3fcb2b5df5 100644",
                "--- a/test/com/facebook/buck/cli/BUCK",
                "+++ b/test/com/facebook/buck/cli/BUCK",
                "@@ -182,2 +182,3 @@ java_test(",
                "         \"//src/com/facebook/buck/apple/project_generator:project_generator\",",
                "+        \"//src/com/facebook/buck/apple/toolchain:toolchain\",",
                "         \"//src/com/facebook/buck/apple/xcode:xcode\",",
                "@@ -265,2 +266,4 @@ java_test(",
                "         \"//src/com/facebook/buck/worker:worker_process\",",
                "+        \"//test/com/facebook/buck/apple:testutil\",",
                "+        \"//test/com/facebook/buck/apple/project_generator:testutil\",",
                "         \"//test/com/facebook/buck/testutil:testutil\",",
                "diff --git a/test/com/facebook/buck/cli/InstallCommandIntegrationTest.java b/test/com/facebook/buck/cli/InstallCommandIntegrationTest.java",
                "index 945f33a9ec..2c6e80185c 100644",
                "--- a/test/com/facebook/buck/cli/InstallCommandIntegrationTest.java",
                "+++ b/test/com/facebook/buck/cli/InstallCommandIntegrationTest.java",
                "@@ -26,2 +26,4 @@ import static org.junit.Assume.assumeTrue;",
                "+import com.facebook.buck.apple.AppleNativeIntegrationTestUtils;",
                "+import com.facebook.buck.apple.toolchain.ApplePlatform;",
                " import com.facebook.buck.testutil.ProcessResult;",
                "@@ -216,2 +218,126 @@ public class InstallCommandIntegrationTest {",
                "   }",
                "+",
                "+  @Test",
                "+  public void appleBundleInstallsInTVSimulator() throws IOException {",
                "+    assumeTrue(",
                "+        AppleNativeIntegrationTestUtils.isApplePlatformAvailable(ApplePlatform.APPLETVSIMULATOR));",
                "+",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"apple_tv_app_bundle\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    ProcessResult result = workspace.runBuckCommand(\"install\", \"//:DemoApp\");",
                "+",
                "+    assumeFalse(result.getStderr().contains(\"no appropriate simulator found\"));",
                "+    result.assertSuccess();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void appleBundleInstallsAndRunsInTVSimulator() throws IOException {",
                "+    assumeTrue(",
                "+        AppleNativeIntegrationTestUtils.isApplePlatformAvailable(ApplePlatform.APPLETVSIMULATOR));",
                "+",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"apple_tv_app_bundle\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    ProcessResult result = workspace.runBuckCommand(\"install\", \"-r\", \"//:DemoApp\");",
                "+",
                "+    assumeFalse(result.getStderr().contains(\"no appropriate simulator found\"));",
                "+    result.assertSuccess();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void appleBundleInstallsAndRunsInTVSimulatorWithDwarfDebugging()",
                "+      throws IOException, InterruptedException {",
                "+    assumeTrue(",
                "+        AppleNativeIntegrationTestUtils.isApplePlatformAvailable(ApplePlatform.APPLETVSIMULATOR));",
                "+",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"apple_tv_app_bundle\", tmp);",
                "+    workspace.setUp();",
                "+    workspace.enableDirCache();",
                "+",
                "+    // build locally",
                "+    ProcessResult result =",
                "+        workspace.runBuckCommand(",
                "+            \"install\",",
                "+            \"--config\",",
                "+            \"apple.default_debug_info_format_for_binaries=DWARF\",",
                "+            \"--config\",",
                "+            \"apple.default_debug_info_format_for_libraries=DWARF\",",
                "+            \"--config\",",
                "+            \"apple.default_debug_info_format_for_tests=DWARF\",",
                "+            \"-r\",",
                "+            \"//:DemoApp\");",
                "+",
                "+    assumeFalse(result.getStderr().contains(\"no appropriate simulator found\"));",
                "+    result.assertSuccess();",
                "+",
                "+    // find port to connect lldb to",
                "+    Pattern p = Pattern.compile(\"lldb -p \\\\d{1,6}\"); // \"lldb -p 12345\"",
                "+    Matcher matcher = p.matcher(result.getStderr());",
                "+    assertThat(matcher.find(), equalTo(true));",
                "+    String[] lldbCommand = matcher.group().split(\" \");",
                "+",
                "+    ProcessExecutor executor = new DefaultProcessExecutor(new TestConsole());",
                "+",
                "+    // run lldb session",
                "+    ProcessExecutor.Result lldbResult =",
                "+        executor.launchAndExecute(",
                "+            ProcessExecutorParams.builder().addCommand(lldbCommand).build(),",
                "+            ImmutableSet.of(),",
                "+            Optional.of(\"b application:didFinishLaunchingWithOptions:\\nb\\nexit\\nY\\n\"),",
                "+            Optional.empty(),",
                "+            Optional.empty());",
                "+    assertThat(lldbResult.getExitCode(), equalTo(0));",
                "+",
                "+    // check that lldb resolved breakpoint locations",
                "+    String lldbOutput = lldbResult.getStdout().orElse(\"\");",
                "+    assertThat(lldbOutput, containsString(\"Current breakpoints:\"));",
                "+    assertThat(",
                "+        lldbOutput,",
                "+        containsString(",
                "+            \"name = 'application:didFinishLaunchingWithOptions:', \"",
                "+                + \"locations = 1, resolved = 1, hit count = 0\"));",
                "+",
                "+    // clean buck out",
                "+    workspace.runBuckCommand(\"clean\", \"--keep-cache\");",
                "+    // build again - get everything from cache now",
                "+    result =",
                "+        workspace.runBuckCommand(",
                "+            \"install\",",
                "+            \"--config\",",
                "+            \"apple.default_debug_info_format_for_binaries=DWARF\",",
                "+            \"--config\",",
                "+            \"apple.default_debug_info_format_for_libraries=DWARF\",",
                "+            \"--config\",",
                "+            \"apple.default_debug_info_format_for_tests=DWARF\",",
                "+            \"-r\",",
                "+            \"//:DemoApp\");",
                "+    result.assertSuccess();",
                "+",
                "+    matcher = p.matcher(result.getStderr());",
                "+    assertThat(matcher.find(), equalTo(true));",
                "+    String[] lldbCommand2 = matcher.group().split(\" \");",
                "+",
                "+    // run lldb session again - now on top of files fetched from cache",
                "+    lldbResult =",
                "+        executor.launchAndExecute(",
                "+            ProcessExecutorParams.builder().addCommand(lldbCommand2).build(),",
                "+            ImmutableSet.of(),",
                "+            Optional.of(\"b application:didFinishLaunchingWithOptions:\\nb\\nexit\\nY\\n\"),",
                "+            Optional.empty(),",
                "+            Optional.empty());",
                "+    assertThat(lldbResult.getExitCode(), equalTo(0));",
                "+",
                "+    // check that lldb resolved breakpoint locations with files from cache",
                "+    lldbOutput = lldbResult.getStdout().orElse(\"\");",
                "+    assertThat(lldbOutput, containsString(\"Current breakpoints:\"));",
                "+    assertThat(",
                "+        lldbOutput,",
                "+        containsString(",
                "+            \"name = 'application:didFinishLaunchingWithOptions:', \"",
                "+                + \"locations = 1, resolved = 1, hit count = 0\"));",
                "+  }",
                " }",
                "diff --git a/test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/.buckconfig b/test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/.buckconfig",
                "new file mode 100644",
                "index 0000000000..afbc8a631a",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/.buckconfig",
                "@@ -0,0 +1,4 @@",
                "+[cxx]",
                "+  default_platform = appletvsimulator-x86_64",
                "+[apple]",
                "+  device_helper_path = fbsimctl/fbsimctl",
                "diff --git a/test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/AppDelegate.m b/test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/AppDelegate.m",
                "new file mode 100644",
                "index 0000000000..64721cfa20",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/AppDelegate.m",
                "@@ -0,0 +1,43 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+#import <Foundation/Foundation.h>",
                "+#import <UIKit/UIKit.h>",
                "+",
                "+@interface AppDelegate : UIResponder <UIApplicationDelegate>",
                "+",
                "+@property (strong, nonatomic) UIWindow *window;",
                "+",
                "+@end",
                "+",
                "+@implementation AppDelegate",
                "+",
                "+- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {",
                "+    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];",
                "+    self.window.backgroundColor = [UIColor whiteColor];",
                "+    UIViewController *viewController = [[UIViewController alloc] initWithNibName:@\"AppViewController\" bundle:nil];",
                "+    self.window.rootViewController = viewController;",
                "+    [self.window makeKeyAndVisible];",
                "+    return YES;",
                "+}",
                "+",
                "+@end",
                "+",
                "+int main(int argc, char * argv[]) {",
                "+    @autoreleasepool {",
                "+        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));",
                "+    }",
                "+}",
                "diff --git a/test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/AppViewController.xib b/test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/AppViewController.xib",
                "new file mode 100644",
                "index 0000000000..2024e1e876",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/AppViewController.xib",
                "@@ -0,0 +1,27 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>",
                "+<document type=\"com.apple.InterfaceBuilder.AppleTV.XIB\" version=\"3.0\" toolsVersion=\"13142\" targetRuntime=\"AppleTV\" propertyAccessControl=\"none\" useAutolayout=\"YES\" useTraitCollections=\"YES\" useSafeAreas=\"YES\" colorMatched=\"YES\">",
                "+    <dependencies>",
                "+        <plugIn identifier=\"com.apple.InterfaceBuilder.IBCocoaTouchPlugin\" version=\"12042\"/>",
                "+        <capability name=\"Safe area layout guides\" minToolsVersion=\"9.0\"/>",
                "+        <capability name=\"documents saved in the Xcode 8 format\" minToolsVersion=\"8.0\"/>",
                "+    </dependencies>",
                "+    <objects>",
                "+        <placeholder placeholderIdentifier=\"IBFilesOwner\" id=\"-1\" userLabel=\"File's Owner\">",
                "+            <connections>",
                "+                <outlet property=\"view\" destination=\"D3n-Lo-kyJ\" id=\"7mW-l1-dIJ\"/>",
                "+            </connections>",
                "+        </placeholder>",
                "+        <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"-2\" customClass=\"UIResponder\"/>",
                "+        <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" text=\"Hello world!\" lineBreakMode=\"tailTruncation\" baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" id=\"D3n-Lo-kyJ\">",
                "+            <rect key=\"frame\" x=\"0.0\" y=\"-1\" width=\"93\" height=\"22\"/>",
                "+            <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>",
                "+            <accessibility key=\"accessibilityConfiguration\">",
                "+                <accessibilityTraits key=\"traits\" none=\"YES\"/>",
                "+            </accessibility>",
                "+            <fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"17\"/>",
                "+            <color key=\"textColor\" red=\"0.0\" green=\"0.0\" blue=\"0.0\" alpha=\"1\" colorSpace=\"calibratedRGB\"/>",
                "+            <nil key=\"highlightedColor\"/>",
                "+            <point key=\"canvasLocation\" x=\"639.5\" y=\"293\"/>",
                "+        </label>",
                "+    </objects>",
                "+</document>",
                "diff --git a/test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/BUCK.fixture b/test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..c174545b54",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/BUCK.fixture",
                "@@ -0,0 +1,24 @@",
                "+apple_resource(",
                "+    name = \"DemoAppResources\",",
                "+    dirs = [],",
                "+    files = glob([\"*.xib\"]),",
                "+)",
                "+",
                "+apple_bundle(",
                "+    name = \"DemoApp\",",
                "+    binary = \":DemoAppBinary\",",
                "+    extension = \"app\",",
                "+    info_plist = \"Info.plist\",",
                "+)",
                "+",
                "+apple_binary(",
                "+    name = \"DemoAppBinary\",",
                "+    srcs = [\"AppDelegate.m\"],",
                "+    frameworks = [",
                "+        \"$SDKROOT/System/Library/Frameworks/Foundation.framework\",",
                "+        \"$SDKROOT/System/Library/Frameworks/UIKit.framework\",",
                "+    ],",
                "+    headers = [],",
                "+    preprocessor_flags = [\"-fobjc-arc\"],",
                "+    deps = [\":DemoAppResources\"],",
                "+)",
                "diff --git a/test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/Info.plist b/test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/Info.plist",
                "new file mode 100644",
                "index 0000000000..603d65fba9",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/Info.plist",
                "@@ -0,0 +1,40 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">",
                "+<plist version=\"1.0\">",
                "+<dict>",
                "+\t<key>CFBundleDevelopmentRegion</key>",
                "+\t<string>en</string>",
                "+\t<key>CFBundleExecutable</key>",
                "+\t<string>DemoApp</string>",
                "+\t<key>CFBundleIdentifier</key>",
                "+\t<string>com.example.DemoApp</string>",
                "+\t<key>CFBundleInfoDictionaryVersion</key>",
                "+\t<string>6.0</string>",
                "+\t<key>CFBundleName</key>",
                "+\t<string>DemoApp</string>",
                "+\t<key>CFBundlePackageType</key>",
                "+\t<string>APPL</string>",
                "+\t<key>CFBundleShortVersionString</key>",
                "+\t<string>1.0</string>",
                "+\t<key>CFBundleSignature</key>",
                "+\t<string>????</string>",
                "+\t<key>CFBundleVersion</key>",
                "+\t<string>1</string>",
                "+\t<key>LSRequiresIPhoneOS</key>",
                "+\t<true/>",
                "+\t<key>UIRequiredDeviceCapabilities</key>",
                "+\t<array>",
                "+\t\t<string>arm64</string>",
                "+\t</array>",
                "+\t<key>UIUserInterfaceStyle</key>",
                "+\t<string>Automatic</string>",
                "+\t<key>CFBundleSupportedPlatforms</key>",
                "+\t<array>",
                "+\t\t<string>AppleTVSimulator</string>",
                "+\t</array>",
                "+\t<key>UIDeviceFamily</key>",
                "+\t<array>",
                "+\t\t<integer>3</integer>",
                "+\t</array>",
                "+</dict>",
                "+</plist>"
            ],
            "changed_files": [
                "src/com/facebook/buck/cli/InstallCommand.java",
                "test/com/facebook/buck/cli/BUCK",
                "test/com/facebook/buck/cli/InstallCommandIntegrationTest.java",
                "test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/.buckconfig",
                "test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/AppDelegate.m",
                "test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/AppViewController.xib",
                "test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/BUCK.fixture",
                "test/com/facebook/buck/cli/testdata/apple_tv_app_bundle/Info.plist"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: command",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, command",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "660c95ce5f5dcfd32142e1a05c0bb0f1da650d0c",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522428339,
            "hunks": 5,
            "message": "Memoize expensive hash code for IJFolder Summary: `IJFolder` is stored in a `HashMap` in several locations in the intellij project generation code. It's primary data member is a list of source paths, which are expensive to hash repeatedly for lookups and stores. This change adds a `MemoizedSupplier` to cache the `hashCode` value. Reviewed By: styurin fbshipit-source-id: 508e64d",
            "diff": [
                "diff --git a/src/com/facebook/buck/ide/intellij/model/folders/IjFolder.java b/src/com/facebook/buck/ide/intellij/model/folders/IjFolder.java",
                "index 87191e5b13..2cfffb8f81 100644",
                "--- a/src/com/facebook/buck/ide/intellij/model/folders/IjFolder.java",
                "+++ b/src/com/facebook/buck/ide/intellij/model/folders/IjFolder.java",
                "@@ -18,4 +18,6 @@ package com.facebook.buck.ide.intellij.model.folders;",
                "+import com.google.common.base.Suppliers;",
                " import com.google.common.collect.ImmutableSortedSet;",
                " import java.nio.file.Path;",
                "+import java.util.function.Supplier;",
                "@@ -29,2 +31,3 @@ public abstract class IjFolder implements Comparable<IjFolder> {",
                "   private final boolean wantsPackagePrefix;",
                "+  private final Supplier<Integer> hashCodeSupplier;",
                "@@ -34,2 +37,8 @@ public abstract class IjFolder implements Comparable<IjFolder> {",
                "     this.inputs = (inputs == null) ? EMPTY_INPUTS : inputs;",
                "+    hashCodeSupplier =",
                "+        Suppliers.memoize(",
                "+            () ->",
                "+                (getPath().hashCode() << 31)",
                "+                    ^ (getWantsPackagePrefix() ? 0x8000 : 0)",
                "+                    ^ inputs.hashCode());",
                "   }",
                "@@ -133,5 +142,3 @@ public abstract class IjFolder implements Comparable<IjFolder> {",
                "   public int hashCode() {",
                "-    return (getPath().hashCode() << 31)",
                "-        ^ (getWantsPackagePrefix() ? 0x8000 : 0)",
                "-        ^ inputs.hashCode();",
                "+    return hashCodeSupplier.get();",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/ide/intellij/model/folders/IjFolder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, cache",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "0cf8d1140a23034286155c894fe1e7b2ca656855",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1523056056,
            "hunks": 41,
            "message": "Allow overriding xcode tool names. Summary: This makes us to specify other executables to use in place of exiting ones present on xcode toolchains and sdks. Reviewed By: stepanhruda fbshipit-source-id: c77c050",
            "diff": [
                "diff --git a/docs/concept/buckconfig.soy b/docs/concept/buckconfig.soy",
                "index dd93bd2b37..645956ddb6 100644",
                "--- a/docs/concept/buckconfig.soy",
                "+++ b/docs/concept/buckconfig.soy",
                "@@ -586,2 +586,20 @@ $ buck targets --resolve-alias app#src_jar",
                "+{call buckconfig.entry}",
                "+  {param section: 'apple' /}",
                "+  {param name: '*_xcode_tool_name_override' /}",
                "+  {param description}",
                "+    Specify custom Xcode tool name to use in place of existing one.",
                "+    When set, buck will lookup Xcode search paths to locate the tool, and use it for tool invocations.",
                "+  {/param}",
                "+  {param raw_example}",
                "+{literal}<pre class=\"prettyprint lang-ini\">",
                "+[apple]",
                "+    # Use (my_clang|my_actool) executable which exists in one of the imported toolchains / sdks,",
                "+    # instead of the defaults.",
                "+    clang_xcode_tool_name_override=my_clang",
                "+    actool_xcode_tool_name_override=my_actool",
                "+</pre>{/literal}",
                "+  {/param}",
                "+{/call}",
                "+",
                " {call buckconfig.section}",
                "diff --git a/src/com/facebook/buck/apple/AppleConfig.java b/src/com/facebook/buck/apple/AppleConfig.java",
                "index 27b6788448..80cb1364c5 100644",
                "--- a/src/com/facebook/buck/apple/AppleConfig.java",
                "+++ b/src/com/facebook/buck/apple/AppleConfig.java",
                "@@ -383,2 +383,8 @@ public class AppleConfig implements ConfigView<BuckConfig> {",
                "+  public String getXcodeToolNameOverride(String toolName) {",
                "+    return delegate",
                "+        .getValue(APPLE_SECTION, toolName + \"_xcode_tool_name_override\")",
                "+        .orElse(toolName);",
                "+  }",
                "+",
                "   @Value.Immutable",
                "diff --git a/src/com/facebook/buck/apple/toolchain/impl/AppleCxxPlatforms.java b/src/com/facebook/buck/apple/toolchain/impl/AppleCxxPlatforms.java",
                "index 6b6f39cecb..4edcef7544 100644",
                "--- a/src/com/facebook/buck/apple/toolchain/impl/AppleCxxPlatforms.java",
                "+++ b/src/com/facebook/buck/apple/toolchain/impl/AppleCxxPlatforms.java",
                "@@ -122,3 +122,3 @@ public class AppleCxxPlatforms {",
                "-    XcodeToolFinder xcodeToolFinder = new XcodeToolFinder();",
                "+    XcodeToolFinder xcodeToolFinder = new XcodeToolFinder(appleConfig);",
                "     XcodeBuildVersionCache xcodeBuildVersionCache = new XcodeBuildVersionCache();",
                "diff --git a/src/com/facebook/buck/apple/toolchain/impl/XcodeToolFinder.java b/src/com/facebook/buck/apple/toolchain/impl/XcodeToolFinder.java",
                "index d47c9f959b..81f702ee08 100644",
                "--- a/src/com/facebook/buck/apple/toolchain/impl/XcodeToolFinder.java",
                "+++ b/src/com/facebook/buck/apple/toolchain/impl/XcodeToolFinder.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.apple.toolchain.impl;",
                "+import com.facebook.buck.apple.AppleConfig;",
                " import com.facebook.buck.io.ExecutableFinder;",
                "@@ -40,5 +41,7 @@ public final class XcodeToolFinder {",
                "   private final Platform platform;",
                "+  private final AppleConfig appleConfig;",
                "-  public XcodeToolFinder() {",
                "+  public XcodeToolFinder(AppleConfig appleConfig) {",
                "     this.platform = Platform.detect();",
                "+    this.appleConfig = appleConfig;",
                "   }",
                "@@ -63,3 +66,3 @@ public final class XcodeToolFinder {",
                "             ImmutableSet.of(),",
                "-            toolName,",
                "+            appleConfig.getXcodeToolNameOverride(toolName),",
                "             ExecutableFinder.getExecutableSuffixes(platform, ImmutableMap.of())),",
                "diff --git a/test/com/facebook/buck/apple/AppleNativeIntegrationTestUtils.java b/test/com/facebook/buck/apple/AppleNativeIntegrationTestUtils.java",
                "index c1646adc94..101cacad9e 100644",
                "--- a/test/com/facebook/buck/apple/AppleNativeIntegrationTestUtils.java",
                "+++ b/test/com/facebook/buck/apple/AppleNativeIntegrationTestUtils.java",
                "@@ -89,3 +89,3 @@ public class AppleNativeIntegrationTestUtils {",
                "             buckConfig,",
                "-            new XcodeToolFinder(),",
                "+            new XcodeToolFinder(buckConfig.getView(AppleConfig.class)),",
                "             FakeAppleRuleDescriptions.FAKE_XCODE_BUILD_VERSION_CACHE,",
                "diff --git a/test/com/facebook/buck/apple/FakeAppleRuleDescriptions.java b/test/com/facebook/buck/apple/FakeAppleRuleDescriptions.java",
                "index 2db5744d89..72a5598ba2 100644",
                "--- a/test/com/facebook/buck/apple/FakeAppleRuleDescriptions.java",
                "+++ b/test/com/facebook/buck/apple/FakeAppleRuleDescriptions.java",
                "@@ -178,3 +178,3 @@ public class FakeAppleRuleDescriptions {",
                "           DEFAULT_BUCK_CONFIG,",
                "-          new XcodeToolFinder(),",
                "+          new XcodeToolFinder(DEFAULT_BUCK_CONFIG.getView(AppleConfig.class)),",
                "           FAKE_XCODE_BUILD_VERSION_CACHE,",
                "@@ -190,3 +190,3 @@ public class FakeAppleRuleDescriptions {",
                "           DEFAULT_BUCK_CONFIG,",
                "-          new XcodeToolFinder(),",
                "+          new XcodeToolFinder(DEFAULT_BUCK_CONFIG.getView(AppleConfig.class)),",
                "           FAKE_XCODE_BUILD_VERSION_CACHE,",
                "@@ -202,3 +202,3 @@ public class FakeAppleRuleDescriptions {",
                "           DEFAULT_BUCK_CONFIG,",
                "-          new XcodeToolFinder(),",
                "+          new XcodeToolFinder(DEFAULT_BUCK_CONFIG.getView(AppleConfig.class)),",
                "           FAKE_XCODE_BUILD_VERSION_CACHE,",
                "@@ -214,3 +214,3 @@ public class FakeAppleRuleDescriptions {",
                "           DEFAULT_BUCK_CONFIG,",
                "-          new XcodeToolFinder(),",
                "+          new XcodeToolFinder(DEFAULT_BUCK_CONFIG.getView(AppleConfig.class)),",
                "           FAKE_XCODE_BUILD_VERSION_CACHE,",
                "diff --git a/test/com/facebook/buck/apple/toolchain/impl/AppleCxxPlatformsTest.java b/test/com/facebook/buck/apple/toolchain/impl/AppleCxxPlatformsTest.java",
                "index b3975c12d2..4dd00ce646 100644",
                "--- a/test/com/facebook/buck/apple/toolchain/impl/AppleCxxPlatformsTest.java",
                "+++ b/test/com/facebook/buck/apple/toolchain/impl/AppleCxxPlatformsTest.java",
                "@@ -33,2 +33,3 @@ import static org.junit.Assume.assumeTrue;",
                " import com.dd.plist.NSDictionary;",
                "+import com.facebook.buck.apple.AppleConfig;",
                " import com.facebook.buck.apple.FakeAppleRuleDescriptions;",
                "@@ -184,2 +185,3 @@ public class AppleCxxPlatformsTest {",
                "+    BuckConfig buckConfig = FakeBuckConfig.builder().build();",
                "     AppleCxxPlatform appleCxxPlatform =",
                "@@ -191,4 +193,4 @@ public class AppleCxxPlatformsTest {",
                "             appleSdkPaths,",
                "-            FakeBuckConfig.builder().build(),",
                "-            new XcodeToolFinder(),",
                "+            buckConfig,",
                "+            new XcodeToolFinder(buckConfig.getView(AppleConfig.class)),",
                "             new AppleCxxPlatforms.XcodeBuildVersionCache(),",
                "@@ -280,2 +282,3 @@ public class AppleCxxPlatformsTest {",
                "+    BuckConfig buckConfig = FakeBuckConfig.builder().build();",
                "     AppleCxxPlatform appleCxxPlatform =",
                "@@ -287,4 +290,4 @@ public class AppleCxxPlatformsTest {",
                "             appleSdkPaths,",
                "-            FakeBuckConfig.builder().build(),",
                "-            new XcodeToolFinder(),",
                "+            buckConfig,",
                "+            new XcodeToolFinder(buckConfig.getView(AppleConfig.class)),",
                "             new AppleCxxPlatforms.XcodeBuildVersionCache(),",
                "@@ -372,2 +375,3 @@ public class AppleCxxPlatformsTest {",
                "+    BuckConfig buckConfig = FakeBuckConfig.builder().build();",
                "     AppleCxxPlatform appleCxxPlatform =",
                "@@ -379,4 +383,4 @@ public class AppleCxxPlatformsTest {",
                "             appleSdkPaths,",
                "-            FakeBuckConfig.builder().build(),",
                "-            new XcodeToolFinder(),",
                "+            buckConfig,",
                "+            new XcodeToolFinder(buckConfig.getView(AppleConfig.class)),",
                "             new AppleCxxPlatforms.XcodeBuildVersionCache(),",
                "@@ -465,2 +469,3 @@ public class AppleCxxPlatformsTest {",
                "+    BuckConfig buckConfig = FakeBuckConfig.builder().build();",
                "     AppleCxxPlatform appleCxxPlatform =",
                "@@ -472,4 +477,4 @@ public class AppleCxxPlatformsTest {",
                "             appleSdkPaths,",
                "-            FakeBuckConfig.builder().build(),",
                "-            new XcodeToolFinder(),",
                "+            buckConfig,",
                "+            new XcodeToolFinder(buckConfig.getView(AppleConfig.class)),",
                "             new AppleCxxPlatforms.XcodeBuildVersionCache(),",
                "@@ -516,2 +521,14 @@ public class AppleCxxPlatformsTest {",
                "+    BuckConfig buckConfig =",
                "+        FakeBuckConfig.builder()",
                "+            .setSections(",
                "+                ImmutableMap.of(",
                "+                    \"cxx\",",
                "+                    ImmutableMap.of(",
                "+                        \"cflags\", \"-std=gnu11\",",
                "+                        \"cppflags\", \"-DCTHING\",",
                "+                        \"cxxflags\", \"-std=c++11\",",
                "+                        \"cxxppflags\", \"-DCXXTHING\")))",
                "+            .build();",
                "+",
                "     AppleCxxPlatform appleCxxPlatform =",
                "@@ -523,13 +540,4 @@ public class AppleCxxPlatformsTest {",
                "             appleSdkPaths,",
                "-            FakeBuckConfig.builder()",
                "-                .setSections(",
                "-                    ImmutableMap.of(",
                "-                        \"cxx\",",
                "-                        ImmutableMap.of(",
                "-                            \"cflags\", \"-std=gnu11\",",
                "-                            \"cppflags\", \"-DCTHING\",",
                "-                            \"cxxflags\", \"-std=c++11\",",
                "-                            \"cxxppflags\", \"-DCXXTHING\")))",
                "-                .build(),",
                "-            new XcodeToolFinder(),",
                "+            buckConfig,",
                "+            new XcodeToolFinder(buckConfig.getView(AppleConfig.class)),",
                "             new AppleCxxPlatforms.XcodeBuildVersionCache(),",
                "@@ -573,2 +581,3 @@ public class AppleCxxPlatformsTest {",
                "+    BuckConfig buckConfig = FakeBuckConfig.builder().build();",
                "     AppleCxxPlatforms.buildWithXcodeToolFinder(",
                "@@ -579,4 +588,4 @@ public class AppleCxxPlatformsTest {",
                "         appleSdkPaths,",
                "-        FakeBuckConfig.builder().build(),",
                "-        new XcodeToolFinder(),",
                "+        buckConfig,",
                "+        new XcodeToolFinder(buckConfig.getView(AppleConfig.class)),",
                "         new AppleCxxPlatforms.XcodeBuildVersionCache(),",
                "@@ -621,2 +630,3 @@ public class AppleCxxPlatformsTest {",
                "+    BuckConfig buckConfig = FakeBuckConfig.builder().build();",
                "     AppleCxxPlatform appleCxxPlatform =",
                "@@ -628,4 +638,4 @@ public class AppleCxxPlatformsTest {",
                "             appleSdkPaths,",
                "-            FakeBuckConfig.builder().build(),",
                "-            new XcodeToolFinder(),",
                "+            buckConfig,",
                "+            new XcodeToolFinder(buckConfig.getView(AppleConfig.class)),",
                "             new AppleCxxPlatforms.XcodeBuildVersionCache(),",
                "@@ -675,2 +685,3 @@ public class AppleCxxPlatformsTest {",
                "+    BuckConfig buckConfig = FakeBuckConfig.builder().build();",
                "     AppleCxxPlatform appleCxxPlatform =",
                "@@ -682,4 +693,4 @@ public class AppleCxxPlatformsTest {",
                "             appleSdkPaths,",
                "-            FakeBuckConfig.builder().build(),",
                "-            new XcodeToolFinder(),",
                "+            buckConfig,",
                "+            new XcodeToolFinder(buckConfig.getView(AppleConfig.class)),",
                "             new AppleCxxPlatforms.XcodeBuildVersionCache(),",
                "@@ -730,2 +741,3 @@ public class AppleCxxPlatformsTest {",
                "+    BuckConfig buckConfig = FakeBuckConfig.builder().build();",
                "     AppleCxxPlatform appleCxxPlatform =",
                "@@ -737,4 +749,4 @@ public class AppleCxxPlatformsTest {",
                "             appleSdkPaths,",
                "-            FakeBuckConfig.builder().build(),",
                "-            new XcodeToolFinder(),",
                "+            buckConfig,",
                "+            new XcodeToolFinder(buckConfig.getView(AppleConfig.class)),",
                "             new AppleCxxPlatforms.XcodeBuildVersionCache(),",
                "@@ -889,3 +901,3 @@ public class AppleCxxPlatformsTest {",
                "         config,",
                "-        new XcodeToolFinder(),",
                "+        new XcodeToolFinder(config.getView(AppleConfig.class)),",
                "         FakeAppleRuleDescriptions.FAKE_XCODE_BUILD_VERSION_CACHE,",
                "@@ -1132,2 +1144,3 @@ public class AppleCxxPlatformsTest {",
                "     knownPaths.forEach(this::touchFile);",
                "+    BuckConfig buckConfig = FakeBuckConfig.builder().build();",
                "     return AppleCxxPlatforms.buildWithXcodeToolFinder(",
                "@@ -1144,4 +1157,4 @@ public class AppleCxxPlatformsTest {",
                "             .build(),",
                "-        FakeBuckConfig.builder().build(),",
                "-        new XcodeToolFinder(),",
                "+        buckConfig,",
                "+        new XcodeToolFinder(buckConfig.getView(AppleConfig.class)),",
                "         FakeAppleRuleDescriptions.FAKE_XCODE_BUILD_VERSION_CACHE,",
                "diff --git a/test/com/facebook/buck/apple/toolchain/impl/XcodeToolFinderTest.java b/test/com/facebook/buck/apple/toolchain/impl/XcodeToolFinderTest.java",
                "index e152553c18..0f7fb9b547 100644",
                "--- a/test/com/facebook/buck/apple/toolchain/impl/XcodeToolFinderTest.java",
                "+++ b/test/com/facebook/buck/apple/toolchain/impl/XcodeToolFinderTest.java",
                "@@ -22,2 +22,4 @@ import static org.junit.Assert.assertTrue;",
                "+import com.facebook.buck.apple.AppleConfig;",
                "+import com.facebook.buck.config.FakeBuckConfig;",
                " import com.facebook.buck.testutil.TemporaryPaths;",
                "@@ -51,3 +53,4 @@ public class XcodeToolFinderTest {",
                "-    XcodeToolFinder finder = new XcodeToolFinder();",
                "+    XcodeToolFinder finder =",
                "+        new XcodeToolFinder(FakeBuckConfig.builder().build().getView(AppleConfig.class));",
                "@@ -65,3 +68,4 @@ public class XcodeToolFinderTest {",
                "-    XcodeToolFinder finder = new XcodeToolFinder();",
                "+    XcodeToolFinder finder =",
                "+        new XcodeToolFinder(FakeBuckConfig.builder().build().getView(AppleConfig.class));",
                "     assertFalse(\"Created file should not be accessible\", Files.isExecutable(file));",
                "@@ -79,3 +83,4 @@ public class XcodeToolFinderTest {",
                "-    XcodeToolFinder finder = new XcodeToolFinder();",
                "+    XcodeToolFinder finder =",
                "+        new XcodeToolFinder(FakeBuckConfig.builder().build().getView(AppleConfig.class));",
                "     assertEquals(",
                "@@ -98,3 +103,4 @@ public class XcodeToolFinderTest {",
                "-    XcodeToolFinder finder = new XcodeToolFinder();",
                "+    XcodeToolFinder finder =",
                "+        new XcodeToolFinder(FakeBuckConfig.builder().build().getView(AppleConfig.class));",
                "     assertEquals(",
                "@@ -110,3 +116,4 @@ public class XcodeToolFinderTest {",
                "     Path searchRoot = tempPath.newFolder(\"SEARCH_ROOT\");",
                "-    XcodeToolFinder finder = new XcodeToolFinder();",
                "+    XcodeToolFinder finder =",
                "+        new XcodeToolFinder(FakeBuckConfig.builder().build().getView(AppleConfig.class));",
                "     assertFalse(",
                "@@ -130,3 +137,30 @@ public class XcodeToolFinderTest {",
                "         \"A new instance would find the entries again.\",",
                "-        new XcodeToolFinder().getToolPath(ImmutableList.of(searchRoot), \"bob\").isPresent());",
                "+        new XcodeToolFinder(FakeBuckConfig.builder().build().getView(AppleConfig.class))",
                "+            .getToolPath(ImmutableList.of(searchRoot), \"bob\")",
                "+            .isPresent());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void matchesOverridedToolName() throws Exception {",
                "+    Path searchRoot = tempPath.newFolder(\"SEARCH_ROOT\");",
                "+    Files.createFile(",
                "+        searchRoot.resolve(\"clang\"),",
                "+        PosixFilePermissions.asFileAttribute(",
                "+            EnumSet.of(PosixFilePermission.OWNER_EXECUTE, PosixFilePermission.OWNER_READ)));",
                "+    Files.createFile(",
                "+        searchRoot.resolve(\"my_clang\"),",
                "+        PosixFilePermissions.asFileAttribute(",
                "+            EnumSet.of(PosixFilePermission.OWNER_EXECUTE, PosixFilePermission.OWNER_READ)));",
                "+    assertEquals(",
                "+        Optional.of(searchRoot.resolve(\"clang\")),",
                "+        new XcodeToolFinder(FakeBuckConfig.builder().build().getView(AppleConfig.class))",
                "+            .getToolPath(ImmutableList.of(searchRoot), \"clang\"));",
                "+    assertEquals(",
                "+        Optional.of(searchRoot.resolve(\"my_clang\")),",
                "+        new XcodeToolFinder(",
                "+                FakeBuckConfig.builder()",
                "+                    .setSections(\"[apple]\", \"clang_xcode_tool_name_override = my_clang\")",
                "+                    .build()",
                "+                    .getView(AppleConfig.class))",
                "+            .getToolPath(ImmutableList.of(searchRoot), \"clang\"));",
                "   }"
            ],
            "changed_files": [
                "docs/concept/buckconfig.soy",
                "src/com/facebook/buck/apple/AppleConfig.java",
                "src/com/facebook/buck/apple/toolchain/impl/AppleCxxPlatforms.java",
                "src/com/facebook/buck/apple/toolchain/impl/XcodeToolFinder.java",
                "test/com/facebook/buck/apple/AppleNativeIntegrationTestUtils.java",
                "test/com/facebook/buck/apple/FakeAppleRuleDescriptions.java",
                "test/com/facebook/buck/apple/toolchain/impl/AppleCxxPlatformsTest.java",
                "test/com/facebook/buck/apple/toolchain/impl/XcodeToolFinderTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4c9e9baee6630cd4ecf2c3baa0c38fdc710e6975",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521766708,
            "hunks": 8,
            "message": "Add async transformation engine that can handle graph dependencies Summary: Building a new async graph transformation engine. This is aimed to be used for TargetGraph to ActionGraph construction, but with the generics we should be use this for any graph operations. Using async Futures, this should be safer (less deadlock prone), and possibly more performant than existing ForkJoinPool solutions. It is implemented such that given tail-recursive Transformers, the execution will be tail recursive. A BuildRuleResolver will be built on top of this for ActionGraph construction. Reviewed By: ttsugriy fbshipit-source-id: e6be266",
            "diff": [
                "diff --git a/src/com/facebook/buck/graph/transformation/AsyncTransformationEngine.java b/src/com/facebook/buck/graph/transformation/AsyncTransformationEngine.java",
                "new file mode 100644",
                "index 0000000000..2d825a7623",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/graph/transformation/AsyncTransformationEngine.java",
                "@@ -0,0 +1,68 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.graph.transformation;",
                "+",
                "+import com.google.common.collect.ImmutableMap;",
                "+import java.util.concurrent.CompletableFuture;",
                "+import java.util.function.Function;",
                "+",
                "+/**",
                "+ * Transformation engine that transforms supplied ComputeKey into ComputeResult via {@link",
                "+ * AsyncTransformer}. This engine is able to asynchronously run graph based computation, reusing",
                "+ * results when possible. Note that the computation graph must be an acyclic graph.",
                "+ *",
                "+ * <p>This engine is able to deal with dependencies in the computation graph by having Transformer",
                "+ * request dependent results of other transformations through {@link",
                "+ * TransformationEnvironment#evaluate(Object, Function)}.",
                "+ *",
                "+ * <p>Implementations should have all methods of this class as tail recursive and non-blocking when",
                "+ * working together with {@link TransformationEnvironment} and {@link AsyncTransformer}.",
                "+ */",
                "+public interface AsyncTransformationEngine<ComputeKey, ComputeResult> {",
                "+",
                "+  /**",
                "+   * Asynchronously computes the result for the given key",
                "+   *",
                "+   * @param key the specific Key on the graph to compute",
                "+   * @return future of the result of applying the transformer on the graph with the given key",
                "+   */",
                "+  CompletableFuture<ComputeResult> compute(ComputeKey key);",
                "+",
                "+  /**",
                "+   * Synchronously computes the given key",
                "+   *",
                "+   * @param key the specific Key on the graph to compute",
                "+   * @return the result of applying the transformer on the graph with the given key",
                "+   */",
                "+  ComputeResult computeUnchecked(ComputeKey key);",
                "+",
                "+  /**",
                "+   * Asynchronously computes the result for multiple keys",
                "+   *",
                "+   * @param keys iterable of keys to compute on the graph",
                "+   * @return a map of futures of the result for each of the keys supplied",
                "+   */",
                "+  ImmutableMap<ComputeKey, CompletableFuture<ComputeResult>> computeAll(Iterable<ComputeKey> keys);",
                "+",
                "+  /**",
                "+   * Synchronously computes the result for multiple keys",
                "+   *",
                "+   * @param keys iterable of the keys to compute on the graph",
                "+   * @return a map of the results for each of the keys supplied",
                "+   */",
                "+  ImmutableMap<ComputeKey, ComputeResult> computeAllUnchecked(Iterable<ComputeKey> keys);",
                "+}",
                "diff --git a/src/com/facebook/buck/graph/transformation/AsyncTransformer.java b/src/com/facebook/buck/graph/transformation/AsyncTransformer.java",
                "new file mode 100644",
                "index 0000000000..a36b500f33",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/graph/transformation/AsyncTransformer.java",
                "@@ -0,0 +1,36 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.graph.transformation;",
                "+",
                "+import java.util.concurrent.CompletionStage;",
                "+",
                "+/**",
                "+ * Functional interface for transformations with the {@link AsyncTransformationEngine}.",
                "+ *",
                "+ * @param <Key> The types of Keys used to query for the result on the graph computation",
                "+ * @param <Result> The result of the computation given a specific key",
                "+ */",
                "+@FunctionalInterface",
                "+public interface AsyncTransformer<Key, Result> {",
                "+",
                "+  /**",
                "+   * @param key The Key of the requested result",
                "+   * @param env The execution environment to request dependencies",
                "+   * @return a future of the result requested",
                "+   */",
                "+  public CompletionStage<Result> transform(Key key, TransformationEnvironment<Key, Result> env);",
                "+}",
                "diff --git a/src/com/facebook/buck/graph/transformation/BUCK b/src/com/facebook/buck/graph/transformation/BUCK",
                "new file mode 100644",
                "index 0000000000..7569a959a8",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/graph/transformation/BUCK",
                "@@ -0,0 +1,13 @@",
                "+java_library(",
                "+    name = \"transformation\",",
                "+    srcs = glob([\"*.java\"]),",
                "+    tests = [",
                "+        \"//test/com/facebook/buck/graph/transformation:transformation\",",
                "+    ],",
                "+    visibility = [\"PUBLIC\"],",
                "+    deps = [",
                "+        \"//src/com/facebook/buck/log:api\",",
                "+        \"//src/com/facebook/buck/util:util\",",
                "+        \"//third-party/java/guava:guava\",",
                "+    ],",
                "+)",
                "diff --git a/src/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngine.java b/src/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngine.java",
                "new file mode 100644",
                "index 0000000000..4dccb5901c",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngine.java",
                "@@ -0,0 +1,129 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.graph.transformation;",
                "+",
                "+import com.facebook.buck.log.Logger;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.Maps;",
                "+import com.google.common.util.concurrent.Futures;",
                "+import java.util.Map;",
                "+import java.util.Map.Entry;",
                "+import java.util.concurrent.CompletableFuture;",
                "+import java.util.concurrent.CompletionStage;",
                "+import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.function.Function;",
                "+",
                "+/**",
                "+ * Transformation engine that transforms supplied ComputeKey into ComputeResult via {@link",
                "+ * AsyncTransformer}. This engine is able to asynchronously run graph based computation, reusing",
                "+ * results when possible. Note that the computation graph must be an acyclic graph.",
                "+ *",
                "+ * <p>This engine is able to deal with dependencies in the computation graph by having Transformer",
                "+ * request dependent results of other transformations through {@link",
                "+ * TransformationEnvironment#evaluate(Object, Function)}.",
                "+ *",
                "+ * <p>The transformation is incremental, so cached portions of the transformation will be used",
                "+ * whenever possible based on {@code ComputeKey.equals()}. Therefore, {@link ComputeKey} should be",
                "+ * immutable, and have deterministic equals. For future perspective, we want to have {@link",
                "+ * ComputeKey} be serializable, so that we can eventually send keys to be computed remotely.",
                "+ *",
                "+ * <p>Transformations will be applied asynchronously, so independent transformations can be executed",
                "+ * in parallel. It is therefore important that transformations are thread safe.",
                "+ *",
                "+ * <p>Transformations also should never block waiting for Futures. Hence, Transformations can only",
                "+ * access the Future results through {@link CompletionStage} as opposed to {@link",
                "+ * java.util.concurrent.Future}, which only has async methods exposed. It is strongly suggested to",
                "+ * use the async versions of all methods on the {@link CompletionStage} to allow Java to perform the",
                "+ * transformation in any executor.",
                "+ *",
                "+ * <p>By using all callback based operations and being tail recursive, this engine will also reduce",
                "+ * stack usage, eliminating stack overflow for large graph computations. The {@link",
                "+ * TransformationEnvironment} has every method implemented as non-blocking, and returns a Future of",
                "+ * the dependency calculation such that if Transformer is implemented to be tail recursive, the",
                "+ * whole graph computation will be tail recursive, eliminating stack use.",
                "+ *",
                "+ * <p>Currently, we only use the engine for {@link com.facebook.buck.rules.TargetGraph} to {@link",
                "+ * com.facebook.buck.rules.ActionGraph}, but theoretically this can be extended to work with any",
                "+ * computation.",
                "+ */",
                "+public final class DefaultAsyncTransformationEngine<ComputeKey, ComputeResult>",
                "+    implements AsyncTransformationEngine<ComputeKey, ComputeResult> {",
                "+",
                "+  private static final Logger LOG = Logger.get(DefaultAsyncTransformationEngine.class);",
                "+",
                "+  private final AsyncTransformer<ComputeKey, ComputeResult> transformer;",
                "+",
                "+  private final ConcurrentHashMap<ComputeKey, CompletableFuture<ComputeResult>> computationIndex;",
                "+",
                "+  public DefaultAsyncTransformationEngine(",
                "+      AsyncTransformer<ComputeKey, ComputeResult> transformer, int estimatedNumOps) {",
                "+    this.transformer = transformer;",
                "+    this.computationIndex = new ConcurrentHashMap<>(estimatedNumOps);",
                "+  }",
                "+",
                "+  @Override",
                "+  public final CompletableFuture<ComputeResult> compute(ComputeKey key) {",
                "+    return computeWithEnvironment(",
                "+        key, new DefaultTransformationEnvironment<ComputeKey, ComputeResult>(this));",
                "+  }",
                "+",
                "+  @Override",
                "+  public final ComputeResult computeUnchecked(ComputeKey key) {",
                "+    return Futures.getUnchecked(compute(key));",
                "+  }",
                "+",
                "+  @Override",
                "+  public final ImmutableMap<ComputeKey, CompletableFuture<ComputeResult>> computeAll(",
                "+      Iterable<ComputeKey> keys) {",
                "+    return RichStream.from(keys)",
                "+        .parallel()",
                "+        .map(key -> Maps.immutableEntry(key, compute(key)))",
                "+        .collect(ImmutableMap.toImmutableMap(Entry::getKey, Entry::getValue));",
                "+  }",
                "+",
                "+  @Override",
                "+  public final ImmutableMap<ComputeKey, ComputeResult> computeAllUnchecked(",
                "+      Iterable<ComputeKey> keys) {",
                "+    return Futures.getUnchecked(collectFutures(computeAll(keys)));",
                "+  }",
                "+",
                "+  private CompletableFuture<ComputeResult> computeWithEnvironment(",
                "+      ComputeKey key, TransformationEnvironment<ComputeKey, ComputeResult> env) {",
                "+    LOG.verbose(\"Computing transformation for requested key: %s\", key);",
                "+    return computationIndex.computeIfAbsent(",
                "+        key,",
                "+        mapKey -> {",
                "+          return CompletableFuture.supplyAsync(() -> mapKey)",
                "+              .thenComposeAsync(computeKey -> transformer.transform(computeKey, env));",
                "+        });",
                "+  }",
                "+",
                "+  static final <K, V> CompletableFuture<ImmutableMap<K, V>> collectFutures(",
                "+      Map<K, CompletableFuture<V>> toCollect) {",
                "+    return CompletableFuture.allOf(",
                "+            toCollect.values().toArray(new CompletableFuture[toCollect.size()]))",
                "+        .thenApplyAsync(",
                "+            voidType ->",
                "+                toCollect",
                "+                    .entrySet()",
                "+                    .parallelStream()",
                "+                    .collect(",
                "+                        ImmutableMap.toImmutableMap(",
                "+                            Entry::getKey, entry -> entry.getValue().join())));",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/graph/transformation/DefaultTransformationEnvironment.java b/src/com/facebook/buck/graph/transformation/DefaultTransformationEnvironment.java",
                "new file mode 100644",
                "index 0000000000..9b4c754fe9",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/graph/transformation/DefaultTransformationEnvironment.java",
                "@@ -0,0 +1,79 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.graph.transformation;",
                "+",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.Maps;",
                "+import java.util.Map;",
                "+import java.util.Map.Entry;",
                "+import java.util.concurrent.CompletableFuture;",
                "+import java.util.concurrent.CompletionStage;",
                "+import java.util.function.Function;",
                "+import java.util.stream.Collectors;",
                "+",
                "+/**",
                "+ * A computation environment that {@link AsyncTransformer} can access. This class provides ability",
                "+ * of {@link AsyncTransformer}s to request and execute their dependencies on the engine, without",
                "+ * exposing blocking operations.",
                "+ */",
                "+final class DefaultTransformationEnvironment<ComputeKey, ComputeResult>",
                "+    implements TransformationEnvironment<ComputeKey, ComputeResult> {",
                "+",
                "+  private final AsyncTransformationEngine<ComputeKey, ComputeResult> engine;",
                "+",
                "+  /**",
                "+   * Package protected constructor so only {@link DefaultAsyncTransformationEngine} can create the",
                "+   * environment",
                "+   */",
                "+  DefaultTransformationEnvironment(AsyncTransformationEngine<ComputeKey, ComputeResult> engine) {",
                "+    this.engine = engine;",
                "+  }",
                "+",
                "+  @Override",
                "+  public final CompletionStage<ComputeResult> evaluate(",
                "+      ComputeKey key, Function<ComputeResult, ComputeResult> asyncTransformation) {",
                "+    return engine.compute(key).thenApplyAsync(asyncTransformation);",
                "+  }",
                "+",
                "+  @Override",
                "+  public final CompletionStage<ComputeResult> evaluateAll(",
                "+      Iterable<ComputeKey> keys,",
                "+      Function<ImmutableMap<ComputeKey, ComputeResult>, ComputeResult> asyncTransformation) {",
                "+    return collectAsyncAndRunInternal(engine.computeAll(keys), asyncTransformation);",
                "+  }",
                "+",
                "+  @Override",
                "+  public final CompletionStage<ComputeResult> collectAsyncAndRun(",
                "+      ImmutableMap<ComputeKey, CompletionStage<ComputeResult>> toCollect,",
                "+      Function<ImmutableMap<ComputeKey, ComputeResult>, ComputeResult> thenFunc) {",
                "+    return collectAsyncAndRunInternal(",
                "+        toCollect",
                "+            .entrySet()",
                "+            .parallelStream()",
                "+            .map(",
                "+                entry ->",
                "+                    Maps.immutableEntry(entry.getKey(), entry.getValue().toCompletableFuture()))",
                "+            .collect(Collectors.toMap(Entry::getKey, Entry::getValue)),",
                "+        thenFunc);",
                "+  }",
                "+",
                "+  private CompletionStage<ComputeResult> collectAsyncAndRunInternal(",
                "+      Map<ComputeKey, CompletableFuture<ComputeResult>> toCollect,",
                "+      Function<ImmutableMap<ComputeKey, ComputeResult>, ComputeResult> thenFunc) {",
                "+    return DefaultAsyncTransformationEngine.collectFutures(toCollect).thenApplyAsync(thenFunc);",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/graph/transformation/TransformationEnvironment.java b/src/com/facebook/buck/graph/transformation/TransformationEnvironment.java",
                "new file mode 100644",
                "index 0000000000..a328c63467",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/graph/transformation/TransformationEnvironment.java",
                "@@ -0,0 +1,71 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.graph.transformation;",
                "+",
                "+import com.google.common.collect.ImmutableMap;",
                "+import java.util.concurrent.CompletionStage;",
                "+import java.util.function.Function;",
                "+",
                "+/**",
                "+ * A computation environment that {@link AsyncTransformer} can access. This class provides ability",
                "+ * of Transformers to request and execute their dependencies on the engine, without exposing",
                "+ * blocking operations.",
                "+ *",
                "+ * <p>The implementations of this environment should have all methods as tail recursive and",
                "+ * unblocking.",
                "+ */",
                "+public interface TransformationEnvironment<ComputeKey, ComputeResult> {",
                "+",
                "+  /**",
                "+   * Method used for {@link AsyncTransformer} to get dependency results, and then construct the",
                "+   * {@link ComputeResult} for the current requested Key with the supplied asyncTransformation using",
                "+   * the dependency result.",
                "+   *",
                "+   * @param key The Key of the dependency to execute",
                "+   * @param asyncTransformation the async function to perform after dependency has completed",
                "+   * @return a Future of the result of applying {@code asyncTransformation} to the completed",
                "+   *     dependency result",
                "+   */",
                "+  CompletionStage<ComputeResult> evaluate(",
                "+      ComputeKey key, Function<ComputeResult, ComputeResult> asyncTransformation);",
                "+",
                "+  /**",
                "+   * Method used for {@link AsyncTransformer} to get multiple dependency results, and then construct",
                "+   * the {@link ComputeResult} for the current requested Key with the supplied asyncTransformation",
                "+   * using the dependency result.",
                "+   *",
                "+   * @param keys The keys of the dependency to consume",
                "+   * @param asyncTransformation The function to run after all dependencies are completed, where the",
                "+   *     result of dependencies are given as a map of the keys to the result",
                "+   * @return a future of the result of applying {@code asyncTransformation} to the dependencies",
                "+   */",
                "+  CompletionStage<ComputeResult> evaluateAll(",
                "+      Iterable<ComputeKey> keys,",
                "+      Function<ImmutableMap<ComputeKey, ComputeResult>, ComputeResult> asyncTransformation);",
                "+",
                "+  /**",
                "+   * Used to wait for completion of a list of CompletionStage and apply a function asynchronously on",
                "+   * the results",
                "+   *",
                "+   * @param toCollect a map of CompletionStage to wait for",
                "+   * @param thenFunc the function to run after completion",
                "+   * @return a CompletionStage for applying asynchronous operations on the collected futures",
                "+   */",
                "+  CompletionStage<ComputeResult> collectAsyncAndRun(",
                "+      ImmutableMap<ComputeKey, CompletionStage<ComputeResult>> toCollect,",
                "+      Function<ImmutableMap<ComputeKey, ComputeResult>, ComputeResult> thenFunc);",
                "+}",
                "diff --git a/test/com/facebook/buck/graph/transformation/BUCK b/test/com/facebook/buck/graph/transformation/BUCK",
                "new file mode 100644",
                "index 0000000000..081dd9d7b0",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/graph/transformation/BUCK",
                "@@ -0,0 +1,11 @@",
                "+load(\"//tools/build_rules:java_rules.bzl\", \"standard_java_test\")",
                "+",
                "+standard_java_test(",
                "+    name = \"transformation\",",
                "+    deps = [",
                "+        \"//src/com/facebook/buck/graph/transformation:transformation\",",
                "+        \"//src/com/facebook/buck/util/types:types\",",
                "+        \"//third-party/java/guava:guava\",",
                "+        \"//third-party/java/junit:junit\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java b/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java",
                "new file mode 100644",
                "index 0000000000..db30f5bea9",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java",
                "@@ -0,0 +1,124 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.graph.transformation;",
                "+",
                "+import static org.junit.Assert.assertEquals;",
                "+",
                "+import com.google.common.graph.GraphBuilder;",
                "+import com.google.common.graph.MutableGraph;",
                "+import java.util.concurrent.CompletionStage;",
                "+import org.junit.Before;",
                "+import org.junit.Test;",
                "+",
                "+/** Test and demonstration of {@link DefaultAsyncTransformationEngine} */",
                "+public class DefaultAsyncTransformationEngineTest {",
                "+",
                "+  private MutableGraph<Long> graph;",
                "+",
                "+  @Before",
                "+  public void setUp() {",
                "+    graph = GraphBuilder.directed().build();",
                "+",
                "+    /**",
                "+     * Make a graph",
                "+     *",
                "+     * <p>Edges directed down",
                "+     *",
                "+     * <pre>",
                "+     *            1",
                "+     *         /  |  \\",
                "+     *        2  4 <- 5",
                "+     *       /",
                "+     *      3",
                "+     * </pre>",
                "+     */",
                "+    graph.addNode(1L);",
                "+    graph.addNode(2L);",
                "+    graph.addNode(3L);",
                "+    graph.addNode(4L);",
                "+    graph.addNode(5L);",
                "+",
                "+    graph.putEdge(1L, 2L);",
                "+    graph.putEdge(1L, 4L);",
                "+    graph.putEdge(1L, 5L);",
                "+    graph.putEdge(5L, 4L);",
                "+    graph.putEdge(2L, 3L);",
                "+  }",
                "+",
                "+  /**",
                "+   * Demonstration of usage of {@link AsyncTransformer}.",
                "+   *",
                "+   * <p>This returns the value of the sum of its input graph's chidren and itself. For the above",
                "+   * graph in {@code graph}, operating on the root would result in 19.",
                "+   */",
                "+  private class ChildrenAdder implements AsyncTransformer<Long, Long> {",
                "+",
                "+    private final MutableGraph<Long> input;",
                "+",
                "+    public ChildrenAdder(MutableGraph<Long> input) {",
                "+      this.input = input;",
                "+    }",
                "+",
                "+    @Override",
                "+    public CompletionStage<Long> transform(Long key, TransformationEnvironment<Long, Long> env) {",
                "+      Iterable<Long> children = input.successors(key);",
                "+",
                "+      return env.evaluateAll(",
                "+          children,",
                "+          childValues -> {",
                "+            return key + childValues.values().parallelStream().mapToLong(Long::new).sum();",
                "+          });",
                "+    }",
                "+  }",
                "+",
                "+  @Test",
                "+  public void requestOnLeafResultsSameValue() {",
                "+    ChildrenAdder transformer = new ChildrenAdder(graph);",
                "+    assertEquals(",
                "+        (Long) 3L,",
                "+        new DefaultAsyncTransformationEngine<>(transformer, graph.nodes().size())",
                "+            .computeUnchecked((Long) 3L));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void requestOnRootCorrectValue() {",
                "+    ChildrenAdder transformer = new ChildrenAdder(graph);",
                "+    assertEquals(",
                "+        (Long) 19L,",
                "+        new DefaultAsyncTransformationEngine<>(transformer, graph.nodes().size())",
                "+            .computeUnchecked((Long) 1L));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void largeGraphShouldNotStackOverflow() {",
                "+    graph = GraphBuilder.directed().build();",
                "+    // graph of 100000 depth is plenty deep for testing",
                "+    for (long i = 1L; i <= 100000L; i++) {",
                "+      graph.addNode(i);",
                "+      if (i > 1) {",
                "+        graph.putEdge(i - 1, i);",
                "+      }",
                "+    }",
                "+",
                "+    ChildrenAdder transformer = new ChildrenAdder(graph);",
                "+    assertEquals(",
                "+        (Long) 5000050000L, // arithmetic series from 1 to 100000",
                "+        // https://www.wolframalpha.com/input/?i=sum+from+1+to+100000",
                "+        new DefaultAsyncTransformationEngine<>(transformer, graph.nodes().size())",
                "+            .computeUnchecked((Long) 1L));",
                "+  }",
                "+}"
            ],
            "changed_files": [
                "src/com/facebook/buck/graph/transformation/AsyncTransformationEngine.java",
                "src/com/facebook/buck/graph/transformation/AsyncTransformer.java",
                "src/com/facebook/buck/graph/transformation/BUCK",
                "src/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngine.java",
                "src/com/facebook/buck/graph/transformation/DefaultTransformationEnvironment.java",
                "src/com/facebook/buck/graph/transformation/TransformationEnvironment.java",
                "test/com/facebook/buck/graph/transformation/BUCK",
                "test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: execution",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e6bdf6e711632959d6f4de7ec8892f6fce6f2b5d",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522693488,
            "hunks": 4,
            "message": "Release command semaphore earlier Summary: While semaphore seems to release as soon as job is over, it is actually not doing good job here because sometimes deinitialization of some stateful objects (like cache executor service) might take long for some reason. If user terminates a client with Ctrl+C and restarts the command, buck outputs exit code 2 making user wait and waste nerve cells. It is possibly safe to release semaphore even earlier, before initialization of different wrappers complete (but after all event in even bus are processed). The solution is ugly as it uses CloseableWrapper over CloseableWrapper. I consider this solution temporary until a bigger refactoring takes place. Reviewed By: ttsugriy fbshipit-source-id: e87fe04",
            "diff": [
                "diff --git a/programs/buck_tool.py b/programs/buck_tool.py",
                "index 327bc075ef..929b03c3be 100644",
                "--- a/programs/buck_tool.py",
                "+++ b/programs/buck_tool.py",
                "@@ -312,3 +312,3 @@ class BuckTool(object):",
                "                         busy_diagnostic_displayed = True",
                "-                    time.sleep(1)",
                "+                    time.sleep(3)",
                "         return exit_code",
                "diff --git a/src/com/facebook/buck/cli/Main.java b/src/com/facebook/buck/cli/Main.java",
                "index 87232b93d2..778dd79104 100644",
                "--- a/src/com/facebook/buck/cli/Main.java",
                "+++ b/src/com/facebook/buck/cli/Main.java",
                "@@ -584,58 +584,61 @@ public final class Main {",
                "-    // statically configure Buck logging environment based on Buck config, usually buck-x.log files",
                "-    setupLogging(commandMode, command, args);",
                "+    // If this command is not read only, acquire the command semaphore to become the only executing",
                "+    // read/write command. Early out will also help to not rotate log on each BUSY status which",
                "+    // happens in setupLogging().",
                "+    boolean shouldCleanUpTrash = false;",
                "+    try (CloseableWrapper<Semaphore> semaphore = getSemaphoreWrapper(command)) {",
                "+      if (!command.isReadOnly() && semaphore == null) {",
                "+        LOG.warn(\"Buck server was busy executing a command. Maybe retrying later will help.\");",
                "+        return ExitCode.BUSY;",
                "+      }",
                "-    if (moduleManager == null) {",
                "-      pluginManager = BuckPluginManagerFactory.createPluginManager();",
                "-      moduleManager = new DefaultBuckModuleManager(pluginManager, new BuckModuleJarHashProvider());",
                "-    }",
                "+      if (moduleManager == null) {",
                "+        pluginManager = BuckPluginManagerFactory.createPluginManager();",
                "+        moduleManager =",
                "+            new DefaultBuckModuleManager(pluginManager, new BuckModuleJarHashProvider());",
                "+      }",
                "-    Config config = setupDefaultConfig(rootCellMapping, command);",
                "+      // statically configure Buck logging environment based on Buck config, usually buck-x.log",
                "+      // files",
                "+      setupLogging(commandMode, command, args);",
                "-    ProjectFilesystemFactory projectFilesystemFactory = new DefaultProjectFilesystemFactory();",
                "-    ProjectFilesystem filesystem =",
                "-        projectFilesystemFactory.createProjectFilesystem(canonicalRootPath, config);",
                "+      Config config = setupDefaultConfig(rootCellMapping, command);",
                "-    DefaultCellPathResolver cellPathResolver =",
                "-        DefaultCellPathResolver.of(filesystem.getRootPath(), config);",
                "-    BuckConfig buckConfig =",
                "-        new BuckConfig(",
                "-            config, filesystem, architecture, platform, clientEnvironment, cellPathResolver);",
                "-    ImmutableSet<Path> projectWatchList =",
                "-        getProjectWatchList(canonicalRootPath, buckConfig, cellPathResolver);",
                "+      ProjectFilesystemFactory projectFilesystemFactory = new DefaultProjectFilesystemFactory();",
                "+      ProjectFilesystem filesystem =",
                "+          projectFilesystemFactory.createProjectFilesystem(canonicalRootPath, config);",
                "-    checkJavaSpecificationVersions(buckConfig);",
                "+      DefaultCellPathResolver cellPathResolver =",
                "+          DefaultCellPathResolver.of(filesystem.getRootPath(), config);",
                "+      BuckConfig buckConfig =",
                "+          new BuckConfig(",
                "+              config, filesystem, architecture, platform, clientEnvironment, cellPathResolver);",
                "+      ImmutableSet<Path> projectWatchList =",
                "+          getProjectWatchList(canonicalRootPath, buckConfig, cellPathResolver);",
                "-    Verbosity verbosity = VerbosityParser.parse(args);",
                "+      checkJavaSpecificationVersions(buckConfig);",
                "-    // Setup the console.",
                "-    console = makeCustomConsole(context, verbosity, buckConfig);",
                "+      Verbosity verbosity = VerbosityParser.parse(args);",
                "-    DistBuildConfig distBuildConfig = new DistBuildConfig(buckConfig);",
                "-    boolean isUsingDistributedBuild = false;",
                "+      // Setup the console.",
                "+      console = makeCustomConsole(context, verbosity, buckConfig);",
                "-    // Automatically use distributed build for supported repositories and users.",
                "-    if (command.subcommand != null && command.subcommand instanceof BuildCommand) {",
                "-      BuildCommand subcommand = (BuildCommand) command.subcommand;",
                "-      isUsingDistributedBuild = subcommand.isUsingDistributedBuild();",
                "-      if (!isUsingDistributedBuild && distBuildConfig.shouldUseDistributedBuild(buildId)) {",
                "-        isUsingDistributedBuild = subcommand.tryConvertingToStampede(distBuildConfig);",
                "-      }",
                "-    }",
                "+      DistBuildConfig distBuildConfig = new DistBuildConfig(buckConfig);",
                "+      boolean isUsingDistributedBuild = false;",
                "-    // Switch to async file logging, if configured. A few log samples will have already gone",
                "-    // via the regular file logger, but that's OK.",
                "-    boolean isDistBuildCommand =",
                "-        command.subcommand != null && command.subcommand instanceof DistBuildCommand;",
                "-    if (isDistBuildCommand) {",
                "-      LogConfig.setUseAsyncFileLogging(distBuildConfig.isAsyncLoggingEnabled());",
                "-    }",
                "+      // Automatically use distributed build for supported repositories and users.",
                "+      if (command.subcommand != null && command.subcommand instanceof BuildCommand) {",
                "+        BuildCommand subcommand = (BuildCommand) command.subcommand;",
                "+        isUsingDistributedBuild = subcommand.isUsingDistributedBuild();",
                "+        if (!isUsingDistributedBuild && distBuildConfig.shouldUseDistributedBuild(buildId)) {",
                "+          isUsingDistributedBuild = subcommand.tryConvertingToStampede(distBuildConfig);",
                "+        }",
                "+      }",
                "-    // No more early outs: if this command is not read only, acquire the command semaphore to",
                "-    // become the only executing read/write command.",
                "-    boolean shouldCleanUpTrash = false;",
                "-    try (CloseableWrapper<Semaphore> semaphore = getSemaphoreWrapper(command)) {",
                "-      if (!command.isReadOnly() && semaphore == null) {",
                "-        LOG.warn(\"Buck server was busy executing a command. Maybe retrying later will help.\");",
                "-        return ExitCode.BUSY;",
                "+      // Switch to async file logging, if configured. A few log samples will have already gone",
                "+      // via the regular file logger, but that's OK.",
                "+      boolean isDistBuildCommand =",
                "+          command.subcommand != null && command.subcommand instanceof DistBuildCommand;",
                "+      if (isDistBuildCommand) {",
                "+        LogConfig.setUseAsyncFileLogging(distBuildConfig.isAsyncLoggingEnabled());",
                "       }",
                "@@ -949,2 +952,16 @@ public final class Main {",
                "+            // Once command completes it should be safe to not wait for executors and other stateful",
                "+            // objects to terminate and release semaphore right away. It will help to retry",
                "+            // command faster if user terminated with Ctrl+C.",
                "+            // Ideally, we should come up with a better lifecycle management strategy for the",
                "+            // semaphore object",
                "+            CloseableWrapper<Optional<CloseableWrapper<Semaphore>>> semaphoreCloser =",
                "+                CloseableWrapper.of(",
                "+                    Optional.ofNullable(semaphore),",
                "+                    s -> {",
                "+                      if (s.isPresent()) {",
                "+                        s.get().close();",
                "+                      }",
                "+                    });",
                "+",
                "             // This will get executed first once it gets out of try block and just wait for",
                "@@ -1175,8 +1192,2 @@ public final class Main {",
                "-          // release global command semaphore earlier to allow other waiting command to execute",
                "-          // close() is idempotent so it is ok to call it now",
                "-          if (semaphore != null) {",
                "-            semaphore.close();",
                "-          }",
                "-",
                "           if (daemon.isPresent() && shouldCleanUpTrash) {"
            ],
            "changed_files": [
                "programs/buck_tool.py",
                "src/com/facebook/buck/cli/Main.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, object, command, state, cache",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "60cf7343d5b5451ee465b8164a01a60ade02cadd",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521464935,
            "hunks": 10,
            "message": "Config flag for cache synchronization margin Reviewed By: ruibm fbshipit-source-id: cece2a6",
            "diff": [
                "diff --git a/src/com/facebook/buck/distributed/DistBuildConfig.java b/src/com/facebook/buck/distributed/DistBuildConfig.java",
                "index 61d344edc1..189b97e576 100644",
                "--- a/src/com/facebook/buck/distributed/DistBuildConfig.java",
                "+++ b/src/com/facebook/buck/distributed/DistBuildConfig.java",
                "@@ -171,2 +171,6 @@ public class DistBuildConfig {",
                "+  private static final String CACHE_SYNCHRONIZATION_SAFETY_MARGIN_MILLIS =",
                "+      \"cache_synchronization_safety_margin_millis\";",
                "+  private static final int DEFAULT_CACHE_SYNCHRONIZATION_SAFETY_MARGIN_MILLIS = 5000;",
                "+",
                "   private final SlbBuckConfig frontendConfig;",
                "@@ -434,2 +438,8 @@ public class DistBuildConfig {",
                "+  public int getCacheSynchronizationSafetyMarginMillis() {",
                "+    return buckConfig",
                "+        .getInteger(STAMPEDE_SECTION, CACHE_SYNCHRONIZATION_SAFETY_MARGIN_MILLIS)",
                "+        .orElse(DEFAULT_CACHE_SYNCHRONIZATION_SAFETY_MARGIN_MILLIS);",
                "+  }",
                "+",
                "   public OkHttpClient createOkHttpClient() {",
                "diff --git a/src/com/facebook/buck/distributed/build_client/BuildPhase.java b/src/com/facebook/buck/distributed/build_client/BuildPhase.java",
                "index 30db49a8d1..83b5a24dff 100644",
                "--- a/src/com/facebook/buck/distributed/build_client/BuildPhase.java",
                "+++ b/src/com/facebook/buck/distributed/build_client/BuildPhase.java",
                "@@ -107,3 +107,2 @@ public class BuildPhase {",
                "   private static final int WAIT_FOR_ALL_BUILD_EVENTS_TIMEOUT_MILLIS = 5000;",
                "-  private static final int CACHE_SYNCHRONIZATION_SAFETY_MARGIN_MILLIS = 5000;",
                "@@ -157,3 +156,6 @@ public class BuildPhase {",
                "         new BuildRuleEventManager(",
                "-            remoteBuildRuleCompletionNotifier, clock, CACHE_SYNCHRONIZATION_SAFETY_MARGIN_MILLIS);",
                "+            remoteBuildRuleCompletionNotifier,",
                "+            clock,",
                "+            new DistBuildConfig(buildExecutorArgs.getBuckConfig())",
                "+                .getCacheSynchronizationSafetyMarginMillis());",
                "   }",
                "diff --git a/test/com/facebook/buck/distributed/build_client/BuildPhaseTest.java b/test/com/facebook/buck/distributed/build_client/BuildPhaseTest.java",
                "index ca5bfd0a26..0a0564cc8c 100644",
                "--- a/test/com/facebook/buck/distributed/build_client/BuildPhaseTest.java",
                "+++ b/test/com/facebook/buck/distributed/build_client/BuildPhaseTest.java",
                "@@ -127,2 +127,3 @@ public class BuildPhaseTest {",
                "   private BuildPhase buildPhase;",
                "+  private BuildExecutorArgs executorArgs;",
                "@@ -142,2 +143,26 @@ public class BuildPhaseTest {",
                "     consoleEventsDispatcher = new ConsoleEventsDispatcher(mockEventBus);",
                "+    BuckConfig buckConfig =",
                "+        FakeBuckConfig.builder()",
                "+            .setSections(",
                "+                ImmutableMap.of(\"stampede\", ImmutableMap.of(\"minion_queue\", MINION_QUEUE_NAME)))",
                "+            .build();",
                "+    executorArgs =",
                "+        BuildExecutorArgs.builder()",
                "+            .setArtifactCacheFactory(new NoopArtifactCache.NoopArtifactCacheFactory())",
                "+            .setBuckEventBus(mockEventBus)",
                "+            .setBuildInfoStoreManager(new BuildInfoStoreManager())",
                "+            .setClock(new DefaultClock())",
                "+            .setConsole(new TestConsole())",
                "+            .setPlatform(Platform.detect())",
                "+            .setProjectFilesystemFactory(new FakeProjectFilesystemFactory())",
                "+            .setRuleKeyConfiguration(",
                "+                ConfigRuleKeyConfigurationFactory.create(",
                "+                    FakeBuckConfig.builder().build(),",
                "+                    BuckPluginManagerFactory.createPluginManager()))",
                "+            .setRootCell(",
                "+                new TestCellBuilder()",
                "+                    .setFilesystem(new FakeProjectFilesystem())",
                "+                    .setBuckConfig(buckConfig)",
                "+                    .build())",
                "+            .build();",
                "   }",
                "@@ -145,3 +170,2 @@ public class BuildPhaseTest {",
                "   private void createBuildPhase(",
                "-      BuildExecutorArgs executorArgs,",
                "       ImmutableSet<BuildTarget> topLevelTargets,",
                "@@ -165,3 +189,3 @@ public class BuildPhaseTest {",
                "   private void createBuildPhase() {",
                "-    createBuildPhase(null, ImmutableSet.of(), null, Optional.empty());",
                "+    createBuildPhase(ImmutableSet.of(), null, Optional.empty());",
                "   }",
                "@@ -181,28 +205,2 @@ public class BuildPhaseTest {",
                "     // Create the full BuildPhase for local coordinator mode.",
                "-    BuckConfig buckConfig =",
                "-        FakeBuckConfig.builder()",
                "-            .setSections(",
                "-                ImmutableMap.of(\"stampede\", ImmutableMap.of(\"minion_queue\", MINION_QUEUE_NAME)))",
                "-            .build();",
                "-",
                "-    BuildExecutorArgs executorArgs =",
                "-        BuildExecutorArgs.builder()",
                "-            .setArtifactCacheFactory(new NoopArtifactCache.NoopArtifactCacheFactory())",
                "-            .setBuckEventBus(mockEventBus)",
                "-            .setBuildInfoStoreManager(new BuildInfoStoreManager())",
                "-            .setClock(new DefaultClock())",
                "-            .setConsole(new TestConsole())",
                "-            .setPlatform(Platform.detect())",
                "-            .setProjectFilesystemFactory(new FakeProjectFilesystemFactory())",
                "-            .setRuleKeyConfiguration(",
                "-                ConfigRuleKeyConfigurationFactory.create(",
                "-                    FakeBuckConfig.builder().build(),",
                "-                    BuckPluginManagerFactory.createPluginManager()))",
                "-            .setRootCell(",
                "-                new TestCellBuilder()",
                "-                    .setFilesystem(new FakeProjectFilesystem())",
                "-                    .setBuckConfig(buckConfig)",
                "-                    .build())",
                "-            .build();",
                "-",
                "     BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createSimpleResolver();",
                "@@ -221,6 +219,3 @@ public class BuildPhaseTest {",
                "     createBuildPhase(",
                "-        executorArgs,",
                "-        targets,",
                "-        graphs,",
                "-        Optional.of(new LocalCachingBuildEngineDelegate(fileHashCache)));",
                "+        targets, graphs, Optional.of(new LocalCachingBuildEngineDelegate(fileHashCache)));"
            ],
            "changed_files": [
                "src/com/facebook/buck/distributed/DistBuildConfig.java",
                "src/com/facebook/buck/distributed/build_client/BuildPhase.java",
                "test/com/facebook/buck/distributed/build_client/BuildPhaseTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: cache",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1a81718b062ff9cf2522ae84364ee88067ba942c",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522980944,
            "hunks": 7,
            "message": "Make dx.max_threads parameter to do what the name says Summary: dx.max_threads parameter is misleading. While the name implies that it should limit the number of threads for in-proc dexer (Android tool that converts Java bytecode to Android-specific bytecode to run on Android platform), in fact it just sets the number of threads. So this change will have max_threads to actually cap the number of threads detected by heuristics. A separate parameter `threads` allows to set a fixed number of threads following the previous behavior of `max_threads`. This is potentially a breaking change, however I believe it will not cause any serious casualties. With this change the number of dexing threads can only decrease and fallback to the value inferred from hardware profile, which is in most cases a good thing for both performance and memory. Reviewed By: bobyangyf fbshipit-source-id: a673ba2",
            "diff": [
                "diff --git a/docs/concept/buckconfig.soy b/docs/concept/buckconfig.soy",
                "index edd1b01730..dd93bd2b37 100644",
                "--- a/docs/concept/buckconfig.soy",
                "+++ b/docs/concept/buckconfig.soy",
                "@@ -2520,2 +2520,12 @@ cxx_library(",
                "+{call buckconfig.entry}",
                "+  {param section: 'dx' /}",
                "+  {param name: 'threads' /}",
                "+  {param example_value: '4' /}",
                "+  {param description}",
                "+    Fixed number of threads to run dexing steps with. If not specified, the optimal number is",
                "+    inferred from hardware specification of running machine.",
                "+  {/param}",
                "+{/call}",
                "+",
                " {call buckconfig.entry}",
                "@@ -2525,4 +2535,7 @@ cxx_library(",
                "   {param description}",
                "-    The number of thread that will run the dexing steps. Since the dexing steps can use a lot of",
                "-    memory, it might be useful to set this to a lower value to avoid out-of-memory errors.",
                "+    The maximum number of threads allowed to run the dexing steps with. Since the dexing steps can",
                "+    use a lot of memory, it might be useful to set this to a lower value to avoid out-of-memory",
                "+    on systems that have a lot of CPU cores. This parameter is mostly useful when",
                "+    {call buckconfig.threads /} is not specified and the number of threads is obtained based on",
                "+    hardware.",
                "   {/param}",
                "diff --git a/src/com/facebook/buck/android/DxConfig.java b/src/com/facebook/buck/android/DxConfig.java",
                "index 2699a54182..5d23021dbe 100644",
                "--- a/src/com/facebook/buck/android/DxConfig.java",
                "+++ b/src/com/facebook/buck/android/DxConfig.java",
                "@@ -34,3 +34,12 @@ public class DxConfig {",
                "-  /** @return The dx thread count. */",
                "+  /**",
                "+   * @return The dx thread count. If it is not specified, number of threads wil be determined by",
                "+   *     hardware capabilities of running host and capped with {@code max_threads} parameter, if",
                "+   *     specified",
                "+   */",
                "+  public Optional<Integer> getDxThreadCount() {",
                "+    return delegate.getInteger(\"dx\", \"threads\");",
                "+  }",
                "+",
                "+  /** @return The dx maximum allowed thread count. */",
                "   public Optional<Integer> getDxMaxThreadCount() {",
                "diff --git a/src/com/facebook/buck/android/SmartDexingStep.java b/src/com/facebook/buck/android/SmartDexingStep.java",
                "index a97c059647..6e6ef9411a 100644",
                "--- a/src/com/facebook/buck/android/SmartDexingStep.java",
                "+++ b/src/com/facebook/buck/android/SmartDexingStep.java",
                "@@ -151,4 +151,18 @@ public class SmartDexingStep implements Step {",
                "+  /**",
                "+   * @return Optimal (in terms of both memory and performance) number of parallel threads to run",
                "+   *     dexer. The implementation uses running machine hardware characteristics to determine this.",
                "+   */",
                "   public static int determineOptimalThreadCount() {",
                "-    return Runtime.getRuntime().availableProcessors();",
                "+    // Most processors these days have hyperthreading that multiplies the amount of logical",
                "+    // processors reported by Java. So in case of 1 CPU, 2 physical cores with hyperthreading, the",
                "+    // call to Runtime.getRuntime().availableProcessors() would return 1*2*2 = 4, assuming 2 hyper",
                "+    // threads per core, which is common but in fact may be more than that.",
                "+    // Using hyper threads does not help to dex faster, but consumes a lot of memory, so it makes",
                "+    // sense to base heuristics on the number of physical cores.",
                "+    // Unfortunately there is no good way to detect the number of physical cores in pure Java,",
                "+    // so we just divide the total number of logical processors by two to cover the majority of",
                "+    // cases.",
                "+    // TODO(buck_team): Implement cross-platform hardware capabilities detection and use it here",
                "+    return Math.max(Runtime.getRuntime().availableProcessors() / 2, 1);",
                "   }",
                "diff --git a/src/com/facebook/buck/android/toolchain/impl/DxToolchainFactory.java b/src/com/facebook/buck/android/toolchain/impl/DxToolchainFactory.java",
                "index 17ccd2cad6..683fbd8811 100644",
                "--- a/src/com/facebook/buck/android/toolchain/impl/DxToolchainFactory.java",
                "+++ b/src/com/facebook/buck/android/toolchain/impl/DxToolchainFactory.java",
                "@@ -43,3 +43,3 @@ public class DxToolchainFactory implements ToolchainFactory<DxToolchain> {",
                "     if (javaConfig.getDxThreadCount().isPresent()) {",
                "-      LOG.warn(\"java.dx_threads has been deprecated. Use dx.max_threads instead\");",
                "+      LOG.warn(\"java.dx_threads has been deprecated. Use dx.threads instead\");",
                "     }",
                "@@ -51,8 +51,10 @@ public class DxToolchainFactory implements ToolchainFactory<DxToolchain> {",
                "             Executors.newFixedThreadPool(",
                "-                dxConfig",
                "-                    .getDxMaxThreadCount()",
                "-                    .orElse(",
                "-                        javaConfig",
                "-                            .getDxThreadCount()",
                "-                            .orElse(SmartDexingStep.determineOptimalThreadCount())),",
                "+                Math.min(",
                "+                    dxConfig",
                "+                        .getDxThreadCount()",
                "+                        .orElse(",
                "+                            javaConfig",
                "+                                .getDxThreadCount()",
                "+                                .orElse(SmartDexingStep.determineOptimalThreadCount())),",
                "+                    dxConfig.getDxMaxThreadCount().orElse(Integer.MAX_VALUE)),",
                "                 new CommandThreadFactory(\"SmartDexing\")));"
            ],
            "changed_files": [
                "docs/concept/buckconfig.soy",
                "src/com/facebook/buck/android/DxConfig.java",
                "src/com/facebook/buck/android/SmartDexingStep.java",
                "src/com/facebook/buck/android/toolchain/impl/DxToolchainFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: java, code, lead",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4c15338a07e14cfcea77bcd36a6f90abb9a3c0fb",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521715034,
            "hunks": 54,
            "message": "Fix stdout/stderr log downloading that does not preserve last sequence number. Summary: [stampede] Fix stdout/stderr log downloading that does not preserve last sequence number. Test Plan: ci Reviewed By: aiked fbshipit-source-id: f2bf49a",
            "diff": [
                "diff --git a/src-gen/com/facebook/buck/distributed/thrift/BuildSlaveInfo.java b/src-gen/com/facebook/buck/distributed/thrift/BuildSlaveInfo.java",
                "index 65d89c735e..9e11994bf0 100644",
                "--- a/src-gen/com/facebook/buck/distributed/thrift/BuildSlaveInfo.java",
                "+++ b/src-gen/com/facebook/buck/distributed/thrift/BuildSlaveInfo.java",
                "@@ -15,6 +15,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "   private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(\"hostname\", org.apache.thrift.protocol.TType.STRING, (short)2);",
                "-  private static final org.apache.thrift.protocol.TField STD_OUT_CURRENT_BATCH_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField(\"stdOutCurrentBatchNumber\", org.apache.thrift.protocol.TType.I32, (short)4);",
                "-  private static final org.apache.thrift.protocol.TField STD_OUT_CURRENT_BATCH_LINE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField(\"stdOutCurrentBatchLineCount\", org.apache.thrift.protocol.TType.I32, (short)5);",
                "-  private static final org.apache.thrift.protocol.TField STD_ERR_CURRENT_BATCH_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField(\"stdErrCurrentBatchNumber\", org.apache.thrift.protocol.TType.I32, (short)6);",
                "-  private static final org.apache.thrift.protocol.TField STD_ERR_CURRENT_BATCH_LINE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField(\"stdErrCurrentBatchLineCount\", org.apache.thrift.protocol.TType.I32, (short)7);",
                "   private static final org.apache.thrift.protocol.TField LOG_DIR_ZIP_WRITTEN_FIELD_DESC = new org.apache.thrift.protocol.TField(\"logDirZipWritten\", org.apache.thrift.protocol.TType.BOOL, (short)8);",
                "@@ -27,6 +23,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "   public java.lang.String hostname; // optional",
                "-  public int stdOutCurrentBatchNumber; // optional",
                "-  public int stdOutCurrentBatchLineCount; // optional",
                "-  public int stdErrCurrentBatchNumber; // optional",
                "-  public int stdErrCurrentBatchLineCount; // optional",
                "   public boolean logDirZipWritten; // optional",
                "@@ -42,6 +34,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "     HOSTNAME((short)2, \"hostname\"),",
                "-    STD_OUT_CURRENT_BATCH_NUMBER((short)4, \"stdOutCurrentBatchNumber\"),",
                "-    STD_OUT_CURRENT_BATCH_LINE_COUNT((short)5, \"stdOutCurrentBatchLineCount\"),",
                "-    STD_ERR_CURRENT_BATCH_NUMBER((short)6, \"stdErrCurrentBatchNumber\"),",
                "-    STD_ERR_CURRENT_BATCH_LINE_COUNT((short)7, \"stdErrCurrentBatchLineCount\"),",
                "     LOG_DIR_ZIP_WRITTEN((short)8, \"logDirZipWritten\"),",
                "@@ -70,10 +58,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "           return HOSTNAME;",
                "-        case 4: // STD_OUT_CURRENT_BATCH_NUMBER",
                "-          return STD_OUT_CURRENT_BATCH_NUMBER;",
                "-        case 5: // STD_OUT_CURRENT_BATCH_LINE_COUNT",
                "-          return STD_OUT_CURRENT_BATCH_LINE_COUNT;",
                "-        case 6: // STD_ERR_CURRENT_BATCH_NUMBER",
                "-          return STD_ERR_CURRENT_BATCH_NUMBER;",
                "-        case 7: // STD_ERR_CURRENT_BATCH_LINE_COUNT",
                "-          return STD_ERR_CURRENT_BATCH_LINE_COUNT;",
                "         case 8: // LOG_DIR_ZIP_WRITTEN",
                "@@ -122,9 +102,5 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "   // isset id assignments",
                "-  private static final int __STDOUTCURRENTBATCHNUMBER_ISSET_ID = 0;",
                "-  private static final int __STDOUTCURRENTBATCHLINECOUNT_ISSET_ID = 1;",
                "-  private static final int __STDERRCURRENTBATCHNUMBER_ISSET_ID = 2;",
                "-  private static final int __STDERRCURRENTBATCHLINECOUNT_ISSET_ID = 3;",
                "-  private static final int __LOGDIRZIPWRITTEN_ISSET_ID = 4;",
                "+  private static final int __LOGDIRZIPWRITTEN_ISSET_ID = 0;",
                "   private byte __isset_bitfield = 0;",
                "-  private static final _Fields optionals[] = {_Fields.BUILD_SLAVE_RUN_ID,_Fields.HOSTNAME,_Fields.STD_OUT_CURRENT_BATCH_NUMBER,_Fields.STD_OUT_CURRENT_BATCH_LINE_COUNT,_Fields.STD_ERR_CURRENT_BATCH_NUMBER,_Fields.STD_ERR_CURRENT_BATCH_LINE_COUNT,_Fields.LOG_DIR_ZIP_WRITTEN,_Fields.STATUS};",
                "+  private static final _Fields optionals[] = {_Fields.BUILD_SLAVE_RUN_ID,_Fields.HOSTNAME,_Fields.LOG_DIR_ZIP_WRITTEN,_Fields.STATUS};",
                "   public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;",
                "@@ -136,10 +112,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));",
                "-    tmpMap.put(_Fields.STD_OUT_CURRENT_BATCH_NUMBER, new org.apache.thrift.meta_data.FieldMetaData(\"stdOutCurrentBatchNumber\", org.apache.thrift.TFieldRequirementType.OPTIONAL, ",
                "-        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));",
                "-    tmpMap.put(_Fields.STD_OUT_CURRENT_BATCH_LINE_COUNT, new org.apache.thrift.meta_data.FieldMetaData(\"stdOutCurrentBatchLineCount\", org.apache.thrift.TFieldRequirementType.OPTIONAL, ",
                "-        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));",
                "-    tmpMap.put(_Fields.STD_ERR_CURRENT_BATCH_NUMBER, new org.apache.thrift.meta_data.FieldMetaData(\"stdErrCurrentBatchNumber\", org.apache.thrift.TFieldRequirementType.OPTIONAL, ",
                "-        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));",
                "-    tmpMap.put(_Fields.STD_ERR_CURRENT_BATCH_LINE_COUNT, new org.apache.thrift.meta_data.FieldMetaData(\"stdErrCurrentBatchLineCount\", org.apache.thrift.TFieldRequirementType.OPTIONAL, ",
                "-        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));",
                "     tmpMap.put(_Fields.LOG_DIR_ZIP_WRITTEN, new org.apache.thrift.meta_data.FieldMetaData(\"logDirZipWritten\", org.apache.thrift.TFieldRequirementType.OPTIONAL, ",
                "@@ -168,6 +136,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "     }",
                "-    this.stdOutCurrentBatchNumber = other.stdOutCurrentBatchNumber;",
                "-    this.stdOutCurrentBatchLineCount = other.stdOutCurrentBatchLineCount;",
                "-    this.stdErrCurrentBatchNumber = other.stdErrCurrentBatchNumber;",
                "-    this.stdErrCurrentBatchLineCount = other.stdErrCurrentBatchLineCount;",
                "     this.logDirZipWritten = other.logDirZipWritten;",
                "@@ -186,10 +150,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "     this.hostname = null;",
                "-    setStdOutCurrentBatchNumberIsSet(false);",
                "-    this.stdOutCurrentBatchNumber = 0;",
                "-    setStdOutCurrentBatchLineCountIsSet(false);",
                "-    this.stdOutCurrentBatchLineCount = 0;",
                "-    setStdErrCurrentBatchNumberIsSet(false);",
                "-    this.stdErrCurrentBatchNumber = 0;",
                "-    setStdErrCurrentBatchLineCountIsSet(false);",
                "-    this.stdErrCurrentBatchLineCount = 0;",
                "     setLogDirZipWrittenIsSet(false);",
                "@@ -248,94 +204,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "-  public int getStdOutCurrentBatchNumber() {",
                "-    return this.stdOutCurrentBatchNumber;",
                "-  }",
                "-",
                "-  public BuildSlaveInfo setStdOutCurrentBatchNumber(int stdOutCurrentBatchNumber) {",
                "-    this.stdOutCurrentBatchNumber = stdOutCurrentBatchNumber;",
                "-    setStdOutCurrentBatchNumberIsSet(true);",
                "-    return this;",
                "-  }",
                "-",
                "-  public void unsetStdOutCurrentBatchNumber() {",
                "-    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STDOUTCURRENTBATCHNUMBER_ISSET_ID);",
                "-  }",
                "-",
                "-  /** Returns true if field stdOutCurrentBatchNumber is set (has been assigned a value) and false otherwise */",
                "-  public boolean isSetStdOutCurrentBatchNumber() {",
                "-    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STDOUTCURRENTBATCHNUMBER_ISSET_ID);",
                "-  }",
                "-",
                "-  public void setStdOutCurrentBatchNumberIsSet(boolean value) {",
                "-    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STDOUTCURRENTBATCHNUMBER_ISSET_ID, value);",
                "-  }",
                "-",
                "-  public int getStdOutCurrentBatchLineCount() {",
                "-    return this.stdOutCurrentBatchLineCount;",
                "-  }",
                "-",
                "-  public BuildSlaveInfo setStdOutCurrentBatchLineCount(int stdOutCurrentBatchLineCount) {",
                "-    this.stdOutCurrentBatchLineCount = stdOutCurrentBatchLineCount;",
                "-    setStdOutCurrentBatchLineCountIsSet(true);",
                "-    return this;",
                "-  }",
                "-",
                "-  public void unsetStdOutCurrentBatchLineCount() {",
                "-    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STDOUTCURRENTBATCHLINECOUNT_ISSET_ID);",
                "-  }",
                "-",
                "-  /** Returns true if field stdOutCurrentBatchLineCount is set (has been assigned a value) and false otherwise */",
                "-  public boolean isSetStdOutCurrentBatchLineCount() {",
                "-    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STDOUTCURRENTBATCHLINECOUNT_ISSET_ID);",
                "-  }",
                "-",
                "-  public void setStdOutCurrentBatchLineCountIsSet(boolean value) {",
                "-    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STDOUTCURRENTBATCHLINECOUNT_ISSET_ID, value);",
                "-  }",
                "-",
                "-  public int getStdErrCurrentBatchNumber() {",
                "-    return this.stdErrCurrentBatchNumber;",
                "-  }",
                "-",
                "-  public BuildSlaveInfo setStdErrCurrentBatchNumber(int stdErrCurrentBatchNumber) {",
                "-    this.stdErrCurrentBatchNumber = stdErrCurrentBatchNumber;",
                "-    setStdErrCurrentBatchNumberIsSet(true);",
                "-    return this;",
                "-  }",
                "-",
                "-  public void unsetStdErrCurrentBatchNumber() {",
                "-    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STDERRCURRENTBATCHNUMBER_ISSET_ID);",
                "-  }",
                "-",
                "-  /** Returns true if field stdErrCurrentBatchNumber is set (has been assigned a value) and false otherwise */",
                "-  public boolean isSetStdErrCurrentBatchNumber() {",
                "-    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STDERRCURRENTBATCHNUMBER_ISSET_ID);",
                "-  }",
                "-",
                "-  public void setStdErrCurrentBatchNumberIsSet(boolean value) {",
                "-    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STDERRCURRENTBATCHNUMBER_ISSET_ID, value);",
                "-  }",
                "-",
                "-  public int getStdErrCurrentBatchLineCount() {",
                "-    return this.stdErrCurrentBatchLineCount;",
                "-  }",
                "-",
                "-  public BuildSlaveInfo setStdErrCurrentBatchLineCount(int stdErrCurrentBatchLineCount) {",
                "-    this.stdErrCurrentBatchLineCount = stdErrCurrentBatchLineCount;",
                "-    setStdErrCurrentBatchLineCountIsSet(true);",
                "-    return this;",
                "-  }",
                "-",
                "-  public void unsetStdErrCurrentBatchLineCount() {",
                "-    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STDERRCURRENTBATCHLINECOUNT_ISSET_ID);",
                "-  }",
                "-",
                "-  /** Returns true if field stdErrCurrentBatchLineCount is set (has been assigned a value) and false otherwise */",
                "-  public boolean isSetStdErrCurrentBatchLineCount() {",
                "-    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STDERRCURRENTBATCHLINECOUNT_ISSET_ID);",
                "-  }",
                "-",
                "-  public void setStdErrCurrentBatchLineCountIsSet(boolean value) {",
                "-    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STDERRCURRENTBATCHLINECOUNT_ISSET_ID, value);",
                "-  }",
                "-",
                "   public boolean isLogDirZipWritten() {",
                "@@ -413,34 +277,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "-    case STD_OUT_CURRENT_BATCH_NUMBER:",
                "-      if (value == null) {",
                "-        unsetStdOutCurrentBatchNumber();",
                "-      } else {",
                "-        setStdOutCurrentBatchNumber((java.lang.Integer)value);",
                "-      }",
                "-      break;",
                "-",
                "-    case STD_OUT_CURRENT_BATCH_LINE_COUNT:",
                "-      if (value == null) {",
                "-        unsetStdOutCurrentBatchLineCount();",
                "-      } else {",
                "-        setStdOutCurrentBatchLineCount((java.lang.Integer)value);",
                "-      }",
                "-      break;",
                "-",
                "-    case STD_ERR_CURRENT_BATCH_NUMBER:",
                "-      if (value == null) {",
                "-        unsetStdErrCurrentBatchNumber();",
                "-      } else {",
                "-        setStdErrCurrentBatchNumber((java.lang.Integer)value);",
                "-      }",
                "-      break;",
                "-",
                "-    case STD_ERR_CURRENT_BATCH_LINE_COUNT:",
                "-      if (value == null) {",
                "-        unsetStdErrCurrentBatchLineCount();",
                "-      } else {",
                "-        setStdErrCurrentBatchLineCount((java.lang.Integer)value);",
                "-      }",
                "-      break;",
                "-",
                "     case LOG_DIR_ZIP_WRITTEN:",
                "@@ -472,14 +304,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "-    case STD_OUT_CURRENT_BATCH_NUMBER:",
                "-      return getStdOutCurrentBatchNumber();",
                "-",
                "-    case STD_OUT_CURRENT_BATCH_LINE_COUNT:",
                "-      return getStdOutCurrentBatchLineCount();",
                "-",
                "-    case STD_ERR_CURRENT_BATCH_NUMBER:",
                "-      return getStdErrCurrentBatchNumber();",
                "-",
                "-    case STD_ERR_CURRENT_BATCH_LINE_COUNT:",
                "-      return getStdErrCurrentBatchLineCount();",
                "-",
                "     case LOG_DIR_ZIP_WRITTEN:",
                "@@ -505,10 +325,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "       return isSetHostname();",
                "-    case STD_OUT_CURRENT_BATCH_NUMBER:",
                "-      return isSetStdOutCurrentBatchNumber();",
                "-    case STD_OUT_CURRENT_BATCH_LINE_COUNT:",
                "-      return isSetStdOutCurrentBatchLineCount();",
                "-    case STD_ERR_CURRENT_BATCH_NUMBER:",
                "-      return isSetStdErrCurrentBatchNumber();",
                "-    case STD_ERR_CURRENT_BATCH_LINE_COUNT:",
                "-      return isSetStdErrCurrentBatchLineCount();",
                "     case LOG_DIR_ZIP_WRITTEN:",
                "@@ -554,38 +366,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "-    boolean this_present_stdOutCurrentBatchNumber = true && this.isSetStdOutCurrentBatchNumber();",
                "-    boolean that_present_stdOutCurrentBatchNumber = true && that.isSetStdOutCurrentBatchNumber();",
                "-    if (this_present_stdOutCurrentBatchNumber || that_present_stdOutCurrentBatchNumber) {",
                "-      if (!(this_present_stdOutCurrentBatchNumber && that_present_stdOutCurrentBatchNumber))",
                "-        return false;",
                "-      if (this.stdOutCurrentBatchNumber != that.stdOutCurrentBatchNumber)",
                "-        return false;",
                "-    }",
                "-",
                "-    boolean this_present_stdOutCurrentBatchLineCount = true && this.isSetStdOutCurrentBatchLineCount();",
                "-    boolean that_present_stdOutCurrentBatchLineCount = true && that.isSetStdOutCurrentBatchLineCount();",
                "-    if (this_present_stdOutCurrentBatchLineCount || that_present_stdOutCurrentBatchLineCount) {",
                "-      if (!(this_present_stdOutCurrentBatchLineCount && that_present_stdOutCurrentBatchLineCount))",
                "-        return false;",
                "-      if (this.stdOutCurrentBatchLineCount != that.stdOutCurrentBatchLineCount)",
                "-        return false;",
                "-    }",
                "-",
                "-    boolean this_present_stdErrCurrentBatchNumber = true && this.isSetStdErrCurrentBatchNumber();",
                "-    boolean that_present_stdErrCurrentBatchNumber = true && that.isSetStdErrCurrentBatchNumber();",
                "-    if (this_present_stdErrCurrentBatchNumber || that_present_stdErrCurrentBatchNumber) {",
                "-      if (!(this_present_stdErrCurrentBatchNumber && that_present_stdErrCurrentBatchNumber))",
                "-        return false;",
                "-      if (this.stdErrCurrentBatchNumber != that.stdErrCurrentBatchNumber)",
                "-        return false;",
                "-    }",
                "-",
                "-    boolean this_present_stdErrCurrentBatchLineCount = true && this.isSetStdErrCurrentBatchLineCount();",
                "-    boolean that_present_stdErrCurrentBatchLineCount = true && that.isSetStdErrCurrentBatchLineCount();",
                "-    if (this_present_stdErrCurrentBatchLineCount || that_present_stdErrCurrentBatchLineCount) {",
                "-      if (!(this_present_stdErrCurrentBatchLineCount && that_present_stdErrCurrentBatchLineCount))",
                "-        return false;",
                "-      if (this.stdErrCurrentBatchLineCount != that.stdErrCurrentBatchLineCount)",
                "-        return false;",
                "-    }",
                "-",
                "     boolean this_present_logDirZipWritten = true && this.isSetLogDirZipWritten();",
                "@@ -623,18 +399,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "-    hashCode = hashCode * 8191 + ((isSetStdOutCurrentBatchNumber()) ? 131071 : 524287);",
                "-    if (isSetStdOutCurrentBatchNumber())",
                "-      hashCode = hashCode * 8191 + stdOutCurrentBatchNumber;",
                "-",
                "-    hashCode = hashCode * 8191 + ((isSetStdOutCurrentBatchLineCount()) ? 131071 : 524287);",
                "-    if (isSetStdOutCurrentBatchLineCount())",
                "-      hashCode = hashCode * 8191 + stdOutCurrentBatchLineCount;",
                "-",
                "-    hashCode = hashCode * 8191 + ((isSetStdErrCurrentBatchNumber()) ? 131071 : 524287);",
                "-    if (isSetStdErrCurrentBatchNumber())",
                "-      hashCode = hashCode * 8191 + stdErrCurrentBatchNumber;",
                "-",
                "-    hashCode = hashCode * 8191 + ((isSetStdErrCurrentBatchLineCount()) ? 131071 : 524287);",
                "-    if (isSetStdErrCurrentBatchLineCount())",
                "-      hashCode = hashCode * 8191 + stdErrCurrentBatchLineCount;",
                "-",
                "     hashCode = hashCode * 8191 + ((isSetLogDirZipWritten()) ? 131071 : 524287);",
                "@@ -678,42 +438,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "     }",
                "-    lastComparison = java.lang.Boolean.valueOf(isSetStdOutCurrentBatchNumber()).compareTo(other.isSetStdOutCurrentBatchNumber());",
                "-    if (lastComparison != 0) {",
                "-      return lastComparison;",
                "-    }",
                "-    if (isSetStdOutCurrentBatchNumber()) {",
                "-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stdOutCurrentBatchNumber, other.stdOutCurrentBatchNumber);",
                "-      if (lastComparison != 0) {",
                "-        return lastComparison;",
                "-      }",
                "-    }",
                "-    lastComparison = java.lang.Boolean.valueOf(isSetStdOutCurrentBatchLineCount()).compareTo(other.isSetStdOutCurrentBatchLineCount());",
                "-    if (lastComparison != 0) {",
                "-      return lastComparison;",
                "-    }",
                "-    if (isSetStdOutCurrentBatchLineCount()) {",
                "-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stdOutCurrentBatchLineCount, other.stdOutCurrentBatchLineCount);",
                "-      if (lastComparison != 0) {",
                "-        return lastComparison;",
                "-      }",
                "-    }",
                "-    lastComparison = java.lang.Boolean.valueOf(isSetStdErrCurrentBatchNumber()).compareTo(other.isSetStdErrCurrentBatchNumber());",
                "-    if (lastComparison != 0) {",
                "-      return lastComparison;",
                "-    }",
                "-    if (isSetStdErrCurrentBatchNumber()) {",
                "-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stdErrCurrentBatchNumber, other.stdErrCurrentBatchNumber);",
                "-      if (lastComparison != 0) {",
                "-        return lastComparison;",
                "-      }",
                "-    }",
                "-    lastComparison = java.lang.Boolean.valueOf(isSetStdErrCurrentBatchLineCount()).compareTo(other.isSetStdErrCurrentBatchLineCount());",
                "-    if (lastComparison != 0) {",
                "-      return lastComparison;",
                "-    }",
                "-    if (isSetStdErrCurrentBatchLineCount()) {",
                "-      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stdErrCurrentBatchLineCount, other.stdErrCurrentBatchLineCount);",
                "-      if (lastComparison != 0) {",
                "-        return lastComparison;",
                "-      }",
                "-    }",
                "     lastComparison = java.lang.Boolean.valueOf(isSetLogDirZipWritten()).compareTo(other.isSetLogDirZipWritten());",
                "@@ -777,26 +497,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "     }",
                "-    if (isSetStdOutCurrentBatchNumber()) {",
                "-      if (!first) sb.append(\", \");",
                "-      sb.append(\"stdOutCurrentBatchNumber:\");",
                "-      sb.append(this.stdOutCurrentBatchNumber);",
                "-      first = false;",
                "-    }",
                "-    if (isSetStdOutCurrentBatchLineCount()) {",
                "-      if (!first) sb.append(\", \");",
                "-      sb.append(\"stdOutCurrentBatchLineCount:\");",
                "-      sb.append(this.stdOutCurrentBatchLineCount);",
                "-      first = false;",
                "-    }",
                "-    if (isSetStdErrCurrentBatchNumber()) {",
                "-      if (!first) sb.append(\", \");",
                "-      sb.append(\"stdErrCurrentBatchNumber:\");",
                "-      sb.append(this.stdErrCurrentBatchNumber);",
                "-      first = false;",
                "-    }",
                "-    if (isSetStdErrCurrentBatchLineCount()) {",
                "-      if (!first) sb.append(\", \");",
                "-      sb.append(\"stdErrCurrentBatchLineCount:\");",
                "-      sb.append(this.stdErrCurrentBatchLineCount);",
                "-      first = false;",
                "-    }",
                "     if (isSetLogDirZipWritten()) {",
                "@@ -882,34 +578,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "             break;",
                "-          case 4: // STD_OUT_CURRENT_BATCH_NUMBER",
                "-            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {",
                "-              struct.stdOutCurrentBatchNumber = iprot.readI32();",
                "-              struct.setStdOutCurrentBatchNumberIsSet(true);",
                "-            } else { ",
                "-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);",
                "-            }",
                "-            break;",
                "-          case 5: // STD_OUT_CURRENT_BATCH_LINE_COUNT",
                "-            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {",
                "-              struct.stdOutCurrentBatchLineCount = iprot.readI32();",
                "-              struct.setStdOutCurrentBatchLineCountIsSet(true);",
                "-            } else { ",
                "-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);",
                "-            }",
                "-            break;",
                "-          case 6: // STD_ERR_CURRENT_BATCH_NUMBER",
                "-            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {",
                "-              struct.stdErrCurrentBatchNumber = iprot.readI32();",
                "-              struct.setStdErrCurrentBatchNumberIsSet(true);",
                "-            } else { ",
                "-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);",
                "-            }",
                "-            break;",
                "-          case 7: // STD_ERR_CURRENT_BATCH_LINE_COUNT",
                "-            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {",
                "-              struct.stdErrCurrentBatchLineCount = iprot.readI32();",
                "-              struct.setStdErrCurrentBatchLineCountIsSet(true);",
                "-            } else { ",
                "-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);",
                "-            }",
                "-            break;",
                "           case 8: // LOG_DIR_ZIP_WRITTEN",
                "@@ -959,22 +623,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "       }",
                "-      if (struct.isSetStdOutCurrentBatchNumber()) {",
                "-        oprot.writeFieldBegin(STD_OUT_CURRENT_BATCH_NUMBER_FIELD_DESC);",
                "-        oprot.writeI32(struct.stdOutCurrentBatchNumber);",
                "-        oprot.writeFieldEnd();",
                "-      }",
                "-      if (struct.isSetStdOutCurrentBatchLineCount()) {",
                "-        oprot.writeFieldBegin(STD_OUT_CURRENT_BATCH_LINE_COUNT_FIELD_DESC);",
                "-        oprot.writeI32(struct.stdOutCurrentBatchLineCount);",
                "-        oprot.writeFieldEnd();",
                "-      }",
                "-      if (struct.isSetStdErrCurrentBatchNumber()) {",
                "-        oprot.writeFieldBegin(STD_ERR_CURRENT_BATCH_NUMBER_FIELD_DESC);",
                "-        oprot.writeI32(struct.stdErrCurrentBatchNumber);",
                "-        oprot.writeFieldEnd();",
                "-      }",
                "-      if (struct.isSetStdErrCurrentBatchLineCount()) {",
                "-        oprot.writeFieldBegin(STD_ERR_CURRENT_BATCH_LINE_COUNT_FIELD_DESC);",
                "-        oprot.writeI32(struct.stdErrCurrentBatchLineCount);",
                "-        oprot.writeFieldEnd();",
                "-      }",
                "       if (struct.isSetLogDirZipWritten()) {",
                "@@ -1015,21 +659,9 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "       }",
                "-      if (struct.isSetStdOutCurrentBatchNumber()) {",
                "-        optionals.set(2);",
                "-      }",
                "-      if (struct.isSetStdOutCurrentBatchLineCount()) {",
                "-        optionals.set(3);",
                "-      }",
                "-      if (struct.isSetStdErrCurrentBatchNumber()) {",
                "-        optionals.set(4);",
                "-      }",
                "-      if (struct.isSetStdErrCurrentBatchLineCount()) {",
                "-        optionals.set(5);",
                "-      }",
                "       if (struct.isSetLogDirZipWritten()) {",
                "-        optionals.set(6);",
                "+        optionals.set(2);",
                "       }",
                "       if (struct.isSetStatus()) {",
                "-        optionals.set(7);",
                "+        optionals.set(3);",
                "       }",
                "-      oprot.writeBitSet(optionals, 8);",
                "+      oprot.writeBitSet(optionals, 4);",
                "       if (struct.isSetBuildSlaveRunId()) {",
                "@@ -1040,14 +672,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "       }",
                "-      if (struct.isSetStdOutCurrentBatchNumber()) {",
                "-        oprot.writeI32(struct.stdOutCurrentBatchNumber);",
                "-      }",
                "-      if (struct.isSetStdOutCurrentBatchLineCount()) {",
                "-        oprot.writeI32(struct.stdOutCurrentBatchLineCount);",
                "-      }",
                "-      if (struct.isSetStdErrCurrentBatchNumber()) {",
                "-        oprot.writeI32(struct.stdErrCurrentBatchNumber);",
                "-      }",
                "-      if (struct.isSetStdErrCurrentBatchLineCount()) {",
                "-        oprot.writeI32(struct.stdErrCurrentBatchLineCount);",
                "-      }",
                "       if (struct.isSetLogDirZipWritten()) {",
                "@@ -1063,3 +683,3 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "       org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;",
                "-      java.util.BitSet incoming = iprot.readBitSet(8);",
                "+      java.util.BitSet incoming = iprot.readBitSet(4);",
                "       if (incoming.get(0)) {",
                "@@ -1074,18 +694,2 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "       if (incoming.get(2)) {",
                "-        struct.stdOutCurrentBatchNumber = iprot.readI32();",
                "-        struct.setStdOutCurrentBatchNumberIsSet(true);",
                "-      }",
                "-      if (incoming.get(3)) {",
                "-        struct.stdOutCurrentBatchLineCount = iprot.readI32();",
                "-        struct.setStdOutCurrentBatchLineCountIsSet(true);",
                "-      }",
                "-      if (incoming.get(4)) {",
                "-        struct.stdErrCurrentBatchNumber = iprot.readI32();",
                "-        struct.setStdErrCurrentBatchNumberIsSet(true);",
                "-      }",
                "-      if (incoming.get(5)) {",
                "-        struct.stdErrCurrentBatchLineCount = iprot.readI32();",
                "-        struct.setStdErrCurrentBatchLineCountIsSet(true);",
                "-      }",
                "-      if (incoming.get(6)) {",
                "         struct.logDirZipWritten = iprot.readBool();",
                "@@ -1093,3 +697,3 @@ public class BuildSlaveInfo implements org.apache.thrift.TBase<BuildSlaveInfo, B",
                "       }",
                "-      if (incoming.get(7)) {",
                "+      if (incoming.get(3)) {",
                "         struct.status = com.facebook.buck.distributed.thrift.BuildStatus.findByValue(iprot.readI32());",
                "diff --git a/src/com/facebook/buck/distributed/build_client/BuildPhase.java b/src/com/facebook/buck/distributed/build_client/BuildPhase.java",
                "index 83b5a24dff..ed17f379f5 100644",
                "--- a/src/com/facebook/buck/distributed/build_client/BuildPhase.java",
                "+++ b/src/com/facebook/buck/distributed/build_client/BuildPhase.java",
                "@@ -499,3 +499,3 @@ public class BuildPhase {",
                "     List<LogLineBatchRequest> newLogLineRequests =",
                "-        distBuildLogStateTracker.createRealtimeLogRequests(job.getBuildSlaves());",
                "+        distBuildLogStateTracker.createStreamLogRequests(job.getBuildSlaves());",
                "     if (newLogLineRequests.size() == 0) {",
                "diff --git a/src/com/facebook/buck/distributed/build_client/LogStateTracker.java b/src/com/facebook/buck/distributed/build_client/LogStateTracker.java",
                "index df82cf7c9b..598949a69e 100644",
                "--- a/src/com/facebook/buck/distributed/build_client/LogStateTracker.java",
                "+++ b/src/com/facebook/buck/distributed/build_client/LogStateTracker.java",
                "@@ -20,3 +20,2 @@ import com.facebook.buck.distributed.DistBuildUtil;",
                " import com.facebook.buck.distributed.thrift.BuildSlaveInfo;",
                "-import com.facebook.buck.distributed.thrift.BuildSlaveRunId;",
                " import com.facebook.buck.distributed.thrift.LogLineBatch;",
                "@@ -64,3 +63,4 @@ public class LogStateTracker {",
                "-  public List<LogLineBatchRequest> createRealtimeLogRequests(",
                "+  /** Creates requests for the next set of StreamLogs. */",
                "+  public List<LogLineBatchRequest> createStreamLogRequests(",
                "       Collection<BuildSlaveInfo> latestBuildSlaveInfos) {",
                "@@ -69,3 +69,8 @@ public class LogStateTracker {",
                "       for (BuildSlaveInfo buildSlaveInfo : latestBuildSlaveInfos) {",
                "-        createRealtimeLogRequests(buildSlaveInfo, streamType, requests);",
                "+        SlaveStream slaveStream =",
                "+            new SlaveStream()",
                "+                .setBuildSlaveRunId(buildSlaveInfo.buildSlaveRunId)",
                "+                .setStreamType(streamType);",
                "+        int lastBatchNumber = getLatestBatchNumber(slaveStream);",
                "+        requests.add(createRequest(slaveStream, lastBatchNumber));",
                "       }",
                "@@ -79,3 +84,3 @@ public class LogStateTracker {",
                "         LOG.error(",
                "-            \"Failed to get stream logs for runId [%]. Error: %s\",",
                "+            \"Failed to get stream logs for runId [%s]. Error: [%s].\",",
                "             streamLogs.slaveStream.buildSlaveRunId, streamLogs.errorMessage);",
                "@@ -100,2 +105,7 @@ public class LogStateTracker {",
                "   private void processStreamLogs(StreamLogs streamLogs) {",
                "+    if (streamLogs.logLineBatches.isEmpty()) {",
                "+      // No new lines have been logged.",
                "+      return;",
                "+    }",
                "+",
                "     if (!seenSlaveLogs.containsKey(streamLogs.slaveStream)) {",
                "@@ -143,58 +153,8 @@ public class LogStateTracker {",
                "-  private void createRealtimeLogRequests(",
                "-      BuildSlaveInfo buildSlaveInfo, LogStreamType streamType, List<LogLineBatchRequest> requests) {",
                "-    BuildSlaveRunId runId = buildSlaveInfo.buildSlaveRunId;",
                "-    SlaveStream slaveStream = new SlaveStream();",
                "-    slaveStream.setBuildSlaveRunId(runId);",
                "-    slaveStream.setStreamType(streamType);",
                "-",
                "-    int latestBatchNumber = getLatestBatchNumber(buildSlaveInfo, streamType);",
                "-",
                "-    // No logs have been created for this slave stream yet",
                "-    if (latestBatchNumber == 0) {",
                "-      return;",
                "-    }",
                "-",
                "-    // Logs exist, but no requests have been made yet => request everything",
                "-    if (!seenSlaveLogs.containsKey(slaveStream)) {",
                "-      requests.add(createRequest(slaveStream, 1));",
                "-      return;",
                "-    }",
                "-",
                "-    int latestBatchLineNumber = getLatestBatchLineNumber(buildSlaveInfo, streamType);",
                "-    SlaveStreamState seenState = seenSlaveLogs.get(slaveStream);",
                "-    // Logs exists, but we have seen them all already.",
                "-    if (seenState.seenBatchNumber > latestBatchNumber",
                "-        || (seenState.seenBatchNumber == latestBatchNumber",
                "-            && seenState.seenBatchLineCount >= latestBatchLineNumber)) {",
                "-      return;",
                "-    }",
                "-",
                "-    // New logs exists, that we haven't seen yet.",
                "-    requests.add(createRequest(slaveStream, seenState.seenBatchNumber));",
                "-  }",
                "-",
                "-  private static int getLatestBatchNumber(BuildSlaveInfo buildSlaveInfo, LogStreamType streamType) {",
                "-    switch (streamType) {",
                "-      case STDOUT:",
                "-        return buildSlaveInfo.getStdOutCurrentBatchNumber();",
                "-      case STDERR:",
                "-        return buildSlaveInfo.getStdErrCurrentBatchNumber();",
                "-      case UNKNOWN:",
                "-      default:",
                "-        throw new RuntimeException(\"Unsupported stream type: \" + streamType);",
                "+  private int getLatestBatchNumber(SlaveStream stream) {",
                "+    if (seenSlaveLogs.containsKey(stream)) {",
                "+      return seenSlaveLogs.get(stream).seenBatchNumber;",
                "     }",
                "-  }",
                "-  private static int getLatestBatchLineNumber(",
                "-      BuildSlaveInfo buildSlaveInfo, LogStreamType streamType) {",
                "-    switch (streamType) {",
                "-      case STDOUT:",
                "-        return buildSlaveInfo.getStdOutCurrentBatchLineCount();",
                "-      case STDERR:",
                "-        return buildSlaveInfo.getStdErrCurrentBatchLineCount();",
                "-      case UNKNOWN:",
                "-      default:",
                "-        throw new RuntimeException(\"Unsupported stream type: \" + streamType);",
                "-    }",
                "+    return 0;",
                "   }",
                "diff --git a/src/com/facebook/buck/distributed/thrift/stampede.thrift b/src/com/facebook/buck/distributed/thrift/stampede.thrift",
                "index 390e375a30..327f32c4ef 100644",
                "--- a/src/com/facebook/buck/distributed/thrift/stampede.thrift",
                "+++ b/src/com/facebook/buck/distributed/thrift/stampede.thrift",
                "@@ -68,10 +68,2 @@ struct BuildSlaveInfo {",
                "   2: optional string hostname;",
                "-",
                "-  // TODO(ruibm): Fields [4-7] have fallen out of sync and should not be used anymore however",
                "-  //              the buck client code otherwise we get compile errors.",
                "-  4: optional i32 stdOutCurrentBatchNumber;",
                "-  5: optional i32 stdOutCurrentBatchLineCount;",
                "-  6: optional i32 stdErrCurrentBatchNumber;",
                "-  7: optional i32 stdErrCurrentBatchLineCount;",
                "-",
                "   8: optional bool logDirZipWritten;",
                "@@ -322,3 +314,3 @@ struct MultiGetBuildSlaveLogDirResponse {",
                " # Uniquely identifies a log stream at a particular build slave,",
                "-# and the first batch number to request. Batches numbers start at 1.",
                "+# and the first batch number to request. Batches numbers start at 0.",
                " struct LogLineBatchRequest {",
                "diff --git a/test/com/facebook/buck/distributed/build_client/BuildPhaseTest.java b/test/com/facebook/buck/distributed/build_client/BuildPhaseTest.java",
                "index 0a0564cc8c..69f12fff3f 100644",
                "--- a/test/com/facebook/buck/distributed/build_client/BuildPhaseTest.java",
                "+++ b/test/com/facebook/buck/distributed/build_client/BuildPhaseTest.java",
                "@@ -373,3 +373,3 @@ public class BuildPhaseTest {",
                "     // Test that we don't fetch logs if the tracker says we don't need to.",
                "-    expect(mockLogStateTracker.createRealtimeLogRequests(job.getBuildSlaves()))",
                "+    expect(mockLogStateTracker.createStreamLogRequests(job.getBuildSlaves()))",
                "         .andReturn(ImmutableList.of());",
                "@@ -381,3 +381,3 @@ public class BuildPhaseTest {",
                "     logRequest2.setBatchNumber(10);",
                "-    expect(mockLogStateTracker.createRealtimeLogRequests(job.getBuildSlaves()))",
                "+    expect(mockLogStateTracker.createStreamLogRequests(job.getBuildSlaves()))",
                "         .andReturn(ImmutableList.of(logRequest1, logRequest2));",
                "diff --git a/test/com/facebook/buck/distributed/build_client/DistBuildControllerTest.java b/test/com/facebook/buck/distributed/build_client/DistBuildControllerTest.java",
                "index 3e07efb339..94ac57b352 100644",
                "--- a/test/com/facebook/buck/distributed/build_client/DistBuildControllerTest.java",
                "+++ b/test/com/facebook/buck/distributed/build_client/DistBuildControllerTest.java",
                "@@ -399,3 +399,3 @@ public class DistBuildControllerTest {",
                "-    expect(mockLogStateTracker.createRealtimeLogRequests(job.getBuildSlaves()))",
                "+    expect(mockLogStateTracker.createStreamLogRequests(job.getBuildSlaves()))",
                "         .andReturn(ImmutableList.of());",
                "@@ -417,3 +417,3 @@ public class DistBuildControllerTest {",
                "-    expect(mockLogStateTracker.createRealtimeLogRequests(job.getBuildSlaves()))",
                "+    expect(mockLogStateTracker.createStreamLogRequests(job.getBuildSlaves()))",
                "         .andReturn(ImmutableList.of());",
                "@@ -449,3 +449,3 @@ public class DistBuildControllerTest {",
                "-    expect(mockLogStateTracker.createRealtimeLogRequests(job.getBuildSlaves()))",
                "+    expect(mockLogStateTracker.createStreamLogRequests(job.getBuildSlaves()))",
                "         .andReturn(ImmutableList.of());",
                "diff --git a/test/com/facebook/buck/distributed/build_client/LogStateTrackerTest.java b/test/com/facebook/buck/distributed/build_client/LogStateTrackerTest.java",
                "index 93d3316082..e724582a46 100644",
                "--- a/test/com/facebook/buck/distributed/build_client/LogStateTrackerTest.java",
                "+++ b/test/com/facebook/buck/distributed/build_client/LogStateTrackerTest.java",
                "@@ -92,6 +92,2 @@ public class LogStateTrackerTest {",
                "     runOneSlaveInfo.setBuildSlaveRunId(runOneId);",
                "-    runOneSlaveInfo.setStdOutCurrentBatchNumber(0);",
                "-    runOneSlaveInfo.setStdOutCurrentBatchLineCount(0);",
                "-    runOneSlaveInfo.setStdErrCurrentBatchNumber(1);",
                "-    runOneSlaveInfo.setStdErrCurrentBatchLineCount(1);",
                "@@ -101,6 +97,2 @@ public class LogStateTrackerTest {",
                "     runTwoSlaveInfo.setBuildSlaveRunId(runTwoId);",
                "-    runTwoSlaveInfo.setStdOutCurrentBatchNumber(2);",
                "-    runTwoSlaveInfo.setStdOutCurrentBatchLineCount(2);",
                "-    runTwoSlaveInfo.setStdErrCurrentBatchNumber(0);",
                "-    runTwoSlaveInfo.setStdErrCurrentBatchLineCount(0);",
                "@@ -109,5 +101,5 @@ public class LogStateTrackerTest {",
                "     List<LogLineBatchRequest> requestsOne =",
                "-        distBuildLogStateTracker.createRealtimeLogRequests(buildSlaveInfos);",
                "+        distBuildLogStateTracker.createStreamLogRequests(buildSlaveInfos);",
                "-    assertThat(requestsOne.size(), Matchers.equalTo(2));",
                "+    assertThat(requestsOne.size(), Matchers.equalTo(4));",
                "@@ -121,3 +113,3 @@ public class LogStateTrackerTest {",
                "                         && r.slaveStream.streamType.equals(LogStreamType.STDERR)",
                "-                        && r.batchNumber == 1));",
                "+                        && r.batchNumber == 0));",
                "     // Request runTwo/stdOut from batch 1",
                "@@ -130,3 +122,3 @@ public class LogStateTrackerTest {",
                "                         && r.slaveStream.streamType.equals(LogStreamType.STDOUT)",
                "-                        && r.batchNumber == 1));",
                "+                        && r.batchNumber == 0));",
                "@@ -176,26 +168,2 @@ public class LogStateTrackerTest {",
                "-    // New build status arrives.",
                "-    // runOne/stdErr has same values as last time (so fewer lines than already processed).",
                "-    // => ignore",
                "-    // runTwo/stdOut updated within existing batch 2",
                "-    // => fetch batch 2 and process new lines",
                "-",
                "-    runTwoSlaveInfo.setStdOutCurrentBatchNumber(2);",
                "-    runTwoSlaveInfo.setStdOutCurrentBatchLineCount(3);",
                "-    buildSlaveInfos = ImmutableList.of(runOneSlaveInfo, runTwoSlaveInfo);",
                "-",
                "-    List<LogLineBatchRequest> requestsTwo =",
                "-        distBuildLogStateTracker.createRealtimeLogRequests(buildSlaveInfos);",
                "-",
                "-    assertThat(requestsTwo.size(), Matchers.equalTo(1));",
                "-    // Request runTwo/stdOut from batch 2",
                "-    assertTrue(",
                "-        requestsTwo",
                "-            .stream()",
                "-            .anyMatch(",
                "-                r ->",
                "-                    r.slaveStream.buildSlaveRunId.equals(runTwoId)",
                "-                        && r.slaveStream.streamType.equals(LogStreamType.STDOUT)",
                "-                        && r.batchNumber == 2));",
                "-",
                "     // Process new logs",
                "@@ -221,17 +189,2 @@ public class LogStateTrackerTest {",
                "-    // New build status arrives.",
                "-    // runOne/stdOut has now been populated with 2 batches",
                "-    // runOne/stdErr updated to new batch 2, with changes to batch 1 too",
                "-    // => fetch 1 and 2, processing new lines in batch 1 and all lines in batch 2.",
                "-    // runTwo/stdOut updated to new batch 3, no changes to existing batches",
                "-    // => fetch batch 2 and 3, processing only changes in batch 3",
                "-",
                "-    runOneSlaveInfo.setStdOutCurrentBatchNumber(2);",
                "-    runOneSlaveInfo.setStdOutCurrentBatchLineCount(2);",
                "-    runOneSlaveInfo.setStdErrCurrentBatchNumber(2);",
                "-    runOneSlaveInfo.setStdErrCurrentBatchLineCount(1);",
                "-",
                "-    runTwoSlaveInfo.setStdOutCurrentBatchNumber(3);",
                "-    runTwoSlaveInfo.setStdOutCurrentBatchLineCount(2);",
                "-",
                "     // runOne has stdErr, and runTwo has stdOut to download.",
                "@@ -239,6 +192,6 @@ public class LogStateTrackerTest {",
                "-    List<LogLineBatchRequest> requestsThree =",
                "-        distBuildLogStateTracker.createRealtimeLogRequests(buildSlaveInfos);",
                "+    List<LogLineBatchRequest> requestTwo =",
                "+        distBuildLogStateTracker.createStreamLogRequests(buildSlaveInfos);",
                "-    assertThat(requestsThree.size(), Matchers.equalTo(3));",
                "+    assertThat(requestTwo.size(), Matchers.equalTo(4));",
                "@@ -246,3 +199,3 @@ public class LogStateTrackerTest {",
                "     assertTrue(",
                "-        requestsThree",
                "+        requestTwo",
                "             .stream()",
                "@@ -255,3 +208,3 @@ public class LogStateTrackerTest {",
                "     assertTrue(",
                "-        requestsThree",
                "+        requestTwo",
                "             .stream()",
                "@@ -261,6 +214,6 @@ public class LogStateTrackerTest {",
                "                         && r.slaveStream.streamType.equals(LogStreamType.STDOUT)",
                "-                        && r.batchNumber == 1));",
                "+                        && r.batchNumber == 0));",
                "     // Request runTwo/stdOut from batch 2",
                "     assertTrue(",
                "-        requestsThree",
                "+        requestTwo",
                "             .stream()"
            ],
            "changed_files": [
                "src-gen/com/facebook/buck/distributed/thrift/BuildSlaveInfo.java",
                "src/com/facebook/buck/distributed/build_client/BuildPhase.java",
                "src/com/facebook/buck/distributed/build_client/LogStateTracker.java",
                "src/com/facebook/buck/distributed/thrift/stampede.thrift",
                "test/com/facebook/buck/distributed/build_client/BuildPhaseTest.java",
                "test/com/facebook/buck/distributed/build_client/DistBuildControllerTest.java",
                "test/com/facebook/buck/distributed/build_client/LogStateTrackerTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: load",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, state",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d4be5d217fe1faa73023fbcb0c8c53b17f6a5cfd",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522885824,
            "hunks": 6,
            "message": "Disable ProgressEstimator when SuperConsole is not enabled Summary: If we're not going to show interactive progress for this command, we don't need to read or write progress estimates for it (we'll make an estimate if it's ever done interactively). Reviewed By: ttsugriy fbshipit-source-id: 44017a6",
            "diff": [
                "diff --git a/src/com/facebook/buck/cli/Main.java b/src/com/facebook/buck/cli/Main.java",
                "index 1b62bb30c5..65814f5eb7 100644",
                "--- a/src/com/facebook/buck/cli/Main.java",
                "+++ b/src/com/facebook/buck/cli/Main.java",
                "@@ -989,3 +989,4 @@ public final class Main {",
                "           // there too.",
                "-          if (command.performsBuild() || command.subcommand instanceof ProjectCommand) {",
                "+          if (consoleListener.displaysEstimatedProgress()",
                "+              && (command.performsBuild() || command.subcommand instanceof ProjectCommand)) {",
                "             ProgressEstimator progressEstimator =",
                "diff --git a/src/com/facebook/buck/event/listener/AbstractConsoleEventBusListener.java b/src/com/facebook/buck/event/listener/AbstractConsoleEventBusListener.java",
                "index 19abf6bf4e..72921c0af5 100644",
                "--- a/src/com/facebook/buck/event/listener/AbstractConsoleEventBusListener.java",
                "+++ b/src/com/facebook/buck/event/listener/AbstractConsoleEventBusListener.java",
                "@@ -223,4 +223,10 @@ public abstract class AbstractConsoleEventBusListener implements BuckEventListen",
                "+  public boolean displaysEstimatedProgress() {",
                "+    return false;",
                "+  }",
                "+",
                "   public void setProgressEstimator(ProgressEstimator estimator) {",
                "-    progressEstimator = Optional.of(estimator);",
                "+    if (displaysEstimatedProgress()) {",
                "+      progressEstimator = Optional.of(estimator);",
                "+    }",
                "   }",
                "diff --git a/src/com/facebook/buck/event/listener/SimpleConsoleEventBusListener.java b/src/com/facebook/buck/event/listener/SimpleConsoleEventBusListener.java",
                "index 9fb4627642..9c9b6efe3a 100644",
                "--- a/src/com/facebook/buck/event/listener/SimpleConsoleEventBusListener.java",
                "+++ b/src/com/facebook/buck/event/listener/SimpleConsoleEventBusListener.java",
                "@@ -126,3 +126,3 @@ public class SimpleConsoleEventBusListener extends AbstractConsoleEventBusListen",
                "             buckFilesParsingEvents.values(),",
                "-            getEstimatedProgressOfParsingBuckFiles(),",
                "+            Optional.empty(),",
                "             Optional.empty(),",
                "@@ -178,3 +178,3 @@ public class SimpleConsoleEventBusListener extends AbstractConsoleEventBusListen",
                "         buildFinished,",
                "-        getApproximateBuildProgress(),",
                "+        Optional.empty(),",
                "         Optional.empty(),",
                "diff --git a/src/com/facebook/buck/event/listener/SuperConsoleEventBusListener.java b/src/com/facebook/buck/event/listener/SuperConsoleEventBusListener.java",
                "index 14f76e921c..df05b88747 100644",
                "--- a/src/com/facebook/buck/event/listener/SuperConsoleEventBusListener.java",
                "+++ b/src/com/facebook/buck/event/listener/SuperConsoleEventBusListener.java",
                "@@ -1087,2 +1087,7 @@ public class SuperConsoleEventBusListener extends AbstractConsoleEventBusListene",
                "   }",
                "+",
                "+  @Override",
                "+  public boolean displaysEstimatedProgress() {",
                "+    return true;",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/com/facebook/buck/cli/Main.java",
                "src/com/facebook/buck/event/listener/AbstractConsoleEventBusListener.java",
                "src/com/facebook/buck/event/listener/SimpleConsoleEventBusListener.java",
                "src/com/facebook/buck/event/listener/SuperConsoleEventBusListener.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: command",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "0c1f51b7ac18661b28e09867104b5e6e48b3475f",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522441350,
            "hunks": 11,
            "message": "Update d8 to latest Summary: Fixes a critical crash on 4.x devices with D8 and okio - https://issuetracker.google.com/issues/75408029 Closes https://github.com/facebook/buck/pull/1823 Reviewed By: styurin Pulled By: styurin fbshipit-source-id: 51541f0",
            "diff": [
                "diff --git a/third-party/java/d8/changes.mbox b/third-party/java/d8/changes.mbox",
                "index 52de13ced1..c033ac00e2 100644",
                "--- a/third-party/java/d8/changes.mbox",
                "+++ b/third-party/java/d8/changes.mbox",
                "@@ -1,2 +1,2 @@",
                "-From ec9e575a21d4051afcec76358ec617c79c5ffe9b Mon Sep 17 00:00:00 2001",
                "+From 2ecb11692fd831fc13e1da81d32c7dc27b382813 Mon Sep 17 00:00:00 2001",
                " From: Gautam Korlam <gkorlam@uber.com>",
                "@@ -11,9 +11,9 @@ Subject: [PATCH] Compute referenced resources in D8 and bypass default",
                "  src/main/java/com/android/tools/r8/D8Command.java        |  8 +++++++-",
                "- .../java/com/android/tools/r8/graph/DexItemFactory.java  | 15 +++++++++++++++",
                "+ .../java/com/android/tools/r8/graph/DexItemFactory.java  | 14 ++++++++++++++",
                "  .../com/android/tools/r8/ir/desugar/ClassProcessor.java  | 16 ++++------------",
                "  .../java/com/android/tools/r8/utils/AndroidApiLevel.java |  3 ++-",
                "- 4 files changed, 28 insertions(+), 14 deletions(-)",
                "+ 4 files changed, 27 insertions(+), 14 deletions(-)",
                " diff --git a/src/main/java/com/android/tools/r8/D8Command.java b/src/main/java/com/android/tools/r8/D8Command.java",
                "-index 0e39dae4..4e1214bc 100644",
                "+index 394805d4..d017b388 100644",
                " --- a/src/main/java/com/android/tools/r8/D8Command.java",
                "@@ -43,6 +43,6 @@ index 0e39dae4..4e1214bc 100644",
                " diff --git a/src/main/java/com/android/tools/r8/graph/DexItemFactory.java b/src/main/java/com/android/tools/r8/graph/DexItemFactory.java",
                "-index d674ccb5..f0a277e5 100644",
                "+index 75f2ee83..a946eb06 100644",
                " --- a/src/main/java/com/android/tools/r8/graph/DexItemFactory.java",
                " +++ b/src/main/java/com/android/tools/r8/graph/DexItemFactory.java",
                "-@@ -24,9 +24,11 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;",
                "+@@ -27,6 +27,7 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;",
                "  import java.util.ArrayList;",
                "@@ -54,7 +54,3 @@ index d674ccb5..f0a277e5 100644",
                "  import java.util.Map;",
                "-+import java.util.Set;",
                "- import java.util.concurrent.ConcurrentHashMap;",
                "- import java.util.function.Consumer;",
                "- ",
                "-@@ -571,4 +573,17 @@ public class DexItemFactory {",
                "+@@ -672,4 +673,17 @@ public class DexItemFactory {",
                "    synchronized public void forAllTypes(Consumer<DexType> f) {",
                "@@ -77,6 +73,6 @@ index d674ccb5..f0a277e5 100644",
                " diff --git a/src/main/java/com/android/tools/r8/ir/desugar/ClassProcessor.java b/src/main/java/com/android/tools/r8/ir/desugar/ClassProcessor.java",
                "-index fa0958bf..45113b21 100644",
                "+index 2152364b..fc42fc16 100644",
                " --- a/src/main/java/com/android/tools/r8/ir/desugar/ClassProcessor.java",
                " +++ b/src/main/java/com/android/tools/r8/ir/desugar/ClassProcessor.java",
                "-@@ -165,18 +165,10 @@ final class ClassProcessor {",
                "+@@ -164,18 +164,10 @@ final class ClassProcessor {",
                "          if (superClass != null) {",
                "@@ -86,4 +82,4 @@ index fa0958bf..45113b21 100644",
                " -          if (current == clazz) {",
                "--            message += \" because its super class `\" + clazz.superType.toSourceString()",
                "--            + \"` is missing\";",
                "+-            message += \" because its super class `\" +",
                "+-                clazz.superType.toSourceString() + \"` is missing\";",
                " -          } else {",
                "@@ -118,3 +114,3 @@ index 127debef..45793dad 100644",
                " -- ",
                "-2.16.1",
                "+2.16.2",
                "diff --git a/third-party/java/d8/d8.jar b/third-party/java/d8/d8.jar",
                "index fc55018035..3e00418db1 100644",
                "Binary files a/third-party/java/d8/d8.jar and b/third-party/java/d8/d8.jar differ"
            ],
            "changed_files": [
                "third-party/java/d8/changes.mbox",
                "third-party/java/d8/d8.jar"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2376d781cfce79af1368d45556c47c404ea52541",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521580212,
            "hunks": 10,
            "message": "Generate a TOC for Skylark functions. Summary: Create a template for Skylark functions subsection TOC. Test Plan: CI Reviewed By: philipjameson, sbalabanov fbshipit-source-id: 37e79a1",
            "diff": [
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/BUCK b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/BUCK",
                "index ece622eb63..720d1dfdf2 100644",
                "--- a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/BUCK",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/BUCK",
                "@@ -3,3 +3,6 @@ java_library(",
                "     srcs = [\"SoyTemplateSkylarkSignatureRenderer.java\"],",
                "-    resources = [\"signature_template.stg\"],",
                "+    resources = [",
                "+        \"signature_template.stg\",",
                "+        \"table_of_contents_template.stg\",",
                "+    ],",
                "     visibility = [\"//tools/documentation_generator/...\"],",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java",
                "index 202d272ab8..9511f35a42 100644",
                "--- a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java",
                "@@ -18,6 +18,8 @@ package com.facebook.buck.tools.documentation.generator.skylark.rendering;",
                "-import com.google.common.base.Suppliers;",
                "+import com.google.common.cache.CacheBuilder;",
                "+import com.google.common.cache.CacheLoader;",
                "+import com.google.common.cache.LoadingCache;",
                " import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.Streams;",
                " import com.google.common.io.Resources;",
                "-import com.google.common.util.concurrent.UncheckedExecutionException;",
                " import com.google.devtools.build.lib.skylarkinterface.Param;",
                "@@ -28,3 +30,2 @@ import java.nio.charset.StandardCharsets;",
                " import java.util.Arrays;",
                "-import java.util.function.Supplier;",
                " import java.util.stream.Collectors;",
                "@@ -37,16 +38,17 @@ class SoyTemplateSkylarkSignatureRenderer {",
                "   private static final char DELIMITER_STOP_CHAR = '%';",
                "-  private static final String TEMPLATE_NAME = \"signature_template.stg\";",
                "+  private static final String FUNCTION_TEMPLATE_NAME = \"signature_template.stg\";",
                "+  private static final String TABLE_OF_CONTENTS_TEMPLATE_NAME = \"table_of_contents_template.stg\";",
                "-  private final Supplier<String> stringTemplateSupplier;",
                "+  private final LoadingCache<String, String> templateCache;",
                "   SoyTemplateSkylarkSignatureRenderer() {",
                "-    this.stringTemplateSupplier =",
                "-        Suppliers.memoize(",
                "-            () -> {",
                "-              try {",
                "-                return loadTemplate();",
                "-              } catch (IOException e) {",
                "-                throw new UncheckedExecutionException(e);",
                "-              }",
                "-            });",
                "+    this.templateCache =",
                "+        CacheBuilder.newBuilder()",
                "+            .build(",
                "+                new CacheLoader<String, String>() {",
                "+                  @Override",
                "+                  public String load(String templateName) throws Exception {",
                "+                    return loadTemplate(templateName);",
                "+                  }",
                "+                });",
                "   }",
                "@@ -58,4 +60,3 @@ class SoyTemplateSkylarkSignatureRenderer {",
                "   String render(SkylarkSignature skylarkSignature) {",
                "-    ST stringTemplate =",
                "-        new ST(stringTemplateSupplier.get(), DELIMITER_START_CHAR, DELIMITER_STOP_CHAR);",
                "+    ST stringTemplate = createTemplate(FUNCTION_TEMPLATE_NAME);",
                "     // open and close brace characters are not allowed inside of StringTemplate loops and using",
                "@@ -68,4 +69,22 @@ class SoyTemplateSkylarkSignatureRenderer {",
                "-  private String loadTemplate() throws IOException {",
                "-    URL template = Resources.getResource(SoyTemplateSkylarkSignatureRenderer.class, TEMPLATE_NAME);",
                "+  /** Renders a table of contents for the Skylark functions subsection on buckbuild.com website. */",
                "+  String renderTableOfContents(Iterable<SkylarkSignature> signatures) {",
                "+    ST stringTemplate = createTemplate(TABLE_OF_CONTENTS_TEMPLATE_NAME);",
                "+    stringTemplate.add(\"openCurly\", \"{\");",
                "+    stringTemplate.add(\"closeCurly\", \"}\");",
                "+    stringTemplate.add(",
                "+        \"signatures\",",
                "+        Streams.stream(signatures)",
                "+            .map(SoyTemplateSkylarkSignatureRenderer::toMap)",
                "+            .collect(Collectors.toList()));",
                "+    return stringTemplate.render();",
                "+  }",
                "+",
                "+  private ST createTemplate(String templateName) {",
                "+    return new ST(",
                "+        templateCache.getUnchecked(templateName), DELIMITER_START_CHAR, DELIMITER_STOP_CHAR);",
                "+  }",
                "+",
                "+  private static String loadTemplate(String templateName) throws IOException {",
                "+    URL template = Resources.getResource(SoyTemplateSkylarkSignatureRenderer.class, templateName);",
                "     return Resources.toString(template, StandardCharsets.UTF_8);",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg",
                "new file mode 100644",
                "index 0000000000..954a7edaee",
                "--- /dev/null",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg",
                "@@ -0,0 +1,19 @@",
                "+{namespace skylark}",
                "+",
                "+/**",
                "+ * Table of contents for the Skylark functions section.",
                "+ * @param navid The current page's navigation id.",
                "+ */",
                "+{template .tableOfContents}",
                "+  <h4>Skylark</h4>",
                "+  <ul>",
                "+      %signatures :{ signature |",
                "+          %openCurly%call buck.navigationLink%closeCurly%",
                "+              %openCurly%param currentnavid: $navid /%closeCurly%",
                "+              %openCurly%param folder: 'function' /%closeCurly%",
                "+              %openCurly%param page: '%signature.name%' /%closeCurly%",
                "+              %openCurly%param text: '%signature.name%()' /%closeCurly%",
                "+          %openCurly%/call%closeCurly%",
                "+      }%",
                "+  </ul>",
                "+{/template}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/BUCK",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1bee39b31dd5decd53bbbf0d2a359971a34712f9",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521832747,
            "hunks": 2,
            "message": "Improve error message when creating a description's python function fails Summary: This makes the error mention which Description failed. Reviewed By: ttsugriy fbshipit-source-id: 44c86b2",
            "diff": [
                "diff --git a/src/com/facebook/buck/json/BuckPythonProgram.java b/src/com/facebook/buck/json/BuckPythonProgram.java",
                "index f0064d7089..d3d8f61dc9 100644",
                "--- a/src/com/facebook/buck/json/BuckPythonProgram.java",
                "+++ b/src/com/facebook/buck/json/BuckPythonProgram.java",
                "@@ -27,2 +27,3 @@ import com.facebook.buck.rules.coercer.TypeCoercerFactory;",
                " import com.facebook.buck.util.Escaper;",
                "+import com.facebook.buck.util.exceptions.BuckUncheckedExecutionException;",
                " import com.google.common.base.Joiner;",
                "@@ -127,6 +128,11 @@ class BuckPythonProgram implements AutoCloseable {",
                "       for (Description<?> description : descriptions) {",
                "-        out.write(",
                "-            function.toPythonFunction(",
                "-                Description.getBuildRuleType(description), description.getConstructorArgType()));",
                "-        out.write('\\n');",
                "+        try {",
                "+          out.write(",
                "+              function.toPythonFunction(",
                "+                  Description.getBuildRuleType(description), description.getConstructorArgType()));",
                "+          out.write('\\n');",
                "+        } catch (RuntimeException e) {",
                "+          throw new BuckUncheckedExecutionException(",
                "+              e, \"When writing python function for %s.\", description.getClass().getName());",
                "+        }",
                "       }"
            ],
            "changed_files": [
                "src/com/facebook/buck/json/BuckPythonProgram.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "562eb3f31d7e86a09b45c24067be7a4f00415ff9",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521399449,
            "hunks": 8,
            "message": "Use randomized trials to enable auto-stampede builds probabilistically. Test Plan: CI Reviewed By: michsien fbshipit-source-id: f49eef3",
            "diff": [
                "diff --git a/src/com/facebook/buck/cli/Main.java b/src/com/facebook/buck/cli/Main.java",
                "index de945305e2..a16be6238f 100644",
                "--- a/src/com/facebook/buck/cli/Main.java",
                "+++ b/src/com/facebook/buck/cli/Main.java",
                "@@ -617,3 +617,3 @@ public final class Main {",
                "       isUsingDistributedBuild = subcommand.isUseDistributedBuild();",
                "-      if (!isUsingDistributedBuild && distBuildConfig.shouldUseDistributedBuild()) {",
                "+      if (!isUsingDistributedBuild && distBuildConfig.shouldUseDistributedBuild(buildId)) {",
                "         isUsingDistributedBuild = true;",
                "diff --git a/src/com/facebook/buck/distributed/AutoStampedeMode.java b/src/com/facebook/buck/distributed/AutoStampedeMode.java",
                "new file mode 100644",
                "index 0000000000..cd76a744e9",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/distributed/AutoStampedeMode.java",
                "@@ -0,0 +1,72 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.distributed;",
                "+",
                "+import com.facebook.buck.log.Logger;",
                "+import com.facebook.buck.model.BuildId;",
                "+import com.facebook.buck.util.randomizedtrial.RandomizedTrial;",
                "+import com.facebook.buck.util.randomizedtrial.WithProbability;",
                "+import com.google.common.base.Preconditions;",
                "+",
                "+/** Enum for config setting to auto-enable stampede builds with a certain probability. */",
                "+public enum AutoStampedeMode implements WithProbability {",
                "+  TRUE(0.7),",
                "+  FALSE(0.3),",
                "+  EXPERIMENTAL_STABLE(0.0),",
                "+  EXPERIMENTAL(0.0),",
                "+  ;",
                "+",
                "+  private static final Logger LOG = Logger.get(AutoStampedeMode.class);",
                "+",
                "+  public static final AutoStampedeMode DEFAULT = FALSE;",
                "+",
                "+  private final double probability;",
                "+",
                "+  AutoStampedeMode(double probability) {",
                "+    this.probability = probability;",
                "+  }",
                "+",
                "+  @Override",
                "+  public double getProbability() {",
                "+    return probability;",
                "+  }",
                "+",
                "+  /** Method to resolve the experiment value to one of the final values. */",
                "+  public AutoStampedeMode resolveExperiment(BuildId buildId) {",
                "+    AutoStampedeMode value = this;",
                "+    switch (value) {",
                "+      case EXPERIMENTAL:",
                "+        value =",
                "+            RandomizedTrial.getGroup(",
                "+                AutoStampedeMode.class.getName(), buildId.toString(), AutoStampedeMode.class);",
                "+        LOG.debug(\"Resolved %s experiment to %s\", AutoStampedeMode.class.getName(), value);",
                "+        break;",
                "+      case EXPERIMENTAL_STABLE:",
                "+        value =",
                "+            RandomizedTrial.getGroupStable(",
                "+                AutoStampedeMode.class.getName(), AutoStampedeMode.class);",
                "+        LOG.debug(\"Resolved %s experiment to %s\", AutoStampedeMode.class.getName(), value);",
                "+        break;",
                "+      case TRUE:",
                "+      case FALSE:",
                "+        break;",
                "+    }",
                "+",
                "+    Preconditions.checkState(value == TRUE || value == FALSE);",
                "+    return value;",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/distributed/BUCK b/src/com/facebook/buck/distributed/BUCK",
                "index c252f935e4..b7f6b95e83 100644",
                "--- a/src/com/facebook/buck/distributed/BUCK",
                "+++ b/src/com/facebook/buck/distributed/BUCK",
                "@@ -6,2 +6,3 @@ COMMON_FILES = (",
                "     \"ArtifactCacheByBuildRule.java\",",
                "+    \"AutoStampedeMode.java\",",
                "     \"BuildJobStateSerializer.java\",",
                "diff --git a/src/com/facebook/buck/distributed/DistBuildConfig.java b/src/com/facebook/buck/distributed/DistBuildConfig.java",
                "index eb8c35ab77..61d344edc1 100644",
                "--- a/src/com/facebook/buck/distributed/DistBuildConfig.java",
                "+++ b/src/com/facebook/buck/distributed/DistBuildConfig.java",
                "@@ -21,2 +21,3 @@ import com.facebook.buck.distributed.thrift.BuildMode;",
                " import com.facebook.buck.log.Logger;",
                "+import com.facebook.buck.model.BuildId;",
                " import com.facebook.buck.slb.SlbBuckConfig;",
                "@@ -153,7 +154,8 @@ public class DistBuildConfig {",
                "-  // This flag needs to be set to 'true' if automated stampede build is to be attempted. It",
                "-  // allows for a global on/off switch per repository (while the experiments.stampede_beta_test",
                "-  // flag can then be used for a e.g. per user switch).",
                "+  /**",
                "+   * While the experiments.stampede_beta_test flag is set to true, this flag can be used to",
                "+   * configure whether we want auto-stampede conversion for all builds, no builds, or some builds.",
                "+   * See {@link AutoStampedeMode}.",
                "+   */",
                "   private static final String AUTO_STAMPEDE_BUILD_ENABLED = \"auto_stampede_build_enabled\";",
                "-  private static final boolean DEFAULT_AUTO_STAMPEDE_BUILD_ENABLED = false;",
                "@@ -410,7 +412,18 @@ public class DistBuildConfig {",
                "   /** Whether a non-distributed build should be automatically turned into a distributed one. */",
                "-  public boolean shouldUseDistributedBuild() {",
                "-    return buckConfig.getBooleanValue(",
                "-            STAMPEDE_SECTION, AUTO_STAMPEDE_BUILD_ENABLED, DEFAULT_AUTO_STAMPEDE_BUILD_ENABLED)",
                "-        && buckConfig.getBooleanValue(",
                "+  public boolean shouldUseDistributedBuild(BuildId buildId) {",
                "+    boolean userInAutoStampedeControlGroup =",
                "+        buckConfig.getBooleanValue(",
                "             EXPERIMENTS_SECTION, STAMPEDE_BETA_TEST, DEFAULT_STAMPEDE_BETA_TEST);",
                "+    if (!userInAutoStampedeControlGroup) {",
                "+      return false;",
                "+    }",
                "+",
                "+    AutoStampedeMode enabled =",
                "+        buckConfig",
                "+            .getEnum(STAMPEDE_SECTION, AUTO_STAMPEDE_BUILD_ENABLED, AutoStampedeMode.class)",
                "+            .orElse(AutoStampedeMode.DEFAULT)",
                "+            .resolveExperiment(buildId);",
                "+",
                "+    LOG.info(\"Should use distributed build: %s\", enabled);",
                "+    return enabled.equals(AutoStampedeMode.TRUE);",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/cli/Main.java",
                "src/com/facebook/buck/distributed/AutoStampedeMode.java",
                "src/com/facebook/buck/distributed/BUCK",
                "src/com/facebook/buck/distributed/DistBuildConfig.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "bb16583d3f62b50d55bb29b22b14e449275fab70",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1523059277,
            "hunks": 50,
            "message": "Move Lua to features Reviewed By: ttsugriy fbshipit-source-id: 28c12ed",
            "diff": [
                "diff --git a/build.xml b/build.xml",
                "index 31488546ab..fcb5662bda 100644",
                "--- a/build.xml",
                "+++ b/build.xml",
                "@@ -493,2 +493,3 @@",
                "           <exclude name=\"com/facebook/buck/features/haskell/**\" />",
                "+          <exclude name=\"com/facebook/buck/features/lua/**\" />",
                "           <exclude name=\"com/facebook/buck/go/**\" />",
                "@@ -497,3 +498,2 @@",
                "           <exclude name=\"com/facebook/buck/jvm/java/plugin/adapter/**\" />",
                "-          <exclude name=\"com/facebook/buck/lua/**\" />",
                "           <exclude name=\"com/facebook/buck/module/annotationprocessor/**\" />",
                "@@ -579,6 +579,6 @@",
                "       <module-javac-params>",
                "-        <include name=\"com/facebook/buck/lua/**/*.java\" />",
                "+        <include name=\"com/facebook/buck/features/lua/**/*.java\" />",
                "       </module-javac-params>",
                "       <module-resources>",
                "-        <include name=\"com/facebook/buck/lua/*.in\"/>",
                "+        <include name=\"com/facebook/buck/features/lua/*.in\"/>",
                "       </module-resources>",
                "diff --git a/programs/BUCK b/programs/BUCK",
                "index 1758c455de..c4b3f8b80a 100644",
                "--- a/programs/BUCK",
                "+++ b/programs/BUCK",
                "@@ -92,3 +92,3 @@ BUCK_MODULES = {",
                "     \"haskell\": \"//src/com/facebook/buck/features/haskell:haskell\",",
                "-    \"lua\": \"//src/com/facebook/buck/lua:lua\",",
                "+    \"lua\": \"//src/com/facebook/buck/features/lua:lua\",",
                "     \"rust\": \"//src/com/facebook/buck/rust:rust\",",
                "diff --git a/src/com/facebook/buck/features/lua/AbstractLuaBinaryPackageComponents.java b/src/com/facebook/buck/features/lua/AbstractLuaBinaryPackageComponents.java",
                "new file mode 100644",
                "index 0000000000..c4f98cdfeb",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/AbstractLuaBinaryPackageComponents.java",
                "@@ -0,0 +1,30 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.util.immutables.BuckStyleTuple;",
                "+import org.immutables.value.Value;",
                "+",
                "+/** The package components in a Lua binary. */",
                "+@Value.Immutable",
                "+@BuckStyleTuple",
                "+abstract class AbstractLuaBinaryPackageComponents {",
                "+  public abstract SourcePath getStarter();",
                "+",
                "+  public abstract LuaPackageComponents getComponents();",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/AbstractLuaPackageComponents.java b/src/com/facebook/buck/features/lua/AbstractLuaPackageComponents.java",
                "new file mode 100644",
                "index 0000000000..3375df2272",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/AbstractLuaPackageComponents.java",
                "@@ -0,0 +1,148 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.rules.AddToRuleKey;",
                "+import com.facebook.buck.rules.AddsToRuleKey;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.util.HumanReadableException;",
                "+import com.facebook.buck.util.immutables.BuckStyleTuple;",
                "+import com.google.common.collect.ImmutableSortedMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.Map;",
                "+import org.immutables.value.Value;",
                "+",
                "+/** Components that contribute to a Lua package. */",
                "+@Value.Immutable",
                "+@BuckStyleTuple",
                "+abstract class AbstractLuaPackageComponents implements AddsToRuleKey {",
                "+",
                "+  /** @return mapping of module names to their respective {@link SourcePath}s. */",
                "+  @AddToRuleKey",
                "+  @Value.NaturalOrder",
                "+  public abstract ImmutableSortedMap<String, SourcePath> getModules();",
                "+",
                "+  /** @return mapping of python module names to their respective {@link SourcePath}s. */",
                "+  @AddToRuleKey",
                "+  @Value.NaturalOrder",
                "+  public abstract ImmutableSortedMap<String, SourcePath> getPythonModules();",
                "+",
                "+  /** @return a mapping of shared native library names to their respective {@link SourcePath}s. */",
                "+  @AddToRuleKey",
                "+  @Value.NaturalOrder",
                "+  public abstract ImmutableSortedMap<String, SourcePath> getNativeLibraries();",
                "+",
                "+  public static void addComponents(",
                "+      LuaPackageComponents.Builder builder, LuaPackageComponents components) {",
                "+    builder.putAllModules(components.getModules());",
                "+    builder.putAllPythonModules(components.getPythonModules());",
                "+    builder.putAllNativeLibraries(components.getNativeLibraries());",
                "+  }",
                "+",
                "+  public ImmutableSortedSet<BuildRule> getDeps(SourcePathRuleFinder ruleFinder) {",
                "+    return ImmutableSortedSet.<BuildRule>naturalOrder()",
                "+        .addAll(ruleFinder.filterBuildRuleInputs(getModules().values()))",
                "+        .addAll(ruleFinder.filterBuildRuleInputs(getPythonModules().values()))",
                "+        .addAll(ruleFinder.filterBuildRuleInputs(getNativeLibraries().values()))",
                "+        .build();",
                "+  }",
                "+",
                "+  /** @return whether any components may be prebuilt native libraries. */",
                "+  public boolean hasNativeCode(CxxPlatform cxxPlatform) {",
                "+    for (String module : getModules().keySet()) {",
                "+      if (module.endsWith(cxxPlatform.getSharedLibraryExtension())) {",
                "+        return true;",
                "+      }",
                "+    }",
                "+    for (String module : getPythonModules().keySet()) {",
                "+      if (module.endsWith(cxxPlatform.getSharedLibraryExtension())) {",
                "+        return true;",
                "+      }",
                "+    }",
                "+    return false;",
                "+  }",
                "+",
                "+  public static Builder builder() {",
                "+    return new Builder();",
                "+  }",
                "+",
                "+  public static class Builder {",
                "+",
                "+    private final Map<String, SourcePath> modules = new LinkedHashMap<>();",
                "+    private final Map<String, SourcePath> pythonModules = new LinkedHashMap<>();",
                "+    private final Map<String, SourcePath> nativeLibraries = new LinkedHashMap<>();",
                "+",
                "+    public Builder putModules(String name, SourcePath path) {",
                "+      SourcePath existing = modules.get(name);",
                "+      if (existing != null && !existing.equals(path)) {",
                "+        throw new HumanReadableException(",
                "+            \"conflicting modules for %s: %s != %s\", name, path, existing);",
                "+      }",
                "+      modules.put(name, path);",
                "+      return this;",
                "+    }",
                "+",
                "+    public Builder putAllModules(Map<String, SourcePath> modules) {",
                "+      for (Map.Entry<String, SourcePath> entry : modules.entrySet()) {",
                "+        putModules(entry.getKey(), entry.getValue());",
                "+      }",
                "+      return this;",
                "+    }",
                "+",
                "+    public Builder putPythonModules(String name, SourcePath path) {",
                "+      SourcePath existing = pythonModules.get(name);",
                "+      if (existing != null && !existing.equals(path)) {",
                "+        throw new HumanReadableException(",
                "+            \"conflicting python modules for %s: %s != %s\", name, path, existing);",
                "+      }",
                "+      pythonModules.put(name, path);",
                "+      return this;",
                "+    }",
                "+",
                "+    public Builder putAllPythonModules(Map<String, SourcePath> modules) {",
                "+      for (Map.Entry<String, SourcePath> entry : modules.entrySet()) {",
                "+        putPythonModules(entry.getKey(), entry.getValue());",
                "+      }",
                "+      return this;",
                "+    }",
                "+",
                "+    public Builder putNativeLibraries(String name, SourcePath path) {",
                "+      SourcePath existing = nativeLibraries.get(name);",
                "+      if (existing != null && !existing.equals(path)) {",
                "+        throw new HumanReadableException(",
                "+            \"conflicting native libraries for %s: %s != %s\", name, path, existing);",
                "+      }",
                "+      nativeLibraries.put(name, path);",
                "+      return this;",
                "+    }",
                "+",
                "+    public Builder putAllNativeLibraries(Map<String, SourcePath> nativeLibraries) {",
                "+      for (Map.Entry<String, SourcePath> entry : nativeLibraries.entrySet()) {",
                "+        putNativeLibraries(entry.getKey(), entry.getValue());",
                "+      }",
                "+      return this;",
                "+    }",
                "+",
                "+    public LuaPackageComponents build() {",
                "+      return LuaPackageComponents.of(modules, pythonModules, nativeLibraries);",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/AbstractLuaPlatform.java b/src/com/facebook/buck/features/lua/AbstractLuaPlatform.java",
                "new file mode 100644",
                "index 0000000000..66cf42ccd1",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/AbstractLuaPlatform.java",
                "@@ -0,0 +1,95 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.cxx.AbstractCxxLibrary;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkStrategy;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.FlavorConvertible;",
                "+import com.facebook.buck.model.UnflavoredBuildTarget;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.ToolProvider;",
                "+import com.facebook.buck.util.HumanReadableException;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import java.nio.file.Paths;",
                "+import java.util.Optional;",
                "+import org.immutables.value.Value;",
                "+",
                "+@Value.Immutable(copy = true)",
                "+@BuckStyleImmutable",
                "+abstract class AbstractLuaPlatform implements FlavorConvertible {",
                "+",
                "+  public static final String FLAVOR_DOMAIN_NAME = \"Lua Platform\";",
                "+",
                "+  private static final AbstractCxxLibrary SYSTEM_CXX_LIBRARY =",
                "+      new SystemLuaCxxLibrary(",
                "+          BuildTarget.of(",
                "+              UnflavoredBuildTarget.of(Paths.get(\"\"), Optional.empty(), \"//system\", \"lua\")));",
                "+",
                "+  @Override",
                "+  public Flavor getFlavor() {",
                "+    return getCxxPlatform().getFlavor();",
                "+  }",
                "+",
                "+  public abstract ToolProvider getLua();",
                "+",
                "+  public abstract Optional<BuildTarget> getNativeStarterLibrary();",
                "+",
                "+  public abstract Optional<BuildTarget> getLuaCxxLibraryTarget();",
                "+",
                "+  public abstract Optional<LuaBinaryDescription.StarterType> getStarterType();",
                "+",
                "+  public abstract String getExtension();",
                "+",
                "+  /** @return the {@link PackageStyle} to use for Lua executables. */",
                "+  public abstract PackageStyle getPackageStyle();",
                "+",
                "+  /** @return the {@link ToolProvider} which packages standalone Lua executables. */",
                "+  public abstract ToolProvider getPackager();",
                "+",
                "+  /** @return whether to cache Lua executable packages. */",
                "+  public abstract boolean shouldCacheBinaries();",
                "+",
                "+  /** @return the native link strategy to use for binaries. */",
                "+  public abstract NativeLinkStrategy getNativeLinkStrategy();",
                "+",
                "+  public abstract CxxPlatform getCxxPlatform();",
                "+",
                "+  public AbstractCxxLibrary getLuaCxxLibrary(BuildRuleResolver resolver) {",
                "+    return getLuaCxxLibraryTarget()",
                "+        .map(",
                "+            target ->",
                "+                resolver",
                "+                    .getRuleOptionalWithType(target, AbstractCxxLibrary.class)",
                "+                    .<RuntimeException>orElseThrow(",
                "+                        () ->",
                "+                            new HumanReadableException(",
                "+                                \"Cannot find C/C++ library rule %s\", target)))",
                "+        .orElse(SYSTEM_CXX_LIBRARY);",
                "+  }",
                "+",
                "+  protected enum PackageStyle {",
                "+",
                "+    /** Build Lua executables into standalone, relocatable packages. */",
                "+    STANDALONE,",
                "+",
                "+    /** Build Lua executables that can only be run from their build location. */",
                "+    INPLACE,",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/AbstractLuaPlatformsProvider.java b/src/com/facebook/buck/features/lua/AbstractLuaPlatformsProvider.java",
                "new file mode 100644",
                "index 0000000000..dc4d4b9915",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/AbstractLuaPlatformsProvider.java",
                "@@ -0,0 +1,35 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.toolchain.Toolchain;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import org.immutables.value.Value;",
                "+",
                "+@Value.Immutable(copy = false, builder = false)",
                "+@BuckStyleImmutable",
                "+public interface AbstractLuaPlatformsProvider extends Toolchain {",
                "+",
                "+  String DEFAULT_NAME = \"lua-platforms\";",
                "+",
                "+  @Value.Parameter",
                "+  LuaPlatform getDefaultLuaPlatform();",
                "+",
                "+  @Value.Parameter",
                "+  FlavorDomain<LuaPlatform> getLuaPlatforms();",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/AbstractLuaScriptStarter.java b/src/com/facebook/buck/features/lua/AbstractLuaScriptStarter.java",
                "new file mode 100644",
                "index 0000000000..7b2ef05ad4",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/AbstractLuaScriptStarter.java",
                "@@ -0,0 +1,128 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.file.WriteFile;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.model.InternalFlavor;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.rules.WriteStringTemplateRule;",
                "+import com.facebook.buck.util.Escaper;",
                "+import com.facebook.buck.util.immutables.BuckStyleTuple;",
                "+import com.google.common.base.Charsets;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.io.Resources;",
                "+import java.io.IOException;",
                "+import java.nio.file.Path;",
                "+import java.util.Optional;",
                "+import org.immutables.value.Value;",
                "+",
                "+/** {@link Starter} implementation which builds a starter as a Lua script. */",
                "+@Value.Immutable",
                "+@BuckStyleTuple",
                "+abstract class AbstractLuaScriptStarter implements Starter {",
                "+",
                "+  private static final String STARTER = \"starter.lua.in\";",
                "+",
                "+  abstract ProjectFilesystem getProjectFilesystem();",
                "+",
                "+  abstract BuildTarget getBaseTarget();",
                "+",
                "+  abstract BuildRuleParams getBaseParams();",
                "+",
                "+  abstract BuildRuleResolver getRuleResolver();",
                "+",
                "+  abstract SourcePathResolver getPathResolver();",
                "+",
                "+  abstract SourcePathRuleFinder getRuleFinder();",
                "+",
                "+  abstract LuaPlatform getLuaPlatform();",
                "+",
                "+  abstract BuildTarget getTarget();",
                "+",
                "+  abstract Path getOutput();",
                "+",
                "+  abstract String getMainModule();",
                "+",
                "+  abstract Optional<Path> getRelativeModulesDir();",
                "+",
                "+  abstract Optional<Path> getRelativePythonModulesDir();",
                "+",
                "+  private String getPureStarterTemplate() {",
                "+    try {",
                "+      return Resources.toString(",
                "+          Resources.getResource(AbstractLuaScriptStarter.class, STARTER), Charsets.UTF_8);",
                "+    } catch (IOException e) {",
                "+      throw new RuntimeException(e);",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath build() {",
                "+    BuildTarget templateTarget =",
                "+        getBaseTarget().withAppendedFlavors(InternalFlavor.of(\"starter-template\"));",
                "+    WriteFile templateRule =",
                "+        getRuleResolver()",
                "+            .addToIndex(",
                "+                new WriteFile(",
                "+                    templateTarget,",
                "+                    getProjectFilesystem(),",
                "+                    getPureStarterTemplate(),",
                "+                    BuildTargets.getGenPath(",
                "+                        getProjectFilesystem(), templateTarget, \"%s/starter.lua.in\"),",
                "+                    /* executable */ false));",
                "+",
                "+    Tool lua = getLuaPlatform().getLua().resolve(getRuleResolver());",
                "+    WriteStringTemplateRule writeStringTemplateRule =",
                "+        getRuleResolver()",
                "+            .addToIndex(",
                "+                WriteStringTemplateRule.from(",
                "+                    getProjectFilesystem(),",
                "+                    getBaseParams(),",
                "+                    getRuleFinder(),",
                "+                    getTarget(),",
                "+                    getOutput(),",
                "+                    templateRule.getSourcePathToOutput(),",
                "+                    ImmutableMap.of(",
                "+                        \"SHEBANG\",",
                "+                        lua.getCommandPrefix(getPathResolver()).get(0),",
                "+                        \"MAIN_MODULE\",",
                "+                        Escaper.escapeAsPythonString(getMainModule()),",
                "+                        \"MODULES_DIR\",",
                "+                        getRelativeModulesDir().isPresent()",
                "+                            ? Escaper.escapeAsPythonString(getRelativeModulesDir().get().toString())",
                "+                            : \"nil\",",
                "+                        \"PY_MODULES_DIR\",",
                "+                        getRelativePythonModulesDir().isPresent()",
                "+                            ? Escaper.escapeAsPythonString(",
                "+                                getRelativePythonModulesDir().get().toString())",
                "+                            : \"nil\",",
                "+                        \"EXT_SUFFIX\",",
                "+                        Escaper.escapeAsPythonString(",
                "+                            getLuaPlatform().getCxxPlatform().getSharedLibraryExtension())),",
                "+                    /* executable */ true));",
                "+",
                "+    return writeStringTemplateRule.getSourcePathToOutput();",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/AbstractNativeExecutableStarter.java b/src/com/facebook/buck/features/lua/AbstractNativeExecutableStarter.java",
                "new file mode 100644",
                "index 0000000000..205e8a9501",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/AbstractNativeExecutableStarter.java",
                "@@ -0,0 +1,308 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.cxx.AbstractCxxLibrary;",
                "+import com.facebook.buck.cxx.CxxLink;",
                "+import com.facebook.buck.cxx.CxxLinkOptions;",
                "+import com.facebook.buck.cxx.CxxLinkableEnhancer;",
                "+import com.facebook.buck.cxx.CxxPreprocessAndCompile;",
                "+import com.facebook.buck.cxx.CxxPreprocessables;",
                "+import com.facebook.buck.cxx.CxxPreprocessorDep;",
                "+import com.facebook.buck.cxx.CxxPreprocessorInput;",
                "+import com.facebook.buck.cxx.CxxSource;",
                "+import com.facebook.buck.cxx.CxxSourceRuleFactory;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.PicType;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linkers;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkTarget;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkTargetMode;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                "+import com.facebook.buck.file.WriteFile;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.model.InternalFlavor;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.WriteStringTemplateRule;",
                "+import com.facebook.buck.rules.args.SourcePathArg;",
                "+import com.facebook.buck.rules.args.StringArg;",
                "+import com.facebook.buck.util.Escaper;",
                "+import com.facebook.buck.util.immutables.BuckStyleTuple;",
                "+import com.google.common.base.Charsets;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.base.Predicates;",
                "+import com.google.common.collect.FluentIterable;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableMultimap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.Iterables;",
                "+import com.google.common.io.Resources;",
                "+import java.io.IOException;",
                "+import java.nio.file.Path;",
                "+import java.util.Optional;",
                "+import org.immutables.value.Value;",
                "+",
                "+/** {@link Starter} implementation which builds a starter as a native executable. */",
                "+@Value.Immutable",
                "+@BuckStyleTuple",
                "+abstract class AbstractNativeExecutableStarter implements Starter, NativeLinkTarget {",
                "+",
                "+  private static final String NATIVE_STARTER_CXX_SOURCE = \"native-starter.cpp.in\";",
                "+",
                "+  abstract ProjectFilesystem getProjectFilesystem();",
                "+",
                "+  abstract BuildTarget getBaseTarget();",
                "+",
                "+  abstract BuildRuleParams getBaseParams();",
                "+",
                "+  abstract BuildRuleResolver getRuleResolver();",
                "+",
                "+  abstract SourcePathResolver getPathResolver();",
                "+",
                "+  abstract SourcePathRuleFinder getRuleFinder();",
                "+",
                "+  abstract CellPathResolver getCellPathResolver();",
                "+",
                "+  abstract LuaPlatform getLuaPlatform();",
                "+",
                "+  abstract CxxBuckConfig getCxxBuckConfig();",
                "+",
                "+  abstract BuildTarget getTarget();",
                "+",
                "+  abstract Path getOutput();",
                "+",
                "+  abstract String getMainModule();",
                "+",
                "+  abstract Optional<BuildTarget> getNativeStarterLibrary();",
                "+",
                "+  abstract Optional<Path> getRelativeModulesDir();",
                "+",
                "+  abstract Optional<Path> getRelativePythonModulesDir();",
                "+",
                "+  abstract Optional<Path> getRelativeNativeLibsDir();",
                "+",
                "+  private String getNativeStarterCxxSourceTemplate() {",
                "+    try {",
                "+      return Resources.toString(",
                "+          Resources.getResource(AbstractNativeExecutableStarter.class, NATIVE_STARTER_CXX_SOURCE),",
                "+          Charsets.UTF_8);",
                "+    } catch (IOException e) {",
                "+      throw new RuntimeException(e);",
                "+    }",
                "+  }",
                "+",
                "+  private CxxSource getNativeStarterCxxSource() {",
                "+    BuildRule rule =",
                "+        getRuleResolver()",
                "+            .computeIfAbsent(",
                "+                getBaseTarget().withAppendedFlavors(InternalFlavor.of(\"native-starter-cxx-source\")),",
                "+                target -> {",
                "+                  BuildTarget templateTarget =",
                "+                      getBaseTarget()",
                "+                          .withAppendedFlavors(",
                "+                              InternalFlavor.of(\"native-starter-cxx-source-template\"));",
                "+                  WriteFile templateRule =",
                "+                      getRuleResolver()",
                "+                          .addToIndex(",
                "+                              new WriteFile(",
                "+                                  templateTarget,",
                "+                                  getProjectFilesystem(),",
                "+                                  getNativeStarterCxxSourceTemplate(),",
                "+                                  BuildTargets.getGenPath(",
                "+                                      getProjectFilesystem(),",
                "+                                      templateTarget,",
                "+                                      \"%s/native-starter.cpp.in\"),",
                "+                                  /* executable */ false));",
                "+",
                "+                  Path output =",
                "+                      BuildTargets.getGenPath(",
                "+                          getProjectFilesystem(), target, \"%s/native-starter.cpp\");",
                "+                  return WriteStringTemplateRule.from(",
                "+                      getProjectFilesystem(),",
                "+                      getBaseParams(),",
                "+                      getRuleFinder(),",
                "+                      target,",
                "+                      output,",
                "+                      templateRule.getSourcePathToOutput(),",
                "+                      ImmutableMap.of(",
                "+                          \"MAIN_MODULE\",",
                "+                          Escaper.escapeAsPythonString(getMainModule()),",
                "+                          \"MODULES_DIR\",",
                "+                          getRelativeModulesDir().isPresent()",
                "+                              ? Escaper.escapeAsPythonString(",
                "+                                  getRelativeModulesDir().get().toString())",
                "+                              : \"NULL\",",
                "+                          \"PY_MODULES_DIR\",",
                "+                          getRelativePythonModulesDir().isPresent()",
                "+                              ? Escaper.escapeAsPythonString(",
                "+                                  getRelativePythonModulesDir().get().toString())",
                "+                              : \"NULL\",",
                "+                          \"EXT_SUFFIX\",",
                "+                          Escaper.escapeAsPythonString(",
                "+                              getLuaPlatform().getCxxPlatform().getSharedLibraryExtension())),",
                "+                      /* executable */ false);",
                "+                });",
                "+",
                "+    return CxxSource.of(",
                "+        CxxSource.Type.CXX,",
                "+        Preconditions.checkNotNull(rule.getSourcePathToOutput()),",
                "+        ImmutableList.of());",
                "+  }",
                "+",
                "+  private ImmutableList<CxxPreprocessorInput> getTransitiveCxxPreprocessorInput(",
                "+      CxxPlatform cxxPlatform, Iterable<? extends CxxPreprocessorDep> deps) {",
                "+    ImmutableList.Builder<CxxPreprocessorInput> inputs = ImmutableList.builder();",
                "+    inputs.addAll(",
                "+        CxxPreprocessables.getTransitiveCxxPreprocessorInput(",
                "+            cxxPlatform, getRuleResolver(), FluentIterable.from(deps).filter(BuildRule.class)));",
                "+    for (CxxPreprocessorDep dep :",
                "+        Iterables.filter(deps, Predicates.not(BuildRule.class::isInstance))) {",
                "+      inputs.add(dep.getCxxPreprocessorInput(cxxPlatform, getRuleResolver()));",
                "+    }",
                "+    return inputs.build();",
                "+  }",
                "+",
                "+  public Iterable<? extends AbstractCxxLibrary> getNativeStarterDeps() {",
                "+    return ImmutableList.of(",
                "+        getNativeStarterLibrary().isPresent()",
                "+            ? getRuleResolver()",
                "+                .getRuleWithType(getNativeStarterLibrary().get(), AbstractCxxLibrary.class)",
                "+            : getLuaPlatform().getLuaCxxLibrary(getRuleResolver()));",
                "+  }",
                "+",
                "+  private NativeLinkableInput getNativeLinkableInput() {",
                "+    Iterable<? extends AbstractCxxLibrary> nativeStarterDeps = getNativeStarterDeps();",
                "+    ImmutableMap<CxxPreprocessAndCompile, SourcePath> objects =",
                "+        CxxSourceRuleFactory.of(",
                "+                getProjectFilesystem(),",
                "+                getBaseTarget(),",
                "+                getRuleResolver(),",
                "+                getPathResolver(),",
                "+                getRuleFinder(),",
                "+                getCxxBuckConfig(),",
                "+                getLuaPlatform().getCxxPlatform(),",
                "+                ImmutableList.<CxxPreprocessorInput>builder()",
                "+                    .add(",
                "+                        CxxPreprocessorInput.builder()",
                "+                            .putAllPreprocessorFlags(",
                "+                                CxxSource.Type.CXX,",
                "+                                getNativeStarterLibrary().isPresent()",
                "+                                    ? ImmutableList.of()",
                "+                                    : StringArg.from(\"-DBUILTIN_NATIVE_STARTER\"))",
                "+                            .build())",
                "+                    .addAll(",
                "+                        getTransitiveCxxPreprocessorInput(",
                "+                            getLuaPlatform().getCxxPlatform(), nativeStarterDeps))",
                "+                    .build(),",
                "+                ImmutableMultimap.of(),",
                "+                Optional.empty(),",
                "+                Optional.empty(),",
                "+                PicType.PDC,",
                "+                Optional.empty())",
                "+            .requirePreprocessAndCompileRules(",
                "+                ImmutableMap.of(\"native-starter.cpp\", getNativeStarterCxxSource()));",
                "+    return NativeLinkableInput.builder()",
                "+        .addAllArgs(",
                "+            getRelativeNativeLibsDir().isPresent()",
                "+                ? StringArg.from(",
                "+                    Linkers.iXlinker(",
                "+                        \"-rpath\",",
                "+                        String.format(",
                "+                            \"%s/%s\",",
                "+                            getLuaPlatform()",
                "+                                .getCxxPlatform()",
                "+                                .getLd()",
                "+                                .resolve(getRuleResolver())",
                "+                                .origin(),",
                "+                            getRelativeNativeLibsDir().get().toString())))",
                "+                : ImmutableList.of())",
                "+        .addAllArgs(SourcePathArg.from(objects.values()))",
                "+        .build();",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath build() {",
                "+    BuildTarget linkTarget = getTarget();",
                "+    CxxLink linkRule =",
                "+        getRuleResolver()",
                "+            .addToIndex(",
                "+                CxxLinkableEnhancer.createCxxLinkableBuildRule(",
                "+                    getCxxBuckConfig(),",
                "+                    getLuaPlatform().getCxxPlatform(),",
                "+                    getProjectFilesystem(),",
                "+                    getRuleResolver(),",
                "+                    getPathResolver(),",
                "+                    getRuleFinder(),",
                "+                    linkTarget,",
                "+                    Linker.LinkType.EXECUTABLE,",
                "+                    Optional.empty(),",
                "+                    getOutput(),",
                "+                    ImmutableList.of(),",
                "+                    Linker.LinkableDepType.SHARED,",
                "+                    CxxLinkOptions.of(),",
                "+                    getNativeStarterDeps(),",
                "+                    Optional.empty(),",
                "+                    Optional.empty(),",
                "+                    ImmutableSet.of(),",
                "+                    ImmutableSet.of(),",
                "+                    getNativeLinkableInput(),",
                "+                    Optional.empty(),",
                "+                    getCellPathResolver()));",
                "+    return linkRule.getSourcePathToOutput();",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuildTarget getBuildTarget() {",
                "+    return getBaseTarget();",
                "+  }",
                "+",
                "+  @Override",
                "+  public NativeLinkTargetMode getNativeLinkTargetMode(CxxPlatform cxxPlatform) {",
                "+    return NativeLinkTargetMode.executable();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Iterable<? extends NativeLinkable> getNativeLinkTargetDeps(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+    return getNativeStarterDeps();",
                "+  }",
                "+",
                "+  @Override",
                "+  public NativeLinkableInput getNativeLinkTargetInput(",
                "+      CxxPlatform cxxPlatform,",
                "+      BuildRuleResolver ruleResolver,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder) {",
                "+    return getNativeLinkableInput();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Optional<Path> getNativeLinkTargetOutputPath(CxxPlatform cxxPlatform) {",
                "+    return Optional.of(getOutput());",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/BUCK b/src/com/facebook/buck/features/lua/BUCK",
                "new file mode 100644",
                "index 0000000000..62f1d2c4fc",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/BUCK",
                "@@ -0,0 +1,51 @@",
                "+load(\"//tools/build_rules:module_rules.bzl\", \"buck_module\")",
                "+",
                "+buck_module(",
                "+    name = \"lua\",",
                "+    srcs = glob([\"*.java\"]),",
                "+    provided_deps = [",
                "+        \"//src/com/facebook/buck/android/packageable:packageable\",",
                "+        \"//src/com/facebook/buck/config:config\",",
                "+        \"//src/com/facebook/buck/cxx:rules\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain:toolchain\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/linker:linker\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/nativelink:nativelink\",",
                "+        \"//src/com/facebook/buck/file:rules\",",
                "+        \"//src/com/facebook/buck/graph:graph\",",
                "+        \"//src/com/facebook/buck/io:executable-finder\",",
                "+        \"//src/com/facebook/buck/io:io\",",
                "+        \"//src/com/facebook/buck/io/file:file\",",
                "+        \"//src/com/facebook/buck/model:model\",",
                "+        \"//src/com/facebook/buck/parser:rule_pattern\",",
                "+        \"//src/com/facebook/buck/python:rules\",",
                "+        \"//src/com/facebook/buck/python/toolchain:toolchain\",",
                "+        \"//src/com/facebook/buck/rules:build_rule\",",
                "+        \"//src/com/facebook/buck/rules:interfaces\",",
                "+        \"//src/com/facebook/buck/rules:rules\",",
                "+        \"//src/com/facebook/buck/rules:source_path\",",
                "+        \"//src/com/facebook/buck/rules/args:args\",",
                "+        \"//src/com/facebook/buck/rules/coercer:coercer\",",
                "+        \"//src/com/facebook/buck/rules/keys:keys\",",
                "+        \"//src/com/facebook/buck/rules/macros:types\",",
                "+        \"//src/com/facebook/buck/rules/tool/config:config\",",
                "+        \"//src/com/facebook/buck/shell:steps\",",
                "+        \"//src/com/facebook/buck/step:step\",",
                "+        \"//src/com/facebook/buck/step/fs:fs\",",
                "+        \"//src/com/facebook/buck/toolchain:toolchain\",",
                "+        \"//src/com/facebook/buck/util:exceptions\",",
                "+        \"//src/com/facebook/buck/util:util\",",
                "+        \"//src/com/facebook/buck/util/json:json\",",
                "+        \"//src/com/facebook/buck/versions:translator\",",
                "+        \"//src/com/facebook/buck/versions:versions\",",
                "+        \"//third-party/java/infer-annotations:infer-annotations\",",
                "+        \"//third-party/java/jackson:jackson-databind\",",
                "+    ],",
                "+    resources = [",
                "+        \"native-starter.cpp.in\",",
                "+        \"starter.lua.in\",",
                "+    ],",
                "+    tests = [",
                "+        \"//test/com/facebook/buck/features/lua:lua\",",
                "+    ],",
                "+    visibility = [\"PUBLIC\"],",
                "+)",
                "diff --git a/src/com/facebook/buck/features/lua/CxxLuaExtension.java b/src/com/facebook/buck/features/lua/CxxLuaExtension.java",
                "new file mode 100644",
                "index 0000000000..4ca79a7731",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/CxxLuaExtension.java",
                "@@ -0,0 +1,38 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkTarget;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.NoopBuildRuleWithDeclaredAndExtraDeps;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+",
                "+public abstract class CxxLuaExtension extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "+    implements NativeLinkTarget {",
                "+",
                "+  public CxxLuaExtension(",
                "+      BuildTarget buildTarget, ProjectFilesystem projectFilesystem, BuildRuleParams params) {",
                "+    super(buildTarget, projectFilesystem, params);",
                "+  }",
                "+",
                "+  public abstract String getModule(CxxPlatform cxxPlatform);",
                "+",
                "+  public abstract SourcePath getExtension(CxxPlatform cxxPlatform);",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/CxxLuaExtensionDescription.java b/src/com/facebook/buck/features/lua/CxxLuaExtensionDescription.java",
                "new file mode 100644",
                "index 0000000000..6174dff5f8",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/CxxLuaExtensionDescription.java",
                "@@ -0,0 +1,398 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.cxx.CxxConstructorArg;",
                "+import com.facebook.buck.cxx.CxxDescriptionEnhancer;",
                "+import com.facebook.buck.cxx.CxxFlags;",
                "+import com.facebook.buck.cxx.CxxLinkOptions;",
                "+import com.facebook.buck.cxx.CxxLinkableEnhancer;",
                "+import com.facebook.buck.cxx.CxxPreprocessAndCompile;",
                "+import com.facebook.buck.cxx.CxxPreprocessables;",
                "+import com.facebook.buck.cxx.CxxPreprocessorInput;",
                "+import com.facebook.buck.cxx.CxxSource;",
                "+import com.facebook.buck.cxx.CxxSourceRuleFactory;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                "+import com.facebook.buck.cxx.toolchain.HeaderSymlinkTree;",
                "+import com.facebook.buck.cxx.toolchain.HeaderVisibility;",
                "+import com.facebook.buck.cxx.toolchain.LinkerMapMode;",
                "+import com.facebook.buck.cxx.toolchain.PicType;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkTargetMode;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.model.Flavored;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleCreationContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.ImplicitDepsInferringDescription;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.SymlinkTree;",
                "+import com.facebook.buck.rules.args.Arg;",
                "+import com.facebook.buck.rules.args.SourcePathArg;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.facebook.buck.util.Optionals;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.facebook.buck.versions.VersionPropagator;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.collect.ImmutableCollection;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableListMultimap;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableMultimap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.Multimaps;",
                "+import java.io.File;",
                "+import java.nio.file.Path;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                "+import java.util.stream.Stream;",
                "+import org.immutables.value.Value;",
                "+",
                "+public class CxxLuaExtensionDescription",
                "+    implements Description<CxxLuaExtensionDescriptionArg>,",
                "+        ImplicitDepsInferringDescription<",
                "+            CxxLuaExtensionDescription.AbstractCxxLuaExtensionDescriptionArg>,",
                "+        VersionPropagator<CxxLuaExtensionDescriptionArg>,",
                "+        Flavored {",
                "+",
                "+  private final ToolchainProvider toolchainProvider;",
                "+  private final CxxBuckConfig cxxBuckConfig;",
                "+",
                "+  public CxxLuaExtensionDescription(",
                "+      ToolchainProvider toolchainProvider, CxxBuckConfig cxxBuckConfig) {",
                "+    this.toolchainProvider = toolchainProvider;",
                "+    this.cxxBuckConfig = cxxBuckConfig;",
                "+  }",
                "+",
                "+  private String getExtensionName(BuildTarget target, CxxPlatform cxxPlatform) {",
                "+    return String.format(\"%s.%s\", target.getShortName(), cxxPlatform.getSharedLibraryExtension());",
                "+  }",
                "+",
                "+  private BuildTarget getExtensionTarget(BuildTarget target, Flavor platform) {",
                "+    return target.withAppendedFlavors(platform);",
                "+  }",
                "+",
                "+  private Path getExtensionPath(",
                "+      ProjectFilesystem filesystem, BuildTarget target, CxxPlatform cxxPlatform) {",
                "+    return BuildTargets.getGenPath(",
                "+            filesystem, getExtensionTarget(target, cxxPlatform.getFlavor()), \"%s\")",
                "+        .resolve(getExtensionName(target, cxxPlatform));",
                "+  }",
                "+",
                "+  private ImmutableList<Arg> getExtensionArgs(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleResolver ruleResolver,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      CellPathResolver cellRoots,",
                "+      LuaPlatform luaPlatform,",
                "+      CxxLuaExtensionDescriptionArg args) {",
                "+",
                "+    CxxPlatform cxxPlatform = luaPlatform.getCxxPlatform();",
                "+",
                "+    // Extract all C/C++ sources from the constructor arg.",
                "+    ImmutableMap<String, CxxSource> srcs =",
                "+        CxxDescriptionEnhancer.parseCxxSources(",
                "+            buildTarget, ruleResolver, ruleFinder, pathResolver, cxxPlatform, args);",
                "+    ImmutableMap<Path, SourcePath> headers =",
                "+        CxxDescriptionEnhancer.parseHeaders(",
                "+            buildTarget, ruleResolver, ruleFinder, pathResolver, Optional.of(cxxPlatform), args);",
                "+",
                "+    // Setup the header symlink tree and combine all the preprocessor input from this rule",
                "+    // and all dependencies.",
                "+    HeaderSymlinkTree headerSymlinkTree =",
                "+        CxxDescriptionEnhancer.requireHeaderSymlinkTree(",
                "+            buildTarget,",
                "+            projectFilesystem,",
                "+            ruleFinder,",
                "+            ruleResolver,",
                "+            cxxPlatform,",
                "+            headers,",
                "+            HeaderVisibility.PRIVATE,",
                "+            true);",
                "+    Optional<SymlinkTree> sandboxTree = Optional.empty();",
                "+    if (cxxBuckConfig.sandboxSources()) {",
                "+      sandboxTree =",
                "+          CxxDescriptionEnhancer.createSandboxTree(buildTarget, ruleResolver, cxxPlatform);",
                "+    }",
                "+    ImmutableSet<BuildRule> deps = args.getCxxDeps().get(ruleResolver, cxxPlatform);",
                "+    ImmutableList<CxxPreprocessorInput> cxxPreprocessorInput =",
                "+        ImmutableList.<CxxPreprocessorInput>builder()",
                "+            .add(",
                "+                luaPlatform",
                "+                    .getLuaCxxLibrary(ruleResolver)",
                "+                    .getCxxPreprocessorInput(cxxPlatform, ruleResolver))",
                "+            .addAll(",
                "+                CxxDescriptionEnhancer.collectCxxPreprocessorInput(",
                "+                    buildTarget,",
                "+                    cxxPlatform,",
                "+                    ruleResolver,",
                "+                    deps,",
                "+                    ImmutableListMultimap.copyOf(",
                "+                        Multimaps.transformValues(",
                "+                            CxxFlags.getLanguageFlagsWithMacros(",
                "+                                args.getPreprocessorFlags(),",
                "+                                args.getPlatformPreprocessorFlags(),",
                "+                                args.getLangPreprocessorFlags(),",
                "+                                cxxPlatform),",
                "+                            f ->",
                "+                                CxxDescriptionEnhancer.toStringWithMacrosArgs(",
                "+                                    buildTarget, cellRoots, ruleResolver, cxxPlatform, f))),",
                "+                    ImmutableList.of(headerSymlinkTree),",
                "+                    ImmutableSet.of(),",
                "+                    CxxPreprocessables.getTransitiveCxxPreprocessorInput(",
                "+                        cxxPlatform, ruleResolver, deps),",
                "+                    args.getIncludeDirs(),",
                "+                    sandboxTree,",
                "+                    args.getRawHeaders()))",
                "+            .build();",
                "+",
                "+    // Generate rule to build the object files.",
                "+    ImmutableMultimap<CxxSource.Type, Arg> compilerFlags =",
                "+        ImmutableListMultimap.copyOf(",
                "+            Multimaps.transformValues(",
                "+                CxxFlags.getLanguageFlagsWithMacros(",
                "+                    args.getCompilerFlags(),",
                "+                    args.getPlatformCompilerFlags(),",
                "+                    args.getLangCompilerFlags(),",
                "+                    cxxPlatform),",
                "+                f ->",
                "+                    CxxDescriptionEnhancer.toStringWithMacrosArgs(",
                "+                        buildTarget, cellRoots, ruleResolver, cxxPlatform, f)));",
                "+    ImmutableMap<CxxPreprocessAndCompile, SourcePath> picObjects =",
                "+        CxxSourceRuleFactory.of(",
                "+                projectFilesystem,",
                "+                buildTarget,",
                "+                ruleResolver,",
                "+                pathResolver,",
                "+                ruleFinder,",
                "+                cxxBuckConfig,",
                "+                cxxPlatform,",
                "+                cxxPreprocessorInput,",
                "+                compilerFlags,",
                "+                args.getPrefixHeader(),",
                "+                args.getPrecompiledHeader(),",
                "+                PicType.PIC,",
                "+                sandboxTree)",
                "+            .requirePreprocessAndCompileRules(srcs);",
                "+",
                "+    ImmutableList.Builder<Arg> argsBuilder = ImmutableList.builder();",
                "+    CxxFlags.getFlagsWithMacrosWithPlatformMacroExpansion(",
                "+            args.getLinkerFlags(), args.getPlatformLinkerFlags(), cxxPlatform)",
                "+        .stream()",
                "+        .map(",
                "+            f ->",
                "+                CxxDescriptionEnhancer.toStringWithMacrosArgs(",
                "+                    buildTarget, cellRoots, ruleResolver, cxxPlatform, f))",
                "+        .forEach(argsBuilder::add);",
                "+",
                "+    // Add object files into the args.",
                "+    argsBuilder.addAll(SourcePathArg.from(picObjects.values()));",
                "+",
                "+    return argsBuilder.build();",
                "+  }",
                "+",
                "+  private BuildRule createExtensionBuildRule(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleResolver ruleResolver,",
                "+      CellPathResolver cellRoots,",
                "+      LuaPlatform luaPlatform,",
                "+      CxxLuaExtensionDescriptionArg args) {",
                "+    CxxPlatform cxxPlatform = luaPlatform.getCxxPlatform();",
                "+    if (buildTarget.getFlavors().contains(CxxDescriptionEnhancer.SANDBOX_TREE_FLAVOR)) {",
                "+      return CxxDescriptionEnhancer.createSandboxTreeBuildRule(",
                "+          ruleResolver, args, cxxPlatform, buildTarget, projectFilesystem);",
                "+    }",
                "+    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(ruleResolver);",
                "+    SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);",
                "+    String extensionName = getExtensionName(buildTarget, cxxPlatform);",
                "+    Path extensionPath = getExtensionPath(projectFilesystem, buildTarget, cxxPlatform);",
                "+    return CxxLinkableEnhancer.createCxxLinkableBuildRule(",
                "+        cxxBuckConfig,",
                "+        cxxPlatform,",
                "+        projectFilesystem,",
                "+        ruleResolver,",
                "+        pathResolver,",
                "+        ruleFinder,",
                "+        getExtensionTarget(buildTarget, cxxPlatform.getFlavor()),",
                "+        Linker.LinkType.SHARED,",
                "+        Optional.of(extensionName),",
                "+        extensionPath,",
                "+        args.getLinkerExtraOutputs(),",
                "+        Linker.LinkableDepType.SHARED,",
                "+        CxxLinkOptions.of(),",
                "+        RichStream.from(args.getCxxDeps().get(ruleResolver, cxxPlatform))",
                "+            .filter(NativeLinkable.class)",
                "+            .concat(Stream.of(luaPlatform.getLuaCxxLibrary(ruleResolver)))",
                "+            .toImmutableList(),",
                "+        args.getCxxRuntimeType(),",
                "+        Optional.empty(),",
                "+        ImmutableSet.of(),",
                "+        ImmutableSet.of(),",
                "+        NativeLinkableInput.builder()",
                "+            .setArgs(",
                "+                getExtensionArgs(",
                "+                    buildTarget.withoutFlavors(LinkerMapMode.NO_LINKER_MAP.getFlavor()),",
                "+                    projectFilesystem,",
                "+                    ruleResolver,",
                "+                    pathResolver,",
                "+                    ruleFinder,",
                "+                    cellRoots,",
                "+                    luaPlatform,",
                "+                    args))",
                "+            .build(),",
                "+        Optional.empty(),",
                "+        cellRoots);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Class<CxxLuaExtensionDescriptionArg> getConstructorArgType() {",
                "+    return CxxLuaExtensionDescriptionArg.class;",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuildRule createBuildRule(",
                "+      BuildRuleCreationContext context,",
                "+      BuildTarget buildTarget,",
                "+      BuildRuleParams params,",
                "+      CxxLuaExtensionDescriptionArg args) {",
                "+    BuildRuleResolver resolver = context.getBuildRuleResolver();",
                "+    FlavorDomain<LuaPlatform> luaPlatforms = getLuaPlatformsProvider().getLuaPlatforms();",
                "+    ProjectFilesystem projectFilesystem = context.getProjectFilesystem();",
                "+    CellPathResolver cellRoots = context.getCellPathResolver();",
                "+",
                "+    // See if we're building a particular \"type\" of this library, and if so, extract",
                "+    // it as an enum.",
                "+    Optional<Map.Entry<Flavor, LuaPlatform>> platform = luaPlatforms.getFlavorAndValue(buildTarget);",
                "+",
                "+    // If a C/C++ platform is specified, then build an extension with it.",
                "+    if (platform.isPresent()) {",
                "+      return createExtensionBuildRule(",
                "+          buildTarget, projectFilesystem, resolver, cellRoots, platform.get().getValue(), args);",
                "+    }",
                "+",
                "+    // Otherwise, we return the generic placeholder of this library, that dependents can use",
                "+    // get the real build rules via querying the action graph.",
                "+    return new CxxLuaExtension(buildTarget, projectFilesystem, params) {",
                "+",
                "+      @Override",
                "+      public String getModule(CxxPlatform cxxPlatform) {",
                "+        String baseModule = LuaUtil.getBaseModule(buildTarget, args.getBaseModule());",
                "+        String name = getExtensionName(buildTarget, cxxPlatform);",
                "+        return baseModule.isEmpty() ? name : baseModule + File.separator + name;",
                "+      }",
                "+",
                "+      @Override",
                "+      public SourcePath getExtension(CxxPlatform cxxPlatform) {",
                "+        BuildRule rule =",
                "+            resolver.requireRule(getBuildTarget().withAppendedFlavors(cxxPlatform.getFlavor()));",
                "+        return Preconditions.checkNotNull(rule.getSourcePathToOutput());",
                "+      }",
                "+",
                "+      @Override",
                "+      public NativeLinkTargetMode getNativeLinkTargetMode(CxxPlatform cxxPlatform) {",
                "+        return NativeLinkTargetMode.library();",
                "+      }",
                "+",
                "+      @Override",
                "+      public Iterable<? extends NativeLinkable> getNativeLinkTargetDeps(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+        return RichStream.from(args.getCxxDeps().get(resolver, cxxPlatform))",
                "+            .filter(NativeLinkable.class)",
                "+            .toImmutableList();",
                "+      }",
                "+",
                "+      @Override",
                "+      public NativeLinkableInput getNativeLinkTargetInput(",
                "+          CxxPlatform cxxPlatform,",
                "+          BuildRuleResolver ruleResolver,",
                "+          SourcePathResolver pathResolver,",
                "+          SourcePathRuleFinder ruleFinder) {",
                "+        return NativeLinkableInput.builder()",
                "+            .addAllArgs(",
                "+                getExtensionArgs(",
                "+                    buildTarget,",
                "+                    projectFilesystem,",
                "+                    resolver,",
                "+                    pathResolver,",
                "+                    ruleFinder,",
                "+                    cellRoots,",
                "+                    luaPlatforms.getValue(cxxPlatform.getFlavor()),",
                "+                    args))",
                "+            .addAllFrameworks(args.getFrameworks())",
                "+            .build();",
                "+      }",
                "+",
                "+      @Override",
                "+      public Optional<Path> getNativeLinkTargetOutputPath(CxxPlatform cxxPlatform) {",
                "+        return Optional.empty();",
                "+      }",
                "+    };",
                "+  }",
                "+",
                "+  @Override",
                "+  public void findDepsForTargetFromConstructorArgs(",
                "+      BuildTarget buildTarget,",
                "+      CellPathResolver cellRoots,",
                "+      AbstractCxxLuaExtensionDescriptionArg constructorArg,",
                "+      ImmutableCollection.Builder<BuildTarget> extraDepsBuilder,",
                "+      ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "+",
                "+    for (LuaPlatform luaPlatform : getLuaPlatformsProvider().getLuaPlatforms().getValues()) {",
                "+",
                "+      // Add deps from lua C/C++ library.",
                "+      Optionals.addIfPresent(luaPlatform.getLuaCxxLibraryTarget(), extraDepsBuilder);",
                "+",
                "+      // Get any parse time deps from the C/C++ platforms.",
                "+      targetGraphOnlyDepsBuilder.addAll(",
                "+          CxxPlatforms.getParseTimeDeps(luaPlatform.getCxxPlatform()));",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public Optional<ImmutableSet<FlavorDomain<?>>> flavorDomains() {",
                "+    return Optional.of(ImmutableSet.of(getLuaPlatformsProvider().getLuaPlatforms()));",
                "+  }",
                "+",
                "+  private LuaPlatformsProvider getLuaPlatformsProvider() {",
                "+    return toolchainProvider.getByName(",
                "+        LuaPlatformsProvider.DEFAULT_NAME, LuaPlatformsProvider.class);",
                "+  }",
                "+",
                "+  @BuckStyleImmutable",
                "+  @Value.Immutable",
                "+  interface AbstractCxxLuaExtensionDescriptionArg extends CxxConstructorArg {",
                "+    Optional<String> getBaseModule();",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/LuaBinary.java b/src/com/facebook/buck/features/lua/LuaBinary.java",
                "new file mode 100644",
                "index 0000000000..ba923ade94",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/LuaBinary.java",
                "@@ -0,0 +1,113 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.AbstractBuildRuleWithDeclaredAndExtraDeps;",
                "+import com.facebook.buck.rules.BinaryBuildRule;",
                "+import com.facebook.buck.rules.BuildContext;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildableContext;",
                "+import com.facebook.buck.rules.BuildableSupport;",
                "+import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.HasRuntimeDeps;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.step.Step;",
                "+import com.google.common.annotations.VisibleForTesting;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.collect.ImmutableList;",
                "+import java.nio.file.Path;",
                "+import java.util.stream.Stream;",
                "+",
                "+public class LuaBinary extends AbstractBuildRuleWithDeclaredAndExtraDeps",
                "+    implements BinaryBuildRule, HasRuntimeDeps {",
                "+",
                "+  private final Path output;",
                "+  private final Tool wrappedBinary;",
                "+  private final String mainModule;",
                "+  private final LuaPackageComponents components;",
                "+  private final Tool lua;",
                "+  private final LuaPlatform.PackageStyle packageStyle;",
                "+",
                "+  public LuaBinary(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams buildRuleParams,",
                "+      Path output,",
                "+      Tool wrappedBinary,",
                "+      String mainModule,",
                "+      LuaPackageComponents components,",
                "+      Tool lua,",
                "+      LuaPlatform.PackageStyle packageStyle) {",
                "+    super(buildTarget, projectFilesystem, buildRuleParams);",
                "+    Preconditions.checkArgument(!output.isAbsolute());",
                "+    this.output = output;",
                "+    this.wrappedBinary = wrappedBinary;",
                "+    this.mainModule = mainModule;",
                "+    this.components = components;",
                "+    this.lua = lua;",
                "+    this.packageStyle = packageStyle;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Tool getExecutableCommand() {",
                "+    return wrappedBinary;",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean outputFileCanBeCopied() {",
                "+    return packageStyle != LuaPlatform.PackageStyle.INPLACE;",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableList<Step> getBuildSteps(",
                "+      BuildContext context, BuildableContext buildableContext) {",
                "+    return ImmutableList.of();",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath getSourcePathToOutput() {",
                "+    return ExplicitBuildTargetSourcePath.of(getBuildTarget(), output);",
                "+  }",
                "+",
                "+  @VisibleForTesting",
                "+  String getMainModule() {",
                "+    return mainModule;",
                "+  }",
                "+",
                "+  @VisibleForTesting",
                "+  LuaPackageComponents getComponents() {",
                "+    return components;",
                "+  }",
                "+",
                "+  @VisibleForTesting",
                "+  Tool getLua() {",
                "+    return lua;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Stream<BuildTarget> getRuntimeDeps(SourcePathRuleFinder ruleFinder) {",
                "+    return Stream.concat(",
                "+            getDeclaredDeps().stream(),",
                "+            BuildableSupport.getDepsCollection(wrappedBinary, ruleFinder).stream())",
                "+        .map(BuildRule::getBuildTarget);",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/LuaBinaryDescription.java b/src/com/facebook/buck/features/lua/LuaBinaryDescription.java",
                "new file mode 100644",
                "index 0000000000..d86ec9c630",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/LuaBinaryDescription.java",
                "@@ -0,0 +1,876 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.cxx.Omnibus;",
                "+import com.facebook.buck.cxx.OmnibusLibraries;",
                "+import com.facebook.buck.cxx.OmnibusLibrary;",
                "+import com.facebook.buck.cxx.OmnibusRoot;",
                "+import com.facebook.buck.cxx.OmnibusRoots;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkStrategy;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkTarget;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkTargetMode;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkables;",
                "+import com.facebook.buck.graph.AbstractBreadthFirstTraversal;",
                "+import com.facebook.buck.io.file.MorePaths;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.model.InternalFlavor;",
                "+import com.facebook.buck.python.CxxPythonExtension;",
                "+import com.facebook.buck.python.PythonBinaryDescription;",
                "+import com.facebook.buck.python.PythonPackagable;",
                "+import com.facebook.buck.python.PythonPackageComponents;",
                "+import com.facebook.buck.python.toolchain.PythonPlatform;",
                "+import com.facebook.buck.python.toolchain.PythonPlatformsProvider;",
                "+import com.facebook.buck.rules.AddToRuleKey;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleCreationContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.BuildableSupport;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                "+import com.facebook.buck.rules.CommandTool;",
                "+import com.facebook.buck.rules.CommonDescriptionArg;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.HasDeclaredDeps;",
                "+import com.facebook.buck.rules.ImplicitDepsInferringDescription;",
                "+import com.facebook.buck.rules.NonHashableSourcePathContainer;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.SymlinkTree;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.rules.args.SourcePathArg;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.facebook.buck.util.HumanReadableException;",
                "+import com.facebook.buck.util.MoreMaps;",
                "+import com.facebook.buck.util.Optionals;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.facebook.buck.versions.VersionRoot;",
                "+import com.google.common.annotations.VisibleForTesting;",
                "+import com.google.common.base.Joiner;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.base.Splitter;",
                "+import com.google.common.collect.ImmutableCollection;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableMultimap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import com.google.common.collect.Iterables;",
                "+import com.google.common.collect.Maps;",
                "+import java.nio.file.Path;",
                "+import java.util.ArrayList;",
                "+import java.util.HashMap;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "+import org.immutables.value.Value;",
                "+",
                "+public class LuaBinaryDescription",
                "+    implements Description<LuaBinaryDescriptionArg>,",
                "+        ImplicitDepsInferringDescription<LuaBinaryDescription.AbstractLuaBinaryDescriptionArg>,",
                "+        VersionRoot<LuaBinaryDescriptionArg> {",
                "+",
                "+  private static final Flavor BINARY_FLAVOR = InternalFlavor.of(\"binary\");",
                "+",
                "+  private final ToolchainProvider toolchainProvider;",
                "+  private final CxxBuckConfig cxxBuckConfig;",
                "+",
                "+  public LuaBinaryDescription(ToolchainProvider toolchainProvider, CxxBuckConfig cxxBuckConfig) {",
                "+    this.toolchainProvider = toolchainProvider;",
                "+    this.cxxBuckConfig = cxxBuckConfig;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Class<LuaBinaryDescriptionArg> getConstructorArgType() {",
                "+    return LuaBinaryDescriptionArg.class;",
                "+  }",
                "+",
                "+  @VisibleForTesting",
                "+  protected static BuildTarget getNativeLibsSymlinkTreeTarget(BuildTarget target) {",
                "+    return target.withAppendedFlavors(InternalFlavor.of(\"native-libs-link-tree\"));",
                "+  }",
                "+",
                "+  private static Path getNativeLibsSymlinkTreeRoot(",
                "+      BuildTarget target, ProjectFilesystem filesystem) {",
                "+    return BuildTargets.getGenPath(filesystem, getNativeLibsSymlinkTreeTarget(target), \"%s\");",
                "+  }",
                "+",
                "+  private static BuildTarget getModulesSymlinkTreeTarget(BuildTarget target) {",
                "+    return target.withAppendedFlavors(InternalFlavor.of(\"modules-link-tree\"));",
                "+  }",
                "+",
                "+  private static Path getModulesSymlinkTreeRoot(BuildTarget target, ProjectFilesystem filesystem) {",
                "+    return BuildTargets.getGenPath(filesystem, getModulesSymlinkTreeTarget(target), \"%s\");",
                "+  }",
                "+",
                "+  private static BuildTarget getPythonModulesSymlinkTreeTarget(BuildTarget target) {",
                "+    return target.withAppendedFlavors(InternalFlavor.of(\"python-modules-link-tree\"));",
                "+  }",
                "+",
                "+  private static Path getPythonModulesSymlinkTreeRoot(",
                "+      BuildTarget target, ProjectFilesystem filesystem) {",
                "+    return BuildTargets.getGenPath(filesystem, getPythonModulesSymlinkTreeTarget(target), \"%s\");",
                "+  }",
                "+",
                "+  private Path getOutputPath(",
                "+      BuildTarget target, ProjectFilesystem filesystem, LuaPlatform luaPlatform) {",
                "+    return BuildTargets.getGenPath(filesystem, target, \"%s\" + luaPlatform.getExtension());",
                "+  }",
                "+",
                "+  private Iterable<BuildTarget> getNativeStarterDepTargets(LuaPlatform luaPlatform) {",
                "+    Optional<BuildTarget> nativeStarterLibrary = luaPlatform.getNativeStarterLibrary();",
                "+    return nativeStarterLibrary.isPresent()",
                "+        ? ImmutableSet.of(nativeStarterLibrary.get())",
                "+        : Optionals.toStream(luaPlatform.getLuaCxxLibraryTarget())",
                "+            .collect(ImmutableSet.toImmutableSet());",
                "+  }",
                "+",
                "+  private Starter getStarter(",
                "+      CellPathResolver cellPathResolver,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildTarget baseTarget,",
                "+      BuildRuleParams baseParams,",
                "+      BuildRuleResolver ruleResolver,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      LuaPlatform luaPlatform,",
                "+      BuildTarget target,",
                "+      Path output,",
                "+      StarterType starterType,",
                "+      Optional<BuildTarget> nativeStarterLibrary,",
                "+      String mainModule,",
                "+      Optional<Path> relativeModulesDir,",
                "+      Optional<Path> relativePythonModulesDir,",
                "+      Optional<Path> relativeNativeLibsDir) {",
                "+    switch (starterType) {",
                "+      case PURE:",
                "+        if (relativeNativeLibsDir.isPresent()) {",
                "+          throw new HumanReadableException(",
                "+              \"%s: cannot use pure starter with native libraries\", baseTarget);",
                "+        }",
                "+        return LuaScriptStarter.of(",
                "+            projectFilesystem,",
                "+            baseTarget,",
                "+            baseParams,",
                "+            ruleResolver,",
                "+            pathResolver,",
                "+            ruleFinder,",
                "+            luaPlatform,",
                "+            target,",
                "+            output,",
                "+            mainModule,",
                "+            relativeModulesDir,",
                "+            relativePythonModulesDir);",
                "+      case NATIVE:",
                "+        return NativeExecutableStarter.of(",
                "+            projectFilesystem,",
                "+            baseTarget,",
                "+            baseParams,",
                "+            ruleResolver,",
                "+            pathResolver,",
                "+            ruleFinder,",
                "+            cellPathResolver,",
                "+            luaPlatform,",
                "+            cxxBuckConfig,",
                "+            target,",
                "+            output,",
                "+            mainModule,",
                "+            nativeStarterLibrary,",
                "+            relativeModulesDir,",
                "+            relativePythonModulesDir,",
                "+            relativeNativeLibsDir);",
                "+    }",
                "+    throw new IllegalStateException(",
                "+        String.format(\"%s: unexpected starter type %s\", baseTarget, luaPlatform.getStarterType()));",
                "+  }",
                "+",
                "+  private StarterType getStarterType(LuaPlatform luaPlatform, boolean mayHaveNativeCode) {",
                "+    return luaPlatform",
                "+        .getStarterType()",
                "+        .orElse(mayHaveNativeCode ? StarterType.NATIVE : StarterType.PURE);",
                "+  }",
                "+",
                "+  /** @return the {@link Starter} used to build the Lua binary entry point. */",
                "+  private Starter createStarter(",
                "+      CellPathResolver cellPathResolver,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildTarget baseTarget,",
                "+      BuildRuleParams baseParams,",
                "+      BuildRuleResolver ruleResolver,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      LuaPlatform luaPlatform,",
                "+      Optional<BuildTarget> nativeStarterLibrary,",
                "+      String mainModule,",
                "+      LuaPlatform.PackageStyle packageStyle,",
                "+      boolean mayHaveNativeCode) {",
                "+",
                "+    Path output = getOutputPath(baseTarget, projectFilesystem, luaPlatform);",
                "+    StarterType starterType = getStarterType(luaPlatform, mayHaveNativeCode);",
                "+",
                "+    // The relative paths from the starter to the various components.",
                "+    Optional<Path> relativeModulesDir = Optional.empty();",
                "+    Optional<Path> relativePythonModulesDir = Optional.empty();",
                "+    Optional<Path> relativeNativeLibsDir = Optional.empty();",
                "+",
                "+    // For in-place binaries, set the relative paths to the symlink trees holding the components.",
                "+    if (packageStyle == LuaPlatform.PackageStyle.INPLACE) {",
                "+      relativeModulesDir =",
                "+          Optional.of(",
                "+              output",
                "+                  .getParent()",
                "+                  .relativize(getModulesSymlinkTreeRoot(baseTarget, projectFilesystem)));",
                "+      relativePythonModulesDir =",
                "+          Optional.of(",
                "+              output",
                "+                  .getParent()",
                "+                  .relativize(getPythonModulesSymlinkTreeRoot(baseTarget, projectFilesystem)));",
                "+",
                "+      // We only need to setup a native lib link tree if we're using a native starter.",
                "+      if (starterType == StarterType.NATIVE) {",
                "+        relativeNativeLibsDir =",
                "+            Optional.of(",
                "+                output",
                "+                    .getParent()",
                "+                    .relativize(getNativeLibsSymlinkTreeRoot(baseTarget, projectFilesystem)));",
                "+      }",
                "+    }",
                "+",
                "+    // Build the starter.",
                "+    return getStarter(",
                "+        cellPathResolver,",
                "+        projectFilesystem,",
                "+        baseTarget,",
                "+        baseParams,",
                "+        ruleResolver,",
                "+        pathResolver,",
                "+        ruleFinder,",
                "+        luaPlatform,",
                "+        baseTarget.withAppendedFlavors(",
                "+            packageStyle == LuaPlatform.PackageStyle.STANDALONE",
                "+                ? InternalFlavor.of(\"starter\")",
                "+                : BINARY_FLAVOR),",
                "+        packageStyle == LuaPlatform.PackageStyle.STANDALONE",
                "+            ? output.resolveSibling(output.getFileName() + \"-starter\")",
                "+            : output,",
                "+        starterType,",
                "+        nativeStarterLibrary,",
                "+        mainModule,",
                "+        relativeModulesDir,",
                "+        relativePythonModulesDir,",
                "+        relativeNativeLibsDir);",
                "+  }",
                "+",
                "+  private LuaBinaryPackageComponents getPackageComponentsFromDeps(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams baseParams,",
                "+      BuildRuleResolver ruleResolver,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      LuaPlatform luaPlatform,",
                "+      PythonPlatform pythonPlatform,",
                "+      Optional<BuildTarget> nativeStarterLibrary,",
                "+      String mainModule,",
                "+      LuaPlatform.PackageStyle packageStyle,",
                "+      Iterable<BuildRule> deps,",
                "+      CellPathResolver cellPathResolver) {",
                "+",
                "+    CxxPlatform cxxPlatform = luaPlatform.getCxxPlatform();",
                "+",
                "+    LuaPackageComponents.Builder builder = LuaPackageComponents.builder();",
                "+    OmnibusRoots.Builder omnibusRoots =",
                "+        OmnibusRoots.builder(cxxPlatform, ImmutableSet.of(), ruleResolver);",
                "+",
                "+    Map<BuildTarget, NativeLinkable> nativeLinkableRoots = new LinkedHashMap<>();",
                "+    Map<BuildTarget, CxxLuaExtension> luaExtensions = new LinkedHashMap<>();",
                "+    Map<BuildTarget, CxxPythonExtension> pythonExtensions = new LinkedHashMap<>();",
                "+",
                "+    // Walk the deps to find all Lua packageables and native linkables.",
                "+    new AbstractBreadthFirstTraversal<BuildRule>(deps) {",
                "+      private final ImmutableSet<BuildRule> empty = ImmutableSet.of();",
                "+",
                "+      @Override",
                "+      public Iterable<BuildRule> visit(BuildRule rule) {",
                "+        Iterable<BuildRule> deps = empty;",
                "+        if (rule instanceof LuaPackageable) {",
                "+          LuaPackageable packageable = (LuaPackageable) rule;",
                "+          LuaPackageComponents components = packageable.getLuaPackageComponents();",
                "+          LuaPackageComponents.addComponents(builder, components);",
                "+          deps = packageable.getLuaPackageDeps(cxxPlatform);",
                "+          if (components.hasNativeCode(cxxPlatform)) {",
                "+            for (BuildRule dep : deps) {",
                "+              if (dep instanceof NativeLinkable) {",
                "+                NativeLinkable linkable = (NativeLinkable) dep;",
                "+                nativeLinkableRoots.put(linkable.getBuildTarget(), linkable);",
                "+                omnibusRoots.addExcludedRoot(linkable);",
                "+              }",
                "+            }",
                "+          }",
                "+        } else if (rule instanceof CxxPythonExtension) {",
                "+          CxxPythonExtension extension = (CxxPythonExtension) rule;",
                "+          NativeLinkTarget target = extension.getNativeLinkTarget(pythonPlatform);",
                "+          pythonExtensions.put(target.getBuildTarget(), (CxxPythonExtension) rule);",
                "+          omnibusRoots.addIncludedRoot(target);",
                "+        } else if (rule instanceof PythonPackagable) {",
                "+          PythonPackagable packageable = (PythonPackagable) rule;",
                "+          PythonPackageComponents components =",
                "+              packageable.getPythonPackageComponents(pythonPlatform, cxxPlatform, ruleResolver);",
                "+          builder.putAllPythonModules(",
                "+              MoreMaps.transformKeys(components.getModules(), Object::toString));",
                "+          builder.putAllNativeLibraries(",
                "+              MoreMaps.transformKeys(components.getNativeLibraries(), Object::toString));",
                "+          deps = packageable.getPythonPackageDeps(pythonPlatform, cxxPlatform, ruleResolver);",
                "+          if (components.hasNativeCode(cxxPlatform)) {",
                "+            for (BuildRule dep : deps) {",
                "+              if (dep instanceof NativeLinkable) {",
                "+                NativeLinkable linkable = (NativeLinkable) dep;",
                "+                nativeLinkableRoots.put(linkable.getBuildTarget(), linkable);",
                "+                omnibusRoots.addExcludedRoot(linkable);",
                "+              }",
                "+            }",
                "+          }",
                "+        } else if (rule instanceof CxxLuaExtension) {",
                "+          CxxLuaExtension extension = (CxxLuaExtension) rule;",
                "+          luaExtensions.put(extension.getBuildTarget(), extension);",
                "+          omnibusRoots.addIncludedRoot(extension);",
                "+        } else if (rule instanceof NativeLinkable) {",
                "+          NativeLinkable linkable = (NativeLinkable) rule;",
                "+          nativeLinkableRoots.put(linkable.getBuildTarget(), linkable);",
                "+          omnibusRoots.addPotentialRoot(linkable);",
                "+        }",
                "+        return deps;",
                "+      }",
                "+    }.start();",
                "+",
                "+    // Build the starter.",
                "+    Starter starter =",
                "+        createStarter(",
                "+            cellPathResolver,",
                "+            projectFilesystem,",
                "+            buildTarget,",
                "+            baseParams,",
                "+            ruleResolver,",
                "+            pathResolver,",
                "+            ruleFinder,",
                "+            luaPlatform,",
                "+            nativeStarterLibrary,",
                "+            mainModule,",
                "+            packageStyle,",
                "+            !nativeLinkableRoots.isEmpty() || !omnibusRoots.isEmpty());",
                "+    SourcePath starterPath = null;",
                "+",
                "+    if (luaPlatform.getNativeLinkStrategy() == NativeLinkStrategy.MERGED) {",
                "+",
                "+      // If we're using a native starter, include it in omnibus linking.",
                "+      if (starter instanceof NativeExecutableStarter) {",
                "+        NativeExecutableStarter nativeStarter = (NativeExecutableStarter) starter;",
                "+        omnibusRoots.addIncludedRoot(nativeStarter);",
                "+      }",
                "+",
                "+      // Build the omnibus libraries.",
                "+      OmnibusRoots roots = omnibusRoots.build();",
                "+      OmnibusLibraries libraries =",
                "+          Omnibus.getSharedLibraries(",
                "+              buildTarget,",
                "+              projectFilesystem,",
                "+              baseParams,",
                "+              cellPathResolver,",
                "+              ruleResolver,",
                "+              ruleFinder,",
                "+              cxxBuckConfig,",
                "+              cxxPlatform,",
                "+              ImmutableList.of(),",
                "+              roots.getIncludedRoots().values(),",
                "+              roots.getExcludedRoots().values());",
                "+",
                "+      // Add all the roots from the omnibus link.  If it's an extension, add it as a module.",
                "+      for (Map.Entry<BuildTarget, OmnibusRoot> root : libraries.getRoots().entrySet()) {",
                "+",
                "+        // If it's a Lua extension add it as a module.",
                "+        CxxLuaExtension luaExtension = luaExtensions.get(root.getKey());",
                "+        if (luaExtension != null) {",
                "+          builder.putModules(luaExtension.getModule(cxxPlatform), root.getValue().getPath());",
                "+          continue;",
                "+        }",
                "+",
                "+        // If it's a Python extension, add it as a python module.",
                "+        CxxPythonExtension pythonExtension = pythonExtensions.get(root.getKey());",
                "+        if (pythonExtension != null) {",
                "+          builder.putPythonModules(",
                "+              pythonExtension.getModule().toString(), root.getValue().getPath());",
                "+          continue;",
                "+        }",
                "+",
                "+        // A root named after the top-level target is our native starter.",
                "+        if (root.getKey().equals(buildTarget)) {",
                "+          starterPath = root.getValue().getPath();",
                "+          continue;",
                "+        }",
                "+",
                "+        // Otherwise, add it as a native library.",
                "+        NativeLinkTarget target =",
                "+            Preconditions.checkNotNull(",
                "+                roots.getIncludedRoots().get(root.getKey()),",
                "+                \"%s: linked unexpected omnibus root: %s\",",
                "+                buildTarget,",
                "+                root.getKey());",
                "+        NativeLinkTargetMode mode = target.getNativeLinkTargetMode(cxxPlatform);",
                "+        String soname =",
                "+            Preconditions.checkNotNull(",
                "+                mode.getLibraryName().orElse(null),",
                "+                \"%s: omnibus library for %s was built without soname\",",
                "+                buildTarget,",
                "+                root.getKey());",
                "+        builder.putNativeLibraries(soname, root.getValue().getPath());",
                "+      }",
                "+",
                "+      // Add all remaining libraries as native libraries.",
                "+      for (OmnibusLibrary library : libraries.getLibraries()) {",
                "+        builder.putNativeLibraries(library.getSoname(), library.getPath());",
                "+      }",
                "+",
                "+    } else {",
                "+",
                "+      // For regular linking, add all Lua extensions as modules and their deps as native linkable",
                "+      // roots.",
                "+      for (Map.Entry<BuildTarget, CxxLuaExtension> entry : luaExtensions.entrySet()) {",
                "+        CxxLuaExtension extension = entry.getValue();",
                "+        builder.putModules(extension.getModule(cxxPlatform), extension.getExtension(cxxPlatform));",
                "+        nativeLinkableRoots.putAll(",
                "+            Maps.uniqueIndex(",
                "+                extension.getNativeLinkTargetDeps(cxxPlatform, ruleResolver),",
                "+                NativeLinkable::getBuildTarget));",
                "+      }",
                "+",
                "+      // Add in native executable deps.",
                "+      if (starter instanceof NativeExecutableStarter) {",
                "+        NativeExecutableStarter executableStarter = (NativeExecutableStarter) starter;",
                "+        nativeLinkableRoots.putAll(",
                "+            Maps.uniqueIndex(",
                "+                executableStarter.getNativeStarterDeps(), NativeLinkable::getBuildTarget));",
                "+      }",
                "+",
                "+      // For regular linking, add all extensions via the package components interface and their",
                "+      // python-platform specific deps to the native linkables.",
                "+      for (Map.Entry<BuildTarget, CxxPythonExtension> entry : pythonExtensions.entrySet()) {",
                "+        PythonPackageComponents components =",
                "+            entry.getValue().getPythonPackageComponents(pythonPlatform, cxxPlatform, ruleResolver);",
                "+        builder.putAllPythonModules(",
                "+            MoreMaps.transformKeys(components.getModules(), Object::toString));",
                "+        builder.putAllNativeLibraries(",
                "+            MoreMaps.transformKeys(components.getNativeLibraries(), Object::toString));",
                "+        nativeLinkableRoots.putAll(",
                "+            Maps.uniqueIndex(",
                "+                entry",
                "+                    .getValue()",
                "+                    .getNativeLinkTarget(pythonPlatform)",
                "+                    .getNativeLinkTargetDeps(cxxPlatform, ruleResolver),",
                "+                NativeLinkable::getBuildTarget));",
                "+      }",
                "+",
                "+      // Add shared libraries from all native linkables.",
                "+      for (NativeLinkable nativeLinkable :",
                "+          NativeLinkables.getTransitiveNativeLinkables(",
                "+                  cxxPlatform, ruleResolver, nativeLinkableRoots.values())",
                "+              .values()) {",
                "+        NativeLinkable.Linkage linkage =",
                "+            nativeLinkable.getPreferredLinkage(cxxPlatform, ruleResolver);",
                "+        if (linkage != NativeLinkable.Linkage.STATIC) {",
                "+          builder.putAllNativeLibraries(",
                "+              nativeLinkable.getSharedLibraries(cxxPlatform, ruleResolver));",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    // If an explicit starter path override hasn't been set (e.g. from omnibus linking), default to",
                "+    // building one directly from the starter.",
                "+    if (starterPath == null) {",
                "+      starterPath = starter.build();",
                "+    }",
                "+",
                "+    return LuaBinaryPackageComponents.of(starterPath, builder.build());",
                "+  }",
                "+",
                "+  private SymlinkTree createSymlinkTree(",
                "+      BuildTarget linkTreeTarget,",
                "+      ProjectFilesystem filesystem,",
                "+      BuildRuleResolver resolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      Path root,",
                "+      ImmutableMap<String, SourcePath> components) {",
                "+    return resolver.addToIndex(",
                "+        new SymlinkTree(",
                "+            \"lua_binary\",",
                "+            linkTreeTarget,",
                "+            filesystem,",
                "+            root,",
                "+            MoreMaps.transformKeys(components, MorePaths.toPathFn(root.getFileSystem())),",
                "+            ImmutableMultimap.of(),",
                "+            ruleFinder));",
                "+  }",
                "+",
                "+  /**",
                "+   * @return the native library map with additional entries for library names with the version",
                "+   *     suffix stripped (e.g. libfoo.so.1.0 -> libfoo.so) to appease LuaJIT, which wants to load",
                "+   *     libraries using the build-time name.",
                "+   */",
                "+  private ImmutableSortedMap<String, SourcePath> addVersionLessLibraries(",
                "+      CxxPlatform cxxPlatform, ImmutableSortedMap<String, SourcePath> libraries) {",
                "+    Pattern versionedExtension =",
                "+        Pattern.compile(",
                "+            Joiner.on(\"[.\\\\d]*\")",
                "+                .join(",
                "+                    Iterables.transform(",
                "+                        Splitter.on(\"%s\")",
                "+                            .split(cxxPlatform.getSharedLibraryVersionedExtensionFormat()),",
                "+                        input -> input.isEmpty() ? input : Pattern.quote(input))));",
                "+    Map<String, SourcePath> librariesPaths = new HashMap<>();",
                "+    for (Map.Entry<String, SourcePath> ent : libraries.entrySet()) {",
                "+      String name = ent.getKey();",
                "+",
                "+      if (librariesPaths.containsKey(name) && librariesPaths.get(name) != ent.getValue()) {",
                "+        throw new HumanReadableException(",
                "+            \"Library %s has multiple possible paths: %s and %s\",",
                "+            name, ent.getValue(), librariesPaths.get(name));",
                "+      }",
                "+",
                "+      librariesPaths.put(name, ent.getValue());",
                "+      Matcher matcher = versionedExtension.matcher(name);",
                "+      String versionLessName = matcher.replaceAll(cxxPlatform.getSharedLibraryExtension());",
                "+      if (!versionLessName.equals(ent.getKey()) && !libraries.containsKey(versionLessName)) {",
                "+        librariesPaths.put(versionLessName, ent.getValue());",
                "+      }",
                "+    }",
                "+    return ImmutableSortedMap.copyOf(librariesPaths);",
                "+  }",
                "+",
                "+  private Tool getInPlaceBinary(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleResolver resolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      CxxPlatform cxxPlatform,",
                "+      SourcePath starter,",
                "+      LuaPackageComponents components) {",
                "+    List<SourcePath> extraInputs = new ArrayList<>();",
                "+",
                "+    SymlinkTree modulesLinkTree =",
                "+        resolver.addToIndex(",
                "+            createSymlinkTree(",
                "+                getModulesSymlinkTreeTarget(buildTarget),",
                "+                projectFilesystem,",
                "+                resolver,",
                "+                ruleFinder,",
                "+                getModulesSymlinkTreeRoot(buildTarget, projectFilesystem),",
                "+                components.getModules()));",
                "+",
                "+    List<SymlinkTree> pythonModulesLinktree = new ArrayList<>();",
                "+    if (!components.getPythonModules().isEmpty()) {",
                "+      // Add in any missing init modules into the python components.",
                "+      SourcePath emptyInit =",
                "+          PythonBinaryDescription.createEmptyInitModule(buildTarget, projectFilesystem, resolver);",
                "+      extraInputs.add(emptyInit);",
                "+      ImmutableMap<String, SourcePath> pythonModules =",
                "+          MoreMaps.transformKeys(",
                "+              PythonBinaryDescription.addMissingInitModules(",
                "+                  MoreMaps.transformKeys(",
                "+                      components.getPythonModules(),",
                "+                      MorePaths.toPathFn(projectFilesystem.getRootPath().getFileSystem())),",
                "+                  emptyInit),",
                "+              Object::toString);",
                "+      SymlinkTree symlinkTree =",
                "+          resolver.addToIndex(",
                "+              createSymlinkTree(",
                "+                  getPythonModulesSymlinkTreeTarget(buildTarget),",
                "+                  projectFilesystem,",
                "+                  resolver,",
                "+                  ruleFinder,",
                "+                  getPythonModulesSymlinkTreeRoot(buildTarget, projectFilesystem),",
                "+                  pythonModules));",
                "+      pythonModulesLinktree.add(symlinkTree);",
                "+    }",
                "+",
                "+    List<SymlinkTree> nativeLibsLinktree = new ArrayList<>();",
                "+    if (!components.getNativeLibraries().isEmpty()) {",
                "+      SymlinkTree symlinkTree =",
                "+          resolver.addToIndex(",
                "+              createSymlinkTree(",
                "+                  getNativeLibsSymlinkTreeTarget(buildTarget),",
                "+                  projectFilesystem,",
                "+                  resolver,",
                "+                  ruleFinder,",
                "+                  getNativeLibsSymlinkTreeRoot(buildTarget, projectFilesystem),",
                "+                  addVersionLessLibraries(cxxPlatform, components.getNativeLibraries())));",
                "+      nativeLibsLinktree.add(symlinkTree);",
                "+    }",
                "+",
                "+    return new Tool() {",
                "+      @AddToRuleKey private final LuaPackageComponents toolComponents = components;",
                "+      @AddToRuleKey private final SourcePath toolStarter = starter;",
                "+",
                "+      @AddToRuleKey",
                "+      private final NonHashableSourcePathContainer toolModulesLinkTree =",
                "+          new NonHashableSourcePathContainer(modulesLinkTree.getSourcePathToOutput());",
                "+",
                "+      @AddToRuleKey",
                "+      private final List<NonHashableSourcePathContainer> toolNativeLibsLinkTree =",
                "+          nativeLibsLinktree",
                "+              .stream()",
                "+              .map(linkTree -> new NonHashableSourcePathContainer(linkTree.getSourcePathToOutput()))",
                "+              .collect(ImmutableList.toImmutableList());",
                "+",
                "+      @AddToRuleKey",
                "+      private final List<NonHashableSourcePathContainer> toolPythonModulesLinktree =",
                "+          pythonModulesLinktree",
                "+              .stream()",
                "+              .map(linkTree -> new NonHashableSourcePathContainer(linkTree.getSourcePathToOutput()))",
                "+              .collect(ImmutableList.toImmutableList());",
                "+",
                "+      @AddToRuleKey private final List<SourcePath> toolExtraInputs = extraInputs;",
                "+",
                "+      @Override",
                "+      public ImmutableList<String> getCommandPrefix(SourcePathResolver resolver) {",
                "+        return ImmutableList.of(resolver.getAbsolutePath(starter).toString());",
                "+      }",
                "+",
                "+      @Override",
                "+      public ImmutableMap<String, String> getEnvironment(SourcePathResolver resolver) {",
                "+        return ImmutableMap.of();",
                "+      }",
                "+    };",
                "+  }",
                "+",
                "+  private Tool getStandaloneBinary(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams params,",
                "+      BuildRuleResolver resolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      LuaPlatform luaPlatform,",
                "+      SourcePath starter,",
                "+      String mainModule,",
                "+      LuaPackageComponents components) {",
                "+    Path output = getOutputPath(buildTarget, projectFilesystem, luaPlatform);",
                "+",
                "+    Tool lua = luaPlatform.getLua().resolve(resolver);",
                "+    Tool packager = luaPlatform.getPackager().resolve(resolver);",
                "+",
                "+    LuaStandaloneBinary binary =",
                "+        resolver.addToIndex(",
                "+            new LuaStandaloneBinary(",
                "+                buildTarget.withAppendedFlavors(BINARY_FLAVOR),",
                "+                projectFilesystem,",
                "+                params",
                "+                    .withDeclaredDeps(",
                "+                        ImmutableSortedSet.<BuildRule>naturalOrder()",
                "+                            .addAll(ruleFinder.filterBuildRuleInputs(starter))",
                "+                            .addAll(components.getDeps(ruleFinder))",
                "+                            .addAll(BuildableSupport.getDepsCollection(lua, ruleFinder))",
                "+                            .addAll(BuildableSupport.getDepsCollection(packager, ruleFinder))",
                "+                            .build())",
                "+                    .withoutExtraDeps(),",
                "+                packager,",
                "+                ImmutableList.of(),",
                "+                output,",
                "+                Optional.of(starter),",
                "+                components,",
                "+                mainModule,",
                "+                lua,",
                "+                luaPlatform.shouldCacheBinaries()));",
                "+",
                "+    return new CommandTool.Builder()",
                "+        .addArg(SourcePathArg.of(binary.getSourcePathToOutput()))",
                "+        .build();",
                "+  }",
                "+",
                "+  private Tool getBinary(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams params,",
                "+      BuildRuleResolver resolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      LuaPlatform luaPlatform,",
                "+      String mainModule,",
                "+      SourcePath starter,",
                "+      LuaPackageComponents components,",
                "+      LuaPlatform.PackageStyle packageStyle) {",
                "+    switch (packageStyle) {",
                "+      case STANDALONE:",
                "+        return getStandaloneBinary(",
                "+            buildTarget,",
                "+            projectFilesystem,",
                "+            params,",
                "+            resolver,",
                "+            ruleFinder,",
                "+            luaPlatform,",
                "+            starter,",
                "+            mainModule,",
                "+            components);",
                "+      case INPLACE:",
                "+        return getInPlaceBinary(",
                "+            buildTarget,",
                "+            projectFilesystem,",
                "+            resolver,",
                "+            ruleFinder,",
                "+            luaPlatform.getCxxPlatform(),",
                "+            starter,",
                "+            components);",
                "+    }",
                "+    throw new IllegalStateException(",
                "+        String.format(\"%s: unexpected package style %s\", buildTarget, packageStyle));",
                "+  }",
                "+",
                "+  // Return the C/C++ platform to build against.",
                "+  private LuaPlatform getPlatform(BuildTarget target, AbstractLuaBinaryDescriptionArg arg) {",
                "+    LuaPlatformsProvider luaPlatformsProvider =",
                "+        toolchainProvider.getByName(LuaPlatformsProvider.DEFAULT_NAME, LuaPlatformsProvider.class);",
                "+",
                "+    FlavorDomain<LuaPlatform> luaPlatforms = luaPlatformsProvider.getLuaPlatforms();",
                "+",
                "+    Optional<LuaPlatform> flavorPlatform = luaPlatforms.getValue(target);",
                "+    if (flavorPlatform.isPresent()) {",
                "+      return flavorPlatform.get();",
                "+    }",
                "+",
                "+    if (arg.getPlatform().isPresent()) {",
                "+      return luaPlatforms.getValue(arg.getPlatform().get());",
                "+    }",
                "+",
                "+    return luaPlatformsProvider.getDefaultLuaPlatform();",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuildRule createBuildRule(",
                "+      BuildRuleCreationContext context,",
                "+      BuildTarget buildTarget,",
                "+      BuildRuleParams params,",
                "+      LuaBinaryDescriptionArg args) {",
                "+    BuildRuleResolver resolver = context.getBuildRuleResolver();",
                "+    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(resolver);",
                "+    SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);",
                "+    LuaPlatform luaPlatform = getPlatform(buildTarget, args);",
                "+    ProjectFilesystem projectFilesystem = context.getProjectFilesystem();",
                "+    FlavorDomain<PythonPlatform> pythonPlatforms =",
                "+        toolchainProvider",
                "+            .getByName(PythonPlatformsProvider.DEFAULT_NAME, PythonPlatformsProvider.class)",
                "+            .getPythonPlatforms();",
                "+    PythonPlatform pythonPlatform =",
                "+        pythonPlatforms",
                "+            .getValue(buildTarget)",
                "+            .orElse(",
                "+                pythonPlatforms.getValue(",
                "+                    args.getPythonPlatform()",
                "+                        .<Flavor>map(InternalFlavor::of)",
                "+                        .orElse(pythonPlatforms.getFlavors().iterator().next())));",
                "+    LuaBinaryPackageComponents components =",
                "+        getPackageComponentsFromDeps(",
                "+            buildTarget,",
                "+            projectFilesystem,",
                "+            params,",
                "+            resolver,",
                "+            pathResolver,",
                "+            ruleFinder,",
                "+            luaPlatform,",
                "+            pythonPlatform,",
                "+            args.getNativeStarterLibrary()",
                "+                .map(Optional::of)",
                "+                .orElse(luaPlatform.getNativeStarterLibrary()),",
                "+            args.getMainModule(),",
                "+            args.getPackageStyle().orElse(luaPlatform.getPackageStyle()),",
                "+            resolver.getAllRules(",
                "+                LuaUtil.getDeps(",
                "+                    luaPlatform.getCxxPlatform(), args.getDeps(), args.getPlatformDeps())),",
                "+            context.getCellPathResolver());",
                "+    LuaPlatform.PackageStyle packageStyle =",
                "+        args.getPackageStyle().orElse(luaPlatform.getPackageStyle());",
                "+    Tool binary =",
                "+        getBinary(",
                "+            buildTarget,",
                "+            projectFilesystem,",
                "+            params,",
                "+            resolver,",
                "+            ruleFinder,",
                "+            luaPlatform,",
                "+            args.getMainModule(),",
                "+            components.getStarter(),",
                "+            components.getComponents(),",
                "+            packageStyle);",
                "+    return new LuaBinary(",
                "+        buildTarget,",
                "+        projectFilesystem,",
                "+        params.copyAppendingExtraDeps(BuildableSupport.getDepsCollection(binary, ruleFinder)),",
                "+        getOutputPath(buildTarget, projectFilesystem, luaPlatform),",
                "+        binary,",
                "+        args.getMainModule(),",
                "+        components.getComponents(),",
                "+        luaPlatform.getLua().resolve(resolver),",
                "+        packageStyle);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void findDepsForTargetFromConstructorArgs(",
                "+      BuildTarget buildTarget,",
                "+      CellPathResolver cellRoots,",
                "+      AbstractLuaBinaryDescriptionArg constructorArg,",
                "+      ImmutableCollection.Builder<BuildTarget> extraDepsBuilder,",
                "+      ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "+    LuaPlatform luaPlatform = getPlatform(buildTarget, constructorArg);",
                "+    if (luaPlatform.getPackageStyle() == LuaPlatform.PackageStyle.STANDALONE) {",
                "+      extraDepsBuilder.addAll(luaPlatform.getPackager().getParseTimeDeps());",
                "+    }",
                "+    extraDepsBuilder.addAll(getNativeStarterDepTargets(luaPlatform));",
                "+  }",
                "+",
                "+  public enum StarterType {",
                "+    PURE,",
                "+    NATIVE,",
                "+  }",
                "+",
                "+  @BuckStyleImmutable",
                "+  @Value.Immutable",
                "+  interface AbstractLuaBinaryDescriptionArg extends CommonDescriptionArg, HasDeclaredDeps {",
                "+    String getMainModule();",
                "+",
                "+    Optional<BuildTarget> getNativeStarterLibrary();",
                "+",
                "+    Optional<String> getPythonPlatform();",
                "+",
                "+    Optional<Flavor> getPlatform();",
                "+",
                "+    Optional<LuaPlatform.PackageStyle> getPackageStyle();",
                "+",
                "+    @Value.Default",
                "+    default PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> getPlatformDeps() {",
                "+      return PatternMatchedCollection.of();",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/LuaBuckConfig.java b/src/com/facebook/buck/features/lua/LuaBuckConfig.java",
                "new file mode 100644",
                "index 0000000000..40e825792e",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/LuaBuckConfig.java",
                "@@ -0,0 +1,98 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.config.BuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.DefaultCxxPlatforms;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkStrategy;",
                "+import com.facebook.buck.io.ExecutableFinder;",
                "+import com.facebook.buck.rules.ErrorToolProvider;",
                "+import com.facebook.buck.rules.SystemToolProvider;",
                "+import com.facebook.buck.rules.tool.config.ToolConfig;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.google.common.collect.ImmutableList;",
                "+import java.nio.file.Paths;",
                "+",
                "+public class LuaBuckConfig {",
                "+",
                "+  private static final String SECTION_PREFIX = \"lua\";",
                "+",
                "+  private final BuckConfig delegate;",
                "+  private final ExecutableFinder finder;",
                "+",
                "+  public LuaBuckConfig(BuckConfig delegate, ExecutableFinder finder) {",
                "+    this.delegate = delegate;",
                "+    this.finder = finder;",
                "+  }",
                "+",
                "+  private LuaPlatform getPlatform(String section, CxxPlatform cxxPlatform) {",
                "+    return LuaPlatform.builder()",
                "+        .setLua(",
                "+            delegate",
                "+                .getView(ToolConfig.class)",
                "+                .getToolProvider(section, \"lua\")",
                "+                .orElseGet(",
                "+                    () ->",
                "+                        SystemToolProvider.builder()",
                "+                            .setExecutableFinder(finder)",
                "+                            .setSourcePathConverter(delegate::getPathSourcePath)",
                "+                            .setName(Paths.get(\"lua\"))",
                "+                            .setEnvironment(delegate.getEnvironment())",
                "+                            .build()))",
                "+        .setLuaCxxLibraryTarget(delegate.getBuildTarget(section, \"cxx_library\"))",
                "+        .setStarterType(",
                "+            delegate.getEnum(section, \"starter_type\", LuaBinaryDescription.StarterType.class))",
                "+        .setExtension(delegate.getValue(section, \"extension\").orElse(\".lex\"))",
                "+        .setNativeStarterLibrary(delegate.getBuildTarget(section, \"native_starter_library\"))",
                "+        .setPackageStyle(",
                "+            delegate",
                "+                .getEnum(section, \"package_style\", LuaPlatform.PackageStyle.class)",
                "+                .orElse(LuaPlatform.PackageStyle.INPLACE))",
                "+        .setPackager(",
                "+            delegate",
                "+                .getView(ToolConfig.class)",
                "+                .getToolProvider(section, \"packager\")",
                "+                .orElseGet(",
                "+                    () -> ErrorToolProvider.from(\"no packager set in '%s.packager'\", section)))",
                "+        .setShouldCacheBinaries(delegate.getBooleanValue(section, \"cache_binaries\", true))",
                "+        .setNativeLinkStrategy(",
                "+            delegate",
                "+                .getEnum(section, \"native_link_strategy\", NativeLinkStrategy.class)",
                "+                .orElse(NativeLinkStrategy.SEPARATE))",
                "+        .setCxxPlatform(cxxPlatform)",
                "+        .build();",
                "+  }",
                "+",
                "+  /**",
                "+   * @return for each passed in {@link CxxPlatform}, build and wrap it in a {@link LuaPlatform}",
                "+   *     defined in the `lua#<cxx-platform-flavor>` config section.",
                "+   */",
                "+  public ImmutableList<LuaPlatform> getPlatforms(Iterable<CxxPlatform> cxxPlatforms) {",
                "+    return RichStream.from(cxxPlatforms)",
                "+        .map(",
                "+            cxxPlatform ->",
                "+                // We special case the \"default\" C/C++ platform to just use the \"lua\" section,",
                "+                // otherwise we load the `LuaPlatform` from the `lua#<cxx-platform-flavor>` section.",
                "+                cxxPlatform.getFlavor().equals(DefaultCxxPlatforms.FLAVOR)",
                "+                    ? getPlatform(SECTION_PREFIX, cxxPlatform)",
                "+                    : getPlatform(",
                "+                        String.format(\"%s#%s\", SECTION_PREFIX, cxxPlatform.getFlavor()),",
                "+                        cxxPlatform))",
                "+        .toImmutableList();",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/LuaDescriptionsProvider.java b/src/com/facebook/buck/features/lua/LuaDescriptionsProvider.java",
                "new file mode 100644",
                "index 0000000000..ea8c476d45",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/LuaDescriptionsProvider.java",
                "@@ -0,0 +1,41 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.DescriptionCreationContext;",
                "+import com.facebook.buck.rules.DescriptionProvider;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import java.util.Arrays;",
                "+import java.util.Collection;",
                "+import org.pf4j.Extension;",
                "+",
                "+@Extension",
                "+public class LuaDescriptionsProvider implements DescriptionProvider {",
                "+",
                "+  @Override",
                "+  public Collection<Description<?>> getDescriptions(DescriptionCreationContext context) {",
                "+    ToolchainProvider toolchainProvider = context.getToolchainProvider();",
                "+    CxxBuckConfig cxxBuckConfig = new CxxBuckConfig(context.getBuckConfig());",
                "+",
                "+    return Arrays.asList(",
                "+        new CxxLuaExtensionDescription(toolchainProvider, cxxBuckConfig),",
                "+        new LuaBinaryDescription(toolchainProvider, cxxBuckConfig),",
                "+        new LuaLibraryDescription());",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/LuaLibrary.java b/src/com/facebook/buck/features/lua/LuaLibrary.java",
                "new file mode 100644",
                "index 0000000000..4ac4022c69",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/LuaLibrary.java",
                "@@ -0,0 +1,30 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.NoopBuildRuleWithDeclaredAndExtraDeps;",
                "+",
                "+public abstract class LuaLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "+    implements LuaPackageable {",
                "+  public LuaLibrary(",
                "+      BuildTarget buildTarget, ProjectFilesystem projectFilesystem, BuildRuleParams params) {",
                "+    super(buildTarget, projectFilesystem, params);",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/LuaLibraryDescription.java b/src/com/facebook/buck/features/lua/LuaLibraryDescription.java",
                "new file mode 100644",
                "index 0000000000..5f8e6bceaa",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/LuaLibraryDescription.java",
                "@@ -0,0 +1,96 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleCreationContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.CommonDescriptionArg;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.HasDeclaredDeps;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.facebook.buck.versions.VersionPropagator;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.util.Optional;",
                "+import org.immutables.value.Value;",
                "+",
                "+public class LuaLibraryDescription",
                "+    implements Description<LuaLibraryDescriptionArg>, VersionPropagator<LuaLibraryDescriptionArg> {",
                "+",
                "+  @Override",
                "+  public Class<LuaLibraryDescriptionArg> getConstructorArgType() {",
                "+    return LuaLibraryDescriptionArg.class;",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuildRule createBuildRule(",
                "+      BuildRuleCreationContext context,",
                "+      BuildTarget buildTarget,",
                "+      BuildRuleParams params,",
                "+      LuaLibraryDescriptionArg args) {",
                "+    BuildRuleResolver resolver = context.getBuildRuleResolver();",
                "+    SourcePathResolver pathResolver =",
                "+        DefaultSourcePathResolver.from(new SourcePathRuleFinder(resolver));",
                "+    return new LuaLibrary(buildTarget, context.getProjectFilesystem(), params) {",
                "+",
                "+      @Override",
                "+      public Iterable<BuildRule> getLuaPackageDeps(CxxPlatform cxxPlatform) {",
                "+        return resolver.getAllRules(",
                "+            LuaUtil.getDeps(cxxPlatform, args.getDeps(), args.getPlatformDeps()));",
                "+      }",
                "+",
                "+      @Override",
                "+      public LuaPackageComponents getLuaPackageComponents() {",
                "+        return LuaPackageComponents.builder()",
                "+            .putAllModules(",
                "+                LuaUtil.toModuleMap(",
                "+                    buildTarget,",
                "+                    pathResolver,",
                "+                    \"srcs\",",
                "+                    LuaUtil.getBaseModule(buildTarget, args.getBaseModule()),",
                "+                    ImmutableList.of(args.getSrcs())))",
                "+            .build();",
                "+      }",
                "+    };",
                "+  }",
                "+",
                "+  @BuckStyleImmutable",
                "+  @Value.Immutable",
                "+  interface AbstractLuaLibraryDescriptionArg extends CommonDescriptionArg, HasDeclaredDeps {",
                "+",
                "+    @Value.Default",
                "+    default SourceList getSrcs() {",
                "+      return SourceList.EMPTY;",
                "+    }",
                "+",
                "+    Optional<String> getBaseModule();",
                "+",
                "+    @Value.Default",
                "+    default PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> getPlatformDeps() {",
                "+      return PatternMatchedCollection.of();",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/LuaModule.java b/src/com/facebook/buck/features/lua/LuaModule.java",
                "new file mode 100644",
                "index 0000000000..c58029d769",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/LuaModule.java",
                "@@ -0,0 +1,22 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.module.BuckModule;",
                "+",
                "+@BuckModule",
                "+public class LuaModule {}",
                "diff --git a/src/com/facebook/buck/features/lua/LuaPackageable.java b/src/com/facebook/buck/features/lua/LuaPackageable.java",
                "new file mode 100644",
                "index 0000000000..c18335ee8d",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/LuaPackageable.java",
                "@@ -0,0 +1,26 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+",
                "+public interface LuaPackageable {",
                "+  Iterable<BuildRule> getLuaPackageDeps(CxxPlatform cxxPlatform);",
                "+",
                "+  LuaPackageComponents getLuaPackageComponents();",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/LuaPlatformsProviderFactory.java b/src/com/facebook/buck/features/lua/LuaPlatformsProviderFactory.java",
                "new file mode 100644",
                "index 0000000000..bac021b26e",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/LuaPlatformsProviderFactory.java",
                "@@ -0,0 +1,48 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.toolchain.ToolchainCreationContext;",
                "+import com.facebook.buck.toolchain.ToolchainFactory;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import java.util.Optional;",
                "+",
                "+public class LuaPlatformsProviderFactory implements ToolchainFactory<LuaPlatformsProvider> {",
                "+",
                "+  @Override",
                "+  public Optional<LuaPlatformsProvider> createToolchain(",
                "+      ToolchainProvider toolchainProvider, ToolchainCreationContext context) {",
                "+    CxxPlatformsProvider cxxPlatformsProviderFactory =",
                "+        toolchainProvider.getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class);",
                "+",
                "+    FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();",
                "+    CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();",
                "+",
                "+    LuaBuckConfig luaBuckConfig =",
                "+        new LuaBuckConfig(context.getBuckConfig(), context.getExecutableFinder());",
                "+",
                "+    FlavorDomain<LuaPlatform> luaPlatforms =",
                "+        FlavorDomain.from(",
                "+            LuaPlatform.FLAVOR_DOMAIN_NAME, luaBuckConfig.getPlatforms(cxxPlatforms.getValues()));",
                "+    LuaPlatform defaultLuaPlatform = luaPlatforms.getValue(defaultCxxPlatform.getFlavor());",
                "+",
                "+    return Optional.of(LuaPlatformsProvider.of(defaultLuaPlatform, luaPlatforms));",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/LuaStandaloneBinary.java b/src/com/facebook/buck/features/lua/LuaStandaloneBinary.java",
                "new file mode 100644",
                "index 0000000000..206bbcecc2",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/LuaStandaloneBinary.java",
                "@@ -0,0 +1,171 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.io.BuildCellRelativePath;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.AbstractBuildRuleWithDeclaredAndExtraDeps;",
                "+import com.facebook.buck.rules.AddToRuleKey;",
                "+import com.facebook.buck.rules.BuildContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildableContext;",
                "+import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.shell.ShellStep;",
                "+import com.facebook.buck.step.ExecutionContext;",
                "+import com.facebook.buck.step.Step;",
                "+import com.facebook.buck.step.fs.MkdirStep;",
                "+import com.facebook.buck.step.fs.RmStep;",
                "+import com.facebook.buck.util.json.ObjectMappers;",
                "+import com.google.common.base.Functions;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.Maps;",
                "+import java.io.IOException;",
                "+import java.nio.file.Path;",
                "+import java.util.Optional;",
                "+",
                "+/** Builds a Lua executable into a standalone package using a given packager tool. */",
                "+public class LuaStandaloneBinary extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "+",
                "+  @AddToRuleKey private final Tool builder;",
                "+",
                "+  @AddToRuleKey private final ImmutableList<String> builderArgs;",
                "+",
                "+  @AddToRuleKey(stringify = true)",
                "+  private final Path output;",
                "+",
                "+  @AddToRuleKey private final Optional<SourcePath> starter;",
                "+",
                "+  @AddToRuleKey private final LuaPackageComponents components;",
                "+",
                "+  @AddToRuleKey private final String mainModule;",
                "+",
                "+  @AddToRuleKey private final Tool lua;",
                "+",
                "+  private final boolean cache;",
                "+",
                "+  public LuaStandaloneBinary(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams buildRuleParams,",
                "+      Tool builder,",
                "+      ImmutableList<String> builderArgs,",
                "+      Path output,",
                "+      Optional<SourcePath> starter,",
                "+      LuaPackageComponents components,",
                "+      String mainModule,",
                "+      Tool lua,",
                "+      boolean cache) {",
                "+    super(buildTarget, projectFilesystem, buildRuleParams);",
                "+    this.builder = builder;",
                "+    this.builderArgs = builderArgs;",
                "+    this.output = output;",
                "+    this.starter = starter;",
                "+    this.components = components;",
                "+    this.mainModule = mainModule;",
                "+    this.lua = lua;",
                "+    this.cache = cache;",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableList<Step> getBuildSteps(",
                "+      BuildContext context, BuildableContext buildableContext) {",
                "+",
                "+    ImmutableList.Builder<Step> steps = ImmutableList.builder();",
                "+",
                "+    buildableContext.recordArtifact(output);",
                "+",
                "+    // Make sure the parent directory exists.",
                "+    steps.add(",
                "+        MkdirStep.of(",
                "+            BuildCellRelativePath.fromCellRelativePath(",
                "+                context.getBuildCellRootPath(), getProjectFilesystem(), output.getParent())));",
                "+",
                "+    // Delete any other pex that was there (when switching between pex styles).",
                "+    steps.add(",
                "+        RmStep.of(",
                "+                BuildCellRelativePath.fromCellRelativePath(",
                "+                    context.getBuildCellRootPath(), getProjectFilesystem(), output))",
                "+            .withRecursive(true));",
                "+",
                "+    SourcePathResolver resolver = context.getSourcePathResolver();",
                "+",
                "+    steps.add(",
                "+        new ShellStep(Optional.of(getBuildTarget()), getProjectFilesystem().getRootPath()) {",
                "+",
                "+          @Override",
                "+          protected Optional<String> getStdin(ExecutionContext context) {",
                "+            try {",
                "+              return Optional.of(",
                "+                  ObjectMappers.WRITER.writeValueAsString(",
                "+                      ImmutableMap.of(",
                "+                          \"modules\",",
                "+                          Maps.transformValues(",
                "+                              components.getModules(),",
                "+                              Functions.compose(Object::toString, resolver::getAbsolutePath)),",
                "+                          \"pythonModules\",",
                "+                          Maps.transformValues(",
                "+                              components.getPythonModules(),",
                "+                              Functions.compose(Object::toString, resolver::getAbsolutePath)),",
                "+                          \"nativeLibraries\",",
                "+                          Maps.transformValues(",
                "+                              components.getNativeLibraries(),",
                "+                              Functions.compose(Object::toString, resolver::getAbsolutePath)))));",
                "+            } catch (IOException e) {",
                "+              throw new RuntimeException(e);",
                "+            }",
                "+          }",
                "+",
                "+          @Override",
                "+          protected ImmutableList<String> getShellCommandInternal(ExecutionContext context) {",
                "+            ImmutableList.Builder<String> command = ImmutableList.builder();",
                "+            command.addAll(builder.getCommandPrefix(resolver));",
                "+            command.addAll(builderArgs);",
                "+            command.add(\"--entry-point\", mainModule);",
                "+            command.add(\"--interpreter\");",
                "+            if (starter.isPresent()) {",
                "+              command.add(resolver.getAbsolutePath(starter.get()).toString());",
                "+            } else {",
                "+              command.add(lua.getCommandPrefix(resolver).get(0));",
                "+            }",
                "+            command.add(getProjectFilesystem().resolve(output).toString());",
                "+            return command.build();",
                "+          }",
                "+",
                "+          @Override",
                "+          public String getShortName() {",
                "+            return \"lua_package\";",
                "+          }",
                "+        });",
                "+",
                "+    return steps.build();",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath getSourcePathToOutput() {",
                "+    return ExplicitBuildTargetSourcePath.of(getBuildTarget(), output);",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean isCacheable() {",
                "+    return cache;",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/LuaToolchainsSupplier.java b/src/com/facebook/buck/features/lua/LuaToolchainsSupplier.java",
                "new file mode 100644",
                "index 0000000000..3483b0f140",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/LuaToolchainsSupplier.java",
                "@@ -0,0 +1,36 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.toolchain.ToolchainDescriptor;",
                "+import com.facebook.buck.toolchain.ToolchainSupplier;",
                "+import java.util.Collection;",
                "+import java.util.Collections;",
                "+import org.pf4j.Extension;",
                "+",
                "+@Extension",
                "+public class LuaToolchainsSupplier implements ToolchainSupplier {",
                "+",
                "+  @Override",
                "+  public Collection<ToolchainDescriptor<?>> getToolchainDescriptor() {",
                "+    return Collections.singleton(",
                "+        ToolchainDescriptor.of(",
                "+            LuaPlatformsProvider.DEFAULT_NAME,",
                "+            LuaPlatformsProvider.class,",
                "+            LuaPlatformsProviderFactory.class));",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/LuaUtil.java b/src/com/facebook/buck/features/lua/LuaUtil.java",
                "new file mode 100644",
                "index 0000000000..2656490cfe",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/LuaUtil.java",
                "@@ -0,0 +1,85 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.io.File;",
                "+import java.util.Collection;",
                "+import java.util.Optional;",
                "+",
                "+public class LuaUtil {",
                "+",
                "+  private LuaUtil() {}",
                "+",
                "+  public static ImmutableMap<String, SourcePath> toModuleMap(",
                "+      BuildTarget target,",
                "+      SourcePathResolver resolver,",
                "+      String parameter,",
                "+      String baseModule,",
                "+      Iterable<SourceList> inputs) {",
                "+",
                "+    ImmutableMap.Builder<String, SourcePath> moduleNamesAndSourcePaths = ImmutableMap.builder();",
                "+",
                "+    for (SourceList input : inputs) {",
                "+      ImmutableMap<String, SourcePath> namesAndSourcePaths;",
                "+      if (input.getUnnamedSources().isPresent()) {",
                "+        namesAndSourcePaths =",
                "+            resolver.getSourcePathNames(target, parameter, input.getUnnamedSources().get());",
                "+      } else {",
                "+        namesAndSourcePaths = input.getNamedSources().get();",
                "+      }",
                "+      for (ImmutableMap.Entry<String, SourcePath> entry : namesAndSourcePaths.entrySet()) {",
                "+        String name = entry.getKey();",
                "+        if (!baseModule.isEmpty()) {",
                "+          name = baseModule + '/' + name;",
                "+        }",
                "+        moduleNamesAndSourcePaths.put(name, entry.getValue());",
                "+      }",
                "+    }",
                "+",
                "+    return moduleNamesAndSourcePaths.build();",
                "+  }",
                "+",
                "+  public static String getBaseModule(BuildTarget target, Optional<String> override) {",
                "+    return override.isPresent()",
                "+        ? override.get().replace('.', File.separatorChar)",
                "+        : target.getBasePath().toString();",
                "+  }",
                "+",
                "+  public static ImmutableList<BuildTarget> getDeps(",
                "+      CxxPlatform cxxPlatform,",
                "+      ImmutableSortedSet<BuildTarget> deps,",
                "+      PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> platformDeps) {",
                "+    return RichStream.<BuildTarget>empty()",
                "+        .concat(deps.stream())",
                "+        .concat(",
                "+            platformDeps",
                "+                .getMatchingValues(cxxPlatform.getFlavor().toString())",
                "+                .stream()",
                "+                .flatMap(Collection::stream))",
                "+        .toImmutableList();",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/Starter.java b/src/com/facebook/buck/features/lua/Starter.java",
                "new file mode 100644",
                "index 0000000000..0559166ee2",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/Starter.java",
                "@@ -0,0 +1,26 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.rules.SourcePath;",
                "+",
                "+/** An interface which builds a Lua starter executable. */",
                "+public interface Starter {",
                "+",
                "+  /** @return builds and returns the {@link SourcePath} to the starter. */",
                "+  SourcePath build();",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/SystemLuaCxxLibrary.java b/src/com/facebook/buck/features/lua/SystemLuaCxxLibrary.java",
                "new file mode 100644",
                "index 0000000000..9a9f3f08db",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/SystemLuaCxxLibrary.java",
                "@@ -0,0 +1,111 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.android.packageable.AndroidPackageable;",
                "+import com.facebook.buck.android.packageable.AndroidPackageableCollector;",
                "+import com.facebook.buck.cxx.AbstractCxxLibrary;",
                "+import com.facebook.buck.cxx.CxxPreprocessorDep;",
                "+import com.facebook.buck.cxx.CxxPreprocessorInput;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.args.StringArg;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+",
                "+public class SystemLuaCxxLibrary implements AbstractCxxLibrary {",
                "+",
                "+  private final BuildTarget target;",
                "+",
                "+  public SystemLuaCxxLibrary(BuildTarget target) {",
                "+    this.target = target;",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuildTarget getBuildTarget() {",
                "+    return target;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Iterable<AndroidPackageable> getRequiredPackageables(BuildRuleResolver ruleResolver) {",
                "+    return ImmutableList.of();",
                "+  }",
                "+",
                "+  @Override",
                "+  public void addToCollector(AndroidPackageableCollector collector) {}",
                "+",
                "+  @Override",
                "+  public Iterable<CxxPreprocessorDep> getCxxPreprocessorDeps(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+    return ImmutableList.of();",
                "+  }",
                "+",
                "+  @Override",
                "+  public CxxPreprocessorInput getCxxPreprocessorInput(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+    return CxxPreprocessorInput.of();",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableMap<BuildTarget, CxxPreprocessorInput> getTransitiveCxxPreprocessorInput(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+    return ImmutableMap.of();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Iterable<? extends NativeLinkable> getNativeLinkableDeps(BuildRuleResolver ruleResolver) {",
                "+    return ImmutableList.of();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Iterable<? extends NativeLinkable> getNativeLinkableExportedDeps(",
                "+      BuildRuleResolver ruleResolver) {",
                "+    return ImmutableList.of();",
                "+  }",
                "+",
                "+  @Override",
                "+  public NativeLinkableInput getNativeLinkableInput(",
                "+      CxxPlatform cxxPlatform,",
                "+      Linker.LinkableDepType type,",
                "+      boolean forceLinkWhole,",
                "+      ImmutableSet<LanguageExtensions> languageExtensions,",
                "+      BuildRuleResolver ruleResolver) {",
                "+    return NativeLinkableInput.builder().addAllArgs(StringArg.from(\"-llua\")).build();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Linkage getPreferredLinkage(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+    return Linkage.SHARED;",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean supportsOmnibusLinking(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+    return false;",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+    return ImmutableMap.of();",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/native-starter.cpp.in b/src/com/facebook/buck/features/lua/native-starter.cpp.in",
                "new file mode 100644",
                "index 0000000000..e0ee8d6e70",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/native-starter.cpp.in",
                "@@ -0,0 +1,152 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+#include \\<libgen.h>",
                "+#include \\<limits.h>",
                "+#include \\<stdio.h>",
                "+#include \\<stdlib.h>",
                "+#include \\<string.h>",
                "+",
                "+#include \\<sstream>",
                "+#include \\<string>",
                "+",
                "+#ifdef BUILTIN_NATIVE_STARTER",
                "+extern \"C\" {",
                "+#include \\<lua.h>",
                "+#include \\<lualib.h>",
                "+#include \\<lauxlib.h>",
                "+}",
                "+#endif",
                "+",
                "+static std::string repr(int x) {",
                "+  std::ostringstream s;",
                "+  s \\<\\< std::dec \\<\\< x;",
                "+  return s.str();",
                "+}",
                "+",
                "+static std::string repr(const std::string& s) {",
                "+  return '\"' + s + '\"';",
                "+}",
                "+",
                "+static std::string repr(const char *s) {",
                "+  return repr(std::string(s));",
                "+}",
                "+",
                "+static std::string repr(const char ** s) {",
                "+  std::string out = \"{\";",
                "+  for (int i = 0; s[i]; i++) {",
                "+    if (i != 0) {",
                "+      out += \", \";",
                "+    }",
                "+    out += '[' + repr(i) + \"] = \" + repr(s[i]);",
                "+  }",
                "+  return out + '}';",
                "+}",
                "+",
                "+static std::string join(const char *a, const char *b) {",
                "+  std::string p;",
                "+  p += a;",
                "+  p += '/';",
                "+  p += b;",
                "+  return p;",
                "+}",
                "+",
                "+static std::string join(const char *a, const std::string& b) {",
                "+  return join(a, b.c_str());",
                "+}",
                "+",
                "+static std::string join(const std::string& a, const char * b) {",
                "+  return join(a.c_str(), b);",
                "+}",
                "+",
                "+static std::string join(const std::string& a, const std::string& b) {",
                "+  return join(a.c_str(), b.c_str());",
                "+}",
                "+",
                "+static std::string dirname(const std::string& path) {",
                "+  char * copy = strdup(path.c_str());",
                "+  std::string dir = dirname(copy);",
                "+  free(copy);",
                "+  return dir;",
                "+}",
                "+",
                "+static std::string realpath(const std::string& path) {",
                "+  char out[PATH_MAX];",
                "+  realpath(path.c_str(), out);",
                "+  return std::string(out);",
                "+}",
                "+",
                "+#ifndef BUILTIN_NATIVE_STARTER",
                "+extern \"C\"",
                "+int run_starter(",
                "+    int argc,",
                "+    const char **argv,",
                "+    const char *main_module,",
                "+    const char *modules_dir,",
                "+    const char *py_modules_dir,",
                "+    const char *extension_suffix);",
                "+#else",
                "+static int run_starter(",
                "+    int argc,",
                "+    const char **argv,",
                "+    const char *main_module,",
                "+    const char *modules_dir,",
                "+    const char *py_modules_dir,",
                "+    const char *extension_suffix) {",
                "+",
                "+  lua_State *L = luaL_newstate();",
                "+",
                "+  luaL_openlibs(L);",
                "+",
                "+  std::string str;",
                "+  str += \"arg = \" + repr(argv) + ';';",
                "+  if (modules_dir != NULL) {",
                "+    str += \"package.path = \" + repr(join(modules_dir, \"?.lua\") + ';' +",
                "+      join(join(modules_dir, \"?\"), \"init.lua\")) + ';';",
                "+    str += \"package.cpath = \" +",
                "+      repr(join(modules_dir, std::string(\"?.\") + extension_suffix)) + ';';",
                "+  }",
                "+  str += \"require \" + repr(main_module) + ';';",
                "+",
                "+  int rc = luaL_dostring(L, str.c_str());",
                "+  if (rc != 0) {",
                "+    fprintf(stderr, \"%s\\n\", lua_tostring(L, -1));",
                "+    lua_pop(L, 1);",
                "+  }",
                "+",
                "+  lua_close(L);",
                "+",
                "+  return rc;",
                "+}",
                "+#endif",
                "+",
                "+int main(int argc, const char ** argv) {",
                "+  const char *main_module = <MAIN_MODULE>;",
                "+  const char *modules_dir = <MODULES_DIR>;",
                "+  const char *py_modules_dir = <PY_MODULES_DIR>;",
                "+  const char *extension_suffix = <EXT_SUFFIX>;",
                "+  return run_starter(",
                "+    argc,",
                "+    argv,",
                "+    main_module,",
                "+    modules_dir != NULL ?",
                "+      join(dirname(realpath(argv[0])), modules_dir).c_str() :",
                "+      NULL,",
                "+    py_modules_dir != NULL ?",
                "+      join(dirname(realpath(argv[0])), py_modules_dir).c_str() :",
                "+      NULL,",
                "+    extension_suffix);",
                "+}",
                "diff --git a/src/com/facebook/buck/features/lua/starter.lua.in b/src/com/facebook/buck/features/lua/starter.lua.in",
                "new file mode 100644",
                "index 0000000000..b20f888f58",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/lua/starter.lua.in",
                "@@ -0,0 +1,50 @@",
                "+#!<SHEBANG>",
                "+-- Copyright 2015-present Facebook, Inc.",
                "+--",
                "+-- Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+-- not use this file except in compliance with the License. You may obtain",
                "+-- a copy of the License at",
                "+--",
                "+--     http://www.apache.org/licenses/LICENSE-2.0",
                "+--",
                "+-- Unless required by applicable law or agreed to in writing, software",
                "+-- distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+-- License for the specific language governing permissions and limitations",
                "+-- under the License.",
                "+",
                "+-- Join two path components.",
                "+local function join (a, b)",
                "+  if a == '' then",
                "+    return b",
                "+  elseif b == '' then",
                "+    return a",
                "+  else",
                "+    return a..'/'..b",
                "+  end",
                "+end",
                "+",
                "+-- Return the directory component of the given path.",
                "+local function dirname (path)",
                "+  if path:match(\".-/.-\") then",
                "+    return string.gsub(path, \"(.*/)(.*)\", \"%1\")",
                "+  else",
                "+    return ''",
                "+  end",
                "+end",
                "+",
                "+-- TODO(): Return a path with all symlinks resolved.",
                "+local function realpath (path)",
                "+  return path",
                "+end",
                "+",
                "+-- Use the realpath of the script, to support running behind symlinks.",
                "+local dirpath = dirname(realpath(arg[0]))",
                "+",
                "+local modules_dir = <MODULES_DIR>",
                "+if modules_dir ~= nil then",
                "+  package.path = join(join(dirpath, modules_dir), \"?.lua\");",
                "+  package.cpath = join(join(dirpath, modules_dir), \"?.\" .. <EXT_SUFFIX>);",
                "+end",
                "+",
                "+require <MAIN_MODULE>",
                "diff --git a/src/com/facebook/buck/python/BUCK b/src/com/facebook/buck/python/BUCK",
                "index 8560aada21..514b1edc51 100644",
                "--- a/src/com/facebook/buck/python/BUCK",
                "+++ b/src/com/facebook/buck/python/BUCK",
                "@@ -17,3 +17,3 @@ java_library_with_plugins(",
                "         \"//src/com/facebook/buck/cxx:rules\",",
                "-        \"//src/com/facebook/buck/lua:lua\",",
                "+        \"//src/com/facebook/buck/features/lua:lua\",",
                "         \"//src/com/facebook/buck/ocaml:rules\",",
                "diff --git a/test/com/facebook/buck/features/lua/BUCK b/test/com/facebook/buck/features/lua/BUCK",
                "new file mode 100644",
                "index 0000000000..808038dbc6",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/BUCK",
                "@@ -0,0 +1,288 @@",
                "+load(\"//tools/build_rules:java_rules.bzl\", \"java_immutables_library\", \"java_test\")",
                "+",
                "+java_immutables_library(",
                "+    name = \"testutil\",",
                "+    srcs = [",
                "+        \"CxxLuaExtensionBuilder.java\",",
                "+        \"LuaBinaryBuilder.java\",",
                "+        \"LuaLibraryBuilder.java\",",
                "+        \"LuaTestUtils.java\",",
                "+    ],",
                "+    visibility = [",
                "+        \"//test/...\",",
                "+    ],",
                "+    deps = [",
                "+        \"//src-gen:thrift\",",
                "+        \"//src/com/facebook/buck/android:helpers\",",
                "+        \"//src/com/facebook/buck/android:rules\",",
                "+        \"//src/com/facebook/buck/android:split_dex\",",
                "+        \"//src/com/facebook/buck/android:steps\",",
                "+        \"//src/com/facebook/buck/android:utils\",",
                "+        \"//src/com/facebook/buck/android/aapt:aapt\",",
                "+        \"//src/com/facebook/buck/android/redex:options\",",
                "+        \"//src/com/facebook/buck/apple/project_generator:project_generator\",",
                "+        \"//src/com/facebook/buck/apple/xcode:xcode\",",
                "+        \"//src/com/facebook/buck/artifact_cache:artifact_cache\",",
                "+        \"//src/com/facebook/buck/config:config\",",
                "+        \"//src/com/facebook/buck/counters:counters\",",
                "+        \"//src/com/facebook/buck/cxx:rules\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain:toolchain\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/nativelink:nativelink\",",
                "+        \"//src/com/facebook/buck/distributed:distributed\",",
                "+        \"//src/com/facebook/buck/doctor/config:config\",",
                "+        \"//src/com/facebook/buck/event:event\",",
                "+        \"//src/com/facebook/buck/event:interfaces\",",
                "+        \"//src/com/facebook/buck/event/external:external_lib\",",
                "+        \"//src/com/facebook/buck/event/listener:BroadcastEventListener\",",
                "+        \"//src/com/facebook/buck/event/listener:listener\",",
                "+        \"//src/com/facebook/buck/features/lua:lua\",",
                "+        \"//src/com/facebook/buck/graph:graph\",",
                "+        \"//src/com/facebook/buck/io:executable-finder\",",
                "+        \"//src/com/facebook/buck/io:io\",",
                "+        \"//src/com/facebook/buck/io:transport\",",
                "+        \"//src/com/facebook/buck/io:watchman\",",
                "+        \"//src/com/facebook/buck/json:json\",",
                "+        \"//src/com/facebook/buck/jvm/core:core\",",
                "+        \"//src/com/facebook/buck/jvm/java:config\",",
                "+        \"//src/com/facebook/buck/jvm/java:javac-sink\",",
                "+        \"//src/com/facebook/buck/jvm/java:packagefinder\",",
                "+        \"//src/com/facebook/buck/jvm/java:rules\",",
                "+        \"//src/com/facebook/buck/jvm/java:steps\",",
                "+        \"//src/com/facebook/buck/jvm/java:support\",",
                "+        \"//src/com/facebook/buck/jvm/java/abi/source/api:api\",",
                "+        \"//src/com/facebook/buck/jvm/java/autodeps:SymbolExtractor\",",
                "+        \"//src/com/facebook/buck/jvm/java/autodeps:autodeps\",",
                "+        \"//src/com/facebook/buck/jvm/java/classes:classes\",",
                "+        \"//src/com/facebook/buck/jvm/kotlin:kotlin\",",
                "+        \"//src/com/facebook/buck/jvm/scala:scala\",",
                "+        \"//src/com/facebook/buck/log:log\",",
                "+        \"//src/com/facebook/buck/maven:util\",",
                "+        \"//src/com/facebook/buck/model:build_id\",",
                "+        \"//src/com/facebook/buck/model:model\",",
                "+        \"//src/com/facebook/buck/parser:config\",",
                "+        \"//src/com/facebook/buck/parser:parser\",",
                "+        \"//src/com/facebook/buck/parser:rule_pattern\",",
                "+        \"//src/com/facebook/buck/python/toolchain:toolchain\",",
                "+        \"//src/com/facebook/buck/query:query\",",
                "+        \"//src/com/facebook/buck/rules:build_rule\",",
                "+        \"//src/com/facebook/buck/rules:rules\",",
                "+        \"//src/com/facebook/buck/rules:types\",",
                "+        \"//src/com/facebook/buck/rules/args:args\",",
                "+        \"//src/com/facebook/buck/rules/coercer:coercer\",",
                "+        \"//src/com/facebook/buck/rules/coercer:interface\",",
                "+        \"//src/com/facebook/buck/rules/keys:keys\",",
                "+        \"//src/com/facebook/buck/rules/macros:macros\",",
                "+        \"//src/com/facebook/buck/rules/macros:types\",",
                "+        \"//src/com/facebook/buck/rules/query:types\",",
                "+        \"//src/com/facebook/buck/shell:rules\",",
                "+        \"//src/com/facebook/buck/shell:steps\",",
                "+        \"//src/com/facebook/buck/shell:worker\",",
                "+        \"//src/com/facebook/buck/shell:worker_tool\",",
                "+        \"//src/com/facebook/buck/slb:slb\",",
                "+        \"//src/com/facebook/buck/step:step\",",
                "+        \"//src/com/facebook/buck/swift:swift\",",
                "+        \"//src/com/facebook/buck/test:test\",",
                "+        \"//src/com/facebook/buck/test/result/type:type\",",
                "+        \"//src/com/facebook/buck/test/selectors:selectors\",",
                "+        \"//src/com/facebook/buck/util:exceptions\",",
                "+        \"//src/com/facebook/buck/util:io\",",
                "+        \"//src/com/facebook/buck/util:packaged_resource\",",
                "+        \"//src/com/facebook/buck/util:process_executor\",",
                "+        \"//src/com/facebook/buck/util:util\",",
                "+        \"//src/com/facebook/buck/util/cache:cache\",",
                "+        \"//src/com/facebook/buck/util/concurrent:concurrent\",",
                "+        \"//src/com/facebook/buck/util/environment:environment\",",
                "+        \"//src/com/facebook/buck/util/environment:platform\",",
                "+        \"//src/com/facebook/buck/util/immutables:immutables\",",
                "+        \"//src/com/facebook/buck/util/network/hostname:hostname\",",
                "+        \"//src/com/facebook/buck/util/sha1:sha1\",",
                "+        \"//src/com/facebook/buck/util/trace:trace\",",
                "+        \"//src/com/facebook/buck/util/unit:unit\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_config\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_generator\",",
                "+        \"//src/com/facebook/buck/versions:translator\",",
                "+        \"//src/com/facebook/buck/versions:types\",",
                "+        \"//src/com/facebook/buck/versions:versions\",",
                "+        \"//src/com/facebook/buck/worker:worker_job_params\",",
                "+        \"//src/com/facebook/buck/worker:worker_pool_factory\",",
                "+        \"//src/com/facebook/buck/worker:worker_process\",",
                "+        \"//test/com/facebook/buck/config:FakeBuckConfig\",",
                "+        \"//test/com/facebook/buck/cxx:testutil\",",
                "+        \"//test/com/facebook/buck/cxx/toolchain:testutil\",",
                "+        \"//test/com/facebook/buck/python:testutil\",",
                "+        \"//test/com/facebook/buck/rules:testutil\",",
                "+        \"//test/com/facebook/buck/rules/macros:testutil\",",
                "+        \"//test/com/facebook/buck/testutil/integration:util\",",
                "+        \"//test/com/facebook/buck/toolchain/impl:testutil\",",
                "+        \"//third-party/java/aether:aether-api\",",
                "+        \"//third-party/java/android:ddmlib\",",
                "+        \"//third-party/java/android:tools-sdk-common\",",
                "+        \"//third-party/java/aosp:aosp\",",
                "+        \"//third-party/java/args4j:args4j\",",
                "+        \"//third-party/java/asm:asm\",",
                "+        \"//third-party/java/dd-plist:dd-plist\",",
                "+        \"//third-party/java/guava:guava\",",
                "+        \"//third-party/java/hamcrest:java-hamcrest\",",
                "+        \"//third-party/java/immutables:immutables\",",
                "+        \"//third-party/java/infer-annotations:infer-annotations\",",
                "+        \"//third-party/java/jackson:jackson-annotations\",",
                "+        \"//third-party/java/jackson:jackson-core\",",
                "+        \"//third-party/java/jackson:jackson-databind\",",
                "+        \"//third-party/java/jna:jna\",",
                "+        \"//third-party/java/jsr:jsr305\",",
                "+        \"//third-party/java/junit:junit\",",
                "+        \"//third-party/java/maven:maven-model\",",
                "+        \"//third-party/java/nailgun:nailgun\",",
                "+        \"//third-party/java/nuprocess:nuprocess\",",
                "+        \"//third-party/java/okhttp:okhttp\",",
                "+        \"//third-party/java/okio:okio\",",
                "+        \"//third-party/java/stringtemplate:stringtemplate\",",
                "+        \"//third-party/java/thrift:libthrift\",",
                "+    ],",
                "+)",
                "+",
                "+java_test(",
                "+    name = \"lua\",",
                "+    srcs = glob([\"*Test.java\"]),",
                "+    labels = [\"long_running\"],",
                "+    deps = [",
                "+        \"//src-gen:thrift\",",
                "+        \"//src/com/facebook/buck/android:helpers\",",
                "+        \"//src/com/facebook/buck/android:rules\",",
                "+        \"//src/com/facebook/buck/android:split_dex\",",
                "+        \"//src/com/facebook/buck/android:steps\",",
                "+        \"//src/com/facebook/buck/android:utils\",",
                "+        \"//src/com/facebook/buck/android/aapt:aapt\",",
                "+        \"//src/com/facebook/buck/android/redex:options\",",
                "+        \"//src/com/facebook/buck/apple/project_generator:project_generator\",",
                "+        \"//src/com/facebook/buck/apple/xcode:xcode\",",
                "+        \"//src/com/facebook/buck/artifact_cache:artifact_cache\",",
                "+        \"//src/com/facebook/buck/cli:cli\",",
                "+        \"//src/com/facebook/buck/config:config\",",
                "+        \"//src/com/facebook/buck/counters:counters\",",
                "+        \"//src/com/facebook/buck/cxx:rules\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain:toolchain\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/impl:impl\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/nativelink:nativelink\",",
                "+        \"//src/com/facebook/buck/distributed:distributed\",",
                "+        \"//src/com/facebook/buck/doctor/config:config\",",
                "+        \"//src/com/facebook/buck/event:event\",",
                "+        \"//src/com/facebook/buck/event:interfaces\",",
                "+        \"//src/com/facebook/buck/event/external:external_lib\",",
                "+        \"//src/com/facebook/buck/event/listener:BroadcastEventListener\",",
                "+        \"//src/com/facebook/buck/event/listener:listener\",",
                "+        \"//src/com/facebook/buck/features/lua:lua\",",
                "+        \"//src/com/facebook/buck/graph:graph\",",
                "+        \"//src/com/facebook/buck/io:executable-finder\",",
                "+        \"//src/com/facebook/buck/io:io\",",
                "+        \"//src/com/facebook/buck/io:transport\",",
                "+        \"//src/com/facebook/buck/io:watchman\",",
                "+        \"//src/com/facebook/buck/io/file:file\",",
                "+        \"//src/com/facebook/buck/json:json\",",
                "+        \"//src/com/facebook/buck/jvm/core:core\",",
                "+        \"//src/com/facebook/buck/jvm/java:config\",",
                "+        \"//src/com/facebook/buck/jvm/java:javac-sink\",",
                "+        \"//src/com/facebook/buck/jvm/java:packagefinder\",",
                "+        \"//src/com/facebook/buck/jvm/java:rules\",",
                "+        \"//src/com/facebook/buck/jvm/java:steps\",",
                "+        \"//src/com/facebook/buck/jvm/java:support\",",
                "+        \"//src/com/facebook/buck/jvm/java/abi/source/api:api\",",
                "+        \"//src/com/facebook/buck/jvm/java/autodeps:SymbolExtractor\",",
                "+        \"//src/com/facebook/buck/jvm/java/autodeps:autodeps\",",
                "+        \"//src/com/facebook/buck/jvm/java/classes:classes\",",
                "+        \"//src/com/facebook/buck/jvm/kotlin:kotlin\",",
                "+        \"//src/com/facebook/buck/jvm/scala:scala\",",
                "+        \"//src/com/facebook/buck/log:log\",",
                "+        \"//src/com/facebook/buck/maven:util\",",
                "+        \"//src/com/facebook/buck/model:build_id\",",
                "+        \"//src/com/facebook/buck/model:model\",",
                "+        \"//src/com/facebook/buck/parser:config\",",
                "+        \"//src/com/facebook/buck/parser:parser\",",
                "+        \"//src/com/facebook/buck/parser:rule_pattern\",",
                "+        \"//src/com/facebook/buck/python:rules\",",
                "+        \"//src/com/facebook/buck/python/toolchain:toolchain\",",
                "+        \"//src/com/facebook/buck/query:query\",",
                "+        \"//src/com/facebook/buck/rules:cli\",",
                "+        \"//src/com/facebook/buck/rules:rules\",",
                "+        \"//src/com/facebook/buck/rules:types\",",
                "+        \"//src/com/facebook/buck/rules/args:args\",",
                "+        \"//src/com/facebook/buck/rules/coercer:coercer\",",
                "+        \"//src/com/facebook/buck/rules/coercer:interface\",",
                "+        \"//src/com/facebook/buck/rules/keys:keys\",",
                "+        \"//src/com/facebook/buck/rules/macros:macros\",",
                "+        \"//src/com/facebook/buck/rules/macros:types\",",
                "+        \"//src/com/facebook/buck/rules/query:types\",",
                "+        \"//src/com/facebook/buck/shell:rules\",",
                "+        \"//src/com/facebook/buck/shell:steps\",",
                "+        \"//src/com/facebook/buck/shell:worker\",",
                "+        \"//src/com/facebook/buck/shell:worker_tool\",",
                "+        \"//src/com/facebook/buck/slb:slb\",",
                "+        \"//src/com/facebook/buck/step:step\",",
                "+        \"//src/com/facebook/buck/swift:swift\",",
                "+        \"//src/com/facebook/buck/test:test\",",
                "+        \"//src/com/facebook/buck/test/result/type:type\",",
                "+        \"//src/com/facebook/buck/test/selectors:selectors\",",
                "+        \"//src/com/facebook/buck/util:exceptions\",",
                "+        \"//src/com/facebook/buck/util:io\",",
                "+        \"//src/com/facebook/buck/util:packaged_resource\",",
                "+        \"//src/com/facebook/buck/util:process_executor\",",
                "+        \"//src/com/facebook/buck/util:util\",",
                "+        \"//src/com/facebook/buck/util/cache:cache\",",
                "+        \"//src/com/facebook/buck/util/concurrent:concurrent\",",
                "+        \"//src/com/facebook/buck/util/environment:environment\",",
                "+        \"//src/com/facebook/buck/util/environment:platform\",",
                "+        \"//src/com/facebook/buck/util/immutables:immutables\",",
                "+        \"//src/com/facebook/buck/util/json:json\",",
                "+        \"//src/com/facebook/buck/util/network/hostname:hostname\",",
                "+        \"//src/com/facebook/buck/util/sha1:sha1\",",
                "+        \"//src/com/facebook/buck/util/trace:trace\",",
                "+        \"//src/com/facebook/buck/util/unit:unit\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_config\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_generator\",",
                "+        \"//src/com/facebook/buck/versions:translator\",",
                "+        \"//src/com/facebook/buck/versions:types\",",
                "+        \"//src/com/facebook/buck/versions:versions\",",
                "+        \"//src/com/facebook/buck/worker:worker_job_params\",",
                "+        \"//src/com/facebook/buck/worker:worker_pool_factory\",",
                "+        \"//src/com/facebook/buck/worker:worker_process\",",
                "+        \"//test/com/facebook/buck/config:FakeBuckConfig\",",
                "+        \"//test/com/facebook/buck/cxx:testutil\",",
                "+        \"//test/com/facebook/buck/cxx/toolchain:testutil\",",
                "+        \"//test/com/facebook/buck/features/lua:testutil\",",
                "+        \"//test/com/facebook/buck/io:testutil\",",
                "+        \"//test/com/facebook/buck/io/filesystem:testutil\",",
                "+        \"//test/com/facebook/buck/model:testutil\",",
                "+        \"//test/com/facebook/buck/python:builders\",",
                "+        \"//test/com/facebook/buck/python:testutil\",",
                "+        \"//test/com/facebook/buck/rules:testutil\",",
                "+        \"//test/com/facebook/buck/testutil:testutil\",",
                "+        \"//test/com/facebook/buck/testutil/integration:util\",",
                "+        \"//test/com/facebook/buck/toolchain/impl:testutil\",",
                "+        \"//third-party/java/aether:aether-api\",",
                "+        \"//third-party/java/android:ddmlib\",",
                "+        \"//third-party/java/android:tools-sdk-common\",",
                "+        \"//third-party/java/aosp:aosp\",",
                "+        \"//third-party/java/args4j:args4j\",",
                "+        \"//third-party/java/asm:asm\",",
                "+        \"//third-party/java/dd-plist:dd-plist\",",
                "+        \"//third-party/java/guava:guava\",",
                "+        \"//third-party/java/hamcrest:java-hamcrest\",",
                "+        \"//third-party/java/immutables:immutables\",",
                "+        \"//third-party/java/infer-annotations:infer-annotations\",",
                "+        \"//third-party/java/jackson:jackson-annotations\",",
                "+        \"//third-party/java/jackson:jackson-core\",",
                "+        \"//third-party/java/jackson:jackson-databind\",",
                "+        \"//third-party/java/jna:jna\",",
                "+        \"//third-party/java/jsr:jsr305\",",
                "+        \"//third-party/java/junit:junit\",",
                "+        \"//third-party/java/maven:maven-model\",",
                "+        \"//third-party/java/nailgun:nailgun\",",
                "+        \"//third-party/java/nuprocess:nuprocess\",",
                "+        \"//third-party/java/okhttp:okhttp\",",
                "+        \"//third-party/java/okio:okio\",",
                "+        \"//third-party/java/stringtemplate:stringtemplate\",",
                "+        \"//third-party/java/thrift:libthrift\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/features/lua/CxxLuaExtensionBuilder.java b/test/com/facebook/buck/features/lua/CxxLuaExtensionBuilder.java",
                "new file mode 100644",
                "index 0000000000..3b66d0cede",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/CxxLuaExtensionBuilder.java",
                "@@ -0,0 +1,106 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.config.FakeBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.rules.AbstractNodeBuilder;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourceWithFlags;",
                "+import com.facebook.buck.rules.coercer.FrameworkPath;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.rules.macros.StringWithMacros;",
                "+import com.facebook.buck.rules.macros.StringWithMacrosUtils;",
                "+import com.facebook.buck.toolchain.impl.ToolchainProviderBuilder;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSortedMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.util.Optional;",
                "+",
                "+public class CxxLuaExtensionBuilder",
                "+    extends AbstractNodeBuilder<",
                "+        CxxLuaExtensionDescriptionArg.Builder, CxxLuaExtensionDescriptionArg,",
                "+        CxxLuaExtensionDescription, CxxLuaExtension> {",
                "+",
                "+  public CxxLuaExtensionBuilder(CxxLuaExtensionDescription description, BuildTarget target) {",
                "+    super(description, target);",
                "+  }",
                "+",
                "+  public CxxLuaExtensionBuilder(BuildTarget target, LuaPlatform luaPlatform) {",
                "+    this(",
                "+        new CxxLuaExtensionDescription(",
                "+            new ToolchainProviderBuilder()",
                "+                .withToolchain(",
                "+                    LuaPlatformsProvider.DEFAULT_NAME,",
                "+                    LuaPlatformsProvider.of(",
                "+                        luaPlatform, FlavorDomain.of(LuaPlatform.FLAVOR_DOMAIN_NAME, luaPlatform)))",
                "+                .build(),",
                "+            new CxxBuckConfig(FakeBuckConfig.builder().build())),",
                "+        target);",
                "+  }",
                "+",
                "+  public CxxLuaExtensionBuilder(BuildTarget target) {",
                "+    this(target, LuaTestUtils.DEFAULT_PLATFORM);",
                "+  }",
                "+",
                "+  public CxxLuaExtensionBuilder setBaseModule(String baseModule) {",
                "+    getArgForPopulating().setBaseModule(Optional.of(baseModule));",
                "+    return this;",
                "+  }",
                "+",
                "+  public CxxLuaExtensionBuilder setSrcs(ImmutableSortedSet<SourceWithFlags> srcs) {",
                "+    getArgForPopulating().setSrcs(srcs);",
                "+    return this;",
                "+  }",
                "+",
                "+  public CxxLuaExtensionBuilder setHeaders(ImmutableSortedSet<SourcePath> headers) {",
                "+    getArgForPopulating().setHeaders(SourceList.ofUnnamedSources(headers));",
                "+    return this;",
                "+  }",
                "+",
                "+  public CxxLuaExtensionBuilder setHeaders(ImmutableSortedMap<String, SourcePath> headers) {",
                "+    getArgForPopulating().setHeaders(SourceList.ofNamedSources(headers));",
                "+    return this;",
                "+  }",
                "+",
                "+  public CxxLuaExtensionBuilder setCompilerFlags(ImmutableList<String> compilerFlags) {",
                "+    getArgForPopulating().setCompilerFlags(StringWithMacrosUtils.fromStrings(compilerFlags));",
                "+    return this;",
                "+  }",
                "+",
                "+  public CxxLuaExtensionBuilder setLinkerFlags(ImmutableList<StringWithMacros> linkerFlags) {",
                "+    getArgForPopulating().setLinkerFlags(linkerFlags);",
                "+    return this;",
                "+  }",
                "+",
                "+  public CxxLuaExtensionBuilder setFrameworks(ImmutableSortedSet<FrameworkPath> frameworks) {",
                "+    getArgForPopulating().setFrameworks(frameworks);",
                "+    return this;",
                "+  }",
                "+",
                "+  public CxxLuaExtensionBuilder setLibraries(ImmutableSortedSet<FrameworkPath> libraries) {",
                "+    getArgForPopulating().setLibraries(libraries);",
                "+    return this;",
                "+  }",
                "+",
                "+  public CxxLuaExtensionBuilder setDeps(ImmutableSortedSet<BuildTarget> deps) {",
                "+    getArgForPopulating().setDeps(deps);",
                "+    return this;",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/lua/CxxLuaExtensionDescriptionTest.java b/test/com/facebook/buck/features/lua/CxxLuaExtensionDescriptionTest.java",
                "new file mode 100644",
                "index 0000000000..17b3a7214d",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/CxxLuaExtensionDescriptionTest.java",
                "@@ -0,0 +1,44 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import static org.junit.Assert.assertThat;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.TestBuildRuleResolver;",
                "+import com.facebook.buck.testutil.TargetGraphFactory;",
                "+import java.nio.file.Paths;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Test;",
                "+",
                "+public class CxxLuaExtensionDescriptionTest {",
                "+",
                "+  @Test",
                "+  public void baseModule() {",
                "+    CxxLuaExtensionBuilder builder =",
                "+        new CxxLuaExtensionBuilder(BuildTargetFactory.newInstance(\"//:rule\"))",
                "+            .setBaseModule(\"hello.world\");",
                "+    BuildRuleResolver resolver =",
                "+        new TestBuildRuleResolver(TargetGraphFactory.newInstance(builder.build()));",
                "+    CxxLuaExtension extension = builder.build(resolver);",
                "+    assertThat(",
                "+        Paths.get(extension.getModule(CxxPlatformUtils.DEFAULT_PLATFORM)),",
                "+        Matchers.equalTo(Paths.get(\"hello/world/rule.so\")));",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/lua/LuaBinaryBuilder.java b/test/com/facebook/buck/features/lua/LuaBinaryBuilder.java",
                "new file mode 100644",
                "index 0000000000..cd869ba460",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/LuaBinaryBuilder.java",
                "@@ -0,0 +1,98 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.config.FakeBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.python.PythonTestUtils;",
                "+import com.facebook.buck.python.toolchain.PythonPlatform;",
                "+import com.facebook.buck.python.toolchain.PythonPlatformsProvider;",
                "+import com.facebook.buck.rules.AbstractNodeBuilder;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                "+import com.facebook.buck.toolchain.impl.ToolchainProviderBuilder;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.util.Optional;",
                "+",
                "+public class LuaBinaryBuilder",
                "+    extends AbstractNodeBuilder<",
                "+        LuaBinaryDescriptionArg.Builder, LuaBinaryDescriptionArg, LuaBinaryDescription, LuaBinary> {",
                "+",
                "+  public LuaBinaryBuilder(LuaBinaryDescription description, BuildTarget target) {",
                "+    super(description, target);",
                "+  }",
                "+",
                "+  public LuaBinaryBuilder(",
                "+      BuildTarget target,",
                "+      LuaPlatform defaultPlatform,",
                "+      FlavorDomain<LuaPlatform> luaPlatforms,",
                "+      CxxBuckConfig cxxBuckConfig,",
                "+      FlavorDomain<PythonPlatform> pythonPlatforms) {",
                "+    this(",
                "+        new LuaBinaryDescription(",
                "+            new ToolchainProviderBuilder()",
                "+                .withToolchain(",
                "+                    LuaPlatformsProvider.DEFAULT_NAME,",
                "+                    LuaPlatformsProvider.of(defaultPlatform, luaPlatforms))",
                "+                .withToolchain(",
                "+                    PythonPlatformsProvider.DEFAULT_NAME,",
                "+                    PythonPlatformsProvider.of(pythonPlatforms))",
                "+                .build(),",
                "+            cxxBuckConfig),",
                "+        target);",
                "+  }",
                "+",
                "+  public LuaBinaryBuilder(BuildTarget target, LuaPlatform luaPlatform) {",
                "+    this(",
                "+        target,",
                "+        luaPlatform,",
                "+        FlavorDomain.of(LuaPlatform.FLAVOR_DOMAIN_NAME, luaPlatform),",
                "+        new CxxBuckConfig(FakeBuckConfig.builder().build()),",
                "+        PythonTestUtils.PYTHON_PLATFORMS);",
                "+  }",
                "+",
                "+  public LuaBinaryBuilder(BuildTarget target) {",
                "+    this(target, LuaTestUtils.DEFAULT_PLATFORM);",
                "+  }",
                "+",
                "+  public LuaBinaryBuilder setMainModule(String mainModule) {",
                "+    getArgForPopulating().setMainModule(mainModule);",
                "+    return this;",
                "+  }",
                "+",
                "+  public LuaBinaryBuilder setDeps(ImmutableSortedSet<BuildTarget> deps) {",
                "+    getArgForPopulating().setDeps(deps);",
                "+    return this;",
                "+  }",
                "+",
                "+  public LuaBinaryBuilder setPackageStyle(LuaPlatform.PackageStyle packageStyle) {",
                "+    getArgForPopulating().setPackageStyle(Optional.of(packageStyle));",
                "+    return this;",
                "+  }",
                "+",
                "+  public LuaBinaryBuilder setNativeStarterLibrary(BuildTarget target) {",
                "+    getArgForPopulating().setNativeStarterLibrary(Optional.of(target));",
                "+    return this;",
                "+  }",
                "+",
                "+  public LuaBinaryBuilder setPlatformDeps(",
                "+      PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> deps) {",
                "+    getArgForPopulating().setPlatformDeps(deps);",
                "+    return this;",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/lua/LuaBinaryDescriptionTest.java b/test/com/facebook/buck/features/lua/LuaBinaryDescriptionTest.java",
                "new file mode 100644",
                "index 0000000000..b8a6edb5c8",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/LuaBinaryDescriptionTest.java",
                "@@ -0,0 +1,520 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import static org.junit.Assert.assertThat;",
                "+",
                "+import com.facebook.buck.config.FakeBuckConfig;",
                "+import com.facebook.buck.cxx.CxxLibraryBuilder;",
                "+import com.facebook.buck.cxx.CxxTestUtils;",
                "+import com.facebook.buck.cxx.PrebuiltCxxLibraryBuilder;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkStrategy;",
                "+import com.facebook.buck.io.file.MorePaths;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.model.InternalFlavor;",
                "+import com.facebook.buck.python.CxxPythonExtensionBuilder;",
                "+import com.facebook.buck.python.PythonBinaryDescription;",
                "+import com.facebook.buck.python.PythonLibraryBuilder;",
                "+import com.facebook.buck.python.TestPythonPlatform;",
                "+import com.facebook.buck.python.toolchain.PythonEnvironment;",
                "+import com.facebook.buck.python.toolchain.PythonPlatform;",
                "+import com.facebook.buck.python.toolchain.PythonPlatformsProvider;",
                "+import com.facebook.buck.python.toolchain.PythonVersion;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.CommandTool;",
                "+import com.facebook.buck.rules.ConstantToolProvider;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.FakeSourcePath;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.SourceWithFlags;",
                "+import com.facebook.buck.rules.SymlinkTree;",
                "+import com.facebook.buck.rules.TargetGraph;",
                "+import com.facebook.buck.rules.TestBuildRuleResolver;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.testutil.AllExistingProjectFilesystem;",
                "+import com.facebook.buck.testutil.FakeProjectFilesystem;",
                "+import com.facebook.buck.testutil.TargetGraphFactory;",
                "+import com.facebook.buck.toolchain.impl.ToolchainProviderBuilder;",
                "+import com.facebook.buck.util.HumanReadableException;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import com.google.common.collect.Iterables;",
                "+import java.nio.file.Paths;",
                "+import java.util.Optional;",
                "+import java.util.regex.Pattern;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Rule;",
                "+import org.junit.Test;",
                "+import org.junit.rules.ExpectedException;",
                "+",
                "+public class LuaBinaryDescriptionTest {",
                "+",
                "+  private static final BuildTarget PYTHON2_DEP_TARGET =",
                "+      BuildTargetFactory.newInstance(\"//:python2_dep\");",
                "+  private static final PythonPlatform PY2 =",
                "+      new TestPythonPlatform(",
                "+          InternalFlavor.of(\"py2\"),",
                "+          new PythonEnvironment(Paths.get(\"python2\"), PythonVersion.of(\"CPython\", \"2.6\")),",
                "+          Optional.of(PYTHON2_DEP_TARGET));",
                "+",
                "+  private static final BuildTarget PYTHON3_DEP_TARGET =",
                "+      BuildTargetFactory.newInstance(\"//:python3_dep\");",
                "+  private static final PythonPlatform PY3 =",
                "+      new TestPythonPlatform(",
                "+          InternalFlavor.of(\"py3\"),",
                "+          new PythonEnvironment(Paths.get(\"python3\"), PythonVersion.of(\"CPython\", \"3.5\")),",
                "+          Optional.of(PYTHON3_DEP_TARGET));",
                "+",
                "+  @Rule public ExpectedException expectedException = ExpectedException.none();",
                "+",
                "+  @Test",
                "+  public void mainModule() throws Exception {",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver();",
                "+    LuaBinary binary =",
                "+        new LuaBinaryBuilder(BuildTargetFactory.newInstance(\"//:rule\"))",
                "+            .setMainModule(\"hello.world\")",
                "+            .build(resolver);",
                "+    assertThat(binary.getMainModule(), Matchers.equalTo(\"hello.world\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void extensionOverride() throws Exception {",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver();",
                "+    SourcePathResolver pathResolver =",
                "+        DefaultSourcePathResolver.from(new SourcePathRuleFinder(resolver));",
                "+    LuaBinary binary =",
                "+        new LuaBinaryBuilder(",
                "+                BuildTargetFactory.newInstance(\"//:rule\"),",
                "+                LuaTestUtils.DEFAULT_PLATFORM.withExtension(\".override\"))",
                "+            .setMainModule(\"main\")",
                "+            .build(resolver);",
                "+    assertThat(",
                "+        pathResolver.getRelativePath(binary.getSourcePathToOutput()).toString(),",
                "+        Matchers.endsWith(\".override\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void toolOverride() throws Exception {",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver();",
                "+    Tool override = new CommandTool.Builder().addArg(\"override\").build();",
                "+    LuaBinary binary =",
                "+        new LuaBinaryBuilder(",
                "+                BuildTargetFactory.newInstance(\"//:rule\"),",
                "+                LuaTestUtils.DEFAULT_PLATFORM",
                "+                    .withLua(new ConstantToolProvider(override))",
                "+                    .withExtension(\".override\"))",
                "+            .setMainModule(\"main\")",
                "+            .build(resolver);",
                "+    assertThat(binary.getLua(), Matchers.is(override));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void versionLessNativeLibraryExtension() {",
                "+    CxxLibraryBuilder cxxLibraryBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:lib\"))",
                "+            .setSoname(\"libfoo.so.1.0\")",
                "+            .setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"hello.c\"))));",
                "+    LuaBinaryBuilder binaryBuilder =",
                "+        new LuaBinaryBuilder(",
                "+                BuildTargetFactory.newInstance(\"//:rule\"),",
                "+                LuaTestUtils.DEFAULT_PLATFORM.withPackageStyle(LuaPlatform.PackageStyle.INPLACE))",
                "+            .setMainModule(\"main\")",
                "+            .setDeps(ImmutableSortedSet.of(cxxLibraryBuilder.getTarget()));",
                "+    BuildRuleResolver resolver =",
                "+        new TestBuildRuleResolver(",
                "+            TargetGraphFactory.newInstance(cxxLibraryBuilder.build(), binaryBuilder.build()));",
                "+    cxxLibraryBuilder.build(resolver);",
                "+    binaryBuilder.build(resolver);",
                "+    SymlinkTree tree =",
                "+        resolver.getRuleWithType(",
                "+            LuaBinaryDescription.getNativeLibsSymlinkTreeTarget(binaryBuilder.getTarget()),",
                "+            SymlinkTree.class);",
                "+    assertThat(",
                "+        tree.getLinks().keySet(),",
                "+        Matchers.hasItem(tree.getProjectFilesystem().getPath(\"libfoo.so\")));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void duplicateIdenticalModules() {",
                "+    LuaLibraryBuilder libraryABuilder =",
                "+        new LuaLibraryBuilder(BuildTargetFactory.newInstance(\"//:a\"))",
                "+            .setSrcs(ImmutableSortedMap.of(\"foo.lua\", FakeSourcePath.of(\"test\")));",
                "+    LuaLibraryBuilder libraryBBuilder =",
                "+        new LuaLibraryBuilder(BuildTargetFactory.newInstance(\"//:b\"))",
                "+            .setSrcs(ImmutableSortedMap.of(\"foo.lua\", FakeSourcePath.of(\"test\")));",
                "+    LuaBinaryBuilder binaryBuilder =",
                "+        new LuaBinaryBuilder(BuildTargetFactory.newInstance(\"//:rule\"))",
                "+            .setMainModule(\"hello.world\")",
                "+            .setDeps(",
                "+                ImmutableSortedSet.of(libraryABuilder.getTarget(), libraryBBuilder.getTarget()));",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    TargetGraph targetGraph =",
                "+        TargetGraphFactory.newInstance(",
                "+            libraryABuilder.build(), libraryBBuilder.build(), binaryBuilder.build());",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    libraryABuilder.build(resolver, filesystem, targetGraph);",
                "+    libraryBBuilder.build(resolver, filesystem, targetGraph);",
                "+    binaryBuilder.build(resolver, filesystem, targetGraph);",
                "+  }",
                "+",
                "+  @Test",
                "+  public void duplicateConflictingModules() {",
                "+    LuaLibraryBuilder libraryABuilder =",
                "+        new LuaLibraryBuilder(BuildTargetFactory.newInstance(\"//:a\"))",
                "+            .setSrcs(ImmutableSortedMap.of(\"foo.lua\", FakeSourcePath.of(\"foo\")));",
                "+    LuaLibraryBuilder libraryBBuilder =",
                "+        new LuaLibraryBuilder(BuildTargetFactory.newInstance(\"//:b\"))",
                "+            .setSrcs(ImmutableSortedMap.of(\"foo.lua\", FakeSourcePath.of(\"bar\")));",
                "+    LuaBinaryBuilder binaryBuilder =",
                "+        new LuaBinaryBuilder(BuildTargetFactory.newInstance(\"//:rule\"))",
                "+            .setMainModule(\"hello.world\")",
                "+            .setDeps(",
                "+                ImmutableSortedSet.of(libraryABuilder.getTarget(), libraryBBuilder.getTarget()));",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    TargetGraph targetGraph =",
                "+        TargetGraphFactory.newInstance(",
                "+            libraryABuilder.build(), libraryBBuilder.build(), binaryBuilder.build());",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    libraryABuilder.build(resolver, filesystem, targetGraph);",
                "+    libraryBBuilder.build(resolver, filesystem, targetGraph);",
                "+    expectedException.expect(HumanReadableException.class);",
                "+    expectedException.expectMessage(Matchers.containsString(\"conflicting modules for foo.lua\"));",
                "+    binaryBuilder.build(resolver, filesystem, targetGraph);",
                "+  }",
                "+",
                "+  @Test",
                "+  public void pythonDeps() {",
                "+    PythonLibraryBuilder pythonLibraryBuilder =",
                "+        new PythonLibraryBuilder(BuildTargetFactory.newInstance(\"//:dep\"))",
                "+            .setSrcs(",
                "+                SourceList.ofUnnamedSources(ImmutableSortedSet.of(FakeSourcePath.of(\"foo.py\"))));",
                "+    LuaBinaryBuilder luaBinaryBuilder =",
                "+        new LuaBinaryBuilder(BuildTargetFactory.newInstance(\"//:rule\"))",
                "+            .setMainModule(\"hello.world\")",
                "+            .setDeps(ImmutableSortedSet.of(pythonLibraryBuilder.getTarget()));",
                "+    TargetGraph targetGraph =",
                "+        TargetGraphFactory.newInstance(pythonLibraryBuilder.build(), luaBinaryBuilder.build());",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    pythonLibraryBuilder.build(resolver, filesystem, targetGraph);",
                "+    LuaBinary luaBinary = luaBinaryBuilder.build(resolver, filesystem, targetGraph);",
                "+    assertThat(luaBinary.getComponents().getPythonModules().keySet(), Matchers.hasItem(\"foo.py\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void cxxPythonExtensionPlatformDeps() {",
                "+    FlavorDomain<PythonPlatform> pythonPlatforms = FlavorDomain.of(\"Python Platform\", PY2, PY3);",
                "+    CxxBuckConfig cxxBuckConfig = new CxxBuckConfig(FakeBuckConfig.builder().build());",
                "+",
                "+    CxxLibraryBuilder py2LibBuilder = new CxxLibraryBuilder(PYTHON2_DEP_TARGET);",
                "+    CxxLibraryBuilder py3LibBuilder = new CxxLibraryBuilder(PYTHON3_DEP_TARGET);",
                "+    CxxLibraryBuilder py2CxxLibraryBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:py2_library\"))",
                "+            .setSoname(\"libpy2.so\")",
                "+            .setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"hello.c\"))));",
                "+    CxxLibraryBuilder py3CxxLibraryBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:py3_library\"))",
                "+            .setSoname(\"libpy3.so\")",
                "+            .setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"hello.c\"))));",
                "+    CxxPythonExtensionBuilder cxxPythonExtensionBuilder =",
                "+        new CxxPythonExtensionBuilder(",
                "+                BuildTargetFactory.newInstance(\"//:extension\"),",
                "+                pythonPlatforms,",
                "+                cxxBuckConfig,",
                "+                CxxTestUtils.createDefaultPlatforms())",
                "+            .setPlatformDeps(",
                "+                PatternMatchedCollection.<ImmutableSortedSet<BuildTarget>>builder()",
                "+                    .add(",
                "+                        Pattern.compile(PY2.getFlavor().toString()),",
                "+                        ImmutableSortedSet.of(py2CxxLibraryBuilder.getTarget()))",
                "+                    .add(",
                "+                        Pattern.compile(PY3.getFlavor().toString()),",
                "+                        ImmutableSortedSet.of(py3CxxLibraryBuilder.getTarget()))",
                "+                    .build());",
                "+    LuaBinaryBuilder luaBinaryBuilder =",
                "+        new LuaBinaryBuilder(",
                "+                new LuaBinaryDescription(",
                "+                    new ToolchainProviderBuilder()",
                "+                        .withToolchain(",
                "+                            LuaPlatformsProvider.DEFAULT_NAME,",
                "+                            LuaPlatformsProvider.of(",
                "+                                LuaTestUtils.DEFAULT_PLATFORM, LuaTestUtils.DEFAULT_PLATFORMS))",
                "+                        .withToolchain(",
                "+                            PythonPlatformsProvider.DEFAULT_NAME,",
                "+                            PythonPlatformsProvider.of(pythonPlatforms))",
                "+                        .build(),",
                "+                    cxxBuckConfig),",
                "+                BuildTargetFactory.newInstance(\"//:binary\"))",
                "+            .setMainModule(\"main\")",
                "+            .setDeps(ImmutableSortedSet.of(cxxPythonExtensionBuilder.getTarget()));",
                "+",
                "+    BuildRuleResolver resolver =",
                "+        new TestBuildRuleResolver(",
                "+            TargetGraphFactory.newInstance(",
                "+                py2LibBuilder.build(),",
                "+                py3LibBuilder.build(),",
                "+                py2CxxLibraryBuilder.build(),",
                "+                py3CxxLibraryBuilder.build(),",
                "+                cxxPythonExtensionBuilder.build(),",
                "+                luaBinaryBuilder.build()));",
                "+",
                "+    py2LibBuilder.build(resolver);",
                "+    py3LibBuilder.build(resolver);",
                "+    py2CxxLibraryBuilder.build(resolver);",
                "+    py3CxxLibraryBuilder.build(resolver);",
                "+    cxxPythonExtensionBuilder.build(resolver);",
                "+    LuaBinary luaBinary = luaBinaryBuilder.build(resolver);",
                "+",
                "+    LuaPackageComponents components = luaBinary.getComponents();",
                "+    assertThat(components.getNativeLibraries().keySet(), Matchers.hasItem(\"libpy2.so\"));",
                "+    assertThat(",
                "+        components.getNativeLibraries().keySet(), Matchers.not(Matchers.hasItem(\"libpy3.so\")));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void pythonInitIsRuntimeDepForInPlaceBinary() {",
                "+    PythonLibraryBuilder pythonLibraryBuilder =",
                "+        new PythonLibraryBuilder(BuildTargetFactory.newInstance(\"//:dep\"))",
                "+            .setSrcs(",
                "+                SourceList.ofUnnamedSources(ImmutableSortedSet.of(FakeSourcePath.of(\"foo.py\"))));",
                "+    LuaBinaryBuilder luaBinaryBuilder =",
                "+        new LuaBinaryBuilder(BuildTargetFactory.newInstance(\"//:rule\"))",
                "+            .setMainModule(\"hello.world\")",
                "+            .setPackageStyle(LuaPlatform.PackageStyle.INPLACE)",
                "+            .setDeps(ImmutableSortedSet.of(pythonLibraryBuilder.getTarget()));",
                "+    TargetGraph targetGraph =",
                "+        TargetGraphFactory.newInstance(pythonLibraryBuilder.build(), luaBinaryBuilder.build());",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    pythonLibraryBuilder.build(resolver, filesystem, targetGraph);",
                "+    LuaBinary luaBinary = luaBinaryBuilder.build(resolver, filesystem, targetGraph);",
                "+    assertThat(",
                "+        luaBinary",
                "+            .getRuntimeDeps(new SourcePathRuleFinder(resolver))",
                "+            .collect(ImmutableSet.toImmutableSet()),",
                "+        Matchers.hasItem(PythonBinaryDescription.getEmptyInitTarget(luaBinary.getBuildTarget())));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void transitiveNativeDepsUsingMergedNativeLinkStrategy() {",
                "+    CxxLibraryBuilder transitiveCxxDepBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:transitive_dep\"))",
                "+            .setSrcs(",
                "+                ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"transitive_dep.c\"))));",
                "+    CxxLibraryBuilder cxxDepBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:dep\"))",
                "+            .setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"dep.c\"))))",
                "+            .setDeps(ImmutableSortedSet.of(transitiveCxxDepBuilder.getTarget()));",
                "+    CxxLibraryBuilder cxxBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:cxx\"))",
                "+            .setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"cxx.c\"))))",
                "+            .setDeps(ImmutableSortedSet.of(cxxDepBuilder.getTarget()));",
                "+",
                "+    LuaBinaryBuilder binaryBuilder =",
                "+        new LuaBinaryBuilder(",
                "+            BuildTargetFactory.newInstance(\"//:bin\"),",
                "+            LuaTestUtils.DEFAULT_PLATFORM.withNativeLinkStrategy(NativeLinkStrategy.MERGED));",
                "+    binaryBuilder.setMainModule(\"main\");",
                "+    binaryBuilder.setDeps(ImmutableSortedSet.of(cxxBuilder.getTarget()));",
                "+",
                "+    BuildRuleResolver resolver =",
                "+        new TestBuildRuleResolver(",
                "+            TargetGraphFactory.newInstance(",
                "+                transitiveCxxDepBuilder.build(),",
                "+                cxxDepBuilder.build(),",
                "+                cxxBuilder.build(),",
                "+                binaryBuilder.build()));",
                "+    transitiveCxxDepBuilder.build(resolver);",
                "+    cxxDepBuilder.build(resolver);",
                "+    cxxBuilder.build(resolver);",
                "+    LuaBinary binary = binaryBuilder.build(resolver);",
                "+    assertThat(",
                "+        Iterables.transform(binary.getComponents().getNativeLibraries().keySet(), Object::toString),",
                "+        Matchers.containsInAnyOrder(\"libomnibus.so\", \"libcxx.so\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void transitiveNativeDepsUsingSeparateNativeLinkStrategy() {",
                "+    CxxLibraryBuilder transitiveCxxDepBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:transitive_dep\"))",
                "+            .setSrcs(",
                "+                ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"transitive_dep.c\"))));",
                "+    CxxLibraryBuilder cxxDepBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:dep\"))",
                "+            .setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"dep.c\"))))",
                "+            .setDeps(ImmutableSortedSet.of(transitiveCxxDepBuilder.getTarget()));",
                "+    CxxLibraryBuilder cxxBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:cxx\"))",
                "+            .setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"cxx.c\"))))",
                "+            .setDeps(ImmutableSortedSet.of(cxxDepBuilder.getTarget()));",
                "+",
                "+    LuaBinaryBuilder binaryBuilder =",
                "+        new LuaBinaryBuilder(",
                "+            BuildTargetFactory.newInstance(\"//:bin\"),",
                "+            LuaTestUtils.DEFAULT_PLATFORM.withNativeLinkStrategy(NativeLinkStrategy.SEPARATE));",
                "+    binaryBuilder.setMainModule(\"main\");",
                "+    binaryBuilder.setDeps(ImmutableSortedSet.of(cxxBuilder.getTarget()));",
                "+",
                "+    BuildRuleResolver resolver =",
                "+        new TestBuildRuleResolver(",
                "+            TargetGraphFactory.newInstance(",
                "+                transitiveCxxDepBuilder.build(),",
                "+                cxxDepBuilder.build(),",
                "+                cxxBuilder.build(),",
                "+                binaryBuilder.build()));",
                "+    transitiveCxxDepBuilder.build(resolver);",
                "+    cxxDepBuilder.build(resolver);",
                "+    cxxBuilder.build(resolver);",
                "+    LuaBinary binary = binaryBuilder.build(resolver);",
                "+    assertThat(",
                "+        Iterables.transform(binary.getComponents().getNativeLibraries().keySet(), Object::toString),",
                "+        Matchers.containsInAnyOrder(\"libtransitive_dep.so\", \"libdep.so\", \"libcxx.so\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void transitiveDepsOfNativeStarterDepsAreIncludedInMergedNativeLinkStrategy() {",
                "+    CxxLibraryBuilder transitiveCxxDepBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:transitive_dep\"))",
                "+            .setSrcs(",
                "+                ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"transitive_dep.c\"))));",
                "+    CxxLibraryBuilder cxxDepBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:dep\"))",
                "+            .setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"dep.c\"))))",
                "+            .setDeps(ImmutableSortedSet.of(transitiveCxxDepBuilder.getTarget()));",
                "+    CxxLibraryBuilder cxxBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:cxx\"))",
                "+            .setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"cxx.c\"))))",
                "+            .setDeps(ImmutableSortedSet.of(cxxDepBuilder.getTarget()));",
                "+    CxxLibraryBuilder nativeStarterCxxBuilder =",
                "+        new CxxLibraryBuilder(BuildTargetFactory.newInstance(\"//:native_starter\"))",
                "+            .setSrcs(",
                "+                ImmutableSortedSet.of(SourceWithFlags.of(FakeSourcePath.of(\"native_starter.c\"))))",
                "+            .setDeps(ImmutableSortedSet.of(transitiveCxxDepBuilder.getTarget()));",
                "+",
                "+    LuaBinaryBuilder binaryBuilder =",
                "+        new LuaBinaryBuilder(",
                "+            BuildTargetFactory.newInstance(\"//:bin\"),",
                "+            LuaTestUtils.DEFAULT_PLATFORM.withNativeLinkStrategy(NativeLinkStrategy.MERGED));",
                "+    binaryBuilder.setMainModule(\"main\");",
                "+    binaryBuilder.setDeps(ImmutableSortedSet.of(cxxBuilder.getTarget()));",
                "+    binaryBuilder.setNativeStarterLibrary(nativeStarterCxxBuilder.getTarget());",
                "+",
                "+    BuildRuleResolver resolver =",
                "+        new TestBuildRuleResolver(",
                "+            TargetGraphFactory.newInstance(",
                "+                transitiveCxxDepBuilder.build(),",
                "+                cxxDepBuilder.build(),",
                "+                cxxBuilder.build(),",
                "+                nativeStarterCxxBuilder.build(),",
                "+                binaryBuilder.build()));",
                "+    transitiveCxxDepBuilder.build(resolver);",
                "+    cxxDepBuilder.build(resolver);",
                "+    cxxBuilder.build(resolver);",
                "+    nativeStarterCxxBuilder.build(resolver);",
                "+    LuaBinary binary = binaryBuilder.build(resolver);",
                "+    assertThat(",
                "+        Iterables.transform(binary.getComponents().getNativeLibraries().keySet(), Object::toString),",
                "+        Matchers.containsInAnyOrder(\"libomnibus.so\", \"libcxx.so\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void pythonExtensionDepUsingMergedNativeLinkStrategy() {",
                "+    FlavorDomain<PythonPlatform> pythonPlatforms = FlavorDomain.of(\"Python Platform\", PY2);",
                "+",
                "+    PrebuiltCxxLibraryBuilder python2Builder =",
                "+        new PrebuiltCxxLibraryBuilder(PYTHON2_DEP_TARGET)",
                "+            .setProvided(true)",
                "+            .setSharedLib(FakeSourcePath.of(\"lipython2.so\"));",
                "+",
                "+    CxxPythonExtensionBuilder extensionBuilder =",
                "+        new CxxPythonExtensionBuilder(",
                "+            BuildTargetFactory.newInstance(\"//:extension\"),",
                "+            pythonPlatforms,",
                "+            new CxxBuckConfig(FakeBuckConfig.builder().build()),",
                "+            CxxPlatformUtils.DEFAULT_PLATFORMS);",
                "+    extensionBuilder.setBaseModule(\"hello\");",
                "+",
                "+    LuaPlatform platform =",
                "+        LuaTestUtils.DEFAULT_PLATFORM.withNativeLinkStrategy(NativeLinkStrategy.MERGED);",
                "+    LuaBinaryBuilder binaryBuilder =",
                "+        new LuaBinaryBuilder(",
                "+            BuildTargetFactory.newInstance(\"//:bin\"),",
                "+            platform,",
                "+            FlavorDomain.of(LuaPlatform.FLAVOR_DOMAIN_NAME, platform),",
                "+            CxxPlatformUtils.DEFAULT_CONFIG,",
                "+            pythonPlatforms);",
                "+    binaryBuilder.setMainModule(\"main\");",
                "+    binaryBuilder.setDeps(ImmutableSortedSet.of(extensionBuilder.getTarget()));",
                "+",
                "+    TargetGraph targetGraph =",
                "+        TargetGraphFactory.newInstance(",
                "+            python2Builder.build(), extensionBuilder.build(), binaryBuilder.build());",
                "+    ProjectFilesystem filesystem = new AllExistingProjectFilesystem();",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    python2Builder.build(resolver, filesystem, targetGraph);",
                "+    extensionBuilder.build(resolver, filesystem, targetGraph);",
                "+    LuaBinary binary = binaryBuilder.build(resolver, filesystem, targetGraph);",
                "+    assertThat(binary.getComponents().getNativeLibraries().entrySet(), Matchers.empty());",
                "+    assertThat(",
                "+        Iterables.transform(binary.getComponents().getPythonModules().keySet(), Object::toString),",
                "+        Matchers.hasItem(MorePaths.pathWithPlatformSeparators(\"hello/extension.so\")));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void platformDeps() {",
                "+    SourcePath libASrc = FakeSourcePath.of(\"libA.lua\");",
                "+    LuaLibraryBuilder libraryABuilder =",
                "+        new LuaLibraryBuilder(BuildTargetFactory.newInstance(\"//:libA\"))",
                "+            .setSrcs(ImmutableSortedSet.of(libASrc));",
                "+    SourcePath libBSrc = FakeSourcePath.of(\"libB.lua\");",
                "+    LuaLibraryBuilder libraryBBuilder =",
                "+        new LuaLibraryBuilder(BuildTargetFactory.newInstance(\"//:libB\"))",
                "+            .setSrcs(ImmutableSortedSet.of(libBSrc));",
                "+    LuaBinaryBuilder binaryBuilder =",
                "+        new LuaBinaryBuilder(BuildTargetFactory.newInstance(\"//:bin\"))",
                "+            .setMainModule(\"main\")",
                "+            .setPlatformDeps(",
                "+                PatternMatchedCollection.<ImmutableSortedSet<BuildTarget>>builder()",
                "+                    .add(",
                "+                        Pattern.compile(",
                "+                            CxxPlatformUtils.DEFAULT_PLATFORM.getFlavor().toString(),",
                "+                            Pattern.LITERAL),",
                "+                        ImmutableSortedSet.of(libraryABuilder.getTarget()))",
                "+                    .add(",
                "+                        Pattern.compile(\"matches nothing\", Pattern.LITERAL),",
                "+                        ImmutableSortedSet.of(libraryBBuilder.getTarget()))",
                "+                    .build());",
                "+    TargetGraph targetGraph =",
                "+        TargetGraphFactory.newInstance(",
                "+            libraryABuilder.build(), libraryBBuilder.build(), binaryBuilder.build());",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    LuaBinary binary = (LuaBinary) resolver.requireRule(binaryBuilder.getTarget());",
                "+    assertThat(",
                "+        binary.getComponents().getModules().values(),",
                "+        Matchers.allOf(Matchers.hasItem(libASrc), Matchers.not(Matchers.hasItem(libBSrc))));",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/lua/LuaBinaryIntegrationTest.java b/test/com/facebook/buck/features/lua/LuaBinaryIntegrationTest.java",
                "new file mode 100644",
                "index 0000000000..0017aa82af",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/LuaBinaryIntegrationTest.java",
                "@@ -0,0 +1,334 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import static org.hamcrest.Matchers.containsString;",
                "+import static org.junit.Assert.assertEquals;",
                "+import static org.junit.Assert.assertThat;",
                "+import static org.junit.Assert.assertTrue;",
                "+import static org.junit.Assume.assumeThat;",
                "+import static org.junit.Assume.assumeTrue;",
                "+",
                "+import com.facebook.buck.config.BuckConfig;",
                "+import com.facebook.buck.config.FakeBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.cxx.toolchain.DefaultCxxPlatforms;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkStrategy;",
                "+import com.facebook.buck.io.ExecutableFinder;",
                "+import com.facebook.buck.io.FakeExecutableFinder;",
                "+import com.facebook.buck.io.filesystem.TestProjectFilesystems;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.DefaultCellPathResolver;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.TestBuildRuleResolver;",
                "+import com.facebook.buck.testutil.ParameterizedTests;",
                "+import com.facebook.buck.testutil.ProcessResult;",
                "+import com.facebook.buck.testutil.TemporaryPaths;",
                "+import com.facebook.buck.testutil.integration.ProjectWorkspace;",
                "+import com.facebook.buck.testutil.integration.TestDataHelper;",
                "+import com.facebook.buck.util.Console;",
                "+import com.facebook.buck.util.DefaultProcessExecutor;",
                "+import com.facebook.buck.util.ExitCode;",
                "+import com.facebook.buck.util.ProcessExecutor;",
                "+import com.facebook.buck.util.ProcessExecutorParams;",
                "+import com.facebook.buck.util.config.Config;",
                "+import com.facebook.buck.util.config.Configs;",
                "+import com.facebook.buck.util.environment.Architecture;",
                "+import com.facebook.buck.util.environment.Platform;",
                "+import com.facebook.buck.util.json.ObjectMappers;",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                "+import com.google.common.base.Joiner;",
                "+import com.google.common.base.Splitter;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import java.io.IOException;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                "+import java.util.Arrays;",
                "+import java.util.Collection;",
                "+import java.util.Optional;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Before;",
                "+import org.junit.Rule;",
                "+import org.junit.Test;",
                "+import org.junit.runner.RunWith;",
                "+import org.junit.runners.Parameterized;",
                "+",
                "+@RunWith(Parameterized.class)",
                "+public class LuaBinaryIntegrationTest {",
                "+",
                "+  private ProjectWorkspace workspace;",
                "+  private Path lua;",
                "+  private boolean luaDevel;",
                "+",
                "+  @Parameterized.Parameters(name = \"{0} {1} sandbox_sources={2}\")",
                "+  public static Collection<Object[]> data() {",
                "+    return ParameterizedTests.getPermutations(",
                "+        Arrays.asList(LuaBinaryDescription.StarterType.values()),",
                "+        Arrays.asList(NativeLinkStrategy.values()),",
                "+        ImmutableList.of(true, false));",
                "+  }",
                "+",
                "+  @Parameterized.Parameter public LuaBinaryDescription.StarterType starterType;",
                "+",
                "+  @Parameterized.Parameter(value = 1)",
                "+  public NativeLinkStrategy nativeLinkStrategy;",
                "+",
                "+  @Parameterized.Parameter(value = 2)",
                "+  public boolean sandboxSources;",
                "+",
                "+  @Rule public TemporaryPaths tmp = new TemporaryPaths();",
                "+",
                "+  @Before",
                "+  public void setUp() throws Exception {",
                "+",
                "+    // We don't currently support windows.",
                "+    assumeThat(Platform.detect(), Matchers.not(Platform.WINDOWS));",
                "+",
                "+    // Verify that a Lua interpreter is available on the system.",
                "+    ExecutableFinder finder = new ExecutableFinder();",
                "+    Optional<Path> luaOptional =",
                "+        finder.getOptionalExecutable(Paths.get(\"lua\"), ImmutableMap.copyOf(System.getenv()));",
                "+    assumeTrue(luaOptional.isPresent());",
                "+    lua = luaOptional.get();",
                "+",
                "+    // Try to detect if a Lua devel package is available, which is needed to C/C++ support.",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver();",
                "+    CxxPlatform cxxPlatform =",
                "+        DefaultCxxPlatforms.build(",
                "+            Platform.detect(), new CxxBuckConfig(FakeBuckConfig.builder().build()));",
                "+    ProcessExecutorParams params =",
                "+        ProcessExecutorParams.builder()",
                "+            .setCommand(",
                "+                ImmutableList.<String>builder()",
                "+                    .addAll(",
                "+                        cxxPlatform",
                "+                            .getCc()",
                "+                            .resolve(resolver)",
                "+                            .getCommandPrefix(",
                "+                                DefaultSourcePathResolver.from(new SourcePathRuleFinder(resolver))))",
                "+                    .add(\"-includelua.h\", \"-E\", \"-\")",
                "+                    .build())",
                "+            .setRedirectInput(ProcessBuilder.Redirect.PIPE)",
                "+            .build();",
                "+    ProcessExecutor executor = new DefaultProcessExecutor(Console.createNullConsole());",
                "+    ProcessExecutor.LaunchedProcess launchedProcess = executor.launchProcess(params);",
                "+    launchedProcess.getOutputStream().close();",
                "+    int exitCode = executor.waitForLaunchedProcess(launchedProcess).getExitCode();",
                "+    luaDevel = exitCode == 0;",
                "+    if (starterType == LuaBinaryDescription.StarterType.NATIVE) {",
                "+      assumeTrue(\"Lua devel package required for native starter\", luaDevel);",
                "+    }",
                "+",
                "+    // Setup the workspace.",
                "+    workspace = TestDataHelper.createProjectWorkspaceForScenario(this, \"lua_binary\", tmp);",
                "+    workspace.setUp();",
                "+    workspace.writeContentsToPath(",
                "+        Joiner.on(System.lineSeparator())",
                "+            .join(",
                "+                ImmutableList.of(",
                "+                    \"[lua]\",",
                "+                    \"  starter_type = \" + starterType.toString().toLowerCase(),",
                "+                    \"  native_link_strategy = \" + nativeLinkStrategy.toString().toLowerCase(),",
                "+                    \"[cxx]\",",
                "+                    \"  sandbox_sources =\" + sandboxSources)),",
                "+        \".buckconfig\");",
                "+    LuaPlatform platform =",
                "+        getLuaBuckConfig()",
                "+            .getPlatforms(",
                "+                ImmutableList.of(",
                "+                    CxxPlatformUtils.DEFAULT_PLATFORM.withFlavor(DefaultCxxPlatforms.FLAVOR)))",
                "+            .get(0);",
                "+    assertThat(platform.getStarterType(), Matchers.equalTo(Optional.of(starterType)));",
                "+    assertThat(platform.getNativeLinkStrategy(), Matchers.equalTo(nativeLinkStrategy));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void stdout() throws Exception {",
                "+    workspace.writeContentsToPath(\"require 'os'; io.stdout:write('hello world')\", \"simple.lua\");",
                "+    ProcessResult result = workspace.runBuckCommand(\"run\", \"//:simple\").assertSuccess();",
                "+    assertThat(",
                "+        result.getStdout() + result.getStderr(),",
                "+        result.getStdout().trim(),",
                "+        Matchers.equalTo(\"hello world\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void stderr() throws Exception {",
                "+    workspace.writeContentsToPath(\"require 'os'; io.stderr:write('hello world')\", \"simple.lua\");",
                "+    Path path = workspace.buildAndReturnOutput(\"//:simple\");",
                "+    ProcessExecutor.Result result = workspace.runCommand(path.toString());",
                "+    assertThat(",
                "+        result.getStdout().orElse(\"\") + result.getStderr().orElse(\"\"),",
                "+        result.getStderr().orElse(\"\").trim(),",
                "+        Matchers.endsWith(\"hello world\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void errorCode() throws Exception {",
                "+    workspace.writeContentsToPath(\"require 'os'\\nos.exit(5)\", \"simple.lua\");",
                "+    workspace.runBuckBuild(\"//:simple\").assertSuccess();",
                "+    ProcessResult result = workspace.runBuckCommand(\"run\", \"//:simple\");",
                "+    assertEquals(result.getExitCode(), ExitCode.BUILD_ERROR);",
                "+  }",
                "+",
                "+  @Test",
                "+  public void error() throws Exception {",
                "+    workspace.writeContentsToPath(\"blah blah garbage\", \"simple.lua\");",
                "+    workspace.runBuckBuild(\"//:simple\").assertSuccess();",
                "+    workspace.runBuckCommand(\"run\", \"//:simple\").assertFailure();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void args() throws Exception {",
                "+    workspace.writeContentsToPath(\"for i=-1,#arg do print(arg[i]) end\", \"simple.lua\");",
                "+    Path arg0 = workspace.buildAndReturnOutput(\"//:simple\");",
                "+",
                "+    // no args...",
                "+    ProcessResult result = workspace.runBuckCommand(\"run\", \"//:simple\").assertSuccess();",
                "+    assertThat(",
                "+        result.getStdout() + result.getStderr(),",
                "+        Splitter.on(System.lineSeparator()).splitToList(result.getStdout().trim()),",
                "+        Matchers.contains(",
                "+            ImmutableList.of(",
                "+                Matchers.anyOf(Matchers.equalTo(lua.toString()), Matchers.equalTo(\"nil\")),",
                "+                Matchers.endsWith(arg0.toString()))));",
                "+",
                "+    // with args...",
                "+    result = workspace.runBuckCommand(\"run\", \"//:simple\", \"--\", \"hello\", \"world\").assertSuccess();",
                "+    assertThat(",
                "+        result.getStdout() + result.getStderr(),",
                "+        Splitter.on(System.lineSeparator()).splitToList(result.getStdout().trim()),",
                "+        Matchers.contains(",
                "+            ImmutableList.of(",
                "+                Matchers.anyOf(Matchers.equalTo(lua.toString()), Matchers.equalTo(\"nil\")),",
                "+                Matchers.endsWith(arg0.toString()),",
                "+                Matchers.equalTo(\"hello\"),",
                "+                Matchers.equalTo(\"world\"))));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void nativeExtension() throws Exception {",
                "+    assumeTrue(luaDevel);",
                "+    ProcessResult result = workspace.runBuckCommand(\"run\", \"//:native\").assertSuccess();",
                "+    assertThat(",
                "+        result.getStdout() + result.getStderr(),",
                "+        result.getStdout().trim(),",
                "+        Matchers.equalTo(\"hello world\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void nativeExtensionWithDep() throws Exception {",
                "+    assumeThat(starterType, Matchers.not(Matchers.equalTo(LuaBinaryDescription.StarterType.PURE)));",
                "+    assumeTrue(luaDevel);",
                "+    ProcessResult result = workspace.runBuckCommand(\"run\", \"//:native_with_dep\").assertSuccess();",
                "+    assertThat(",
                "+        result.getStdout() + result.getStderr(),",
                "+        result.getStdout().trim(),",
                "+        Matchers.equalTo(\"hello world\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void packagedFormat() throws Exception {",
                "+    Path output =",
                "+        workspace.buildAndReturnOutput(",
                "+            \"-c\", \"lua.package_style=standalone\", \"-c\", \"lua.packager=//:packager\", \"//:simple\");",
                "+    ImmutableMap<String, ImmutableMap<String, String>> components =",
                "+        ObjectMappers.readValue(",
                "+            output, new TypeReference<ImmutableMap<String, ImmutableMap<String, String>>>() {});",
                "+    assertThat(components.get(\"modules\").keySet(), Matchers.equalTo(ImmutableSet.of(\"simple.lua\")));",
                "+  }",
                "+",
                "+  @Test",
                "+  @SuppressWarnings(\"PMD.UseAssertEqualsInsteadOfAssertTrue\")",
                "+  public void switchingBetweenPacakgedFormats() throws Exception {",
                "+",
                "+    // Run an inital build using the standalone packaging style.",
                "+    String standaloneFirst =",
                "+        workspace.getFileContents(",
                "+            workspace.buildAndReturnOutput(",
                "+                \"-c\",",
                "+                \"lua.package_style=standalone\",",
                "+                \"-c\",",
                "+                \"lua.packager=//:packager\",",
                "+                \"//:simple\"));",
                "+",
                "+    // Now rebuild with just changing to an in-place packaging style.",
                "+    String inplaceFirst =",
                "+        workspace.getFileContents(",
                "+            workspace.buildAndReturnOutput(\"-c\", \"lua.package_style=inplace\", \"//:simple\"));",
                "+",
                "+    // Now rebuild again, switching back to standalone, and verify the output matches the original",
                "+    // build's output.",
                "+    String standaloneSecond =",
                "+        workspace.getFileContents(",
                "+            workspace.buildAndReturnOutput(",
                "+                \"-c\",",
                "+                \"lua.package_style=standalone\",",
                "+                \"-c\",",
                "+                \"lua.packager=//:packager\",",
                "+                \"//:simple\"));",
                "+    assertTrue(standaloneFirst.equals(standaloneSecond));",
                "+",
                "+    // Now rebuild again, switching back to in-place, and verify the output matches the original",
                "+    // build's output.",
                "+    String inplaceSecond =",
                "+        workspace.getFileContents(",
                "+            workspace.buildAndReturnOutput(\"-c\", \"lua.package_style=inplace\", \"//:simple\"));",
                "+    assertTrue(inplaceFirst.equals(inplaceSecond));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void cxxLuaExtensionWithIncludeDirs() throws IOException {",
                "+    assumeTrue(\"\", sandboxSources && starterType == LuaBinaryDescription.StarterType.NATIVE);",
                "+    workspace.runBuckBuild(\"//with_includes:native_with_extension\").assertSuccess();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void cxxLuaExtensionWithoutIncludeDirs() throws IOException {",
                "+    assumeTrue(\"\", sandboxSources && starterType == LuaBinaryDescription.StarterType.NATIVE);",
                "+    workspace.replaceFileContents(\"with_includes/BUCK\", \"include_dirs\", \"#\");",
                "+    ProcessResult luaBinaryResult = workspace.runBuckBuild(\"//with_includes:native_with_extension\");",
                "+    luaBinaryResult.assertFailure();",
                "+    assertThat(luaBinaryResult.getStderr(), containsString(\"extension.h\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void usedInGenruleCommand() throws IOException {",
                "+    assumeTrue(luaDevel);",
                "+    workspace.writeContentsToPath(\"require 'os'; io.stdout:write('okay')\", \"simple.lua\");",
                "+    Path output = workspace.buildAndReturnOutput(\"//:genrule\");",
                "+    assertEquals(\"okay\", workspace.getFileContents(output));",
                "+  }",
                "+",
                "+  private LuaBuckConfig getLuaBuckConfig() throws IOException {",
                "+    Config rawConfig = Configs.createDefaultConfig(tmp.getRoot());",
                "+    BuckConfig buckConfig =",
                "+        new BuckConfig(",
                "+            rawConfig,",
                "+            TestProjectFilesystems.createProjectFilesystem(tmp.getRoot()),",
                "+            Architecture.detect(),",
                "+            Platform.detect(),",
                "+            ImmutableMap.of(),",
                "+            DefaultCellPathResolver.of(tmp.getRoot(), rawConfig));",
                "+    return new LuaBuckConfig(buckConfig, new FakeExecutableFinder(ImmutableList.of()));",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/lua/LuaLibraryBuilder.java b/test/com/facebook/buck/features/lua/LuaLibraryBuilder.java",
                "new file mode 100644",
                "index 0000000000..d9e2f2fd50",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/LuaLibraryBuilder.java",
                "@@ -0,0 +1,61 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.AbstractNodeBuilder;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.google.common.collect.ImmutableSortedMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.util.Optional;",
                "+",
                "+public class LuaLibraryBuilder",
                "+    extends AbstractNodeBuilder<",
                "+        LuaLibraryDescriptionArg.Builder, LuaLibraryDescriptionArg, LuaLibraryDescription,",
                "+        LuaLibrary> {",
                "+",
                "+  public LuaLibraryBuilder(LuaLibraryDescription description, BuildTarget target) {",
                "+    super(description, target);",
                "+  }",
                "+",
                "+  public LuaLibraryBuilder(BuildTarget target) {",
                "+    this(new LuaLibraryDescription(), target);",
                "+  }",
                "+",
                "+  public LuaLibraryBuilder setBaseModule(String baseModule) {",
                "+    getArgForPopulating().setBaseModule(Optional.of(baseModule));",
                "+    return this;",
                "+  }",
                "+",
                "+  public LuaLibraryBuilder setSrcs(ImmutableSortedSet<SourcePath> srcs) {",
                "+    getArgForPopulating().setSrcs(SourceList.ofUnnamedSources(srcs));",
                "+    return this;",
                "+  }",
                "+",
                "+  public LuaLibraryBuilder setSrcs(ImmutableSortedMap<String, SourcePath> srcs) {",
                "+    getArgForPopulating().setSrcs(SourceList.ofNamedSources(srcs));",
                "+    return this;",
                "+  }",
                "+",
                "+  public LuaLibraryBuilder setPlatformDeps(",
                "+      PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> deps) {",
                "+    getArgForPopulating().setPlatformDeps(deps);",
                "+    return this;",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/lua/LuaLibraryDescriptionTest.java b/test/com/facebook/buck/features/lua/LuaLibraryDescriptionTest.java",
                "new file mode 100644",
                "index 0000000000..2040ed9db6",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/LuaLibraryDescriptionTest.java",
                "@@ -0,0 +1,124 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import static org.junit.Assert.assertThat;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.FakeSourcePath;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.TargetGraph;",
                "+import com.facebook.buck.rules.TestBuildRuleResolver;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                "+import com.facebook.buck.testutil.FakeProjectFilesystem;",
                "+import com.facebook.buck.testutil.TargetGraphFactory;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.google.common.collect.ImmutableSortedMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.util.regex.Pattern;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Test;",
                "+",
                "+public class LuaLibraryDescriptionTest {",
                "+",
                "+  @Test",
                "+  public void unnamedSource() {",
                "+    LuaLibraryBuilder builder =",
                "+        new LuaLibraryBuilder(BuildTargetFactory.newInstance(\"//some:rule\"))",
                "+            .setSrcs(ImmutableSortedSet.of(FakeSourcePath.of(\"some/foo.lua\")));",
                "+    TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    LuaLibrary library = builder.build(resolver, filesystem, targetGraph);",
                "+    assertThat(",
                "+        library.getLuaPackageComponents().getModules(),",
                "+        Matchers.equalTo(",
                "+            ImmutableSortedMap.<String, SourcePath>of(",
                "+                \"some/foo.lua\", FakeSourcePath.of(\"some/foo.lua\"))));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void namedSource() {",
                "+    LuaLibraryBuilder builder =",
                "+        new LuaLibraryBuilder(BuildTargetFactory.newInstance(\"//some:rule\"))",
                "+            .setSrcs(ImmutableSortedMap.of(\"bar.lua\", FakeSourcePath.of(\"foo.lua\")));",
                "+    TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    LuaLibrary library = builder.build(resolver, filesystem, targetGraph);",
                "+    assertThat(",
                "+        library.getLuaPackageComponents().getModules(),",
                "+        Matchers.equalTo(",
                "+            ImmutableSortedMap.<String, SourcePath>of(",
                "+                \"some/bar.lua\", FakeSourcePath.of(\"foo.lua\"))));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void baseModuleSource() {",
                "+    LuaLibraryBuilder builder =",
                "+        new LuaLibraryBuilder(BuildTargetFactory.newInstance(\"//some:rule\"))",
                "+            .setSrcs(ImmutableSortedSet.of(FakeSourcePath.of(\"some/foo.lua\")))",
                "+            .setBaseModule(\"blah\");",
                "+    TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    LuaLibrary library = builder.build(resolver, filesystem, targetGraph);",
                "+    assertThat(",
                "+        library.getLuaPackageComponents().getModules(),",
                "+        Matchers.equalTo(",
                "+            ImmutableSortedMap.<String, SourcePath>of(",
                "+                \"blah/foo.lua\", FakeSourcePath.of(\"some/foo.lua\"))));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void platformDeps() {",
                "+    LuaLibraryBuilder libraryABuilder =",
                "+        new LuaLibraryBuilder(BuildTargetFactory.newInstance(\"//:libA\"));",
                "+    LuaLibraryBuilder libraryBBuilder =",
                "+        new LuaLibraryBuilder(BuildTargetFactory.newInstance(\"//:libB\"));",
                "+    LuaLibraryBuilder ruleBuilder =",
                "+        new LuaLibraryBuilder(BuildTargetFactory.newInstance(\"//:rule\"))",
                "+            .setPlatformDeps(",
                "+                PatternMatchedCollection.<ImmutableSortedSet<BuildTarget>>builder()",
                "+                    .add(",
                "+                        Pattern.compile(",
                "+                            CxxPlatformUtils.DEFAULT_PLATFORM.getFlavor().toString(),",
                "+                            Pattern.LITERAL),",
                "+                        ImmutableSortedSet.of(libraryABuilder.getTarget()))",
                "+                    .add(",
                "+                        Pattern.compile(\"matches nothing\", Pattern.LITERAL),",
                "+                        ImmutableSortedSet.of(libraryBBuilder.getTarget()))",
                "+                    .build());",
                "+    TargetGraph targetGraph =",
                "+        TargetGraphFactory.newInstance(",
                "+            libraryABuilder.build(), libraryBBuilder.build(), ruleBuilder.build());",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    LuaLibrary rule = (LuaLibrary) resolver.requireRule(ruleBuilder.getTarget());",
                "+    assertThat(",
                "+        RichStream.from(rule.getLuaPackageDeps(CxxPlatformUtils.DEFAULT_PLATFORM))",
                "+            .map(BuildRule::getBuildTarget)",
                "+            .toImmutableSet(),",
                "+        Matchers.allOf(",
                "+            Matchers.hasItem(libraryABuilder.getTarget()),",
                "+            Matchers.not(Matchers.hasItem(libraryBBuilder.getTarget()))));",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/lua/LuaTestUtils.java b/test/com/facebook/buck/features/lua/LuaTestUtils.java",
                "new file mode 100644",
                "index 0000000000..a3563f40c0",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/LuaTestUtils.java",
                "@@ -0,0 +1,40 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.lua;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkStrategy;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.rules.CommandTool;",
                "+import com.facebook.buck.rules.ConstantToolProvider;",
                "+",
                "+public class LuaTestUtils {",
                "+",
                "+  public static final LuaPlatform DEFAULT_PLATFORM =",
                "+      LuaPlatform.builder()",
                "+          .setLua(new ConstantToolProvider(new CommandTool.Builder().addArg(\"lua\").build()))",
                "+          .setExtension(\".lex\")",
                "+          .setPackageStyle(AbstractLuaPlatform.PackageStyle.STANDALONE)",
                "+          .setPackager(new ConstantToolProvider(new CommandTool.Builder().build()))",
                "+          .setShouldCacheBinaries(true)",
                "+          .setNativeLinkStrategy(NativeLinkStrategy.SEPARATE)",
                "+          .setCxxPlatform(CxxPlatformUtils.DEFAULT_PLATFORM)",
                "+          .build();",
                "+",
                "+  public static final FlavorDomain<LuaPlatform> DEFAULT_PLATFORMS =",
                "+      FlavorDomain.of(LuaPlatform.FLAVOR_DOMAIN_NAME, DEFAULT_PLATFORM);",
                "+}",
                "diff --git a/test/com/facebook/buck/features/lua/testdata/lua_binary/BUCK.fixture b/test/com/facebook/buck/features/lua/testdata/lua_binary/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..f9a801c81a",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/testdata/lua_binary/BUCK.fixture",
                "@@ -0,0 +1,87 @@",
                "+lua_binary(",
                "+    name = \"simple\",",
                "+    main_module = \"simple\",",
                "+    deps = [",
                "+        \":simple-lib\",",
                "+    ],",
                "+)",
                "+",
                "+lua_library(",
                "+    name = \"simple-lib\",",
                "+    srcs = [",
                "+        \"simple.lua\",",
                "+    ],",
                "+)",
                "+",
                "+lua_binary(",
                "+    name = \"native\",",
                "+    main_module = \"foo\",",
                "+    deps = [",
                "+        \":foo\",",
                "+    ],",
                "+)",
                "+",
                "+cxx_lua_extension(",
                "+    name = \"foo\",",
                "+    srcs = [",
                "+        \"foo.c\",",
                "+    ],",
                "+)",
                "+",
                "+lua_binary(",
                "+    name = \"native_with_dep\",",
                "+    main_module = \"bar\",",
                "+    deps = [",
                "+        \":bar\",",
                "+    ],",
                "+)",
                "+",
                "+cxx_lua_extension(",
                "+    name = \"bar\",",
                "+    srcs = [",
                "+        \"bar.c\",",
                "+    ],",
                "+    deps = [",
                "+        \":dep\",",
                "+    ],",
                "+)",
                "+",
                "+cxx_library(",
                "+    name = \"dep\",",
                "+    srcs = [",
                "+        \"dep.c\",",
                "+    ],",
                "+    exported_headers = [",
                "+        \"dep.h\",",
                "+    ],",
                "+)",
                "+",
                "+python_binary(",
                "+    name = \"packager\",",
                "+    main_module = \"packager\",",
                "+    deps = [",
                "+        \":lib-packager\",",
                "+    ],",
                "+)",
                "+",
                "+python_library(",
                "+    name = \"lib-packager\",",
                "+    srcs = [",
                "+        \"packager.py\",",
                "+    ],",
                "+)",
                "+",
                "+lua_binary(",
                "+    name = \"simple_with_native\",",
                "+    main_module = \"simple\",",
                "+    deps = [",
                "+        \":foo\",",
                "+        \":simple-lib\",",
                "+    ],",
                "+)",
                "+",
                "+genrule(",
                "+    name = \"genrule\",",
                "+    out = \"something\",",
                "+    cmd = \"$(exe :simple_with_native) >> $OUT\",",
                "+)",
                "diff --git a/test/com/facebook/buck/features/lua/testdata/lua_binary/bar.c b/test/com/facebook/buck/features/lua/testdata/lua_binary/bar.c",
                "new file mode 100644",
                "index 0000000000..72de5aeff3",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/testdata/lua_binary/bar.c",
                "@@ -0,0 +1,10 @@",
                "+#define LUA_LIB",
                "+#include <lua.h>",
                "+#include <lauxlib.h>",
                "+",
                "+#include \"dep.h\"",
                "+",
                "+LUALIB_API int luaopen_bar(lua_State *L) {",
                "+  dep();",
                "+  return 0;",
                "+}",
                "diff --git a/test/com/facebook/buck/features/lua/testdata/lua_binary/dep.c b/test/com/facebook/buck/features/lua/testdata/lua_binary/dep.c",
                "new file mode 100644",
                "index 0000000000..341cba0421",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/testdata/lua_binary/dep.c",
                "@@ -0,0 +1,5 @@",
                "+#include <stdio.h>",
                "+",
                "+void dep() {",
                "+  printf(\"hello world\\n\");",
                "+}",
                "diff --git a/test/com/facebook/buck/features/lua/testdata/lua_binary/dep.h b/test/com/facebook/buck/features/lua/testdata/lua_binary/dep.h",
                "new file mode 100644",
                "index 0000000000..3e7a341460",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/testdata/lua_binary/dep.h",
                "@@ -0,0 +1 @@",
                "+void dep();",
                "diff --git a/test/com/facebook/buck/features/lua/testdata/lua_binary/foo.c b/test/com/facebook/buck/features/lua/testdata/lua_binary/foo.c",
                "new file mode 100644",
                "index 0000000000..3e0fa6895e",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/testdata/lua_binary/foo.c",
                "@@ -0,0 +1,10 @@",
                "+#include <stdio.h>",
                "+",
                "+#define LUA_LIB",
                "+#include <lua.h>",
                "+#include <lauxlib.h>",
                "+",
                "+LUALIB_API int luaopen_foo (lua_State *L) {",
                "+  printf(\"hello world\\n\");",
                "+  return 0;",
                "+}",
                "diff --git a/test/com/facebook/buck/features/lua/testdata/lua_binary/packager.py b/test/com/facebook/buck/features/lua/testdata/lua_binary/packager.py",
                "new file mode 100644",
                "index 0000000000..cc3c0c1bf8",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/testdata/lua_binary/packager.py",
                "@@ -0,0 +1,17 @@",
                "+import json",
                "+import optparse",
                "+import shutil",
                "+import sys",
                "+",
                "+",
                "+def main(argv):",
                "+    parser = optparse.OptionParser()",
                "+    parser.add_option('--entry-point')",
                "+    parser.add_option('--interpreter')",
                "+    options, args = parser.parse_args(argv[1:])",
                "+",
                "+    with open(args[0], 'w') as f:",
                "+        shutil.copyfileobj(sys.stdin, f)",
                "+",
                "+",
                "+sys.exit(main(sys.argv))",
                "diff --git a/test/com/facebook/buck/features/lua/testdata/lua_binary/simple.lua b/test/com/facebook/buck/features/lua/testdata/lua_binary/simple.lua",
                "new file mode 100644",
                "index 0000000000..e69de29bb2",
                "diff --git a/test/com/facebook/buck/features/lua/testdata/lua_binary/with_includes/BUCK.fixture b/test/com/facebook/buck/features/lua/testdata/lua_binary/with_includes/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..19c0b80208",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/testdata/lua_binary/with_includes/BUCK.fixture",
                "@@ -0,0 +1,13 @@",
                "+lua_binary(",
                "+    name = \"native_with_extension\",",
                "+    main_module = \"extension\",",
                "+    deps = [\":extension\"],",
                "+)",
                "+",
                "+cxx_lua_extension(",
                "+    name = \"extension\",",
                "+    srcs = [\"src/extension.c\"],",
                "+    base_module = \"\",",
                "+    headers = [\"headers/extension.h\"],",
                "+    include_dirs = [\"headers\"],",
                "+)",
                "diff --git a/test/com/facebook/buck/features/lua/testdata/lua_binary/with_includes/headers/extension.h b/test/com/facebook/buck/features/lua/testdata/lua_binary/with_includes/headers/extension.h",
                "new file mode 100644",
                "index 0000000000..2a166a7fd2",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/testdata/lua_binary/with_includes/headers/extension.h",
                "@@ -0,0 +1,3 @@",
                "+char* hello() {",
                "+  return \"lua_extension_hello\";",
                "+}",
                "diff --git a/test/com/facebook/buck/features/lua/testdata/lua_binary/with_includes/src/extension.c b/test/com/facebook/buck/features/lua/testdata/lua_binary/with_includes/src/extension.c",
                "new file mode 100644",
                "index 0000000000..3d1fe0eb68",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/testdata/lua_binary/with_includes/src/extension.c",
                "@@ -0,0 +1,9 @@",
                "+#include <stdio.h>",
                "+#include \"extension.h\"",
                "+",
                "+#include <lua.h>",
                "+",
                "+int luaopen_extension (lua_State *L) {",
                "+  printf(\"%s\\n\", hello());",
                "+  return 0;",
                "+}",
                "diff --git a/test/com/facebook/buck/features/lua/testdata/lua_standalone_binary/BUCK.fixture b/test/com/facebook/buck/features/lua/testdata/lua_standalone_binary/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..ed2c00ed37",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/lua/testdata/lua_standalone_binary/BUCK.fixture",
                "@@ -0,0 +1 @@",
                "+lua_binary"
            ],
            "changed_files": [
                "build.xml",
                "programs/BUCK",
                "src/com/facebook/buck/features/lua/AbstractLuaBinaryPackageComponents.java",
                "src/com/facebook/buck/features/lua/AbstractLuaPackageComponents.java",
                "src/com/facebook/buck/features/lua/AbstractLuaPlatform.java",
                "src/com/facebook/buck/features/lua/AbstractLuaPlatformsProvider.java",
                "src/com/facebook/buck/features/lua/AbstractLuaScriptStarter.java",
                "src/com/facebook/buck/features/lua/AbstractNativeExecutableStarter.java",
                "src/com/facebook/buck/features/lua/BUCK",
                "src/com/facebook/buck/features/lua/CxxLuaExtension.java",
                "src/com/facebook/buck/features/lua/CxxLuaExtensionDescription.java",
                "src/com/facebook/buck/features/lua/LuaBinary.java",
                "src/com/facebook/buck/features/lua/LuaBinaryDescription.java",
                "src/com/facebook/buck/features/lua/LuaBuckConfig.java",
                "src/com/facebook/buck/features/lua/LuaDescriptionsProvider.java",
                "src/com/facebook/buck/features/lua/LuaLibrary.java",
                "src/com/facebook/buck/features/lua/LuaLibraryDescription.java",
                "src/com/facebook/buck/features/lua/LuaModule.java",
                "src/com/facebook/buck/features/lua/LuaPackageable.java",
                "src/com/facebook/buck/features/lua/LuaPlatformsProviderFactory.java",
                "src/com/facebook/buck/features/lua/LuaStandaloneBinary.java",
                "src/com/facebook/buck/features/lua/LuaToolchainsSupplier.java",
                "src/com/facebook/buck/features/lua/LuaUtil.java",
                "src/com/facebook/buck/features/lua/Starter.java",
                "src/com/facebook/buck/features/lua/SystemLuaCxxLibrary.java",
                "src/com/facebook/buck/features/lua/native-starter.cpp.in",
                "src/com/facebook/buck/features/lua/starter.lua.in",
                "src/com/facebook/buck/python/BUCK",
                "test/com/facebook/buck/features/lua/BUCK",
                "test/com/facebook/buck/features/lua/CxxLuaExtensionBuilder.java",
                "test/com/facebook/buck/features/lua/CxxLuaExtensionDescriptionTest.java",
                "test/com/facebook/buck/features/lua/LuaBinaryBuilder.java",
                "test/com/facebook/buck/features/lua/LuaBinaryDescriptionTest.java",
                "test/com/facebook/buck/features/lua/LuaBinaryIntegrationTest.java",
                "test/com/facebook/buck/features/lua/LuaLibraryBuilder.java",
                "test/com/facebook/buck/features/lua/LuaLibraryDescriptionTest.java",
                "test/com/facebook/buck/features/lua/LuaTestUtils.java",
                "test/com/facebook/buck/features/lua/testdata/lua_binary/BUCK.fixture",
                "test/com/facebook/buck/features/lua/testdata/lua_binary/bar.c",
                "test/com/facebook/buck/features/lua/testdata/lua_binary/dep.c",
                "test/com/facebook/buck/features/lua/testdata/lua_binary/dep.h",
                "test/com/facebook/buck/features/lua/testdata/lua_binary/foo.c",
                "test/com/facebook/buck/features/lua/testdata/lua_binary/packager.py",
                "test/com/facebook/buck/features/lua/testdata/lua_binary/simple.lua",
                "test/com/facebook/buck/features/lua/testdata/lua_binary/with_includes/BUCK.fixture",
                "test/com/facebook/buck/features/lua/testdata/lua_binary/with_includes/headers/extension.h",
                "test/com/facebook/buck/features/lua/testdata/lua_binary/with_includes/src/extension.c",
                "test/com/facebook/buck/features/lua/testdata/lua_standalone_binary/BUCK.fixture"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4b141e32ac4de7c8ad5c9e01d51d5fdc07b5a83e",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521698089,
            "hunks": 4,
            "message": "Use apple_asset_catalog rule for icons Summary: Built the catalog in xcode and moved it over. Test Plan: Built locally and verified the app icon was correct Reviewed By: bobyangyf fbshipit-source-id: 17d97f2",
            "diff": [
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/Contents.json b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/Contents.json",
                "new file mode 100755",
                "index 0000000000..22f329cdc5",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/Contents.json",
                "@@ -0,0 +1,116 @@",
                "+{",
                "+  \"images\" : [",
                "+    {",
                "+      \"size\" : \"20x20\",",
                "+      \"idiom\" : \"iphone\",",
                "+      \"filename\" : \"icon-41.png\",",
                "+      \"scale\" : \"2x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"20x20\",",
                "+      \"idiom\" : \"iphone\",",
                "+      \"filename\" : \"icon-60.png\",",
                "+      \"scale\" : \"3x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"29x29\",",
                "+      \"idiom\" : \"iphone\",",
                "+      \"filename\" : \"icon-58.png\",",
                "+      \"scale\" : \"2x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"29x29\",",
                "+      \"idiom\" : \"iphone\",",
                "+      \"filename\" : \"icon-87.png\",",
                "+      \"scale\" : \"3x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"40x40\",",
                "+      \"idiom\" : \"iphone\",",
                "+      \"filename\" : \"icon-82.png\",",
                "+      \"scale\" : \"2x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"40x40\",",
                "+      \"idiom\" : \"iphone\",",
                "+      \"filename\" : \"icon-120.png\",",
                "+      \"scale\" : \"3x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"60x60\",",
                "+      \"idiom\" : \"iphone\",",
                "+      \"filename\" : \"icon-121.png\",",
                "+      \"scale\" : \"2x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"60x60\",",
                "+      \"idiom\" : \"iphone\",",
                "+      \"filename\" : \"icon-180.png\",",
                "+      \"scale\" : \"3x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"20x20\",",
                "+      \"idiom\" : \"ipad\",",
                "+      \"filename\" : \"icon-20.png\",",
                "+      \"scale\" : \"1x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"20x20\",",
                "+      \"idiom\" : \"ipad\",",
                "+      \"filename\" : \"icon-40.png\",",
                "+      \"scale\" : \"2x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"29x29\",",
                "+      \"idiom\" : \"ipad\",",
                "+      \"filename\" : \"icon-29.png\",",
                "+      \"scale\" : \"1x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"29x29\",",
                "+      \"idiom\" : \"ipad\",",
                "+      \"filename\" : \"icon-59.png\",",
                "+      \"scale\" : \"2x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"40x40\",",
                "+      \"idiom\" : \"ipad\",",
                "+      \"filename\" : \"icon-42.png\",",
                "+      \"scale\" : \"1x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"40x40\",",
                "+      \"idiom\" : \"ipad\",",
                "+      \"filename\" : \"icon-80.png\",",
                "+      \"scale\" : \"2x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"76x76\",",
                "+      \"idiom\" : \"ipad\",",
                "+      \"filename\" : \"icon-76.png\",",
                "+      \"scale\" : \"1x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"76x76\",",
                "+      \"idiom\" : \"ipad\",",
                "+      \"filename\" : \"icon-152.png\",",
                "+      \"scale\" : \"2x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"83.5x83.5\",",
                "+      \"idiom\" : \"ipad\",",
                "+      \"filename\" : \"icon-167.png\",",
                "+      \"scale\" : \"2x\"",
                "+    },",
                "+    {",
                "+      \"size\" : \"1024x1024\",",
                "+      \"idiom\" : \"ios-marketing\",",
                "+      \"filename\" : \"icon-1024.png\",",
                "+      \"scale\" : \"1x\"",
                "+    }",
                "+  ],",
                "+  \"info\" : {",
                "+    \"version\" : 1,",
                "+    \"author\" : \"xcode\"",
                "+  }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-1024.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-1024.png",
                "new file mode 100644",
                "index 0000000000..71aaea7482",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-1024.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-120.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-120.png",
                "new file mode 100644",
                "index 0000000000..fecc4fbef3",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-120.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-121.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-121.png",
                "new file mode 100644",
                "index 0000000000..fecc4fbef3",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-121.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-152.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-152.png",
                "new file mode 100644",
                "index 0000000000..6a01b9b9cb",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-152.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-167.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-167.png",
                "new file mode 100644",
                "index 0000000000..61bf833d45",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-167.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-180.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-180.png",
                "new file mode 100644",
                "index 0000000000..cc96d6fe61",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-180.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-20.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-20.png",
                "new file mode 100644",
                "index 0000000000..7f9215d400",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-20.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-29.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-29.png",
                "new file mode 100644",
                "index 0000000000..22173aed81",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-29.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-40.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-40.png",
                "new file mode 100644",
                "index 0000000000..593f2b2c22",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-40.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-41.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-41.png",
                "new file mode 100644",
                "index 0000000000..593f2b2c22",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-41.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-42.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-42.png",
                "new file mode 100644",
                "index 0000000000..593f2b2c22",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-42.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-58.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-58.png",
                "new file mode 100644",
                "index 0000000000..1bce5be682",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-58.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-59.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-59.png",
                "new file mode 100644",
                "index 0000000000..1bce5be682",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-59.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-60.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-60.png",
                "new file mode 100644",
                "index 0000000000..8b4cabaaaa",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-60.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-76.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-76.png",
                "new file mode 100644",
                "index 0000000000..47a864f1c6",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-76.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-80.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-80.png",
                "new file mode 100644",
                "index 0000000000..4560ea8425",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-80.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-82.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-82.png",
                "new file mode 100644",
                "index 0000000000..4560ea8425",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-82.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-87.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-87.png",
                "new file mode 100644",
                "index 0000000000..07e345975b",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-87.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture",
                "index 4098242d29..e649ca8dd0 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture",
                "@@ -12,2 +12,10 @@ apple_resource(",
                "+apple_asset_catalog(",
                "+    name = \"BuckDemoAssetCatalog\",",
                "+    app_icon = \"AppIcon\",",
                "+    dirs = [",
                "+        \"Assets.xcassets\",",
                "+    ],",
                "+)",
                "+",
                " apple_bundle(",
                "@@ -37,2 +45,3 @@ apple_binary(",
                "         \":BuckDemoAppResources\",",
                "+        \":BuckDemoAssetCatalog\",",
                "         \"//common:hello\",",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-60.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-60.png",
                "deleted file mode 100644",
                "index 75cef1fbc7..0000000000",
                "Binary files a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-60.png and /dev/null differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72.png",
                "deleted file mode 100644",
                "index 1aa3797614..0000000000",
                "Binary files a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72.png and /dev/null differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72@2x.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72@2x.png",
                "deleted file mode 100644",
                "index e56b3d557a..0000000000",
                "Binary files a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72@2x.png and /dev/null differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50.png",
                "deleted file mode 100644",
                "index 230a1c882f..0000000000",
                "Binary files a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50.png and /dev/null differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50@2x.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50@2x.png",
                "deleted file mode 100644",
                "index e4a6f25054..0000000000",
                "Binary files a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50@2x.png and /dev/null differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon.png",
                "deleted file mode 100644",
                "index 7e40369c44..0000000000",
                "Binary files a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon.png and /dev/null differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon@2x.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon@2x.png",
                "deleted file mode 100644",
                "index e1683c8dcf..0000000000",
                "Binary files a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon@2x.png and /dev/null differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Info.plist b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Info.plist",
                "index 1f8ab00dd3..00fcae1eed 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Info.plist",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Info.plist",
                "@@ -10,11 +10,2 @@",
                " \t<string>BuckDemoApp</string>",
                "-  <key>CFBundleIconFiles</key>",
                "-  <array>",
                "-          <string>Icon.png</string>",
                "-          <string>Icon@2x.png</string>",
                "-          <string>Icon-72.png</string>",
                "-          <string>Icon-72@2x.png</string>",
                "-          <string>Icon-Small-50.png</string>",
                "-          <string>Icon-Small-50@2x.png</string>",
                "-  </array>",
                " \t<key>CFBundleIdentifier</key>",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/iTunesArtwork.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/iTunesArtwork.png",
                "deleted file mode 100644",
                "index 838f871687..0000000000",
                "Binary files a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/iTunesArtwork.png and /dev/null differ"
            ],
            "changed_files": [
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/Contents.json",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-1024.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-120.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-121.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-152.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-167.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-180.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-20.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-29.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-40.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-41.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-42.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-58.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-59.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-60.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-76.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-80.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-82.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Assets.xcassets/AppIcon.appiconset/icon-87.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-60.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72@2x.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50@2x.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon@2x.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Info.plist",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/iTunesArtwork.png"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "9b70cb9c5d4cf1796f9f05f7eacb31750b951792",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1523049116,
            "hunks": 13,
            "message": "go: add `platform` parameter to Go binary rules Summary: Add parameter to allow specifying a per-binary/test Go default platform. Reviewed By: ttsugriy fbshipit-source-id: 6308698",
            "diff": [
                "diff --git a/src/com/facebook/buck/go/GoBinaryDescription.java b/src/com/facebook/buck/go/GoBinaryDescription.java",
                "index 70e5d80e27..a3ad5e7e82 100644",
                "--- a/src/com/facebook/buck/go/GoBinaryDescription.java",
                "+++ b/src/com/facebook/buck/go/GoBinaryDescription.java",
                "@@ -21,2 +21,3 @@ import com.facebook.buck.model.BuildTarget;",
                " import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.FlavorDomain;",
                " import com.facebook.buck.model.Flavored;",
                "@@ -37,2 +38,3 @@ import com.google.common.collect.ImmutableList;",
                " import com.google.common.collect.ImmutableSet;",
                "+import java.util.Optional;",
                " import org.immutables.value.Value;",
                "@@ -69,9 +71,3 @@ public class GoBinaryDescription",
                "       GoBinaryDescriptionArg args) {",
                "-    GoToolchain goToolchain = getGoToolchain();",
                "-    GoPlatform platform =",
                "-        goToolchain",
                "-            .getPlatformFlavorDomain()",
                "-            .getValue(buildTarget)",
                "-            .orElse(goToolchain.getDefaultPlatform());",
                "-",
                "+    GoPlatform platform = getGoPlatform(buildTarget, args);",
                "     return GoDescriptors.createGoBinaryRule(",
                "@@ -98,10 +94,4 @@ public class GoBinaryDescription",
                "     // Add the C/C++ linker parse time deps.",
                "-    GoToolchain toolchain = getGoToolchain();",
                "     targetGraphOnlyDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(",
                "-            toolchain",
                "-                .getPlatformFlavorDomain()",
                "-                .getValue(buildTarget)",
                "-                .orElse(toolchain.getDefaultPlatform())",
                "-                .getCxxPlatform()));",
                "+        CxxPlatforms.getParseTimeDeps(getGoPlatform(buildTarget, constructorArg).getCxxPlatform()));",
                "   }",
                "@@ -112,2 +102,14 @@ public class GoBinaryDescription",
                "+  private GoPlatform getGoPlatform(BuildTarget target, AbstractGoBinaryDescriptionArg arg) {",
                "+    GoToolchain toolchain = getGoToolchain();",
                "+    FlavorDomain<GoPlatform> platforms = toolchain.getPlatformFlavorDomain();",
                "+    return platforms",
                "+        .getValue(target)",
                "+        .orElseGet(",
                "+            () ->",
                "+                arg.getPlatform()",
                "+                    .map(platforms::getValue)",
                "+                    .orElseGet(toolchain::getDefaultPlatform));",
                "+  }",
                "+",
                "   @BuckStyleImmutable",
                "@@ -116,2 +118,4 @@ public class GoBinaryDescription",
                "       extends CommonDescriptionArg, HasDeclaredDeps, HasSrcs, HasCgo {",
                "+    Optional<Flavor> getPlatform();",
                "+",
                "     ImmutableList<String> getCompilerFlags();",
                "diff --git a/src/com/facebook/buck/go/GoTestDescription.java b/src/com/facebook/buck/go/GoTestDescription.java",
                "index d46b13ced4..6ae7c5c480 100644",
                "--- a/src/com/facebook/buck/go/GoTestDescription.java",
                "+++ b/src/com/facebook/buck/go/GoTestDescription.java",
                "@@ -23,2 +23,3 @@ import com.facebook.buck.model.BuildTarget;",
                " import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.FlavorDomain;",
                " import com.facebook.buck.model.Flavored;",
                "@@ -177,8 +178,3 @@ public class GoTestDescription",
                "       GoTestDescriptionArg args) {",
                "-    GoToolchain goToolchain = getGoToolchain();",
                "-    GoPlatform platform =",
                "-        goToolchain",
                "-            .getPlatformFlavorDomain()",
                "-            .getValue(buildTarget)",
                "-            .orElse(goToolchain.getDefaultPlatform());",
                "+    GoPlatform platform = getGoPlatform(buildTarget, args);",
                "@@ -440,11 +436,5 @@ public class GoTestDescription",
                "       ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "-    GoToolchain toolchain = getGoToolchain();",
                "     // Add the C/C++ platform parse time deps.",
                "     targetGraphOnlyDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(",
                "-            toolchain",
                "-                .getPlatformFlavorDomain()",
                "-                .getValue(buildTarget)",
                "-                .orElse(toolchain.getDefaultPlatform())",
                "-                .getCxxPlatform()));",
                "+        CxxPlatforms.getParseTimeDeps(getGoPlatform(buildTarget, constructorArg).getCxxPlatform()));",
                "   }",
                "@@ -455,2 +445,14 @@ public class GoTestDescription",
                "+  private GoPlatform getGoPlatform(BuildTarget target, AbstractGoTestDescriptionArg arg) {",
                "+    GoToolchain toolchain = getGoToolchain();",
                "+    FlavorDomain<GoPlatform> platforms = toolchain.getPlatformFlavorDomain();",
                "+    return platforms",
                "+        .getValue(target)",
                "+        .orElseGet(",
                "+            () ->",
                "+                arg.getPlatform()",
                "+                    .map(platforms::getValue)",
                "+                    .orElseGet(toolchain::getDefaultPlatform));",
                "+  }",
                "+",
                "   @BuckStyleImmutable",
                "@@ -459,2 +461,4 @@ public class GoTestDescription",
                "       extends CommonDescriptionArg, HasContacts, HasDeclaredDeps, HasSrcs, HasTestTimeout, HasCgo {",
                "+    Optional<Flavor> getPlatform();",
                "+",
                "     Optional<BuildTarget> getLibrary();"
            ],
            "changed_files": [
                "src/com/facebook/buck/go/GoBinaryDescription.java",
                "src/com/facebook/buck/go/GoTestDescription.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a3a29c46587fba073c60c39def450c4e1b234631",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522709774,
            "hunks": 3,
            "message": "Use default platform when no other platforms are present in apple_test Summary: `cxx_test` uses the default platform when no platform flavors specified. Reviewed By: ttsugriy fbshipit-source-id: ea5bd68",
            "diff": [
                "diff --git a/src/com/facebook/buck/apple/AppleTestDescription.java b/src/com/facebook/buck/apple/AppleTestDescription.java",
                "index 9ca0eeaf37..5a89426537 100644",
                "--- a/src/com/facebook/buck/apple/AppleTestDescription.java",
                "+++ b/src/com/facebook/buck/apple/AppleTestDescription.java",
                "@@ -90,2 +90,3 @@ import java.nio.file.Path;",
                " import java.util.Collection;",
                "+import java.util.Collections;",
                " import java.util.Optional;",
                "@@ -480,5 +481,12 @@ public class AppleTestDescription",
                "     extraDepsBuilder.addAll(appleConfig.getCodesignProvider().getParseTimeDeps());",
                "+",
                "+    CxxPlatformsProvider cxxPlatformsProvider = getCxxPlatformsProvider();",
                "+    ImmutableList<CxxPlatform> cxxPlatforms =",
                "+        cxxPlatformsProvider.getCxxPlatforms().getValues(buildTarget);",
                "+",
                "     extraDepsBuilder.addAll(",
                "         CxxPlatforms.getParseTimeDeps(",
                "-            getCxxPlatformsProvider().getCxxPlatforms().getValues(buildTarget)));",
                "+            cxxPlatforms.isEmpty()",
                "+                ? Collections.singleton(cxxPlatformsProvider.getDefaultCxxPlatform())",
                "+                : cxxPlatforms));",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/apple/AppleTestDescription.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c3137168c5d610a0cff7a5b3c3b2ffc8de4d4464",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521387915,
            "hunks": 1,
            "message": "Use functional API to collect direct asset catalogs. Summary: In this particular case it's just a matter of taste, but in general we should try to avoid materializing collections as much as possible and operate on streams. Test Plan: CI Reviewed By: philipjameson fbshipit-source-id: 2fdae87",
            "diff": [
                "diff --git a/src/com/facebook/buck/apple/AppleBuildRules.java b/src/com/facebook/buck/apple/AppleBuildRules.java",
                "index 715aabd6e3..922ee4ce4a 100644",
                "--- a/src/com/facebook/buck/apple/AppleBuildRules.java",
                "+++ b/src/com/facebook/buck/apple/AppleBuildRules.java",
                "@@ -379,10 +379,6 @@ public final class AppleBuildRules {",
                "       TargetGraph targetGraph, TargetNode<?, ?> targetNode) {",
                "-    ImmutableSet.Builder<AppleAssetCatalogDescriptionArg> builder = ImmutableSet.builder();",
                "-    Iterable<TargetNode<?, ?>> deps = targetGraph.getAll(targetNode.getBuildDeps());",
                "-    for (TargetNode<?, ?> node : deps) {",
                "-      if (node.getDescription() instanceof AppleAssetCatalogDescription) {",
                "-        builder.add((AppleAssetCatalogDescriptionArg) node.getConstructorArg());",
                "-      }",
                "-    }",
                "-    return builder.build();",
                "+    return RichStream.from(targetGraph.getAll(targetNode.getBuildDeps()))",
                "+        .filter(node -> node.getDescription() instanceof AppleAssetCatalogDescription)",
                "+        .map(node -> (AppleAssetCatalogDescriptionArg) node.getConstructorArg())",
                "+        .toImmutableSet();",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/apple/AppleBuildRules.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "474c9ea977964e9e44b00e027ffe176a43494551",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522697747,
            "hunks": 11,
            "message": "Fallback to the default platform when detecting platform deps in Rust Summary: Fixing the logic broken by the previous change when rules no longer add all platforms' deps to parse time dependencies. In case of Rust the default platform is used when a target has no platform flavor. Reviewed By: andrewjcg fbshipit-source-id: 0246904",
            "diff": [
                "diff --git a/src/com/facebook/buck/rust/RustBinaryDescription.java b/src/com/facebook/buck/rust/RustBinaryDescription.java",
                "index 5f37e2595e..3b51c84804 100644",
                "--- a/src/com/facebook/buck/rust/RustBinaryDescription.java",
                "+++ b/src/com/facebook/buck/rust/RustBinaryDescription.java",
                "@@ -19,3 +19,2 @@ package com.facebook.buck.rust;",
                " import com.facebook.buck.cxx.CxxDescriptionEnhancer;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "@@ -120,6 +119,4 @@ public class RustBinaryDescription",
                "     extraDepsBuilder.addAll(compiler.getParseTimeDeps());",
                "-",
                "     extraDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(",
                "-            getCxxPlatformsProvider().getCxxPlatforms().getValues(buildTarget)));",
                "+        RustCompileUtils.getPlatformParseTimeDeps(getCxxPlatformsProvider(), buildTarget));",
                "     extraDepsBuilder.addAll(",
                "diff --git a/src/com/facebook/buck/rust/RustCompileUtils.java b/src/com/facebook/buck/rust/RustCompileUtils.java",
                "index 0da4b76ce2..7cc191c5dc 100644",
                "--- a/src/com/facebook/buck/rust/RustCompileUtils.java",
                "+++ b/src/com/facebook/buck/rust/RustCompileUtils.java",
                "@@ -23,2 +23,4 @@ import com.facebook.buck.cxx.CxxGenruleDescription;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                " import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "@@ -300,2 +302,11 @@ public class RustCompileUtils {",
                "+  public static Iterable<BuildTarget> getPlatformParseTimeDeps(",
                "+      CxxPlatformsProvider cxxPlatformsProvider, BuildTarget buildTarget) {",
                "+    return CxxPlatforms.getParseTimeDeps(",
                "+        cxxPlatformsProvider",
                "+            .getCxxPlatforms()",
                "+            .getValue(buildTarget)",
                "+            .orElse(cxxPlatformsProvider.getDefaultCxxPlatform()));",
                "+  }",
                "+",
                "   public static BinaryWrapperRule createBinaryBuildRule(",
                "diff --git a/src/com/facebook/buck/rust/RustLibraryDescription.java b/src/com/facebook/buck/rust/RustLibraryDescription.java",
                "index 74fdeded4c..6e3f25ff27 100644",
                "--- a/src/com/facebook/buck/rust/RustLibraryDescription.java",
                "+++ b/src/com/facebook/buck/rust/RustLibraryDescription.java",
                "@@ -21,3 +21,2 @@ import static com.facebook.buck.rust.RustCompileUtils.ruleToCrateName;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "@@ -435,6 +434,4 @@ public class RustLibraryDescription",
                "         rustBuckConfig.getLinker().map(ToolProvider::getParseTimeDeps).orElse(ImmutableList.of()));",
                "-",
                "     extraDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(",
                "-            getCxxPlatformsProvider().getCxxPlatforms().getValues(buildTarget)));",
                "+        RustCompileUtils.getPlatformParseTimeDeps(getCxxPlatformsProvider(), buildTarget));",
                "   }",
                "diff --git a/src/com/facebook/buck/rust/RustTestDescription.java b/src/com/facebook/buck/rust/RustTestDescription.java",
                "index 9c32432def..c4f4b45f78 100644",
                "--- a/src/com/facebook/buck/rust/RustTestDescription.java",
                "+++ b/src/com/facebook/buck/rust/RustTestDescription.java",
                "@@ -18,3 +18,2 @@ package com.facebook.buck.rust;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "@@ -145,6 +144,4 @@ public class RustTestDescription",
                "     extraDepsBuilder.addAll(compiler.getParseTimeDeps());",
                "-",
                "     extraDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(",
                "-            getCxxPlatformsProvider().getCxxPlatforms().getValues(buildTarget)));",
                "+        RustCompileUtils.getPlatformParseTimeDeps(getCxxPlatformsProvider(), buildTarget));",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/rust/RustBinaryDescription.java",
                "src/com/facebook/buck/rust/RustCompileUtils.java",
                "src/com/facebook/buck/rust/RustLibraryDescription.java",
                "src/com/facebook/buck/rust/RustTestDescription.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "29260f845686e460e768084e334f4db88f0cd7e1",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522990957,
            "hunks": 9,
            "message": "Remove MoveResourceFiles from ideabuck Summary: `project --view` will be removed soon and there is no need to support this feature. Reviewed By: mkillianey, ttsugriy fbshipit-source-id: b77547b",
            "diff": [
                "diff --git a/tools/ideabuck/BUCK b/tools/ideabuck/BUCK",
                "index a55bec56d3..98d32f01c3 100644",
                "--- a/tools/ideabuck/BUCK",
                "+++ b/tools/ideabuck/BUCK",
                "@@ -69,3 +69,2 @@ java_library(",
                "         \"//src/com/facebook/buck/event/external:external_lib\",",
                "-        \"//src/com/facebook/buck/ide/intellij/projectview/shared:shared\",",
                "         \"//src/com/facebook/buck/test/result/type:type\",",
                "diff --git a/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/BulkFileListenerDispatcher.java b/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/BulkFileListenerDispatcher.java",
                "deleted file mode 100644",
                "index 1f07ddf427..0000000000",
                "--- a/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/BulkFileListenerDispatcher.java",
                "+++ /dev/null",
                "@@ -1,179 +0,0 @@",
                "-/*",
                "- * Copyright 2017-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-package com.facebook.buck.intellij.ideabuck.fixup;",
                "-",
                "-import com.facebook.buck.ide.intellij.projectview.shared.SharedConstants;",
                "-import com.intellij.facet.Facet;",
                "-import com.intellij.facet.FacetManager;",
                "-import com.intellij.openapi.diagnostic.Logger;",
                "-import com.intellij.openapi.module.Module;",
                "-import com.intellij.openapi.module.ModuleManager;",
                "-import com.intellij.openapi.project.Project;",
                "-import com.intellij.openapi.vfs.VirtualFile;",
                "-import com.intellij.openapi.vfs.newvfs.BulkFileListener;",
                "-import com.intellij.openapi.vfs.newvfs.events.VFileCreateEvent;",
                "-import com.intellij.openapi.vfs.newvfs.events.VFileEvent;",
                "-import com.intellij.psi.PsiManager;",
                "-import java.lang.reflect.Method;",
                "-import java.nio.file.Files;",
                "-import java.nio.file.Paths;",
                "-import java.util.List;",
                "-import org.jetbrains.annotations.NotNull;",
                "-",
                "-public class BulkFileListenerDispatcher implements BulkFileListener {",
                "-",
                "-  private static final Logger LOG = Logger.getInstance(BulkFileListenerDispatcher.class);",
                "-",
                "-  // We need to use Reflection to call into the Android plugin",
                "-  private Class<?> androidFacetClass;",
                "-  private Method getAllResourceDirectoriesMethod;",
                "-  private boolean haveReflected = false;",
                "-",
                "-  // region BulkFileListener overrides",
                "-",
                "-  @Override",
                "-  public void before(@NotNull List<? extends VFileEvent> list) {}",
                "-",
                "-  @Override",
                "-  public void after(@NotNull List<? extends VFileEvent> list) {",
                "-    for (VFileEvent event : list) {",
                "-      VFileCreateEvent fileCreateEvent;",
                "-      if (event instanceof VFileCreateEvent) {",
                "-        fileCreateEvent = (VFileCreateEvent) event;",
                "-      } else {",
                "-        continue;",
                "-      }",
                "-",
                "-      Project project = getProject(fileCreateEvent);",
                "-",
                "-      if (project == null) {",
                "-        continue; // This is not a file creation event we need to do any fixup on",
                "-      }",
                "-",
                "-      ModuleManager moduleManager = ModuleManager.getInstance(project);",
                "-      Module[] modules = moduleManager.getModules();",
                "-      if (modules.length != 1) {",
                "-        continue; // This is NOT a Project View",
                "-      }",
                "-      Module module = modules[0];",
                "-",
                "-      if (!module.getName().equals(SharedConstants.ROOT_MODULE_NAME)) {",
                "-        continue; // This is NOT a Project View",
                "-      }",
                "-",
                "-      FacetManager facetManager = FacetManager.getInstance(module);",
                "-      Facet[] facets = facetManager.getAllFacets();",
                "-      if (facets.length != 1) {",
                "-        continue; // This is NOT a Project View",
                "-      }",
                "-      Facet facet = facets[0];",
                "-",
                "-      if (!facet.getName().equals(\"Android\")) {",
                "-        continue; // This is NOT a Project View",
                "-      }",
                "-",
                "-      List<VirtualFile> resourceDirectories = getAllResourceDirectories(facet);",
                "-      if (resourceDirectories == null || resourceDirectories.size() != 1) {",
                "-        continue; // This is NOT a Project View",
                "-      }",
                "-      VirtualFile resourceDirectory = resourceDirectories.get(0);",
                "-",
                "-      boolean inProjectViewResourceDirectory =",
                "-          fileCreateEvent.getPath().startsWith(resourceDirectory.getPath());",
                "-",
                "-      FileCreateHandler handler = null;",
                "-      if (inProjectViewResourceDirectory) {",
                "-        handler = new MoveResourceFiles();",
                "-      } else if (Files.isDirectory(Paths.get(fileCreateEvent.getPath()))) {",
                "-        handler = new HandlePackageCreation();",
                "-      }",
                "-      if (handler != null) {",
                "-        handler.onFileCreate(fileCreateEvent, facet);",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  // region BulkFileListener private utilities",
                "-",
                "-  private List<VirtualFile> getAllResourceDirectories(Facet facet) {",
                "-    Class<? extends Facet> facetClass = facet.getClass();",
                "-",
                "-    if (!haveReflected) {",
                "-      Class<?> clazz = null;",
                "-      Method method = null;",
                "-      try {",
                "-        clazz =",
                "-            Class.forName(",
                "-                \"org.jetbrains.android.facet.AndroidFacet\", true, facetClass.getClassLoader());",
                "-      } catch (Exception e) {",
                "-        // Leave clazz equal to null",
                "-        log(\"getAllResourceDirectories(): Exception %s in Class.forName()\", e);",
                "-      }",
                "-",
                "-      if (clazz != null) {",
                "-        try {",
                "-          method = clazz.getMethod(\"getAllResourceDirectories\", (Class<?>[]) null);",
                "-        } catch (Exception e) {",
                "-          // Leave method equal to null",
                "-          log(\"getAllResourceDirectories(): Exception %s in clazz.getMethod()\", e);",
                "-        }",
                "-      }",
                "-",
                "-      androidFacetClass = clazz;",
                "-      getAllResourceDirectoriesMethod = method;",
                "-      haveReflected = true;",
                "-    }",
                "-",
                "-    if (androidFacetClass == null || getAllResourceDirectoriesMethod == null) {",
                "-      if (androidFacetClass == null) {",
                "-        log(\"getAllResourceDirectories(): No clazz\");",
                "-      }",
                "-      if (getAllResourceDirectoriesMethod == null) {",
                "-        log(\"getAllResourceDirectories(): No method\");",
                "-      }",
                "-      return null;",
                "-    }",
                "-",
                "-    try {",
                "-      return (List<VirtualFile>) getAllResourceDirectoriesMethod.invoke(facet);",
                "-    } catch (Exception e) {",
                "-      log(\"getAllResourceDirectories(): Exception %s calling facet.getAllResourceDirectories()\", e);",
                "-      return null;",
                "-    }",
                "-  }",
                "-",
                "-  private static Project getProject(VFileEvent event) {",
                "-    Object requestor = event.getRequestor();",
                "-    if (requestor instanceof PsiManager) {",
                "-      PsiManager psiManager = (PsiManager) requestor;",
                "-      return psiManager.getProject();",
                "-    }",
                "-    return null;",
                "-  }",
                "-",
                "-  // endregion BulkFileListener private utilities",
                "-",
                "-  // endregion BulkFileListener overrides",
                "-",
                "-  // region Log messages",
                "-",
                "-  private static void log(String pattern, Object... parameters) {",
                "-    LOG.info(String.format(pattern, parameters));",
                "-  }",
                "-",
                "-  // endregion Log messages",
                "-}",
                "diff --git a/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/ErrorDialog.java b/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/ErrorDialog.java",
                "deleted file mode 100644",
                "index 38d80e7fca..0000000000",
                "--- a/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/ErrorDialog.java",
                "+++ /dev/null",
                "@@ -1,29 +0,0 @@",
                "-/*",
                "- * Copyright 2017-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-package com.facebook.buck.intellij.ideabuck.fixup;",
                "-",
                "-import com.intellij.openapi.project.Project;",
                "-import com.intellij.openapi.ui.Messages;",
                "-",
                "-class ErrorDialog {",
                "-  private ErrorDialog() {}",
                "-",
                "-  static void showErrorDialog(",
                "-      Project project, String title, String messagePattern, Object... parameters) {",
                "-    Messages.showErrorDialog(project, String.format(messagePattern, parameters), title);",
                "-  }",
                "-}",
                "diff --git a/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/FileCreateHandler.java b/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/FileCreateHandler.java",
                "deleted file mode 100644",
                "index e56b439c24..0000000000",
                "--- a/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/FileCreateHandler.java",
                "+++ /dev/null",
                "@@ -1,24 +0,0 @@",
                "-/*",
                "- * Copyright 2017-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-package com.facebook.buck.intellij.ideabuck.fixup;",
                "-",
                "-import com.intellij.facet.Facet;",
                "-import com.intellij.openapi.vfs.newvfs.events.VFileCreateEvent;",
                "-",
                "-interface FileCreateHandler {",
                "-  void onFileCreate(VFileCreateEvent event, Facet facet);",
                "-}",
                "diff --git a/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/HandlePackageCreation.java b/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/HandlePackageCreation.java",
                "deleted file mode 100644",
                "index 71992969b2..0000000000",
                "--- a/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/HandlePackageCreation.java",
                "+++ /dev/null",
                "@@ -1,58 +0,0 @@",
                "-/*",
                "- * Copyright 2017-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-package com.facebook.buck.intellij.ideabuck.fixup;",
                "-",
                "-import com.intellij.facet.Facet;",
                "-import com.intellij.openapi.module.Module;",
                "-import com.intellij.openapi.roots.ContentEntry;",
                "-import com.intellij.openapi.roots.ModifiableRootModel;",
                "-import com.intellij.openapi.roots.ModuleRootManager;",
                "-import com.intellij.openapi.vfs.LocalFileSystem;",
                "-import com.intellij.openapi.vfs.VfsUtilCore;",
                "-import com.intellij.openapi.vfs.VirtualFile;",
                "-import com.intellij.openapi.vfs.newvfs.events.VFileCreateEvent;",
                "-",
                "-class HandlePackageCreation implements FileCreateHandler {",
                "-",
                "-  @Override",
                "-  public void onFileCreate(VFileCreateEvent event, Facet facet) {",
                "-    String newFile = event.getPath();",
                "-    Module module = facet.getModule();",
                "-    ModifiableRootModel rootModel = ModuleRootManager.getInstance(module).getModifiableModel();",
                "-    VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByPath(newFile);",
                "-    ContentEntry contentEntry = getContentRootFor(virtualFile, rootModel);",
                "-    if (contentEntry != null) {",
                "-      contentEntry.addSourceFolder(virtualFile.getUrl(), false);",
                "-      rootModel.commit();",
                "-    } else {",
                "-      ErrorDialog.showErrorDialog(",
                "-          module.getProject(),",
                "-          \"Can't find Content Root\",",
                "-          \"Can't find Content Root for %s\",",
                "-          virtualFile);",
                "-    }",
                "-  }",
                "-",
                "-  private static ContentEntry getContentRootFor(VirtualFile url, ModifiableRootModel rootModel) {",
                "-    for (ContentEntry entry : rootModel.getContentEntries()) {",
                "-      if (VfsUtilCore.isEqualOrAncestor(entry.getUrl(), url.getUrl())) {",
                "-        return entry;",
                "-      }",
                "-    }",
                "-    return null;",
                "-  }",
                "-}",
                "diff --git a/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/MoveResourceFiles.java b/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/MoveResourceFiles.java",
                "deleted file mode 100644",
                "index 9bb3e8aadf..0000000000",
                "--- a/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/MoveResourceFiles.java",
                "+++ /dev/null",
                "@@ -1,342 +0,0 @@",
                "-/*",
                "- * Copyright 2017-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-package com.facebook.buck.intellij.ideabuck.fixup;",
                "-",
                "-import com.facebook.buck.intellij.ideabuck.file.BuckFileUtil;",
                "-import com.facebook.buck.intellij.ideabuck.lang.BuckFile;",
                "-import com.facebook.buck.intellij.ideabuck.lang.psi.impl.BuckArrayElementsImpl;",
                "-import com.facebook.buck.intellij.ideabuck.lang.psi.impl.BuckExpressionImpl;",
                "-import com.facebook.buck.intellij.ideabuck.lang.psi.impl.BuckPropertyLvalueImpl;",
                "-import com.facebook.buck.intellij.ideabuck.lang.psi.impl.BuckValueArrayImpl;",
                "-import com.facebook.buck.intellij.ideabuck.lang.psi.impl.BuckValueImpl;",
                "-import com.intellij.facet.Facet;",
                "-import com.intellij.openapi.diagnostic.Logger;",
                "-import com.intellij.openapi.editor.Editor;",
                "-import com.intellij.openapi.fileEditor.FileEditorManager;",
                "-import com.intellij.openapi.project.Project;",
                "-import com.intellij.openapi.ui.popup.JBPopupFactory;",
                "-import com.intellij.openapi.ui.popup.PopupStep;",
                "-import com.intellij.openapi.ui.popup.util.BaseListPopupStep;",
                "-import com.intellij.openapi.vfs.VirtualFile;",
                "-import com.intellij.openapi.vfs.VirtualFileManager;",
                "-import com.intellij.openapi.vfs.newvfs.events.VFileCreateEvent;",
                "-import com.intellij.psi.PsiElement;",
                "-import com.intellij.psi.PsiManager;",
                "-import com.intellij.psi.PsiRecursiveElementWalkingVisitor;",
                "-import com.intellij.psi.impl.source.tree.CompositeElement;",
                "-import com.intellij.util.PathUtil;",
                "-import java.io.File;",
                "-import java.io.IOException;",
                "-import java.nio.file.Files;",
                "-import java.nio.file.Path;",
                "-import java.nio.file.Paths;",
                "-import java.util.ArrayList;",
                "-import java.util.List;",
                "-import org.jetbrains.annotations.Nullable;",
                "-",
                "-class MoveResourceFiles implements FileCreateHandler {",
                "-",
                "-  private static final Logger LOG = Logger.getInstance(MoveResourceFiles.class);",
                "-",
                "-  // region FileCreateHandler overrides",
                "-",
                "-  @Override",
                "-  public void onFileCreate(VFileCreateEvent event, Facet facet) {",
                "-    Project project = facet.getModule().getProject();",
                "-",
                "-    FileEditorManager fileEditorManager = FileEditorManager.getInstance(project);",
                "-    VirtualFile[] selectedFiles = fileEditorManager.getSelectedFiles();",
                "-    if (selectedFiles.length != 1) {",
                "-      log(",
                "-          \"Oh, dear. We have a new file in a Project View resource directory, but we have %d selected files\",",
                "-          selectedFiles.length);",
                "-      ErrorDialog.showErrorDialog(",
                "-          project,",
                "-          \"Error moving new file\",",
                "-          \"We have a new file in a Project View resource directory, but we have %d selected files and so don't know which BUCK file to examine\",",
                "-          selectedFiles.length);",
                "-      return; // we are expecting a SINGLE file, here",
                "-    }",
                "-    VirtualFile selection = selectedFiles[0];",
                "-",
                "-    Editor editor = fileEditorManager.getSelectedTextEditor();",
                "-",
                "-    moveResourceFile(event.getPath(), project, selection, editor);",
                "-  }",
                "-",
                "-  // endregion FileCreateHandler overrides",
                "-",
                "-  // region Move resource file",
                "-",
                "-  private void moveResourceFile(",
                "-      String newFile, Project project, VirtualFile selection, Editor editor) {",
                "-    VirtualFile buckFile = BuckFileUtil.getBuckFile(selection);",
                "-",
                "-    if (buckFile == null) {",
                "-      log(\"No BUCK file for %s?\", selection.getName());",
                "-      ErrorDialog.showErrorDialog(",
                "-          project,",
                "-          \"Can't move \" + PathUtil.getFileName(newFile) + \" to a resource module\",",
                "-          \"Can't find a BUCK file for \\\"%s\\\"\",",
                "-          selection.getName());",
                "-      return;",
                "-    }",
                "-",
                "-    PsiManager psiManager = PsiManager.getInstance(project);",
                "-    BuckFile parsed = new BuckFile(psiManager.findViewProvider(buckFile));",
                "-",
                "-    List<String> androidRes = new ArrayList<>();",
                "-    parsed.accept(",
                "-        new PsiRecursiveElementWalkingVisitor() {",
                "-          @Override",
                "-          public void visitElement(PsiElement element) {",
                "-            if (element instanceof BuckPropertyLvalueImpl && element.getText().equals(\"deps\")) {",
                "-              PsiElement expression = getNextCompositeSibling(element);",
                "-              if (isNot(expression, BuckExpressionImpl.class)) {",
                "-                return;",
                "-              }",
                "-              PsiElement value = expression.getFirstChild();",
                "-              if (isNot(value, BuckValueImpl.class)) {",
                "-                return;",
                "-              }",
                "-              PsiElement array = value.getFirstChild();",
                "-              if (isNot(array, BuckValueArrayImpl.class)) {",
                "-                return;",
                "-              }",
                "-              PsiElement arrayElements = getFirstCompositeChild(array);",
                "-              if (isNot(arrayElements, BuckArrayElementsImpl.class)) {",
                "-                return;",
                "-              }",
                "-              for (PsiElement dependency : arrayElements.getChildren()) {",
                "-                String target = dependency.getText();",
                "-                // TODO(shemitz) get the startsWith target String from .buckconfig!",
                "-                if (target.startsWith('\\\"' + \"//android_res/\")) {",
                "-                  androidRes.add(target.substring(1, target.length() - 1));",
                "-                }",
                "-              }",
                "-              stopWalking();",
                "-              return;",
                "-            }",
                "-            super.visitElement(element);",
                "-          }",
                "-",
                "-          private boolean isNot(PsiElement element, Class<? extends PsiElement> type) {",
                "-            if (type.isInstance(element)) {",
                "-              return false; // !(element instanceof type)",
                "-            }",
                "-            log(",
                "-                \"Expecting a %s, got a %s\",",
                "-                type.getSimpleName(), element.getClass().getSimpleName());",
                "-            stopWalking();",
                "-            return true; // !(element instanceof type)",
                "-          }",
                "-        });",
                "-",
                "-    // TODO(shemitz) filter out targets that can't host this file (ie, already have a res/colors.xml or whatever)",
                "-",
                "-    if (androidRes.isEmpty()) {",
                "-      ErrorDialog.showErrorDialog(",
                "-          project,",
                "-          \"No android_res modules\",",
                "-          \"Could not find any android_res modules in %s - can't move the new resource file\",",
                "-          buckFile);",
                "-      return;",
                "-    }",
                "-",
                "-    if (androidRes.size() == 1) {",
                "-      moveTo(project, selection, newFile, androidRes.get(0));",
                "-    } else {",
                "-      Path resourceFilePath = Paths.get(newFile).getFileName();",
                "-      String resourceFileName = resourceFilePath == null ? null : resourceFilePath.toString();",
                "-      PopupTargets popupTargets =",
                "-          new PopupTargets(",
                "-              newFile,",
                "-              project,",
                "-              selection,",
                "-              \"Please choose an android resource module\"",
                "-                  + (resourceFileName == null ? \"\" : \" for \" + resourceFileName),",
                "-              androidRes);",
                "-      // PopupTargets.onChosen() will call this.moveTo()",
                "-      JBPopupFactory.getInstance().createListPopup(popupTargets).showInBestPositionFor(editor);",
                "-    }",
                "-  }",
                "-",
                "-  private class PopupTargets extends BaseListPopupStep<String> {",
                "-    private final String newFile;",
                "-    private final Project project;",
                "-    private final VirtualFile selection;",
                "-    private String selectedTarget;",
                "-",
                "-    private PopupTargets(",
                "-        String newFile,",
                "-        Project project,",
                "-        VirtualFile selection,",
                "-        @Nullable String title,",
                "-        List<String> values) {",
                "-      super(title, values);",
                "-      this.newFile = newFile;",
                "-      this.project = project;",
                "-      this.selection = selection;",
                "-    }",
                "-",
                "-    @Override",
                "-    public PopupStep onChosen(String selectedTarget, boolean finalChoice) {",
                "-      this.selectedTarget = selectedTarget;",
                "-      return PopupStep.FINAL_CHOICE;",
                "-    }",
                "-",
                "-    @Override",
                "-    public Runnable getFinalRunnable() {",
                "-      return () -> moveTo(project, selection, newFile, selectedTarget);",
                "-    }",
                "-  }",
                "-",
                "-  private void moveTo(",
                "-      Project project, VirtualFile selection, String newFile, String selectedTarget) {",
                "-    String repo = getRepositoryPath(project, selection);",
                "-    if (repo != null) {",
                "-      int colon = selectedTarget.lastIndexOf(':');",
                "-      selectedTarget = colon < 0 ? selectedTarget : selectedTarget.substring(0, colon);",
                "-",
                "-      String basePath = project.getBasePath();",
                "-      String newFileSuffix = newFile.substring(basePath.length());",
                "-      Path newTarget = Paths.get(repo, selectedTarget, newFileSuffix);",
                "-",
                "-      String targetSuffix = selectedTarget.substring(\"//android_res/\".length());",
                "-      String mangledPath = targetSuffix.replace('/', '_');",
                "-",
                "-      String dirnameNewFile = PathUtil.getParentPath(newFile);",
                "-      String basenameNewFile = PathUtil.getFileName(newFile);",
                "-      Path mangledTarget = Paths.get(dirnameNewFile, mangledPath + \"_\" + basenameNewFile);",
                "-",
                "-      // Move newFile to newTarget, create symlink mangledTarget -> newTarget",
                "-      Path newFilePath = Paths.get(newFile);",
                "-",
                "-      // mv newFilePath to newTarget",
                "-      boolean moved = move(newFilePath, newTarget);",
                "-      if (!moved) {",
                "-        ErrorDialog.showErrorDialog(",
                "-            project, \"Error moving file\", \"New file is still at %s\", newFile);",
                "-      } else {",
                "-        // ln -s newTarget mangledTarget",
                "-        boolean linked = createSymbolicLink(mangledTarget, newTarget);",
                "-        if (linked) {",
                "-          // Open mangledTarget in editor",
                "-          VirtualFileManager virtualFileManager = VirtualFileManager.getInstance();",
                "-          virtualFileManager.asyncRefresh(",
                "-              () -> {",
                "-                VirtualFile virtualFile =",
                "-                    virtualFileManager.findFileByUrl(\"file://\" + mangledTarget.toString());",
                "-                if (virtualFile != null) {",
                "-                  FileEditorManager fileEditorManager = FileEditorManager.getInstance(project);",
                "-                  fileEditorManager.openFile(virtualFile, /*focusEditor=*/ true);",
                "-                } else {",
                "-                  ErrorDialog.showErrorDialog(",
                "-                      project, \"Can't reopen resource file\", \"Could not find %s\", mangledTarget);",
                "-                }",
                "-              });",
                "-        } else {",
                "-          move(newTarget, newFilePath); // move back",
                "-          ErrorDialog.showErrorDialog(",
                "-              project, \"Error creating symlink\", \"New file is still at %s\", newFile);",
                "-        }",
                "-      }",
                "-    } else {",
                "-      ErrorDialog.showErrorDialog(project, \"Can't find repo\", \"New file is still at %s\", newFile);",
                "-    }",
                "-  }",
                "-",
                "-  // region Move resource file private utilities",
                "-",
                "-  private static String getRepositoryPath(Project project, VirtualFile selection) {",
                "-    String basePath = project.getBasePath();",
                "-    String selectionName = selection.getPath();",
                "-    String selectionSuffix = selectionName.substring(basePath.length());",
                "-    if (selectionSuffix.startsWith(File.separator)) {",
                "-      selectionSuffix = selectionSuffix.substring(1);",
                "-    }",
                "-    Path selectionPath = Paths.get(selectionName);",
                "-    String realSelectionPath;",
                "-    try {",
                "-      realSelectionPath = selectionPath.toRealPath().toString();",
                "-    } catch (IOException e) {",
                "-      return null;",
                "-    }",
                "-    return realSelectionPath.endsWith(selectionSuffix)",
                "-        ? realSelectionPath.substring(0, realSelectionPath.length() - selectionSuffix.length())",
                "-        : null;",
                "-  }",
                "-",
                "-  /**",
                "-   * Returns (what would be) the next child in {@link PsiElement#getParent() getParent()}.{@link",
                "-   * PsiElement#getChildren() getChildren()} (even if element doesn't actually appears in {@code",
                "-   * getParent().getChildren()})",
                "-   */",
                "-  private static PsiElement getNextCompositeSibling(PsiElement element) {",
                "-    for (PsiElement sibling = element.getNextSibling();",
                "-        sibling != null;",
                "-        sibling = sibling.getNextSibling()) {",
                "-      if (sibling.getNode() instanceof CompositeElement) {",
                "-        return sibling;",
                "-      }",
                "-    }",
                "-    return null;",
                "-  }",
                "-",
                "-  /**",
                "-   * Returns the first child in {@link PsiElement#getParent() getParent()}.{@link",
                "-   * PsiElement#getChildren() getChildren()}",
                "-   */",
                "-  private static PsiElement getFirstCompositeChild(PsiElement element) {",
                "-    PsiElement child = element.getFirstChild();",
                "-    return child == null",
                "-        ? null",
                "-        : child.getNode() instanceof CompositeElement ? child : getNextCompositeSibling(child);",
                "-  }",
                "-",
                "-  private static boolean move(Path source, Path target) {",
                "-    try {",
                "-      Files.move(source, target);",
                "-      return true;",
                "-    } catch (IOException e) {",
                "-      log(\"move(%s, %s): %s\", source, target, e);",
                "-      return false;",
                "-    }",
                "-  }",
                "-",
                "-  private static boolean createSymbolicLink(Path link, Path target) {",
                "-    try {",
                "-      Files.createSymbolicLink(link, target);",
                "-      return true;",
                "-    } catch (IOException e) {",
                "-      log(\"createSymbolicLink(%s, %s): %s\", link, target, e);",
                "-      return false;",
                "-    }",
                "-  }",
                "-",
                "-  // endregion Move resource file private utilities",
                "-",
                "-  // endregion Move resource file",
                "-",
                "-  // region Log messages",
                "-",
                "-  private static void log(String pattern, Object... parameters) {",
                "-    LOG.info(String.format(pattern, parameters));",
                "-  }",
                "-",
                "-  // endregion Log messages",
                "-}",
                "diff --git a/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/ui/BuckEventsConsumer.java b/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/ui/BuckEventsConsumer.java",
                "index 1065ed94ce..6c290d77d9 100644",
                "--- a/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/ui/BuckEventsConsumer.java",
                "+++ b/tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/ui/BuckEventsConsumer.java",
                "@@ -20,3 +20,2 @@ import com.facebook.buck.intellij.ideabuck.actions.BuckInstallDebugAction;",
                " import com.facebook.buck.intellij.ideabuck.debugger.AndroidDebugger;",
                "-import com.facebook.buck.intellij.ideabuck.fixup.BulkFileListenerDispatcher;",
                " import com.facebook.buck.intellij.ideabuck.ui.tree.BuckTreeNodeBuild;",
                "@@ -175,4 +174,2 @@ public class BuckEventsConsumer",
                "-    mConnection.subscribe(VirtualFileManager.VFS_CHANGES, new BulkFileListenerDispatcher());",
                "-",
                "     attached = true;",
                "@@ -382,3 +379,3 @@ public class BuckEventsConsumer",
                "-    //set progress to 100%",
                "+    // set progress to 100%",
                "     consumeBuckBuildProgressUpdate(timestamp, 1f);"
            ],
            "changed_files": [
                "tools/ideabuck/BUCK",
                "tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/BulkFileListenerDispatcher.java",
                "tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/ErrorDialog.java",
                "tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/FileCreateHandler.java",
                "tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/HandlePackageCreation.java",
                "tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/fixup/MoveResourceFiles.java",
                "tools/ideabuck/src/com/facebook/buck/intellij/ideabuck/ui/BuckEventsConsumer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "467c68d528626631a57aa34803ea237a2ec1a044",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521759460,
            "hunks": 7,
            "message": "Make SourceWithFlags implement AddsToRuleKey Summary: This allows us to remove the custom handling in AbstractRuleKeyBuilder. Test Plan: CI Reviewed By: ttsugriy fbshipit-source-id: 23e49ec",
            "diff": [
                "diff --git a/src/com/facebook/buck/rules/AbstractSourceWithFlags.java b/src/com/facebook/buck/rules/AbstractSourceWithFlags.java",
                "index 0009c39f1e..6f6afd7133 100644",
                "--- a/src/com/facebook/buck/rules/AbstractSourceWithFlags.java",
                "+++ b/src/com/facebook/buck/rules/AbstractSourceWithFlags.java",
                "@@ -27,5 +27,7 @@ import org.immutables.value.Value;",
                " @BuckStyleImmutable",
                "-abstract class AbstractSourceWithFlags implements Comparable<AbstractSourceWithFlags> {",
                "+abstract class AbstractSourceWithFlags",
                "+    implements Comparable<AbstractSourceWithFlags>, AddsToRuleKey {",
                "   @Value.Parameter",
                "+  @AddToRuleKey",
                "   public abstract SourcePath getSourcePath();",
                "@@ -33,2 +35,3 @@ abstract class AbstractSourceWithFlags implements Comparable<AbstractSourceWithF",
                "   @Value.Parameter",
                "+  @AddToRuleKey",
                "   public abstract List<String> getFlags();",
                "diff --git a/src/com/facebook/buck/rules/keys/AbstractRuleKeyBuilder.java b/src/com/facebook/buck/rules/keys/AbstractRuleKeyBuilder.java",
                "index 2a205f2a11..80dab163bd 100644",
                "--- a/src/com/facebook/buck/rules/keys/AbstractRuleKeyBuilder.java",
                "+++ b/src/com/facebook/buck/rules/keys/AbstractRuleKeyBuilder.java",
                "@@ -24,3 +24,2 @@ import com.facebook.buck.rules.RuleKeyObjectSink;",
                " import com.facebook.buck.rules.SourcePath;",
                "-import com.facebook.buck.rules.SourceWithFlags;",
                " import com.facebook.buck.rules.keys.hasher.RuleKeyHasher;",
                "@@ -161,18 +160,2 @@ public abstract class AbstractRuleKeyBuilder<RULE_KEY> implements RuleKeyObjectS",
                "-    if (val instanceof SourceWithFlags) {",
                "-      SourceWithFlags source = (SourceWithFlags) val;",
                "-      try (RuleKeyScopedHasher.ContainerScope containerScope =",
                "-          scopedHasher.containerScope(RuleKeyHasher.Container.TUPLE)) {",
                "-        try (Scope ignored = containerScope.elementScope()) {",
                "-          setSourcePath(source.getSourcePath());",
                "-        } catch (IOException e) {",
                "-          throw new RuntimeException(e);",
                "-        }",
                "-        try (Scope ignored = containerScope.elementScope()) {",
                "-          setReflectively(source.getFlags());",
                "-        }",
                "-      }",
                "-      return this;",
                "-    }",
                "-",
                "     return setSingleValue(val);",
                "diff --git a/test/com/facebook/buck/rules/keys/RuleKeyBuilderTest.java b/test/com/facebook/buck/rules/keys/RuleKeyBuilderTest.java",
                "index e42603c4f4..58c804c18c 100644",
                "--- a/test/com/facebook/buck/rules/keys/RuleKeyBuilderTest.java",
                "+++ b/test/com/facebook/buck/rules/keys/RuleKeyBuilderTest.java",
                "@@ -42,3 +42,2 @@ import com.facebook.buck.rules.SourcePathRuleFinder;",
                " import com.facebook.buck.rules.SourceRoot;",
                "-import com.facebook.buck.rules.SourceWithFlags;",
                " import com.facebook.buck.rules.TargetGraph;",
                "@@ -147,4 +146,2 @@ public class RuleKeyBuilderTest {",
                "           TARGET_PATH_2,",
                "-          SourceWithFlags.of(SOURCE_PATH_1, ImmutableList.of(\"42\")),",
                "-          SourceWithFlags.of(SOURCE_PATH_2, ImmutableList.of(\"42\")),"
            ],
            "changed_files": [
                "src/com/facebook/buck/rules/AbstractSourceWithFlags.java",
                "src/com/facebook/buck/rules/keys/AbstractRuleKeyBuilder.java",
                "test/com/facebook/buck/rules/keys/RuleKeyBuilderTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b27cafc472d025b31239523fa2889f835cd0230c",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521827876,
            "hunks": 3,
            "message": "Support for expected exceptions in E2ERunner Summary: Allow to call for an expected Exception within E2E tests, similar to how it's done with the default JUnit runner Reviewed By: sbalabanov fbshipit-source-id: 543dbbb",
            "diff": [
                "diff --git a/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java b/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java",
                "index 843fe02046..e1d991c4b8 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java",
                "+++ b/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java",
                "@@ -33,2 +33,3 @@ import org.junit.Test;",
                " import org.junit.internal.runners.model.ReflectiveCallable;",
                "+import org.junit.internal.runners.statements.ExpectException;",
                " import org.junit.internal.runners.statements.Fail;",
                "@@ -348,2 +349,14 @@ public class EndToEndRunner extends ParentRunner<EndToEndTestDescriptor> {",
                "+  private Statement withExpectedExceptions(EndToEndTestDescriptor child, Statement statement) {",
                "+    FrameworkMethod verificationMethod = child.getMethod();",
                "+    Test annotation = verificationMethod.getAnnotation(Test.class);",
                "+    Class<? extends Throwable> expectedException = annotation.expected();",
                "+    // ExpectException doesn't account for the default Test.None.class, so skip expecting an",
                "+    // exception if it is Test.None.class",
                "+    if (expectedException.isAssignableFrom(Test.None.class)) {",
                "+      return statement;",
                "+    }",
                "+    return new ExpectException(statement, expectedException);",
                "+  }",
                "+",
                "   private Object createTest() throws Exception {",
                "@@ -370,2 +383,3 @@ public class EndToEndRunner extends ParentRunner<EndToEndTestDescriptor> {",
                "     statement = withAfters(test, statement);",
                "+    statement = withExpectedExceptions(testDescriptor, statement);",
                "     return statement;"
            ],
            "changed_files": [
                "test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "da2fd3eea591f146fac72add80c7e5ad6520f256",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521820757,
            "hunks": 1,
            "message": "Document usage of Skylark doc generator. Reviewed By: styurin fbshipit-source-id: c6c581f",
            "diff": [
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/Main.java b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/Main.java",
                "index 32b6de682c..358a44beec 100644",
                "--- a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/Main.java",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/Main.java",
                "@@ -27,3 +27,19 @@ import org.kohsuke.args4j.CmdLineParser;",
                "-/** Entry point of the documentation generator binary. */",
                "+/**",
                "+ * Entry point of the documentation generator binary.",
                "+ *",
                "+ * <p>Executing this class produces a function Soy template for each field in a classpath annotated",
                "+ * by {@link SkylarkSignature} and a table of contents that lists all of them.",
                "+ *",
                "+ * <p>To use, make sure that the target with all Skylark functions is included as a dependency of",
                "+ * //tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator:main and run:",
                "+ *",
                "+ * <pre>",
                "+ * buck run //tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator:generator \\",
                "+ *   -- --destination_directory path/to/buck/docs/skylark/generated",
                "+ * </pre>",
                "+ *",
                "+ * By default all packages inside of com.facebook.buck.skylark.function package are scanned, but",
                "+ * {@code --skylark_package} command line flag can be used to specify any other package.",
                "+ */",
                " public class Main {"
            ],
            "changed_files": [
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/Main.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7229ca3f38464f4d784fdf217664507525e0f142",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521480388,
            "hunks": 6,
            "message": "E2E mobile template: android_prebuilt_aar Summary: ```                                           android_binary                             apple_package                                                  +                                        +       +------------+-------------+---------------+                                        |       v            v             v               v                                        v export_file     manifest     keystore     android_library                            apple_bundle                    +                             +                                        +                    |                    +--------+---------+---------------+              |                    v                    v                  v               v              v                 genrule          android_resource  *android_library*  cxx_library    apple_binary                    +                                       +               +              +    +---------------+                                       |               +--------------+    v               v                                       v               v              v genrule      python_binary                     *android_prebuilt_aar* cxx_library    apple_resource ``` Test Plan: Built locally Reviewed By: styurin fbshipit-source-id: 87da726",
            "diff": [
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java",
                "index 65c9caf899..61ca3cdd3e 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java",
                "@@ -13,2 +13,3 @@ import android.os.Bundle;",
                " import android.widget.TextView;",
                "+import com.facebook.buck.demo.capitalize.CapitalizeUtils;",
                "@@ -23,3 +24,3 @@ public class App extends Activity {",
                "     try {",
                "-      String message = new Hello().getHelloString();",
                "+      String message = CapitalizeUtils.capitalize(new Hello().getHelloString());",
                "       textView.setText(message);",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "index b2d690b0e1..b432f1fcbd 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "@@ -14,2 +14,3 @@ android_library(",
                "         \"//android/cxx:jni\",",
                "+        \"//android/java/com/facebook/buck/demo/capitalize:capitalize\",",
                "         \"//android/resources:res\",",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..5cb07677f0",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/BUCK.fixture",
                "@@ -0,0 +1,23 @@",
                "+# Copyright 2018-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+android_prebuilt_aar(",
                "+    name = \"prebuilt_aar\",",
                "+    aar = \"prebuilt_capitalize.aar\",",
                "+)",
                "+",
                "+android_library(",
                "+    name = \"capitalize\",",
                "+    srcs = [",
                "+        \"CapitalizeUtils.java\",",
                "+    ],",
                "+    visibility = [",
                "+        \"PUBLIC\",",
                "+    ],",
                "+    deps = [",
                "+        \":prebuilt_aar\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/CapitalizeUtils.java b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/CapitalizeUtils.java",
                "new file mode 100644",
                "index 0000000000..f7491fc6c9",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/CapitalizeUtils.java",
                "@@ -0,0 +1,15 @@",
                "+/**",
                "+ * Copyright 2018-present, Facebook, Inc. All rights reserved.",
                "+ *",
                "+ * <p>This source code is licensed under the license found in the LICENSE file in the root directory",
                "+ * of this source tree.",
                "+ */",
                "+package com.facebook.buck.demo.capitalize;",
                "+",
                "+import com.example.Utils;",
                "+",
                "+public class CapitalizeUtils {",
                "+  public static String capitalize(String s) {",
                "+    return Utils.capitalize(s);",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/prebuilt_capitalize.aar b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/prebuilt_capitalize.aar",
                "new file mode 100644",
                "index 0000000000..97f7bd78e6",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/prebuilt_capitalize.aar differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/hello.c b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/hello.c",
                "index 24681b311b..b37df251eb 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/hello.c",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/hello.c",
                "@@ -9,3 +9,3 @@",
                " const char *helloString() {",
                "-  return \"E2E Test\";",
                "+  return \"e2E Test\";",
                " }"
            ],
            "changed_files": [
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/CapitalizeUtils.java",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/capitalize/prebuilt_capitalize.aar",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/hello.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "61cc0a03e21a1799a17273a8e2eb5fe0dda058e7",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521608226,
            "hunks": 14,
            "message": "Implement a documentation generator. Summary: This binary can be used to generate Skylark docs into the specified destination directory. I also made a few tweaks to make sure that templates are unique and play nicely with existing templates. Test Plan: generate docs and check them locally Reviewed By: philipjameson fbshipit-source-id: 7fd6d70",
            "diff": [
                "diff --git a/tools/documentation_generator/documentation_generator.iml b/tools/documentation_generator/documentation_generator.iml",
                "index 1a46a3158c..1a55ad7f89 100644",
                "--- a/tools/documentation_generator/documentation_generator.iml",
                "+++ b/tools/documentation_generator/documentation_generator.iml",
                "@@ -15,2 +15,3 @@",
                "     <orderEntry type=\"library\" name=\"stringtemplate\" level=\"project\" />",
                "+    <orderEntry type=\"library\" name=\"args4j\" level=\"project\" />",
                "   </component>",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/BUCK b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/BUCK",
                "new file mode 100644",
                "index 0000000000..02add87c46",
                "--- /dev/null",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/BUCK",
                "@@ -0,0 +1,21 @@",
                "+java_binary(",
                "+    name = \"generator\",",
                "+    main_class = \"com.facebook.buck.tools.documentation.generator.Main\",",
                "+    deps = [\":main\"],",
                "+)",
                "+",
                "+java_library(",
                "+    name = \"main\",",
                "+    srcs = [",
                "+        \"CliArgs.java\",",
                "+        \"Main.java\",",
                "+    ],",
                "+    deps = [",
                "+        \"//src/com/facebook/buck/skylark/function:function\",  # this is where the functions are coming from",
                "+        \"//third-party/java/args4j:args4j\",",
                "+        \"//third-party/java/bazel:skylark-lang\",",
                "+        \"//third-party/java/guava:guava\",",
                "+        \"//tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark:collector\",",
                "+        \"//tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering:rendering\",",
                "+    ],",
                "+)",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/CliArgs.java b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/CliArgs.java",
                "new file mode 100644",
                "index 0000000000..21a0fb1a89",
                "--- /dev/null",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/CliArgs.java",
                "@@ -0,0 +1,36 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.tools.documentation.generator;",
                "+",
                "+import java.io.File;",
                "+import org.kohsuke.args4j.Option;",
                "+",
                "+/** Metadata describing command line options accepted by the generator binary. */",
                "+public class CliArgs {",
                "+",
                "+  @Option(name = \"--help\", usage = \"Show this help\")",
                "+  boolean showHelp = false;",
                "+",
                "+  @Option(",
                "+    name = \"--destination_directory\",",
                "+    usage = \"Destination directory for generated template files.\"",
                "+  )",
                "+  File destinationDirectory;",
                "+",
                "+  @Option(name = \"--skylark_package\", usage = \"Java package where Skylark functions are defined.\")",
                "+  String skylarkPackage = \"com.facebook.buck.skylark.function\";",
                "+}",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/Main.java b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/Main.java",
                "new file mode 100644",
                "index 0000000000..32b6de682c",
                "--- /dev/null",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/Main.java",
                "@@ -0,0 +1,54 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.tools.documentation.generator;",
                "+",
                "+import com.facebook.buck.tools.documentation.generator.skylark.SignatureCollector;",
                "+import com.facebook.buck.tools.documentation.generator.skylark.rendering.SoyTemplateSkylarkSignatureRenderer;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.devtools.build.lib.skylarkinterface.SkylarkSignature;",
                "+import java.nio.charset.StandardCharsets;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.Path;",
                "+import org.kohsuke.args4j.CmdLineParser;",
                "+",
                "+/** Entry point of the documentation generator binary. */",
                "+public class Main {",
                "+",
                "+  /** Executable entry point. */",
                "+  public static void main(String[] args) throws Exception {",
                "+    CliArgs parsedArgs = new CliArgs();",
                "+    CmdLineParser cmdLineParser = new CmdLineParser(parsedArgs);",
                "+    cmdLineParser.parseArgument(args);",
                "+",
                "+    SoyTemplateSkylarkSignatureRenderer renderer = new SoyTemplateSkylarkSignatureRenderer();",
                "+",
                "+    ImmutableList<SkylarkSignature> skylarkSignatures =",
                "+        SignatureCollector.getSkylarkSignatures(",
                "+                classInfo -> classInfo.getPackageName().contains(parsedArgs.skylarkPackage))",
                "+            .collect(ImmutableList.toImmutableList());",
                "+",
                "+    Path destinationPath = parsedArgs.destinationDirectory.toPath();",
                "+    Path tableOfContentsPath = destinationPath.resolve(\"toc.soy\");",
                "+    String tableOfContents = renderer.renderTableOfContents(skylarkSignatures);",
                "+    Files.write(tableOfContentsPath, tableOfContents.getBytes(StandardCharsets.UTF_8));",
                "+    for (SkylarkSignature signature : skylarkSignatures) {",
                "+      Path functionPath = destinationPath.resolve(signature.name() + \".soy\");",
                "+      String functionContent = renderer.render(signature);",
                "+      Files.write(functionPath, functionContent.getBytes(StandardCharsets.UTF_8));",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/SignatureCollector.java b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/SignatureCollector.java",
                "index d054dc9844..48ce59bf98 100644",
                "--- a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/SignatureCollector.java",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/SignatureCollector.java",
                "@@ -28,3 +28,3 @@ import java.util.stream.Stream;",
                " /** Class responsible discovering Skylark signature metadata in the classpath. */",
                "-class SignatureCollector {",
                "+public class SignatureCollector {",
                "   /**",
                "@@ -36,4 +36,4 @@ class SignatureCollector {",
                "    */",
                "-  static Stream<SkylarkSignature> getSkylarkSignatures(Predicate<ClassInfo> classInfoPredicate)",
                "-      throws IOException {",
                "+  public static Stream<SkylarkSignature> getSkylarkSignatures(",
                "+      Predicate<ClassInfo> classInfoPredicate) throws IOException {",
                "     return ClassPath.from(ClassPath.class.getClassLoader())",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java",
                "index 9511f35a42..2a107f9e3c 100644",
                "--- a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java",
                "@@ -34,3 +34,3 @@ import org.stringtemplate.v4.ST;",
                " /** Renders a soy template suitable for usage with the rest of buckbuild website documents. */",
                "-class SoyTemplateSkylarkSignatureRenderer {",
                "+public class SoyTemplateSkylarkSignatureRenderer {",
                "@@ -43,3 +43,3 @@ class SoyTemplateSkylarkSignatureRenderer {",
                "-  SoyTemplateSkylarkSignatureRenderer() {",
                "+  public SoyTemplateSkylarkSignatureRenderer() {",
                "     this.templateCache =",
                "@@ -59,3 +59,3 @@ class SoyTemplateSkylarkSignatureRenderer {",
                "    */",
                "-  String render(SkylarkSignature skylarkSignature) {",
                "+  public String render(SkylarkSignature skylarkSignature) {",
                "     ST stringTemplate = createTemplate(FUNCTION_TEMPLATE_NAME);",
                "@@ -70,3 +70,3 @@ class SoyTemplateSkylarkSignatureRenderer {",
                "   /** Renders a table of contents for the Skylark functions subsection on buckbuild.com website. */",
                "-  String renderTableOfContents(Iterable<SkylarkSignature> signatures) {",
                "+  public String renderTableOfContents(Iterable<SkylarkSignature> signatures) {",
                "     ST stringTemplate = createTemplate(TABLE_OF_CONTENTS_TEMPLATE_NAME);",
                "@@ -106,3 +106,3 @@ class SoyTemplateSkylarkSignatureRenderer {",
                "         \"doc\", param.doc(),",
                "-        \"defaultValue\", param.defaultValue());",
                "+        \"defaultValue\", param.defaultValue().isEmpty() ? \"None\" : param.defaultValue());",
                "   }",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg",
                "index ee5f2c7448..3bde459806 100644",
                "--- a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg",
                "@@ -1,2 +1,2 @@",
                "-{namespace buck.%signature.name%}",
                "+{namespace buck.skylark.%signature.name%}",
                "@@ -6,3 +6,3 @@",
                "     {param title: '%signature.name%()' /}",
                "-    {param navid: 'function_%signature.name%' /}",
                "+    {param navid: 'skylark/generated_%signature.name%' /}",
                "     {param prettify: true /}",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg",
                "index 954a7edaee..ea379f53d6 100644",
                "--- a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg",
                "@@ -12,3 +12,3 @@",
                "               %openCurly%param currentnavid: $navid /%closeCurly%",
                "-              %openCurly%param folder: 'function' /%closeCurly%",
                "+              %openCurly%param folder: 'skylark/generated' /%closeCurly%",
                "               %openCurly%param page: '%signature.name%' /%closeCurly%"
            ],
            "changed_files": [
                "tools/documentation_generator/documentation_generator.iml",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/BUCK",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/CliArgs.java",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/Main.java",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/SignatureCollector.java",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "31a47ebba981645b8e291a9d0990d9b880b1ea27",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521836438,
            "hunks": 6,
            "message": "Convert Function to method reference. Summary: This is better. Reviewed By: ttsugriy fbshipit-source-id: 20ac2eb",
            "diff": [
                "diff --git a/src/com/facebook/buck/cxx/toolchain/WindowsPreprocessor.java b/src/com/facebook/buck/cxx/toolchain/WindowsPreprocessor.java",
                "index 9714e4b762..1e1f786870 100644",
                "--- a/src/com/facebook/buck/cxx/toolchain/WindowsPreprocessor.java",
                "+++ b/src/com/facebook/buck/cxx/toolchain/WindowsPreprocessor.java",
                "@@ -22,3 +22,2 @@ import com.google.common.collect.Iterables;",
                " import java.nio.file.Path;",
                "-import java.util.function.Function;",
                "@@ -26,5 +25,2 @@ import java.util.function.Function;",
                " public class WindowsPreprocessor extends DelegatingTool implements Preprocessor {",
                "-",
                "-  private static Function<String, String> prependIncludeFlag = \"/I\"::concat;",
                "-",
                "   public WindowsPreprocessor(Tool tool) {",
                "@@ -46,5 +42,9 @@ public class WindowsPreprocessor extends DelegatingTool implements Preprocessor",
                "+  private static String prependIncludeFlag(String includeRoot) {",
                "+    return \"/I\" + includeRoot;",
                "+  }",
                "+",
                "   @Override",
                "   public Iterable<String> localIncludeArgs(Iterable<String> includeRoots) {",
                "-    return Iterables.transform(includeRoots, prependIncludeFlag::apply);",
                "+    return Iterables.transform(includeRoots, WindowsPreprocessor::prependIncludeFlag);",
                "   }",
                "@@ -53,3 +53,3 @@ public class WindowsPreprocessor extends DelegatingTool implements Preprocessor",
                "   public Iterable<String> systemIncludeArgs(Iterable<String> includeRoots) {",
                "-    return Iterables.transform(includeRoots, prependIncludeFlag::apply);",
                "+    return Iterables.transform(includeRoots, WindowsPreprocessor::prependIncludeFlag);",
                "   }",
                "@@ -58,3 +58,3 @@ public class WindowsPreprocessor extends DelegatingTool implements Preprocessor",
                "   public Iterable<String> quoteIncludeArgs(Iterable<String> includeRoots) {",
                "-    return Iterables.transform(includeRoots, prependIncludeFlag::apply);",
                "+    return Iterables.transform(includeRoots, WindowsPreprocessor::prependIncludeFlag);",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/cxx/toolchain/WindowsPreprocessor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d7d9b749e5c53d27e606707a3d24a76433af2433",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522655821,
            "hunks": 2,
            "message": "Default MemoryHandler logger level to SEVERE Summary: MemoryHandler keeps buffer of last N LogRecords which may never be purged even if command finishes executing. Some LogRecord classes are complex classes that have dependencies to build rules preventing them from being garbage collected. Reviewed By: ttsugriy fbshipit-source-id: 31764ff",
            "diff": [
                "diff --git a/config/logging.properties.st b/config/logging.properties.st",
                "index a87de9e2e5..e85899be0a 100644",
                "--- a/config/logging.properties.st",
                "+++ b/config/logging.properties.st",
                "@@ -55,6 +55,6 @@ java.util.logging.FileHandler.encoding=UTF-8",
                " # an error.",
                "-com.facebook.buck.log.memory.MemoryHandler.level=ALL",
                "+com.facebook.buck.log.memory.MemoryHandler.level=SEVERE",
                " # Define the buffer size.",
                "-com.facebook.buck.log.memory.MemoryHandler.size=100",
                "+com.facebook.buck.log.memory.MemoryHandler.size=10"
            ],
            "changed_files": [
                "config/logging.properties.st"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: command",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b248a1ca5ef1c1dc409e04d3fddd7a3d53258928",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521437895,
            "hunks": 4,
            "message": "Start a Skylark documentation generator project. Summary: This project will be used to scan for all Skylark functions in the classpath and generate their documentation. Test Plan: CI Reviewed By: philipjameson fbshipit-source-id: 3410a23",
            "diff": [
                "diff --git a/.idea/modules.xml b/.idea/modules.xml",
                "index 0b6c94b516..8a7d6de351 100644",
                "--- a/.idea/modules.xml",
                "+++ b/.idea/modules.xml",
                "@@ -7,2 +7,3 @@",
                "       <module fileurl=\"file://$PROJECT_DIR$/tools/consistency_checker/consistency_checker.iml\" filepath=\"$PROJECT_DIR$/tools/consistency_checker/consistency_checker.iml\" />",
                "+      <module fileurl=\"file://$PROJECT_DIR$/tools/documentation_generator/documentation_generator.iml\" filepath=\"$PROJECT_DIR$/tools/documentation_generator/documentation_generator.iml\" />",
                "       <module fileurl=\"file://$PROJECT_DIR$/tools/build/modules/modules.iml\" filepath=\"$PROJECT_DIR$/tools/build/modules/modules.iml\" />",
                "diff --git a/tools/documentation_generator/documentation_generator.iml b/tools/documentation_generator/documentation_generator.iml",
                "new file mode 100644",
                "index 0000000000..371dc19d53",
                "--- /dev/null",
                "+++ b/tools/documentation_generator/documentation_generator.iml",
                "@@ -0,0 +1,16 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<module type=\"JAVA_MODULE\" version=\"4\">",
                "+  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">",
                "+    <exclude-output />",
                "+    <content url=\"file://$MODULE_DIR$\">",
                "+      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />",
                "+      <sourceFolder url=\"file://$MODULE_DIR$/test\" isTestSource=\"true\" />",
                "+    </content>",
                "+    <orderEntry type=\"inheritedJdk\" />",
                "+    <orderEntry type=\"sourceFolder\" forTests=\"false\" />",
                "+    <orderEntry type=\"library\" name=\"guava\" level=\"project\" />",
                "+    <orderEntry type=\"library\" name=\"bazel\" level=\"project\" />",
                "+    <orderEntry type=\"library\" scope=\"TEST\" name=\"junit\" level=\"project\" />",
                "+    <orderEntry type=\"module\" module-name=\"buck\" scope=\"TEST\" />",
                "+  </component>",
                "+</module>",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/BUCK b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/BUCK",
                "new file mode 100644",
                "index 0000000000..3835433c32",
                "--- /dev/null",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/BUCK",
                "@@ -0,0 +1,10 @@",
                "+java_library(",
                "+    name = \"collector\",",
                "+    srcs = [\"SignatureCollector.java\"],",
                "+    visibility = [\"//tools/documentation_generator/...\"],",
                "+    deps = [",
                "+        \"//src/com/facebook/buck/util/function:function\",",
                "+        \"//third-party/java/bazel:skylark-lang\",",
                "+        \"//third-party/java/guava:guava\",",
                "+    ],",
                "+)",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/SignatureCollector.java b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/SignatureCollector.java",
                "new file mode 100644",
                "index 0000000000..d054dc9844",
                "--- /dev/null",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/SignatureCollector.java",
                "@@ -0,0 +1,48 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.tools.documentation.generator.skylark;",
                "+",
                "+import com.google.common.reflect.ClassPath;",
                "+import com.google.common.reflect.ClassPath.ClassInfo;",
                "+import com.google.devtools.build.lib.skylarkinterface.SkylarkSignature;",
                "+import java.io.IOException;",
                "+import java.util.Arrays;",
                "+import java.util.Objects;",
                "+import java.util.function.Predicate;",
                "+import java.util.stream.Stream;",
                "+",
                "+/** Class responsible discovering Skylark signature metadata in the classpath. */",
                "+class SignatureCollector {",
                "+  /**",
                "+   * Returns a stream of signatures found in the current classpath.",
                "+   *",
                "+   * @param classInfoPredicate predicate to use in order to filter out classes that should not be",
                "+   *     loaded. It's best to make it as precise as possible to avoid expensive loading - checking",
                "+   *     for class name and package is ideal.",
                "+   */",
                "+  static Stream<SkylarkSignature> getSkylarkSignatures(Predicate<ClassInfo> classInfoPredicate)",
                "+      throws IOException {",
                "+    return ClassPath.from(ClassPath.class.getClassLoader())",
                "+        .getAllClasses()",
                "+        .stream()",
                "+        .filter(classInfoPredicate)",
                "+        .map(ClassInfo::load)",
                "+        .flatMap(clazz -> Arrays.stream(clazz.getDeclaredFields()))",
                "+        .map(field -> field.getAnnotation(SkylarkSignature.class))",
                "+        .filter(Objects::nonNull);",
                "+  }",
                "+}"
            ],
            "changed_files": [
                ".idea/modules.xml",
                "tools/documentation_generator/documentation_generator.iml",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/BUCK",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/SignatureCollector.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "555df400cc5f7eba935ff142383d4ad2b7fc54f1",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522693344,
            "hunks": 43,
            "message": "Parametrize BuckUnixPathTest Summary: Adds more test cases to Buck-specific Path implementation Reviewed By: styurin fbshipit-source-id: bfc3b8d",
            "diff": [
                "diff --git a/.idea/libraries/junitparams.xml b/.idea/libraries/junitparams.xml",
                "new file mode 100644",
                "index 0000000000..02bfe5a1b0",
                "--- /dev/null",
                "+++ b/.idea/libraries/junitparams.xml",
                "@@ -0,0 +1,13 @@",
                "+<component name=\"libraryTable\">",
                "+  <library name=\"junitparams\">",
                "+    <CLASSES>",
                "+      <root url=\"file://$PROJECT_DIR$/third-party/java/junitparams\" />",
                "+    </CLASSES>",
                "+    <JAVADOC />",
                "+    <SOURCES>",
                "+      <root url=\"file://$PROJECT_DIR$/third-party/java/junitparams\" />",
                "+    </SOURCES>",
                "+    <jarDirectory url=\"file://$PROJECT_DIR$/third-party/java/junitparams\" recursive=\"false\" />",
                "+    <jarDirectory url=\"file://$PROJECT_DIR$/third-party/java/junitparams\" recursive=\"false\" type=\"SOURCES\" />",
                "+  </library>",
                "+</component>",
                "\\ No newline at end of file",
                "diff --git a/buck.iml b/buck.iml",
                "index 703635b00e..b3cf68c0ba 100644",
                "--- a/buck.iml",
                "+++ b/buck.iml",
                "@@ -118,2 +118,3 @@",
                "     <orderEntry type=\"library\" name=\"objenesis-1.2\" level=\"project\" />",
                "+    <orderEntry type=\"library\" name=\"junitparams\" level=\"project\" />",
                "   </component>",
                "diff --git a/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPath.java b/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPath.java",
                "index 91d53cb685..9c2d6405c5 100644",
                "--- a/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPath.java",
                "+++ b/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPath.java",
                "@@ -180,2 +180,5 @@ class BuckUnixPath implements Path {",
                "     }",
                "+    if (isAbsolute() && segments.length == 1) {",
                "+      return fs.getRootDirectory();",
                "+    }",
                "     return new BuckUnixPath(fs, new String[] {segments[segments.length - 1]}, false);",
                "diff --git a/test/com/facebook/buck/cli/bootstrapper/filesystem/BUCK b/test/com/facebook/buck/cli/bootstrapper/filesystem/BUCK",
                "index c72ba6e2e6..3437615bd0 100644",
                "--- a/test/com/facebook/buck/cli/bootstrapper/filesystem/BUCK",
                "+++ b/test/com/facebook/buck/cli/bootstrapper/filesystem/BUCK",
                "@@ -7,2 +7,3 @@ standard_java_test(",
                "         \"//third-party/java/junit:junit\",",
                "+        \"//third-party/java/junitparams:junitparams\",",
                "     ],",
                "diff --git a/test/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPathTest.java b/test/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPathTest.java",
                "index 730720da42..22bc71fce6 100644",
                "--- a/test/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPathTest.java",
                "+++ b/test/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPathTest.java",
                "@@ -20,2 +20,3 @@ import static org.junit.Assert.assertArrayEquals;",
                " import static org.junit.Assert.assertEquals;",
                "+import static org.junit.Assert.assertNull;",
                " import static org.junit.Assert.assertTrue;",
                "@@ -27,4 +28,8 @@ import java.util.ArrayList;",
                " import java.util.List;",
                "+import junitparams.JUnitParamsRunner;",
                "+import junitparams.Parameters;",
                " import org.junit.Test;",
                "+import org.junit.runner.RunWith;",
                "+@RunWith(JUnitParamsRunner.class)",
                " public class BuckUnixPathTest {",
                "@@ -40,4 +45,4 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void toStringMethod() {",
                "-    String data = \"/\";",
                "+  @Parameters({\"\", \"/\", \"some/relative/path\", \"/some/absolute/path\", \"filename.txt\"})",
                "+  public void toStringMethod(String data) {",
                "     Path path = createPath(data);",
                "@@ -47,11 +52,29 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void compareToMethod() {",
                "-    String data1 = \"/\";",
                "-    String data2 = \"/\";",
                "-    int expected = 0;",
                "-",
                "+  @Parameters({",
                "+    \"/,/,=\",",
                "+    \",,=\",",
                "+    \"/some/path,/some/path,=\",",
                "+    \"a,b,<\",",
                "+    \"b,a,>\",",
                "+    \"some/a,some/b,<\",",
                "+    \"some/b,some/a,>\",",
                "+    \"/some,/some/a,<\"",
                "+  })",
                "+  public void compareToMethod(String data1, String data2, String expected) {",
                "     Path path1 = createPath(data1);",
                "     Path path2 = createPath(data2);",
                "-",
                "-    assertEquals(expected, path1.compareTo(path2));",
                "+    int actual = path1.compareTo(path2);",
                "+    switch (expected) {",
                "+      case \"=\":",
                "+        assertEquals(0, actual);",
                "+        break;",
                "+      case \">\":",
                "+        assertTrue(actual > 0);",
                "+        break;",
                "+      case \"<\":",
                "+        assertTrue(actual < 0);",
                "+        break;",
                "+      default:",
                "+        throw new IllegalArgumentException(expected);",
                "+    }",
                "   }",
                "@@ -59,10 +82,17 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void endsWithMethod() {",
                "-    String data1 = \"/path/1/2\";",
                "-    String data2 = \"1/2\";",
                "-    boolean expected = true;",
                "-",
                "+  @Parameters({",
                "+    \",,true\",",
                "+    \"/,/,true\",",
                "+    \"/path/1/2,1/2,true\",",
                "+    \"/,,false\",",
                "+    \",/,false\",",
                "+    \"/path/1,/path/1,true\",",
                "+    \"/path1/1,path1/1,true\",",
                "+    \"/path1/1/2,/path2/1/2,false\",",
                "+    \"/path1/1/2,1/3,false\",",
                "+    \"path1/1,path1,false\"",
                "+  })",
                "+  public void endsWithMethod(String data1, String data2, boolean expected) {",
                "     Path path1 = createPath(data1);",
                "     Path path2 = createPath(data2);",
                "-",
                "     assertEquals(expected, path1.endsWith(path2));",
                "@@ -71,10 +101,15 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void equalsMethod() {",
                "-    String data1 = \"/path/to/something\";",
                "-    String data2 = \"/path/to/something\";",
                "-    boolean expected = true;",
                "-",
                "+  @Parameters({",
                "+    \",,true\",",
                "+    \"/,/,true\",",
                "+    \"/path/to/something,/path/to/something,true\",",
                "+    \"1/2/3,1/2/3,true\",",
                "+    \"/,/a,false\",",
                "+    \"a,b,false\",",
                "+    \"/a/b,/b/a,false\",",
                "+    \"/a,/a/a,false\"",
                "+  })",
                "+  public void equalsMethod(String data1, String data2, boolean expected) {",
                "     Path path1 = createPath(data1);",
                "     Path path2 = createPath(data2);",
                "-",
                "     assertEquals(expected, path1.equals(path2));",
                "@@ -83,9 +118,17 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void getFileNameMethod() {",
                "-    String data = \"/path/to/something\";",
                "-    String expected = \"something\";",
                "-",
                "+  @Parameters({",
                "+    \",null\",",
                "+    \"/,/\",",
                "+    \"/path/to/something,something\",",
                "+    \"path/1/2,2\",",
                "+    \"filename.txt,filename.txt\"",
                "+  })",
                "+  public void getFileNameMethod(String data, String expected) {",
                "     Path path = createPath(data);",
                "-",
                "-    assertEquals(expected, path.getFileName().toString());",
                "+    Path fileName = path.getFileName();",
                "+    if (expected.equals(\"null\")) {",
                "+      assertNull(fileName);",
                "+    } else {",
                "+      assertEquals(expected, fileName.toString());",
                "+    }",
                "   }",
                "@@ -93,7 +136,5 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void getFileSystemMethod() {",
                "-    String data = \"/path/to/something\";",
                "-",
                "+  @Parameters({\"\", \"/\", \"file\", \"dir/file\", \"/dir/file\"})",
                "+  public void getFileSystemMethod(String data) {",
                "     Path path = createPath(data);",
                "-",
                "     assertTrue(path.getFileSystem() instanceof BuckFileSystem);",
                "@@ -102,9 +143,5 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void getNameMethod() {",
                "-    String data = \"/path/to/something\";",
                "-    int index = 1;",
                "-    String expected = \"to\";",
                "-",
                "+  @Parameters({\"a,0,a\", \"/a,0,a\", \"a/b,0,a\", \"a/b,1,b\", \"a/b/c,1,b\", \"a/b/c,2,c\"})",
                "+  public void getNameMethod(String data, int index, String expected) {",
                "     Path path = createPath(data);",
                "-",
                "     assertEquals(expected, path.getName(index).toString());",
                "@@ -112,9 +149,13 @@ public class BuckUnixPathTest {",
                "-  @Test",
                "-  public void getNameCountMethod() {",
                "-    String data = \"/path/to/something\";",
                "-    int expected = 3;",
                "-",
                "+  @Test(expected = IllegalArgumentException.class)",
                "+  @Parameters({\"a,-1\", \"/a,-1\", \",0\", \"/,0\", \"a/b,2\", \"/a/b,2\", \"/a/b/c/d,1000\"})",
                "+  public void getNameMethodException(String data, int index) {",
                "     Path path = createPath(data);",
                "+    path.getName(index);",
                "+  }",
                "+  @Test",
                "+  @Parameters({\",0\", \"/,0\", \"a,1\", \"/a,1\", \"/a/b/c,3\"})",
                "+  public void getNameCountMethod(String data, int expected) {",
                "+    Path path = createPath(data);",
                "     assertEquals(expected, path.getNameCount());",
                "@@ -123,9 +164,11 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void getParentMethod() {",
                "-    String data = \"/path/to/something\";",
                "-    String expected = \"/path/to\";",
                "-",
                "+  @Parameters({\",null\", \"/,null\", \"a,null\", \"/a/b,/a\", \"a/b,a\", \"a/b/c,a/b\"})",
                "+  public void getParentMethod(String data, String expected) {",
                "     Path path = createPath(data);",
                "-",
                "-    assertEquals(expected, path.getParent().toString());",
                "+    Path parent = path.getParent();",
                "+    if (expected.equals(\"null\")) {",
                "+      assertNull(parent);",
                "+    } else {",
                "+      assertEquals(expected, parent.toString());",
                "+    }",
                "   }",
                "@@ -133,9 +176,11 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void getRootMethod() {",
                "-    String data = \"/path/to/something\";",
                "-    String expected = \"/\";",
                "-",
                "+  @Parameters({\",null\", \"/,/\", \"a,null\", \"/a,/\", \"a/b/c,null\", \"/a/b/c,/\"})",
                "+  public void getRootMethod(String data, String expected) {",
                "     Path path = createPath(data);",
                "-",
                "-    assertEquals(expected, path.getRoot().toString());",
                "+    Path root = path.getRoot();",
                "+    if (expected.equals(\"null\")) {",
                "+      assertNull(root);",
                "+    } else {",
                "+      assertEquals(expected, root.toString());",
                "+    }",
                "   }",
                "@@ -143,9 +188,8 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void hashcodeMethod() {",
                "-    String data1 = \"/\";",
                "-    String data2 = \"/\";",
                "-",
                "+  @Parameters({\"\", \"/\", \"/a\", \"a\", \"a/b/c\", \"/a/b/c\"})",
                "+  public void hashcodeMethodEquals(String data) {",
                "+    String data1 = new String(data);",
                "+    String data2 = new String(data);",
                "     Path path1 = createPath(data1);",
                "     Path path2 = createPath(data2);",
                "-",
                "     assertEquals(path1.hashCode(), path2.hashCode());",
                "@@ -154,8 +198,5 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void isAbsoluteMethod() {",
                "-    String data = \"/path/to/something\";",
                "-    boolean expected = true;",
                "-",
                "+  @Parameters({\",false\", \"/,true\", \"a,false\", \"/a,true\", \"a/b/c,false\", \"/a/b/c,true\"})",
                "+  public void isAbsoluteMethod(String data, boolean expected) {",
                "     Path path = createPath(data);",
                "-",
                "     assertEquals(expected, path.isAbsolute());",
                "@@ -163,9 +204,17 @@ public class BuckUnixPathTest {",
                "-  @Test",
                "-  public void iteratorMethod() {",
                "-    String data = \"/path/to/something\";",
                "-    String[] expected = {\"path\", \"to\", \"something\"};",
                "+  private Object[] iteratorMethodData() {",
                "+    return new Object[] {",
                "+      new Object[] {\"\", new String[] {}},",
                "+      new Object[] {\"/\", new String[] {}},",
                "+      new Object[] {\"/a\", new String[] {\"a\"}},",
                "+      new Object[] {\"a\", new String[] {\"a\"}},",
                "+      new Object[] {\"/a/b/c\", new String[] {\"a\", \"b\", \"c\"}},",
                "+      new Object[] {\"a/b/c\", new String[] {\"a\", \"b\", \"c\"}}",
                "+    };",
                "+  }",
                "+  @Test",
                "+  @Parameters(method = \"iteratorMethodData\")",
                "+  public void iteratorMethod(String data, String[] expected) {",
                "     Path path = createPath(data);",
                "-",
                "     List<Path> list = new ArrayList<>();",
                "@@ -177,8 +226,17 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void normalizeMethod() {",
                "-    String data = \"/path/to/something/../something/.\";",
                "-    String expected = \"/path/to/something\";",
                "-",
                "+  @Parameters({",
                "+    \",\",",
                "+    \"/,/\",",
                "+    \"a/b/c,a/b/c\",",
                "+    \"/a/b,/a/b\",",
                "+    \"a/..,\",",
                "+    \"/a/..,/\",",
                "+    \"/a/.,/a\",",
                "+    \"a/././b/././c,a/b/c\",",
                "+    \"a/b/..,a\",",
                "+    \"a/b/c/../d/../e,a/b/e\",",
                "+    \"a/b/./../c/../d/.,a/d\"",
                "+  })",
                "+  public void normalizeMethod(String data, String expected) {",
                "     Path path = createPath(data);",
                "-",
                "     assertEquals(expected, path.normalize().toString());",
                "@@ -187,10 +245,6 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void relativizeMethod() {",
                "-    String data1 = \"/path/to/something/\";",
                "-    String data2 = \"/path/to\";",
                "-    String expected = \"..\";",
                "-",
                "+  @Parameters({\"/a/b,/a,..\", \"/a/b,/a/b/c/d,c/d\", \"a/b,a/b/c/d,c/d\", \"/a,/a,\"})",
                "+  public void relativizeMethod(String data1, String data2, String expected) {",
                "     Path path1 = createPath(data1);",
                "     Path path2 = createPath(data2);",
                "-",
                "     assertEquals(expected, path1.relativize(path2).toString());",
                "@@ -199,10 +253,6 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void resolveMethod() {",
                "-    String data1 = \"/path/to\";",
                "-    String data2 = \"something\";",
                "-    String expected = \"/path/to/something\";",
                "-",
                "+  @Parameters({\"/a/b,c,/a/b/c\", \"/a,/b,/b\", \"/a/b,c/d,/a/b/c/d\", \"a/b,c/d,a/b/c/d\"})",
                "+  public void resolveMethod(String data1, String data2, String expected) {",
                "     Path path1 = createPath(data1);",
                "     Path path2 = createPath(data2);",
                "-",
                "     assertEquals(expected, path1.resolve(path2).toString());",
                "@@ -211,10 +261,17 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void startsWithMethod() {",
                "-    String data1 = \"/path/1/2\";",
                "-    String data2 = \"/path/1\";",
                "-    boolean expected = true;",
                "-",
                "+  @Parameters({",
                "+    \",,true\",",
                "+    \"/,/,true\",",
                "+    \"path/1/2,path/1,true\",",
                "+    \"/,,false\",",
                "+    \",/,false\",",
                "+    \"/path/1,/path/1,true\",",
                "+    \"/path1/1,/path1,true\",",
                "+    \"/path1/1/2,/path1/1/3,false\",",
                "+    \"/path1/1/2,path1/1/2,false\",",
                "+    \"path1/1,1,false\"",
                "+  })",
                "+  public void startsWithMethod(String data1, String data2, boolean expected) {",
                "     Path path1 = createPath(data1);",
                "     Path path2 = createPath(data2);",
                "-",
                "     assertEquals(expected, path1.startsWith(path2));",
                "@@ -223,12 +280,21 @@ public class BuckUnixPathTest {",
                "   @Test",
                "-  public void subpathMethod() {",
                "-    String data = \"/path/to/something/great\";",
                "-    int beginIndex = 1;",
                "-    int endIndex = 3;",
                "-    String expected = \"to/something\";",
                "-",
                "+  @Parameters({",
                "+    \"a,0,1,a\",",
                "+    \"/a,0,1,a\",",
                "+    \"/a/b/c/d,1,3,b/c\",",
                "+    \"a/b/c/d,1,3,b/c\",",
                "+    \"/a/b,1,2,b\",",
                "+    \"a/b,1,2,b\"",
                "+  })",
                "+  public void subpathMethod(String data, int beginIndex, int endIndex, String expected) {",
                "     Path path = createPath(data);",
                "-",
                "     assertEquals(expected, path.subpath(beginIndex, endIndex).toString());",
                "   }",
                "+",
                "+  @Test(expected = IllegalArgumentException.class)",
                "+  @Parameters({\",0,1\", \"a,-1,1\", \"/a,-1,1\", \"a,0,2\", \"/a,0,2\", \"a/b,1,0\", \"/a/b/c/d,0,5\"})",
                "+  public void subpathMethodException(String data, int beginIndex, int endIndex) {",
                "+    Path path = createPath(data);",
                "+    path.subpath(beginIndex, endIndex);",
                "+  }",
                " }"
            ],
            "changed_files": [
                ".idea/libraries/junitparams.xml",
                "buck.iml",
                "src/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPath.java",
                "test/com/facebook/buck/cli/bootstrapper/filesystem/BUCK",
                "test/com/facebook/buck/cli/bootstrapper/filesystem/BuckUnixPathTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "30d363cacb7cd4245cf67ba63b70a3f04a852abe",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521566365,
            "hunks": 55,
            "message": "Remove BuildRuleResolver fields from Python build rules Summary: Needed for incremental action graph and build rules with providers. Test Plan: CI Reviewed By: sbalabanov fbshipit-source-id: e147b6b",
            "diff": [
                "diff --git a/src/com/facebook/buck/lua/LuaBinaryDescription.java b/src/com/facebook/buck/lua/LuaBinaryDescription.java",
                "index f47a2f63fe..b711f2a74f 100644",
                "--- a/src/com/facebook/buck/lua/LuaBinaryDescription.java",
                "+++ b/src/com/facebook/buck/lua/LuaBinaryDescription.java",
                "@@ -345,3 +345,3 @@ public class LuaBinaryDescription",
                "           PythonPackageComponents components =",
                "-              packageable.getPythonPackageComponents(pythonPlatform, cxxPlatform);",
                "+              packageable.getPythonPackageComponents(pythonPlatform, cxxPlatform, ruleResolver);",
                "           builder.putAllPythonModules(",
                "@@ -350,3 +350,3 @@ public class LuaBinaryDescription",
                "               MoreMaps.transformKeys(components.getNativeLibraries(), Object::toString));",
                "-          deps = packageable.getPythonPackageDeps(pythonPlatform, cxxPlatform);",
                "+          deps = packageable.getPythonPackageDeps(pythonPlatform, cxxPlatform, ruleResolver);",
                "           if (components.hasNativeCode(cxxPlatform)) {",
                "@@ -485,3 +485,3 @@ public class LuaBinaryDescription",
                "         PythonPackageComponents components =",
                "-            entry.getValue().getPythonPackageComponents(pythonPlatform, cxxPlatform);",
                "+            entry.getValue().getPythonPackageComponents(pythonPlatform, cxxPlatform, ruleResolver);",
                "         builder.putAllPythonModules(",
                "diff --git a/src/com/facebook/buck/python/CxxPythonExtension.java b/src/com/facebook/buck/python/CxxPythonExtension.java",
                "index 554f7e9528..9142312cf6 100644",
                "--- a/src/com/facebook/buck/python/CxxPythonExtension.java",
                "+++ b/src/com/facebook/buck/python/CxxPythonExtension.java",
                "@@ -29,4 +29,2 @@ import com.facebook.buck.rules.HasRuntimeDeps;",
                " import com.facebook.buck.rules.NoopBuildRuleWithDeclaredAndExtraDeps;",
                "-import com.facebook.buck.rules.SourcePathResolver;",
                "-import com.facebook.buck.rules.SourcePathRuleFinder;",
                " import com.google.common.annotations.VisibleForTesting;",
                "@@ -37,17 +35,5 @@ public abstract class CxxPythonExtension extends NoopBuildRuleWithDeclaredAndExt",
                "-  protected BuildRuleResolver ruleResolver;",
                "-  protected SourcePathRuleFinder ruleFinder;",
                "-  protected SourcePathResolver pathResolver;",
                "-",
                "   public CxxPythonExtension(",
                "-      BuildTarget buildTarget,",
                "-      ProjectFilesystem projectFilesystem,",
                "-      BuildRuleParams params,",
                "-      BuildRuleResolver ruleResolver,",
                "-      SourcePathRuleFinder ruleFinder,",
                "-      SourcePathResolver pathResolver) {",
                "+      BuildTarget buildTarget, ProjectFilesystem projectFilesystem, BuildRuleParams params) {",
                "     super(buildTarget, projectFilesystem, params);",
                "-    this.ruleResolver = ruleResolver;",
                "-    this.ruleFinder = ruleFinder;",
                "-    this.pathResolver = pathResolver;",
                "   }",
                "@@ -55,3 +41,4 @@ public abstract class CxxPythonExtension extends NoopBuildRuleWithDeclaredAndExt",
                "   @VisibleForTesting",
                "-  protected abstract BuildRule getExtension(PythonPlatform pythonPlatform, CxxPlatform cxxPlatform);",
                "+  protected abstract BuildRule getExtension(",
                "+      PythonPlatform pythonPlatform, CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver);",
                "@@ -61,15 +48,5 @@ public abstract class CxxPythonExtension extends NoopBuildRuleWithDeclaredAndExt",
                "   public abstract PythonPackageComponents getPythonPackageComponents(",
                "-      PythonPlatform pythonPlatform, CxxPlatform cxxPlatform);",
                "+      PythonPlatform pythonPlatform, CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver);",
                "   public abstract NativeLinkTarget getNativeLinkTarget(PythonPlatform pythonPlatform);",
                "-",
                "-  @Override",
                "-  public void updateBuildRuleResolver(",
                "-      BuildRuleResolver ruleResolver,",
                "-      SourcePathRuleFinder ruleFinder,",
                "-      SourcePathResolver pathResolver) {",
                "-    this.ruleResolver = ruleResolver;",
                "-    this.ruleFinder = ruleFinder;",
                "-    this.pathResolver = pathResolver;",
                "-  }",
                " }",
                "diff --git a/src/com/facebook/buck/python/CxxPythonExtensionDescription.java b/src/com/facebook/buck/python/CxxPythonExtensionDescription.java",
                "index bf494aaa30..74781047f0 100644",
                "--- a/src/com/facebook/buck/python/CxxPythonExtensionDescription.java",
                "+++ b/src/com/facebook/buck/python/CxxPythonExtensionDescription.java",
                "@@ -452,4 +452,2 @@ public class CxxPythonExtensionDescription",
                "     // get the real build rules via querying the action graph.",
                "-    SourcePathRuleFinder ruleFinderLocal = new SourcePathRuleFinder(ruleResolverLocal);",
                "-    SourcePathResolver pathResolverLocal = DefaultSourcePathResolver.from(ruleFinderLocal);",
                "     Path baseModule = PythonUtil.getBasePath(buildTarget, args.getBaseModule());",
                "@@ -457,9 +455,3 @@ public class CxxPythonExtensionDescription",
                "     Path module = baseModule.resolve(getExtensionName(moduleName));",
                "-    return new CxxPythonExtension(",
                "-        buildTarget,",
                "-        projectFilesystem,",
                "-        params,",
                "-        ruleResolverLocal,",
                "-        ruleFinderLocal,",
                "-        pathResolverLocal) {",
                "+    return new CxxPythonExtension(buildTarget, projectFilesystem, params) {",
                "@@ -468,3 +460,4 @@ public class CxxPythonExtensionDescription",
                "       @Override",
                "-      protected BuildRule getExtension(PythonPlatform pythonPlatform, CxxPlatform cxxPlatform) {",
                "+      protected BuildRule getExtension(",
                "+          PythonPlatform pythonPlatform, CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "         BuildRule extension =",
                "@@ -494,3 +487,3 @@ public class CxxPythonExtensionDescription",
                "       public Iterable<BuildRule> getPythonPackageDeps(",
                "-          PythonPlatform pythonPlatform, CxxPlatform cxxPlatform) {",
                "+          PythonPlatform pythonPlatform, CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "         return PythonUtil.getDeps(",
                "@@ -505,4 +498,4 @@ public class CxxPythonExtensionDescription",
                "       public PythonPackageComponents getPythonPackageComponents(",
                "-          PythonPlatform pythonPlatform, CxxPlatform cxxPlatform) {",
                "-        BuildRule extension = getExtension(pythonPlatform, cxxPlatform);",
                "+          PythonPlatform pythonPlatform, CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+        BuildRule extension = getExtension(pythonPlatform, cxxPlatform, ruleResolver);",
                "         SourcePath output = extension.getSourcePathToOutput();",
                "diff --git a/src/com/facebook/buck/python/PrebuiltPythonLibrary.java b/src/com/facebook/buck/python/PrebuiltPythonLibrary.java",
                "index 689bbb7071..f45705b688 100644",
                "--- a/src/com/facebook/buck/python/PrebuiltPythonLibrary.java",
                "+++ b/src/com/facebook/buck/python/PrebuiltPythonLibrary.java",
                "@@ -29,2 +29,3 @@ import com.facebook.buck.rules.BuildRule;",
                " import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                " import com.facebook.buck.rules.BuildableContext;",
                "@@ -65,3 +66,3 @@ public class PrebuiltPythonLibrary extends AbstractBuildRuleWithDeclaredAndExtra",
                "   public Iterable<BuildRule> getPythonPackageDeps(",
                "-      PythonPlatform pythonPlatform, CxxPlatform cxxPlatform) {",
                "+      PythonPlatform pythonPlatform, CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return getBuildDeps();",
                "@@ -71,3 +72,3 @@ public class PrebuiltPythonLibrary extends AbstractBuildRuleWithDeclaredAndExtra",
                "   public PythonPackageComponents getPythonPackageComponents(",
                "-      PythonPlatform pythonPlatform, CxxPlatform cxxPlatform) {",
                "+      PythonPlatform pythonPlatform, CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     // TODO(mikekap): Allow varying sources by cxx platform (in cases of prebuilt",
                "diff --git a/src/com/facebook/buck/python/PythonLibrary.java b/src/com/facebook/buck/python/PythonLibrary.java",
                "index 26aab6e090..aeb7bb445f 100644",
                "--- a/src/com/facebook/buck/python/PythonLibrary.java",
                "+++ b/src/com/facebook/buck/python/PythonLibrary.java",
                "@@ -28,3 +28,2 @@ import com.facebook.buck.rules.HasRuntimeDeps;",
                " import com.facebook.buck.rules.NoopBuildRuleWithDeclaredAndExtraDeps;",
                "-import com.facebook.buck.rules.SourcePathResolver;",
                " import com.facebook.buck.rules.SourcePathRuleFinder;",
                "@@ -35,11 +34,5 @@ public class PythonLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  private BuildRuleResolver resolver;",
                "-",
                "   PythonLibrary(",
                "-      BuildTarget buildTarget,",
                "-      ProjectFilesystem projectFilesystem,",
                "-      BuildRuleParams params,",
                "-      BuildRuleResolver resolver) {",
                "+      BuildTarget buildTarget, ProjectFilesystem projectFilesystem, BuildRuleParams params) {",
                "     super(buildTarget, projectFilesystem, params);",
                "-    this.resolver = resolver;",
                "   }",
                "@@ -49,4 +42,4 @@ public class PythonLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   public Iterable<BuildRule> getPythonPackageDeps(",
                "-      PythonPlatform pythonPlatform, CxxPlatform cxxPlatform) {",
                "-    return resolver",
                "+      PythonPlatform pythonPlatform, CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+    return ruleResolver",
                "         .requireMetadata(",
                "@@ -63,4 +56,4 @@ public class PythonLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   public PythonPackageComponents getPythonPackageComponents(",
                "-      PythonPlatform pythonPlatform, CxxPlatform cxxPlatform) {",
                "-    return resolver",
                "+      PythonPlatform pythonPlatform, CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+    return ruleResolver",
                "         .requireMetadata(",
                "@@ -79,10 +72,2 @@ public class PythonLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   }",
                "-",
                "-  @Override",
                "-  public void updateBuildRuleResolver(",
                "-      BuildRuleResolver ruleResolver,",
                "-      SourcePathRuleFinder ruleFinder,",
                "-      SourcePathResolver pathResolver) {",
                "-    this.resolver = ruleResolver;",
                "-  }",
                " }",
                "diff --git a/src/com/facebook/buck/python/PythonLibraryDescription.java b/src/com/facebook/buck/python/PythonLibraryDescription.java",
                "index 03eb6b2aec..13c500bf7f 100644",
                "--- a/src/com/facebook/buck/python/PythonLibraryDescription.java",
                "+++ b/src/com/facebook/buck/python/PythonLibraryDescription.java",
                "@@ -80,4 +80,3 @@ public class PythonLibraryDescription",
                "       PythonLibraryDescriptionArg args) {",
                "-    return new PythonLibrary(",
                "-        buildTarget, context.getProjectFilesystem(), params, context.getBuildRuleResolver());",
                "+    return new PythonLibrary(buildTarget, context.getProjectFilesystem(), params);",
                "   }",
                "diff --git a/src/com/facebook/buck/python/PythonPackagable.java b/src/com/facebook/buck/python/PythonPackagable.java",
                "index 2816c75fbe..40de149c26 100644",
                "--- a/src/com/facebook/buck/python/PythonPackagable.java",
                "+++ b/src/com/facebook/buck/python/PythonPackagable.java",
                "@@ -21,2 +21,3 @@ import com.facebook.buck.python.toolchain.PythonPlatform;",
                " import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "@@ -24,6 +25,7 @@ public interface PythonPackagable {",
                "-  Iterable<BuildRule> getPythonPackageDeps(PythonPlatform pythonPlatform, CxxPlatform cxxPlatform);",
                "+  Iterable<BuildRule> getPythonPackageDeps(",
                "+      PythonPlatform pythonPlatform, CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver);",
                "   PythonPackageComponents getPythonPackageComponents(",
                "-      PythonPlatform pythonPlatform, CxxPlatform cxxPlatform);",
                "+      PythonPlatform pythonPlatform, CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver);",
                " }",
                "diff --git a/src/com/facebook/buck/python/PythonTestDescription.java b/src/com/facebook/buck/python/PythonTestDescription.java",
                "index 9dae3e2374..51e769543c 100644",
                "--- a/src/com/facebook/buck/python/PythonTestDescription.java",
                "+++ b/src/com/facebook/buck/python/PythonTestDescription.java",
                "@@ -379,3 +379,3 @@ public class PythonTestDescription",
                "           if (!pythonLibrary",
                "-              .getPythonPackageComponents(pythonPlatform, cxxPlatform)",
                "+              .getPythonPackageComponents(pythonPlatform, cxxPlatform, resolver)",
                "               .getModules()",
                "@@ -392,3 +392,3 @@ public class PythonTestDescription",
                "                   pythonLibrary",
                "-                      .getPythonPackageComponents(pythonPlatform, cxxPlatform)",
                "+                      .getPythonPackageComponents(pythonPlatform, cxxPlatform, resolver)",
                "                       .getModules()",
                "diff --git a/src/com/facebook/buck/python/PythonUtil.java b/src/com/facebook/buck/python/PythonUtil.java",
                "index 2688edf6f8..49dcd90b8a 100644",
                "--- a/src/com/facebook/buck/python/PythonUtil.java",
                "+++ b/src/com/facebook/buck/python/PythonUtil.java",
                "@@ -216,3 +216,4 @@ public class PythonUtil {",
                "           List<BuildRule> cxxpydeps = new ArrayList<>();",
                "-          for (BuildRule dep : extension.getPythonPackageDeps(pythonPlatform, cxxPlatform)) {",
                "+          for (BuildRule dep :",
                "+              extension.getPythonPackageDeps(pythonPlatform, cxxPlatform, ruleResolver)) {",
                "             if (dep instanceof PythonPackagable) {",
                "@@ -225,6 +226,7 @@ public class PythonUtil {",
                "           PythonPackageComponents comps =",
                "-              packagable.getPythonPackageComponents(pythonPlatform, cxxPlatform);",
                "+              packagable.getPythonPackageComponents(pythonPlatform, cxxPlatform, ruleResolver);",
                "           allComponents.addComponent(comps, rule.getBuildTarget());",
                "           if (comps.hasNativeCode(cxxPlatform)) {",
                "-            for (BuildRule dep : packagable.getPythonPackageDeps(pythonPlatform, cxxPlatform)) {",
                "+            for (BuildRule dep :",
                "+                packagable.getPythonPackageDeps(pythonPlatform, cxxPlatform, ruleResolver)) {",
                "               if (dep instanceof NativeLinkable) {",
                "@@ -236,3 +238,3 @@ public class PythonUtil {",
                "           }",
                "-          deps = packagable.getPythonPackageDeps(pythonPlatform, cxxPlatform);",
                "+          deps = packagable.getPythonPackageDeps(pythonPlatform, cxxPlatform, ruleResolver);",
                "         } else if (rule instanceof NativeLinkable) {",
                "@@ -300,3 +302,3 @@ public class PythonUtil {",
                "         allComponents.addComponent(",
                "-            entry.getValue().getPythonPackageComponents(pythonPlatform, cxxPlatform),",
                "+            entry.getValue().getPythonPackageComponents(pythonPlatform, cxxPlatform, ruleResolver),",
                "             entry.getValue().getBuildTarget());",
                "diff --git a/test/com/facebook/buck/python/CxxPythonExtensionDescriptionTest.java b/test/com/facebook/buck/python/CxxPythonExtensionDescriptionTest.java",
                "index 7abe653104..047636ade9 100644",
                "--- a/test/com/facebook/buck/python/CxxPythonExtensionDescriptionTest.java",
                "+++ b/test/com/facebook/buck/python/CxxPythonExtensionDescriptionTest.java",
                "@@ -115,3 +115,3 @@ public class CxxPythonExtensionDescriptionTest {",
                "     PythonPackageComponents normalComps =",
                "-        normal.getPythonPackageComponents(PY2, CxxPlatformUtils.DEFAULT_PLATFORM);",
                "+        normal.getPythonPackageComponents(PY2, CxxPlatformUtils.DEFAULT_PLATFORM, resolver);",
                "     assertEquals(",
                "@@ -137,3 +137,3 @@ public class CxxPythonExtensionDescriptionTest {",
                "     PythonPackageComponents baseModuleComps =",
                "-        baseModule.getPythonPackageComponents(PY2, CxxPlatformUtils.DEFAULT_PLATFORM);",
                "+        baseModule.getPythonPackageComponents(PY2, CxxPlatformUtils.DEFAULT_PLATFORM, resolver);",
                "     assertEquals(",
                "@@ -178,3 +178,3 @@ public class CxxPythonExtensionDescriptionTest {",
                "     // Verify that the shared library dep propagated to the link rule.",
                "-    extension.getPythonPackageComponents(PY2, CxxPlatformUtils.DEFAULT_PLATFORM);",
                "+    extension.getPythonPackageComponents(PY2, CxxPlatformUtils.DEFAULT_PLATFORM, resolver);",
                "     BuildRule rule =",
                "@@ -210,3 +210,3 @@ public class CxxPythonExtensionDescriptionTest {",
                "     PythonPackageComponents actualComponent =",
                "-        extension.getPythonPackageComponents(PY2, CxxPlatformUtils.DEFAULT_PLATFORM);",
                "+        extension.getPythonPackageComponents(PY2, CxxPlatformUtils.DEFAULT_PLATFORM, resolver);",
                "     BuildRule rule =",
                "@@ -292,3 +292,4 @@ public class CxxPythonExtensionDescriptionTest {",
                "     // Get the py2 extension, and verify it pulled in the py2 lib but not the py3 lib.",
                "-    CxxLink py2Ext = (CxxLink) extension.getExtension(py2, CxxPlatformUtils.DEFAULT_PLATFORM);",
                "+    CxxLink py2Ext =",
                "+        (CxxLink) extension.getExtension(py2, CxxPlatformUtils.DEFAULT_PLATFORM, resolver);",
                "     assertThat(",
                "@@ -298,3 +299,4 @@ public class CxxPythonExtensionDescriptionTest {",
                "     // Get the py3 extension, and verify it pulled in the py3 lib but not the py2 lib.",
                "-    CxxLink py3Ext = (CxxLink) extension.getExtension(py3, CxxPlatformUtils.DEFAULT_PLATFORM);",
                "+    CxxLink py3Ext =",
                "+        (CxxLink) extension.getExtension(py3, CxxPlatformUtils.DEFAULT_PLATFORM, resolver);",
                "     assertThat(",
                "diff --git a/test/com/facebook/buck/python/PythonLibraryDescriptionTest.java b/test/com/facebook/buck/python/PythonLibraryDescriptionTest.java",
                "index dda5b6c347..de2db91547 100644",
                "--- a/test/com/facebook/buck/python/PythonLibraryDescriptionTest.java",
                "+++ b/test/com/facebook/buck/python/PythonLibraryDescriptionTest.java",
                "@@ -71,5 +71,4 @@ public class PythonLibraryDescriptionTest {",
                "     TargetGraph normalTargetGraph = TargetGraphFactory.newInstance(normalBuilder.build());",
                "-    PythonLibrary normal =",
                "-        normalBuilder.build(",
                "-            new TestBuildRuleResolver(normalTargetGraph), filesystem, normalTargetGraph);",
                "+    BuildRuleResolver ruleResolver = new TestBuildRuleResolver(normalTargetGraph);",
                "+    PythonLibrary normal = normalBuilder.build(ruleResolver, filesystem, normalTargetGraph);",
                "     assertEquals(",
                "@@ -78,3 +77,3 @@ public class PythonLibraryDescriptionTest {",
                "             .getPythonPackageComponents(",
                "-                PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM)",
                "+                PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM, ruleResolver)",
                "             .getModules());",
                "@@ -89,7 +88,5 @@ public class PythonLibraryDescriptionTest {",
                "         TargetGraphFactory.newInstance(withBaseModuleBuilder.build());",
                "+    ruleResolver = new TestBuildRuleResolver(withBaseModuleTargetGraph);",
                "     PythonLibrary withBaseModule =",
                "-        withBaseModuleBuilder.build(",
                "-            new TestBuildRuleResolver(withBaseModuleTargetGraph),",
                "-            filesystem,",
                "-            withBaseModuleTargetGraph);",
                "+        withBaseModuleBuilder.build(ruleResolver, filesystem, withBaseModuleTargetGraph);",
                "     assertEquals(",
                "@@ -98,3 +95,3 @@ public class PythonLibraryDescriptionTest {",
                "             .getPythonPackageComponents(",
                "-                PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM)",
                "+                PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM, ruleResolver)",
                "             .getModules());",
                "@@ -120,4 +117,4 @@ public class PythonLibraryDescriptionTest {",
                "     TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());",
                "-    PythonLibrary library =",
                "-        builder.build(new TestBuildRuleResolver(targetGraph), filesystem, targetGraph);",
                "+    BuildRuleResolver ruleResolver = new TestBuildRuleResolver(targetGraph);",
                "+    PythonLibrary library = builder.build(ruleResolver, filesystem, targetGraph);",
                "     assertThat(",
                "@@ -125,3 +122,3 @@ public class PythonLibraryDescriptionTest {",
                "             .getPythonPackageComponents(",
                "-                PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM)",
                "+                PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM, ruleResolver)",
                "             .getModules()",
                "@@ -149,4 +146,4 @@ public class PythonLibraryDescriptionTest {",
                "     TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());",
                "-    PythonLibrary library =",
                "-        builder.build(new TestBuildRuleResolver(targetGraph), filesystem, targetGraph);",
                "+    BuildRuleResolver ruleResolver = new TestBuildRuleResolver(targetGraph);",
                "+    PythonLibrary library = builder.build(ruleResolver, filesystem, targetGraph);",
                "     assertThat(",
                "@@ -154,3 +151,3 @@ public class PythonLibraryDescriptionTest {",
                "             .getPythonPackageComponents(",
                "-                PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM)",
                "+                PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM, ruleResolver)",
                "             .getResources()",
                "@@ -202,3 +199,3 @@ public class PythonLibraryDescriptionTest {",
                "             .getPythonPackageComponents(",
                "-                PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM)",
                "+                PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM, resolver)",
                "             .getModules()",
                "@@ -250,3 +247,3 @@ public class PythonLibraryDescriptionTest {",
                "             .getPythonPackageComponents(",
                "-                PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM)",
                "+                PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM, resolver)",
                "             .getResources()",
                "@@ -273,3 +270,3 @@ public class PythonLibraryDescriptionTest {",
                "         library.getPythonPackageComponents(",
                "-            PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM);",
                "+            PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM, resolver);",
                "     assertThat(",
                "@@ -306,3 +303,3 @@ public class PythonLibraryDescriptionTest {",
                "                 rule.getPythonPackageDeps(",
                "-                    PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM))",
                "+                    PythonTestUtils.PYTHON_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORM, resolver))",
                "             .map(BuildRule::getBuildTarget)"
            ],
            "changed_files": [
                "src/com/facebook/buck/lua/LuaBinaryDescription.java",
                "src/com/facebook/buck/python/CxxPythonExtension.java",
                "src/com/facebook/buck/python/CxxPythonExtensionDescription.java",
                "src/com/facebook/buck/python/PrebuiltPythonLibrary.java",
                "src/com/facebook/buck/python/PythonLibrary.java",
                "src/com/facebook/buck/python/PythonLibraryDescription.java",
                "src/com/facebook/buck/python/PythonPackagable.java",
                "src/com/facebook/buck/python/PythonTestDescription.java",
                "src/com/facebook/buck/python/PythonUtil.java",
                "test/com/facebook/buck/python/CxxPythonExtensionDescriptionTest.java",
                "test/com/facebook/buck/python/PythonLibraryDescriptionTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "593070d26eeed5d923c0081c076034d6b20313fc",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522795949,
            "hunks": 5,
            "message": "Add integration test for default_plaform with compilation database in cxx_library Summary: Test to make sure a compilation database can be built using the default platform. Reviewed By: bobyangyf fbshipit-source-id: 9daa539",
            "diff": [
                "diff --git a/test/com/facebook/buck/cxx/CxxCompilationDatabaseIntegrationTest.java b/test/com/facebook/buck/cxx/CxxCompilationDatabaseIntegrationTest.java",
                "index 47ea651094..578e587a56 100644",
                "--- a/test/com/facebook/buck/cxx/CxxCompilationDatabaseIntegrationTest.java",
                "+++ b/test/com/facebook/buck/cxx/CxxCompilationDatabaseIntegrationTest.java",
                "@@ -36,2 +36,3 @@ import com.facebook.buck.model.InternalFlavor;",
                " import com.facebook.buck.testutil.FakeProjectFilesystem;",
                "+import com.facebook.buck.testutil.ProcessResult;",
                " import com.facebook.buck.testutil.TemporaryPaths;",
                "@@ -535,2 +536,15 @@ public class CxxCompilationDatabaseIntegrationTest {",
                "+  @Test",
                "+  public void testPlatformDepsAddedToCompilationDatabase() throws IOException {",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"cxx_library_platform_deps\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    ProcessResult result =",
                "+        workspace.runBuckCommand(",
                "+            \"build\", \"--config\", \"cxx.default_platform=platform\", \"//:echo#compilation-database\");",
                "+",
                "+    result.assertSuccess();",
                "+  }",
                "+",
                "   private void addLibraryHeaderFiles(ProjectWorkspace workspace) throws IOException {",
                "diff --git a/test/com/facebook/buck/cxx/testdata/cxx_library_platform_deps/.buckconfig b/test/com/facebook/buck/cxx/testdata/cxx_library_platform_deps/.buckconfig",
                "new file mode 100644",
                "index 0000000000..6a225d1af0",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cxx/testdata/cxx_library_platform_deps/.buckconfig",
                "@@ -0,0 +1,3 @@",
                "+[cxx#platform]",
                "+  cpp=//:cxx",
                "+  cpp_type=gcc",
                "diff --git a/test/com/facebook/buck/cxx/testdata/cxx_library_platform_deps/BUCK.fixture b/test/com/facebook/buck/cxx/testdata/cxx_library_platform_deps/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..6bf46c15c0",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cxx/testdata/cxx_library_platform_deps/BUCK.fixture",
                "@@ -0,0 +1,15 @@",
                "+cxx_library(",
                "+    name = \"echo\",",
                "+    srcs = [\"echo.cpp\"],",
                "+)",
                "+",
                "+sh_binary(",
                "+    name = \"cxx\",",
                "+    main = \":cxx-genrule\",",
                "+)",
                "+",
                "+genrule(",
                "+    name = \"cxx-genrule\",",
                "+    out = \"out\",",
                "+    cmd = \"echo echo test > $OUT && chmod +x $OUT\",",
                "+)",
                "diff --git a/test/com/facebook/buck/cxx/testdata/cxx_library_platform_deps/echo.cpp b/test/com/facebook/buck/cxx/testdata/cxx_library_platform_deps/echo.cpp",
                "new file mode 100644",
                "index 0000000000..d123e0977a",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cxx/testdata/cxx_library_platform_deps/echo.cpp",
                "@@ -0,0 +1,4 @@",
                "+int main(int argc, char** argv)",
                "+{",
                "+  return 0;",
                "+}"
            ],
            "changed_files": [
                "test/com/facebook/buck/cxx/CxxCompilationDatabaseIntegrationTest.java",
                "test/com/facebook/buck/cxx/testdata/cxx_library_platform_deps/.buckconfig",
                "test/com/facebook/buck/cxx/testdata/cxx_library_platform_deps/BUCK.fixture",
                "test/com/facebook/buck/cxx/testdata/cxx_library_platform_deps/echo.cpp"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8bff4e5fee86f62455105b57b00420738a07a888",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522288062,
            "hunks": 1,
            "message": "Use private field modifier for internal field. Reviewed By: styurin fbshipit-source-id: e3ef525",
            "diff": [
                "diff --git a/src/com/facebook/buck/io/WatchmanTransportClient.java b/src/com/facebook/buck/io/WatchmanTransportClient.java",
                "index edfd367505..0c093d5a1a 100644",
                "--- a/src/com/facebook/buck/io/WatchmanTransportClient.java",
                "+++ b/src/com/facebook/buck/io/WatchmanTransportClient.java",
                "@@ -49,3 +49,3 @@ class WatchmanTransportClient implements WatchmanClient, AutoCloseable {",
                "-  boolean disabledWarningShown = false;",
                "+  private boolean disabledWarningShown = false;"
            ],
            "changed_files": [
                "src/com/facebook/buck/io/WatchmanTransportClient.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fca5b2a12f5338e9aee0e9495892e593f5791837",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522891024,
            "hunks": 3,
            "message": "Add localConfigSet to E2E test for calculate_source_abi internal build rule Summary: essentially adding those map values as if they were in .buckconfig Reviewed By: sbalabanov fbshipit-source-id: 37e43a5",
            "diff": [
                "diff --git a/test/com/facebook/buck/android/endtoend/AndroidEndToEndTest.java b/test/com/facebook/buck/android/endtoend/AndroidEndToEndTest.java",
                "index ce5c75c522..357747eea0 100644",
                "--- a/test/com/facebook/buck/android/endtoend/AndroidEndToEndTest.java",
                "+++ b/test/com/facebook/buck/android/endtoend/AndroidEndToEndTest.java",
                "@@ -25,2 +25,4 @@ import com.facebook.buck.testutil.endtoend.EndToEndWorkspace;",
                " import com.facebook.buck.testutil.endtoend.Environment;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                " import org.junit.Before;",
                "@@ -62,2 +64,13 @@ public class AndroidEndToEndTest {",
                "+  private static Map<String, Map<String, String>> getSourceABIConfigSet() {",
                "+    Map<String, Map<String, String>> configSet = new HashMap<>();",
                "+    configSet.put(\"java\", new HashMap<>());",
                "+    configSet.get(\"java\").put(\"source_level\", \"7\");",
                "+    configSet.get(\"java\").put(\"target_level\", \"7\");",
                "+    configSet.get(\"java\").put(\"track_class_usage\", \"true\");",
                "+    configSet.get(\"java\").put(\"compile_against_abis\", \"true\");",
                "+    configSet.get(\"java\").put(\"abi_generation_mode\", \"source_only\");",
                "+    return configSet;",
                "+  }",
                "+",
                "   @Environment",
                "@@ -67,3 +80,5 @@ public class AndroidEndToEndTest {",
                "         .withCommand(\"build\")",
                "-        .withTargets(mainTarget);",
                "+        .withTargets(mainTarget)",
                "+        .addLocalConfigSet(new HashMap<>())",
                "+        .addLocalConfigSet(getSourceABIConfigSet());",
                "   }"
            ],
            "changed_files": [
                "test/com/facebook/buck/android/endtoend/AndroidEndToEndTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "88331c933a0753a214336d36e181a17eb2b0ba8d",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521698110,
            "hunks": 2,
            "message": "iOS E2E build test Summary: Test that verifies iOS build with given project structure Test Plan: Ran locally Reviewed By: bobyangyf fbshipit-source-id: 70d5215",
            "diff": [
                "diff --git a/test/com/facebook/buck/apple/endtoend/AppleEndToEndTest.java b/test/com/facebook/buck/apple/endtoend/AppleEndToEndTest.java",
                "new file mode 100644",
                "index 0000000000..ab70b5e728",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/apple/endtoend/AppleEndToEndTest.java",
                "@@ -0,0 +1,77 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.apple.endtoend;",
                "+",
                "+import static org.junit.Assume.assumeTrue;",
                "+",
                "+import com.facebook.buck.apple.AppleNativeIntegrationTestUtils;",
                "+import com.facebook.buck.apple.toolchain.ApplePlatform;",
                "+import com.facebook.buck.testutil.ProcessResult;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndEnvironment;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndRunner;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndTestDescriptor;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndWorkspace;",
                "+import com.facebook.buck.testutil.endtoend.Environment;",
                "+import com.facebook.buck.util.environment.Platform;",
                "+import org.junit.Before;",
                "+import org.junit.Test;",
                "+import org.junit.runner.RunWith;",
                "+",
                "+/**",
                "+ * E2E tests for buck's building process on an environment constructed like:",
                "+ *",
                "+ * <pre>",
                "+ *                                            apple_package",
                "+ *                                                 +",
                "+ *                                                 |",
                "+ *                                                 v",
                "+ *                                            apple_bundle",
                "+ *                                                 +",
                "+ *                     +---------------------------+----------------------------+",
                "+ *                     v                                                        v",
                "+ *                apple_binary                                           genrule (plist)",
                "+ *                     +                                                        +",
                "+ *      +------------------------------------+-----------------+                |",
                "+ *      v              v                     v                 v                v",
                "+ * cxx_library    apple_resource   apple_asset_library   apple_library    python_binary",
                "+ * </pre>",
                "+ */",
                "+@RunWith(EndToEndRunner.class)",
                "+public class AppleEndToEndTest {",
                "+  private static final String mainTarget = \"//ios:BuckDemoApp\";",
                "+",
                "+  @Before",
                "+  public void assumeEnvironment() {",
                "+    assumeTrue(Platform.detect() == Platform.MACOS);",
                "+    assumeTrue(AppleNativeIntegrationTestUtils.isApplePlatformAvailable(ApplePlatform.IPHONEOS));",
                "+  }",
                "+",
                "+  @Environment",
                "+  public static EndToEndEnvironment baseEnvironment() {",
                "+    return new EndToEndEnvironment()",
                "+        .addTemplates(\"mobile\")",
                "+        .withCommand(\"build\")",
                "+        .withTargets(mainTarget);",
                "+  }",
                "+",
                "+  /** Determines that buck successfully outputs proper programs */",
                "+  @Test",
                "+  public void shouldBuild(",
                "+      EndToEndTestDescriptor test, EndToEndWorkspace workspace, ProcessResult result) {",
                "+    result.assertSuccess(\"Did not successfully build\");",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/apple/endtoend/BUCK b/test/com/facebook/buck/apple/endtoend/BUCK",
                "new file mode 100644",
                "index 0000000000..a2d72fbb4f",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/apple/endtoend/BUCK",
                "@@ -0,0 +1,20 @@",
                "+load(\"//tools/build_rules:java_rules.bzl\", \"java_immutables_library\", \"java_test\")",
                "+",
                "+TEST_SRCS = [",
                "+    \"*Test.java\",",
                "+]",
                "+",
                "+java_test(",
                "+    name = \"endtoend\",",
                "+    srcs = glob(",
                "+        TEST_SRCS,",
                "+    ),",
                "+    deps = [",
                "+        \"//src/com/facebook/buck/apple/toolchain:toolchain\",",
                "+        \"//src/com/facebook/buck/util/environment:platform\",",
                "+        \"//test/com/facebook/buck/apple:testutil\",",
                "+        \"//test/com/facebook/buck/testutil:testutil\",",
                "+        \"//test/com/facebook/buck/testutil/endtoend:testutil\",",
                "+        \"//third-party/java/junit:junit\",",
                "+    ],",
                "+)"
            ],
            "changed_files": [
                "test/com/facebook/buck/apple/endtoend/AppleEndToEndTest.java",
                "test/com/facebook/buck/apple/endtoend/BUCK"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2c28b021579a5cbf6cd2f92d0353c41e61a715b8",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521839754,
            "hunks": 8,
            "message": "Remove InitializableFromDisk and HasRuntimeDeps from MBR Summary: The idea with these is that we could derive runtime deps the same as inputs/outputs/deps and could implement InitializableFromDisk in some way too. However, this isn't really implemented yet and for easier adoption we can allow subclasses to implement those themselves and maybe migrate to a better system at some future time. Reviewed By: ttsugriy fbshipit-source-id: 7630c90",
            "diff": [
                "diff --git a/src/com/facebook/buck/rules/modern/ModernBuildRule.java b/src/com/facebook/buck/rules/modern/ModernBuildRule.java",
                "index 72e1decca4..3395a19c10 100644",
                "--- a/src/com/facebook/buck/rules/modern/ModernBuildRule.java",
                "+++ b/src/com/facebook/buck/rules/modern/ModernBuildRule.java",
                "@@ -23,3 +23,2 @@ import com.facebook.buck.rules.AbstractBuildRule;",
                " import com.facebook.buck.rules.BuildContext;",
                "-import com.facebook.buck.rules.BuildOutputInitializer;",
                " import com.facebook.buck.rules.BuildRule;",
                "@@ -29,4 +28,2 @@ import com.facebook.buck.rules.CacheableBuildRule;",
                " import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                "-import com.facebook.buck.rules.HasRuntimeDeps;",
                "-import com.facebook.buck.rules.InitializableFromDisk;",
                " import com.facebook.buck.rules.RuleKeyObjectSink;",
                "@@ -108,8 +105,4 @@ import javax.annotation.Nullable;",
                "  */",
                "-public abstract class ModernBuildRule<T extends Buildable> extends AbstractBuildRule",
                "-    implements HasRuntimeDeps,",
                "-        SupportsInputBasedRuleKey,",
                "-        CacheableBuildRule,",
                "-        InitializableFromDisk<ModernBuildRule.DataHolder> {",
                "-  private final BuildOutputInitializer<DataHolder> buildOutputInitializer;",
                "+public class ModernBuildRule<T extends Buildable> extends AbstractBuildRule",
                "+    implements CacheableBuildRule, SupportsInputBasedRuleKey {",
                "   private final OutputPathResolver outputPathResolver;",
                "@@ -146,3 +139,2 @@ public abstract class ModernBuildRule<T extends Buildable> extends AbstractBuild",
                "     this.inputRuleResolver = new DefaultInputRuleResolver(ruleFinder);",
                "-    this.buildOutputInitializer = new BuildOutputInitializer<>(buildTarget, this);",
                "     this.outputPathResolver =",
                "@@ -210,6 +202,2 @@ public abstract class ModernBuildRule<T extends Buildable> extends AbstractBuild",
                "-  public static final class DataHolder {",
                "-    // TODO(cjhopman): implement initialize from disk stuff",
                "-  }",
                "-",
                "   /**",
                "@@ -252,3 +240,2 @@ public abstract class ModernBuildRule<T extends Buildable> extends AbstractBuild",
                "                 context.getBuildCellRootPath(), filesystem, outputPathResolver.getRootPath())));",
                "-",
                "     stepBuilder.addAll(",
                "@@ -257,3 +244,2 @@ public abstract class ModernBuildRule<T extends Buildable> extends AbstractBuild",
                "                 context.getBuildCellRootPath(), filesystem, outputPathResolver.getTempPath())));",
                "-",
                "     stepBuilder.addAll(",
                "@@ -315,19 +301,2 @@ public abstract class ModernBuildRule<T extends Buildable> extends AbstractBuild",
                "-  @Override",
                "-  public final DataHolder initializeFromDisk() {",
                "-    // TODO(cjhopman): implement",
                "-    return new DataHolder();",
                "-  }",
                "-",
                "-  @Override",
                "-  public final BuildOutputInitializer<DataHolder> getBuildOutputInitializer() {",
                "-    return buildOutputInitializer;",
                "-  }",
                "-",
                "-  @Override",
                "-  public final Stream<BuildTarget> getRuntimeDeps(SourcePathRuleFinder ruleFinder) {",
                "-    // TODO(cjhopman): implement",
                "-    return Stream.of();",
                "-  }",
                "-",
                "   @Override"
            ],
            "changed_files": [
                "src/com/facebook/buck/rules/modern/ModernBuildRule.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c1ed0de2528c8b5234649df3a68098c1212753c2",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521759407,
            "hunks": 4,
            "message": "Convert Function to method reference Summary: This is better. Test Plan: CI Reviewed By: ttsugriy fbshipit-source-id: 1a70f74",
            "diff": [
                "diff --git a/src/com/facebook/buck/jvm/java/JarBackedJavac.java b/src/com/facebook/buck/jvm/java/JarBackedJavac.java",
                "index 33b1db0158..c1c94191bc 100644",
                "--- a/src/com/facebook/buck/jvm/java/JarBackedJavac.java",
                "+++ b/src/com/facebook/buck/jvm/java/JarBackedJavac.java",
                "@@ -28,3 +28,2 @@ import java.net.URL;",
                " import java.nio.file.Path;",
                "-import java.util.function.Function;",
                " import javax.tools.JavaCompiler;",
                "@@ -32,12 +31,2 @@ import javax.tools.JavaCompiler;",
                " public class JarBackedJavac extends Jsr199Javac {",
                "-",
                "-  private static final Function<Path, URL> PATH_TO_URL =",
                "-      p -> {",
                "-        try {",
                "-          return p.toUri().toURL();",
                "-        } catch (MalformedURLException e) {",
                "-          throw new RuntimeException(e);",
                "-        }",
                "-      };",
                "-",
                "   @AddToRuleKey private final String compilerClassName;",
                "@@ -60,3 +49,3 @@ public class JarBackedJavac extends Jsr199Javac {",
                "                 .stream()",
                "-                .map(PATH_TO_URL)",
                "+                .map(JarBackedJavac::pathToUrl)",
                "                 // Use \"toString\" since URL.equals does DNS lookups.",
                "@@ -80,2 +69,10 @@ public class JarBackedJavac extends Jsr199Javac {",
                "   }",
                "+",
                "+  private static URL pathToUrl(Path p) {",
                "+    try {",
                "+      return p.toUri().toURL();",
                "+    } catch (MalformedURLException e) {",
                "+      throw new RuntimeException(e);",
                "+    }",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/com/facebook/buck/jvm/java/JarBackedJavac.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "842ca4a31e70ce6216a3f38cdc6937dada226a2e",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522693338,
            "hunks": 1,
            "message": "Add JUnitParams to third-party Summary: This will allow to parametrize individual test methods without using JUnit4  parametrized classes with member variables Reviewed By: styurin fbshipit-source-id: b55c81f",
            "diff": [
                "diff --git a/third-party/java/junitparams/BUCK b/third-party/java/junitparams/BUCK",
                "new file mode 100644",
                "index 0000000000..48eec92979",
                "--- /dev/null",
                "+++ b/third-party/java/junitparams/BUCK",
                "@@ -0,0 +1,9 @@",
                "+prebuilt_jar(",
                "+    name = \"junitparams\",",
                "+    binary_jar = \"JUnitParams-1.1.1.jar\",",
                "+    licenses = [",
                "+        \"LICENSE\",",
                "+    ],",
                "+    source_jar = \"JUnitParams-1.1.1-sources.jar\",",
                "+    visibility = [\"//test/...\"],",
                "+)",
                "diff --git a/third-party/java/junitparams/JUnitParams-1.1.1-sources.jar b/third-party/java/junitparams/JUnitParams-1.1.1-sources.jar",
                "new file mode 100644",
                "index 0000000000..10f8009518",
                "Binary files /dev/null and b/third-party/java/junitparams/JUnitParams-1.1.1-sources.jar differ",
                "diff --git a/third-party/java/junitparams/JUnitParams-1.1.1.jar b/third-party/java/junitparams/JUnitParams-1.1.1.jar",
                "new file mode 100644",
                "index 0000000000..ebafcb4e70",
                "Binary files /dev/null and b/third-party/java/junitparams/JUnitParams-1.1.1.jar differ"
            ],
            "changed_files": [
                "third-party/java/junitparams/BUCK",
                "third-party/java/junitparams/JUnitParams-1.1.1-sources.jar",
                "third-party/java/junitparams/JUnitParams-1.1.1.jar"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "df4576236a0afcb5dda8d8363c93ae06c62c57d0",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521844509,
            "hunks": 23,
            "message": "ocaml: thread in deps from constructor arg Summary: This passes in the deps for a rule from it's constructor arg setting rather than using the deprecated `BuildRuleParams.getBuildDeps()`. Reviewed By: ttsugriy fbshipit-source-id: 278b10e",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "index a4e7125ee2..7f8042321e 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "@@ -90,2 +90,6 @@ public class OcamlBinaryDescription",
                "               context.getBuildRuleResolver(),",
                "+              args.getDeps()",
                "+                  .stream()",
                "+                  .map(context.getBuildRuleResolver()::getRule)",
                "+                  .collect(ImmutableList.toImmutableList()),",
                "               srcs,",
                "@@ -107,2 +111,6 @@ public class OcamlBinaryDescription",
                "               context.getBuildRuleResolver(),",
                "+              args.getDeps()",
                "+                  .stream()",
                "+                  .map(context.getBuildRuleResolver()::getRule)",
                "+                  .collect(ImmutableList.toImmutableList()),",
                "               srcs,",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "index f604805f45..5849c098d0 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "@@ -103,2 +103,6 @@ public class OcamlLibraryDescription",
                "                 context.getBuildRuleResolver(),",
                "+                args.getDeps()",
                "+                    .stream()",
                "+                    .map(context.getBuildRuleResolver()::getRule)",
                "+                    .collect(ImmutableList.toImmutableList()),",
                "                 srcs,",
                "@@ -138,2 +142,6 @@ public class OcamlLibraryDescription",
                "                 context.getBuildRuleResolver(),",
                "+                args.getDeps()",
                "+                    .stream()",
                "+                    .map(context.getBuildRuleResolver()::getRule)",
                "+                    .collect(ImmutableList.toImmutableList()),",
                "                 srcs,",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "index fe0de185ce..49710205c1 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "@@ -50,2 +50,3 @@ import com.facebook.buck.util.ProcessExecutor;",
                " import com.facebook.buck.util.ProcessExecutorParams;",
                "+import com.facebook.buck.util.RichStream;",
                " import com.google.common.annotations.VisibleForTesting;",
                "@@ -122,3 +123,4 @@ public class OcamlRuleBuilder {",
                "-  private static ImmutableList<BuildRule> getTransitiveOcamlLibraryDeps(Iterable<BuildRule> deps) {",
                "+  private static ImmutableList<BuildRule> getTransitiveOcamlLibraryDeps(",
                "+      Iterable<? extends BuildRule> deps) {",
                "     return TopologicalSort.sort(",
                "@@ -128,2 +130,9 @@ public class OcamlRuleBuilder {",
                "+  private static ImmutableList<OcamlLibrary> getTransitiveOcamlInput(",
                "+      Iterable<? extends BuildRule> deps) {",
                "+    return RichStream.from(getTransitiveOcamlLibraryDeps(deps))",
                "+        .filter(OcamlLibrary.class)",
                "+        .toImmutableList();",
                "+  }",
                "+",
                "   private static NativeLinkableInput getNativeLinkableInput(",
                "@@ -171,2 +180,3 @@ public class OcamlRuleBuilder {",
                "       BuildRuleResolver resolver,",
                "+      Iterable<BuildRule> deps,",
                "       ImmutableList<OcamlSource> srcs,",
                "@@ -181,4 +191,3 @@ public class OcamlRuleBuilder {",
                "                 resolver,",
                "-                FluentIterable.from(params.getBuildDeps())",
                "-                    .filter(CxxPreprocessorDep.class::isInstance)));",
                "+                FluentIterable.from(deps).filter(CxxPreprocessorDep.class::isInstance)));",
                "@@ -188,3 +197,3 @@ public class OcamlRuleBuilder {",
                "     ImmutableList<String> nativeIncludes =",
                "-        FluentIterable.from(params.getBuildDeps())",
                "+        FluentIterable.from(deps)",
                "             .transformAndConcat(getLibInclude(ocamlPlatform, false)::apply)",
                "@@ -193,3 +202,3 @@ public class OcamlRuleBuilder {",
                "     ImmutableList<String> bytecodeIncludes =",
                "-        FluentIterable.from(params.getBuildDeps())",
                "+        FluentIterable.from(deps)",
                "             .transformAndConcat(getLibInclude(ocamlPlatform, true)::apply)",
                "@@ -197,11 +206,8 @@ public class OcamlRuleBuilder {",
                "-    NativeLinkableInput nativeLinkableInput =",
                "-        getNativeLinkableInput(ocamlPlatform, params.getBuildDeps());",
                "-    NativeLinkableInput bytecodeLinkableInput =",
                "-        getBytecodeLinkableInput(ocamlPlatform, params.getBuildDeps());",
                "+    NativeLinkableInput nativeLinkableInput = getNativeLinkableInput(ocamlPlatform, deps);",
                "+    NativeLinkableInput bytecodeLinkableInput = getBytecodeLinkableInput(ocamlPlatform, deps);",
                "     NativeLinkableInput cLinkableInput =",
                "-        getCLinkableInput(ocamlPlatform.getCxxPlatform(), resolver, params.getBuildDeps());",
                "+        getCLinkableInput(ocamlPlatform.getCxxPlatform(), resolver, deps);",
                "-    ImmutableList<OcamlLibrary> ocamlInput =",
                "-        OcamlUtil.getTransitiveOcamlInput(params.getBuildDeps());",
                "+    ImmutableList<OcamlLibrary> ocamlInput = getTransitiveOcamlInput(deps);",
                "@@ -293,2 +299,3 @@ public class OcamlRuleBuilder {",
                "       BuildRuleResolver resolver,",
                "+      Iterable<BuildRule> deps,",
                "       ImmutableList<OcamlSource> srcs,",
                "@@ -305,4 +312,3 @@ public class OcamlRuleBuilder {",
                "                 resolver,",
                "-                FluentIterable.from(params.getBuildDeps())",
                "-                    .filter(CxxPreprocessorDep.class::isInstance)));",
                "+                FluentIterable.from(deps).filter(CxxPreprocessorDep.class::isInstance)));",
                "@@ -312,3 +318,3 @@ public class OcamlRuleBuilder {",
                "     ImmutableList<String> nativeIncludes =",
                "-        FluentIterable.from(params.getBuildDeps())",
                "+        FluentIterable.from(deps)",
                "             .transformAndConcat(getLibInclude(ocamlPlatform, false)::apply)",
                "@@ -317,3 +323,3 @@ public class OcamlRuleBuilder {",
                "     ImmutableList<String> bytecodeIncludes =",
                "-        FluentIterable.from(params.getBuildDeps())",
                "+        FluentIterable.from(deps)",
                "             .transformAndConcat(getLibInclude(ocamlPlatform, true)::apply)",
                "@@ -321,11 +327,8 @@ public class OcamlRuleBuilder {",
                "-    NativeLinkableInput nativeLinkableInput =",
                "-        getNativeLinkableInput(ocamlPlatform, params.getBuildDeps());",
                "-    NativeLinkableInput bytecodeLinkableInput =",
                "-        getBytecodeLinkableInput(ocamlPlatform, params.getBuildDeps());",
                "+    NativeLinkableInput nativeLinkableInput = getNativeLinkableInput(ocamlPlatform, deps);",
                "+    NativeLinkableInput bytecodeLinkableInput = getBytecodeLinkableInput(ocamlPlatform, deps);",
                "     NativeLinkableInput cLinkableInput =",
                "-        getCLinkableInput(ocamlPlatform.getCxxPlatform(), resolver, params.getBuildDeps());",
                "+        getCLinkableInput(ocamlPlatform.getCxxPlatform(), resolver, deps);",
                "-    ImmutableList<OcamlLibrary> ocamlInput =",
                "-        OcamlUtil.getTransitiveOcamlInput(params.getBuildDeps());",
                "+    ImmutableList<OcamlLibrary> ocamlInput = getTransitiveOcamlInput(deps);",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlUtil.java b/src/com/facebook/buck/ocaml/OcamlUtil.java",
                "index 5da9a8859d..bca9506fa6 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlUtil.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlUtil.java",
                "@@ -19,11 +19,5 @@ package com.facebook.buck.ocaml;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                "-import com.facebook.buck.graph.DirectedAcyclicGraph;",
                "-import com.facebook.buck.graph.TopologicalSort;",
                " import com.facebook.buck.model.BuildTarget;",
                "-import com.facebook.buck.rules.BuildRule;",
                "-import com.facebook.buck.rules.BuildRuleDependencyVisitors;",
                " import com.facebook.buck.rules.SourcePath;",
                " import com.facebook.buck.rules.SourcePathResolver;",
                "-import com.google.common.collect.FluentIterable;",
                "-import com.google.common.collect.ImmutableList;",
                " import com.google.common.collect.ImmutableSet;",
                "@@ -71,14 +65,2 @@ public class OcamlUtil {",
                "-  public static ImmutableList<OcamlLibrary> getTransitiveOcamlInput(",
                "-      Iterable<? extends BuildRule> inputs) {",
                "-",
                "-    DirectedAcyclicGraph<BuildRule> graph =",
                "-        BuildRuleDependencyVisitors.getBuildRuleDirectedGraphFilteredBy(",
                "-            inputs, OcamlLibrary.class::isInstance, OcamlLibrary.class::isInstance);",
                "-",
                "-    ImmutableList<BuildRule> sorted = TopologicalSort.sort(graph);",
                "-",
                "-    return FluentIterable.from(sorted).filter(OcamlLibrary.class).toList();",
                "-  }",
                "-",
                "   static ImmutableSet<Path> getExtensionVariants(Path output, String... extensions) {"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "src/com/facebook/buck/ocaml/OcamlUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ddaf6871f9e5cba619db865fedd1287e58aa162f",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521773812,
            "hunks": 4,
            "message": "Document Skylark function extra keyword arguments. Summary: This will document things like `**kwargs`. Test Plan: CI Reviewed By: styurin fbshipit-source-id: 45647b0",
            "diff": [
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java",
                "index 2a107f9e3c..824b29459b 100644",
                "--- a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java",
                "@@ -21,2 +21,3 @@ import com.google.common.cache.CacheLoader;",
                " import com.google.common.cache.LoadingCache;",
                "+import com.google.common.collect.ImmutableList;",
                " import com.google.common.collect.ImmutableMap;",
                "@@ -93,9 +94,19 @@ public class SoyTemplateSkylarkSignatureRenderer {",
                "   private static ImmutableMap<String, Object> toMap(SkylarkSignature skylarkSignature) {",
                "+    ImmutableList.Builder<Param> parameters =",
                "+        ImmutableList.<Param>builder().addAll(Arrays.asList(skylarkSignature.parameters()));",
                "+    if (!skylarkSignature.extraKeywords().name().isEmpty()) {",
                "+      parameters.add(skylarkSignature.extraKeywords());",
                "+    }",
                "+",
                "     return ImmutableMap.of(",
                "-        \"name\", skylarkSignature.name(),",
                "-        \"doc\", skylarkSignature.doc(),",
                "+        \"name\",",
                "+        skylarkSignature.name(),",
                "+        \"doc\",",
                "+        skylarkSignature.doc(),",
                "         \"parameters\",",
                "-            Arrays.stream(skylarkSignature.parameters())",
                "-                .map(SoyTemplateSkylarkSignatureRenderer::toMap)",
                "-                .collect(Collectors.toList()));",
                "+        parameters",
                "+            .build()",
                "+            .stream()",
                "+            .map(SoyTemplateSkylarkSignatureRenderer::toMap)",
                "+            .collect(Collectors.toList()));",
                "   }"
            ],
            "changed_files": [
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/SoyTemplateSkylarkSignatureRenderer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b55bc8b4ba62f4321d2ce286804d1cc97ea2ba4f",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1518508605,
            "hunks": 29,
            "message": "cxx_test: switch to strongly-typed macros Summary: Switch to strongly typed macros to support avoid manual parse-time deps handling and as `MacroArg`/`MacroHandler` are deprecated. Reviewed By: ttsugriy fbshipit-source-id: 5997c1e",
            "diff": [
                "diff --git a/src/com/facebook/buck/cxx/CxxBoostTest.java b/src/com/facebook/buck/cxx/CxxBoostTest.java",
                "index e8068adb3b..c7364e8ae1 100644",
                "--- a/src/com/facebook/buck/cxx/CxxBoostTest.java",
                "+++ b/src/com/facebook/buck/cxx/CxxBoostTest.java",
                "@@ -32,2 +32,3 @@ import com.facebook.buck.rules.SourcePathRuleFinder;",
                " import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.rules.args.Arg;",
                " import com.facebook.buck.step.ExecutionContext;",
                "@@ -82,4 +83,4 @@ class CxxBoostTest extends CxxTest implements HasRuntimeDeps, ExternalTestRunner",
                "       Tool executable,",
                "-      ImmutableMap<String, String> env,",
                "-      Supplier<ImmutableList<String>> args,",
                "+      ImmutableMap<String, Arg> env,",
                "+      Supplier<ImmutableList<Arg>> args,",
                "       ImmutableSortedSet<? extends SourcePath> resources,",
                "@@ -251,3 +252,3 @@ class CxxBoostTest extends CxxTest implements HasRuntimeDeps, ExternalTestRunner",
                "             getExecutableCommand().getCommandPrefix(buildContext.getSourcePathResolver()))",
                "-        .addAllCommand(getArgs().get())",
                "+        .addAllCommand(Arg.stringify(getArgs().get(), buildContext.getSourcePathResolver()))",
                "         .putAllEnv(getEnv(buildContext.getSourcePathResolver()))",
                "diff --git a/src/com/facebook/buck/cxx/CxxDescriptionEnhancer.java b/src/com/facebook/buck/cxx/CxxDescriptionEnhancer.java",
                "index 1da0f73d8e..cb54f09186 100644",
                "--- a/src/com/facebook/buck/cxx/CxxDescriptionEnhancer.java",
                "+++ b/src/com/facebook/buck/cxx/CxxDescriptionEnhancer.java",
                "@@ -66,5 +66,3 @@ import com.facebook.buck.rules.coercer.SourceList;",
                " import com.facebook.buck.rules.macros.AbstractMacroExpanderWithoutPrecomputedWork;",
                "-import com.facebook.buck.rules.macros.LocationMacroExpander;",
                " import com.facebook.buck.rules.macros.Macro;",
                "-import com.facebook.buck.rules.macros.MacroHandler;",
                " import com.facebook.buck.rules.macros.OutputMacroExpander;",
                "@@ -120,5 +118,2 @@ public class CxxDescriptionEnhancer {",
                "-  protected static final MacroHandler MACRO_HANDLER =",
                "-      new MacroHandler(ImmutableMap.of(\"location\", new LocationMacroExpander()));",
                "-",
                "   private static final Pattern SONAME_EXT_MACRO_PATTERN =",
                "diff --git a/src/com/facebook/buck/cxx/CxxGtestTest.java b/src/com/facebook/buck/cxx/CxxGtestTest.java",
                "index 9f959094dc..76cf290f33 100644",
                "--- a/src/com/facebook/buck/cxx/CxxGtestTest.java",
                "+++ b/src/com/facebook/buck/cxx/CxxGtestTest.java",
                "@@ -32,2 +32,3 @@ import com.facebook.buck.rules.SourcePathRuleFinder;",
                " import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.rules.args.Arg;",
                " import com.facebook.buck.step.ExecutionContext;",
                "@@ -81,4 +82,4 @@ class CxxGtestTest extends CxxTest implements HasRuntimeDeps, ExternalTestRunner",
                "       Tool executable,",
                "-      ImmutableMap<String, String> env,",
                "-      Supplier<ImmutableList<String>> args,",
                "+      ImmutableMap<String, Arg> env,",
                "+      Supplier<ImmutableList<Arg>> args,",
                "       ImmutableSortedSet<? extends SourcePath> resources,",
                "@@ -236,3 +237,3 @@ class CxxGtestTest extends CxxTest implements HasRuntimeDeps, ExternalTestRunner",
                "             getExecutableCommand().getCommandPrefix(buildContext.getSourcePathResolver()))",
                "-        .addAllCommand(getArgs().get())",
                "+        .addAllCommand(Arg.stringify(getArgs().get(), buildContext.getSourcePathResolver()))",
                "         .putAllEnv(getEnv(buildContext.getSourcePathResolver()))",
                "diff --git a/src/com/facebook/buck/cxx/CxxTest.java b/src/com/facebook/buck/cxx/CxxTest.java",
                "index f5f5b4c83a..3ea322d067 100644",
                "--- a/src/com/facebook/buck/cxx/CxxTest.java",
                "+++ b/src/com/facebook/buck/cxx/CxxTest.java",
                "@@ -36,2 +36,3 @@ import com.facebook.buck.rules.TestRule;",
                " import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.rules.args.Arg;",
                " import com.facebook.buck.step.ExecutionContext;",
                "@@ -64,4 +65,4 @@ abstract class CxxTest extends AbstractBuildRuleWithDeclaredAndExtraDeps",
                "-  @AddToRuleKey private final ImmutableMap<String, String> env;",
                "-  @AddToRuleKey private final Supplier<ImmutableList<String>> args;",
                "+  @AddToRuleKey private final ImmutableMap<String, Arg> env;",
                "+  @AddToRuleKey private final Supplier<ImmutableList<Arg>> args;",
                "   @AddToRuleKey private final Tool executable;",
                "@@ -84,4 +85,4 @@ abstract class CxxTest extends AbstractBuildRuleWithDeclaredAndExtraDeps",
                "       Tool executable,",
                "-      ImmutableMap<String, String> env,",
                "-      Supplier<ImmutableList<String>> args,",
                "+      ImmutableMap<String, Arg> env,",
                "+      Supplier<ImmutableList<Arg>> args,",
                "       ImmutableSortedSet<? extends SourcePath> resources,",
                "@@ -160,3 +161,3 @@ abstract class CxxTest extends AbstractBuildRuleWithDeclaredAndExtraDeps",
                "                             buildContext.getSourcePathResolver(), getPathToTestResults()))",
                "-                    .addAll(args.get())",
                "+                    .addAll(Arg.stringify(args.get(), buildContext.getSourcePathResolver()))",
                "                     .build(),",
                "@@ -267,3 +268,3 @@ abstract class CxxTest extends AbstractBuildRuleWithDeclaredAndExtraDeps",
                "         .putAll(executable.getEnvironment(pathResolver))",
                "-        .putAll(env)",
                "+        .putAll(Arg.stringify(env, pathResolver))",
                "         .build();",
                "@@ -271,3 +272,3 @@ abstract class CxxTest extends AbstractBuildRuleWithDeclaredAndExtraDeps",
                "-  protected Supplier<ImmutableList<String>> getArgs() {",
                "+  protected Supplier<ImmutableList<Arg>> getArgs() {",
                "     return args;",
                "diff --git a/src/com/facebook/buck/cxx/CxxTestDescription.java b/src/com/facebook/buck/cxx/CxxTestDescription.java",
                "index 9311e7db1b..5a010a35dc 100644",
                "--- a/src/com/facebook/buck/cxx/CxxTestDescription.java",
                "+++ b/src/com/facebook/buck/cxx/CxxTestDescription.java",
                "@@ -29,3 +29,2 @@ import com.facebook.buck.model.FlavorDomain;",
                " import com.facebook.buck.model.Flavored;",
                "-import com.facebook.buck.model.macros.MacroException;",
                " import com.facebook.buck.rules.BuildRule;",
                "@@ -44,5 +43,8 @@ import com.facebook.buck.rules.SourcePath;",
                " import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.args.Arg;",
                "+import com.facebook.buck.rules.macros.LocationMacroExpander;",
                "+import com.facebook.buck.rules.macros.StringWithMacros;",
                "+import com.facebook.buck.rules.macros.StringWithMacrosConverter;",
                " import com.facebook.buck.rules.query.QueryUtils;",
                " import com.facebook.buck.toolchain.ToolchainProvider;",
                "-import com.facebook.buck.util.HumanReadableException;",
                " import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "@@ -222,12 +224,16 @@ public class CxxTestDescription",
                "+    StringWithMacrosConverter macrosConverter =",
                "+        StringWithMacrosConverter.builder()",
                "+            .setBuildTarget(buildTarget)",
                "+            .setCellPathResolver(cellRoots)",
                "+            .setResolver(resolver)",
                "+            .addExpanders(new LocationMacroExpander())",
                "+            .build();",
                "+",
                "     // Supplier which expands macros in the passed in test environment.",
                "-    ImmutableMap<String, String> testEnv =",
                "-        ImmutableMap.copyOf(",
                "-            Maps.transformValues(",
                "-                args.getEnv(),",
                "-                CxxDescriptionEnhancer.MACRO_HANDLER.getExpander(buildTarget, cellRoots, resolver)",
                "-                    ::apply));",
                "+    ImmutableMap<String, Arg> testEnv =",
                "+        ImmutableMap.copyOf(Maps.transformValues(args.getEnv(), macrosConverter::convert));",
                "     // Supplier which expands macros in the passed in test arguments.",
                "-    Supplier<ImmutableList<String>> testArgs =",
                "+    Supplier<ImmutableList<Arg>> testArgs =",
                "         () ->",
                "@@ -235,5 +241,3 @@ public class CxxTestDescription",
                "                 .stream()",
                "-                .map(",
                "-                    CxxDescriptionEnhancer.MACRO_HANDLER.getExpander(",
                "-                        buildTarget, cellRoots, resolver))",
                "+                .map(macrosConverter::convert)",
                "                 .collect(ImmutableList.toImmutableList());",
                "@@ -251,10 +255,5 @@ public class CxxTestDescription",
                "           // Add any build-time from any macros embedded in the `env` or `args` parameter.",
                "-          for (String part : Iterables.concat(args.getArgs(), args.getEnv().values())) {",
                "-            try {",
                "-              deps.addAll(",
                "-                  CxxDescriptionEnhancer.MACRO_HANDLER.extractBuildTimeDeps(",
                "-                      buildTarget, cellRoots, resolver, part));",
                "-            } catch (MacroException e) {",
                "-              throw new HumanReadableException(e, \"%s: %s\", buildTarget, e.getMessage());",
                "-            }",
                "+          for (StringWithMacros part : Iterables.concat(args.getArgs(), args.getEnv().values())) {",
                "+            deps.addAll(",
                "+                BuildableSupport.getDepsCollection(macrosConverter.convert(part), ruleFinder));",
                "           }",
                "@@ -339,17 +338,2 @@ public class CxxTestDescription",
                "-    // Extract parse time deps from flags, args, and environment parameters.",
                "-    Iterable<Iterable<String>> macroStrings =",
                "-        ImmutableList.<Iterable<String>>builder()",
                "-            .add(constructorArg.getArgs())",
                "-            .add(constructorArg.getEnv().values())",
                "-            .build();",
                "-    for (String macroString : Iterables.concat(macroStrings)) {",
                "-      try {",
                "-        CxxDescriptionEnhancer.MACRO_HANDLER.extractParseTimeDeps(",
                "-            buildTarget, cellRoots, macroString, extraDepsBuilder, targetGraphOnlyDepsBuilder);",
                "-      } catch (MacroException e) {",
                "-        throw new HumanReadableException(e, \"%s: %s\", buildTarget, e.getMessage());",
                "-      }",
                "-    }",
                "-",
                "     // Add in any implicit framework deps.",
                "@@ -419,5 +403,5 @@ public class CxxTestDescription",
                "-    ImmutableMap<String, String> getEnv();",
                "+    ImmutableMap<String, StringWithMacros> getEnv();",
                "-    ImmutableList<String> getArgs();",
                "+    ImmutableList<StringWithMacros> getArgs();",
                "diff --git a/test/com/facebook/buck/cxx/CxxTestBuilder.java b/test/com/facebook/buck/cxx/CxxTestBuilder.java",
                "index 1b8898c39f..f2bab1771c 100644",
                "--- a/test/com/facebook/buck/cxx/CxxTestBuilder.java",
                "+++ b/test/com/facebook/buck/cxx/CxxTestBuilder.java",
                "@@ -71,3 +71,3 @@ public class CxxTestBuilder",
                "-  public CxxTestBuilder setEnv(ImmutableMap<String, String> env) {",
                "+  public CxxTestBuilder setEnv(ImmutableMap<String, StringWithMacros> env) {",
                "     getArgForPopulating().setEnv(env);",
                "@@ -76,3 +76,3 @@ public class CxxTestBuilder",
                "-  public CxxTestBuilder setArgs(ImmutableList<String> args) {",
                "+  public CxxTestBuilder setArgs(ImmutableList<StringWithMacros> args) {",
                "     getArgForPopulating().setArgs(args);",
                "diff --git a/test/com/facebook/buck/cxx/CxxTestDescriptionTest.java b/test/com/facebook/buck/cxx/CxxTestDescriptionTest.java",
                "index a26ad952f3..cb5df3e80e 100644",
                "--- a/test/com/facebook/buck/cxx/CxxTestDescriptionTest.java",
                "+++ b/test/com/facebook/buck/cxx/CxxTestDescriptionTest.java",
                "@@ -158,3 +158,8 @@ public class CxxTestDescriptionTest {",
                "     CxxTestBuilder builder =",
                "-        createTestBuilder().setEnv(ImmutableMap.of(\"TEST\", \"value $(location //:some_rule)\"));",
                "+        createTestBuilder()",
                "+            .setEnv(",
                "+                ImmutableMap.of(",
                "+                    \"TEST\",",
                "+                    StringWithMacrosUtils.format(",
                "+                        \"value %s\", LocationMacro.of(someRule.getBuildTarget()))));",
                "     addSandbox(resolver, filesystem, builder.getTarget());",
                "@@ -193,3 +198,7 @@ public class CxxTestDescriptionTest {",
                "     CxxTestBuilder builder =",
                "-        createTestBuilder().setArgs(ImmutableList.of(\"value $(location //:some_rule)\"));",
                "+        createTestBuilder()",
                "+            .setArgs(",
                "+                ImmutableList.of(",
                "+                    StringWithMacrosUtils.format(",
                "+                        \"value %s\", LocationMacro.of(someRule.getBuildTarget()))));",
                "     addSandbox(resolver, filesystem, builder.getTarget());"
            ],
            "changed_files": [
                "src/com/facebook/buck/cxx/CxxBoostTest.java",
                "src/com/facebook/buck/cxx/CxxDescriptionEnhancer.java",
                "src/com/facebook/buck/cxx/CxxGtestTest.java",
                "src/com/facebook/buck/cxx/CxxTest.java",
                "src/com/facebook/buck/cxx/CxxTestDescription.java",
                "test/com/facebook/buck/cxx/CxxTestBuilder.java",
                "test/com/facebook/buck/cxx/CxxTestDescriptionTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "288febba4f827957d6f3a22684ac668272d1072e",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522953751,
            "hunks": 6,
            "message": "go: make `cgo_library` inherit platform from top-level binaries Summary: Previuosly, the `cgo_library` would pick a platform indepedently of it's top-level binary rule.  This diff updates it to be modeled after `go_library`, which inherits its platform. Reviewed By: ttsugriy fbshipit-source-id: 5dd3c4b",
            "diff": [
                "diff --git a/src/com/facebook/buck/go/CgoLibraryDescription.java b/src/com/facebook/buck/go/CgoLibraryDescription.java",
                "index f21f7a2e92..c9ea7c6e74 100644",
                "--- a/src/com/facebook/buck/go/CgoLibraryDescription.java",
                "+++ b/src/com/facebook/buck/go/CgoLibraryDescription.java",
                "@@ -21,2 +21,3 @@ import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                " import com.facebook.buck.model.BuildTarget;",
                "@@ -32,2 +33,3 @@ import com.facebook.buck.rules.Description;",
                " import com.facebook.buck.rules.ImplicitDepsInferringDescription;",
                "+import com.facebook.buck.rules.NoopBuildRuleWithDeclaredAndExtraDeps;",
                " import com.facebook.buck.rules.SourcePathResolver;",
                "@@ -83,27 +85,29 @@ public class CgoLibraryDescription",
                "       CgoLibraryDescriptionArg args) {",
                "+",
                "     GoToolchain goToolchain = getGoToolchain();",
                "-    GoPlatform platform =",
                "-        goToolchain",
                "-            .getPlatformFlavorDomain()",
                "-            .getValue(buildTarget)",
                "-            .orElse(goToolchain.getDefaultPlatform());",
                "-",
                "-    BuildRuleResolver resolver = context.getBuildRuleResolver();",
                "-    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(resolver);",
                "-    SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);",
                "-",
                "-    return CGoLibrary.create(",
                "-        buildTarget,",
                "-        context.getProjectFilesystem(),",
                "-        resolver,",
                "-        pathResolver,",
                "-        context.getCellPathResolver(),",
                "-        cxxBuckConfig,",
                "-        platform,",
                "-        args,",
                "-        args.getDeps(),",
                "-        platform.getCGo(),",
                "-        args.getPackageName()",
                "-            .map(Paths::get)",
                "-            .orElse(goBuckConfig.getDefaultPackageName(buildTarget)));",
                "+    Optional<GoPlatform> platform = goToolchain.getPlatformFlavorDomain().getValue(buildTarget);",
                "+    ProjectFilesystem projectFilesystem = context.getProjectFilesystem();",
                "+",
                "+    if (platform.isPresent()) {",
                "+      BuildRuleResolver resolver = context.getBuildRuleResolver();",
                "+      SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(resolver);",
                "+      SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);",
                "+",
                "+      return CGoLibrary.create(",
                "+          buildTarget,",
                "+          projectFilesystem,",
                "+          resolver,",
                "+          pathResolver,",
                "+          context.getCellPathResolver(),",
                "+          cxxBuckConfig,",
                "+          platform.get(),",
                "+          args,",
                "+          args.getDeps(),",
                "+          platform.get().getCGo(),",
                "+          args.getPackageName()",
                "+              .map(Paths::get)",
                "+              .orElse(goBuckConfig.getDefaultPackageName(buildTarget)));",
                "+    }",
                "+",
                "+    return new NoopBuildRuleWithDeclaredAndExtraDeps(buildTarget, projectFilesystem, params);",
                "   }",
                "@@ -119,9 +123,9 @@ public class CgoLibraryDescription",
                "     GoToolchain toolchain = getGoToolchain();",
                "-    targetGraphOnlyDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(",
                "-            toolchain",
                "-                .getPlatformFlavorDomain()",
                "-                .getValue(buildTarget)",
                "-                .orElse(toolchain.getDefaultPlatform())",
                "-                .getCxxPlatform()));",
                "+    toolchain",
                "+        .getPlatformFlavorDomain()",
                "+        .getValue(buildTarget)",
                "+        .ifPresent(",
                "+            platform ->",
                "+                targetGraphOnlyDepsBuilder.addAll(",
                "+                    CxxPlatforms.getParseTimeDeps(platform.getCxxPlatform())));",
                "   }",
                "diff --git a/src/com/facebook/buck/go/GoDescriptors.java b/src/com/facebook/buck/go/GoDescriptors.java",
                "index ba50a5d17d..17a6d43aa4 100644",
                "--- a/src/com/facebook/buck/go/GoDescriptors.java",
                "+++ b/src/com/facebook/buck/go/GoDescriptors.java",
                "@@ -131,3 +131,3 @@ abstract class GoDescriptors {",
                "     for (BuildTarget dep : cgoDeps) {",
                "-      BuildRule rule = resolver.requireRule(dep);",
                "+      BuildRule rule = resolver.requireRule(dep.withAppendedFlavors(platform.getFlavor()));",
                "       if (!(rule instanceof CGoLibrary)) {"
            ],
            "changed_files": [
                "src/com/facebook/buck/go/CgoLibraryDescription.java",
                "src/com/facebook/buck/go/GoDescriptors.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "81bbf9ac2b1e5369de17b10eb4caeb9c2eb2d234",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521766273,
            "hunks": 66,
            "message": "Move creation of BuckModuleManager to Main Summary: Moving creation of `BuckModuleManager` from `ConfigRuleKeyConfigurationFactory` to `Main`. It removes knowledge about particular implementation of `BuckModuleManager` from `ConfigRuleKeyConfigurationFactory`. Test Plan: CI Reviewed By: jtorkkola fbshipit-source-id: 883bf1f",
            "diff": [
                "diff --git a/src/com/facebook/buck/cli/AbstractCommandRunnerParams.java b/src/com/facebook/buck/cli/AbstractCommandRunnerParams.java",
                "index 993fe0237a..9aea016047 100644",
                "--- a/src/com/facebook/buck/cli/AbstractCommandRunnerParams.java",
                "+++ b/src/com/facebook/buck/cli/AbstractCommandRunnerParams.java",
                "@@ -26,2 +26,3 @@ import com.facebook.buck.jvm.core.JavaPackageFinder;",
                " import com.facebook.buck.log.InvocationInfo;",
                "+import com.facebook.buck.module.BuckModuleManager;",
                " import com.facebook.buck.parser.Parser;",
                "@@ -153,2 +154,5 @@ public abstract class AbstractCommandRunnerParams {",
                "+  @Value.Parameter",
                "+  public abstract BuckModuleManager getBuckModuleManager();",
                "+",
                "   /**",
                "diff --git a/src/com/facebook/buck/cli/BUCK b/src/com/facebook/buck/cli/BUCK",
                "index 3b5a3a4da7..de3feefd33 100644",
                "--- a/src/com/facebook/buck/cli/BUCK",
                "+++ b/src/com/facebook/buck/cli/BUCK",
                "@@ -105,2 +105,3 @@ java_immutables_library(",
                "         \"//src/com/facebook/buck/model:model\",",
                "+        \"//src/com/facebook/buck/module/impl:impl\",",
                "         \"//src/com/facebook/buck/parser:config\",",
                "diff --git a/src/com/facebook/buck/cli/DistBuildFactory.java b/src/com/facebook/buck/cli/DistBuildFactory.java",
                "index fc4639ec68..29a2d84200 100644",
                "--- a/src/com/facebook/buck/cli/DistBuildFactory.java",
                "+++ b/src/com/facebook/buck/cli/DistBuildFactory.java",
                "@@ -152,3 +152,3 @@ public abstract class DistBuildFactory {",
                "                     ConfigRuleKeyConfigurationFactory.create(",
                "-                        state.getRemoteRootCellConfig(), params.getPluginManager()))",
                "+                        state.getRemoteRootCellConfig(), params.getBuckModuleManager()))",
                "                 .setConsole(params.getConsole())",
                "diff --git a/src/com/facebook/buck/cli/DistBuildRunCommand.java b/src/com/facebook/buck/cli/DistBuildRunCommand.java",
                "index 6106faa37d..970d9ae13e 100644",
                "--- a/src/com/facebook/buck/cli/DistBuildRunCommand.java",
                "+++ b/src/com/facebook/buck/cli/DistBuildRunCommand.java",
                "@@ -179,2 +179,3 @@ public class DistBuildRunCommand extends AbstractDistBuildCommand {",
                "                 params.getExecutableFinder(),",
                "+                params.getBuckModuleManager(),",
                "                 params.getPluginManager(),",
                "diff --git a/src/com/facebook/buck/cli/Main.java b/src/com/facebook/buck/cli/Main.java",
                "index 6fff064823..3ccf0aab22 100644",
                "--- a/src/com/facebook/buck/cli/Main.java",
                "+++ b/src/com/facebook/buck/cli/Main.java",
                "@@ -80,2 +80,5 @@ import com.facebook.buck.log.Logger;",
                " import com.facebook.buck.model.BuildId;",
                "+import com.facebook.buck.module.BuckModuleManager;",
                "+import com.facebook.buck.module.impl.BuckModuleJarHashProvider;",
                "+import com.facebook.buck.module.impl.DefaultBuckModuleManager;",
                " import com.facebook.buck.parser.Parser;",
                "@@ -319,2 +322,3 @@ public final class Main {",
                "   private static PluginManager pluginManager;",
                "+  private static BuckModuleManager moduleManager;",
                "@@ -583,4 +587,5 @@ public final class Main {",
                "-    if (pluginManager == null) {",
                "+    if (moduleManager == null) {",
                "       pluginManager = BuckPluginManagerFactory.createPluginManager();",
                "+      moduleManager = new DefaultBuckModuleManager(pluginManager, new BuckModuleJarHashProvider());",
                "     }",
                "@@ -638,3 +643,3 @@ public final class Main {",
                "       RuleKeyConfiguration ruleKeyConfiguration =",
                "-          ConfigRuleKeyConfigurationFactory.create(buckConfig, pluginManager);",
                "+          ConfigRuleKeyConfigurationFactory.create(buckConfig, moduleManager);",
                "@@ -717,3 +722,3 @@ public final class Main {",
                "                   rootCellCellPathResolver,",
                "-                  pluginManager,",
                "+                  moduleManager,",
                "                   toolchainProviderFactory,",
                "@@ -1155,3 +1160,4 @@ public final class Main {",
                "                         executableFinder,",
                "-                        pluginManager));",
                "+                        pluginManager,",
                "+                        moduleManager));",
                "           } catch (InterruptedException | ClosedByInterruptException e) {",
                "diff --git a/src/com/facebook/buck/distributed/DistBuildState.java b/src/com/facebook/buck/distributed/DistBuildState.java",
                "index b99d28ab62..eef387204a 100644",
                "--- a/src/com/facebook/buck/distributed/DistBuildState.java",
                "+++ b/src/com/facebook/buck/distributed/DistBuildState.java",
                "@@ -31,2 +31,3 @@ import com.facebook.buck.log.Logger;",
                " import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.module.BuckModuleManager;",
                " import com.facebook.buck.rules.Cell;",
                "@@ -142,2 +143,3 @@ public class DistBuildState {",
                "       ExecutableFinder executableFinder,",
                "+      BuckModuleManager moduleManager,",
                "       PluginManager pluginManager,",
                "@@ -184,3 +186,4 @@ public class DistBuildState {",
                "               executableFinder,",
                "-              pluginManager);",
                "+              pluginManager,",
                "+              moduleManager);",
                "       cellParams.put(cellRoot, currentCellParams);",
                "diff --git a/src/com/facebook/buck/rules/AbstractDistBuildCellParams.java b/src/com/facebook/buck/rules/AbstractDistBuildCellParams.java",
                "index 1734d7dac9..eabda46134 100644",
                "--- a/src/com/facebook/buck/rules/AbstractDistBuildCellParams.java",
                "+++ b/src/com/facebook/buck/rules/AbstractDistBuildCellParams.java",
                "@@ -21,2 +21,3 @@ import com.facebook.buck.io.ExecutableFinder;",
                " import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.module.BuckModuleManager;",
                " import com.facebook.buck.util.ProcessExecutor;",
                "@@ -44,2 +45,4 @@ interface AbstractDistBuildCellParams {",
                "   PluginManager getPluginManager();",
                "+",
                "+  BuckModuleManager getBuckModuleManager();",
                " }",
                "diff --git a/src/com/facebook/buck/rules/DistributedCellProviderFactory.java b/src/com/facebook/buck/rules/DistributedCellProviderFactory.java",
                "index bd49d600b0..158e0ca595 100644",
                "--- a/src/com/facebook/buck/rules/DistributedCellProviderFactory.java",
                "+++ b/src/com/facebook/buck/rules/DistributedCellProviderFactory.java",
                "@@ -72,3 +72,3 @@ public class DistributedCellProviderFactory {",
                "                       ConfigRuleKeyConfigurationFactory.create(",
                "-                          configWithResolver, cellParam.getPluginManager());",
                "+                          configWithResolver, cellParam.getBuckModuleManager());",
                "                   ToolchainProvider toolchainProvider =",
                "@@ -100,2 +100,3 @@ public class DistributedCellProviderFactory {",
                "                 rootCell.getFilesystem(),",
                "+                rootCell.getBuckModuleManager(),",
                "                 rootCell.getPluginManager(),",
                "diff --git a/src/com/facebook/buck/rules/LocalCellProviderFactory.java b/src/com/facebook/buck/rules/LocalCellProviderFactory.java",
                "index 79cca6bcf6..5927f3af00 100644",
                "--- a/src/com/facebook/buck/rules/LocalCellProviderFactory.java",
                "+++ b/src/com/facebook/buck/rules/LocalCellProviderFactory.java",
                "@@ -23,2 +23,3 @@ import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                " import com.facebook.buck.io.filesystem.ProjectFilesystemFactory;",
                "+import com.facebook.buck.module.BuckModuleManager;",
                " import com.facebook.buck.rules.keys.config.RuleKeyConfiguration;",
                "@@ -38,3 +39,2 @@ import java.nio.file.Path;",
                " import java.util.Optional;",
                "-import org.pf4j.PluginManager;",
                "@@ -51,3 +51,3 @@ public class LocalCellProviderFactory {",
                "       CellPathResolver rootCellCellPathResolver,",
                "-      PluginManager pluginManager,",
                "+      BuckModuleManager moduleManager,",
                "       ToolchainProviderFactory toolchainProviderFactory,",
                "@@ -136,3 +136,3 @@ public class LocalCellProviderFactory {",
                "                 RuleKeyConfiguration ruleKeyConfiguration =",
                "-                    ConfigRuleKeyConfigurationFactory.create(buckConfig, pluginManager);",
                "+                    ConfigRuleKeyConfigurationFactory.create(buckConfig, moduleManager);",
                "@@ -161,3 +161,3 @@ public class LocalCellProviderFactory {",
                "                 rootFilesystem,",
                "-                pluginManager,",
                "+                moduleManager,",
                "                 rootConfig,",
                "diff --git a/src/com/facebook/buck/rules/RootCellFactory.java b/src/com/facebook/buck/rules/RootCellFactory.java",
                "index 29bac788c7..d111c839c7 100644",
                "--- a/src/com/facebook/buck/rules/RootCellFactory.java",
                "+++ b/src/com/facebook/buck/rules/RootCellFactory.java",
                "@@ -22,2 +22,3 @@ import com.facebook.buck.io.Watchman;",
                " import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.module.BuckModuleManager;",
                " import com.facebook.buck.rules.keys.config.RuleKeyConfiguration;",
                "@@ -46,2 +47,3 @@ class RootCellFactory {",
                "       ProjectFilesystem rootFilesystem,",
                "+      BuckModuleManager moduleManager,",
                "       PluginManager pluginManager,",
                "@@ -56,3 +58,3 @@ class RootCellFactory {",
                "     RuleKeyConfiguration ruleKeyConfiguration =",
                "-        ConfigRuleKeyConfigurationFactory.create(rootConfig, pluginManager);",
                "+        ConfigRuleKeyConfigurationFactory.create(rootConfig, moduleManager);",
                "     ToolchainProvider toolchainProvider =",
                "@@ -82,3 +84,3 @@ class RootCellFactory {",
                "       ProjectFilesystem rootFilesystem,",
                "-      PluginManager pluginManager,",
                "+      BuckModuleManager moduleManager,",
                "       BuckConfig rootConfig,",
                "@@ -89,3 +91,3 @@ class RootCellFactory {",
                "     RuleKeyConfiguration ruleKeyConfiguration =",
                "-        ConfigRuleKeyConfigurationFactory.create(rootConfig, pluginManager);",
                "+        ConfigRuleKeyConfigurationFactory.create(rootConfig, moduleManager);",
                "     ToolchainProvider toolchainProvider =",
                "diff --git a/src/com/facebook/buck/rules/keys/config/impl/ConfigRuleKeyConfigurationFactory.java b/src/com/facebook/buck/rules/keys/config/impl/ConfigRuleKeyConfigurationFactory.java",
                "index 67c8ce5c5f..8401baed0c 100644",
                "--- a/src/com/facebook/buck/rules/keys/config/impl/ConfigRuleKeyConfigurationFactory.java",
                "+++ b/src/com/facebook/buck/rules/keys/config/impl/ConfigRuleKeyConfigurationFactory.java",
                "@@ -21,8 +21,6 @@ import com.facebook.buck.model.BuckVersion;",
                " import com.facebook.buck.module.BuckModuleHashStrategy;",
                "-import com.facebook.buck.module.impl.BuckModuleJarHashProvider;",
                "+import com.facebook.buck.module.BuckModuleManager;",
                " import com.facebook.buck.module.impl.DefaultBuckModuleHashStrategy;",
                "-import com.facebook.buck.module.impl.DefaultBuckModuleManager;",
                " import com.facebook.buck.module.impl.NoOpBuckModuleHashStrategy;",
                " import com.facebook.buck.rules.keys.config.RuleKeyConfiguration;",
                "-import org.pf4j.PluginManager;",
                "@@ -31,3 +29,4 @@ public class ConfigRuleKeyConfigurationFactory {",
                "-  public static RuleKeyConfiguration create(BuckConfig buckConfig, PluginManager pluginManager) {",
                "+  public static RuleKeyConfiguration create(",
                "+      BuckConfig buckConfig, BuckModuleManager moduleManager) {",
                "     long inputKeySizeLimit = buckConfig.getBuildInputRuleKeyFileSizeLimit();",
                "@@ -37,3 +36,3 @@ public class ConfigRuleKeyConfigurationFactory {",
                "         .setBuildInputRuleKeyFileSizeLimit(inputKeySizeLimit)",
                "-        .setBuckModuleHashStrategy(createBuckModuleHashStrategy(buckConfig, pluginManager))",
                "+        .setBuckModuleHashStrategy(createBuckModuleHashStrategy(buckConfig, moduleManager))",
                "         .build();",
                "@@ -52,8 +51,6 @@ public class ConfigRuleKeyConfigurationFactory {",
                "   private static BuckModuleHashStrategy createBuckModuleHashStrategy(",
                "-      BuckConfig buckConfig, PluginManager pluginManager) {",
                "+      BuckConfig buckConfig, BuckModuleManager moduleManager) {",
                "     BuckModuleHashStrategy hashStrategy;",
                "     if (buckConfig.useBuckBinaryHash()) {",
                "-      hashStrategy =",
                "-          new DefaultBuckModuleHashStrategy(",
                "-              new DefaultBuckModuleManager(pluginManager, new BuckModuleJarHashProvider()));",
                "+      hashStrategy = new DefaultBuckModuleHashStrategy(moduleManager);",
                "     } else {",
                "diff --git a/test/com/facebook/buck/cli/BUCK b/test/com/facebook/buck/cli/BUCK",
                "index 5955dccb4e..21c1a28dbc 100644",
                "--- a/test/com/facebook/buck/cli/BUCK",
                "+++ b/test/com/facebook/buck/cli/BUCK",
                "@@ -120,2 +120,3 @@ java_library(",
                "         \"//test/com/facebook/buck/jvm/java:fakepackagefinder\",",
                "+        \"//test/com/facebook/buck/module:testutil\",",
                "         \"//test/com/facebook/buck/rules:testutil\",",
                "@@ -430,2 +431,3 @@ java_test(",
                "         \"//test/com/facebook/buck/model:testutil\",",
                "+        \"//test/com/facebook/buck/module:testutil\",",
                "         \"//test/com/facebook/buck/rules:testutil\",",
                "diff --git a/test/com/facebook/buck/cli/CleanCommandTest.java b/test/com/facebook/buck/cli/CleanCommandTest.java",
                "index 916d807344..5d3c926f96 100644",
                "--- a/test/com/facebook/buck/cli/CleanCommandTest.java",
                "+++ b/test/com/facebook/buck/cli/CleanCommandTest.java",
                "@@ -33,2 +33,3 @@ import com.facebook.buck.io.filesystem.impl.DefaultProjectFilesystemFactory;",
                " import com.facebook.buck.jvm.java.FakeJavaPackageFinder;",
                "+import com.facebook.buck.module.TestBuckModuleManagerFactory;",
                " import com.facebook.buck.parser.Parser;",
                "@@ -320,3 +321,4 @@ public class CleanCommandTest extends EasyMockSupport {",
                "         new ExecutableFinder(),",
                "-        pluginManager);",
                "+        pluginManager,",
                "+        TestBuckModuleManagerFactory.create(pluginManager));",
                "   }",
                "diff --git a/test/com/facebook/buck/cli/CommandRunnerParamsForTesting.java b/test/com/facebook/buck/cli/CommandRunnerParamsForTesting.java",
                "index 50e9b4b71a..7eef509e7d 100644",
                "--- a/test/com/facebook/buck/cli/CommandRunnerParamsForTesting.java",
                "+++ b/test/com/facebook/buck/cli/CommandRunnerParamsForTesting.java",
                "@@ -31,2 +31,3 @@ import com.facebook.buck.jvm.core.JavaPackageFinder;",
                " import com.facebook.buck.jvm.java.FakeJavaPackageFinder;",
                "+import com.facebook.buck.module.TestBuckModuleManagerFactory;",
                " import com.facebook.buck.parser.Parser;",
                "@@ -68,2 +69,3 @@ import java.util.Optional;",
                " import javax.annotation.Nullable;",
                "+import org.pf4j.PluginManager;",
                "@@ -100,2 +102,3 @@ public class CommandRunnerParamsForTesting {",
                "     TypeCoercerFactory typeCoercerFactory = new DefaultTypeCoercerFactory();",
                "+    PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();",
                "     KnownBuildRuleTypesProvider knownBuildRuleTypesProvider =",
                "@@ -103,5 +106,3 @@ public class CommandRunnerParamsForTesting {",
                "             DefaultKnownBuildRuleTypesFactory.of(",
                "-                processExecutor,",
                "-                BuckPluginManagerFactory.createPluginManager(),",
                "-                new TestSandboxExecutionStrategyFactory()));",
                "+                processExecutor, pluginManager, new TestSandboxExecutionStrategyFactory()));",
                "@@ -146,3 +147,4 @@ public class CommandRunnerParamsForTesting {",
                "         new ExecutableFinder(),",
                "-        BuckPluginManagerFactory.createPluginManager());",
                "+        pluginManager,",
                "+        TestBuckModuleManagerFactory.create(pluginManager));",
                "   }",
                "diff --git a/test/com/facebook/buck/distributed/BUCK b/test/com/facebook/buck/distributed/BUCK",
                "index 6abf2a43b5..104e6cd989 100644",
                "--- a/test/com/facebook/buck/distributed/BUCK",
                "+++ b/test/com/facebook/buck/distributed/BUCK",
                "@@ -72,2 +72,3 @@ standard_java_test(",
                "         \"//test/com/facebook/buck/model:testutil\",",
                "+        \"//test/com/facebook/buck/module:testutil\",",
                "         \"//test/com/facebook/buck/rules:testutil\",",
                "diff --git a/test/com/facebook/buck/distributed/DistBuildStateTest.java b/test/com/facebook/buck/distributed/DistBuildStateTest.java",
                "index 6af88ea306..57fa27dd35 100644",
                "--- a/test/com/facebook/buck/distributed/DistBuildStateTest.java",
                "+++ b/test/com/facebook/buck/distributed/DistBuildStateTest.java",
                "@@ -38,2 +38,4 @@ import com.facebook.buck.model.BuildTarget;",
                " import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.facebook.buck.module.BuckModuleManager;",
                "+import com.facebook.buck.module.TestBuckModuleManagerFactory;",
                " import com.facebook.buck.parser.DefaultParserTargetNodeFactory;",
                "@@ -109,2 +111,3 @@ public class DistBuildStateTest {",
                "   private ExecutableFinder executableFinder;",
                "+  private BuckModuleManager moduleManager;",
                "   private PluginManager pluginManager;",
                "@@ -115,2 +118,3 @@ public class DistBuildStateTest {",
                "     pluginManager = BuckPluginManagerFactory.createPluginManager();",
                "+    moduleManager = TestBuckModuleManagerFactory.create(pluginManager);",
                "@@ -160,2 +164,3 @@ public class DistBuildStateTest {",
                "             executableFinder,",
                "+            moduleManager,",
                "             pluginManager,",
                "@@ -228,2 +233,3 @@ public class DistBuildStateTest {",
                "             executableFinder,",
                "+            moduleManager,",
                "             pluginManager,",
                "@@ -291,2 +297,3 @@ public class DistBuildStateTest {",
                "             executableFinder,",
                "+            moduleManager,",
                "             pluginManager,",
                "@@ -378,2 +385,3 @@ public class DistBuildStateTest {",
                "             executableFinder,",
                "+            moduleManager,",
                "             pluginManager,",
                "diff --git a/test/com/facebook/buck/distributed/build_client/BUCK b/test/com/facebook/buck/distributed/build_client/BUCK",
                "index fd6d8ad02d..b0c2d934ab 100644",
                "--- a/test/com/facebook/buck/distributed/build_client/BUCK",
                "+++ b/test/com/facebook/buck/distributed/build_client/BUCK",
                "@@ -37,2 +37,3 @@ standard_java_test(",
                "         \"//test/com/facebook/buck/model:testutil\",",
                "+        \"//test/com/facebook/buck/module:testutil\",",
                "         \"//test/com/facebook/buck/rules:testutil\",",
                "diff --git a/test/com/facebook/buck/distributed/build_client/BuildPhaseTest.java b/test/com/facebook/buck/distributed/build_client/BuildPhaseTest.java",
                "index 69f12fff3f..70e0be0a63 100644",
                "--- a/test/com/facebook/buck/distributed/build_client/BuildPhaseTest.java",
                "+++ b/test/com/facebook/buck/distributed/build_client/BuildPhaseTest.java",
                "@@ -59,2 +59,3 @@ import com.facebook.buck.model.BuildTarget;",
                " import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.facebook.buck.module.TestBuckModuleManagerFactory;",
                " import com.facebook.buck.plugin.impl.BuckPluginManagerFactory;",
                "@@ -160,3 +161,4 @@ public class BuildPhaseTest {",
                "                     FakeBuckConfig.builder().build(),",
                "-                    BuckPluginManagerFactory.createPluginManager()))",
                "+                    TestBuckModuleManagerFactory.create(",
                "+                        BuckPluginManagerFactory.createPluginManager())))",
                "             .setRootCell(",
                "diff --git a/test/com/facebook/buck/distributed/build_client/DistBuildControllerTest.java b/test/com/facebook/buck/distributed/build_client/DistBuildControllerTest.java",
                "index 94ac57b352..05641483e4 100644",
                "--- a/test/com/facebook/buck/distributed/build_client/DistBuildControllerTest.java",
                "+++ b/test/com/facebook/buck/distributed/build_client/DistBuildControllerTest.java",
                "@@ -59,2 +59,3 @@ import com.facebook.buck.event.BuckEventBus;",
                " import com.facebook.buck.log.InvocationInfo;",
                "+import com.facebook.buck.module.TestBuckModuleManagerFactory;",
                " import com.facebook.buck.plugin.impl.BuckPluginManagerFactory;",
                "@@ -155,3 +156,4 @@ public class DistBuildControllerTest {",
                "                     FakeBuckConfig.builder().build(),",
                "-                    BuckPluginManagerFactory.createPluginManager()))",
                "+                    TestBuckModuleManagerFactory.create(",
                "+                        BuckPluginManagerFactory.createPluginManager())))",
                "             .setRootCell(",
                "diff --git a/test/com/facebook/buck/module/BUCK b/test/com/facebook/buck/module/BUCK",
                "new file mode 100644",
                "index 0000000000..c7305814c2",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/module/BUCK",
                "@@ -0,0 +1,17 @@",
                "+java_library(",
                "+    name = \"testutil\",",
                "+    srcs = glob(",
                "+        [\"*.java\"],",
                "+        exclude = [",
                "+            \"*Benchmark.java\",",
                "+            \"*Test.java\",",
                "+        ],",
                "+    ),",
                "+    exported_deps = [",
                "+        \"//src/com/facebook/buck/module:module\",",
                "+    ],",
                "+    visibility = [\"//test/...\"],",
                "+    deps = [",
                "+        \"//src/com/facebook/buck/module/impl:impl\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/module/TestBuckModuleManagerFactory.java b/test/com/facebook/buck/module/TestBuckModuleManagerFactory.java",
                "new file mode 100644",
                "index 0000000000..960d628c5a",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/module/TestBuckModuleManagerFactory.java",
                "@@ -0,0 +1,27 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.module;",
                "+",
                "+import com.facebook.buck.module.impl.BuckModuleJarHashProvider;",
                "+import com.facebook.buck.module.impl.DefaultBuckModuleManager;",
                "+import org.pf4j.PluginManager;",
                "+",
                "+public class TestBuckModuleManagerFactory {",
                "+  public static BuckModuleManager create(PluginManager pluginManager) {",
                "+    return new DefaultBuckModuleManager(pluginManager, new BuckModuleJarHashProvider());",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/rules/BUCK b/test/com/facebook/buck/rules/BUCK",
                "index e5f1f47076..f54593d985 100644",
                "--- a/test/com/facebook/buck/rules/BUCK",
                "+++ b/test/com/facebook/buck/rules/BUCK",
                "@@ -266,2 +266,3 @@ java_immutables_library(",
                "         \"//test/com/facebook/buck/model:testutil\",",
                "+        \"//test/com/facebook/buck/module:testutil\",",
                "         \"//test/com/facebook/buck/rules/keys:testutil\",",
                "diff --git a/test/com/facebook/buck/rules/TestCellBuilder.java b/test/com/facebook/buck/rules/TestCellBuilder.java",
                "index d5fe7b5579..711bb5c320 100644",
                "--- a/test/com/facebook/buck/rules/TestCellBuilder.java",
                "+++ b/test/com/facebook/buck/rules/TestCellBuilder.java",
                "@@ -26,2 +26,3 @@ import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                " import com.facebook.buck.io.filesystem.impl.DefaultProjectFilesystemFactory;",
                "+import com.facebook.buck.module.TestBuckModuleManagerFactory;",
                " import com.facebook.buck.plugin.impl.BuckPluginManagerFactory;",
                "@@ -112,3 +113,3 @@ public class TestCellBuilder {",
                "             rootCellCellPathResolver,",
                "-            BuckPluginManagerFactory.createPluginManager(),",
                "+            TestBuckModuleManagerFactory.create(pluginManager),",
                "             toolchainProviderFactory,",
                "diff --git a/test/com/facebook/buck/testutil/integration/BUCK b/test/com/facebook/buck/testutil/integration/BUCK",
                "index 30139751ce..e9b104a7a5 100644",
                "--- a/test/com/facebook/buck/testutil/integration/BUCK",
                "+++ b/test/com/facebook/buck/testutil/integration/BUCK",
                "@@ -251,2 +251,3 @@ java_library(",
                "         \"//test/com/facebook/buck/model:testutil\",",
                "+        \"//test/com/facebook/buck/module:testutil\",",
                "         \"//test/com/facebook/buck/testutil:testutil\",",
                "diff --git a/test/com/facebook/buck/testutil/integration/ProjectWorkspace.java b/test/com/facebook/buck/testutil/integration/ProjectWorkspace.java",
                "index 8cb32d05f1..85305b4902 100644",
                "--- a/test/com/facebook/buck/testutil/integration/ProjectWorkspace.java",
                "+++ b/test/com/facebook/buck/testutil/integration/ProjectWorkspace.java",
                "@@ -42,2 +42,3 @@ import com.facebook.buck.model.BuildTarget;",
                " import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.facebook.buck.module.TestBuckModuleManagerFactory;",
                " import com.facebook.buck.parser.exceptions.BuildFileParseException;",
                "@@ -556,3 +557,3 @@ public class ProjectWorkspace extends AbstractWorkspace {",
                "             rootCellCellPathResolver,",
                "-            pluginManager,",
                "+            TestBuckModuleManagerFactory.create(pluginManager),",
                "             toolchainProviderFactory,"
            ],
            "changed_files": [
                "src/com/facebook/buck/cli/AbstractCommandRunnerParams.java",
                "src/com/facebook/buck/cli/BUCK",
                "src/com/facebook/buck/cli/DistBuildFactory.java",
                "src/com/facebook/buck/cli/DistBuildRunCommand.java",
                "src/com/facebook/buck/cli/Main.java",
                "src/com/facebook/buck/distributed/DistBuildState.java",
                "src/com/facebook/buck/rules/AbstractDistBuildCellParams.java",
                "src/com/facebook/buck/rules/DistributedCellProviderFactory.java",
                "src/com/facebook/buck/rules/LocalCellProviderFactory.java",
                "src/com/facebook/buck/rules/RootCellFactory.java",
                "src/com/facebook/buck/rules/keys/config/impl/ConfigRuleKeyConfigurationFactory.java",
                "test/com/facebook/buck/cli/BUCK",
                "test/com/facebook/buck/cli/CleanCommandTest.java",
                "test/com/facebook/buck/cli/CommandRunnerParamsForTesting.java",
                "test/com/facebook/buck/distributed/BUCK",
                "test/com/facebook/buck/distributed/DistBuildStateTest.java",
                "test/com/facebook/buck/distributed/build_client/BUCK",
                "test/com/facebook/buck/distributed/build_client/BuildPhaseTest.java",
                "test/com/facebook/buck/distributed/build_client/DistBuildControllerTest.java",
                "test/com/facebook/buck/module/BUCK",
                "test/com/facebook/buck/module/TestBuckModuleManagerFactory.java",
                "test/com/facebook/buck/rules/BUCK",
                "test/com/facebook/buck/rules/TestCellBuilder.java",
                "test/com/facebook/buck/testutil/integration/BUCK",
                "test/com/facebook/buck/testutil/integration/ProjectWorkspace.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, state, command",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "70db38ad2e4f68b1562cb48961c6790d2af640f4",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521754559,
            "hunks": 18,
            "message": "ocaml: make `CxxPlatform` a part of `OcamlPlatform` Test Plan: CI Reviewed By: styurin fbshipit-source-id: 2a6ba09",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java b/src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java",
                "index 90bb9028e4..6c8d41f872 100644",
                "--- a/src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java",
                "+++ b/src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java",
                "@@ -19,2 +19,3 @@ package com.facebook.buck.ocaml;",
                " import com.facebook.buck.cxx.toolchain.CompilerProvider;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.cxx.toolchain.PreprocessorProvider;",
                "@@ -58,2 +59,5 @@ interface AbstractOcamlPlatform extends Toolchain {",
                "   ImmutableList<String> getLdFlags();",
                "+",
                "+  /** @return the {@link CxxPlatform} to use for C/C++ dependencies. */",
                "+  CxxPlatform getCxxPlatform();",
                " }",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "index 2899ba04cf..33c112b5e1 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "@@ -85,3 +85,2 @@ public class OcamlBinaryDescription",
                "     return OcamlRuleBuilder.createBuildRule(",
                "-        toolchainProvider,",
                "         ocamlPlatform,",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "index 2d103a58f5..95362c5155 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "@@ -89,3 +89,2 @@ public class OcamlLibraryDescription",
                "     return OcamlRuleBuilder.createBuildRule(",
                "-        toolchainProvider,",
                "         ocamlPlatform,",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "index 183631f3a7..698289b5a2 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "@@ -22,3 +22,2 @@ import com.facebook.buck.cxx.CxxPreprocessorInput;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                " import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "@@ -44,3 +43,2 @@ import com.facebook.buck.rules.args.Arg;",
                " import com.facebook.buck.rules.coercer.OcamlSource;",
                "-import com.facebook.buck.toolchain.ToolchainProvider;",
                " import com.facebook.buck.util.Console;",
                "@@ -105,3 +103,2 @@ public class OcamlRuleBuilder {",
                "   public static BuildRule createBuildRule(",
                "-      ToolchainProvider toolchainProvider,",
                "       OcamlPlatform ocamlPlatform,",
                "@@ -133,3 +130,2 @@ public class OcamlRuleBuilder {",
                "       return createFineGrainedBuildRule(",
                "-          toolchainProvider,",
                "           ocamlPlatform,",
                "@@ -148,3 +144,2 @@ public class OcamlRuleBuilder {",
                "       return createBulkBuildRule(",
                "-          toolchainProvider,",
                "           ocamlPlatform,",
                "@@ -204,3 +199,2 @@ public class OcamlRuleBuilder {",
                "   public static BuildRule createBulkBuildRule(",
                "-      ToolchainProvider toolchainProvider,",
                "       OcamlPlatform ocamlPlatform,",
                "@@ -216,6 +210,2 @@ public class OcamlRuleBuilder {",
                "       ImmutableList<String> ocamlDepFlags) {",
                "-    CxxPlatform defaultCxxPlatform =",
                "-        toolchainProvider",
                "-            .getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class)",
                "-            .getDefaultCxxPlatform();",
                "     CxxPreprocessorInput cxxPreprocessorInputFromDeps =",
                "@@ -223,3 +213,3 @@ public class OcamlRuleBuilder {",
                "             CxxPreprocessables.getTransitiveCxxPreprocessorInput(",
                "-                defaultCxxPlatform,",
                "+                ocamlPlatform.getCxxPlatform(),",
                "                 resolver,",
                "@@ -244,3 +234,3 @@ public class OcamlRuleBuilder {",
                "     NativeLinkableInput cLinkableInput =",
                "-        getCLinkableInput(defaultCxxPlatform, resolver, params.getBuildDeps());",
                "+        getCLinkableInput(ocamlPlatform.getCxxPlatform(), resolver, params.getBuildDeps());",
                "@@ -369,3 +359,2 @@ public class OcamlRuleBuilder {",
                "   public static BuildRule createFineGrainedBuildRule(",
                "-      ToolchainProvider toolchainProvider,",
                "       OcamlPlatform ocamlPlatform,",
                "@@ -382,6 +371,2 @@ public class OcamlRuleBuilder {",
                "       boolean buildNativePlugin) {",
                "-    CxxPlatform defaultCxxPlatform =",
                "-        toolchainProvider",
                "-            .getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class)",
                "-            .getDefaultCxxPlatform();",
                "@@ -390,3 +375,3 @@ public class OcamlRuleBuilder {",
                "             CxxPreprocessables.getTransitiveCxxPreprocessorInput(",
                "-                defaultCxxPlatform,",
                "+                ocamlPlatform.getCxxPlatform(),",
                "                 resolver,",
                "@@ -411,3 +396,3 @@ public class OcamlRuleBuilder {",
                "     NativeLinkableInput cLinkableInput =",
                "-        getCLinkableInput(defaultCxxPlatform, resolver, params.getBuildDeps());",
                "+        getCLinkableInput(ocamlPlatform.getCxxPlatform(), resolver, params.getBuildDeps());",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java b/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java",
                "index e4f6cd94e3..d38b8c67e7 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java",
                "@@ -82,2 +82,3 @@ public class OcamlToolchainFactory implements ToolchainFactory<OcamlToolchain> {",
                "                 .setLdFlags(cxxPlatform.getLdflags())",
                "+                .setCxxPlatform(cxxPlatform)",
                "                 .build()));"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java",
                "src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "src/com/facebook/buck/ocaml/OcamlToolchainFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d66b8bc9f63410013177729e5e6d89d60b50eebe",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522191851,
            "hunks": 5,
            "message": "Fix FileBundler to work with targets at the top level of a cell Reviewed By: ttsugriy fbshipit-source-id: 71c3d1f",
            "diff": [
                "diff --git a/src/com/facebook/buck/zip/bundler/BUCK b/src/com/facebook/buck/zip/bundler/BUCK",
                "index 06e8da87f8..2f8d892d2d 100644",
                "--- a/src/com/facebook/buck/zip/bundler/BUCK",
                "+++ b/src/com/facebook/buck/zip/bundler/BUCK",
                "@@ -7,2 +7,3 @@ buck_module(",
                "         \"//src/com/facebook/buck/io:io\",",
                "+        \"//src/com/facebook/buck/io/file:file\",",
                "         \"//src/com/facebook/buck/jvm/java:support\",",
                "diff --git a/src/com/facebook/buck/zip/bundler/FileBundler.java b/src/com/facebook/buck/zip/bundler/FileBundler.java",
                "index d7438cd80b..bb33d0db09 100644",
                "--- a/src/com/facebook/buck/zip/bundler/FileBundler.java",
                "+++ b/src/com/facebook/buck/zip/bundler/FileBundler.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.zip.bundler;",
                "+import com.facebook.buck.io.file.MorePaths;",
                " import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "@@ -55,4 +56,4 @@ public abstract class FileBundler {",
                "-    if (relativeFilePath.startsWith(basePath)) {",
                "-      pathRelativeToBaseDir = basePath.relativize(relativeFilePath);",
                "+    if (relativeFilePath.startsWith(basePath) || basePath.equals(MorePaths.EMPTY_PATH)) {",
                "+      pathRelativeToBaseDir = MorePaths.relativize(basePath, relativeFilePath);",
                "     } else {",
                "diff --git a/test/com/facebook/buck/shell/filegroup/FilegroupIntegrationTest.java b/test/com/facebook/buck/shell/filegroup/FilegroupIntegrationTest.java",
                "index 651dae6fe4..44b17cd5c0 100644",
                "--- a/test/com/facebook/buck/shell/filegroup/FilegroupIntegrationTest.java",
                "+++ b/test/com/facebook/buck/shell/filegroup/FilegroupIntegrationTest.java",
                "@@ -78,2 +78,22 @@ public class FilegroupIntegrationTest {",
                "   }",
                "+",
                "+  @Test",
                "+  public void testDirectoryStructureIsKeptAtTopLevel() throws IOException {",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"filegroup\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    ProcessResult result = workspace.runBuckCommand(\"build\", \"--show-output\", \"//:dir_txt\");",
                "+",
                "+    result.assertSuccess();",
                "+",
                "+    String output = result.getStdout();",
                "+    Path outputPath = workspace.getPath(output.split(\"\\\\s+\")[1]);",
                "+",
                "+    assertEquals(\"file\", workspace.getFileContents(outputPath.resolve(\"dir\").resolve(\"file.txt\")));",
                "+    assertEquals(",
                "+        \"another_file\",",
                "+        workspace.getFileContents(",
                "+            outputPath.resolve(\"dir\").resolve(\"subdir\").resolve(\"another_file.txt\")));",
                "+  }",
                " }",
                "diff --git a/test/com/facebook/buck/shell/filegroup/testdata/filegroup/BUCK.fixture b/test/com/facebook/buck/shell/filegroup/testdata/filegroup/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..9794d0826e",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/shell/filegroup/testdata/filegroup/BUCK.fixture",
                "@@ -0,0 +1,4 @@",
                "+filegroup(",
                "+    name = \"dir_txt\",",
                "+    srcs = glob([\"dir/**/*.txt\"]),",
                "+)",
                "diff --git a/test/com/facebook/buck/shell/filegroup/testdata/filegroup/dir/config.xml b/test/com/facebook/buck/shell/filegroup/testdata/filegroup/dir/config.xml",
                "new file mode 100644",
                "index 0000000000..e69de29bb2"
            ],
            "changed_files": [
                "src/com/facebook/buck/zip/bundler/BUCK",
                "src/com/facebook/buck/zip/bundler/FileBundler.java",
                "test/com/facebook/buck/shell/filegroup/FilegroupIntegrationTest.java",
                "test/com/facebook/buck/shell/filegroup/testdata/filegroup/BUCK.fixture",
                "test/com/facebook/buck/shell/filegroup/testdata/filegroup/dir/config.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "86181a18d9c7d533c6a01e15dcbca80213977d5d",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522873692,
            "hunks": 22,
            "message": "Avoid hashing remote_file content for input-based rulekeys Summary: Input-based rulekeys hash the entire output path of any rule. Imagine a `remote_file` of type `EXPLODED_ZIP` that contains thousands of files: hashing these recursively can take a nontrivial amount of time. But as luck has it, `remote_file` already has a hash for all of its contents: its `sha1` parameter. Pipe that value through and use it for input-based rulekeys. Reviewed By: sbalabanov fbshipit-source-id: 95608b8",
            "diff": [
                "diff --git a/src/com/facebook/buck/file/BUCK b/src/com/facebook/buck/file/BUCK",
                "index 6cd04a431f..ebfe188b44 100644",
                "--- a/src/com/facebook/buck/file/BUCK",
                "+++ b/src/com/facebook/buck/file/BUCK",
                "@@ -27,2 +27,3 @@ java_library_with_plugins(",
                "         \"//test/com/facebook/buck/maven:maven\",",
                "+        \"//test/com/facebook/buck/rules/keys:keys\",",
                "     ],",
                "diff --git a/src/com/facebook/buck/file/RemoteFile.java b/src/com/facebook/buck/file/RemoteFile.java",
                "index b9567d8b09..38c827c84a 100644",
                "--- a/src/com/facebook/buck/file/RemoteFile.java",
                "+++ b/src/com/facebook/buck/file/RemoteFile.java",
                "@@ -124,6 +124,15 @@ public class RemoteFile extends AbstractBuildRuleWithDeclaredAndExtraDeps",
                "   public SourcePath getSourcePathToOutput() {",
                "-    return ExplicitBuildTargetSourcePath.of(getBuildTarget(), output);",
                "+    // EXPLODED_ZIP remote files can include many files; hashing the exploded files to compute",
                "+    // an input-based rule key can take a very long time. But we have an ace up our sleeve:",
                "+    // we already have a hash that represents the content in those exploded files!",
                "+    // Just pass that hash along so that RuleKeyBuilder can use it.",
                "+    return ExplicitBuildTargetSourcePath.builder()",
                "+        .setTarget(getBuildTarget())",
                "+        .setResolvedPath(output)",
                "+        .setPrecomputedHash(Optional.of(sha1.getHashCode()))",
                "+        .build();",
                "   }",
                "-  enum Type {",
                "+  /** Defines how the remote file should be treated when downloaded. */",
                "+  public enum Type {",
                "     DATA,",
                "diff --git a/src/com/facebook/buck/rules/AbstractDefaultBuildTargetSourcePath.java b/src/com/facebook/buck/rules/AbstractDefaultBuildTargetSourcePath.java",
                "index 85032cada0..73aacbd526 100644",
                "--- a/src/com/facebook/buck/rules/AbstractDefaultBuildTargetSourcePath.java",
                "+++ b/src/com/facebook/buck/rules/AbstractDefaultBuildTargetSourcePath.java",
                "@@ -20,2 +20,4 @@ import com.facebook.buck.model.BuildTarget;",
                " import com.facebook.buck.util.immutables.BuckStyleTuple;",
                "+import com.google.common.hash.HashCode;",
                "+import java.util.Optional;",
                " import org.immutables.value.Value;",
                "@@ -33,2 +35,9 @@ public abstract class AbstractDefaultBuildTargetSourcePath implements BuildTarge",
                "+  @Override",
                "+  @Value.Parameter(value = false)",
                "+  @Value.Default",
                "+  public Optional<HashCode> getPrecomputedHash() {",
                "+    return Optional.empty();",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/com/facebook/buck/rules/AbstractExplicitBuildTargetSourcePath.java b/src/com/facebook/buck/rules/AbstractExplicitBuildTargetSourcePath.java",
                "index a8f0b5437c..741bef4a46 100644",
                "--- a/src/com/facebook/buck/rules/AbstractExplicitBuildTargetSourcePath.java",
                "+++ b/src/com/facebook/buck/rules/AbstractExplicitBuildTargetSourcePath.java",
                "@@ -22,4 +22,6 @@ import com.facebook.buck.util.types.Pair;",
                " import com.google.common.collect.ComparisonChain;",
                "+import com.google.common.hash.HashCode;",
                " import java.nio.file.Path;",
                " import java.util.Objects;",
                "+import java.util.Optional;",
                " import org.immutables.value.Value;",
                "@@ -39,2 +41,9 @@ public abstract class AbstractExplicitBuildTargetSourcePath implements BuildTarg",
                "+  @Override",
                "+  @Value.Parameter(value = false)",
                "+  @Value.Default",
                "+  public Optional<HashCode> getPrecomputedHash() {",
                "+    return Optional.empty();",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/com/facebook/buck/rules/AbstractForwardingBuildTargetSourcePath.java b/src/com/facebook/buck/rules/AbstractForwardingBuildTargetSourcePath.java",
                "index fa8ee34d93..233c5f1456 100644",
                "--- a/src/com/facebook/buck/rules/AbstractForwardingBuildTargetSourcePath.java",
                "+++ b/src/com/facebook/buck/rules/AbstractForwardingBuildTargetSourcePath.java",
                "@@ -22,3 +22,5 @@ import com.facebook.buck.util.types.Pair;",
                " import com.google.common.collect.ComparisonChain;",
                "+import com.google.common.hash.HashCode;",
                " import java.util.Objects;",
                "+import java.util.Optional;",
                " import org.immutables.value.Value;",
                "@@ -35,2 +37,9 @@ public abstract class AbstractForwardingBuildTargetSourcePath implements BuildTa",
                "+  @Override",
                "+  @Value.Parameter(value = false)",
                "+  @Value.Default",
                "+  public Optional<HashCode> getPrecomputedHash() {",
                "+    return Optional.empty();",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/com/facebook/buck/rules/BuildTargetSourcePath.java b/src/com/facebook/buck/rules/BuildTargetSourcePath.java",
                "index e31926f072..e5ac2114b5 100644",
                "--- a/src/com/facebook/buck/rules/BuildTargetSourcePath.java",
                "+++ b/src/com/facebook/buck/rules/BuildTargetSourcePath.java",
                "@@ -19,2 +19,4 @@ package com.facebook.buck.rules;",
                " import com.facebook.buck.model.BuildTarget;",
                "+import com.google.common.hash.HashCode;",
                "+import java.util.Optional;",
                "@@ -30,2 +32,9 @@ public interface BuildTargetSourcePath extends SourcePath {",
                "+  /**",
                "+   * In rare cases, a BuildTargetSourcePath may know a hash of its content on disk before it even",
                "+   * creates its output. In this case, we can skip hashing its output files entirely and simply use",
                "+   * this precomputed hash code. Use Optional.empty() in the common case.",
                "+   */",
                "+  Optional<HashCode> getPrecomputedHash();",
                "+",
                "   /**",
                "diff --git a/src/com/facebook/buck/rules/keys/RuleKeyBuilder.java b/src/com/facebook/buck/rules/keys/RuleKeyBuilder.java",
                "index 8543dd5fd4..636d7498ec 100644",
                "--- a/src/com/facebook/buck/rules/keys/RuleKeyBuilder.java",
                "+++ b/src/com/facebook/buck/rules/keys/RuleKeyBuilder.java",
                "@@ -166,3 +166,10 @@ public abstract class RuleKeyBuilder<RULE_KEY> extends AbstractRuleKeyBuilder<RU",
                "     if (sourcePath instanceof BuildTargetSourcePath) {",
                "-      return setPath(resolver.getFilesystem(sourcePath), resolver.getRelativePath(sourcePath));",
                "+      Path relativePath = resolver.getRelativePath(sourcePath);",
                "+      Optional<HashCode> precomputedHash =",
                "+          ((BuildTargetSourcePath) sourcePath).getPrecomputedHash();",
                "+      if (precomputedHash.isPresent()) {",
                "+        hasher.putPath(relativePath, precomputedHash.get());",
                "+        return this;",
                "+      }",
                "+      return setPath(resolver.getFilesystem(sourcePath), relativePath);",
                "     } else if (sourcePath instanceof PathSourcePath) {",
                "diff --git a/test/com/facebook/buck/file/RemoteFileTest.java b/test/com/facebook/buck/file/RemoteFileTest.java",
                "index 0ee4aca7a6..c783557526 100644",
                "--- a/test/com/facebook/buck/file/RemoteFileTest.java",
                "+++ b/test/com/facebook/buck/file/RemoteFileTest.java",
                "@@ -21,2 +21,3 @@ import static java.nio.charset.StandardCharsets.UTF_8;",
                " import static org.hamcrest.MatcherAssert.assertThat;",
                "+import static org.hamcrest.Matchers.equalTo;",
                " import static org.hamcrest.Matchers.is;",
                "@@ -33,2 +34,3 @@ import com.facebook.buck.rules.BuildRuleParams;",
                " import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.BuildTargetSourcePath;",
                " import com.facebook.buck.rules.BuildableContext;",
                "@@ -56,2 +58,3 @@ import java.nio.file.Path;",
                " import java.util.Arrays;",
                "+import java.util.Optional;",
                " import javax.annotation.Nullable;",
                "@@ -92,2 +95,18 @@ public class RemoteFileTest {",
                "+  @Test",
                "+  public void shouldReturnSha1AsPrecomputedHashForSourcePathToOutput() {",
                "+    Downloader downloader = new ExplodingDownloader();",
                "+    BuildTarget target = BuildTargetFactory.newInstance(\"//cheese:cake\");",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver();",
                "+    HashCode hash = Hashing.sha1().hashLong(42);",
                "+    RemoteFile remoteFile =",
                "+        new RemoteFileBuilder(downloader, target)",
                "+            .setUrl(\"http://www.facebook.com/\")",
                "+            .setSha1(hash)",
                "+            .build(resolver);",
                "+    assertThat(",
                "+        ((BuildTargetSourcePath) remoteFile.getSourcePathToOutput()).getPrecomputedHash(),",
                "+        equalTo(Optional.of(hash)));",
                "+  }",
                "+",
                "   @Test",
                "diff --git a/test/com/facebook/buck/rules/keys/BUCK b/test/com/facebook/buck/rules/keys/BUCK",
                "index 654f09781f..c3a29ee664 100644",
                "--- a/test/com/facebook/buck/rules/keys/BUCK",
                "+++ b/test/com/facebook/buck/rules/keys/BUCK",
                "@@ -90,2 +90,3 @@ standard_java_test(",
                "         \"//src/com/facebook/buck/event/listener:listener\",",
                "+        \"//src/com/facebook/buck/file:file\",",
                "         \"//src/com/facebook/buck/graph:graph\",",
                "diff --git a/test/com/facebook/buck/rules/keys/InputBasedRuleKeyFactoryTest.java b/test/com/facebook/buck/rules/keys/InputBasedRuleKeyFactoryTest.java",
                "index 7171e7c855..2c4b577d14 100644",
                "--- a/test/com/facebook/buck/rules/keys/InputBasedRuleKeyFactoryTest.java",
                "+++ b/test/com/facebook/buck/rules/keys/InputBasedRuleKeyFactoryTest.java",
                "@@ -20,2 +20,3 @@ import static org.junit.Assert.assertThat;",
                "+import com.facebook.buck.file.RemoteFile;",
                " import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "@@ -55,2 +56,5 @@ import com.google.common.collect.ImmutableSortedSet;",
                " import com.google.common.hash.HashCode;",
                "+import com.google.common.hash.Hashing;",
                "+import java.net.URI;",
                "+import java.net.URISyntaxException;",
                " import java.nio.file.Path;",
                "@@ -257,2 +261,37 @@ public class InputBasedRuleKeyFactoryTest {",
                "+  @Test",
                "+  public void computingRuleKeyForRemoteFileShouldNotConsultHashLoader() throws URISyntaxException {",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver();",
                "+    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(resolver);",
                "+    SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);",
                "+    FakeProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+",
                "+    BuildRule dep =",
                "+        new RemoteFile(",
                "+            BuildTargetFactory.newInstance(\"//:dep\"),",
                "+            filesystem,",
                "+            TestBuildRuleParams.create(),",
                "+            (eventBus, uri, output) -> false,",
                "+            new URI(\"http://www.facebook.com\"),",
                "+            Hashing.sha1().hashLong(42),",
                "+            \"output.txt\",",
                "+            RemoteFile.Type.EXPLODED_ZIP);",
                "+    resolver.addToIndex(dep);",
                "+",
                "+    BuildTarget target = BuildTargetFactory.newInstance(\"//:rule\");",
                "+    BuildRuleParams params =",
                "+        TestBuildRuleParams.create().withDeclaredDeps(ImmutableSortedSet.of(dep));",
                "+    BuildRule rule =",
                "+        new NoopBuildRuleWithDeclaredAndExtraDeps(target, filesystem, params) {",
                "+          @AddToRuleKey",
                "+          RuleKeyAppendableWithInput input =",
                "+              new RuleKeyAppendableWithInput(dep.getSourcePathToOutput());",
                "+        };",
                "+",
                "+    FakeFileHashCache hashCache = new FakeFileHashCache(ImmutableMap.of());",
                "+    TestInputBasedRuleKeyFactory keyFactory =",
                "+        new TestInputBasedRuleKeyFactory(hashCache, pathResolver, ruleFinder);",
                "+    keyFactory.build(rule);",
                "+  }",
                "+",
                "   @Test"
            ],
            "changed_files": [
                "src/com/facebook/buck/file/BUCK",
                "src/com/facebook/buck/file/RemoteFile.java",
                "src/com/facebook/buck/rules/AbstractDefaultBuildTargetSourcePath.java",
                "src/com/facebook/buck/rules/AbstractExplicitBuildTargetSourcePath.java",
                "src/com/facebook/buck/rules/AbstractForwardingBuildTargetSourcePath.java",
                "src/com/facebook/buck/rules/BuildTargetSourcePath.java",
                "src/com/facebook/buck/rules/keys/RuleKeyBuilder.java",
                "test/com/facebook/buck/file/RemoteFileTest.java",
                "test/com/facebook/buck/rules/keys/BUCK",
                "test/com/facebook/buck/rules/keys/InputBasedRuleKeyFactoryTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d84816b65679e42d05fee8922aaff512e2b5f5b6",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521754577,
            "hunks": 13,
            "message": "ocaml: remove unnecessary deps on metadata rules Summary: The `OcamlStaticLibrary` rules are noop rules, which don't these additional deps. Test Plan: CI Reviewed By: bobyangyf fbshipit-source-id: a8fa4ef",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "index 5777c25244..871682761f 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "@@ -38,3 +38,2 @@ import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                " import com.facebook.buck.versions.VersionPropagator;",
                "-import com.google.common.base.Suppliers;",
                " import com.google.common.collect.ImmutableCollection;",
                "@@ -112,8 +111,3 @@ public class OcamlLibraryDescription",
                "           context.getProjectFilesystem(),",
                "-          params.withDeclaredDeps(",
                "-              Suppliers.ofInstance(",
                "-                  ImmutableSortedSet.<BuildRule>naturalOrder()",
                "-                      .addAll(params.getDeclaredDeps().get())",
                "-                      .addAll(result.getRules())",
                "-                      .build())),",
                "+          params,",
                "           args.getLinkerFlags(),",
                "@@ -127,3 +121,8 @@ public class OcamlLibraryDescription",
                "               .addAll(ruleFinder.filterBuildRuleInputs(result.getObjectFiles()))",
                "-              .build());",
                "+              .build(),",
                "+          result",
                "+              .getRules()",
                "+              .stream()",
                "+              .map(BuildRule::getBuildTarget)",
                "+              .collect(ImmutableList.toImmutableList()));",
                "@@ -146,8 +145,3 @@ public class OcamlLibraryDescription",
                "           context.getProjectFilesystem(),",
                "-          params.withDeclaredDeps(",
                "-              Suppliers.ofInstance(",
                "-                  ImmutableSortedSet.<BuildRule>naturalOrder()",
                "-                      .addAll(params.getDeclaredDeps().get())",
                "-                      .add(ocamlLibraryBuild)",
                "-                      .build())),",
                "+          params,",
                "           args.getLinkerFlags(),",
                "@@ -164,3 +158,4 @@ public class OcamlLibraryDescription",
                "           ImmutableSortedSet.of(ocamlLibraryBuild),",
                "-          ImmutableSortedSet.of(ocamlLibraryBuild));",
                "+          ImmutableSortedSet.of(ocamlLibraryBuild),",
                "+          ImmutableList.of(ocamlLibraryBuild.getBuildTarget()));",
                "     }",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java b/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "index 8f0ecbc2cd..bdf7f15d25 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "@@ -25,6 +25,9 @@ import com.facebook.buck.rules.BuildRuleParams;",
                " import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.HasRuntimeDeps;",
                " import com.facebook.buck.rules.NoopBuildRuleWithDeclaredAndExtraDeps;",
                " import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                " import com.facebook.buck.rules.args.SourcePathArg;",
                " import com.facebook.buck.rules.args.StringArg;",
                "+import com.facebook.buck.util.RichStream;",
                " import com.google.common.collect.ImmutableList;",
                "@@ -32,4 +35,6 @@ import com.google.common.collect.ImmutableSortedSet;",
                " import java.nio.file.Path;",
                "+import java.util.stream.Stream;",
                "-class OcamlStaticLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps implements OcamlLibrary {",
                "+class OcamlStaticLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "+    implements OcamlLibrary, HasRuntimeDeps {",
                "   private final BuildTarget staticLibraryTarget;",
                "@@ -42,2 +47,3 @@ class OcamlStaticLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps implement",
                "   private final ImmutableSortedSet<BuildRule> bytecodeLinkDeps;",
                "+  private final Iterable<BuildTarget> runtimeDeps;",
                "@@ -54,3 +60,4 @@ class OcamlStaticLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps implement",
                "       ImmutableSortedSet<BuildRule> bytecodeCompileDeps,",
                "-      ImmutableSortedSet<BuildRule> bytecodeLinkDeps) {",
                "+      ImmutableSortedSet<BuildRule> bytecodeLinkDeps,",
                "+      Iterable<BuildTarget> runtimeDeps) {",
                "     super(buildTarget, projectFilesystem, params);",
                "@@ -63,2 +70,3 @@ class OcamlStaticLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps implement",
                "     this.bytecodeLinkDeps = bytecodeLinkDeps;",
                "+    this.runtimeDeps = runtimeDeps;",
                "     staticLibraryTarget = OcamlRuleBuilder.createStaticLibraryBuildTarget(compileBuildTarget);",
                "@@ -127,2 +135,7 @@ class OcamlStaticLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps implement",
                "   }",
                "+",
                "+  @Override",
                "+  public Stream<BuildTarget> getRuntimeDeps(SourcePathRuleFinder ruleFinder) {",
                "+    return RichStream.from(runtimeDeps);",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlStaticLibrary.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "24354460ec58ed5f37df70b1f548367d51a39bf9",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521480399,
            "hunks": 4,
            "message": "E2E mobile template: android_build_config Summary: ```                                           android_binary                                                    apple_package                                                  +                                                               +       +------------+-------------+---------------+                                                               |       v            v             v               v                                                               v export_file     manifest     keystore     android_library                                                   apple_bundle                    +                             +                                                               +                    |                    +--------+---------+--------------------+-----------------+              |                    v                    v                  v                    v                 v              v                 genrule          android_resource   android_library  *android_build_config*  cxx_library    apple_binary                    +                                       +                                      +              +    +---------------+                                       |                                      +--------------+    v               v                                       v                                      v              v genrule      python_binary                      android_prebuilt_aar                         cxx_library    apple_resource ``` Test Plan: Built locally Reviewed By: styurin fbshipit-source-id: b472b5a",
            "diff": [
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/configs/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/configs/BUCK.fixture",
                "index 652be1e1bb..36de558677 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/configs/BUCK.fixture",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/configs/BUCK.fixture",
                "@@ -13 +13,12 @@ export_file(",
                " )",
                "+",
                "+android_build_config(",
                "+    name = \"build_config\",",
                "+    package = \"com.facebook.buck\",",
                "+    values = [",
                "+        \"String BUILD_ID = \\\"build-id\\\"\",",
                "+    ],",
                "+    visibility = [",
                "+        \"PUBLIC\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java",
                "index 61ca3cdd3e..aa3869a8f7 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java",
                "@@ -13,2 +13,3 @@ import android.os.Bundle;",
                " import android.widget.TextView;",
                "+import com.facebook.buck.BuildConfig;",
                " import com.facebook.buck.demo.capitalize.CapitalizeUtils;",
                "@@ -24,3 +25,6 @@ public class App extends Activity {",
                "     try {",
                "-      String message = CapitalizeUtils.capitalize(new Hello().getHelloString());",
                "+      String message =",
                "+          String.format(",
                "+              \"%s - id: %s\",",
                "+              CapitalizeUtils.capitalize(new Hello().getHelloString()), BuildConfig.BUILD_ID);",
                "       textView.setText(message);",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "index bb339f5048..e7a405589f 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "@@ -12,2 +12,3 @@ visible_android_library(",
                "     deps = [",
                "+        \"//android/configs:build_config\",",
                "         \"//android/cxx:jni\","
            ],
            "changed_files": [
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/configs/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "88b02763fedd56f9ad54ecc45ec5f6c80ad66e91",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522434382,
            "hunks": 7,
            "message": "Reduce computation to fix travis build Summary: https://travis-ci.org/facebook/buck/jobs/359201996#L5109 is failing consistently. Try to reduce computation to see if tests will be fixed. Reviewed By: jtorkkola fbshipit-source-id: 6a80620",
            "diff": [
                "diff --git a/test/com/facebook/buck/graph/transformation/BUCK b/test/com/facebook/buck/graph/transformation/BUCK",
                "index 081dd9d7b0..9dfcacc02b 100644",
                "--- a/test/com/facebook/buck/graph/transformation/BUCK",
                "+++ b/test/com/facebook/buck/graph/transformation/BUCK",
                "@@ -2,5 +2,9 @@ load(\"//tools/build_rules:java_rules.bzl\", \"standard_java_test\")",
                "-standard_java_test(",
                "-    name = \"transformation\",",
                "-    deps = [",
                "+java_library(",
                "+    name = \"childrenadder\",",
                "+    srcs = glob(",
                "+        [\"*.java\"],",
                "+        exclude = [\"*Test.java\"],",
                "+    ),",
                "+    exported_deps = [",
                "         \"//src/com/facebook/buck/graph/transformation:transformation\",",
                "@@ -8,2 +12,23 @@ standard_java_test(",
                "         \"//third-party/java/guava:guava\",",
                "+    ],",
                "+)",
                "+",
                "+java_test(",
                "+    name = \"transformation_unit\",",
                "+    srcs = glob(",
                "+        [\"*Test.java\"],",
                "+        exclude = [\"DefaultAsyncTransformationEngineStackUseTest.java\"],",
                "+    ),",
                "+    deps = [",
                "+        \":childrenadder\",",
                "+        \"//third-party/java/junit:junit\",",
                "+    ],",
                "+)",
                "+",
                "+java_test(",
                "+    name = \"transformation_stackuse\",",
                "+    srcs = [\"DefaultAsyncTransformationEngineStackUseTest.java\"],",
                "+    vm_args = [\"-Xss500k\"],  #explicitly set a small stack for testing stack use",
                "+    deps = [",
                "+        \":childrenadder\",",
                "         \"//third-party/java/junit:junit\",",
                "diff --git a/test/com/facebook/buck/graph/transformation/ChildrenAdder.java b/test/com/facebook/buck/graph/transformation/ChildrenAdder.java",
                "new file mode 100644",
                "index 0000000000..d793f5510c",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/graph/transformation/ChildrenAdder.java",
                "@@ -0,0 +1,46 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.graph.transformation;",
                "+",
                "+import com.google.common.graph.MutableGraph;",
                "+import java.util.concurrent.CompletionStage;",
                "+",
                "+/**",
                "+ * Demonstration of usage of {@link AsyncTransformer}.",
                "+ *",
                "+ * <p>This returns the value of the sum of its input graph's chidren and itself. For the above graph",
                "+ * in {@code graph}, operating on the root would result in 19.",
                "+ */",
                "+class ChildrenAdder implements AsyncTransformer<Long, Long> {",
                "+",
                "+  private final MutableGraph<Long> input;",
                "+",
                "+  public ChildrenAdder(MutableGraph<Long> input) {",
                "+    this.input = input;",
                "+  }",
                "+",
                "+  @Override",
                "+  public CompletionStage<Long> transform(Long key, TransformationEnvironment<Long, Long> env) {",
                "+    Iterable<Long> children = input.successors(key);",
                "+",
                "+    return env.evaluateAll(",
                "+        children,",
                "+        childValues -> {",
                "+          return key + childValues.values().parallelStream().mapToLong(Long::new).sum();",
                "+        });",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineStackUseTest.java b/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineStackUseTest.java",
                "new file mode 100644",
                "index 0000000000..6b4c1c9796",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineStackUseTest.java",
                "@@ -0,0 +1,45 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.graph.transformation;",
                "+",
                "+import static org.junit.Assert.assertEquals;",
                "+",
                "+import com.google.common.graph.GraphBuilder;",
                "+import com.google.common.graph.MutableGraph;",
                "+import org.junit.Test;",
                "+",
                "+public class DefaultAsyncTransformationEngineStackUseTest {",
                "+",
                "+  @Test",
                "+  public void largeGraphShouldNotStackOverflow() {",
                "+    MutableGraph<Long> graph = GraphBuilder.directed().build();",
                "+    // We set -Xss500k for the JVM for this test, so our stack is very small.",
                "+    for (long i = 1L; i <= 7000L; i++) {",
                "+      graph.addNode(i);",
                "+      if (i > 1) {",
                "+        graph.putEdge(i - 1, i);",
                "+      }",
                "+    }",
                "+",
                "+    ChildrenAdder transformer = new ChildrenAdder(graph);",
                "+    assertEquals(",
                "+        (Long) 24503500L, // arithmetic series from 1 to 7000",
                "+        // https://www.wolframalpha.com/input/?i=sum+from+1+to+7000",
                "+        new DefaultAsyncTransformationEngine<>(transformer, graph.nodes().size())",
                "+            .computeUnchecked((Long) 1L));",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java b/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java",
                "index db30f5bea9..93dbcf4ae9 100644",
                "--- a/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java",
                "+++ b/test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java",
                "@@ -22,3 +22,2 @@ import com.google.common.graph.GraphBuilder;",
                " import com.google.common.graph.MutableGraph;",
                "-import java.util.concurrent.CompletionStage;",
                " import org.junit.Before;",
                "@@ -61,28 +60,2 @@ public class DefaultAsyncTransformationEngineTest {",
                "-  /**",
                "-   * Demonstration of usage of {@link AsyncTransformer}.",
                "-   *",
                "-   * <p>This returns the value of the sum of its input graph's chidren and itself. For the above",
                "-   * graph in {@code graph}, operating on the root would result in 19.",
                "-   */",
                "-  private class ChildrenAdder implements AsyncTransformer<Long, Long> {",
                "-",
                "-    private final MutableGraph<Long> input;",
                "-",
                "-    public ChildrenAdder(MutableGraph<Long> input) {",
                "-      this.input = input;",
                "-    }",
                "-",
                "-    @Override",
                "-    public CompletionStage<Long> transform(Long key, TransformationEnvironment<Long, Long> env) {",
                "-      Iterable<Long> children = input.successors(key);",
                "-",
                "-      return env.evaluateAll(",
                "-          children,",
                "-          childValues -> {",
                "-            return key + childValues.values().parallelStream().mapToLong(Long::new).sum();",
                "-          });",
                "-    }",
                "-  }",
                "-",
                "   @Test",
                "@@ -104,21 +77,2 @@ public class DefaultAsyncTransformationEngineTest {",
                "   }",
                "-",
                "-  @Test",
                "-  public void largeGraphShouldNotStackOverflow() {",
                "-    graph = GraphBuilder.directed().build();",
                "-    // graph of 100000 depth is plenty deep for testing",
                "-    for (long i = 1L; i <= 100000L; i++) {",
                "-      graph.addNode(i);",
                "-      if (i > 1) {",
                "-        graph.putEdge(i - 1, i);",
                "-      }",
                "-    }",
                "-",
                "-    ChildrenAdder transformer = new ChildrenAdder(graph);",
                "-    assertEquals(",
                "-        (Long) 5000050000L, // arithmetic series from 1 to 100000",
                "-        // https://www.wolframalpha.com/input/?i=sum+from+1+to+100000",
                "-        new DefaultAsyncTransformationEngine<>(transformer, graph.nodes().size())",
                "-            .computeUnchecked((Long) 1L));",
                "-  }",
                " }"
            ],
            "changed_files": [
                "test/com/facebook/buck/graph/transformation/BUCK",
                "test/com/facebook/buck/graph/transformation/ChildrenAdder.java",
                "test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineStackUseTest.java",
                "test/com/facebook/buck/graph/transformation/DefaultAsyncTransformationEngineTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "51f54d1e95c3b75bb35aa35c935ff617948dd2e2",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521764858,
            "hunks": 2,
            "message": "Simplify flavor check. Summary: It's not necessary to convert a collection into a stream and use streams APIs when it's possible to perform a simple `containsAll` check. Test Plan: CI Reviewed By: styurin fbshipit-source-id: 54bb326",
            "diff": [
                "diff --git a/src/com/facebook/buck/apple/AppleLibraryDescription.java b/src/com/facebook/buck/apple/AppleLibraryDescription.java",
                "index 7b23d52af9..ada9473d51 100644",
                "--- a/src/com/facebook/buck/apple/AppleLibraryDescription.java",
                "+++ b/src/com/facebook/buck/apple/AppleLibraryDescription.java",
                "@@ -88,3 +88,2 @@ import com.google.common.base.Joiner;",
                " import com.google.common.base.Preconditions;",
                "-import com.google.common.collect.FluentIterable;",
                " import com.google.common.collect.ImmutableCollection;",
                "@@ -242,3 +241,3 @@ public class AppleLibraryDescription",
                "   public boolean hasFlavors(ImmutableSet<Flavor> flavors) {",
                "-    return FluentIterable.from(flavors).allMatch(SUPPORTED_FLAVORS::contains)",
                "+    return SUPPORTED_FLAVORS.containsAll(flavors)",
                "         || cxxLibraryFlavored.hasFlavors(flavors)"
            ],
            "changed_files": [
                "src/com/facebook/buck/apple/AppleLibraryDescription.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "446829766afdfba443c2355dad31baf1574edd2d",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522192316,
            "hunks": 7,
            "message": "Refactor DefaultProcessExecutor waiting for process Summary: Wait for process logic used to have several implementations of waiting for process to finish. Change them to use one consistent method. Reviewed By: sbalabanov fbshipit-source-id: cad4ec2",
            "diff": [
                "diff --git a/src/com/facebook/buck/util/DefaultProcessExecutor.java b/src/com/facebook/buck/util/DefaultProcessExecutor.java",
                "index eb35498584..4612adc37d 100644",
                "--- a/src/com/facebook/buck/util/DefaultProcessExecutor.java",
                "+++ b/src/com/facebook/buck/util/DefaultProcessExecutor.java",
                "@@ -185,3 +185,7 @@ public class DefaultProcessExecutor implements ProcessExecutor {",
                "     Preconditions.checkState(launchedProcess instanceof LaunchedProcessImpl);",
                "-    int exitCode = ((LaunchedProcessImpl) launchedProcess).process.waitFor();",
                "+    Preconditions.checkState(",
                "+        !waitForInternal(",
                "+            ((LaunchedProcessImpl) launchedProcess).process, Optional.empty(), Optional.empty()));",
                "+    int exitCode = ((LaunchedProcessImpl) launchedProcess).process.exitValue();",
                "+",
                "     return new Result(exitCode, false, Optional.empty(), Optional.empty());",
                "@@ -195,3 +199,3 @@ public class DefaultProcessExecutor implements ProcessExecutor {",
                "     Process process = ((LaunchedProcessImpl) launchedProcess).process;",
                "-    boolean timedOut = waitForTimeoutInternal(process, millis, timeOutHandler);",
                "+    boolean timedOut = waitForInternal(process, Optional.of(millis), timeOutHandler);",
                "     int exitCode = !timedOut ? process.exitValue() : 1;",
                "@@ -201,3 +205,4 @@ public class DefaultProcessExecutor implements ProcessExecutor {",
                "   /**",
                "-   * Waits up to {@code millis} milliseconds for the given process to finish.",
                "+   * Waits up to {@code timeoutMillis} milliseconds for the given process to finish. If no timeout",
                "+   * is present, waits forever.",
                "    *",
                "@@ -205,13 +210,17 @@ public class DefaultProcessExecutor implements ProcessExecutor {",
                "    */",
                "-  private boolean waitForTimeoutInternal(",
                "-      Process process, long millis, Optional<Consumer<Process>> timeOutHandler)",
                "+  private boolean waitForInternal(",
                "+      Process process, Optional<Long> timeoutMs, Optional<Consumer<Process>> timeOutHandler)",
                "       throws InterruptedException {",
                "-    if (!process.waitFor(millis, TimeUnit.MILLISECONDS)) {",
                "-      try {",
                "-        timeOutHandler.ifPresent(consumer -> consumer.accept(process));",
                "-      } catch (RuntimeException e1) {",
                "-        LOG.error(e1, \"ProcessExecutor timeOutHandler threw an exception, ignored.\");",
                "+    if (timeoutMs.isPresent()) {",
                "+      if (!process.waitFor(timeoutMs.get(), TimeUnit.MILLISECONDS)) {",
                "+        try {",
                "+          timeOutHandler.ifPresent(consumer -> consumer.accept(process));",
                "+        } catch (RuntimeException e1) {",
                "+          LOG.error(e1, \"ProcessExecutor timeOutHandler threw an exception, ignored.\");",
                "+        }",
                "+        return true;",
                "       }",
                "-      return true;",
                "+    } else {",
                "+      process.waitFor();",
                "     }",
                "@@ -283,11 +292,6 @@ public class DefaultProcessExecutor implements ProcessExecutor {",
                "       // Wait for the process to complete.  If a timeout was given, we wait up to the timeout",
                "-      // for it to finish then force kill it.  If no timeout was given, just wait for it using",
                "-      // the regular `waitFor` method.",
                "-      if (timeOutMs.isPresent()) {",
                "-        timedOut = waitForTimeoutInternal(process, timeOutMs.get(), timeOutHandler);",
                "-        if (!processHelper.hasProcessFinished(process)) {",
                "-          process.destroyForcibly();",
                "-        }",
                "-      } else {",
                "-        process.waitFor();",
                "+      // for it to finish then force kill it.  If no timeout was given, just wait for it forever.",
                "+      timedOut = waitForInternal(process, timeOutMs, timeOutHandler);",
                "+      if (timedOut && !processHelper.hasProcessFinished(process)) {",
                "+        process.destroyForcibly();",
                "       }"
            ],
            "changed_files": [
                "src/com/facebook/buck/util/DefaultProcessExecutor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "3f76302162dd53286ed3ab669c853971e5dc64e0",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521507004,
            "hunks": 103,
            "message": "Remove BuildRuleResolver fields from C++ build rules Summary: After refactoring all the interfaces, we can finally remove the `BuildRuleResolver` fields from C++ `BuildRule`s. Needed for incremental action graph and build rules with providers. Test Plan: CI Reviewed By: bobyangyf fbshipit-source-id: 0bf2ef6",
            "diff": [
                "diff --git a/src/com/facebook/buck/android/NativeLibraryMergeEnhancer.java b/src/com/facebook/buck/android/NativeLibraryMergeEnhancer.java",
                "index 5fe0d020a2..91decaba85 100644",
                "--- a/src/com/facebook/buck/android/NativeLibraryMergeEnhancer.java",
                "+++ b/src/com/facebook/buck/android/NativeLibraryMergeEnhancer.java",
                "@@ -830,3 +830,4 @@ class NativeLibraryMergeEnhancer {",
                "         if (linkable instanceof CxxLibrary) {",
                "-          argsBuilder.addAll(((CxxLibrary) linkable).getExportedLinkerFlags(cxxPlatform));",
                "+          argsBuilder.addAll(",
                "+              ((CxxLibrary) linkable).getExportedLinkerFlags(cxxPlatform, ruleResolver));",
                "         } else if (linkable instanceof PrebuiltCxxLibrary) {",
                "diff --git a/src/com/facebook/buck/apple/AppleLibraryDescriptionSwiftEnhancer.java b/src/com/facebook/buck/apple/AppleLibraryDescriptionSwiftEnhancer.java",
                "index 1603034f07..f10d4b218d 100644",
                "--- a/src/com/facebook/buck/apple/AppleLibraryDescriptionSwiftEnhancer.java",
                "+++ b/src/com/facebook/buck/apple/AppleLibraryDescriptionSwiftEnhancer.java",
                "@@ -116,3 +116,3 @@ public class AppleLibraryDescriptionSwiftEnhancer {",
                "     builder.addAll(transitiveMap.values());",
                "-    builder.add(lib.getPublicCxxPreprocessorInputExcludingDelegate(platform));",
                "+    builder.add(lib.getPublicCxxPreprocessorInputExcludingDelegate(platform, resolver));",
                "diff --git a/src/com/facebook/buck/cxx/AbstractCxxSourceRuleFactory.java b/src/com/facebook/buck/cxx/AbstractCxxSourceRuleFactory.java",
                "index 2d936e9907..caacf72750 100644",
                "--- a/src/com/facebook/buck/cxx/AbstractCxxSourceRuleFactory.java",
                "+++ b/src/com/facebook/buck/cxx/AbstractCxxSourceRuleFactory.java",
                "@@ -570,3 +570,8 @@ abstract class AbstractCxxSourceRuleFactory {",
                "         requirePrecompiledHeaderBuildRule(",
                "-            preprocessorDelegateValue, source.getType(), source.getFlags()));",
                "+            preprocessorDelegateValue,",
                "+            source.getType(),",
                "+            source.getFlags(),",
                "+            getResolver(),",
                "+            getRuleFinder(),",
                "+            getPathResolver()));",
                "   }",
                "@@ -611,3 +616,6 @@ abstract class AbstractCxxSourceRuleFactory {",
                "       CxxSource.Type sourceType,",
                "-      ImmutableList<String> sourceFlags) {",
                "+      ImmutableList<String> sourceFlags,",
                "+      BuildRuleResolver ruleResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      SourcePathResolver pathResolver) {",
                "@@ -626,3 +634,6 @@ abstract class AbstractCxxSourceRuleFactory {",
                "         sourceType,",
                "-        sourceFlags);",
                "+        sourceFlags,",
                "+        ruleResolver,",
                "+        ruleFinder,",
                "+        pathResolver);",
                "   }",
                "diff --git a/src/com/facebook/buck/cxx/AbstractPreIncludeFactory.java b/src/com/facebook/buck/cxx/AbstractPreIncludeFactory.java",
                "index 5865e07806..dc701f8004 100644",
                "--- a/src/com/facebook/buck/cxx/AbstractPreIncludeFactory.java",
                "+++ b/src/com/facebook/buck/cxx/AbstractPreIncludeFactory.java",
                "@@ -97,6 +97,4 @@ abstract class AbstractPreIncludeFactory {",
                "                               ImmutableSortedSet.of(),",
                "-                              getRuleResolver(),",
                "-                              getPathResolver(),",
                "-                              getRuleFinder(),",
                "-                              getPrefixHeader().get())));",
                "+                              getPrefixHeader().get(),",
                "+                              getPathResolver().getAbsolutePath(getPrefixHeader().get()))));",
                "     }",
                "diff --git a/src/com/facebook/buck/cxx/AbstractPrebuiltCxxLibraryGroupDescription.java b/src/com/facebook/buck/cxx/AbstractPrebuiltCxxLibraryGroupDescription.java",
                "index 945e83ae74..ea9a82dcbd 100644",
                "--- a/src/com/facebook/buck/cxx/AbstractPrebuiltCxxLibraryGroupDescription.java",
                "+++ b/src/com/facebook/buck/cxx/AbstractPrebuiltCxxLibraryGroupDescription.java",
                "@@ -40,3 +40,2 @@ import com.facebook.buck.rules.PathSourcePath;",
                " import com.facebook.buck.rules.SourcePath;",
                "-import com.facebook.buck.rules.SourcePathResolver;",
                " import com.facebook.buck.rules.SourcePathRuleFinder;",
                "@@ -167,6 +166,3 @@ abstract class AbstractPrebuiltCxxLibraryGroupDescription",
                "       PrebuiltCxxLibraryGroupDescriptionArg args) {",
                "-    BuildRuleResolver resolverLocal = context.getBuildRuleResolver();",
                "-    SourcePathRuleFinder ruleFinderLocal = new SourcePathRuleFinder(resolverLocal);",
                "-    return new CustomPrebuiltCxxLibrary(",
                "-        buildTarget, context.getProjectFilesystem(), params, resolverLocal, ruleFinderLocal) {",
                "+    return new CustomPrebuiltCxxLibrary(buildTarget, context.getProjectFilesystem(), params) {",
                "@@ -244,2 +240,3 @@ abstract class AbstractPrebuiltCxxLibraryGroupDescription",
                "         }",
                "+        SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(ruleResolver);",
                "         NativeLinkableInput.Builder builder = NativeLinkableInput.builder();",
                "@@ -306,3 +303,3 @@ abstract class AbstractPrebuiltCxxLibraryGroupDescription",
                "           CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "-        return getPreferredLinkage(cxxPlatform, this.ruleResolver) != Linkage.SHARED;",
                "+        return getPreferredLinkage(cxxPlatform, ruleResolver) != Linkage.SHARED;",
                "       }",
                "@@ -349,23 +346,6 @@ abstract class AbstractPrebuiltCxxLibraryGroupDescription",
                "       implements AbstractCxxLibrary, CacheableBuildRule {",
                "-    protected BuildRuleResolver ruleResolver;",
                "-    protected SourcePathRuleFinder ruleFinder;",
                "     public CustomPrebuiltCxxLibrary(",
                "-        BuildTarget buildTarget,",
                "-        ProjectFilesystem projectFilesystem,",
                "-        BuildRuleParams params,",
                "-        BuildRuleResolver ruleResolver,",
                "-        SourcePathRuleFinder ruleFinder) {",
                "+        BuildTarget buildTarget, ProjectFilesystem projectFilesystem, BuildRuleParams params) {",
                "       super(buildTarget, projectFilesystem, params);",
                "-      this.ruleResolver = ruleResolver;",
                "-      this.ruleFinder = ruleFinder;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void updateBuildRuleResolver(",
                "-        BuildRuleResolver ruleResolver,",
                "-        SourcePathRuleFinder ruleFinder,",
                "-        SourcePathResolver pathResolver) {",
                "-      this.ruleResolver = ruleResolver;",
                "-      this.ruleFinder = ruleFinder;",
                "     }",
                "diff --git a/src/com/facebook/buck/cxx/CxxGenrule.java b/src/com/facebook/buck/cxx/CxxGenrule.java",
                "index 427c49ef05..cb27c3cfc0 100644",
                "--- a/src/com/facebook/buck/cxx/CxxGenrule.java",
                "+++ b/src/com/facebook/buck/cxx/CxxGenrule.java",
                "@@ -27,4 +27,2 @@ import com.facebook.buck.rules.NoopBuildRuleWithDeclaredAndExtraDeps;",
                " import com.facebook.buck.rules.SourcePath;",
                "-import com.facebook.buck.rules.SourcePathResolver;",
                "-import com.facebook.buck.rules.SourcePathRuleFinder;",
                " import com.facebook.buck.shell.Genrule;",
                "@@ -35,3 +33,2 @@ public class CxxGenrule extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  private BuildRuleResolver resolver;",
                "   private final String output;",
                "@@ -42,6 +39,4 @@ public class CxxGenrule extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       BuildRuleParams params,",
                "-      BuildRuleResolver resolver,",
                "       String output) {",
                "     super(buildTarget, projectFilesystem, params);",
                "-    this.resolver = resolver;",
                "     this.output = output;",
                "@@ -54,16 +49,9 @@ public class CxxGenrule extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  public SourcePath getGenrule(CxxPlatform cxxPlatform) {",
                "+  /** Get the genrule */",
                "+  public SourcePath getGenrule(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     Genrule rule =",
                "         (Genrule)",
                "-            resolver.requireRule(getBuildTarget().withAppendedFlavors(cxxPlatform.getFlavor()));",
                "+            ruleResolver.requireRule(getBuildTarget().withAppendedFlavors(cxxPlatform.getFlavor()));",
                "     return rule.getSourcePathToOutput();",
                "   }",
                "-",
                "-  @Override",
                "-  public void updateBuildRuleResolver(",
                "-      BuildRuleResolver ruleResolver,",
                "-      SourcePathRuleFinder ruleFinder,",
                "-      SourcePathResolver pathResolver) {",
                "-    this.resolver = ruleResolver;",
                "-  }",
                " }",
                "diff --git a/src/com/facebook/buck/cxx/CxxGenruleDescription.java b/src/com/facebook/buck/cxx/CxxGenruleDescription.java",
                "index 86fe6f9fc1..65aee4e81f 100644",
                "--- a/src/com/facebook/buck/cxx/CxxGenruleDescription.java",
                "+++ b/src/com/facebook/buck/cxx/CxxGenruleDescription.java",
                "@@ -289,8 +289,3 @@ public class CxxGenruleDescription extends AbstractGenruleDescription<CxxGenrule",
                "     }",
                "-    return new CxxGenrule(",
                "-        buildTarget,",
                "-        context.getProjectFilesystem(),",
                "-        params,",
                "-        context.getBuildRuleResolver(),",
                "-        args.getOut());",
                "+    return new CxxGenrule(buildTarget, context.getProjectFilesystem(), params, args.getOut());",
                "   }",
                "diff --git a/src/com/facebook/buck/cxx/CxxInferEnhancer.java b/src/com/facebook/buck/cxx/CxxInferEnhancer.java",
                "index 33bae8e5e3..3eeae40955 100644",
                "--- a/src/com/facebook/buck/cxx/CxxInferEnhancer.java",
                "+++ b/src/com/facebook/buck/cxx/CxxInferEnhancer.java",
                "@@ -269,3 +269,5 @@ public final class CxxInferEnhancer {",
                "           depsBuilder.add(",
                "-              (ruleClass.cast(library.requireBuildRule(requiredFlavor, cxxPlatform.getFlavor()))));",
                "+              (ruleClass.cast(",
                "+                  library.requireBuildRule(",
                "+                      ruleResolver, requiredFlavor, cxxPlatform.getFlavor()))));",
                "           return buildRule.getBuildDeps();",
                "diff --git a/src/com/facebook/buck/cxx/CxxLibrary.java b/src/com/facebook/buck/cxx/CxxLibrary.java",
                "index ce6e27a247..f0c04fb47c 100644",
                "--- a/src/com/facebook/buck/cxx/CxxLibrary.java",
                "+++ b/src/com/facebook/buck/cxx/CxxLibrary.java",
                "@@ -45,2 +45,3 @@ import com.facebook.buck.rules.coercer.FrameworkPath;",
                " import com.facebook.buck.util.RichStream;",
                "+import com.facebook.buck.util.concurrent.Parallelizer;",
                " import com.facebook.buck.util.function.QuadFunction;",
                "@@ -77,4 +78,2 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  private BuildRuleResolver ruleResolver;",
                "-  private SourcePathRuleFinder ruleFinder;",
                "   private Set<BuildRule> implicitDepsForCaching = Sets.newConcurrentHashSet();",
                "@@ -116,3 +115,3 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       BuildRuleParams params,",
                "-      BuildRuleResolver ruleResolver,",
                "+      Parallelizer preprocessorInputCacheParallelizer,",
                "       CxxDeps deps,",
                "@@ -138,4 +137,2 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "     super(buildTarget, projectFilesystem, params);",
                "-    this.ruleResolver = ruleResolver;",
                "-    this.ruleFinder = new SourcePathRuleFinder(ruleResolver);",
                "     this.deps = deps;",
                "@@ -157,3 +154,3 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "     this.transitiveCxxPreprocessorInputCache =",
                "-        new TransitiveCxxPreprocessorInputCache(this, ruleResolver.getParallelizer());",
                "+        new TransitiveCxxPreprocessorInputCache(this, preprocessorInputCacheParallelizer);",
                "   }",
                "@@ -181,3 +178,3 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   private CxxPreprocessorInput getCxxPreprocessorInput(",
                "-      CxxPlatform cxxPlatform, HeaderVisibility headerVisibility) {",
                "+      CxxPlatform cxxPlatform, HeaderVisibility headerVisibility, BuildRuleResolver ruleResolver) {",
                "     // Handle via metadata query.",
                "@@ -190,2 +187,3 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "     // for the action graph cache.",
                "+    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(ruleResolver);",
                "     for (BuildRule dep : preprocessorInput.getDeps(ruleResolver, ruleFinder)) {",
                "@@ -201,3 +199,3 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "     CxxPreprocessorInput publicHeaders =",
                "-        getPublicCxxPreprocessorInputExcludingDelegate(cxxPlatform);",
                "+        getPublicCxxPreprocessorInputExcludingDelegate(cxxPlatform, ruleResolver);",
                "     Optional<CxxPreprocessorInput> pluginHeaders =",
                "@@ -216,4 +214,4 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   public CxxPreprocessorInput getPublicCxxPreprocessorInputExcludingDelegate(",
                "-      CxxPlatform cxxPlatform) {",
                "-    return getCxxPreprocessorInput(cxxPlatform, HeaderVisibility.PUBLIC);",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+    return getCxxPreprocessorInput(cxxPlatform, HeaderVisibility.PUBLIC, ruleResolver);",
                "   }",
                "@@ -224,3 +222,3 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "     CxxPreprocessorInput privateInput =",
                "-        getCxxPreprocessorInput(cxxPlatform, HeaderVisibility.PRIVATE);",
                "+        getCxxPreprocessorInput(cxxPlatform, HeaderVisibility.PRIVATE, ruleResolver);",
                "     Optional<CxxPreprocessorInput> delegateInput =",
                "@@ -349,2 +347,3 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "                 requireBuildRule(",
                "+                    ruleResolver,",
                "                     cxxPlatform.getFlavor(),",
                "@@ -368,2 +367,3 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "             requireBuildRule(",
                "+                ruleResolver,",
                "                 cxxPlatform.getFlavor(),",
                "@@ -403,3 +403,4 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  public BuildRule requireBuildRule(Flavor... flavors) {",
                "+  /** Require a flavored version of this build rule */",
                "+  public BuildRule requireBuildRule(BuildRuleResolver ruleResolver, Flavor... flavors) {",
                "     BuildRule buildRule = ruleResolver.requireRule(getBuildTarget().withAppendedFlavors(flavors));",
                "@@ -455,3 +456,4 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "     BuildRule sharedLibraryBuildRule =",
                "-        requireBuildRule(cxxPlatform.getFlavor(), CxxDescriptionEnhancer.SHARED_FLAVOR);",
                "+        requireBuildRule(",
                "+            ruleResolver, cxxPlatform.getFlavor(), CxxDescriptionEnhancer.SHARED_FLAVOR);",
                "     libs.put(sharedLibrarySoname, sharedLibraryBuildRule.getSourcePathToOutput());",
                "@@ -511,3 +513,4 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  public Iterable<? extends Arg> getExportedLinkerFlags(CxxPlatform cxxPlatform) {",
                "+  public Iterable<? extends Arg> getExportedLinkerFlags(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     return exportedLinkerFlags.apply(cxxPlatform, ruleResolver);",
                "@@ -519,11 +522,2 @@ public class CxxLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   }",
                "-",
                "-  @Override",
                "-  public void updateBuildRuleResolver(",
                "-      BuildRuleResolver ruleResolver,",
                "-      SourcePathRuleFinder ruleFinder,",
                "-      SourcePathResolver pathResolver) {",
                "-    this.ruleResolver = ruleResolver;",
                "-    this.ruleFinder = ruleFinder;",
                "-  }",
                " }",
                "diff --git a/src/com/facebook/buck/cxx/CxxLibraryFactory.java b/src/com/facebook/buck/cxx/CxxLibraryFactory.java",
                "index 04200548b1..853a46e020 100644",
                "--- a/src/com/facebook/buck/cxx/CxxLibraryFactory.java",
                "+++ b/src/com/facebook/buck/cxx/CxxLibraryFactory.java",
                "@@ -271,3 +271,3 @@ public class CxxLibraryFactory {",
                "         metadataRuleParams,",
                "-        resolver,",
                "+        resolver.getParallelizer(),",
                "         args.getPrivateCxxDeps(),",
                "diff --git a/src/com/facebook/buck/cxx/CxxPrecompiledHeaderDescription.java b/src/com/facebook/buck/cxx/CxxPrecompiledHeaderDescription.java",
                "index 535cfc8323..fc29374903 100644",
                "--- a/src/com/facebook/buck/cxx/CxxPrecompiledHeaderDescription.java",
                "+++ b/src/com/facebook/buck/cxx/CxxPrecompiledHeaderDescription.java",
                "@@ -55,6 +55,4 @@ public class CxxPrecompiledHeaderDescription",
                "         ruleResolver.getAllRules(args.getDeps()),",
                "-        ruleResolver,",
                "-        pathResolver,",
                "-        ruleFinder,",
                "-        args.getSrc());",
                "+        args.getSrc(),",
                "+        pathResolver.getAbsolutePath(args.getSrc()));",
                "   }",
                "diff --git a/src/com/facebook/buck/cxx/CxxPrecompiledHeaderTemplate.java b/src/com/facebook/buck/cxx/CxxPrecompiledHeaderTemplate.java",
                "index 705877eb78..79787ed086 100644",
                "--- a/src/com/facebook/buck/cxx/CxxPrecompiledHeaderTemplate.java",
                "+++ b/src/com/facebook/buck/cxx/CxxPrecompiledHeaderTemplate.java",
                "@@ -32,2 +32,3 @@ import com.google.common.collect.ImmutableList;",
                " import com.google.common.collect.ImmutableSortedSet;",
                "+import java.nio.file.Path;",
                " import java.util.Optional;",
                "@@ -47,7 +48,5 @@ public class CxxPrecompiledHeaderTemplate extends PreInclude {",
                "       ImmutableSortedSet<BuildRule> deps,",
                "-      BuildRuleResolver ruleResolver,",
                "-      SourcePathResolver pathResolver,",
                "-      SourcePathRuleFinder ruleFinder,",
                "-      SourcePath sourcePath) {",
                "-    super(buildTarget, projectFilesystem, deps, ruleResolver, pathResolver, ruleFinder, sourcePath);",
                "+      SourcePath sourcePath,",
                "+      Path absoluteHeaderPath) {",
                "+    super(buildTarget, projectFilesystem, deps, sourcePath, absoluteHeaderPath);",
                "   }",
                "@@ -72,3 +71,6 @@ public class CxxPrecompiledHeaderTemplate extends PreInclude {",
                "       CxxSource.Type sourceType,",
                "-      ImmutableList<String> sourceFlags) {",
                "+      ImmutableList<String> sourceFlags,",
                "+      BuildRuleResolver ruleResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      SourcePathResolver pathResolver) {",
                "@@ -89,3 +91,4 @@ public class CxxPrecompiledHeaderTemplate extends PreInclude {",
                "     PreprocessorDelegate preprocessorDelegate =",
                "-        buildPreprocessorDelegate(cxxPlatform, preprocessor, compilerFlags);",
                "+        buildPreprocessorDelegate(",
                "+            cxxPlatform, preprocessor, compilerFlags, ruleResolver, pathResolver);",
                "@@ -100,3 +103,3 @@ public class CxxPrecompiledHeaderTemplate extends PreInclude {",
                "-    depsBuilder.add(requireAggregatedDepsRule(cxxPlatform));",
                "+    depsBuilder.add(requireAggregatedDepsRule(cxxPlatform, ruleResolver, ruleFinder));",
                "     depsBuilder.add(preprocessorDelegate);",
                "@@ -112,4 +115,4 @@ public class CxxPrecompiledHeaderTemplate extends PreInclude {",
                "         ImmutableSortedSet.of(",
                "-            cxxPlatform.getFlavor(),",
                "-            InternalFlavor.of(Flavor.replaceInvalidCharacters(pchBaseID))));",
                "+            cxxPlatform.getFlavor(), InternalFlavor.of(Flavor.replaceInvalidCharacters(pchBaseID))),",
                "+        ruleResolver);",
                "   }",
                "diff --git a/src/com/facebook/buck/cxx/CxxPrefixHeader.java b/src/com/facebook/buck/cxx/CxxPrefixHeader.java",
                "index c85ee02a9d..9d023d8a55 100644",
                "--- a/src/com/facebook/buck/cxx/CxxPrefixHeader.java",
                "+++ b/src/com/facebook/buck/cxx/CxxPrefixHeader.java",
                "@@ -31,2 +31,3 @@ import com.google.common.collect.ImmutableList;",
                " import com.google.common.collect.ImmutableSortedSet;",
                "+import java.nio.file.Path;",
                " import java.util.function.Function;",
                "@@ -42,7 +43,5 @@ public class CxxPrefixHeader extends PreInclude {",
                "       ImmutableSortedSet<BuildRule> deps,",
                "-      BuildRuleResolver ruleResolver,",
                "-      SourcePathResolver pathResolver,",
                "-      SourcePathRuleFinder ruleFinder,",
                "-      SourcePath sourcePath) {",
                "-    super(buildTarget, projectFilesystem, deps, ruleResolver, pathResolver, ruleFinder, sourcePath);",
                "+      SourcePath sourcePath,",
                "+      Path absoluteHeaderPath) {",
                "+    super(buildTarget, projectFilesystem, deps, sourcePath, absoluteHeaderPath);",
                "   }",
                "@@ -59,3 +58,6 @@ public class CxxPrefixHeader extends PreInclude {",
                "       CxxSource.Type sourceType,",
                "-      ImmutableList<String> sourceFlags) {",
                "+      ImmutableList<String> sourceFlags,",
                "+      BuildRuleResolver ruleResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      SourcePathResolver pathResolver) {",
                "@@ -82,4 +84,4 @@ public class CxxPrefixHeader extends PreInclude {",
                "         ImmutableSortedSet.of(",
                "-            cxxPlatform.getFlavor(),",
                "-            InternalFlavor.of(Flavor.replaceInvalidCharacters(pchFullID))));",
                "+            cxxPlatform.getFlavor(), InternalFlavor.of(Flavor.replaceInvalidCharacters(pchFullID))),",
                "+        ruleResolver);",
                "   }",
                "diff --git a/src/com/facebook/buck/cxx/PreInclude.java b/src/com/facebook/buck/cxx/PreInclude.java",
                "index 4faadbc9c6..09ffe01438 100644",
                "--- a/src/com/facebook/buck/cxx/PreInclude.java",
                "+++ b/src/com/facebook/buck/cxx/PreInclude.java",
                "@@ -63,6 +63,2 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  protected BuildRuleResolver ruleResolver;",
                "-  protected SourcePathRuleFinder ruleFinder;",
                "-  protected SourcePathResolver pathResolver;",
                "-",
                "   /**",
                "@@ -87,12 +83,7 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       ImmutableSortedSet<BuildRule> deps,",
                "-      BuildRuleResolver ruleResolver,",
                "-      SourcePathResolver pathResolver,",
                "-      SourcePathRuleFinder ruleFinder,",
                "-      SourcePath sourcePath) {",
                "+      SourcePath sourcePath,",
                "+      Path absoluteHeaderPath) {",
                "     super(buildTarget, projectFilesystem, makeBuildRuleParams(deps));",
                "-    this.ruleResolver = ruleResolver;",
                "-    this.pathResolver = pathResolver;",
                "-    this.ruleFinder = ruleFinder;",
                "     this.sourcePath = sourcePath;",
                "-    this.absoluteHeaderPath = pathResolver.getAbsolutePath(sourcePath);",
                "+    this.absoluteHeaderPath = absoluteHeaderPath;",
                "   }",
                "@@ -198,3 +189,4 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  private ImmutableList<CxxPreprocessorInput> getCxxPreprocessorInputs(CxxPlatform cxxPlatform) {",
                "+  private ImmutableList<CxxPreprocessorInput> getCxxPreprocessorInputs(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "     ImmutableList.Builder<CxxPreprocessorInput> builder = ImmutableList.builder();",
                "@@ -207,4 +199,5 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  private ImmutableList<CxxHeaders> getIncludes(CxxPlatform cxxPlatform) {",
                "-    return getCxxPreprocessorInputs(cxxPlatform)",
                "+  private ImmutableList<CxxHeaders> getIncludes(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+    return getCxxPreprocessorInputs(cxxPlatform, ruleResolver)",
                "         .stream()",
                "@@ -214,4 +207,5 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  private ImmutableSet<FrameworkPath> getFrameworks(CxxPlatform cxxPlatform) {",
                "-    return getCxxPreprocessorInputs(cxxPlatform)",
                "+  private ImmutableSet<FrameworkPath> getFrameworks(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+    return getCxxPreprocessorInputs(cxxPlatform, ruleResolver)",
                "         .stream()",
                "@@ -221,11 +215,12 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  private ImmutableSortedSet<BuildRule> getPreprocessDeps(CxxPlatform cxxPlatform) {",
                "+  private ImmutableSortedSet<BuildRule> getPreprocessDeps(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver, SourcePathRuleFinder ruleFinder) {",
                "     ImmutableSortedSet.Builder<BuildRule> builder = ImmutableSortedSet.naturalOrder();",
                "-    for (CxxPreprocessorInput input : getCxxPreprocessorInputs(cxxPlatform)) {",
                "+    for (CxxPreprocessorInput input : getCxxPreprocessorInputs(cxxPlatform, ruleResolver)) {",
                "       builder.addAll(input.getDeps(ruleResolver, ruleFinder));",
                "     }",
                "-    for (CxxHeaders cxxHeaders : getIncludes(cxxPlatform)) {",
                "+    for (CxxHeaders cxxHeaders : getIncludes(cxxPlatform, ruleResolver)) {",
                "       cxxHeaders.getDeps(ruleFinder).forEachOrdered(builder::add);",
                "     }",
                "-    for (FrameworkPath frameworkPath : getFrameworks(cxxPlatform)) {",
                "+    for (FrameworkPath frameworkPath : getFrameworks(cxxPlatform, ruleResolver)) {",
                "       builder.addAll(frameworkPath.getDeps(ruleFinder));",
                "@@ -248,3 +243,4 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "    */",
                "-  protected DependencyAggregation requireAggregatedDepsRule(CxxPlatform cxxPlatform) {",
                "+  protected DependencyAggregation requireAggregatedDepsRule(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver, SourcePathRuleFinder ruleFinder) {",
                "     return (DependencyAggregation)",
                "@@ -254,3 +250,5 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "                 new DependencyAggregation(",
                "-                    depAggTarget, getProjectFilesystem(), getPreprocessDeps(cxxPlatform)));",
                "+                    depAggTarget,",
                "+                    getProjectFilesystem(),",
                "+                    getPreprocessDeps(cxxPlatform, ruleResolver, ruleFinder)));",
                "   }",
                "@@ -259,3 +257,7 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   protected PreprocessorDelegate buildPreprocessorDelegate(",
                "-      CxxPlatform cxxPlatform, Preprocessor preprocessor, CxxToolFlags preprocessorFlags) {",
                "+      CxxPlatform cxxPlatform,",
                "+      Preprocessor preprocessor,",
                "+      CxxToolFlags preprocessorFlags,",
                "+      BuildRuleResolver ruleResolver,",
                "+      SourcePathResolver pathResolver) {",
                "     return new PreprocessorDelegate(",
                "@@ -268,4 +270,4 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "             preprocessorFlags,",
                "-            getIncludes(cxxPlatform),",
                "-            getFrameworks(cxxPlatform)),",
                "+            getIncludes(cxxPlatform, ruleResolver),",
                "+            getFrameworks(cxxPlatform, ruleResolver)),",
                "         CxxDescriptionEnhancer.frameworkPathToSearchPath(cxxPlatform, pathResolver),",
                "@@ -284,3 +286,6 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       CxxSource.Type sourceType,",
                "-      ImmutableList<String> sourceFlags);",
                "+      ImmutableList<String> sourceFlags,",
                "+      BuildRuleResolver ruleResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      SourcePathResolver pathResolver);",
                "@@ -302,3 +307,4 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "       UnflavoredBuildTarget templateTarget,",
                "-      ImmutableSortedSet<Flavor> flavors) {",
                "+      ImmutableSortedSet<Flavor> flavors,",
                "+      BuildRuleResolver ruleResolver) {",
                "     return (CxxPrecompiledHeader)",
                "@@ -342,12 +348,2 @@ public abstract class PreInclude extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   }",
                "-",
                "-  @Override",
                "-  public void updateBuildRuleResolver(",
                "-      BuildRuleResolver ruleResolver,",
                "-      SourcePathRuleFinder ruleFinder,",
                "-      SourcePathResolver pathResolver) {",
                "-    this.ruleResolver = ruleResolver;",
                "-    this.ruleFinder = ruleFinder;",
                "-    this.pathResolver = pathResolver;",
                "-  }",
                " }",
                "diff --git a/src/com/facebook/buck/cxx/PrebuiltCxxLibrary.java b/src/com/facebook/buck/cxx/PrebuiltCxxLibrary.java",
                "index e3406113da..88f39d7c8f 100644",
                "--- a/src/com/facebook/buck/cxx/PrebuiltCxxLibrary.java",
                "+++ b/src/com/facebook/buck/cxx/PrebuiltCxxLibrary.java",
                "@@ -27,4 +27,2 @@ import com.facebook.buck.rules.NoopBuildRuleWithDeclaredAndExtraDeps;",
                " import com.facebook.buck.rules.SourcePath;",
                "-import com.facebook.buck.rules.SourcePathResolver;",
                "-import com.facebook.buck.rules.SourcePathRuleFinder;",
                " import com.google.common.collect.ImmutableList;",
                "@@ -35,11 +33,5 @@ public abstract class PrebuiltCxxLibrary extends NoopBuildRuleWithDeclaredAndExt",
                "-  protected BuildRuleResolver ruleResolver;",
                "-",
                "   PrebuiltCxxLibrary(",
                "-      BuildTarget buildTarget,",
                "-      ProjectFilesystem projectFilesystem,",
                "-      BuildRuleParams params,",
                "-      BuildRuleResolver ruleResolver) {",
                "+      BuildTarget buildTarget, ProjectFilesystem projectFilesystem, BuildRuleParams params) {",
                "     super(buildTarget, projectFilesystem, params);",
                "-    this.ruleResolver = ruleResolver;",
                "   }",
                "@@ -48,13 +40,7 @@ public abstract class PrebuiltCxxLibrary extends NoopBuildRuleWithDeclaredAndExt",
                "-  abstract Optional<SourcePath> getStaticLibrary(CxxPlatform cxxPlatform);",
                "-",
                "-  abstract Optional<SourcePath> getStaticPicLibrary(CxxPlatform cxxPlatform);",
                "+  abstract Optional<SourcePath> getStaticLibrary(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver);",
                "-  @Override",
                "-  public void updateBuildRuleResolver(",
                "-      BuildRuleResolver ruleResolver,",
                "-      SourcePathRuleFinder ruleFinder,",
                "-      SourcePathResolver pathResolver) {",
                "-    this.ruleResolver = ruleResolver;",
                "-  }",
                "+  abstract Optional<SourcePath> getStaticPicLibrary(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver);",
                " }",
                "diff --git a/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java b/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "index 75db071ecd..d9ba9cdf27 100644",
                "--- a/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "+++ b/src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "@@ -435,3 +435,3 @@ public class PrebuiltCxxLibraryDescription",
                "     CellPathResolver cellRoots = context.getCellPathResolver();",
                "-    BuildRuleResolver ruleResolverLocal = context.getBuildRuleResolver();",
                "+    BuildRuleResolver ruleResolver = context.getBuildRuleResolver();",
                "     // If we *are* building a specific type of this lib, call into the type specific",
                "@@ -447,4 +447,4 @@ public class PrebuiltCxxLibraryDescription",
                "             projectFilesystem,",
                "-            new SourcePathRuleFinder(ruleResolverLocal),",
                "-            ruleResolverLocal,",
                "+            new SourcePathRuleFinder(ruleResolver),",
                "+            ruleResolver,",
                "             platform.get().getValue(),",
                "@@ -456,3 +456,3 @@ public class PrebuiltCxxLibraryDescription",
                "             params,",
                "-            ruleResolverLocal,",
                "+            ruleResolver,",
                "             cellRoots,",
                "@@ -466,3 +466,3 @@ public class PrebuiltCxxLibraryDescription",
                "             projectFilesystem,",
                "-            ruleResolverLocal,",
                "+            ruleResolver,",
                "             cellRoots,",
                "@@ -490,3 +490,3 @@ public class PrebuiltCxxLibraryDescription",
                "     PrebuiltCxxLibraryPaths paths = getPaths(buildTarget, args, versionSubdir);",
                "-    return new PrebuiltCxxLibrary(buildTarget, projectFilesystem, params, ruleResolverLocal) {",
                "+    return new PrebuiltCxxLibrary(buildTarget, projectFilesystem, params) {",
                "@@ -549,3 +549,4 @@ public class PrebuiltCxxLibraryDescription",
                "        */",
                "-      private SourcePath requireSharedLibrary(CxxPlatform cxxPlatform, boolean link) {",
                "+      private SourcePath requireSharedLibrary(",
                "+          CxxPlatform cxxPlatform, boolean link, BuildRuleResolver ruleResolver) {",
                "         if (link",
                "@@ -575,3 +576,4 @@ public class PrebuiltCxxLibraryDescription",
                "       @Override",
                "-      Optional<SourcePath> getStaticLibrary(CxxPlatform cxxPlatform) {",
                "+      Optional<SourcePath> getStaticLibrary(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "         return paths.getStaticLibrary(",
                "@@ -585,3 +587,4 @@ public class PrebuiltCxxLibraryDescription",
                "       @Override",
                "-      Optional<SourcePath> getStaticPicLibrary(CxxPlatform cxxPlatform) {",
                "+      Optional<SourcePath> getStaticPicLibrary(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "         Optional<SourcePath> staticPicLibraryPath =",
                "@@ -592,3 +595,3 @@ public class PrebuiltCxxLibraryDescription",
                "             ? staticPicLibraryPath",
                "-            : getStaticLibrary(cxxPlatform);",
                "+            : getStaticLibrary(cxxPlatform, ruleResolver);",
                "       }",
                "@@ -693,3 +696,3 @@ public class PrebuiltCxxLibraryDescription",
                "                 getPreferredLinkage(cxxPlatform, ruleResolver) != Linkage.STATIC);",
                "-            SourcePath sharedLibrary = requireSharedLibrary(cxxPlatform, true);",
                "+            SourcePath sharedLibrary = requireSharedLibrary(cxxPlatform, true, ruleResolver);",
                "             if (args.getLinkWithoutSoname()) {",
                "@@ -701,3 +704,4 @@ public class PrebuiltCxxLibraryDescription",
                "             } else {",
                "-              linkerArgsBuilder.add(SourcePathArg.of(requireSharedLibrary(cxxPlatform, true)));",
                "+              linkerArgsBuilder.add(",
                "+                  SourcePathArg.of(requireSharedLibrary(cxxPlatform, true, ruleResolver)));",
                "             }",
                "@@ -708,4 +712,4 @@ public class PrebuiltCxxLibraryDescription",
                "                 type == Linker.LinkableDepType.STATIC_PIC",
                "-                    ? getStaticPicLibrary(cxxPlatform)",
                "-                    : getStaticLibrary(cxxPlatform);",
                "+                    ? getStaticPicLibrary(cxxPlatform, ruleResolver)",
                "+                    : getStaticLibrary(cxxPlatform, ruleResolver);",
                "             SourcePathArg staticLibrary =",
                "@@ -762,3 +766,3 @@ public class PrebuiltCxxLibraryDescription",
                "         Optional<Linkage> inferredLinkage =",
                "-            paths.getLinkage(projectFilesystem, this.ruleResolver, cellRoots, cxxPlatform);",
                "+            paths.getLinkage(projectFilesystem, ruleResolver, cellRoots, cxxPlatform);",
                "         if (inferredLinkage.isPresent()) {",
                "@@ -773,3 +777,3 @@ public class PrebuiltCxxLibraryDescription",
                "         return args.getSupportsMergedLinking()",
                "-            .orElse(getPreferredLinkage(cxxPlatform, this.ruleResolver) != Linkage.SHARED);",
                "+            .orElse(getPreferredLinkage(cxxPlatform, ruleResolver) != Linkage.SHARED);",
                "       }",
                "@@ -800,3 +804,3 @@ public class PrebuiltCxxLibraryDescription",
                "         if (!args.isHeaderOnly() && !args.isProvided()) {",
                "-          SourcePath sharedLibrary = requireSharedLibrary(cxxPlatform, false);",
                "+          SourcePath sharedLibrary = requireSharedLibrary(cxxPlatform, false, ruleResolver);",
                "           solibs.put(resolvedSoname, sharedLibrary);",
                "@@ -809,3 +813,3 @@ public class PrebuiltCxxLibraryDescription",
                "           CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "-        if (getPreferredLinkage(cxxPlatform, this.ruleResolver) == Linkage.SHARED) {",
                "+        if (getPreferredLinkage(cxxPlatform, ruleResolver) == Linkage.SHARED) {",
                "           return Optional.empty();",
                "@@ -844,3 +848,5 @@ public class PrebuiltCxxLibraryDescription",
                "                             .resolve(ruleResolver)",
                "-                            .linkWhole(SourcePathArg.of(getStaticPicLibrary(cxxPlatform).get())))",
                "+                            .linkWhole(",
                "+                                SourcePathArg.of(",
                "+                                    getStaticPicLibrary(cxxPlatform, ruleResolver).get())))",
                "                     .build();",
                "diff --git a/test/com/facebook/buck/cxx/CxxGenruleDescriptionTest.java b/test/com/facebook/buck/cxx/CxxGenruleDescriptionTest.java",
                "index a05adcdf0d..e001348791 100644",
                "--- a/test/com/facebook/buck/cxx/CxxGenruleDescriptionTest.java",
                "+++ b/test/com/facebook/buck/cxx/CxxGenruleDescriptionTest.java",
                "@@ -275,3 +275,3 @@ public class CxxGenruleDescriptionTest {",
                "             ruleFinder",
                "-                .getRule(rule.getGenrule(CxxPlatformUtils.DEFAULT_PLATFORM))",
                "+                .getRule(rule.getGenrule(CxxPlatformUtils.DEFAULT_PLATFORM, resolver))",
                "                 .orElseThrow(AssertionError::new);",
                "@@ -281,3 +281,3 @@ public class CxxGenruleDescriptionTest {",
                "             pathResolver",
                "-                .getAbsolutePath(dep.getGenrule(CxxPlatformUtils.DEFAULT_PLATFORM))",
                "+                .getAbsolutePath(dep.getGenrule(CxxPlatformUtils.DEFAULT_PLATFORM, resolver))",
                "                 .toString()));",
                "diff --git a/test/com/facebook/buck/cxx/CxxLibraryTest.java b/test/com/facebook/buck/cxx/CxxLibraryTest.java",
                "index b6665c26be..4f542a008a 100644",
                "--- a/test/com/facebook/buck/cxx/CxxLibraryTest.java",
                "+++ b/test/com/facebook/buck/cxx/CxxLibraryTest.java",
                "@@ -190,3 +190,3 @@ public class CxxLibraryTest {",
                "             params,",
                "-            ruleResolver,",
                "+            ruleResolver.getParallelizer(),",
                "             CxxDeps.of(),",
                "diff --git a/test/com/facebook/buck/cxx/CxxLocationMacroExpanderTest.java b/test/com/facebook/buck/cxx/CxxLocationMacroExpanderTest.java",
                "index 1fdcdbee0d..8c3c68b305 100644",
                "--- a/test/com/facebook/buck/cxx/CxxLocationMacroExpanderTest.java",
                "+++ b/test/com/facebook/buck/cxx/CxxLocationMacroExpanderTest.java",
                "@@ -61,3 +61,3 @@ public class CxxLocationMacroExpanderTest {",
                "             pathResolver",
                "-                .getAbsolutePath(cxxGenrule.getGenrule(CxxPlatformUtils.DEFAULT_PLATFORM))",
                "+                .getAbsolutePath(cxxGenrule.getGenrule(CxxPlatformUtils.DEFAULT_PLATFORM, resolver))",
                "                 .toString()));",
                "diff --git a/test/com/facebook/buck/cxx/CxxPrecompiledHeaderRuleTest.java b/test/com/facebook/buck/cxx/CxxPrecompiledHeaderRuleTest.java",
                "index 6168b4e4a1..02e3d697cd 100644",
                "--- a/test/com/facebook/buck/cxx/CxxPrecompiledHeaderRuleTest.java",
                "+++ b/test/com/facebook/buck/cxx/CxxPrecompiledHeaderRuleTest.java",
                "@@ -154,6 +154,4 @@ public class CxxPrecompiledHeaderRuleTest {",
                "         deps,",
                "-        ruleResolver,",
                "-        pathResolver,",
                "-        ruleFinder,",
                "-        headerSourcePath);",
                "+        headerSourcePath,",
                "+        pathResolver.getAbsolutePath(headerSourcePath));",
                "   }",
                "diff --git a/test/com/facebook/buck/cxx/PrebuiltCxxLibraryDescriptionTest.java b/test/com/facebook/buck/cxx/PrebuiltCxxLibraryDescriptionTest.java",
                "index 93063f6a07..530d78664b 100644",
                "--- a/test/com/facebook/buck/cxx/PrebuiltCxxLibraryDescriptionTest.java",
                "+++ b/test/com/facebook/buck/cxx/PrebuiltCxxLibraryDescriptionTest.java",
                "@@ -267,3 +267,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     SourcePath staticLibraryPath =",
                "-        library.getStaticLibrary(CxxPlatformUtils.DEFAULT_PLATFORM).get();",
                "+        library.getStaticLibrary(CxxPlatformUtils.DEFAULT_PLATFORM, resolver).get();",
                "     assertThat(",
                "@@ -291,3 +291,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     SourcePath staticLibraryPath =",
                "-        library.getStaticLibrary(CxxPlatformUtils.DEFAULT_PLATFORM).get();",
                "+        library.getStaticLibrary(CxxPlatformUtils.DEFAULT_PLATFORM, resolver).get();",
                "     assertThat(",
                "@@ -295,3 +295,4 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "         Matchers.equalTo(",
                "-            pathResolver.getAbsolutePath(genrule.getGenrule(CxxPlatformUtils.DEFAULT_PLATFORM))));",
                "+            pathResolver.getAbsolutePath(",
                "+                genrule.getGenrule(CxxPlatformUtils.DEFAULT_PLATFORM, resolver))));",
                "   }",
                "@@ -311,3 +312,3 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     SourcePath staticLibraryPath =",
                "-        library.getStaticLibrary(CxxPlatformUtils.DEFAULT_PLATFORM).get();",
                "+        library.getStaticLibrary(CxxPlatformUtils.DEFAULT_PLATFORM, resolver).get();",
                "     assertThat(",
                "@@ -390,6 +391,6 @@ public class PrebuiltCxxLibraryDescriptionTest {",
                "     assertThat(",
                "-        pathResolver.getRelativePath(library.getStaticLibrary(platform1).get()),",
                "+        pathResolver.getRelativePath(library.getStaticLibrary(platform1, resolver).get()),",
                "         Matchers.equalTo(TARGET.getBasePath().resolve(\"libs/PLATFORM1/libtest-PLATFORM1.a\")));",
                "     assertThat(",
                "-        pathResolver.getRelativePath(library.getStaticLibrary(platform2).get()),",
                "+        pathResolver.getRelativePath(library.getStaticLibrary(platform2, resolver).get()),",
                "         Matchers.equalTo(TARGET.getBasePath().resolve(\"libs/PLATFORM2/libtest-PLATFORM2.a\")));",
                "diff --git a/test/com/facebook/buck/cxx/PrebuiltCxxLibraryGroupDescriptionTest.java b/test/com/facebook/buck/cxx/PrebuiltCxxLibraryGroupDescriptionTest.java",
                "index 784b515513..3038754484 100644",
                "--- a/test/com/facebook/buck/cxx/PrebuiltCxxLibraryGroupDescriptionTest.java",
                "+++ b/test/com/facebook/buck/cxx/PrebuiltCxxLibraryGroupDescriptionTest.java",
                "@@ -244,3 +244,3 @@ public class PrebuiltCxxLibraryGroupDescriptionTest {",
                "             CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, resolver);",
                "-    SourcePath lib = cxxGenrule.getGenrule(CxxPlatformUtils.DEFAULT_PLATFORM);",
                "+    SourcePath lib = cxxGenrule.getGenrule(CxxPlatformUtils.DEFAULT_PLATFORM, resolver);",
                "     assertThat(input.getArgs(), Matchers.contains(SourcePathArg.of(lib)));",
                "diff --git a/test/com/facebook/buck/python/PythonLibraryDescriptionTest.java b/test/com/facebook/buck/python/PythonLibraryDescriptionTest.java",
                "index 47748879b0..dda5b6c347 100644",
                "--- a/test/com/facebook/buck/python/PythonLibraryDescriptionTest.java",
                "+++ b/test/com/facebook/buck/python/PythonLibraryDescriptionTest.java",
                "@@ -276,3 +276,3 @@ public class PythonLibraryDescriptionTest {",
                "         components.getModules().values(),",
                "-        Matchers.contains(src.getGenrule(CxxPlatformUtils.DEFAULT_PLATFORM)));",
                "+        Matchers.contains(src.getGenrule(CxxPlatformUtils.DEFAULT_PLATFORM, resolver)));",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/android/NativeLibraryMergeEnhancer.java",
                "src/com/facebook/buck/apple/AppleLibraryDescriptionSwiftEnhancer.java",
                "src/com/facebook/buck/cxx/AbstractCxxSourceRuleFactory.java",
                "src/com/facebook/buck/cxx/AbstractPreIncludeFactory.java",
                "src/com/facebook/buck/cxx/AbstractPrebuiltCxxLibraryGroupDescription.java",
                "src/com/facebook/buck/cxx/CxxGenrule.java",
                "src/com/facebook/buck/cxx/CxxGenruleDescription.java",
                "src/com/facebook/buck/cxx/CxxInferEnhancer.java",
                "src/com/facebook/buck/cxx/CxxLibrary.java",
                "src/com/facebook/buck/cxx/CxxLibraryFactory.java",
                "src/com/facebook/buck/cxx/CxxPrecompiledHeaderDescription.java",
                "src/com/facebook/buck/cxx/CxxPrecompiledHeaderTemplate.java",
                "src/com/facebook/buck/cxx/CxxPrefixHeader.java",
                "src/com/facebook/buck/cxx/PreInclude.java",
                "src/com/facebook/buck/cxx/PrebuiltCxxLibrary.java",
                "src/com/facebook/buck/cxx/PrebuiltCxxLibraryDescription.java",
                "test/com/facebook/buck/cxx/CxxGenruleDescriptionTest.java",
                "test/com/facebook/buck/cxx/CxxLibraryTest.java",
                "test/com/facebook/buck/cxx/CxxLocationMacroExpanderTest.java",
                "test/com/facebook/buck/cxx/CxxPrecompiledHeaderRuleTest.java",
                "test/com/facebook/buck/cxx/PrebuiltCxxLibraryDescriptionTest.java",
                "test/com/facebook/buck/cxx/PrebuiltCxxLibraryGroupDescriptionTest.java",
                "test/com/facebook/buck/python/PythonLibraryDescriptionTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "aafc95a1a49c813d60898ed5e889aefa1ee2a1b8",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522136537,
            "hunks": 33,
            "message": "ocaml: add support for `platform_deps` parameter Summary: As per the support for Haskell, C/C++, etc, this adds a `platform_deps` parameter to all OCaml rules. Reviewed By: ttsugriy fbshipit-source-id: 523fbf4",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/BUCK b/src/com/facebook/buck/ocaml/BUCK",
                "index 7ec3e42dd8..7e6507796d 100644",
                "--- a/src/com/facebook/buck/ocaml/BUCK",
                "+++ b/src/com/facebook/buck/ocaml/BUCK",
                "@@ -5,2 +5,5 @@ java_library_with_plugins(",
                "     srcs = glob([\"*.java\"]),",
                "+    exported_deps = [",
                "+        \"//src/com/facebook/buck/rules:rules\",",
                "+    ],",
                "     tests = [",
                "@@ -23,3 +26,2 @@ java_library_with_plugins(",
                "         \"//src/com/facebook/buck/rules:interfaces\",",
                "-        \"//src/com/facebook/buck/rules:rules\",",
                "         \"//src/com/facebook/buck/rules:source_path\",",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "index 7f8042321e..11b3ec12cf 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.ocaml;",
                "+import com.facebook.buck.cxx.CxxDeps;",
                " import com.facebook.buck.model.BuildTarget;",
                "@@ -29,2 +30,3 @@ import com.facebook.buck.rules.args.Arg;",
                " import com.facebook.buck.rules.coercer.OcamlSource;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                " import com.facebook.buck.rules.macros.StringWithMacros;",
                "@@ -67,2 +69,5 @@ public class OcamlBinaryDescription",
                "+    CxxDeps allDeps =",
                "+        CxxDeps.builder().addDeps(args.getDeps()).addPlatformDeps(args.getPlatformDeps()).build();",
                "+",
                "     ImmutableList<OcamlSource> srcs = args.getSrcs();",
                "@@ -90,6 +95,3 @@ public class OcamlBinaryDescription",
                "               context.getBuildRuleResolver(),",
                "-              args.getDeps()",
                "-                  .stream()",
                "-                  .map(context.getBuildRuleResolver()::getRule)",
                "-                  .collect(ImmutableList.toImmutableList()),",
                "+              allDeps.get(context.getBuildRuleResolver(), ocamlPlatform.getCxxPlatform()),",
                "               srcs,",
                "@@ -111,6 +113,3 @@ public class OcamlBinaryDescription",
                "               context.getBuildRuleResolver(),",
                "-              args.getDeps()",
                "-                  .stream()",
                "-                  .map(context.getBuildRuleResolver()::getRule)",
                "-                  .collect(ImmutableList.toImmutableList()),",
                "+              allDeps.get(context.getBuildRuleResolver(), ocamlPlatform.getCxxPlatform()),",
                "               srcs,",
                "@@ -163,2 +162,7 @@ public class OcamlBinaryDescription",
                "     Optional<Boolean> getBytecodeOnly();",
                "+",
                "+    @Value.Default",
                "+    default PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> getPlatformDeps() {",
                "+      return PatternMatchedCollection.of();",
                "+    }",
                "   }",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "index 6b6ca26a51..a7d41edff5 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.ocaml;",
                "+import com.facebook.buck.cxx.CxxDeps;",
                " import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                "@@ -36,5 +37,5 @@ import com.facebook.buck.rules.args.Arg;",
                " import com.facebook.buck.rules.coercer.OcamlSource;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                " import com.facebook.buck.rules.macros.StringWithMacros;",
                " import com.facebook.buck.toolchain.ToolchainProvider;",
                "-import com.facebook.buck.util.RichStream;",
                " import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "@@ -74,2 +75,5 @@ public class OcamlLibraryDescription",
                "+    CxxDeps allDeps =",
                "+        CxxDeps.builder().addDeps(args.getDeps()).addPlatformDeps(args.getPlatformDeps()).build();",
                "+",
                "     OcamlToolchain ocamlToolchain =",
                "@@ -104,6 +108,3 @@ public class OcamlLibraryDescription",
                "                 context.getBuildRuleResolver(),",
                "-                args.getDeps()",
                "-                    .stream()",
                "-                    .map(context.getBuildRuleResolver()::getRule)",
                "-                    .collect(ImmutableList.toImmutableList()),",
                "+                allDeps.get(context.getBuildRuleResolver(), ocamlPlatform.getCxxPlatform()),",
                "                 srcs,",
                "@@ -143,6 +144,3 @@ public class OcamlLibraryDescription",
                "                 context.getBuildRuleResolver(),",
                "-                args.getDeps()",
                "-                    .stream()",
                "-                    .map(context.getBuildRuleResolver()::getRule)",
                "-                    .collect(ImmutableList.toImmutableList()),",
                "+                allDeps.get(context.getBuildRuleResolver(), ocamlPlatform.getCxxPlatform()),",
                "                 srcs,",
                "@@ -222,5 +220,3 @@ public class OcamlLibraryDescription",
                "       public Iterable<BuildRule> getOcamlLibraryDeps(OcamlPlatform platform) {",
                "-        return RichStream.from(args.getDeps())",
                "-            .map(context.getBuildRuleResolver()::getRule)",
                "-            .toImmutableList();",
                "+        return allDeps.get(context.getBuildRuleResolver(), platform.getCxxPlatform());",
                "       }",
                "@@ -275,2 +271,7 @@ public class OcamlLibraryDescription",
                "     }",
                "+",
                "+    @Value.Default",
                "+    default PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> getPlatformDeps() {",
                "+      return PatternMatchedCollection.of();",
                "+    }",
                "   }",
                "diff --git a/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java b/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java",
                "index 52818d8c72..bb096c28f4 100644",
                "--- a/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java",
                "+++ b/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.ocaml;",
                "+import com.facebook.buck.cxx.CxxDeps;",
                " import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                "@@ -51,3 +52,3 @@ class PrebuiltOcamlLibrary extends OcamlLibrary {",
                "-  private final ImmutableList<BuildRule> deps;",
                "+  private final CxxDeps deps;",
                "@@ -64,3 +65,3 @@ class PrebuiltOcamlLibrary extends OcamlLibrary {",
                "       Path includeDir,",
                "-      ImmutableList<BuildRule> deps) {",
                "+      CxxDeps deps) {",
                "     super(buildTarget, projectFilesystem, params);",
                "@@ -131,3 +132,3 @@ class PrebuiltOcamlLibrary extends OcamlLibrary {",
                "   public Iterable<BuildRule> getOcamlLibraryDeps(OcamlPlatform platform) {",
                "-    return deps;",
                "+    return deps.get(ruleFinder.getRuleResolver(), platform.getCxxPlatform());",
                "   }",
                "diff --git a/src/com/facebook/buck/ocaml/PrebuiltOcamlLibraryDescription.java b/src/com/facebook/buck/ocaml/PrebuiltOcamlLibraryDescription.java",
                "index 21bbc79485..1e8d505d32 100644",
                "--- a/src/com/facebook/buck/ocaml/PrebuiltOcamlLibraryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/PrebuiltOcamlLibraryDescription.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.ocaml;",
                "+import com.facebook.buck.cxx.CxxDeps;",
                " import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "@@ -28,3 +29,3 @@ import com.facebook.buck.rules.SourcePath;",
                " import com.facebook.buck.rules.SourcePathRuleFinder;",
                "-import com.facebook.buck.util.RichStream;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                " import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "@@ -32,2 +33,3 @@ import com.facebook.buck.versions.VersionPropagator;",
                " import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                " import java.nio.file.Path;",
                "@@ -82,2 +84,5 @@ public class PrebuiltOcamlLibraryDescription",
                "+    CxxDeps allDeps =",
                "+        CxxDeps.builder().addDeps(args.getDeps()).addPlatformDeps(args.getPlatformDeps()).build();",
                "+",
                "     return new PrebuiltOcamlLibrary(",
                "@@ -93,5 +98,3 @@ public class PrebuiltOcamlLibraryDescription",
                "         includeDir,",
                "-        RichStream.from(args.getDeps())",
                "-            .map(context.getBuildRuleResolver()::getRule)",
                "-            .collect(ImmutableList.toImmutableList()));",
                "+        allDeps);",
                "   }",
                "@@ -134,2 +137,7 @@ public class PrebuiltOcamlLibraryDescription",
                "     }",
                "+",
                "+    @Value.Default",
                "+    PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> getPlatformDeps() {",
                "+      return PatternMatchedCollection.of();",
                "+    }",
                "   }",
                "diff --git a/test/com/facebook/buck/cxx/toolchain/BUCK b/test/com/facebook/buck/cxx/toolchain/BUCK",
                "index 334aae4263..851f3711fb 100644",
                "--- a/test/com/facebook/buck/cxx/toolchain/BUCK",
                "+++ b/test/com/facebook/buck/cxx/toolchain/BUCK",
                "@@ -8,2 +8,5 @@ java_library(",
                "     ),",
                "+    exported_deps = [",
                "+        \"//src/com/facebook/buck/cxx/toolchain:toolchain\",",
                "+    ],",
                "     visibility = [",
                "@@ -13,3 +16,2 @@ java_library(",
                "         \"//src/com/facebook/buck/config:config\",",
                "-        \"//src/com/facebook/buck/cxx/toolchain:toolchain\",",
                "         \"//src/com/facebook/buck/cxx/toolchain/linker:linker\",",
                "diff --git a/test/com/facebook/buck/ocaml/BUCK b/test/com/facebook/buck/ocaml/BUCK",
                "index b2498620f5..abf84bb39e 100644",
                "--- a/test/com/facebook/buck/ocaml/BUCK",
                "+++ b/test/com/facebook/buck/ocaml/BUCK",
                "@@ -2,2 +2,19 @@ load(\"//tools/build_rules:java_rules.bzl\", \"standard_java_test\")",
                "+java_library(",
                "+    name = \"testutil\",",
                "+    srcs = glob(",
                "+        [\"*.java\"],",
                "+        exclude = [\"*Test.java\"],",
                "+    ),",
                "+    deps = [",
                "+        \"//src/com/facebook/buck/model:model\",",
                "+        \"//src/com/facebook/buck/ocaml:ocaml\",",
                "+        \"//src/com/facebook/buck/rules/coercer:coercer\",",
                "+        \"//test/com/facebook/buck/cxx/toolchain:testutil\",",
                "+        \"//test/com/facebook/buck/rules:testutil\",",
                "+        \"//test/com/facebook/buck/testutil/integration:util\",",
                "+        \"//test/com/facebook/buck/toolchain/impl:testutil\",",
                "+    ],",
                "+)",
                "+",
                " standard_java_test(",
                "@@ -6,2 +23,3 @@ standard_java_test(",
                "     deps = [",
                "+        \":testutil\",",
                "         \"//src-gen:thrift\",",
                "diff --git a/test/com/facebook/buck/ocaml/OcamlLibraryBuilder.java b/test/com/facebook/buck/ocaml/OcamlLibraryBuilder.java",
                "new file mode 100644",
                "index 0000000000..2d6fdc7d27",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/ocaml/OcamlLibraryBuilder.java",
                "@@ -0,0 +1,53 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.ocaml;",
                "+",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.AbstractNodeBuilder;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                "+import com.facebook.buck.toolchain.impl.ToolchainProviderBuilder;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+",
                "+public class OcamlLibraryBuilder",
                "+    extends AbstractNodeBuilder<",
                "+        OcamlLibraryDescriptionArg.Builder, OcamlLibraryDescriptionArg, OcamlLibraryDescription,",
                "+        OcamlLibrary> {",
                "+",
                "+  public OcamlLibraryBuilder(BuildTarget target, OcamlPlatform defaultPlatform) {",
                "+    super(",
                "+        new OcamlLibraryDescription(",
                "+            new ToolchainProviderBuilder()",
                "+                .withToolchain(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.of(defaultPlatform))",
                "+                .build()),",
                "+        target);",
                "+  }",
                "+",
                "+  public OcamlLibraryBuilder(BuildTarget target) {",
                "+    this(target, OcamlTestUtils.DEFAULT_PLATFORM);",
                "+  }",
                "+",
                "+  public OcamlLibraryBuilder setDeps(ImmutableSortedSet<BuildTarget> deps) {",
                "+    getArgForPopulating().setDeps(deps);",
                "+    return this;",
                "+  }",
                "+",
                "+  public OcamlLibraryBuilder setPlatformDeps(",
                "+      PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> platformDeps) {",
                "+    getArgForPopulating().setPlatformDeps(platformDeps);",
                "+    return this;",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/ocaml/OcamlLibraryDescriptionTest.java b/test/com/facebook/buck/ocaml/OcamlLibraryDescriptionTest.java",
                "new file mode 100644",
                "index 0000000000..2c4590b4ff",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/ocaml/OcamlLibraryDescriptionTest.java",
                "@@ -0,0 +1,66 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.ocaml;",
                "+",
                "+import static org.hamcrest.Matchers.not;",
                "+import static org.junit.Assert.assertThat;",
                "+",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.TargetGraph;",
                "+import com.facebook.buck.rules.TestBuildRuleResolver;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                "+import com.facebook.buck.testutil.TargetGraphFactory;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.util.regex.Pattern;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Test;",
                "+",
                "+public class OcamlLibraryDescriptionTest {",
                "+",
                "+  @Test",
                "+  public void platformDeps() {",
                "+    OcamlLibraryBuilder depABuilder =",
                "+        new OcamlLibraryBuilder(BuildTargetFactory.newInstance(\"//:depA\"));",
                "+    OcamlLibraryBuilder depBBuilder =",
                "+        new OcamlLibraryBuilder(BuildTargetFactory.newInstance(\"//:depB\"));",
                "+    OcamlLibraryBuilder ruleBuilder =",
                "+        new OcamlLibraryBuilder(BuildTargetFactory.newInstance(\"//:rule\"))",
                "+            .setPlatformDeps(",
                "+                PatternMatchedCollection.<ImmutableSortedSet<BuildTarget>>builder()",
                "+                    .add(",
                "+                        Pattern.compile(",
                "+                            OcamlTestUtils.DEFAULT_PLATFORM.getFlavor().toString(),",
                "+                            Pattern.LITERAL),",
                "+                        ImmutableSortedSet.of(depABuilder.getTarget()))",
                "+                    .add(",
                "+                        Pattern.compile(\"matches nothing\", Pattern.LITERAL),",
                "+                        ImmutableSortedSet.of(depBBuilder.getTarget()))",
                "+                    .build());",
                "+    TargetGraph targetGraph =",
                "+        TargetGraphFactory.newInstance(",
                "+            depABuilder.build(), depBBuilder.build(), ruleBuilder.build());",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    OcamlLibrary depA = (OcamlLibrary) resolver.requireRule(depABuilder.getTarget());",
                "+    OcamlLibrary depB = (OcamlLibrary) resolver.requireRule(depBBuilder.getTarget());",
                "+    OcamlLibrary rule = (OcamlLibrary) resolver.requireRule(ruleBuilder.getTarget());",
                "+    assertThat(",
                "+        rule.getOcamlLibraryDeps(OcamlTestUtils.DEFAULT_PLATFORM),",
                "+        Matchers.allOf(Matchers.hasItem(depA), not(Matchers.hasItem(depB))));",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/ocaml/OcamlTestUtils.java b/test/com/facebook/buck/ocaml/OcamlTestUtils.java",
                "new file mode 100644",
                "index 0000000000..13c2bde885",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/ocaml/OcamlTestUtils.java",
                "@@ -0,0 +1,34 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.ocaml;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+",
                "+public class OcamlTestUtils {",
                "+",
                "+  public static final OcamlPlatform DEFAULT_PLATFORM =",
                "+      OcamlPlatform.builder()",
                "+          .setCCompiler(CxxPlatformUtils.DEFAULT_PLATFORM.getCc())",
                "+          .setCxxCompiler(CxxPlatformUtils.DEFAULT_PLATFORM.getCxx())",
                "+          .setCPreprocessor(CxxPlatformUtils.DEFAULT_PLATFORM.getCpp())",
                "+          .setCxxPlatform(CxxPlatformUtils.DEFAULT_PLATFORM)",
                "+          .build();",
                "+",
                "+  public static final FlavorDomain<OcamlPlatform> DEFAULT_PLATFORMS =",
                "+      FlavorDomain.of(\"OCaml Platform\", DEFAULT_PLATFORM);",
                "+}"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/BUCK",
                "src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java",
                "src/com/facebook/buck/ocaml/PrebuiltOcamlLibraryDescription.java",
                "test/com/facebook/buck/cxx/toolchain/BUCK",
                "test/com/facebook/buck/ocaml/BUCK",
                "test/com/facebook/buck/ocaml/OcamlLibraryBuilder.java",
                "test/com/facebook/buck/ocaml/OcamlLibraryDescriptionTest.java",
                "test/com/facebook/buck/ocaml/OcamlTestUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ee1f85e316012cc1b1f5002d94293c4c2df9fa8b",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522433897,
            "hunks": 1,
            "message": "Fix NullPointerException in testng Summary: TestNG would crash with NullPointerException when the method regex is not null. This is fix. Reviewed By: jtorkkola fbshipit-source-id: c71cd2d",
            "diff": [
                "diff --git a/test/com/facebook/buck/testrunner/TestNGIntegrationTest.java b/test/com/facebook/buck/testrunner/TestNGIntegrationTest.java",
                "index 28e08fa5f7..4834f31841 100644",
                "--- a/test/com/facebook/buck/testrunner/TestNGIntegrationTest.java",
                "+++ b/test/com/facebook/buck/testrunner/TestNGIntegrationTest.java",
                "@@ -86,2 +86,13 @@ public class TestNGIntegrationTest {",
                "   }",
                "+",
                "+  @Test",
                "+  public void emptyMethodSelectorsRunsTests() throws IOException {",
                "+    ProcessResult filteredTestNGTestResult =",
                "+        workspace.runBuckCommand(\"test\", \"//test:\", \"-f\", \"SimpleTest#$\");",
                "+    filteredTestNGTestResult.assertSuccess(); // should run SimpleTest",
                "+    assertThat(filteredTestNGTestResult.getStderr(), containsString(\"SimpleTest\"));",
                "+    assertThat(filteredTestNGTestResult.getStderr(), containsString(\"2 Passed\"));",
                "+",
                "+    assertThat(filteredTestNGTestResult.getStderr(), not(containsString(\"SimpleFailingTest\")));",
                "+  }",
                " }"
            ],
            "changed_files": [
                "test/com/facebook/buck/testrunner/TestNGIntegrationTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "20e04b65413385efd0a27d63cdf12478fdd12443",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522737609,
            "hunks": 3,
            "message": "change flaky to timeout Summary: `canStartupMultipleWorkersInParallel` does not always succeed with `join(500)`. Here, we increase the timeout duration, and switch from a timed `join()` to a test timeout. Closes https://github.com/facebook/buck/pull/1827 Reviewed By: ttsugriy, davidaurelio Pulled By: davidaurelio fbshipit-source-id: 66e942f",
            "diff": [
                "diff --git a/test/com/facebook/buck/worker/WorkerProcessPoolTest.java b/test/com/facebook/buck/worker/WorkerProcessPoolTest.java",
                "index ace5537e04..b028da0dbc 100644",
                "--- a/test/com/facebook/buck/worker/WorkerProcessPoolTest.java",
                "+++ b/test/com/facebook/buck/worker/WorkerProcessPoolTest.java",
                "@@ -47,3 +47,3 @@ public class WorkerProcessPoolTest {",
                "-  private static final int WAIT_FOR_TEST_THREADS_TIMEOUT = 500;",
                "+  private static final int WAIT_FOR_TEST_THREADS_TIMEOUT = 1000;",
                "   private TestThreads testThreads;",
                "@@ -180,3 +180,3 @@ public class WorkerProcessPoolTest {",
                "-  @Test",
                "+  @Test(timeout = WAIT_FOR_TEST_THREADS_TIMEOUT)",
                "   public void canStartupMultipleWorkersInParallel() throws InterruptedException, IOException {",
                "@@ -200,3 +200,3 @@ public class WorkerProcessPoolTest {",
                "-    secondThread.join(WAIT_FOR_TEST_THREADS_TIMEOUT);",
                "+    secondThread.join();"
            ],
            "changed_files": [
                "test/com/facebook/buck/worker/WorkerProcessPoolTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c7c26f712b2a593548ca869a2e438e28ac3657bd",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521521149,
            "hunks": 18,
            "message": "Properly discover platform specific resources. Summary: Since `platform_deps` are marked as target only, the logic responsible for resource resolution could not discover them. Since we cannot simply add all of them as direct dependencies as it would result in all of them being built, platform is propagated and used to select only platform deps matching the target platform. Test Plan: CI Reviewed By: styurin fbshipit-source-id: 9e3082e",
            "diff": [
                "diff --git a/src/com/facebook/buck/apple/AppleBuildRules.java b/src/com/facebook/buck/apple/AppleBuildRules.java",
                "index 0cda380d09..069ddcdece 100644",
                "--- a/src/com/facebook/buck/apple/AppleBuildRules.java",
                "+++ b/src/com/facebook/buck/apple/AppleBuildRules.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.apple;",
                "+import com.facebook.buck.apple.toolchain.AppleCxxPlatform;",
                " import com.facebook.buck.cxx.CxxLibraryDescription;",
                "@@ -134,3 +135,3 @@ public final class AppleBuildRules {",
                "         getRecursiveTargetNodeDependenciesOfTypes(",
                "-            targetGraph, cache, mode, targetNode, isDependencyNode);",
                "+            targetGraph, cache, mode, targetNode, isDependencyNode, Optional.empty());",
                "@@ -148,3 +149,4 @@ public final class AppleBuildRules {",
                "       TargetNode<?, ?> targetNode,",
                "-      Predicate<TargetNode<?, ?>> isDependencyNode) {",
                "+      Predicate<TargetNode<?, ?>> isDependencyNode,",
                "+      Optional<AppleCxxPlatform> appleCxxPlatform) {",
                "@@ -176,3 +178,4 @@ public final class AppleBuildRules {",
                "                 ImmutableSortedSet.naturalOrder();",
                "-            addDirectAndExportedDeps(targetGraph, node, defaultDepsBuilder, exportedDepsBuilder);",
                "+            addDirectAndExportedDeps(",
                "+                targetGraph, node, defaultDepsBuilder, exportedDepsBuilder, appleCxxPlatform);",
                "             defaultDeps = defaultDepsBuilder.build();",
                "@@ -198,3 +201,4 @@ public final class AppleBuildRules {",
                "                     editedDeps,",
                "-                    editedExportedDeps);",
                "+                    editedExportedDeps,",
                "+                    appleCxxPlatform);",
                "               } else {",
                "@@ -284,3 +288,4 @@ public final class AppleBuildRules {",
                "       ImmutableSortedSet.Builder<TargetNode<?, ?>> directDepsBuilder,",
                "-      ImmutableSortedSet.Builder<TargetNode<?, ?>> exportedDepsBuilder) {",
                "+      ImmutableSortedSet.Builder<TargetNode<?, ?>> exportedDepsBuilder,",
                "+      Optional<AppleCxxPlatform> appleCxxPlatform) {",
                "     directDepsBuilder.addAll(targetGraph.getAll(targetNode.getBuildDepsStream()::iterator));",
                "@@ -302,2 +307,12 @@ public final class AppleBuildRules {",
                "     }",
                "+    // if target platform is known, we should discover targets that match it to make sure that",
                "+    // all resources are properly discovered and added to the final apple_bundle",
                "+    if (appleCxxPlatform.isPresent()",
                "+        && targetNode.getDescription() instanceof AppleLibraryDescription) {",
                "+      AppleLibraryDescriptionArg arg = (AppleLibraryDescriptionArg) targetNode.getConstructorArg();",
                "+      for (ImmutableSortedSet<BuildTarget> deps :",
                "+          arg.getPlatformDeps().getMatchingValues(appleCxxPlatform.get().getFlavor().toString())) {",
                "+        directDepsBuilder.addAll(targetGraph.getAll(deps));",
                "+      }",
                "+    }",
                "   }",
                "diff --git a/src/com/facebook/buck/apple/AppleDependenciesCache.java b/src/com/facebook/buck/apple/AppleDependenciesCache.java",
                "index 7e453906f2..66614111eb 100644",
                "--- a/src/com/facebook/buck/apple/AppleDependenciesCache.java",
                "+++ b/src/com/facebook/buck/apple/AppleDependenciesCache.java",
                "@@ -24,2 +24,3 @@ import com.google.common.cache.LoadingCache;",
                " import com.google.common.collect.ImmutableSortedSet;",
                "+import java.util.Optional;",
                "@@ -59,3 +60,7 @@ public class AppleDependenciesCache {",
                "                       AppleBuildRules.addDirectAndExportedDeps(",
                "-                          projectGraph, node, defaultDepsBuilder, exportedDepsBuilder);",
                "+                          projectGraph,",
                "+                          node,",
                "+                          defaultDepsBuilder,",
                "+                          exportedDepsBuilder,",
                "+                          Optional.empty());",
                "                       return new CacheItem(defaultDepsBuilder.build(), exportedDepsBuilder.build());",
                "diff --git a/src/com/facebook/buck/apple/AppleDescriptions.java b/src/com/facebook/buck/apple/AppleDescriptions.java",
                "index 62fe9f4c93..41601ce50a 100644",
                "--- a/src/com/facebook/buck/apple/AppleDescriptions.java",
                "+++ b/src/com/facebook/buck/apple/AppleDescriptions.java",
                "@@ -592,3 +592,7 @@ public class AppleDescriptions {",
                "         AppleResources.collectResourceDirsAndFiles(",
                "-            targetGraph, resolver, Optional.empty(), targetGraph.get(buildTarget));",
                "+            targetGraph,",
                "+            resolver,",
                "+            Optional.empty(),",
                "+            targetGraph.get(buildTarget),",
                "+            appleCxxPlatform);",
                "diff --git a/src/com/facebook/buck/apple/AppleResources.java b/src/com/facebook/buck/apple/AppleResources.java",
                "index 88d5ab1823..62f7a11d96 100644",
                "--- a/src/com/facebook/buck/apple/AppleResources.java",
                "+++ b/src/com/facebook/buck/apple/AppleResources.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.apple;",
                "+import com.facebook.buck.apple.toolchain.AppleCxxPlatform;",
                " import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "@@ -63,3 +64,4 @@ public class AppleResources {",
                "       Optional<AppleDependenciesCache> cache,",
                "-      TargetNode<T, ?> targetNode) {",
                "+      TargetNode<T, ?> targetNode,",
                "+      AppleCxxPlatform appleCxxPlatform) {",
                "     AppleBundleResources.Builder builder = AppleBundleResources.builder();",
                "@@ -72,3 +74,4 @@ public class AppleResources {",
                "             targetNode,",
                "-            IS_APPLE_BUNDLE_RESOURCE_NODE);",
                "+            IS_APPLE_BUNDLE_RESOURCE_NODE,",
                "+            Optional.of(appleCxxPlatform));",
                "     ProjectFilesystem filesystem = targetNode.getFilesystem();",
                "diff --git a/test/com/facebook/buck/apple/AppleBuildRulesTest.java b/test/com/facebook/buck/apple/AppleBuildRulesTest.java",
                "index 234d487c23..6faa55230b 100644",
                "--- a/test/com/facebook/buck/apple/AppleBuildRulesTest.java",
                "+++ b/test/com/facebook/buck/apple/AppleBuildRulesTest.java",
                "@@ -311,3 +311,4 @@ public class AppleBuildRulesTest {",
                "               fooFrameworkNode,",
                "-              IS_APPLE_BUNDLE_RESOURCE_NODE);",
                "+              IS_APPLE_BUNDLE_RESOURCE_NODE,",
                "+              Optional.empty());",
                "@@ -321,3 +322,4 @@ public class AppleBuildRulesTest {",
                "               barAppNode,",
                "-              IS_APPLE_BUNDLE_RESOURCE_NODE);",
                "+              IS_APPLE_BUNDLE_RESOURCE_NODE,",
                "+              Optional.empty());",
                "diff --git a/test/com/facebook/buck/apple/AppleBundleIntegrationTest.java b/test/com/facebook/buck/apple/AppleBundleIntegrationTest.java",
                "index e187906fa8..f4dd718975 100644",
                "--- a/test/com/facebook/buck/apple/AppleBundleIntegrationTest.java",
                "+++ b/test/com/facebook/buck/apple/AppleBundleIntegrationTest.java",
                "@@ -1341,2 +1341,18 @@ public class AppleBundleIntegrationTest {",
                "+  @Test",
                "+  public void bundleTraversesAppleResourceResourcesFromPlatformDepsForAdditionalResources()",
                "+      throws IOException {",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(",
                "+            this, \"app_bundle_with_resources_from_deps\", tmp);",
                "+    workspace.setUp();",
                "+    Path outputPath = workspace.buildAndReturnOutput(\"//:mybundle#iphonesimulator-x86_64\");",
                "+    assertTrue(",
                "+        \"Resource file matching platform should exist.\",",
                "+        Files.isRegularFile(outputPath.resolve(\"sim.txt\")));",
                "+    assertFalse(",
                "+        \"Resource file not matching platform should not exist.\",",
                "+        Files.isRegularFile(outputPath.resolve(\"device.txt\")));",
                "+  }",
                "+",
                "   @Test",
                "diff --git a/test/com/facebook/buck/apple/testdata/app_bundle_with_resources_from_deps/BUCK.fixture b/test/com/facebook/buck/apple/testdata/app_bundle_with_resources_from_deps/BUCK.fixture",
                "index 06589685fe..501ea1fe53 100644",
                "--- a/test/com/facebook/buck/apple/testdata/app_bundle_with_resources_from_deps/BUCK.fixture",
                "+++ b/test/com/facebook/buck/apple/testdata/app_bundle_with_resources_from_deps/BUCK.fixture",
                "@@ -40 +40,48 @@ apple_resource(",
                " )",
                "+",
                "+export_file(",
                "+    name = \"sim.txt\",",
                "+)",
                "+",
                "+export_file(",
                "+    name = \"device.txt\",",
                "+)",
                "+",
                "+apple_resource(",
                "+    name = \"simresource\",",
                "+    files = [\":sim.txt\"],",
                "+)",
                "+",
                "+apple_resource(",
                "+    name = \"deviceresource\",",
                "+    files = [\":device.txt\"],",
                "+)",
                "+",
                "+apple_library(",
                "+    name = \"PlatformDepsWrapper\",",
                "+    platform_deps = [",
                "+        (",
                "+            \"iphonesimulator\",",
                "+            [\":simresource\"],",
                "+        ),",
                "+        (",
                "+            \"iphoneos\",",
                "+            [\":deviceresource\"],",
                "+        ),",
                "+    ],",
                "+)",
                "+",
                "+apple_library(",
                "+    name = \"unimportantbinary\",",
                "+    srcs = [\"dummy.c\"],",
                "+)",
                "+",
                "+apple_bundle(",
                "+    name = \"mybundle\",",
                "+    binary = \":unimportantbinary#shared\",",
                "+    extension = \"framework\",",
                "+    info_plist = \"Info.plist\",",
                "+    product_name = \"unimportantbinary\",",
                "+    visibility = [\"PUBLIC\"],",
                "+    deps = [\":PlatformDepsWrapper\"],",
                "+)",
                "diff --git a/test/com/facebook/buck/apple/testdata/app_bundle_with_resources_from_deps/dummy.c b/test/com/facebook/buck/apple/testdata/app_bundle_with_resources_from_deps/dummy.c",
                "new file mode 100644",
                "index 0000000000..98087447e8",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/apple/testdata/app_bundle_with_resources_from_deps/dummy.c",
                "@@ -0,0 +1 @@",
                "+void foo() {}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "src/com/facebook/buck/apple/AppleBuildRules.java",
                "src/com/facebook/buck/apple/AppleDependenciesCache.java",
                "src/com/facebook/buck/apple/AppleDescriptions.java",
                "src/com/facebook/buck/apple/AppleResources.java",
                "test/com/facebook/buck/apple/AppleBuildRulesTest.java",
                "test/com/facebook/buck/apple/AppleBundleIntegrationTest.java",
                "test/com/facebook/buck/apple/testdata/app_bundle_with_resources_from_deps/BUCK.fixture",
                "test/com/facebook/buck/apple/testdata/app_bundle_with_resources_from_deps/dummy.c"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, cache",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e989079f56e0c460ca1a5a82debd92c43d0a204c",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522693327,
            "hunks": 5,
            "message": "Add delegate filesystem Summary: This change adds a wrapper filesystem that delegates calls to default file system. This is a foundation for next change which will replace Path implementation thru this wrapper. Reviewed By: jtorkkola fbshipit-source-id: b5649af",
            "diff": [
                "diff --git a/programs/buck_tool.py b/programs/buck_tool.py",
                "index 929b03c3be..03676c512c 100644",
                "--- a/programs/buck_tool.py",
                "+++ b/programs/buck_tool.py",
                "@@ -635,3 +635,5 @@ class BuckTool(object):",
                "                 \"-Dbuck.git_commit_timestamp={0}\".format(self._get_buck_version_timestamp()),",
                "-                \"-Dbuck.binary_hash={0}\".format(self._get_buck_binary_hash())",
                "+                \"-Dbuck.binary_hash={0}\".format(self._get_buck_binary_hash()),",
                "+                \"-Djava.nio.file.spi.DefaultFileSystemProvider=\"",
                "+                \"com.facebook.buck.cli.bootstrapper.filesystem.BuckFileSystemProvider\",",
                "             ]",
                "diff --git a/src/com/facebook/buck/cli/bootstrapper/BUCK b/src/com/facebook/buck/cli/bootstrapper/BUCK",
                "index 274fbee359..9a8297ed53 100644",
                "--- a/src/com/facebook/buck/cli/bootstrapper/BUCK",
                "+++ b/src/com/facebook/buck/cli/bootstrapper/BUCK",
                "@@ -10,2 +10,3 @@ java_binary(",
                "         \":bootstrapper_lib\",",
                "+        \"//src/com/facebook/buck/cli/bootstrapper/filesystem:filesystem_lib\",",
                "     ],",
                "diff --git a/src/com/facebook/buck/cli/bootstrapper/filesystem/BUCK b/src/com/facebook/buck/cli/bootstrapper/filesystem/BUCK",
                "new file mode 100644",
                "index 0000000000..784c4950bd",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/cli/bootstrapper/filesystem/BUCK",
                "@@ -0,0 +1,8 @@",
                "+java_library(",
                "+    name = \"filesystem_lib\",",
                "+    srcs = glob([\"*.java\"]),",
                "+    visibility = [",
                "+        \"//src/com/facebook/buck/cli/bootstrapper/...\",",
                "+        \"//test/...\",",
                "+    ],",
                "+)",
                "diff --git a/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystem.java b/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystem.java",
                "new file mode 100644",
                "index 0000000000..b61e60659f",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystem.java",
                "@@ -0,0 +1,106 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.cli.bootstrapper.filesystem;",
                "+",
                "+import java.io.IOException;",
                "+import java.nio.file.FileStore;",
                "+import java.nio.file.FileSystem;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.PathMatcher;",
                "+import java.nio.file.WatchService;",
                "+import java.nio.file.attribute.UserPrincipalLookupService;",
                "+import java.nio.file.spi.FileSystemProvider;",
                "+import java.util.Set;",
                "+",
                "+/**",
                "+ * File system implementation that returns memory-optimized Path object. It delegates other calls to",
                "+ * default file system.",
                "+ */",
                "+public class BuckFileSystem extends FileSystem {",
                "+",
                "+  private FileSystem defaultFileSystem;",
                "+  private FileSystemProvider provider;",
                "+",
                "+  public BuckFileSystem(FileSystem defaultFileSystem, FileSystemProvider provider) {",
                "+    this.defaultFileSystem = defaultFileSystem;",
                "+    this.provider = provider;",
                "+  }",
                "+  /**",
                "+   * Returns the provider that created this file system.",
                "+   *",
                "+   * @return The provider that created this file system.",
                "+   */",
                "+  @Override",
                "+  public FileSystemProvider provider() {",
                "+    return provider;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void close() throws IOException {",
                "+    defaultFileSystem.close();",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean isOpen() {",
                "+    return defaultFileSystem.isOpen();",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean isReadOnly() {",
                "+    return defaultFileSystem.isReadOnly();",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getSeparator() {",
                "+    return defaultFileSystem.getSeparator();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Iterable<Path> getRootDirectories() {",
                "+    return defaultFileSystem.getRootDirectories();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Iterable<FileStore> getFileStores() {",
                "+    return defaultFileSystem.getFileStores();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Set<String> supportedFileAttributeViews() {",
                "+    return defaultFileSystem.supportedFileAttributeViews();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path getPath(String first, String... more) {",
                "+    return defaultFileSystem.getPath(first, more);",
                "+  }",
                "+",
                "+  @Override",
                "+  public PathMatcher getPathMatcher(String syntaxAndPattern) {",
                "+    return defaultFileSystem.getPathMatcher(syntaxAndPattern);",
                "+  }",
                "+",
                "+  @Override",
                "+  public UserPrincipalLookupService getUserPrincipalLookupService() {",
                "+    return defaultFileSystem.getUserPrincipalLookupService();",
                "+  }",
                "+",
                "+  @Override",
                "+  public WatchService newWatchService() throws IOException {",
                "+    return defaultFileSystem.newWatchService();",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystemProvider.java b/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystemProvider.java",
                "new file mode 100644",
                "index 0000000000..0cf305746e",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystemProvider.java",
                "@@ -0,0 +1,148 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.cli.bootstrapper.filesystem;",
                "+",
                "+import java.io.IOException;",
                "+import java.net.URI;",
                "+import java.nio.channels.SeekableByteChannel;",
                "+import java.nio.file.AccessMode;",
                "+import java.nio.file.CopyOption;",
                "+import java.nio.file.DirectoryStream;",
                "+import java.nio.file.DirectoryStream.Filter;",
                "+import java.nio.file.FileStore;",
                "+import java.nio.file.FileSystem;",
                "+import java.nio.file.LinkOption;",
                "+import java.nio.file.OpenOption;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.attribute.BasicFileAttributes;",
                "+import java.nio.file.attribute.FileAttribute;",
                "+import java.nio.file.attribute.FileAttributeView;",
                "+import java.nio.file.spi.FileSystemProvider;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+",
                "+/** File system provider that replaces default HotSpot provider for Buck-specific optimizations */",
                "+public class BuckFileSystemProvider extends FileSystemProvider {",
                "+",
                "+  private FileSystemProvider defaultProvider;",
                "+",
                "+  public BuckFileSystemProvider(FileSystemProvider defaultProvider) {",
                "+    this.defaultProvider = defaultProvider;",
                "+  }",
                "+",
                "+  /**",
                "+   * Returns the URI scheme that identifies this provider.",
                "+   *",
                "+   * @return The URI scheme",
                "+   */",
                "+  @Override",
                "+  public String getScheme() {",
                "+    return defaultProvider.getScheme();",
                "+  }",
                "+",
                "+  @Override",
                "+  public FileSystem newFileSystem(URI uri, Map<String, ?> env) throws IOException {",
                "+    return defaultProvider.newFileSystem(uri, env);",
                "+  }",
                "+",
                "+  @Override",
                "+  public FileSystem getFileSystem(URI uri) {",
                "+    return defaultProvider.getFileSystem(uri);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path getPath(URI uri) {",
                "+    // TODO: return proper path",
                "+    return defaultProvider.getPath(uri);",
                "+  }",
                "+",
                "+  @Override",
                "+  public SeekableByteChannel newByteChannel(",
                "+      Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {",
                "+    return defaultProvider.newByteChannel(path, options, attrs);",
                "+  }",
                "+",
                "+  @Override",
                "+  public DirectoryStream<Path> newDirectoryStream(Path dir, Filter<? super Path> filter)",
                "+      throws IOException {",
                "+    return newDirectoryStream(dir, filter);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void createDirectory(Path dir, FileAttribute<?>... attrs) throws IOException {",
                "+    defaultProvider.createDirectory(dir, attrs);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void delete(Path path) throws IOException {",
                "+    defaultProvider.delete(path);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void copy(Path source, Path target, CopyOption... options) throws IOException {",
                "+    defaultProvider.copy(source, target, options);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void move(Path source, Path target, CopyOption... options) throws IOException {",
                "+    defaultProvider.move(source, target, options);",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean isSameFile(Path path, Path path2) throws IOException {",
                "+    return defaultProvider.isSameFile(path, path2);",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean isHidden(Path path) throws IOException {",
                "+    return defaultProvider.isHidden(path);",
                "+  }",
                "+",
                "+  @Override",
                "+  public FileStore getFileStore(Path path) throws IOException {",
                "+    return defaultProvider.getFileStore(path);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void checkAccess(Path path, AccessMode... modes) throws IOException {",
                "+    defaultProvider.checkAccess(path, modes);",
                "+  }",
                "+",
                "+  @Override",
                "+  public <V extends FileAttributeView> V getFileAttributeView(",
                "+      Path path, Class<V> type, LinkOption... options) {",
                "+    return defaultProvider.getFileAttributeView(path, type, options);",
                "+  }",
                "+",
                "+  @Override",
                "+  public <A extends BasicFileAttributes> A readAttributes(",
                "+      Path path, Class<A> type, LinkOption... options) throws IOException {",
                "+    return defaultProvider.readAttributes(path, type, options);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Map<String, Object> readAttributes(Path path, String attributes, LinkOption... options)",
                "+      throws IOException {",
                "+    return defaultProvider.readAttributes(path, attributes, options);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void setAttribute(Path path, String attribute, Object value, LinkOption... options)",
                "+      throws IOException {",
                "+    defaultProvider.setAttribute(path, attribute, value, options);",
                "+  }",
                "+}"
            ],
            "changed_files": [
                "programs/buck_tool.py",
                "src/com/facebook/buck/cli/bootstrapper/BUCK",
                "src/com/facebook/buck/cli/bootstrapper/filesystem/BUCK",
                "src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystem.java",
                "src/com/facebook/buck/cli/bootstrapper/filesystem/BuckFileSystemProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "eedbaf9cb586a521e239bfa7017a44eb9aee6676",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521855997,
            "hunks": 2,
            "message": "Rename table of contents to fix document publishing. Summary: Doc publishing infra is trying to convert every soy file without `__` prefix to HTML, which cannot be done for the Skylark table of contents, since it's just a template definition. `__` prefix marks this file to not be published. Reviewed By: carljparker fbshipit-source-id: de6b50a",
            "diff": [
                "diff --git a/docs/skylark/generated/__table_of_contents.soy b/docs/skylark/generated/__table_of_contents.soy",
                "new file mode 100644",
                "index 0000000000..c24018a544",
                "--- /dev/null",
                "+++ b/docs/skylark/generated/__table_of_contents.soy",
                "@@ -0,0 +1,42 @@",
                "+{namespace skylark}",
                "+",
                "+/**",
                "+ * Table of contents for the Skylark functions section.",
                "+ * @param navid The current page's navigation id.",
                "+ */",
                "+{template .tableOfContents}",
                "+  <ul>",
                "+      <li><strong>Skylark</strong></li>",
                "+                {call navigation.link}",
                "+                    {param currentnavid: $navid /}",
                "+                    {param folder: 'skylark/generated' /}",
                "+                    {param page: 'glob' /}",
                "+                    {param text: 'glob()' /}",
                "+                {/call}",
                "+                {call navigation.link}",
                "+                    {param currentnavid: $navid /}",
                "+                    {param folder: 'skylark/generated' /}",
                "+                    {param page: 'host_info' /}",
                "+                    {param text: 'host_info()' /}",
                "+                {/call}",
                "+                {call navigation.link}",
                "+                    {param currentnavid: $navid /}",
                "+                    {param folder: 'skylark/generated' /}",
                "+                    {param page: 'read_config' /}",
                "+                    {param text: 'read_config()' /}",
                "+                {/call}",
                "+                {call navigation.link}",
                "+                    {param currentnavid: $navid /}",
                "+                    {param folder: 'skylark/generated' /}",
                "+                    {param page: 'struct' /}",
                "+                    {param text: 'struct()' /}",
                "+                {/call}",
                "+                {call navigation.link}",
                "+                    {param currentnavid: $navid /}",
                "+                    {param folder: 'skylark/generated' /}",
                "+                    {param page: 'package_name' /}",
                "+                    {param text: 'package_name()' /}",
                "+                {/call}",
                "+",
                "+  </ul>",
                "+{/template}",
                "\\ No newline at end of file",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/Main.java b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/Main.java",
                "index 358a44beec..59a451a390 100644",
                "--- a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/Main.java",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/Main.java",
                "@@ -60,3 +60,3 @@ public class Main {",
                "     Path destinationPath = parsedArgs.destinationDirectory.toPath();",
                "-    Path tableOfContentsPath = destinationPath.resolve(\"toc.soy\");",
                "+    Path tableOfContentsPath = destinationPath.resolve(\"__table_of_contents.soy\");",
                "     String tableOfContents = renderer.renderTableOfContents(skylarkSignatures);"
            ],
            "changed_files": [
                "docs/skylark/generated/__table_of_contents.soy",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/Main.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "46263bb20bda75ae258daf05d625d3834b7172cd",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521504537,
            "hunks": 4,
            "message": "Add initial Skylark documentation. Summary: Add an initial Skylark documentation. It's still a WIP but provides some context and information about how to enable and/or migrate to Skylark language. Test Plan: local server Reviewed By: philipjameson fbshipit-source-id: ac8fa73",
            "diff": [
                "diff --git a/docs/__common.soy b/docs/__common.soy",
                "index 3f604e559c..43f44686dc 100644",
                "--- a/docs/__common.soy",
                "+++ b/docs/__common.soy",
                "@@ -457,2 +457,8 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "+    {call .navigationLink}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'concept' /}",
                "+      {param page: 'skylark' /}",
                "+      {param text: 'Skylark' /}",
                "+    {/call}",
                "   </ul>",
                "@@ -891,2 +897,7 @@ docsearch({",
                "+/***/",
                "+{template .skylark}",
                "+{call .concept_link_heading}{param page : 'skylark' /}{param heading : 'migration' /}{param name : 'Python DSL to Skylark migration' /}{/call}",
                "+{/template}",
                "+",
                " /***/",
                "@@ -1099,2 +1110,7 @@ docsearch({",
                "+/***/",
                "+{template .fn_get_base_path}",
                "+<a href=\"{ROOT}function/get_base_path.html\"><code>get_base_path()</code></a>",
                "+{/template}",
                "+",
                " /***/",
                "diff --git a/docs/concept/skylark.soy b/docs/concept/skylark.soy",
                "new file mode 100644",
                "index 0000000000..73e1de8c2f",
                "--- /dev/null",
                "+++ b/docs/concept/skylark.soy",
                "@@ -0,0 +1,297 @@",
                "+{namespace buck.skylark}",
                "+",
                "+/***/",
                "+{template .soyweb}",
                "+  {call buck.page}",
                "+    {param title: 'Skylark' /}",
                "+    {param navid: 'concept_skylark' /}",
                "+    {param description}",
                "+      An overview of the Skylark language and its usage.",
                "+    {/param}",
                "+    {param content}",
                "+      <h2>A bit of history</h2>",
                "+      <p>",
                "+        Historically Buck relied on Python for describing {call buck.build_file /}s and {call buck.macros/}.",
                "+        This allowed Buck users to implement many missing features without having",
                "+        to modify Buck's core. While it worked fine for local builds and small repositories, when used",
                "+        at scale, ability to access host environment and perform arbitrary actions without Buck's",
                "+        knowledge led to non-deterministic, hard to debug issues and slow parsing.",
                "+      </p>",
                "+      <p>",
                "+        To address some of these issues, Buck introduced features like <code>allow_unsafe_import</code>, but",
                "+        ultimately they were unable to provide proper sandboxing for deterministic parsing and a new",
                "+        solution had to be put in place.",
                "+      </p>",
                "+",
                "+      <h2>Present day</h2>",
                "+      <p>",
                "+        In order to tackle Python DSL parser limitations, Buck added polyglot language support",
                "+        and provided a built in parser, <a href=\"https://docs.bazel.build/versions/master/skylark/language.html\">Skylark</a>, as",
                "+        an alternative to the Python DSL parser.",
                "+      </p>",
                "+",
                "+      <h2>Enabling Skylark parser</h2>",
                "+      <p>",
                "+        In order to enable Skylark support for your project, please add",
                "+        {literal}<pre>",
                "+[parser]",
                "+  polyglot_parsing_enabled = true",
                "+  default_build_file_syntax = SKYLARK",
                "+</pre>{/literal} to your <code>.buckconfig</code> file. This is recommended for new projects and",
                "+      will become the default in the future. If most of your {call buck.build_file/}s or {call buck.macros/} rely",
                "+      on Python DSL features and you're not ready to invest into migrating to Skylark, you can",
                "+      replace <pre>default_build_file_syntax = SKYLARK</pre> with",
                "+      <pre>default_build_file_syntax = PYTHON_DSL</pre> to use Python DSL parser by default.",
                "+",
                "+      Since Skylark will soon be the default it's highly recommended to start the migration and to",
                "+      make it easier, Buck gives you control over which parser to use for parsing",
                "+      individual {call buck.build_file/}s. Adding",
                "+      <pre># BUILD FILE SYNTAX: SKYLARK</pre> as the very first line of the {call buck.build_file/} will",
                "+      result in Buck using Skylark parser for parsing it. Similarly <pre># BUILD FILE SYNTAX: PYTHON_DSL</pre> will",
                "+      result in Python DSL parser being used.",
                "+      </p>",
                "+",
                "+      <p>",
                "+        It's best to make enable Skylark parser globally and add",
                "+        <pre># BUILD FILE SYNTAX: PYTHON_DSL</pre> to all {call buck.build_file/}s that rely on Python",
                "+        DSL features.",
                "+      </p>",
                "+",
                "+      <p>",
                "+        <b>Note</b> that all of the options above require enabled polyglot parsing:",
                "+        {literal}<pre>",
                "+[parser]",
                "+  polyglot_parsing_enabled = true",
                "+</pre>{/literal}",
                "+      </p>",
                "+",
                "+      <h2>Migrating from Python to Skylark</h2>",
                "+      <p>",
                "+        The <a href=\"https://docs.bazel.build/versions/master/skylark/language.html\">Skylark</a> language",
                "+        was specifically created to address all of the above and many other issues, which is why",
                "+        Buck team has decided to replace Python DSL with Skylark as the language for {call buck.build_file/} and",
                "+        extension files. Unfortunately migration cannot be fully automated, so below some of the",
                "+        ways to resolve common tasks when migrating to Skylark are described.",
                "+",
                "+        <h3>include_defs</h3>",
                "+",
                "+        The <code>include_defs</code> function is not supported in Skylark because by default it",
                "+        pollutes execution environment and makes automated refactoring much harder. To replace a",
                "+        usage of <pre>include_defs(\"//tools/my_macro.bzl\")</pre> you should:",
                "+        <ul>",
                "+        <li>find all variables defined in <code>my_macro</code> file that are actually used by this",
                "+          file. Say it's <code>foo</code> and <code>bar</code>",
                "+        <li>replace <code>include_defs</code> invocation with an equivalent {call buck.fn_load /}",
                "+          function invocation <pre>load(\"//tools:my_macro.bzl\", \"foo\", \"bar\")</pre>",
                "+        </ul>",
                "+",
                "+        <b>Note</b> that {call buck.fn_load/} function uses the {call buck.build_target_pattern /} syntax",
                "+        as if there is an <pre>export_file(name=\"my_macro.bzl\")</pre> defined in",
                "+        a <code>tools</code> package {call buck.build_file/}. This means that instead",
                "+        of <code>//package/extension.bzl</code> syntax expected by {call buck.fn_include_defs/} a",
                "+        similar {call buck.fn_load/} invocation would expect <code>//package:extension.bzl</code>.",
                "+      </p>",
                "+      <h3>Environment variables</h3>",
                "+      <p>",
                "+        Environment variables are implicit and frequently result in non-reproducible builds because",
                "+        of environment variable differences across machines. They must be replaced with corresponding",
                "+        configuration variables. For example, instead of <pre>my_var = py_sdk.os.env.get('MY_VAR', 'foo')</pre>",
                "+        you should use <pre>my_var = read_config('my_project', 'my_var', 'foo')</pre>",
                "+        in your {call buck.build_file/} or extension file. When calling buck instead of passing",
                "+        <pre>env MY_VAR='some_value' buck ...</pre>",
                "+        you should pass a configuration flag",
                "+        <pre>buck ... -c my_project.my_var=foo</pre>",
                "+",
                "+        <p>",
                "+        <b>Note</b> that while using Python DSL",
                "+        parser it's possible to invoke {call buck.fn_read_config/} function during extension file",
                "+        evaluation directly or through a set of other function invocations, with Skylark parser this",
                "+        behavior is not supported in order to track configuration option usage more precisely.",
                "+        Because of this a top level {call buck.fn_read_config/} function invocations like",
                "+        <pre>foo = read_config(...)</pre>",
                "+        would either have to be performed in {call buck.build_file/} directly or preferably moved",
                "+        into a well named function within an extension file. In case configuration options are used",
                "+        to instantiate expensive objects which should ideally be created only once, consider",
                "+        replacing code like",
                "+        <pre>FOO = expensive1() if read_config(...) else expensive2()</pre> with something like",
                "+        {literal}<pre>",
                "+_EXPENSIVE1 = expensive1()",
                "+_EXPENSIVE2 = expensive2()",
                "+",
                "+def foo():",
                "+  return _EXPENSIVE1 if read_config(...) else _EXPENSIVE2",
                "+</pre>{/literal}. While it can result in instantiation of an unnecessary expensive object, it may",
                "+        still be more efficient than instantiating one the expensive objects during",
                "+        each <code>foo</code> invocation. Having said that, please start simple and optimize only if",
                "+        performance overhead becomes noticeable.",
                "+        </p>",
                "+      </p>",
                "+      <h3>instanceof</h3>",
                "+      <p>",
                "+        The <code>instanceof</code> operator is not available in Skylark because it does not support",
                "+        inheritance, but some of its usages can be replaced with <code>type</code> operator.",
                "+        For example,",
                "+",
                "+        <pre>",
                "+        foo instanceof str",
                "+        </pre>",
                "+",
                "+        can be replaced with",
                "+",
                "+        <pre>",
                "+        type(foo) == type('')",
                "+        </pre>",
                "+      </p>",
                "+",
                "+      <h3>get_base_path</h3>",
                "+      <p>",
                "+        The {call buck.fn_get_base_path /} function is replaced with the equivalent, but more appropriately",
                "+        named <a href=\"https://docs.bazel.build/versions/master/skylark/lib/native.html#package_name\">package_name()</a>.",
                "+        Note, that while in {call buck.build_file /}s it's invoked",
                "+        as <code>package_name()</code>, but in extension files, it's invoked",
                "+        as <code>native.package_name()</code> as are the rest of built-in functions provided by Buck.",
                "+        It's fairly easy to write an alias if there is a strong desire to use the old name instead.",
                "+      </p>",
                "+",
                "+      <h3>del</h3>",
                "+      <p>",
                "+        Usage of <code>del arr[1]</code> and <code>del dictionary['key']</code> is not supported.",
                "+        Use <code>arr.pop(1)</code> and <code>dictionary.pop('key')</code> instead respectively.",
                "+      </p>",
                "+",
                "+      <h3>class</h3>",
                "+      <p>",
                "+        Classes are not supported.",
                "+        You can replace them with <code>struct</code> and functions. In addition to language",
                "+        simplification structs are",
                "+        more <a href=\"http://blog.explainmydata.com/2012/07/expensive-lessons-in-python-performance.html\">memory efficient</a>.",
                "+        For example, a class like",
                "+",
                "+        {literal}<pre>",
                "+class Foo:",
                "+def __init__(self, foo, bar=None):",
                "+...",
                "+def some_method(self, param):",
                "+...",
                "+...",
                "+foo = Foo('foo', bar='yo')",
                "+res = foo.some_method(some_param)</pre>{/literal}",
                "+",
                "+        can be replaced with something like",
                "+",
                "+        {literal}<pre>",
                "+def some_function(foo_instance, param):",
                "+...",
                "+foo = struct(foo='foo', bar='yo')",
                "+res = some_function(foo, some_param)",
                "+{/literal}</pre>",
                "+",
                "+        You can also track state in variables defined in the same extension file, but you cannot",
                "+        expose any mutators, since all variables are frozen once extension file is evaluated.",
                "+        This is intentional and prevents race conditions, since build files as well as extension",
                "+        files must support efficient parallel evaluation. You can also use <code>provider</code>s",
                "+        in order to create named <code>struct</code> factories.",
                "+",
                "+        {literal}<pre>",
                "+def some_function(foo_instance, param):",
                "+...",
                "+Foo = provider()",
                "+foo = Foo(foo='foo', bar='yo')",
                "+res = some_function(foo, some_param)",
                "+</pre>{/literal}",
                "+      </p>",
                "+      <h3>import re</h3>",
                "+      <p>",
                "+        Regular expressions are not supported in Skylark due to unbounded runtime and resource",
                "+        usage, but most of the time their usage is unnecessary and can be replaced with simple",
                "+        string manipulations.",
                "+        Patterns like {literal}re\"//libraries/my_lib/.*\"{/literal} can be replaced with",
                "+        a {literal}startswith(\"//libraries/my_lib/\"){/literal}.",
                "+        Similarly <code>endswith</code> method can be used to replace a pattern that starts",
                "+        with <code>.*</code> and <code>\"some_text\" in foo</code> can replace <code>re\".*some_text.*\"</code>.",
                "+      </p>",
                "+",
                "+      <h3>raise Exception</h3>",
                "+      <p>",
                "+        Raising and catching exceptions is not supported.",
                "+        Use <a href=\"https://docs.bazel.build/versions/master/skylark/lib/globals.html#fail\">fail function</a> instead.",
                "+        For example, instead of <code>raise Exception(\"foo\")</code> or <code>raise Exception(\"attribute_name: foo\")</code> you",
                "+        can use <code>fail(\"foo\")</code> or <code>fail(\"foo\", \"attribute_name\")</code> respectively",
                "+        to stop build/exception file evaluation and report an error.",
                "+        Since usage of <code>fail</code> triggers non-recoverable errors and halt parsing, they",
                "+        cannot be used for control flow.",
                "+      </p>",
                "+",
                "+      <h3>while loop</h3>",
                "+      <p>",
                "+        While loops are not supported due to unbounded runtime. Instead use <code>for</code> loop",
                "+        with a bounded range.",
                "+        Usage of <code>while True: ...</code> should be replaced with",
                "+        a <code>for _ in range(REASONABLE_LIMIT):</code> followed by an extra check after the loop",
                "+        to make sure that loop has terminated before all iterations were exhausted.",
                "+      </p>",
                "+      <h3>python module</h3>",
                "+      <p>",
                "+        Python modules cannot be imported in Skylark. Many safe Python functions",
                "+        like <code>os.path.basepath</code> or <code>os.path.join</code> can be replaced",
                "+        with <code>paths.basename</code> and <code>paths.join</code> from <a href=\"https://github.com/bazelbuild/bazel-skylib\">Skylib</a> library.",
                "+        In order to use it, clone it into some directory and configure it as a cell by",
                "+        adding {literal}<pre>",
                "+[repositories]",
                "+  bazel_skylib = path/to/skylib_checkout",
                "+</pre>{/literal} to a <code>.buckconfig</code> file and load corresponding function",
                "+        <pre>load(\"@bazel_skylib//lib:paths.bzl\", \"paths\")</pre>.",
                "+",
                "+        An example from skylib website:",
                "+",
                "+        {literal}<pre>",
                "+load(\"@bazel_skylib//:lib.bzl\", \"paths\", \"shell\")",
                "+",
                "+p = paths.basename(\"foo.bar\")",
                "+s = shell.quote(p)",
                "+</pre>{/literal}",
                "+",
                "+        <h3>Skylint</h3>",
                "+        Consider using <a href=\"https://github.com/bazelbuild/bazel/blob/master/site/docs/skylark/skylint.md\">Skylint</a> lint",
                "+        tool which can catch and suggest fixes for some of the common issues. Unfortunately, since",
                "+        it was not designed to handle arbitrary Python files it can crash.",
                "+        Some of the common reasons for it to crash are:",
                "+",
                "+        <ul>",
                "+        <li>usage of nested functions. Nested functions should be moved to the top level.",
                "+        <li>usage of <code>not foo in</code> instead of <code>foo not in</code>. Use <code>foo not in</code> instead - it's recommended by flake8 anyways.",
                "+        </ul>",
                "+",
                "+        You can bisect affected area of code by commenting out parts of the file and rerunning Skylint.",
                "+",
                "+        <h3>Testing your changes</h3>",
                "+        <h4>Automated testing</h4>",
                "+        <p>Comming soon...</p>",
                "+",
                "+        <h4>Manual testing</h4>",
                "+        The easiest way to check if your changes affected build rules is by checking if target rule",
                "+        keys have changed. You can capture rule keys before making your change using",
                "+",
                "+        <pre>",
                "+        buck targets --show-rulekey //path/to/targets/... > before",
                "+        </pre>",
                "+",
                "+        followed by the command below after applying your changes",
                "+",
                "+        <pre>",
                "+        buck targets --show-rulekey //path/to/targets/... > after",
                "+        </pre>",
                "+",
                "+        Now that before and after rule keys are captured",
                "+",
                "+        <pre>",
                "+        diff before after",
                "+        </pre>",
                "+",
                "+        should be empty unless your changes affected semantics of some macros or build definitions.",
                "+        In order to get more insight into what exactly has changed you can use <pre>buck audit rules path/to/BUCK</pre> command",
                "+        on individual {call buck.build_file /} files to see how macros are expanded by Buck.",
                "+      </p>",
                "+    {/param}",
                "+  {/call}",
                "+{/template}"
            ],
            "changed_files": [
                "docs/__common.soy",
                "docs/concept/skylark.soy"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: information",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "96c69040d7997a70ce7f3a3f32009d3c06024541",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522744769,
            "hunks": 7,
            "message": "ThriftClient in Coordinator is being used before it is fully initialised. Summary: [stampede] ThriftClient in Coordinator is being used before it is fully initialised. Reviewed By: michsien fbshipit-source-id: aa95722",
            "diff": [
                "diff --git a/src/com/facebook/buck/distributed/build_slave/MinionModeRunner.java b/src/com/facebook/buck/distributed/build_slave/MinionModeRunner.java",
                "index 32dd56bb42..9bb8ef1c4c 100644",
                "--- a/src/com/facebook/buck/distributed/build_slave/MinionModeRunner.java",
                "+++ b/src/com/facebook/buck/distributed/build_slave/MinionModeRunner.java",
                "@@ -89,9 +89,2 @@ public class MinionModeRunner extends AbstractDistBuildModeRunner {",
                "-  /** Encapsulates a Thrift call */",
                "-  @FunctionalInterface",
                "-  public interface ThriftCall {",
                "-",
                "-    void apply() throws IOException;",
                "-  }",
                "-",
                "   public MinionModeRunner(",
                "@@ -176,5 +169,3 @@ public class MinionModeRunner extends AbstractDistBuildModeRunner {",
                "     String minionId = generateMinionId(buildSlaveRunId);",
                "-    try (ThriftCoordinatorClient client =",
                "-            new ThriftCoordinatorClient(",
                "-                coordinatorAddress, stampedeId, coordinatorConnectionTimeoutMillis);",
                "+    try (ThriftCoordinatorClient client = newStartedThriftCoordinatorClient();",
                "         Closeable healthCheck =",
                "@@ -182,4 +173,2 @@ public class MinionModeRunner extends AbstractDistBuildModeRunner {",
                "                 \"MinionIsAlive\", createHeartbeatCallback(client, minionId))) {",
                "-      completionCheckingThriftCall(() -> client.start(coordinatorPort.getAsInt()));",
                "-",
                "       while (!finished.get()) {",
                "@@ -190,4 +179,2 @@ public class MinionModeRunner extends AbstractDistBuildModeRunner {",
                "       LOG.info(String.format(\"Minion [%s] has exited signal/fetch work loop.\", minionId));",
                "-",
                "-      completionCheckingThriftCall(() -> client.stop());",
                "     }",
                "@@ -203,2 +190,14 @@ public class MinionModeRunner extends AbstractDistBuildModeRunner {",
                "+  private ThriftCoordinatorClient newStartedThriftCoordinatorClient() throws IOException {",
                "+    ThriftCoordinatorClient client =",
                "+        new ThriftCoordinatorClient(",
                "+            coordinatorAddress, stampedeId, coordinatorConnectionTimeoutMillis);",
                "+    try {",
                "+      client.start(coordinatorPort.getAsInt());",
                "+    } catch (ThriftException exception) {",
                "+      handleThriftException(exception);",
                "+    }",
                "+    return client;",
                "+  }",
                "+",
                "   private HeartbeatCallback createHeartbeatCallback(",
                "@@ -390,11 +389,2 @@ public class MinionModeRunner extends AbstractDistBuildModeRunner {",
                "-  private void completionCheckingThriftCall(ThriftCall thriftCall) throws IOException {",
                "-    try {",
                "-      thriftCall.apply();",
                "-    } catch (ThriftException e) {",
                "-      handleThriftException(e);",
                "-      return;",
                "-    }",
                "-  }",
                "-",
                "   private void handleThriftException(ThriftException e) throws IOException {",
                "diff --git a/src/com/facebook/buck/distributed/build_slave/ThriftCoordinatorClient.java b/src/com/facebook/buck/distributed/build_slave/ThriftCoordinatorClient.java",
                "index f269a7f8e7..bb0f33f8ea 100644",
                "--- a/src/com/facebook/buck/distributed/build_slave/ThriftCoordinatorClient.java",
                "+++ b/src/com/facebook/buck/distributed/build_slave/ThriftCoordinatorClient.java",
                "@@ -159,9 +159,7 @@ public class ThriftCoordinatorClient implements Closeable {",
                "       // until Buck has finished shutting down if it crashed the application.",
                "-      try {",
                "-        throw new RuntimeException(",
                "-            \"Request received, but client was not started, or has already stopped.\");",
                "-      } catch (RuntimeException ex) {",
                "-        LOG.error(ex);",
                "-        throw ex;",
                "-      }",
                "+      RuntimeException exception =",
                "+          new RuntimeException(",
                "+              \"Request received, but client was not started, or has already stopped.\");",
                "+      LOG.error(exception);",
                "+      throw exception;",
                "     }"
            ],
            "changed_files": [
                "src/com/facebook/buck/distributed/build_slave/MinionModeRunner.java",
                "src/com/facebook/buck/distributed/build_slave/ThriftCoordinatorClient.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "aae9ecc771f856ff9a0c70b55096c3d58333a8eb",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522136543,
            "hunks": 10,
            "message": "ocaml: support multiple platforms in `OcamlToolchain` Summary: Adds initial support for a `FlavorDomain` in `OcamlToolchain` to house multiple OCaml platforms. Reviewed By: ttsugriy fbshipit-source-id: 21c546a",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/AbstractOcamlToolchain.java b/src/com/facebook/buck/ocaml/AbstractOcamlToolchain.java",
                "index 607392160a..23047c452f 100644",
                "--- a/src/com/facebook/buck/ocaml/AbstractOcamlToolchain.java",
                "+++ b/src/com/facebook/buck/ocaml/AbstractOcamlToolchain.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.ocaml;",
                "+import com.facebook.buck.model.FlavorDomain;",
                " import com.facebook.buck.toolchain.Toolchain;",
                "@@ -30,2 +31,7 @@ interface AbstractOcamlToolchain extends Toolchain {",
                "   OcamlPlatform getDefaultOcamlPlatform();",
                "+",
                "+  @Value.Derived",
                "+  default FlavorDomain<OcamlPlatform> getOcamlPlatforms() {",
                "+    return FlavorDomain.of(\"OCaml Platforms\", getDefaultOcamlPlatform());",
                "+  }",
                " }",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "index a7d41edff5..35aab63379 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "@@ -22,2 +22,3 @@ import com.facebook.buck.model.BuildTarget;",
                " import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.FlavorDomain;",
                " import com.facebook.buck.model.Flavored;",
                "@@ -80,5 +81,5 @@ public class OcamlLibraryDescription",
                "         toolchainProvider.getByName(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.class);",
                "-    OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();",
                "-",
                "-    if (buildTarget.getFlavors().contains(ocamlPlatform.getFlavor())) {",
                "+    FlavorDomain<OcamlPlatform> ocamlPlatforms = ocamlToolchain.getOcamlPlatforms();",
                "+    Optional<OcamlPlatform> ocamlPlatform = ocamlPlatforms.getValue(buildTarget);",
                "+    if (ocamlPlatform.isPresent()) {",
                "       SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getBuildRuleResolver());",
                "@@ -93,3 +94,3 @@ public class OcamlLibraryDescription",
                "               context.getBuildRuleResolver(),",
                "-              ocamlPlatform,",
                "+              ocamlPlatform.get(),",
                "               args.getCompilerFlags(),",
                "@@ -103,3 +104,3 @@ public class OcamlLibraryDescription",
                "                 buildTarget,",
                "-                ocamlPlatform,",
                "+                ocamlPlatform.get(),",
                "                 compileBuildTarget,",
                "@@ -108,3 +109,3 @@ public class OcamlLibraryDescription",
                "                 context.getBuildRuleResolver(),",
                "-                allDeps.get(context.getBuildRuleResolver(), ocamlPlatform.getCxxPlatform()),",
                "+                allDeps.get(context.getBuildRuleResolver(), ocamlPlatform.get().getCxxPlatform()),",
                "                 srcs,",
                "@@ -139,3 +140,3 @@ public class OcamlLibraryDescription",
                "                 buildTarget,",
                "-                ocamlPlatform,",
                "+                ocamlPlatform.get(),",
                "                 compileBuildTarget,",
                "@@ -144,3 +145,3 @@ public class OcamlLibraryDescription",
                "                 context.getBuildRuleResolver(),",
                "-                allDeps.get(context.getBuildRuleResolver(), ocamlPlatform.getCxxPlatform()),",
                "+                allDeps.get(context.getBuildRuleResolver(), ocamlPlatform.get().getCxxPlatform()),",
                "                 srcs,",
                "@@ -232,7 +233,9 @@ public class OcamlLibraryDescription",
                "       ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "-    targetGraphOnlyDepsBuilder.addAll(",
                "-        OcamlUtil.getParseTimeDeps(",
                "-            toolchainProvider",
                "-                .getByName(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.class)",
                "-                .getDefaultOcamlPlatform()));",
                "+    for (OcamlPlatform platform :",
                "+        toolchainProvider",
                "+            .getByName(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.class)",
                "+            .getOcamlPlatforms()",
                "+            .getValues()) {",
                "+      targetGraphOnlyDepsBuilder.addAll(OcamlUtil.getParseTimeDeps(platform));",
                "+    }",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/AbstractOcamlToolchain.java",
                "src/com/facebook/buck/ocaml/OcamlLibraryDescription.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fed06c06e5957f7c83a67ced6c205cc35f106f3b",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522429002,
            "hunks": 3,
            "message": "Fix WorkerProcessPoolTest.canReturnAndBorrowWorkersWhileStartingUpOtherWorkers Summary: It looks like sometimes the second thread can start before the first one. The fix is to wait for first thread to start and consume a process from the queue. Reviewed By: jtorkkola fbshipit-source-id: 49fb417",
            "diff": [
                "diff --git a/test/com/facebook/buck/worker/WorkerProcessPoolTest.java b/test/com/facebook/buck/worker/WorkerProcessPoolTest.java",
                "index c947786c51..39dbf4ee3c 100644",
                "--- a/test/com/facebook/buck/worker/WorkerProcessPoolTest.java",
                "+++ b/test/com/facebook/buck/worker/WorkerProcessPoolTest.java",
                "@@ -219,2 +219,3 @@ public class WorkerProcessPoolTest {",
                "     WorkerProcessPool pool = createPool(2, workers);",
                "+    CountDownLatch firstThreadWaitingToBorrowProcess = new CountDownLatch(1);",
                "     CountDownLatch secondThreadWaitingForWorker = new CountDownLatch(1);",
                "@@ -229,2 +230,3 @@ public class WorkerProcessPoolTest {",
                "               WorkerProcess workerProcess = pool.borrowWorkerProcess();",
                "+              firstThreadWaitingToBorrowProcess.countDown();",
                "               firstBorrowedWorker.set(workerProcess);",
                "@@ -238,2 +240,4 @@ public class WorkerProcessPoolTest {",
                "+    firstThreadWaitingToBorrowProcess.await();",
                "+",
                "     // thread 2, attempting to borrow a worker"
            ],
            "changed_files": [
                "test/com/facebook/buck/worker/WorkerProcessPoolTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fe3990b6b1eb33f9a589b0c0fc39da2a5624986a",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521480404,
            "hunks": 5,
            "message": "E2E mobile template: read_config, prebuilt_jar Summary: ```                                           android_binary                                                                        apple_package                                                  +                                                                                   +       +------------+-------------+---------------+                                                                                   |       v            v             v               v                                                                                   v export_file     manifest     keystore     android_library                                                                       apple_bundle                    +                             +                                                                                   +                    |                    +--------+---------+------------------+---------------------+-----------------+              |                    v                    v                  v                  v                     v                 v              v                 genrule          android_resource   android_library     *prebuilt_jar*    android_build_config   cxx_library    apple_binary                    +                                       +                  +                                       +              +    +---------------+                                       |                  |                                       +--------------+    v               v                                       v                  v                                       v              v genrule      python_binary                      android_prebuilt_aar      *genrule*                              cxx_library    apple_resource                                                                               +                                                                               |                                                                               v                                                                        *python_binary* ``` Also using read_config in the new genrule Test Plan: Built locally Reviewed By: styurin fbshipit-source-id: 4a33bc8",
            "diff": [
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java",
                "index aa3869a8f7..f94ae4f054 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java",
                "@@ -15,2 +15,3 @@ import com.facebook.buck.BuildConfig;",
                " import com.facebook.buck.demo.capitalize.CapitalizeUtils;",
                "+import com.facebook.buck.demo.target.AndroidTarget;",
                "@@ -27,4 +28,6 @@ public class App extends Activity {",
                "           String.format(",
                "-              \"%s - id: %s\",",
                "-              CapitalizeUtils.capitalize(new Hello().getHelloString()), BuildConfig.BUILD_ID);",
                "+              \"%s - id: %s - target: %s\",",
                "+              CapitalizeUtils.capitalize(new Hello().getHelloString()),",
                "+              BuildConfig.BUILD_ID,",
                "+              AndroidTarget.getTarget());",
                "       textView.setText(message);",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "index e7a405589f..e3e5b49b6a 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "@@ -15,2 +15,3 @@ visible_android_library(",
                "         \"//android/java/com/facebook/buck/demo/capitalize:capitalize\",",
                "+        \"//android/java/com/facebook/buck/demo/target:target_jar\",",
                "         \"//android/resources:res\",",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/target/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/target/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..d7e6eab949",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/target/BUCK.fixture",
                "@@ -0,0 +1,26 @@",
                "+# Copyright 2018-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+target = read_config(\"android\", \"target\")",
                "+",
                "+python_binary(",
                "+    name = \"generate_jar\",",
                "+    main = \"generate_jar.py\",",
                "+)",
                "+",
                "+genrule(",
                "+    name = \"generated_jar\",",
                "+    out = \"genned.jar\",",
                "+    cmd = \"$(exe :generate_jar) \\\"\" + target + \"\\\" $TMP $OUT\",",
                "+)",
                "+",
                "+prebuilt_jar(",
                "+    name = \"target_jar\",",
                "+    binary_jar = \":generated_jar\",",
                "+    visibility = [",
                "+        \"PUBLIC\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/target/generate_jar.py b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/target/generate_jar.py",
                "new file mode 100644",
                "index 0000000000..a127203089",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/target/generate_jar.py",
                "@@ -0,0 +1,40 @@",
                "+# Copyright 2018-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+import argparse",
                "+import subprocess",
                "+import os",
                "+",
                "+",
                "+def parse_args():",
                "+    parser = argparse.ArgumentParser(",
                "+        description=\"Generates java file that outputs given android target\")",
                "+    parser.add_argument(\"target\", type=str, help=\"String to have java file output\")",
                "+    parser.add_argument(\"tmp\", type=str, help=\"TMP directory to store intermediate information\")",
                "+    parser.add_argument(\"output\", type=str, help=\"Where to save output jar\")",
                "+    return parser.parse_args().target, parser.parse_args().tmp, parser.parse_args().output",
                "+",
                "+",
                "+def generate_java(target, tmp, output):",
                "+    with open(os.path.join(tmp, \"AndroidTarget.java\"), \"w\") as f:",
                "+        f.write(\"\"\"package com.facebook.buck.demo.target;",
                "+",
                "+public class AndroidTarget {{",
                "+    public static String getTarget() {{",
                "+        return \"{}\";",
                "+    }}",
                "+}}\"\"\".format(target))",
                "+    os.makedirs(os.path.join(tmp, \"classes\"))",
                "+    subprocess.check_call(",
                "+        [\"javac\", \"-source\", \"1.7\", \"-target\", \"1.7\", \"-d\", \"classes\", \"AndroidTarget.java\"],",
                "+        cwd=tmp)",
                "+    subprocess.check_call(",
                "+        [\"jar\", \"-cf\", output, \"-C\", \"classes\", \".\"],",
                "+        cwd=tmp)",
                "+",
                "+if __name__ == \"__main__\":",
                "+    target, tmp, output = parse_args()",
                "+    generate_java(target, tmp, output)"
            ],
            "changed_files": [
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/target/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/target/generate_jar.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "db748eb9cee974a55c3c884d31eb66d47a052698",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521683621,
            "hunks": 4,
            "message": "Extract TOC into a standalone template. Summary: Kitchen sink deps are hard to maintain and lead to circular references. Test Plan: CI Reviewed By: sbalabanov fbshipit-source-id: 6f29f7f",
            "diff": [
                "diff --git a/docs/__common.soy b/docs/__common.soy",
                "index 5a11b9cdf5..c688d299e7 100644",
                "--- a/docs/__common.soy",
                "+++ b/docs/__common.soy",
                "@@ -162,465 +162,2 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "-/**",
                "- * @param currentnavid The navigation id of the loaded page",
                "- * @param platform",
                "- * @param rules",
                "- */",
                "-{template .platformBuildRuleLink}",
                "-    <li><strong>{$platform}</strong></li>",
                "-    {foreach $rule in $rules}",
                "-        {let $ruletext}",
                "-          {$rule}()",
                "-        {/let}",
                "-        {call navigation.link}",
                "-          {param currentnavid: $currentnavid /}",
                "-          {param folder: 'rule' /}",
                "-          {param page: $rule /}",
                "-          {param text: $ruletext /}",
                "-        {/call}",
                "-    {/foreach}",
                "-{/template}",
                "-",
                "-/**",
                "- * Consider passing in the path to the URL of the page that the user",
                "- * is currently on and not hyperlinking that item in the table of contents.",
                "- * @param navid The navigation id of the loaded page",
                "- */",
                "-{template .tableOfContents}",
                "-    {let $platformRulesMap: [",
                "-        'android': [",
                "-            'android_aar',",
                "-            'android_binary',",
                "-            'android_build_config',",
                "-            'android_instrumentation_apk',",
                "-            'android_instrumentation_test',",
                "-            'android_library',",
                "-            'android_manifest',",
                "-            'android_prebuilt_aar',",
                "-            'android_resource',",
                "-            'apk_genrule',",
                "-            'gen_aidl',",
                "-            'keystore',",
                "-            'ndk_library',",
                "-            'prebuilt_jar',",
                "-            'prebuilt_native_library',",
                "-            'robolectric_test',",
                "-        ],",
                "-        'core': [",
                "-            'command_alias',",
                "-            'export_file',",
                "-            'filegroup',",
                "-            'genrule',",
                "-            'http_archive',",
                "-            'http_file',",
                "-            'remote_file',",
                "-            'worker_tool',",
                "-            'zip_file',",
                "-        ],",
                "-        'cxx': [",
                "-            'cxx_binary',",
                "-            'cxx_library',",
                "-            'cxx_precompiled_header',",
                "-            'cxx_test',",
                "-            'prebuilt_cxx_library',",
                "-            'prebuilt_cxx_library_group',",
                "-        ],",
                "-        'd': [",
                "-            'd_binary',",
                "-            'd_library',",
                "-            'd_test',",
                "-        ],",
                "-        'dotnet': [",
                "-            'csharp_library',",
                "-            'prebuilt_dotnet_library',",
                "-        ],",
                "-        'go': [",
                "-            'go_binary',",
                "-            'go_library',",
                "-            'go_test',",
                "-            'cgo_library',",
                "-        ],",
                "-        'groovy': [",
                "-            'groovy_library',",
                "-        ],",
                "-        'halide': [",
                "-            'halide_library',",
                "-        ],",
                "-        'haskell': [",
                "-            'haskell_binary',",
                "-            'haskell_library',",
                "-            'prebuilt_haskell_library',",
                "-        ],",
                "-        'ios': [",
                "-            'apple_asset_catalog',",
                "-            'apple_binary',",
                "-            'apple_bundle',",
                "-            'apple_library',",
                "-            'apple_package',",
                "-            'apple_resource',",
                "-            'apple_test',",
                "-            'core_data_model',",
                "-            'prebuilt_apple_framework',",
                "-        ],",
                "-        'java': [",
                "-            'java_binary',",
                "-            'java_library',",
                "-            'java_test',",
                "-            'prebuilt_jar',",
                "-            'prebuilt_native_library',",
                "-        ],",
                "-        'kotlin': [",
                "-            'kotlin_library',",
                "-            'kotlin_test',",
                "-        ],",
                "-        'lua': [",
                "-            'cxx_lua_extension',",
                "-            'lua_binary',",
                "-            'lua_library',",
                "-        ],",
                "-        'ocaml': [",
                "-            'ocaml_binary',",
                "-            'ocaml_library',",
                "-        ],",
                "-        'python': [",
                "-            'prebuilt_python_library',",
                "-            'python_binary',",
                "-            'python_library',",
                "-            'python_test',",
                "-        ],",
                "-        'rust': [",
                "-            'rust_binary',",
                "-            'rust_library',",
                "-            'rust_test',",
                "-            'prebuilt_rust_library',",
                "-        ],",
                "-    ] /}",
                "-  <h3>The Basics</h3>",
                "-  <ul>",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'setup' /}",
                "-      {param page: 'getting_started' /}",
                "-      {param text: 'Getting Started' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'about' /}",
                "-      {param page: 'overview' /}",
                "-      {param text: 'Key Topics' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'learning' /}",
                "-      {param page: 'tutorial' /}",
                "-      {param text: 'Tutorial' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'setup' /}",
                "-      {param page: 'intellij_plugin_install' /}",
                "-      {param text: 'Installing the IntelliJ Plugin' /}",
                "-    {/call}",
                "-",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'article' /}",
                "-      {param page: 'exopackage' /}",
                "-      {param text: 'Exopackage' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'article' /}",
                "-      {param page: 'query_cheat_sheet' /}",
                "-      {param text: 'Buck Query Cheat Sheet' /}",
                "-    {/call}",
                "-  </ul>",
                "-  <h3>About</h3>",
                "-  <ul>",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'concept' /}",
                "-      {param page: 'what_makes_buck_so_fast' /}",
                "-      {param text: 'What Makes Buck so Fast?' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'about' /}",
                "-      {param page: 'showcase' /}",
                "-      {param text: 'Showcase' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'concept' /}",
                "-      {param page: 'troubleshooting' /}",
                "-      {param text: 'Troubleshooting' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'about' /}",
                "-      {param page: 'performance_tuning' /}",
                "-      {param text: 'Performance Tuning' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'concept' /}",
                "-      {param page: 'faq' /}",
                "-      {param text: 'FAQ' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'presentations' /}",
                "-      {param page: 'index' /}",
                "-      {param text: 'Learn More (Buck Presentations)' /}",
                "-    {/call}",
                "-  </ul>",
                "-  <h3>Concepts</h3>",
                "-  <ul>",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'concept' /}",
                "-      {param page: 'build_rule' /}",
                "-      {param text: 'Build Rule' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'concept' /}",
                "-      {param page: 'build_file' /}",
                "-      {param text: 'Build File' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'concept' /}",
                "-      {param page: 'build_target' /}",
                "-      {param text: 'Build Target' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'concept' /}",
                "-      {param page: 'build_target_pattern' /}",
                "-      {param text: 'Build Target Pattern' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'concept' /}",
                "-      {param page: 'buckjavaargs' /}",
                "-      {param text: '.buckjavaargs' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'concept' /}",
                "-      {param page: 'buckconfig' /}",
                "-      {param text: '.buckconfig' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'concept' /}",
                "-      {param page: 'visibility' /}",
                "-      {param text: 'Visibility' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'concept' /}",
                "-      {param page: 'http_cache_api' /}",
                "-      {param text: 'HTTP Cache API' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'concept' /}",
                "-      {param page: 'rule_keys' /}",
                "-      {param text: 'Rule Keys' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'concept' /}",
                "-      {param page: 'java_abis' /}",
                "-      {param text: 'Java ABIs' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'concept' /}",
                "-      {param page: 'skylark' /}",
                "-      {param text: 'Skylark' /}",
                "-    {/call}",
                "-  </ul>",
                "-  <h3>Build Rules</h3>",
                "-  <ul>",
                "-    // Ugh, closure doesn't have the concept of sorting, so we cannot control the order without",
                "-    // listing it ourselves.",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: 'Core' /}",
                "-        {param rules: $platformRulesMap['core'] /}",
                "-    {/call}",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: 'Android' /}",
                "-        {param rules: $platformRulesMap['android'] /}",
                "-    {/call}",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: 'CXX' /}",
                "-        {param rules: $platformRulesMap['cxx'] /}",
                "-    {/call}",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: 'D' /}",
                "-        {param rules: $platformRulesMap['d'] /}",
                "-    {/call}",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: 'Go' /}",
                "-        {param rules: $platformRulesMap['go'] /}",
                "-    {/call}",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: 'Groovy' /}",
                "-        {param rules: $platformRulesMap['groovy'] /}",
                "-    {/call}",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: 'Halide' /}",
                "-        {param rules: $platformRulesMap['halide'] /}",
                "-    {/call}",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: 'Haskell' /}",
                "-        {param rules: $platformRulesMap['haskell'] /}",
                "-    {/call}",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: 'iOS' /}",
                "-        {param rules: $platformRulesMap['ios'] /}",
                "-    {/call}",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: 'Java' /}",
                "-        {param rules: $platformRulesMap['java'] /}",
                "-    {/call}",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: 'Kotlin' /}",
                "-        {param rules: $platformRulesMap['kotlin'] /}",
                "-    {/call}",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: 'Lua' /}",
                "-        {param rules: $platformRulesMap['lua'] /}",
                "-    {/call}",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: 'OCaml' /}",
                "-        {param rules: $platformRulesMap['ocaml'] /}",
                "-    {/call}",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: 'Python' /}",
                "-        {param rules: $platformRulesMap['python'] /}",
                "-    {/call}",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: 'Rust' /}",
                "-        {param rules: $platformRulesMap['rust'] /}",
                "-    {/call}",
                "-    {call .platformBuildRuleLink}",
                "-        {param currentnavid: $navid /}",
                "-        {param platform: '.Net' /}",
                "-        {param rules: $platformRulesMap['dotnet'] /}",
                "-    {/call}",
                "-  </ul>",
                "-  <h3>Functions</h3>",
                "-  <ul>",
                "-    {foreach $function in [",
                "-        'add_build_file_dep',",
                "-        'allow_unsafe_import',",
                "-        'flatten_dicts',",
                "-        'glob',",
                "-        'get_base_path',",
                "-        'get_cell_name',",
                "-        'host_info',",
                "-        'include_defs',",
                "-        'load',",
                "-        'read_config',",
                "-        'subdir_glob',",
                "-        ]}",
                "-      {let $functiontext}",
                "-        {$function}()",
                "-      {/let}",
                "-      {call navigation.link}",
                "-        {param currentnavid: $navid /}",
                "-        {param folder: 'function' /}",
                "-        {param page: $function /}",
                "-        {param text: $functiontext /}",
                "-      {/call}",
                "-    {/foreach}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'function' /}",
                "-      {param page: 'string_parameter_macros' /}",
                "-      {param text: 'String Parameter Macros' /}",
                "-    {/call}",
                "-  </ul>",
                "-  {call skylark.tableOfContents}",
                "-    {param navid: $navid /}",
                "-  {/call}",
                "-  <h3>Commands</h3>",
                "-  <ul>",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'command' /}",
                "-      {param page: 'common_parameters' /}",
                "-      {param text: 'Common Parameters' /}",
                "-    {/call}",
                "-    {foreach $command in [",
                "-        'audit',",
                "-        'build',",
                "-        'clean',",
                "-        'doctor',",
                "-        'fetch',",
                "-        'fix',",
                "-        'install',",
                "-        'project',",
                "-        'publish',",
                "-        'query',",
                "-        'run',",
                "-        'root',",
                "-        'server',",
                "-        'suggest',",
                "-        'targets',",
                "-        'test',",
                "-        'uninstall',",
                "-        ]}",
                "-      {let $commandtext}",
                "-        buck {$command}",
                "-      {/let}",
                "-      {call navigation.link}",
                "-        {param currentnavid: $navid /}",
                "-        {param folder: 'command' /}",
                "-        {param page: $command /}",
                "-        {param text: $commandtext /}",
                "-      {/call}",
                "-    {/foreach}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'command' /}",
                "-      {param page: 'buckd' /}",
                "-      {param text: 'buckd' /}",
                "-    {/call}",
                "-  </ul>",
                "-  <h3>Extending Buck</h3>",
                "-  <ul>",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'extending' /}",
                "-      {param page: 'macros' /}",
                "-      {param text: 'Custom Macros' /}",
                "-    {/call}",
                "-    {call navigation.link}",
                "-      {param currentnavid: $navid /}",
                "-      {param folder: 'extending' /}",
                "-      {param page: 'rules' /}",
                "-      {param text: 'Custom Rules' /}",
                "-    {/call}",
                "-  </ul>",
                "-{/template}",
                "-",
                " /**",
                "@@ -635,3 +172,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "   <nav>",
                "-    {call buck.tableOfContents data=\"all\"}",
                "+    {call table_of_contents.main data=\"all\"}",
                "       {param navid: $navid /}",
                "diff --git a/docs/__navigation.soy b/docs/__navigation.soy",
                "index f3be349ec9..1841f62c41 100644",
                "--- a/docs/__navigation.soy",
                "+++ b/docs/__navigation.soy",
                "@@ -21 +21,21 @@",
                " {/template}",
                "+",
                "+/**",
                "+ * @param currentnavid The navigation id of the loaded page",
                "+ * @param platform",
                "+ * @param rules",
                "+ */",
                "+{template .platformBuildRuleLink}",
                "+    <li><strong>{$platform}</strong></li>",
                "+    {foreach $rule in $rules}",
                "+        {let $ruletext}",
                "+          {$rule}()",
                "+        {/let}",
                "+        {call .link}",
                "+          {param currentnavid: $currentnavid /}",
                "+          {param folder: 'rule' /}",
                "+          {param page: $rule /}",
                "+          {param text: $ruletext /}",
                "+        {/call}",
                "+    {/foreach}",
                "+{/template}",
                "diff --git a/docs/__table_of_contents.soy b/docs/__table_of_contents.soy",
                "new file mode 100644",
                "index 0000000000..334e3a38f5",
                "--- /dev/null",
                "+++ b/docs/__table_of_contents.soy",
                "@@ -0,0 +1,444 @@",
                "+{namespace table_of_contents}",
                "+",
                "+/**",
                "+ * Consider passing in the path to the URL of the page that the user",
                "+ * is currently on and not hyperlinking that item in the table of contents.",
                "+ * @param navid The navigation id of the loaded page",
                "+ */",
                "+{template .main}",
                "+    {let $platformRulesMap: [",
                "+        'android': [",
                "+            'android_aar',",
                "+            'android_binary',",
                "+            'android_build_config',",
                "+            'android_instrumentation_apk',",
                "+            'android_instrumentation_test',",
                "+            'android_library',",
                "+            'android_manifest',",
                "+            'android_prebuilt_aar',",
                "+            'android_resource',",
                "+            'apk_genrule',",
                "+            'gen_aidl',",
                "+            'keystore',",
                "+            'ndk_library',",
                "+            'prebuilt_jar',",
                "+            'prebuilt_native_library',",
                "+            'robolectric_test',",
                "+        ],",
                "+        'core': [",
                "+            'command_alias',",
                "+            'export_file',",
                "+            'filegroup',",
                "+            'genrule',",
                "+            'http_archive',",
                "+            'http_file',",
                "+            'remote_file',",
                "+            'worker_tool',",
                "+            'zip_file',",
                "+        ],",
                "+        'cxx': [",
                "+            'cxx_binary',",
                "+            'cxx_library',",
                "+            'cxx_precompiled_header',",
                "+            'cxx_test',",
                "+            'prebuilt_cxx_library',",
                "+            'prebuilt_cxx_library_group',",
                "+        ],",
                "+        'd': [",
                "+            'd_binary',",
                "+            'd_library',",
                "+            'd_test',",
                "+        ],",
                "+        'dotnet': [",
                "+            'csharp_library',",
                "+            'prebuilt_dotnet_library',",
                "+        ],",
                "+        'go': [",
                "+            'go_binary',",
                "+            'go_library',",
                "+            'go_test',",
                "+            'cgo_library',",
                "+        ],",
                "+        'groovy': [",
                "+            'groovy_library',",
                "+        ],",
                "+        'halide': [",
                "+            'halide_library',",
                "+        ],",
                "+        'haskell': [",
                "+            'haskell_binary',",
                "+            'haskell_library',",
                "+            'prebuilt_haskell_library',",
                "+        ],",
                "+        'ios': [",
                "+            'apple_asset_catalog',",
                "+            'apple_binary',",
                "+            'apple_bundle',",
                "+            'apple_library',",
                "+            'apple_package',",
                "+            'apple_resource',",
                "+            'apple_test',",
                "+            'core_data_model',",
                "+            'prebuilt_apple_framework',",
                "+        ],",
                "+        'java': [",
                "+            'java_binary',",
                "+            'java_library',",
                "+            'java_test',",
                "+            'prebuilt_jar',",
                "+            'prebuilt_native_library',",
                "+        ],",
                "+        'kotlin': [",
                "+            'kotlin_library',",
                "+            'kotlin_test',",
                "+        ],",
                "+        'lua': [",
                "+            'cxx_lua_extension',",
                "+            'lua_binary',",
                "+            'lua_library',",
                "+        ],",
                "+        'ocaml': [",
                "+            'ocaml_binary',",
                "+            'ocaml_library',",
                "+        ],",
                "+        'python': [",
                "+            'prebuilt_python_library',",
                "+            'python_binary',",
                "+            'python_library',",
                "+            'python_test',",
                "+        ],",
                "+        'rust': [",
                "+            'rust_binary',",
                "+            'rust_library',",
                "+            'rust_test',",
                "+            'prebuilt_rust_library',",
                "+        ],",
                "+    ] /}",
                "+  <h3>The Basics</h3>",
                "+  <ul>",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'setup' /}",
                "+      {param page: 'getting_started' /}",
                "+      {param text: 'Getting Started' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'about' /}",
                "+      {param page: 'overview' /}",
                "+      {param text: 'Key Topics' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'learning' /}",
                "+      {param page: 'tutorial' /}",
                "+      {param text: 'Tutorial' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'setup' /}",
                "+      {param page: 'intellij_plugin_install' /}",
                "+      {param text: 'Installing the IntelliJ Plugin' /}",
                "+    {/call}",
                "+",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'article' /}",
                "+      {param page: 'exopackage' /}",
                "+      {param text: 'Exopackage' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'article' /}",
                "+      {param page: 'query_cheat_sheet' /}",
                "+      {param text: 'Buck Query Cheat Sheet' /}",
                "+    {/call}",
                "+  </ul>",
                "+  <h3>About</h3>",
                "+  <ul>",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'concept' /}",
                "+      {param page: 'what_makes_buck_so_fast' /}",
                "+      {param text: 'What Makes Buck so Fast?' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'about' /}",
                "+      {param page: 'showcase' /}",
                "+      {param text: 'Showcase' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'concept' /}",
                "+      {param page: 'troubleshooting' /}",
                "+      {param text: 'Troubleshooting' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'about' /}",
                "+      {param page: 'performance_tuning' /}",
                "+      {param text: 'Performance Tuning' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'concept' /}",
                "+      {param page: 'faq' /}",
                "+      {param text: 'FAQ' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'presentations' /}",
                "+      {param page: 'index' /}",
                "+      {param text: 'Learn More (Buck Presentations)' /}",
                "+    {/call}",
                "+  </ul>",
                "+  <h3>Concepts</h3>",
                "+  <ul>",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'concept' /}",
                "+      {param page: 'build_rule' /}",
                "+      {param text: 'Build Rule' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'concept' /}",
                "+      {param page: 'build_file' /}",
                "+      {param text: 'Build File' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'concept' /}",
                "+      {param page: 'build_target' /}",
                "+      {param text: 'Build Target' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'concept' /}",
                "+      {param page: 'build_target_pattern' /}",
                "+      {param text: 'Build Target Pattern' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'concept' /}",
                "+      {param page: 'buckjavaargs' /}",
                "+      {param text: '.buckjavaargs' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'concept' /}",
                "+      {param page: 'buckconfig' /}",
                "+      {param text: '.buckconfig' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'concept' /}",
                "+      {param page: 'visibility' /}",
                "+      {param text: 'Visibility' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'concept' /}",
                "+      {param page: 'http_cache_api' /}",
                "+      {param text: 'HTTP Cache API' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'concept' /}",
                "+      {param page: 'rule_keys' /}",
                "+      {param text: 'Rule Keys' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'concept' /}",
                "+      {param page: 'java_abis' /}",
                "+      {param text: 'Java ABIs' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'concept' /}",
                "+      {param page: 'skylark' /}",
                "+      {param text: 'Skylark' /}",
                "+    {/call}",
                "+  </ul>",
                "+  <h3>Build Rules</h3>",
                "+  <ul>",
                "+    // Ugh, closure doesn't have the concept of sorting, so we cannot control the order without",
                "+    // listing it ourselves.",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: 'Core' /}",
                "+        {param rules: $platformRulesMap['core'] /}",
                "+    {/call}",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: 'Android' /}",
                "+        {param rules: $platformRulesMap['android'] /}",
                "+    {/call}",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: 'CXX' /}",
                "+        {param rules: $platformRulesMap['cxx'] /}",
                "+    {/call}",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: 'D' /}",
                "+        {param rules: $platformRulesMap['d'] /}",
                "+    {/call}",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: 'Go' /}",
                "+        {param rules: $platformRulesMap['go'] /}",
                "+    {/call}",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: 'Groovy' /}",
                "+        {param rules: $platformRulesMap['groovy'] /}",
                "+    {/call}",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: 'Halide' /}",
                "+        {param rules: $platformRulesMap['halide'] /}",
                "+    {/call}",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: 'Haskell' /}",
                "+        {param rules: $platformRulesMap['haskell'] /}",
                "+    {/call}",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: 'iOS' /}",
                "+        {param rules: $platformRulesMap['ios'] /}",
                "+    {/call}",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: 'Java' /}",
                "+        {param rules: $platformRulesMap['java'] /}",
                "+    {/call}",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: 'Kotlin' /}",
                "+        {param rules: $platformRulesMap['kotlin'] /}",
                "+    {/call}",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: 'Lua' /}",
                "+        {param rules: $platformRulesMap['lua'] /}",
                "+    {/call}",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: 'OCaml' /}",
                "+        {param rules: $platformRulesMap['ocaml'] /}",
                "+    {/call}",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: 'Python' /}",
                "+        {param rules: $platformRulesMap['python'] /}",
                "+    {/call}",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: 'Rust' /}",
                "+        {param rules: $platformRulesMap['rust'] /}",
                "+    {/call}",
                "+    {call navigation.platformBuildRuleLink}",
                "+        {param currentnavid: $navid /}",
                "+        {param platform: '.Net' /}",
                "+        {param rules: $platformRulesMap['dotnet'] /}",
                "+    {/call}",
                "+  </ul>",
                "+  <h3>Functions</h3>",
                "+  <ul>",
                "+    {foreach $function in [",
                "+        'add_build_file_dep',",
                "+        'allow_unsafe_import',",
                "+        'flatten_dicts',",
                "+        'glob',",
                "+        'get_base_path',",
                "+        'get_cell_name',",
                "+        'host_info',",
                "+        'include_defs',",
                "+        'load',",
                "+        'read_config',",
                "+        'subdir_glob',",
                "+        ]}",
                "+      {let $functiontext}",
                "+        {$function}()",
                "+      {/let}",
                "+      {call navigation.link}",
                "+        {param currentnavid: $navid /}",
                "+        {param folder: 'function' /}",
                "+        {param page: $function /}",
                "+        {param text: $functiontext /}",
                "+      {/call}",
                "+    {/foreach}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'function' /}",
                "+      {param page: 'string_parameter_macros' /}",
                "+      {param text: 'String Parameter Macros' /}",
                "+    {/call}",
                "+  </ul>",
                "+  {call skylark.tableOfContents}",
                "+    {param navid: $navid /}",
                "+  {/call}",
                "+  <h3>Commands</h3>",
                "+  <ul>",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'command' /}",
                "+      {param page: 'common_parameters' /}",
                "+      {param text: 'Common Parameters' /}",
                "+    {/call}",
                "+    {foreach $command in [",
                "+        'audit',",
                "+        'build',",
                "+        'clean',",
                "+        'doctor',",
                "+        'fetch',",
                "+        'fix',",
                "+        'install',",
                "+        'project',",
                "+        'publish',",
                "+        'query',",
                "+        'run',",
                "+        'root',",
                "+        'server',",
                "+        'suggest',",
                "+        'targets',",
                "+        'test',",
                "+        'uninstall',",
                "+        ]}",
                "+      {let $commandtext}",
                "+        buck {$command}",
                "+      {/let}",
                "+      {call navigation.link}",
                "+        {param currentnavid: $navid /}",
                "+        {param folder: 'command' /}",
                "+        {param page: $command /}",
                "+        {param text: $commandtext /}",
                "+      {/call}",
                "+    {/foreach}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'command' /}",
                "+      {param page: 'buckd' /}",
                "+      {param text: 'buckd' /}",
                "+    {/call}",
                "+  </ul>",
                "+  <h3>Extending Buck</h3>",
                "+  <ul>",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'extending' /}",
                "+      {param page: 'macros' /}",
                "+      {param text: 'Custom Macros' /}",
                "+    {/call}",
                "+    {call navigation.link}",
                "+      {param currentnavid: $navid /}",
                "+      {param folder: 'extending' /}",
                "+      {param page: 'rules' /}",
                "+      {param text: 'Custom Rules' /}",
                "+    {/call}",
                "+  </ul>",
                "+{/template}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "docs/__common.soy",
                "docs/__navigation.soy",
                "docs/__table_of_contents.soy"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: lead",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "217f5387246d29b21b0624ec3bc44487a2ee9c16",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521698105,
            "hunks": 3,
            "message": "iOS E2E template: load check Summary: Super simple check of macros that makes an apple_library visible Test Plan: Built locally Reviewed By: bobyangyf fbshipit-source-id: b243333",
            "diff": [
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/buck_imports/visible_apple_library.bzl b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/buck_imports/visible_apple_library.bzl",
                "new file mode 100644",
                "index 0000000000..26642f47cb",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/buck_imports/visible_apple_library.bzl",
                "@@ -0,0 +1,12 @@",
                "+# Copyright 2018-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+\"\"\"Exposes an auto-public version of apple_library. We use this to test loading macros\"\"\"",
                "+",
                "+def visible_apple_library(**kwargs):",
                "+    \"\"\"apple_library that is by default public\"\"\"",
                "+    kwargs[\"visibility\"] = [\"PUBLIC\"]",
                "+    apple_library(**kwargs)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/BUCK.fixture",
                "index d78452a865..d7e52db2c8 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/BUCK.fixture",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/BUCK.fixture",
                "@@ -6,3 +6,6 @@",
                "-apple_library(",
                "+# Uses load for simple change to test `load` at a basic level",
                "+load(\"//ios/buck_imports:visible_apple_library.bzl\", \"visible_apple_library\")",
                "+",
                "+visible_apple_library(",
                "     name = \"capitalize\",",
                "@@ -14,5 +17,2 @@ apple_library(",
                "     ],",
                "-    visibility = [",
                "-        \"PUBLIC\",",
                "-    ],",
                " )"
            ],
            "changed_files": [
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/buck_imports/visible_apple_library.bzl",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/BUCK.fixture"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: load",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8139e0f22caebb9226483bd60e08188289348087",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522458847,
            "hunks": 2,
            "message": "Update Nailgun Summary: This brings in https://github.com/facebook/nailgun/pull/131 Reviewed By: styurin fbshipit-source-id: adc160b",
            "diff": [
                "diff --git a/third-party/java/nailgun/VERSION b/third-party/java/nailgun/VERSION",
                "index e60961676f..0d9d5ba402 100644",
                "--- a/third-party/java/nailgun/VERSION",
                "+++ b/third-party/java/nailgun/VERSION",
                "@@ -1 +1 @@",
                "-7bd809f68d99435ff89326d61b232553d5c8f3ad",
                "\\ No newline at end of file",
                "+f9c1d5a437cbeaf3f54a793cc2f58d9b41da0c6a",
                "\\ No newline at end of file",
                "diff --git a/third-party/java/nailgun/nailgun-server-0.9.3-SNAPSHOT-sources.jar b/third-party/java/nailgun/nailgun-server-0.9.3-SNAPSHOT-sources.jar",
                "index 8843f9d448..5a6c384407 100644",
                "Binary files a/third-party/java/nailgun/nailgun-server-0.9.3-SNAPSHOT-sources.jar and b/third-party/java/nailgun/nailgun-server-0.9.3-SNAPSHOT-sources.jar differ",
                "diff --git a/third-party/java/nailgun/nailgun-server-0.9.3-SNAPSHOT.jar b/third-party/java/nailgun/nailgun-server-0.9.3-SNAPSHOT.jar",
                "index 2db6f78366..dcd7648f76 100644",
                "Binary files a/third-party/java/nailgun/nailgun-server-0.9.3-SNAPSHOT.jar and b/third-party/java/nailgun/nailgun-server-0.9.3-SNAPSHOT.jar differ"
            ],
            "changed_files": [
                "third-party/java/nailgun/VERSION",
                "third-party/java/nailgun/nailgun-server-0.9.3-SNAPSHOT-sources.jar",
                "third-party/java/nailgun/nailgun-server-0.9.3-SNAPSHOT.jar"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "488013ccef5ee9c8eb05a1bc048bf513e7798bfa",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521844504,
            "hunks": 32,
            "message": "ocaml: don't drop flavors from targets when forming paths Summary: This maintains flavors in target names when creating output paths for OCaml rules, so that two rules with different flavors won't write to the same output location. Reviewed By: ttsugriy fbshipit-source-id: 2a83b70",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java b/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "index 819926abd9..879cf69ff5 100644",
                "--- a/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "+++ b/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "@@ -26,3 +26,2 @@ import com.facebook.buck.model.BuildTarget;",
                " import com.facebook.buck.model.BuildTargets;",
                "-import com.facebook.buck.model.UnflavoredBuildTarget;",
                " import com.facebook.buck.rules.AddToRuleKey;",
                "@@ -65,3 +64,3 @@ abstract class AbstractOcamlBuildContext implements AddsToRuleKey {",
                "-  public abstract UnflavoredBuildTarget getBuildTarget();",
                "+  public abstract BuildTarget getBuildTarget();",
                "@@ -171,8 +170,5 @@ abstract class AbstractOcamlBuildContext implements AddsToRuleKey {",
                "-  private static Path getArchiveNativeOutputPath(",
                "-      UnflavoredBuildTarget target, ProjectFilesystem filesystem) {",
                "+  private static Path getArchiveNativeOutputPath(BuildTarget target, ProjectFilesystem filesystem) {",
                "     return BuildTargets.getGenPath(",
                "-        filesystem,",
                "-        BuildTarget.of(target),",
                "-        \"%s/lib\" + target.getShortName() + OcamlCompilables.OCAML_CMXA);",
                "+        filesystem, target, \"%s/lib\" + target.getShortName() + OcamlCompilables.OCAML_CMXA);",
                "   }",
                "@@ -180,7 +176,5 @@ abstract class AbstractOcamlBuildContext implements AddsToRuleKey {",
                "   private static Path getArchiveBytecodeOutputPath(",
                "-      UnflavoredBuildTarget target, ProjectFilesystem filesystem) {",
                "+      BuildTarget target, ProjectFilesystem filesystem) {",
                "     return BuildTargets.getGenPath(",
                "-        filesystem,",
                "-        BuildTarget.of(target),",
                "-        \"%s/lib\" + target.getShortName() + OcamlCompilables.OCAML_CMA);",
                "+        filesystem, target, \"%s/lib\" + target.getShortName() + OcamlCompilables.OCAML_CMA);",
                "   }",
                "@@ -192,6 +186,6 @@ abstract class AbstractOcamlBuildContext implements AddsToRuleKey {",
                "   public Path getNativePluginOutput() {",
                "-    UnflavoredBuildTarget target = getBuildTarget();",
                "+    BuildTarget target = getBuildTarget();",
                "     return BuildTargets.getGenPath(",
                "         getProjectFilesystem(),",
                "-        BuildTarget.of(target),",
                "+        target,",
                "         \"%s/lib\" + target.getShortName() + OcamlCompilables.OCAML_CMXS);",
                "@@ -200,3 +194,3 @@ abstract class AbstractOcamlBuildContext implements AddsToRuleKey {",
                "   public static Path getNativeOutputPath(",
                "-      UnflavoredBuildTarget target, ProjectFilesystem filesystem, boolean isLibrary) {",
                "+      BuildTarget target, ProjectFilesystem filesystem, boolean isLibrary) {",
                "     if (isLibrary) {",
                "@@ -205,3 +199,3 @@ abstract class AbstractOcamlBuildContext implements AddsToRuleKey {",
                "       return BuildTargets.getScratchPath(",
                "-          filesystem, BuildTarget.of(target), \"%s/\" + target.getShortName() + \".opt\");",
                "+          filesystem, target, \"%s/\" + target.getShortName() + \".opt\");",
                "     }",
                "@@ -214,3 +208,3 @@ abstract class AbstractOcamlBuildContext implements AddsToRuleKey {",
                "   public static Path getBytecodeOutputPath(",
                "-      UnflavoredBuildTarget target, ProjectFilesystem filesystem, boolean isLibrary) {",
                "+      BuildTarget target, ProjectFilesystem filesystem, boolean isLibrary) {",
                "     if (isLibrary) {",
                "@@ -218,4 +212,3 @@ abstract class AbstractOcamlBuildContext implements AddsToRuleKey {",
                "     } else {",
                "-      return BuildTargets.getScratchPath(",
                "-          filesystem, BuildTarget.of(target), \"%s/\" + target.getShortName());",
                "+      return BuildTargets.getScratchPath(filesystem, target, \"%s/\" + target.getShortName());",
                "     }",
                "@@ -232,3 +225,3 @@ abstract class AbstractOcamlBuildContext implements AddsToRuleKey {",
                "   public static Path getCompileNativeOutputDir(",
                "-      UnflavoredBuildTarget buildTarget, ProjectFilesystem filesystem, boolean isLibrary) {",
                "+      BuildTarget buildTarget, ProjectFilesystem filesystem, boolean isLibrary) {",
                "     return getNativeOutputPath(buildTarget, filesystem, isLibrary)",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "index 8b3e5d5912..a4e7125ee2 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "@@ -84,2 +84,3 @@ public class OcamlBinaryDescription",
                "           OcamlRuleBuilder.createFineGrainedBuildRules(",
                "+              buildTarget,",
                "               ocamlPlatform,",
                "@@ -100,2 +101,3 @@ public class OcamlBinaryDescription",
                "           OcamlRuleBuilder.createBulkCompileRule(",
                "+              buildTarget,",
                "               ocamlPlatform,",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "index 8a9fe740d1..f604805f45 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "@@ -97,2 +97,3 @@ public class OcamlLibraryDescription",
                "             OcamlRuleBuilder.createFineGrainedBuildRules(",
                "+                buildTarget,",
                "                 ocamlPlatform,",
                "@@ -110,3 +111,2 @@ public class OcamlLibraryDescription",
                "             buildTarget,",
                "-            compileBuildTarget,",
                "             context.getProjectFilesystem(),",
                "@@ -132,2 +132,3 @@ public class OcamlLibraryDescription",
                "             OcamlRuleBuilder.createBulkCompileRule(",
                "+                buildTarget,",
                "                 ocamlPlatform,",
                "@@ -144,3 +145,2 @@ public class OcamlLibraryDescription",
                "             buildTarget,",
                "-            compileBuildTarget,",
                "             context.getProjectFilesystem(),",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "index 69d2df59f5..fe0de185ce 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "@@ -165,2 +165,3 @@ public class OcamlRuleBuilder {",
                "   static OcamlBuild createBulkCompileRule(",
                "+      BuildTarget buildTarget,",
                "       OcamlPlatform ocamlPlatform,",
                "@@ -264,3 +265,3 @@ public class OcamlRuleBuilder {",
                "             .setCLinkableInput(cLinkableInput)",
                "-            .setBuildTarget(compileBuildTarget.getUnflavoredBuildTarget())",
                "+            .setBuildTarget(buildTarget)",
                "             .setLibrary(isLibrary)",
                "@@ -286,2 +287,3 @@ public class OcamlRuleBuilder {",
                "   static OcamlGeneratedBuildRules createFineGrainedBuildRules(",
                "+      BuildTarget buildTarget,",
                "       OcamlPlatform ocamlPlatform,",
                "@@ -384,3 +386,3 @@ public class OcamlRuleBuilder {",
                "             .setCLinkableInput(cLinkableInput)",
                "-            .setBuildTarget(compileBuildTarget.getUnflavoredBuildTarget())",
                "+            .setBuildTarget(buildTarget)",
                "             .setLibrary(isLibrary)",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java b/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "index ca4fa2f5e1..9f78b55dc2 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "@@ -21,3 +21,2 @@ import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                " import com.facebook.buck.model.BuildTarget;",
                "-import com.facebook.buck.model.UnflavoredBuildTarget;",
                " import com.facebook.buck.rules.BuildRule;",
                "@@ -37,3 +36,2 @@ import java.util.stream.Stream;",
                " class OcamlStaticLibrary extends OcamlLibrary implements HasRuntimeDeps {",
                "-  private final BuildTarget staticLibraryTarget;",
                "   private final ImmutableList<String> linkerFlags;",
                "@@ -49,3 +47,2 @@ class OcamlStaticLibrary extends OcamlLibrary implements HasRuntimeDeps {",
                "       BuildTarget buildTarget,",
                "-      BuildTarget compileBuildTarget,",
                "       ProjectFilesystem projectFilesystem,",
                "@@ -69,3 +66,2 @@ class OcamlStaticLibrary extends OcamlLibrary implements HasRuntimeDeps {",
                "     this.runtimeDeps = runtimeDeps;",
                "-    staticLibraryTarget = OcamlRuleBuilder.createStaticLibraryBuildTarget(compileBuildTarget);",
                "   }",
                "@@ -79,3 +75,2 @@ class OcamlStaticLibrary extends OcamlLibrary implements HasRuntimeDeps {",
                "     // Add arg and input for static library.",
                "-    UnflavoredBuildTarget staticBuildTarget = staticLibraryTarget.getUnflavoredBuildTarget();",
                "     inputBuilder.addArgs(",
                "@@ -86,5 +81,5 @@ class OcamlStaticLibrary extends OcamlLibrary implements HasRuntimeDeps {",
                "                     ? OcamlBuildContext.getBytecodeOutputPath(",
                "-                        staticBuildTarget, getProjectFilesystem(), /* isLibrary */ true)",
                "+                        getBuildTarget(), getProjectFilesystem(), /* isLibrary */ true)",
                "                     : OcamlBuildContext.getNativeOutputPath(",
                "-                        staticBuildTarget, getProjectFilesystem(), /* isLibrary */ true))));",
                "+                        getBuildTarget(), getProjectFilesystem(), /* isLibrary */ true))));",
                "@@ -111,3 +106,3 @@ class OcamlStaticLibrary extends OcamlLibrary implements HasRuntimeDeps {",
                "     return OcamlBuildContext.getCompileNativeOutputDir(",
                "-        staticLibraryTarget.getUnflavoredBuildTarget(), getProjectFilesystem(), true);",
                "+        getBuildTarget(), getProjectFilesystem(), true);",
                "   }",
                "diff --git a/test/com/facebook/buck/ocaml/OCamlIntegrationTest.java b/test/com/facebook/buck/ocaml/OCamlIntegrationTest.java",
                "index f6a7c46d0a..8d8405d1a9 100644",
                "--- a/test/com/facebook/buck/ocaml/OCamlIntegrationTest.java",
                "+++ b/test/com/facebook/buck/ocaml/OCamlIntegrationTest.java",
                "@@ -231,3 +231,3 @@ public class OCamlIntegrationTest {",
                "-    Path pluginCmxsFile = ocamlNativePluginDir.resolve(\"plugin\").resolve(\"libplugin.cmxs\");",
                "+    Path pluginCmxsFile = ocamlNativePluginDir.resolve(\"plugin#default\").resolve(\"libplugin.cmxs\");"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "test/com/facebook/buck/ocaml/OCamlIntegrationTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "58f3943c381a9fd18a22a4d5386b46cc475d4e78",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521831488,
            "hunks": 1,
            "message": "Use compilation-database to view compiler flags Summary: Update `buck build` documentation to explain how to use the compilation database to view the flags that Buck is sending to the C++ compiler. In the next week or two, I will create a new section in the docs that describes common tasks--and move this content there. But this is a good place for it for now. Reviewed By: ttsugriy fbshipit-source-id: e98f143",
            "diff": [
                "diff --git a/docs/command/build.soy b/docs/command/build.soy",
                "index f412d40489..2ad465606a 100644",
                "--- a/docs/command/build.soy",
                "+++ b/docs/command/build.soy",
                "@@ -160,2 +160,83 @@ Example:",
                "+{param examples}",
                "+",
                "+<h3>View compiler flags using the compilation database</h3>",
                "+",
                "+<p>",
                "+For C++ builds, to view the compiler flags that Buck is passing to the",
                "+C++ compiler, tell Buck to generate a <em>compilation database</em> for",
                "+the target. The compilation database is a JSON file that contains",
                "+information about how Buck compiled the target. The syntax is:",
                "+</p>",
                "+",
                "+{literal}<pre class=\"prettyprint lang-bash\">",
                "+buck build path/to/target#compilation-database",
                "+</pre>{/literal}",
                "+",
                "+<p>",
                "+You can then get the path to the compilation-database file itself using:",
                "+</p>",
                "+",
                "+{literal}<pre class=\"prettyprint lang-bash\">",
                "+buck targets --show-output path/to/target#compilation-database",
                "+</pre>{/literal}",
                "+",
                "+<p>",
                "+For example:",
                "+</p>",
                "+",
                "+{literal}<pre class=\"prettyprint lang-bash\">",
                "+$ buck clean",
                "+Parsing buck files: finished in 1.7 sec (100%)",
                "+Building: finished in 1.5 sec (100%) 3/3 jobs, 3 updated, 0.0% cache miss",
                "+  Total time: 3.7 sec",
                "+",
                "+$ buck build :main#compilation-database",
                "+Building: finished in 1.5 sec (100%) 3/3 jobs, 3 updated, 0.0% cache miss",
                "+  Total time: 3.7 sec",
                "+",
                "+$ buck targets --show-output :main#compilation-database",
                "+//:main#compilation-database buck-out/gen/__main#compilation-database/compile_commands.json",
                "+",
                "+$ jq . buck-out/gen/__main#compilation-database/compile_commands.json ",
                "+[",
                "+  {",
                "+    \"directory\": \"/Users/devuser/git/gtDev/C++/oop/simple-classes\",",
                "+    \"file\": \"/Users/devuser/git/gtDev/C++/oop/simple-classes/main.cpp\",",
                "+    \"arguments\": [",
                "+      \"/usr/bin/clang++\",",
                "+      \"-x\",",
                "+      \"c++\",",
                "+      \"-I\",",
                "+      \"buck-out/gen/main#default,private-headers.hmap\",",
                "+      \"-I\",",
                "+      \"buck-out\",",
                "+      \"-Xclang\",",
                "+      \"-fdebug-compilation-dir\",",
                "+      \"-Xclang\",",
                "+      \".\",",
                "+      \"-fdebug-prefix-map=/Users/devuser/git/gtDev/C++/oop/simple-classes=.\",",
                "+      \"-c\",",
                "+      \"-MD\",",
                "+      \"-MF\",",
                "+      \"buck-out/gen/main#compile-main.cpp.oa5b6a1ba,default/main.cpp.o.dep\",",
                "+      \"main.cpp\",",
                "+      \"-o\",",
                "+      \"buck-out/gen/main#compile-main.cpp.oa5b6a1ba,default/main.cpp.o\"",
                "+    ]",
                "+  }",
                "+]",
                "+</pre>{/literal}",
                "+",
                "+<p>",
                "+In the preceding example <code>:main</code> specifies ",
                "+a <em>relative</em> build target that is defined in the build file ",
                "+located in the current directory.",
                "+The <code>jq</code> tool&mdash;available through package managers such ",
                "+as Homebrew&mdash;enables you to pretty-print JSON files.",
                "+</p>",
                "+",
                "+",
                "+{/param} // examples",
                "+",
                " {/call}"
            ],
            "changed_files": [
                "docs/command/build.soy"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: command",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "3ed1fe86213dc15d74468f99418476a43ddea5f5",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521602302,
            "hunks": 4,
            "message": "E2E android test Summary: Test that verifies that an android build with the given project structure builds Leaving windows for later as it seems some aspects of Windows building on android (ndk compiler path determination) are broken Test Plan: Ran locally (on mac) Reviewed By: styurin fbshipit-source-id: 9be5f4b",
            "diff": [
                "diff --git a/test/com/facebook/buck/android/endtoend/AndroidEndToEndTest.java b/test/com/facebook/buck/android/endtoend/AndroidEndToEndTest.java",
                "new file mode 100644",
                "index 0000000000..ce5c75c522",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/android/endtoend/AndroidEndToEndTest.java",
                "@@ -0,0 +1,77 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.android.endtoend;",
                "+",
                "+import com.facebook.buck.android.AssumeAndroidPlatform;",
                "+import com.facebook.buck.testutil.ProcessResult;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndEnvironment;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndRunner;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndTestDescriptor;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndWorkspace;",
                "+import com.facebook.buck.testutil.endtoend.Environment;",
                "+import org.junit.Before;",
                "+import org.junit.Test;",
                "+import org.junit.runner.RunWith;",
                "+",
                "+/**",
                "+ * E2E tests for buck's building process on an environment constructed like:",
                "+ *",
                "+ * <pre>",
                "+ *                                           android_binary",
                "+ *                                                  +",
                "+ *       +------------+-------------+---------------+----------------------------+",
                "+ *       v            v             v                                            v",
                "+ * export_file     manifest     keystore                                  android_library",
                "+ *                    +                                                          +",
                "+ *                    |                    +------------------+----------------------------------------+-----------------+",
                "+ *                    v                    v                  v                  v                     v                 v",
                "+ *                 genrule          android_resource   android_library      prebuilt_jar     android_build_config   cxx_library",
                "+ *                    +                                       +                  +                                       +",
                "+ *    +---------------+                                       |                  |                                       |",
                "+ *    v               v                                       v                  v                                       v",
                "+ * genrule      python_binary                      android_prebuilt_aar       genrule                               cxx_library",
                "+ *                                                                               +",
                "+ *                                                                               |",
                "+ *                                                                               v",
                "+ *                                                                         python_binary",
                "+ * </pre>",
                "+ */",
                "+@RunWith(EndToEndRunner.class)",
                "+public class AndroidEndToEndTest {",
                "+  private static final String mainTarget = \"//android:demo-app\";",
                "+",
                "+  @Before",
                "+  public void assumeEnvironment() throws InterruptedException {",
                "+    AssumeAndroidPlatform.assumeSdkIsAvailable();",
                "+    AssumeAndroidPlatform.assumeNdkIsAvailable();",
                "+  }",
                "+",
                "+  @Environment",
                "+  public static EndToEndEnvironment baseEnvironment() {",
                "+    return new EndToEndEnvironment()",
                "+        .addTemplates(\"mobile\")",
                "+        .withCommand(\"build\")",
                "+        .withTargets(mainTarget);",
                "+  }",
                "+",
                "+  /** Determines that buck successfully outputs proper programs */",
                "+  @Test",
                "+  public void shouldBuild(",
                "+      EndToEndTestDescriptor test, EndToEndWorkspace workspace, ProcessResult result) {",
                "+    result.assertSuccess(\"Did not successfully build\");",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/android/endtoend/BUCK b/test/com/facebook/buck/android/endtoend/BUCK",
                "new file mode 100644",
                "index 0000000000..25b1b60973",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/android/endtoend/BUCK",
                "@@ -0,0 +1,18 @@",
                "+load(\"//tools/build_rules:java_rules.bzl\", \"java_immutables_library\", \"java_test\")",
                "+",
                "+TEST_SRCS = [",
                "+    \"*Test.java\",",
                "+]",
                "+",
                "+java_test(",
                "+    name = \"endtoend\",",
                "+    srcs = glob(",
                "+        TEST_SRCS,",
                "+    ),",
                "+    deps = [",
                "+        \"//test/com/facebook/buck/android:testutil\",",
                "+        \"//test/com/facebook/buck/testutil:testutil\",",
                "+        \"//test/com/facebook/buck/testutil/endtoend:testutil\",",
                "+        \"//third-party/java/junit:junit\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/testutil/PlatformUtils.java b/test/com/facebook/buck/testutil/PlatformUtils.java",
                "index 5f850b2c1c..761c1d0138 100644",
                "--- a/test/com/facebook/buck/testutil/PlatformUtils.java",
                "+++ b/test/com/facebook/buck/testutil/PlatformUtils.java",
                "@@ -74,17 +74,21 @@ public abstract class PlatformUtils {",
                "       String buildDefs = prefix + \"BUILD_DEFS\";",
                "-      workspace.replaceFileContents(buckconfig, \"$CL_EXE$\", replacementForConfig(getClExe()));",
                "-      workspace.replaceFileContents(buckconfig, \"$LIB_EXE$\", replacementForConfig(getLibExe()));",
                "-      workspace.replaceFileContents(buckconfig, \"$LINK_EXE$\", replacementForConfig(getLinkExe()));",
                "-      workspace.replaceFileContents(",
                "-          buildDefs,",
                "-          \"$WINDOWS_COMPILE_FLAGS$\",",
                "-          Arrays.stream(getWindowsIncludeDirs())",
                "-              .map(s -> quoter.quote(\"/I\" + s))",
                "-              .collect(Collectors.joining(\", \")));",
                "-      workspace.replaceFileContents(",
                "-          buildDefs,",
                "-          \"$WINDOWS_LINK_FLAGS$\",",
                "-          Arrays.stream(getWindowsLibDirs())",
                "-              .map(s -> quoter.quote(\"/LIBPATH:\" + s))",
                "-              .collect(Collectors.joining(\", \")));",
                "+      if (Files.exists(workspace.getPath(buckconfig))) {",
                "+        workspace.replaceFileContents(buckconfig, \"$CL_EXE$\", replacementForConfig(getClExe()));",
                "+        workspace.replaceFileContents(buckconfig, \"$LIB_EXE$\", replacementForConfig(getLibExe()));",
                "+        workspace.replaceFileContents(buckconfig, \"$LINK_EXE$\", replacementForConfig(getLinkExe()));",
                "+      }",
                "+      if (Files.exists(workspace.getPath(buildDefs))) {",
                "+        workspace.replaceFileContents(",
                "+            buildDefs,",
                "+            \"$WINDOWS_COMPILE_FLAGS$\",",
                "+            Arrays.stream(getWindowsIncludeDirs())",
                "+                .map(s -> quoter.quote(\"/I\" + s))",
                "+                .collect(Collectors.joining(\", \")));",
                "+        workspace.replaceFileContents(",
                "+            buildDefs,",
                "+            \"$WINDOWS_LINK_FLAGS$\",",
                "+            Arrays.stream(getWindowsLibDirs())",
                "+                .map(s -> quoter.quote(\"/LIBPATH:\" + s))",
                "+                .collect(Collectors.joining(\", \")));",
                "+      }",
                "     }",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/.buckconfig b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/.buckconfig",
                "index 7650f78df3..5e477cd211 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/.buckconfig",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/.buckconfig",
                "@@ -34,2 +34 @@",
                "              buck-out, \\",
                "-"
            ],
            "changed_files": [
                "test/com/facebook/buck/android/endtoend/AndroidEndToEndTest.java",
                "test/com/facebook/buck/android/endtoend/BUCK",
                "test/com/facebook/buck/testutil/PlatformUtils.java",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/.buckconfig"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "43cbad24f9997b9f1df0fa29a682c3baab250ace",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521827881,
            "hunks": 6,
            "message": "Add TestRule support to the EndToEndRunner Summary: Add Rule support for E2ERunner to bring it more in line with default JUnitRunner. We are not supporting MethodRules as they are deprecated functionally (as mentioned in comment) After this, we will be in line with the default JUnitRunner minus the Test timeout parameters, which is deprecated, and can be mimicked with TestRules. Reviewed By: sbalabanov fbshipit-source-id: 1de8e73",
            "diff": [
                "diff --git a/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java b/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java",
                "index e1d991c4b8..447527b929 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java",
                "+++ b/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java",
                "@@ -18,2 +18,5 @@ package com.facebook.buck.testutil.endtoend;",
                "+import static org.junit.internal.runners.rules.RuleMemberValidator.RULE_METHOD_VALIDATOR;",
                "+import static org.junit.internal.runners.rules.RuleMemberValidator.RULE_VALIDATOR;",
                "+",
                " import com.facebook.buck.testutil.ProcessResult;",
                "@@ -31,2 +34,3 @@ import org.junit.Before;",
                " import org.junit.Ignore;",
                "+import org.junit.Rule;",
                " import org.junit.Test;",
                "@@ -37,2 +41,4 @@ import org.junit.internal.runners.statements.RunAfters;",
                " import org.junit.internal.runners.statements.RunBefores;",
                "+import org.junit.rules.RunRules;",
                "+import org.junit.rules.TestRule;",
                " import org.junit.runner.Description;",
                "@@ -277,2 +283,4 @@ public class EndToEndRunner extends ParentRunner<EndToEndTestDescriptor> {",
                "     validatePublicVoidNoArgMethods(After.class, false, errors);",
                "+    RULE_VALIDATOR.validate(getTestClass(), errors);",
                "+    RULE_METHOD_VALIDATOR.validate(getTestClass(), errors);",
                "   }",
                "@@ -361,2 +369,13 @@ public class EndToEndRunner extends ParentRunner<EndToEndTestDescriptor> {",
                "+  private Statement withRules(EndToEndTestDescriptor child, Object target, Statement statement) {",
                "+    // We do not support MethodRules like the JUnit runner does as it has been functionally",
                "+    // replaced by TestRules (https://junit.org/junit4/javadoc/4.12/org/junit/rules/MethodRule.html)",
                "+    List<TestRule> testRules =",
                "+        getTestClass().getAnnotatedMethodValues(target, Rule.class, TestRule.class);",
                "+    testRules.addAll(getTestClass().getAnnotatedFieldValues(target, Rule.class, TestRule.class));",
                "+    return testRules.isEmpty()",
                "+        ? statement",
                "+        : new RunRules(statement, testRules, describeChild(child));",
                "+  }",
                "+",
                "   private Object createTest() throws Exception {",
                "@@ -384,2 +403,3 @@ public class EndToEndRunner extends ParentRunner<EndToEndTestDescriptor> {",
                "     statement = withExpectedExceptions(testDescriptor, statement);",
                "+    statement = withRules(testDescriptor, test, statement);",
                "     return statement;"
            ],
            "changed_files": [
                "test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "55660ab624d9bc5b974d5fbf59f949f401c39987",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522197928,
            "hunks": 1,
            "message": "ProjectFilesystem: throw getPathForRelativeExistingPath on dangling symlink Summary: Follow up on a TODO from a while ago, which will allow the coercers to fail early with a friendly message for the user (and prevent harder-to-read, lower- level errors from propagating stack traces to the user). Reviewed By: styurin fbshipit-source-id: c249883",
            "diff": [
                "diff --git a/src/com/facebook/buck/io/filesystem/impl/DefaultProjectFilesystem.java b/src/com/facebook/buck/io/filesystem/impl/DefaultProjectFilesystem.java",
                "index dc030115af..4f2dc40d31 100644",
                "--- a/src/com/facebook/buck/io/filesystem/impl/DefaultProjectFilesystem.java",
                "+++ b/src/com/facebook/buck/io/filesystem/impl/DefaultProjectFilesystem.java",
                "@@ -303,7 +303,2 @@ public class DefaultProjectFilesystem implements ProjectFilesystem {",
                "-    // TODO(mbolin): Eliminate this temporary exemption for symbolic links.",
                "-    if (isSymLink(file)) {",
                "-      return file;",
                "-    }",
                "-",
                "     throw new RuntimeException("
            ],
            "changed_files": [
                "src/com/facebook/buck/io/filesystem/impl/DefaultProjectFilesystem.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f6c91800587b830eed19e755882b00a76581592e",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522721509,
            "hunks": 11,
            "message": "Remove deprecated PACKAGE_NAME variable. Summary: It has been deprecated since introduction, but was used for `package_name` function implementation. Now that `package_name` function no longer uses it, it's time to remove it. Reviewed By: sbalabanov fbshipit-source-id: bb261a6",
            "diff": [
                "diff --git a/src/com/facebook/buck/skylark/function/SkylarkNativeModule.java b/src/com/facebook/buck/skylark/function/SkylarkNativeModule.java",
                "index bc1a2199f0..c571696bfb 100644",
                "--- a/src/com/facebook/buck/skylark/function/SkylarkNativeModule.java",
                "+++ b/src/com/facebook/buck/skylark/function/SkylarkNativeModule.java",
                "@@ -28,3 +28,2 @@ import com.google.devtools.build.lib.syntax.EvalException;",
                " import com.google.devtools.build.lib.syntax.FuncallExpression;",
                "-import com.google.devtools.build.lib.syntax.Runtime;",
                " import com.google.devtools.build.lib.syntax.SkylarkSignatureProcessor;",
                "@@ -67,3 +66,4 @@ public class SkylarkNativeModule {",
                "           env.checkLoadingPhase(\"native.package_name\", ast.getLocation());",
                "-          return (String) env.lookup(Runtime.PKG_NAME);",
                "+          PackageContext packageContext = PackageFactory.getPackageContext(env, ast);",
                "+          return packageContext.getPackageIdentifier().getPackageFragment().getPathString();",
                "         }",
                "diff --git a/src/com/facebook/buck/skylark/parser/RuleFunctionFactory.java b/src/com/facebook/buck/skylark/parser/RuleFunctionFactory.java",
                "index bb4716098f..51e141eabd 100644",
                "--- a/src/com/facebook/buck/skylark/parser/RuleFunctionFactory.java",
                "+++ b/src/com/facebook/buck/skylark/parser/RuleFunctionFactory.java",
                "@@ -22,2 +22,4 @@ import com.facebook.buck.rules.coercer.ParamInfo;",
                " import com.facebook.buck.rules.coercer.TypeCoercerFactory;",
                "+import com.facebook.buck.skylark.packages.PackageContext;",
                "+import com.facebook.buck.skylark.packages.PackageFactory;",
                " import com.google.common.base.CaseFormat;",
                "@@ -74,5 +76,8 @@ public class RuleFunctionFactory {",
                "           Map<String, Object> kwargs, FuncallExpression ast, Environment env) throws EvalException {",
                "+        PackageContext packageContext = PackageFactory.getPackageContext(env, ast);",
                "         ImmutableMap.Builder<String, Object> builder =",
                "             ImmutableMap.<String, Object>builder()",
                "-                .put(\"buck.base_path\", env.lookup(Runtime.PKG_NAME))",
                "+                .put(",
                "+                    \"buck.base_path\",",
                "+                    packageContext.getPackageIdentifier().getPackageFragment().getPathString())",
                "                 .put(\"buck.type\", name);",
                "diff --git a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "index fdace2fb9e..6eb5c52247 100644",
                "--- a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "+++ b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "@@ -234,5 +234,5 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "     String basePath = getBasePath(buildFile);",
                "-    env.setupDynamic(Runtime.PKG_NAME, basePath);",
                "     parseContext.setup(env);",
                "     env.setup(\"glob\", Glob.create());",
                "+    Runtime.setupModuleGlobals(env, SkylarkNativeModule.class);",
                "     env.setup(\"package_name\", SkylarkNativeModule.packageName);",
                "diff --git a/test/com/facebook/buck/skylark/function/SkylarkNativeModuleTest.java b/test/com/facebook/buck/skylark/function/SkylarkNativeModuleTest.java",
                "index 74bd31b0ce..620c50f0d0 100644",
                "--- a/test/com/facebook/buck/skylark/function/SkylarkNativeModuleTest.java",
                "+++ b/test/com/facebook/buck/skylark/function/SkylarkNativeModuleTest.java",
                "@@ -92,3 +92,2 @@ public class SkylarkNativeModuleTest {",
                "             .build();",
                "-    String packageName = \"my/package\";",
                "     env.setupDynamic(",
                "@@ -99,6 +98,5 @@ public class SkylarkNativeModuleTest {",
                "             .setPackageIdentifier(",
                "-                PackageIdentifier.create(RepositoryName.DEFAULT, PathFragment.create(packageName)))",
                "+                PackageIdentifier.create(RepositoryName.DEFAULT, PathFragment.create(\"my/package\")))",
                "             .build());",
                "     env.setup(\"package_name\", SkylarkNativeModule.packageName);",
                "-    env.setup(\"PACKAGE_NAME\", packageName);",
                "     boolean exec = buildFileAst.exec(env, eventHandler);",
                "diff --git a/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java b/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java",
                "index d991ba3c21..8bde3aaa00 100644",
                "--- a/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java",
                "+++ b/test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java",
                "@@ -185,12 +185,2 @@ public class SkylarkProjectBuildFileParserTest {",
                "-  @Test",
                "-  public void packageNameIsProvided() throws Exception {",
                "-    Path buildFile = projectFilesystem.resolve(\"src\").resolve(\"test\").resolve(\"BUCK\");",
                "-    Files.createDirectories(buildFile.getParent());",
                "-    Files.write(buildFile, Arrays.asList(\"prebuilt_jar(name='guava', binary_jar=PACKAGE_NAME)\"));",
                "-",
                "-    Map<String, Object> rule = getSingleRule(buildFile);",
                "-    assertThat(rule.get(\"binaryJar\"), equalTo(\"src/test\"));",
                "-  }",
                "-",
                "   @Test"
            ],
            "changed_files": [
                "src/com/facebook/buck/skylark/function/SkylarkNativeModule.java",
                "src/com/facebook/buck/skylark/parser/RuleFunctionFactory.java",
                "src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "test/com/facebook/buck/skylark/function/SkylarkNativeModuleTest.java",
                "test/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParserTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, parser",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "041ac7a315c645d752b269c3bebd8d861730ea47",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521844500,
            "hunks": 49,
            "message": "ocaml: thread `OcamlPlatform` into `OcamlLibrary` Summary: In anticipation of multi-platform builds, this threads the OCaml platform into OCaml library from the top-level binary target, rather than fixing it from the library description. Reviewed By: ttsugriy fbshipit-source-id: 3d9dd78",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/OcamlLibrary.java b/src/com/facebook/buck/ocaml/OcamlLibrary.java",
                "index 31a59ed1da..772c82360d 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlLibrary.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlLibrary.java",
                "@@ -37,17 +37,17 @@ public abstract class OcamlLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-  public abstract Path getIncludeLibDir();",
                "+  public abstract Path getIncludeLibDir(OcamlPlatform platform);",
                "-  public abstract Iterable<String> getBytecodeIncludeDirs();",
                "+  public abstract Iterable<String> getBytecodeIncludeDirs(OcamlPlatform platform);",
                "   /** Dependencies for the native (ocamlopt) build */",
                "-  public abstract ImmutableSortedSet<BuildRule> getNativeCompileDeps();",
                "+  public abstract ImmutableSortedSet<BuildRule> getNativeCompileDeps(OcamlPlatform platform);",
                "   /** Dependencies for the bytecode (ocamlc) build */",
                "-  public abstract ImmutableSortedSet<BuildRule> getBytecodeCompileDeps();",
                "+  public abstract ImmutableSortedSet<BuildRule> getBytecodeCompileDeps(OcamlPlatform platform);",
                "-  public abstract ImmutableSortedSet<BuildRule> getBytecodeLinkDeps();",
                "+  public abstract ImmutableSortedSet<BuildRule> getBytecodeLinkDeps(OcamlPlatform platform);",
                "-  public abstract NativeLinkableInput getNativeLinkableInput();",
                "+  public abstract NativeLinkableInput getNativeLinkableInput(OcamlPlatform platform);",
                "-  public abstract NativeLinkableInput getBytecodeLinkableInput();",
                "+  public abstract NativeLinkableInput getBytecodeLinkableInput(OcamlPlatform platform);",
                " }",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "index a31911fe33..8a9fe740d1 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "@@ -18,3 +18,6 @@ package com.facebook.buck.ocaml;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                " import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.Flavored;",
                " import com.facebook.buck.rules.BuildRule;",
                "@@ -39,3 +42,5 @@ import com.google.common.collect.ImmutableCollection;",
                " import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSet;",
                " import com.google.common.collect.ImmutableSortedSet;",
                "+import java.nio.file.Path;",
                " import java.util.Optional;",
                "@@ -47,3 +52,4 @@ public class OcamlLibraryDescription",
                "             OcamlLibraryDescription.AbstractOcamlLibraryDescriptionArg>,",
                "-        VersionPropagator<OcamlLibraryDescriptionArg> {",
                "+        VersionPropagator<OcamlLibraryDescriptionArg>,",
                "+        Flavored {",
                "@@ -67,5 +73,2 @@ public class OcamlLibraryDescription",
                "-    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getBuildRuleResolver());",
                "-    SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);",
                "-",
                "     OcamlToolchain ocamlToolchain =",
                "@@ -74,83 +77,136 @@ public class OcamlLibraryDescription",
                "-    ImmutableList<OcamlSource> srcs = args.getSrcs();",
                "-",
                "-    ImmutableList<Arg> flags =",
                "-        OcamlRuleBuilder.getFlags(",
                "-            buildTarget,",
                "-            context.getCellPathResolver(),",
                "-            context.getBuildRuleResolver(),",
                "-            ocamlPlatform,",
                "-            args.getCompilerFlags(),",
                "-            args.getWarningsFlags());",
                "+    if (buildTarget.getFlavors().contains(ocamlPlatform.getFlavor())) {",
                "+      SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getBuildRuleResolver());",
                "+      SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);",
                "-    BuildTarget compileBuildTarget = OcamlRuleBuilder.createStaticLibraryBuildTarget(buildTarget);",
                "+      ImmutableList<OcamlSource> srcs = args.getSrcs();",
                "-    if (OcamlRuleBuilder.shouldUseFineGrainedRules(context.getBuildRuleResolver(), srcs)) {",
                "-      OcamlGeneratedBuildRules result =",
                "-          OcamlRuleBuilder.createFineGrainedBuildRules(",
                "-              ocamlPlatform,",
                "-              compileBuildTarget,",
                "-              context.getProjectFilesystem(),",
                "-              params,",
                "+      ImmutableList<Arg> flags =",
                "+          OcamlRuleBuilder.getFlags(",
                "+              buildTarget,",
                "+              context.getCellPathResolver(),",
                "               context.getBuildRuleResolver(),",
                "-              srcs,",
                "-              /* isLibrary */ true,",
                "-              args.getBytecodeOnly(),",
                "-              flags,",
                "-              args.getOcamldepFlags(),",
                "-              !args.getBytecodeOnly() && args.getNativePlugin());",
                "-      return new OcamlStaticLibrary(",
                "-          buildTarget,",
                "-          compileBuildTarget,",
                "-          context.getProjectFilesystem(),",
                "-          params,",
                "-          args.getLinkerFlags(),",
                "-          result.getObjectFiles(),",
                "-          result.getOcamlContext(),",
                "-          result.getRules().get(0),",
                "-          result.getNativeCompileDeps(),",
                "-          result.getBytecodeCompileDeps(),",
                "-          ImmutableSortedSet.<BuildRule>naturalOrder()",
                "-              .add(result.getBytecodeLink())",
                "-              .addAll(ruleFinder.filterBuildRuleInputs(result.getObjectFiles()))",
                "-              .build(),",
                "-          result",
                "-              .getRules()",
                "-              .stream()",
                "-              .map(BuildRule::getBuildTarget)",
                "-              .collect(ImmutableList.toImmutableList()));",
                "-",
                "-    } else {",
                "-      OcamlBuild ocamlLibraryBuild =",
                "-          OcamlRuleBuilder.createBulkCompileRule(",
                "               ocamlPlatform,",
                "-              compileBuildTarget,",
                "-              context.getProjectFilesystem(),",
                "-              params,",
                "-              context.getBuildRuleResolver(),",
                "-              srcs,",
                "-              /* isLibrary */ true,",
                "-              args.getBytecodeOnly(),",
                "-              flags,",
                "-              args.getOcamldepFlags());",
                "-      return new OcamlStaticLibrary(",
                "-          buildTarget,",
                "-          compileBuildTarget,",
                "-          context.getProjectFilesystem(),",
                "-          params,",
                "-          args.getLinkerFlags(),",
                "-          srcs.stream()",
                "-              .map(OcamlSource::getSource)",
                "-              .map(pathResolver::getAbsolutePath)",
                "-              .filter(OcamlUtil.ext(OcamlCompilables.OCAML_C))",
                "-              .map(ocamlLibraryBuild.getOcamlContext()::getCOutput)",
                "-              .map(input -> ExplicitBuildTargetSourcePath.of(compileBuildTarget, input))",
                "-              .collect(ImmutableList.toImmutableList()),",
                "-          ocamlLibraryBuild.getOcamlContext(),",
                "-          ocamlLibraryBuild,",
                "-          ImmutableSortedSet.of(ocamlLibraryBuild),",
                "-          ImmutableSortedSet.of(ocamlLibraryBuild),",
                "-          ImmutableSortedSet.of(ocamlLibraryBuild),",
                "-          ImmutableList.of(ocamlLibraryBuild.getBuildTarget()));",
                "+              args.getCompilerFlags(),",
                "+              args.getWarningsFlags());",
                "+",
                "+      BuildTarget compileBuildTarget = OcamlRuleBuilder.createStaticLibraryBuildTarget(buildTarget);",
                "+",
                "+      if (OcamlRuleBuilder.shouldUseFineGrainedRules(context.getBuildRuleResolver(), srcs)) {",
                "+        OcamlGeneratedBuildRules result =",
                "+            OcamlRuleBuilder.createFineGrainedBuildRules(",
                "+                ocamlPlatform,",
                "+                compileBuildTarget,",
                "+                context.getProjectFilesystem(),",
                "+                params,",
                "+                context.getBuildRuleResolver(),",
                "+                srcs,",
                "+                /* isLibrary */ true,",
                "+                args.getBytecodeOnly(),",
                "+                flags,",
                "+                args.getOcamldepFlags(),",
                "+                !args.getBytecodeOnly() && args.getNativePlugin());",
                "+        return new OcamlStaticLibrary(",
                "+            buildTarget,",
                "+            compileBuildTarget,",
                "+            context.getProjectFilesystem(),",
                "+            params,",
                "+            args.getLinkerFlags(),",
                "+            result.getObjectFiles(),",
                "+            result.getOcamlContext(),",
                "+            result.getRules().get(0),",
                "+            result.getNativeCompileDeps(),",
                "+            result.getBytecodeCompileDeps(),",
                "+            ImmutableSortedSet.<BuildRule>naturalOrder()",
                "+                .add(result.getBytecodeLink())",
                "+                .addAll(ruleFinder.filterBuildRuleInputs(result.getObjectFiles()))",
                "+                .build(),",
                "+            result",
                "+                .getRules()",
                "+                .stream()",
                "+                .map(BuildRule::getBuildTarget)",
                "+                .collect(ImmutableList.toImmutableList()));",
                "+",
                "+      } else {",
                "+        OcamlBuild ocamlLibraryBuild =",
                "+            OcamlRuleBuilder.createBulkCompileRule(",
                "+                ocamlPlatform,",
                "+                compileBuildTarget,",
                "+                context.getProjectFilesystem(),",
                "+                params,",
                "+                context.getBuildRuleResolver(),",
                "+                srcs,",
                "+                /* isLibrary */ true,",
                "+                args.getBytecodeOnly(),",
                "+                flags,",
                "+                args.getOcamldepFlags());",
                "+        return new OcamlStaticLibrary(",
                "+            buildTarget,",
                "+            compileBuildTarget,",
                "+            context.getProjectFilesystem(),",
                "+            params,",
                "+            args.getLinkerFlags(),",
                "+            srcs.stream()",
                "+                .map(OcamlSource::getSource)",
                "+                .map(pathResolver::getAbsolutePath)",
                "+                .filter(OcamlUtil.ext(OcamlCompilables.OCAML_C))",
                "+                .map(ocamlLibraryBuild.getOcamlContext()::getCOutput)",
                "+                .map(input -> ExplicitBuildTargetSourcePath.of(compileBuildTarget, input))",
                "+                .collect(ImmutableList.toImmutableList()),",
                "+            ocamlLibraryBuild.getOcamlContext(),",
                "+            ocamlLibraryBuild,",
                "+            ImmutableSortedSet.of(ocamlLibraryBuild),",
                "+            ImmutableSortedSet.of(ocamlLibraryBuild),",
                "+            ImmutableSortedSet.of(ocamlLibraryBuild),",
                "+            ImmutableList.of(ocamlLibraryBuild.getBuildTarget()));",
                "+      }",
                "     }",
                "+",
                "+    // Platform-agnostic wrapper for Ocaml library rules.  Ideally, the inner library rules, which",
                "+    // are created on-demand for the given passed in platform would use a different rule type or,",
                "+    // better yet, be non-build-rule types provided by metadata.",
                "+    return new OcamlLibrary(buildTarget, context.getProjectFilesystem(), params) {",
                "+",
                "+      private OcamlLibrary getWrapped(OcamlPlatform platform) {",
                "+        return (OcamlLibrary)",
                "+            context",
                "+                .getBuildRuleResolver()",
                "+                .requireRule(getBuildTarget().withAppendedFlavors(platform.getFlavor()));",
                "+      }",
                "+",
                "+      @Override",
                "+      public Path getIncludeLibDir(OcamlPlatform platform) {",
                "+        return getWrapped(platform).getIncludeLibDir(platform);",
                "+      }",
                "+",
                "+      @Override",
                "+      public Iterable<String> getBytecodeIncludeDirs(OcamlPlatform platform) {",
                "+        return getWrapped(platform).getBytecodeIncludeDirs(platform);",
                "+      }",
                "+",
                "+      @Override",
                "+      public ImmutableSortedSet<BuildRule> getNativeCompileDeps(OcamlPlatform platform) {",
                "+        return getWrapped(platform).getNativeCompileDeps(platform);",
                "+      }",
                "+",
                "+      @Override",
                "+      public ImmutableSortedSet<BuildRule> getBytecodeCompileDeps(OcamlPlatform platform) {",
                "+        return getWrapped(platform).getBytecodeCompileDeps(platform);",
                "+      }",
                "+",
                "+      @Override",
                "+      public ImmutableSortedSet<BuildRule> getBytecodeLinkDeps(OcamlPlatform platform) {",
                "+        return getWrapped(platform).getBytecodeLinkDeps(platform);",
                "+      }",
                "+",
                "+      @Override",
                "+      public NativeLinkableInput getNativeLinkableInput(OcamlPlatform platform) {",
                "+        return getWrapped(platform).getNativeLinkableInput(platform);",
                "+      }",
                "+",
                "+      @Override",
                "+      public NativeLinkableInput getBytecodeLinkableInput(OcamlPlatform platform) {",
                "+        return getWrapped(platform).getBytecodeLinkableInput(platform);",
                "+      }",
                "+    };",
                "   }",
                "@@ -171,2 +227,12 @@ public class OcamlLibraryDescription",
                "+  @Override",
                "+  public boolean hasFlavors(ImmutableSet<Flavor> flavors) {",
                "+    return flavors.equals(",
                "+        ImmutableSet.of(",
                "+            toolchainProvider",
                "+                .getByName(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.class)",
                "+                .getDefaultOcamlPlatform()",
                "+                .getFlavor()));",
                "+  }",
                "+",
                "   @BuckStyleImmutable",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "index 5d0cfb62fc..69d2df59f5 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "@@ -74,3 +74,4 @@ public class OcamlRuleBuilder {",
                "-  public static Function<BuildRule, ImmutableList<String>> getLibInclude(boolean isBytecode) {",
                "+  public static Function<BuildRule, ImmutableList<String>> getLibInclude(",
                "+      OcamlPlatform platform, boolean isBytecode) {",
                "     return input -> {",
                "@@ -79,5 +80,5 @@ public class OcamlRuleBuilder {",
                "         if (isBytecode) {",
                "-          return ImmutableList.copyOf(library.getBytecodeIncludeDirs());",
                "+          return ImmutableList.copyOf(library.getBytecodeIncludeDirs(platform));",
                "         } else {",
                "-          return ImmutableList.of(library.getIncludeLibDir().toString());",
                "+          return ImmutableList.of(library.getIncludeLibDir(platform).toString());",
                "         }",
                "@@ -127,3 +128,4 @@ public class OcamlRuleBuilder {",
                "-  private static NativeLinkableInput getNativeLinkableInput(Iterable<BuildRule> deps) {",
                "+  private static NativeLinkableInput getNativeLinkableInput(",
                "+      OcamlPlatform platform, Iterable<BuildRule> deps) {",
                "     List<NativeLinkableInput> inputs = new ArrayList<>();",
                "@@ -133,3 +135,3 @@ public class OcamlRuleBuilder {",
                "     for (BuildRule dep : ocamlDeps) {",
                "-      inputs.add(((OcamlLibrary) dep).getNativeLinkableInput());",
                "+      inputs.add(((OcamlLibrary) dep).getNativeLinkableInput(platform));",
                "     }",
                "@@ -139,3 +141,4 @@ public class OcamlRuleBuilder {",
                "-  private static NativeLinkableInput getBytecodeLinkableInput(Iterable<BuildRule> deps) {",
                "+  private static NativeLinkableInput getBytecodeLinkableInput(",
                "+      OcamlPlatform platform, Iterable<BuildRule> deps) {",
                "     List<NativeLinkableInput> inputs = new ArrayList<>();",
                "@@ -145,3 +148,3 @@ public class OcamlRuleBuilder {",
                "     for (BuildRule dep : ocamlDeps) {",
                "-      inputs.add(((OcamlLibrary) dep).getBytecodeLinkableInput());",
                "+      inputs.add(((OcamlLibrary) dep).getBytecodeLinkableInput(platform));",
                "     }",
                "@@ -185,3 +188,3 @@ public class OcamlRuleBuilder {",
                "         FluentIterable.from(params.getBuildDeps())",
                "-            .transformAndConcat(getLibInclude(false)::apply)",
                "+            .transformAndConcat(getLibInclude(ocamlPlatform, false)::apply)",
                "             .toList();",
                "@@ -190,7 +193,9 @@ public class OcamlRuleBuilder {",
                "         FluentIterable.from(params.getBuildDeps())",
                "-            .transformAndConcat(getLibInclude(true)::apply)",
                "+            .transformAndConcat(getLibInclude(ocamlPlatform, true)::apply)",
                "             .toList();",
                "-    NativeLinkableInput nativeLinkableInput = getNativeLinkableInput(params.getBuildDeps());",
                "-    NativeLinkableInput bytecodeLinkableInput = getBytecodeLinkableInput(params.getBuildDeps());",
                "+    NativeLinkableInput nativeLinkableInput =",
                "+        getNativeLinkableInput(ocamlPlatform, params.getBuildDeps());",
                "+    NativeLinkableInput bytecodeLinkableInput =",
                "+        getBytecodeLinkableInput(ocamlPlatform, params.getBuildDeps());",
                "     NativeLinkableInput cLinkableInput =",
                "@@ -209,4 +214,4 @@ public class OcamlRuleBuilder {",
                "     for (OcamlLibrary library : ocamlInput) {",
                "-      allDepsBuilder.addAll(library.getNativeCompileDeps());",
                "-      allDepsBuilder.addAll(library.getBytecodeCompileDeps());",
                "+      allDepsBuilder.addAll(library.getNativeCompileDeps(ocamlPlatform));",
                "+      allDepsBuilder.addAll(library.getBytecodeCompileDeps(ocamlPlatform));",
                "     }",
                "@@ -242,6 +247,6 @@ public class OcamlRuleBuilder {",
                "     for (OcamlLibrary library : ocamlInput) {",
                "-      nativeCompileDepsBuilder.addAll(library.getNativeCompileDeps());",
                "-      bytecodeCompileDepsBuilder.addAll(library.getBytecodeCompileDeps());",
                "-      bytecodeLinkDepsBuilder.addAll(library.getBytecodeLinkDeps());",
                "-      transitiveBytecodeIncludesBuilder.addAll(library.getBytecodeIncludeDirs());",
                "+      nativeCompileDepsBuilder.addAll(library.getNativeCompileDeps(ocamlPlatform));",
                "+      bytecodeCompileDepsBuilder.addAll(library.getBytecodeCompileDeps(ocamlPlatform));",
                "+      bytecodeLinkDepsBuilder.addAll(library.getBytecodeLinkDeps(ocamlPlatform));",
                "+      transitiveBytecodeIncludesBuilder.addAll(library.getBytecodeIncludeDirs(ocamlPlatform));",
                "     }",
                "@@ -306,3 +311,3 @@ public class OcamlRuleBuilder {",
                "         FluentIterable.from(params.getBuildDeps())",
                "-            .transformAndConcat(getLibInclude(false)::apply)",
                "+            .transformAndConcat(getLibInclude(ocamlPlatform, false)::apply)",
                "             .toList();",
                "@@ -311,7 +316,9 @@ public class OcamlRuleBuilder {",
                "         FluentIterable.from(params.getBuildDeps())",
                "-            .transformAndConcat(getLibInclude(true)::apply)",
                "+            .transformAndConcat(getLibInclude(ocamlPlatform, true)::apply)",
                "             .toList();",
                "-    NativeLinkableInput nativeLinkableInput = getNativeLinkableInput(params.getBuildDeps());",
                "-    NativeLinkableInput bytecodeLinkableInput = getBytecodeLinkableInput(params.getBuildDeps());",
                "+    NativeLinkableInput nativeLinkableInput =",
                "+        getNativeLinkableInput(ocamlPlatform, params.getBuildDeps());",
                "+    NativeLinkableInput bytecodeLinkableInput =",
                "+        getBytecodeLinkableInput(ocamlPlatform, params.getBuildDeps());",
                "     NativeLinkableInput cLinkableInput =",
                "@@ -360,6 +367,6 @@ public class OcamlRuleBuilder {",
                "     for (OcamlLibrary library : ocamlInput) {",
                "-      nativeCompileDepsBuilder.addAll(library.getNativeCompileDeps());",
                "-      bytecodeCompileDepsBuilder.addAll(library.getBytecodeCompileDeps());",
                "-      bytecodeLinkDepsBuilder.addAll(library.getBytecodeLinkDeps());",
                "-      transitiveBytecodeIncludesBuilder.addAll(library.getBytecodeIncludeDirs());",
                "+      nativeCompileDepsBuilder.addAll(library.getNativeCompileDeps(ocamlPlatform));",
                "+      bytecodeCompileDepsBuilder.addAll(library.getBytecodeCompileDeps(ocamlPlatform));",
                "+      bytecodeLinkDepsBuilder.addAll(library.getBytecodeLinkDeps(ocamlPlatform));",
                "+      transitiveBytecodeIncludesBuilder.addAll(library.getBytecodeIncludeDirs(ocamlPlatform));",
                "     }",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java b/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "index 90f3589336..ca4fa2f5e1 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "@@ -99,3 +99,3 @@ class OcamlStaticLibrary extends OcamlLibrary implements HasRuntimeDeps {",
                "   @Override",
                "-  public NativeLinkableInput getNativeLinkableInput() {",
                "+  public NativeLinkableInput getNativeLinkableInput(OcamlPlatform platform) {",
                "     return getLinkableInput(false);",
                "@@ -104,3 +104,3 @@ class OcamlStaticLibrary extends OcamlLibrary implements HasRuntimeDeps {",
                "   @Override",
                "-  public NativeLinkableInput getBytecodeLinkableInput() {",
                "+  public NativeLinkableInput getBytecodeLinkableInput(OcamlPlatform platform) {",
                "     return getLinkableInput(true);",
                "@@ -109,3 +109,3 @@ class OcamlStaticLibrary extends OcamlLibrary implements HasRuntimeDeps {",
                "   @Override",
                "-  public Path getIncludeLibDir() {",
                "+  public Path getIncludeLibDir(OcamlPlatform platform) {",
                "     return OcamlBuildContext.getCompileNativeOutputDir(",
                "@@ -115,3 +115,3 @@ class OcamlStaticLibrary extends OcamlLibrary implements HasRuntimeDeps {",
                "   @Override",
                "-  public Iterable<String> getBytecodeIncludeDirs() {",
                "+  public Iterable<String> getBytecodeIncludeDirs(OcamlPlatform platform) {",
                "     return ocamlContext.getBytecodeIncludeDirectories();",
                "@@ -120,3 +120,3 @@ class OcamlStaticLibrary extends OcamlLibrary implements HasRuntimeDeps {",
                "   @Override",
                "-  public ImmutableSortedSet<BuildRule> getNativeCompileDeps() {",
                "+  public ImmutableSortedSet<BuildRule> getNativeCompileDeps(OcamlPlatform platform) {",
                "     return nativeCompileDeps;",
                "@@ -125,3 +125,3 @@ class OcamlStaticLibrary extends OcamlLibrary implements HasRuntimeDeps {",
                "   @Override",
                "-  public ImmutableSortedSet<BuildRule> getBytecodeCompileDeps() {",
                "+  public ImmutableSortedSet<BuildRule> getBytecodeCompileDeps(OcamlPlatform platform) {",
                "     return bytecodeCompileDeps;",
                "@@ -130,3 +130,3 @@ class OcamlStaticLibrary extends OcamlLibrary implements HasRuntimeDeps {",
                "   @Override",
                "-  public ImmutableSortedSet<BuildRule> getBytecodeLinkDeps() {",
                "+  public ImmutableSortedSet<BuildRule> getBytecodeLinkDeps(OcamlPlatform platform) {",
                "     return bytecodeLinkDeps;",
                "diff --git a/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java b/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java",
                "index 9e5a3558c5..f568000c16 100644",
                "--- a/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java",
                "+++ b/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java",
                "@@ -84,3 +84,3 @@ class PrebuiltOcamlLibrary extends OcamlLibrary {",
                "   @Override",
                "-  public NativeLinkableInput getNativeLinkableInput() {",
                "+  public NativeLinkableInput getNativeLinkableInput(OcamlPlatform platform) {",
                "     if (staticNativeLibraryPath.isPresent()) {",
                "@@ -93,3 +93,3 @@ class PrebuiltOcamlLibrary extends OcamlLibrary {",
                "   @Override",
                "-  public NativeLinkableInput getBytecodeLinkableInput() {",
                "+  public NativeLinkableInput getBytecodeLinkableInput(OcamlPlatform platform) {",
                "     return getLinkableInput(staticBytecodeLibraryPath);",
                "@@ -98,3 +98,3 @@ class PrebuiltOcamlLibrary extends OcamlLibrary {",
                "   @Override",
                "-  public Path getIncludeLibDir() {",
                "+  public Path getIncludeLibDir(OcamlPlatform platform) {",
                "     return includeDir;",
                "@@ -103,3 +103,3 @@ class PrebuiltOcamlLibrary extends OcamlLibrary {",
                "   @Override",
                "-  public Iterable<String> getBytecodeIncludeDirs() {",
                "+  public Iterable<String> getBytecodeIncludeDirs(OcamlPlatform platform) {",
                "     return ImmutableList.of(includeDir.toString());",
                "@@ -108,3 +108,3 @@ class PrebuiltOcamlLibrary extends OcamlLibrary {",
                "   @Override",
                "-  public ImmutableSortedSet<BuildRule> getNativeCompileDeps() {",
                "+  public ImmutableSortedSet<BuildRule> getNativeCompileDeps(OcamlPlatform platform) {",
                "     return ImmutableSortedSet.of();",
                "@@ -113,3 +113,3 @@ class PrebuiltOcamlLibrary extends OcamlLibrary {",
                "   @Override",
                "-  public ImmutableSortedSet<BuildRule> getBytecodeCompileDeps() {",
                "+  public ImmutableSortedSet<BuildRule> getBytecodeCompileDeps(OcamlPlatform platform) {",
                "     return ImmutableSortedSet.of();",
                "@@ -118,3 +118,3 @@ class PrebuiltOcamlLibrary extends OcamlLibrary {",
                "   @Override",
                "-  public ImmutableSortedSet<BuildRule> getBytecodeLinkDeps() {",
                "+  public ImmutableSortedSet<BuildRule> getBytecodeLinkDeps(OcamlPlatform platform) {",
                "     return ImmutableSortedSet.<BuildRule>naturalOrder()",
                "diff --git a/test/com/facebook/buck/ocaml/OCamlIntegrationTest.java b/test/com/facebook/buck/ocaml/OCamlIntegrationTest.java",
                "index b6408a023d..f6a7c46d0a 100644",
                "--- a/test/com/facebook/buck/ocaml/OCamlIntegrationTest.java",
                "+++ b/test/com/facebook/buck/ocaml/OCamlIntegrationTest.java",
                "@@ -35,2 +35,3 @@ import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "+import com.facebook.buck.cxx.toolchain.DefaultCxxPlatforms;",
                " import com.facebook.buck.cxx.toolchain.HeaderVisibility;",
                "@@ -134,3 +135,4 @@ public class OCamlIntegrationTest {",
                "         BuildTargetFactory.newInstance(workspace.getDestPath(), \"//hello_ocaml:ocamllib\");",
                "-    BuildTarget staticLib = createStaticLibraryBuildTarget(lib);",
                "+    BuildTarget staticLib =",
                "+        createStaticLibraryBuildTarget(lib).withAppendedFlavors(DefaultCxxPlatforms.FLAVOR);",
                "     ImmutableSet<BuildTarget> targets = ImmutableSet.of(target, binary, lib, staticLib);",
                "@@ -196,3 +198,4 @@ public class OCamlIntegrationTest {",
                "         BuildTargetFactory.newInstance(workspace.getDestPath(), \"//hello_ocaml:ocamllib1\");",
                "-    BuildTarget staticLib1 = createStaticLibraryBuildTarget(lib1);",
                "+    BuildTarget staticLib1 =",
                "+        createStaticLibraryBuildTarget(lib1).withAppendedFlavors(DefaultCxxPlatforms.FLAVOR);",
                "     ImmutableSet<BuildTarget> targets1 = ImmutableSet.of(target, binary, lib1, staticLib1);",
                "@@ -215,3 +218,4 @@ public class OCamlIntegrationTest {",
                "     BuildTarget pluginTarget =",
                "-        BuildTargetFactory.newInstance(workspace.getDestPath(), \"//ocaml_native_plugin:plugin\");",
                "+        BuildTargetFactory.newInstance(",
                "+            workspace.getDestPath(), \"//ocaml_native_plugin:plugin#default\");",
                "     workspace.runBuckCommand(\"build\", pluginTarget.toString()).assertSuccess();",
                "@@ -414,3 +418,4 @@ public class OCamlIntegrationTest {",
                "     BuildTarget libplus = BuildTargetFactory.newInstance(workspace.getDestPath(), \"//clib:plus\");",
                "-    BuildTarget libplusStatic = createStaticLibraryBuildTarget(libplus);",
                "+    BuildTarget libplusStatic =",
                "+        createStaticLibraryBuildTarget(libplus).withAppendedFlavors(DefaultCxxPlatforms.FLAVOR);",
                "     BuildTarget cclib = BuildTargetFactory.newInstance(workspace.getDestPath(), \"//clib:cc\");"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/OcamlLibrary.java",
                "src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java",
                "test/com/facebook/buck/ocaml/OCamlIntegrationTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d4aa5fd4c16a3d51d40b68ecc966c8577a34927f",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522884180,
            "hunks": 22,
            "message": "Move dotnet module to features Reviewed By: jtorkkola fbshipit-source-id: 98d23e9",
            "diff": [
                "diff --git a/build.xml b/build.xml",
                "index bdce05e449..0f1b40df52 100644",
                "--- a/build.xml",
                "+++ b/build.xml",
                "@@ -489,5 +489,5 @@",
                "           <exclude name=\"com/facebook/buck/cli/bootstrapper/**\" />",
                "-          <exclude name=\"com/facebook/buck/dotnet/**\" />",
                "           <exclude name=\"com/facebook/buck/event/api/**\" />",
                "           <exclude name=\"com/facebook/buck/features/d/**\" />",
                "+          <exclude name=\"com/facebook/buck/features/dotnet/**\" />",
                "           <exclude name=\"com/facebook/buck/go/**\" />",
                "@@ -541,3 +541,3 @@",
                "       <module-javac-params>",
                "-        <include name=\"com/facebook/buck/dotnet/**/*.java\" />",
                "+        <include name=\"com/facebook/buck/features/dotnet/**/*.java\" />",
                "       </module-javac-params>",
                "diff --git a/programs/BUCK b/programs/BUCK",
                "index d7c87f933a..5ad32f945a 100644",
                "--- a/programs/BUCK",
                "+++ b/programs/BUCK",
                "@@ -88,3 +88,3 @@ BUCK_MODULES = {",
                "     \"d\": \"//src/com/facebook/buck/features/d:d\",",
                "-    \"dotnet\": \"//src/com/facebook/buck/dotnet:dotnet\",",
                "+    \"dotnet\": \"//src/com/facebook/buck/features/dotnet:dotnet\",",
                "     \"filegroup\": \"//src/com/facebook/buck/shell/filegroup:filegroup\",",
                "diff --git a/src/com/facebook/buck/features/dotnet/BUCK b/src/com/facebook/buck/features/dotnet/BUCK",
                "new file mode 100644",
                "index 0000000000..58eb8b217d",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/dotnet/BUCK",
                "@@ -0,0 +1,25 @@",
                "+load(\"//tools/build_rules:module_rules.bzl\", \"buck_module\")",
                "+",
                "+buck_module(",
                "+    name = \"dotnet\",",
                "+    srcs = glob([\"*.java\"]),",
                "+    provided_deps = [",
                "+        \"//src/com/facebook/buck/io:executable-finder\",",
                "+        \"//src/com/facebook/buck/io:io\",",
                "+        \"//src/com/facebook/buck/log:api\",",
                "+        \"//src/com/facebook/buck/model:model\",",
                "+        \"//src/com/facebook/buck/parser:rule_pattern\",",
                "+        \"//src/com/facebook/buck/rules:rules\",",
                "+        \"//src/com/facebook/buck/shell:steps\",",
                "+        \"//src/com/facebook/buck/step:step\",",
                "+        \"//src/com/facebook/buck/step/fs:fs\",",
                "+        \"//src/com/facebook/buck/util:exceptions\",",
                "+        \"//src/com/facebook/buck/util:util\",",
                "+        \"//src/com/facebook/buck/util/immutables:immutables\",",
                "+        \"//third-party/java/guava:guava\",",
                "+        \"//third-party/java/infer-annotations:infer-annotations\",",
                "+    ],",
                "+    visibility = [",
                "+        \"//test/com/facebook/buck/features/dotnet:\",",
                "+    ],",
                "+)",
                "diff --git a/src/com/facebook/buck/features/dotnet/CsharpLibrary.java b/src/com/facebook/buck/features/dotnet/CsharpLibrary.java",
                "new file mode 100644",
                "index 0000000000..05337c69e5",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/dotnet/CsharpLibrary.java",
                "@@ -0,0 +1,134 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.dotnet;",
                "+",
                "+import com.facebook.buck.io.BuildCellRelativePath;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.rules.AbstractBuildRuleWithDeclaredAndExtraDeps;",
                "+import com.facebook.buck.rules.AddToRuleKey;",
                "+import com.facebook.buck.rules.BuildContext;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildableContext;",
                "+import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.step.Step;",
                "+import com.facebook.buck.step.fs.MakeCleanDirectoryStep;",
                "+import com.facebook.buck.util.types.Either;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableListMultimap;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.nio.file.Path;",
                "+import java.util.Map;",
                "+",
                "+public class CsharpLibrary extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "+",
                "+  @AddToRuleKey(stringify = true)",
                "+  private final Path output;",
                "+",
                "+  @AddToRuleKey private final ImmutableSortedSet<SourcePath> srcs;",
                "+  @AddToRuleKey private final ImmutableList<Either<BuildRule, String>> refs;",
                "+  @AddToRuleKey private final ImmutableMap<String, SourcePath> resources;",
                "+  @AddToRuleKey private final FrameworkVersion version;",
                "+",
                "+  protected CsharpLibrary(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams params,",
                "+      String dllName,",
                "+      ImmutableSortedSet<SourcePath> srcs,",
                "+      ImmutableList<Either<BuildRule, String>> refs,",
                "+      ImmutableMap<String, SourcePath> resources,",
                "+      FrameworkVersion version) {",
                "+    super(buildTarget, projectFilesystem, params);",
                "+",
                "+    Preconditions.checkArgument(dllName.endsWith(\".dll\"));",
                "+",
                "+    this.srcs = srcs;",
                "+    this.refs = refs;",
                "+    this.resources = resources;",
                "+    this.version = version;",
                "+",
                "+    this.output = BuildTargets.getGenPath(getProjectFilesystem(), buildTarget, \"%s/\" + dllName);",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableList<Step> getBuildSteps(",
                "+      BuildContext context, BuildableContext buildableContext) {",
                "+    ProjectFilesystem filesystem = getProjectFilesystem();",
                "+",
                "+    ImmutableSortedSet<Path> sourceFiles =",
                "+        context.getSourcePathResolver().getAllAbsolutePaths(srcs);",
                "+",
                "+    ImmutableListMultimap.Builder<Path, String> resolvedResources = ImmutableListMultimap.builder();",
                "+    for (Map.Entry<String, SourcePath> resource : resources.entrySet()) {",
                "+      resolvedResources.put(",
                "+          context.getSourcePathResolver().getAbsolutePath(resource.getValue()), resource.getKey());",
                "+    }",
                "+",
                "+    ImmutableList<Either<Path, String>> references =",
                "+        resolveReferences(context.getSourcePathResolver(), refs);",
                "+",
                "+    ImmutableList.Builder<Step> steps = ImmutableList.builder();",
                "+",
                "+    steps.addAll(",
                "+        MakeCleanDirectoryStep.of(",
                "+            BuildCellRelativePath.fromCellRelativePath(",
                "+                context.getBuildCellRootPath(), getProjectFilesystem(), output.getParent())));",
                "+    steps.add(",
                "+        new CsharpLibraryCompile(",
                "+            getBuildTarget(),",
                "+            filesystem.resolve(output),",
                "+            sourceFiles,",
                "+            references,",
                "+            resolvedResources.build(),",
                "+            version));",
                "+",
                "+    return steps.build();",
                "+  }",
                "+",
                "+  private ImmutableList<Either<Path, String>> resolveReferences(",
                "+      SourcePathResolver pathResolver, ImmutableList<Either<BuildRule, String>> refs) {",
                "+    ImmutableList.Builder<Either<Path, String>> resolved = ImmutableList.builder();",
                "+",
                "+    for (Either<BuildRule, String> ref : refs) {",
                "+      if (ref.isLeft()) {",
                "+        // TODO(simons): Do this in the constructor? Or the Description?",
                "+        BuildRule rule = ref.getLeft();",
                "+        Preconditions.checkArgument(",
                "+            rule instanceof CsharpLibrary || rule instanceof PrebuiltDotnetLibrary);",
                "+",
                "+        SourcePath outputPath = Preconditions.checkNotNull(rule.getSourcePathToOutput());",
                "+        resolved.add(Either.ofLeft(pathResolver.getAbsolutePath(outputPath)));",
                "+      } else {",
                "+        resolved.add(Either.ofRight(ref.getRight()));",
                "+      }",
                "+    }",
                "+",
                "+    return resolved.build();",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath getSourcePathToOutput() {",
                "+    return ExplicitBuildTargetSourcePath.of(getBuildTarget(), output);",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/dotnet/CsharpLibraryCompile.java b/src/com/facebook/buck/features/dotnet/CsharpLibraryCompile.java",
                "new file mode 100644",
                "index 0000000000..1dbb002c2c",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/dotnet/CsharpLibraryCompile.java",
                "@@ -0,0 +1,99 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.dotnet;",
                "+",
                "+import com.facebook.buck.io.ExecutableFinder;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.shell.ShellStep;",
                "+import com.facebook.buck.step.ExecutionContext;",
                "+import com.facebook.buck.util.Escaper;",
                "+import com.facebook.buck.util.types.Either;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableListMultimap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                "+import java.util.Optional;",
                "+",
                "+public class CsharpLibraryCompile extends ShellStep {",
                "+  private static final Path CSC = Paths.get(\"csc\");",
                "+  private final Path output;",
                "+  private final ImmutableSortedSet<Path> srcs;",
                "+  private final ImmutableList<Either<Path, String>> references;",
                "+  private final FrameworkVersion version;",
                "+  private final ImmutableListMultimap<Path, String> resources;",
                "+",
                "+  public CsharpLibraryCompile(",
                "+      BuildTarget buildTarget,",
                "+      Path output,",
                "+      ImmutableSortedSet<Path> srcs,",
                "+      ImmutableList<Either<Path, String>> references,",
                "+      ImmutableListMultimap<Path, String> resources,",
                "+      FrameworkVersion version) {",
                "+    super(Optional.of(buildTarget), output.getParent());",
                "+    this.references = references;",
                "+    this.resources = resources;",
                "+    this.version = version;",
                "+    Preconditions.checkState(output.isAbsolute());",
                "+",
                "+    this.output = output;",
                "+    this.srcs = srcs;",
                "+  }",
                "+",
                "+  @Override",
                "+  protected ImmutableList<String> getShellCommandInternal(ExecutionContext context) {",
                "+    Path csc = new ExecutableFinder().getExecutable(CSC, context.getEnvironment());",
                "+    DotnetFramework netFramework =",
                "+        DotnetFramework.resolveFramework(context.getEnvironment(), version);",
                "+",
                "+    ImmutableList.Builder<String> args = ImmutableList.builder();",
                "+    args.add(csc.toAbsolutePath().toString()).add(\"/target:library\").add(\"/out:\" + output);",
                "+",
                "+    for (Either<Path, String> ref : references) {",
                "+      args.add(\"/reference:\" + resolveReference(netFramework, ref));",
                "+    }",
                "+",
                "+    for (Path resource : resources.keySet()) {",
                "+      for (String name : resources.get(resource)) {",
                "+        args.add(\"/resource:\" + Escaper.escapeAsShellString(resource.toString()) + \",\" + name);",
                "+      }",
                "+    }",
                "+",
                "+    args.addAll(",
                "+        srcs.stream()",
                "+            .map(input -> Escaper.escapeAsShellString(input.toAbsolutePath().toString()))",
                "+            .collect(ImmutableSet.toImmutableSet()));",
                "+",
                "+    return args.build();",
                "+  }",
                "+",
                "+  private String resolveReference(DotnetFramework netFramework, Either<Path, String> ref) {",
                "+    if (ref.isLeft()) {",
                "+      return ref.getLeft().toString();",
                "+    }",
                "+",
                "+    Path pathToAssembly = netFramework.findReferenceAssembly(ref.getRight());",
                "+    return pathToAssembly.toString();",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getShortName() {",
                "+    return \"compile csharp\";",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/dotnet/CsharpLibraryDescription.java b/src/com/facebook/buck/features/dotnet/CsharpLibraryDescription.java",
                "new file mode 100644",
                "index 0000000000..1317c660aa",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/dotnet/CsharpLibraryDescription.java",
                "@@ -0,0 +1,84 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.dotnet;",
                "+",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleCreationContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.CommonDescriptionArg;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.HasSrcs;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.facebook.buck.util.types.Either;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import org.immutables.value.Value;",
                "+",
                "+public class CsharpLibraryDescription implements Description<CsharpLibraryDescriptionArg> {",
                "+",
                "+  @Override",
                "+  public Class<CsharpLibraryDescriptionArg> getConstructorArgType() {",
                "+    return CsharpLibraryDescriptionArg.class;",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuildRule createBuildRule(",
                "+      BuildRuleCreationContext context,",
                "+      BuildTarget buildTarget,",
                "+      BuildRuleParams params,",
                "+      CsharpLibraryDescriptionArg args) {",
                "+",
                "+    BuildRuleResolver resolver = context.getBuildRuleResolver();",
                "+    ImmutableList.Builder<Either<BuildRule, String>> refsAsRules = ImmutableList.builder();",
                "+    for (Either<BuildTarget, String> ref : args.getDeps()) {",
                "+      if (ref.isLeft()) {",
                "+        refsAsRules.add(Either.ofLeft(resolver.getRule(ref.getLeft())));",
                "+      } else {",
                "+        refsAsRules.add(Either.ofRight(ref.getRight()));",
                "+      }",
                "+    }",
                "+",
                "+    return new CsharpLibrary(",
                "+        buildTarget,",
                "+        context.getProjectFilesystem(),",
                "+        params,",
                "+        args.getDllName(),",
                "+        args.getSrcs(),",
                "+        refsAsRules.build(),",
                "+        args.getResources(),",
                "+        args.getFrameworkVer());",
                "+  }",
                "+",
                "+  @BuckStyleImmutable",
                "+  @Value.Immutable",
                "+  interface AbstractCsharpLibraryDescriptionArg extends CommonDescriptionArg, HasSrcs {",
                "+    FrameworkVersion getFrameworkVer();",
                "+",
                "+    ImmutableMap<String, SourcePath> getResources();",
                "+",
                "+    @Value.Default",
                "+    default String getDllName() {",
                "+      return getName() + \".dll\";",
                "+    }",
                "+",
                "+    // We may have system-provided references (\"System.Core.dll\") or other build targets",
                "+    ImmutableList<Either<BuildTarget, String>> getDeps();",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/dotnet/DotnetDescriptionsProvider.java b/src/com/facebook/buck/features/dotnet/DotnetDescriptionsProvider.java",
                "new file mode 100644",
                "index 0000000000..5cc6557ef2",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/dotnet/DotnetDescriptionsProvider.java",
                "@@ -0,0 +1,32 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.dotnet;",
                "+",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.DescriptionCreationContext;",
                "+import com.facebook.buck.rules.DescriptionProvider;",
                "+import java.util.Arrays;",
                "+import java.util.Collection;",
                "+import org.pf4j.Extension;",
                "+",
                "+@Extension",
                "+public class DotnetDescriptionsProvider implements DescriptionProvider {",
                "+  @Override",
                "+  public Collection<Description<?>> getDescriptions(DescriptionCreationContext context) {",
                "+    return Arrays.asList(new CsharpLibraryDescription(), new PrebuiltDotnetLibraryDescription());",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/dotnet/DotnetFramework.java b/src/com/facebook/buck/features/dotnet/DotnetFramework.java",
                "new file mode 100644",
                "index 0000000000..9ca18109b7",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/dotnet/DotnetFramework.java",
                "@@ -0,0 +1,142 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.dotnet;",
                "+",
                "+import static java.util.Locale.US;",
                "+",
                "+import com.facebook.buck.log.Logger;",
                "+import com.facebook.buck.util.HumanReadableException;",
                "+import com.google.common.annotations.VisibleForTesting;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import java.nio.file.FileSystem;",
                "+import java.nio.file.FileSystems;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.Path;",
                "+",
                "+/**",
                "+ * Represents an instance of the .Net framework. Two instances are assumed to be equal iff they",
                "+ * represent the same {@link FrameworkVersion} (notably, where that framework is installed is",
                "+ * irrelevant).",
                "+ */",
                "+public class DotnetFramework {",
                "+",
                "+  private static final Logger LOG = Logger.get(DotnetFramework.class);",
                "+",
                "+  private static final ImmutableSet<String> PROGRAM_FILES_ENV_NAMES =",
                "+      ImmutableSet.of(\"programfiles(x86)\", \"programfiles\");",
                "+",
                "+  private final FrameworkVersion version;",
                "+  private final Path frameworkDir;",
                "+",
                "+  private DotnetFramework(FrameworkVersion version, Path frameworkDir) {",
                "+    this.version = version;",
                "+    this.frameworkDir = frameworkDir;",
                "+  }",
                "+",
                "+  public static DotnetFramework resolveFramework(",
                "+      ImmutableMap<String, String> env, FrameworkVersion version) {",
                "+    return resolveFramework(FileSystems.getDefault(), env, version);",
                "+  }",
                "+",
                "+  public Path findReferenceAssembly(String dllName) {",
                "+    Path toReturn = frameworkDir.resolve(dllName);",
                "+",
                "+    if (!Files.exists(toReturn)) {",
                "+      throw new HumanReadableException(",
                "+          \"Unable to find dll in framework version %s under %s: %s\",",
                "+          version, frameworkDir, dllName);",
                "+    }",
                "+",
                "+    return toReturn;",
                "+  }",
                "+",
                "+  @Override",
                "+  public int hashCode() {",
                "+    return version.hashCode();",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean equals(Object obj) {",
                "+    if (this == obj) {",
                "+      return true;",
                "+    }",
                "+",
                "+    if (!(obj instanceof DotnetFramework)) {",
                "+      return false;",
                "+    }",
                "+",
                "+    return version.equals(((DotnetFramework) obj).version);",
                "+  }",
                "+",
                "+  // TODO(t8390117): Use official Win32 APIs to find the framework",
                "+  @VisibleForTesting",
                "+  static DotnetFramework resolveFramework(",
                "+      FileSystem osFilesystem, ImmutableMap<String, String> env, FrameworkVersion version) {",
                "+",
                "+    Path programFiles = findProgramFiles(osFilesystem, env);",
                "+    Path baseDir =",
                "+        programFiles.resolve(\"Reference Assemblies\").resolve(\"Microsoft\").resolve(\"Framework\");",
                "+",
                "+    Path frameworkDir;",
                "+    switch (version) {",
                "+      case NET35:",
                "+        frameworkDir = baseDir.resolve(\"v3.5\");",
                "+        break;",
                "+      case NET40:",
                "+        // fall through",
                "+      case NET45:",
                "+        // fall through",
                "+      case NET46:",
                "+        frameworkDir = baseDir.resolve(\".NETFramework\").resolve(version.getDirName());",
                "+        break;",
                "+",
                "+        // Which we should never reach",
                "+      default:",
                "+        throw new HumanReadableException(\"Unknown .net framework version: %s\", version);",
                "+    }",
                "+",
                "+    if (!Files.exists(frameworkDir)) {",
                "+      throw new HumanReadableException(",
                "+          \"Resolved framework dir for %s does not exist: %s\", version, frameworkDir);",
                "+    }",
                "+    if (!Files.isDirectory(frameworkDir)) {",
                "+      throw new HumanReadableException(",
                "+          \"Resolved framework directory is not a directory: %s\", frameworkDir);",
                "+    }",
                "+",
                "+    return new DotnetFramework(version, frameworkDir);",
                "+  }",
                "+",
                "+  private static Path findProgramFiles(FileSystem osFilesystem, ImmutableMap<String, String> env) {",
                "+    for (String envName : PROGRAM_FILES_ENV_NAMES) {",
                "+      for (String key : env.keySet()) {",
                "+        if (envName.equals(key.toLowerCase(US))) {",
                "+          String value = env.get(key);",
                "+          Path path = osFilesystem.getPath(value);",
                "+          if (Files.exists(path)) {",
                "+            return path;",
                "+          } else {",
                "+            LOG.info(\"Found a program files path with %s that did not exist: %s\", key, value);",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    throw new HumanReadableException(\"Unable to find ProgramFiles or ProgramFiles(x86) env var\");",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/dotnet/DotnetModule.java b/src/com/facebook/buck/features/dotnet/DotnetModule.java",
                "new file mode 100644",
                "index 0000000000..d6c5d9b957",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/dotnet/DotnetModule.java",
                "@@ -0,0 +1,23 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.dotnet;",
                "+",
                "+import com.facebook.buck.module.BuckModule;",
                "+",
                "+/** A modules that provides .NET build rules. */",
                "+@BuckModule",
                "+public class DotnetModule {}",
                "diff --git a/src/com/facebook/buck/features/dotnet/FrameworkVersion.java b/src/com/facebook/buck/features/dotnet/FrameworkVersion.java",
                "new file mode 100644",
                "index 0000000000..de30f3747b",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/dotnet/FrameworkVersion.java",
                "@@ -0,0 +1,35 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.dotnet;",
                "+",
                "+public enum FrameworkVersion {",
                "+  NET35(\"v3.5\"),",
                "+  NET40(\"v4.0\"),",
                "+  NET45(\"v4.5\"),",
                "+  NET46(\"v4.6\"),",
                "+  ;",
                "+",
                "+  private final String dirName;",
                "+",
                "+  FrameworkVersion(String dirName) {",
                "+    this.dirName = dirName;",
                "+  }",
                "+",
                "+  public String getDirName() {",
                "+    return dirName;",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/dotnet/PrebuiltDotnetLibrary.java b/src/com/facebook/buck/features/dotnet/PrebuiltDotnetLibrary.java",
                "new file mode 100644",
                "index 0000000000..00aad44a74",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/dotnet/PrebuiltDotnetLibrary.java",
                "@@ -0,0 +1,84 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.dotnet;",
                "+",
                "+import com.facebook.buck.io.BuildCellRelativePath;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.rules.AbstractBuildRuleWithDeclaredAndExtraDeps;",
                "+import com.facebook.buck.rules.BuildContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildableContext;",
                "+import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.step.Step;",
                "+import com.facebook.buck.step.fs.CopyStep;",
                "+import com.facebook.buck.step.fs.MkdirStep;",
                "+import com.facebook.buck.step.fs.RmStep;",
                "+import com.google.common.collect.ImmutableList;",
                "+import java.nio.file.Path;",
                "+",
                "+public class PrebuiltDotnetLibrary extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "+",
                "+  private final Path output;",
                "+  private final SourcePath assembly;",
                "+",
                "+  protected PrebuiltDotnetLibrary(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams params,",
                "+      SourcePathResolver resolver,",
                "+      SourcePath assembly) {",
                "+    super(buildTarget, projectFilesystem, params);",
                "+",
                "+    this.assembly = assembly;",
                "+",
                "+    Path resolvedPath = resolver.getAbsolutePath(assembly);",
                "+    this.output =",
                "+        BuildTargets.getGenPath(getProjectFilesystem(), buildTarget, \"%s\")",
                "+            .resolve(resolvedPath.getFileName());",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableList<Step> getBuildSteps(",
                "+      BuildContext context, BuildableContext buildableContext) {",
                "+    ImmutableList.Builder<Step> steps = ImmutableList.builder();",
                "+",
                "+    steps.add(",
                "+        RmStep.of(",
                "+            BuildCellRelativePath.fromCellRelativePath(",
                "+                context.getBuildCellRootPath(), getProjectFilesystem(), output)));",
                "+    steps.add(",
                "+        MkdirStep.of(",
                "+            BuildCellRelativePath.fromCellRelativePath(",
                "+                context.getBuildCellRootPath(), getProjectFilesystem(), output.getParent())));",
                "+    steps.add(",
                "+        CopyStep.forFile(",
                "+            getProjectFilesystem(),",
                "+            context.getSourcePathResolver().getAbsolutePath(assembly),",
                "+            output));",
                "+",
                "+    return steps.build();",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath getSourcePathToOutput() {",
                "+    return ExplicitBuildTargetSourcePath.of(getBuildTarget(), output);",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/dotnet/PrebuiltDotnetLibraryDescription.java b/src/com/facebook/buck/features/dotnet/PrebuiltDotnetLibraryDescription.java",
                "new file mode 100644",
                "index 0000000000..70c618ac15",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/dotnet/PrebuiltDotnetLibraryDescription.java",
                "@@ -0,0 +1,57 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.dotnet;",
                "+",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleCreationContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.CommonDescriptionArg;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import org.immutables.value.Value;",
                "+",
                "+public class PrebuiltDotnetLibraryDescription",
                "+    implements Description<PrebuiltDotnetLibraryDescriptionArg> {",
                "+",
                "+  @Override",
                "+  public Class<PrebuiltDotnetLibraryDescriptionArg> getConstructorArgType() {",
                "+    return PrebuiltDotnetLibraryDescriptionArg.class;",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuildRule createBuildRule(",
                "+      BuildRuleCreationContext context,",
                "+      BuildTarget buildTarget,",
                "+      BuildRuleParams params,",
                "+      PrebuiltDotnetLibraryDescriptionArg args) {",
                "+    SourcePathResolver pathResolver =",
                "+        DefaultSourcePathResolver.from(new SourcePathRuleFinder(context.getBuildRuleResolver()));",
                "+    return new PrebuiltDotnetLibrary(",
                "+        buildTarget, context.getProjectFilesystem(), params, pathResolver, args.getAssembly());",
                "+  }",
                "+",
                "+  @BuckStyleImmutable",
                "+  @Value.Immutable",
                "+  interface AbstractPrebuiltDotnetLibraryDescriptionArg extends CommonDescriptionArg {",
                "+    SourcePath getAssembly();",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/dotnet/BUCK b/test/com/facebook/buck/features/dotnet/BUCK",
                "new file mode 100644",
                "index 0000000000..2ccf627765",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/dotnet/BUCK",
                "@@ -0,0 +1,147 @@",
                "+load(\"//tools/build_rules:java_rules.bzl\", \"standard_java_test\")",
                "+",
                "+java_library(",
                "+    name = \"testutil\",",
                "+    srcs = glob(",
                "+        [\"*.java\"],",
                "+        exclude = [",
                "+            \"*Benchmark.java\",",
                "+            \"*Test.java\",",
                "+        ],",
                "+    ),",
                "+    visibility = [\"//test/...\"],",
                "+    deps = [",
                "+        \"//src/com/facebook/buck/io:executable-finder\",",
                "+        \"//src/com/facebook/buck/util/immutables:immutables\",",
                "+        \"//third-party/java/guava:guava\",",
                "+        \"//third-party/java/immutables:immutables\",",
                "+        \"//third-party/java/jackson:jackson-databind\",",
                "+        \"//third-party/java/jsr:jsr305\",",
                "+        \"//third-party/java/junit:junit\",",
                "+    ],",
                "+)",
                "+",
                "+standard_java_test(",
                "+    name = \"dotnet\",",
                "+    with_test_data = True,",
                "+    deps = [",
                "+        \"//src-gen:thrift\",",
                "+        \"//src/com/facebook/buck/android:helpers\",",
                "+        \"//src/com/facebook/buck/android:rules\",",
                "+        \"//src/com/facebook/buck/android:split_dex\",",
                "+        \"//src/com/facebook/buck/android:steps\",",
                "+        \"//src/com/facebook/buck/android:utils\",",
                "+        \"//src/com/facebook/buck/android/aapt:aapt\",",
                "+        \"//src/com/facebook/buck/android/redex:options\",",
                "+        \"//src/com/facebook/buck/apple/project_generator:project_generator\",",
                "+        \"//src/com/facebook/buck/apple/xcode:xcode\",",
                "+        \"//src/com/facebook/buck/artifact_cache:artifact_cache\",",
                "+        \"//src/com/facebook/buck/config:config\",",
                "+        \"//src/com/facebook/buck/counters:counters\",",
                "+        \"//src/com/facebook/buck/cxx:rules\",",
                "+        \"//src/com/facebook/buck/distributed:distributed\",",
                "+        \"//src/com/facebook/buck/doctor/config:config\",",
                "+        \"//src/com/facebook/buck/event:event\",",
                "+        \"//src/com/facebook/buck/event:interfaces\",",
                "+        \"//src/com/facebook/buck/event/external:external_lib\",",
                "+        \"//src/com/facebook/buck/event/listener:BroadcastEventListener\",",
                "+        \"//src/com/facebook/buck/event/listener:listener\",",
                "+        \"//src/com/facebook/buck/features/dotnet:dotnet\",",
                "+        \"//src/com/facebook/buck/graph:graph\",",
                "+        \"//src/com/facebook/buck/io:executable-finder\",",
                "+        \"//src/com/facebook/buck/io:io\",",
                "+        \"//src/com/facebook/buck/io:transport\",",
                "+        \"//src/com/facebook/buck/io:watchman\",",
                "+        \"//src/com/facebook/buck/json:json\",",
                "+        \"//src/com/facebook/buck/jvm/core:core\",",
                "+        \"//src/com/facebook/buck/jvm/java:config\",",
                "+        \"//src/com/facebook/buck/jvm/java:javac-sink\",",
                "+        \"//src/com/facebook/buck/jvm/java:packagefinder\",",
                "+        \"//src/com/facebook/buck/jvm/java:rules\",",
                "+        \"//src/com/facebook/buck/jvm/java:steps\",",
                "+        \"//src/com/facebook/buck/jvm/java:support\",",
                "+        \"//src/com/facebook/buck/jvm/java/abi/source/api:api\",",
                "+        \"//src/com/facebook/buck/jvm/java/autodeps:SymbolExtractor\",",
                "+        \"//src/com/facebook/buck/jvm/java/autodeps:autodeps\",",
                "+        \"//src/com/facebook/buck/jvm/java/classes:classes\",",
                "+        \"//src/com/facebook/buck/jvm/kotlin:kotlin\",",
                "+        \"//src/com/facebook/buck/jvm/scala:scala\",",
                "+        \"//src/com/facebook/buck/log:log\",",
                "+        \"//src/com/facebook/buck/maven:util\",",
                "+        \"//src/com/facebook/buck/model:build_id\",",
                "+        \"//src/com/facebook/buck/model:model\",",
                "+        \"//src/com/facebook/buck/parser:config\",",
                "+        \"//src/com/facebook/buck/parser:parser\",",
                "+        \"//src/com/facebook/buck/parser:rule_pattern\",",
                "+        \"//src/com/facebook/buck/query:query\",",
                "+        \"//src/com/facebook/buck/rules:rules\",",
                "+        \"//src/com/facebook/buck/rules:types\",",
                "+        \"//src/com/facebook/buck/rules/args:args\",",
                "+        \"//src/com/facebook/buck/rules/coercer:coercer\",",
                "+        \"//src/com/facebook/buck/rules/coercer:interface\",",
                "+        \"//src/com/facebook/buck/rules/keys:keys\",",
                "+        \"//src/com/facebook/buck/rules/macros:macros\",",
                "+        \"//src/com/facebook/buck/rules/macros:types\",",
                "+        \"//src/com/facebook/buck/rules/query:types\",",
                "+        \"//src/com/facebook/buck/shell:rules\",",
                "+        \"//src/com/facebook/buck/shell:steps\",",
                "+        \"//src/com/facebook/buck/shell:worker\",",
                "+        \"//src/com/facebook/buck/shell:worker_tool\",",
                "+        \"//src/com/facebook/buck/slb:slb\",",
                "+        \"//src/com/facebook/buck/step:step\",",
                "+        \"//src/com/facebook/buck/swift:swift\",",
                "+        \"//src/com/facebook/buck/test:test\",",
                "+        \"//src/com/facebook/buck/test/result/type:type\",",
                "+        \"//src/com/facebook/buck/test/selectors:selectors\",",
                "+        \"//src/com/facebook/buck/util:exceptions\",",
                "+        \"//src/com/facebook/buck/util:io\",",
                "+        \"//src/com/facebook/buck/util:packaged_resource\",",
                "+        \"//src/com/facebook/buck/util:process_executor\",",
                "+        \"//src/com/facebook/buck/util:util\",",
                "+        \"//src/com/facebook/buck/util/cache:cache\",",
                "+        \"//src/com/facebook/buck/util/concurrent:concurrent\",",
                "+        \"//src/com/facebook/buck/util/environment:environment\",",
                "+        \"//src/com/facebook/buck/util/environment:platform\",",
                "+        \"//src/com/facebook/buck/util/immutables:immutables\",",
                "+        \"//src/com/facebook/buck/util/network/hostname:hostname\",",
                "+        \"//src/com/facebook/buck/util/sha1:sha1\",",
                "+        \"//src/com/facebook/buck/util/trace:trace\",",
                "+        \"//src/com/facebook/buck/util/unit:unit\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_config\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_generator\",",
                "+        \"//src/com/facebook/buck/versions:translator\",",
                "+        \"//src/com/facebook/buck/versions:types\",",
                "+        \"//src/com/facebook/buck/versions:versions\",",
                "+        \"//src/com/facebook/buck/worker:worker_job_params\",",
                "+        \"//src/com/facebook/buck/worker:worker_pool_factory\",",
                "+        \"//src/com/facebook/buck/worker:worker_process\",",
                "+        \"//test/com/facebook/buck/features/dotnet:testutil\",",
                "+        \"//test/com/facebook/buck/testutil:testutil\",",
                "+        \"//test/com/facebook/buck/testutil/integration:util\",",
                "+        \"//third-party/java/aether:aether-api\",",
                "+        \"//third-party/java/android:ddmlib\",",
                "+        \"//third-party/java/android:tools-sdk-common\",",
                "+        \"//third-party/java/aosp:aosp\",",
                "+        \"//third-party/java/args4j:args4j\",",
                "+        \"//third-party/java/asm:asm\",",
                "+        \"//third-party/java/dd-plist:dd-plist\",",
                "+        \"//third-party/java/guava:guava\",",
                "+        \"//third-party/java/hamcrest:java-hamcrest\",",
                "+        \"//third-party/java/immutables:immutables\",",
                "+        \"//third-party/java/infer-annotations:infer-annotations\",",
                "+        \"//third-party/java/jackson:jackson-annotations\",",
                "+        \"//third-party/java/jackson:jackson-core\",",
                "+        \"//third-party/java/jackson:jackson-databind\",",
                "+        \"//third-party/java/jimfs:jimfs\",",
                "+        \"//third-party/java/jna:jna\",",
                "+        \"//third-party/java/jsr:jsr305\",",
                "+        \"//third-party/java/junit:junit\",",
                "+        \"//third-party/java/maven:maven-model\",",
                "+        \"//third-party/java/nailgun:nailgun\",",
                "+        \"//third-party/java/okhttp:okhttp\",",
                "+        \"//third-party/java/okio:okio\",",
                "+        \"//third-party/java/stringtemplate:stringtemplate\",",
                "+        \"//third-party/java/thrift:libthrift\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/features/dotnet/CsharpLibraryIntegrationTest.java b/test/com/facebook/buck/features/dotnet/CsharpLibraryIntegrationTest.java",
                "new file mode 100644",
                "index 0000000000..f71335f1aa",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/dotnet/CsharpLibraryIntegrationTest.java",
                "@@ -0,0 +1,130 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.dotnet;",
                "+",
                "+import static com.facebook.buck.features.dotnet.DotnetAssumptions.assumeCscIsAvailable;",
                "+import static org.junit.Assert.fail;",
                "+",
                "+import com.facebook.buck.testutil.ProcessResult;",
                "+import com.facebook.buck.testutil.TemporaryPaths;",
                "+import com.facebook.buck.testutil.TestConsole;",
                "+import com.facebook.buck.testutil.integration.ProjectWorkspace;",
                "+import com.facebook.buck.testutil.integration.TestDataHelper;",
                "+import com.facebook.buck.util.DefaultProcessExecutor;",
                "+import com.facebook.buck.util.ProcessExecutor;",
                "+import com.facebook.buck.util.ProcessExecutorParams;",
                "+import com.facebook.buck.util.environment.Platform;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import java.io.IOException;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.Paths;",
                "+import java.util.Optional;",
                "+import org.junit.Assert;",
                "+import org.junit.Before;",
                "+import org.junit.Ignore;",
                "+import org.junit.Rule;",
                "+import org.junit.Test;",
                "+",
                "+public class CsharpLibraryIntegrationTest {",
                "+",
                "+  // https://msdn.microsoft.com/en-us/library/1700bbwd.aspx",
                "+  private static final String vsvars32bat =",
                "+      \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 14.0\\\\Common7\\\\Tools\\\\vsvars32.bat\";",
                "+",
                "+  @Rule public TemporaryPaths tmp = new TemporaryPaths();",
                "+",
                "+  private ImmutableMap<String, String> env;",
                "+",
                "+  @Before",
                "+  public void setUp() throws IOException, InterruptedException {",
                "+    env = getEnv();",
                "+    assumeCscIsAvailable(env);",
                "+  }",
                "+",
                "+  @Test",
                "+  public void shouldCompileLibraryWithSystemProvidedDeps() throws IOException {",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"csc-tests\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    ProcessResult result = workspace.runBuckCommand(env, \"build\", \"//src:simple\");",
                "+    result.assertSuccess();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void shouldCompileLibraryWithAPrebuiltDependency() throws IOException {",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"csc-tests\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    ProcessResult result = workspace.runBuckCommand(env, \"build\", \"//src:prebuilt\");",
                "+    result.assertSuccess();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void shouldBeAbleToEmbedResourcesIntoTheBuiltDll() throws IOException {",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"csc-tests\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    ProcessResult result = workspace.runBuckCommand(env, \"build\", \"//src:embed\");",
                "+    result.assertSuccess();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void shouldBeAbleToDependOnAnotherCsharpLibrary() throws IOException {",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"csc-tests\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    ProcessResult result = workspace.runBuckCommand(env, \"build\", \"//src:dependent\");",
                "+    result.assertSuccess();",
                "+  }",
                "+",
                "+  @Test",
                "+  @Ignore",
                "+  public void shouldBeAbleToAddTheSameResourceToADllTwice() {",
                "+    fail(\"Implement me, please!\");",
                "+  }",
                "+",
                "+  private ImmutableMap<String, String> getEnv() throws IOException, InterruptedException {",
                "+    if (Platform.detect() == Platform.WINDOWS && Files.exists(Paths.get(vsvars32bat))) {",
                "+      String vsvar32BatEsc = vsvars32bat.replace(\" \", \"^ \").replace(\"(\", \"^(\");",
                "+      ProcessExecutorParams params =",
                "+          ProcessExecutorParams.ofCommand(\"cmd\", \"/c\", vsvar32BatEsc + \" && set\");",
                "+      ProcessExecutor executor = new DefaultProcessExecutor(new TestConsole());",
                "+      ProcessExecutor.Result envResult = executor.launchAndExecute(params);",
                "+      Optional<String> envOut = envResult.getStdout();",
                "+      Assert.assertTrue(envOut.isPresent());",
                "+      String envString = envOut.get();",
                "+      String[] envStrings = envString.split(\"\\\\r?\\\\n\");",
                "+      ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();",
                "+      for (String s : envStrings) {",
                "+        int sep = s.indexOf('=');",
                "+        String key = s.substring(0, sep);",
                "+        if (\"PATH\".equalsIgnoreCase(key)) {",
                "+          key = \"PATH\";",
                "+        }",
                "+        String val = s.substring(sep + 1, s.length());",
                "+        builder.put(key, val);",
                "+      }",
                "+      return builder.build();",
                "+    } else {",
                "+      return ImmutableMap.copyOf(System.getenv());",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/dotnet/DotnetAssumptions.java b/test/com/facebook/buck/features/dotnet/DotnetAssumptions.java",
                "new file mode 100644",
                "index 0000000000..246204cf38",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/dotnet/DotnetAssumptions.java",
                "@@ -0,0 +1,38 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.dotnet;",
                "+",
                "+import static org.junit.Assume.assumeTrue;",
                "+",
                "+import com.facebook.buck.io.ExecutableFinder;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                "+import java.util.Optional;",
                "+",
                "+public class DotnetAssumptions {",
                "+",
                "+  private DotnetAssumptions() {",
                "+    // Utility class",
                "+  }",
                "+",
                "+  public static void assumeCscIsAvailable(ImmutableMap<String, String> env) {",
                "+    Optional<Path> csc = new ExecutableFinder().getOptionalExecutable(Paths.get(\"csc\"), env);",
                "+",
                "+    assumeTrue(\"Unable to find csc\", csc.isPresent());",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/dotnet/DotnetFrameworkResolvingTest.java b/test/com/facebook/buck/features/dotnet/DotnetFrameworkResolvingTest.java",
                "new file mode 100644",
                "index 0000000000..08cbbb5c21",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/dotnet/DotnetFrameworkResolvingTest.java",
                "@@ -0,0 +1,103 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.dotnet;",
                "+",
                "+import static com.facebook.buck.features.dotnet.FrameworkVersion.NET35;",
                "+import static com.facebook.buck.features.dotnet.FrameworkVersion.NET46;",
                "+import static java.nio.charset.StandardCharsets.UTF_8;",
                "+import static org.junit.Assert.assertEquals;",
                "+",
                "+import com.facebook.buck.util.HumanReadableException;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.jimfs.Configuration;",
                "+import com.google.common.jimfs.Jimfs;",
                "+import java.io.IOException;",
                "+import java.nio.file.FileSystem;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.Path;",
                "+import org.junit.Before;",
                "+import org.junit.Test;",
                "+",
                "+public class DotnetFrameworkResolvingTest {",
                "+",
                "+  private FileSystem filesystem;",
                "+  private Path baseFrameworkDir;",
                "+  private String programFiles;",
                "+",
                "+  @Before",
                "+  public void setUpFilesystem() throws IOException {",
                "+    filesystem = Jimfs.newFileSystem(Configuration.windows());",
                "+",
                "+    programFiles = \"c:\\\\Program Files(x86)\";",
                "+",
                "+    baseFrameworkDir =",
                "+        filesystem",
                "+            .getPath(programFiles)",
                "+            .resolve(\"Reference Assemblies\")",
                "+            .resolve(\"Microsoft\")",
                "+            .resolve(\"Framework\");",
                "+    Files.createDirectories(baseFrameworkDir);",
                "+  }",
                "+",
                "+  @Test",
                "+  public void shouldFindDotnet35Directory() throws IOException {",
                "+    ImmutableMap<String, String> env = ImmutableMap.of(\"ProgramFiles(x86)\", programFiles);",
                "+    Path baseDir = baseFrameworkDir.resolve(\"v3.5\");",
                "+    Files.createDirectories(baseDir);",
                "+    Path expected = baseDir.resolve(\"cake.dll\");",
                "+    Files.write(expected, \"\".getBytes(UTF_8));",
                "+",
                "+    DotnetFramework framework = DotnetFramework.resolveFramework(filesystem, env, NET35);",
                "+    Path actual = framework.findReferenceAssembly(\"cake.dll\");",
                "+",
                "+    assertEquals(expected, actual);",
                "+  }",
                "+",
                "+  @Test",
                "+  public void shouldFindVersionOfDotnetFrameworkGreaterThan35() throws IOException {",
                "+    ImmutableMap<String, String> env = ImmutableMap.of(\"ProgramFiles(x86)\", programFiles);",
                "+    Path baseDir = baseFrameworkDir.resolve(\".NETFramework\").resolve(\"v4.6\");",
                "+    Files.createDirectories(baseDir);",
                "+    Path expected = baseDir.resolve(\"cake.dll\");",
                "+    Files.write(expected, \"\".getBytes(UTF_8));",
                "+",
                "+    DotnetFramework framework = DotnetFramework.resolveFramework(filesystem, env, NET46);",
                "+    Path actual = framework.findReferenceAssembly(\"cake.dll\");",
                "+",
                "+    assertEquals(expected, actual);",
                "+  }",
                "+",
                "+  @Test(expected = HumanReadableException.class)",
                "+  public void shouldThrowAnExceptionIfNoFrameworkCanBeFound() throws IOException {",
                "+    ImmutableMap<String, String> env = ImmutableMap.of(\"ProgramFiles(x86)\", programFiles);",
                "+    Path baseDir = baseFrameworkDir.resolve(\".NETFramework\").resolve(\"v4.6\");",
                "+    Files.createDirectories(baseDir);",
                "+",
                "+    DotnetFramework.resolveFramework(filesystem, env, NET35);",
                "+  }",
                "+",
                "+  @Test(expected = HumanReadableException.class)",
                "+  public void shouldThrowAnExceptionIfTheFrameworkDirectoryIsFoundButIsNotADirectory()",
                "+      throws IOException {",
                "+    ImmutableMap<String, String> env = ImmutableMap.of(\"ProgramFiles(x86)\", programFiles);",
                "+    Path baseDir = baseFrameworkDir.resolve(\".NETFramework\").resolve(\"v4.6\");",
                "+    Files.createDirectories(baseDir.getParent());",
                "+    Files.write(baseDir, \"\".getBytes(UTF_8));",
                "+",
                "+    DotnetFramework.resolveFramework(filesystem, env, NET46);",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/dotnet/testdata/csc-tests/lib/BUCK.fixture b/test/com/facebook/buck/features/dotnet/testdata/csc-tests/lib/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..ab2d32b6d4",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/dotnet/testdata/csc-tests/lib/BUCK.fixture",
                "@@ -0,0 +1,7 @@",
                "+prebuilt_dotnet_library(",
                "+    name = \"log4net\",",
                "+    assembly = \"log4net.dll\",",
                "+    visibility = [",
                "+        \"//src/...\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/features/dotnet/testdata/csc-tests/lib/log4net.dll b/test/com/facebook/buck/features/dotnet/testdata/csc-tests/lib/log4net.dll",
                "new file mode 100644",
                "index 0000000000..20a2e1c47d",
                "Binary files /dev/null and b/test/com/facebook/buck/features/dotnet/testdata/csc-tests/lib/log4net.dll differ",
                "diff --git a/test/com/facebook/buck/features/dotnet/testdata/csc-tests/src/BUCK.fixture b/test/com/facebook/buck/features/dotnet/testdata/csc-tests/src/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..84b9540be4",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/dotnet/testdata/csc-tests/src/BUCK.fixture",
                "@@ -0,0 +1,41 @@",
                "+csharp_library(",
                "+    name = \"simple\",",
                "+    srcs = [\"Hello.cs\"],",
                "+    framework_ver = \"net45\",",
                "+    deps = [",
                "+        \"System.dll\",",
                "+    ],",
                "+)",
                "+",
                "+csharp_library(",
                "+    name = \"embed\",",
                "+    srcs = [\"Hello.cs\"],",
                "+    framework_ver = \"net45\",",
                "+    resources = {",
                "+        \"world.txt\": \"greeting.txt\",",
                "+    },",
                "+    deps = [",
                "+        \"System.dll\",",
                "+    ],",
                "+)",
                "+",
                "+csharp_library(",
                "+    name = \"prebuilt\",",
                "+    srcs = [\"Hello.cs\"],",
                "+    framework_ver = \"net45\",",
                "+    deps = [",
                "+        \"System.dll\",",
                "+        \"//lib:log4net\",",
                "+    ],",
                "+)",
                "+",
                "+csharp_library(",
                "+    name = \"dependent\",",
                "+    srcs = [\"Hello2.cs\"],",
                "+    framework_ver = \"net45\",",
                "+    deps = [",
                "+        \"System.dll\",",
                "+        \":prebuilt\",",
                "+        \":simple\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/features/dotnet/testdata/csc-tests/src/Hello.cs b/test/com/facebook/buck/features/dotnet/testdata/csc-tests/src/Hello.cs",
                "new file mode 100644",
                "index 0000000000..9c50fa3284",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/dotnet/testdata/csc-tests/src/Hello.cs",
                "@@ -0,0 +1,7 @@",
                "+public class Hello",
                "+{",
                "+   public static void Main()",
                "+   {",
                "+      System.Console.WriteLine(\"Hello, World!\");",
                "+   }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/dotnet/testdata/csc-tests/src/Hello2.cs b/test/com/facebook/buck/features/dotnet/testdata/csc-tests/src/Hello2.cs",
                "new file mode 100644",
                "index 0000000000..563bc5f736",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/dotnet/testdata/csc-tests/src/Hello2.cs",
                "@@ -0,0 +1,7 @@",
                "+public class Hello2",
                "+{",
                "+   public static void PrintGreeting()",
                "+   {",
                "+      System.Console.WriteLine(\"Also hello, World!\");",
                "+   }",
                "+}"
            ],
            "changed_files": [
                "build.xml",
                "programs/BUCK",
                "src/com/facebook/buck/features/dotnet/BUCK",
                "src/com/facebook/buck/features/dotnet/CsharpLibrary.java",
                "src/com/facebook/buck/features/dotnet/CsharpLibraryCompile.java",
                "src/com/facebook/buck/features/dotnet/CsharpLibraryDescription.java",
                "src/com/facebook/buck/features/dotnet/DotnetDescriptionsProvider.java",
                "src/com/facebook/buck/features/dotnet/DotnetFramework.java",
                "src/com/facebook/buck/features/dotnet/DotnetModule.java",
                "src/com/facebook/buck/features/dotnet/FrameworkVersion.java",
                "src/com/facebook/buck/features/dotnet/PrebuiltDotnetLibrary.java",
                "src/com/facebook/buck/features/dotnet/PrebuiltDotnetLibraryDescription.java",
                "test/com/facebook/buck/features/dotnet/BUCK",
                "test/com/facebook/buck/features/dotnet/CsharpLibraryIntegrationTest.java",
                "test/com/facebook/buck/features/dotnet/DotnetAssumptions.java",
                "test/com/facebook/buck/features/dotnet/DotnetFrameworkResolvingTest.java",
                "test/com/facebook/buck/features/dotnet/testdata/csc-tests/lib/BUCK.fixture",
                "test/com/facebook/buck/features/dotnet/testdata/csc-tests/lib/log4net.dll",
                "test/com/facebook/buck/features/dotnet/testdata/csc-tests/src/BUCK.fixture",
                "test/com/facebook/buck/features/dotnet/testdata/csc-tests/src/Hello.cs",
                "test/com/facebook/buck/features/dotnet/testdata/csc-tests/src/Hello2.cs"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ebe1e9c3c7233c915c0f09fdbe018e1778f0ea5f",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522697741,
            "hunks": 19,
            "message": "Add default platform deps for compilation database and infer Summary: Some flavors use default platform, need to add its dependencies to the parse time dependencies. Reviewed By: andrewjcg fbshipit-source-id: 329a585",
            "diff": [
                "diff --git a/src/com/facebook/buck/apple/AppleLibraryDescription.java b/src/com/facebook/buck/apple/AppleLibraryDescription.java",
                "index 43ff11ce5d..e35b276e2a 100644",
                "--- a/src/com/facebook/buck/apple/AppleLibraryDescription.java",
                "+++ b/src/com/facebook/buck/apple/AppleLibraryDescription.java",
                "@@ -44,3 +44,2 @@ import com.facebook.buck.cxx.HeaderSymlinkTreeWithHeaderMap;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "@@ -800,5 +799,5 @@ public class AppleLibraryDescription",
                "       ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "+    MultiarchFileInfos.checkTargetSupportsMultiarch(getAppleCxxPlatformDomain(), buildTarget);",
                "     extraDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(",
                "-            getCxxPlatformsProvider().getCxxPlatforms().getValues(buildTarget)));",
                "+        cxxLibraryFactory.getPlatformParseTimeDeps(buildTarget, constructorArg));",
                "   }",
                "diff --git a/src/com/facebook/buck/apple/MultiarchFileInfos.java b/src/com/facebook/buck/apple/MultiarchFileInfos.java",
                "index fd52eb6676..015d3f85f4 100644",
                "--- a/src/com/facebook/buck/apple/MultiarchFileInfos.java",
                "+++ b/src/com/facebook/buck/apple/MultiarchFileInfos.java",
                "@@ -64,6 +64,3 @@ public class MultiarchFileInfos {",
                "-    if (!Sets.intersection(target.getFlavors(), FORBIDDEN_BUILD_ACTIONS).isEmpty()) {",
                "-      throw new HumanReadableException(",
                "-          \"%s: Fat binaries is only supported when building an actual binary.\", target);",
                "-    }",
                "+    assertTargetSupportsMultiarch(target);",
                "@@ -97,2 +94,20 @@ public class MultiarchFileInfos {",
                "+  public static void checkTargetSupportsMultiarch(",
                "+      FlavorDomain<AppleCxxPlatform> appleCxxPlatforms, BuildTarget target) {",
                "+    ImmutableList<ImmutableSortedSet<Flavor>> thinFlavorSets =",
                "+        generateThinFlavors(appleCxxPlatforms.getFlavors(), target.getFlavors());",
                "+    if (thinFlavorSets.size() <= 1) { // Actually a thin binary",
                "+      return;",
                "+    }",
                "+",
                "+    assertTargetSupportsMultiarch(target);",
                "+  }",
                "+",
                "+  private static void assertTargetSupportsMultiarch(BuildTarget target) {",
                "+    if (!Sets.intersection(target.getFlavors(), FORBIDDEN_BUILD_ACTIONS).isEmpty()) {",
                "+      throw new HumanReadableException(",
                "+          \"%s: Fat binaries is only supported when building an actual binary.\", target);",
                "+    }",
                "+  }",
                "+",
                "   /**",
                "diff --git a/src/com/facebook/buck/cxx/CxxDescriptionsProvider.java b/src/com/facebook/buck/cxx/CxxDescriptionsProvider.java",
                "index 02c49475ec..3b5d700680 100644",
                "--- a/src/com/facebook/buck/cxx/CxxDescriptionsProvider.java",
                "+++ b/src/com/facebook/buck/cxx/CxxDescriptionsProvider.java",
                "@@ -66,3 +66,2 @@ public class CxxDescriptionsProvider implements DescriptionProvider {",
                "         new CxxLibraryDescription(",
                "-            toolchainProvider,",
                "             cxxLibraryImplicitFlavors,",
                "diff --git a/src/com/facebook/buck/cxx/CxxLibraryDescription.java b/src/com/facebook/buck/cxx/CxxLibraryDescription.java",
                "index bebcd8a60c..e915d88f1f 100644",
                "--- a/src/com/facebook/buck/cxx/CxxLibraryDescription.java",
                "+++ b/src/com/facebook/buck/cxx/CxxLibraryDescription.java",
                "@@ -20,4 +20,2 @@ import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                " import com.facebook.buck.cxx.toolchain.HeaderMode;",
                "@@ -46,3 +44,2 @@ import com.facebook.buck.rules.coercer.SourceList;",
                " import com.facebook.buck.rules.macros.StringWithMacros;",
                "-import com.facebook.buck.toolchain.ToolchainProvider;",
                " import com.facebook.buck.util.HumanReadableException;",
                "@@ -128,3 +125,2 @@ public class CxxLibraryDescription",
                "-  private final ToolchainProvider toolchainProvider;",
                "   private final CxxLibraryImplicitFlavors cxxLibraryImplicitFlavors;",
                "@@ -135,3 +131,2 @@ public class CxxLibraryDescription",
                "   public CxxLibraryDescription(",
                "-      ToolchainProvider toolchainProvider,",
                "       CxxLibraryImplicitFlavors cxxLibraryImplicitFlavors,",
                "@@ -140,3 +135,2 @@ public class CxxLibraryDescription",
                "       CxxLibraryMetadataFactory cxxLibraryMetadataFactory) {",
                "-    this.toolchainProvider = toolchainProvider;",
                "     this.cxxLibraryImplicitFlavors = cxxLibraryImplicitFlavors;",
                "@@ -256,4 +250,3 @@ public class CxxLibraryDescription",
                "     targetGraphOnlyDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(",
                "-            getCxxPlatformsProvider().getCxxPlatforms().getValues(buildTarget)));",
                "+        cxxLibraryFactory.getPlatformParseTimeDeps(buildTarget, constructorArg));",
                "   }",
                "@@ -297,7 +290,2 @@ public class CxxLibraryDescription",
                "-  private CxxPlatformsProvider getCxxPlatformsProvider() {",
                "-    return toolchainProvider.getByName(",
                "-        CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class);",
                "-  }",
                "-",
                "   /**",
                "diff --git a/src/com/facebook/buck/cxx/CxxLibraryFactory.java b/src/com/facebook/buck/cxx/CxxLibraryFactory.java",
                "index 85d992df9b..0c4d509575 100644",
                "--- a/src/com/facebook/buck/cxx/CxxLibraryFactory.java",
                "+++ b/src/com/facebook/buck/cxx/CxxLibraryFactory.java",
                "@@ -20,2 +20,3 @@ import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "@@ -43,2 +44,3 @@ import com.facebook.buck.rules.CellPathResolver;",
                " import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.HasDefaultPlatform;",
                " import com.facebook.buck.rules.NoopBuildRule;",
                "@@ -65,2 +67,3 @@ import com.google.common.collect.ImmutableSortedSet;",
                " import com.google.common.collect.Multimaps;",
                "+import com.google.common.collect.Sets;",
                " import java.nio.file.Path;",
                "@@ -73,2 +76,9 @@ public class CxxLibraryFactory {",
                "+  private static final ImmutableSet<Flavor> FLAVORS_WITH_DEFAULT_PLATFORM =",
                "+      ImmutableSet.<Flavor>builder()",
                "+          .add(CxxCompilationDatabase.COMPILATION_DATABASE)",
                "+          .add(CxxCompilationDatabase.UBER_COMPILATION_DATABASE)",
                "+          .addAll(CxxInferEnhancer.INFER_FLAVOR_DOMAIN.getFlavors())",
                "+          .build();",
                "+",
                "   private final ToolchainProvider toolchainProvider;",
                "@@ -335,2 +345,50 @@ public class CxxLibraryFactory {",
                "+  /**",
                "+   * Calculates a platform flavor for a given target. If a target has no flavor, then calculate it",
                "+   * using other flavors.",
                "+   *",
                "+   * <p>Note that this logic should be kept in sync with {@link #createBuildRule}.",
                "+   */",
                "+  private Flavor getPlatformFlavor(BuildTarget buildTarget, HasDefaultPlatform args) {",
                "+    CxxPlatformsProvider cxxPlatformsProvider = getCxxPlatformsProvider();",
                "+    FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();",
                "+    Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();",
                "+    Optional<CxxPlatform> platform = cxxPlatforms.getValue(buildTarget);",
                "+    if (buildTarget.getFlavors().contains(CxxCompilationDatabase.COMPILATION_DATABASE)) {",
                "+      CxxPlatform cxxPlatform =",
                "+          platform.orElse(",
                "+              cxxPlatforms.getValue(args.getDefaultPlatform().orElse(defaultCxxFlavor)));",
                "+      return cxxPlatform.getFlavor();",
                "+    } else if (buildTarget",
                "+        .getFlavors()",
                "+        .contains(CxxCompilationDatabase.UBER_COMPILATION_DATABASE)) {",
                "+      return platform.isPresent()",
                "+          ? platform.get().getFlavor()",
                "+          : args.getDefaultPlatform().orElse(defaultCxxFlavor);",
                "+    } else if (CxxInferEnhancer.INFER_FLAVOR_DOMAIN.containsAnyOf(buildTarget.getFlavors())) {",
                "+      return platform.orElse(cxxPlatforms.getValue(defaultCxxFlavor)).getFlavor();",
                "+    } else {",
                "+      throw new IllegalArgumentException(",
                "+          String.format(",
                "+              \"Target %s contains unrecognized flavors: %s\",",
                "+              buildTarget.getFullyQualifiedName(), buildTarget.getFlavors()));",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * @return an {@link Iterable} with platform dependencies that need to be resolved at parse time.",
                "+   */",
                "+  public Iterable<BuildTarget> getPlatformParseTimeDeps(",
                "+      BuildTarget buildTarget, HasDefaultPlatform args) {",
                "+    if (Sets.intersection(buildTarget.getFlavors(), FLAVORS_WITH_DEFAULT_PLATFORM).isEmpty()) {",
                "+      return CxxPlatforms.getParseTimeDeps(",
                "+          getCxxPlatformsProvider().getCxxPlatforms().getValues(buildTarget));",
                "+    } else {",
                "+      return CxxPlatforms.getParseTimeDeps(",
                "+          getCxxPlatformsProvider()",
                "+              .getCxxPlatforms()",
                "+              .getValue(getPlatformFlavor(buildTarget, args)));",
                "+    }",
                "+  }",
                "+",
                "   private static ImmutableList<SourcePath> requireObjects(",
                "diff --git a/test/com/facebook/buck/cxx/CxxLibraryBuilder.java b/test/com/facebook/buck/cxx/CxxLibraryBuilder.java",
                "index f3da2ca6c4..71b2eae6f8 100644",
                "--- a/test/com/facebook/buck/cxx/CxxLibraryBuilder.java",
                "+++ b/test/com/facebook/buck/cxx/CxxLibraryBuilder.java",
                "@@ -68,3 +68,2 @@ public class CxxLibraryBuilder",
                "     return new CxxLibraryDescription(",
                "-        toolchainProvider,",
                "         cxxLibraryImplicitFlavors,"
            ],
            "changed_files": [
                "src/com/facebook/buck/apple/AppleLibraryDescription.java",
                "src/com/facebook/buck/apple/MultiarchFileInfos.java",
                "src/com/facebook/buck/cxx/CxxDescriptionsProvider.java",
                "src/com/facebook/buck/cxx/CxxLibraryDescription.java",
                "src/com/facebook/buck/cxx/CxxLibraryFactory.java",
                "test/com/facebook/buck/cxx/CxxLibraryBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "081d57b4644d65929318438e1267d320b6d158ee",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522789918,
            "hunks": 2,
            "message": "Move CXX E2E tests to own folder to stay consistent with apple/android Summary: See above Reviewed By: styurin fbshipit-source-id: 6e06709",
            "diff": [
                "diff --git a/test/com/facebook/buck/cxx/endtoend/BUCK b/test/com/facebook/buck/cxx/endtoend/BUCK",
                "new file mode 100644",
                "index 0000000000..f4dafb93e0",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cxx/endtoend/BUCK",
                "@@ -0,0 +1,19 @@",
                "+load(\"//tools/build_rules:java_rules.bzl\", \"java_immutables_library\", \"java_test\")",
                "+",
                "+TEST_SRCS = [",
                "+    \"*Test.java\",",
                "+]",
                "+",
                "+java_test(",
                "+    name = \"endtoend\",",
                "+    srcs = glob(",
                "+        TEST_SRCS,",
                "+    ),",
                "+    deps = [",
                "+        \"//src/com/facebook/buck/util/environment:platform\",",
                "+        \"//test/com/facebook/buck/apple:testutil\",",
                "+        \"//test/com/facebook/buck/testutil:testutil\",",
                "+        \"//test/com/facebook/buck/testutil/endtoend:testutil\",",
                "+        \"//third-party/java/junit:junit\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/cxx/endtoend/CxxDependentOnPyEndToEndTest.java b/test/com/facebook/buck/cxx/endtoend/CxxDependentOnPyEndToEndTest.java",
                "new file mode 100644",
                "index 0000000000..8c4faa0e62",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cxx/endtoend/CxxDependentOnPyEndToEndTest.java",
                "@@ -0,0 +1,78 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.cxx.endtoend;",
                "+",
                "+import com.facebook.buck.testutil.ProcessResult;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndEnvironment;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndRunner;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndTestDescriptor;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndWorkspace;",
                "+import com.facebook.buck.testutil.endtoend.Environment;",
                "+import org.junit.Test;",
                "+import org.junit.runner.RunWith;",
                "+",
                "+/**",
                "+ * E2E tests for buck's building process on an environment constructed like:",
                "+ *",
                "+ * <pre>",
                "+ *          cxx_binary",
                "+ *              |",
                "+ *     +--------+--------+",
                "+ *     v                 v",
                "+ *     cxx_library       cxx_library",
                "+ *     |",
                "+ *     v",
                "+ *     output_src",
                "+ *     ^",
                "+ *     |",
                "+ *     genrule",
                "+ *     |",
                "+ *     v",
                "+ *     py_binary",
                "+ *     |",
                "+ *     v",
                "+ *     py_library",
                "+ * </pre>",
                "+ */",
                "+@RunWith(EndToEndRunner.class)",
                "+public class CxxDependentOnPyEndToEndTest {",
                "+  private static final String mainTarget = \"//main_bin:main_bin\";",
                "+",
                "+  @Environment",
                "+  public static EndToEndEnvironment baseEnvironment() {",
                "+    return new EndToEndEnvironment()",
                "+        .addTemplates(\"cxx_dependent_on_py\")",
                "+        .withCommand(\"build\")",
                "+        .withTargets(mainTarget);",
                "+  }",
                "+",
                "+  private ProcessResult checkSuccessfulBuildAndRun(",
                "+      String message, ProcessResult result, EndToEndWorkspace workspace) throws Exception {",
                "+    result.assertSuccess(String.format(message, \"build\"));",
                "+    ProcessResult targetResult = workspace.runBuiltResult(mainTarget);",
                "+    targetResult.assertSuccess(String.format(message, \"run\"));",
                "+    return targetResult;",
                "+  }",
                "+",
                "+  /** Determines that buck successfully outputs proper programs */",
                "+  @Test",
                "+  public void shouldBuildAndRun(",
                "+      EndToEndTestDescriptor test, EndToEndWorkspace workspace, ProcessResult result)",
                "+      throws Exception {",
                "+    checkSuccessfulBuildAndRun(\"Did not successfully %s.\", result, workspace);",
                "+  }",
                "+}"
            ],
            "changed_files": [
                "test/com/facebook/buck/cxx/endtoend/BUCK",
                "test/com/facebook/buck/cxx/endtoend/CxxDependentOnPyEndToEndTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d9a219e02f27062031cbbfdd492f1c6284d016ba",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521480376,
            "hunks": 25,
            "message": "Base mobile template for E2E tests Summary: ```                                          android_binary            apple_package                                                  +                       +                    +-------------+---------------+                       |                    v             v               v                       v                 manifest     keystore     android_library           apple_bundle                    +                             +                       +                    |                    +--------+--------+              |                    v                    v                 v              v                 genrule          android_resource    cxx_library    apple_binary                    +                                      +              +    +---------------+                                      +--------------+    v               v                                      v              v genrule      python_binary                           cxx_library    apple_resource ``` More to come, but wanted to limit number of diffs (most of this is taken from the samples repo, with the exception of how manifest is made, and strings) Test Plan: Ran local builds in the directory Reviewed By: styurin fbshipit-source-id: c480e14",
            "diff": [
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/.buckconfig b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/.buckconfig",
                "new file mode 100644",
                "index 0000000000..7650f78df3",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/.buckconfig",
                "@@ -0,0 +1,35 @@",
                "+[cxx]",
                "+  default_platform = iphonesimulator-x86_64",
                "+  cflags = -g -std=c11",
                "+  cxxflags = -g -std=c++14",
                "+  # Many ARC APIs don't compile with separate preprocess and compile.",
                "+  combined_preprocess_and_compile = true",
                "+",
                "+[alias]",
                "+  demo_app_android = //android:demo-app",
                "+  demo_app_ios = //ios:BuckDemoApp",
                "+",
                "+[apple]",
                "+  xctool_zip_target = //third-party/ios/xctool:xctool-minimal-zip",
                "+",
                "+[ndk]",
                "+  ndk_version = r10e",
                "+  app_platform = android-21",
                "+",
                "+[android]",
                "+  target = Google Inc.:Google APIs:23",
                "+",
                "+[java]",
                "+  src_roots = /android/java/",
                "+  source_level = 6",
                "+  target_level = 6",
                "+",
                "+[project]",
                "+    default_android_manifest = //android/AndroidManifest.xml",
                "+    ignore = .buckd, \\",
                "+             .hg, \\",
                "+             .git, \\",
                "+             .idea, \\",
                "+             buck-cache, \\",
                "+             buck-out, \\",
                "+",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..8b339b583b",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/BUCK.fixture",
                "@@ -0,0 +1,14 @@",
                "+# Copyright 2015-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+android_binary(",
                "+    name = \"demo-app\",",
                "+    keystore = \"//android/keystores:debug\",",
                "+    manifest = \"//android/manifest:generated_manifest\",",
                "+    deps = [",
                "+        \"//android/java/com/facebook/buck/demo:lib\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/cxx/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/cxx/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..4ed8834adf",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/cxx/BUCK.fixture",
                "@@ -0,0 +1,20 @@",
                "+# Copyright 2015-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+cxx_library(",
                "+    name = \"jni\",",
                "+    srcs = glob([\"*.cpp\"]),",
                "+    compiler_flags = [",
                "+        \"-fvisibility=hidden\",",
                "+    ],",
                "+    soname = \"libjni.so\",",
                "+    visibility = [",
                "+        \"//android/java/com/facebook/buck/demo:lib\",",
                "+    ],",
                "+    deps = [",
                "+        \"//common:hello\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/cxx/Hello.cpp b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/cxx/Hello.cpp",
                "new file mode 100644",
                "index 0000000000..214f7e5621",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/cxx/Hello.cpp",
                "@@ -0,0 +1,35 @@",
                "+/*",
                "+ * Copyright 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the",
                "+ * LICENSE file in the root directory of this source tree.",
                "+ */",
                "+",
                "+#include <jni.h>",
                "+#include <type_traits>",
                "+#include \"common/hello.h\"",
                "+",
                "+static jstring getHelloString(JNIEnv *env, jobject obj)",
                "+{",
                "+  const char *str = helloString();",
                "+  return env->NewStringUTF(str);",
                "+}",
                "+",
                "+extern \"C\"",
                "+JNIEXPORT jint JNI_OnLoad(JavaVM* vm, void* reserved) {",
                "+  JNIEnv* env(nullptr);",
                "+  if (JNI_OK != vm->GetEnv(reinterpret_cast<void**>(&env), JNI_VERSION_1_6)) {",
                "+    return JNI_ERR;",
                "+  }",
                "+",
                "+  jclass helloClass = env->FindClass(\"com/facebook/buck/demo/Hello\");",
                "+  JNINativeMethod methods[] = {",
                "+    { \"getHelloString\", \"()Ljava/lang/String;\", (void*) getHelloString },",
                "+  };",
                "+",
                "+  if (JNI_OK != env->RegisterNatives(helloClass, methods, std::extent<decltype(methods)>::value)) {",
                "+    return JNI_ERR;",
                "+  }",
                "+  return JNI_VERSION_1_6;",
                "+}",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java",
                "new file mode 100644",
                "index 0000000000..65c9caf899",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java",
                "@@ -0,0 +1,30 @@",
                "+/*",
                "+ * Copyright 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the",
                "+ * LICENSE file in the root directory of this source tree.",
                "+ */",
                "+",
                "+package com.facebook.buck.demo;",
                "+",
                "+import android.app.Activity;",
                "+import android.os.Bundle;",
                "+import android.widget.TextView;",
                "+",
                "+public class App extends Activity {",
                "+  @Override",
                "+  public void onCreate(Bundle savedInstanceState) {",
                "+    super.onCreate(savedInstanceState);",
                "+",
                "+    setTitle(R.string.app_name);",
                "+    setContentView(R.layout.hello);",
                "+    TextView textView = (TextView) findViewById(R.id.hello_text);",
                "+    try {",
                "+      String message = new Hello().getHelloString();",
                "+      textView.setText(message);",
                "+    } catch (Exception e) {",
                "+      textView.setText(String.format(\"Unable to load jni library! %s\", e.getMessage()));",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..b2d690b0e1",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "@@ -0,0 +1,17 @@",
                "+# Copyright 2015-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+android_library(",
                "+    name = \"lib\",",
                "+    srcs = glob([\"*.java\"]),",
                "+    visibility = [",
                "+        \"PUBLIC\",",
                "+    ],",
                "+    deps = [",
                "+        \"//android/cxx:jni\",",
                "+        \"//android/resources:res\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/Hello.java b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/Hello.java",
                "new file mode 100644",
                "index 0000000000..82930e2705",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/Hello.java",
                "@@ -0,0 +1,17 @@",
                "+/*",
                "+ * Copyright 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the",
                "+ * LICENSE file in the root directory of this source tree.",
                "+ */",
                "+",
                "+package com.facebook.buck.demo;",
                "+",
                "+public class Hello {",
                "+  public Hello() {",
                "+    System.loadLibrary(\"jni\");",
                "+  }",
                "+",
                "+  public native String getHelloString();",
                "+}",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/keystores/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/keystores/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..6f36a1fda7",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/keystores/BUCK.fixture",
                "@@ -0,0 +1,16 @@",
                "+# Copyright 2015-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+# Generated by following the instructions at",
                "+# http://developer.android.com/tools/publishing/app-signing.html#signing-manually",
                "+keystore(",
                "+    name = \"debug\",",
                "+    properties = \"debug.keystore.properties\",",
                "+    store = \"debug.keystore\",",
                "+    visibility = [",
                "+        \"PUBLIC\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/keystores/debug.keystore b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/keystores/debug.keystore",
                "new file mode 100644",
                "index 0000000000..cadae7ffef",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/keystores/debug.keystore differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/keystores/debug.keystore.properties b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/keystores/debug.keystore.properties",
                "new file mode 100644",
                "index 0000000000..239cbbe01c",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/keystores/debug.keystore.properties",
                "@@ -0,0 +1,3 @@",
                "+key.alias=debug",
                "+key.store.password=buckbuildtool",
                "+key.alias.password=buckbuildtool",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/manifest/AndroidManifest.xml b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/manifest/AndroidManifest.xml",
                "new file mode 100644",
                "index 0000000000..03ad7155d6",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/manifest/AndroidManifest.xml",
                "@@ -0,0 +1,18 @@",
                "+<?xml version='1.0' encoding='utf-8'?>",
                "+<manifest xmlns:android='http://schemas.android.com/apk/res/android'",
                "+          package='com.facebook.buck.demo'",
                "+          >",
                "+",
                "+  <application",
                "+      android:icon='@drawable/buck'",
                "+      android:label='@string/app_name'",
                "+      android:hardwareAccelerated='true'>",
                "+    <activity android:name='.App'>",
                "+      <intent-filter>",
                "+        <action android:name='android.intent.action.MAIN' />",
                "+        <category android:name='android.intent.category.LAUNCHER' />",
                "+      </intent-filter>",
                "+    </activity>",
                "+  </application>",
                "+",
                "+</manifest>",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/manifest/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/manifest/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..ce557c1f28",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/manifest/BUCK.fixture",
                "@@ -0,0 +1,28 @@",
                "+# Copyright 2018-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+genrule(",
                "+    name = \"catted_manifest\",",
                "+    srcs = [",
                "+        \"AndroidManifest.xml\",",
                "+    ],",
                "+    out = \"CattedManifest.xml\",",
                "+    bash = \"cat $SRCS > $OUT\",",
                "+    cmd_exe = \"type $SRCS > $OUT\",",
                "+)",
                "+",
                "+python_binary(",
                "+    name = \"py_cat\",",
                "+    main = \"py_cat.py\",",
                "+)",
                "+",
                "+genrule(",
                "+    name = \"generated_manifest\",",
                "+    out = \"GeneratedManifest.xml\",",
                "+    bash = \"$(exe :py_cat) $(location :catted_manifest) > $OUT\",",
                "+    cmd_exe = \"$(exe :py_cat) $(location :catted_manifest) > $OUT\",",
                "+    visibility = [\"PUBLIC\"],",
                "+)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/manifest/py_cat.py b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/manifest/py_cat.py",
                "new file mode 100644",
                "index 0000000000..8296377f63",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/manifest/py_cat.py",
                "@@ -0,0 +1,21 @@",
                "+# Copyright 2018-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+import argparse",
                "+",
                "+",
                "+def parse_file_name():",
                "+    parser = argparse.ArgumentParser(description=\"Outputs given file.\")",
                "+    parser.add_argument(\"file_name\", type=str, help=\"Name of file to output\")",
                "+    return parser.parse_args().file_name",
                "+",
                "+",
                "+def output_file(file_name):",
                "+    with open(file_name, mode='r') as f:",
                "+        print(f.read())",
                "+",
                "+if __name__ == \"__main__\":",
                "+    output_file(parse_file_name())",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..dce1a8b0b2",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/BUCK.fixture",
                "@@ -0,0 +1,14 @@",
                "+# Copyright 2015-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+android_resource(",
                "+    name = \"res\",",
                "+    package = \"com.facebook.buck.demo\",",
                "+    res = \"res\",",
                "+    visibility = [",
                "+        \"//android/java/com/facebook/buck/demo:lib\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/res/drawable-xxhdpi/buck.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/res/drawable-xxhdpi/buck.png",
                "new file mode 100644",
                "index 0000000000..69ae2b1baa",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/res/drawable-xxhdpi/buck.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/res/layout/hello.xml b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/res/layout/hello.xml",
                "new file mode 100644",
                "index 0000000000..119f95eb54",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/res/layout/hello.xml",
                "@@ -0,0 +1,13 @@",
                "+<?xml version=\"1.0\" encoding=\"utf-8\"?>",
                "+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"",
                "+              android:layout_width=\"match_parent\"",
                "+              android:layout_height=\"match_parent\"",
                "+              android:orientation=\"vertical\" >",
                "+    <TextView android:id=\"@+id/hello_text\"",
                "+              android:layout_width=\"wrap_content\"",
                "+              android:layout_height=\"wrap_content\" />",
                "+    <ImageView android:layout_width=\"match_parent\"",
                "+               android:layout_height=\"wrap_content\"",
                "+               android:scaleType=\"fitCenter\"",
                "+               android:src=\"@drawable/buck\"/>",
                "+</LinearLayout>",
                "\\ No newline at end of file",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/res/values/strings.xml b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/res/values/strings.xml",
                "new file mode 100644",
                "index 0000000000..a40f5a65c5",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/res/values/strings.xml",
                "@@ -0,0 +1,4 @@",
                "+<?xml version='1.0' encoding='utf-8' ?>",
                "+<resources>",
                "+  <string name='app_name'>Buck Demo App</string>",
                "+</resources>",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..8e3b2abb3c",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/BUCK.fixture",
                "@@ -0,0 +1,14 @@",
                "+# Copyright 2015-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+cxx_library(",
                "+    name = \"hello\",",
                "+    srcs = glob([\"*.c\"]),",
                "+    exported_headers = [\"hello.h\"],",
                "+    visibility = [",
                "+        \"PUBLIC\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/hello.c b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/hello.c",
                "new file mode 100644",
                "index 0000000000..24681b311b",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/hello.c",
                "@@ -0,0 +1,11 @@",
                "+/*",
                "+ * Copyright 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the",
                "+ * LICENSE file in the root directory of this source tree.",
                "+ */",
                "+",
                "+const char *helloString() {",
                "+  return \"E2E Test\";",
                "+}",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/hello.h b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/hello.h",
                "new file mode 100644",
                "index 0000000000..1adffd7806",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/hello.h",
                "@@ -0,0 +1,17 @@",
                "+/*",
                "+ * Copyright 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the",
                "+ * LICENSE file in the root directory of this source tree.",
                "+ */",
                "+",
                "+#ifdef __cplusplus",
                "+extern \"C\" {",
                "+#endif",
                "+",
                "+const char *helloString();",
                "+",
                "+#ifdef __cplusplus",
                "+} // extern \"C\"",
                "+#endif",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppDelegate.h b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppDelegate.h",
                "new file mode 100644",
                "index 0000000000..5d136a4b85",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppDelegate.h",
                "@@ -0,0 +1,15 @@",
                "+/*",
                "+ * Copyright 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the",
                "+ * LICENSE file in the root directory of this source tree.",
                "+ */",
                "+",
                "+#import <UIKit/UIKit.h>",
                "+",
                "+@interface AppDelegate : UIResponder <UIApplicationDelegate>",
                "+",
                "+@property (nonatomic, copy) NSString *helloString;",
                "+",
                "+@end",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppDelegate.m b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppDelegate.m",
                "new file mode 100644",
                "index 0000000000..2104d8617a",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppDelegate.m",
                "@@ -0,0 +1,57 @@",
                "+/*",
                "+ * Copyright 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the",
                "+ * LICENSE file in the root directory of this source tree.",
                "+ */",
                "+",
                "+#import \"AppDelegate.h\"",
                "+#import \"AppViewController.h\"",
                "+",
                "+#import \"common/hello.h\"",
                "+",
                "+@interface AppDelegate ()",
                "+",
                "+@end",
                "+",
                "+@implementation AppDelegate",
                "+",
                "+@synthesize window;",
                "+",
                "+- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {",
                "+    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];",
                "+    self.helloString = [NSString stringWithUTF8String:helloString()];",
                "+",
                "+    UIViewController *viewController = [[AppViewController alloc] initWithHelloString:_helloString];",
                "+",
                "+    self.window.rootViewController = viewController;",
                "+    [self.window makeKeyAndVisible];",
                "+",
                "+    // Override point for customization after application launch.",
                "+    return YES;",
                "+}",
                "+",
                "+- (void)applicationWillResignActive:(UIApplication *)application {",
                "+    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.",
                "+    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.",
                "+}",
                "+",
                "+- (void)applicationDidEnterBackground:(UIApplication *)application {",
                "+    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.",
                "+    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.",
                "+}",
                "+",
                "+- (void)applicationWillEnterForeground:(UIApplication *)application {",
                "+    // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.",
                "+}",
                "+",
                "+- (void)applicationDidBecomeActive:(UIApplication *)application {",
                "+    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.",
                "+}",
                "+",
                "+- (void)applicationWillTerminate:(UIApplication *)application {",
                "+    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.",
                "+}",
                "+",
                "+@end",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppViewController.h b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppViewController.h",
                "new file mode 100644",
                "index 0000000000..dbe49dec3d",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppViewController.h",
                "@@ -0,0 +1,15 @@",
                "+/*",
                "+ * Copyright 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the",
                "+ * LICENSE file in the root directory of this source tree.",
                "+ */",
                "+",
                "+#import <UIKit/UIKit.h>",
                "+",
                "+@interface AppViewController : UIViewController",
                "+",
                "+- (instancetype)initWithHelloString:(NSString *)helloString NS_DESIGNATED_INITIALIZER;",
                "+",
                "+@end",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppViewController.m b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppViewController.m",
                "new file mode 100644",
                "index 0000000000..1be6c44167",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppViewController.m",
                "@@ -0,0 +1,43 @@",
                "+/*",
                "+ * Copyright 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the",
                "+ * LICENSE file in the root directory of this source tree.",
                "+ */",
                "+",
                "+#import \"AppViewController.h\"",
                "+",
                "+@interface AppViewController ()",
                "+",
                "+@end",
                "+",
                "+@implementation AppViewController {",
                "+    UILabel *_label;",
                "+    NSString *_helloString;",
                "+}",
                "+",
                "+- (instancetype) initWithHelloString:(NSString *)helloString {",
                "+    if ((self = [super initWithNibName:nil bundle:nil])) {",
                "+        _helloString = helloString;",
                "+    }",
                "+    return self;",
                "+}",
                "+",
                "+- (void) viewDidLoad {",
                "+    self.view.backgroundColor = [UIColor whiteColor];",
                "+    _label = [[UILabel alloc] initWithFrame:CGRectMake(0.0f, 0.0f, self.view.bounds.size.width, 80.0f)];",
                "+    _label.text = _helloString;",
                "+    _label.textAlignment = NSTextAlignmentCenter;",
                "+    _label.font = [UIFont boldSystemFontOfSize:32.0f];",
                "+    _label.adjustsFontSizeToFitWidth = YES;",
                "+    _label.backgroundColor = [UIColor clearColor];",
                "+    [self.view addSubview:_label];",
                "+}",
                "+",
                "+- (void) viewDidLayoutSubviews {",
                "+    [super viewDidLayoutSubviews];",
                "+    _label.center = CGPointMake(self.view.frame.size.width * 0.5f, self.view.frame.size.height * 0.5f);",
                "+}",
                "+",
                "+@end",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..4098242d29",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture",
                "@@ -0,0 +1,45 @@",
                "+# Copyright 2015-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+apple_resource(",
                "+    name = \"BuckDemoAppResources\",",
                "+    dirs = [],",
                "+    files = glob([\"*.png\"]),",
                "+)",
                "+",
                "+apple_bundle(",
                "+    name = \"BuckDemoApp\",",
                "+    binary = \":BuckDemoAppBinary\",",
                "+    extension = \"app\",",
                "+    info_plist = \"Info.plist\",",
                "+)",
                "+",
                "+apple_binary(",
                "+    name = \"BuckDemoAppBinary\",",
                "+    srcs = glob([",
                "+        \"*.m\",",
                "+    ]),",
                "+    frameworks = [",
                "+        \"$SDKROOT/System/Library/Frameworks/Foundation.framework\",",
                "+        \"$SDKROOT/System/Library/Frameworks/UIKit.framework\",",
                "+    ],",
                "+    headers = glob([",
                "+        \"*.h\",",
                "+    ]),",
                "+    preprocessor_flags = [",
                "+        \"-fobjc-arc\",",
                "+        \"-Wno-objc-designated-initializers\",",
                "+    ],",
                "+    deps = [",
                "+        \":BuckDemoAppResources\",",
                "+        \"//common:hello\",",
                "+    ],",
                "+)",
                "+",
                "+apple_package(",
                "+    name = \"BuckDemoAppPackage\",",
                "+    bundle = \":BuckDemoApp\",",
                "+)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Default-568h.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Default-568h.png",
                "new file mode 100644",
                "index 0000000000..f2480f3916",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Default-568h.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Default-667h.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Default-667h.png",
                "new file mode 100644",
                "index 0000000000..8edbf443fd",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Default-667h.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Default-736h.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Default-736h.png",
                "new file mode 100644",
                "index 0000000000..d318d1d4cb",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Default-736h.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-60.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-60.png",
                "new file mode 100644",
                "index 0000000000..75cef1fbc7",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-60.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72.png",
                "new file mode 100644",
                "index 0000000000..1aa3797614",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72@2x.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72@2x.png",
                "new file mode 100644",
                "index 0000000000..e56b3d557a",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72@2x.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50.png",
                "new file mode 100644",
                "index 0000000000..230a1c882f",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50@2x.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50@2x.png",
                "new file mode 100644",
                "index 0000000000..e4a6f25054",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50@2x.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon.png",
                "new file mode 100644",
                "index 0000000000..7e40369c44",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon@2x.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon@2x.png",
                "new file mode 100644",
                "index 0000000000..e1683c8dcf",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon@2x.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Info.plist b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Info.plist",
                "new file mode 100644",
                "index 0000000000..1f8ab00dd3",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Info.plist",
                "@@ -0,0 +1,89 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">",
                "+<plist version=\"1.0\">",
                "+<dict>",
                "+\t<key>CFBundleDevelopmentRegion</key>",
                "+\t<string>en</string>",
                "+  <key>CFBundleDisplayName</key>",
                "+  <string>Hello Buck!</string>",
                "+\t<key>CFBundleExecutable</key>",
                "+\t<string>BuckDemoApp</string>",
                "+  <key>CFBundleIconFiles</key>",
                "+  <array>",
                "+          <string>Icon.png</string>",
                "+          <string>Icon@2x.png</string>",
                "+          <string>Icon-72.png</string>",
                "+          <string>Icon-72@2x.png</string>",
                "+          <string>Icon-Small-50.png</string>",
                "+          <string>Icon-Small-50@2x.png</string>",
                "+  </array>",
                "+\t<key>CFBundleIdentifier</key>",
                "+\t<string>com.facebook.BuckDemoApp</string>",
                "+\t<key>CFBundleInfoDictionaryVersion</key>",
                "+\t<string>6.0</string>",
                "+\t<key>CFBundleName</key>",
                "+\t<string>BuckDemoApp</string>",
                "+\t<key>CFBundlePackageType</key>",
                "+\t<string>APPL</string>",
                "+\t<key>CFBundleShortVersionString</key>",
                "+\t<string>1.0</string>",
                "+\t<key>CFBundleSignature</key>",
                "+\t<string>????</string>",
                "+\t<key>CFBundleVersion</key>",
                "+\t<string>1</string>",
                "+\t<key>LSRequiresIPhoneOS</key>",
                "+\t<true/>",
                "+        <key>UILaunchImages</key>",
                "+        <array>",
                "+                <dict>",
                "+                        <key>UILaunchImageMinimumOSVersion</key>",
                "+                        <string>8.0</string>",
                "+                        <key>UILaunchImageName</key>",
                "+                        <string>Default-568h</string>",
                "+                        <key>UILaunchImageOrientation</key>",
                "+                        <string>Portrait</string>",
                "+                        <key>UILaunchImageSize</key>",
                "+                        <string>{320, 568}</string>",
                "+                </dict>",
                "+                <dict>",
                "+                        <key>UILaunchImageMinimumOSVersion</key>",
                "+                        <string>8.0</string>",
                "+                        <key>UILaunchImageName</key>",
                "+                        <string>Default-667h</string>",
                "+                        <key>UILaunchImageOrientation</key>",
                "+                        <string>Portrait</string>",
                "+                        <key>UILaunchImageSize</key>",
                "+                        <string>{375, 667}</string>",
                "+                </dict>",
                "+                <dict>",
                "+                        <key>UILaunchImageMinimumOSVersion</key>",
                "+                        <string>8.0</string>",
                "+                        <key>UILaunchImageName</key>",
                "+                        <string>Default-736h</string>",
                "+                        <key>UILaunchImageOrientation</key>",
                "+                        <string>Portrait</string>",
                "+                        <key>UILaunchImageSize</key>",
                "+                        <string>{414, 736}</string>",
                "+                </dict>",
                "+        </array>",
                "+        <key>UIPrerenderedIcon</key>",
                "+        <true/>",
                "+\t<key>UIRequiredDeviceCapabilities</key>",
                "+\t<array>",
                "+\t\t<string>armv7</string>",
                "+\t</array>",
                "+\t<key>UISupportedInterfaceOrientations</key>",
                "+\t<array>",
                "+\t\t<string>UIInterfaceOrientationPortrait</string>",
                "+\t\t<string>UIInterfaceOrientationLandscapeLeft</string>",
                "+\t\t<string>UIInterfaceOrientationLandscapeRight</string>",
                "+\t</array>",
                "+\t<key>UISupportedInterfaceOrientations~ipad</key>",
                "+\t<array>",
                "+\t\t<string>UIInterfaceOrientationPortrait</string>",
                "+\t\t<string>UIInterfaceOrientationPortraitUpsideDown</string>",
                "+\t\t<string>UIInterfaceOrientationLandscapeLeft</string>",
                "+\t\t<string>UIInterfaceOrientationLandscapeRight</string>",
                "+\t</array>",
                "+</dict>",
                "+</plist>",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/iTunesArtwork.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/iTunesArtwork.png",
                "new file mode 100644",
                "index 0000000000..838f871687",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/iTunesArtwork.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/iTunesArtwork@2x.png b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/iTunesArtwork@2x.png",
                "new file mode 100644",
                "index 0000000000..71aaea7482",
                "Binary files /dev/null and b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/iTunesArtwork@2x.png differ",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/main.m b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/main.m",
                "new file mode 100644",
                "index 0000000000..7497f07b5f",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/main.m",
                "@@ -0,0 +1,16 @@",
                "+/*",
                "+ * Copyright 2015-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the",
                "+ * LICENSE file in the root directory of this source tree.",
                "+ */",
                "+",
                "+#import <UIKit/UIKit.h>",
                "+#import \"AppDelegate.h\"",
                "+",
                "+int main(int argc, char * argv[]) {",
                "+    @autoreleasepool {",
                "+        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/.buckconfig",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/cxx/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/cxx/Hello.cpp",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/App.java",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/java/com/facebook/buck/demo/Hello.java",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/keystores/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/keystores/debug.keystore",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/keystores/debug.keystore.properties",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/manifest/AndroidManifest.xml",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/manifest/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/manifest/py_cat.py",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/res/drawable-xxhdpi/buck.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/res/layout/hello.xml",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/resources/res/values/strings.xml",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/hello.c",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/common/hello.h",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppDelegate.h",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppDelegate.m",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppViewController.h",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppViewController.m",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Default-568h.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Default-667h.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Default-736h.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-60.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-72@2x.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon-Small-50@2x.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Icon@2x.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/Info.plist",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/iTunesArtwork.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/iTunesArtwork@2x.png",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/main.m"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "0c3dc52e60f4e2b0cb956840a0af09807a078625",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521754553,
            "hunks": 42,
            "message": "ocaml: merge `OCamlBuckConfig` into `OcamlPlatform` Summary: Move all settings in `OCamlBuckConfig` to `OcamlPlatform` so that they can apply to a particular flavor of OCaml build in upcoming multi-platform support. Test Plan: CI Reviewed By: styurin fbshipit-source-id: 8391644",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java b/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "index 9e88539531..b0e106ebc6 100644",
                "--- a/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "+++ b/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "@@ -367,12 +367,11 @@ abstract class AbstractOcamlBuildContext implements AddsToRuleKey {",
                "-  public static OcamlBuildContext.Builder builder(",
                "-      OcamlPlatform ocamlPlatform, OcamlBuckConfig config) {",
                "+  public static OcamlBuildContext.Builder builder(OcamlPlatform ocamlPlatform) {",
                "     return OcamlBuildContext.builder()",
                "-        .setOcamlDepTool(config.getOcamlDepTool())",
                "-        .setOcamlCompiler(config.getOcamlCompiler())",
                "-        .setOcamlDebug(config.getOcamlDebug())",
                "-        .setYaccCompiler(config.getYaccCompiler())",
                "-        .setLexCompiler(config.getLexCompiler())",
                "-        .setOcamlBytecodeCompiler(config.getOcamlBytecodeCompiler())",
                "-        .setOcamlInteropIncludesDir(config.getOcamlInteropIncludesDir())",
                "+        .setOcamlDepTool(ocamlPlatform.getOcamlDepTool())",
                "+        .setOcamlCompiler(ocamlPlatform.getOcamlCompiler())",
                "+        .setOcamlDebug(ocamlPlatform.getOcamlDebug())",
                "+        .setYaccCompiler(ocamlPlatform.getYaccCompiler())",
                "+        .setLexCompiler(ocamlPlatform.getLexCompiler())",
                "+        .setOcamlBytecodeCompiler(ocamlPlatform.getOcamlBytecodeCompiler())",
                "+        .setOcamlInteropIncludesDir(ocamlPlatform.getOcamlInteropIncludesDir())",
                "         .setCFlags(ocamlPlatform.getCFlags())",
                "diff --git a/src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java b/src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java",
                "index 1e21d5b08d..90bb9028e4 100644",
                "--- a/src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java",
                "+++ b/src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java",
                "@@ -20,2 +20,3 @@ import com.facebook.buck.cxx.toolchain.CompilerProvider;",
                " import com.facebook.buck.cxx.toolchain.PreprocessorProvider;",
                "+import com.facebook.buck.rules.Tool;",
                " import com.facebook.buck.toolchain.Toolchain;",
                "@@ -23,2 +24,3 @@ import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                " import com.google.common.collect.ImmutableList;",
                "+import java.util.Optional;",
                " import org.immutables.value.Value;",
                "@@ -30,2 +32,18 @@ interface AbstractOcamlPlatform extends Toolchain {",
                "+  Optional<Tool> getOcamlCompiler();",
                "+",
                "+  Optional<Tool> getOcamlDepTool();",
                "+",
                "+  Optional<Tool> getYaccCompiler();",
                "+",
                "+  Optional<Tool> getLexCompiler();",
                "+",
                "+  Optional<String> getOcamlInteropIncludesDir();",
                "+",
                "+  Optional<String> getWarningsFlags();",
                "+",
                "+  Optional<Tool> getOcamlBytecodeCompiler();",
                "+",
                "+  Optional<Tool> getOcamlDebug();",
                "+",
                "   CompilerProvider getCCompiler();",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "index cf63f1337e..2899ba04cf 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "@@ -47,12 +47,5 @@ public class OcamlBinaryDescription",
                "   private final ToolchainProvider toolchainProvider;",
                "-  private final OcamlBuckConfig ocamlBuckConfig;",
                "-  public OcamlBinaryDescription(",
                "-      ToolchainProvider toolchainProvider, OcamlBuckConfig ocamlBuckConfig) {",
                "+  public OcamlBinaryDescription(ToolchainProvider toolchainProvider) {",
                "     this.toolchainProvider = toolchainProvider;",
                "-    this.ocamlBuckConfig = ocamlBuckConfig;",
                "-  }",
                "-",
                "-  public OcamlBuckConfig getOcamlBuckConfig() {",
                "-    return ocamlBuckConfig;",
                "   }",
                "@@ -71,2 +64,6 @@ public class OcamlBinaryDescription",
                "+    OcamlToolchain ocamlToolchain =",
                "+        toolchainProvider.getByName(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.class);",
                "+    OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();",
                "+",
                "     ImmutableList<OcamlSource> srcs = args.getSrcs();",
                "@@ -79,3 +76,3 @@ public class OcamlBinaryDescription",
                "             args.getCompilerFlags()));",
                "-    if (ocamlBuckConfig.getWarningsFlags().isPresent() || args.getWarningsFlags().isPresent()) {",
                "+    if (ocamlPlatform.getWarningsFlags().isPresent() || args.getWarningsFlags().isPresent()) {",
                "       flags.addAll(StringArg.from(\"-w\"));",
                "@@ -83,3 +80,3 @@ public class OcamlBinaryDescription",
                "           StringArg.from(",
                "-              ocamlBuckConfig.getWarningsFlags().orElse(\"\") + args.getWarningsFlags().orElse(\"\")));",
                "+              ocamlPlatform.getWarningsFlags().orElse(\"\") + args.getWarningsFlags().orElse(\"\")));",
                "     }",
                "@@ -89,3 +86,3 @@ public class OcamlBinaryDescription",
                "         toolchainProvider,",
                "-        ocamlBuckConfig,",
                "+        ocamlPlatform,",
                "         buildTarget,",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlBuckConfig.java b/src/com/facebook/buck/ocaml/OcamlBuckConfig.java",
                "deleted file mode 100644",
                "index db6f4dc839..0000000000",
                "--- a/src/com/facebook/buck/ocaml/OcamlBuckConfig.java",
                "+++ /dev/null",
                "@@ -1,86 +0,0 @@",
                "-/*",
                "- * Copyright 2014-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-package com.facebook.buck.ocaml;",
                "-",
                "-import com.facebook.buck.config.BuckConfig;",
                "-import com.facebook.buck.io.ExecutableFinder;",
                "-import com.facebook.buck.rules.HashedFileTool;",
                "-import com.facebook.buck.rules.Tool;",
                "-import java.nio.file.Path;",
                "-import java.nio.file.Paths;",
                "-import java.util.Optional;",
                "-",
                "-public class OcamlBuckConfig {",
                "-",
                "-  private static final String SECTION = \"ocaml\";",
                "-",
                "-  private static final Path DEFAULT_OCAML_COMPILER = Paths.get(\"ocamlopt.opt\");",
                "-  private static final Path DEFAULT_OCAML_BYTECODE_COMPILER = Paths.get(\"ocamlc.opt\");",
                "-  private static final Path DEFAULT_OCAML_DEP_TOOL = Paths.get(\"ocamldep.opt\");",
                "-  private static final Path DEFAULT_OCAML_YACC_COMPILER = Paths.get(\"ocamlyacc\");",
                "-  private static final Path DEFAULT_OCAML_DEBUG = Paths.get(\"ocamldebug\");",
                "-  private static final Path DEFAULT_OCAML_LEX_COMPILER = Paths.get(\"ocamllex.opt\");",
                "-",
                "-  private final BuckConfig delegate;",
                "-",
                "-  public OcamlBuckConfig(BuckConfig delegate) {",
                "-    this.delegate = delegate;",
                "-  }",
                "-",
                "-  public Optional<Tool> getOcamlCompiler() {",
                "-    return getTool(SECTION, \"ocaml.compiler\", DEFAULT_OCAML_COMPILER);",
                "-  }",
                "-",
                "-  public Optional<Tool> getOcamlDepTool() {",
                "-    return getTool(SECTION, \"dep.tool\", DEFAULT_OCAML_DEP_TOOL);",
                "-  }",
                "-",
                "-  public Optional<Tool> getYaccCompiler() {",
                "-    return getTool(SECTION, \"yacc.compiler\", DEFAULT_OCAML_YACC_COMPILER);",
                "-  }",
                "-",
                "-  public Optional<Tool> getLexCompiler() {",
                "-    return getTool(SECTION, \"lex.compiler\", DEFAULT_OCAML_LEX_COMPILER);",
                "-  }",
                "-",
                "-  public Optional<String> getOcamlInteropIncludesDir() {",
                "-    return delegate.getValue(SECTION, \"interop.includes\");",
                "-  }",
                "-",
                "-  public Optional<String> getWarningsFlags() {",
                "-    return delegate.getValue(SECTION, \"warnings_flags\");",
                "-  }",
                "-",
                "-  public Optional<Tool> getOcamlBytecodeCompiler() {",
                "-    return getTool(SECTION, \"ocaml.bytecode.compiler\", DEFAULT_OCAML_BYTECODE_COMPILER);",
                "-  }",
                "-",
                "-  public Optional<Tool> getOcamlDebug() {",
                "-    return getTool(SECTION, \"debug\", DEFAULT_OCAML_DEBUG);",
                "-  }",
                "-",
                "-  private Optional<Path> getExecutable(String section, String label, Path defaultValue) {",
                "-    return new ExecutableFinder()",
                "-        .getOptionalExecutable(",
                "-            delegate.getPath(section, label).orElse(defaultValue), delegate.getEnvironment());",
                "-  }",
                "-",
                "-  private Optional<Tool> getTool(String section, String label, Path defaultValue) {",
                "-    Optional<Path> executable = getExecutable(section, label, defaultValue);",
                "-    return executable.map(path -> new HashedFileTool(() -> delegate.getPathSourcePath(path)));",
                "-  }",
                "-}",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlDescriptionsProvider.java b/src/com/facebook/buck/ocaml/OcamlDescriptionsProvider.java",
                "index 0275232baa..ff38a28689 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlDescriptionsProvider.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlDescriptionsProvider.java",
                "@@ -18,3 +18,2 @@ package com.facebook.buck.ocaml;",
                "-import com.facebook.buck.config.BuckConfig;",
                " import com.facebook.buck.rules.Description;",
                "@@ -33,8 +32,5 @@ public class OcamlDescriptionsProvider implements DescriptionProvider {",
                "     ToolchainProvider toolchainProvider = context.getToolchainProvider();",
                "-    BuckConfig config = context.getBuckConfig();",
                "-    OcamlBuckConfig ocamlBuckConfig = new OcamlBuckConfig(config);",
                "-",
                "     return Arrays.asList(",
                "-        new OcamlBinaryDescription(toolchainProvider, ocamlBuckConfig),",
                "-        new OcamlLibraryDescription(toolchainProvider, ocamlBuckConfig),",
                "+        new OcamlBinaryDescription(toolchainProvider),",
                "+        new OcamlLibraryDescription(toolchainProvider),",
                "         new PrebuiltOcamlLibraryDescription());",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "index df01a6e728..2d103a58f5 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "@@ -48,12 +48,5 @@ public class OcamlLibraryDescription",
                "   private final ToolchainProvider toolchainProvider;",
                "-  private final OcamlBuckConfig ocamlBuckConfig;",
                "-  public OcamlLibraryDescription(",
                "-      ToolchainProvider toolchainProvider, OcamlBuckConfig ocamlBuckConfig) {",
                "+  public OcamlLibraryDescription(ToolchainProvider toolchainProvider) {",
                "     this.toolchainProvider = toolchainProvider;",
                "-    this.ocamlBuckConfig = ocamlBuckConfig;",
                "-  }",
                "-",
                "-  public OcamlBuckConfig getOcamlBuckConfig() {",
                "-    return ocamlBuckConfig;",
                "   }",
                "@@ -72,2 +65,6 @@ public class OcamlLibraryDescription",
                "+    OcamlToolchain ocamlToolchain =",
                "+        toolchainProvider.getByName(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.class);",
                "+    OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();",
                "+",
                "     ImmutableList<OcamlSource> srcs = args.getSrcs();",
                "@@ -80,3 +77,3 @@ public class OcamlLibraryDescription",
                "             args.getCompilerFlags()));",
                "-    if (ocamlBuckConfig.getWarningsFlags().isPresent() || args.getWarningsFlags().isPresent()) {",
                "+    if (ocamlPlatform.getWarningsFlags().isPresent() || args.getWarningsFlags().isPresent()) {",
                "       flags.addAll(",
                "@@ -84,3 +81,3 @@ public class OcamlLibraryDescription",
                "               \"-w\",",
                "-              ocamlBuckConfig.getWarningsFlags().orElse(\"\") + args.getWarningsFlags().orElse(\"\")));",
                "+              ocamlPlatform.getWarningsFlags().orElse(\"\") + args.getWarningsFlags().orElse(\"\")));",
                "     }",
                "@@ -93,3 +90,3 @@ public class OcamlLibraryDescription",
                "         toolchainProvider,",
                "-        ocamlBuckConfig,",
                "+        ocamlPlatform,",
                "         buildTarget,",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "index 5790e14178..183631f3a7 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "@@ -106,3 +106,3 @@ public class OcamlRuleBuilder {",
                "       ToolchainProvider toolchainProvider,",
                "-      OcamlBuckConfig ocamlBuckConfig,",
                "+      OcamlPlatform ocamlPlatform,",
                "       BuildTarget buildTarget,",
                "@@ -134,3 +134,3 @@ public class OcamlRuleBuilder {",
                "           toolchainProvider,",
                "-          ocamlBuckConfig,",
                "+          ocamlPlatform,",
                "           buildTarget,",
                "@@ -149,3 +149,3 @@ public class OcamlRuleBuilder {",
                "           toolchainProvider,",
                "-          ocamlBuckConfig,",
                "+          ocamlPlatform,",
                "           buildTarget,",
                "@@ -205,3 +205,3 @@ public class OcamlRuleBuilder {",
                "       ToolchainProvider toolchainProvider,",
                "-      OcamlBuckConfig ocamlBuckConfig,",
                "+      OcamlPlatform ocamlPlatform,",
                "       BuildTarget buildTarget,",
                "@@ -227,5 +227,2 @@ public class OcamlRuleBuilder {",
                "                     .filter(CxxPreprocessorDep.class::isInstance)));",
                "-    OcamlToolchain ocamlToolchain =",
                "-        toolchainProvider.getByName(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.class);",
                "-    OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();",
                "@@ -301,3 +298,3 @@ public class OcamlRuleBuilder {",
                "     OcamlBuildContext ocamlContext =",
                "-        OcamlBuildContext.builder(ocamlPlatform, ocamlBuckConfig)",
                "+        OcamlBuildContext.builder(ocamlPlatform)",
                "             .setProjectFilesystem(projectFilesystem)",
                "@@ -373,3 +370,3 @@ public class OcamlRuleBuilder {",
                "       ToolchainProvider toolchainProvider,",
                "-      OcamlBuckConfig ocamlBuckConfig,",
                "+      OcamlPlatform ocamlPlatform,",
                "       BuildTarget buildTarget,",
                "@@ -389,5 +386,2 @@ public class OcamlRuleBuilder {",
                "             .getDefaultCxxPlatform();",
                "-    OcamlToolchain ocamlToolchain =",
                "-        toolchainProvider.getByName(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.class);",
                "-    OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();",
                "@@ -468,3 +462,3 @@ public class OcamlRuleBuilder {",
                "     OcamlBuildContext ocamlContext =",
                "-        OcamlBuildContext.builder(ocamlPlatform, ocamlBuckConfig)",
                "+        OcamlBuildContext.builder(ocamlPlatform)",
                "             .setProjectFilesystem(projectFilesystem)",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java b/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java",
                "index fd6477a4b6..e4f6cd94e3 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java",
                "@@ -20,2 +20,4 @@ import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "+import com.facebook.buck.rules.HashedFileTool;",
                "+import com.facebook.buck.rules.Tool;",
                " import com.facebook.buck.toolchain.ToolchainCreationContext;",
                "@@ -24,3 +26,6 @@ import com.facebook.buck.toolchain.ToolchainProvider;",
                " import com.google.common.collect.ImmutableList;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                " import java.util.Optional;",
                "+import java.util.function.BiFunction;",
                "@@ -28,2 +33,11 @@ public class OcamlToolchainFactory implements ToolchainFactory<OcamlToolchain> {",
                "+  private static final String SECTION = \"ocaml\";",
                "+",
                "+  private static final Path DEFAULT_OCAML_COMPILER = Paths.get(\"ocamlopt.opt\");",
                "+  private static final Path DEFAULT_OCAML_BYTECODE_COMPILER = Paths.get(\"ocamlc.opt\");",
                "+  private static final Path DEFAULT_OCAML_DEP_TOOL = Paths.get(\"ocamldep.opt\");",
                "+  private static final Path DEFAULT_OCAML_YACC_COMPILER = Paths.get(\"ocamlyacc\");",
                "+  private static final Path DEFAULT_OCAML_DEBUG = Paths.get(\"ocamldebug\");",
                "+  private static final Path DEFAULT_OCAML_LEX_COMPILER = Paths.get(\"ocamllex.opt\");",
                "+",
                "   @Override",
                "@@ -31,2 +45,12 @@ public class OcamlToolchainFactory implements ToolchainFactory<OcamlToolchain> {",
                "       ToolchainProvider toolchainProvider, ToolchainCreationContext context) {",
                "+    BiFunction<String, Path, Optional<Tool>> getTool =",
                "+        (field, defaultValue) ->",
                "+            context",
                "+                .getExecutableFinder()",
                "+                .getOptionalExecutable(",
                "+                    context.getBuckConfig().getPath(SECTION, field).orElse(defaultValue),",
                "+                    context.getBuckConfig().getEnvironment())",
                "+                .map(",
                "+                    path ->",
                "+                        new HashedFileTool(() -> context.getBuckConfig().getPathSourcePath(path)));",
                "     CxxPlatform cxxPlatform =",
                "@@ -38,2 +62,12 @@ public class OcamlToolchainFactory implements ToolchainFactory<OcamlToolchain> {",
                "             OcamlPlatform.builder()",
                "+                .setOcamlCompiler(getTool.apply(\"ocaml.compiler\", DEFAULT_OCAML_COMPILER))",
                "+                .setOcamlDepTool(getTool.apply(\"dep.tool\", DEFAULT_OCAML_DEP_TOOL))",
                "+                .setYaccCompiler(getTool.apply(\"yacc.compiler\", DEFAULT_OCAML_YACC_COMPILER))",
                "+                .setLexCompiler(getTool.apply(\"lex.compiler\", DEFAULT_OCAML_LEX_COMPILER))",
                "+                .setOcamlInteropIncludesDir(",
                "+                    context.getBuckConfig().getValue(SECTION, \"interop.includes\"))",
                "+                .setWarningsFlags(context.getBuckConfig().getValue(SECTION, \"warnings_flags\"))",
                "+                .setOcamlBytecodeCompiler(",
                "+                    getTool.apply(\"ocaml.bytecode.compiler\", DEFAULT_OCAML_BYTECODE_COMPILER))",
                "+                .setOcamlDebug(getTool.apply(\"debug\", DEFAULT_OCAML_DEBUG))",
                "                 .setCCompiler(cxxPlatform.getCc())",
                "diff --git a/test/com/facebook/buck/ocaml/OCamlIntegrationTest.java b/test/com/facebook/buck/ocaml/OCamlIntegrationTest.java",
                "index 8701293fac..b6408a023d 100644",
                "--- a/test/com/facebook/buck/ocaml/OCamlIntegrationTest.java",
                "+++ b/test/com/facebook/buck/ocaml/OCamlIntegrationTest.java",
                "@@ -34,2 +34,3 @@ import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                " import com.facebook.buck.cxx.toolchain.HeaderVisibility;",
                "@@ -42,3 +43,6 @@ import com.facebook.buck.model.BuildTargetFactory;",
                " import com.facebook.buck.rules.DefaultCellPathResolver;",
                "+import com.facebook.buck.rules.keys.config.TestRuleKeyConfigurationFactory;",
                "+import com.facebook.buck.testutil.FakeProjectFilesystem;",
                " import com.facebook.buck.testutil.TemporaryPaths;",
                "+import com.facebook.buck.testutil.TestConsole;",
                " import com.facebook.buck.testutil.integration.BuckBuildLog;",
                "@@ -46,2 +50,6 @@ import com.facebook.buck.testutil.integration.ProjectWorkspace;",
                " import com.facebook.buck.testutil.integration.TestDataHelper;",
                "+import com.facebook.buck.toolchain.ToolchainCreationContext;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.facebook.buck.toolchain.impl.ToolchainProviderBuilder;",
                "+import com.facebook.buck.util.DefaultProcessExecutor;",
                " import com.facebook.buck.util.ProcessExecutor;",
                "@@ -56,2 +64,3 @@ import java.nio.file.Path;",
                " import java.nio.file.Paths;",
                "+import java.util.Optional;",
                " import org.hamcrest.Matchers;",
                "@@ -85,9 +94,33 @@ public class OCamlIntegrationTest {",
                "-    OcamlBuckConfig ocamlBuckConfig = new OcamlBuckConfig(buckConfig);",
                "-",
                "-    assumeTrue(ocamlBuckConfig.getOcamlCompiler().isPresent());",
                "-    assumeTrue(ocamlBuckConfig.getOcamlBytecodeCompiler().isPresent());",
                "-    assumeTrue(ocamlBuckConfig.getOcamlDepTool().isPresent());",
                "-    assumeTrue(ocamlBuckConfig.getYaccCompiler().isPresent());",
                "-    assumeTrue(ocamlBuckConfig.getLexCompiler().isPresent());",
                "+    ToolchainProvider toolchainProvider =",
                "+        new ToolchainProviderBuilder()",
                "+            .withToolchain(",
                "+                CxxPlatformsProvider.DEFAULT_NAME,",
                "+                CxxPlatformsProvider.of(",
                "+                    CxxPlatformUtils.DEFAULT_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORMS))",
                "+            .build();",
                "+",
                "+    ProcessExecutor processExecutor = new DefaultProcessExecutor(new TestConsole());",
                "+    ExecutableFinder executableFinder = new ExecutableFinder();",
                "+    ToolchainCreationContext toolchainCreationContext =",
                "+        ToolchainCreationContext.of(",
                "+            ImmutableMap.of(),",
                "+            buckConfig,",
                "+            new FakeProjectFilesystem(),",
                "+            processExecutor,",
                "+            executableFinder,",
                "+            TestRuleKeyConfigurationFactory.create());",
                "+",
                "+    OcamlToolchainFactory factory = new OcamlToolchainFactory();",
                "+    Optional<OcamlToolchain> toolchain =",
                "+        factory.createToolchain(toolchainProvider, toolchainCreationContext);",
                "+",
                "+    OcamlPlatform ocamlPlatform =",
                "+        toolchain.orElseThrow(AssertionError::new).getDefaultOcamlPlatform();",
                "+",
                "+    assumeTrue(ocamlPlatform.getOcamlCompiler().isPresent());",
                "+    assumeTrue(ocamlPlatform.getOcamlBytecodeCompiler().isPresent());",
                "+    assumeTrue(ocamlPlatform.getOcamlDepTool().isPresent());",
                "+    assumeTrue(ocamlPlatform.getYaccCompiler().isPresent());",
                "+    assumeTrue(ocamlPlatform.getLexCompiler().isPresent());",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java",
                "src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlBuckConfig.java",
                "src/com/facebook/buck/ocaml/OcamlDescriptionsProvider.java",
                "src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "src/com/facebook/buck/ocaml/OcamlToolchainFactory.java",
                "test/com/facebook/buck/ocaml/OCamlIntegrationTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "01b3ba658a15cfa9788a81bee27587d45954e9bc",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521844495,
            "hunks": 2,
            "message": "ocaml: make `OcamlPlatform` a flavor convertible Summary: This makes it more easily used with `FlavorDomain`. Reviewed By: dinhviethoa fbshipit-source-id: e30ac80",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java b/src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java",
                "index 6c8d41f872..ccab858c5c 100644",
                "--- a/src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java",
                "+++ b/src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java",
                "@@ -21,2 +21,4 @@ import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.cxx.toolchain.PreprocessorProvider;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.FlavorConvertible;",
                " import com.facebook.buck.rules.Tool;",
                "@@ -31,3 +33,11 @@ import org.immutables.value.Value;",
                " @BuckStyleImmutable",
                "-interface AbstractOcamlPlatform extends Toolchain {",
                "+interface AbstractOcamlPlatform extends Toolchain, FlavorConvertible {",
                "+",
                "+  // TODO: For now, we rely on OCaml platforms having the same \"name\" as the C/C++ platforms they",
                "+  // wrap, due to having to lookup the OCaml platform in the C/C++ interfaces that OCaml rules",
                "+  // implement, into which only C/C++ platform objects are threaded.",
                "+  @Override",
                "+  default Flavor getFlavor() {",
                "+    return getCxxPlatform().getFlavor();",
                "+  }"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "11fbef6f2ee4d5ec04b69496296cf5c1c3e365e1",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521827871,
            "hunks": 3,
            "message": "@Ignore in EndToEndRunner Summary: Allows users to Ignore a verification method (like in default JUnit runner) Reviewed By: sbalabanov fbshipit-source-id: 802b26e",
            "diff": [
                "diff --git a/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java b/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java",
                "index 23bef60abd..843fe02046 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java",
                "+++ b/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java",
                "@@ -30,2 +30,3 @@ import org.junit.After;",
                " import org.junit.Before;",
                "+import org.junit.Ignore;",
                " import org.junit.Test;",
                "@@ -380,2 +381,6 @@ public class EndToEndRunner extends ParentRunner<EndToEndTestDescriptor> {",
                "+  protected boolean isIgnored(EndToEndTestDescriptor child) {",
                "+    return child.getMethod().getAnnotation(Ignore.class) != null;",
                "+  }",
                "+",
                "   /**",
                "@@ -420,2 +425,5 @@ public class EndToEndRunner extends ParentRunner<EndToEndTestDescriptor> {",
                "       statement = new Fail(setupError);",
                "+    } else if (isIgnored(child)) {",
                "+      notifier.fireTestIgnored(description);",
                "+      return;",
                "     } else {"
            ],
            "changed_files": [
                "test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "19be5b0735e71f14caeab6f28f36826a96fcb722",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522448373,
            "hunks": 11,
            "message": "Add platform deps to parse-time deps in D descriptions Summary: Add dependencies from default cxx toolchain to parse time dependencies of D rules. These rules always use the default cxx platform. Reviewed By: andrewjcg fbshipit-source-id: 74f723d",
            "diff": [
                "diff --git a/src/com/facebook/buck/d/DBinaryDescription.java b/src/com/facebook/buck/d/DBinaryDescription.java",
                "index 40e4e57dfa..dee2617337 100644",
                "--- a/src/com/facebook/buck/d/DBinaryDescription.java",
                "+++ b/src/com/facebook/buck/d/DBinaryDescription.java",
                "@@ -23,2 +23,3 @@ import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "@@ -138,3 +139,3 @@ public class DBinaryDescription",
                "       ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "-    extraDepsBuilder.addAll(getCxxPlatform().getLd().getParseTimeDeps());",
                "+    extraDepsBuilder.addAll(CxxPlatforms.getParseTimeDeps(getCxxPlatform()));",
                "   }",
                "diff --git a/src/com/facebook/buck/d/DLibraryDescription.java b/src/com/facebook/buck/d/DLibraryDescription.java",
                "index f1b80cf6e3..34ffb882c0 100644",
                "--- a/src/com/facebook/buck/d/DLibraryDescription.java",
                "+++ b/src/com/facebook/buck/d/DLibraryDescription.java",
                "@@ -22,2 +22,3 @@ import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "@@ -30,2 +31,3 @@ import com.facebook.buck.rules.BuildRuleParams;",
                " import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                " import com.facebook.buck.rules.CommonDescriptionArg;",
                "@@ -35,2 +37,3 @@ import com.facebook.buck.rules.Description;",
                " import com.facebook.buck.rules.HasDeclaredDeps;",
                "+import com.facebook.buck.rules.ImplicitDepsInferringDescription;",
                " import com.facebook.buck.rules.SourcePath;",
                "@@ -42,2 +45,3 @@ import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                " import com.facebook.buck.versions.VersionPropagator;",
                "+import com.google.common.collect.ImmutableCollection;",
                " import com.google.common.collect.ImmutableList;",
                "@@ -48,3 +52,5 @@ import org.immutables.value.Value;",
                " public class DLibraryDescription",
                "-    implements Description<DLibraryDescriptionArg>, VersionPropagator<DLibraryDescriptionArg> {",
                "+    implements Description<DLibraryDescriptionArg>,",
                "+        ImplicitDepsInferringDescription<DLibraryDescriptionArg>,",
                "+        VersionPropagator<DLibraryDescriptionArg> {",
                "@@ -121,6 +127,3 @@ public class DLibraryDescription",
                "-    CxxPlatform cxxPlatform =",
                "-        toolchainProvider",
                "-            .getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class)",
                "-            .getDefaultCxxPlatform();",
                "+    CxxPlatform cxxPlatform = getCxxPlatform();",
                "@@ -167,2 +170,18 @@ public class DLibraryDescription",
                "+  @Override",
                "+  public void findDepsForTargetFromConstructorArgs(",
                "+      BuildTarget buildTarget,",
                "+      CellPathResolver cellRoots,",
                "+      DLibraryDescriptionArg constructorArg,",
                "+      ImmutableCollection.Builder<BuildTarget> extraDepsBuilder,",
                "+      ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "+    extraDepsBuilder.addAll(CxxPlatforms.getParseTimeDeps(getCxxPlatform()));",
                "+  }",
                "+",
                "+  private CxxPlatform getCxxPlatform() {",
                "+    CxxPlatformsProvider cxxPlatformsProviderFactory =",
                "+        toolchainProvider.getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class);",
                "+    return cxxPlatformsProviderFactory.getDefaultCxxPlatform();",
                "+  }",
                "+",
                "   @BuckStyleImmutable",
                "diff --git a/src/com/facebook/buck/d/DTestDescription.java b/src/com/facebook/buck/d/DTestDescription.java",
                "index 08e60ab510..a3362c3705 100644",
                "--- a/src/com/facebook/buck/d/DTestDescription.java",
                "+++ b/src/com/facebook/buck/d/DTestDescription.java",
                "@@ -22,2 +22,3 @@ import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "@@ -137,3 +138,3 @@ public class DTestDescription",
                "       ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "-    extraDepsBuilder.addAll(getCxxPlatform().getLd().getParseTimeDeps());",
                "+    extraDepsBuilder.addAll(CxxPlatforms.getParseTimeDeps(getCxxPlatform()));",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/d/DBinaryDescription.java",
                "src/com/facebook/buck/d/DLibraryDescription.java",
                "src/com/facebook/buck/d/DTestDescription.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8306a3ebb1bf3065804b7a32f6f86d813e8bc04b",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521664762,
            "hunks": 3,
            "message": "Fix ChromeTrace warnings about mismatching name in start- and end-events. Test Plan: No longer produces said warning. fbshipit-source-id: 110a13f",
            "diff": [
                "diff --git a/src/com/facebook/buck/distributed/build_slave/DistBuildChromeTraceRenderer.java b/src/com/facebook/buck/distributed/build_slave/DistBuildChromeTraceRenderer.java",
                "index d860895881..3bf074f907 100644",
                "--- a/src/com/facebook/buck/distributed/build_slave/DistBuildChromeTraceRenderer.java",
                "+++ b/src/com/facebook/buck/distributed/build_slave/DistBuildChromeTraceRenderer.java",
                "@@ -161,2 +161,5 @@ public class DistBuildChromeTraceRenderer {",
                "+    // This formatting helps in searching for the rule in the Chrome Trace.",
                "+    // Otherwise the same name might appear in critical dependencies of other rules.",
                "+    String ruleTitle = String.format(\"%s - title\", ruleEntry.ruleName);",
                "     chromeTraceWriter.writeEvent(",
                "@@ -164,5 +167,3 @@ public class DistBuildChromeTraceRenderer {",
                "             kTraceCategory,",
                "-            // This formatting helps in searching for the rule in the Chrome Trace.",
                "-            // Otherwise the same name might appear in critical dependencies of other rules.",
                "-            String.format(\"%s - title\", ruleEntry.ruleName),",
                "+            ruleTitle,",
                "             Phase.BEGIN,",
                "@@ -176,3 +177,3 @@ public class DistBuildChromeTraceRenderer {",
                "             kTraceCategory,",
                "-            ruleEntry.ruleName,",
                "+            ruleTitle,",
                "             Phase.END,"
            ],
            "changed_files": [
                "src/com/facebook/buck/distributed/build_slave/DistBuildChromeTraceRenderer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "00354f15865fc2bb82de165b1a39eb7fc415f148",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521829902,
            "hunks": 30,
            "message": "Use better alternate build-file name (BUILD); use .NET (not .Net) Summary: Change the example (alternative) build-file name from:   TARGETS which is Facebook internal legacy (fbconfig/fbmake) to:   BUILD which is used by Bazel (and in other industry contexts as well). Fix our use of `.Net`, changes it to the correct `.NET`. Spell check `buckconfig.soy`; fix many spelling issues. Reviewed By: styurin fbshipit-source-id: 61ef2a5",
            "diff": [
                "diff --git a/docs/__table_of_contents.soy b/docs/__table_of_contents.soy",
                "index fe92cd667d..4a56543e80 100644",
                "--- a/docs/__table_of_contents.soy",
                "+++ b/docs/__table_of_contents.soy",
                "@@ -345,3 +345,3 @@",
                "         {param currentnavid: $navid /}",
                "-        {param platform: '.Net' /}",
                "+        {param platform: '.NET' /}",
                "         {param rules: $platformRulesMap['dotnet'] /}",
                "diff --git a/docs/concept/buckconfig.soy b/docs/concept/buckconfig.soy",
                "index ea8ae526b3..edd1b01730 100644",
                "--- a/docs/concept/buckconfig.soy",
                "+++ b/docs/concept/buckconfig.soy",
                "@@ -57,7 +57,7 @@ following escape sequences are supported:",
                " </tr><tr>",
                "-<td>\\x##</td><td>unicode character with code point ## (in hex)</td>",
                "+<td>\\x##</td><td>Unicode character with code point ## (in hex)</td>",
                " </tr><tr>",
                "-<td>\\u####</td><td>unicode character with code point #### (in hex)</td>",
                "+<td>\\u####</td><td>Unicode character with code point #### (in hex)</td>",
                " </tr><tr>",
                "-<td>\\U########</td><td>unicode character with code point ######## (in hex)</td>",
                "+<td>\\U########</td><td>Unicode character with code point ######## (in hex)</td>",
                " </tr></table>",
                "@@ -240,3 +240,3 @@ $ buck targets --resolve-alias app#src_jar",
                "     <code>ANDROID_SDK=/Library/Android/sdk</code>. The environment variables",
                "-    <code>ANDROID_SDK</code> and <code>ANDROID_HOME</code> both supercede the buckconfig setting.",
                "+    <code>ANDROID_SDK</code> and <code>ANDROID_HOME</code> both supersede the buckconfig setting.",
                "     The default is empty.",
                "@@ -370,3 +370,3 @@ $ buck targets --resolve-alias app#src_jar",
                "     test_log_directory_environment_variable=MY_LOG_DIRECTORY",
                "-    test_log_level_environmant_variable=MY_LOG_LEVEL",
                "+    test_log_level_environment_variable=MY_LOG_LEVEL",
                "     test_log_level=verbose",
                "@@ -671,3 +671,3 @@ $ buck targets --resolve-alias app#src_jar",
                "     Sets the maximum number of threads to use for building.  By default, Buck uses the number of",
                "-    available cores multipled by <code>1.25</code>.",
                "+    available cores multiplied by <code>1.25</code>.",
                "   {/param}",
                "@@ -759,3 +759,3 @@ $ buck targets --resolve-alias app#src_jar",
                "   {param name: 'name' /}",
                "-  {param example_value: 'TARGETS' /}",
                "+  {param example_value: 'BUILD' /}",
                "   {param description}",
                "@@ -764,3 +764,3 @@ $ buck targets --resolve-alias app#src_jar",
                "     We recommend that you use the default name. However, you could",
                "-    specify a different name&mdash;such as <code>TARGETS</code> shown",
                "+    specify a different name&mdash;such as <code>BUILD</code> shown",
                "     below&mdash;in order to support, for example, a legacy",
                "@@ -969,3 +969,3 @@ $ buck targets --resolve-alias app#src_jar",
                "     The length of time to wait after the build completes for any remaining http cache uploads to",
                "-    complete before forecfully shutting down the writer thread pool when using http-based caching",
                "+    complete before forcefully shutting down the writer thread pool when using http-based caching",
                "     {sp}({call buckconfig.cache_mode /} must contain <code>http</code>).  The default is{sp}",
                "@@ -1178,3 +1178,3 @@ $ buck targets --resolve-alias app#src_jar",
                "   A comma separated list of server URLs of valid servers. The client",
                "-  side loadbalancer will try to pick the best server to connect to for every",
                "+  side load balancer will try to pick the best server to connect to for every",
                "   single connection.",
                "@@ -1188,3 +1188,3 @@ $ buck targets --resolve-alias app#src_jar",
                "   {param description}",
                "-  The client side loadbalancer will use this endpoint to check whether the",
                "+  The client side load balancer will use this endpoint to check whether the",
                "   server is in healthy state or not. It will also be used to measure request",
                "@@ -1199,3 +1199,3 @@ $ buck targets --resolve-alias app#src_jar",
                "   {param description}",
                "-  The timeout in milliseconds between two consecutive client side loadbalancer",
                "+  The timeout in milliseconds between two consecutive client side load balancer",
                "   health checks to the slb_server_pool.",
                "@@ -1234,3 +1234,3 @@ $ buck targets --resolve-alias app#src_jar",
                "   slb_error_check_time_range_millis that is acceptable to keep a particular",
                "-  server marked as healthy and usable by the loadbalancer.",
                "+  server marked as healthy and usable by the load balancer.",
                "@@ -1336,3 +1336,3 @@ $ buck build //big:expensive-rule            # Action Graph is rebuilt.</pre>",
                "   for which the cost of caching the Action Graph for the new build likely",
                "-  outweights the benefit of evicting the Action Graph from the previous build.",
                "+  outweighs the benefit of evicting the Action Graph from the previous build.",
                "   As this is commonly the case for tools, this flag is frequently used in",
                "@@ -1803,3 +1803,3 @@ cxx_library(",
                "     The number of jobs that each C/C++ link rule consumes when running.",
                "-    By default, this is <code>1</code>, but this can overriden to change",
                "+    By default, this is <code>1</code>, but this can overridden to change",
                "     how many link rules can execute in parallel for a given <code>-j</code>",
                "@@ -1839,3 +1839,3 @@ cxx_library(",
                "   {param description}",
                "-    When linking a executiable or shared library, any dependencies that build shared",
                "+    When linking a executable or shared library, any dependencies that build shared",
                "     libraries are normally added to the link line.  If this option is set, Buck will",
                "@@ -1860,3 +1860,3 @@ cxx_library(",
                "-    When this option is set, Buck will build shared library interfaces indepedent",
                "+    When this option is set, Buck will build shared library interfaces independent",
                "     of the rule's shared library (e.g. by linking it's own shared library without",
                "@@ -2351,3 +2351,3 @@ cxx_library(",
                "         {sp}file with the intermediate <code>.class</code> files held in memory.  The compiler",
                "-        output will still be written to disk if there are any postprocessing commands specified",
                "+        output will still be written to disk if there are any post-processing commands specified",
                "         during the build.",
                "@@ -2563,3 +2563,3 @@ cxx_library(",
                "       <li>",
                "-        <code>-1</code>: Explicitely disables the server.",
                "+        <code>-1</code>: Explicitly disables the server.",
                "       </li>",
                "@@ -2765,3 +2765,3 @@ your <code>.buckjavaargs</code> file</a>:",
                "     environment variable <code>ANDROID_NDK=/Library/Android/ndk/r10c</code>. The environment",
                "-    variables <code>ANDROID_NDK</code> and <code>NDK_HOME</code> both supercede the buckconfig",
                "+    variables <code>ANDROID_NDK</code> and <code>NDK_HOME</code> both supersede the buckconfig",
                "     setting. The default is empty.",
                "@@ -2777,3 +2777,3 @@ your <code>.buckjavaargs</code> file</a>:",
                "     equivalent to setting the environment variable",
                "-    <code>ANDROID_NDK_REPOSITORY=/Library/Android/ndk</code>. The environment variable supercedes",
                "+    <code>ANDROID_NDK_REPOSITORY=/Library/Android/ndk</code>. The environment variable supersedes",
                "     the buckconfig setting. The default is empty.",
                "@@ -2787,3 +2787,3 @@ your <code>.buckjavaargs</code> file</a>:",
                "   {param description}",
                "-    The android platform libraries that the code is targetting.  This is equivalent to the{sp}",
                "+    The android platform libraries that the code is targeting.  This is equivalent to the{sp}",
                "     <code>APP_TARGET</code> in the NDK build system.  The default is <code>android-16</code>.",
                "@@ -3090,3 +3090,3 @@ your <code>.buckjavaargs</code> file</a>:",
                "     When communicating with <a href=\"https://facebook.github.io/watchman/\">Watchman</a>, Buck will",
                "-    wait this long for a response.  The defaut is <code>60000</code> ms.",
                "+    wait this long for a response.  The default is <code>60000</code> ms.",
                "   {/param}",
                "@@ -3191,3 +3191,3 @@ your <code>.buckjavaargs</code> file</a>:",
                "       {sp}{call buck.build_target /}.  This can be useful if you have Python 2 and Python 3 code in",
                "-      your project and need to differentiate accorindgly (namely by changing the value of{sp}",
                "+      your project and need to differentiate accordingly (namely by changing the value of{sp}",
                "       {call buckconfig.python_interpreter /}.  On the command line, to build with{sp}",
                "@@ -3250,3 +3250,3 @@ your <code>.buckjavaargs</code> file</a>:",
                "         <li>",
                "-          <code>inplace</code>: builds exectuables which are only able to run from within the",
                "+          <code>inplace</code>: builds executables which are only able to run from within the",
                "           repository.  This style of packaging is significantly faster than <code>standalone</code>",
                "@@ -3277,3 +3277,3 @@ your <code>.buckjavaargs</code> file</a>:",
                "           <code>separate</code> (default): Transitive native dependencies are linked as full,",
                "-          separate, shared libraries.  This is prefererred for faster build-time speed.",
                "+          separate, shared libraries.  This is preferred for faster build-time speed.",
                "         </li>",
                "@@ -3506,3 +3506,3 @@ your <code>.buckjavaargs</code> file</a>:",
                "     When <code>force_rlib</code> is true, then buck will always compile static (rlib) libraries",
                "-    even when the final target (binary or unittest) is being linked with a shared link style.",
                "+    even when the final target (binary or unit test) is being linked with a shared link style.",
                "     Rust code is typically always statically linked, and a lot of surrounding tooling doesn't",
                "@@ -3564,3 +3564,3 @@ your <code>.buckjavaargs</code> file</a>:",
                "   {param description}",
                "-    The number of miliseconds per test to allow before stopping the test and reporting a failure.",
                "+    The number of milliseconds per test to allow before stopping the test and reporting a failure.",
                "     The default is no timeout.  Not all <code>*_test</code> rules utilize this value.  A JUnit test",
                "@@ -3586,3 +3586,3 @@ your <code>.buckjavaargs</code> file</a>:",
                "     <p>",
                "-      This specifies an external test runner comamnd to use instead of Buck's built-in test runner.",
                "+      This specifies an external test runner command to use instead of Buck's built-in test runner.",
                "       The external test runner is invoked by Buck after it has built all the test rules.  It passes"
            ],
            "changed_files": [
                "docs/__table_of_contents.soy",
                "docs/concept/buckconfig.soy"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: issue",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7802ced6db834f34cdee58217585486ebbd515fa",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521754545,
            "hunks": 24,
            "message": "ocaml: add `OcamlPlatform` abstraction for multi-platform builds Summary: This introduces a `OcamlPlatform` type to house the current contents of `OcamlToolchain` and changes to `OcamlToolchain` to be a container of the former, in anticipation of supporting multi-platform builds. Test Plan: CI Reviewed By: styurin fbshipit-source-id: 92d2c41",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java b/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "index 8ee835b9b2..9e88539531 100644",
                "--- a/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "+++ b/src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "@@ -368,3 +368,3 @@ abstract class AbstractOcamlBuildContext implements AddsToRuleKey {",
                "   public static OcamlBuildContext.Builder builder(",
                "-      OcamlToolchain ocamlToolchain, OcamlBuckConfig config) {",
                "+      OcamlPlatform ocamlPlatform, OcamlBuckConfig config) {",
                "     return OcamlBuildContext.builder()",
                "@@ -377,4 +377,4 @@ abstract class AbstractOcamlBuildContext implements AddsToRuleKey {",
                "         .setOcamlInteropIncludesDir(config.getOcamlInteropIncludesDir())",
                "-        .setCFlags(ocamlToolchain.getCFlags())",
                "-        .setLdFlags(ocamlToolchain.getLdFlags());",
                "+        .setCFlags(ocamlPlatform.getCFlags())",
                "+        .setLdFlags(ocamlPlatform.getLdFlags());",
                "   }",
                "diff --git a/src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java b/src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java",
                "new file mode 100644",
                "index 0000000000..1e21d5b08d",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java",
                "@@ -0,0 +1,41 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.ocaml;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CompilerProvider;",
                "+import com.facebook.buck.cxx.toolchain.PreprocessorProvider;",
                "+import com.facebook.buck.toolchain.Toolchain;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.google.common.collect.ImmutableList;",
                "+import org.immutables.value.Value;",
                "+",
                "+/** Abstracting the tooling/flags/libraries used to build OCaml rules. */",
                "+@Value.Immutable",
                "+@BuckStyleImmutable",
                "+interface AbstractOcamlPlatform extends Toolchain {",
                "+",
                "+  CompilerProvider getCCompiler();",
                "+",
                "+  PreprocessorProvider getCPreprocessor();",
                "+",
                "+  CompilerProvider getCxxCompiler();",
                "+",
                "+  /** @return all C/C++ platform flags used to preprocess, compiler, and assemble C sources. */",
                "+  ImmutableList<String> getCFlags();",
                "+",
                "+  ImmutableList<String> getLdFlags();",
                "+}",
                "diff --git a/src/com/facebook/buck/ocaml/AbstractOcamlToolchain.java b/src/com/facebook/buck/ocaml/AbstractOcamlToolchain.java",
                "new file mode 100644",
                "index 0000000000..607392160a",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/ocaml/AbstractOcamlToolchain.java",
                "@@ -0,0 +1,31 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.ocaml;",
                "+",
                "+import com.facebook.buck.toolchain.Toolchain;",
                "+import com.facebook.buck.util.immutables.BuckStyleTuple;",
                "+import org.immutables.value.Value;",
                "+",
                "+/** Container for {@link OcamlPlatform}s. */",
                "+@Value.Immutable",
                "+@BuckStyleTuple",
                "+interface AbstractOcamlToolchain extends Toolchain {",
                "+",
                "+  String DEFAULT_NAME = \"ocaml-toolchain\";",
                "+",
                "+  OcamlPlatform getDefaultOcamlPlatform();",
                "+}",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "index 20fe0b276a..5790e14178 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "@@ -229,2 +229,3 @@ public class OcamlRuleBuilder {",
                "         toolchainProvider.getByName(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.class);",
                "+    OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();",
                "@@ -264,6 +265,6 @@ public class OcamlRuleBuilder {",
                "         BuildableSupport.getDepsCollection(",
                "-            ocamlToolchain.getCCompiler().resolve(resolver), ruleFinder));",
                "+            ocamlPlatform.getCCompiler().resolve(resolver), ruleFinder));",
                "     allDepsBuilder.addAll(",
                "         BuildableSupport.getDepsCollection(",
                "-            ocamlToolchain.getCxxCompiler().resolve(resolver), ruleFinder));",
                "+            ocamlPlatform.getCxxCompiler().resolve(resolver), ruleFinder));",
                "     allDepsBuilder.addAll(",
                "@@ -300,3 +301,3 @@ public class OcamlRuleBuilder {",
                "     OcamlBuildContext ocamlContext =",
                "-        OcamlBuildContext.builder(ocamlToolchain, ocamlBuckConfig)",
                "+        OcamlBuildContext.builder(ocamlPlatform, ocamlBuckConfig)",
                "             .setProjectFilesystem(projectFilesystem)",
                "@@ -318,3 +319,3 @@ public class OcamlRuleBuilder {",
                "             .setBytecodeLinkDeps(bytecodeLinkDepsBuilder.build())",
                "-            .setCPreprocessor(ocamlToolchain.getCPreprocessor().resolve(resolver))",
                "+            .setCPreprocessor(ocamlPlatform.getCPreprocessor().resolve(resolver))",
                "             .build();",
                "@@ -327,4 +328,4 @@ public class OcamlRuleBuilder {",
                "             ocamlContext,",
                "-            ocamlToolchain.getCCompiler().resolve(resolver),",
                "-            ocamlToolchain.getCxxCompiler().resolve(resolver),",
                "+            ocamlPlatform.getCCompiler().resolve(resolver),",
                "+            ocamlPlatform.getCxxCompiler().resolve(resolver),",
                "             bytecodeOnly);",
                "@@ -390,2 +391,3 @@ public class OcamlRuleBuilder {",
                "         toolchainProvider.getByName(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.class);",
                "+    OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();",
                "@@ -444,6 +446,6 @@ public class OcamlRuleBuilder {",
                "                         BuildableSupport.getDepsCollection(",
                "-                            ocamlToolchain.getCCompiler().resolve(resolver), ruleFinder))",
                "+                            ocamlPlatform.getCCompiler().resolve(resolver), ruleFinder))",
                "                     .addAll(",
                "                         BuildableSupport.getDepsCollection(",
                "-                            ocamlToolchain.getCxxCompiler().resolve(resolver), ruleFinder))",
                "+                            ocamlPlatform.getCxxCompiler().resolve(resolver), ruleFinder))",
                "                     .build())",
                "@@ -466,3 +468,3 @@ public class OcamlRuleBuilder {",
                "     OcamlBuildContext ocamlContext =",
                "-        OcamlBuildContext.builder(ocamlToolchain, ocamlBuckConfig)",
                "+        OcamlBuildContext.builder(ocamlPlatform, ocamlBuckConfig)",
                "             .setProjectFilesystem(projectFilesystem)",
                "@@ -484,3 +486,3 @@ public class OcamlRuleBuilder {",
                "             .setBytecodeLinkDeps(bytecodeLinkDepsBuilder.build())",
                "-            .setCPreprocessor(ocamlToolchain.getCPreprocessor().resolve(resolver))",
                "+            .setCPreprocessor(ocamlPlatform.getCPreprocessor().resolve(resolver))",
                "             .build();",
                "@@ -504,4 +506,4 @@ public class OcamlRuleBuilder {",
                "             cInput,",
                "-            ocamlToolchain.getCCompiler().resolve(resolver),",
                "-            ocamlToolchain.getCxxCompiler().resolve(resolver),",
                "+            ocamlPlatform.getCCompiler().resolve(resolver),",
                "+            ocamlPlatform.getCxxCompiler().resolve(resolver),",
                "             bytecodeOnly,",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java b/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java",
                "index 32e972b4dd..fd6477a4b6 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.ocaml;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "@@ -22,2 +23,3 @@ import com.facebook.buck.toolchain.ToolchainFactory;",
                " import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.google.common.collect.ImmutableList;",
                " import java.util.Optional;",
                "@@ -29,7 +31,20 @@ public class OcamlToolchainFactory implements ToolchainFactory<OcamlToolchain> {",
                "       ToolchainProvider toolchainProvider, ToolchainCreationContext context) {",
                "+    CxxPlatform cxxPlatform =",
                "+        toolchainProvider",
                "+            .getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class)",
                "+            .getDefaultCxxPlatform();",
                "     return Optional.of(",
                "-        new OcamlToolchain(",
                "-            toolchainProvider",
                "-                .getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class)",
                "-                .getDefaultCxxPlatform()));",
                "+        OcamlToolchain.of(",
                "+            OcamlPlatform.builder()",
                "+                .setCCompiler(cxxPlatform.getCc())",
                "+                .setCxxCompiler(cxxPlatform.getCxx())",
                "+                .setCPreprocessor(cxxPlatform.getCpp())",
                "+                .setCFlags(",
                "+                    ImmutableList.<String>builder()",
                "+                        .addAll(cxxPlatform.getCppflags())",
                "+                        .addAll(cxxPlatform.getCflags())",
                "+                        .addAll(cxxPlatform.getAsflags())",
                "+                        .build())",
                "+                .setLdFlags(cxxPlatform.getLdflags())",
                "+                .build()));",
                "   }",
                "diff --git a/test/com/facebook/buck/ocaml/BUCK b/test/com/facebook/buck/ocaml/BUCK",
                "index 20213b2861..b2498620f5 100644",
                "--- a/test/com/facebook/buck/ocaml/BUCK",
                "+++ b/test/com/facebook/buck/ocaml/BUCK",
                "@@ -101,2 +101,3 @@ standard_java_test(",
                "         \"//test/com/facebook/buck/cxx/toolchain:testutil\",",
                "+        \"//test/com/facebook/buck/io:testutil\",",
                "         \"//test/com/facebook/buck/io/filesystem:testutil\",",
                "@@ -104,4 +105,7 @@ standard_java_test(",
                "         \"//test/com/facebook/buck/rules:testutil\",",
                "+        \"//test/com/facebook/buck/rules/keys/config:testutil\",",
                "         \"//test/com/facebook/buck/testutil:testutil\",",
                "         \"//test/com/facebook/buck/testutil/integration:util\",",
                "+        \"//test/com/facebook/buck/toolchain/impl:testutil\",",
                "+        \"//test/com/facebook/buck/util:testutil\",",
                "         \"//third-party/java/aether:aether-api\",",
                "diff --git a/test/com/facebook/buck/ocaml/OcamlToolchainFactoryTest.java b/test/com/facebook/buck/ocaml/OcamlToolchainFactoryTest.java",
                "new file mode 100644",
                "index 0000000000..4700489c5d",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/ocaml/OcamlToolchainFactoryTest.java",
                "@@ -0,0 +1,75 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.ocaml;",
                "+",
                "+import static org.junit.Assert.assertThat;",
                "+",
                "+import com.facebook.buck.config.BuckConfig;",
                "+import com.facebook.buck.config.FakeBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "+import com.facebook.buck.io.ExecutableFinder;",
                "+import com.facebook.buck.io.FakeExecutableFinder;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.rules.keys.config.TestRuleKeyConfigurationFactory;",
                "+import com.facebook.buck.testutil.FakeProjectFilesystem;",
                "+import com.facebook.buck.toolchain.ToolchainCreationContext;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.facebook.buck.toolchain.impl.ToolchainProviderBuilder;",
                "+import com.facebook.buck.util.FakeProcessExecutor;",
                "+import com.facebook.buck.util.ProcessExecutor;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import java.util.Optional;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Test;",
                "+",
                "+public class OcamlToolchainFactoryTest {",
                "+",
                "+  @Test",
                "+  public void getCFlags() {",
                "+    ToolchainProvider toolchainProvider =",
                "+        new ToolchainProviderBuilder()",
                "+            .withToolchain(",
                "+                CxxPlatformsProvider.DEFAULT_NAME,",
                "+                CxxPlatformsProvider.of(",
                "+                    CxxPlatformUtils.DEFAULT_PLATFORM",
                "+                        .withAsflags(\"-asflag\")",
                "+                        .withCppflags(\"-cppflag\")",
                "+                        .withCflags(\"-cflag\"),",
                "+                    FlavorDomain.of(\"C/C++\")))",
                "+            .build();",
                "+",
                "+    ProcessExecutor processExecutor = new FakeProcessExecutor();",
                "+    ExecutableFinder executableFinder = new FakeExecutableFinder();",
                "+    BuckConfig buckConfig = FakeBuckConfig.builder().build();",
                "+    ToolchainCreationContext toolchainCreationContext =",
                "+        ToolchainCreationContext.of(",
                "+            ImmutableMap.of(),",
                "+            buckConfig,",
                "+            new FakeProjectFilesystem(),",
                "+            processExecutor,",
                "+            executableFinder,",
                "+            TestRuleKeyConfigurationFactory.create());",
                "+",
                "+    OcamlToolchainFactory factory = new OcamlToolchainFactory();",
                "+    Optional<OcamlToolchain> toolchain =",
                "+        factory.createToolchain(toolchainProvider, toolchainCreationContext);",
                "+    assertThat(",
                "+        toolchain.get().getDefaultOcamlPlatform().getCFlags(),",
                "+        Matchers.contains(\"-cppflag\", \"-cflag\", \"-asflag\"));",
                "+  }",
                "+}"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/AbstractOcamlBuildContext.java",
                "src/com/facebook/buck/ocaml/AbstractOcamlPlatform.java",
                "src/com/facebook/buck/ocaml/AbstractOcamlToolchain.java",
                "src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "src/com/facebook/buck/ocaml/OcamlToolchainFactory.java",
                "test/com/facebook/buck/ocaml/BUCK",
                "test/com/facebook/buck/ocaml/OcamlToolchainFactoryTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7204c22a0bdff066bf6df215344bdd12e9b0c967",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522893572,
            "hunks": 6,
            "message": "Revert \"Add BuildRuleKey and BuildRuleContextWithEnvironment for AG construction in AsyncTransformationEngine\" Summary: This reverts commit 59c0090aa9034723e3844d9cb40f0ab95b60d76b. itellij build is broken generating immutables. ant and buck builds still work. Will unland for now until we figure out why only intellij is broken Reviewed By: styurin fbshipit-source-id: b7975ce",
            "diff": [
                "diff --git a/src/com/facebook/buck/rules/graphbuilder/BUCK b/src/com/facebook/buck/rules/graphbuilder/BUCK",
                "deleted file mode 100644",
                "index eb0c6b4687..0000000000",
                "--- a/src/com/facebook/buck/rules/graphbuilder/BUCK",
                "+++ /dev/null",
                "@@ -1,19 +0,0 @@",
                "-load(\"//tools/build_rules:java_rules.bzl\", \"java_immutables_library\")",
                "-",
                "-java_immutables_library(",
                "-    name = \"graphbuilder\",",
                "-    srcs = glob([\"*.java\"]),",
                "-    exported_deps = [",
                "-        \"//src/com/facebook/buck/rules:build_rule\",",
                "-        \"//src/com/facebook/buck/rules:interfaces\",",
                "-        \"//src/com/facebook/buck/rules/provider:provider\",",
                "-    ],",
                "-    tests = [",
                "-        \"//test/com/facebook/buck/rules/graphbuilder:graphbuilder\",",
                "-    ],",
                "-    visibility = [\"PUBLIC\"],",
                "-    deps = [",
                "-        \"//src/com/facebook/buck/graph/transformation:transformation\",",
                "-        \"//third-party/java/guava:guava\",",
                "-    ],",
                "-)",
                "diff --git a/src/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironment.java b/src/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironment.java",
                "deleted file mode 100644",
                "index db5aa8f579..0000000000",
                "--- a/src/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironment.java",
                "+++ /dev/null",
                "@@ -1,168 +0,0 @@",
                "-/*",
                "- * Copyright 2018-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-package com.facebook.buck.rules.graphbuilder;",
                "-",
                "-import com.facebook.buck.graph.transformation.TransformationEnvironment;",
                "-import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "-import com.facebook.buck.model.BuildTarget;",
                "-import com.facebook.buck.rules.BuildRule;",
                "-import com.facebook.buck.rules.BuildRuleCreationContext;",
                "-import com.facebook.buck.rules.CellPathResolver;",
                "-import com.facebook.buck.rules.TargetNode;",
                "-import com.facebook.buck.rules.provider.BuildRuleInfoProvider;",
                "-import com.facebook.buck.rules.provider.BuildRuleInfoProviderCollection;",
                "-import com.facebook.buck.toolchain.ToolchainProvider;",
                "-import com.google.common.collect.ImmutableMap;",
                "-import com.google.common.collect.ImmutableSet;",
                "-import com.google.common.collect.ImmutableSortedSet;",
                "-import com.google.common.collect.Maps;",
                "-import java.util.concurrent.CompletionStage;",
                "-import java.util.function.Function;",
                "-import org.immutables.value.Value;",
                "-import org.immutables.value.Value.Style.ImplementationVisibility;",
                "-",
                "-/**",
                "- * Context information used for construction of ActionGraph in {@link",
                "- * com.facebook.buck.graph.transformationengine.AsyncTransformationEngine}.",
                "- *",
                "- * <p>This wraps the {@link BuildRuleCreationContext} needed for constructing {@link BuildRule}s",
                "- * with {@link TransformationEnvironment} from the {@link",
                "- * com.facebook.buck.graph.transformationengine.AsyncTransformationEngine}.",
                "- *",
                "- * <p>Access to the {@link TransformationEnvironment} is limited to restrict access of BuildRule",
                "- * construction logic to {@link BuildRule}s. Construction phase can only access information to",
                "- * dependencies via {@link com.facebook.buck.rules.provider.BuildRuleInfoProvider}s. Those",
                "- * dependencies not yet created will be implicitly created by this class using the wrapped {@link",
                "- * TransformationEnvironment}.",
                "- *",
                "- * <p>This context is not part of the {@link BuildRuleKey} as {@link TransformationEnvironment}",
                "- * should not be part of the identifier of what {@link BuildRule} to compute.",
                "- *",
                "- * <p>Instances should only be created in {@link",
                "- * com.facebook.buck.graph.transformationengine.AsyncTransformer#transform(Object,",
                "- * TransformationEnvironment)} implementation for ActionGraph construction. Hence, we have",
                "- * package-private implementation which hides constructor.",
                "- */",
                "-@Value.Immutable(builder = false, copy = false, prehash = false)",
                "-@Value.Style(visibility = ImplementationVisibility.PACKAGE)",
                "-public abstract class BuildRuleContextWithEnvironment {",
                "-",
                "-  @Value.Parameter",
                "-  protected abstract BuildRuleKey getKey();",
                "-",
                "-  protected BuildRuleCreationContext getCreationContext() {",
                "-    return getKey().getBuildRuleCreationContext();",
                "-  }",
                "-",
                "-  /** @return the {@link TargetNode} of the current desired {@link BuildRule} */",
                "-  @Value.Lazy",
                "-  protected TargetNode<?, ?> getCurrentNode() {",
                "-    return getCreationContext().getTargetGraph().get(getKey().getBuildTarget());",
                "-  }",
                "-",
                "-  @Value.Parameter",
                "-  protected abstract TransformationEnvironment<BuildRuleKey, BuildRule> getEnv();",
                "-",
                "-  public ProjectFilesystem getProjectFilesystem() {",
                "-    return getCreationContext().getProjectFilesystem();",
                "-  }",
                "-",
                "-  public CellPathResolver getCellPathResolver() {",
                "-    return getCreationContext().getCellPathResolver();",
                "-  }",
                "-",
                "-  public ToolchainProvider getToolchainProvider() {",
                "-    return getCreationContext().getToolchainProvider();",
                "-  }",
                "-",
                "-  /**",
                "-   * Access to {@link com.facebook.buck.rules.TargetGraph} and {@link TargetNode} is limited during",
                "-   * ActionGraph construction. The list of target graph dependencies can only be accessed through",
                "-   * this context via the three methods below.",
                "-   */",
                "-",
                "-  /** @return The {@link TargetNode#getDeclaredDeps()} */",
                "-  public ImmutableSet<BuildTarget> getDeclaredDeps() {",
                "-    return getCurrentNode().getDeclaredDeps();",
                "-  }",
                "-",
                "-  /** @return The {@link TargetNode#getExtraDeps()} */",
                "-  public ImmutableSortedSet<BuildTarget> getExtraDeps() {",
                "-    return getCurrentNode().getExtraDeps();",
                "-  }",
                "-",
                "-  /** @return The {@link TargetNode#getTargetGraphOnlyDeps()} ()} */",
                "-  public ImmutableSortedSet<BuildTarget> getTargetGraphOnlyDeps() {",
                "-    return getCurrentNode().getTargetGraphOnlyDeps();",
                "-  }",
                "-",
                "-  /**",
                "-   * Access to {@link TransformationEnvironment} and dependencies as {@link BuildRule}s is limited.",
                "-   * The two methods below are used to asynchronously retrieve the {@link BuildRuleInfoProvider}s of",
                "-   * dependencies and create new {@link BuildRule}s using their information.",
                "-   */",
                "-",
                "-  /**",
                "-   * A method for Action Graph construction phase to access information from a dependency by",
                "-   * retrieving all {@link BuildRuleInfoProvider}s of the dependent {@link BuildRule}.",
                "-   *",
                "-   * <p>The result is then asynchronously given to the supplied Function, which can use the {@link",
                "-   * BuildRuleInfoProvider}s to create the current desired {@link BuildRule}.",
                "-   *",
                "-   * @param depKey the {@link BuildRuleKey} of the desired dependency",
                "-   * @param createBuildRuleWithDep the function that uses the dependencies to create the current",
                "-   *     {@link BuildRule}",
                "-   * @return a future of the {@link BuildRule} to be created",
                "-   */",
                "-  public CompletionStage<BuildRule> getDependencyProviderCollection(",
                "-      BuildRuleKey depKey,",
                "-      Function<BuildRuleInfoProviderCollection, BuildRule> createBuildRuleWithDep) {",
                "-    return getEnv()",
                "-        .evaluate(",
                "-            depKey,",
                "-            depBuildRule -> {",
                "-              return createBuildRuleWithDep.apply(depBuildRule.getProviderCollection());",
                "-            });",
                "-  }",
                "-",
                "-  /**",
                "-   * A method for Action Graph construction phase to access information from many dependencies by",
                "-   * retrieving all {@link BuildRuleInfoProvider}s of the dependencies {@link BuildRule}.",
                "-   *",
                "-   * <p>The result is then asynchronously given to the supplied Function, which can use the {@link",
                "-   * BuildRuleInfoProvider}s of the dependencies as a Map to create the current desired {@link",
                "-   * BuildRule}.",
                "-   *",
                "-   * @param depKeys the {@link BuildRuleKey} of the desired dependency",
                "-   * @param createBuildRuleWithDeps the function that uses the dependencies to create the current",
                "-   *     {@link BuildRule}",
                "-   * @return a future of the {@link BuildRule} to be created",
                "-   */",
                "-  public CompletionStage<BuildRule> getDependenciesProviderCollection(",
                "-      Iterable<BuildRuleKey> depKeys,",
                "-      Function<ImmutableMap<BuildRuleKey, BuildRuleInfoProviderCollection>, BuildRule>",
                "-          createBuildRuleWithDeps) {",
                "-    return getEnv()",
                "-        .evaluateAll(",
                "-            depKeys,",
                "-            depBuildRules -> {",
                "-              return createBuildRuleWithDeps.apply(",
                "-                  ImmutableMap.copyOf(",
                "-                      Maps.transformValues(depBuildRules, rule -> rule.getProviderCollection())));",
                "-            });",
                "-  }",
                "-}",
                "diff --git a/src/com/facebook/buck/rules/graphbuilder/BuildRuleKey.java b/src/com/facebook/buck/rules/graphbuilder/BuildRuleKey.java",
                "deleted file mode 100644",
                "index 0352fa4f92..0000000000",
                "--- a/src/com/facebook/buck/rules/graphbuilder/BuildRuleKey.java",
                "+++ /dev/null",
                "@@ -1,52 +0,0 @@",
                "-/*",
                "- * Copyright 2018-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-package com.facebook.buck.rules.graphbuilder;",
                "-",
                "-import com.facebook.buck.model.BuildTarget;",
                "-import com.facebook.buck.rules.BuildRuleCreationContext;",
                "-import com.facebook.buck.rules.TargetNode;",
                "-import org.immutables.value.Value;",
                "-",
                "-/**",
                "- * An Immutable Key to a {@link BuildRule} for computation in {@link",
                "- * com.facebook.buck.graph.transformationengine.AsyncTransformationEngine}. The Key is used to",
                "- * represent what {@link com.facebook.buck.rules.BuildRule} subgraph we are attempting to compute.",
                "- *",
                "- * <p>The {@link com.facebook.buck.rules.BuildRule} subgraph is identified by:",
                "- *",
                "- * <ul>",
                "- *   <li>the {@link com.facebook.buck.rules.TargetNode} corresponding to the {@link BuildTarget}",
                "- *       which contains information about the desired {@link BuildTarget}, including flavour",
                "- *       information, and cell path, etc.",
                "- * </ul>",
                "- */",
                "-@Value.Immutable(builder = false, copy = false, prehash = true)",
                "-public abstract class BuildRuleKey {",
                "-",
                "-  @Value.Parameter",
                "-  @Value.Auxiliary",
                "-  public abstract BuildTarget getBuildTarget();",
                "-",
                "-  @Value.Derived",
                "-  public TargetNode<?, ?> getTargetNode() {",
                "-    return getBuildRuleCreationContext().getTargetGraph().get(getBuildTarget());",
                "-  }",
                "-",
                "-  @Value.Parameter",
                "-  @Value.Auxiliary",
                "-  public abstract BuildRuleCreationContext getBuildRuleCreationContext();",
                "-}",
                "diff --git a/test/com/facebook/buck/rules/graphbuilder/BUCK b/test/com/facebook/buck/rules/graphbuilder/BUCK",
                "deleted file mode 100644",
                "index 3dc0648696..0000000000",
                "--- a/test/com/facebook/buck/rules/graphbuilder/BUCK",
                "+++ /dev/null",
                "@@ -1,17 +0,0 @@",
                "-load(\"//tools/build_rules:java_rules.bzl\", \"java_immutables_library\", \"java_test\")",
                "-",
                "-java_test(",
                "-    name = \"graphbuilder\",",
                "-    srcs = glob([\"*Test.java\"]),",
                "-    has_immutable_types = True,",
                "-    deps = [",
                "-        \"//src/com/facebook/buck/graph/transformation:transformation\",",
                "-        \"//src/com/facebook/buck/rules/graphbuilder:graphbuilder\",",
                "-        \"//test/com/facebook/buck/model:testutil\",",
                "-        \"//test/com/facebook/buck/rules:testutil\",",
                "-        \"//test/com/facebook/buck/rules/provider:testutil\",",
                "-        \"//test/com/facebook/buck/testutil:testutil\",",
                "-        \"//third-party/java/easymock:easymock\",",
                "-        \"//third-party/java/junit:junit\",",
                "-    ],",
                "-)",
                "diff --git a/test/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironmentTest.java b/test/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironmentTest.java",
                "deleted file mode 100644",
                "index eb960a102e..0000000000",
                "--- a/test/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironmentTest.java",
                "+++ /dev/null",
                "@@ -1,206 +0,0 @@",
                "-/*",
                "- * Copyright 2018-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-package com.facebook.buck.rules.graphbuilder;",
                "-",
                "-import static org.junit.Assert.assertEquals;",
                "-",
                "-import com.facebook.buck.graph.MutableDirectedGraph;",
                "-import com.facebook.buck.graph.transformation.TransformationEnvironment;",
                "-import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "-import com.facebook.buck.model.BuildTarget;",
                "-import com.facebook.buck.model.BuildTargetFactory;",
                "-import com.facebook.buck.rules.BuildRule;",
                "-import com.facebook.buck.rules.BuildRuleResolver;",
                "-import com.facebook.buck.rules.CellPathResolver;",
                "-import com.facebook.buck.rules.FakeBuildRule;",
                "-import com.facebook.buck.rules.FakeTargetNodeBuilder;",
                "-import com.facebook.buck.rules.ImmutableBuildRuleCreationContext;",
                "-import com.facebook.buck.rules.TargetGraph;",
                "-import com.facebook.buck.rules.TargetNode;",
                "-import com.facebook.buck.rules.TestBuildRuleResolver;",
                "-import com.facebook.buck.rules.TestCellBuilder;",
                "-import com.facebook.buck.rules.provider.BuildRuleInfoProviderCollection;",
                "-import com.facebook.buck.rules.provider.DefaultBuildRuleInfoProvider;",
                "-import com.facebook.buck.rules.provider.FakeBuildRuleInfoProvider;",
                "-import com.facebook.buck.rules.provider.FakeBuildRuleWithProviders;",
                "-import com.facebook.buck.testutil.FakeProjectFilesystem;",
                "-import com.facebook.buck.toolchain.ToolchainProvider;",
                "-import com.google.common.collect.ImmutableMap;",
                "-import com.google.common.collect.ImmutableSet;",
                "-import com.google.common.util.concurrent.Futures;",
                "-import java.util.concurrent.CompletableFuture;",
                "-import java.util.function.Function;",
                "-import org.easymock.Capture;",
                "-import org.easymock.EasyMock;",
                "-import org.junit.Before;",
                "-import org.junit.Test;",
                "-",
                "-/**",
                "- * Test and demonstration of {@link BuildRuleContextWithEnvironment} to verify that it calls into",
                "- * {@link TransformationEnvironment} and responds with correct {@link",
                "- * BuildRuleInfoProviderCollection}.",
                "- */",
                "-public class BuildRuleContextWithEnvironmentTest {",
                "-",
                "-  private MutableDirectedGraph<TargetNode<?, ?>> mutableTargetGraph;",
                "-  private BuildRuleResolver ruleResolver;",
                "-  private ProjectFilesystem projectFilesystem;",
                "-  private CellPathResolver cellPathResolver;",
                "-  private ToolchainProvider toolchainProvider;",
                "-  private BuildRuleInfoProviderCollection.Builder providerCollectionBuilder;",
                "-",
                "-  @Before",
                "-  public void setUp() {",
                "-    mutableTargetGraph = new MutableDirectedGraph<>();",
                "-    ruleResolver = new TestBuildRuleResolver();",
                "-    projectFilesystem = new FakeProjectFilesystem();",
                "-    cellPathResolver = new TestCellBuilder().build().getCellPathResolver();",
                "-    toolchainProvider = EasyMock.createMock(ToolchainProvider.class);",
                "-",
                "-    providerCollectionBuilder =",
                "-        BuildRuleInfoProviderCollection.builder()",
                "-            .put(",
                "-                DefaultBuildRuleInfoProvider.of(",
                "-                    FakeBuildRuleWithProviders.class,",
                "-                    BuildTargetFactory.newInstance(\"//fake:rule\"),",
                "-                    null,",
                "-                    projectFilesystem));",
                "-",
                "-    mutableTargetGraph.addNode(",
                "-        FakeTargetNodeBuilder.build(",
                "-            new FakeBuildRuleWithProviders(providerCollectionBuilder.build())));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void canRetrieveSingleDependency() {",
                "-    TransformationEnvironment<BuildRuleKey, BuildRule> environment =",
                "-        EasyMock.createMock(TransformationEnvironment.class);",
                "-",
                "-    BuildTarget fakeKeyTarget = BuildTargetFactory.newInstance(\"//fake:key\");",
                "-    TargetNode fakeTargetNode = FakeTargetNodeBuilder.build(new FakeBuildRule(fakeKeyTarget));",
                "-    mutableTargetGraph.addNode(fakeTargetNode);",
                "-",
                "-    BuildRuleKey key =",
                "-        ImmutableBuildRuleKey.of(",
                "-            fakeKeyTarget,",
                "-            ImmutableBuildRuleCreationContext.of(",
                "-                new TargetGraph(mutableTargetGraph, ImmutableMap.of(fakeKeyTarget, fakeTargetNode)),",
                "-                ruleResolver,",
                "-                projectFilesystem,",
                "-                cellPathResolver,",
                "-                toolchainProvider));",
                "-",
                "-    BuildTarget buildTarget = BuildTargetFactory.newInstance(\"//fake:fake\");",
                "-    BuildRule expectedRule = new FakeBuildRule(buildTarget);",
                "-",
                "-    BuildRule returnedRule = new FakeBuildRuleWithProviders(providerCollectionBuilder.build());",
                "-",
                "-    Capture<Function<BuildRule, BuildRule>> functionCapture = EasyMock.newCapture();",
                "-    EasyMock.expect(environment.evaluate(EasyMock.eq(key), EasyMock.capture(functionCapture)))",
                "-        .andAnswer(",
                "-            () ->",
                "-                CompletableFuture.completedFuture(functionCapture.getValue().apply(returnedRule)));",
                "-    EasyMock.replay(environment);",
                "-",
                "-    BuildRuleContextWithEnvironment context =",
                "-        ImmutableBuildRuleContextWithEnvironment.of(key, environment);",
                "-    assertEquals(",
                "-        expectedRule,",
                "-        Futures.getUnchecked(",
                "-            context",
                "-                .getDependencyProviderCollection(",
                "-                    key,",
                "-                    providerCollection -> {",
                "-                      assertEquals(returnedRule.getProviderCollection(), providerCollection);",
                "-                      return expectedRule;",
                "-                    })",
                "-                .toCompletableFuture()));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void canRetrieveMultipleDependencies() {",
                "-    TransformationEnvironment<BuildRuleKey, BuildRule> environment =",
                "-        EasyMock.createMock(TransformationEnvironment.class);",
                "-",
                "-    BuildTarget fakeKeyTarget1 = BuildTargetFactory.newInstance(\"//fake:key1\");",
                "-    BuildTarget fakeKeyTarget2 = BuildTargetFactory.newInstance(\"//fake:key2\");",
                "-",
                "-    TargetNode fakeTargetNode1 = FakeTargetNodeBuilder.build(new FakeBuildRule(fakeKeyTarget1));",
                "-    mutableTargetGraph.addNode(fakeTargetNode1);",
                "-    TargetNode fakeTargetNode2 = FakeTargetNodeBuilder.build(new FakeBuildRule(fakeKeyTarget2));",
                "-    mutableTargetGraph.addNode(fakeTargetNode2);",
                "-",
                "-    TargetGraph targetGraph =",
                "-        new TargetGraph(",
                "-            mutableTargetGraph,",
                "-            ImmutableMap.of(fakeKeyTarget1, fakeTargetNode1, fakeKeyTarget2, fakeTargetNode2));",
                "-",
                "-    BuildRuleKey key1 =",
                "-        ImmutableBuildRuleKey.of(",
                "-            fakeKeyTarget1,",
                "-            ImmutableBuildRuleCreationContext.of(",
                "-                targetGraph, ruleResolver, projectFilesystem, cellPathResolver, toolchainProvider));",
                "-",
                "-    BuildRuleKey key2 =",
                "-        ImmutableBuildRuleKey.of(",
                "-            fakeKeyTarget2,",
                "-            ImmutableBuildRuleCreationContext.of(",
                "-                targetGraph, ruleResolver, projectFilesystem, cellPathResolver, toolchainProvider));",
                "-",
                "-    BuildTarget buildTarget = BuildTargetFactory.newInstance(\"//fake:fake\");",
                "-    BuildRule expectedRule = new FakeBuildRule(buildTarget);",
                "-",
                "-    BuildRule returnedRule1 = new FakeBuildRuleWithProviders(providerCollectionBuilder.build());",
                "-    BuildRule returnedRule2 =",
                "-        new FakeBuildRuleWithProviders(",
                "-            providerCollectionBuilder.put(new FakeBuildRuleInfoProvider(1)).build());",
                "-",
                "-    Capture<Function<ImmutableMap<BuildRuleKey, BuildRule>, BuildRule>> functionCapture =",
                "-        EasyMock.newCapture();",
                "-    EasyMock.expect(",
                "-            environment.evaluateAll(",
                "-                EasyMock.eq(ImmutableSet.of(key1, key2)), EasyMock.capture(functionCapture)))",
                "-        .andAnswer(",
                "-            () ->",
                "-                CompletableFuture.completedFuture(",
                "-                    functionCapture",
                "-                        .getValue()",
                "-                        .apply(ImmutableMap.of(key1, returnedRule1, key2, returnedRule2))));",
                "-",
                "-    EasyMock.replay(environment);",
                "-",
                "-    BuildRuleContextWithEnvironment context =",
                "-        ImmutableBuildRuleContextWithEnvironment.of(key1, environment);",
                "-    assertEquals(",
                "-        expectedRule,",
                "-        Futures.getUnchecked(",
                "-            context",
                "-                .getDependenciesProviderCollection(",
                "-                    ImmutableSet.of(key1, key2),",
                "-                    providerCollectionImmutableMap -> {",
                "-                      assertEquals(2, providerCollectionImmutableMap.size());",
                "-                      assertEquals(",
                "-                          returnedRule1.getProviderCollection(),",
                "-                          providerCollectionImmutableMap.get(key1));",
                "-                      assertEquals(",
                "-                          returnedRule2.getProviderCollection(),",
                "-                          providerCollectionImmutableMap.get(key2));",
                "-                      return expectedRule;",
                "-                    })",
                "-                .toCompletableFuture()));",
                "-  }",
                "-}",
                "diff --git a/test/com/facebook/buck/rules/provider/FakeBuildRuleWithProviders.java b/test/com/facebook/buck/rules/provider/FakeBuildRuleWithProviders.java",
                "index 6f47b91005..e92beea9fd 100644",
                "--- a/test/com/facebook/buck/rules/provider/FakeBuildRuleWithProviders.java",
                "+++ b/test/com/facebook/buck/rules/provider/FakeBuildRuleWithProviders.java",
                "@@ -32,3 +32,3 @@ public class FakeBuildRuleWithProviders extends AbstractBuildRuleWithProviders {",
                "-  public FakeBuildRuleWithProviders(BuildRuleInfoProviderCollection providers) {",
                "+  protected FakeBuildRuleWithProviders(BuildRuleInfoProviderCollection providers) {",
                "     super(providers);"
            ],
            "changed_files": [
                "src/com/facebook/buck/rules/graphbuilder/BUCK",
                "src/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironment.java",
                "src/com/facebook/buck/rules/graphbuilder/BuildRuleKey.java",
                "test/com/facebook/buck/rules/graphbuilder/BUCK",
                "test/com/facebook/buck/rules/graphbuilder/BuildRuleContextWithEnvironmentTest.java",
                "test/com/facebook/buck/rules/provider/FakeBuildRuleWithProviders.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4f6756a21069abbf698629a826e50f167bf59056",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522864334,
            "hunks": 38,
            "message": "Move D module to features/d Reviewed By: ttsugriy fbshipit-source-id: 1b56a4b",
            "diff": [
                "diff --git a/build.xml b/build.xml",
                "index 9334e1a3d8..bdce05e449 100644",
                "--- a/build.xml",
                "+++ b/build.xml",
                "@@ -489,5 +489,5 @@",
                "           <exclude name=\"com/facebook/buck/cli/bootstrapper/**\" />",
                "-          <exclude name=\"com/facebook/buck/d/**\" />",
                "           <exclude name=\"com/facebook/buck/dotnet/**\" />",
                "           <exclude name=\"com/facebook/buck/event/api/**\" />",
                "+          <exclude name=\"com/facebook/buck/features/d/**\" />",
                "           <exclude name=\"com/facebook/buck/go/**\" />",
                "@@ -533,3 +533,3 @@",
                "       <module-javac-params>",
                "-        <include name=\"com/facebook/buck/d/**/*.java\" />",
                "+        <include name=\"com/facebook/buck/features/d/**/*.java\" />",
                "       </module-javac-params>",
                "diff --git a/programs/BUCK b/programs/BUCK",
                "index f1d1b98c25..d7c87f933a 100644",
                "--- a/programs/BUCK",
                "+++ b/programs/BUCK",
                "@@ -87,3 +87,3 @@ RESOURCES_AFFECTING_BUILD_ARTIFACTS = {",
                " BUCK_MODULES = {",
                "-    \"d\": \"//src/com/facebook/buck/d:d\",",
                "+    \"d\": \"//src/com/facebook/buck/features/d:d\",",
                "     \"dotnet\": \"//src/com/facebook/buck/dotnet:dotnet\",",
                "diff --git a/src/com/facebook/buck/features/d/AbstractDIncludes.java b/src/com/facebook/buck/features/d/AbstractDIncludes.java",
                "new file mode 100644",
                "index 0000000000..f768421f1f",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/d/AbstractDIncludes.java",
                "@@ -0,0 +1,44 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import com.facebook.buck.rules.AddToRuleKey;",
                "+import com.facebook.buck.rules.AddsToRuleKey;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import org.immutables.value.Value;",
                "+",
                "+@Value.Immutable",
                "+@BuckStyleImmutable",
                "+abstract class AbstractDIncludes implements AddsToRuleKey {",
                "+",
                "+  public abstract SourcePath getLinkTree();",
                "+",
                "+  @AddToRuleKey",
                "+  @Value.NaturalOrder",
                "+  public abstract ImmutableSortedSet<SourcePath> getSources();",
                "+",
                "+  public Iterable<BuildRule> getDeps(SourcePathRuleFinder ruleFinder) {",
                "+    return ImmutableSortedSet.<BuildRule>naturalOrder()",
                "+        .addAll(ruleFinder.filterBuildRuleInputs(getLinkTree()))",
                "+        .addAll(ruleFinder.filterBuildRuleInputs(getSources()))",
                "+        .build();",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/d/BUCK b/src/com/facebook/buck/features/d/BUCK",
                "new file mode 100644",
                "index 0000000000..b1b24eb5ab",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/d/BUCK",
                "@@ -0,0 +1,42 @@",
                "+load(\"//tools/build_rules:module_rules.bzl\", \"buck_module\")",
                "+",
                "+buck_module(",
                "+    name = \"d\",",
                "+    srcs = glob([\"*.java\"]),",
                "+    provided_deps = [",
                "+        \"//src/com/facebook/buck/config:config\",",
                "+        \"//src/com/facebook/buck/cxx:rules\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain:toolchain\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/linker:linker\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/nativelink:nativelink\",",
                "+        \"//src/com/facebook/buck/event/external:external_lib\",",
                "+        \"//src/com/facebook/buck/graph:graph\",",
                "+        \"//src/com/facebook/buck/io:executable-finder\",",
                "+        \"//src/com/facebook/buck/io:io\",",
                "+        \"//src/com/facebook/buck/io/file:file\",",
                "+        \"//src/com/facebook/buck/log:api\",",
                "+        \"//src/com/facebook/buck/model:model\",",
                "+        \"//src/com/facebook/buck/parser:rule_pattern\",",
                "+        \"//src/com/facebook/buck/rules:build_rule\",",
                "+        \"//src/com/facebook/buck/rules:interfaces\",",
                "+        \"//src/com/facebook/buck/rules:rules\",",
                "+        \"//src/com/facebook/buck/rules:source_path\",",
                "+        \"//src/com/facebook/buck/rules/args:args\",",
                "+        \"//src/com/facebook/buck/rules/coercer:coercer\",",
                "+        \"//src/com/facebook/buck/rules/keys:keys\",",
                "+        \"//src/com/facebook/buck/shell:steps\",",
                "+        \"//src/com/facebook/buck/step:step\",",
                "+        \"//src/com/facebook/buck/step/fs:fs\",",
                "+        \"//src/com/facebook/buck/test:test\",",
                "+        \"//src/com/facebook/buck/test/result/type:type\",",
                "+        \"//src/com/facebook/buck/toolchain:toolchain\",",
                "+        \"//src/com/facebook/buck/util:exceptions\",",
                "+        \"//src/com/facebook/buck/util:util\",",
                "+        \"//src/com/facebook/buck/util/environment:platform\",",
                "+        \"//src/com/facebook/buck/versions:translator\",",
                "+        \"//src/com/facebook/buck/versions:versions\",",
                "+        \"//third-party/java/infer-annotations:infer-annotations\",",
                "+        \"//third-party/java/jackson:jackson-databind\",",
                "+    ],",
                "+    visibility = [\"PUBLIC\"],",
                "+)",
                "diff --git a/src/com/facebook/buck/features/d/DBinary.java b/src/com/facebook/buck/features/d/DBinary.java",
                "new file mode 100644",
                "index 0000000000..957afc2c84",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/d/DBinary.java",
                "@@ -0,0 +1,79 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.AbstractBuildRuleWithDeclaredAndExtraDeps;",
                "+import com.facebook.buck.rules.BinaryBuildRule;",
                "+import com.facebook.buck.rules.BuildContext;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildableContext;",
                "+import com.facebook.buck.rules.BuildableSupport;",
                "+import com.facebook.buck.rules.ForwardingBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.HasRuntimeDeps;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.step.Step;",
                "+import com.google.common.collect.ImmutableList;",
                "+import java.util.stream.Stream;",
                "+",
                "+/** BinaryBuildRule implementation for D binaries. */",
                "+public class DBinary extends AbstractBuildRuleWithDeclaredAndExtraDeps",
                "+    implements BinaryBuildRule, HasRuntimeDeps {",
                "+",
                "+  private final Tool executable;",
                "+  private final SourcePath output;",
                "+",
                "+  public DBinary(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams params,",
                "+      Tool executable,",
                "+      SourcePath output) {",
                "+    super(buildTarget, projectFilesystem, params);",
                "+    this.executable = executable;",
                "+    this.output = output;",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableList<Step> getBuildSteps(",
                "+      BuildContext context, BuildableContext buildableContext) {",
                "+    return ImmutableList.of();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Tool getExecutableCommand() {",
                "+    return executable;",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath getSourcePathToOutput() {",
                "+    return ForwardingBuildTargetSourcePath.of(getBuildTarget(), output);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Stream<BuildTarget> getRuntimeDeps(SourcePathRuleFinder ruleFinder) {",
                "+    // Return the actual executable as a runtime dependency.",
                "+    // Without this, the file is not written when we get a cache hit.",
                "+    return BuildableSupport.getDepsCollection(executable, ruleFinder)",
                "+        .stream()",
                "+        .map(BuildRule::getBuildTarget);",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/d/DBinaryDescription.java b/src/com/facebook/buck/features/d/DBinaryDescription.java",
                "new file mode 100644",
                "index 0000000000..2b70804af5",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/d/DBinaryDescription.java",
                "@@ -0,0 +1,156 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import static com.facebook.buck.features.d.DDescriptionUtils.SOURCE_LINK_TREE;",
                "+",
                "+import com.facebook.buck.cxx.CxxLink;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.InternalFlavor;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleCreationContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                "+import com.facebook.buck.rules.CommandTool;",
                "+import com.facebook.buck.rules.CommonDescriptionArg;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.HasDeclaredDeps;",
                "+import com.facebook.buck.rules.ImplicitDepsInferringDescription;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.SymlinkTree;",
                "+import com.facebook.buck.rules.args.SourcePathArg;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.facebook.buck.versions.VersionRoot;",
                "+import com.google.common.collect.ImmutableCollection;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import org.immutables.value.Value;",
                "+",
                "+public class DBinaryDescription",
                "+    implements Description<DBinaryDescriptionArg>,",
                "+        ImplicitDepsInferringDescription<DBinaryDescription.AbstractDBinaryDescriptionArg>,",
                "+        VersionRoot<DBinaryDescriptionArg> {",
                "+",
                "+  public static final Flavor BINARY_FLAVOR = InternalFlavor.of(\"binary\");",
                "+",
                "+  private final ToolchainProvider toolchainProvider;",
                "+  private final DBuckConfig dBuckConfig;",
                "+  private final CxxBuckConfig cxxBuckConfig;",
                "+",
                "+  public DBinaryDescription(",
                "+      ToolchainProvider toolchainProvider, DBuckConfig dBuckConfig, CxxBuckConfig cxxBuckConfig) {",
                "+    this.toolchainProvider = toolchainProvider;",
                "+    this.dBuckConfig = dBuckConfig;",
                "+    this.cxxBuckConfig = cxxBuckConfig;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Class<DBinaryDescriptionArg> getConstructorArgType() {",
                "+    return DBinaryDescriptionArg.class;",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuildRule createBuildRule(",
                "+      BuildRuleCreationContext context,",
                "+      BuildTarget buildTarget,",
                "+      BuildRuleParams params,",
                "+      DBinaryDescriptionArg args) {",
                "+",
                "+    BuildRuleResolver buildRuleResolver = context.getBuildRuleResolver();",
                "+    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(buildRuleResolver);",
                "+    SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);",
                "+    ProjectFilesystem projectFilesystem = context.getProjectFilesystem();",
                "+",
                "+    if (buildTarget.getFlavors().contains(SOURCE_LINK_TREE)) {",
                "+      return DDescriptionUtils.createSourceSymlinkTree(",
                "+          buildTarget, projectFilesystem, pathResolver, ruleFinder, args.getSrcs());",
                "+    }",
                "+",
                "+    SymlinkTree sourceTree =",
                "+        (SymlinkTree)",
                "+            buildRuleResolver.requireRule(DDescriptionUtils.getSymlinkTreeTarget(buildTarget));",
                "+",
                "+    // Create a rule that actually builds the binary, and add that",
                "+    // rule to the index.",
                "+    CxxLink nativeLinkable =",
                "+        DDescriptionUtils.createNativeLinkable(",
                "+            context.getCellPathResolver(),",
                "+            buildTarget.withAppendedFlavors(BINARY_FLAVOR),",
                "+            projectFilesystem,",
                "+            params,",
                "+            buildRuleResolver,",
                "+            getCxxPlatform(),",
                "+            dBuckConfig,",
                "+            cxxBuckConfig,",
                "+            /* compilerFlags */ ImmutableList.of(),",
                "+            args.getSrcs(),",
                "+            args.getLinkerFlags(),",
                "+            DIncludes.builder()",
                "+                .setLinkTree(sourceTree.getSourcePathToOutput())",
                "+                .addAllSources(args.getSrcs().getPaths())",
                "+                .build());",
                "+    buildRuleResolver.addToIndex(nativeLinkable);",
                "+",
                "+    // Create a Tool for the executable.",
                "+    CommandTool.Builder executableBuilder = new CommandTool.Builder();",
                "+    executableBuilder.addArg(SourcePathArg.of(nativeLinkable.getSourcePathToOutput()));",
                "+",
                "+    // Return a BinaryBuildRule implementation, so that this works",
                "+    // with buck run etc.",
                "+    return new DBinary(",
                "+        buildTarget,",
                "+        projectFilesystem,",
                "+        params.withExtraDeps(ImmutableSortedSet.of(nativeLinkable)),",
                "+        executableBuilder.build(),",
                "+        nativeLinkable.getSourcePathToOutput());",
                "+  }",
                "+",
                "+  @Override",
                "+  public void findDepsForTargetFromConstructorArgs(",
                "+      BuildTarget buildTarget,",
                "+      CellPathResolver cellRoots,",
                "+      AbstractDBinaryDescriptionArg constructorArg,",
                "+      ImmutableCollection.Builder<BuildTarget> extraDepsBuilder,",
                "+      ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "+    extraDepsBuilder.addAll(CxxPlatforms.getParseTimeDeps(getCxxPlatform()));",
                "+  }",
                "+",
                "+  private CxxPlatform getCxxPlatform() {",
                "+    CxxPlatformsProvider cxxPlatformsProviderFactory =",
                "+        toolchainProvider.getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class);",
                "+    return cxxPlatformsProviderFactory.getDefaultCxxPlatform();",
                "+  }",
                "+",
                "+  @BuckStyleImmutable",
                "+  @Value.Immutable",
                "+  interface AbstractDBinaryDescriptionArg extends CommonDescriptionArg, HasDeclaredDeps {",
                "+    SourceList getSrcs();",
                "+",
                "+    ImmutableList<String> getLinkerFlags();",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/d/DBuckConfig.java b/src/com/facebook/buck/features/d/DBuckConfig.java",
                "new file mode 100644",
                "index 0000000000..d116f31cbe",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/d/DBuckConfig.java",
                "@@ -0,0 +1,150 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import com.facebook.buck.config.BuckConfig;",
                "+import com.facebook.buck.io.ExecutableFinder;",
                "+import com.facebook.buck.io.file.FileFinder;",
                "+import com.facebook.buck.log.Logger;",
                "+import com.facebook.buck.rules.HashedFileTool;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.util.HumanReadableException;",
                "+import com.facebook.buck.util.environment.Architecture;",
                "+import com.google.common.collect.FluentIterable;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import java.io.IOException;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                "+import java.util.Optional;",
                "+import java.util.stream.StreamSupport;",
                "+",
                "+public class DBuckConfig {",
                "+  private static final Path DEFAULT_D_COMPILER = Paths.get(\"dmd\");",
                "+  private static final Logger LOG = Logger.get(DBuckConfig.class);",
                "+",
                "+  private final BuckConfig delegate;",
                "+",
                "+  public DBuckConfig(BuckConfig delegate) {",
                "+    this.delegate = delegate;",
                "+  }",
                "+",
                "+  /** @return a Tool representing the D compiler to be used. */",
                "+  Tool getDCompiler() {",
                "+    return new HashedFileTool(delegate.getPathSourcePath(getDCompilerPath()));",
                "+  }",
                "+",
                "+  /** @return a list of flags that must be passed to the compiler. */",
                "+  ImmutableList<String> getBaseCompilerFlags() {",
                "+    // If flags are configured in buckconfig, return those.",
                "+    // Else, return an empty list (no flags), as that should normally work.",
                "+    return delegate",
                "+        .getOptionalListWithoutComments(\"d\", \"base_compiler_flags\", ' ')",
                "+        .orElse(ImmutableList.of());",
                "+  }",
                "+",
                "+  /** @return a list of flags that must be passed to the linker to link D binaries. */",
                "+  public ImmutableList<String> getLinkerFlags() {",
                "+    Optional<ImmutableList<String>> configuredFlags =",
                "+        delegate.getOptionalListWithoutComments(\"d\", \"linker_flags\", ' ');",
                "+    if (configuredFlags.isPresent()) {",
                "+      return configuredFlags.get();",
                "+    } else {",
                "+      // No flags configured; generate them based on library paths.",
                "+      ImmutableList.Builder<String> builder = ImmutableList.builder();",
                "+      builder.addAll(",
                "+          StreamSupport.stream(getBaseLibraryPaths().spliterator(), false)",
                "+              .map(input -> \"-L\" + input)",
                "+              .iterator());",
                "+      builder.add(\"-lphobos2\", \"-lpthread\", \"-lm\");",
                "+      return builder.build();",
                "+    }",
                "+  }",
                "+",
                "+  public BuckConfig getDelegate() {",
                "+    return delegate;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return a list of paths to be searched for libraries, in addition to paths that may be",
                "+   *     introduced by rules.",
                "+   */",
                "+  private Iterable<Path> getBaseLibraryPaths() {",
                "+    Optional<ImmutableList<String>> configuredPaths =",
                "+        delegate.getOptionalListWithoutComments(\"d\", \"library_path\", ':');",
                "+",
                "+    if (configuredPaths.isPresent()) {",
                "+      return FluentIterable.from(configuredPaths.get()).transform(input -> Paths.get(input));",
                "+    }",
                "+",
                "+    // No paths configured. Make an educated guess and return that.",
                "+    // We search, in order:",
                "+    // 1. a lib directory next to the directory where the compiler is",
                "+    // 2. /usr/local/lib",
                "+    // 3. /usr/lib",
                "+    // 4. /usr/local/lib/${arch}-${platform}",
                "+    // 5. /usr/lib/${arch}-${platform}",
                "+    // For the platform names, both versions with and without \"-gnu\" are tried.",
                "+    Path compilerPath = getDCompilerPath();",
                "+    try {",
                "+      compilerPath = compilerPath.toRealPath();",
                "+    } catch (IOException e) {",
                "+      LOG.debug(",
                "+          \"Could not resolve \" + compilerPath + \" to real path (likely cause: it does not exist)\");",
                "+    }",
                "+",
                "+    Path usrLib = Paths.get(\"/usr\", \"lib\");",
                "+    Path usrLocalLib = Paths.get(\"/usr\", \"local\", \"lib\");",
                "+    Architecture architecture = delegate.getArchitecture();",
                "+    String platformName = architecture + \"-\" + delegate.getPlatform().getAutoconfName();",
                "+    String platformNameGnu = platformName + \"-gnu\";",
                "+",
                "+    ImmutableSet<Path> searchPath =",
                "+        ImmutableSet.<Path>builder()",
                "+            .add(compilerPath.getParent().resolve(Paths.get(\"..\", \"lib\")).normalize())",
                "+            .add(usrLocalLib)",
                "+            .add(usrLib)",
                "+            .add(usrLocalLib.resolve(platformName))",
                "+            .add(usrLocalLib.resolve(platformNameGnu))",
                "+            .add(usrLib.resolve(platformName))",
                "+            .add(usrLib.resolve(platformNameGnu))",
                "+            .build();",
                "+",
                "+    ImmutableSet<String> fileNames =",
                "+        FileFinder.combine(ImmutableSet.of(\"lib\"), \"phobos2\", ImmutableSet.of(\".a\", \".so\"));",
                "+",
                "+    Optional<Path> phobosPath =",
                "+        FileFinder.getOptionalFile(fileNames, searchPath, Files::isRegularFile);",
                "+",
                "+    if (phobosPath.isPresent()) {",
                "+      LOG.debug(\"Detected path to Phobos: \" + phobosPath.get());",
                "+    } else {",
                "+      throw new HumanReadableException(\"Phobos not found, and not configured using d.library_path\");",
                "+    }",
                "+",
                "+    return ImmutableList.of(phobosPath.get().getParent());",
                "+  }",
                "+",
                "+  /** @return the Path to the D compiler. */",
                "+  private Path getDCompilerPath() {",
                "+    Path compilerPath =",
                "+        delegate.getPath(\"d\", \"compiler\", /*isCellRootRelative=*/ false).orElse(DEFAULT_D_COMPILER);",
                "+",
                "+    return new ExecutableFinder().getExecutable(compilerPath, delegate.getEnvironment());",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/d/DCompileBuildRule.java b/src/com/facebook/buck/features/d/DCompileBuildRule.java",
                "new file mode 100644",
                "index 0000000000..4dd08c0c65",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/d/DCompileBuildRule.java",
                "@@ -0,0 +1,109 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import com.facebook.buck.io.BuildCellRelativePath;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.rules.AbstractBuildRuleWithDeclaredAndExtraDeps;",
                "+import com.facebook.buck.rules.AddToRuleKey;",
                "+import com.facebook.buck.rules.BuildContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildableContext;",
                "+import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.step.Step;",
                "+import com.facebook.buck.step.fs.MkdirStep;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.nio.file.Path;",
                "+",
                "+/** A build rule for invoking the D compiler. */",
                "+public class DCompileBuildRule extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "+",
                "+  @AddToRuleKey private final Tool compiler;",
                "+",
                "+  @AddToRuleKey private final ImmutableList<String> compilerFlags;",
                "+",
                "+  @AddToRuleKey private final String name;",
                "+",
                "+  @AddToRuleKey private final ImmutableSortedSet<SourcePath> sources;",
                "+",
                "+  @AddToRuleKey private final ImmutableList<DIncludes> includes;",
                "+",
                "+  public DCompileBuildRule(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams buildRuleParams,",
                "+      Tool compiler,",
                "+      ImmutableList<String> compilerFlags,",
                "+      String name,",
                "+      ImmutableSortedSet<SourcePath> sources,",
                "+      ImmutableList<DIncludes> includes) {",
                "+    super(buildTarget, projectFilesystem, buildRuleParams);",
                "+    this.compiler = compiler;",
                "+    this.compilerFlags = compilerFlags;",
                "+    this.name = name;",
                "+    this.sources = sources;",
                "+    this.includes = includes;",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableList<Step> getBuildSteps(",
                "+      BuildContext context, BuildableContext buildableContext) {",
                "+    Path output =",
                "+        context",
                "+            .getSourcePathResolver()",
                "+            .getRelativePath(Preconditions.checkNotNull(getSourcePathToOutput()));",
                "+    buildableContext.recordArtifact(output);",
                "+",
                "+    ImmutableList.Builder<Step> steps = ImmutableList.builder();",
                "+    steps.add(",
                "+        MkdirStep.of(",
                "+            BuildCellRelativePath.fromCellRelativePath(",
                "+                context.getBuildCellRootPath(), getProjectFilesystem(), output.getParent())));",
                "+",
                "+    ImmutableList.Builder<String> flagsBuilder = ImmutableList.builder();",
                "+    flagsBuilder.addAll(compilerFlags);",
                "+    for (DIncludes include : includes) {",
                "+      flagsBuilder.add(",
                "+          \"-I\" + context.getSourcePathResolver().getAbsolutePath(include.getLinkTree()));",
                "+    }",
                "+    ImmutableList<String> flags = flagsBuilder.build();",
                "+",
                "+    steps.add(",
                "+        new DCompileStep(",
                "+            getBuildTarget(),",
                "+            getProjectFilesystem().getRootPath(),",
                "+            compiler.getEnvironment(context.getSourcePathResolver()),",
                "+            compiler.getCommandPrefix(context.getSourcePathResolver()),",
                "+            flags,",
                "+            context.getSourcePathResolver().getRelativePath(getSourcePathToOutput()),",
                "+            context.getSourcePathResolver().getAllAbsolutePaths(sources)));",
                "+    return steps.build();",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath getSourcePathToOutput() {",
                "+    return ExplicitBuildTargetSourcePath.of(",
                "+        getBuildTarget(),",
                "+        BuildTargets.getGenPath(getProjectFilesystem(), getBuildTarget(), \"%s/\" + name + \".o\"));",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/d/DCompileStep.java b/src/com/facebook/buck/features/d/DCompileStep.java",
                "new file mode 100644",
                "index 0000000000..0b48e75f8b",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/d/DCompileStep.java",
                "@@ -0,0 +1,80 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.shell.ShellStep;",
                "+import com.facebook.buck.step.ExecutionContext;",
                "+import com.google.common.collect.ImmutableCollection;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import java.nio.file.Path;",
                "+import java.util.Optional;",
                "+",
                "+public class DCompileStep extends ShellStep {",
                "+",
                "+  private final ImmutableMap<String, String> environment;",
                "+  private final ImmutableList<String> compiler;",
                "+  private final ImmutableList<String> flags;",
                "+  private final Path output;",
                "+  private final ImmutableCollection<Path> inputs;",
                "+",
                "+  public DCompileStep(",
                "+      BuildTarget buildTarget,",
                "+      Path workingDirectory,",
                "+      ImmutableMap<String, String> environment,",
                "+      ImmutableList<String> compiler,",
                "+      ImmutableList<String> flags,",
                "+      Path output,",
                "+      ImmutableCollection<Path> inputs) {",
                "+    super(Optional.of(buildTarget), workingDirectory);",
                "+    this.environment = environment;",
                "+    this.compiler = compiler;",
                "+    this.flags = flags;",
                "+    this.output = output;",
                "+    this.inputs = inputs;",
                "+  }",
                "+",
                "+  @Override",
                "+  protected ImmutableList<String> getShellCommandInternal(ExecutionContext context) {",
                "+    return ImmutableList.<String>builder()",
                "+        .addAll(compiler)",
                "+        .addAll(flags)",
                "+        .add(\"-c\")",
                "+        .add(\"-of\" + output)",
                "+        .addAll(inputs.stream().map(Object::toString).iterator())",
                "+        .build();",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableMap<String, String> getEnvironmentVariables(ExecutionContext context) {",
                "+    return environment;",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getShortName() {",
                "+    return \"d compile\";",
                "+  }",
                "+",
                "+  /**",
                "+   * @param sourceName name of the source file",
                "+   * @return the object file name for the given source file name.",
                "+   */",
                "+  public static String getObjectNameForSourceName(String sourceName) {",
                "+    return sourceName.replaceFirst(\"(?:\\\\.[^.]+)$\", \".o\");",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/d/DDescriptionUtils.java b/src/com/facebook/buck/features/d/DDescriptionUtils.java",
                "new file mode 100644",
                "index 0000000000..7c39e03b59",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/d/DDescriptionUtils.java",
                "@@ -0,0 +1,315 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import com.facebook.buck.cxx.CxxLink;",
                "+import com.facebook.buck.cxx.CxxLinkOptions;",
                "+import com.facebook.buck.cxx.CxxLinkableEnhancer;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                "+import com.facebook.buck.graph.AbstractBreadthFirstTraversal;",
                "+import com.facebook.buck.io.file.MorePaths;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.InternalFlavor;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.BuildableSupport;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.SymlinkTree;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.rules.args.SourcePathArg;",
                "+import com.facebook.buck.rules.args.StringArg;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.util.MoreMaps;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.collect.FluentIterable;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableMultimap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                "+import java.util.TreeMap;",
                "+",
                "+/** Utility functions for use in D Descriptions. */",
                "+abstract class DDescriptionUtils {",
                "+",
                "+  public static final Flavor SOURCE_LINK_TREE = InternalFlavor.of(\"source-link-tree\");",
                "+",
                "+  /**",
                "+   * Creates a BuildTarget, based on an existing build target, but flavored with a CxxPlatform and",
                "+   * an additional flavor created by combining a prefix and an output file name.",
                "+   *",
                "+   * @param existingTarget the existing target",
                "+   * @param flavorPrefix prefix to be used for added flavor",
                "+   * @param fileName filename to be used for added flavor",
                "+   * @param cxxPlatform the C++ platform to compile for",
                "+   * @return the new BuildTarget",
                "+   */",
                "+  public static BuildTarget createBuildTargetForFile(",
                "+      BuildTarget existingTarget, String flavorPrefix, String fileName, CxxPlatform cxxPlatform) {",
                "+    return existingTarget.withAppendedFlavors(",
                "+        cxxPlatform.getFlavor(),",
                "+        InternalFlavor.of(flavorPrefix + Flavor.replaceInvalidCharacters(fileName)));",
                "+  }",
                "+",
                "+  /**",
                "+   * Creates a new BuildTarget, based on an existing target, for a file to be compiled.",
                "+   *",
                "+   * @param existingTarget the existing target",
                "+   * @param src the source file to be compiled",
                "+   * @param cxxPlatform the C++ platform to compile the file for",
                "+   * @return a BuildTarget to compile a D source file to an object file",
                "+   */",
                "+  public static BuildTarget createDCompileBuildTarget(",
                "+      BuildTarget existingTarget, String src, CxxPlatform cxxPlatform) {",
                "+    return createBuildTargetForFile(",
                "+        existingTarget, \"compile-\", DCompileStep.getObjectNameForSourceName(src), cxxPlatform);",
                "+  }",
                "+",
                "+  /**",
                "+   * Creates a {@link NativeLinkable} using sources compiled by the D compiler.",
                "+   *",
                "+   * @param cellPathResolver",
                "+   * @param params build parameters for the build target",
                "+   * @param buildRuleResolver resolver for build rules",
                "+   * @param cxxPlatform the C++ platform to compile for",
                "+   * @param dBuckConfig the Buck configuration for D",
                "+   * @param compilerFlags flags to pass to the compiler",
                "+   * @param sources source files to compile",
                "+   * @return the new build rule",
                "+   */",
                "+  public static CxxLink createNativeLinkable(",
                "+      CellPathResolver cellPathResolver,",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams params,",
                "+      BuildRuleResolver buildRuleResolver,",
                "+      CxxPlatform cxxPlatform,",
                "+      DBuckConfig dBuckConfig,",
                "+      CxxBuckConfig cxxBuckConfig,",
                "+      ImmutableList<String> compilerFlags,",
                "+      SourceList sources,",
                "+      ImmutableList<String> linkerFlags,",
                "+      DIncludes includes) {",
                "+",
                "+    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(buildRuleResolver);",
                "+    SourcePathResolver sourcePathResolver = DefaultSourcePathResolver.from(ruleFinder);",
                "+",
                "+    ImmutableList<SourcePath> sourcePaths =",
                "+        sourcePathsForCompiledSources(",
                "+            buildTarget,",
                "+            projectFilesystem,",
                "+            params,",
                "+            buildRuleResolver,",
                "+            sourcePathResolver,",
                "+            ruleFinder,",
                "+            cxxPlatform,",
                "+            dBuckConfig,",
                "+            compilerFlags,",
                "+            sources,",
                "+            includes);",
                "+",
                "+    // Return a rule to link the .o for the binary together with its",
                "+    // dependencies.",
                "+    return CxxLinkableEnhancer.createCxxLinkableBuildRule(",
                "+        cxxBuckConfig,",
                "+        cxxPlatform,",
                "+        projectFilesystem,",
                "+        buildRuleResolver,",
                "+        sourcePathResolver,",
                "+        ruleFinder,",
                "+        buildTarget,",
                "+        Linker.LinkType.EXECUTABLE,",
                "+        Optional.empty(),",
                "+        BuildTargets.getGenPath(projectFilesystem, buildTarget, \"%s/\" + buildTarget.getShortName()),",
                "+        ImmutableList.of(),",
                "+        Linker.LinkableDepType.STATIC,",
                "+        CxxLinkOptions.of(),",
                "+        FluentIterable.from(params.getBuildDeps()).filter(NativeLinkable.class),",
                "+        /* cxxRuntimeType */ Optional.empty(),",
                "+        /* bundleLoader */ Optional.empty(),",
                "+        ImmutableSet.of(),",
                "+        ImmutableSet.of(),",
                "+        NativeLinkableInput.builder()",
                "+            .addAllArgs(StringArg.from(dBuckConfig.getLinkerFlags()))",
                "+            .addAllArgs(StringArg.from(linkerFlags))",
                "+            .addAllArgs(SourcePathArg.from(sourcePaths))",
                "+            .build(),",
                "+        Optional.empty(),",
                "+        cellPathResolver);",
                "+  }",
                "+",
                "+  public static BuildTarget getSymlinkTreeTarget(BuildTarget baseTarget) {",
                "+    return baseTarget.withAppendedFlavors(SOURCE_LINK_TREE);",
                "+  }",
                "+",
                "+  public static SymlinkTree createSourceSymlinkTree(",
                "+      BuildTarget target,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      SourceList sources) {",
                "+    Preconditions.checkState(target.getFlavors().contains(SOURCE_LINK_TREE));",
                "+    return new SymlinkTree(",
                "+        \"d_src\",",
                "+        target,",
                "+        projectFilesystem,",
                "+        BuildTargets.getGenPath(projectFilesystem, target, \"%s\"),",
                "+        MoreMaps.transformKeys(",
                "+            sources.toNameMap(target, pathResolver, \"srcs\"),",
                "+            MorePaths.toPathFn(projectFilesystem.getRootPath().getFileSystem())),",
                "+        ImmutableMultimap.of(),",
                "+        ruleFinder);",
                "+  }",
                "+",
                "+  private static ImmutableMap<BuildTarget, DLibrary> getTransitiveDLibraryRules(",
                "+      Iterable<? extends BuildRule> inputs) {",
                "+    ImmutableMap.Builder<BuildTarget, DLibrary> libraries = ImmutableMap.builder();",
                "+    new AbstractBreadthFirstTraversal<BuildRule>(inputs) {",
                "+      @Override",
                "+      public Iterable<BuildRule> visit(BuildRule rule) {",
                "+        if (rule instanceof DLibrary) {",
                "+          libraries.put(rule.getBuildTarget(), (DLibrary) rule);",
                "+          return rule.getBuildDeps();",
                "+        }",
                "+        return ImmutableSet.of();",
                "+      }",
                "+    }.start();",
                "+    return libraries.build();",
                "+  }",
                "+",
                "+  /**",
                "+   * Ensures that a DCompileBuildRule exists for the given target, creating a DCompileBuildRule if",
                "+   * neccesary.",
                "+   *",
                "+   * @param baseParams build parameters for the rule",
                "+   * @param buildRuleResolver BuildRuleResolver the rule should be in",
                "+   * @param src the source file to be compiled",
                "+   * @param compilerFlags flags to pass to the compiler",
                "+   * @param compileTarget the target the rule should be for",
                "+   * @param dBuckConfig the Buck configuration for D",
                "+   * @return the build rule",
                "+   */",
                "+  public static DCompileBuildRule requireBuildRule(",
                "+      BuildTarget compileTarget,",
                "+      BuildTarget baseBuildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams baseParams,",
                "+      BuildRuleResolver buildRuleResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      DBuckConfig dBuckConfig,",
                "+      ImmutableList<String> compilerFlags,",
                "+      String name,",
                "+      SourcePath src,",
                "+      DIncludes includes) {",
                "+    return (DCompileBuildRule)",
                "+        buildRuleResolver.computeIfAbsent(",
                "+            compileTarget,",
                "+            ignored -> {",
                "+              Tool compiler = dBuckConfig.getDCompiler();",
                "+",
                "+              Map<BuildTarget, DIncludes> transitiveIncludes = new TreeMap<>();",
                "+              transitiveIncludes.put(baseBuildTarget, includes);",
                "+              for (Map.Entry<BuildTarget, DLibrary> library :",
                "+                  getTransitiveDLibraryRules(baseParams.getBuildDeps()).entrySet()) {",
                "+                transitiveIncludes.put(library.getKey(), library.getValue().getIncludes());",
                "+              }",
                "+",
                "+              ImmutableSortedSet.Builder<BuildRule> depsBuilder = ImmutableSortedSet.naturalOrder();",
                "+              depsBuilder.addAll(BuildableSupport.getDepsCollection(compiler, ruleFinder));",
                "+              depsBuilder.addAll(ruleFinder.filterBuildRuleInputs(src));",
                "+              for (DIncludes dIncludes : transitiveIncludes.values()) {",
                "+                depsBuilder.addAll(dIncludes.getDeps(ruleFinder));",
                "+              }",
                "+              ImmutableSortedSet<BuildRule> deps = depsBuilder.build();",
                "+",
                "+              return new DCompileBuildRule(",
                "+                  compileTarget,",
                "+                  projectFilesystem,",
                "+                  baseParams.withDeclaredDeps(deps).withoutExtraDeps(),",
                "+                  compiler,",
                "+                  ImmutableList.<String>builder()",
                "+                      .addAll(dBuckConfig.getBaseCompilerFlags())",
                "+                      .addAll(compilerFlags)",
                "+                      .build(),",
                "+                  name,",
                "+                  ImmutableSortedSet.of(src),",
                "+                  ImmutableList.copyOf(transitiveIncludes.values()));",
                "+            });",
                "+  }",
                "+",
                "+  /**",
                "+   * Generates BuildTargets and BuildRules to compile D sources to object files, and returns a list",
                "+   * of SourcePaths referring to the generated object files.",
                "+   *",
                "+   * @param sources source files to compile",
                "+   * @param compilerFlags flags to pass to the compiler",
                "+   * @param baseParams build parameters for the compilation",
                "+   * @param buildRuleResolver resolver for build rules",
                "+   * @param sourcePathResolver resolver for source paths",
                "+   * @param cxxPlatform the C++ platform to compile for",
                "+   * @param dBuckConfig the Buck configuration for D",
                "+   * @return SourcePaths of the generated object files",
                "+   */",
                "+  public static ImmutableList<SourcePath> sourcePathsForCompiledSources(",
                "+      BuildTarget baseBuildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams baseParams,",
                "+      BuildRuleResolver buildRuleResolver,",
                "+      SourcePathResolver sourcePathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      CxxPlatform cxxPlatform,",
                "+      DBuckConfig dBuckConfig,",
                "+      ImmutableList<String> compilerFlags,",
                "+      SourceList sources,",
                "+      DIncludes includes) {",
                "+    ImmutableList.Builder<SourcePath> sourcePaths = ImmutableList.builder();",
                "+    for (Map.Entry<String, SourcePath> source :",
                "+        sources.toNameMap(baseBuildTarget, sourcePathResolver, \"srcs\").entrySet()) {",
                "+      BuildTarget compileTarget =",
                "+          createDCompileBuildTarget(baseBuildTarget, source.getKey(), cxxPlatform);",
                "+      BuildRule rule =",
                "+          requireBuildRule(",
                "+              compileTarget,",
                "+              baseBuildTarget,",
                "+              projectFilesystem,",
                "+              baseParams,",
                "+              buildRuleResolver,",
                "+              ruleFinder,",
                "+              dBuckConfig,",
                "+              compilerFlags,",
                "+              source.getKey(),",
                "+              source.getValue(),",
                "+              includes);",
                "+      sourcePaths.add(rule.getSourcePathToOutput());",
                "+    }",
                "+    return sourcePaths.build();",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/d/DDescriptionsProvider.java b/src/com/facebook/buck/features/d/DDescriptionsProvider.java",
                "new file mode 100644",
                "index 0000000000..77a3a95de0",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/d/DDescriptionsProvider.java",
                "@@ -0,0 +1,44 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import com.facebook.buck.config.BuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.DescriptionCreationContext;",
                "+import com.facebook.buck.rules.DescriptionProvider;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import java.util.Arrays;",
                "+import java.util.Collection;",
                "+import org.pf4j.Extension;",
                "+",
                "+@Extension",
                "+public class DDescriptionsProvider implements DescriptionProvider {",
                "+",
                "+  @Override",
                "+  public Collection<Description<?>> getDescriptions(DescriptionCreationContext context) {",
                "+    ToolchainProvider toolchainProvider = context.getToolchainProvider();",
                "+    BuckConfig buckConfig = context.getBuckConfig();",
                "+    DBuckConfig dBuckConfig = new DBuckConfig(buckConfig);",
                "+    CxxBuckConfig cxxBuckConfig = new CxxBuckConfig(buckConfig);",
                "+",
                "+    return Arrays.asList(",
                "+        new DBinaryDescription(toolchainProvider, dBuckConfig, cxxBuckConfig),",
                "+        new DLibraryDescription(toolchainProvider, dBuckConfig, cxxBuckConfig),",
                "+        new DTestDescription(toolchainProvider, dBuckConfig, cxxBuckConfig));",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/d/DLibrary.java b/src/com/facebook/buck/features/d/DLibrary.java",
                "new file mode 100644",
                "index 0000000000..9a5f9a23cd",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/d/DLibrary.java",
                "@@ -0,0 +1,96 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import com.facebook.buck.cxx.Archive;",
                "+import com.facebook.buck.cxx.CxxDescriptionEnhancer;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.NoopBuildRuleWithDeclaredAndExtraDeps;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.google.common.collect.FluentIterable;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+",
                "+public class DLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps implements NativeLinkable {",
                "+",
                "+  private final BuildRuleResolver buildRuleResolver;",
                "+  private final DIncludes includes;",
                "+",
                "+  public DLibrary(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams params,",
                "+      BuildRuleResolver buildRuleResolver,",
                "+      DIncludes includes) {",
                "+    super(buildTarget, projectFilesystem, params);",
                "+    this.buildRuleResolver = buildRuleResolver;",
                "+    this.includes = includes;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Iterable<NativeLinkable> getNativeLinkableDeps(BuildRuleResolver ruleResolver) {",
                "+    return ImmutableList.of();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Iterable<NativeLinkable> getNativeLinkableExportedDeps(BuildRuleResolver ruleResolver) {",
                "+    return FluentIterable.from(getDeclaredDeps()).filter(NativeLinkable.class);",
                "+  }",
                "+",
                "+  @Override",
                "+  public NativeLinkableInput getNativeLinkableInput(",
                "+      CxxPlatform cxxPlatform,",
                "+      Linker.LinkableDepType type,",
                "+      boolean forceLinkWhole,",
                "+      ImmutableSet<LanguageExtensions> languageExtensions,",
                "+      BuildRuleResolver ruleResolver) {",
                "+    Archive archive =",
                "+        (Archive)",
                "+            buildRuleResolver.requireRule(",
                "+                getBuildTarget()",
                "+                    .withAppendedFlavors(",
                "+                        cxxPlatform.getFlavor(), CxxDescriptionEnhancer.STATIC_FLAVOR));",
                "+    return NativeLinkableInput.of(",
                "+        ImmutableList.of(archive.toArg()), ImmutableSet.of(), ImmutableSet.of());",
                "+  }",
                "+",
                "+  @Override",
                "+  public NativeLinkable.Linkage getPreferredLinkage(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+    return Linkage.STATIC;",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+    return ImmutableMap.of();",
                "+  }",
                "+",
                "+  public DIncludes getIncludes() {",
                "+    buildRuleResolver.requireRule(",
                "+        getBuildTarget().withAppendedFlavors(DDescriptionUtils.SOURCE_LINK_TREE));",
                "+    return includes;",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/d/DLibraryDescription.java b/src/com/facebook/buck/features/d/DLibraryDescription.java",
                "new file mode 100644",
                "index 0000000000..ab908358b5",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/d/DLibraryDescription.java",
                "@@ -0,0 +1,194 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import com.facebook.buck.cxx.Archive;",
                "+import com.facebook.buck.cxx.CxxDescriptionEnhancer;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "+import com.facebook.buck.cxx.toolchain.PicType;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleCreationContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                "+import com.facebook.buck.rules.CommonDescriptionArg;",
                "+import com.facebook.buck.rules.DefaultBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.HasDeclaredDeps;",
                "+import com.facebook.buck.rules.ImplicitDepsInferringDescription;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.facebook.buck.versions.VersionPropagator;",
                "+import com.google.common.collect.ImmutableCollection;",
                "+import com.google.common.collect.ImmutableList;",
                "+import java.nio.file.Path;",
                "+import java.util.Optional;",
                "+import org.immutables.value.Value;",
                "+",
                "+public class DLibraryDescription",
                "+    implements Description<DLibraryDescriptionArg>,",
                "+        ImplicitDepsInferringDescription<DLibraryDescriptionArg>,",
                "+        VersionPropagator<DLibraryDescriptionArg> {",
                "+",
                "+  private final ToolchainProvider toolchainProvider;",
                "+  private final DBuckConfig dBuckConfig;",
                "+  private final CxxBuckConfig cxxBuckConfig;",
                "+",
                "+  public DLibraryDescription(",
                "+      ToolchainProvider toolchainProvider, DBuckConfig dBuckConfig, CxxBuckConfig cxxBuckConfig) {",
                "+    this.toolchainProvider = toolchainProvider;",
                "+    this.dBuckConfig = dBuckConfig;",
                "+    this.cxxBuckConfig = cxxBuckConfig;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Class<DLibraryDescriptionArg> getConstructorArgType() {",
                "+    return DLibraryDescriptionArg.class;",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuildRule createBuildRule(",
                "+      BuildRuleCreationContext context,",
                "+      BuildTarget buildTarget,",
                "+      BuildRuleParams params,",
                "+      DLibraryDescriptionArg args) {",
                "+    BuildRuleResolver buildRuleResolver = context.getBuildRuleResolver();",
                "+    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(buildRuleResolver);",
                "+    SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);",
                "+    ProjectFilesystem projectFilesystem = context.getProjectFilesystem();",
                "+",
                "+    if (buildTarget.getFlavors().contains(DDescriptionUtils.SOURCE_LINK_TREE)) {",
                "+      return DDescriptionUtils.createSourceSymlinkTree(",
                "+          buildTarget, projectFilesystem, pathResolver, ruleFinder, args.getSrcs());",
                "+    }",
                "+",
                "+    BuildTarget sourceTreeTarget =",
                "+        buildTarget.withAppendedFlavors(DDescriptionUtils.SOURCE_LINK_TREE);",
                "+    DIncludes dIncludes =",
                "+        DIncludes.builder()",
                "+            .setLinkTree(DefaultBuildTargetSourcePath.of(sourceTreeTarget))",
                "+            .setSources(args.getSrcs().getPaths())",
                "+            .build();",
                "+",
                "+    if (buildTarget.getFlavors().contains(CxxDescriptionEnhancer.STATIC_FLAVOR)) {",
                "+      buildRuleResolver.requireRule(sourceTreeTarget);",
                "+      return createStaticLibraryBuildRule(",
                "+          buildTarget,",
                "+          projectFilesystem,",
                "+          params,",
                "+          buildRuleResolver,",
                "+          pathResolver,",
                "+          ruleFinder,",
                "+          /* compilerFlags */ ImmutableList.of(),",
                "+          args.getSrcs(),",
                "+          dIncludes,",
                "+          PicType.PDC);",
                "+    }",
                "+",
                "+    return new DLibrary(buildTarget, projectFilesystem, params, buildRuleResolver, dIncludes);",
                "+  }",
                "+",
                "+  /** @return a BuildRule that creates a static library. */",
                "+  private BuildRule createStaticLibraryBuildRule(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams params,",
                "+      BuildRuleResolver ruleResolver,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      ImmutableList<String> compilerFlags,",
                "+      SourceList sources,",
                "+      DIncludes dIncludes,",
                "+      PicType pic) {",
                "+",
                "+    CxxPlatform cxxPlatform = getCxxPlatform();",
                "+",
                "+    ImmutableList<SourcePath> compiledSources =",
                "+        DDescriptionUtils.sourcePathsForCompiledSources(",
                "+            buildTarget,",
                "+            projectFilesystem,",
                "+            params,",
                "+            ruleResolver,",
                "+            pathResolver,",
                "+            ruleFinder,",
                "+            cxxPlatform,",
                "+            dBuckConfig,",
                "+            compilerFlags,",
                "+            sources,",
                "+            dIncludes);",
                "+",
                "+    // Write a build rule to create the archive for this library.",
                "+    BuildTarget staticTarget =",
                "+        CxxDescriptionEnhancer.createStaticLibraryBuildTarget(",
                "+            buildTarget, cxxPlatform.getFlavor(), pic);",
                "+",
                "+    Path staticLibraryPath =",
                "+        CxxDescriptionEnhancer.getStaticLibraryPath(",
                "+            projectFilesystem,",
                "+            buildTarget,",
                "+            cxxPlatform.getFlavor(),",
                "+            pic,",
                "+            Optional.empty(),",
                "+            cxxPlatform.getStaticLibraryExtension(),",
                "+            cxxBuckConfig.isUniqueLibraryNameEnabled());",
                "+",
                "+    return Archive.from(",
                "+        staticTarget,",
                "+        projectFilesystem,",
                "+        ruleResolver,",
                "+        ruleFinder,",
                "+        cxxPlatform,",
                "+        cxxBuckConfig.getArchiveContents(),",
                "+        staticLibraryPath,",
                "+        compiledSources,",
                "+        /* cacheable */ true);",
                "+  }",
                "+",
                "+  @Override",
                "+  public void findDepsForTargetFromConstructorArgs(",
                "+      BuildTarget buildTarget,",
                "+      CellPathResolver cellRoots,",
                "+      DLibraryDescriptionArg constructorArg,",
                "+      ImmutableCollection.Builder<BuildTarget> extraDepsBuilder,",
                "+      ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "+    extraDepsBuilder.addAll(CxxPlatforms.getParseTimeDeps(getCxxPlatform()));",
                "+  }",
                "+",
                "+  private CxxPlatform getCxxPlatform() {",
                "+    CxxPlatformsProvider cxxPlatformsProviderFactory =",
                "+        toolchainProvider.getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class);",
                "+    return cxxPlatformsProviderFactory.getDefaultCxxPlatform();",
                "+  }",
                "+",
                "+  @BuckStyleImmutable",
                "+  @Value.Immutable",
                "+  interface AbstractDLibraryDescriptionArg extends CommonDescriptionArg, HasDeclaredDeps {",
                "+    SourceList getSrcs();",
                "+",
                "+    ImmutableList<String> getLinkerFlags();",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/d/DModule.java b/src/com/facebook/buck/features/d/DModule.java",
                "new file mode 100644",
                "index 0000000000..b49c8c81e0",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/d/DModule.java",
                "@@ -0,0 +1,23 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import com.facebook.buck.module.BuckModule;",
                "+",
                "+/** A modules that provides D build rules. */",
                "+@BuckModule",
                "+public class DModule {}",
                "diff --git a/src/com/facebook/buck/features/d/DTest.java b/src/com/facebook/buck/features/d/DTest.java",
                "new file mode 100644",
                "index 0000000000..0708c38d46",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/d/DTest.java",
                "@@ -0,0 +1,242 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import com.facebook.buck.io.BuildCellRelativePath;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.rules.AbstractBuildRuleWithDeclaredAndExtraDeps;",
                "+import com.facebook.buck.rules.BuildContext;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildableContext;",
                "+import com.facebook.buck.rules.ExternalTestRunnerRule;",
                "+import com.facebook.buck.rules.ExternalTestRunnerTestSpec;",
                "+import com.facebook.buck.rules.ForwardingBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.HasRuntimeDeps;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.TestRule;",
                "+import com.facebook.buck.step.ExecutionContext;",
                "+import com.facebook.buck.step.Step;",
                "+import com.facebook.buck.step.fs.MakeCleanDirectoryStep;",
                "+import com.facebook.buck.test.TestCaseSummary;",
                "+import com.facebook.buck.test.TestResultSummary;",
                "+import com.facebook.buck.test.TestResults;",
                "+import com.facebook.buck.test.TestRunningOptions;",
                "+import com.facebook.buck.test.result.type.ResultType;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.io.FileInputStream;",
                "+import java.io.IOException;",
                "+import java.io.ObjectInputStream;",
                "+import java.nio.file.Path;",
                "+import java.util.Optional;",
                "+import java.util.concurrent.Callable;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "+import java.util.stream.Stream;",
                "+",
                "+@SuppressWarnings(\"PMD.TestClassWithoutTestCases\")",
                "+public class DTest extends AbstractBuildRuleWithDeclaredAndExtraDeps",
                "+    implements ExternalTestRunnerRule, HasRuntimeDeps, TestRule {",
                "+  private ImmutableSortedSet<String> contacts;",
                "+  private ImmutableSortedSet<String> labels;",
                "+  private final BuildRule testBinaryBuildRule;",
                "+  private final Optional<Long> testRuleTimeoutMs;",
                "+",
                "+  public DTest(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams params,",
                "+      BuildRule testBinaryBuildRule,",
                "+      ImmutableSortedSet<String> contacts,",
                "+      ImmutableSortedSet<String> labels,",
                "+      Optional<Long> testRuleTimeoutMs) {",
                "+    super(buildTarget, projectFilesystem, params);",
                "+    this.contacts = contacts;",
                "+    this.labels = labels;",
                "+    this.testRuleTimeoutMs = testRuleTimeoutMs;",
                "+    this.testBinaryBuildRule = testBinaryBuildRule;",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableList<Step> getBuildSteps(",
                "+      BuildContext context, BuildableContext buildableContext) {",
                "+    return ImmutableList.of();",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableSet<String> getContacts() {",
                "+    return contacts;",
                "+  }",
                "+",
                "+  private ImmutableList<String> getExecutableCommand(SourcePathResolver pathResolver) {",
                "+    return ImmutableList.of(pathResolver.getAbsolutePath(getSourcePathToOutput()).toString());",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableSet<String> getLabels() {",
                "+    return labels;",
                "+  }",
                "+",
                "+  /** @return the path to which the test commands output is written. */",
                "+  protected Path getPathToTestExitCode() {",
                "+    return getPathToTestOutputDirectory().resolve(\"exitCode\");",
                "+  }",
                "+",
                "+  /** @return the path to which the test commands output is written. */",
                "+  protected Path getPathToTestOutput() {",
                "+    return getPathToTestOutputDirectory().resolve(\"output\");",
                "+  }",
                "+",
                "+  @Override",
                "+  public Path getPathToTestOutputDirectory() {",
                "+    return BuildTargets.getGenPath(getProjectFilesystem(), getBuildTarget(), \"__test_%s_output__\");",
                "+  }",
                "+",
                "+  private ImmutableList<String> getShellCommand(SourcePathResolver pathResolver) {",
                "+    return getExecutableCommand(pathResolver);",
                "+  }",
                "+",
                "+  @Override",
                "+  public Callable<TestResults> interpretTestResults(",
                "+      ExecutionContext executionContext,",
                "+      SourcePathResolver pathResolver,",
                "+      boolean isUsingTestSelectors) {",
                "+    return () -> {",
                "+      ResultType resultType = ResultType.FAILURE;",
                "+",
                "+      // Successful exit indicates success.",
                "+      try (ObjectInputStream objectIn =",
                "+          new ObjectInputStream(",
                "+              new FileInputStream(",
                "+                  getProjectFilesystem().resolve(getPathToTestExitCode()).toFile()))) {",
                "+        int exitCode = objectIn.readInt();",
                "+        if (exitCode == 0) {",
                "+          resultType = ResultType.SUCCESS;",
                "+        }",
                "+      } catch (IOException e) {",
                "+        // Any IO error means something went awry, so it's a failure.",
                "+        resultType = ResultType.FAILURE;",
                "+      }",
                "+",
                "+      String testOutput =",
                "+          getProjectFilesystem().readFileIfItExists(getPathToTestOutput()).orElse(\"\");",
                "+      String message = \"\";",
                "+      String stackTrace = \"\";",
                "+      String testName = \"\";",
                "+      if (resultType == ResultType.FAILURE && !testOutput.isEmpty()) {",
                "+        // We don't get any information on successful runs, but failures usually come with",
                "+        // some information. This code parses it.",
                "+        int firstNewline = testOutput.indexOf('\\n');",
                "+        String firstLine = firstNewline == -1 ? testOutput : testOutput.substring(0, firstNewline);",
                "+        // First line has format <Exception name>@<location>: <message>",
                "+        // Use <location> as test name, and <message> as message.",
                "+        Pattern firstLinePattern = Pattern.compile(\"^[^@]*@([^:]*): (.*)\");",
                "+        Matcher m = firstLinePattern.matcher(firstLine);",
                "+        if (m.matches()) {",
                "+          testName = m.group(1);",
                "+          message = m.group(2);",
                "+        }",
                "+        // The whole output is actually a stack trace.",
                "+        stackTrace = testOutput;",
                "+      }",
                "+",
                "+      TestResultSummary summary =",
                "+          new TestResultSummary(",
                "+              getBuildTarget().getShortName(),",
                "+              testName,",
                "+              resultType,",
                "+              /* time */ 0,",
                "+              message,",
                "+              stackTrace,",
                "+              testOutput,",
                "+              /* stderr */ \"\");",
                "+",
                "+      return TestResults.of(",
                "+          getBuildTarget(),",
                "+          ImmutableList.of(new TestCaseSummary(\"main\", ImmutableList.of(summary))),",
                "+          contacts,",
                "+          labels.stream().map(Object::toString).collect(ImmutableSet.toImmutableSet()));",
                "+    };",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableList<Step> runTests(",
                "+      ExecutionContext executionContext,",
                "+      TestRunningOptions options,",
                "+      BuildContext buildContext,",
                "+      TestReportingCallback testReportingCallback) {",
                "+    return new ImmutableList.Builder<Step>()",
                "+        .addAll(",
                "+            MakeCleanDirectoryStep.of(",
                "+                BuildCellRelativePath.fromCellRelativePath(",
                "+                    buildContext.getBuildCellRootPath(),",
                "+                    getProjectFilesystem(),",
                "+                    getPathToTestOutputDirectory())))",
                "+        .add(",
                "+            new DTestStep(",
                "+                getProjectFilesystem(),",
                "+                getShellCommand(buildContext.getSourcePathResolver()),",
                "+                getPathToTestExitCode(),",
                "+                testRuleTimeoutMs,",
                "+                getPathToTestOutput()))",
                "+        .build();",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean runTestSeparately() {",
                "+    return false;",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean supportsStreamingTests() {",
                "+    return false;",
                "+  }",
                "+",
                "+  @Override",
                "+  public ExternalTestRunnerTestSpec getExternalTestRunnerSpec(",
                "+      ExecutionContext executionContext,",
                "+      TestRunningOptions testRunningOptions,",
                "+      BuildContext buildContext) {",
                "+    return ExternalTestRunnerTestSpec.builder()",
                "+        .setTarget(getBuildTarget())",
                "+        .setType(\"dunit\")",
                "+        .setCommand(getShellCommand(buildContext.getSourcePathResolver()))",
                "+        .setLabels(getLabels())",
                "+        .setContacts(getContacts())",
                "+        .build();",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath getSourcePathToOutput() {",
                "+    return ForwardingBuildTargetSourcePath.of(",
                "+        getBuildTarget(), Preconditions.checkNotNull(testBinaryBuildRule.getSourcePathToOutput()));",
                "+  }",
                "+",
                "+  @Override",
                "+  public Stream<BuildTarget> getRuntimeDeps(SourcePathRuleFinder ruleFinder) {",
                "+    // Return the actual executable as a runtime dependency.",
                "+    // Without this, the file is not written when we get a cache hit.",
                "+    return Stream.of(testBinaryBuildRule.getBuildTarget());",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/d/DTestDescription.java b/src/com/facebook/buck/features/d/DTestDescription.java",
                "new file mode 100644",
                "index 0000000000..85925db786",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/d/DTestDescription.java",
                "@@ -0,0 +1,156 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import static com.facebook.buck.features.d.DDescriptionUtils.SOURCE_LINK_TREE;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleCreationContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                "+import com.facebook.buck.rules.CommonDescriptionArg;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.HasContacts;",
                "+import com.facebook.buck.rules.HasDeclaredDeps;",
                "+import com.facebook.buck.rules.HasTestTimeout;",
                "+import com.facebook.buck.rules.ImplicitDepsInferringDescription;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.SymlinkTree;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.facebook.buck.versions.VersionRoot;",
                "+import com.google.common.collect.ImmutableCollection;",
                "+import com.google.common.collect.ImmutableList;",
                "+import java.util.Optional;",
                "+import org.immutables.value.Value;",
                "+",
                "+public class DTestDescription",
                "+    implements Description<DTestDescriptionArg>,",
                "+        ImplicitDepsInferringDescription<DTestDescription.AbstractDTestDescriptionArg>,",
                "+        VersionRoot<DTestDescriptionArg> {",
                "+",
                "+  private final ToolchainProvider toolchainProvider;",
                "+  private final DBuckConfig dBuckConfig;",
                "+  private final CxxBuckConfig cxxBuckConfig;",
                "+",
                "+  public DTestDescription(",
                "+      ToolchainProvider toolchainProvider, DBuckConfig dBuckConfig, CxxBuckConfig cxxBuckConfig) {",
                "+    this.toolchainProvider = toolchainProvider;",
                "+    this.dBuckConfig = dBuckConfig;",
                "+    this.cxxBuckConfig = cxxBuckConfig;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Class<DTestDescriptionArg> getConstructorArgType() {",
                "+    return DTestDescriptionArg.class;",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuildRule createBuildRule(",
                "+      BuildRuleCreationContext context,",
                "+      BuildTarget buildTarget,",
                "+      BuildRuleParams params,",
                "+      DTestDescriptionArg args) {",
                "+",
                "+    BuildRuleResolver buildRuleResolver = context.getBuildRuleResolver();",
                "+    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(buildRuleResolver);",
                "+    SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);",
                "+    ProjectFilesystem projectFilesystem = context.getProjectFilesystem();",
                "+",
                "+    if (buildTarget.getFlavors().contains(SOURCE_LINK_TREE)) {",
                "+      return DDescriptionUtils.createSourceSymlinkTree(",
                "+          buildTarget, projectFilesystem, pathResolver, ruleFinder, args.getSrcs());",
                "+    }",
                "+",
                "+    SymlinkTree sourceTree =",
                "+        (SymlinkTree)",
                "+            buildRuleResolver.requireRule(DDescriptionUtils.getSymlinkTreeTarget(buildTarget));",
                "+",
                "+    CxxPlatform cxxPlatform = getCxxPlatform();",
                "+",
                "+    // Create a helper rule to build the test binary.",
                "+    // The rule needs its own target so that we can depend on it without creating cycles.",
                "+    BuildTarget binaryTarget =",
                "+        DDescriptionUtils.createBuildTargetForFile(",
                "+            buildTarget, \"build-\", buildTarget.getFullyQualifiedName(), cxxPlatform);",
                "+",
                "+    BuildRule binaryRule =",
                "+        DDescriptionUtils.createNativeLinkable(",
                "+            context.getCellPathResolver(),",
                "+            binaryTarget,",
                "+            projectFilesystem,",
                "+            params,",
                "+            buildRuleResolver,",
                "+            cxxPlatform,",
                "+            dBuckConfig,",
                "+            cxxBuckConfig,",
                "+            ImmutableList.of(\"-unittest\"),",
                "+            args.getSrcs(),",
                "+            args.getLinkerFlags(),",
                "+            DIncludes.builder()",
                "+                .setLinkTree(sourceTree.getSourcePathToOutput())",
                "+                .addAllSources(args.getSrcs().getPaths())",
                "+                .build());",
                "+    buildRuleResolver.addToIndex(binaryRule);",
                "+",
                "+    return new DTest(",
                "+        buildTarget,",
                "+        projectFilesystem,",
                "+        params.copyAppendingExtraDeps(ImmutableList.of(binaryRule)),",
                "+        binaryRule,",
                "+        args.getContacts(),",
                "+        args.getLabels(),",
                "+        args.getTestRuleTimeoutMs()",
                "+            .map(Optional::of)",
                "+            .orElse(dBuckConfig.getDelegate().getDefaultTestRuleTimeoutMs()));",
                "+  }",
                "+",
                "+  @Override",
                "+  public void findDepsForTargetFromConstructorArgs(",
                "+      BuildTarget buildTarget,",
                "+      CellPathResolver cellRoots,",
                "+      AbstractDTestDescriptionArg constructorArg,",
                "+      ImmutableCollection.Builder<BuildTarget> extraDepsBuilder,",
                "+      ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "+    extraDepsBuilder.addAll(CxxPlatforms.getParseTimeDeps(getCxxPlatform()));",
                "+  }",
                "+",
                "+  private CxxPlatform getCxxPlatform() {",
                "+    CxxPlatformsProvider cxxPlatformsProviderFactory =",
                "+        toolchainProvider.getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class);",
                "+    return cxxPlatformsProviderFactory.getDefaultCxxPlatform();",
                "+  }",
                "+",
                "+  @BuckStyleImmutable",
                "+  @Value.Immutable",
                "+  interface AbstractDTestDescriptionArg",
                "+      extends CommonDescriptionArg, HasContacts, HasDeclaredDeps, HasTestTimeout {",
                "+    SourceList getSrcs();",
                "+",
                "+    ImmutableList<String> getLinkerFlags();",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/d/DTestStep.java b/src/com/facebook/buck/features/d/DTestStep.java",
                "new file mode 100644",
                "index 0000000000..44cac25dc6",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/d/DTestStep.java",
                "@@ -0,0 +1,58 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.step.AbstractTestStep;",
                "+import com.google.common.collect.ImmutableList;",
                "+import java.nio.file.Path;",
                "+import java.util.Optional;",
                "+",
                "+/**",
                "+ * Runs a D test command, remembering its exit code and streaming its output to a given output file.",
                "+ */",
                "+public class DTestStep extends AbstractTestStep {",
                "+",
                "+  private static final String NAME = \"d test\";",
                "+",
                "+  public DTestStep(",
                "+      ProjectFilesystem filesystem,",
                "+      ImmutableList<String> command,",
                "+      Path exitCode,",
                "+      Optional<Long> testRuleTimeoutMs,",
                "+      Path output) {",
                "+    super(",
                "+        NAME,",
                "+        filesystem,",
                "+        Optional.empty(),",
                "+        command,",
                "+        Optional.empty(),",
                "+        exitCode,",
                "+        testRuleTimeoutMs,",
                "+        output);",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean equals(Object o) {",
                "+    return (o instanceof DTestStep) && super.equals(o);",
                "+  }",
                "+",
                "+  @Override",
                "+  public int hashCode() {",
                "+    return super.hashCode();",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/d/Assumptions.java b/test/com/facebook/buck/features/d/Assumptions.java",
                "new file mode 100644",
                "index 0000000000..77d4127cce",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/Assumptions.java",
                "@@ -0,0 +1,39 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import static org.junit.Assume.assumeNoException;",
                "+",
                "+import com.facebook.buck.config.FakeBuckConfig;",
                "+",
                "+abstract class Assumptions {",
                "+  public static void assumeDCompilerUsable() {",
                "+    // The methods that we use to figure out how to invoke the D compiler throw when",
                "+    // they cannot determine how to invoke the compiler. Conversely, if they don't throw,",
                "+    // the compiler should be usable. So we check that none of them throw.",
                "+    Throwable exception = null;",
                "+    try {",
                "+      DBuckConfig dBuckConfig = new DBuckConfig(FakeBuckConfig.builder().build());",
                "+      dBuckConfig.getDCompiler();",
                "+      dBuckConfig.getBaseCompilerFlags();",
                "+      dBuckConfig.getLinkerFlags();",
                "+    } catch (Exception e) {",
                "+      exception = e;",
                "+    }",
                "+    assumeNoException(exception);",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/d/BUCK b/test/com/facebook/buck/features/d/BUCK",
                "new file mode 100644",
                "index 0000000000..451f807e93",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/BUCK",
                "@@ -0,0 +1,272 @@",
                "+load(\"//tools/build_rules:java_rules.bzl\", \"standard_java_test\")",
                "+",
                "+java_library(",
                "+    name = \"testutil\",",
                "+    srcs = glob(",
                "+        [\"*.java\"],",
                "+        exclude = [",
                "+            \"*Benchmark.java\",",
                "+            \"*Test.java\",",
                "+        ],",
                "+    ),",
                "+    visibility = [\"//test/...\"],",
                "+    deps = [",
                "+        \"//src-gen:thrift\",",
                "+        \"//src/com/facebook/buck/android:helpers\",",
                "+        \"//src/com/facebook/buck/android:rules\",",
                "+        \"//src/com/facebook/buck/android:split_dex\",",
                "+        \"//src/com/facebook/buck/android:steps\",",
                "+        \"//src/com/facebook/buck/android:utils\",",
                "+        \"//src/com/facebook/buck/android/aapt:aapt\",",
                "+        \"//src/com/facebook/buck/android/redex:options\",",
                "+        \"//src/com/facebook/buck/apple/project_generator:project_generator\",",
                "+        \"//src/com/facebook/buck/apple/xcode:xcode\",",
                "+        \"//src/com/facebook/buck/artifact_cache:artifact_cache\",",
                "+        \"//src/com/facebook/buck/cli:cli\",",
                "+        \"//src/com/facebook/buck/config:config\",",
                "+        \"//src/com/facebook/buck/counters:counters\",",
                "+        \"//src/com/facebook/buck/cxx:rules\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain:toolchain\",",
                "+        \"//src/com/facebook/buck/distributed:distributed\",",
                "+        \"//src/com/facebook/buck/doctor/config:config\",",
                "+        \"//src/com/facebook/buck/event:event\",",
                "+        \"//src/com/facebook/buck/event:interfaces\",",
                "+        \"//src/com/facebook/buck/event/external:external_lib\",",
                "+        \"//src/com/facebook/buck/event/listener:BroadcastEventListener\",",
                "+        \"//src/com/facebook/buck/event/listener:listener\",",
                "+        \"//src/com/facebook/buck/features/d:d\",",
                "+        \"//src/com/facebook/buck/graph:graph\",",
                "+        \"//src/com/facebook/buck/io:executable-finder\",",
                "+        \"//src/com/facebook/buck/io:io\",",
                "+        \"//src/com/facebook/buck/io:transport\",",
                "+        \"//src/com/facebook/buck/io:watchman\",",
                "+        \"//src/com/facebook/buck/json:json\",",
                "+        \"//src/com/facebook/buck/jvm/core:core\",",
                "+        \"//src/com/facebook/buck/jvm/java:config\",",
                "+        \"//src/com/facebook/buck/jvm/java:javac-sink\",",
                "+        \"//src/com/facebook/buck/jvm/java:packagefinder\",",
                "+        \"//src/com/facebook/buck/jvm/java:rules\",",
                "+        \"//src/com/facebook/buck/jvm/java:steps\",",
                "+        \"//src/com/facebook/buck/jvm/java:support\",",
                "+        \"//src/com/facebook/buck/jvm/java/abi/source/api:api\",",
                "+        \"//src/com/facebook/buck/jvm/java/autodeps:SymbolExtractor\",",
                "+        \"//src/com/facebook/buck/jvm/java/autodeps:autodeps\",",
                "+        \"//src/com/facebook/buck/jvm/java/classes:classes\",",
                "+        \"//src/com/facebook/buck/jvm/kotlin:kotlin\",",
                "+        \"//src/com/facebook/buck/jvm/scala:scala\",",
                "+        \"//src/com/facebook/buck/log:log\",",
                "+        \"//src/com/facebook/buck/maven:util\",",
                "+        \"//src/com/facebook/buck/model:build_id\",",
                "+        \"//src/com/facebook/buck/model:model\",",
                "+        \"//src/com/facebook/buck/parser:config\",",
                "+        \"//src/com/facebook/buck/parser:parser\",",
                "+        \"//src/com/facebook/buck/parser:rule_pattern\",",
                "+        \"//src/com/facebook/buck/query:query\",",
                "+        \"//src/com/facebook/buck/rules:cli\",",
                "+        \"//src/com/facebook/buck/rules:rules\",",
                "+        \"//src/com/facebook/buck/rules/args:args\",",
                "+        \"//src/com/facebook/buck/rules/coercer:coercer\",",
                "+        \"//src/com/facebook/buck/rules/coercer:interface\",",
                "+        \"//src/com/facebook/buck/rules/keys:keys\",",
                "+        \"//src/com/facebook/buck/rules/macros:macros\",",
                "+        \"//src/com/facebook/buck/rules/macros:types\",",
                "+        \"//src/com/facebook/buck/rules/query:types\",",
                "+        \"//src/com/facebook/buck/shell:rules\",",
                "+        \"//src/com/facebook/buck/shell:steps\",",
                "+        \"//src/com/facebook/buck/shell:worker\",",
                "+        \"//src/com/facebook/buck/shell:worker_tool\",",
                "+        \"//src/com/facebook/buck/slb:slb\",",
                "+        \"//src/com/facebook/buck/step:step\",",
                "+        \"//src/com/facebook/buck/swift:swift\",",
                "+        \"//src/com/facebook/buck/test:test\",",
                "+        \"//src/com/facebook/buck/test/result/type:type\",",
                "+        \"//src/com/facebook/buck/test/selectors:selectors\",",
                "+        \"//src/com/facebook/buck/util:exceptions\",",
                "+        \"//src/com/facebook/buck/util:io\",",
                "+        \"//src/com/facebook/buck/util:packaged_resource\",",
                "+        \"//src/com/facebook/buck/util:process_executor\",",
                "+        \"//src/com/facebook/buck/util:util\",",
                "+        \"//src/com/facebook/buck/util/cache:cache\",",
                "+        \"//src/com/facebook/buck/util/concurrent:concurrent\",",
                "+        \"//src/com/facebook/buck/util/environment:environment\",",
                "+        \"//src/com/facebook/buck/util/environment:platform\",",
                "+        \"//src/com/facebook/buck/util/immutables:immutables\",",
                "+        \"//src/com/facebook/buck/util/network/hostname:hostname\",",
                "+        \"//src/com/facebook/buck/util/sha1:sha1\",",
                "+        \"//src/com/facebook/buck/util/trace:trace\",",
                "+        \"//src/com/facebook/buck/util/unit:unit\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_config\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_generator\",",
                "+        \"//src/com/facebook/buck/versions:translator\",",
                "+        \"//src/com/facebook/buck/versions:types\",",
                "+        \"//src/com/facebook/buck/versions:versions\",",
                "+        \"//src/com/facebook/buck/worker:worker_job_params\",",
                "+        \"//src/com/facebook/buck/worker:worker_pool_factory\",",
                "+        \"//src/com/facebook/buck/worker:worker_process\",",
                "+        \"//test/com/facebook/buck/config:FakeBuckConfig\",",
                "+        \"//test/com/facebook/buck/cxx/toolchain:testutil\",",
                "+        \"//test/com/facebook/buck/io/filesystem:testutil\",",
                "+        \"//test/com/facebook/buck/rules:testutil\",",
                "+        \"//test/com/facebook/buck/testutil/integration:util\",",
                "+        \"//test/com/facebook/buck/toolchain/impl:testutil\",",
                "+        \"//third-party/java/aether:aether-api\",",
                "+        \"//third-party/java/android:ddmlib\",",
                "+        \"//third-party/java/android:tools-sdk-common\",",
                "+        \"//third-party/java/aosp:aosp\",",
                "+        \"//third-party/java/args4j:args4j\",",
                "+        \"//third-party/java/asm:asm\",",
                "+        \"//third-party/java/dd-plist:dd-plist\",",
                "+        \"//third-party/java/guava:guava\",",
                "+        \"//third-party/java/hamcrest:java-hamcrest\",",
                "+        \"//third-party/java/immutables:immutables\",",
                "+        \"//third-party/java/infer-annotations:infer-annotations\",",
                "+        \"//third-party/java/jackson:jackson-annotations\",",
                "+        \"//third-party/java/jackson:jackson-core\",",
                "+        \"//third-party/java/jackson:jackson-databind\",",
                "+        \"//third-party/java/jna:jna\",",
                "+        \"//third-party/java/jsr:jsr305\",",
                "+        \"//third-party/java/junit:junit\",",
                "+        \"//third-party/java/maven:maven-model\",",
                "+        \"//third-party/java/nailgun:nailgun\",",
                "+        \"//third-party/java/nuprocess:nuprocess\",",
                "+        \"//third-party/java/okhttp:okhttp\",",
                "+        \"//third-party/java/okio:okio\",",
                "+        \"//third-party/java/stringtemplate:stringtemplate\",",
                "+        \"//third-party/java/thrift:libthrift\",",
                "+    ],",
                "+)",
                "+",
                "+standard_java_test(",
                "+    name = \"d\",",
                "+    with_test_data = True,",
                "+    deps = [",
                "+        \"//src-gen:thrift\",",
                "+        \"//src/com/facebook/buck/android:helpers\",",
                "+        \"//src/com/facebook/buck/android:rules\",",
                "+        \"//src/com/facebook/buck/android:split_dex\",",
                "+        \"//src/com/facebook/buck/android:steps\",",
                "+        \"//src/com/facebook/buck/android:utils\",",
                "+        \"//src/com/facebook/buck/android/aapt:aapt\",",
                "+        \"//src/com/facebook/buck/android/redex:options\",",
                "+        \"//src/com/facebook/buck/apple/project_generator:project_generator\",",
                "+        \"//src/com/facebook/buck/apple/xcode:xcode\",",
                "+        \"//src/com/facebook/buck/artifact_cache:artifact_cache\",",
                "+        \"//src/com/facebook/buck/cli:cli\",",
                "+        \"//src/com/facebook/buck/config:config\",",
                "+        \"//src/com/facebook/buck/counters:counters\",",
                "+        \"//src/com/facebook/buck/cxx:rules\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/impl:impl\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/linker:linker\",",
                "+        \"//src/com/facebook/buck/distributed:distributed\",",
                "+        \"//src/com/facebook/buck/doctor/config:config\",",
                "+        \"//src/com/facebook/buck/event:event\",",
                "+        \"//src/com/facebook/buck/event:interfaces\",",
                "+        \"//src/com/facebook/buck/event/external:external_lib\",",
                "+        \"//src/com/facebook/buck/event/listener:BroadcastEventListener\",",
                "+        \"//src/com/facebook/buck/event/listener:listener\",",
                "+        \"//src/com/facebook/buck/features/d:d\",",
                "+        \"//src/com/facebook/buck/graph:graph\",",
                "+        \"//src/com/facebook/buck/io:executable-finder\",",
                "+        \"//src/com/facebook/buck/io:io\",",
                "+        \"//src/com/facebook/buck/io:transport\",",
                "+        \"//src/com/facebook/buck/io:watchman\",",
                "+        \"//src/com/facebook/buck/io/file:file\",",
                "+        \"//src/com/facebook/buck/json:json\",",
                "+        \"//src/com/facebook/buck/jvm/core:core\",",
                "+        \"//src/com/facebook/buck/jvm/java:config\",",
                "+        \"//src/com/facebook/buck/jvm/java:javac-sink\",",
                "+        \"//src/com/facebook/buck/jvm/java:packagefinder\",",
                "+        \"//src/com/facebook/buck/jvm/java:rules\",",
                "+        \"//src/com/facebook/buck/jvm/java:steps\",",
                "+        \"//src/com/facebook/buck/jvm/java:support\",",
                "+        \"//src/com/facebook/buck/jvm/java/abi/source/api:api\",",
                "+        \"//src/com/facebook/buck/jvm/java/autodeps:SymbolExtractor\",",
                "+        \"//src/com/facebook/buck/jvm/java/autodeps:autodeps\",",
                "+        \"//src/com/facebook/buck/jvm/java/classes:classes\",",
                "+        \"//src/com/facebook/buck/jvm/kotlin:kotlin\",",
                "+        \"//src/com/facebook/buck/jvm/scala:scala\",",
                "+        \"//src/com/facebook/buck/log:log\",",
                "+        \"//src/com/facebook/buck/maven:util\",",
                "+        \"//src/com/facebook/buck/model:build_id\",",
                "+        \"//src/com/facebook/buck/model:model\",",
                "+        \"//src/com/facebook/buck/parser:config\",",
                "+        \"//src/com/facebook/buck/parser:parser\",",
                "+        \"//src/com/facebook/buck/parser:rule_pattern\",",
                "+        \"//src/com/facebook/buck/query:query\",",
                "+        \"//src/com/facebook/buck/rules:cli\",",
                "+        \"//src/com/facebook/buck/rules:rules\",",
                "+        \"//src/com/facebook/buck/rules/args:args\",",
                "+        \"//src/com/facebook/buck/rules/coercer:coercer\",",
                "+        \"//src/com/facebook/buck/rules/coercer:interface\",",
                "+        \"//src/com/facebook/buck/rules/keys:keys\",",
                "+        \"//src/com/facebook/buck/rules/macros:macros\",",
                "+        \"//src/com/facebook/buck/rules/macros:types\",",
                "+        \"//src/com/facebook/buck/rules/query:types\",",
                "+        \"//src/com/facebook/buck/shell:rules\",",
                "+        \"//src/com/facebook/buck/shell:steps\",",
                "+        \"//src/com/facebook/buck/shell:worker\",",
                "+        \"//src/com/facebook/buck/shell:worker_tool\",",
                "+        \"//src/com/facebook/buck/slb:slb\",",
                "+        \"//src/com/facebook/buck/step:step\",",
                "+        \"//src/com/facebook/buck/swift:swift\",",
                "+        \"//src/com/facebook/buck/test:test\",",
                "+        \"//src/com/facebook/buck/test/result/type:type\",",
                "+        \"//src/com/facebook/buck/test/selectors:selectors\",",
                "+        \"//src/com/facebook/buck/util:exceptions\",",
                "+        \"//src/com/facebook/buck/util:io\",",
                "+        \"//src/com/facebook/buck/util:packaged_resource\",",
                "+        \"//src/com/facebook/buck/util:process_executor\",",
                "+        \"//src/com/facebook/buck/util:util\",",
                "+        \"//src/com/facebook/buck/util/cache:cache\",",
                "+        \"//src/com/facebook/buck/util/concurrent:concurrent\",",
                "+        \"//src/com/facebook/buck/util/environment:environment\",",
                "+        \"//src/com/facebook/buck/util/environment:platform\",",
                "+        \"//src/com/facebook/buck/util/immutables:immutables\",",
                "+        \"//src/com/facebook/buck/util/network/hostname:hostname\",",
                "+        \"//src/com/facebook/buck/util/sha1:sha1\",",
                "+        \"//src/com/facebook/buck/util/trace:trace\",",
                "+        \"//src/com/facebook/buck/util/unit:unit\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_config\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_generator\",",
                "+        \"//src/com/facebook/buck/versions:translator\",",
                "+        \"//src/com/facebook/buck/versions:types\",",
                "+        \"//src/com/facebook/buck/versions:versions\",",
                "+        \"//src/com/facebook/buck/worker:worker_job_params\",",
                "+        \"//src/com/facebook/buck/worker:worker_pool_factory\",",
                "+        \"//src/com/facebook/buck/worker:worker_process\",",
                "+        \"//test/com/facebook/buck/config:FakeBuckConfig\",",
                "+        \"//test/com/facebook/buck/cxx/toolchain:testutil\",",
                "+        \"//test/com/facebook/buck/features/d:testutil\",",
                "+        \"//test/com/facebook/buck/io/filesystem:testutil\",",
                "+        \"//test/com/facebook/buck/model:testutil\",",
                "+        \"//test/com/facebook/buck/rules:testutil\",",
                "+        \"//test/com/facebook/buck/testutil:testutil\",",
                "+        \"//test/com/facebook/buck/testutil/integration:util\",",
                "+        \"//third-party/java/aether:aether-api\",",
                "+        \"//third-party/java/android:ddmlib\",",
                "+        \"//third-party/java/android:tools-sdk-common\",",
                "+        \"//third-party/java/aosp:aosp\",",
                "+        \"//third-party/java/args4j:args4j\",",
                "+        \"//third-party/java/asm:asm\",",
                "+        \"//third-party/java/dd-plist:dd-plist\",",
                "+        \"//third-party/java/guava:guava\",",
                "+        \"//third-party/java/hamcrest:java-hamcrest\",",
                "+        \"//third-party/java/immutables:immutables\",",
                "+        \"//third-party/java/infer-annotations:infer-annotations\",",
                "+        \"//third-party/java/jackson:jackson-annotations\",",
                "+        \"//third-party/java/jackson:jackson-core\",",
                "+        \"//third-party/java/jackson:jackson-databind\",",
                "+        \"//third-party/java/jna:jna\",",
                "+        \"//third-party/java/jsr:jsr305\",",
                "+        \"//third-party/java/junit:junit\",",
                "+        \"//third-party/java/maven:maven-model\",",
                "+        \"//third-party/java/nailgun:nailgun\",",
                "+        \"//third-party/java/nuprocess:nuprocess\",",
                "+        \"//third-party/java/okhttp:okhttp\",",
                "+        \"//third-party/java/okio:okio\",",
                "+        \"//third-party/java/stringtemplate:stringtemplate\",",
                "+        \"//third-party/java/thrift:libthrift\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/features/d/DBinaryBuilder.java b/test/com/facebook/buck/features/d/DBinaryBuilder.java",
                "new file mode 100644",
                "index 0000000000..800ca2b325",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/DBinaryBuilder.java",
                "@@ -0,0 +1,53 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.rules.AbstractNodeBuilder;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.facebook.buck.toolchain.impl.ToolchainProviderBuilder;",
                "+import com.google.common.collect.ImmutableMap;",
                "+",
                "+public class DBinaryBuilder",
                "+    extends AbstractNodeBuilder<",
                "+        DBinaryDescriptionArg.Builder, DBinaryDescriptionArg, DBinaryDescription, DBinary> {",
                "+",
                "+  public DBinaryBuilder(",
                "+      BuildTarget target, DBuckConfig dBuckConfig, CxxPlatform defaultCxxPlatform) {",
                "+    super(",
                "+        new DBinaryDescription(",
                "+            createToolchain(defaultCxxPlatform), dBuckConfig, CxxPlatformUtils.DEFAULT_CONFIG),",
                "+        target);",
                "+    getArgForPopulating().setSrcs(SourceList.EMPTY);",
                "+  }",
                "+",
                "+  private static ToolchainProvider createToolchain(CxxPlatform cxxPlatform) {",
                "+    return new ToolchainProviderBuilder()",
                "+        .withToolchain(",
                "+            CxxPlatformsProvider.DEFAULT_NAME,",
                "+            CxxPlatformsProvider.of(",
                "+                cxxPlatform,",
                "+                new FlavorDomain<>(",
                "+                    \"C/C++ platform\", ImmutableMap.of(cxxPlatform.getFlavor(), cxxPlatform))))",
                "+        .build();",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/d/DBinaryDescriptionTest.java b/test/com/facebook/buck/features/d/DBinaryDescriptionTest.java",
                "new file mode 100644",
                "index 0000000000..99894bff70",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/DBinaryDescriptionTest.java",
                "@@ -0,0 +1,45 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import static org.junit.Assert.assertThat;",
                "+",
                "+import com.facebook.buck.config.FakeBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Test;",
                "+",
                "+public class DBinaryDescriptionTest {",
                "+",
                "+  @Test",
                "+  public void cxxLinkerInImplicitTimeDeps() {",
                "+    CxxPlatform cxxPlatform = CxxPlatformUtils.DEFAULT_PLATFORM;",
                "+    DBinaryBuilder builder =",
                "+        new DBinaryBuilder(",
                "+            BuildTargetFactory.newInstance(\"//:rule\"),",
                "+            new DBuckConfig(FakeBuckConfig.builder().build()),",
                "+            cxxPlatform);",
                "+    ImmutableSortedSet<BuildTarget> implicitDeps = builder.findImplicitDeps();",
                "+    for (BuildTarget target : cxxPlatform.getLd().getParseTimeDeps()) {",
                "+      assertThat(implicitDeps, Matchers.hasItem(target));",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/d/DBinaryIntegrationTest.java b/test/com/facebook/buck/features/d/DBinaryIntegrationTest.java",
                "new file mode 100644",
                "index 0000000000..140687c14e",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/DBinaryIntegrationTest.java",
                "@@ -0,0 +1,98 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import static org.junit.Assert.assertEquals;",
                "+",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.io.filesystem.TestProjectFilesystems;",
                "+import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.testutil.TemporaryPaths;",
                "+import com.facebook.buck.testutil.integration.BuckBuildLog;",
                "+import com.facebook.buck.testutil.integration.ProjectWorkspace;",
                "+import com.facebook.buck.testutil.integration.TestDataHelper;",
                "+import com.facebook.buck.util.ProcessExecutor;",
                "+import org.junit.Before;",
                "+import org.junit.Rule;",
                "+import org.junit.Test;",
                "+",
                "+public class DBinaryIntegrationTest {",
                "+  @Rule public TemporaryPaths tmp = new TemporaryPaths();",
                "+",
                "+  private ProjectFilesystem filesystem;",
                "+",
                "+  @Before",
                "+  public void setUp() throws InterruptedException {",
                "+    filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void cxx() throws Exception {",
                "+    Assumptions.assumeDCompilerUsable();",
                "+",
                "+    ProjectWorkspace workspace = TestDataHelper.createProjectWorkspaceForScenario(this, \"cxx\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    workspace.runBuckBuild(\"-v\", \"10\", \"//:test\").assertSuccess();",
                "+    BuckBuildLog buildLog = workspace.getBuildLog();",
                "+    buildLog.assertTargetBuiltLocally(\"//:test\");",
                "+    workspace.resetBuildLogFile();",
                "+",
                "+    ProcessExecutor.Result result =",
                "+        workspace.runCommand(",
                "+            workspace",
                "+                .resolve(",
                "+                    BuildTargets.getGenPath(",
                "+                        filesystem,",
                "+                        BuildTargetFactory.newInstance(\"//:test\")",
                "+                            .withFlavors(DBinaryDescription.BINARY_FLAVOR),",
                "+                        \"%s/test\"))",
                "+                .toString());",
                "+    assertEquals(0, result.getExitCode());",
                "+    assertEquals(\"1 + 1 = 2\\n100 + 1 = 5\\n\", result.getStdout().get());",
                "+    assertEquals(\"\", result.getStderr().get());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void xyzzy() throws Exception {",
                "+    Assumptions.assumeDCompilerUsable();",
                "+",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"simple_binary\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    workspace.runBuckBuild(\"-v\", \"10\", \"//:xyzzy\").assertSuccess();",
                "+    BuckBuildLog buildLog = workspace.getBuildLog();",
                "+    buildLog.assertTargetBuiltLocally(\"//:xyzzy\");",
                "+    workspace.resetBuildLogFile();",
                "+",
                "+    ProcessExecutor.Result result =",
                "+        workspace.runCommand(",
                "+            workspace",
                "+                .resolve(",
                "+                    BuildTargets.getGenPath(",
                "+                        filesystem,",
                "+                        BuildTargetFactory.newInstance(\"//:xyzzy\")",
                "+                            .withFlavors(DBinaryDescription.BINARY_FLAVOR),",
                "+                        \"%s/xyzzy\"))",
                "+                .toString());",
                "+    assertEquals(0, result.getExitCode());",
                "+    assertEquals(\"Nothing happens.\\n\", result.getStdout().get());",
                "+    assertEquals(\"\", result.getStderr().get());",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/d/DBuckConfigTest.java b/test/com/facebook/buck/features/d/DBuckConfigTest.java",
                "new file mode 100644",
                "index 0000000000..2a121404ca",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/DBuckConfigTest.java",
                "@@ -0,0 +1,176 @@",
                "+/*",
                "+ * Copyright 2013-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import static org.junit.Assert.assertEquals;",
                "+import static org.junit.Assert.assertFalse;",
                "+import static org.junit.Assert.assertNotNull;",
                "+import static org.junit.Assert.assertTrue;",
                "+",
                "+import com.facebook.buck.config.BuckConfig;",
                "+import com.facebook.buck.config.FakeBuckConfig;",
                "+import com.facebook.buck.io.file.MostFiles;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.TestBuildRuleResolver;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.testutil.TemporaryPaths;",
                "+import com.facebook.buck.util.HumanReadableException;",
                "+import com.facebook.buck.util.environment.Platform;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import java.io.IOException;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.Path;",
                "+import java.util.Collection;",
                "+import org.junit.Rule;",
                "+import org.junit.Test;",
                "+",
                "+/**",
                "+ * Tests that the autodetection in DBuckConfig works and that explicitly configured values are",
                "+ * respected.",
                "+ */",
                "+public class DBuckConfigTest {",
                "+  @Rule public TemporaryPaths tmp = new TemporaryPaths();",
                "+",
                "+  private Path makeFakeExecutable(Path directory, String baseName) throws IOException {",
                "+    Path dmd = directory.resolve(baseName + (Platform.detect() == Platform.WINDOWS ? \".exe\" : \"\"));",
                "+    Files.createFile(dmd);",
                "+    MostFiles.makeExecutable(dmd);",
                "+    return dmd;",
                "+  }",
                "+",
                "+  @Test",
                "+  public void testCompilerInPath() throws IOException {",
                "+    Path yooserBeen = tmp.newFolder(\"yooser\", \"been\");",
                "+    Path dmd = makeFakeExecutable(yooserBeen, \"dmd\");",
                "+    BuckConfig delegate =",
                "+        FakeBuckConfig.builder()",
                "+            .setEnvironment(ImmutableMap.of(\"PATH\", yooserBeen.toRealPath().toString()))",
                "+            .build();",
                "+    DBuckConfig dBuckConfig = new DBuckConfig(delegate);",
                "+    assertEquals(dmd.toRealPath().toString(), toolPath(dBuckConfig.getDCompiler()));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void testCompilerNotInPath() throws IOException {",
                "+    Path yooserBeen = tmp.newFolder(\"yooser\", \"been\");",
                "+    Path userBean = tmp.newFolder(\"user\", \"bean\").toRealPath();",
                "+    makeFakeExecutable(yooserBeen, \"dmd\");",
                "+    BuckConfig delegate =",
                "+        FakeBuckConfig.builder()",
                "+            .setEnvironment(ImmutableMap.of(\"PATH\", userBean.toString()))",
                "+            .build();",
                "+    DBuckConfig dBuckConfig = new DBuckConfig(delegate);",
                "+    String msg = \"\";",
                "+    Tool compiler = null;",
                "+    try {",
                "+      compiler = dBuckConfig.getDCompiler();",
                "+    } catch (HumanReadableException e) {",
                "+      msg = e.getMessage();",
                "+    }",
                "+",
                "+    // OS X searches the paths in /etc/paths in addition to those specified in",
                "+    // the PATH environment variable. Since dmd may be on one of those paths,",
                "+    // we may find it there, resulting in no exception being thrown. When this",
                "+    // happens, assert that the compiler we found is at neither of the paths",
                "+    // we specify in the test.",
                "+    if (delegate.getPlatform() == Platform.MACOS && msg.length() == 0) {",
                "+      assertNotNull(compiler);",
                "+      assertFalse(toolPath(compiler).contains(userBean.toString()));",
                "+      assertFalse(toolPath(compiler).contains(yooserBeen.toString()));",
                "+    } else {",
                "+      assertEquals(\"Unable to locate dmd on PATH, or it's not marked as being executable\", msg);",
                "+    }",
                "+  }",
                "+",
                "+  @Test",
                "+  public void testCompilerOverridden() throws IOException {",
                "+    Path yooserBeen = tmp.newFolder(\"yooser\", \"been\");",
                "+    makeFakeExecutable(yooserBeen, \"dmd\");",
                "+    Path ldc = makeFakeExecutable(yooserBeen, \"ldc\");",
                "+    BuckConfig delegate =",
                "+        FakeBuckConfig.builder()",
                "+            .setEnvironment(ImmutableMap.of(\"PATH\", yooserBeen.toRealPath().toString()))",
                "+            .setSections(\"[d]\", \"compiler=\" + ldc.toRealPath())",
                "+            .build();",
                "+    DBuckConfig dBuckConfig = new DBuckConfig(delegate);",
                "+    assertEquals(ldc.toRealPath().toString(), toolPath(dBuckConfig.getDCompiler()));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void testDCompilerFlagsOverridden() {",
                "+    BuckConfig delegate =",
                "+        FakeBuckConfig.builder().setSections(\"[d]\", \"base_compiler_flags=-g -O3\").build();",
                "+    DBuckConfig dBuckConfig = new DBuckConfig(delegate);",
                "+    ImmutableList<String> compilerFlags = dBuckConfig.getBaseCompilerFlags();",
                "+    assertContains(compilerFlags, \"-g\");",
                "+    assertContains(compilerFlags, \"-O3\");",
                "+  }",
                "+",
                "+  @Test",
                "+  public void testDLinkerFlagsOverridden() throws IOException {",
                "+    Path yooserBin = tmp.newFolder(\"yooser\", \"bin\");",
                "+    Path yooserLib = tmp.newFolder(\"yooser\", \"lib\");",
                "+    makeFakeExecutable(yooserBin, \"dmd\");",
                "+    Path phobos2So = yooserLib.resolve(\"libphobos2.so\");",
                "+    Files.createFile(phobos2So);",
                "+    BuckConfig delegate =",
                "+        FakeBuckConfig.builder()",
                "+            .setEnvironment(ImmutableMap.of(\"PATH\", yooserBin.toRealPath().toString()))",
                "+            .setSections(",
                "+                \"[d]\", \"linker_flags = -L/opt/doesnotexist/dmd/lib \\\"-L/path with spaces\\\"\")",
                "+            .build();",
                "+    DBuckConfig dBuckConfig = new DBuckConfig(delegate);",
                "+    ImmutableList<String> linkerFlags = dBuckConfig.getLinkerFlags();",
                "+    assertContains(linkerFlags, \"-L/opt/doesnotexist/dmd/lib\");",
                "+    assertContains(linkerFlags, \"-L/path with spaces\");",
                "+    assertDoesNotContain(linkerFlags, \"-L\" + yooserLib.toRealPath());",
                "+  }",
                "+",
                "+  @Test",
                "+  public void testDRuntimeNearCompiler() throws IOException {",
                "+    Path yooserBin = tmp.newFolder(\"yooser\", \"bin\");",
                "+    Path yooserLib = tmp.newFolder(\"yooser\", \"lib\");",
                "+    makeFakeExecutable(yooserBin, \"dmd\");",
                "+    Path phobos2So = yooserLib.resolve(\"libphobos2.so\");",
                "+    Files.createFile(phobos2So);",
                "+    BuckConfig delegate =",
                "+        FakeBuckConfig.builder()",
                "+            .setEnvironment(ImmutableMap.of(\"PATH\", yooserBin.toRealPath().toString()))",
                "+            .build();",
                "+    DBuckConfig dBuckConfig = new DBuckConfig(delegate);",
                "+    ImmutableList<String> linkerFlags = dBuckConfig.getLinkerFlags();",
                "+    assertContains(linkerFlags, \"-L\" + yooserLib.toRealPath());",
                "+  }",
                "+",
                "+  private static <T> void assertContains(Collection<T> haystack, T needle) {",
                "+    assertTrue(needle + \" is in \" + haystack, haystack.contains(needle));",
                "+  }",
                "+",
                "+  private static <T> void assertDoesNotContain(Collection<T> haystack, T needle) {",
                "+    assertFalse(needle + \" is not in \" + haystack, haystack.contains(needle));",
                "+  }",
                "+",
                "+  /** Returns the path of a Tool. */",
                "+  private String toolPath(Tool tool) {",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver();",
                "+    return tool.getCommandPrefix(DefaultSourcePathResolver.from(new SourcePathRuleFinder(resolver)))",
                "+        .get(0);",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/d/DLibraryIntegrationTest.java b/test/com/facebook/buck/features/d/DLibraryIntegrationTest.java",
                "new file mode 100644",
                "index 0000000000..2702618c1b",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/DLibraryIntegrationTest.java",
                "@@ -0,0 +1,63 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import static org.junit.Assert.assertEquals;",
                "+",
                "+import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.testutil.FakeProjectFilesystem;",
                "+import com.facebook.buck.testutil.TemporaryPaths;",
                "+import com.facebook.buck.testutil.integration.BuckBuildLog;",
                "+import com.facebook.buck.testutil.integration.ProjectWorkspace;",
                "+import com.facebook.buck.testutil.integration.TestDataHelper;",
                "+import com.facebook.buck.util.ProcessExecutor;",
                "+import org.junit.Rule;",
                "+import org.junit.Test;",
                "+",
                "+public class DLibraryIntegrationTest {",
                "+  @Rule public TemporaryPaths tmp = new TemporaryPaths();",
                "+",
                "+  @Test",
                "+  public void compileAndRun() throws Exception {",
                "+    Assumptions.assumeDCompilerUsable();",
                "+",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"library\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    workspace.runBuckBuild(\"-v\", \"10\", \"//:greet\").assertSuccess();",
                "+    BuckBuildLog buildLog = workspace.getBuildLog();",
                "+    buildLog.assertTargetBuiltLocally(\"//:greet\");",
                "+    buildLog.assertTargetBuiltLocally(\"//:greeting\");",
                "+    workspace.resetBuildLogFile();",
                "+",
                "+    ProcessExecutor.Result result =",
                "+        workspace.runCommand(",
                "+            workspace",
                "+                .resolve(",
                "+                    BuildTargets.getGenPath(",
                "+                        new FakeProjectFilesystem(),",
                "+                        BuildTargetFactory.newInstance(\"//:greet\")",
                "+                            .withFlavors(DBinaryDescription.BINARY_FLAVOR),",
                "+                        \"%s/greet\"))",
                "+                .toString());",
                "+    assertEquals(0, result.getExitCode());",
                "+    assertEquals(\"Hello, world!\\n\", result.getStdout().get());",
                "+    assertEquals(\"\", result.getStderr().get());",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/d/DTestBuilder.java b/test/com/facebook/buck/features/d/DTestBuilder.java",
                "new file mode 100644",
                "index 0000000000..eeeda06412",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/DTestBuilder.java",
                "@@ -0,0 +1,52 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.rules.AbstractNodeBuilder;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.facebook.buck.toolchain.impl.ToolchainProviderBuilder;",
                "+import com.google.common.collect.ImmutableMap;",
                "+",
                "+public class DTestBuilder",
                "+    extends AbstractNodeBuilder<",
                "+        DTestDescriptionArg.Builder, DTestDescriptionArg, DTestDescription, DTest> {",
                "+",
                "+  public DTestBuilder(BuildTarget target, DBuckConfig dBuckConfig, CxxPlatform defaultCxxPlatform) {",
                "+    super(",
                "+        new DTestDescription(",
                "+            createToolchain(defaultCxxPlatform), dBuckConfig, CxxPlatformUtils.DEFAULT_CONFIG),",
                "+        target);",
                "+    getArgForPopulating().setSrcs(SourceList.EMPTY);",
                "+  }",
                "+",
                "+  private static ToolchainProvider createToolchain(CxxPlatform cxxPlatform) {",
                "+    return new ToolchainProviderBuilder()",
                "+        .withToolchain(",
                "+            CxxPlatformsProvider.DEFAULT_NAME,",
                "+            CxxPlatformsProvider.of(",
                "+                cxxPlatform,",
                "+                new FlavorDomain<>(",
                "+                    \"C/C++ platform\", ImmutableMap.of(cxxPlatform.getFlavor(), cxxPlatform))))",
                "+        .build();",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/d/DTestDescriptionTest.java b/test/com/facebook/buck/features/d/DTestDescriptionTest.java",
                "new file mode 100644",
                "index 0000000000..dad9a66fab",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/DTestDescriptionTest.java",
                "@@ -0,0 +1,45 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import static org.junit.Assert.assertThat;",
                "+",
                "+import com.facebook.buck.config.FakeBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Test;",
                "+",
                "+public class DTestDescriptionTest {",
                "+",
                "+  @Test",
                "+  public void cxxLinkerInImplicitTimeDeps() {",
                "+    CxxPlatform cxxPlatform = CxxPlatformUtils.DEFAULT_PLATFORM;",
                "+    DTestBuilder builder =",
                "+        new DTestBuilder(",
                "+            BuildTargetFactory.newInstance(\"//:rule\"),",
                "+            new DBuckConfig(FakeBuckConfig.builder().build()),",
                "+            cxxPlatform);",
                "+    ImmutableSortedSet<BuildTarget> implicitDeps = builder.findImplicitDeps();",
                "+    for (BuildTarget target : cxxPlatform.getLd().getParseTimeDeps()) {",
                "+      assertThat(implicitDeps, Matchers.hasItem(target));",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/d/DTestIntegrationTest.java b/test/com/facebook/buck/features/d/DTestIntegrationTest.java",
                "new file mode 100644",
                "index 0000000000..681c25ef65",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/DTestIntegrationTest.java",
                "@@ -0,0 +1,84 @@",
                "+/*",
                "+ * Copyright 2015-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.d;",
                "+",
                "+import static org.junit.Assert.assertTrue;",
                "+",
                "+import com.facebook.buck.testutil.ProcessResult;",
                "+import com.facebook.buck.testutil.TemporaryPaths;",
                "+import com.facebook.buck.testutil.integration.ProjectWorkspace;",
                "+import com.facebook.buck.testutil.integration.TestDataHelper;",
                "+import com.facebook.buck.util.ExitCode;",
                "+import org.junit.Rule;",
                "+import org.junit.Test;",
                "+",
                "+public class DTestIntegrationTest {",
                "+  @Rule public TemporaryPaths tmp = new TemporaryPaths();",
                "+",
                "+  @Test",
                "+  public void failingTest() throws Exception {",
                "+    Assumptions.assumeDCompilerUsable();",
                "+",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"test\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    ProcessResult result = workspace.runBuckCommand(\"test\", \"-v\", \"10\", \"//:failing_test\");",
                "+    result.assertTestFailure();",
                "+    assertTrue(",
                "+        \"test reports correct location on failure. stderr:\\n\" + result.getStderr(),",
                "+        result.getStderr().matches(\"(?s:.*)failing_test(?:\\\\.d)?\\\\(4\\\\)(?s:.*)\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void passingTest() throws Exception {",
                "+    Assumptions.assumeDCompilerUsable();",
                "+",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"test\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    ProcessResult result = workspace.runBuckCommand(\"test\", \"-v\", \"10\", \"//:passing_test\");",
                "+    result.assertSuccess();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void testDTestTimeout() throws Exception {",
                "+    Assumptions.assumeDCompilerUsable();",
                "+",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"test\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    ProcessResult result = workspace.runBuckCommand(\"test\", \"-v\", \"10\", \"//:test-spinning\");",
                "+    result.assertSpecialExitCode(\"test should fail\", ExitCode.TEST_ERROR);",
                "+    String stderr = result.getStderr();",
                "+    assertTrue(stderr, stderr.contains(\"Timed out after 500 ms running test command\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void withCxx() throws Exception {",
                "+    Assumptions.assumeDCompilerUsable();",
                "+",
                "+    ProjectWorkspace workspace =",
                "+        TestDataHelper.createProjectWorkspaceForScenario(this, \"test\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    ProcessResult result = workspace.runBuckCommand(\"test\", \"-v\", \"10\", \"//:with_cxx\");",
                "+    result.assertSuccess();",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/d/testdata/cxx/BUCK.fixture b/test/com/facebook/buck/features/d/testdata/cxx/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..bc69723eb2",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/testdata/cxx/BUCK.fixture",
                "@@ -0,0 +1,12 @@",
                "+cxx_library(",
                "+    name = \"quus\",",
                "+    srcs = [\"quus.cpp\"],",
                "+)",
                "+",
                "+d_binary(",
                "+    name = \"test\",",
                "+    srcs = [\"test.d\"],",
                "+    deps = [",
                "+        \":quus\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/features/d/testdata/cxx/quus.cpp b/test/com/facebook/buck/features/d/testdata/cxx/quus.cpp",
                "new file mode 100644",
                "index 0000000000..b7b4769da8",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/testdata/cxx/quus.cpp",
                "@@ -0,0 +1,7 @@",
                "+int quus(int x, int y) {",
                "+  if (x > 56 || y > 56) {",
                "+    return 5;",
                "+  } else {",
                "+    return x + y;",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/d/testdata/cxx/test.d b/test/com/facebook/buck/features/d/testdata/cxx/test.d",
                "new file mode 100644",
                "index 0000000000..9efbe2fa11",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/testdata/cxx/test.d",
                "@@ -0,0 +1,9 @@",
                "+import std.stdio;",
                "+",
                "+extern (C++) int quus(int x, int y);",
                "+",
                "+void main()",
                "+{",
                "+  writefln(\"1 + 1 = %d\", quus(1, 1));",
                "+  writefln(\"100 + 1 = %d\", quus(100, 1));",
                "+}",
                "diff --git a/test/com/facebook/buck/features/d/testdata/library/BUCK.fixture b/test/com/facebook/buck/features/d/testdata/library/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..54a9f7c925",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/testdata/library/BUCK.fixture",
                "@@ -0,0 +1,16 @@",
                "+d_binary(",
                "+    name = \"greet\",",
                "+    srcs = [\"greet.d\"],",
                "+    deps = [\":greeting\"],",
                "+)",
                "+",
                "+d_library(",
                "+    name = \"greeting\",",
                "+    srcs = [\"greeting.d\"],",
                "+    deps = [\":join\"],",
                "+)",
                "+",
                "+d_library(",
                "+    name = \"join\",",
                "+    srcs = [\"join.d\"],",
                "+)",
                "diff --git a/test/com/facebook/buck/features/d/testdata/library/greet.d b/test/com/facebook/buck/features/d/testdata/library/greet.d",
                "new file mode 100644",
                "index 0000000000..851378f84b",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/testdata/library/greet.d",
                "@@ -0,0 +1,6 @@",
                "+import greeting;",
                "+import std.stdio;",
                "+",
                "+void main() {",
                "+  writeln(greeting.greeting);",
                "+}",
                "diff --git a/test/com/facebook/buck/features/d/testdata/library/greeting.d b/test/com/facebook/buck/features/d/testdata/library/greeting.d",
                "new file mode 100644",
                "index 0000000000..4141c0ab51",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/testdata/library/greeting.d",
                "@@ -0,0 +1,3 @@",
                "+import join;",
                "+",
                "+auto greeting = join.join(\", \", [\"Hello\", \"world!\"]);",
                "diff --git a/test/com/facebook/buck/features/d/testdata/library/join.d b/test/com/facebook/buck/features/d/testdata/library/join.d",
                "new file mode 100644",
                "index 0000000000..b4feffbea1",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/testdata/library/join.d",
                "@@ -0,0 +1,11 @@",
                "+string join(string joiner, string[] parts) {",
                "+  if (parts.length == 0) {",
                "+    return \"\";",
                "+  }",
                "+  string result = parts[0];",
                "+  for(auto i = 1; i < parts.length; i++) {",
                "+    result ~= joiner;",
                "+    result ~= parts[i];",
                "+  }",
                "+  return result;",
                "+}",
                "diff --git a/test/com/facebook/buck/features/d/testdata/simple_binary/BUCK.fixture b/test/com/facebook/buck/features/d/testdata/simple_binary/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..3aeed8d840",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/testdata/simple_binary/BUCK.fixture",
                "@@ -0,0 +1,4 @@",
                "+d_binary(",
                "+    name = \"xyzzy\",",
                "+    srcs = [\"xyzzy.d\"],",
                "+)",
                "diff --git a/test/com/facebook/buck/features/d/testdata/simple_binary/xyzzy.d b/test/com/facebook/buck/features/d/testdata/simple_binary/xyzzy.d",
                "new file mode 100644",
                "index 0000000000..81ee0134e3",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/d/testdata/simple_binary/xyzzy.d",
                "@@ -0,0 +1,5 @@",
                "+import std.stdio;",
                "+",
                "+void main() {",
                "+  writeln(\"Nothing happens.\");",
                "+}"
            ],
            "changed_files": [
                "build.xml",
                "programs/BUCK",
                "src/com/facebook/buck/features/d/AbstractDIncludes.java",
                "src/com/facebook/buck/features/d/BUCK",
                "src/com/facebook/buck/features/d/DBinary.java",
                "src/com/facebook/buck/features/d/DBinaryDescription.java",
                "src/com/facebook/buck/features/d/DBuckConfig.java",
                "src/com/facebook/buck/features/d/DCompileBuildRule.java",
                "src/com/facebook/buck/features/d/DCompileStep.java",
                "src/com/facebook/buck/features/d/DDescriptionUtils.java",
                "src/com/facebook/buck/features/d/DDescriptionsProvider.java",
                "src/com/facebook/buck/features/d/DLibrary.java",
                "src/com/facebook/buck/features/d/DLibraryDescription.java",
                "src/com/facebook/buck/features/d/DModule.java",
                "src/com/facebook/buck/features/d/DTest.java",
                "src/com/facebook/buck/features/d/DTestDescription.java",
                "src/com/facebook/buck/features/d/DTestStep.java",
                "test/com/facebook/buck/features/d/Assumptions.java",
                "test/com/facebook/buck/features/d/BUCK",
                "test/com/facebook/buck/features/d/DBinaryBuilder.java",
                "test/com/facebook/buck/features/d/DBinaryDescriptionTest.java",
                "test/com/facebook/buck/features/d/DBinaryIntegrationTest.java",
                "test/com/facebook/buck/features/d/DBuckConfigTest.java",
                "test/com/facebook/buck/features/d/DLibraryIntegrationTest.java",
                "test/com/facebook/buck/features/d/DTestBuilder.java",
                "test/com/facebook/buck/features/d/DTestDescriptionTest.java",
                "test/com/facebook/buck/features/d/DTestIntegrationTest.java",
                "test/com/facebook/buck/features/d/testdata/cxx/BUCK.fixture",
                "test/com/facebook/buck/features/d/testdata/cxx/quus.cpp",
                "test/com/facebook/buck/features/d/testdata/cxx/test.d",
                "test/com/facebook/buck/features/d/testdata/library/BUCK.fixture",
                "test/com/facebook/buck/features/d/testdata/library/greet.d",
                "test/com/facebook/buck/features/d/testdata/library/greeting.d",
                "test/com/facebook/buck/features/d/testdata/library/join.d",
                "test/com/facebook/buck/features/d/testdata/simple_binary/BUCK.fixture",
                "test/com/facebook/buck/features/d/testdata/simple_binary/xyzzy.d"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fce8380ea34ececdb1b4ecb5502155450d74d3a1",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522283382,
            "hunks": 1,
            "message": "Restrict field visibility. Reviewed By: jtorkkola fbshipit-source-id: 658eecc",
            "diff": [
                "diff --git a/src/com/facebook/buck/worker/WorkerProcessPool.java b/src/com/facebook/buck/worker/WorkerProcessPool.java",
                "index 827145caab..a97ef31c72 100644",
                "--- a/src/com/facebook/buck/worker/WorkerProcessPool.java",
                "+++ b/src/com/facebook/buck/worker/WorkerProcessPool.java",
                "@@ -167,3 +167,3 @@ public abstract class WorkerProcessPool implements Closeable {",
                "-  public HashCode getPoolHash() {",
                "+  HashCode getPoolHash() {",
                "     return poolHash;"
            ],
            "changed_files": [
                "src/com/facebook/buck/worker/WorkerProcessPool.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f918e7205f79cf27c0400a92e423eeeeae013869",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521387898,
            "hunks": 6,
            "message": "Replace FluentIterable with native streams. Test Plan: CI Reviewed By: philipjameson fbshipit-source-id: 7730a3c",
            "diff": [
                "diff --git a/src/com/facebook/buck/apple/AppleBuildRules.java b/src/com/facebook/buck/apple/AppleBuildRules.java",
                "index 922ee4ce4a..0cda380d09 100644",
                "--- a/src/com/facebook/buck/apple/AppleBuildRules.java",
                "+++ b/src/com/facebook/buck/apple/AppleBuildRules.java",
                "@@ -30,3 +30,2 @@ import com.facebook.buck.swift.SwiftLibraryDescription;",
                " import com.facebook.buck.util.RichStream;",
                "-import com.google.common.collect.FluentIterable;",
                " import com.google.common.collect.ImmutableList;",
                "@@ -319,4 +318,5 @@ public final class AppleBuildRules {",
                "-    return ImmutableSet.copyOf(",
                "-        Iterables.filter(targetNodes, input -> isXcodeTargetDescription(input.getDescription())));",
                "+    return RichStream.from(targetNodes)",
                "+        .filter(input -> isXcodeTargetDescription(input.getDescription()))",
                "+        .toImmutableSet();",
                "   }",
                "@@ -327,13 +327,14 @@ public final class AppleBuildRules {",
                "       Iterable<TargetNode<T, ?>> targetNodes) {",
                "-    return FluentIterable.from(targetNodes)",
                "-        .transformAndConcat(",
                "+    return RichStream.from(targetNodes)",
                "+        .flatMap(",
                "             input ->",
                "                 getRecursiveTargetNodeDependenciesOfTypes(",
                "-                    targetGraph,",
                "-                    cache,",
                "-                    RecursiveDependenciesMode.COPYING,",
                "-                    input,",
                "-                    APPLE_ASSET_CATALOG_DESCRIPTION_CLASSES))",
                "-        .transform(input -> (AppleAssetCatalogDescriptionArg) input.getConstructorArg())",
                "-        .toSet();",
                "+                        targetGraph,",
                "+                        cache,",
                "+                        RecursiveDependenciesMode.COPYING,",
                "+                        input,",
                "+                        APPLE_ASSET_CATALOG_DESCRIPTION_CLASSES)",
                "+                    .stream())",
                "+        .map(input -> (AppleAssetCatalogDescriptionArg) input.getConstructorArg())",
                "+        .toImmutableSet();",
                "   }",
                "@@ -344,13 +345,14 @@ public final class AppleBuildRules {",
                "       Iterable<TargetNode<T, ?>> targetNodes) {",
                "-    return FluentIterable.from(targetNodes)",
                "-        .transformAndConcat(",
                "+    return RichStream.from(targetNodes)",
                "+        .flatMap(",
                "             input ->",
                "                 getRecursiveTargetNodeDependenciesOfTypes(",
                "-                    targetGraph,",
                "-                    cache,",
                "-                    RecursiveDependenciesMode.COPYING,",
                "-                    input,",
                "-                    WRAPPER_RESOURCE_DESCRIPTION_CLASSES))",
                "-        .transform(input -> (AppleWrapperResourceArg) input.getConstructorArg())",
                "-        .toSet();",
                "+                        targetGraph,",
                "+                        cache,",
                "+                        RecursiveDependenciesMode.COPYING,",
                "+                        input,",
                "+                        WRAPPER_RESOURCE_DESCRIPTION_CLASSES)",
                "+                    .stream())",
                "+        .map(input -> (AppleWrapperResourceArg) input.getConstructorArg())",
                "+        .toImmutableSet();",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/apple/AppleBuildRules.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b8fde186ac24ff0a3a6daf9fe3d721bf488cda66",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522102283,
            "hunks": 7,
            "message": "Implement struct.to_json method. Summary: It's part of the struct API and can also be used as a safe replacement of Python's `json` module. Reviewed By: styurin fbshipit-source-id: 4ee9c5b",
            "diff": [
                "diff --git a/src/com/facebook/buck/skylark/function/JsonPrinter.java b/src/com/facebook/buck/skylark/function/JsonPrinter.java",
                "new file mode 100644",
                "index 0000000000..6e69395265",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/skylark/function/JsonPrinter.java",
                "@@ -0,0 +1,116 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.skylark.function;",
                "+",
                "+import com.google.devtools.build.lib.events.Location;",
                "+import com.google.devtools.build.lib.syntax.ClassObject;",
                "+import com.google.devtools.build.lib.syntax.EvalException;",
                "+import com.google.devtools.build.lib.syntax.Runtime;",
                "+import com.google.protobuf.TextFormat;",
                "+import java.util.List;",
                "+",
                "+/**",
                "+ * Prints JSON representation of Skylark instances, which includes all primitive times and structs,",
                "+ * as long as they contain only instances of the previously mentioned types.",
                "+ *",
                "+ * <p>The implementation is based on {@code",
                "+ * com.google.devtools.build.lib.analysis.skylark.SkylarkRuleClassFunctions} to make them",
                "+ * compatible.",
                "+ */",
                "+class JsonPrinter {",
                "+",
                "+  static String printJson(Object value, Location loc) throws EvalException {",
                "+    StringBuilder sb = new StringBuilder();",
                "+    printJson(value, sb, loc, \"struct field\", null);",
                "+    return sb.toString();",
                "+  }",
                "+",
                "+  private static void printJson(",
                "+      Object value, StringBuilder sb, Location loc, String container, String key)",
                "+      throws EvalException {",
                "+    if (value == Runtime.NONE) {",
                "+      sb.append(\"null\");",
                "+    } else if (value instanceof ClassObject) {",
                "+      printJson((ClassObject) value, sb, loc);",
                "+    } else if (value instanceof List) {",
                "+      printJson((List<?>) value, sb, loc, key);",
                "+    } else if (value instanceof String) {",
                "+      printJson((String) value, sb);",
                "+    } else if (value instanceof Integer || value instanceof Boolean) {",
                "+      sb.append(value);",
                "+    } else {",
                "+      String errorMessage =",
                "+          \"Invalid text format, expected a struct, a string, a bool, or an int \"",
                "+              + \"but got a \"",
                "+              + value.getClass().getName()",
                "+              + \" for \"",
                "+              + container;",
                "+      if (key != null) {",
                "+        errorMessage += \" '\" + key + \"'\";",
                "+      }",
                "+      throw new EvalException(loc, errorMessage);",
                "+    }",
                "+  }",
                "+",
                "+  private static <T> void printJson(List<T> value, StringBuilder sb, Location loc, String key)",
                "+      throws EvalException {",
                "+    sb.append('[');",
                "+    String join = \"\";",
                "+    for (T item : value) {",
                "+      sb.append(join);",
                "+      join = \",\";",
                "+      printJson(item, sb, loc, \"list element in struct field\", key);",
                "+    }",
                "+    sb.append(']');",
                "+  }",
                "+",
                "+  private static void printJson(String value, StringBuilder sb) {",
                "+    sb.append('\"');",
                "+    sb.append(jsonEscapeString(value));",
                "+    sb.append('\"');",
                "+  }",
                "+",
                "+  private static void printJson(ClassObject value, StringBuilder sb, Location loc)",
                "+      throws EvalException {",
                "+    sb.append('{');",
                "+    String join = \"\";",
                "+    for (String field : value.getFieldNames()) {",
                "+      sb.append(join);",
                "+      join = \",\";",
                "+      sb.append('\"');",
                "+      sb.append(field);",
                "+      sb.append(\"\\\":\");",
                "+      printJson(value.getValue(field), sb, loc, \"struct field\", field);",
                "+    }",
                "+    sb.append('}');",
                "+  }",
                "+",
                "+  private static String jsonEscapeString(String string) {",
                "+    return escapeDoubleQuotesAndBackslashesAndNewlines(string)",
                "+        .replace(\"\\r\", \"\\\\r\")",
                "+        .replace(\"\\t\", \"\\\\t\");",
                "+  }",
                "+",
                "+  /**",
                "+   * Escapes the given string for use in a JSON string.",
                "+   *",
                "+   * <p>This escapes double quotes, backslashes, and newlines.",
                "+   */",
                "+  private static String escapeDoubleQuotesAndBackslashesAndNewlines(String string) {",
                "+    return TextFormat.escapeDoubleQuotesAndBackslashes(string).replace(\"\\n\", \"\\\\n\");",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/skylark/function/SkylarkExtensionFunctions.java b/src/com/facebook/buck/skylark/function/SkylarkExtensionFunctions.java",
                "index 011ba7b281..d8248a0762 100644",
                "--- a/src/com/facebook/buck/skylark/function/SkylarkExtensionFunctions.java",
                "+++ b/src/com/facebook/buck/skylark/function/SkylarkExtensionFunctions.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.skylark.function;",
                "+import com.google.devtools.build.lib.events.Location;",
                " import com.google.devtools.build.lib.packages.Info;",
                "@@ -23,5 +24,11 @@ import com.google.devtools.build.lib.skylarkinterface.Param;",
                " import com.google.devtools.build.lib.skylarkinterface.SkylarkSignature;",
                "+import com.google.devtools.build.lib.syntax.BuiltinFunction;",
                "+import com.google.devtools.build.lib.syntax.EvalException;",
                " import com.google.devtools.build.lib.syntax.SkylarkSignatureProcessor;",
                "-/** Defines a set of functions that are available only in Skylark extension files. */",
                "+/**",
                "+ * Defines a set of functions that are available only in Skylark extension files.",
                "+ *",
                "+ * <p>The implementation is based on Bazel's {@code SkylarkRuleClassFunctions} for compatibility.",
                "+ */",
                " public class SkylarkExtensionFunctions {",
                "@@ -41,2 +48,32 @@ public class SkylarkExtensionFunctions {",
                "+  @SkylarkSignature(",
                "+    name = \"to_json\",",
                "+    doc =",
                "+        \"Creates a JSON string from the struct parameter. This method only works if all \"",
                "+            + \"struct elements (recursively) are strings, ints, booleans, other structs or a \"",
                "+            + \"list of these types. Quotes and new lines in strings are escaped. \"",
                "+            + \"Examples:<br><pre class=language-python>\"",
                "+            + \"struct(key=123).to_json()\\n# {\\\"key\\\":123}\\n\\n\"",
                "+            + \"struct(key=True).to_json()\\n# {\\\"key\\\":true}\\n\\n\"",
                "+            + \"struct(key=[1, 2, 3]).to_json()\\n# {\\\"key\\\":[1,2,3]}\\n\\n\"",
                "+            + \"struct(key='text').to_json()\\n# {\\\"key\\\":\\\"text\\\"}\\n\\n\"",
                "+            + \"struct(key=struct(inner_key='text')).to_json()\\n\"",
                "+            + \"# {\\\"key\\\":{\\\"inner_key\\\":\\\"text\\\"}}\\n\\n\"",
                "+            + \"struct(key=[struct(inner_key=1), struct(inner_key=2)]).to_json()\\n\"",
                "+            + \"# {\\\"key\\\":[{\\\"inner_key\\\":1},{\\\"inner_key\\\":2}]}\\n\\n\"",
                "+            + \"struct(key=struct(inner_key=struct(inner_inner_key='text'))).to_json()\\n\"",
                "+            + \"# {\\\"key\\\":{\\\"inner_key\\\":{\\\"inner_inner_key\\\":\\\"text\\\"}}}\\n</pre>\",",
                "+    objectType = Info.class,",
                "+    returnType = String.class,",
                "+    parameters = {@Param(name = \"self\", type = Info.class, doc = \"this struct.\")},",
                "+    useLocation = true",
                "+  )",
                "+  private static final BuiltinFunction toJson =",
                "+      new BuiltinFunction(\"to_json\") {",
                "+        @SuppressWarnings(\"unused\") // it's used through reflection by Skylark runtime",
                "+        public String invoke(Info self, Location loc) throws EvalException {",
                "+          return JsonPrinter.printJson(self, loc);",
                "+        }",
                "+      };",
                "+",
                "   static {",
                "diff --git a/test/com/facebook/buck/skylark/function/JsonPrinterTest.java b/test/com/facebook/buck/skylark/function/JsonPrinterTest.java",
                "new file mode 100644",
                "index 0000000000..9b5aac681a",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/skylark/function/JsonPrinterTest.java",
                "@@ -0,0 +1,90 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.skylark.function;",
                "+",
                "+import static org.junit.Assert.assertEquals;",
                "+",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.devtools.build.lib.events.Location;",
                "+import com.google.devtools.build.lib.packages.NativeProvider;",
                "+import com.google.devtools.build.lib.syntax.EvalException;",
                "+import com.google.devtools.build.lib.syntax.Runtime;",
                "+import com.google.devtools.build.lib.syntax.SkylarkList;",
                "+import java.util.Arrays;",
                "+import org.junit.Rule;",
                "+import org.junit.Test;",
                "+import org.junit.rules.ExpectedException;",
                "+",
                "+public class JsonPrinterTest {",
                "+",
                "+  @Rule public ExpectedException expectedException = ExpectedException.none();",
                "+",
                "+  @Test",
                "+  public void noneIsPrintedAsNull() throws Exception {",
                "+    assertEquals(\"null\", print(Runtime.NONE));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void structIsPrintedAsObject() throws Exception {",
                "+    assertEquals(",
                "+        \"{\\\"foo\\\":\\\"bar\\\"}\",",
                "+        print(NativeProvider.STRUCT.create(ImmutableMap.of(\"foo\", \"bar\"), \"\")));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void nestedStructIsPrintedAsANestedObject() throws Exception {",
                "+    assertEquals(",
                "+        \"{\\\"foo\\\":{\\\"key\\\":\\\"value\\\"}}\",",
                "+        print(",
                "+            NativeProvider.STRUCT.create(",
                "+                ImmutableMap.of(",
                "+                    \"foo\", NativeProvider.STRUCT.create(ImmutableMap.of(\"key\", \"value\"), \"\")),",
                "+                \"\")));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void listIsPrintedAsList() throws Exception {",
                "+    assertEquals(\"[\\\"foo\\\",4]\", print(SkylarkList.createImmutable(Arrays.asList(\"foo\", 4))));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void stringIsPrintedAsString() throws Exception {",
                "+    assertEquals(\"\\\"string\\\"\", print(\"string\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void numberIsPrintedAsNumber() throws Exception {",
                "+    assertEquals(\"4\", print(4));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void booleanIsPrintedAsBoolean() throws Exception {",
                "+    assertEquals(\"true\", print(true));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void attemptToPrintUnsupportedTypeResultsInException() throws Exception {",
                "+    expectedException.expect(EvalException.class);",
                "+    expectedException.expectMessage(",
                "+        \"Invalid text format, expected a struct, a string, a bool, or an int but got a java.lang.Object for struct field\");",
                "+    print(new Object());",
                "+  }",
                "+",
                "+  private static <T> String print(T value) throws EvalException {",
                "+    return JsonPrinter.printJson(value, Location.BUILTIN);",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/skylark/function/SkylarkExtensionFunctionsTest.java b/test/com/facebook/buck/skylark/function/SkylarkExtensionFunctionsTest.java",
                "index 6cee6f96dd..fd10d22222 100644",
                "--- a/test/com/facebook/buck/skylark/function/SkylarkExtensionFunctionsTest.java",
                "+++ b/test/com/facebook/buck/skylark/function/SkylarkExtensionFunctionsTest.java",
                "@@ -49,2 +49,8 @@ public class SkylarkExtensionFunctionsTest {",
                "+  @Test",
                "+  public void canConvertStructToJson() throws Exception {",
                "+    Environment env = evaluate(\"s = struct(x=2,y=3); json = s.to_json()\");",
                "+    assertEquals(\"{\\\"x\\\":2,\\\"y\\\":3}\", env.lookup(\"json\"));",
                "+  }",
                "+",
                "   /** Evaluates Skylark content and returns an environment produced during execution. */"
            ],
            "changed_files": [
                "src/com/facebook/buck/skylark/function/JsonPrinter.java",
                "src/com/facebook/buck/skylark/function/SkylarkExtensionFunctions.java",
                "test/com/facebook/buck/skylark/function/JsonPrinterTest.java",
                "test/com/facebook/buck/skylark/function/SkylarkExtensionFunctionsTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7a1e76e1cabe8f122351d8b40463212c4dd5b342",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521828706,
            "hunks": 6,
            "message": "Prettier error when a qualified name references a known nonexistent type Summary: If the enclosing type of a canonically referenced type has a `TreeBackedTypeElement`, then we know for certain whether the type exists or not. Previously we were throwing an exception; this commit plumbs that through to a graceful error. Reviewed By: asp2insp fbshipit-source-id: 66b416a",
            "diff": [
                "diff --git a/src/com/facebook/buck/jvm/java/abi/source/CompilerErrorException.java b/src/com/facebook/buck/jvm/java/abi/source/CompilerErrorException.java",
                "new file mode 100644",
                "index 0000000000..62cef9028d",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/jvm/java/abi/source/CompilerErrorException.java",
                "@@ -0,0 +1,28 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.jvm.java.abi.source;",
                "+",
                "+/**",
                "+ * Thrown when an error in source code is detected in a place that doesn't have enough context to",
                "+ * report a graceful compiler error. Caught at a higher level, where the message is reported as a",
                "+ * compiler error with relevant context.",
                "+ */",
                "+class CompilerErrorException extends Exception {",
                "+  public CompilerErrorException(String message) {",
                "+    super(message);",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/jvm/java/abi/source/PostEnterCanonicalizer.java b/src/com/facebook/buck/jvm/java/abi/source/PostEnterCanonicalizer.java",
                "index daaf9cf4bb..599921bb58 100644",
                "--- a/src/com/facebook/buck/jvm/java/abi/source/PostEnterCanonicalizer.java",
                "+++ b/src/com/facebook/buck/jvm/java/abi/source/PostEnterCanonicalizer.java",
                "@@ -213,3 +213,9 @@ class PostEnterCanonicalizer {",
                "-          return getInferredType(treePath);",
                "+          try {",
                "+            return getInferredType(treePath);",
                "+          } catch (CompilerErrorException e) {",
                "+            javacTrees.printMessage(",
                "+                Kind.ERROR, e.getMessage(), treePath.getLeaf(), treePath.getCompilationUnit());",
                "+            return typeMirror;",
                "+          }",
                "         }",
                "@@ -240,3 +246,3 @@ class PostEnterCanonicalizer {",
                "-  private TypeMirror getInferredType(TreePath treePath) {",
                "+  private TypeMirror getInferredType(TreePath treePath) throws CompilerErrorException {",
                "     Tree tree = treePath.getLeaf();",
                "diff --git a/src/com/facebook/buck/jvm/java/abi/source/TreeBackedElements.java b/src/com/facebook/buck/jvm/java/abi/source/TreeBackedElements.java",
                "index 0503cfe97d..45786cafbf 100644",
                "--- a/src/com/facebook/buck/jvm/java/abi/source/TreeBackedElements.java",
                "+++ b/src/com/facebook/buck/jvm/java/abi/source/TreeBackedElements.java",
                "@@ -197,3 +197,3 @@ class TreeBackedElements extends ElementsExtendedImpl {",
                "   public ArtificialTypeElement getOrCreateTypeElement(",
                "-      ArtificialQualifiedNameable enclosingElement, Name simpleName) {",
                "+      ArtificialQualifiedNameable enclosingElement, Name simpleName) throws CompilerErrorException {",
                "     Name fullyQualifiedName = getFullyQualifiedName(enclosingElement, simpleName);",
                "@@ -201,2 +201,8 @@ class TreeBackedElements extends ElementsExtendedImpl {",
                "     if (result == null) {",
                "+      if (enclosingElement instanceof TreeBackedTypeElement) {",
                "+        throw new CompilerErrorException(",
                "+            String.format(",
                "+                \"cannot find symbol generating source-only ABI\\nBuild the #source-abi flavor of this rule to see if the symbol is truly missing or if the rule just needs a source_only_abi_dep.\",",
                "+                fullyQualifiedName));",
                "+      }",
                "       result = new InferredTypeElement(simpleName, fullyQualifiedName, enclosingElement);",
                "diff --git a/test/com/facebook/buck/jvm/java/abi/source/TreeBackedTypeElementTest.java b/test/com/facebook/buck/jvm/java/abi/source/TreeBackedTypeElementTest.java",
                "index 7576ca56df..0a36b36c22 100644",
                "--- a/test/com/facebook/buck/jvm/java/abi/source/TreeBackedTypeElementTest.java",
                "+++ b/test/com/facebook/buck/jvm/java/abi/source/TreeBackedTypeElementTest.java",
                "@@ -440,2 +440,19 @@ public class TreeBackedTypeElementTest extends CompilerTreeApiParameterizedTest",
                "   }",
                "+",
                "+  @Test",
                "+  public void testGracefulErrorOnNonexistentMemberType() throws IOException {",
                "+    if (!testingTrees()) {",
                "+      return;",
                "+    }",
                "+    testCompiler.setAllowCompilationErrors(true);",
                "+    compile(Joiner.on('\\n').join(\"public class Foo {\", \"  Foo.Bar b;\", \"}\"));",
                "+",
                "+    assertError(",
                "+        Joiner.on('\\n')",
                "+            .join(",
                "+                \"Foo.java:2: error: cannot find symbol generating source-only ABI\",",
                "+                \"  Foo.Bar b;\",",
                "+                \"     ^\",",
                "+                \"  Build the #source-abi flavor of this rule to see if the symbol is truly missing or if the rule just needs a source_only_abi_dep.\"));",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/com/facebook/buck/jvm/java/abi/source/CompilerErrorException.java",
                "src/com/facebook/buck/jvm/java/abi/source/PostEnterCanonicalizer.java",
                "src/com/facebook/buck/jvm/java/abi/source/TreeBackedElements.java",
                "test/com/facebook/buck/jvm/java/abi/source/TreeBackedTypeElementTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c498b6e998e562a640e8e4cbe335ccbe48d16a0a",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521512971,
            "hunks": 9,
            "message": "Make PreprocessorDelegate's memoized reference to HeaderPathNormalizer weak again Summary: Changing back to a weak reference in case removing the weak reference here is what started causing OOMs. Test Plan: CI Reviewed By: ttsugriy fbshipit-source-id: 1ec0f21",
            "diff": [
                "diff --git a/src/com/facebook/buck/cxx/PreprocessorDelegate.java b/src/com/facebook/buck/cxx/PreprocessorDelegate.java",
                "index 2fbb2828ee..20a5198384 100644",
                "--- a/src/com/facebook/buck/cxx/PreprocessorDelegate.java",
                "+++ b/src/com/facebook/buck/cxx/PreprocessorDelegate.java",
                "@@ -36,2 +36,3 @@ import com.facebook.buck.rules.args.StringArg;",
                " import com.facebook.buck.rules.coercer.FrameworkPath;",
                "+import com.facebook.buck.util.WeakMemoizer;",
                " import com.google.common.base.Preconditions;",
                "@@ -72,3 +73,3 @@ final class PreprocessorDelegate implements AddsToRuleKey {",
                "-  private Optional<HeaderPathNormalizer> headerPathNormalizer = Optional.empty();",
                "+  private WeakMemoizer<HeaderPathNormalizer> headerPathNormalizer = new WeakMemoizer<>();",
                "@@ -111,27 +112,27 @@ final class PreprocessorDelegate implements AddsToRuleKey {",
                "   public HeaderPathNormalizer getHeaderPathNormalizer(SourcePathResolver pathResolver) {",
                "-    if (!headerPathNormalizer.isPresent()) {",
                "-      // Cache the value using the first SourcePathResolver that we're called with. We expect",
                "-      // this whole object to be recreated in cases where this computation would produce different",
                "-      // results.",
                "-      HeaderPathNormalizer.Builder builder = new HeaderPathNormalizer.Builder(pathResolver);",
                "-      for (CxxHeaders include : preprocessorFlags.getIncludes()) {",
                "-        include.addToHeaderPathNormalizer(builder);",
                "-      }",
                "-      for (FrameworkPath frameworkPath : preprocessorFlags.getFrameworkPaths()) {",
                "-        frameworkPath.getSourcePath().ifPresent(builder::addHeaderDir);",
                "-      }",
                "-      if (preprocessorFlags.getPrefixHeader().isPresent()) {",
                "-        SourcePath headerPath = preprocessorFlags.getPrefixHeader().get();",
                "-        builder.addPrefixHeader(headerPath);",
                "-      }",
                "-      if (sandbox.isPresent()) {",
                "-        ExplicitBuildTargetSourcePath root =",
                "-            ExplicitBuildTargetSourcePath.of(",
                "-                sandbox.get().getBuildTarget(),",
                "-                sandbox.get().getProjectFilesystem().relativize(sandbox.get().getRoot()));",
                "-        builder.addSymlinkTree(root, sandbox.get().getLinks());",
                "-      }",
                "-      headerPathNormalizer = Optional.of(builder.build());",
                "-    }",
                "-    return headerPathNormalizer.get();",
                "+    return headerPathNormalizer.get(",
                "+        () -> {",
                "+          // Cache the value using the first SourcePathResolver that we're called with. We expect",
                "+          // this whole object to be recreated in cases where this computation would produce",
                "+          // different results.",
                "+          HeaderPathNormalizer.Builder builder = new HeaderPathNormalizer.Builder(pathResolver);",
                "+          for (CxxHeaders include : preprocessorFlags.getIncludes()) {",
                "+            include.addToHeaderPathNormalizer(builder);",
                "+          }",
                "+          for (FrameworkPath frameworkPath : preprocessorFlags.getFrameworkPaths()) {",
                "+            frameworkPath.getSourcePath().ifPresent(builder::addHeaderDir);",
                "+          }",
                "+          if (preprocessorFlags.getPrefixHeader().isPresent()) {",
                "+            SourcePath headerPath = preprocessorFlags.getPrefixHeader().get();",
                "+            builder.addPrefixHeader(headerPath);",
                "+          }",
                "+          if (sandbox.isPresent()) {",
                "+            ExplicitBuildTargetSourcePath root =",
                "+                ExplicitBuildTargetSourcePath.of(",
                "+                    sandbox.get().getBuildTarget(),",
                "+                    sandbox.get().getProjectFilesystem().relativize(sandbox.get().getRoot()));",
                "+            builder.addSymlinkTree(root, sandbox.get().getLinks());",
                "+          }",
                "+          return builder.build();",
                "+        });",
                "   }",
                "diff --git a/src/com/facebook/buck/util/MoreSuppliers.java b/src/com/facebook/buck/util/MoreSuppliers.java",
                "index 5a8d17449d..468c04152f 100644",
                "--- a/src/com/facebook/buck/util/MoreSuppliers.java",
                "+++ b/src/com/facebook/buck/util/MoreSuppliers.java",
                "@@ -19,3 +19,2 @@ package com.facebook.buck.util;",
                " import com.google.common.base.Preconditions;",
                "-import java.lang.ref.WeakReference;",
                " import java.util.function.Supplier;",
                "@@ -71,5 +70,4 @@ public final class MoreSuppliers {",
                "-  private static class WeakMemoizingSupplier<T> implements Supplier<T> {",
                "+  private static class WeakMemoizingSupplier<T> extends WeakMemoizer<T> implements Supplier<T> {",
                "     private final Supplier<T> delegate;",
                "-    private WeakReference<T> valueRef;",
                "@@ -77,3 +75,2 @@ public final class MoreSuppliers {",
                "       this.delegate = delegate;",
                "-      this.valueRef = new WeakReference<>(null);",
                "     }",
                "@@ -82,14 +79,3 @@ public final class MoreSuppliers {",
                "     public T get() {",
                "-      @Nullable T value = valueRef.get();",
                "-      if (value == null) {",
                "-        synchronized (this) {",
                "-          // Check again in case someone else has populated the cache.",
                "-          value = valueRef.get();",
                "-          if (value == null) {",
                "-            value = delegate.get();",
                "-            valueRef = new WeakReference<>(value);",
                "-          }",
                "-        }",
                "-      }",
                "-      return value;",
                "+      return get(delegate);",
                "     }",
                "diff --git a/src/com/facebook/buck/util/WeakMemoizer.java b/src/com/facebook/buck/util/WeakMemoizer.java",
                "new file mode 100644",
                "index 0000000000..e29fa3e5d6",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/util/WeakMemoizer.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.util;",
                "+",
                "+import java.lang.ref.WeakReference;",
                "+import java.util.function.Supplier;",
                "+import javax.annotation.Nullable;",
                "+",
                "+/**",
                "+ * Memoizes a value with a weak reference, supporting passing in a supplier when getting the value,",
                "+ * unlike {@link MoreSuppliers.WeakMemoizingSupplier}",
                "+ */",
                "+public class WeakMemoizer<T> {",
                "+  private WeakReference<T> valueRef = new WeakReference<>(null);",
                "+",
                "+  /**",
                "+   * Get the value and memoize the result. Constructs the value if it hasn't been memoized before,",
                "+   * or if the previously memoized value has been collected.",
                "+   *",
                "+   * @param delegate delegate for constructing the value",
                "+   * @return the value",
                "+   */",
                "+  public T get(Supplier<T> delegate) {",
                "+    @Nullable T value = valueRef.get();",
                "+    if (value == null) {",
                "+      synchronized (this) {",
                "+        // Check again in case someone else has populated the cache.",
                "+        value = valueRef.get();",
                "+        if (value == null) {",
                "+          value = delegate.get();",
                "+          valueRef = new WeakReference<>(value);",
                "+        }",
                "+      }",
                "+    }",
                "+    return value;",
                "+  }",
                "+}"
            ],
            "changed_files": [
                "src/com/facebook/buck/cxx/PreprocessorDelegate.java",
                "src/com/facebook/buck/util/MoreSuppliers.java",
                "src/com/facebook/buck/util/WeakMemoizer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "782a48fbc5fb1bc6db7e30de443365b09e4b77d1",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522789923,
            "hunks": 1,
            "message": "Move EndToEndRunnerTest that was POC to be CxxEndToEndTest (more descriptive/appropriate) Summary: CxxEndToEndTest is essentially moved from EndToEndRunnerTest (class name change) Reviewed By: styurin fbshipit-source-id: f8cb988",
            "diff": [
                "diff --git a/test/com/facebook/buck/cxx/endtoend/CxxEndToEndTest.java b/test/com/facebook/buck/cxx/endtoend/CxxEndToEndTest.java",
                "new file mode 100644",
                "index 0000000000..9064b52280",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/cxx/endtoend/CxxEndToEndTest.java",
                "@@ -0,0 +1,78 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.cxx.endtoend;",
                "+",
                "+import com.facebook.buck.testutil.ProcessResult;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndEnvironment;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndRunner;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndTestDescriptor;",
                "+import com.facebook.buck.testutil.endtoend.EndToEndWorkspace;",
                "+import com.facebook.buck.testutil.endtoend.Environment;",
                "+import com.facebook.buck.testutil.endtoend.EnvironmentFor;",
                "+import com.facebook.buck.testutil.endtoend.ToggleState;",
                "+import org.junit.Test;",
                "+import org.junit.runner.RunWith;",
                "+",
                "+@RunWith(EndToEndRunner.class)",
                "+public class CxxEndToEndTest {",
                "+",
                "+  private static final String successTarget =",
                "+      \"//simple_successful_helloworld:simple_successful_helloworld\";",
                "+  private static final String failTarget = \"//simple_failed_helloworld:simple_failed_helloworld\";",
                "+",
                "+  public static EndToEndEnvironment getBaseEnvironment() {",
                "+    return new EndToEndEnvironment()",
                "+        .withBuckdToggled(ToggleState.ON_OFF)",
                "+        .addTemplates(\"cxx\")",
                "+        .withCommand(\"build\");",
                "+  }",
                "+",
                "+  @Environment",
                "+  public static EndToEndEnvironment setSuccessEnvironment() {",
                "+    return getBaseEnvironment().withTargets(successTarget);",
                "+  }",
                "+",
                "+  @EnvironmentFor(testNames = {\"shouldNotBuildSuccessfully\"})",
                "+  public static EndToEndEnvironment setFailEnvironment() {",
                "+    return getBaseEnvironment().withTargets(failTarget);",
                "+  }",
                "+",
                "+  @Test",
                "+  public void shouldBuildAndRunSuccessfully(",
                "+      EndToEndTestDescriptor test, EndToEndWorkspace workspace, ProcessResult result)",
                "+      throws Exception {",
                "+    result.assertSuccess(String.format(\"%s did not successfully build\", test.getName()));",
                "+    ProcessResult targetResult = workspace.runBuiltResult(successTarget);",
                "+    targetResult.assertSuccess();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void shouldFailInSuccessfulEnv(",
                "+      EndToEndTestDescriptor test, EndToEndWorkspace workspace, ProcessResult result) {",
                "+    // Uses successful environment, but fixture BUCK file is empty",
                "+    result.assertFailure(",
                "+        String.format(\"%s successfully built when it has an empty BUCK file\", test.getName()));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void shouldNotBuildSuccessfully(",
                "+      EndToEndTestDescriptor test, EndToEndWorkspace workspace, ProcessResult result) {",
                "+    result.assertFailure(",
                "+        String.format(",
                "+            \"%s successfully built when it should have failed to compile\", test.getName()));",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/cxx/simple_successful_helloworld/BUCK.fixtureCxxEndToEndTestshouldFailInSuccessfulEnv b/test/com/facebook/buck/testutil/endtoend/testdata/cxx/simple_successful_helloworld/BUCK.fixtureCxxEndToEndTestshouldFailInSuccessfulEnv",
                "new file mode 100644",
                "index 0000000000..e69de29bb2"
            ],
            "changed_files": [
                "test/com/facebook/buck/cxx/endtoend/CxxEndToEndTest.java",
                "test/com/facebook/buck/testutil/endtoend/testdata/cxx/simple_successful_helloworld/BUCK.fixtureCxxEndToEndTestshouldFailInSuccessfulEnv"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "70b10c15e03c23622104c4918179c4e625326c3c",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521602291,
            "hunks": 5,
            "message": "Add @Before to EndToEndRunner Summary: Allows us to run per-class assumptions (for things like upcoming Android tests), kept consistent with how the default JUnit runner does it. I'll get to adding after, expected exceptions, etc. in future diffs, but this one is needed for android tests. Test Plan: Ran EndToEndRunnerTest with an before that just instructed the tests to fail. It did that. Reviewed By: styurin fbshipit-source-id: 8933ac4",
            "diff": [
                "diff --git a/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java b/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java",
                "index 918f8fd6d7..a213f9f4ee 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java",
                "+++ b/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java",
                "@@ -28,2 +28,3 @@ import java.util.Set;",
                " import java.util.stream.Collectors;",
                "+import org.junit.Before;",
                " import org.junit.Test;",
                "@@ -31,2 +32,3 @@ import org.junit.internal.runners.model.ReflectiveCallable;",
                " import org.junit.internal.runners.statements.Fail;",
                "+import org.junit.internal.runners.statements.RunBefores;",
                " import org.junit.runner.Description;",
                "@@ -328,2 +330,7 @@ public class EndToEndRunner extends ParentRunner<EndToEndTestDescriptor> {",
                "+  private Statement withBefores(Object target, Statement statement) {",
                "+    List<FrameworkMethod> befores = getTestClass().getAnnotatedMethods(Before.class);",
                "+    return befores.isEmpty() ? statement : new RunBefores(statement, befores, target);",
                "+  }",
                "+",
                "   private Object createTest() throws Exception {",
                "@@ -347,3 +354,5 @@ public class EndToEndRunner extends ParentRunner<EndToEndTestDescriptor> {",
                "-    return new BuckInvoker(testDescriptor, test);",
                "+    Statement statement = new BuckInvoker(testDescriptor, test);",
                "+    statement = withBefores(test, statement);",
                "+    return statement;",
                "   }",
                "@@ -355,2 +364,3 @@ public class EndToEndRunner extends ParentRunner<EndToEndTestDescriptor> {",
                "     validateEnvironments(errors);",
                "+    validatePublicVoidNoArgMethods(Before.class, false, errors);",
                "   }"
            ],
            "changed_files": [
                "test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "80676783b8a8a503372c4ab3ddbb337849f4ae00",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522953740,
            "hunks": 77,
            "message": "go: refactor around `GoPlatform` Summary: Refactor most platform-specific paths/configuration from `GoBuckConfig` and `GoToolchain` into `GoPlatform` and add a new `GoPlatformFactory` class to create `GoPlatform`s. Reviewed By: ttsugriy fbshipit-source-id: 892af39",
            "diff": [
                "diff --git a/src/com/facebook/buck/go/AbstractGoPlatform.java b/src/com/facebook/buck/go/AbstractGoPlatform.java",
                "index cf3c48c93e..75908aaf2a 100644",
                "--- a/src/com/facebook/buck/go/AbstractGoPlatform.java",
                "+++ b/src/com/facebook/buck/go/AbstractGoPlatform.java",
                "@@ -23,6 +23,10 @@ import com.facebook.buck.rules.AddToRuleKey;",
                " import com.facebook.buck.rules.AddsToRuleKey;",
                "+import com.facebook.buck.rules.Tool;",
                " import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.google.common.collect.ImmutableList;",
                "+import java.nio.file.Path;",
                " import org.immutables.value.Value;",
                "-@Value.Immutable",
                "+/** Abstracting the tooling/flags/libraries used to build Go rules. */",
                "+@Value.Immutable(copy = true)",
                " @BuckStyleImmutable",
                "@@ -40,2 +44,20 @@ abstract class AbstractGoPlatform implements FlavorConvertible, AddsToRuleKey {",
                "   }",
                "+",
                "+  public abstract Path getGoRoot();",
                "+",
                "+  public abstract Path getToolDir();",
                "+",
                "+  public abstract ImmutableList<Path> getAssemblerIncludeDirs();",
                "+",
                "+  public abstract Tool getCompiler();",
                "+",
                "+  public abstract Tool getAssembler();",
                "+",
                "+  public abstract Tool getCGo();",
                "+",
                "+  public abstract Tool getPacker();",
                "+",
                "+  public abstract Tool getLinker();",
                "+",
                "+  public abstract Tool getCover();",
                " }",
                "diff --git a/src/com/facebook/buck/go/AbstractGoPlatformFactory.java b/src/com/facebook/buck/go/AbstractGoPlatformFactory.java",
                "new file mode 100644",
                "index 0000000000..ed6b138bb6",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/go/AbstractGoPlatformFactory.java",
                "@@ -0,0 +1,161 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.go;",
                "+",
                "+import com.facebook.buck.config.BuckConfig;",
                "+import com.facebook.buck.io.ExecutableFinder;",
                "+import com.facebook.buck.rules.CommandTool;",
                "+import com.facebook.buck.rules.HashedFileTool;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.util.HumanReadableException;",
                "+import com.facebook.buck.util.ProcessExecutor;",
                "+import com.facebook.buck.util.ProcessExecutorParams;",
                "+import com.facebook.buck.util.immutables.BuckStyleTuple;",
                "+import com.google.common.base.CharMatcher;",
                "+import com.google.common.base.Splitter;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import java.io.IOException;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                "+import java.util.EnumSet;",
                "+import java.util.Optional;",
                "+import org.immutables.value.Value;",
                "+",
                "+/** Factory to create {@link GoPlatform}s from a {@link BuckConfig} section. */",
                "+@Value.Immutable",
                "+@BuckStyleTuple",
                "+abstract class AbstractGoPlatformFactory {",
                "+",
                "+  private static final Path DEFAULT_GO_TOOL = Paths.get(\"go\");",
                "+",
                "+  @Value.Parameter",
                "+  public abstract BuckConfig getBuckConfig();",
                "+",
                "+  @Value.Parameter",
                "+  public abstract ProcessExecutor getProcessExecutor();",
                "+",
                "+  @Value.Parameter",
                "+  public abstract ExecutableFinder getExecutableFinder();",
                "+",
                "+  /** @return the {@link GoPlatform} defined in the given {@code section}. */",
                "+  public GoPlatform getPlatform(String os, String arch, String section) {",
                "+    Path goRoot = getGoRoot(section);",
                "+    Path toolsDir = getToolDir(section);",
                "+    return GoPlatform.builder()",
                "+        .setGoOs(os)",
                "+        .setGoArch(arch)",
                "+        .setGoRoot(goRoot)",
                "+        .setToolDir(toolsDir)",
                "+        .setCompiler(getGoTool(section, goRoot, toolsDir, \"compiler\", \"compile\", \"compiler_flags\"))",
                "+        .setAssembler(getGoTool(section, goRoot, toolsDir, \"assembler\", \"asm\", \"asm_flags\"))",
                "+        .setAssemblerIncludeDirs(ImmutableList.of(goRoot.resolve(\"pkg\").resolve(\"include\")))",
                "+        .setCGo(getGoTool(section, goRoot, toolsDir, \"cgo\", \"cgo\", \"\"))",
                "+        .setPacker(getGoTool(section, goRoot, toolsDir, \"packer\", \"pack\", \"\"))",
                "+        .setLinker(getGoTool(section, goRoot, toolsDir, \"linker\", \"link\", \"linker_flags\"))",
                "+        .setCover(getGoTool(section, goRoot, toolsDir, \"cover\", \"cover\", \"\"))",
                "+        .build();",
                "+  }",
                "+",
                "+  private Tool getGoTool(",
                "+      String section,",
                "+      Path goRoot,",
                "+      Path toolsDir,",
                "+      String configName,",
                "+      String toolName,",
                "+      String extraFlagsConfigKey) {",
                "+    Path toolPath = getBuckConfig().getPath(section, configName).orElse(toolsDir.resolve(toolName));",
                "+",
                "+    CommandTool.Builder builder =",
                "+        new CommandTool.Builder(",
                "+            new HashedFileTool(() -> getBuckConfig().getPathSourcePath(toolPath)));",
                "+    if (!extraFlagsConfigKey.isEmpty()) {",
                "+      for (String arg : getFlags(section, extraFlagsConfigKey)) {",
                "+        builder.addArg(arg);",
                "+      }",
                "+    }",
                "+    builder.addEnv(\"GOROOT\", goRoot.toString());",
                "+    return builder.build();",
                "+  }",
                "+",
                "+  private ImmutableList<String> getFlags(String section, String key) {",
                "+    return ImmutableList.copyOf(",
                "+        Splitter.on(\" \")",
                "+            .omitEmptyStrings()",
                "+            .split(getBuckConfig().getValue(section, key).orElse(\"\")));",
                "+  }",
                "+",
                "+  private Optional<Path> getConfiguredGoRoot(String section) {",
                "+    return getBuckConfig().getPath(section, \"root\");",
                "+  }",
                "+",
                "+  private Path getGoRoot(String section) {",
                "+    return getConfiguredGoRoot(section)",
                "+        .orElseGet(() -> Paths.get(getGoEnvFromTool(section, \"GOROOT\")));",
                "+  }",
                "+",
                "+  private String getGoEnvFromTool(String section, String env) {",
                "+    Path goTool = getGoToolPath(section);",
                "+    Optional<ImmutableMap<String, String>> goRootEnv =",
                "+        getConfiguredGoRoot(section).map(input -> ImmutableMap.of(\"GOROOT\", input.toString()));",
                "+    try {",
                "+      ProcessExecutor.Result goToolResult =",
                "+          getProcessExecutor()",
                "+              .launchAndExecute(",
                "+                  ProcessExecutorParams.builder()",
                "+                      .addCommand(goTool.toString(), \"env\", env)",
                "+                      .setEnvironment(goRootEnv)",
                "+                      .build(),",
                "+                  EnumSet.of(ProcessExecutor.Option.EXPECTING_STD_OUT),",
                "+                  /* stdin */ Optional.empty(),",
                "+                  /* timeOutMs */ Optional.empty(),",
                "+                  /* timeoutHandler */ Optional.empty());",
                "+      if (goToolResult.getExitCode() == 0) {",
                "+        return CharMatcher.whitespace().trimFrom(goToolResult.getStdout().get());",
                "+      } else {",
                "+        throw new HumanReadableException(goToolResult.getStderr().get());",
                "+      }",
                "+    } catch (InterruptedException e) {",
                "+      throw new RuntimeException(e);",
                "+    } catch (IOException e) {",
                "+      throw new HumanReadableException(",
                "+          e, \"Could not run \\\"%s env %s\\\": %s\", goTool, env, e.getMessage());",
                "+    }",
                "+  }",
                "+",
                "+  private Path getGoToolPath(String section) {",
                "+    Optional<Path> goTool = getBuckConfig().getPath(section, \"tool\");",
                "+    if (goTool.isPresent()) {",
                "+      return goTool.get();",
                "+    }",
                "+",
                "+    // Try resolving it via the go root config var. We can't use goRootSupplier here since that",
                "+    // would create a recursion.",
                "+    Optional<Path> goRoot = getConfiguredGoRoot(section);",
                "+    if (goRoot.isPresent()) {",
                "+      return goRoot.get().resolve(\"bin\").resolve(\"go\");",
                "+    }",
                "+",
                "+    return getExecutableFinder().getExecutable(DEFAULT_GO_TOOL, getBuckConfig().getEnvironment());",
                "+  }",
                "+",
                "+  private Path getToolDir(String section) {",
                "+    return getBuckConfig()",
                "+        .getPath(section, \"tool_dir\")",
                "+        .orElseGet(() -> Paths.get(getGoEnvFromTool(section, \"GOTOOLDIR\")));",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/go/AbstractGoToolchain.java b/src/com/facebook/buck/go/AbstractGoToolchain.java",
                "index ff7806e178..0ce9349d67 100644",
                "--- a/src/com/facebook/buck/go/AbstractGoToolchain.java",
                "+++ b/src/com/facebook/buck/go/AbstractGoToolchain.java",
                "@@ -18,10 +18,4 @@ package com.facebook.buck.go;",
                "-import com.facebook.buck.rules.CommandTool;",
                "-import com.facebook.buck.rules.HashedFileTool;",
                "-import com.facebook.buck.rules.Tool;",
                " import com.facebook.buck.toolchain.Toolchain;",
                " import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "-import com.google.common.base.Splitter;",
                "-import com.google.common.collect.ImmutableList;",
                "-import java.nio.file.Path;",
                " import org.immutables.value.Value;",
                "@@ -34,5 +28,2 @@ public abstract class AbstractGoToolchain implements Toolchain {",
                "-  @Value.Parameter",
                "-  protected abstract GoBuckConfig getGoBuckConfig();",
                "-",
                "   @Value.Parameter",
                "@@ -42,57 +33,2 @@ public abstract class AbstractGoToolchain implements Toolchain {",
                "   public abstract GoPlatform getDefaultPlatform();",
                "-",
                "-  @Value.Parameter",
                "-  public abstract Path getGoRoot();",
                "-",
                "-  @Value.Parameter",
                "-  public abstract Path getToolDir();",
                "-",
                "-  ImmutableList<Path> getAssemblerIncludeDirs() {",
                "-    // TODO(mikekap): Allow customizing this via config.",
                "-    return ImmutableList.of(getGoRoot().resolve(\"pkg\").resolve(\"include\"));",
                "-  }",
                "-",
                "-  public Tool getCompiler() {",
                "-    return getGoTool(\"compiler\", \"compile\", \"compiler_flags\");",
                "-  }",
                "-",
                "-  public Tool getAssembler() {",
                "-    return getGoTool(\"assembler\", \"asm\", \"asm_flags\");",
                "-  }",
                "-",
                "-  public Tool getCGo() {",
                "-    return getGoTool(\"cgo\", \"cgo\", \"\");",
                "-  }",
                "-",
                "-  public Tool getPacker() {",
                "-    return getGoTool(\"packer\", \"pack\", \"\");",
                "-  }",
                "-",
                "-  public Tool getLinker() {",
                "-    return getGoTool(\"linker\", \"link\", \"linker_flags\");",
                "-  }",
                "-",
                "-  public Tool getCover() {",
                "-    return getGoTool(\"cover\", \"cover\", \"\");",
                "-  }",
                "-",
                "-  private Tool getGoTool(String configName, String toolName, String extraFlagsConfigKey) {",
                "-    Path toolPath = getGoBuckConfig().getPath(configName).orElse(getToolDir().resolve(toolName));",
                "-",
                "-    CommandTool.Builder builder =",
                "-        new CommandTool.Builder(",
                "-            new HashedFileTool(() -> getGoBuckConfig().getDelegate().getPathSourcePath(toolPath)));",
                "-    if (!extraFlagsConfigKey.isEmpty()) {",
                "-      for (String arg : getFlags(extraFlagsConfigKey)) {",
                "-        builder.addArg(arg);",
                "-      }",
                "-    }",
                "-    builder.addEnv(\"GOROOT\", getGoRoot().toString());",
                "-    return builder.build();",
                "-  }",
                "-",
                "-  private ImmutableList<String> getFlags(String key) {",
                "-    return ImmutableList.copyOf(",
                "-        Splitter.on(\" \").omitEmptyStrings().split(getGoBuckConfig().getValue(key).orElse(\"\")));",
                "-  }",
                " }",
                "diff --git a/src/com/facebook/buck/go/CgoLibraryDescription.java b/src/com/facebook/buck/go/CgoLibraryDescription.java",
                "index e02ff82b1a..872c8b2339 100644",
                "--- a/src/com/facebook/buck/go/CgoLibraryDescription.java",
                "+++ b/src/com/facebook/buck/go/CgoLibraryDescription.java",
                "@@ -107,3 +107,3 @@ public class CgoLibraryDescription",
                "         args.getDeps(),",
                "-        goToolchain.getCGo(),",
                "+        platform.getCGo(),",
                "         args.getPackageName()",
                "diff --git a/src/com/facebook/buck/go/FilteredSourceFiles.java b/src/com/facebook/buck/go/FilteredSourceFiles.java",
                "index 502aaf1160..71122f9fdf 100644",
                "--- a/src/com/facebook/buck/go/FilteredSourceFiles.java",
                "+++ b/src/com/facebook/buck/go/FilteredSourceFiles.java",
                "@@ -38,6 +38,5 @@ public class FilteredSourceFiles implements Iterable<Path> {",
                "       BuildTarget buildTarget,",
                "-      GoToolchain goToolchain,",
                "       GoPlatform platform,",
                "       List<FileType> fileTypes) {",
                "-    this(rawSrcFiles, ImmutableList.of(), buildTarget, goToolchain, platform, fileTypes);",
                "+    this(rawSrcFiles, ImmutableList.of(), buildTarget, platform, fileTypes);",
                "   }",
                "@@ -48,3 +47,2 @@ public class FilteredSourceFiles implements Iterable<Path> {",
                "       BuildTarget buildTarget,",
                "-      GoToolchain goToolchain,",
                "       GoPlatform platform,",
                "@@ -53,3 +51,3 @@ public class FilteredSourceFiles implements Iterable<Path> {",
                "     this.extraSrcFiles = ImmutableList.copyOf(extraSrcFiles);",
                "-    filterSteps = createFilterSteps(buildTarget, goToolchain, platform, fileTypes);",
                "+    filterSteps = createFilterSteps(buildTarget, platform, fileTypes);",
                "   }",
                "@@ -57,6 +55,3 @@ public class FilteredSourceFiles implements Iterable<Path> {",
                "   private ImmutableMap<Path, GoListStep> createFilterSteps(",
                "-      BuildTarget buildTarget,",
                "-      GoToolchain goToolchain,",
                "-      GoPlatform platform,",
                "-      List<FileType> fileTypes) {",
                "+      BuildTarget buildTarget, GoPlatform platform, List<FileType> fileTypes) {",
                "     HashMap<Path, GoListStep> filterSteps = new HashMap<>();",
                "@@ -65,4 +60,3 @@ public class FilteredSourceFiles implements Iterable<Path> {",
                "       if (!filterSteps.containsKey(absPath)) {",
                "-        filterSteps.put(",
                "-            absPath, new GoListStep(buildTarget, absPath, goToolchain, platform, fileTypes));",
                "+        filterSteps.put(absPath, new GoListStep(buildTarget, absPath, platform, fileTypes));",
                "       }",
                "diff --git a/src/com/facebook/buck/go/GoBinaryDescription.java b/src/com/facebook/buck/go/GoBinaryDescription.java",
                "index d0df42a52a..a816458cf1 100644",
                "--- a/src/com/facebook/buck/go/GoBinaryDescription.java",
                "+++ b/src/com/facebook/buck/go/GoBinaryDescription.java",
                "@@ -85,3 +85,2 @@ public class GoBinaryDescription",
                "         goBuckConfig,",
                "-        goToolchain,",
                "         getCxxPlatform(!args.getCgoDeps().isEmpty()),",
                "diff --git a/src/com/facebook/buck/go/GoBuckConfig.java b/src/com/facebook/buck/go/GoBuckConfig.java",
                "index 2f698b432a..35990d53bf 100644",
                "--- a/src/com/facebook/buck/go/GoBuckConfig.java",
                "+++ b/src/com/facebook/buck/go/GoBuckConfig.java",
                "@@ -30,3 +30,3 @@ public class GoBuckConfig {",
                "-  private static final String SECTION = \"go\";",
                "+  static final String SECTION = \"go\";",
                "@@ -42,6 +42,2 @@ public class GoBuckConfig {",
                "-  Optional<Path> getGoRoot() {",
                "-    return delegate.getPath(SECTION, \"root\");",
                "-  }",
                "-",
                "   public BuckConfig getDelegate() {",
                "@@ -50,10 +46,2 @@ public class GoBuckConfig {",
                "-  public Optional<Path> getPath(String name) {",
                "-    return delegate.getPath(SECTION, name);",
                "-  }",
                "-",
                "-  public Optional<String> getValue(String name) {",
                "-    return delegate.getValue(SECTION, name);",
                "-  }",
                "-",
                "   Path getDefaultPackageName(BuildTarget target) {",
                "@@ -76,6 +64,2 @@ public class GoBuckConfig {",
                "   }",
                "-",
                "-  public Optional<Path> getTool() {",
                "-    return delegate.getPath(SECTION, \"tool\");",
                "-  }",
                " }",
                "diff --git a/src/com/facebook/buck/go/GoCompile.java b/src/com/facebook/buck/go/GoCompile.java",
                "index 61a1789378..cf3b98b26f 100644",
                "--- a/src/com/facebook/buck/go/GoCompile.java",
                "+++ b/src/com/facebook/buck/go/GoCompile.java",
                "@@ -73,3 +73,2 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "   private final Path output;",
                "-  private final GoToolchain goToolchain;",
                "   private final List<FileType> goFileTypes;",
                "@@ -85,3 +84,2 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "       ImmutableSet<SourcePath> generatedSrcs,",
                "-      GoToolchain goToolchain,",
                "       ImmutableList<String> compilerFlags,",
                "@@ -98,8 +96,7 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "     this.compilerFlags = compilerFlags;",
                "-    this.goToolchain = goToolchain;",
                "-    this.compiler = goToolchain.getCompiler();",
                "+    this.compiler = platform.getCompiler();",
                "     this.assemblerFlags = assemblerFlags;",
                "-    this.assemblerIncludeDirs = goToolchain.getAssemblerIncludeDirs();",
                "-    this.assembler = goToolchain.getAssembler();",
                "-    this.packer = goToolchain.getPacker();",
                "+    this.assemblerIncludeDirs = platform.getAssemblerIncludeDirs();",
                "+    this.assembler = platform.getAssembler();",
                "+    this.packer = platform.getPacker();",
                "     this.platform = platform;",
                "@@ -178,3 +175,2 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "               getBuildTarget(),",
                "-              goToolchain,",
                "               platform,",
                "@@ -203,3 +199,3 @@ public class GoCompile extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "           new FilteredSourceFiles(",
                "-              rawAsmSrcs, getBuildTarget(), goToolchain, platform, Arrays.asList(FileType.SFiles));",
                "+              rawAsmSrcs, getBuildTarget(), platform, Arrays.asList(FileType.SFiles));",
                "       steps.addAll(filteredAsmSrcs.getFilterSteps());",
                "diff --git a/src/com/facebook/buck/go/GoDescriptors.java b/src/com/facebook/buck/go/GoDescriptors.java",
                "index 96aff16c09..42fce976eb 100644",
                "--- a/src/com/facebook/buck/go/GoDescriptors.java",
                "+++ b/src/com/facebook/buck/go/GoDescriptors.java",
                "@@ -103,3 +103,2 @@ abstract class GoDescriptors {",
                "       GoBuckConfig goBuckConfig,",
                "-      GoToolchain goToolchain,",
                "       Path packageName,",
                "@@ -166,3 +165,2 @@ abstract class GoDescriptors {",
                "         generatedSrcBuilder.build(),",
                "-        goToolchain,",
                "         ImmutableList.copyOf(compilerFlags),",
                "@@ -207,3 +205,2 @@ abstract class GoDescriptors {",
                "       GoBuckConfig goBuckConfig,",
                "-      GoToolchain goToolchain,",
                "       CxxPlatform cxxPlatform,",
                "@@ -224,3 +221,2 @@ abstract class GoDescriptors {",
                "             goBuckConfig,",
                "-            goToolchain,",
                "             Paths.get(\"main\"),",
                "@@ -279,3 +275,3 @@ abstract class GoDescriptors {",
                "         library,",
                "-        goToolchain.getLinker(),",
                "+        platform.getLinker(),",
                "         ImmutableList.copyOf(linkerFlags),",
                "@@ -286,3 +282,3 @@ abstract class GoDescriptors {",
                "       GoBuckConfig goBuckConfig,",
                "-      GoToolchain goToolchain,",
                "+      GoPlatform platform,",
                "       CxxPlatform cxxPlatform,",
                "@@ -327,3 +323,2 @@ abstract class GoDescriptors {",
                "                   goBuckConfig,",
                "-                  goToolchain,",
                "                   cxxPlatform,",
                "@@ -333,3 +328,3 @@ abstract class GoDescriptors {",
                "                   ImmutableList.of(),",
                "-                  goToolchain.getDefaultPlatform(),",
                "+                  platform,",
                "                   cgoDeps);",
                "diff --git a/src/com/facebook/buck/go/GoLibraryDescription.java b/src/com/facebook/buck/go/GoLibraryDescription.java",
                "index f0309aaf0f..4254c33e77 100644",
                "--- a/src/com/facebook/buck/go/GoLibraryDescription.java",
                "+++ b/src/com/facebook/buck/go/GoLibraryDescription.java",
                "@@ -133,3 +133,2 @@ public class GoLibraryDescription",
                "           goBuckConfig,",
                "-          goToolchain,",
                "           args.getPackageName()",
                "diff --git a/src/com/facebook/buck/go/GoListStep.java b/src/com/facebook/buck/go/GoListStep.java",
                "index 505d6321a6..295fe52166 100644",
                "--- a/src/com/facebook/buck/go/GoListStep.java",
                "+++ b/src/com/facebook/buck/go/GoListStep.java",
                "@@ -42,3 +42,2 @@ public class GoListStep extends ShellStep {",
                "-  private final GoToolchain goToolchain;",
                "   private final List<FileType> fileTypes;",
                "@@ -49,3 +48,2 @@ public class GoListStep extends ShellStep {",
                "       Path workingDirectory,",
                "-      GoToolchain goToolchain,",
                "       GoPlatform platform,",
                "@@ -53,3 +51,2 @@ public class GoListStep extends ShellStep {",
                "     super(Optional.of(buildTarget), workingDirectory);",
                "-    this.goToolchain = goToolchain;",
                "     this.platform = platform;",
                "@@ -62,3 +59,3 @@ public class GoListStep extends ShellStep {",
                "         ImmutableList.<String>builder()",
                "-            .add(goToolchain.getGoRoot().resolve(\"bin\").resolve(\"go\").toString())",
                "+            .add(platform.getGoRoot().resolve(\"bin\").resolve(\"go\").toString())",
                "             .add(\"list\")",
                "@@ -92,3 +89,3 @@ public class GoListStep extends ShellStep {",
                "         // in case the inherited/default ones are wrong",
                "-        .put(\"GOROOT\", goToolchain.getGoRoot().toString())",
                "+        .put(\"GOROOT\", platform.getGoRoot().toString())",
                "         .put(\"GOOS\", platform.getGoOs())",
                "diff --git a/src/com/facebook/buck/go/GoPlatformFlavorDomain.java b/src/com/facebook/buck/go/GoPlatformFlavorDomain.java",
                "index 698a75a770..e2f56fc4fe 100644",
                "--- a/src/com/facebook/buck/go/GoPlatformFlavorDomain.java",
                "+++ b/src/com/facebook/buck/go/GoPlatformFlavorDomain.java",
                "@@ -74,11 +74,15 @@ public class GoPlatformFlavorDomain {",
                "   private ImmutableMap<String, Architecture> goArchValues;",
                "+  private GoPlatformFactory platformFactory;",
                "   public GoPlatformFlavorDomain(",
                "-      Map<String, Platform> additionalOsValues, Map<String, Architecture> additionalArchValues) {",
                "+      Map<String, Platform> additionalOsValues,",
                "+      Map<String, Architecture> additionalArchValues,",
                "+      GoPlatformFactory platformFactory) {",
                "     this.goOsValues = MoreMaps.merge(GOOS_TO_PLATFORM_LIST, additionalOsValues);",
                "     this.goArchValues = MoreMaps.merge(GOARCH_TO_ARCH_LIST, additionalArchValues);",
                "+    this.platformFactory = platformFactory;",
                "   }",
                "-  public GoPlatformFlavorDomain() {",
                "-    this(ImmutableMap.of(), ImmutableMap.of());",
                "+  public GoPlatformFlavorDomain(GoPlatformFactory platformFactory) {",
                "+    this(ImmutableMap.of(), ImmutableMap.of(), platformFactory);",
                "   }",
                "@@ -95,3 +99,3 @@ public class GoPlatformFlavorDomain {",
                "       return Optional.of(",
                "-          GoPlatform.builder().setGoOs(components[0]).setGoArch(components[1]).build());",
                "+          platformFactory.getPlatform(components[0], components[1], GoBuckConfig.SECTION));",
                "     }",
                "@@ -136,6 +140,4 @@ public class GoPlatformFlavorDomain {",
                "     return Optional.of(",
                "-        GoPlatform.builder()",
                "-            .setGoOs(osValue.get().getKey())",
                "-            .setGoArch(archValue.get().getKey())",
                "-            .build());",
                "+        platformFactory.getPlatform(",
                "+            osValue.get().getKey(), archValue.get().getKey(), GoBuckConfig.SECTION));",
                "   }",
                "diff --git a/src/com/facebook/buck/go/GoTestDescription.java b/src/com/facebook/buck/go/GoTestDescription.java",
                "index f1436a3d48..0ea5295d7e 100644",
                "--- a/src/com/facebook/buck/go/GoTestDescription.java",
                "+++ b/src/com/facebook/buck/go/GoTestDescription.java",
                "@@ -145,3 +145,3 @@ public class GoTestDescription",
                "       BuildRuleResolver resolver,",
                "-      GoToolchain goToolchain,",
                "+      GoPlatform platform,",
                "       ImmutableSet<SourcePath> srcs,",
                "@@ -154,3 +154,3 @@ public class GoTestDescription",
                "             goBuckConfig,",
                "-            goToolchain,",
                "+            platform,",
                "             getCxxPlatform(!cgoDeps.isEmpty()),",
                "@@ -220,3 +220,3 @@ public class GoTestDescription",
                "                           args.getSrcs(),",
                "-                          goToolchain.getCover(),",
                "+                          platform.getCover(),",
                "                           coverage));",
                "@@ -249,3 +249,2 @@ public class GoTestDescription",
                "             resolver,",
                "-            goToolchain,",
                "             srcs.build(),",
                "@@ -276,3 +275,2 @@ public class GoTestDescription",
                "       BuildRuleResolver resolver,",
                "-      GoToolchain goToolchain,",
                "       ImmutableSet<SourcePath> srcs,",
                "@@ -295,3 +293,3 @@ public class GoTestDescription",
                "             resolver,",
                "-            goToolchain,",
                "+            platform,",
                "             srcs,",
                "@@ -310,3 +308,2 @@ public class GoTestDescription",
                "             goBuckConfig,",
                "-            goToolchain,",
                "             getCxxPlatform(!args.getCgoDeps().isEmpty()),",
                "@@ -370,3 +367,2 @@ public class GoTestDescription",
                "     GoCompile testLibrary;",
                "-    GoToolchain goToolchain = getGoToolchain();",
                "     if (args.getLibrary().isPresent()) {",
                "@@ -400,3 +396,2 @@ public class GoTestDescription",
                "               goBuckConfig,",
                "-              goToolchain,",
                "               packageName,",
                "@@ -431,3 +426,2 @@ public class GoTestDescription",
                "               goBuckConfig,",
                "-              goToolchain,",
                "               packageName,",
                "diff --git a/src/com/facebook/buck/go/GoToolchainFactory.java b/src/com/facebook/buck/go/GoToolchainFactory.java",
                "index 9d0e870ef8..684f47bf3c 100644",
                "--- a/src/com/facebook/buck/go/GoToolchainFactory.java",
                "+++ b/src/com/facebook/buck/go/GoToolchainFactory.java",
                "@@ -18,3 +18,2 @@ package com.facebook.buck.go;",
                "-import com.facebook.buck.io.ExecutableFinder;",
                " import com.facebook.buck.model.InternalFlavor;",
                "@@ -24,12 +23,4 @@ import com.facebook.buck.toolchain.ToolchainProvider;",
                " import com.facebook.buck.util.HumanReadableException;",
                "-import com.facebook.buck.util.ProcessExecutor;",
                "-import com.facebook.buck.util.ProcessExecutorParams;",
                " import com.facebook.buck.util.environment.Architecture;",
                " import com.facebook.buck.util.environment.Platform;",
                "-import com.google.common.base.CharMatcher;",
                "-import com.google.common.collect.ImmutableMap;",
                "-import java.io.IOException;",
                "-import java.nio.file.Path;",
                "-import java.nio.file.Paths;",
                "-import java.util.EnumSet;",
                " import java.util.Optional;",
                "@@ -38,4 +29,2 @@ public class GoToolchainFactory implements ToolchainFactory<GoToolchain> {",
                "-  private static final Path DEFAULT_GO_TOOL = Paths.get(\"go\");",
                "-",
                "   @Override",
                "@@ -44,3 +33,6 @@ public class GoToolchainFactory implements ToolchainFactory<GoToolchain> {",
                "-    GoPlatformFlavorDomain platformFlavorDomain = new GoPlatformFlavorDomain();",
                "+    GoPlatformFactory platformFactory =",
                "+        GoPlatformFactory.of(",
                "+            context.getBuckConfig(), context.getProcessExecutor(), context.getExecutableFinder());",
                "+    GoPlatformFlavorDomain platformFlavorDomain = new GoPlatformFlavorDomain(platformFactory);",
                "     GoBuckConfig goBuckConfig = new GoBuckConfig(context.getBuckConfig());",
                "@@ -49,7 +41,3 @@ public class GoToolchainFactory implements ToolchainFactory<GoToolchain> {",
                "         GoToolchain.of(",
                "-            goBuckConfig,",
                "-            platformFlavorDomain,",
                "-            getDefaultPlatform(goBuckConfig, platformFlavorDomain),",
                "-            getGoRoot(goBuckConfig, context.getProcessExecutor(), context.getExecutableFinder()),",
                "-            getToolDir(goBuckConfig, context.getProcessExecutor(), context.getExecutableFinder())));",
                "+            platformFlavorDomain, getDefaultPlatform(goBuckConfig, platformFlavorDomain)));",
                "   }",
                "@@ -77,71 +65,2 @@ public class GoToolchainFactory implements ToolchainFactory<GoToolchain> {",
                "   }",
                "-",
                "-  private Path getGoRoot(",
                "-      GoBuckConfig goBuckConfig,",
                "-      ProcessExecutor processExecutor,",
                "-      ExecutableFinder executableFinder) {",
                "-    Optional<Path> configValue = goBuckConfig.getGoRoot();",
                "-    if (configValue.isPresent()) {",
                "-      return configValue.get();",
                "-    }",
                "-",
                "-    return Paths.get(getGoEnvFromTool(goBuckConfig, processExecutor, executableFinder, \"GOROOT\"));",
                "-  }",
                "-",
                "-  private String getGoEnvFromTool(",
                "-      GoBuckConfig goBuckConfig,",
                "-      ProcessExecutor processExecutor,",
                "-      ExecutableFinder executableFinder,",
                "-      String env) {",
                "-    Path goTool = getGoToolPath(goBuckConfig, executableFinder);",
                "-    Optional<ImmutableMap<String, String>> goRootEnv =",
                "-        goBuckConfig.getGoRoot().map(input -> ImmutableMap.of(\"GOROOT\", input.toString()));",
                "-    try {",
                "-      ProcessExecutor.Result goToolResult =",
                "-          processExecutor.launchAndExecute(",
                "-              ProcessExecutorParams.builder()",
                "-                  .addCommand(goTool.toString(), \"env\", env)",
                "-                  .setEnvironment(goRootEnv)",
                "-                  .build(),",
                "-              EnumSet.of(ProcessExecutor.Option.EXPECTING_STD_OUT),",
                "-              /* stdin */ Optional.empty(),",
                "-              /* timeOutMs */ Optional.empty(),",
                "-              /* timeoutHandler */ Optional.empty());",
                "-      if (goToolResult.getExitCode() == 0) {",
                "-        return CharMatcher.whitespace().trimFrom(goToolResult.getStdout().get());",
                "-      } else {",
                "-        throw new HumanReadableException(goToolResult.getStderr().get());",
                "-      }",
                "-    } catch (InterruptedException e) {",
                "-      throw new RuntimeException(e);",
                "-    } catch (IOException e) {",
                "-      throw new HumanReadableException(",
                "-          e, \"Could not run \\\"%s env %s\\\": %s\", goTool, env, e.getMessage());",
                "-    }",
                "-  }",
                "-",
                "-  private Path getGoToolPath(GoBuckConfig goBuckConfig, ExecutableFinder executableFinder) {",
                "-    Optional<Path> goTool = goBuckConfig.getTool();",
                "-    if (goTool.isPresent()) {",
                "-      return goTool.get();",
                "-    }",
                "-",
                "-    // Try resolving it via the go root config var. We can't use goRootSupplier here since that",
                "-    // would create a recursion.",
                "-    Optional<Path> goRoot = goBuckConfig.getGoRoot();",
                "-    if (goRoot.isPresent()) {",
                "-      return goRoot.get().resolve(\"bin\").resolve(\"go\");",
                "-    }",
                "-",
                "-    return executableFinder.getExecutable(",
                "-        DEFAULT_GO_TOOL, goBuckConfig.getDelegate().getEnvironment());",
                "-  }",
                "-",
                "-  private Path getToolDir(",
                "-      GoBuckConfig goBuckConfig,",
                "-      ProcessExecutor processExecutor,",
                "-      ExecutableFinder executableFinder) {",
                "-    return Paths.get(",
                "-        getGoEnvFromTool(goBuckConfig, processExecutor, executableFinder, \"GOTOOLDIR\"));",
                "-  }",
                " }",
                "diff --git a/test/com/facebook/buck/go/BUCK b/test/com/facebook/buck/go/BUCK",
                "index 094e1cc610..d08ec79fd1 100644",
                "--- a/test/com/facebook/buck/go/BUCK",
                "+++ b/test/com/facebook/buck/go/BUCK",
                "@@ -9,2 +9,3 @@ java_test(",
                "     deps = [",
                "+        \":testutils\",",
                "         \"//src-gen:thrift\",",
                "@@ -102,3 +103,2 @@ java_test(",
                "         \"//src/com/facebook/buck/worker:worker_process\",",
                "-        \"//test/com/facebook/buck/go:assumptions\",",
                "         \"//test/com/facebook/buck/testutil:testutil\",",
                "@@ -138,2 +138,3 @@ java_test(",
                "     deps = [",
                "+        \":testutils\",",
                "         \"//src/com/facebook/buck/android:utils\",",
                "@@ -196,2 +197,3 @@ java_test(",
                "         \"//test/com/facebook/buck/cxx/toolchain:testutil\",",
                "+        \"//test/com/facebook/buck/io:testutil\",",
                "         \"//test/com/facebook/buck/io/filesystem:testutil\",",
                "@@ -202,2 +204,3 @@ java_test(",
                "         \"//test/com/facebook/buck/testutil/integration:util\",",
                "+        \"//test/com/facebook/buck/util:testutil\",",
                "         \"//third-party/java/asm:asm\",",
                "@@ -221,6 +224,7 @@ java_test(",
                " java_library(",
                "-    name = \"assumptions\",",
                "-    srcs = [",
                "-        \"GoAssumptions.java\",",
                "-    ],",
                "+    name = \"testutils\",",
                "+    srcs = glob(",
                "+        [\"*.java\"],",
                "+        exclude = [\"*Test.java\"],",
                "+    ),",
                "     deps = [",
                "diff --git a/test/com/facebook/buck/go/GoAssumptions.java b/test/com/facebook/buck/go/GoAssumptions.java",
                "index 176af8a71c..a297938301 100644",
                "--- a/test/com/facebook/buck/go/GoAssumptions.java",
                "+++ b/test/com/facebook/buck/go/GoAssumptions.java",
                "@@ -75,2 +75,3 @@ abstract class GoAssumptions {",
                "           .get()",
                "+          .getDefaultPlatform()",
                "           .getCompiler();",
                "diff --git a/test/com/facebook/buck/go/GoDescriptorsTest.java b/test/com/facebook/buck/go/GoDescriptorsTest.java",
                "index b4c7d486d3..caf83802f5 100644",
                "--- a/test/com/facebook/buck/go/GoDescriptorsTest.java",
                "+++ b/test/com/facebook/buck/go/GoDescriptorsTest.java",
                "@@ -146,10 +146,3 @@ public class GoDescriptorsTest {",
                "     GoBuckConfig goBuckConfig = new GoBuckConfig(FakeBuckConfig.builder().build());",
                "-    GoPlatform goPlatform = GoPlatform.builder().setGoArch(\"amd64\").setGoOs(\"linux\").build();",
                "-    GoToolchain goToolchain =",
                "-        GoToolchain.of(",
                "-            goBuckConfig,",
                "-            new GoPlatformFlavorDomain(),",
                "-            goPlatform,",
                "-            tmpPath.getRoot(),",
                "-            tmpPath.getRoot().resolve(\"go\"));",
                "+    GoPlatform goPlatform = GoTestUtils.DEFAULT_PLATFORM.withGoArch(\"amd64\").withGoOs(\"linux\");",
                "@@ -162,3 +155,2 @@ public class GoDescriptorsTest {",
                "             goBuckConfig,",
                "-            goToolchain,",
                "             Paths.get(\"package\"),",
                "@@ -201,10 +193,3 @@ public class GoDescriptorsTest {",
                "     GoBuckConfig goBuckConfig = new GoBuckConfig(FakeBuckConfig.builder().build());",
                "-    GoPlatform goPlatform = GoPlatform.builder().setGoArch(\"amd64\").setGoOs(\"linux\").build();",
                "-    GoToolchain goToolchain =",
                "-        GoToolchain.of(",
                "-            goBuckConfig,",
                "-            new GoPlatformFlavorDomain(),",
                "-            goPlatform,",
                "-            tmpPath.getRoot(),",
                "-            tmpPath.getRoot().resolve(\"go\"));",
                "+    GoPlatform goPlatform = GoTestUtils.DEFAULT_PLATFORM.withGoArch(\"amd64\").withGoOs(\"linux\");",
                "@@ -217,3 +202,2 @@ public class GoDescriptorsTest {",
                "             goBuckConfig,",
                "-            goToolchain,",
                "             CxxPlatformUtils.DEFAULT_PLATFORM,",
                "diff --git a/test/com/facebook/buck/go/GoPlatformFactoryTest.java b/test/com/facebook/buck/go/GoPlatformFactoryTest.java",
                "new file mode 100644",
                "index 0000000000..35a75a3f6a",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/GoPlatformFactoryTest.java",
                "@@ -0,0 +1,56 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.go;",
                "+",
                "+import static org.junit.Assert.assertThat;",
                "+",
                "+import com.facebook.buck.config.FakeBuckConfig;",
                "+import com.facebook.buck.io.AlwaysFoundExecutableFinder;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.testutil.FakeProjectFilesystem;",
                "+import com.facebook.buck.util.FakeProcessExecutor;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import java.io.IOException;",
                "+import java.nio.file.Path;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Test;",
                "+",
                "+public class GoPlatformFactoryTest {",
                "+",
                "+  @Test",
                "+  public void getPlatform() throws IOException {",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    Path root = filesystem.resolve(\"root\");",
                "+    filesystem.mkdirs(root);",
                "+    GoPlatformFactory factory =",
                "+        GoPlatformFactory.of(",
                "+            FakeBuckConfig.builder()",
                "+                .setFilesystem(filesystem)",
                "+                .setSections(",
                "+                    ImmutableMap.of(",
                "+                        \"section\",",
                "+                        ImmutableMap.of(",
                "+                            \"root\", root.toString(),",
                "+                            \"tool_dir\", root.toString())))",
                "+                .build(),",
                "+            new FakeProcessExecutor(),",
                "+            new AlwaysFoundExecutableFinder());",
                "+    GoPlatform platform = factory.getPlatform(\"os\", \"arch\", \"section\");",
                "+    assertThat(platform.getGoOs(), Matchers.equalTo(\"os\"));",
                "+    assertThat(platform.getGoArch(), Matchers.equalTo(\"arch\"));",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/go/GoTestUtils.java b/test/com/facebook/buck/go/GoTestUtils.java",
                "new file mode 100644",
                "index 0000000000..addba65a63",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/go/GoTestUtils.java",
                "@@ -0,0 +1,38 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.go;",
                "+",
                "+import com.facebook.buck.rules.CommandTool;",
                "+import java.nio.file.Paths;",
                "+",
                "+public class GoTestUtils {",
                "+",
                "+  public static final GoPlatform DEFAULT_PLATFORM =",
                "+      GoPlatform.builder()",
                "+          .setGoOs(\"os\")",
                "+          .setGoArch(\"arch\")",
                "+          .setGoRoot(Paths.get(\"/root\"))",
                "+          .setToolDir(Paths.get(\"/tools_dir\"))",
                "+          .setCompiler(new CommandTool.Builder().build())",
                "+          .setAssembler(new CommandTool.Builder().build())",
                "+          .setLinker(new CommandTool.Builder().build())",
                "+          .setCGo(new CommandTool.Builder().build())",
                "+          .setPacker(new CommandTool.Builder().build())",
                "+          .setLinker(new CommandTool.Builder().build())",
                "+          .setCover(new CommandTool.Builder().build())",
                "+          .build();",
                "+}"
            ],
            "changed_files": [
                "src/com/facebook/buck/go/AbstractGoPlatform.java",
                "src/com/facebook/buck/go/AbstractGoPlatformFactory.java",
                "src/com/facebook/buck/go/AbstractGoToolchain.java",
                "src/com/facebook/buck/go/CgoLibraryDescription.java",
                "src/com/facebook/buck/go/FilteredSourceFiles.java",
                "src/com/facebook/buck/go/GoBinaryDescription.java",
                "src/com/facebook/buck/go/GoBuckConfig.java",
                "src/com/facebook/buck/go/GoCompile.java",
                "src/com/facebook/buck/go/GoDescriptors.java",
                "src/com/facebook/buck/go/GoLibraryDescription.java",
                "src/com/facebook/buck/go/GoListStep.java",
                "src/com/facebook/buck/go/GoPlatformFlavorDomain.java",
                "src/com/facebook/buck/go/GoTestDescription.java",
                "src/com/facebook/buck/go/GoToolchainFactory.java",
                "test/com/facebook/buck/go/BUCK",
                "test/com/facebook/buck/go/GoAssumptions.java",
                "test/com/facebook/buck/go/GoDescriptorsTest.java",
                "test/com/facebook/buck/go/GoPlatformFactoryTest.java",
                "test/com/facebook/buck/go/GoTestUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f680a42794055aac45a03ae6531b396a1afb70e6",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522358427,
            "hunks": 1,
            "message": "build.create_build_output_symlinks_enabled should use ProjectFilesystem for symbolic links Summary: Because of windows: ProjectFilesystem should always be used for creating symbolic links Reviewed By: styurin fbshipit-source-id: 1fe98db",
            "diff": [
                "diff --git a/src/com/facebook/buck/cli/BuildCommand.java b/src/com/facebook/buck/cli/BuildCommand.java",
                "index 5e36c2691f..a93c33c4df 100644",
                "--- a/src/com/facebook/buck/cli/BuildCommand.java",
                "+++ b/src/com/facebook/buck/cli/BuildCommand.java",
                "@@ -697,3 +697,4 @@ public class BuildCommand extends AbstractCommand {",
                "       if (!Files.exists(linkPath)) {",
                "-        Files.createSymbolicLink(linkPath, destPath);",
                "+        ProjectFilesystem projectFilesystem = rule.getProjectFilesystem();",
                "+        projectFilesystem.createSymLink(linkPath, destPath, false);",
                "       }"
            ],
            "changed_files": [
                "src/com/facebook/buck/cli/BuildCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, command",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d5c0d3d7587ee86c7339abf3b0a1ab97843dd239",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521827866,
            "hunks": 6,
            "message": "@After in EndToEndRunner Summary: Part of bringing EndToEndRunner more consistent with the default JUnit runner Reviewed By: bobyangyf fbshipit-source-id: b44f135",
            "diff": [
                "diff --git a/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java b/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java",
                "index a213f9f4ee..23bef60abd 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java",
                "+++ b/test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java",
                "@@ -28,2 +28,3 @@ import java.util.Set;",
                " import java.util.stream.Collectors;",
                "+import org.junit.After;",
                " import org.junit.Before;",
                "@@ -32,2 +33,3 @@ import org.junit.internal.runners.model.ReflectiveCallable;",
                " import org.junit.internal.runners.statements.Fail;",
                "+import org.junit.internal.runners.statements.RunAfters;",
                " import org.junit.internal.runners.statements.RunBefores;",
                "@@ -270,2 +272,7 @@ public class EndToEndRunner extends ParentRunner<EndToEndTestDescriptor> {",
                "+  private void validateTestAnnotations(List<Throwable> errors) {",
                "+    validatePublicVoidNoArgMethods(Before.class, false, errors);",
                "+    validatePublicVoidNoArgMethods(After.class, false, errors);",
                "+  }",
                "+",
                "   /**",
                "@@ -335,2 +342,7 @@ public class EndToEndRunner extends ParentRunner<EndToEndTestDescriptor> {",
                "+  private Statement withAfters(Object target, Statement statement) {",
                "+    List<FrameworkMethod> afters = getTestClass().getAnnotatedMethods(After.class);",
                "+    return afters.isEmpty() ? statement : new RunAfters(statement, afters, target);",
                "+  }",
                "+",
                "   private Object createTest() throws Exception {",
                "@@ -356,2 +368,3 @@ public class EndToEndRunner extends ParentRunner<EndToEndTestDescriptor> {",
                "     statement = withBefores(test, statement);",
                "+    statement = withAfters(test, statement);",
                "     return statement;",
                "@@ -364,3 +377,3 @@ public class EndToEndRunner extends ParentRunner<EndToEndTestDescriptor> {",
                "     validateEnvironments(errors);",
                "-    validatePublicVoidNoArgMethods(Before.class, false, errors);",
                "+    validateTestAnnotations(errors);",
                "   }"
            ],
            "changed_files": [
                "test/com/facebook/buck/testutil/endtoend/EndToEndRunner.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a4ceca79fc199591091198feba762754f368d962",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522691884,
            "hunks": 12,
            "message": "Remove logging from ThriftScribeLogger Summary: If ThiftLogger is used as a log handler, then logging causes infinite recursion. Remove all logging calls. Reviewed By: bobyangyf fbshipit-source-id: f1dade7",
            "diff": [
                "diff --git a/src/com/facebook/buck/util/network/ThriftScribeLogger.java b/src/com/facebook/buck/util/network/ThriftScribeLogger.java",
                "index dee2db86ea..df7491ab49 100644",
                "--- a/src/com/facebook/buck/util/network/ThriftScribeLogger.java",
                "+++ b/src/com/facebook/buck/util/network/ThriftScribeLogger.java",
                "@@ -24,3 +24,2 @@ import com.facebook.buck.distributed.thrift.LogRequestType;",
                " import com.facebook.buck.distributed.thrift.ScribeData;",
                "-import com.facebook.buck.log.Logger;",
                " import com.facebook.buck.slb.ThriftService;",
                "@@ -31,7 +30,4 @@ import com.google.common.util.concurrent.ListeningExecutorService;",
                " import java.io.IOException;",
                "-import java.util.concurrent.Callable;",
                " public class ThriftScribeLogger extends ScribeLogger {",
                "-  private static final Logger LOG = Logger.get(ThriftScribeLogger.class);",
                "-",
                "@@ -51,8 +47,5 @@ public class ThriftScribeLogger extends ScribeLogger {",
                "       if (executorService.isShutdown()) {",
                "-        String errorMessage =",
                "-            String.format(",
                "-                \"%s will not accept any more log calls because it has already been closed.\",",
                "-                getClass());",
                "-        LOG.warn(errorMessage);",
                "-        return Futures.immediateFailedCheckedFuture(new IllegalStateException(errorMessage));",
                "+        // If executor is shut down, we do nothing. We can't throw here because Buck may want to",
                "+        // log the exception potentially using this logger causing infinite loop",
                "+        return Futures.immediateFuture(null);",
                "       }",
                "@@ -61,8 +54,5 @@ public class ThriftScribeLogger extends ScribeLogger {",
                "     return executorService.submit(",
                "-        new Callable<Void>() {",
                "-          @Override",
                "-          public Void call() throws Exception {",
                "-            sendViaThrift(category, lines);",
                "-            return null;",
                "-          }",
                "+        () -> {",
                "+          sendViaThrift(category, lines);",
                "+          return null;",
                "         });",
                "@@ -71,3 +61,3 @@ public class ThriftScribeLogger extends ScribeLogger {",
                "   private void sendViaThrift(String category, Iterable<String> lines) throws IOException {",
                "-    //Prepare log request.",
                "+    // Prepare log request.",
                "     ScribeData scribeData = new ScribeData();",
                "@@ -94,21 +84,7 @@ public class ThriftScribeLogger extends ScribeLogger {",
                "   static void copyLinesWithoutNulls(Iterable<String> lines, ScribeData scribeData) {",
                "-    int numberOfNullLines = 0;",
                "-    int totalLines = 0;",
                "     for (String line : lines) {",
                "-      ++totalLines;",
                "       if (line != null) {",
                "         scribeData.addToLines(line);",
                "-      } else {",
                "-        ++numberOfNullLines;",
                "       }",
                "     }",
                "-",
                "-    // TODO(ruibm): This way we get some signal where the null lines are coming from and still send",
                "-    // back as much non-corrupted data as we can.",
                "-    if (numberOfNullLines > 0) {",
                "-      LOG.error(",
                "-          String.format(",
                "-              \"Out of [%d] log lines, [%d] were null for category [%s].\",",
                "-              totalLines, numberOfNullLines, scribeData.getCategory()));",
                "-    }",
                "   }",
                "diff --git a/test/com/facebook/buck/util/network/ThriftScribeLoggerTest.java b/test/com/facebook/buck/util/network/ThriftScribeLoggerTest.java",
                "index 0b018ede39..51f693d551 100644",
                "--- a/test/com/facebook/buck/util/network/ThriftScribeLoggerTest.java",
                "+++ b/test/com/facebook/buck/util/network/ThriftScribeLoggerTest.java",
                "@@ -131,3 +131,3 @@ public class ThriftScribeLoggerTest {",
                "   @Test",
                "-  public void allLogRequestsFailAfterClosingTheLogger()",
                "+  public void allLogRequestsDoNotFailAfterClosingTheLogger()",
                "       throws IOException, ExecutionException, InterruptedException {",
                "@@ -137,4 +137,2 @@ public class ThriftScribeLoggerTest {",
                "     assertTrue(future.isDone());",
                "-    expectedException.expect(ExecutionException.class);",
                "-    expectedException.expectCause(Matchers.any(IllegalStateException.class));",
                "     future.get();"
            ],
            "changed_files": [
                "src/com/facebook/buck/util/network/ThriftScribeLogger.java",
                "test/com/facebook/buck/util/network/ThriftScribeLoggerTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "dcbc69700809ac65519abf0ed34e58cf8e5b78f0",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522947476,
            "hunks": 4,
            "message": "Fix interrupt handling Summary: Buck with buckd doesn't propagate termination signal properly to subprocesses. e.g. testpilot, which prevents proper logging from occuring. Buck now sends sigint to subprocesses instead of sighup so subprocesses can perform cleanup as needed Reviewed By: ttsugriy fbshipit-source-id: 4a00100",
            "diff": [
                "diff --git a/src/com/facebook/buck/cli/Main.java b/src/com/facebook/buck/cli/Main.java",
                "index 65814f5eb7..3fe10c87cb 100644",
                "--- a/src/com/facebook/buck/cli/Main.java",
                "+++ b/src/com/facebook/buck/cli/Main.java",
                "@@ -1339,3 +1339,3 @@ public final class Main {",
                "             LOG.debug(\"Killing background processes on client disconnect\");",
                "-            BgProcessKiller.killBgProcesses();",
                "+            BgProcessKiller.interruptBgProcesses();",
                "           }",
                "diff --git a/src/com/facebook/buck/util/BgProcessKiller.java b/src/com/facebook/buck/util/BgProcessKiller.java",
                "index d6dca8f533..bd44466a3a 100644",
                "--- a/src/com/facebook/buck/util/BgProcessKiller.java",
                "+++ b/src/com/facebook/buck/util/BgProcessKiller.java",
                "@@ -83,6 +83,7 @@ public class BgProcessKiller {",
                "-  public static synchronized void killBgProcesses() {",
                "+  /** Sends SIGINT to all background processes */",
                "+  public static synchronized void interruptBgProcesses() {",
                "     if (initialized) {",
                "       armed = true;",
                "-      Libc.INSTANCE.kill(0 /* my process group */, Libc.Constants.SIGHUP);",
                "+      Libc.INSTANCE.kill(0 /* my process group */, Libc.Constants.SIGINT);",
                "     }",
                "diff --git a/src/com/facebook/buck/util/Libc.java b/src/com/facebook/buck/util/Libc.java",
                "index 2a029aca7a..0ebe580b17 100644",
                "--- a/src/com/facebook/buck/util/Libc.java",
                "+++ b/src/com/facebook/buck/util/Libc.java",
                "@@ -62,2 +62,3 @@ public interface Libc extends Library {",
                "     public static final int SIGHUP = 1;",
                "+    public static final int SIGINT = 2;",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/cli/Main.java",
                "src/com/facebook/buck/util/BgProcessKiller.java",
                "src/com/facebook/buck/util/Libc.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "dbc755e09dcd43d45b4142258d5584f3a5f8d971",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522118990,
            "hunks": 5,
            "message": "Remove backport of CalledProcessError for Python 2.6. Summary: Buck officially requires Python 2.7+. Reviewed By: styurin fbshipit-source-id: f1ffe91",
            "diff": [
                "diff --git a/programs/buck.py b/programs/buck.py",
                "index 33845fe201..c3fcbfdb22 100755",
                "--- a/programs/buck.py",
                "+++ b/programs/buck.py",
                "@@ -32,3 +32,4 @@ from buck_project import BuckProject, NoBuckConfigFoundException",
                " from tracing import Tracing",
                "-from subprocutils import propagate_failure, check_output",
                "+from subprocutils import propagate_failure",
                "+from subprocess import check_output",
                "diff --git a/programs/buck_tool.py b/programs/buck_tool.py",
                "index 51ee2c580c..327bc075ef 100644",
                "--- a/programs/buck_tool.py",
                "+++ b/programs/buck_tool.py",
                "@@ -20,3 +20,4 @@ from timing import monotonic_time_nanos",
                " from tracing import Tracing",
                "-from subprocutils import check_output, which, CalledProcessError",
                "+from subprocutils import which",
                "+from subprocess import check_output, CalledProcessError",
                "diff --git a/programs/buck_version.py b/programs/buck_version.py",
                "index 8bbda3f0fb..6a024184d4 100644",
                "--- a/programs/buck_version.py",
                "+++ b/programs/buck_version.py",
                "@@ -7,3 +7,4 @@ import tempfile",
                "-from subprocutils import check_output, which, CalledProcessError",
                "+from subprocutils import which",
                "+from subprocess import check_output, CalledProcessError",
                "diff --git a/programs/subprocutils.py b/programs/subprocutils.py",
                "index c10bfe5c49..e1051c495e 100644",
                "--- a/programs/subprocutils.py",
                "+++ b/programs/subprocutils.py",
                "@@ -1,3 +1,2 @@",
                " import os",
                "-import subprocess",
                " import sys",
                "@@ -5,29 +4,2 @@ import sys",
                "-# Backport of the Python 2.7 subprocess.CalledProcessError, including",
                "-# an `output` attribute.",
                "-class CalledProcessError(subprocess.CalledProcessError):",
                "-    def __init__(self, returncode, cmd, output=None):",
                "-        super(CalledProcessError, self).__init__(returncode, cmd)",
                "-        self.output = output",
                "-",
                "-",
                "-# Backport of the Python 2.7 subprocess.check_output. Taken from",
                "-# http://hg.python.org/cpython/file/71cb8f605f77/Lib/subprocess.py",
                "-# Copyright (c) 2003-2005 by Peter Astrand <astrand@lysator.liu.se>",
                "-# Licensed to PSF under a Contributor Agreement.",
                "-# See http://www.python.org/2.4/license for licensing details.",
                "-def check_output(*popenargs, **kwargs):",
                "-    if 'stdout' in kwargs:",
                "-        raise ValueError('stdout argument not allowed, it will be overridden.')",
                "-    process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)",
                "-    output, unused_err = process.communicate()",
                "-    retcode = process.poll()",
                "-    if retcode:",
                "-        cmd = kwargs.get(\"args\")",
                "-        if cmd is None:",
                "-            cmd = popenargs[0]",
                "-        raise CalledProcessError(retcode, cmd, output=output)",
                "-    return output",
                "-",
                "-",
                " #"
            ],
            "changed_files": [
                "programs/buck.py",
                "programs/buck_tool.py",
                "programs/buck_version.py",
                "programs/subprocutils.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1014d9a0c41ec2ee9d2a147fc8ff8859db9d7a53",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521675387,
            "hunks": 1,
            "message": "Fix missed lambda capture of old BuildRuleResolver in CxxLibraryFactory Summary: This is causing an occasional crash during incremental action graph generation. Test Plan: CI Reviewed By: ttsugriy fbshipit-source-id: 63b4f59",
            "diff": [
                "diff --git a/src/com/facebook/buck/cxx/CxxLibraryFactory.java b/src/com/facebook/buck/cxx/CxxLibraryFactory.java",
                "index 853a46e020..85d992df9b 100644",
                "--- a/src/com/facebook/buck/cxx/CxxLibraryFactory.java",
                "+++ b/src/com/facebook/buck/cxx/CxxLibraryFactory.java",
                "@@ -305,3 +305,3 @@ public class CxxLibraryFactory {",
                "               args,",
                "-              cxxDeps.get(resolver, cxxPlatform),",
                "+              cxxDeps.get(ruleResolverInner, cxxPlatform),",
                "               CxxFlags.getFlagsWithMacrosWithPlatformMacroExpansion("
            ],
            "changed_files": [
                "src/com/facebook/buck/cxx/CxxLibraryFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fa14437b8c54738b34881b3b4d95482610041fea",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521417410,
            "hunks": 2,
            "message": "temporary allow directory export in js_bundle & jd_bundle_genrule Summary: `ExportFileDirectoryAction.FAIL` breaks js_bundle & js_bundle_genrule when they are built with a `#misc` flavor. Temporary allow it back until a proper fix is implemented. Test Plan: * `buck-beta build 'xplat//js/ComponentScript/Entrypoints/fb4a:Bundle-fb4a#android,misc,release,rambundle-indexed' --show-full-output` * verify that it succeeds and outputs expected files Reviewed By: ttsugriy fbshipit-source-id: 19415dc",
            "diff": [
                "diff --git a/src/com/facebook/buck/js/JsBundleDescription.java b/src/com/facebook/buck/js/JsBundleDescription.java",
                "index 2e0a3d18bf..83e5701259 100644",
                "--- a/src/com/facebook/buck/js/JsBundleDescription.java",
                "+++ b/src/com/facebook/buck/js/JsBundleDescription.java",
                "@@ -138,3 +138,4 @@ public class JsBundleDescription",
                "           bundleOutputs.getSourcePathToMisc(),",
                "-          ExportFileDirectoryAction.FAIL);",
                "+          // TODO(27131551): temporary allow directory export until a proper fix is implemented",
                "+          ExportFileDirectoryAction.ALLOW);",
                "     }",
                "diff --git a/src/com/facebook/buck/js/JsBundleGenruleDescription.java b/src/com/facebook/buck/js/JsBundleGenruleDescription.java",
                "index 5013507948..e8d2df2796 100644",
                "--- a/src/com/facebook/buck/js/JsBundleGenruleDescription.java",
                "+++ b/src/com/facebook/buck/js/JsBundleGenruleDescription.java",
                "@@ -121,3 +121,4 @@ public class JsBundleGenruleDescription",
                "           output,",
                "-          ExportFileDirectoryAction.FAIL);",
                "+          // TODO(27131551): temporary allow directory export until a proper fix is implemented",
                "+          ExportFileDirectoryAction.ALLOW);",
                "     }"
            ],
            "changed_files": [
                "src/com/facebook/buck/js/JsBundleDescription.java",
                "src/com/facebook/buck/js/JsBundleGenruleDescription.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "0a2528b6edca8288e92d29709c58b9c5f2e5841d",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521493431,
            "hunks": 1,
            "message": "Properly handle Java versions 9+. Summary: Support new Java versioning scheme. Test Plan: CI Reviewed By: philipjameson, styurin fbshipit-source-id: 520d503",
            "diff": [
                "diff --git a/programs/buck.py b/programs/buck.py",
                "index 16a78bb6d7..5fa18df37b 100755",
                "--- a/programs/buck.py",
                "+++ b/programs/buck.py",
                "@@ -63,3 +63,8 @@ def _get_java_version():",
                "         return None",
                "-    return match.group(\"version\").split(\".\")[1]",
                "+    pieces = match.group(\"version\").split(\".\")",
                "+    if pieces[0] != \"1\":",
                "+        # versions starting at 9 look like \"9.0.4\"",
                "+        return pieces[0]",
                "+    # versions <9 look like \"1.8.0_144\"",
                "+    return pieces[1]"
            ],
            "changed_files": [
                "programs/buck.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: java, version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "58a03f8d584caf954ff40e1a9d0bf4a399ba98a0",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521844487,
            "hunks": 13,
            "message": "ocaml: make `OcamlLibrary` a noop rule Summary: All implementers are noop rules, so use this as the base class. Reviewed By: dinhviethoa fbshipit-source-id: 89882fa",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/OcamlLibrary.java b/src/com/facebook/buck/ocaml/OcamlLibrary.java",
                "index c867b32b1e..31a59ed1da 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlLibrary.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlLibrary.java",
                "@@ -19,3 +19,7 @@ package com.facebook.buck.ocaml;",
                " import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                " import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.NoopBuildRuleWithDeclaredAndExtraDeps;",
                " import com.google.common.collect.ImmutableSortedSet;",
                "@@ -24,19 +28,26 @@ import java.nio.file.Path;",
                " /** An action graph representation of an OCaml library. */",
                "-public interface OcamlLibrary extends BuildRule {",
                "+public abstract class OcamlLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps {",
                "-  Path getIncludeLibDir();",
                "+  public OcamlLibrary(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams buildRuleParams) {",
                "+    super(buildTarget, projectFilesystem, buildRuleParams);",
                "+  }",
                "-  Iterable<String> getBytecodeIncludeDirs();",
                "+  public abstract Path getIncludeLibDir();",
                "+",
                "+  public abstract Iterable<String> getBytecodeIncludeDirs();",
                "   /** Dependencies for the native (ocamlopt) build */",
                "-  ImmutableSortedSet<BuildRule> getNativeCompileDeps();",
                "+  public abstract ImmutableSortedSet<BuildRule> getNativeCompileDeps();",
                "   /** Dependencies for the bytecode (ocamlc) build */",
                "-  ImmutableSortedSet<BuildRule> getBytecodeCompileDeps();",
                "+  public abstract ImmutableSortedSet<BuildRule> getBytecodeCompileDeps();",
                "-  ImmutableSortedSet<BuildRule> getBytecodeLinkDeps();",
                "+  public abstract ImmutableSortedSet<BuildRule> getBytecodeLinkDeps();",
                "-  NativeLinkableInput getNativeLinkableInput();",
                "+  public abstract NativeLinkableInput getNativeLinkableInput();",
                "-  NativeLinkableInput getBytecodeLinkableInput();",
                "+  public abstract NativeLinkableInput getBytecodeLinkableInput();",
                " }",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java b/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "index bdf7f15d25..90f3589336 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "@@ -26,3 +26,2 @@ import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                " import com.facebook.buck.rules.HasRuntimeDeps;",
                "-import com.facebook.buck.rules.NoopBuildRuleWithDeclaredAndExtraDeps;",
                " import com.facebook.buck.rules.SourcePath;",
                "@@ -37,4 +36,3 @@ import java.util.stream.Stream;",
                "-class OcamlStaticLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "-    implements OcamlLibrary, HasRuntimeDeps {",
                "+class OcamlStaticLibrary extends OcamlLibrary implements HasRuntimeDeps {",
                "   private final BuildTarget staticLibraryTarget;",
                "diff --git a/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java b/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java",
                "index b18c533925..9e5a3558c5 100644",
                "--- a/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java",
                "+++ b/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java",
                "@@ -21,8 +21,5 @@ import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                " import com.facebook.buck.model.BuildTarget;",
                "-import com.facebook.buck.rules.AbstractBuildRuleWithDeclaredAndExtraDeps;",
                " import com.facebook.buck.rules.AddToRuleKey;",
                "-import com.facebook.buck.rules.BuildContext;",
                " import com.facebook.buck.rules.BuildRule;",
                " import com.facebook.buck.rules.BuildRuleParams;",
                "-import com.facebook.buck.rules.BuildableContext;",
                " import com.facebook.buck.rules.SourcePath;",
                "@@ -31,3 +28,2 @@ import com.facebook.buck.rules.args.Arg;",
                " import com.facebook.buck.rules.args.SourcePathArg;",
                "-import com.facebook.buck.step.Step;",
                " import com.google.common.collect.ImmutableList;",
                "@@ -37,6 +33,4 @@ import java.nio.file.Path;",
                " import java.util.Optional;",
                "-import javax.annotation.Nullable;",
                "-class PrebuiltOcamlLibrary extends AbstractBuildRuleWithDeclaredAndExtraDeps",
                "-    implements OcamlLibrary {",
                "+class PrebuiltOcamlLibrary extends OcamlLibrary {",
                "@@ -130,14 +124,2 @@ class PrebuiltOcamlLibrary extends AbstractBuildRuleWithDeclaredAndExtraDeps",
                "   }",
                "-",
                "-  @Override",
                "-  public ImmutableList<Step> getBuildSteps(",
                "-      BuildContext context, BuildableContext buildableContext) {",
                "-    return ImmutableList.of();",
                "-  }",
                "-",
                "-  @Nullable",
                "-  @Override",
                "-  public SourcePath getSourcePathToOutput() {",
                "-    return null;",
                "-  }",
                " }"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/OcamlLibrary.java",
                "src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "22094f5b3ce97a0192ee60d1368bf744a3542f95",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521754565,
            "hunks": 9,
            "message": "ocaml: set platform parse-time deps Summary: Make sure OCaml descriptions set platform-specific parse-time deps. Test Plan: CI Reviewed By: styurin fbshipit-source-id: bf13922",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "index 33c112b5e1..4e7b56fc50 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "@@ -18,4 +18,2 @@ package com.facebook.buck.ocaml;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                " import com.facebook.buck.model.BuildTarget;",
                "@@ -107,6 +105,6 @@ public class OcamlBinaryDescription",
                "     targetGraphOnlyDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(",
                "+        OcamlUtil.getParseTimeDeps(",
                "             toolchainProvider",
                "-                .getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class)",
                "-                .getDefaultCxxPlatform()));",
                "+                .getByName(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.class)",
                "+                .getDefaultOcamlPlatform()));",
                "   }",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "index 95362c5155..04b0549377 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "@@ -18,4 +18,2 @@ package com.facebook.buck.ocaml;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                " import com.facebook.buck.model.BuildTarget;",
                "@@ -111,6 +109,6 @@ public class OcamlLibraryDescription",
                "     targetGraphOnlyDepsBuilder.addAll(",
                "-        CxxPlatforms.getParseTimeDeps(",
                "+        OcamlUtil.getParseTimeDeps(",
                "             toolchainProvider",
                "-                .getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class)",
                "-                .getDefaultCxxPlatform()));",
                "+                .getByName(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.class)",
                "+                .getDefaultOcamlPlatform()));",
                "   }",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlUtil.java b/src/com/facebook/buck/ocaml/OcamlUtil.java",
                "index 6f3507d29b..5da9a8859d 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlUtil.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlUtil.java",
                "@@ -18,4 +18,6 @@ package com.facebook.buck.ocaml;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                " import com.facebook.buck.graph.DirectedAcyclicGraph;",
                " import com.facebook.buck.graph.TopologicalSort;",
                "+import com.facebook.buck.model.BuildTarget;",
                " import com.facebook.buck.rules.BuildRule;",
                "@@ -97,2 +99,11 @@ public class OcamlUtil {",
                "   }",
                "+",
                "+  static Iterable<BuildTarget> getParseTimeDeps(OcamlPlatform platform) {",
                "+    ImmutableSet.Builder<BuildTarget> deps = ImmutableSet.builder();",
                "+    deps.addAll(platform.getCCompiler().getParseTimeDeps());",
                "+    deps.addAll(platform.getCxxCompiler().getParseTimeDeps());",
                "+    deps.addAll(platform.getCPreprocessor().getParseTimeDeps());",
                "+    deps.addAll(CxxPlatforms.getParseTimeDeps(platform.getCxxPlatform()));",
                "+    return deps.build();",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6345e04795abb11f2b4c19aa68655243bf8a3ed3",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522387448,
            "hunks": 3,
            "message": "Remove unnecessary local variable. Reviewed By: styurin fbshipit-source-id: c3a47aa",
            "diff": [
                "diff --git a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "index cd73cd147a..3d07ff9873 100644",
                "--- a/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "+++ b/src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java",
                "@@ -417,3 +417,2 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "   private Environment.GlobalFrame getBuckGlobals(boolean disableImplicitNativeRules) {",
                "-    Environment.GlobalFrame buckGlobals;",
                "     try (Mutability mutability = Mutability.create(\"global\")) {",
                "@@ -432,5 +431,4 @@ public class SkylarkProjectBuildFileParser implements ProjectBuildFileParser {",
                "       }",
                "-      buckGlobals = globalEnv.getGlobals();",
                "+      return globalEnv.getGlobals();",
                "     }",
                "-    return buckGlobals;",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/skylark/parser/SkylarkProjectBuildFileParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, parser",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "58f21361c00376a16851929cc011af4833c11d85",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522136550,
            "hunks": 5,
            "message": "ocaml: add `platform` parameter to `ocaml_binary` rules Summary: Adds a parameter which allows `ocaml_binary` rules to select the OCaml platform to build against. Reviewed By: ttsugriy fbshipit-source-id: 5e12030",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "index 11b3ec12cf..802b5cdfb4 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlBinaryDescription.java",
                "@@ -20,2 +20,4 @@ import com.facebook.buck.cxx.CxxDeps;",
                " import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.FlavorDomain;",
                " import com.facebook.buck.rules.BuildRule;",
                "@@ -58,2 +60,11 @@ public class OcamlBinaryDescription",
                "+  private OcamlPlatform getPlatform(Optional<Flavor> platformFlavor) {",
                "+    OcamlToolchain ocamlToolchain =",
                "+        toolchainProvider.getByName(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.class);",
                "+    FlavorDomain<OcamlPlatform> ocamlPlatforms = ocamlToolchain.getOcamlPlatforms();",
                "+    return platformFlavor",
                "+        .map(ocamlPlatforms::getValue)",
                "+        .orElse(ocamlToolchain.getDefaultOcamlPlatform());",
                "+  }",
                "+",
                "   @Override",
                "@@ -65,5 +76,3 @@ public class OcamlBinaryDescription",
                "-    OcamlToolchain ocamlToolchain =",
                "-        toolchainProvider.getByName(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.class);",
                "-    OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();",
                "+    OcamlPlatform ocamlPlatform = getPlatform(args.getPlatform());",
                "@@ -142,6 +151,3 @@ public class OcamlBinaryDescription",
                "     targetGraphOnlyDepsBuilder.addAll(",
                "-        OcamlUtil.getParseTimeDeps(",
                "-            toolchainProvider",
                "-                .getByName(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.class)",
                "-                .getDefaultOcamlPlatform()));",
                "+        OcamlUtil.getParseTimeDeps(getPlatform(constructorArg.getPlatform())));",
                "   }",
                "@@ -163,2 +169,4 @@ public class OcamlBinaryDescription",
                "+    Optional<Flavor> getPlatform();",
                "+",
                "     @Value.Default"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/OcamlBinaryDescription.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7303b910b7d71a94da9199cc3d2364fe1d72dad7",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522431469,
            "hunks": 14,
            "message": "Remove id from BuckModule annotation Summary: Removing `id` field from `BuckModule` annotation since it's not used. Reviewed By: jtorkkola, ttsugriy fbshipit-source-id: bddc58b",
            "diff": [
                "diff --git a/src/com/facebook/buck/d/DModule.java b/src/com/facebook/buck/d/DModule.java",
                "index 2d643327dc..1924de7b72 100644",
                "--- a/src/com/facebook/buck/d/DModule.java",
                "+++ b/src/com/facebook/buck/d/DModule.java",
                "@@ -21,3 +21,3 @@ import com.facebook.buck.module.BuckModule;",
                " /** A modules that provides D build rules. */",
                "-@BuckModule(id = \"com.facebook.buck.d\")",
                "+@BuckModule",
                " public class DModule {}",
                "diff --git a/src/com/facebook/buck/dotnet/DotnetModule.java b/src/com/facebook/buck/dotnet/DotnetModule.java",
                "index defcfc262d..ccfd6070bc 100644",
                "--- a/src/com/facebook/buck/dotnet/DotnetModule.java",
                "+++ b/src/com/facebook/buck/dotnet/DotnetModule.java",
                "@@ -21,3 +21,3 @@ import com.facebook.buck.module.BuckModule;",
                " /** A modules that provides .NET build rules. */",
                "-@BuckModule(id = \"com.facebook.buck.dotnet\")",
                "+@BuckModule",
                " public class DotnetModule {}",
                "diff --git a/src/com/facebook/buck/go/GoModule.java b/src/com/facebook/buck/go/GoModule.java",
                "index b1039c5405..527bbc830b 100644",
                "--- a/src/com/facebook/buck/go/GoModule.java",
                "+++ b/src/com/facebook/buck/go/GoModule.java",
                "@@ -20,3 +20,3 @@ import com.facebook.buck.module.BuckModule;",
                "-@BuckModule(id = \"com.facebook.buck.go\")",
                "+@BuckModule",
                " public class GoModule {}",
                "diff --git a/src/com/facebook/buck/haskell/HaskellModule.java b/src/com/facebook/buck/haskell/HaskellModule.java",
                "index 1bda9120ed..ab7c9d6b5b 100644",
                "--- a/src/com/facebook/buck/haskell/HaskellModule.java",
                "+++ b/src/com/facebook/buck/haskell/HaskellModule.java",
                "@@ -20,3 +20,3 @@ import com.facebook.buck.module.BuckModule;",
                "-@BuckModule(id = \"com.facebook.buck.haskell\")",
                "+@BuckModule",
                " public class HaskellModule {}",
                "diff --git a/src/com/facebook/buck/lua/LuaModule.java b/src/com/facebook/buck/lua/LuaModule.java",
                "index 634ce183b5..d7287eac46 100644",
                "--- a/src/com/facebook/buck/lua/LuaModule.java",
                "+++ b/src/com/facebook/buck/lua/LuaModule.java",
                "@@ -20,3 +20,3 @@ import com.facebook.buck.module.BuckModule;",
                "-@BuckModule(id = \"com.facebook.buck.lua\")",
                "+@BuckModule",
                " public class LuaModule {}",
                "diff --git a/src/com/facebook/buck/module/BuckModule.java b/src/com/facebook/buck/module/BuckModule.java",
                "index e86c4023db..5e9fcf8516 100644",
                "--- a/src/com/facebook/buck/module/BuckModule.java",
                "+++ b/src/com/facebook/buck/module/BuckModule.java",
                "@@ -32,5 +32,2 @@ import java.lang.annotation.Target;",
                " public @interface BuckModule {",
                "-  /** ID of the module. */",
                "-  String id();",
                "-",
                "   /** IDs of the modules this module depend on. */",
                "diff --git a/src/com/facebook/buck/rust/RustModule.java b/src/com/facebook/buck/rust/RustModule.java",
                "index cb5a8d1323..309cb948ad 100644",
                "--- a/src/com/facebook/buck/rust/RustModule.java",
                "+++ b/src/com/facebook/buck/rust/RustModule.java",
                "@@ -21,3 +21,3 @@ import com.facebook.buck.module.BuckModule;",
                " /** A modules that provides Rust build rules. */",
                "-@BuckModule(id = \"com.facebook.buck.rust\")",
                "+@BuckModule",
                " public class RustModule {}",
                "diff --git a/src/com/facebook/buck/shell/filegroup/FilegroupModule.java b/src/com/facebook/buck/shell/filegroup/FilegroupModule.java",
                "index 35bbb9886a..e1e4ad2247 100644",
                "--- a/src/com/facebook/buck/shell/filegroup/FilegroupModule.java",
                "+++ b/src/com/facebook/buck/shell/filegroup/FilegroupModule.java",
                "@@ -22,3 +22,2 @@ import com.facebook.buck.zip.bundler.ZipBundlerModule;",
                " @BuckModule(",
                "-  id = \"com.facebook.buck.shell.filegroup\",",
                "   dependencies = {",
                "diff --git a/src/com/facebook/buck/zip/bundler/ZipBundlerModule.java b/src/com/facebook/buck/zip/bundler/ZipBundlerModule.java",
                "index 1582e29899..d74de7afaf 100644",
                "--- a/src/com/facebook/buck/zip/bundler/ZipBundlerModule.java",
                "+++ b/src/com/facebook/buck/zip/bundler/ZipBundlerModule.java",
                "@@ -20,3 +20,3 @@ import com.facebook.buck.module.BuckModule;",
                "-@BuckModule(id = \"com.facebook.buck.zip.bundler\")",
                "+@BuckModule",
                " public class ZipBundlerModule {}",
                "diff --git a/src/com/facebook/buck/zip/rules/ZipRulesModule.java b/src/com/facebook/buck/zip/rules/ZipRulesModule.java",
                "index 61bbd69cda..877ac3cd22 100644",
                "--- a/src/com/facebook/buck/zip/rules/ZipRulesModule.java",
                "+++ b/src/com/facebook/buck/zip/rules/ZipRulesModule.java",
                "@@ -23,3 +23,2 @@ import com.facebook.buck.zip.bundler.ZipBundlerModule;",
                " @BuckModule(",
                "-  id = \"com.facebook.buck.zip.ziprules\",",
                "   dependencies = {",
                "diff --git a/test/com/facebook/buck/module/impl/jarwithouthash/test_module/TestModule.java b/test/com/facebook/buck/module/impl/jarwithouthash/test_module/TestModule.java",
                "index cb6af5d770..b6cd52e4de 100644",
                "--- a/test/com/facebook/buck/module/impl/jarwithouthash/test_module/TestModule.java",
                "+++ b/test/com/facebook/buck/module/impl/jarwithouthash/test_module/TestModule.java",
                "@@ -20,3 +20,3 @@ import com.facebook.buck.module.BuckModule;",
                "-@BuckModule(id = \"com.facebook.buck.module.impl.test_module\")",
                "+@BuckModule",
                " public class TestModule {}",
                "diff --git a/test/com/facebook/buck/module/impl/moduleclass/test_module/TestModule.java b/test/com/facebook/buck/module/impl/moduleclass/test_module/TestModule.java",
                "index 86091e93b0..40307158c1 100644",
                "--- a/test/com/facebook/buck/module/impl/moduleclass/test_module/TestModule.java",
                "+++ b/test/com/facebook/buck/module/impl/moduleclass/test_module/TestModule.java",
                "@@ -20,3 +20,3 @@ import com.facebook.buck.module.BuckModule;",
                "-@BuckModule(id = \"com.facebook.buck.module.impl.test_module\")",
                "+@BuckModule",
                " public class TestModule {}",
                "diff --git a/test/com/facebook/buck/module/impl/modulewithdeps/dependent_module/DependentModule.java b/test/com/facebook/buck/module/impl/modulewithdeps/dependent_module/DependentModule.java",
                "index 1015b77e23..f9a52d015c 100644",
                "--- a/test/com/facebook/buck/module/impl/modulewithdeps/dependent_module/DependentModule.java",
                "+++ b/test/com/facebook/buck/module/impl/modulewithdeps/dependent_module/DependentModule.java",
                "@@ -21,6 +21,3 @@ import com.facebook.buck.module.impl.modulewithdeps.test_module.TestModule;",
                "-@BuckModule(",
                "-  id = \"com.facebook.buck.module.impl.modulewithdeps.dependent_module\",",
                "-  dependencies = {TestModule.class}",
                "-)",
                "+@BuckModule(dependencies = {TestModule.class})",
                " public class DependentModule {}",
                "diff --git a/test/com/facebook/buck/module/impl/modulewithdeps/test_module/TestModule.java b/test/com/facebook/buck/module/impl/modulewithdeps/test_module/TestModule.java",
                "index e9f63e6282..727f98c400 100644",
                "--- a/test/com/facebook/buck/module/impl/modulewithdeps/test_module/TestModule.java",
                "+++ b/test/com/facebook/buck/module/impl/modulewithdeps/test_module/TestModule.java",
                "@@ -20,3 +20,3 @@ import com.facebook.buck.module.BuckModule;",
                "-@BuckModule(id = \"com.facebook.buck.module.impl.modulewithdeps.test_module\")",
                "+@BuckModule",
                " public class TestModule {}"
            ],
            "changed_files": [
                "src/com/facebook/buck/d/DModule.java",
                "src/com/facebook/buck/dotnet/DotnetModule.java",
                "src/com/facebook/buck/go/GoModule.java",
                "src/com/facebook/buck/haskell/HaskellModule.java",
                "src/com/facebook/buck/lua/LuaModule.java",
                "src/com/facebook/buck/module/BuckModule.java",
                "src/com/facebook/buck/rust/RustModule.java",
                "src/com/facebook/buck/shell/filegroup/FilegroupModule.java",
                "src/com/facebook/buck/zip/bundler/ZipBundlerModule.java",
                "src/com/facebook/buck/zip/rules/ZipRulesModule.java",
                "test/com/facebook/buck/module/impl/jarwithouthash/test_module/TestModule.java",
                "test/com/facebook/buck/module/impl/moduleclass/test_module/TestModule.java",
                "test/com/facebook/buck/module/impl/modulewithdeps/dependent_module/DependentModule.java",
                "test/com/facebook/buck/module/impl/modulewithdeps/test_module/TestModule.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c5899945e0de735c7cd537e62761569f70d76897",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1523059274,
            "hunks": 67,
            "message": "Moving Haskell to features Reviewed By: ttsugriy fbshipit-source-id: 6076ef3",
            "diff": [
                "diff --git a/build.xml b/build.xml",
                "index 0f1b40df52..31488546ab 100644",
                "--- a/build.xml",
                "+++ b/build.xml",
                "@@ -492,4 +492,4 @@",
                "           <exclude name=\"com/facebook/buck/features/dotnet/**\" />",
                "+          <exclude name=\"com/facebook/buck/features/haskell/**\" />",
                "           <exclude name=\"com/facebook/buck/go/**\" />",
                "-          <exclude name=\"com/facebook/buck/haskell/**\" />",
                "           <exclude name=\"com/facebook/buck/jvm/java/abi/source/**\" />",
                "@@ -571,3 +571,3 @@",
                "       <module-javac-params>",
                "-        <include name=\"com/facebook/buck/haskell/**/*.java\" />",
                "+        <include name=\"com/facebook/buck/features/haskell/**/*.java\" />",
                "       </module-javac-params>",
                "diff --git a/programs/BUCK b/programs/BUCK",
                "index 5ad32f945a..1758c455de 100644",
                "--- a/programs/BUCK",
                "+++ b/programs/BUCK",
                "@@ -91,3 +91,3 @@ BUCK_MODULES = {",
                "     \"go\": \"//src/com/facebook/buck/go:go\",",
                "-    \"haskell\": \"//src/com/facebook/buck/haskell:haskell\",",
                "+    \"haskell\": \"//src/com/facebook/buck/features/haskell:haskell\",",
                "     \"lua\": \"//src/com/facebook/buck/lua:lua\",",
                "diff --git a/src/com/facebook/buck/features/haskell/AbstractHaskellCompileInput.java b/src/com/facebook/buck/features/haskell/AbstractHaskellCompileInput.java",
                "new file mode 100644",
                "index 0000000000..4a04934fc6",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/AbstractHaskellCompileInput.java",
                "@@ -0,0 +1,40 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.google.common.collect.ImmutableList;",
                "+import org.immutables.value.Value;",
                "+",
                "+/**",
                "+ * Information that contributes to a haskell compilation job. Dependencies (e.g. `haskell_library`",
                "+ * rules) export this object to their dependent's compilations.",
                "+ */",
                "+@Value.Immutable",
                "+@BuckStyleImmutable",
                "+interface AbstractHaskellCompileInput {",
                "+",
                "+  /** @return any haskell compilation flags to include in the top-level compile job. */",
                "+  ImmutableList<String> getFlags();",
                "+",
                "+  /** @return any haskell includes used by the top-level compile job. */",
                "+  ImmutableList<SourcePath> getIncludes();",
                "+",
                "+  /** @return any haskell packages used by the top-level compile job. */",
                "+  ImmutableList<HaskellPackage> getPackages();",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/AbstractHaskellHaddockInput.java b/src/com/facebook/buck/features/haskell/AbstractHaskellHaddockInput.java",
                "new file mode 100644",
                "index 0000000000..ebb4db137a",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/AbstractHaskellHaddockInput.java",
                "@@ -0,0 +1,37 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import org.immutables.value.Value;",
                "+",
                "+/**",
                "+ * Information that contributes to a haskell haddock job. Dependencies (e.g. `haskell_library`",
                "+ * rules) export this object to their dependent's compilations.",
                "+ */",
                "+@Value.Immutable",
                "+@BuckStyleImmutable",
                "+interface AbstractHaskellHaddockInput {",
                "+",
                "+  /** @return any haskell interfaces used */",
                "+  ImmutableSet<SourcePath> getInterfaces();",
                "+",
                "+  /** @return any output directories used */",
                "+  ImmutableSet<SourcePath> getOutputDirs();",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/AbstractHaskellPackage.java b/src/com/facebook/buck/features/haskell/AbstractHaskellPackage.java",
                "new file mode 100644",
                "index 0000000000..bb398ede6d",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/AbstractHaskellPackage.java",
                "@@ -0,0 +1,62 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.rules.AddToRuleKey;",
                "+import com.facebook.buck.rules.AddsToRuleKey;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.util.stream.Stream;",
                "+import org.immutables.value.Value;",
                "+",
                "+/** Represents a Haskell package used as a dependency during compilation. */",
                "+@Value.Immutable",
                "+@BuckStyleImmutable",
                "+abstract class AbstractHaskellPackage implements AddsToRuleKey {",
                "+",
                "+  /** @return the package identifying information (i.e. name, version, identifier). */",
                "+  @AddToRuleKey",
                "+  public abstract HaskellPackageInfo getInfo();",
                "+",
                "+  /** @return the path to the package DB. */",
                "+  @AddToRuleKey",
                "+  protected abstract SourcePath getPackageDb();",
                "+",
                "+  /** @return the path to all libraries included in the package. */",
                "+  @AddToRuleKey",
                "+  @Value.NaturalOrder",
                "+  protected abstract ImmutableSortedSet<SourcePath> getLibraries();",
                "+",
                "+  /** @return the path to all interface directories included in the package. */",
                "+  @AddToRuleKey",
                "+  @Value.NaturalOrder",
                "+  protected abstract ImmutableSortedSet<SourcePath> getInterfaces();",
                "+",
                "+  /** @return the path to all interface directories included in the package. */",
                "+  @Value.NaturalOrder",
                "+  protected abstract ImmutableSortedSet<SourcePath> getObjects();",
                "+",
                "+  /** @return all dependencies required to use this package at build time. */",
                "+  public final Stream<BuildRule> getDeps(SourcePathRuleFinder ruleFinder) {",
                "+    return Stream.of(ImmutableList.of(getPackageDb()), getLibraries(), getInterfaces())",
                "+        .flatMap(input -> ruleFinder.filterBuildRuleInputs(input).stream());",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/AbstractHaskellPackageInfo.java b/src/com/facebook/buck/features/haskell/AbstractHaskellPackageInfo.java",
                "new file mode 100644",
                "index 0000000000..2c3f4d1b7a",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/AbstractHaskellPackageInfo.java",
                "@@ -0,0 +1,36 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.rules.AddToRuleKey;",
                "+import com.facebook.buck.rules.AddsToRuleKey;",
                "+import com.facebook.buck.util.immutables.BuckStyleTuple;",
                "+import org.immutables.value.Value;",
                "+",
                "+/** Identifying information for a {@link HaskellPackage}. */",
                "+@Value.Immutable",
                "+@BuckStyleTuple",
                "+abstract class AbstractHaskellPackageInfo implements AddsToRuleKey {",
                "+",
                "+  @AddToRuleKey",
                "+  public abstract String getName();",
                "+",
                "+  @AddToRuleKey",
                "+  public abstract String getVersion();",
                "+",
                "+  @AddToRuleKey",
                "+  public abstract String getIdentifier();",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/AbstractHaskellPlatform.java b/src/com/facebook/buck/features/haskell/AbstractHaskellPlatform.java",
                "new file mode 100644",
                "index 0000000000..8f6eb5d0b9",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/AbstractHaskellPlatform.java",
                "@@ -0,0 +1,108 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.FlavorConvertible;",
                "+import com.facebook.buck.rules.ToolProvider;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.google.common.collect.ImmutableList;",
                "+import java.nio.file.Path;",
                "+import java.util.Optional;",
                "+import java.util.function.Supplier;",
                "+import org.immutables.value.Value;",
                "+",
                "+@Value.Immutable",
                "+@BuckStyleImmutable",
                "+abstract class AbstractHaskellPlatform implements FlavorConvertible {",
                "+",
                "+  // TODO: For now, we rely on Haskell platforms having the same \"name\" as the C/C++ platforms they",
                "+  // wrap, due to having to lookup the Haskell platform in the C/C++ interfaces that Haskell rules",
                "+  // implement, into which only C/C++ platform objects are threaded.",
                "+  @Override",
                "+  public final Flavor getFlavor() {",
                "+    return getCxxPlatform().getFlavor();",
                "+  }",
                "+",
                "+  /** @return the {@link ToolProvider} for the haskell compiler. */",
                "+  abstract ToolProvider getCompiler();",
                "+",
                "+  /** @return The Haddock binary. */",
                "+  abstract ToolProvider getHaddock();",
                "+",
                "+  /** @return the {@link HaskellVersion} for the haskell compiler. */",
                "+  abstract HaskellVersion getHaskellVersion();",
                "+",
                "+  /** @return a list of flags to use for compilation. */",
                "+  abstract ImmutableList<String> getCompilerFlags();",
                "+",
                "+  /** @return the {@link ToolProvider} for the haskell linker. */",
                "+  abstract ToolProvider getLinker();",
                "+",
                "+  /** @return a list of flags to use for linking. */",
                "+  abstract ImmutableList<String> getLinkerFlags();",
                "+",
                "+  /** @return the {@link ToolProvider} for the haskell packager. */",
                "+  abstract ToolProvider getPackager();",
                "+",
                "+  /** @return whether to cache haskell link rules. */",
                "+  abstract boolean shouldCacheLinks();",
                "+",
                "+  /** @return whether to use the deprecated binary output location. */",
                "+  abstract Optional<Boolean> shouldUsedOldBinaryOutputLocation();",
                "+",
                "+  /** @return The template to use for startup scripts for GHCi targets. */",
                "+  abstract Supplier<Path> getGhciScriptTemplate();",
                "+",
                "+  /** @return The template to use for iserv scripts for GHCi targets. */",
                "+  abstract Supplier<Path> getGhciIservScriptTemplate();",
                "+",
                "+  /** @return The binutils dir for GHCi targets. */",
                "+  abstract Supplier<Path> getGhciBinutils();",
                "+",
                "+  /** @return The GHC binary for GHCi targets. */",
                "+  abstract Supplier<Path> getGhciGhc();",
                "+",
                "+  /** @return The IServ binary for GHCi targets. */",
                "+  abstract Supplier<Path> getGhciIServ();",
                "+",
                "+  /** @return The Profiled IServ binary for GHCi targets. */",
                "+  abstract Supplier<Path> getGhciIServProf();",
                "+",
                "+  /** @return The lib dir for GHCi targets. */",
                "+  abstract Supplier<Path> getGhciLib();",
                "+",
                "+  /** @return The C++ compiler for GHCi targets. */",
                "+  abstract Supplier<Path> getGhciCxx();",
                "+",
                "+  /** @return The C compiler for GHCi targets. */",
                "+  abstract Supplier<Path> getGhciCc();",
                "+",
                "+  /** @return The C preprocessor for GHCi targets. */",
                "+  abstract Supplier<Path> getGhciCpp();",
                "+",
                "+  /** @return An optional prefix for generated Haskell package names. */",
                "+  abstract Optional<String> getPackageNamePrefix();",
                "+",
                "+  /** @return The intended cxx link type, used for stub headers */",
                "+  abstract Optional<Linker.LinkableDepType> getLinkStyleForStubHeader();",
                "+",
                "+  /** @return the {@link CxxPlatform} to use for C/C++ dependencies. */",
                "+  abstract CxxPlatform getCxxPlatform();",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/AbstractHaskellPlatformsProvider.java b/src/com/facebook/buck/features/haskell/AbstractHaskellPlatformsProvider.java",
                "new file mode 100644",
                "index 0000000000..b6ef6ef19f",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/AbstractHaskellPlatformsProvider.java",
                "@@ -0,0 +1,35 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.toolchain.Toolchain;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import org.immutables.value.Value;",
                "+",
                "+@Value.Immutable(copy = false, builder = false)",
                "+@BuckStyleImmutable",
                "+public interface AbstractHaskellPlatformsProvider extends Toolchain {",
                "+",
                "+  String DEFAULT_NAME = \"haskell-platforms\";",
                "+",
                "+  @Value.Parameter",
                "+  HaskellPlatform getDefaultHaskellPlatform();",
                "+",
                "+  @Value.Parameter",
                "+  FlavorDomain<HaskellPlatform> getHaskellPlatforms();",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/AbstractHaskellSources.java b/src/com/facebook/buck/features/haskell/AbstractHaskellSources.java",
                "new file mode 100644",
                "index 0000000000..5674ffbaf3",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/AbstractHaskellSources.java",
                "@@ -0,0 +1,75 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.CxxGenruleDescription;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.AddToRuleKey;",
                "+import com.facebook.buck.rules.AddsToRuleKey;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.google.common.collect.ImmutableCollection;",
                "+import com.google.common.collect.ImmutableSortedMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.io.File;",
                "+import java.util.Map;",
                "+import org.immutables.value.Value;",
                "+",
                "+@Value.Immutable",
                "+@BuckStyleImmutable",
                "+abstract class AbstractHaskellSources implements AddsToRuleKey {",
                "+",
                "+  @AddToRuleKey",
                "+  @Value.NaturalOrder",
                "+  abstract ImmutableSortedMap<String, SourcePath> getModuleMap();",
                "+",
                "+  public static HaskellSources from(",
                "+      BuildTarget target,",
                "+      BuildRuleResolver ruleResolver,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      HaskellPlatform platform,",
                "+      String parameter,",
                "+      SourceList sources) {",
                "+    HaskellSources.Builder builder = HaskellSources.builder();",
                "+    for (Map.Entry<String, SourcePath> ent :",
                "+        sources.toNameMap(target, pathResolver, parameter).entrySet()) {",
                "+      builder.putModuleMap(",
                "+          ent.getKey().substring(0, ent.getKey().lastIndexOf('.')).replace(File.separatorChar, '.'),",
                "+          CxxGenruleDescription.fixupSourcePath(",
                "+              ruleResolver, ruleFinder, platform.getCxxPlatform(), ent.getValue()));",
                "+    }",
                "+    return builder.build();",
                "+  }",
                "+",
                "+  public ImmutableSortedSet<String> getModuleNames() {",
                "+    return getModuleMap().keySet();",
                "+  }",
                "+",
                "+  public ImmutableCollection<SourcePath> getSourcePaths() {",
                "+    return getModuleMap().values();",
                "+  }",
                "+",
                "+  public Iterable<BuildRule> getDeps(SourcePathRuleFinder ruleFinder) {",
                "+    return ruleFinder.filterBuildRuleInputs(getSourcePaths());",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/AbstractHaskellVersion.java b/src/com/facebook/buck/features/haskell/AbstractHaskellVersion.java",
                "new file mode 100644",
                "index 0000000000..ad4db7b5dc",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/AbstractHaskellVersion.java",
                "@@ -0,0 +1,33 @@",
                "+/*",
                "+ * Copyright 2014-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import org.immutables.value.Value;",
                "+",
                "+@Value.Immutable",
                "+@BuckStyleImmutable",
                "+abstract class AbstractHaskellVersion {",
                "+",
                "+  @Value.Parameter",
                "+  public abstract Integer getMajorVersion();",
                "+",
                "+  @Override",
                "+  public String toString() {",
                "+    return getMajorVersion().toString();",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/BUCK b/src/com/facebook/buck/features/haskell/BUCK",
                "new file mode 100644",
                "index 0000000000..a3ff207c7d",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/BUCK",
                "@@ -0,0 +1,45 @@",
                "+load(\"//tools/build_rules:module_rules.bzl\", \"buck_module\")",
                "+",
                "+buck_module(",
                "+    name = \"haskell\",",
                "+    srcs = glob([\"*.java\"]),",
                "+    provided_deps = [",
                "+        \"//src/com/facebook/buck/config:config\",",
                "+        \"//src/com/facebook/buck/cxx:rules\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain:toolchain\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/linker:linker\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/nativelink:nativelink\",",
                "+        \"//src/com/facebook/buck/file:rules\",",
                "+        \"//src/com/facebook/buck/graph:graph\",",
                "+        \"//src/com/facebook/buck/io:executable-finder\",",
                "+        \"//src/com/facebook/buck/io:io\",",
                "+        \"//src/com/facebook/buck/io/file:file\",",
                "+        \"//src/com/facebook/buck/log:api\",",
                "+        \"//src/com/facebook/buck/model:model\",",
                "+        \"//src/com/facebook/buck/parser:rule_pattern\",",
                "+        \"//src/com/facebook/buck/rules:build_rule\",",
                "+        \"//src/com/facebook/buck/rules:interfaces\",",
                "+        \"//src/com/facebook/buck/rules:rules\",",
                "+        \"//src/com/facebook/buck/rules:source_path\",",
                "+        \"//src/com/facebook/buck/rules/args:args\",",
                "+        \"//src/com/facebook/buck/rules/coercer:coercer\",",
                "+        \"//src/com/facebook/buck/rules/keys:keys\",",
                "+        \"//src/com/facebook/buck/rules/query:query\",",
                "+        \"//src/com/facebook/buck/rules/query:types\",",
                "+        \"//src/com/facebook/buck/rules/query:utils\",",
                "+        \"//src/com/facebook/buck/rules/tool/config:config\",",
                "+        \"//src/com/facebook/buck/shell:rules\",",
                "+        \"//src/com/facebook/buck/shell:steps\",",
                "+        \"//src/com/facebook/buck/step:step\",",
                "+        \"//src/com/facebook/buck/step/fs:fs\",",
                "+        \"//src/com/facebook/buck/toolchain:toolchain\",",
                "+        \"//src/com/facebook/buck/util:exceptions\",",
                "+        \"//src/com/facebook/buck/util:process_executor\",",
                "+        \"//src/com/facebook/buck/util:util\",",
                "+        \"//src/com/facebook/buck/versions:translator\",",
                "+        \"//src/com/facebook/buck/versions:versions\",",
                "+        \"//third-party/java/infer-annotations:infer-annotations\",",
                "+        \"//third-party/java/stringtemplate:stringtemplate\",",
                "+    ],",
                "+    visibility = [\"PUBLIC\"],",
                "+)",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellBinary.java b/src/com/facebook/buck/features/haskell/HaskellBinary.java",
                "new file mode 100644",
                "index 0000000000..8d042bdb4f",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellBinary.java",
                "@@ -0,0 +1,61 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BinaryWrapperRule;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.ForwardingBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.google.common.collect.ImmutableSet;",
                "+",
                "+public class HaskellBinary extends BinaryWrapperRule {",
                "+",
                "+  private final ImmutableSet<BuildRule> deps;",
                "+  private final Tool binary;",
                "+  private final SourcePath output;",
                "+",
                "+  public HaskellBinary(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams buildRuleParams,",
                "+      ImmutableSet<BuildRule> deps,",
                "+      Tool binary,",
                "+      SourcePath output) {",
                "+    super(buildTarget, projectFilesystem, buildRuleParams);",
                "+    this.deps = deps;",
                "+    this.binary = binary;",
                "+    this.output = output;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Tool getExecutableCommand() {",
                "+    return binary;",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath getSourcePathToOutput() {",
                "+    return ForwardingBuildTargetSourcePath.of(getBuildTarget(), output);",
                "+  }",
                "+",
                "+  public ImmutableSet<BuildRule> getBinaryDeps() {",
                "+    return deps;",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellBinaryDescription.java b/src/com/facebook/buck/features/haskell/HaskellBinaryDescription.java",
                "new file mode 100644",
                "index 0000000000..1bc5e8baee",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellBinaryDescription.java",
                "@@ -0,0 +1,419 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.CxxDeps;",
                "+import com.facebook.buck.cxx.CxxDescriptionEnhancer;",
                "+import com.facebook.buck.cxx.CxxPreprocessorDep;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linkers;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.FlavorConvertible;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.model.Flavored;",
                "+import com.facebook.buck.model.InternalFlavor;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleCreationContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                "+import com.facebook.buck.rules.CommandTool;",
                "+import com.facebook.buck.rules.CommonDescriptionArg;",
                "+import com.facebook.buck.rules.DefaultBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.HasDepsQuery;",
                "+import com.facebook.buck.rules.ImplicitDepsInferringDescription;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.SymlinkTree;",
                "+import com.facebook.buck.rules.args.Arg;",
                "+import com.facebook.buck.rules.args.SourcePathArg;",
                "+import com.facebook.buck.rules.args.StringArg;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.rules.macros.StringWithMacros;",
                "+import com.facebook.buck.rules.query.QueryUtils;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.facebook.buck.util.MoreIterables;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.facebook.buck.versions.VersionRoot;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.collect.ImmutableCollection;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import com.google.common.collect.Iterables;",
                "+import java.nio.file.Path;",
                "+import java.util.Optional;",
                "+import java.util.stream.Stream;",
                "+import org.immutables.value.Value;",
                "+",
                "+public class HaskellBinaryDescription",
                "+    implements Description<HaskellBinaryDescriptionArg>,",
                "+        ImplicitDepsInferringDescription<",
                "+            HaskellBinaryDescription.AbstractHaskellBinaryDescriptionArg>,",
                "+        Flavored,",
                "+        VersionRoot<HaskellBinaryDescriptionArg> {",
                "+",
                "+  private static final FlavorDomain<Type> BINARY_TYPE =",
                "+      FlavorDomain.from(\"Haskell Binary Type\", Type.class);",
                "+",
                "+  private final ToolchainProvider toolchainProvider;",
                "+  private final CxxBuckConfig cxxBuckConfig;",
                "+",
                "+  public HaskellBinaryDescription(",
                "+      ToolchainProvider toolchainProvider, CxxBuckConfig cxxBuckConfig) {",
                "+    this.toolchainProvider = toolchainProvider;",
                "+    this.cxxBuckConfig = cxxBuckConfig;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Class<HaskellBinaryDescriptionArg> getConstructorArgType() {",
                "+    return HaskellBinaryDescriptionArg.class;",
                "+  }",
                "+",
                "+  private Linker.LinkableDepType getLinkStyle(",
                "+      HaskellBinaryDescriptionArg arg, Optional<Type> type) {",
                "+    if (type.isPresent()) {",
                "+      return type.get().getLinkStyle();",
                "+    }",
                "+    if (arg.getLinkStyle().isPresent()) {",
                "+      return arg.getLinkStyle().get();",
                "+    }",
                "+    return Linker.LinkableDepType.STATIC;",
                "+  }",
                "+",
                "+  // Return the C/C++ platform to build against.",
                "+  private HaskellPlatform getPlatform(BuildTarget target, AbstractHaskellBinaryDescriptionArg arg) {",
                "+    HaskellPlatformsProvider haskellPlatformsProvider = getHaskellPlatformsProvider();",
                "+    FlavorDomain<HaskellPlatform> platforms = haskellPlatformsProvider.getHaskellPlatforms();",
                "+",
                "+    Optional<HaskellPlatform> flavorPlatform = platforms.getValue(target);",
                "+    if (flavorPlatform.isPresent()) {",
                "+      return flavorPlatform.get();",
                "+    }",
                "+",
                "+    if (arg.getPlatform().isPresent()) {",
                "+      return platforms.getValue(arg.getPlatform().get());",
                "+    }",
                "+",
                "+    return haskellPlatformsProvider.getDefaultHaskellPlatform();",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuildRule createBuildRule(",
                "+      BuildRuleCreationContext context,",
                "+      BuildTarget buildTarget,",
                "+      BuildRuleParams params,",
                "+      HaskellBinaryDescriptionArg args) {",
                "+",
                "+    ProjectFilesystem projectFilesystem = context.getProjectFilesystem();",
                "+    CellPathResolver cellRoots = context.getCellPathResolver();",
                "+    HaskellPlatform platform = getPlatform(buildTarget, args);",
                "+",
                "+    BuildRuleResolver resolver = context.getBuildRuleResolver();",
                "+    Optional<Type> type = BINARY_TYPE.getValue(buildTarget);",
                "+    // Handle #ghci flavor",
                "+    if (type.isPresent() && type.get() == Type.GHCI) {",
                "+      return HaskellDescriptionUtils.requireGhciRule(",
                "+          buildTarget,",
                "+          projectFilesystem,",
                "+          params,",
                "+          cellRoots,",
                "+          resolver,",
                "+          platform,",
                "+          cxxBuckConfig,",
                "+          args.getDeps(),",
                "+          args.getPlatformDeps(),",
                "+          args.getSrcs(),",
                "+          args.getGhciPreloadDeps(),",
                "+          args.getGhciPlatformPreloadDeps(),",
                "+          args.getCompilerFlags(),",
                "+          Optional.empty(),",
                "+          Optional.empty());",
                "+    }",
                "+",
                "+    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(resolver);",
                "+    SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);",
                "+    Linker.LinkableDepType depType = getLinkStyle(args, type);",
                "+",
                "+    // The target to use for the link rule.",
                "+    BuildTarget binaryTarget = buildTarget.withFlavors(InternalFlavor.of(\"binary\"));",
                "+",
                "+    // Maintain backwards compatibility to ease upgrade flows.",
                "+    if (platform.shouldUsedOldBinaryOutputLocation().orElse(true)) {",
                "+      binaryTarget = binaryTarget.withAppendedFlavors(platform.getFlavor());",
                "+    }",
                "+",
                "+    ImmutableSet.Builder<BuildRule> depsBuilder = ImmutableSet.builder();",
                "+",
                "+    depsBuilder.addAll(",
                "+        CxxDeps.builder()",
                "+            .addDeps(args.getDeps())",
                "+            .addPlatformDeps(args.getPlatformDeps())",
                "+            .build()",
                "+            .get(resolver, platform.getCxxPlatform()));",
                "+",
                "+    ImmutableList<BuildRule> depQueryDeps =",
                "+        args.getDepsQuery()",
                "+            .map(",
                "+                query ->",
                "+                    Preconditions.checkNotNull(query.getResolvedQuery())",
                "+                        .stream()",
                "+                        .map(resolver::getRule)",
                "+                        .filter(NativeLinkable.class::isInstance))",
                "+            .orElse(Stream.of())",
                "+            .collect(ImmutableList.toImmutableList());",
                "+    depsBuilder.addAll(depQueryDeps);",
                "+    ImmutableSet<BuildRule> deps = depsBuilder.build();",
                "+",
                "+    // Inputs we'll be linking (archives, objects, etc.)",
                "+    ImmutableList.Builder<Arg> linkInputsBuilder = ImmutableList.builder();",
                "+    // Additional linker flags passed to the Haskell linker",
                "+    ImmutableList.Builder<Arg> linkFlagsBuilder = ImmutableList.builder();",
                "+",
                "+    CommandTool.Builder executableBuilder = new CommandTool.Builder();",
                "+",
                "+    // Add the binary as the first argument.",
                "+    executableBuilder.addArg(SourcePathArg.of(DefaultBuildTargetSourcePath.of(binaryTarget)));",
                "+",
                "+    Path outputDir = BuildTargets.getGenPath(projectFilesystem, binaryTarget, \"%s\").getParent();",
                "+    Path outputPath = outputDir.resolve(binaryTarget.getShortName());",
                "+",
                "+    Path absBinaryDir = buildTarget.getCellPath().resolve(outputDir);",
                "+",
                "+    // Special handling for dynamically linked binaries.",
                "+    if (depType == Linker.LinkableDepType.SHARED) {",
                "+",
                "+      // Create a symlink tree with for all shared libraries needed by this binary.",
                "+      SymlinkTree sharedLibraries =",
                "+          resolver.addToIndex(",
                "+              CxxDescriptionEnhancer.createSharedLibrarySymlinkTree(",
                "+                  buildTarget,",
                "+                  projectFilesystem,",
                "+                  resolver,",
                "+                  ruleFinder,",
                "+                  platform.getCxxPlatform(),",
                "+                  deps,",
                "+                  r -> Optional.empty()));",
                "+",
                "+      // Embed a origin-relative library path into the binary so it can find the shared libraries.",
                "+      // The shared libraries root is absolute. Also need an absolute path to the linkOutput",
                "+      linkFlagsBuilder.addAll(",
                "+          StringArg.from(",
                "+              MoreIterables.zipAndConcat(",
                "+                  Iterables.cycle(\"-optl\"),",
                "+                  Linkers.iXlinker(",
                "+                      \"-rpath\",",
                "+                      String.format(",
                "+                          \"%s/%s\",",
                "+                          platform.getCxxPlatform().getLd().resolve(resolver).origin(),",
                "+                          absBinaryDir.relativize(sharedLibraries.getRoot()).toString())))));",
                "+",
                "+      // Add all the shared libraries and the symlink tree as inputs to the tool that represents",
                "+      // this binary, so that users can attach the proper deps.",
                "+      executableBuilder.addNonHashableInput(sharedLibraries.getRootSourcePath());",
                "+      executableBuilder.addInputs(sharedLibraries.getLinks().values());",
                "+    }",
                "+",
                "+    // Add in linker flags.",
                "+    linkFlagsBuilder.addAll(",
                "+        ImmutableList.copyOf(",
                "+            Iterables.transform(",
                "+                args.getLinkerFlags(),",
                "+                f ->",
                "+                    CxxDescriptionEnhancer.toStringWithMacrosArgs(",
                "+                        buildTarget, cellRoots, resolver, platform.getCxxPlatform(), f))));",
                "+",
                "+    // Generate the compile rule and add its objects to the link.",
                "+    HaskellCompileRule compileRule =",
                "+        resolver.addToIndex(",
                "+            HaskellDescriptionUtils.requireCompileRule(",
                "+                buildTarget,",
                "+                projectFilesystem,",
                "+                params,",
                "+                resolver,",
                "+                ruleFinder,",
                "+                RichStream.from(deps)",
                "+                    .filter(",
                "+                        dep ->",
                "+                            dep instanceof HaskellCompileDep || dep instanceof CxxPreprocessorDep)",
                "+                    .toImmutableSet(),",
                "+                platform,",
                "+                depType,",
                "+                args.isEnableProfiling(),",
                "+                args.getMain(),",
                "+                Optional.empty(),",
                "+                args.getCompilerFlags(),",
                "+                HaskellSources.from(",
                "+                    buildTarget,",
                "+                    resolver,",
                "+                    pathResolver,",
                "+                    ruleFinder,",
                "+                    platform,",
                "+                    \"srcs\",",
                "+                    args.getSrcs())));",
                "+    linkInputsBuilder.addAll(SourcePathArg.from(compileRule.getObjects()));",
                "+",
                "+    ImmutableList<Arg> linkInputs = linkInputsBuilder.build();",
                "+    ImmutableList<Arg> linkFlags = linkFlagsBuilder.build();",
                "+",
                "+    CommandTool executable = executableBuilder.build();",
                "+    HaskellLinkRule linkRule =",
                "+        HaskellDescriptionUtils.createLinkRule(",
                "+            binaryTarget,",
                "+            projectFilesystem,",
                "+            params,",
                "+            resolver,",
                "+            ruleFinder,",
                "+            platform,",
                "+            Linker.LinkType.EXECUTABLE,",
                "+            linkFlags,",
                "+            linkInputs,",
                "+            RichStream.from(deps).filter(NativeLinkable.class).toImmutableList(),",
                "+            args.getLinkDepsQueryWhole()",
                "+                ? RichStream.from(depQueryDeps).map(BuildRule::getBuildTarget).toImmutableSet()",
                "+                : ImmutableSet.of(),",
                "+            depType,",
                "+            outputPath,",
                "+            Optional.empty(),",
                "+            args.isEnableProfiling());",
                "+",
                "+    return new HaskellBinary(",
                "+        buildTarget,",
                "+        projectFilesystem,",
                "+        params.copyAppendingExtraDeps(linkRule),",
                "+        deps,",
                "+        executable,",
                "+        linkRule.getSourcePathToOutput());",
                "+  }",
                "+",
                "+  @Override",
                "+  public void findDepsForTargetFromConstructorArgs(",
                "+      BuildTarget buildTarget,",
                "+      CellPathResolver cellRoots,",
                "+      AbstractHaskellBinaryDescriptionArg constructorArg,",
                "+      ImmutableCollection.Builder<BuildTarget> extraDepsBuilder,",
                "+      ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "+    HaskellDescriptionUtils.getParseTimeDeps(",
                "+        ImmutableList.of(getPlatform(buildTarget, constructorArg)), targetGraphOnlyDepsBuilder);",
                "+",
                "+    constructorArg",
                "+        .getDepsQuery()",
                "+        .ifPresent(",
                "+            depsQuery ->",
                "+                QueryUtils.extractParseTimeTargets(buildTarget, cellRoots, depsQuery)",
                "+                    .forEach(targetGraphOnlyDepsBuilder::add));",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean hasFlavors(ImmutableSet<Flavor> flavors) {",
                "+    if (getHaskellPlatformsProvider().getHaskellPlatforms().containsAnyOf(flavors)) {",
                "+      return true;",
                "+    }",
                "+",
                "+    for (Type type : Type.values()) {",
                "+      if (flavors.contains(type.getFlavor())) {",
                "+        return true;",
                "+      }",
                "+    }",
                "+",
                "+    return false;",
                "+  }",
                "+",
                "+  private HaskellPlatformsProvider getHaskellPlatformsProvider() {",
                "+    return toolchainProvider.getByName(",
                "+        HaskellPlatformsProvider.DEFAULT_NAME, HaskellPlatformsProvider.class);",
                "+  }",
                "+",
                "+  protected enum Type implements FlavorConvertible {",
                "+    SHARED(CxxDescriptionEnhancer.SHARED_FLAVOR, Linker.LinkableDepType.SHARED),",
                "+    STATIC_PIC(CxxDescriptionEnhancer.STATIC_PIC_FLAVOR, Linker.LinkableDepType.STATIC_PIC),",
                "+    STATIC(CxxDescriptionEnhancer.STATIC_FLAVOR, Linker.LinkableDepType.STATIC),",
                "+    GHCI(HaskellDescriptionUtils.GHCI_FLAV, Linker.LinkableDepType.STATIC),",
                "+    ;",
                "+",
                "+    private final Flavor flavor;",
                "+    private final Linker.LinkableDepType linkStyle;",
                "+",
                "+    Type(Flavor flavor, Linker.LinkableDepType linkStyle) {",
                "+      this.flavor = flavor;",
                "+      this.linkStyle = linkStyle;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Flavor getFlavor() {",
                "+      return flavor;",
                "+    }",
                "+",
                "+    public Linker.LinkableDepType getLinkStyle() {",
                "+      return linkStyle;",
                "+    }",
                "+  }",
                "+",
                "+  @BuckStyleImmutable",
                "+  @Value.Immutable(copy = true)",
                "+  interface AbstractHaskellBinaryDescriptionArg extends CommonDescriptionArg, HasDepsQuery {",
                "+",
                "+    @Value.Default",
                "+    default SourceList getSrcs() {",
                "+      return SourceList.EMPTY;",
                "+    }",
                "+",
                "+    ImmutableList<String> getCompilerFlags();",
                "+",
                "+    ImmutableList<StringWithMacros> getLinkerFlags();",
                "+",
                "+    @Value.Default",
                "+    default PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> getPlatformDeps() {",
                "+      return PatternMatchedCollection.of();",
                "+    }",
                "+",
                "+    @Value.Default",
                "+    default boolean getLinkDepsQueryWhole() {",
                "+      return false;",
                "+    }",
                "+",
                "+    Optional<String> getMain();",
                "+",
                "+    Optional<Linker.LinkableDepType> getLinkStyle();",
                "+",
                "+    Optional<Flavor> getPlatform();",
                "+",
                "+    @Value.Default",
                "+    default boolean isEnableProfiling() {",
                "+      return false;",
                "+    }",
                "+",
                "+    @Value.Default",
                "+    default ImmutableSortedSet<BuildTarget> getGhciPreloadDeps() {",
                "+      return ImmutableSortedSet.of();",
                "+    }",
                "+",
                "+    @Value.Default",
                "+    default PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> getGhciPlatformPreloadDeps() {",
                "+      return PatternMatchedCollection.of();",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellBuckConfig.java b/src/com/facebook/buck/features/haskell/HaskellBuckConfig.java",
                "new file mode 100644",
                "index 0000000000..c55eee7529",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellBuckConfig.java",
                "@@ -0,0 +1,168 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.config.BuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.rules.ToolProvider;",
                "+import com.facebook.buck.rules.tool.config.ToolConfig;",
                "+import com.google.common.base.Splitter;",
                "+import com.google.common.collect.ImmutableList;",
                "+import java.nio.file.Path;",
                "+import java.util.Optional;",
                "+import java.util.function.Supplier;",
                "+",
                "+public class HaskellBuckConfig {",
                "+",
                "+  private static final Integer DEFAULT_MAJOR_VERSION = 7;",
                "+  private static final String SECTION_PREFIX = \"haskell\";",
                "+",
                "+  private final BuckConfig delegate;",
                "+",
                "+  public HaskellBuckConfig(BuckConfig delegate) {",
                "+    this.delegate = delegate;",
                "+  }",
                "+",
                "+  private Optional<ImmutableList<String>> getFlags(String section, String field) {",
                "+    Optional<String> value = delegate.getValue(section, field);",
                "+    if (!value.isPresent()) {",
                "+      return Optional.empty();",
                "+    }",
                "+    ImmutableList.Builder<String> split = ImmutableList.builder();",
                "+    if (!value.get().trim().isEmpty()) {",
                "+      split.addAll(Splitter.on(\" \").split(value.get().trim()));",
                "+    }",
                "+    return Optional.of(split.build());",
                "+  }",
                "+",
                "+  private Optional<ToolProvider> getToolProvider(String section, String configName) {",
                "+    return delegate.getView(ToolConfig.class).getToolProvider(section, configName);",
                "+  }",
                "+",
                "+  private String getToolSource(String section, String configName) {",
                "+    return String.format(\".buckconfig (%s.%s)\", section, configName);",
                "+  }",
                "+",
                "+  public String getDefaultSection() {",
                "+    return SECTION_PREFIX;",
                "+  }",
                "+",
                "+  public String getSectionForPlatform(CxxPlatform cxxPlatform) {",
                "+    return String.format(\"%s#%s\", SECTION_PREFIX, cxxPlatform.getFlavor());",
                "+  }",
                "+",
                "+  public Integer getCompilerMajorVersion(String section) {",
                "+    return delegate.getInteger(section, \"compiler_major_version\").orElse(DEFAULT_MAJOR_VERSION);",
                "+  }",
                "+",
                "+  public Optional<ToolProvider> getCompiler(String section) {",
                "+    return getToolProvider(section, \"compiler\");",
                "+  }",
                "+",
                "+  public String getCompilerSource(String section) {",
                "+    return getToolSource(section, \"compiler\");",
                "+  }",
                "+",
                "+  public Optional<ToolProvider> getLinker(String section) {",
                "+    return getToolProvider(section, \"linker\");",
                "+  }",
                "+",
                "+  public String getLinkerSource(String section) {",
                "+    return getToolSource(section, \"linker\");",
                "+  }",
                "+",
                "+  public Optional<ToolProvider> getPackager(String section) {",
                "+    return getToolProvider(section, \"packager\");",
                "+  }",
                "+",
                "+  public String getPackagerSource(String section) {",
                "+    return getToolSource(section, \"packager\");",
                "+  }",
                "+",
                "+  public Optional<ToolProvider> getHaddock(String section) {",
                "+    return getToolProvider(section, \"haddock\");",
                "+  }",
                "+",
                "+  public String getHaddockSource(String section) {",
                "+    return getToolSource(section, \"haddock\");",
                "+  }",
                "+",
                "+  public Optional<ImmutableList<String>> getCompilerFlags(String section) {",
                "+    return getFlags(section, \"compiler_flags\");",
                "+  }",
                "+",
                "+  public Optional<ImmutableList<String>> getLinkerFlags(String section) {",
                "+    return getFlags(section, \"linker_flags\");",
                "+  }",
                "+",
                "+  public boolean getShouldCacheLinks(String section) {",
                "+    return delegate.getBooleanValue(section, \"cache_links\", true);",
                "+  }",
                "+",
                "+  public Optional<Boolean> getShouldUsedOldBinaryOutputLocation(String section) {",
                "+    return delegate.getBoolean(section, \"old_binary_output_location\");",
                "+  }",
                "+",
                "+  public Optional<String> getPackageNamePrefix(String section) {",
                "+    return delegate.getValue(section, \"package_name_prefix\");",
                "+  }",
                "+",
                "+  public Supplier<Path> getGhciScriptTemplate(String section) {",
                "+    return () -> delegate.getRequiredPath(section, \"ghci_script_template\");",
                "+  }",
                "+",
                "+  public Supplier<Path> getGhciIservScriptTemplate(String section) {",
                "+    return () -> delegate.getRequiredPath(section, \"ghci_iserv_script_template\");",
                "+  }",
                "+",
                "+  public Supplier<Path> getGhciBinutils(String section) {",
                "+    return () -> delegate.getRequiredPath(section, \"ghci_binutils_path\");",
                "+  }",
                "+",
                "+  public Supplier<Path> getGhciGhc(String section) {",
                "+    return () -> delegate.getRequiredPath(section, \"ghci_ghc_path\");",
                "+  }",
                "+",
                "+  public Supplier<Path> getGhciIServ(String section) {",
                "+    return () -> delegate.getRequiredPath(section, \"ghci_iserv_path\");",
                "+  }",
                "+",
                "+  public Supplier<Path> getGhciIServProf(String section) {",
                "+    return () -> delegate.getRequiredPath(section, \"ghci_iserv_prof_path\");",
                "+  }",
                "+",
                "+  public Supplier<Path> getGhciLib(String section) {",
                "+    return () -> delegate.getRequiredPath(section, \"ghci_lib_path\");",
                "+  }",
                "+",
                "+  public Supplier<Path> getGhciCxx(String section) {",
                "+    return () -> delegate.getRequiredPath(section, \"ghci_cxx_path\");",
                "+  }",
                "+",
                "+  public Supplier<Path> getGhciCc(String section) {",
                "+    return () -> delegate.getRequiredPath(section, \"ghci_cc_path\");",
                "+  }",
                "+",
                "+  public Supplier<Path> getGhciCpp(String section) {",
                "+    return () -> delegate.getRequiredPath(section, \"ghci_cpp_path\");",
                "+  }",
                "+",
                "+  public Optional<? extends Linker.LinkableDepType> getLinkStyleForStubHeader(String section) {",
                "+    return delegate.getEnum(section, \"link_style_for_stub_header\", Linker.LinkableDepType.class);",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellCompileDep.java b/src/com/facebook/buck/features/haskell/HaskellCompileDep.java",
                "new file mode 100644",
                "index 0000000000..03530e9050",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellCompileDep.java",
                "@@ -0,0 +1,34 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+",
                "+/** An interface for rule which can provide interfaces files for a haskell compilation. */",
                "+public interface HaskellCompileDep {",
                "+",
                "+  /** @return a list of deps needed to compile this rule. */",
                "+  Iterable<BuildRule> getCompileDeps(HaskellPlatform platform);",
                "+",
                "+  /** @return the {@link HaskellCompileInput} object that contributes to compilation. */",
                "+  HaskellCompileInput getCompileInput(",
                "+      HaskellPlatform platform, Linker.LinkableDepType depType, boolean hsProfile);",
                "+",
                "+  /** @return the {#link HaskellHaddockInput} object for compilation */",
                "+  HaskellHaddockInput getHaddockInput(HaskellPlatform platform);",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellCompileRule.java b/src/com/facebook/buck/features/haskell/HaskellCompileRule.java",
                "new file mode 100644",
                "index 0000000000..f6eb82c1cf",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellCompileRule.java",
                "@@ -0,0 +1,478 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.CxxDescriptionEnhancer;",
                "+import com.facebook.buck.cxx.CxxToolFlags;",
                "+import com.facebook.buck.cxx.PreprocessorFlags;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.PathShortener;",
                "+import com.facebook.buck.cxx.toolchain.PicType;",
                "+import com.facebook.buck.cxx.toolchain.Preprocessor;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.log.Logger;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.rules.AbstractBuildRuleWithDeclaredAndExtraDeps;",
                "+import com.facebook.buck.rules.AddToRuleKey;",
                "+import com.facebook.buck.rules.BuildContext;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildableContext;",
                "+import com.facebook.buck.rules.BuildableSupport;",
                "+import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.rules.args.Arg;",
                "+import com.facebook.buck.shell.ShellStep;",
                "+import com.facebook.buck.step.AbstractExecutionStep;",
                "+import com.facebook.buck.step.ExecutionContext;",
                "+import com.facebook.buck.step.Step;",
                "+import com.facebook.buck.step.StepExecutionResult;",
                "+import com.facebook.buck.step.StepExecutionResults;",
                "+import com.facebook.buck.util.MoreIterables;",
                "+import com.facebook.buck.util.MoreSuppliers;",
                "+import com.facebook.buck.util.Optionals;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.facebook.buck.util.Verbosity;",
                "+import com.google.common.annotations.VisibleForTesting;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSortedMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import com.google.common.collect.Iterables;",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+import java.nio.file.FileVisitResult;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.SimpleFileVisitor;",
                "+import java.nio.file.attribute.BasicFileAttributes;",
                "+import java.util.Optional;",
                "+import java.util.Set;",
                "+import java.util.TreeSet;",
                "+import java.util.function.Supplier;",
                "+import java.util.stream.Collectors;",
                "+import java.util.stream.Stream;",
                "+",
                "+public class HaskellCompileRule extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "+",
                "+  private static final Logger LOG = Logger.get(HaskellCompileRule.class);",
                "+",
                "+  @AddToRuleKey private final Tool compiler;",
                "+",
                "+  private final HaskellVersion haskellVersion;",
                "+",
                "+  @AddToRuleKey private final ImmutableList<String> flags;",
                "+",
                "+  @AddToRuleKey private final PreprocessorFlags ppFlags;",
                "+  private final CxxPlatform cxxPlatform;",
                "+",
                "+  @AddToRuleKey private boolean pic;",
                "+",
                "+  @AddToRuleKey private final boolean hsProfile;",
                "+",
                "+  @AddToRuleKey private final Optional<String> main;",
                "+",
                "+  /**",
                "+   * Optional package info. If specified, the package name and version are baked into the",
                "+   * compilation.",
                "+   */",
                "+  @AddToRuleKey private final Optional<HaskellPackageInfo> packageInfo;",
                "+",
                "+  @AddToRuleKey private final ImmutableList<SourcePath> includes;",
                "+",
                "+  /** Packages providing modules that modules from this compilation can directly import. */",
                "+  @AddToRuleKey private final ImmutableSortedMap<String, HaskellPackage> exposedPackages;",
                "+",
                "+  /**",
                "+   * Packages that are transitively used by the exposed packages. Modules in this compilation cannot",
                "+   * import modules from these.",
                "+   */",
                "+  @AddToRuleKey private final ImmutableSortedMap<String, HaskellPackage> packages;",
                "+",
                "+  @AddToRuleKey private final HaskellSources sources;",
                "+",
                "+  @AddToRuleKey private final Preprocessor preprocessor;",
                "+",
                "+  private HaskellCompileRule(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams buildRuleParams,",
                "+      Tool compiler,",
                "+      HaskellVersion haskellVersion,",
                "+      ImmutableList<String> flags,",
                "+      PreprocessorFlags ppFlags,",
                "+      CxxPlatform cxxPlatform,",
                "+      PicType picType,",
                "+      boolean hsProfile,",
                "+      Optional<String> main,",
                "+      Optional<HaskellPackageInfo> packageInfo,",
                "+      ImmutableList<SourcePath> includes,",
                "+      ImmutableSortedMap<String, HaskellPackage> exposedPackages,",
                "+      ImmutableSortedMap<String, HaskellPackage> packages,",
                "+      HaskellSources sources,",
                "+      Preprocessor preprocessor) {",
                "+    super(buildTarget, projectFilesystem, buildRuleParams);",
                "+    this.compiler = compiler;",
                "+    this.haskellVersion = haskellVersion;",
                "+    this.flags = flags;",
                "+    this.ppFlags = ppFlags;",
                "+    this.cxxPlatform = cxxPlatform;",
                "+    this.pic = (picType == PicType.PIC);",
                "+    this.hsProfile = hsProfile;",
                "+    this.main = main;",
                "+    this.packageInfo = packageInfo;",
                "+    this.includes = includes;",
                "+    this.exposedPackages = exposedPackages;",
                "+    this.packages = packages;",
                "+    this.sources = sources;",
                "+    this.preprocessor = preprocessor;",
                "+",
                "+    Preconditions.checkState(!(pic && hsProfile), \"Currently don't support profiled PIC.\");",
                "+  }",
                "+",
                "+  public static HaskellCompileRule from(",
                "+      BuildTarget target,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams baseParams,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      Tool compiler,",
                "+      HaskellVersion haskellVersion,",
                "+      ImmutableList<String> flags,",
                "+      PreprocessorFlags ppFlags,",
                "+      CxxPlatform cxxPlatform,",
                "+      PicType picType,",
                "+      boolean hsProfile,",
                "+      Optional<String> main,",
                "+      Optional<HaskellPackageInfo> packageInfo,",
                "+      ImmutableList<SourcePath> includes,",
                "+      ImmutableSortedMap<String, HaskellPackage> exposedPackages,",
                "+      ImmutableSortedMap<String, HaskellPackage> packages,",
                "+      HaskellSources sources,",
                "+      Preprocessor preprocessor) {",
                "+    Supplier<ImmutableSortedSet<BuildRule>> declaredDeps =",
                "+        MoreSuppliers.memoize(",
                "+            () ->",
                "+                ImmutableSortedSet.<BuildRule>naturalOrder()",
                "+                    .addAll(BuildableSupport.getDepsCollection(compiler, ruleFinder))",
                "+                    .addAll(ppFlags.getDeps(ruleFinder))",
                "+                    .addAll(ruleFinder.filterBuildRuleInputs(includes))",
                "+                    .addAll(sources.getDeps(ruleFinder))",
                "+                    .addAll(",
                "+                        Stream.of(exposedPackages, packages)",
                "+                            .flatMap(packageMap -> packageMap.values().stream())",
                "+                            .flatMap(pkg -> pkg.getDeps(ruleFinder))",
                "+                            .iterator())",
                "+                    .build());",
                "+    return new HaskellCompileRule(",
                "+        target,",
                "+        projectFilesystem,",
                "+        baseParams.withDeclaredDeps(declaredDeps).withoutExtraDeps(),",
                "+        compiler,",
                "+        haskellVersion,",
                "+        flags,",
                "+        ppFlags,",
                "+        cxxPlatform,",
                "+        picType,",
                "+        hsProfile,",
                "+        main,",
                "+        packageInfo,",
                "+        includes,",
                "+        exposedPackages,",
                "+        packages,",
                "+        sources,",
                "+        preprocessor);",
                "+  }",
                "+",
                "+  private Path getObjectDir() {",
                "+    return BuildTargets.getGenPath(getProjectFilesystem(), getBuildTarget(), \"%s\")",
                "+        .resolve(\"objects\");",
                "+  }",
                "+",
                "+  private Path getInterfaceDir() {",
                "+    return BuildTargets.getGenPath(getProjectFilesystem(), getBuildTarget(), \"%s\")",
                "+        .resolve(\"interfaces\");",
                "+  }",
                "+",
                "+  /** @return the path where the compiler places generated FFI stub files. */",
                "+  private Path getStubDir() {",
                "+    return BuildTargets.getGenPath(getProjectFilesystem(), getBuildTarget(), \"%s\").resolve(\"stubs\");",
                "+  }",
                "+",
                "+  private Iterable<String> getPackageNameArgs() {",
                "+    ImmutableList.Builder<String> builder = ImmutableList.builder();",
                "+    if (packageInfo.isPresent()) {",
                "+      if (haskellVersion.getMajorVersion() >= 8) {",
                "+        builder.add(\"-package-name\", packageInfo.get().getName());",
                "+      } else {",
                "+        builder.add(",
                "+            \"-package-name\", packageInfo.get().getName() + '-' + packageInfo.get().getVersion());",
                "+      }",
                "+    }",
                "+    return builder.build();",
                "+  }",
                "+",
                "+  /** @return the arguments to pass to the compiler to build against package dependencies. */",
                "+  private Iterable<String> getPackageArgs(SourcePathResolver resolver) {",
                "+    Set<String> packageDbs = new TreeSet<>();",
                "+    Set<String> hidden = new TreeSet<>();",
                "+    Set<String> exposed = new TreeSet<>();",
                "+",
                "+    for (HaskellPackage haskellPackage : packages.values()) {",
                "+      packageDbs.add(resolver.getAbsolutePath(haskellPackage.getPackageDb()).toString());",
                "+      hidden.add(",
                "+          String.format(",
                "+              \"%s-%s\", haskellPackage.getInfo().getName(), haskellPackage.getInfo().getVersion()));",
                "+    }",
                "+",
                "+    for (HaskellPackage haskellPackage : exposedPackages.values()) {",
                "+      packageDbs.add(resolver.getAbsolutePath(haskellPackage.getPackageDb()).toString());",
                "+      exposed.add(",
                "+          String.format(",
                "+              \"%s-%s\", haskellPackage.getInfo().getName(), haskellPackage.getInfo().getVersion()));",
                "+    }",
                "+",
                "+    // We add all package DBs, and explicit expose or hide packages depending on whether they are",
                "+    // exposed or not.  This allows us to support setups that either add `-hide-all-packages` or",
                "+    // not.",
                "+    return ImmutableList.<String>builder()",
                "+        .addAll(MoreIterables.zipAndConcat(Iterables.cycle(\"-package-db\"), packageDbs))",
                "+        .addAll(MoreIterables.zipAndConcat(Iterables.cycle(\"-package\"), exposed))",
                "+        .addAll(MoreIterables.zipAndConcat(Iterables.cycle(\"-hide-package\"), hidden))",
                "+        .build();",
                "+  }",
                "+",
                "+  private Iterable<String> getPreprocessorFlags(SourcePathResolver resolver) {",
                "+    CxxToolFlags cxxToolFlags =",
                "+        ppFlags.toToolFlags(",
                "+            resolver,",
                "+            PathShortener.identity(),",
                "+            CxxDescriptionEnhancer.frameworkPathToSearchPath(cxxPlatform, resolver),",
                "+            preprocessor,",
                "+            /* pch */ Optional.empty());",
                "+    return MoreIterables.zipAndConcat(",
                "+        Iterables.cycle(\"-optP\"), Arg.stringify(cxxToolFlags.getAllFlags(), resolver));",
                "+  }",
                "+",
                "+  private class GhcStep extends ShellStep {",
                "+",
                "+    private BuildContext buildContext;",
                "+",
                "+    public GhcStep(BuildTarget buildTarget, Path rootPath, BuildContext buildContext) {",
                "+      super(Optional.of(buildTarget), rootPath);",
                "+      this.buildContext = buildContext;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ImmutableMap<String, String> getEnvironmentVariables(ExecutionContext context) {",
                "+      return ImmutableMap.<String, String>builder()",
                "+          .putAll(super.getEnvironmentVariables(context))",
                "+          .putAll(compiler.getEnvironment(buildContext.getSourcePathResolver()))",
                "+          .build();",
                "+    }",
                "+",
                "+    @Override",
                "+    protected boolean shouldPrintStderr(Verbosity verbosity) {",
                "+      return !verbosity.isSilent();",
                "+    }",
                "+",
                "+    @Override",
                "+    protected ImmutableList<String> getShellCommandInternal(ExecutionContext context) {",
                "+      ImmutableList<String> extraArgs = null;",
                "+      if (pic) {",
                "+        extraArgs = HaskellDescriptionUtils.PIC_FLAGS;",
                "+      } else if (hsProfile) {",
                "+        extraArgs = HaskellDescriptionUtils.PROF_FLAGS;",
                "+      } else {",
                "+        extraArgs = ImmutableList.of();",
                "+      }",
                "+",
                "+      return getCommandWithExtraArgs(extraArgs);",
                "+    }",
                "+",
                "+    private ImmutableList<String> getCommandWithExtraArgs(ImmutableList<String> extraArgs) {",
                "+      SourcePathResolver resolver = buildContext.getSourcePathResolver();",
                "+",
                "+      return ImmutableList.<String>builder()",
                "+          .addAll(compiler.getCommandPrefix(resolver))",
                "+          .addAll(flags)",
                "+          .add(\"-no-link\")",
                "+          .addAll(extraArgs)",
                "+          .addAll(",
                "+              MoreIterables.zipAndConcat(",
                "+                  Iterables.cycle(\"-main-is\"), Optionals.toStream(main).toOnceIterable()))",
                "+          .addAll(getPackageNameArgs())",
                "+          .addAll(getPreprocessorFlags(buildContext.getSourcePathResolver()))",
                "+          .add(\"-odir\", getProjectFilesystem().resolve(getObjectDir()).toString())",
                "+          .add(\"-hidir\", getProjectFilesystem().resolve(getInterfaceDir()).toString())",
                "+          .add(\"-stubdir\", getProjectFilesystem().resolve(getStubDir()).toString())",
                "+          .add(",
                "+              \"-i\"",
                "+                  + includes",
                "+                      .stream()",
                "+                      .map(resolver::getAbsolutePath)",
                "+                      .map(Object::toString)",
                "+                      .collect(Collectors.joining(\":\")))",
                "+          .addAll(getPackageArgs(buildContext.getSourcePathResolver()))",
                "+          .addAll(",
                "+              sources",
                "+                  .getSourcePaths()",
                "+                  .stream()",
                "+                  .map(resolver::getAbsolutePath)",
                "+                  .map(Object::toString)",
                "+                  .iterator())",
                "+          .build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getShortName() {",
                "+      return \"haskell-compile\";",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableList<Step> getBuildSteps(",
                "+      BuildContext buildContext, BuildableContext buildableContext) {",
                "+    buildableContext.recordArtifact(getObjectDir());",
                "+    buildableContext.recordArtifact(getInterfaceDir());",
                "+    buildableContext.recordArtifact(getStubDir());",
                "+",
                "+    ImmutableList.Builder<Step> steps = ImmutableList.builder();",
                "+",
                "+    steps",
                "+        .add(prepareOutputDir(\"object\", getObjectDir(), getObjectSuffix()))",
                "+        .add(prepareOutputDir(\"interface\", getInterfaceDir(), getInterfaceSuffix()))",
                "+        .add(prepareOutputDir(\"stub\", getStubDir(), \"h\"))",
                "+        .add(new GhcStep(getBuildTarget(), getProjectFilesystem().getRootPath(), buildContext));",
                "+",
                "+    return steps.build();",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean isCacheable() {",
                "+    return haskellVersion.getMajorVersion() >= 8;",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath getSourcePathToOutput() {",
                "+    return ExplicitBuildTargetSourcePath.of(getBuildTarget(), getInterfaceDir());",
                "+  }",
                "+",
                "+  private String getObjectSuffix() {",
                "+    if (hsProfile) {",
                "+      return \"p_o\";",
                "+    } else {",
                "+      return \"o\";",
                "+    }",
                "+  }",
                "+",
                "+  private String getInterfaceSuffix() {",
                "+    if (pic) {",
                "+      return \"dyn_hi\";",
                "+    } else if (hsProfile) {",
                "+      return \"p_hi\";",
                "+    } else {",
                "+      return \"hi\";",
                "+    }",
                "+  }",
                "+",
                "+  public ImmutableList<SourcePath> getObjects() {",
                "+    String suffix = \".\" + getObjectSuffix();",
                "+",
                "+    ImmutableList.Builder<SourcePath> objects = ImmutableList.builder();",
                "+    for (String module : sources.getModuleNames()) {",
                "+      objects.add(",
                "+          ExplicitBuildTargetSourcePath.of(",
                "+              getBuildTarget(),",
                "+              getObjectDir().resolve(module.replace('.', File.separatorChar) + suffix)));",
                "+    }",
                "+    return objects.build();",
                "+  }",
                "+",
                "+  public ImmutableSortedSet<String> getModules() {",
                "+    return sources.getModuleNames();",
                "+  }",
                "+",
                "+  public SourcePath getInterfaces() {",
                "+    return ExplicitBuildTargetSourcePath.of(getBuildTarget(), getInterfaceDir());",
                "+  }",
                "+",
                "+  public SourcePath getObjectsDir() {",
                "+    return ExplicitBuildTargetSourcePath.of(getBuildTarget(), getObjectDir());",
                "+  }",
                "+",
                "+  public SourcePath getStubsDir() {",
                "+    return ExplicitBuildTargetSourcePath.of(getBuildTarget(), getStubDir());",
                "+  }",
                "+",
                "+  @VisibleForTesting",
                "+  protected ImmutableList<String> getFlags() {",
                "+    return flags;",
                "+  }",
                "+",
                "+  /**",
                "+   * @return a {@link Step} which removes outputs which don't correspond to this rule's modules from",
                "+   *     the given output dir, as the module-derived outputs themselves will be controlled by the",
                "+   *     haskell compiler.",
                "+   */",
                "+  private Step prepareOutputDir(String name, Path root, String suffix) {",
                "+    return new AbstractExecutionStep(String.format(\"preparing %s output dir\", name)) {",
                "+      @Override",
                "+      public StepExecutionResult execute(ExecutionContext context) throws IOException {",
                "+        getProjectFilesystem().mkdirs(root);",
                "+        getProjectFilesystem()",
                "+            .walkRelativeFileTree(",
                "+                root,",
                "+                new SimpleFileVisitor<Path>() {",
                "+",
                "+                  // Only leave paths which would be overwritten when invoking the compiler.",
                "+                  private final Set<Path> allowedPaths =",
                "+                      RichStream.from(sources.getModuleNames())",
                "+                          .map(s -> root.resolve(s.replace('.', File.separatorChar) + \".\" + suffix))",
                "+                          .toImmutableSet();",
                "+",
                "+                  @Override",
                "+                  public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)",
                "+                      throws IOException {",
                "+                    Preconditions.checkState(!file.isAbsolute());",
                "+                    if (!allowedPaths.contains(file)) {",
                "+                      LOG.verbose(\"cleaning \" + file);",
                "+                      getProjectFilesystem().deleteFileAtPath(file);",
                "+                    }",
                "+                    return super.visitFile(file, attrs);",
                "+                  }",
                "+",
                "+                  @Override",
                "+                  public FileVisitResult postVisitDirectory(Path dir, IOException exc)",
                "+                      throws IOException {",
                "+                    Preconditions.checkState(!dir.isAbsolute());",
                "+                    if (!dir.equals(root)",
                "+                        && getProjectFilesystem().getDirectoryContents(dir).isEmpty()) {",
                "+                      LOG.verbose(\"cleaning \" + dir);",
                "+                      getProjectFilesystem().deleteFileAtPath(dir);",
                "+                    }",
                "+                    return super.postVisitDirectory(dir, exc);",
                "+                  }",
                "+                });",
                "+        return StepExecutionResults.SUCCESS;",
                "+      }",
                "+    };",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellDescriptionUtils.java b/src/com/facebook/buck/features/haskell/HaskellDescriptionUtils.java",
                "new file mode 100644",
                "index 0000000000..f48026222e",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellDescriptionUtils.java",
                "@@ -0,0 +1,589 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.Archive;",
                "+import com.facebook.buck.cxx.CxxDeps;",
                "+import com.facebook.buck.cxx.CxxPreprocessables;",
                "+import com.facebook.buck.cxx.CxxPreprocessorInput;",
                "+import com.facebook.buck.cxx.CxxSource;",
                "+import com.facebook.buck.cxx.CxxSourceTypes;",
                "+import com.facebook.buck.cxx.CxxToolFlags;",
                "+import com.facebook.buck.cxx.ExplicitCxxToolFlags;",
                "+import com.facebook.buck.cxx.PreprocessorFlags;",
                "+import com.facebook.buck.cxx.toolchain.ArchiveContents;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                "+import com.facebook.buck.cxx.toolchain.PicType;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linkers;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable.Linkage;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkables;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkables.SharedLibrariesBuilder;",
                "+import com.facebook.buck.file.WriteFile;",
                "+import com.facebook.buck.graph.AbstractBreadthFirstTraversal;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.InternalFlavor;",
                "+import com.facebook.buck.model.UserFlavor;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.BuildableSupport;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.rules.args.Arg;",
                "+import com.facebook.buck.rules.args.SourcePathArg;",
                "+import com.facebook.buck.rules.args.StringArg;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.util.MoreIterables;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.collect.ImmutableCollection;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import com.google.common.collect.Iterables;",
                "+import com.google.common.collect.Ordering;",
                "+import java.nio.file.Path;",
                "+import java.util.Collection;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                "+import java.util.TreeMap;",
                "+import java.util.stream.Stream;",
                "+",
                "+public class HaskellDescriptionUtils {",
                "+",
                "+  private HaskellDescriptionUtils() {}",
                "+",
                "+  static final Flavor GHCI_FLAV = UserFlavor.of(\"ghci\", \"Open a ghci session on this target\");",
                "+",
                "+  static final Flavor PROF = InternalFlavor.of(\"prof\");",
                "+  static final ImmutableList<String> PROF_FLAGS =",
                "+      ImmutableList.of(\"-prof\", \"-osuf\", \"p_o\", \"-hisuf\", \"p_hi\");",
                "+  static final ImmutableList<String> PIC_FLAGS =",
                "+      ImmutableList.of(\"-dynamic\", \"-fPIC\", \"-hisuf\", \"dyn_hi\");",
                "+",
                "+  /**",
                "+   * Create a Haskell compile rule that compiles all the given haskell sources in one step and pulls",
                "+   * interface files from all transitive haskell dependencies.",
                "+   */",
                "+  private static HaskellCompileRule createCompileRule(",
                "+      BuildTarget target,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams baseParams,",
                "+      BuildRuleResolver resolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      ImmutableSet<BuildRule> deps,",
                "+      HaskellPlatform platform,",
                "+      Linker.LinkableDepType depType,",
                "+      boolean hsProfile,",
                "+      Optional<String> main,",
                "+      Optional<HaskellPackageInfo> packageInfo,",
                "+      ImmutableList<String> flags,",
                "+      HaskellSources sources) {",
                "+",
                "+    CxxPlatform cxxPlatform = platform.getCxxPlatform();",
                "+",
                "+    Map<BuildTarget, ImmutableList<String>> depFlags = new TreeMap<>();",
                "+    Map<BuildTarget, ImmutableList<SourcePath>> depIncludes = new TreeMap<>();",
                "+    ImmutableSortedMap.Builder<String, HaskellPackage> exposedPackagesBuilder =",
                "+        ImmutableSortedMap.naturalOrder();",
                "+    ImmutableSortedMap.Builder<String, HaskellPackage> packagesBuilder =",
                "+        ImmutableSortedMap.naturalOrder();",
                "+    new AbstractBreadthFirstTraversal<BuildRule>(deps) {",
                "+      private final ImmutableSet<BuildRule> empty = ImmutableSet.of();",
                "+",
                "+      @Override",
                "+      public Iterable<BuildRule> visit(BuildRule rule) {",
                "+        Iterable<BuildRule> ruleDeps = empty;",
                "+        if (rule instanceof HaskellCompileDep) {",
                "+          HaskellCompileDep haskellCompileDep = (HaskellCompileDep) rule;",
                "+          ruleDeps = haskellCompileDep.getCompileDeps(platform);",
                "+          HaskellCompileInput compileInput =",
                "+              haskellCompileDep.getCompileInput(platform, depType, hsProfile);",
                "+          depFlags.put(rule.getBuildTarget(), compileInput.getFlags());",
                "+          depIncludes.put(rule.getBuildTarget(), compileInput.getIncludes());",
                "+",
                "+          // We add packages from first-order deps as expose modules, and transitively included",
                "+          // packages as hidden ones.",
                "+          boolean firstOrderDep = deps.contains(rule);",
                "+          for (HaskellPackage pkg : compileInput.getPackages()) {",
                "+            if (firstOrderDep) {",
                "+              exposedPackagesBuilder.put(pkg.getInfo().getIdentifier(), pkg);",
                "+            } else {",
                "+              packagesBuilder.put(pkg.getInfo().getIdentifier(), pkg);",
                "+            }",
                "+          }",
                "+        }",
                "+        return ruleDeps;",
                "+      }",
                "+    }.start();",
                "+",
                "+    Collection<CxxPreprocessorInput> cxxPreprocessorInputs =",
                "+        CxxPreprocessables.getTransitiveCxxPreprocessorInput(cxxPlatform, resolver, deps);",
                "+    ExplicitCxxToolFlags.Builder toolFlagsBuilder = CxxToolFlags.explicitBuilder();",
                "+    PreprocessorFlags.Builder ppFlagsBuilder = PreprocessorFlags.builder();",
                "+    toolFlagsBuilder.setPlatformFlags(",
                "+        StringArg.from(CxxSourceTypes.getPlatformPreprocessFlags(cxxPlatform, CxxSource.Type.C)));",
                "+    for (CxxPreprocessorInput input : cxxPreprocessorInputs) {",
                "+      ppFlagsBuilder.addAllIncludes(input.getIncludes());",
                "+      ppFlagsBuilder.addAllFrameworkPaths(input.getFrameworks());",
                "+      toolFlagsBuilder.addAllRuleFlags(input.getPreprocessorFlags().get(CxxSource.Type.C));",
                "+    }",
                "+    ppFlagsBuilder.setOtherFlags(toolFlagsBuilder.build());",
                "+    PreprocessorFlags ppFlags = ppFlagsBuilder.build();",
                "+",
                "+    ImmutableList<String> compileFlags =",
                "+        ImmutableList.<String>builder()",
                "+            .addAll(platform.getCompilerFlags())",
                "+            .addAll(flags)",
                "+            .addAll(Iterables.concat(depFlags.values()))",
                "+            .build();",
                "+",
                "+    ImmutableList<SourcePath> includes =",
                "+        ImmutableList.copyOf(Iterables.concat(depIncludes.values()));",
                "+",
                "+    ImmutableSortedMap<String, HaskellPackage> exposedPackages = exposedPackagesBuilder.build();",
                "+    ImmutableSortedMap<String, HaskellPackage> packages = packagesBuilder.build();",
                "+",
                "+    return HaskellCompileRule.from(",
                "+        target,",
                "+        projectFilesystem,",
                "+        baseParams,",
                "+        ruleFinder,",
                "+        platform.getCompiler().resolve(resolver),",
                "+        platform.getHaskellVersion(),",
                "+        compileFlags,",
                "+        ppFlags,",
                "+        cxxPlatform,",
                "+        depType == Linker.LinkableDepType.STATIC ? PicType.PDC : PicType.PIC,",
                "+        hsProfile,",
                "+        main,",
                "+        packageInfo,",
                "+        includes,",
                "+        exposedPackages,",
                "+        packages,",
                "+        sources,",
                "+        CxxSourceTypes.getPreprocessor(cxxPlatform, CxxSource.Type.C).resolve(resolver));",
                "+  }",
                "+",
                "+  protected static BuildTarget getCompileBuildTarget(",
                "+      BuildTarget target,",
                "+      HaskellPlatform platform,",
                "+      Linker.LinkableDepType depType,",
                "+      boolean hsProfile) {",
                "+",
                "+    target =",
                "+        target.withFlavors(",
                "+            platform.getFlavor(),",
                "+            InternalFlavor.of(\"objects-\" + depType.toString().toLowerCase().replace('_', '-')));",
                "+",
                "+    if (hsProfile) {",
                "+      target = target.withAppendedFlavors(PROF);",
                "+    }",
                "+",
                "+    return target;",
                "+  }",
                "+",
                "+  public static HaskellCompileRule requireCompileRule(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams params,",
                "+      BuildRuleResolver resolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      ImmutableSet<BuildRule> deps,",
                "+      HaskellPlatform platform,",
                "+      Linker.LinkableDepType depType,",
                "+      boolean hsProfile,",
                "+      Optional<String> main,",
                "+      Optional<HaskellPackageInfo> packageInfo,",
                "+      ImmutableList<String> flags,",
                "+      HaskellSources srcs) {",
                "+",
                "+    return (HaskellCompileRule)",
                "+        resolver.computeIfAbsent(",
                "+            getCompileBuildTarget(buildTarget, platform, depType, hsProfile),",
                "+            target ->",
                "+                HaskellDescriptionUtils.createCompileRule(",
                "+                    target,",
                "+                    projectFilesystem,",
                "+                    params,",
                "+                    resolver,",
                "+                    ruleFinder,",
                "+                    deps,",
                "+                    platform,",
                "+                    depType,",
                "+                    hsProfile,",
                "+                    main,",
                "+                    packageInfo,",
                "+                    flags,",
                "+                    srcs));",
                "+  }",
                "+",
                "+  /**",
                "+   * Create a Haskell link rule that links the given inputs to a executable or shared library and",
                "+   * pulls in transitive native linkable deps from the given dep roots.",
                "+   */",
                "+  public static HaskellLinkRule createLinkRule(",
                "+      BuildTarget target,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams baseParams,",
                "+      BuildRuleResolver resolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      HaskellPlatform platform,",
                "+      Linker.LinkType linkType,",
                "+      ImmutableList<Arg> linkerFlags,",
                "+      Iterable<Arg> linkerInputs,",
                "+      Iterable<? extends NativeLinkable> deps,",
                "+      ImmutableSet<BuildTarget> linkWholeDeps,",
                "+      Linker.LinkableDepType depType,",
                "+      Path outputPath,",
                "+      Optional<String> soname,",
                "+      boolean hsProfile) {",
                "+",
                "+    Tool linker = platform.getLinker().resolve(resolver);",
                "+",
                "+    ImmutableList.Builder<Arg> linkerArgsBuilder = ImmutableList.builder();",
                "+    ImmutableList.Builder<Arg> argsBuilder = ImmutableList.builder();",
                "+",
                "+    // Add the base flags from the `.buckconfig` first.",
                "+    argsBuilder.addAll(StringArg.from(platform.getLinkerFlags()));",
                "+",
                "+    // Pass in the appropriate flags to link a shared library.",
                "+    if (linkType.equals(Linker.LinkType.SHARED)) {",
                "+      argsBuilder.addAll(StringArg.from(\"-shared\", \"-dynamic\"));",
                "+      soname.ifPresent(",
                "+          name ->",
                "+              argsBuilder.addAll(",
                "+                  StringArg.from(",
                "+                      MoreIterables.zipAndConcat(",
                "+                          Iterables.cycle(\"-optl\"),",
                "+                          platform.getCxxPlatform().getLd().resolve(resolver).soname(name)))));",
                "+    }",
                "+",
                "+    // Add in extra flags passed into this function.",
                "+    argsBuilder.addAll(linkerFlags);",
                "+",
                "+    // We pass in the linker inputs and all native linkable deps by prefixing with `-optl` so that",
                "+    // the args go straight to the linker, and preserve their order.",
                "+    linkerArgsBuilder.addAll(linkerInputs);",
                "+    for (NativeLinkable nativeLinkable :",
                "+        NativeLinkables.getNativeLinkables(platform.getCxxPlatform(), resolver, deps, depType)",
                "+            .values()) {",
                "+      NativeLinkable.Linkage link =",
                "+          nativeLinkable.getPreferredLinkage(platform.getCxxPlatform(), resolver);",
                "+      NativeLinkableInput input =",
                "+          nativeLinkable.getNativeLinkableInput(",
                "+              platform.getCxxPlatform(),",
                "+              NativeLinkables.getLinkStyle(link, depType),",
                "+              linkWholeDeps.contains(nativeLinkable.getBuildTarget()),",
                "+              ImmutableSet.of(),",
                "+              resolver);",
                "+      linkerArgsBuilder.addAll(input.getArgs());",
                "+    }",
                "+",
                "+    // Since we use `-optl` to pass all linker inputs directly to the linker, the haskell linker",
                "+    // will complain about not having any input files.  So, create a dummy archive with an empty",
                "+    // module and pass that in normally to work around this.",
                "+    BuildTarget emptyModuleTarget = target.withAppendedFlavors(InternalFlavor.of(\"empty-module\"));",
                "+    WriteFile emptyModule =",
                "+        resolver.addToIndex(",
                "+            new WriteFile(",
                "+                emptyModuleTarget,",
                "+                projectFilesystem,",
                "+                \"module Unused where\",",
                "+                BuildTargets.getGenPath(projectFilesystem, emptyModuleTarget, \"%s/Unused.hs\"),",
                "+                /* executable */ false));",
                "+    HaskellCompileRule emptyCompiledModule =",
                "+        resolver.addToIndex(",
                "+            createCompileRule(",
                "+                target.withAppendedFlavors(InternalFlavor.of(\"empty-compiled-module\")),",
                "+                projectFilesystem,",
                "+                baseParams,",
                "+                resolver,",
                "+                ruleFinder,",
                "+                // TODO(agallagher): We shouldn't need any deps to compile an empty module, but ghc",
                "+                // implicitly tries to load the prelude and in some setups this is provided via a",
                "+                // Buck dependency.",
                "+                RichStream.from(deps)",
                "+                    .filter(BuildRule.class)",
                "+                    .toImmutableSortedSet(Ordering.natural()),",
                "+                platform,",
                "+                depType,",
                "+                hsProfile,",
                "+                Optional.empty(),",
                "+                Optional.empty(),",
                "+                ImmutableList.of(),",
                "+                HaskellSources.builder()",
                "+                    .putModuleMap(\"Unused\", emptyModule.getSourcePathToOutput())",
                "+                    .build()));",
                "+    BuildTarget emptyArchiveTarget = target.withAppendedFlavors(InternalFlavor.of(\"empty-archive\"));",
                "+    Archive emptyArchive =",
                "+        resolver.addToIndex(",
                "+            Archive.from(",
                "+                emptyArchiveTarget,",
                "+                projectFilesystem,",
                "+                resolver,",
                "+                ruleFinder,",
                "+                platform.getCxxPlatform(),",
                "+                ArchiveContents.NORMAL,",
                "+                BuildTargets.getGenPath(projectFilesystem, emptyArchiveTarget, \"%s/libempty.a\"),",
                "+                emptyCompiledModule.getObjects(),",
                "+                /* cacheable */ true));",
                "+    argsBuilder.add(SourcePathArg.of(emptyArchive.getSourcePathToOutput()));",
                "+",
                "+    ImmutableList<Arg> args = argsBuilder.build();",
                "+    ImmutableList<Arg> linkerArgs = linkerArgsBuilder.build();",
                "+",
                "+    return resolver.addToIndex(",
                "+        new HaskellLinkRule(",
                "+            target,",
                "+            projectFilesystem,",
                "+            baseParams",
                "+                .withDeclaredDeps(",
                "+                    ImmutableSortedSet.<BuildRule>naturalOrder()",
                "+                        .addAll(BuildableSupport.getDepsCollection(linker, ruleFinder))",
                "+                        .addAll(",
                "+                            Stream.of(args, linkerArgs)",
                "+                                .flatMap(Collection::stream)",
                "+                                .flatMap(",
                "+                                    arg ->",
                "+                                        BuildableSupport.getDepsCollection(arg, ruleFinder)",
                "+                                            .stream())",
                "+                                .iterator())",
                "+                        .build())",
                "+                .withoutExtraDeps(),",
                "+            linker,",
                "+            outputPath,",
                "+            args,",
                "+            linkerArgs,",
                "+            platform.shouldCacheLinks()));",
                "+  }",
                "+",
                "+  /** Accumulate parse-time deps needed by Haskell descriptions in depsBuilder. */",
                "+  public static void getParseTimeDeps(",
                "+      Iterable<HaskellPlatform> platforms, ImmutableCollection.Builder<BuildTarget> depsBuilder) {",
                "+    RichStream.from(platforms)",
                "+        .forEach(",
                "+            platform -> {",
                "+",
                "+              // Since this description generates haskell link/compile/package rules, make sure the",
                "+              // parser includes deps for these tools.",
                "+              depsBuilder.addAll(platform.getCompiler().getParseTimeDeps());",
                "+              depsBuilder.addAll(platform.getLinker().getParseTimeDeps());",
                "+              depsBuilder.addAll(platform.getPackager().getParseTimeDeps());",
                "+",
                "+              // We use the C/C++ linker's Linker object to find out how to pass in the soname, so",
                "+              // just add all C/C++ platform parse time deps.",
                "+              depsBuilder.addAll(CxxPlatforms.getParseTimeDeps(platform.getCxxPlatform()));",
                "+            });",
                "+  }",
                "+",
                "+  /** Give a rule that will result in a ghci session for the target */",
                "+  public static HaskellGhciRule requireGhciRule(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams params,",
                "+      CellPathResolver cellPathResolver,",
                "+      BuildRuleResolver resolver,",
                "+      HaskellPlatform platform,",
                "+      CxxBuckConfig cxxBuckConfig,",
                "+      ImmutableSortedSet<BuildTarget> argDeps,",
                "+      PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> argPlatformDeps,",
                "+      SourceList argSrcs,",
                "+      ImmutableSortedSet<BuildTarget> argPreloadDeps,",
                "+      PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> argPlatformPreloadDeps,",
                "+      ImmutableList<String> argCompilerFlags,",
                "+      Optional<BuildTarget> argGhciBinDep,",
                "+      Optional<SourcePath> argGhciInit) {",
                "+    boolean hsProfile = true; // Always build profiled for ghci",
                "+",
                "+    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(resolver);",
                "+    SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);",
                "+",
                "+    ImmutableSet.Builder<BuildRule> depsBuilder = ImmutableSet.builder();",
                "+    depsBuilder.addAll(",
                "+        CxxDeps.builder()",
                "+            .addDeps(argDeps)",
                "+            .addPlatformDeps(argPlatformDeps)",
                "+            .build()",
                "+            .get(resolver, platform.getCxxPlatform()));",
                "+    ImmutableSet<BuildRule> deps = depsBuilder.build();",
                "+",
                "+    ImmutableSet.Builder<BuildRule> preloadDepsBuilder = ImmutableSet.builder();",
                "+    preloadDepsBuilder.addAll(",
                "+        CxxDeps.builder()",
                "+            .addDeps(argPreloadDeps)",
                "+            .addPlatformDeps(argPlatformPreloadDeps)",
                "+            .build()",
                "+            .get(resolver, platform.getCxxPlatform()));",
                "+    ImmutableSet<BuildRule> preloadDeps = preloadDepsBuilder.build();",
                "+",
                "+    // Haskell visitor",
                "+    ImmutableSet.Builder<HaskellPackage> haskellPackages = ImmutableSet.builder();",
                "+    ImmutableSet.Builder<HaskellPackage> prebuiltHaskellPackages = ImmutableSet.builder();",
                "+    ImmutableSet.Builder<HaskellPackage> firstOrderHaskellPackages = ImmutableSet.builder();",
                "+    AbstractBreadthFirstTraversal<BuildRule> haskellVisitor =",
                "+        new AbstractBreadthFirstTraversal<BuildRule>(deps) {",
                "+          @Override",
                "+          public ImmutableSet<BuildRule> visit(BuildRule rule) {",
                "+            ImmutableSet.Builder<BuildRule> traverse = ImmutableSet.builder();",
                "+            if (rule instanceof HaskellLibrary || rule instanceof PrebuiltHaskellLibrary) {",
                "+              HaskellCompileDep haskellRule = (HaskellCompileDep) rule;",
                "+              HaskellCompileInput ci =",
                "+                  haskellRule.getCompileInput(platform, Linker.LinkableDepType.STATIC, hsProfile);",
                "+",
                "+              if (params.getBuildDeps().contains(rule)) {",
                "+                firstOrderHaskellPackages.addAll(ci.getPackages());",
                "+              }",
                "+",
                "+              if (rule instanceof HaskellLibrary) {",
                "+                haskellPackages.addAll(ci.getPackages());",
                "+              } else if (rule instanceof PrebuiltHaskellLibrary) {",
                "+                prebuiltHaskellPackages.addAll(ci.getPackages());",
                "+              }",
                "+",
                "+              traverse.addAll(haskellRule.getCompileDeps(platform));",
                "+            }",
                "+",
                "+            return traverse.build();",
                "+          }",
                "+        };",
                "+    haskellVisitor.start();",
                "+",
                "+    // Build the omnibus composition spec.",
                "+    HaskellGhciOmnibusSpec omnibusSpec =",
                "+        HaskellGhciDescription.getOmnibusSpec(",
                "+            buildTarget,",
                "+            platform.getCxxPlatform(),",
                "+            resolver,",
                "+            NativeLinkables.getNativeLinkableRoots(",
                "+                RichStream.from(deps).filter(NativeLinkable.class).toImmutableList(),",
                "+                n ->",
                "+                    n instanceof HaskellLibrary || n instanceof PrebuiltHaskellLibrary",
                "+                        ? Optional.of(",
                "+                            n.getNativeLinkableExportedDepsForPlatform(",
                "+                                platform.getCxxPlatform(), resolver))",
                "+                        : Optional.empty()),",
                "+            // The preloaded deps form our excluded roots, which we need to keep them separate from",
                "+            // the omnibus library so that they can be `LD_PRELOAD`ed early.",
                "+            RichStream.from(preloadDeps)",
                "+                .filter(NativeLinkable.class)",
                "+                .collect(ImmutableMap.toImmutableMap(NativeLinkable::getBuildTarget, l -> l)));",
                "+",
                "+    // Add an -rpath to the omnibus for shared library dependencies",
                "+    Path symlinkRelDir = HaskellGhciDescription.getSoLibsRelDir(buildTarget);",
                "+    ImmutableList.Builder<Arg> extraLinkFlags = ImmutableList.builder();",
                "+    extraLinkFlags.addAll(",
                "+        StringArg.from(",
                "+            Linkers.iXlinker(",
                "+                \"-rpath\",",
                "+                String.format(",
                "+                    \"%s/%s\",",
                "+                    platform.getCxxPlatform().getLd().resolve(resolver).origin(),",
                "+                    symlinkRelDir.toString()))));",
                "+",
                "+    // Construct the omnibus shared library.",
                "+    BuildRule omnibusSharedObject =",
                "+        HaskellGhciDescription.requireOmnibusSharedObject(",
                "+            cellPathResolver,",
                "+            buildTarget,",
                "+            projectFilesystem,",
                "+            resolver,",
                "+            platform.getCxxPlatform(),",
                "+            cxxBuckConfig,",
                "+            omnibusSpec.getBody().values(),",
                "+            omnibusSpec.getDeps().values(),",
                "+            extraLinkFlags.build());",
                "+",
                "+    // Build up a map of all transitive shared libraries the the monolithic omnibus library depends",
                "+    // on (basically, stuff we couldn't statically link in).  At this point, this should *not* be",
                "+    // pulling in any excluded deps.",
                "+    SharedLibrariesBuilder sharedLibsBuilder = new SharedLibrariesBuilder();",
                "+    ImmutableMap<BuildTarget, NativeLinkable> transitiveDeps =",
                "+        NativeLinkables.getTransitiveNativeLinkables(",
                "+            platform.getCxxPlatform(), resolver, omnibusSpec.getDeps().values());",
                "+    transitiveDeps",
                "+        .values()",
                "+        .stream()",
                "+        // Skip statically linked libraries.",
                "+        .filter(l -> l.getPreferredLinkage(platform.getCxxPlatform(), resolver) != Linkage.STATIC)",
                "+        .forEach(l -> sharedLibsBuilder.add(platform.getCxxPlatform(), l, resolver));",
                "+    ImmutableSortedMap<String, SourcePath> sharedLibs = sharedLibsBuilder.build();",
                "+",
                "+    // Build up a set of all transitive preload libs, which are the ones that have been \"excluded\"",
                "+    // from the omnibus link.  These are the ones we need to LD_PRELOAD.",
                "+    SharedLibrariesBuilder preloadLibsBuilder = new SharedLibrariesBuilder();",
                "+    omnibusSpec",
                "+        .getExcludedTransitiveDeps()",
                "+        .values()",
                "+        .stream()",
                "+        // Don't include shared libs for static libraries -- except for preload roots, which we",
                "+        // always link dynamically.",
                "+        .filter(",
                "+            l ->",
                "+                l.getPreferredLinkage(platform.getCxxPlatform(), resolver) != Linkage.STATIC",
                "+                    || omnibusSpec.getExcludedRoots().containsKey(l.getBuildTarget()))",
                "+        .forEach(l -> preloadLibsBuilder.add(platform.getCxxPlatform(), l, resolver));",
                "+    ImmutableSortedMap<String, SourcePath> preloadLibs = preloadLibsBuilder.build();",
                "+",
                "+    HaskellSources srcs =",
                "+        HaskellSources.from(",
                "+            buildTarget, resolver, pathResolver, ruleFinder, platform, \"srcs\", argSrcs);",
                "+",
                "+    return HaskellGhciRule.from(",
                "+        buildTarget,",
                "+        projectFilesystem,",
                "+        params,",
                "+        ruleFinder,",
                "+        srcs,",
                "+        argCompilerFlags,",
                "+        argGhciBinDep.map(",
                "+            target -> Preconditions.checkNotNull(resolver.getRule(target).getSourcePathToOutput())),",
                "+        argGhciInit,",
                "+        omnibusSharedObject,",
                "+        sharedLibs,",
                "+        preloadLibs,",
                "+        firstOrderHaskellPackages.build(),",
                "+        haskellPackages.build(),",
                "+        prebuiltHaskellPackages.build(),",
                "+        hsProfile,",
                "+        platform.getGhciScriptTemplate().get(),",
                "+        platform.getGhciIservScriptTemplate().get(),",
                "+        platform.getGhciBinutils().get(),",
                "+        platform.getGhciGhc().get(),",
                "+        platform.getGhciIServ().get(),",
                "+        platform.getGhciIServProf().get(),",
                "+        platform.getGhciLib().get(),",
                "+        platform.getGhciCxx().get(),",
                "+        platform.getGhciCc().get(),",
                "+        platform.getGhciCpp().get());",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellDescriptionsProvider.java b/src/com/facebook/buck/features/haskell/HaskellDescriptionsProvider.java",
                "new file mode 100644",
                "index 0000000000..21974c0757",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellDescriptionsProvider.java",
                "@@ -0,0 +1,43 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.DescriptionCreationContext;",
                "+import com.facebook.buck.rules.DescriptionProvider;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import java.util.Arrays;",
                "+import java.util.Collection;",
                "+import org.pf4j.Extension;",
                "+",
                "+@Extension",
                "+public class HaskellDescriptionsProvider implements DescriptionProvider {",
                "+",
                "+  @Override",
                "+  public Collection<Description<?>> getDescriptions(DescriptionCreationContext context) {",
                "+    ToolchainProvider toolchainProvider = context.getToolchainProvider();",
                "+    CxxBuckConfig cxxBuckConfig = new CxxBuckConfig(context.getBuckConfig());",
                "+",
                "+    return Arrays.asList(",
                "+        new HaskellHaddockDescription(toolchainProvider),",
                "+        new HaskellLibraryDescription(toolchainProvider, cxxBuckConfig),",
                "+        new HaskellBinaryDescription(toolchainProvider, cxxBuckConfig),",
                "+        new HaskellPrebuiltLibraryDescription(),",
                "+        new HaskellGhciDescription(toolchainProvider, cxxBuckConfig));",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellGhciDescription.java b/src/com/facebook/buck/features/haskell/HaskellGhciDescription.java",
                "new file mode 100644",
                "index 0000000000..01807cdb00",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellGhciDescription.java",
                "@@ -0,0 +1,438 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.CxxLibrary;",
                "+import com.facebook.buck.cxx.CxxLinkableEnhancer;",
                "+import com.facebook.buck.cxx.PrebuiltCxxLibrary;",
                "+import com.facebook.buck.cxx.PrebuiltCxxLibraryGroupDescription;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker.LinkableDepType;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkables;",
                "+import com.facebook.buck.graph.AbstractBreadthFirstTraversal;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.log.Logger;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.model.UnflavoredBuildTarget;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleCreationContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                "+import com.facebook.buck.rules.CommonDescriptionArg;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.HasDepsQuery;",
                "+import com.facebook.buck.rules.ImplicitDepsInferringDescription;",
                "+import com.facebook.buck.rules.PathSourcePath;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.args.Arg;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.rules.macros.StringWithMacros;",
                "+import com.facebook.buck.rules.query.QueryUtils;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.facebook.buck.versions.VersionRoot;",
                "+import com.google.common.collect.ImmutableCollection;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import com.google.common.collect.Iterables;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                "+import org.immutables.value.Value;",
                "+",
                "+public class HaskellGhciDescription",
                "+    implements Description<HaskellGhciDescriptionArg>,",
                "+        ImplicitDepsInferringDescription<HaskellGhciDescription.AbstractHaskellGhciDescriptionArg>,",
                "+        VersionRoot<HaskellGhciDescriptionArg> {",
                "+",
                "+  private static final Logger LOG = Logger.get(HaskellGhciDescription.class);",
                "+",
                "+  private final ToolchainProvider toolchainProvider;",
                "+  private final CxxBuckConfig cxxBuckConfig;",
                "+",
                "+  public HaskellGhciDescription(ToolchainProvider toolchainProvider, CxxBuckConfig cxxBuckConfig) {",
                "+    this.toolchainProvider = toolchainProvider;",
                "+    this.cxxBuckConfig = cxxBuckConfig;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Class<HaskellGhciDescriptionArg> getConstructorArgType() {",
                "+    return HaskellGhciDescriptionArg.class;",
                "+  }",
                "+",
                "+  /** Whether the nativeLinkable should be linked shared or othewise */",
                "+  public static boolean isPrebuiltSO(",
                "+      NativeLinkable nativeLinkable, CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+",
                "+    if (nativeLinkable instanceof PrebuiltCxxLibraryGroupDescription.CustomPrebuiltCxxLibrary) {",
                "+      return true;",
                "+    }",
                "+",
                "+    if (!(nativeLinkable instanceof PrebuiltCxxLibrary)) {",
                "+      return false;",
                "+    }",
                "+",
                "+    ImmutableMap<String, SourcePath> sharedLibraries =",
                "+        nativeLinkable.getSharedLibraries(cxxPlatform, ruleResolver);",
                "+",
                "+    for (Map.Entry<String, SourcePath> ent : sharedLibraries.entrySet()) {",
                "+      if (!(ent.getValue() instanceof PathSourcePath)) {",
                "+        return false;",
                "+      }",
                "+    }",
                "+",
                "+    return true;",
                "+  }",
                "+",
                "+  /**",
                "+   * @param omnibusRoots roots of the graph of nodes (including transitive deps) to include in the",
                "+   *     omnibus link.",
                "+   * @param excludedRoots roots of a the graph of nodes (including transitive deps) that cannot be",
                "+   *     included in the omnibus link.",
                "+   * @return the {@link HaskellGhciOmnibusSpec} describing the omnibus link.",
                "+   */",
                "+  public static HaskellGhciOmnibusSpec getOmnibusSpec(",
                "+      BuildTarget baseTarget,",
                "+      CxxPlatform cxxPlatform,",
                "+      BuildRuleResolver ruleResolver,",
                "+      ImmutableMap<BuildTarget, ? extends NativeLinkable> omnibusRoots,",
                "+      ImmutableMap<BuildTarget, ? extends NativeLinkable> excludedRoots) {",
                "+",
                "+    LOG.verbose(\"%s: omnibus roots: %s\", baseTarget, omnibusRoots);",
                "+    LOG.verbose(\"%s: excluded roots: %s\", baseTarget, excludedRoots);",
                "+",
                "+    HaskellGhciOmnibusSpec.Builder builder = HaskellGhciOmnibusSpec.builder();",
                "+",
                "+    // Calculate excluded roots/deps, and add them to the link.",
                "+    ImmutableMap<BuildTarget, NativeLinkable> transitiveExcludedLinkables =",
                "+        NativeLinkables.getTransitiveNativeLinkables(",
                "+            cxxPlatform, ruleResolver, excludedRoots.values());",
                "+    builder.setExcludedRoots(excludedRoots);",
                "+    builder.setExcludedTransitiveDeps(transitiveExcludedLinkables);",
                "+",
                "+    // Calculate the body and first-order deps of omnibus.",
                "+    new AbstractBreadthFirstTraversal<NativeLinkable>(omnibusRoots.values()) {",
                "+      @Override",
                "+      public Iterable<? extends NativeLinkable> visit(NativeLinkable nativeLinkable) {",
                "+",
                "+        // Excluded linkables can't be included in omnibus.",
                "+        if (transitiveExcludedLinkables.containsKey(nativeLinkable.getBuildTarget())) {",
                "+          LOG.verbose(",
                "+              \"%s: skipping excluded linkable %s\", baseTarget, nativeLinkable.getBuildTarget());",
                "+          return ImmutableSet.of();",
                "+        }",
                "+",
                "+        // We cannot include prebuilt SOs in omnibus.",
                "+        //",
                "+        // TODO(agallagher): We should also use `NativeLinkable.supportsOmnibusLinking()` to",
                "+        // determine if we can include the library, but this will need likely need to be updated for",
                "+        // a multi-pass walk first.",
                "+        if (isPrebuiltSO(nativeLinkable, cxxPlatform, ruleResolver)) {",
                "+          builder.putDeps(nativeLinkable.getBuildTarget(), nativeLinkable);",
                "+          LOG.verbose(\"%s: skipping prebuilt SO %s\", baseTarget, nativeLinkable.getBuildTarget());",
                "+          return ImmutableSet.of();",
                "+        }",
                "+",
                "+        // Include C/C++ libs capable of static linking in omnibus.",
                "+        //",
                "+        // TODO(agallagher): This should probably be *any* `NativeLinkable` that supports omnibus",
                "+        // linking.",
                "+        if (nativeLinkable instanceof CxxLibrary || nativeLinkable instanceof PrebuiltCxxLibrary) {",
                "+          builder.putBody(nativeLinkable.getBuildTarget(), nativeLinkable);",
                "+          LOG.verbose(",
                "+              \"%s: including C/C++ library %s\", baseTarget, nativeLinkable.getBuildTarget());",
                "+          return Iterables.concat(",
                "+              nativeLinkable.getNativeLinkableDepsForPlatform(cxxPlatform, ruleResolver),",
                "+              nativeLinkable.getNativeLinkableExportedDepsForPlatform(cxxPlatform, ruleResolver));",
                "+        }",
                "+",
                "+        // Unexpected node.  Can this actually happen?",
                "+        //",
                "+        // TODO(agallagher): This should probably be an internal error/assertion, as silently",
                "+        // dropping libraries at this point will likely result in we're user errors.",
                "+        return ImmutableSet.of();",
                "+      }",
                "+    }.start();",
                "+",
                "+    HaskellGhciOmnibusSpec spec = builder.build();",
                "+    LOG.verbose(\"%s: built omnibus spec %s\", spec);",
                "+    return spec;",
                "+  }",
                "+",
                "+  private static NativeLinkableInput getOmnibusNativeLinkableInput(",
                "+      BuildTarget baseTarget,",
                "+      CxxPlatform cxxPlatform,",
                "+      BuildRuleResolver ruleResolver,",
                "+      Iterable<NativeLinkable> body,",
                "+      Iterable<NativeLinkable> deps) {",
                "+",
                "+    List<NativeLinkableInput> nativeLinkableInputs = new ArrayList<>();",
                "+",
                "+    // Topologically sort the body nodes, so that they're ready to add to the link line.",
                "+    ImmutableSet<BuildTarget> bodyTargets =",
                "+        RichStream.from(body).map(NativeLinkable::getBuildTarget).toImmutableSet();",
                "+    ImmutableMap<BuildTarget, NativeLinkable> topoSortedBody =",
                "+        NativeLinkables.getTopoSortedNativeLinkables(",
                "+            body,",
                "+            nativeLinkable ->",
                "+                RichStream.from(",
                "+                        Iterables.concat(",
                "+                            nativeLinkable.getNativeLinkableExportedDepsForPlatform(",
                "+                                cxxPlatform, ruleResolver),",
                "+                            nativeLinkable.getNativeLinkableDepsForPlatform(",
                "+                                cxxPlatform, ruleResolver)))",
                "+                    .filter(l -> bodyTargets.contains(l.getBuildTarget())));",
                "+",
                "+    // Add the link inputs for all omnibus nodes.",
                "+    for (NativeLinkable nativeLinkable : topoSortedBody.values()) {",
                "+",
                "+      // We link C/C++ libraries whole...",
                "+      if (nativeLinkable instanceof CxxLibrary) {",
                "+        NativeLinkable.Linkage link = nativeLinkable.getPreferredLinkage(cxxPlatform, ruleResolver);",
                "+        nativeLinkableInputs.add(",
                "+            nativeLinkable.getNativeLinkableInput(",
                "+                cxxPlatform,",
                "+                NativeLinkables.getLinkStyle(link, Linker.LinkableDepType.STATIC_PIC),",
                "+                true,",
                "+                ImmutableSet.of(),",
                "+                ruleResolver));",
                "+        LOG.verbose(",
                "+            \"%s: linking C/C++ library %s whole into omnibus\",",
                "+            baseTarget, nativeLinkable.getBuildTarget());",
                "+        continue;",
                "+      }",
                "+",
                "+      // Link prebuilt C/C++ libraries statically.",
                "+      if (nativeLinkable instanceof PrebuiltCxxLibrary) {",
                "+        nativeLinkableInputs.add(",
                "+            NativeLinkables.getNativeLinkableInput(",
                "+                cxxPlatform, Linker.LinkableDepType.STATIC_PIC, nativeLinkable, ruleResolver));",
                "+        LOG.verbose(",
                "+            \"%s: linking prebuilt C/C++ library %s into omnibus\",",
                "+            baseTarget, nativeLinkable.getBuildTarget());",
                "+        continue;",
                "+      }",
                "+",
                "+      throw new IllegalStateException(",
                "+          String.format(",
                "+              \"%s: unexpected rule type in omnibus link %s(%s)\",",
                "+              baseTarget, nativeLinkable.getClass(), nativeLinkable.getBuildTarget()));",
                "+    }",
                "+",
                "+    // Link in omnibus deps dynamically.",
                "+    ImmutableMap<BuildTarget, NativeLinkable> depLinkables =",
                "+        NativeLinkables.getNativeLinkables(cxxPlatform, ruleResolver, deps, LinkableDepType.SHARED);",
                "+    for (NativeLinkable linkable : depLinkables.values()) {",
                "+      nativeLinkableInputs.add(",
                "+          NativeLinkables.getNativeLinkableInput(",
                "+              cxxPlatform, LinkableDepType.SHARED, linkable, ruleResolver));",
                "+    }",
                "+",
                "+    return NativeLinkableInput.concat(nativeLinkableInputs);",
                "+  }",
                "+",
                "+  /**",
                "+   * Give the relative path from the omnibus to its shared library directory. Expose this to enable",
                "+   * setting -rpath.",
                "+   */",
                "+  public static Path getSoLibsRelDir(BuildTarget baseTarget) {",
                "+    return Paths.get(baseTarget.getShortName() + \".so-symlinks\");",
                "+  }",
                "+",
                "+  /** Give a rule for an omnibus object to be loaded into a ghci session */",
                "+  public static synchronized BuildRule requireOmnibusSharedObject(",
                "+      CellPathResolver cellPathResolver,",
                "+      BuildTarget baseTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleResolver resolver,",
                "+      CxxPlatform cxxPlatform,",
                "+      CxxBuckConfig cxxBuckConfig,",
                "+      Iterable<NativeLinkable> body,",
                "+      Iterable<NativeLinkable> deps,",
                "+      ImmutableList<Arg> extraLdFlags) {",
                "+    return resolver.computeIfAbsent(",
                "+        BuildTarget.of(",
                "+            UnflavoredBuildTarget.of(",
                "+                baseTarget.getCellPath(),",
                "+                Optional.empty(),",
                "+                baseTarget.getBaseName(),",
                "+                baseTarget.getShortName() + \".omnibus-shared-object\"),",
                "+            baseTarget.getFlavors()),",
                "+        ruleTarget -> {",
                "+          ImmutableList.Builder<Arg> linkFlagsBuilder = ImmutableList.builder();",
                "+          linkFlagsBuilder.addAll(extraLdFlags);",
                "+          linkFlagsBuilder.addAll(",
                "+              getOmnibusNativeLinkableInput(baseTarget, cxxPlatform, resolver, body, deps)",
                "+                  .getArgs());",
                "+",
                "+          // ----------------------------------------------------------------",
                "+          // Add to resolver",
                "+          return CxxLinkableEnhancer.createCxxLinkableSharedBuildRule(",
                "+              cxxBuckConfig,",
                "+              cxxPlatform,",
                "+              projectFilesystem,",
                "+              resolver,",
                "+              new SourcePathRuleFinder(resolver),",
                "+              ruleTarget,",
                "+              BuildTargets.getGenPath(projectFilesystem, ruleTarget, \"%s\")",
                "+                  .resolve(\"libghci_dependencies.so\"),",
                "+              ImmutableMap.of(),",
                "+              Optional.of(\"libghci_dependencies.so\"),",
                "+              linkFlagsBuilder.build(),",
                "+              cellPathResolver);",
                "+        });",
                "+  }",
                "+",
                "+  // Return the C/C++ platform to build against.",
                "+  private HaskellPlatform getPlatform(BuildTarget target, AbstractHaskellGhciDescriptionArg arg) {",
                "+    HaskellPlatformsProvider haskellPlatformsProvider = getHaskellPlatformsProvider();",
                "+    FlavorDomain<HaskellPlatform> platforms = haskellPlatformsProvider.getHaskellPlatforms();",
                "+",
                "+    Optional<HaskellPlatform> flavorPlatform = platforms.getValue(target);",
                "+    if (flavorPlatform.isPresent()) {",
                "+      return flavorPlatform.get();",
                "+    }",
                "+",
                "+    if (arg.getPlatform().isPresent()) {",
                "+      return platforms.getValue(arg.getPlatform().get());",
                "+    }",
                "+",
                "+    return haskellPlatformsProvider.getDefaultHaskellPlatform();",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuildRule createBuildRule(",
                "+      BuildRuleCreationContext context,",
                "+      BuildTarget buildTarget,",
                "+      BuildRuleParams params,",
                "+      HaskellGhciDescriptionArg args) {",
                "+",
                "+    HaskellPlatform platform = getPlatform(buildTarget, args);",
                "+    return HaskellDescriptionUtils.requireGhciRule(",
                "+        buildTarget,",
                "+        context.getProjectFilesystem(),",
                "+        params,",
                "+        context.getCellPathResolver(),",
                "+        context.getBuildRuleResolver(),",
                "+        platform,",
                "+        cxxBuckConfig,",
                "+        args.getDeps(),",
                "+        args.getPlatformDeps(),",
                "+        args.getSrcs(),",
                "+        args.getPreloadDeps(),",
                "+        args.getPlatformPreloadDeps(),",
                "+        args.getCompilerFlags(),",
                "+        args.getGhciBinDep(),",
                "+        args.getGhciInit());",
                "+  }",
                "+",
                "+  @Override",
                "+  public void findDepsForTargetFromConstructorArgs(",
                "+      BuildTarget buildTarget,",
                "+      CellPathResolver cellRoots,",
                "+      AbstractHaskellGhciDescriptionArg constructorArg,",
                "+      ImmutableCollection.Builder<BuildTarget> extraDepsBuilder,",
                "+      ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "+",
                "+    HaskellDescriptionUtils.getParseTimeDeps(",
                "+        ImmutableList.of(getPlatform(buildTarget, constructorArg)), targetGraphOnlyDepsBuilder);",
                "+",
                "+    constructorArg",
                "+        .getDepsQuery()",
                "+        .ifPresent(",
                "+            depsQuery ->",
                "+                QueryUtils.extractParseTimeTargets(buildTarget, cellRoots, depsQuery)",
                "+                    .forEach(targetGraphOnlyDepsBuilder::add));",
                "+  }",
                "+",
                "+  private HaskellPlatformsProvider getHaskellPlatformsProvider() {",
                "+    return toolchainProvider.getByName(",
                "+        HaskellPlatformsProvider.DEFAULT_NAME, HaskellPlatformsProvider.class);",
                "+  }",
                "+",
                "+  /** Composition of {@link NativeLinkable}s in the omnibus link. */",
                "+  @Value.Immutable",
                "+  @BuckStyleImmutable",
                "+  interface AbstractHaskellGhciOmnibusSpec {",
                "+",
                "+    // All native nodes which are to be statically linked into the giant combined shared library.",
                "+    ImmutableMap<BuildTarget, NativeLinkable> getBody();",
                "+",
                "+    // The subset of excluded nodes which are first-order deps of any root or body nodes.",
                "+    ImmutableMap<BuildTarget, NativeLinkable> getDeps();",
                "+",
                "+    // Native root nodes which are to be excluded from omnibus linking.",
                "+    ImmutableMap<BuildTarget, NativeLinkable> getExcludedRoots();",
                "+",
                "+    // Transitive native nodes which are to be excluded from omnibus linking.",
                "+    ImmutableMap<BuildTarget, NativeLinkable> getExcludedTransitiveDeps();",
                "+  }",
                "+",
                "+  @BuckStyleImmutable",
                "+  @Value.Immutable(copy = true)",
                "+  interface AbstractHaskellGhciDescriptionArg extends CommonDescriptionArg, HasDepsQuery {",
                "+    @Value.Default",
                "+    default SourceList getSrcs() {",
                "+      return SourceList.EMPTY;",
                "+    }",
                "+",
                "+    ImmutableList<String> getCompilerFlags();",
                "+",
                "+    ImmutableList<StringWithMacros> getLinkerFlags();",
                "+",
                "+    @Value.Default",
                "+    default PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> getPlatformDeps() {",
                "+      return PatternMatchedCollection.of();",
                "+    }",
                "+",
                "+    @Value.Default",
                "+    default boolean isEnableProfiling() {",
                "+      return false;",
                "+    }",
                "+",
                "+    Optional<BuildTarget> getGhciBinDep();",
                "+",
                "+    Optional<SourcePath> getGhciInit();",
                "+",
                "+    Optional<Flavor> getPlatform();",
                "+",
                "+    @Value.Default",
                "+    default ImmutableSortedSet<BuildTarget> getPreloadDeps() {",
                "+      return ImmutableSortedSet.of();",
                "+    }",
                "+",
                "+    @Value.Default",
                "+    default PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> getPlatformPreloadDeps() {",
                "+      return PatternMatchedCollection.of();",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellGhciRule.java b/src/com/facebook/buck/features/haskell/HaskellGhciRule.java",
                "new file mode 100644",
                "index 0000000000..b5969fd552",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellGhciRule.java",
                "@@ -0,0 +1,570 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.io.BuildCellRelativePath;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.rules.AbstractBuildRuleWithDeclaredAndExtraDeps;",
                "+import com.facebook.buck.rules.AddToRuleKey;",
                "+import com.facebook.buck.rules.BinaryBuildRule;",
                "+import com.facebook.buck.rules.BuildContext;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildableContext;",
                "+import com.facebook.buck.rules.CommandTool;",
                "+import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.NonHashableSourcePathContainer;",
                "+import com.facebook.buck.rules.RuleKeyObjectSink;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.rules.args.SourcePathArg;",
                "+import com.facebook.buck.step.AbstractExecutionStep;",
                "+import com.facebook.buck.step.ExecutionContext;",
                "+import com.facebook.buck.step.Step;",
                "+import com.facebook.buck.step.StepExecutionResult;",
                "+import com.facebook.buck.step.fs.CopyStep;",
                "+import com.facebook.buck.step.fs.MakeCleanDirectoryStep;",
                "+import com.facebook.buck.step.fs.MakeExecutableStep;",
                "+import com.facebook.buck.step.fs.StringTemplateStep;",
                "+import com.facebook.buck.step.fs.SymlinkFileStep;",
                "+import com.facebook.buck.step.fs.WriteFileStep;",
                "+import com.facebook.buck.util.MoreIterables;",
                "+import com.google.common.base.Charsets;",
                "+import com.google.common.base.Joiner;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedMap;",
                "+import com.google.common.collect.Iterables;",
                "+import java.io.IOException;",
                "+import java.nio.charset.StandardCharsets;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.Path;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                "+import org.stringtemplate.v4.ST;",
                "+",
                "+public class HaskellGhciRule extends AbstractBuildRuleWithDeclaredAndExtraDeps",
                "+    implements BinaryBuildRule {",
                "+",
                "+  @AddToRuleKey HaskellSources srcs;",
                "+",
                "+  @AddToRuleKey ImmutableList<String> compilerFlags;",
                "+",
                "+  @AddToRuleKey Optional<SourcePath> ghciBinDep;",
                "+",
                "+  @AddToRuleKey Optional<SourcePath> ghciInit;",
                "+",
                "+  @AddToRuleKey BuildRule omnibusSharedObject;",
                "+",
                "+  ImmutableSortedMap<String, SourcePath> solibs;",
                "+",
                "+  ImmutableSortedMap<String, SourcePath> preloadLibs;",
                "+",
                "+  @AddToRuleKey ImmutableSet<HaskellPackage> firstOrderHaskellPackages;",
                "+",
                "+  @AddToRuleKey ImmutableSet<HaskellPackage> haskellPackages;",
                "+",
                "+  @AddToRuleKey ImmutableSet<HaskellPackage> prebuiltHaskellPackages;",
                "+",
                "+  @AddToRuleKey boolean enableProfiling;",
                "+",
                "+  @AddToRuleKey(stringify = true)",
                "+  Path ghciScriptTemplate;",
                "+",
                "+  @AddToRuleKey(stringify = true)",
                "+  Path ghciIservScriptTemplate;",
                "+",
                "+  @AddToRuleKey(stringify = true)",
                "+  Path ghciBinutils;",
                "+",
                "+  @AddToRuleKey(stringify = true)",
                "+  Path ghciGhc;",
                "+",
                "+  @AddToRuleKey(stringify = true)",
                "+  Path ghciIServ;",
                "+",
                "+  @AddToRuleKey(stringify = true)",
                "+  Path ghciIServProf;",
                "+",
                "+  @AddToRuleKey(stringify = true)",
                "+  Path ghciLib;",
                "+",
                "+  @AddToRuleKey(stringify = true)",
                "+  Path ghciCxx;",
                "+",
                "+  @AddToRuleKey(stringify = true)",
                "+  Path ghciCc;",
                "+",
                "+  @AddToRuleKey(stringify = true)",
                "+  Path ghciCpp;",
                "+",
                "+  private HaskellGhciRule(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams params,",
                "+      HaskellSources srcs,",
                "+      ImmutableList<String> compilerFlags,",
                "+      Optional<SourcePath> ghciBinDep,",
                "+      Optional<SourcePath> ghciInit,",
                "+      BuildRule omnibusSharedObject,",
                "+      ImmutableSortedMap<String, SourcePath> solibs,",
                "+      ImmutableSortedMap<String, SourcePath> preloadLibs,",
                "+      ImmutableSet<HaskellPackage> firstOrderHaskellPackages,",
                "+      ImmutableSet<HaskellPackage> haskellPackages,",
                "+      ImmutableSet<HaskellPackage> prebuiltHaskellPackages,",
                "+      boolean enableProfiling,",
                "+      Path ghciScriptTemplate,",
                "+      Path ghciIservScriptTemplate,",
                "+      Path ghciBinutils,",
                "+      Path ghciGhc,",
                "+      Path ghciIServ,",
                "+      Path ghciIServProf,",
                "+      Path ghciLib,",
                "+      Path ghciCxx,",
                "+      Path ghciCc,",
                "+      Path ghciCpp) {",
                "+    super(buildTarget, projectFilesystem, params);",
                "+    this.srcs = srcs;",
                "+    this.compilerFlags = compilerFlags;",
                "+    this.ghciBinDep = ghciBinDep;",
                "+    this.ghciInit = ghciInit;",
                "+    this.omnibusSharedObject = omnibusSharedObject;",
                "+    this.solibs = solibs;",
                "+    this.preloadLibs = preloadLibs;",
                "+    this.firstOrderHaskellPackages = firstOrderHaskellPackages;",
                "+    this.haskellPackages = haskellPackages;",
                "+    this.prebuiltHaskellPackages = prebuiltHaskellPackages;",
                "+    this.enableProfiling = enableProfiling;",
                "+    this.ghciScriptTemplate = ghciScriptTemplate;",
                "+    this.ghciIservScriptTemplate = ghciIservScriptTemplate;",
                "+    this.ghciBinutils = ghciBinutils;",
                "+    this.ghciGhc = ghciGhc;",
                "+    this.ghciIServ = ghciIServ;",
                "+    this.ghciIServProf = ghciIServProf;",
                "+    this.ghciLib = ghciLib;",
                "+    this.ghciCxx = ghciCxx;",
                "+    this.ghciCc = ghciCc;",
                "+    this.ghciCpp = ghciCpp;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void appendToRuleKey(RuleKeyObjectSink sink) {",
                "+    sink.setReflectively(\"links\", solibsForRuleKey(solibs));",
                "+    sink.setReflectively(\"preloads\", solibsForRuleKey(preloadLibs));",
                "+  }",
                "+",
                "+  private ImmutableSortedMap<String, NonHashableSourcePathContainer> solibsForRuleKey(",
                "+      ImmutableSortedMap<String, SourcePath> libs) {",
                "+    ImmutableSortedMap.Builder<String, NonHashableSourcePathContainer> solibMap =",
                "+        ImmutableSortedMap.naturalOrder();",
                "+    for (Map.Entry<String, SourcePath> entry : libs.entrySet()) {",
                "+      solibMap.put(entry.getKey(), new NonHashableSourcePathContainer(entry.getValue()));",
                "+    }",
                "+",
                "+    return solibMap.build();",
                "+  }",
                "+",
                "+  public static HaskellGhciRule from(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams params,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      HaskellSources srcs,",
                "+      ImmutableList<String> compilerFlags,",
                "+      Optional<SourcePath> ghciBinDep,",
                "+      Optional<SourcePath> ghciInit,",
                "+      BuildRule omnibusSharedObject,",
                "+      ImmutableSortedMap<String, SourcePath> solibs,",
                "+      ImmutableSortedMap<String, SourcePath> preloadLibs,",
                "+      ImmutableSet<HaskellPackage> firstOrderHaskellPackages,",
                "+      ImmutableSet<HaskellPackage> haskellPackages,",
                "+      ImmutableSet<HaskellPackage> prebuiltHaskellPackages,",
                "+      boolean enableProfiling,",
                "+      Path ghciScriptTemplate,",
                "+      Path ghciIservScriptTemplate,",
                "+      Path ghciBinutils,",
                "+      Path ghciGhc,",
                "+      Path ghciIServ,",
                "+      Path ghciIServProf,",
                "+      Path ghciLib,",
                "+      Path ghciCxx,",
                "+      Path ghciCc,",
                "+      Path ghciCpp) {",
                "+",
                "+    ImmutableSet.Builder<BuildRule> extraDeps = ImmutableSet.builder();",
                "+",
                "+    extraDeps.add(omnibusSharedObject);",
                "+",
                "+    for (HaskellPackage pkg : haskellPackages) {",
                "+      extraDeps.addAll(pkg.getDeps(ruleFinder)::iterator);",
                "+    }",
                "+",
                "+    for (HaskellPackage pkg : prebuiltHaskellPackages) {",
                "+      extraDeps.addAll(pkg.getDeps(ruleFinder)::iterator);",
                "+    }",
                "+",
                "+    ghciBinDep.flatMap(ruleFinder::getRule).ifPresent(extraDeps::add);",
                "+",
                "+    extraDeps.addAll(ruleFinder.filterBuildRuleInputs(solibs.values()));",
                "+    extraDeps.addAll(ruleFinder.filterBuildRuleInputs(preloadLibs.values()));",
                "+    return new HaskellGhciRule(",
                "+        buildTarget,",
                "+        projectFilesystem,",
                "+        params.copyAppendingExtraDeps(extraDeps.build()),",
                "+        srcs,",
                "+        compilerFlags,",
                "+        ghciBinDep,",
                "+        ghciInit,",
                "+        omnibusSharedObject,",
                "+        solibs,",
                "+        preloadLibs,",
                "+        firstOrderHaskellPackages,",
                "+        haskellPackages,",
                "+        prebuiltHaskellPackages,",
                "+        enableProfiling,",
                "+        ghciScriptTemplate,",
                "+        ghciIservScriptTemplate,",
                "+        ghciBinutils,",
                "+        ghciGhc,",
                "+        ghciIServ,",
                "+        ghciIServProf,",
                "+        ghciLib,",
                "+        ghciCxx,",
                "+        ghciCc,",
                "+        ghciCpp);",
                "+  }",
                "+",
                "+  private Path getOutputDir() {",
                "+    return BuildTargets.getGenPath(getProjectFilesystem(), getBuildTarget(), \"%s\");",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath getSourcePathToOutput() {",
                "+    return ExplicitBuildTargetSourcePath.of(getBuildTarget(), getOutputDir());",
                "+  }",
                "+",
                "+  /** Resolves the real path to the lib and generates a symlink to it */",
                "+  private class ResolveAndSymlinkStep extends AbstractExecutionStep {",
                "+",
                "+    private SourcePathResolver resolver;",
                "+    private Path symlinkDir;",
                "+    private String name;",
                "+    private SourcePath lib;",
                "+",
                "+    public ResolveAndSymlinkStep(",
                "+        SourcePathResolver resolver, Path symlinkDir, String name, SourcePath lib) {",
                "+      super(\"symlinkLib_\" + name);",
                "+      this.resolver = resolver;",
                "+      this.symlinkDir = symlinkDir;",
                "+      this.name = name;",
                "+      this.lib = lib;",
                "+    }",
                "+",
                "+    @Override",
                "+    public StepExecutionResult execute(ExecutionContext context)",
                "+        throws IOException, InterruptedException {",
                "+      Path src = resolver.getRelativePath(lib).toRealPath();",
                "+      Path dest = symlinkDir.resolve(name);",
                "+      SymlinkFileStep.Builder sl = SymlinkFileStep.builder();",
                "+      return sl.setFilesystem(getProjectFilesystem())",
                "+          .setExistingFile(src)",
                "+          .setDesiredLink(dest)",
                "+          .build()",
                "+          .execute(context);",
                "+    }",
                "+  }",
                "+",
                "+  private void symlinkLibs(",
                "+      SourcePathResolver resolver,",
                "+      Path symlinkDir,",
                "+      ImmutableList.Builder<Step> steps,",
                "+      ImmutableSortedMap<String, SourcePath> libs) {",
                "+    for (Map.Entry<String, SourcePath> ent : libs.entrySet()) {",
                "+      steps.add(new ResolveAndSymlinkStep(resolver, symlinkDir, ent.getKey(), ent.getValue()));",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableList<Step> getBuildSteps(",
                "+      BuildContext context, BuildableContext buildableContext) {",
                "+",
                "+    SourcePathResolver resolver = context.getSourcePathResolver();",
                "+",
                "+    String name = getBuildTarget().getShortName();",
                "+    Path dir = getOutputDir();",
                "+    Path so = resolver.getRelativePath(omnibusSharedObject.getSourcePathToOutput());",
                "+    Path packagesDir = dir.resolve(name + \".packages\");",
                "+    Path symlinkDir = dir.resolve(HaskellGhciDescription.getSoLibsRelDir(getBuildTarget()));",
                "+    Path symlinkPreloadDir = dir.resolve(name + \".preload-symlinks\");",
                "+",
                "+    ImmutableList.Builder<String> compilerFlagsBuilder = ImmutableList.builder();",
                "+    compilerFlagsBuilder.addAll(compilerFlags);",
                "+",
                "+    ImmutableList.Builder<Step> steps = ImmutableList.builder();",
                "+    steps.addAll(",
                "+        MakeCleanDirectoryStep.of(",
                "+            BuildCellRelativePath.fromCellRelativePath(",
                "+                context.getBuildCellRootPath(), getProjectFilesystem(), dir)));",
                "+    steps.addAll(",
                "+        MakeCleanDirectoryStep.of(",
                "+            BuildCellRelativePath.fromCellRelativePath(",
                "+                context.getBuildCellRootPath(), getProjectFilesystem(), symlinkDir)));",
                "+    steps.addAll(",
                "+        MakeCleanDirectoryStep.of(",
                "+            BuildCellRelativePath.fromCellRelativePath(",
                "+                context.getBuildCellRootPath(), getProjectFilesystem(), symlinkPreloadDir)));",
                "+    steps.addAll(",
                "+        MakeCleanDirectoryStep.of(",
                "+            BuildCellRelativePath.fromCellRelativePath(",
                "+                context.getBuildCellRootPath(), getProjectFilesystem(), packagesDir)));",
                "+",
                "+    steps.add(CopyStep.forFile(getProjectFilesystem(), so, dir.resolve(so.getFileName())));",
                "+",
                "+    symlinkLibs(resolver, symlinkDir, steps, solibs);",
                "+    symlinkLibs(resolver, symlinkPreloadDir, steps, preloadLibs);",
                "+",
                "+    ImmutableSet.Builder<String> pkgdirs = ImmutableSet.builder();",
                "+    for (HaskellPackage pkg : prebuiltHaskellPackages) {",
                "+      try {",
                "+        pkgdirs.add(resolver.getRelativePath(pkg.getPackageDb()).toRealPath().toString());",
                "+      } catch (IOException ex) {",
                "+        throw new RuntimeException(ex);",
                "+      }",
                "+    }",
                "+",
                "+    for (HaskellPackage pkg : haskellPackages) {",
                "+      String pkgname = pkg.getInfo().getName();",
                "+      Path pkgdir = packagesDir.resolve(pkgname);",
                "+      steps.addAll(",
                "+          MakeCleanDirectoryStep.of(",
                "+              BuildCellRelativePath.fromCellRelativePath(",
                "+                  context.getBuildCellRootPath(), getProjectFilesystem(), pkgdir)));",
                "+",
                "+      Path pkgDbSrc = resolver.getRelativePath(pkg.getPackageDb());",
                "+      steps.add(",
                "+          CopyStep.forDirectory(",
                "+              getProjectFilesystem(),",
                "+              pkgDbSrc,",
                "+              pkgdir,",
                "+              CopyStep.DirectoryMode.DIRECTORY_AND_CONTENTS));",
                "+",
                "+      ImmutableSet.Builder<Path> artifacts = ImmutableSet.builder();",
                "+      for (SourcePath lib : pkg.getLibraries()) {",
                "+        artifacts.add(resolver.getRelativePath(lib).getParent());",
                "+      }",
                "+",
                "+      // this is required because the .a files above are thin archives,",
                "+      // they merely point to the .o files via a relative path.",
                "+      for (SourcePath obj : pkg.getObjects()) {",
                "+        artifacts.add(resolver.getRelativePath(obj).getParent());",
                "+      }",
                "+",
                "+      for (SourcePath iface : pkg.getInterfaces()) {",
                "+        artifacts.add(resolver.getRelativePath(iface).getParent());",
                "+      }",
                "+",
                "+      for (Path artifact : artifacts.build()) {",
                "+        steps.add(",
                "+            CopyStep.forDirectory(",
                "+                getProjectFilesystem(),",
                "+                artifact,",
                "+                pkgdir,",
                "+                CopyStep.DirectoryMode.DIRECTORY_AND_CONTENTS));",
                "+      }",
                "+",
                "+      pkgdirs.add(\"${DIR}/\" + dir.relativize(pkgdir.resolve(pkgDbSrc.getFileName())));",
                "+    }",
                "+",
                "+    ImmutableSet.Builder<String> exposedPkgs = ImmutableSet.builder();",
                "+    for (HaskellPackage pkg : firstOrderHaskellPackages) {",
                "+      exposedPkgs.add(String.format(\"%s-%s\", pkg.getInfo().getName(), pkg.getInfo().getVersion()));",
                "+    }",
                "+",
                "+    // iserv script",
                "+    Optional<Path> iservScript = Optional.empty();",
                "+",
                "+    if (!preloadLibs.isEmpty()) {",
                "+      iservScript = Optional.of(dir.resolve(\"iserv\"));",
                "+      compilerFlagsBuilder.add(\"-fexternal-interpreter\");",
                "+      steps.add(",
                "+          new AbstractExecutionStep(\"ghci_iserv_wrapper\") {",
                "+            @Override",
                "+            public StepExecutionResult execute(ExecutionContext context)",
                "+                throws IOException, InterruptedException {",
                "+              String template;",
                "+              template = new String(Files.readAllBytes(ghciIservScriptTemplate), Charsets.UTF_8);",
                "+              ST st = new ST(template);",
                "+              ImmutableSet.Builder<String> preloadLibrariesB = ImmutableSet.builder();",
                "+              for (Map.Entry<String, SourcePath> ent : preloadLibs.entrySet()) {",
                "+                preloadLibrariesB.add(",
                "+                    \"${DIR}/\" + dir.relativize(symlinkPreloadDir.resolve(ent.getKey())));",
                "+              }",
                "+              ImmutableSet<String> preloadLibraries = preloadLibrariesB.build();",
                "+              st.add(\"name\", name + \"-iserv\");",
                "+              st.add(\"preload_libs\", Joiner.on(':').join(preloadLibraries));",
                "+              if (enableProfiling) {",
                "+                st.add(\"ghci_iserv_path\", ghciIServProf.toRealPath().toString());",
                "+              } else {",
                "+                st.add(\"ghci_iserv_path\", ghciIServ.toRealPath().toString());",
                "+              }",
                "+              Path actualIserv = dir.resolve(\"iserv\");",
                "+              if (enableProfiling) {",
                "+                actualIserv = dir.resolve(\"iserv-prof\");",
                "+              }",
                "+              return new WriteFileStep(",
                "+                      getProjectFilesystem(),",
                "+                      Preconditions.checkNotNull(st.render()),",
                "+                      actualIserv, /* executable */",
                "+                      true)",
                "+                  .execute(context);",
                "+            }",
                "+          });",
                "+    }",
                "+",
                "+    // .ghci file",
                "+    StringBuilder startGhciContents = new StringBuilder();",
                "+    if (iservScript.isPresent()) {",
                "+      // Need to unset preloaded deps for `iserv`",
                "+      startGhciContents.append(\"System.Environment.unsetEnv \\\"LD_PRELOAD\\\"\\n\");",
                "+    }",
                "+    startGhciContents.append(\":set \");",
                "+    startGhciContents.append(",
                "+        Joiner.on(' ')",
                "+            .join(",
                "+                ImmutableList.<String>builder()",
                "+                    .addAll(",
                "+                        MoreIterables.zipAndConcat(",
                "+                            Iterables.cycle(\"-package\"), exposedPkgs.build()))",
                "+                    .build()));",
                "+",
                "+    if (ghciInit.isPresent()) {",
                "+      try {",
                "+        startGhciContents.append('\\n');",
                "+        List<String> lines =",
                "+            Files.readAllLines(resolver.getRelativePath(ghciInit.get()), StandardCharsets.UTF_8);",
                "+        startGhciContents.append(Joiner.on('\\n').join(lines));",
                "+      } catch (IOException ex) {",
                "+        throw new RuntimeException(ex);",
                "+      }",
                "+    }",
                "+",
                "+    Path startGhci = dir.resolve(\"start.ghci\");",
                "+    steps.add(",
                "+        new WriteFileStep(",
                "+            getProjectFilesystem(),",
                "+            startGhciContents.toString(),",
                "+            startGhci,",
                "+            /* executable */ false));",
                "+",
                "+    // ghciBinDep",
                "+    ImmutableList.Builder<String> srcpaths = ImmutableList.builder();",
                "+    for (SourcePath sp : srcs.getSourcePaths()) {",
                "+      srcpaths.add(resolver.getRelativePath(sp).toString());",
                "+    }",
                "+",
                "+    String ghcPath = null;",
                "+    try {",
                "+      if (ghciBinDep.isPresent()) {",
                "+",
                "+        Path binDir = dir.resolve(name + \".bin\");",
                "+        Path bin = binDir.resolve(\"ghci\");",
                "+        SourcePath sp = ghciBinDep.get();",
                "+",
                "+        steps.addAll(",
                "+            MakeCleanDirectoryStep.of(",
                "+                BuildCellRelativePath.fromCellRelativePath(",
                "+                    context.getBuildCellRootPath(), getProjectFilesystem(), binDir)));",
                "+",
                "+        steps.add(CopyStep.forFile(getProjectFilesystem(), resolver.getRelativePath(sp), bin));",
                "+",
                "+        ghcPath = \"${DIR}/\" + dir.relativize(bin) + \" -B\" + ghciLib.toRealPath();",
                "+      } else {",
                "+        ghcPath = ghciGhc.toRealPath().toString();",
                "+      }",
                "+    } catch (IOException ex) {",
                "+      throw new RuntimeException(ex);",
                "+    }",
                "+",
                "+    String pkgdbs =",
                "+        Joiner.on(' ')",
                "+            .join(",
                "+                ImmutableList.<String>builder()",
                "+                    .addAll(",
                "+                        MoreIterables.zipAndConcat(Iterables.cycle(\"-package-db\"), pkgdirs.build()))",
                "+                    .build());",
                "+    String exposed =",
                "+        Joiner.on(' ')",
                "+            .join(",
                "+                ImmutableList.<String>builder()",
                "+                    .addAll(",
                "+                        MoreIterables.zipAndConcat(",
                "+                            Iterables.cycle(\"-expose-package\"), exposedPkgs.build()))",
                "+                    .build());",
                "+",
                "+    if (enableProfiling) {",
                "+      compilerFlagsBuilder.addAll(HaskellDescriptionUtils.PROF_FLAGS);",
                "+    }",
                "+",
                "+    String ghc = ghcPath;",
                "+    ImmutableMap.Builder<String, String> templateArgs = ImmutableMap.builder();",
                "+    try {",
                "+      templateArgs.put(\"name\", name);",
                "+      templateArgs.put(\"start_ghci\", dir.relativize(startGhci).toString());",
                "+      templateArgs.put(\"exposed_packages\", exposed);",
                "+      templateArgs.put(\"package_dbs\", pkgdbs);",
                "+      templateArgs.put(\"compiler_flags\", Joiner.on(' ').join(compilerFlagsBuilder.build()));",
                "+      templateArgs.put(\"srcs\", Joiner.on(' ').join(srcpaths.build()));",
                "+      templateArgs.put(\"squashed_so\", dir.relativize(dir.resolve(so.getFileName())).toString());",
                "+      templateArgs.put(\"binutils_path\", ghciBinutils.toRealPath().toString());",
                "+      templateArgs.put(\"ghc_path\", ghc);",
                "+      templateArgs.put(\"cxx_path\", ghciCxx.toRealPath().toString());",
                "+      templateArgs.put(\"cc_path\", ghciCc.toRealPath().toString());",
                "+      templateArgs.put(\"cpp_path\", ghciCpp.toRealPath().toString());",
                "+      if (iservScript.isPresent()) {",
                "+        templateArgs.put(\"iserv_path\", dir.relativize(iservScript.get()).toString());",
                "+      }",
                "+    } catch (IOException ex) {",
                "+      throw new RuntimeException(ex);",
                "+    }",
                "+",
                "+    Path script = scriptPath();",
                "+    steps.add(",
                "+        new StringTemplateStep(",
                "+            ghciScriptTemplate, getProjectFilesystem(), script, templateArgs.build()));",
                "+    steps.add(new MakeExecutableStep(getProjectFilesystem(), script));",
                "+",
                "+    buildableContext.recordArtifact(dir);",
                "+",
                "+    return steps.build();",
                "+  }",
                "+",
                "+  private Path scriptPath() {",
                "+    return getOutputDir().resolve(getBuildTarget().getShortName());",
                "+  }",
                "+",
                "+  @Override",
                "+  public Tool getExecutableCommand() {",
                "+    SourcePath p = ExplicitBuildTargetSourcePath.of(getBuildTarget(), scriptPath());",
                "+    return new CommandTool.Builder().addArg(SourcePathArg.of(p)).build();",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellHaddockDescription.java b/src/com/facebook/buck/features/haskell/HaskellHaddockDescription.java",
                "new file mode 100644",
                "index 0000000000..397d4c86d3",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellHaddockDescription.java",
                "@@ -0,0 +1,153 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.graph.AbstractBreadthFirstTraversal;",
                "+import com.facebook.buck.log.Logger;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleCreationContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                "+import com.facebook.buck.rules.CommonDescriptionArg;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.HasDepsQuery;",
                "+import com.facebook.buck.rules.ImplicitDepsInferringDescription;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.query.QueryUtils;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.facebook.buck.versions.VersionPropagator;",
                "+import com.google.common.collect.ImmutableCollection;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import java.util.Optional;",
                "+import org.immutables.value.Value;",
                "+",
                "+public class HaskellHaddockDescription",
                "+    implements Description<HaskellHaddockDescriptionArg>,",
                "+        ImplicitDepsInferringDescription<",
                "+            HaskellHaddockDescription.AbstractHaskellHaddockDescriptionArg>,",
                "+        VersionPropagator<HaskellHaddockDescriptionArg> {",
                "+",
                "+  private static final Logger LOG = Logger.get(HaskellHaddockDescription.class);",
                "+",
                "+  private final ToolchainProvider toolchainProvider;",
                "+",
                "+  public HaskellHaddockDescription(ToolchainProvider toolchainProvider) {",
                "+    this.toolchainProvider = toolchainProvider;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Class<HaskellHaddockDescriptionArg> getConstructorArgType() {",
                "+    return HaskellHaddockDescriptionArg.class;",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuildRule createBuildRule(",
                "+      BuildRuleCreationContext context,",
                "+      BuildTarget baseTarget,",
                "+      BuildRuleParams params,",
                "+      HaskellHaddockDescriptionArg args) {",
                "+    String name = baseTarget.getShortName();",
                "+    LOG.info(\"Creating Haddock \" + name);",
                "+",
                "+    BuildRuleResolver resolver = context.getBuildRuleResolver();",
                "+    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(resolver);",
                "+    HaskellPlatform platform = getPlatform(baseTarget, args);",
                "+    Iterable<BuildRule> deps = resolver.getAllRules(args.getDeps());",
                "+",
                "+    // Collect all Haskell deps",
                "+    ImmutableSet.Builder<HaskellHaddockInput> haddockInputs = ImmutableSet.builder();",
                "+    // Traverse all deps to pull packages + locations",
                "+    new AbstractBreadthFirstTraversal<BuildRule>(deps) {",
                "+      @Override",
                "+      public Iterable<BuildRule> visit(BuildRule rule) {",
                "+        ImmutableSet.Builder<BuildRule> traverse = ImmutableSet.builder();",
                "+        if (rule instanceof HaskellCompileDep) {",
                "+          HaskellCompileDep haskellCompileDep = (HaskellCompileDep) rule;",
                "+          haddockInputs.add(haskellCompileDep.getHaddockInput(platform));",
                "+",
                "+          traverse.addAll(haskellCompileDep.getCompileDeps(platform));",
                "+        }",
                "+        return traverse.build();",
                "+      }",
                "+    }.start();",
                "+",
                "+    return resolver.addToIndex(",
                "+        HaskellHaddockRule.from(",
                "+            baseTarget,",
                "+            context.getProjectFilesystem(),",
                "+            params,",
                "+            ruleFinder,",
                "+            platform.getHaddock().resolve(resolver),",
                "+            args.getHaddockFlags(),",
                "+            haddockInputs.build()));",
                "+  }",
                "+",
                "+  // Return the C/C++ platform to build against.",
                "+  private HaskellPlatform getPlatform(",
                "+      BuildTarget target, AbstractHaskellHaddockDescriptionArg arg) {",
                "+    HaskellPlatformsProvider haskellPlatformsProvider =",
                "+        toolchainProvider.getByName(",
                "+            HaskellPlatformsProvider.DEFAULT_NAME, HaskellPlatformsProvider.class);",
                "+    FlavorDomain<HaskellPlatform> platforms = haskellPlatformsProvider.getHaskellPlatforms();",
                "+",
                "+    Optional<HaskellPlatform> flavorPlatform = platforms.getValue(target);",
                "+    if (flavorPlatform.isPresent()) {",
                "+      return flavorPlatform.get();",
                "+    }",
                "+",
                "+    if (arg.getPlatform().isPresent()) {",
                "+      return platforms.getValue(arg.getPlatform().get());",
                "+    }",
                "+",
                "+    return haskellPlatformsProvider.getDefaultHaskellPlatform();",
                "+  }",
                "+",
                "+  @Override",
                "+  public void findDepsForTargetFromConstructorArgs(",
                "+      BuildTarget buildTarget,",
                "+      CellPathResolver cellRoots,",
                "+      AbstractHaskellHaddockDescriptionArg constructorArg,",
                "+      ImmutableCollection.Builder<BuildTarget> extraDepsBuilder,",
                "+      ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "+",
                "+    HaskellDescriptionUtils.getParseTimeDeps(",
                "+        ImmutableList.of(getPlatform(buildTarget, constructorArg)), targetGraphOnlyDepsBuilder);",
                "+",
                "+    constructorArg",
                "+        .getDepsQuery()",
                "+        .ifPresent(",
                "+            depsQuery ->",
                "+                QueryUtils.extractParseTimeTargets(buildTarget, cellRoots, depsQuery)",
                "+                    .forEach(targetGraphOnlyDepsBuilder::add));",
                "+  }",
                "+",
                "+  @BuckStyleImmutable",
                "+  @Value.Immutable(copy = true)",
                "+  interface AbstractHaskellHaddockDescriptionArg extends CommonDescriptionArg, HasDepsQuery {",
                "+    Optional<Flavor> getPlatform();",
                "+",
                "+    @Value.Default",
                "+    default ImmutableList<String> getHaddockFlags() {",
                "+      return ImmutableList.of();",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellHaddockLibRule.java b/src/com/facebook/buck/features/haskell/HaskellHaddockLibRule.java",
                "new file mode 100644",
                "index 0000000000..0d0e2403fa",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellHaddockLibRule.java",
                "@@ -0,0 +1,381 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.CxxDescriptionEnhancer;",
                "+import com.facebook.buck.cxx.CxxToolFlags;",
                "+import com.facebook.buck.cxx.PreprocessorFlags;",
                "+import com.facebook.buck.cxx.toolchain.PathShortener;",
                "+import com.facebook.buck.cxx.toolchain.Preprocessor;",
                "+import com.facebook.buck.io.BuildCellRelativePath;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.log.Logger;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.rules.AbstractBuildRuleWithDeclaredAndExtraDeps;",
                "+import com.facebook.buck.rules.AddToRuleKey;",
                "+import com.facebook.buck.rules.BuildContext;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildableContext;",
                "+import com.facebook.buck.rules.BuildableSupport;",
                "+import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.rules.args.Arg;",
                "+import com.facebook.buck.shell.ShellStep;",
                "+import com.facebook.buck.step.ExecutionContext;",
                "+import com.facebook.buck.step.Step;",
                "+import com.facebook.buck.step.fs.MakeCleanDirectoryStep;",
                "+import com.facebook.buck.util.MoreIterables;",
                "+import com.facebook.buck.util.MoreSuppliers;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.facebook.buck.util.Verbosity;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import com.google.common.collect.Iterables;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                "+import java.util.Optional;",
                "+import java.util.function.Supplier;",
                "+",
                "+public class HaskellHaddockLibRule extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "+",
                "+  private static final Logger LOG = Logger.get(HaskellHaddockLibRule.class);",
                "+",
                "+  @AddToRuleKey private final Tool haddockTool;",
                "+",
                "+  @AddToRuleKey private final ImmutableList<String> haddockFlags;",
                "+",
                "+  @AddToRuleKey ImmutableList<String> compilerFlags;",
                "+",
                "+  @AddToRuleKey ImmutableList<String> linkerFlags;",
                "+",
                "+  @AddToRuleKey private final PreprocessorFlags ppFlags;",
                "+",
                "+  @AddToRuleKey HaskellSources srcs;",
                "+",
                "+  @AddToRuleKey private final Preprocessor preprocessor;",
                "+",
                "+  @AddToRuleKey private final ImmutableSet<SourcePath> interfaces;",
                "+",
                "+  @AddToRuleKey HaskellPackageInfo packageInfo;",
                "+  private HaskellPlatform platform;",
                "+",
                "+  @AddToRuleKey final ImmutableSortedMap<String, HaskellPackage> packages;",
                "+  @AddToRuleKey final ImmutableSortedMap<String, HaskellPackage> exposedPackages;",
                "+",
                "+  private HaskellHaddockLibRule(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams buildRuleParams,",
                "+      HaskellSources srcs,",
                "+      Tool haddockTool,",
                "+      ImmutableList<String> haddockFlags,",
                "+      ImmutableList<String> compilerFlags,",
                "+      ImmutableList<String> linkerFlags,",
                "+      ImmutableSet<SourcePath> interfaces,",
                "+      ImmutableSortedMap<String, HaskellPackage> packages,",
                "+      ImmutableSortedMap<String, HaskellPackage> exposedPackages,",
                "+      HaskellPackageInfo packageInfo,",
                "+      HaskellPlatform platform,",
                "+      Preprocessor preprocessor,",
                "+      PreprocessorFlags ppFlags) {",
                "+    super(buildTarget, projectFilesystem, buildRuleParams);",
                "+    this.srcs = srcs;",
                "+    this.haddockTool = haddockTool;",
                "+    this.haddockFlags = haddockFlags;",
                "+    this.compilerFlags = compilerFlags;",
                "+    this.linkerFlags = linkerFlags;",
                "+    this.interfaces = interfaces;",
                "+    this.packages = packages;",
                "+    this.exposedPackages = exposedPackages;",
                "+    this.packageInfo = packageInfo;",
                "+    this.platform = platform;",
                "+    this.preprocessor = preprocessor;",
                "+    this.ppFlags = ppFlags;",
                "+  }",
                "+",
                "+  public static HaskellHaddockLibRule from(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams buildRuleParams,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      HaskellSources sources,",
                "+      Tool haddockTool,",
                "+      ImmutableList<String> haddockFlags,",
                "+      ImmutableList<String> compilerFlags,",
                "+      ImmutableList<String> linkerFlags,",
                "+      ImmutableSet<SourcePath> interfaces,",
                "+      ImmutableSortedMap<String, HaskellPackage> packages,",
                "+      ImmutableSortedMap<String, HaskellPackage> exposedPackages,",
                "+      HaskellPackageInfo packageInfo,",
                "+      HaskellPlatform platform,",
                "+      Preprocessor preprocessor,",
                "+      PreprocessorFlags ppFlags) {",
                "+",
                "+    ImmutableList.Builder<BuildRule> pkgDeps = ImmutableList.builder();",
                "+",
                "+    for (HaskellPackage pkg : packages.values()) {",
                "+      pkgDeps.addAll(pkg.getDeps(ruleFinder).iterator());",
                "+    }",
                "+    for (HaskellPackage pkg : exposedPackages.values()) {",
                "+      pkgDeps.addAll(pkg.getDeps(ruleFinder).iterator());",
                "+    }",
                "+",
                "+    Supplier<ImmutableSortedSet<BuildRule>> declaredDeps =",
                "+        MoreSuppliers.memoize(",
                "+            () ->",
                "+                ImmutableSortedSet.<BuildRule>naturalOrder()",
                "+                    .addAll(BuildableSupport.getDepsCollection(haddockTool, ruleFinder))",
                "+                    .addAll(sources.getDeps(ruleFinder))",
                "+                    .addAll(ruleFinder.filterBuildRuleInputs(interfaces))",
                "+                    .addAll(pkgDeps.build())",
                "+                    .addAll(ppFlags.getDeps(ruleFinder))",
                "+                    .build());",
                "+    return new HaskellHaddockLibRule(",
                "+        buildTarget,",
                "+        projectFilesystem,",
                "+        buildRuleParams.withDeclaredDeps(declaredDeps).withoutExtraDeps(),",
                "+        sources,",
                "+        haddockTool,",
                "+        haddockFlags,",
                "+        compilerFlags,",
                "+        linkerFlags,",
                "+        interfaces,",
                "+        packages,",
                "+        exposedPackages,",
                "+        packageInfo,",
                "+        platform,",
                "+        preprocessor,",
                "+        ppFlags);",
                "+  }",
                "+",
                "+  private Path getObjectDir() {",
                "+    return getOutputDir().resolve(\"objects\");",
                "+  }",
                "+",
                "+  private Path getInterfaceDir() {",
                "+    return getOutputDir().resolve(\"interfaces\");",
                "+  }",
                "+",
                "+  /** @return the path where the compiler places generated FFI stub files. */",
                "+  private Path getStubDir() {",
                "+    return getOutputDir().resolve(\"stubs\");",
                "+  }",
                "+",
                "+  private Path getInterface() {",
                "+    String name = getBuildTarget().getShortName();",
                "+    return getOutputDir().resolve(name + \"-haddock-interface\");",
                "+  }",
                "+",
                "+  private Path getOutputDir() {",
                "+    Path p = BuildTargets.getGenPath(getProjectFilesystem(), getBuildTarget(), \"%s\");",
                "+    // Haddock doesn't like commas in its file-paths for --read-interface",
                "+    // so replace commas with dashes",
                "+    return Paths.get(p.toString().replaceAll(\",\", \"-\"));",
                "+  }",
                "+",
                "+  public ImmutableSet<SourcePath> getInterfaces() {",
                "+    SourcePath sp = ExplicitBuildTargetSourcePath.of(getBuildTarget(), getInterface());",
                "+    return ImmutableSet.of(sp);",
                "+  }",
                "+",
                "+  public ImmutableSet<SourcePath> getOutputDirs() {",
                "+    return ImmutableSet.of(",
                "+        ExplicitBuildTargetSourcePath.of(",
                "+            getBuildTarget(), getOutputDir().resolve(Type.HTML.toString())),",
                "+        ExplicitBuildTargetSourcePath.of(",
                "+            getBuildTarget(), getOutputDir().resolve(Type.HOOGLE.toString())));",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath getSourcePathToOutput() {",
                "+    return ExplicitBuildTargetSourcePath.of(getBuildTarget(), getOutputDir());",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableList<Step> getBuildSteps(",
                "+      BuildContext context, BuildableContext buildableContext) {",
                "+    String name = getBuildTarget().getShortName();",
                "+    Path dir = getOutputDir();",
                "+",
                "+    LOG.verbose(name);",
                "+",
                "+    ImmutableList.Builder<Step> steps = ImmutableList.builder();",
                "+",
                "+    steps.addAll(",
                "+        MakeCleanDirectoryStep.of(",
                "+            BuildCellRelativePath.fromCellRelativePath(",
                "+                context.getBuildCellRootPath(), getProjectFilesystem(), dir)));",
                "+    steps.add(",
                "+        new HaddockStep(",
                "+            getBuildTarget(), getProjectFilesystem().getRootPath(), context, Type.HTML));",
                "+    steps.add(",
                "+        new HaddockStep(",
                "+            getBuildTarget(), getProjectFilesystem().getRootPath(), context, Type.HOOGLE));",
                "+",
                "+    buildableContext.recordArtifact(dir);",
                "+    return steps.build();",
                "+  }",
                "+",
                "+  private Iterable<String> getPreprocessorFlags(SourcePathResolver resolver) {",
                "+    CxxToolFlags cxxToolFlags =",
                "+        ppFlags.toToolFlags(",
                "+            resolver,",
                "+            PathShortener.identity(),",
                "+            CxxDescriptionEnhancer.frameworkPathToSearchPath(platform.getCxxPlatform(), resolver),",
                "+            preprocessor,",
                "+            /* pch */ Optional.empty());",
                "+    return MoreIterables.zipAndConcat(",
                "+        Iterables.cycle(\"-optP\"), Arg.stringify(cxxToolFlags.getAllFlags(), resolver));",
                "+  }",
                "+",
                "+  private class HaddockStep extends ShellStep {",
                "+",
                "+    private BuildContext buildContext;",
                "+    private Type type;",
                "+",
                "+    public HaddockStep(",
                "+        BuildTarget buildTarget, Path rootPath, BuildContext buildContext, Type type) {",
                "+      super(Optional.of(buildTarget), rootPath);",
                "+      this.buildContext = buildContext;",
                "+      this.type = type;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ImmutableMap<String, String> getEnvironmentVariables(ExecutionContext context) {",
                "+      return ImmutableMap.<String, String>builder()",
                "+          .putAll(super.getEnvironmentVariables(context))",
                "+          .putAll(haddockTool.getEnvironment(buildContext.getSourcePathResolver()))",
                "+          .build();",
                "+    }",
                "+",
                "+    protected ImmutableList<String> getTypeFlags() {",
                "+      switch (type) {",
                "+        case HTML:",
                "+          return ImmutableList.<String>builder()",
                "+              .add(\"--html\")",
                "+              .add(\"--use-contents\", \"index.html\")",
                "+              .add(\"--use-index\", \"doc-index.html\")",
                "+              .build();",
                "+        case HOOGLE:",
                "+          return ImmutableList.<String>builder().add(\"--hoogle\").build();",
                "+        default:",
                "+          return ImmutableList.of();",
                "+      }",
                "+    }",
                "+",
                "+    protected ImmutableList<String> getOutputDirFlags() {",
                "+      ImmutableList.Builder<String> flags = ImmutableList.builder();",
                "+      if (type == Type.HTML) {",
                "+        flags.add(\"--dump-interface\", getInterface().toString());",
                "+      }",
                "+      flags.add(",
                "+          \"--odir\",",
                "+          getProjectFilesystem().resolve(getOutputDir()).resolve(type.toString()).toString());",
                "+      return flags.build();",
                "+    }",
                "+",
                "+    @Override",
                "+    protected boolean shouldPrintStderr(Verbosity verbosity) {",
                "+      return !verbosity.isSilent();",
                "+    }",
                "+",
                "+    @Override",
                "+    protected ImmutableList<String> getShellCommandInternal(ExecutionContext context) {",
                "+      SourcePathResolver resolver = buildContext.getSourcePathResolver();",
                "+",
                "+      ImmutableList.Builder<String> cmdArgs = ImmutableList.builder();",
                "+",
                "+      // Haddock doesn't like RTS options, so strip them out.",
                "+      boolean isRTS = false;",
                "+      for (String s : compilerFlags) {",
                "+        if (s.equals(\"+RTS\")) {",
                "+          isRTS = true;",
                "+          continue;",
                "+        } else if (s.equals(\"-RTS\")) {",
                "+          isRTS = false;",
                "+          continue;",
                "+        }",
                "+        if (isRTS) {",
                "+          continue;",
                "+        }",
                "+        cmdArgs.add(s);",
                "+      }",
                "+",
                "+      ImmutableSet.Builder<String> dbBuilder = ImmutableSet.builder();",
                "+      ImmutableSet.Builder<String> exposeBuilder = ImmutableSet.builder();",
                "+      for (HaskellPackage pkg : packages.values()) {",
                "+        dbBuilder.add(resolver.getRelativePath(pkg.getPackageDb()).toString());",
                "+      }",
                "+      for (HaskellPackage pkg : exposedPackages.values()) {",
                "+        dbBuilder.add(resolver.getRelativePath(pkg.getPackageDb()).toString());",
                "+        exposeBuilder.add(",
                "+            String.format(\"%s-%s\", pkg.getInfo().getName(), pkg.getInfo().getVersion()));",
                "+      }",
                "+      cmdArgs.addAll(MoreIterables.zipAndConcat(Iterables.cycle(\"-package-db\"), dbBuilder.build()));",
                "+      cmdArgs.addAll(",
                "+          MoreIterables.zipAndConcat(Iterables.cycle(\"-expose-package\"), exposeBuilder.build()));",
                "+      cmdArgs.addAll(linkerFlags);",
                "+      cmdArgs.addAll(getPreprocessorFlags(resolver));",
                "+      // Tell GHC where to place build files for TemplateHaskell",
                "+      cmdArgs.add(\"-odir\", getProjectFilesystem().resolve(getObjectDir()).toString());",
                "+      cmdArgs.add(\"-hidir\", getProjectFilesystem().resolve(getInterfaceDir()).toString());",
                "+      cmdArgs.add(\"-stubdir\", getProjectFilesystem().resolve(getStubDir()).toString());",
                "+",
                "+      return ImmutableList.<String>builder()",
                "+          .addAll(haddockTool.getCommandPrefix(resolver))",
                "+          .addAll(getTypeFlags())",
                "+          .add(\"--no-tmp-comp-dir\")",
                "+          .add(\"--no-warnings\")",
                "+          .addAll(",
                "+              MoreIterables.zipAndConcat(",
                "+                  Iterables.cycle(\"--read-interface\"),",
                "+                  RichStream.from(interfaces)",
                "+                      .map(sp -> resolver.getRelativePath(sp).toString())",
                "+                      .toImmutableList()))",
                "+          .addAll(haddockFlags)",
                "+          .addAll(MoreIterables.zipAndConcat(Iterables.cycle(\"--optghc\"), cmdArgs.build()))",
                "+          .add(\"--package-name\", packageInfo.getName())",
                "+          .add(\"--package-version\", packageInfo.getVersion() + \".0\")",
                "+          .addAll(",
                "+              srcs.getSourcePaths()",
                "+                  .stream()",
                "+                  .map(resolver::getRelativePath)",
                "+                  .map(Object::toString)",
                "+                  .iterator())",
                "+          .addAll(getOutputDirFlags())",
                "+          .build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getShortName() {",
                "+      return \"haddock-lib-build\";",
                "+    }",
                "+  }",
                "+",
                "+  public enum Type {",
                "+    HTML,",
                "+    HOOGLE",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellHaddockRule.java b/src/com/facebook/buck/features/haskell/HaskellHaddockRule.java",
                "new file mode 100644",
                "index 0000000000..0cb3928e53",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellHaddockRule.java",
                "@@ -0,0 +1,192 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.io.BuildCellRelativePath;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.log.Logger;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.rules.AbstractBuildRuleWithDeclaredAndExtraDeps;",
                "+import com.facebook.buck.rules.AddToRuleKey;",
                "+import com.facebook.buck.rules.BuildContext;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildableContext;",
                "+import com.facebook.buck.rules.BuildableSupport;",
                "+import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.shell.ShellStep;",
                "+import com.facebook.buck.step.ExecutionContext;",
                "+import com.facebook.buck.step.Step;",
                "+import com.facebook.buck.step.fs.CopyStep;",
                "+import com.facebook.buck.step.fs.MakeCleanDirectoryStep;",
                "+import com.facebook.buck.util.MoreIterables;",
                "+import com.facebook.buck.util.MoreSuppliers;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.facebook.buck.util.Verbosity;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import com.google.common.collect.Iterables;",
                "+import java.nio.file.Path;",
                "+import java.util.Optional;",
                "+import java.util.function.Supplier;",
                "+",
                "+public class HaskellHaddockRule extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "+",
                "+  private static final Logger LOG = Logger.get(HaskellHaddockRule.class);",
                "+",
                "+  @AddToRuleKey private final Tool haddockTool;",
                "+",
                "+  @AddToRuleKey private final ImmutableList<String> flags;",
                "+",
                "+  @AddToRuleKey private final ImmutableSet<SourcePath> interfaces;",
                "+  @AddToRuleKey private final ImmutableSet<SourcePath> outputDirs;",
                "+",
                "+  private HaskellHaddockRule(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams buildRuleParams,",
                "+      Tool haddockTool,",
                "+      ImmutableList<String> flags,",
                "+      ImmutableSet<SourcePath> interfaces,",
                "+      ImmutableSet<SourcePath> outputDirs) {",
                "+    super(buildTarget, projectFilesystem, buildRuleParams);",
                "+    this.haddockTool = haddockTool;",
                "+    this.flags = flags;",
                "+    this.interfaces = interfaces;",
                "+    this.outputDirs = outputDirs;",
                "+  }",
                "+",
                "+  public static HaskellHaddockRule from(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams buildRuleParams,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      Tool haddockTool,",
                "+      ImmutableList<String> flags,",
                "+      ImmutableSet<HaskellHaddockInput> inputs) {",
                "+    ImmutableSet.Builder<SourcePath> ifacesBuilder = ImmutableSet.builder();",
                "+    ImmutableSet.Builder<SourcePath> outDirsBuilder = ImmutableSet.builder();",
                "+    for (HaskellHaddockInput i : inputs) {",
                "+      ifacesBuilder.addAll(i.getInterfaces());",
                "+      outDirsBuilder.addAll(i.getOutputDirs());",
                "+    }",
                "+    ImmutableSet<SourcePath> ifaces = ifacesBuilder.build();",
                "+    ImmutableSet<SourcePath> outDirs = outDirsBuilder.build();",
                "+",
                "+    Supplier<ImmutableSortedSet<BuildRule>> declaredDeps =",
                "+        MoreSuppliers.memoize(",
                "+            () ->",
                "+                ImmutableSortedSet.<BuildRule>naturalOrder()",
                "+                    .addAll(BuildableSupport.getDepsCollection(haddockTool, ruleFinder))",
                "+                    .addAll(ruleFinder.filterBuildRuleInputs(ifaces))",
                "+                    .addAll(ruleFinder.filterBuildRuleInputs(outDirs))",
                "+                    .build());",
                "+    return new HaskellHaddockRule(",
                "+        buildTarget,",
                "+        projectFilesystem,",
                "+        buildRuleParams.withDeclaredDeps(declaredDeps).withoutExtraDeps(),",
                "+        haddockTool,",
                "+        flags,",
                "+        ifaces,",
                "+        outDirs);",
                "+  }",
                "+",
                "+  private Path getOutputDir() {",
                "+    return BuildTargets.getGenPath(getProjectFilesystem(), getBuildTarget(), \"%s\");",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath getSourcePathToOutput() {",
                "+    return ExplicitBuildTargetSourcePath.of(getBuildTarget(), getOutputDir());",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableList<Step> getBuildSteps(",
                "+      BuildContext context, BuildableContext buildableContext) {",
                "+",
                "+    SourcePathResolver resolver = context.getSourcePathResolver();",
                "+    String name = getBuildTarget().getShortName();",
                "+    Path dir = getOutputDir();",
                "+",
                "+    LOG.info(name);",
                "+",
                "+    ImmutableList.Builder<Step> steps = ImmutableList.builder();",
                "+",
                "+    steps.addAll(",
                "+        MakeCleanDirectoryStep.of(",
                "+            BuildCellRelativePath.fromCellRelativePath(",
                "+                context.getBuildCellRootPath(), getProjectFilesystem(), dir)));",
                "+    steps.add(new HaddockStep(getBuildTarget(), getProjectFilesystem().getRootPath(), context));",
                "+",
                "+    // Copy the generated data from dependencies into our output directory",
                "+    for (SourcePath odir : outputDirs) {",
                "+      steps.add(",
                "+          CopyStep.forDirectory(",
                "+              getProjectFilesystem(),",
                "+              resolver.getRelativePath(odir),",
                "+              dir,",
                "+              CopyStep.DirectoryMode.DIRECTORY_AND_CONTENTS));",
                "+    }",
                "+",
                "+    buildableContext.recordArtifact(dir);",
                "+    return steps.build();",
                "+  }",
                "+",
                "+  private class HaddockStep extends ShellStep {",
                "+",
                "+    private BuildContext buildContext;",
                "+",
                "+    public HaddockStep(BuildTarget buildTarget, Path rootPath, BuildContext buildContext) {",
                "+      super(Optional.of(buildTarget), rootPath);",
                "+      this.buildContext = buildContext;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected boolean shouldPrintStderr(Verbosity verbosity) {",
                "+      return !verbosity.isSilent();",
                "+    }",
                "+",
                "+    @Override",
                "+    protected ImmutableList<String> getShellCommandInternal(ExecutionContext context) {",
                "+      SourcePathResolver resolver = buildContext.getSourcePathResolver();",
                "+      return ImmutableList.<String>builder()",
                "+          .addAll(haddockTool.getCommandPrefix(resolver))",
                "+          .addAll(flags)",
                "+          .add(\"--gen-index\")",
                "+          .add(\"--gen-contents\")",
                "+          .addAll(",
                "+              MoreIterables.zipAndConcat(",
                "+                  Iterables.cycle(\"--read-interface\"),",
                "+                  RichStream.from(interfaces)",
                "+                      .map(sp -> resolver.getAbsolutePath(sp).toString())",
                "+                      .toImmutableList()))",
                "+          .add(\"-o\", getOutputDir().resolve(\"HTML\").toString())",
                "+          .build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getShortName() {",
                "+      return \"haddock-build\";",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellLibrary.java b/src/com/facebook/buck/features/haskell/HaskellLibrary.java",
                "new file mode 100644",
                "index 0000000000..77879c3bfc",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellLibrary.java",
                "@@ -0,0 +1,33 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.CxxPreprocessorDep;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.NoopBuildRuleWithDeclaredAndExtraDeps;",
                "+",
                "+public abstract class HaskellLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "+    implements HaskellCompileDep, NativeLinkable, CxxPreprocessorDep {",
                "+",
                "+  public HaskellLibrary(",
                "+      BuildTarget buildTarget, ProjectFilesystem projectFilesystem, BuildRuleParams params) {",
                "+    super(buildTarget, projectFilesystem, params);",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellLibraryDescription.java b/src/com/facebook/buck/features/haskell/HaskellLibraryDescription.java",
                "new file mode 100644",
                "index 0000000000..7b64f432f6",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellLibraryDescription.java",
                "@@ -0,0 +1,1073 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.Archive;",
                "+import com.facebook.buck.cxx.CxxDeps;",
                "+import com.facebook.buck.cxx.CxxDescriptionEnhancer;",
                "+import com.facebook.buck.cxx.CxxHeadersDir;",
                "+import com.facebook.buck.cxx.CxxPreprocessables;",
                "+import com.facebook.buck.cxx.CxxPreprocessorDep;",
                "+import com.facebook.buck.cxx.CxxPreprocessorInput;",
                "+import com.facebook.buck.cxx.CxxSource;",
                "+import com.facebook.buck.cxx.CxxSourceTypes;",
                "+import com.facebook.buck.cxx.CxxToolFlags;",
                "+import com.facebook.buck.cxx.ExplicitCxxToolFlags;",
                "+import com.facebook.buck.cxx.PreprocessorFlags;",
                "+import com.facebook.buck.cxx.TransitiveCxxPreprocessorInputCache;",
                "+import com.facebook.buck.cxx.toolchain.ArchiveContents;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.PicType;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                "+import com.facebook.buck.graph.AbstractBreadthFirstTraversal;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.FlavorConvertible;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.model.Flavored;",
                "+import com.facebook.buck.model.InternalFlavor;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleCreationContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.CellPathResolver;",
                "+import com.facebook.buck.rules.CommonDescriptionArg;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.HasDeclaredDeps;",
                "+import com.facebook.buck.rules.ImplicitDepsInferringDescription;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.args.Arg;",
                "+import com.facebook.buck.rules.args.SourcePathArg;",
                "+import com.facebook.buck.rules.args.StringArg;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.rules.macros.StringWithMacros;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.facebook.buck.versions.VersionPropagator;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.collect.ImmutableCollection;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import com.google.common.collect.Sets;",
                "+import java.io.File;",
                "+import java.nio.file.Path;",
                "+import java.util.Collection;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                "+import org.immutables.value.Value;",
                "+",
                "+public class HaskellLibraryDescription",
                "+    implements Description<HaskellLibraryDescriptionArg>,",
                "+        ImplicitDepsInferringDescription<",
                "+            HaskellLibraryDescription.AbstractHaskellLibraryDescriptionArg>,",
                "+        Flavored,",
                "+        VersionPropagator<HaskellLibraryDescriptionArg> {",
                "+",
                "+  private static final FlavorDomain<Type> LIBRARY_TYPE =",
                "+      FlavorDomain.from(\"Haskell Library Type\", Type.class);",
                "+",
                "+  private final ToolchainProvider toolchainProvider;",
                "+  private final CxxBuckConfig cxxBuckConfig;",
                "+",
                "+  public HaskellLibraryDescription(",
                "+      ToolchainProvider toolchainProvider, CxxBuckConfig cxxBuckConfig) {",
                "+    this.toolchainProvider = toolchainProvider;",
                "+    this.cxxBuckConfig = cxxBuckConfig;",
                "+  }",
                "+",
                "+  @Override",
                "+  public Class<HaskellLibraryDescriptionArg> getConstructorArgType() {",
                "+    return HaskellLibraryDescriptionArg.class;",
                "+  }",
                "+",
                "+  private BuildTarget getBaseBuildTarget(",
                "+      HaskellPlatformsProvider haskellPlatformsProvider, BuildTarget target) {",
                "+    return target.withoutFlavors(",
                "+        Sets.union(",
                "+            Type.FLAVOR_VALUES, haskellPlatformsProvider.getHaskellPlatforms().getFlavors()));",
                "+  }",
                "+",
                "+  /** @return the package identifier to use for the library with the given target. */",
                "+  private HaskellPackageInfo getPackageInfo(HaskellPlatform platform, BuildTarget target) {",
                "+    String name = String.format(\"%s-%s\", target.getBaseName(), target.getShortName());",
                "+    name = name.replace(File.separatorChar, '-');",
                "+    name = name.replace('_', '-');",
                "+    name = name.replaceFirst(\"^-*\", \"\");",
                "+",
                "+    Optional<String> packageNamePrefix = platform.getPackageNamePrefix();",
                "+    if (packageNamePrefix.isPresent()) {",
                "+      name = packageNamePrefix.get() + \"-\" + name;",
                "+    }",
                "+",
                "+    return HaskellPackageInfo.of(name, \"1.0.0\", name);",
                "+  }",
                "+",
                "+  private HaskellCompileRule requireCompileRule(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams params,",
                "+      BuildRuleResolver resolver,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      HaskellPlatform platform,",
                "+      HaskellLibraryDescriptionArg args,",
                "+      ImmutableSet<BuildRule> deps,",
                "+      Linker.LinkableDepType depType,",
                "+      boolean hsProfile) {",
                "+    return HaskellDescriptionUtils.requireCompileRule(",
                "+        buildTarget,",
                "+        projectFilesystem,",
                "+        params,",
                "+        resolver,",
                "+        ruleFinder,",
                "+        deps,",
                "+        platform,",
                "+        depType,",
                "+        hsProfile,",
                "+        Optional.empty(),",
                "+        Optional.of(getPackageInfo(platform, buildTarget)),",
                "+        args.getCompilerFlags(),",
                "+        HaskellSources.from(",
                "+            buildTarget, resolver, pathResolver, ruleFinder, platform, \"srcs\", args.getSrcs()));",
                "+  }",
                "+",
                "+  private Archive createStaticLibrary(",
                "+      BuildTarget target,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams baseParams,",
                "+      BuildRuleResolver resolver,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      HaskellPlatform platform,",
                "+      HaskellLibraryDescriptionArg args,",
                "+      ImmutableSet<BuildRule> deps,",
                "+      Linker.LinkableDepType depType,",
                "+      boolean hsProfile) {",
                "+    HaskellCompileRule compileRule =",
                "+        requireCompileRule(",
                "+            target,",
                "+            projectFilesystem,",
                "+            baseParams,",
                "+            resolver,",
                "+            pathResolver,",
                "+            ruleFinder,",
                "+            platform,",
                "+            args,",
                "+            deps,",
                "+            depType,",
                "+            hsProfile);",
                "+    return Archive.from(",
                "+        target,",
                "+        projectFilesystem,",
                "+        resolver,",
                "+        ruleFinder,",
                "+        platform.getCxxPlatform(),",
                "+        cxxBuckConfig.getArchiveContents(),",
                "+        CxxDescriptionEnhancer.getStaticLibraryPath(",
                "+            projectFilesystem,",
                "+            target.withoutFlavors(HaskellDescriptionUtils.PROF),",
                "+            platform.getFlavor(),",
                "+            depType == Linker.LinkableDepType.STATIC ? PicType.PDC : PicType.PIC,",
                "+            Optional.empty(),",
                "+            platform.getCxxPlatform().getStaticLibraryExtension(),",
                "+            hsProfile ? \"_p\" : \"\",",
                "+            cxxBuckConfig.isUniqueLibraryNameEnabled()),",
                "+        compileRule.getObjects(),",
                "+        // TODO(#20466393): Currently, GHC produces nono-deterministically sized object files.",
                "+        // This means that it's possible to get a thin archive fetched from cache originating from",
                "+        // one build and the associated object files fetched from cache originating from another, in",
                "+        // which the sizes listed in the archive differ from the objects on disk, causing the GHC",
                "+        // linker to fail. Technically, since `HaskellCompileRule` is producing non-deterministic",
                "+        // outputs, we should mark that as uncacheable.  However, as that would have a significant",
                "+        // affect on build efficiency, and since this issue appears to only manifest by a size",
                "+        // mismatch with what is embedded in thin archives, just disable caching when using thin",
                "+        // archives.",
                "+        /* cacheable */ cxxBuckConfig.getArchiveContents() != ArchiveContents.THIN);",
                "+  }",
                "+",
                "+  private Archive requireStaticLibrary(",
                "+      BuildTarget baseTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams baseParams,",
                "+      BuildRuleResolver resolver,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      HaskellPlatformsProvider haskellPlatformsProvider,",
                "+      HaskellPlatform platform,",
                "+      HaskellLibraryDescriptionArg args,",
                "+      ImmutableSet<BuildRule> deps,",
                "+      Linker.LinkableDepType depType,",
                "+      boolean hsProfile) {",
                "+    Preconditions.checkArgument(",
                "+        Sets.intersection(",
                "+                baseTarget.getFlavors(),",
                "+                Sets.union(",
                "+                    Type.FLAVOR_VALUES,",
                "+                    haskellPlatformsProvider.getHaskellPlatforms().getFlavors()))",
                "+            .isEmpty());",
                "+    BuildTarget target =",
                "+        baseTarget.withAppendedFlavors(",
                "+            depType == Linker.LinkableDepType.STATIC",
                "+                ? Type.STATIC.getFlavor()",
                "+                : Type.STATIC_PIC.getFlavor(),",
                "+            platform.getCxxPlatform().getFlavor());",
                "+",
                "+    if (hsProfile) {",
                "+      target = target.withAppendedFlavors(HaskellDescriptionUtils.PROF);",
                "+    } else {",
                "+      target = target.withoutFlavors(HaskellDescriptionUtils.PROF);",
                "+    }",
                "+",
                "+    return (Archive)",
                "+        resolver.computeIfAbsent(",
                "+            target,",
                "+            target1 ->",
                "+                createStaticLibrary(",
                "+                    target1,",
                "+                    projectFilesystem,",
                "+                    baseParams,",
                "+                    resolver,",
                "+                    pathResolver,",
                "+                    ruleFinder,",
                "+                    platform,",
                "+                    args,",
                "+                    deps,",
                "+                    depType,",
                "+                    hsProfile));",
                "+  }",
                "+",
                "+  private HaskellPackageRule createPackage(",
                "+      BuildTarget target,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams baseParams,",
                "+      BuildRuleResolver resolver,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      HaskellPlatformsProvider haskellPlatformsProvider,",
                "+      HaskellPlatform platform,",
                "+      HaskellLibraryDescriptionArg args,",
                "+      ImmutableSet<BuildRule> deps,",
                "+      Linker.LinkableDepType depType,",
                "+      boolean hsProfile) {",
                "+",
                "+    ImmutableSortedSet<SourcePath> libraries;",
                "+    BuildRule library;",
                "+    switch (depType) {",
                "+      case SHARED:",
                "+        library =",
                "+            requireSharedLibrary(",
                "+                getBaseBuildTarget(haskellPlatformsProvider, target),",
                "+                projectFilesystem,",
                "+                baseParams,",
                "+                resolver,",
                "+                pathResolver,",
                "+                ruleFinder,",
                "+                haskellPlatformsProvider,",
                "+                platform,",
                "+                args,",
                "+                deps,",
                "+                hsProfile);",
                "+        libraries = ImmutableSortedSet.of(library.getSourcePathToOutput());",
                "+        break;",
                "+      case STATIC:",
                "+      case STATIC_PIC:",
                "+        library =",
                "+            requireStaticLibrary(",
                "+                getBaseBuildTarget(haskellPlatformsProvider, target),",
                "+                projectFilesystem,",
                "+                baseParams,",
                "+                resolver,",
                "+                pathResolver,",
                "+                ruleFinder,",
                "+                haskellPlatformsProvider,",
                "+                platform,",
                "+                args,",
                "+                deps,",
                "+                depType,",
                "+                false);",
                "+",
                "+        if (hsProfile) {",
                "+          if (!(Linker.LinkableDepType.STATIC == depType",
                "+              || Linker.LinkableDepType.STATIC_PIC == depType)) {",
                "+            throw new IllegalStateException();",
                "+          }",
                "+",
                "+          BuildRule profiledLibrary =",
                "+              requireStaticLibrary(",
                "+                  getBaseBuildTarget(haskellPlatformsProvider, target),",
                "+                  projectFilesystem,",
                "+                  baseParams,",
                "+                  resolver,",
                "+                  pathResolver,",
                "+                  ruleFinder,",
                "+                  haskellPlatformsProvider,",
                "+                  platform,",
                "+                  args,",
                "+                  deps,",
                "+                  depType,",
                "+                  true);",
                "+",
                "+          libraries =",
                "+              ImmutableSortedSet.of(",
                "+                  library.getSourcePathToOutput(), profiledLibrary.getSourcePathToOutput());",
                "+",
                "+        } else {",
                "+          libraries = ImmutableSortedSet.of(library.getSourcePathToOutput());",
                "+        }",
                "+        break;",
                "+      default:",
                "+        throw new IllegalStateException();",
                "+    }",
                "+",
                "+    ImmutableSortedMap.Builder<String, HaskellPackage> depPackagesBuilder =",
                "+        ImmutableSortedMap.naturalOrder();",
                "+    for (BuildRule rule : deps) {",
                "+      if (rule instanceof HaskellCompileDep) {",
                "+        ImmutableList<HaskellPackage> packages =",
                "+            ((HaskellCompileDep) rule).getCompileInput(platform, depType, hsProfile).getPackages();",
                "+        for (HaskellPackage pkg : packages) {",
                "+          depPackagesBuilder.put(pkg.getInfo().getIdentifier(), pkg);",
                "+        }",
                "+      }",
                "+    }",
                "+",
                "+    ImmutableSortedMap<String, HaskellPackage> depPackages = depPackagesBuilder.build();",
                "+",
                "+    ImmutableSortedSet<SourcePath> interfaces;",
                "+    ImmutableSortedSet<SourcePath> objects;",
                "+    HaskellCompileRule compileRule =",
                "+        requireCompileRule(",
                "+            target,",
                "+            projectFilesystem,",
                "+            baseParams,",
                "+            resolver,",
                "+            pathResolver,",
                "+            ruleFinder,",
                "+            platform,",
                "+            args,",
                "+            deps,",
                "+            depType,",
                "+            false);",
                "+",
                "+    if (hsProfile) {",
                "+      HaskellCompileRule profiledCompileRule =",
                "+          requireCompileRule(",
                "+              target,",
                "+              projectFilesystem,",
                "+              baseParams,",
                "+              resolver,",
                "+              pathResolver,",
                "+              ruleFinder,",
                "+              platform,",
                "+              args,",
                "+              deps,",
                "+              depType,",
                "+              true);",
                "+",
                "+      interfaces =",
                "+          ImmutableSortedSet.of(compileRule.getInterfaces(), profiledCompileRule.getInterfaces());",
                "+      objects =",
                "+          ImmutableSortedSet.of(compileRule.getObjectsDir(), profiledCompileRule.getObjectsDir());",
                "+    } else {",
                "+      interfaces = ImmutableSortedSet.of(compileRule.getInterfaces());",
                "+      objects = ImmutableSortedSet.of(compileRule.getObjectsDir());",
                "+    }",
                "+",
                "+    return HaskellPackageRule.from(",
                "+        target,",
                "+        projectFilesystem,",
                "+        baseParams,",
                "+        ruleFinder,",
                "+        platform.getPackager().resolve(resolver),",
                "+        platform.getHaskellVersion(),",
                "+        depType,",
                "+        getPackageInfo(platform, target),",
                "+        depPackages,",
                "+        compileRule.getModules(),",
                "+        libraries,",
                "+        interfaces,",
                "+        objects);",
                "+  }",
                "+",
                "+  private HaskellPackageRule requirePackage(",
                "+      BuildTarget baseTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams baseParams,",
                "+      BuildRuleResolver resolver,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      HaskellPlatformsProvider haskellPlatformsProvider,",
                "+      HaskellPlatform platform,",
                "+      HaskellLibraryDescriptionArg args,",
                "+      ImmutableSet<BuildRule> deps,",
                "+      Linker.LinkableDepType depType,",
                "+      boolean hsProfile) {",
                "+    Preconditions.checkArgument(",
                "+        Sets.intersection(",
                "+                baseTarget.getFlavors(),",
                "+                Sets.union(",
                "+                    Type.FLAVOR_VALUES,",
                "+                    haskellPlatformsProvider.getHaskellPlatforms().getFlavors()))",
                "+            .isEmpty());",
                "+    BuildTarget target = baseTarget.withAppendedFlavors(platform.getFlavor());",
                "+    switch (depType) {",
                "+      case SHARED:",
                "+        target = target.withAppendedFlavors(Type.PACKAGE_SHARED.getFlavor());",
                "+        break;",
                "+      case STATIC:",
                "+        target = target.withAppendedFlavors(Type.PACKAGE_STATIC.getFlavor());",
                "+        break;",
                "+      case STATIC_PIC:",
                "+        target = target.withAppendedFlavors(Type.PACKAGE_STATIC_PIC.getFlavor());",
                "+        break;",
                "+      default:",
                "+        throw new IllegalStateException();",
                "+    }",
                "+",
                "+    if (hsProfile) {",
                "+      target = target.withAppendedFlavors(HaskellDescriptionUtils.PROF);",
                "+    }",
                "+",
                "+    return (HaskellPackageRule)",
                "+        resolver.computeIfAbsent(",
                "+            target,",
                "+            target1 ->",
                "+                createPackage(",
                "+                    target1,",
                "+                    projectFilesystem,",
                "+                    baseParams,",
                "+                    resolver,",
                "+                    pathResolver,",
                "+                    ruleFinder,",
                "+                    haskellPlatformsProvider,",
                "+                    platform,",
                "+                    args,",
                "+                    deps,",
                "+                    depType,",
                "+                    hsProfile));",
                "+  }",
                "+",
                "+  private HaskellHaddockLibRule requireHaddockLibrary(",
                "+      BuildTarget baseTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams baseParams,",
                "+      BuildRuleResolver resolver,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      HaskellPlatform platform,",
                "+      HaskellLibraryDescriptionArg args) {",
                "+    CxxPlatform cxxPlatform = platform.getCxxPlatform();",
                "+    CxxDeps allDeps =",
                "+        CxxDeps.builder().addDeps(args.getDeps()).addPlatformDeps(args.getPlatformDeps()).build();",
                "+    ImmutableSet<BuildRule> deps = allDeps.get(resolver, cxxPlatform);",
                "+",
                "+    // Collect all Haskell deps",
                "+    ImmutableSet.Builder<SourcePath> haddockInterfaces = ImmutableSet.builder();",
                "+    ImmutableSortedMap.Builder<String, HaskellPackage> packagesBuilder =",
                "+        ImmutableSortedMap.naturalOrder();",
                "+    ImmutableSortedMap.Builder<String, HaskellPackage> exposedPackagesBuilder =",
                "+        ImmutableSortedMap.naturalOrder();",
                "+",
                "+    // Traverse all deps to pull interfaces",
                "+    new AbstractBreadthFirstTraversal<BuildRule>(deps) {",
                "+      @Override",
                "+      public Iterable<BuildRule> visit(BuildRule rule) {",
                "+        ImmutableSet.Builder<BuildRule> traverse = ImmutableSet.builder();",
                "+        if (rule instanceof HaskellCompileDep || rule instanceof PrebuiltHaskellLibrary) {",
                "+          HaskellCompileDep haskellCompileDep = (HaskellCompileDep) rule;",
                "+",
                "+          // Get haddock-interfaces",
                "+          HaskellHaddockInput inp = haskellCompileDep.getHaddockInput(platform);",
                "+          haddockInterfaces.addAll(inp.getInterfaces());",
                "+",
                "+          HaskellCompileInput compileInput =",
                "+              haskellCompileDep.getCompileInput(",
                "+                  platform, Linker.LinkableDepType.STATIC, args.isEnableProfiling());",
                "+          boolean firstOrderDep = deps.contains(rule);",
                "+          for (HaskellPackage pkg : compileInput.getPackages()) {",
                "+            if (firstOrderDep) {",
                "+              exposedPackagesBuilder.put(pkg.getInfo().getIdentifier(), pkg);",
                "+            } else {",
                "+              packagesBuilder.put(pkg.getInfo().getIdentifier(), pkg);",
                "+            }",
                "+          }",
                "+          traverse.addAll(haskellCompileDep.getCompileDeps(platform));",
                "+        }",
                "+        return traverse.build();",
                "+      }",
                "+    }.start();",
                "+",
                "+    Collection<CxxPreprocessorInput> cxxPreprocessorInputs =",
                "+        CxxPreprocessables.getTransitiveCxxPreprocessorInput(cxxPlatform, resolver, deps);",
                "+    ExplicitCxxToolFlags.Builder toolFlagsBuilder = CxxToolFlags.explicitBuilder();",
                "+    PreprocessorFlags.Builder ppFlagsBuilder = PreprocessorFlags.builder();",
                "+    toolFlagsBuilder.setPlatformFlags(",
                "+        StringArg.from(CxxSourceTypes.getPlatformPreprocessFlags(cxxPlatform, CxxSource.Type.C)));",
                "+    for (CxxPreprocessorInput input : cxxPreprocessorInputs) {",
                "+      ppFlagsBuilder.addAllIncludes(input.getIncludes());",
                "+      ppFlagsBuilder.addAllFrameworkPaths(input.getFrameworks());",
                "+      toolFlagsBuilder.addAllRuleFlags(input.getPreprocessorFlags().get(CxxSource.Type.C));",
                "+    }",
                "+    ppFlagsBuilder.setOtherFlags(toolFlagsBuilder.build());",
                "+",
                "+    return resolver.addToIndex(",
                "+        HaskellHaddockLibRule.from(",
                "+            baseTarget.withAppendedFlavors(Type.HADDOCK.getFlavor(), platform.getFlavor()),",
                "+            projectFilesystem,",
                "+            baseParams,",
                "+            ruleFinder,",
                "+            HaskellSources.from(",
                "+                baseTarget, resolver, pathResolver, ruleFinder, platform, \"srcs\", args.getSrcs()),",
                "+            platform.getHaddock().resolve(resolver),",
                "+            args.getHaddockFlags(),",
                "+            args.getCompilerFlags(),",
                "+            platform.getLinkerFlags(),",
                "+            haddockInterfaces.build(),",
                "+            packagesBuilder.build(),",
                "+            exposedPackagesBuilder.build(),",
                "+            getPackageInfo(platform, baseTarget),",
                "+            platform,",
                "+            CxxSourceTypes.getPreprocessor(platform.getCxxPlatform(), CxxSource.Type.C)",
                "+                .resolve(resolver),",
                "+            ppFlagsBuilder.build()));",
                "+  }",
                "+",
                "+  private HaskellLinkRule createSharedLibrary(",
                "+      BuildTarget target,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams baseParams,",
                "+      BuildRuleResolver resolver,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      HaskellPlatform platform,",
                "+      HaskellLibraryDescriptionArg args,",
                "+      ImmutableSet<BuildRule> deps,",
                "+      boolean hsProfile) {",
                "+    HaskellCompileRule compileRule =",
                "+        requireCompileRule(",
                "+            target,",
                "+            projectFilesystem,",
                "+            baseParams,",
                "+            resolver,",
                "+            pathResolver,",
                "+            ruleFinder,",
                "+            platform,",
                "+            args,",
                "+            deps,",
                "+            Linker.LinkableDepType.SHARED,",
                "+            hsProfile);",
                "+",
                "+    String name =",
                "+        CxxDescriptionEnhancer.getSharedLibrarySoname(",
                "+            Optional.empty(), target.withFlavors(), platform.getCxxPlatform());",
                "+    Path outputPath = BuildTargets.getGenPath(projectFilesystem, target, \"%s\").resolve(name);",
                "+",
                "+    return HaskellDescriptionUtils.createLinkRule(",
                "+        target,",
                "+        projectFilesystem,",
                "+        baseParams,",
                "+        resolver,",
                "+        ruleFinder,",
                "+        platform,",
                "+        Linker.LinkType.SHARED,",
                "+        ImmutableList.of(),",
                "+        ImmutableList.copyOf(SourcePathArg.from(compileRule.getObjects())),",
                "+        RichStream.from(deps).filter(NativeLinkable.class).toImmutableList(),",
                "+        ImmutableSet.of(),",
                "+        Linker.LinkableDepType.SHARED,",
                "+        outputPath,",
                "+        Optional.of(name),",
                "+        hsProfile);",
                "+  }",
                "+",
                "+  private HaskellLinkRule requireSharedLibrary(",
                "+      BuildTarget baseTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams baseParams,",
                "+      BuildRuleResolver resolver,",
                "+      SourcePathResolver pathResolver,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      HaskellPlatformsProvider haskellPlatformsProvider,",
                "+      HaskellPlatform platform,",
                "+      HaskellLibraryDescriptionArg args,",
                "+      ImmutableSet<BuildRule> deps,",
                "+      boolean hsProfile) {",
                "+    Preconditions.checkArgument(",
                "+        Sets.intersection(",
                "+                baseTarget.getFlavors(),",
                "+                Sets.union(",
                "+                    Type.FLAVOR_VALUES,",
                "+                    haskellPlatformsProvider.getHaskellPlatforms().getFlavors()))",
                "+            .isEmpty());",
                "+",
                "+    return (HaskellLinkRule)",
                "+        resolver.computeIfAbsent(",
                "+            baseTarget.withAppendedFlavors(Type.SHARED.getFlavor(), platform.getFlavor()),",
                "+            target ->",
                "+                createSharedLibrary(",
                "+                    target,",
                "+                    projectFilesystem,",
                "+                    baseParams,",
                "+                    resolver,",
                "+                    pathResolver,",
                "+                    ruleFinder,",
                "+                    platform,",
                "+                    args,",
                "+                    deps,",
                "+                    hsProfile));",
                "+  }",
                "+",
                "+  private HaskellPlatform getPlatform(",
                "+      HaskellPlatformsProvider haskellPlatformsProvider, BuildTarget buildTarget) {",
                "+    Optional<HaskellPlatform> platform =",
                "+        haskellPlatformsProvider.getHaskellPlatforms().getValue(buildTarget);",
                "+    if (platform.isPresent()) {",
                "+      return platform.get();",
                "+    }",
                "+    return haskellPlatformsProvider.getDefaultHaskellPlatform();",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuildRule createBuildRule(",
                "+      BuildRuleCreationContext context,",
                "+      BuildTarget buildTarget,",
                "+      BuildRuleParams params,",
                "+      HaskellLibraryDescriptionArg args) {",
                "+    BuildRuleResolver resolver = context.getBuildRuleResolver();",
                "+    HaskellPlatformsProvider haskellPlatformsProvider = getHaskellPlatformsProvider();",
                "+    ProjectFilesystem projectFilesystem = context.getProjectFilesystem();",
                "+    FlavorDomain<HaskellPlatform> platforms = haskellPlatformsProvider.getHaskellPlatforms();",
                "+",
                "+    SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(resolver);",
                "+    SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);",
                "+    CxxDeps allDeps =",
                "+        CxxDeps.builder().addDeps(args.getDeps()).addPlatformDeps(args.getPlatformDeps()).build();",
                "+",
                "+    // See if we're building a particular \"type\" and \"platform\" of this library, and if so, extract",
                "+    // them from the flavors attached to the build target.",
                "+    Optional<Map.Entry<Flavor, Type>> type = LIBRARY_TYPE.getFlavorAndValue(buildTarget);",
                "+    HaskellPlatform platform = getPlatform(haskellPlatformsProvider, buildTarget);",
                "+    if (type.isPresent()) {",
                "+      // Get the base build, without any flavors referring to the library type or platform.",
                "+      BuildTarget baseTarget =",
                "+          buildTarget.withoutFlavors(Sets.union(Type.FLAVOR_VALUES, platforms.getFlavors()));",
                "+",
                "+      ImmutableSet<BuildRule> deps = allDeps.get(resolver, platform.getCxxPlatform());",
                "+",
                "+      switch (type.get().getValue()) {",
                "+        case PACKAGE_SHARED:",
                "+        case PACKAGE_STATIC:",
                "+        case PACKAGE_STATIC_PIC:",
                "+          Linker.LinkableDepType depType;",
                "+          if (type.get().getValue().equals(Type.PACKAGE_SHARED)) {",
                "+            depType = Linker.LinkableDepType.SHARED;",
                "+          } else if (type.get().getValue().equals(Type.PACKAGE_STATIC)) {",
                "+            depType = Linker.LinkableDepType.STATIC;",
                "+          } else {",
                "+            depType = Linker.LinkableDepType.STATIC_PIC;",
                "+          }",
                "+          return requirePackage(",
                "+              baseTarget,",
                "+              projectFilesystem,",
                "+              params,",
                "+              resolver,",
                "+              pathResolver,",
                "+              ruleFinder,",
                "+              haskellPlatformsProvider,",
                "+              platform,",
                "+              args,",
                "+              deps,",
                "+              depType,",
                "+              args.isEnableProfiling());",
                "+        case SHARED:",
                "+          return requireSharedLibrary(",
                "+              baseTarget,",
                "+              projectFilesystem,",
                "+              params,",
                "+              resolver,",
                "+              pathResolver,",
                "+              ruleFinder,",
                "+              haskellPlatformsProvider,",
                "+              platform,",
                "+              args,",
                "+              deps,",
                "+              args.isEnableProfiling());",
                "+        case STATIC_PIC:",
                "+        case STATIC:",
                "+          return requireStaticLibrary(",
                "+              baseTarget,",
                "+              projectFilesystem,",
                "+              params,",
                "+              resolver,",
                "+              pathResolver,",
                "+              ruleFinder,",
                "+              haskellPlatformsProvider,",
                "+              platform,",
                "+              args,",
                "+              deps,",
                "+              type.get().getValue() == Type.STATIC",
                "+                  ? Linker.LinkableDepType.STATIC",
                "+                  : Linker.LinkableDepType.STATIC_PIC,",
                "+              args.isEnableProfiling());",
                "+        case HADDOCK:",
                "+          return requireHaddockLibrary(",
                "+              baseTarget,",
                "+              projectFilesystem,",
                "+              params,",
                "+              resolver,",
                "+              pathResolver,",
                "+              ruleFinder,",
                "+              platform,",
                "+              args);",
                "+        case GHCI:",
                "+          return HaskellDescriptionUtils.requireGhciRule(",
                "+              // The GHCi rule is a user-facing \"deployable\" rule, rather than a factory rule, so",
                "+              // make sure to use the original build target when generating it.",
                "+              buildTarget,",
                "+              projectFilesystem,",
                "+              params,",
                "+              context.getCellPathResolver(),",
                "+              resolver,",
                "+              platform,",
                "+              cxxBuckConfig,",
                "+              args.getDeps(),",
                "+              args.getPlatformDeps(),",
                "+              args.getSrcs(),",
                "+              args.getGhciPreloadDeps(),",
                "+              args.getGhciPlatformPreloadDeps(),",
                "+              args.getCompilerFlags(),",
                "+              Optional.empty(),",
                "+              Optional.empty());",
                "+      }",
                "+",
                "+      throw new IllegalStateException(",
                "+          String.format(\"%s: unexpected type `%s`\", buildTarget, type.get().getValue()));",
                "+    }",
                "+",
                "+    return new HaskellLibrary(buildTarget, projectFilesystem, params) {",
                "+",
                "+      @Override",
                "+      public Iterable<BuildRule> getCompileDeps(HaskellPlatform platform) {",
                "+        return RichStream.from(allDeps.get(resolver, platform.getCxxPlatform()))",
                "+            .filter(dep -> dep instanceof HaskellCompileDep || dep instanceof CxxPreprocessorDep)",
                "+            .toImmutableList();",
                "+      }",
                "+",
                "+      @Override",
                "+      public HaskellCompileInput getCompileInput(",
                "+          HaskellPlatform platform, Linker.LinkableDepType depType, boolean hsProfile) {",
                "+        HaskellPackageRule rule =",
                "+            requirePackage(",
                "+                getBaseBuildTarget(haskellPlatformsProvider, getBuildTarget()),",
                "+                projectFilesystem,",
                "+                params,",
                "+                resolver,",
                "+                pathResolver,",
                "+                ruleFinder,",
                "+                haskellPlatformsProvider,",
                "+                platform,",
                "+                args,",
                "+                allDeps.get(resolver, platform.getCxxPlatform()),",
                "+                depType,",
                "+                hsProfile);",
                "+        return HaskellCompileInput.builder().addPackages(rule.getPackage()).build();",
                "+      }",
                "+",
                "+      @Override",
                "+      public HaskellHaddockInput getHaddockInput(HaskellPlatform platform) {",
                "+        BuildTarget target =",
                "+            buildTarget.withAppendedFlavors(Type.HADDOCK.getFlavor(), platform.getFlavor());",
                "+        HaskellHaddockLibRule rule = (HaskellHaddockLibRule) resolver.requireRule(target);",
                "+        return HaskellHaddockInput.builder()",
                "+            .addAllInterfaces(rule.getInterfaces())",
                "+            .addAllOutputDirs(rule.getOutputDirs())",
                "+            .build();",
                "+      }",
                "+",
                "+      @Override",
                "+      public CxxPreprocessorInput getCxxPreprocessorInput(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+        CxxPreprocessorInput.Builder builder = CxxPreprocessorInput.builder();",
                "+",
                "+        Optional<Linker.LinkableDepType> depType =",
                "+            platforms.getValue(cxxPlatform.getFlavor()).getLinkStyleForStubHeader();",
                "+        if (depType.isPresent()) {",
                "+          HaskellCompileRule compileRule =",
                "+              requireCompileRule(",
                "+                  buildTarget,",
                "+                  projectFilesystem,",
                "+                  params,",
                "+                  resolver,",
                "+                  pathResolver,",
                "+                  ruleFinder,",
                "+                  platforms.getValue(cxxPlatform.getFlavor()),",
                "+                  args,",
                "+                  allDeps.get(resolver, cxxPlatform),",
                "+                  depType.get(),",
                "+                  args.isEnableProfiling());",
                "+          builder.addIncludes(",
                "+              CxxHeadersDir.of(CxxPreprocessables.IncludeType.SYSTEM, compileRule.getStubsDir()));",
                "+        }",
                "+",
                "+        return builder.build();",
                "+      }",
                "+",
                "+      @Override",
                "+      public Iterable<CxxPreprocessorDep> getCxxPreprocessorDeps(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+        return RichStream.from(allDeps.get(resolver, cxxPlatform))",
                "+            .filter(CxxPreprocessorDep.class)",
                "+            .toImmutableList();",
                "+      }",
                "+",
                "+      @Override",
                "+      public ImmutableMap<BuildTarget, CxxPreprocessorInput> getTransitiveCxxPreprocessorInput(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+        return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform, ruleResolver);",
                "+      }",
                "+",
                "+      @Override",
                "+      public Iterable<? extends NativeLinkable> getNativeLinkableDeps(",
                "+          BuildRuleResolver ruleResolver) {",
                "+        return ImmutableList.of();",
                "+      }",
                "+",
                "+      private final TransitiveCxxPreprocessorInputCache transitiveCxxPreprocessorInputCache =",
                "+          new TransitiveCxxPreprocessorInputCache(this);",
                "+",
                "+      @Override",
                "+      public Iterable<? extends NativeLinkable> getNativeLinkableExportedDepsForPlatform(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+        return RichStream.from(allDeps.get(resolver, cxxPlatform))",
                "+            .filter(NativeLinkable.class)",
                "+            .toImmutableList();",
                "+      }",
                "+",
                "+      @Override",
                "+      public Iterable<? extends NativeLinkable> getNativeLinkableExportedDeps(",
                "+          BuildRuleResolver ruleResolver) {",
                "+        return RichStream.from(allDeps.getForAllPlatforms(resolver))",
                "+            .filter(NativeLinkable.class)",
                "+            .toImmutableList();",
                "+      }",
                "+",
                "+      @Override",
                "+      public NativeLinkableInput getNativeLinkableInput(",
                "+          CxxPlatform cxxPlatform,",
                "+          Linker.LinkableDepType type,",
                "+          boolean forceLinkWhole,",
                "+          ImmutableSet<LanguageExtensions> languageExtensions,",
                "+          BuildRuleResolver ruleResolver) {",
                "+        Iterable<Arg> linkArgs;",
                "+        switch (type) {",
                "+          case STATIC:",
                "+          case STATIC_PIC:",
                "+            Archive archive =",
                "+                requireStaticLibrary(",
                "+                    getBaseBuildTarget(haskellPlatformsProvider, getBuildTarget()),",
                "+                    projectFilesystem,",
                "+                    params,",
                "+                    resolver,",
                "+                    pathResolver,",
                "+                    ruleFinder,",
                "+                    haskellPlatformsProvider,",
                "+                    platforms.getValue(cxxPlatform.getFlavor()),",
                "+                    args,",
                "+                    allDeps.get(resolver, cxxPlatform),",
                "+                    type,",
                "+                    args.isEnableProfiling());",
                "+            linkArgs =",
                "+                args.getLinkWhole() || forceLinkWhole",
                "+                    ? cxxPlatform.getLd().resolve(resolver).linkWhole(archive.toArg())",
                "+                    : ImmutableList.of(archive.toArg());",
                "+            break;",
                "+          case SHARED:",
                "+            BuildRule rule =",
                "+                requireSharedLibrary(",
                "+                    getBaseBuildTarget(haskellPlatformsProvider, getBuildTarget()),",
                "+                    projectFilesystem,",
                "+                    params,",
                "+                    resolver,",
                "+                    pathResolver,",
                "+                    ruleFinder,",
                "+                    haskellPlatformsProvider,",
                "+                    platforms.getValue(cxxPlatform.getFlavor()),",
                "+                    args,",
                "+                    allDeps.get(resolver, cxxPlatform),",
                "+                    args.isEnableProfiling());",
                "+            linkArgs = ImmutableList.of(SourcePathArg.of(rule.getSourcePathToOutput()));",
                "+            break;",
                "+          default:",
                "+            throw new IllegalStateException();",
                "+        }",
                "+        return NativeLinkableInput.builder().addAllArgs(linkArgs).build();",
                "+      }",
                "+",
                "+      @Override",
                "+      public Linkage getPreferredLinkage(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+        return args.getPreferredLinkage();",
                "+      }",
                "+",
                "+      @Override",
                "+      public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+        ImmutableMap.Builder<String, SourcePath> libs = ImmutableMap.builder();",
                "+        String sharedLibrarySoname =",
                "+            CxxDescriptionEnhancer.getSharedLibrarySoname(",
                "+                Optional.empty(), getBuildTarget(), cxxPlatform);",
                "+        BuildRule sharedLibraryBuildRule =",
                "+            requireSharedLibrary(",
                "+                getBaseBuildTarget(haskellPlatformsProvider, getBuildTarget()),",
                "+                projectFilesystem,",
                "+                params,",
                "+                resolver,",
                "+                pathResolver,",
                "+                ruleFinder,",
                "+                haskellPlatformsProvider,",
                "+                platforms.getValue(cxxPlatform.getFlavor()),",
                "+                args,",
                "+                allDeps.get(resolver, cxxPlatform),",
                "+                args.isEnableProfiling());",
                "+        libs.put(sharedLibrarySoname, sharedLibraryBuildRule.getSourcePathToOutput());",
                "+        return libs.build();",
                "+      }",
                "+    };",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean hasFlavors(ImmutableSet<Flavor> flavors) {",
                "+    if (getHaskellPlatformsProvider().getHaskellPlatforms().containsAnyOf(flavors)) {",
                "+      return true;",
                "+    }",
                "+",
                "+    for (Type type : Type.values()) {",
                "+      if (flavors.contains(type.getFlavor())) {",
                "+        return true;",
                "+      }",
                "+    }",
                "+",
                "+    return false;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void findDepsForTargetFromConstructorArgs(",
                "+      BuildTarget buildTarget,",
                "+      CellPathResolver cellRoots,",
                "+      AbstractHaskellLibraryDescriptionArg constructorArg,",
                "+      ImmutableCollection.Builder<BuildTarget> extraDepsBuilder,",
                "+      ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "+    HaskellDescriptionUtils.getParseTimeDeps(",
                "+        getHaskellPlatformsProvider().getHaskellPlatforms().getValues(),",
                "+        targetGraphOnlyDepsBuilder);",
                "+  }",
                "+",
                "+  private HaskellPlatformsProvider getHaskellPlatformsProvider() {",
                "+    return toolchainProvider.getByName(",
                "+        HaskellPlatformsProvider.DEFAULT_NAME, HaskellPlatformsProvider.class);",
                "+  }",
                "+",
                "+  protected enum Type implements FlavorConvertible {",
                "+    PACKAGE_SHARED(InternalFlavor.of(\"package-shared\")),",
                "+    PACKAGE_STATIC(InternalFlavor.of(\"package-static\")),",
                "+    PACKAGE_STATIC_PIC(InternalFlavor.of(\"package-static-pic\")),",
                "+",
                "+    SHARED(CxxDescriptionEnhancer.SHARED_FLAVOR),",
                "+    STATIC(CxxDescriptionEnhancer.STATIC_FLAVOR),",
                "+    STATIC_PIC(CxxDescriptionEnhancer.STATIC_PIC_FLAVOR),",
                "+",
                "+    GHCI(HaskellDescriptionUtils.GHCI_FLAV),",
                "+    HADDOCK(InternalFlavor.of(\"haddock\"));",
                "+",
                "+    public static final ImmutableSet<Flavor> FLAVOR_VALUES =",
                "+        ImmutableList.copyOf(Type.values())",
                "+            .stream()",
                "+            .map(Type::getFlavor)",
                "+            .collect(ImmutableSet.toImmutableSet());",
                "+",
                "+    private final Flavor flavor;",
                "+",
                "+    Type(Flavor flavor) {",
                "+      this.flavor = flavor;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Flavor getFlavor() {",
                "+      return flavor;",
                "+    }",
                "+  }",
                "+",
                "+  @BuckStyleImmutable",
                "+  @Value.Immutable",
                "+  interface AbstractHaskellLibraryDescriptionArg extends CommonDescriptionArg, HasDeclaredDeps {",
                "+    @Value.Default",
                "+    default SourceList getSrcs() {",
                "+      return SourceList.EMPTY;",
                "+    }",
                "+",
                "+    ImmutableList<StringWithMacros> getLinkerFlags();",
                "+",
                "+    ImmutableList<String> getCompilerFlags();",
                "+",
                "+    @Value.Default",
                "+    default PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> getPlatformDeps() {",
                "+      return PatternMatchedCollection.of();",
                "+    }",
                "+",
                "+    @Value.Default",
                "+    default boolean getLinkWhole() {",
                "+      return false;",
                "+    }",
                "+",
                "+    @Value.Default",
                "+    default NativeLinkable.Linkage getPreferredLinkage() {",
                "+      return NativeLinkable.Linkage.ANY;",
                "+    }",
                "+",
                "+    @Value.Default",
                "+    default boolean isEnableProfiling() {",
                "+      return false;",
                "+    }",
                "+",
                "+    @Value.Default",
                "+    default ImmutableList<String> getHaddockFlags() {",
                "+      return ImmutableList.of();",
                "+    }",
                "+",
                "+    @Value.Default",
                "+    default ImmutableSortedSet<BuildTarget> getGhciPreloadDeps() {",
                "+      return ImmutableSortedSet.of();",
                "+    }",
                "+",
                "+    @Value.Default",
                "+    default PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> getGhciPlatformPreloadDeps() {",
                "+      return PatternMatchedCollection.of();",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellLinkRule.java b/src/com/facebook/buck/features/haskell/HaskellLinkRule.java",
                "new file mode 100644",
                "index 0000000000..583abdcf17",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellLinkRule.java",
                "@@ -0,0 +1,144 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.io.BuildCellRelativePath;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.AbstractBuildRuleWithDeclaredAndExtraDeps;",
                "+import com.facebook.buck.rules.AddToRuleKey;",
                "+import com.facebook.buck.rules.BuildContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildableContext;",
                "+import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.rules.args.Arg;",
                "+import com.facebook.buck.shell.ShellStep;",
                "+import com.facebook.buck.step.ExecutionContext;",
                "+import com.facebook.buck.step.Step;",
                "+import com.facebook.buck.step.fs.MkdirStep;",
                "+import com.facebook.buck.step.fs.RmStep;",
                "+import com.facebook.buck.util.MoreIterables;",
                "+import com.facebook.buck.util.Verbosity;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.Iterables;",
                "+import java.nio.file.Path;",
                "+import java.util.Optional;",
                "+",
                "+public class HaskellLinkRule extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "+",
                "+  @AddToRuleKey private final Tool linker;",
                "+",
                "+  @AddToRuleKey(stringify = true)",
                "+  private final Path outputPath;",
                "+",
                "+  @AddToRuleKey private final ImmutableList<Arg> args;",
                "+",
                "+  @AddToRuleKey private final ImmutableList<Arg> linkerArgs;",
                "+",
                "+  private final boolean cacheable;",
                "+",
                "+  public HaskellLinkRule(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams buildRuleParams,",
                "+      Tool linker,",
                "+      Path outputPath,",
                "+      ImmutableList<Arg> args,",
                "+      ImmutableList<Arg> linkerArgs,",
                "+      boolean cacheable) {",
                "+    super(buildTarget, projectFilesystem, buildRuleParams);",
                "+    this.linker = linker;",
                "+    this.args = args;",
                "+    this.linkerArgs = linkerArgs;",
                "+    this.cacheable = cacheable;",
                "+    this.outputPath = outputPath;",
                "+  }",
                "+",
                "+  private Path getOutputDir() {",
                "+    return getOutput().getParent();",
                "+  }",
                "+",
                "+  private Path getOutput() {",
                "+    return this.outputPath;",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableList<Step> getBuildSteps(",
                "+      BuildContext buildContext, BuildableContext buildableContext) {",
                "+    buildableContext.recordArtifact(getOutput());",
                "+    return new ImmutableList.Builder<Step>()",
                "+        .add(",
                "+            MkdirStep.of(",
                "+                BuildCellRelativePath.fromCellRelativePath(",
                "+                    buildContext.getBuildCellRootPath(), getProjectFilesystem(), getOutputDir())))",
                "+        .add(",
                "+            // The output path might be a folder, so delete it all",
                "+            RmStep.of(",
                "+                    BuildCellRelativePath.fromCellRelativePath(",
                "+                        buildContext.getBuildCellRootPath(), getProjectFilesystem(), getOutput()))",
                "+                .withRecursive(true))",
                "+        .add(",
                "+            new ShellStep(Optional.of(getBuildTarget()), getProjectFilesystem().getRootPath()) {",
                "+",
                "+              @Override",
                "+              public ImmutableMap<String, String> getEnvironmentVariables(",
                "+                  ExecutionContext context) {",
                "+                return ImmutableMap.<String, String>builder()",
                "+                    .putAll(super.getEnvironmentVariables(context))",
                "+                    .putAll(linker.getEnvironment(buildContext.getSourcePathResolver()))",
                "+                    .build();",
                "+              }",
                "+",
                "+              @Override",
                "+              protected ImmutableList<String> getShellCommandInternal(ExecutionContext context) {",
                "+                return ImmutableList.<String>builder()",
                "+                    .addAll(linker.getCommandPrefix(buildContext.getSourcePathResolver()))",
                "+                    .add(\"-o\", getProjectFilesystem().resolve(getOutput()).toString())",
                "+                    .addAll(Arg.stringify(args, buildContext.getSourcePathResolver()))",
                "+                    .addAll(",
                "+                        MoreIterables.zipAndConcat(",
                "+                            Iterables.cycle(\"-optl\"),",
                "+                            Arg.stringify(linkerArgs, buildContext.getSourcePathResolver())))",
                "+                    .build();",
                "+              }",
                "+",
                "+              @Override",
                "+              protected boolean shouldPrintStderr(Verbosity verbosity) {",
                "+                return !verbosity.isSilent();",
                "+              }",
                "+",
                "+              @Override",
                "+              public String getShortName() {",
                "+                return \"haskell-link\";",
                "+              }",
                "+            })",
                "+        .build();",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath getSourcePathToOutput() {",
                "+    return ExplicitBuildTargetSourcePath.of(getBuildTarget(), getOutput());",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean isCacheable() {",
                "+    return cacheable;",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellModule.java b/src/com/facebook/buck/features/haskell/HaskellModule.java",
                "new file mode 100644",
                "index 0000000000..27d0ef618a",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellModule.java",
                "@@ -0,0 +1,22 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.module.BuckModule;",
                "+",
                "+@BuckModule",
                "+public class HaskellModule {}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellPackageRule.java b/src/com/facebook/buck/features/haskell/HaskellPackageRule.java",
                "new file mode 100644",
                "index 0000000000..b7af062271",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellPackageRule.java",
                "@@ -0,0 +1,341 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.io.BuildCellRelativePath;",
                "+import com.facebook.buck.io.file.MorePaths;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargets;",
                "+import com.facebook.buck.rules.AbstractBuildRuleWithDeclaredAndExtraDeps;",
                "+import com.facebook.buck.rules.AddToRuleKey;",
                "+import com.facebook.buck.rules.BuildContext;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildableContext;",
                "+import com.facebook.buck.rules.BuildableSupport;",
                "+import com.facebook.buck.rules.ExplicitBuildTargetSourcePath;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.Tool;",
                "+import com.facebook.buck.shell.ShellStep;",
                "+import com.facebook.buck.step.ExecutionContext;",
                "+import com.facebook.buck.step.Step;",
                "+import com.facebook.buck.step.fs.MakeCleanDirectoryStep;",
                "+import com.facebook.buck.step.fs.RmStep;",
                "+import com.facebook.buck.step.fs.WriteFileStep;",
                "+import com.facebook.buck.util.MoreSuppliers;",
                "+import com.facebook.buck.util.Verbosity;",
                "+import com.google.common.base.Joiner;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSortedMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import com.google.common.collect.Iterables;",
                "+import java.nio.file.Path;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.LinkedHashSet;",
                "+import java.util.Map;",
                "+import java.util.Optional;",
                "+import java.util.Set;",
                "+import java.util.function.Supplier;",
                "+import java.util.stream.Collectors;",
                "+",
                "+public class HaskellPackageRule extends AbstractBuildRuleWithDeclaredAndExtraDeps {",
                "+",
                "+  @AddToRuleKey private final Tool ghcPkg;",
                "+",
                "+  private final HaskellVersion haskellVersion;",
                "+",
                "+  @AddToRuleKey Linker.LinkableDepType depType;",
                "+",
                "+  @AddToRuleKey private final HaskellPackageInfo packageInfo;",
                "+",
                "+  @AddToRuleKey private final ImmutableSortedMap<String, HaskellPackage> depPackages;",
                "+",
                "+  @AddToRuleKey private final ImmutableSortedSet<String> modules;",
                "+",
                "+  @AddToRuleKey private final ImmutableSortedSet<SourcePath> libraries;",
                "+",
                "+  @AddToRuleKey private final ImmutableSortedSet<SourcePath> interfaces;",
                "+",
                "+  @AddToRuleKey private final ImmutableSortedSet<SourcePath> objects;",
                "+",
                "+  public HaskellPackageRule(",
                "+      BuildTarget buildTarget,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams buildRuleParams,",
                "+      Tool ghcPkg,",
                "+      HaskellVersion haskellVersion,",
                "+      Linker.LinkableDepType depType,",
                "+      HaskellPackageInfo packageInfo,",
                "+      ImmutableSortedMap<String, HaskellPackage> depPackages,",
                "+      ImmutableSortedSet<String> modules,",
                "+      ImmutableSortedSet<SourcePath> libraries,",
                "+      ImmutableSortedSet<SourcePath> interfaces,",
                "+      ImmutableSortedSet<SourcePath> objects) {",
                "+    super(buildTarget, projectFilesystem, buildRuleParams);",
                "+    this.ghcPkg = ghcPkg;",
                "+    this.haskellVersion = haskellVersion;",
                "+    this.depType = depType;",
                "+    this.packageInfo = packageInfo;",
                "+    this.depPackages = depPackages;",
                "+    this.modules = modules;",
                "+    this.libraries = libraries;",
                "+    this.interfaces = interfaces;",
                "+    this.objects = objects;",
                "+  }",
                "+",
                "+  public static HaskellPackageRule from(",
                "+      BuildTarget target,",
                "+      ProjectFilesystem projectFilesystem,",
                "+      BuildRuleParams baseParams,",
                "+      SourcePathRuleFinder ruleFinder,",
                "+      Tool ghcPkg,",
                "+      HaskellVersion haskellVersion,",
                "+      Linker.LinkableDepType depType,",
                "+      HaskellPackageInfo packageInfo,",
                "+      ImmutableSortedMap<String, HaskellPackage> depPackages,",
                "+      ImmutableSortedSet<String> modules,",
                "+      ImmutableSortedSet<SourcePath> libraries,",
                "+      ImmutableSortedSet<SourcePath> interfaces,",
                "+      ImmutableSortedSet<SourcePath> objects) {",
                "+    Supplier<ImmutableSortedSet<BuildRule>> declaredDeps =",
                "+        MoreSuppliers.memoize(",
                "+            () ->",
                "+                ImmutableSortedSet.<BuildRule>naturalOrder()",
                "+                    .addAll(BuildableSupport.getDepsCollection(ghcPkg, ruleFinder))",
                "+                    .addAll(",
                "+                        depPackages",
                "+                            .values()",
                "+                            .stream()",
                "+                            .flatMap(pkg -> pkg.getDeps(ruleFinder))",
                "+                            .iterator())",
                "+                    .addAll(",
                "+                        ruleFinder.filterBuildRuleInputs(Iterables.concat(libraries, interfaces)))",
                "+                    .build());",
                "+    return new HaskellPackageRule(",
                "+        target,",
                "+        projectFilesystem,",
                "+        baseParams.withDeclaredDeps(declaredDeps).withoutExtraDeps(),",
                "+        ghcPkg,",
                "+        haskellVersion,",
                "+        depType,",
                "+        packageInfo,",
                "+        depPackages,",
                "+        modules,",
                "+        libraries,",
                "+        interfaces,",
                "+        objects);",
                "+  }",
                "+",
                "+  private Path getPackageDb() {",
                "+    return BuildTargets.getGenPath(getProjectFilesystem(), getBuildTarget(), \"%s\");",
                "+  }",
                "+",
                "+  private WriteFileStep getWriteRegistrationFileStep(",
                "+      SourcePathResolver resolver, Path registrationFile, Path packageDb) {",
                "+    Map<String, String> entries = new LinkedHashMap<>();",
                "+",
                "+    entries.put(\"name\", packageInfo.getName());",
                "+    entries.put(\"version\", packageInfo.getVersion());",
                "+    entries.put(\"id\", packageInfo.getIdentifier());",
                "+",
                "+    if (haskellVersion.getMajorVersion() >= 8) {",
                "+      entries.put(\"key\", packageInfo.getIdentifier());",
                "+    }",
                "+",
                "+    entries.put(\"exposed\", \"True\");",
                "+    entries.put(\"exposed-modules\", Joiner.on(' ').join(modules));",
                "+",
                "+    Path pkgRoot = getProjectFilesystem().getPath(\"${pkgroot}\");",
                "+",
                "+    if (!modules.isEmpty()) {",
                "+      Set<String> importDirs = new LinkedHashSet<>();",
                "+      for (SourcePath interfaceDir : interfaces) {",
                "+        Path relInterfaceDir =",
                "+            pkgRoot.resolve(",
                "+                packageDb.getParent().relativize(resolver.getRelativePath(interfaceDir)));",
                "+        importDirs.add('\"' + relInterfaceDir.toString() + '\"');",
                "+      }",
                "+      entries.put(\"import-dirs\", Joiner.on(\", \").join(importDirs));",
                "+    }",
                "+",
                "+    Set<String> libDirs = new LinkedHashSet<>();",
                "+    Set<String> libs = new LinkedHashSet<>();",
                "+    for (SourcePath library : libraries) {",
                "+      Path relLibPath =",
                "+          pkgRoot.resolve(packageDb.getParent().relativize(resolver.getRelativePath(library)));",
                "+      libDirs.add('\"' + relLibPath.getParent().toString() + '\"');",
                "+",
                "+      String libName = MorePaths.stripPathPrefixAndExtension(relLibPath.getFileName(), \"lib\");",
                "+      libs.add(libName.replaceAll(\"_p$\", \"\"));",
                "+    }",
                "+    entries.put(\"library-dirs\", Joiner.on(\", \").join(libDirs));",
                "+",
                "+    if (Linker.LinkableDepType.STATIC == depType) {",
                "+      entries.put(\"hs-libraries\", Joiner.on(\", \").join(libs));",
                "+    } else {",
                "+      entries.put(\"extra-libraries\", Joiner.on(\", \").join(libs));",
                "+    }",
                "+",
                "+    entries.put(\"depends\", Joiner.on(\", \").join(depPackages.keySet()));",
                "+",
                "+    return new WriteFileStep(",
                "+        getProjectFilesystem(),",
                "+        entries",
                "+            .entrySet()",
                "+            .stream()",
                "+            .map(input -> input.getKey() + \": \" + input.getValue())",
                "+            .collect(Collectors.joining(System.lineSeparator())),",
                "+        registrationFile,",
                "+        /* executable */ false);",
                "+  }",
                "+",
                "+  @Override",
                "+  public ImmutableList<Step> getBuildSteps(",
                "+      BuildContext context, BuildableContext buildableContext) {",
                "+",
                "+    ImmutableList.Builder<Step> steps = ImmutableList.builder();",
                "+",
                "+    // Setup the scratch dir.",
                "+    Path scratchDir = BuildTargets.getScratchPath(getProjectFilesystem(), getBuildTarget(), \"%s\");",
                "+",
                "+    steps.addAll(",
                "+        MakeCleanDirectoryStep.of(",
                "+            BuildCellRelativePath.fromCellRelativePath(",
                "+                context.getBuildCellRootPath(), getProjectFilesystem(), scratchDir)));",
                "+",
                "+    // Setup the package DB directory.",
                "+    Path packageDb = getPackageDb();",
                "+    steps.add(",
                "+        RmStep.of(",
                "+                BuildCellRelativePath.fromCellRelativePath(",
                "+                    context.getBuildCellRootPath(), getProjectFilesystem(), packageDb))",
                "+            .withRecursive(true));",
                "+    buildableContext.recordArtifact(packageDb);",
                "+",
                "+    // Create the registration file.",
                "+    Path registrationFile = scratchDir.resolve(\"registration-file\");",
                "+    steps.add(",
                "+        getWriteRegistrationFileStep(context.getSourcePathResolver(), registrationFile, packageDb));",
                "+",
                "+    // Initialize the package DB.",
                "+    steps.add(",
                "+        new GhcPkgStep(",
                "+            getBuildTarget(),",
                "+            context.getSourcePathResolver(),",
                "+            ImmutableList.of(\"init\", packageDb.toString()),",
                "+            ImmutableMap.of()));",
                "+",
                "+    // Build the the package DB.",
                "+    ImmutableList.Builder<String> ghcPkgCmdBuilder = ImmutableList.builder();",
                "+    ghcPkgCmdBuilder.add(\"-v0\", \"register\", \"--package-conf=\" + packageDb, \"--no-expand-pkgroot\");",
                "+    // Older versions of `ghc-pkg` appear to fail finding the interface files which are being",
                "+    // exported by this package, so ignore these failure explicitly.",
                "+    if (haskellVersion.getMajorVersion() < 8) {",
                "+      ghcPkgCmdBuilder.add(\"--force-files\");",
                "+    }",
                "+    ghcPkgCmdBuilder.add(registrationFile.toString());",
                "+    ImmutableList<String> ghcPkgCmd = ghcPkgCmdBuilder.build();",
                "+    steps.add(",
                "+        new GhcPkgStep(",
                "+            getBuildTarget(),",
                "+            context.getSourcePathResolver(),",
                "+            ghcPkgCmd,",
                "+            ImmutableMap.of(",
                "+                \"GHC_PACKAGE_PATH\",",
                "+                depPackages",
                "+                    .values()",
                "+                    .stream()",
                "+                    .map(",
                "+                        input ->",
                "+                            context",
                "+                                .getSourcePathResolver()",
                "+                                .getAbsolutePath(input.getPackageDb())",
                "+                                .toString())",
                "+                    // Different packages might have the same underlying package DB and specifying",
                "+                    // the same package DB multiple times to `ghc-pkg` will cause additional",
                "+                    // processing which can make `ghc-pkg` really slow.  So, dedup the package DBs",
                "+                    // before passing them into `ghc-pkg`.",
                "+                    .distinct()",
                "+                    .collect(Collectors.joining(\":\")))));",
                "+",
                "+    return steps.build();",
                "+  }",
                "+",
                "+  @Override",
                "+  public SourcePath getSourcePathToOutput() {",
                "+    return ExplicitBuildTargetSourcePath.of(getBuildTarget(), getPackageDb());",
                "+  }",
                "+",
                "+  public HaskellPackage getPackage() {",
                "+    return HaskellPackage.builder()",
                "+        .setInfo(packageInfo)",
                "+        .setPackageDb(ExplicitBuildTargetSourcePath.of(getBuildTarget(), getPackageDb()))",
                "+        .addAllLibraries(libraries)",
                "+        .addAllInterfaces(interfaces)",
                "+        .addAllObjects(objects)",
                "+        .build();",
                "+  }",
                "+",
                "+  private class GhcPkgStep extends ShellStep {",
                "+",
                "+    private final SourcePathResolver resolver;",
                "+    private final ImmutableList<String> args;",
                "+    private final ImmutableMap<String, String> env;",
                "+",
                "+    public GhcPkgStep(",
                "+        BuildTarget buildTarget,",
                "+        SourcePathResolver resolver,",
                "+        ImmutableList<String> args,",
                "+        ImmutableMap<String, String> env) {",
                "+      super(Optional.of(buildTarget), getProjectFilesystem().getRootPath());",
                "+      this.resolver = resolver;",
                "+      this.args = args;",
                "+      this.env = env;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected boolean shouldPrintStderr(Verbosity verbosity) {",
                "+      return !verbosity.isSilent();",
                "+    }",
                "+",
                "+    @Override",
                "+    protected final ImmutableList<String> getShellCommandInternal(ExecutionContext context) {",
                "+      return ImmutableList.<String>builder()",
                "+          .addAll(ghcPkg.getCommandPrefix(resolver))",
                "+          .addAll(args)",
                "+          .build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public ImmutableMap<String, String> getEnvironmentVariables(ExecutionContext context) {",
                "+      return ImmutableMap.<String, String>builder()",
                "+          .putAll(super.getEnvironmentVariables(context))",
                "+          .putAll(ghcPkg.getEnvironment(resolver))",
                "+          .putAll(env)",
                "+          .build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public final String getShortName() {",
                "+      return \"ghc-pkg\";",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellPlatformsFactory.java b/src/com/facebook/buck/features/haskell/HaskellPlatformsFactory.java",
                "new file mode 100644",
                "index 0000000000..9f7ccbd496",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellPlatformsFactory.java",
                "@@ -0,0 +1,120 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.config.BuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.DefaultCxxPlatforms;",
                "+import com.facebook.buck.io.ExecutableFinder;",
                "+import com.facebook.buck.rules.SystemToolProvider;",
                "+import com.facebook.buck.rules.ToolProvider;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.google.common.collect.ImmutableList;",
                "+import java.nio.file.Paths;",
                "+import java.util.Optional;",
                "+",
                "+public class HaskellPlatformsFactory {",
                "+",
                "+  private final BuckConfig buckConfig;",
                "+  private final HaskellBuckConfig haskellBuckConfig;",
                "+  private final ExecutableFinder executableFinder;",
                "+",
                "+  public HaskellPlatformsFactory(BuckConfig buckConfig, ExecutableFinder executableFinder) {",
                "+    this.buckConfig = buckConfig;",
                "+    this.haskellBuckConfig = new HaskellBuckConfig(buckConfig);",
                "+    this.executableFinder = executableFinder;",
                "+  }",
                "+",
                "+  private HaskellPlatform getPlatform(String section, CxxPlatform cxxPlatform) {",
                "+    return HaskellPlatform.builder()",
                "+        .setHaskellVersion(HaskellVersion.of(haskellBuckConfig.getCompilerMajorVersion(section)))",
                "+        .setCompiler(getCompiler(section))",
                "+        .setCompilerFlags(haskellBuckConfig.getCompilerFlags(section).orElse(ImmutableList.of()))",
                "+        .setLinker(getLinker(section))",
                "+        .setLinkerFlags(haskellBuckConfig.getLinkerFlags(section).orElse(ImmutableList.of()))",
                "+        .setPackager(getPackager(section))",
                "+        .setHaddock(getHaddock(section))",
                "+        .setShouldCacheLinks(haskellBuckConfig.getShouldCacheLinks(section))",
                "+        .setShouldUsedOldBinaryOutputLocation(",
                "+            haskellBuckConfig.getShouldUsedOldBinaryOutputLocation(section))",
                "+        .setPackageNamePrefix(haskellBuckConfig.getPackageNamePrefix(section))",
                "+        .setGhciScriptTemplate(haskellBuckConfig.getGhciScriptTemplate(section))",
                "+        .setGhciIservScriptTemplate(haskellBuckConfig.getGhciIservScriptTemplate(section))",
                "+        .setGhciBinutils(haskellBuckConfig.getGhciBinutils(section))",
                "+        .setGhciGhc(haskellBuckConfig.getGhciGhc(section))",
                "+        .setGhciIServ(haskellBuckConfig.getGhciIServ(section))",
                "+        .setGhciIServProf(haskellBuckConfig.getGhciIServProf(section))",
                "+        .setGhciLib(haskellBuckConfig.getGhciLib(section))",
                "+        .setGhciCxx(haskellBuckConfig.getGhciCxx(section))",
                "+        .setGhciCc(haskellBuckConfig.getGhciCc(section))",
                "+        .setGhciCpp(haskellBuckConfig.getGhciCpp(section))",
                "+        .setLinkStyleForStubHeader(haskellBuckConfig.getLinkStyleForStubHeader(section))",
                "+        .setCxxPlatform(cxxPlatform)",
                "+        .build();",
                "+  }",
                "+",
                "+  public ImmutableList<HaskellPlatform> getPlatforms(Iterable<CxxPlatform> cxxPlatforms) {",
                "+    return RichStream.from(cxxPlatforms)",
                "+        .map(",
                "+            cxxPlatform ->",
                "+                // We special case the \"default\" C/C++ platform to just use the \"haskell\" section.",
                "+                cxxPlatform.getFlavor().equals(DefaultCxxPlatforms.FLAVOR)",
                "+                    ? getPlatform(haskellBuckConfig.getDefaultSection(), cxxPlatform)",
                "+                    : getPlatform(",
                "+                        haskellBuckConfig.getSectionForPlatform(cxxPlatform), cxxPlatform))",
                "+        .toImmutableList();",
                "+  }",
                "+",
                "+  private ToolProvider getTool(",
                "+      Optional<ToolProvider> toolProviderFromConfig, String source, String systemName) {",
                "+    return toolProviderFromConfig.orElseGet(",
                "+        () ->",
                "+            SystemToolProvider.builder()",
                "+                .setExecutableFinder(executableFinder)",
                "+                .setSourcePathConverter(buckConfig::getPathSourcePath)",
                "+                .setName(Paths.get(systemName))",
                "+                .setEnvironment(buckConfig.getEnvironment())",
                "+                .setSource(source)",
                "+                .build());",
                "+  }",
                "+",
                "+  private ToolProvider getCompiler(String section) {",
                "+    return getTool(",
                "+        haskellBuckConfig.getCompiler(section),",
                "+        haskellBuckConfig.getCompilerSource(section),",
                "+        \"ghc\");",
                "+  }",
                "+",
                "+  private ToolProvider getLinker(String section) {",
                "+    return getTool(",
                "+        haskellBuckConfig.getLinker(section), haskellBuckConfig.getLinkerSource(section), \"ghc\");",
                "+  }",
                "+",
                "+  private ToolProvider getPackager(String section) {",
                "+    return getTool(",
                "+        haskellBuckConfig.getPackager(section),",
                "+        haskellBuckConfig.getPackagerSource(section),",
                "+        \"ghc-pkg\");",
                "+  }",
                "+",
                "+  private ToolProvider getHaddock(String section) {",
                "+    return getTool(",
                "+        haskellBuckConfig.getHaddock(section),",
                "+        haskellBuckConfig.getHaddockSource(section),",
                "+        \"haddock\");",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellPlatformsProviderFactory.java b/src/com/facebook/buck/features/haskell/HaskellPlatformsProviderFactory.java",
                "new file mode 100644",
                "index 0000000000..a18403c4b7",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellPlatformsProviderFactory.java",
                "@@ -0,0 +1,49 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.toolchain.ToolchainCreationContext;",
                "+import com.facebook.buck.toolchain.ToolchainFactory;",
                "+import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import java.util.Optional;",
                "+",
                "+public class HaskellPlatformsProviderFactory implements ToolchainFactory<HaskellPlatformsProvider> {",
                "+",
                "+  @Override",
                "+  public Optional<HaskellPlatformsProvider> createToolchain(",
                "+      ToolchainProvider toolchainProvider, ToolchainCreationContext context) {",
                "+",
                "+    CxxPlatformsProvider cxxPlatformsProviderFactory =",
                "+        toolchainProvider.getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class);",
                "+    FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();",
                "+    CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();",
                "+",
                "+    HaskellPlatformsFactory haskellPlatformsFactory =",
                "+        new HaskellPlatformsFactory(context.getBuckConfig(), context.getExecutableFinder());",
                "+",
                "+    FlavorDomain<HaskellPlatform> haskellPlatforms =",
                "+        FlavorDomain.from(",
                "+            \"Haskell platform\", haskellPlatformsFactory.getPlatforms(cxxPlatforms.getValues()));",
                "+    HaskellPlatform defaultHaskellPlatform =",
                "+        haskellPlatforms.getValue(defaultCxxPlatform.getFlavor());",
                "+",
                "+    return Optional.of(HaskellPlatformsProvider.of(defaultHaskellPlatform, haskellPlatforms));",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellPrebuiltLibraryDescription.java b/src/com/facebook/buck/features/haskell/HaskellPrebuiltLibraryDescription.java",
                "new file mode 100644",
                "index 0000000000..69dd60e114",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellPrebuiltLibraryDescription.java",
                "@@ -0,0 +1,223 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.CxxHeadersDir;",
                "+import com.facebook.buck.cxx.CxxPreprocessables;",
                "+import com.facebook.buck.cxx.CxxPreprocessorDep;",
                "+import com.facebook.buck.cxx.CxxPreprocessorInput;",
                "+import com.facebook.buck.cxx.TransitiveCxxPreprocessorInputCache;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleCreationContext;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.CommonDescriptionArg;",
                "+import com.facebook.buck.rules.Description;",
                "+import com.facebook.buck.rules.HasDeclaredDeps;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.facebook.buck.rules.args.Arg;",
                "+import com.facebook.buck.rules.args.SourcePathArg;",
                "+import com.facebook.buck.rules.args.StringArg;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "+import com.facebook.buck.versions.VersionPropagator;",
                "+import com.google.common.collect.FluentIterable;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import org.immutables.value.Value;",
                "+",
                "+public class HaskellPrebuiltLibraryDescription",
                "+    implements Description<HaskellPrebuiltLibraryDescriptionArg>,",
                "+        VersionPropagator<HaskellPrebuiltLibraryDescriptionArg> {",
                "+",
                "+  @Override",
                "+  public Class<HaskellPrebuiltLibraryDescriptionArg> getConstructorArgType() {",
                "+    return HaskellPrebuiltLibraryDescriptionArg.class;",
                "+  }",
                "+",
                "+  @Override",
                "+  public BuildRule createBuildRule(",
                "+      BuildRuleCreationContext context,",
                "+      BuildTarget buildTarget,",
                "+      BuildRuleParams params,",
                "+      HaskellPrebuiltLibraryDescriptionArg args) {",
                "+    BuildRuleResolver resolver = context.getBuildRuleResolver();",
                "+    return new PrebuiltHaskellLibrary(buildTarget, context.getProjectFilesystem(), params) {",
                "+",
                "+      private final TransitiveCxxPreprocessorInputCache transitiveCxxPreprocessorInputCache =",
                "+          new TransitiveCxxPreprocessorInputCache(this);",
                "+",
                "+      @Override",
                "+      public Iterable<BuildRule> getCompileDeps(HaskellPlatform platform) {",
                "+        return RichStream.from(args.getDeps())",
                "+            .map(resolver::getRule)",
                "+            .filter(HaskellCompileDep.class::isInstance)",
                "+            .toImmutableList();",
                "+      }",
                "+",
                "+      @Override",
                "+      public HaskellCompileInput getCompileInput(",
                "+          HaskellPlatform platform, Linker.LinkableDepType depType, boolean hsProfile) {",
                "+",
                "+        // Build the package.",
                "+        HaskellPackage.Builder pkgBuilder =",
                "+            HaskellPackage.builder()",
                "+                .setInfo(",
                "+                    HaskellPackageInfo.of(",
                "+                        getBuildTarget().getShortName(), args.getVersion(), args.getId()))",
                "+                .setPackageDb(args.getDb())",
                "+                .addAllInterfaces(args.getImportDirs());",
                "+        if (Linker.LinkableDepType.SHARED == depType) {",
                "+          pkgBuilder.addAllLibraries(args.getSharedLibs().values());",
                "+        } else {",
                "+          pkgBuilder.addAllLibraries(args.getStaticLibs());",
                "+          // If profiling is enabled, we also include their libs in the same package.",
                "+          if (args.isEnableProfiling() || hsProfile) {",
                "+            pkgBuilder.addAllLibraries(args.getProfiledStaticLibs());",
                "+          }",
                "+        }",
                "+        HaskellPackage pkg = pkgBuilder.build();",
                "+",
                "+        return HaskellCompileInput.builder()",
                "+            .addAllFlags(args.getExportedCompilerFlags())",
                "+            .addPackages(pkg)",
                "+            .build();",
                "+      }",
                "+",
                "+      @Override",
                "+      public HaskellHaddockInput getHaddockInput(HaskellPlatform platform) {",
                "+        return HaskellHaddockInput.builder()",
                "+            .addAllInterfaces(ImmutableList.of())",
                "+            .addAllOutputDirs(ImmutableList.of())",
                "+            .build();",
                "+      }",
                "+",
                "+      @Override",
                "+      public Iterable<? extends NativeLinkable> getNativeLinkableDeps(",
                "+          BuildRuleResolver ruleResolver) {",
                "+        return ImmutableList.of();",
                "+      }",
                "+",
                "+      @Override",
                "+      public Iterable<? extends NativeLinkable> getNativeLinkableExportedDeps(",
                "+          BuildRuleResolver ruleResolver) {",
                "+        return FluentIterable.from(getDeclaredDeps()).filter(NativeLinkable.class);",
                "+      }",
                "+",
                "+      @Override",
                "+      public NativeLinkableInput getNativeLinkableInput(",
                "+          CxxPlatform cxxPlatform,",
                "+          Linker.LinkableDepType type,",
                "+          boolean forceLinkWhole,",
                "+          ImmutableSet<LanguageExtensions> languageExtensions,",
                "+          BuildRuleResolver ruleResolver) {",
                "+        NativeLinkableInput.Builder builder = NativeLinkableInput.builder();",
                "+        builder.addAllArgs(StringArg.from(args.getExportedLinkerFlags()));",
                "+        if (type == Linker.LinkableDepType.SHARED) {",
                "+          builder.addAllArgs(SourcePathArg.from(args.getSharedLibs().values()));",
                "+        } else {",
                "+          Linker linker = cxxPlatform.getLd().resolve(resolver);",
                "+          ImmutableList<Arg> libArgs =",
                "+              SourcePathArg.from(",
                "+                  args.isEnableProfiling() ? args.getProfiledStaticLibs() : args.getStaticLibs());",
                "+          if (forceLinkWhole) {",
                "+            libArgs =",
                "+                RichStream.from(libArgs)",
                "+                    .flatMap(lib -> RichStream.from(linker.linkWhole(lib)))",
                "+                    .toImmutableList();",
                "+          }",
                "+          builder.addAllArgs(libArgs);",
                "+        }",
                "+        return builder.build();",
                "+      }",
                "+",
                "+      @Override",
                "+      public Linkage getPreferredLinkage(CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+        return Linkage.ANY;",
                "+      }",
                "+",
                "+      @Override",
                "+      public ImmutableMap<String, SourcePath> getSharedLibraries(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+        return args.getSharedLibs();",
                "+      }",
                "+",
                "+      @Override",
                "+      public Iterable<CxxPreprocessorDep> getCxxPreprocessorDeps(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+        return FluentIterable.from(getBuildDeps()).filter(CxxPreprocessorDep.class);",
                "+      }",
                "+",
                "+      @Override",
                "+      public CxxPreprocessorInput getCxxPreprocessorInput(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+        CxxPreprocessorInput.Builder builder = CxxPreprocessorInput.builder();",
                "+        for (SourcePath headerDir : args.getCxxHeaderDirs()) {",
                "+          builder.addIncludes(CxxHeadersDir.of(CxxPreprocessables.IncludeType.SYSTEM, headerDir));",
                "+        }",
                "+        return builder.build();",
                "+      }",
                "+",
                "+      @Override",
                "+      public ImmutableMap<BuildTarget, CxxPreprocessorInput> getTransitiveCxxPreprocessorInput(",
                "+          CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver) {",
                "+        return transitiveCxxPreprocessorInputCache.getUnchecked(cxxPlatform, ruleResolver);",
                "+      }",
                "+    };",
                "+  }",
                "+",
                "+  @BuckStyleImmutable",
                "+  @Value.Immutable",
                "+  interface AbstractHaskellPrebuiltLibraryDescriptionArg",
                "+      extends CommonDescriptionArg, HasDeclaredDeps {",
                "+    String getVersion();",
                "+",
                "+    @Value.Default",
                "+    default String getId() {",
                "+      return String.format(\"%s-%s\", getName(), getVersion());",
                "+    }",
                "+",
                "+    SourcePath getDb();",
                "+",
                "+    ImmutableList<SourcePath> getImportDirs();",
                "+",
                "+    ImmutableList<SourcePath> getStaticLibs();",
                "+",
                "+    ImmutableList<SourcePath> getProfiledStaticLibs();",
                "+",
                "+    ImmutableMap<String, SourcePath> getSharedLibs();",
                "+",
                "+    ImmutableList<String> getExportedLinkerFlags();",
                "+",
                "+    ImmutableList<String> getExportedCompilerFlags();",
                "+",
                "+    @Value.NaturalOrder",
                "+    ImmutableSortedSet<SourcePath> getCxxHeaderDirs();",
                "+",
                "+    @Value.Default",
                "+    default boolean isEnableProfiling() {",
                "+      return false;",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/HaskellToolchainSupplier.java b/src/com/facebook/buck/features/haskell/HaskellToolchainSupplier.java",
                "new file mode 100644",
                "index 0000000000..01ac37e80e",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/HaskellToolchainSupplier.java",
                "@@ -0,0 +1,36 @@",
                "+/*",
                "+ * Copyright 2017-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.toolchain.ToolchainDescriptor;",
                "+import com.facebook.buck.toolchain.ToolchainSupplier;",
                "+import java.util.Collection;",
                "+import java.util.Collections;",
                "+import org.pf4j.Extension;",
                "+",
                "+@Extension",
                "+public class HaskellToolchainSupplier implements ToolchainSupplier {",
                "+",
                "+  @Override",
                "+  public Collection<ToolchainDescriptor<?>> getToolchainDescriptor() {",
                "+    return Collections.singleton(",
                "+        ToolchainDescriptor.of(",
                "+            HaskellPlatformsProvider.DEFAULT_NAME,",
                "+            HaskellPlatformsProvider.class,",
                "+            HaskellPlatformsProviderFactory.class));",
                "+  }",
                "+}",
                "diff --git a/src/com/facebook/buck/features/haskell/PrebuiltHaskellLibrary.java b/src/com/facebook/buck/features/haskell/PrebuiltHaskellLibrary.java",
                "new file mode 100644",
                "index 0000000000..c910c0048f",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/features/haskell/PrebuiltHaskellLibrary.java",
                "@@ -0,0 +1,33 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.CxxPreprocessorDep;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.BuildRuleParams;",
                "+import com.facebook.buck.rules.NoopBuildRuleWithDeclaredAndExtraDeps;",
                "+",
                "+public abstract class PrebuiltHaskellLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "+    implements HaskellCompileDep, NativeLinkable, CxxPreprocessorDep {",
                "+",
                "+  public PrebuiltHaskellLibrary(",
                "+      BuildTarget buildTarget, ProjectFilesystem projectFilesystem, BuildRuleParams params) {",
                "+    super(buildTarget, projectFilesystem, params);",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/haskell/BUCK b/test/com/facebook/buck/features/haskell/BUCK",
                "new file mode 100644",
                "index 0000000000..008c7a6a88",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/BUCK",
                "@@ -0,0 +1,270 @@",
                "+load(\"//tools/build_rules:java_rules.bzl\", \"java_immutables_library\", \"java_test\")",
                "+",
                "+java_immutables_library(",
                "+    name = \"testutil\",",
                "+    srcs = glob(",
                "+        [\"*.java\"],",
                "+        exclude = [\"*Test.java\"],",
                "+    ),",
                "+    deps = [",
                "+        \"//src-gen:thrift\",",
                "+        \"//src/com/facebook/buck/android:helpers\",",
                "+        \"//src/com/facebook/buck/android:rules\",",
                "+        \"//src/com/facebook/buck/android:split_dex\",",
                "+        \"//src/com/facebook/buck/android:steps\",",
                "+        \"//src/com/facebook/buck/android:utils\",",
                "+        \"//src/com/facebook/buck/android/aapt:aapt\",",
                "+        \"//src/com/facebook/buck/android/redex:options\",",
                "+        \"//src/com/facebook/buck/apple/project_generator:project_generator\",",
                "+        \"//src/com/facebook/buck/apple/xcode:xcode\",",
                "+        \"//src/com/facebook/buck/artifact_cache:artifact_cache\",",
                "+        \"//src/com/facebook/buck/config:config\",",
                "+        \"//src/com/facebook/buck/counters:counters\",",
                "+        \"//src/com/facebook/buck/cxx:rules\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain:toolchain\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/linker:linker\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/nativelink:nativelink\",",
                "+        \"//src/com/facebook/buck/distributed:distributed\",",
                "+        \"//src/com/facebook/buck/doctor/config:config\",",
                "+        \"//src/com/facebook/buck/event:event\",",
                "+        \"//src/com/facebook/buck/event:interfaces\",",
                "+        \"//src/com/facebook/buck/event/external:external_lib\",",
                "+        \"//src/com/facebook/buck/event/listener:BroadcastEventListener\",",
                "+        \"//src/com/facebook/buck/event/listener:listener\",",
                "+        \"//src/com/facebook/buck/features/haskell:haskell\",",
                "+        \"//src/com/facebook/buck/graph:graph\",",
                "+        \"//src/com/facebook/buck/io:executable-finder\",",
                "+        \"//src/com/facebook/buck/io:io\",",
                "+        \"//src/com/facebook/buck/io:transport\",",
                "+        \"//src/com/facebook/buck/io:watchman\",",
                "+        \"//src/com/facebook/buck/json:json\",",
                "+        \"//src/com/facebook/buck/jvm/core:core\",",
                "+        \"//src/com/facebook/buck/jvm/java:config\",",
                "+        \"//src/com/facebook/buck/jvm/java:javac-sink\",",
                "+        \"//src/com/facebook/buck/jvm/java:packagefinder\",",
                "+        \"//src/com/facebook/buck/jvm/java:rules\",",
                "+        \"//src/com/facebook/buck/jvm/java:steps\",",
                "+        \"//src/com/facebook/buck/jvm/java:support\",",
                "+        \"//src/com/facebook/buck/jvm/java/abi/source/api:api\",",
                "+        \"//src/com/facebook/buck/jvm/java/autodeps:SymbolExtractor\",",
                "+        \"//src/com/facebook/buck/jvm/java/autodeps:autodeps\",",
                "+        \"//src/com/facebook/buck/jvm/java/classes:classes\",",
                "+        \"//src/com/facebook/buck/jvm/kotlin:kotlin\",",
                "+        \"//src/com/facebook/buck/jvm/scala:scala\",",
                "+        \"//src/com/facebook/buck/log:log\",",
                "+        \"//src/com/facebook/buck/maven:util\",",
                "+        \"//src/com/facebook/buck/model:build_id\",",
                "+        \"//src/com/facebook/buck/model:model\",",
                "+        \"//src/com/facebook/buck/parser:config\",",
                "+        \"//src/com/facebook/buck/parser:parser\",",
                "+        \"//src/com/facebook/buck/parser:rule_pattern\",",
                "+        \"//src/com/facebook/buck/query:query\",",
                "+        \"//src/com/facebook/buck/rules:cli\",",
                "+        \"//src/com/facebook/buck/rules:rules\",",
                "+        \"//src/com/facebook/buck/rules:types\",",
                "+        \"//src/com/facebook/buck/rules/args:args\",",
                "+        \"//src/com/facebook/buck/rules/coercer:coercer\",",
                "+        \"//src/com/facebook/buck/rules/coercer:interface\",",
                "+        \"//src/com/facebook/buck/rules/keys:keys\",",
                "+        \"//src/com/facebook/buck/rules/macros:macros\",",
                "+        \"//src/com/facebook/buck/rules/macros:types\",",
                "+        \"//src/com/facebook/buck/rules/query:types\",",
                "+        \"//src/com/facebook/buck/shell:rules\",",
                "+        \"//src/com/facebook/buck/shell:steps\",",
                "+        \"//src/com/facebook/buck/shell:worker\",",
                "+        \"//src/com/facebook/buck/shell:worker_tool\",",
                "+        \"//src/com/facebook/buck/slb:slb\",",
                "+        \"//src/com/facebook/buck/step:step\",",
                "+        \"//src/com/facebook/buck/swift:swift\",",
                "+        \"//src/com/facebook/buck/test:test\",",
                "+        \"//src/com/facebook/buck/test/result/type:type\",",
                "+        \"//src/com/facebook/buck/test/selectors:selectors\",",
                "+        \"//src/com/facebook/buck/util:exceptions\",",
                "+        \"//src/com/facebook/buck/util:io\",",
                "+        \"//src/com/facebook/buck/util:packaged_resource\",",
                "+        \"//src/com/facebook/buck/util:process_executor\",",
                "+        \"//src/com/facebook/buck/util:util\",",
                "+        \"//src/com/facebook/buck/util/cache:cache\",",
                "+        \"//src/com/facebook/buck/util/concurrent:concurrent\",",
                "+        \"//src/com/facebook/buck/util/environment:environment\",",
                "+        \"//src/com/facebook/buck/util/environment:platform\",",
                "+        \"//src/com/facebook/buck/util/immutables:immutables\",",
                "+        \"//src/com/facebook/buck/util/network/hostname:hostname\",",
                "+        \"//src/com/facebook/buck/util/sha1:sha1\",",
                "+        \"//src/com/facebook/buck/util/trace:trace\",",
                "+        \"//src/com/facebook/buck/util/unit:unit\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_config\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_generator\",",
                "+        \"//src/com/facebook/buck/versions:translator\",",
                "+        \"//src/com/facebook/buck/versions:types\",",
                "+        \"//src/com/facebook/buck/versions:versions\",",
                "+        \"//src/com/facebook/buck/worker:worker_job_params\",",
                "+        \"//src/com/facebook/buck/worker:worker_pool_factory\",",
                "+        \"//src/com/facebook/buck/worker:worker_process\",",
                "+        \"//test/com/facebook/buck/cxx:testutil\",",
                "+        \"//test/com/facebook/buck/cxx/toolchain:testutil\",",
                "+        \"//test/com/facebook/buck/rules:testutil\",",
                "+        \"//test/com/facebook/buck/testutil/integration:util\",",
                "+        \"//test/com/facebook/buck/toolchain/impl:testutil\",",
                "+        \"//third-party/java/aether:aether-api\",",
                "+        \"//third-party/java/android:ddmlib\",",
                "+        \"//third-party/java/android:tools-sdk-common\",",
                "+        \"//third-party/java/aosp:aosp\",",
                "+        \"//third-party/java/args4j:args4j\",",
                "+        \"//third-party/java/asm:asm\",",
                "+        \"//third-party/java/dd-plist:dd-plist\",",
                "+        \"//third-party/java/guava:guava\",",
                "+        \"//third-party/java/hamcrest:java-hamcrest\",",
                "+        \"//third-party/java/immutables:immutables\",",
                "+        \"//third-party/java/infer-annotations:infer-annotations\",",
                "+        \"//third-party/java/jackson:jackson-annotations\",",
                "+        \"//third-party/java/jackson:jackson-core\",",
                "+        \"//third-party/java/jackson:jackson-databind\",",
                "+        \"//third-party/java/jna:jna\",",
                "+        \"//third-party/java/jsr:jsr305\",",
                "+        \"//third-party/java/junit:junit\",",
                "+        \"//third-party/java/maven:maven-model\",",
                "+        \"//third-party/java/nailgun:nailgun\",",
                "+        \"//third-party/java/nuprocess:nuprocess\",",
                "+        \"//third-party/java/okhttp:okhttp\",",
                "+        \"//third-party/java/okio:okio\",",
                "+        \"//third-party/java/stringtemplate:stringtemplate\",",
                "+        \"//third-party/java/thrift:libthrift\",",
                "+    ],",
                "+)",
                "+",
                "+java_test(",
                "+    name = \"haskell\",",
                "+    srcs = glob([\"*Test.java\"]),",
                "+    deps = [",
                "+        \"//src-gen:thrift\",",
                "+        \"//src/com/facebook/buck/android:helpers\",",
                "+        \"//src/com/facebook/buck/android:rules\",",
                "+        \"//src/com/facebook/buck/android:split_dex\",",
                "+        \"//src/com/facebook/buck/android:steps\",",
                "+        \"//src/com/facebook/buck/android:utils\",",
                "+        \"//src/com/facebook/buck/android/aapt:aapt\",",
                "+        \"//src/com/facebook/buck/android/redex:options\",",
                "+        \"//src/com/facebook/buck/apple/project_generator:project_generator\",",
                "+        \"//src/com/facebook/buck/apple/xcode:xcode\",",
                "+        \"//src/com/facebook/buck/artifact_cache:artifact_cache\",",
                "+        \"//src/com/facebook/buck/config:config\",",
                "+        \"//src/com/facebook/buck/counters:counters\",",
                "+        \"//src/com/facebook/buck/cxx:rules\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain:toolchain\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/impl:impl\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/linker:linker\",",
                "+        \"//src/com/facebook/buck/cxx/toolchain/nativelink:nativelink\",",
                "+        \"//src/com/facebook/buck/distributed:distributed\",",
                "+        \"//src/com/facebook/buck/doctor/config:config\",",
                "+        \"//src/com/facebook/buck/event:event\",",
                "+        \"//src/com/facebook/buck/event:interfaces\",",
                "+        \"//src/com/facebook/buck/event/external:external_lib\",",
                "+        \"//src/com/facebook/buck/event/listener:BroadcastEventListener\",",
                "+        \"//src/com/facebook/buck/event/listener:listener\",",
                "+        \"//src/com/facebook/buck/features/haskell:haskell\",",
                "+        \"//src/com/facebook/buck/graph:graph\",",
                "+        \"//src/com/facebook/buck/io:executable-finder\",",
                "+        \"//src/com/facebook/buck/io:io\",",
                "+        \"//src/com/facebook/buck/io:transport\",",
                "+        \"//src/com/facebook/buck/io:watchman\",",
                "+        \"//src/com/facebook/buck/json:json\",",
                "+        \"//src/com/facebook/buck/jvm/core:core\",",
                "+        \"//src/com/facebook/buck/jvm/java:config\",",
                "+        \"//src/com/facebook/buck/jvm/java:javac-sink\",",
                "+        \"//src/com/facebook/buck/jvm/java:packagefinder\",",
                "+        \"//src/com/facebook/buck/jvm/java:rules\",",
                "+        \"//src/com/facebook/buck/jvm/java:steps\",",
                "+        \"//src/com/facebook/buck/jvm/java:support\",",
                "+        \"//src/com/facebook/buck/jvm/java/abi/source/api:api\",",
                "+        \"//src/com/facebook/buck/jvm/java/autodeps:SymbolExtractor\",",
                "+        \"//src/com/facebook/buck/jvm/java/autodeps:autodeps\",",
                "+        \"//src/com/facebook/buck/jvm/java/classes:classes\",",
                "+        \"//src/com/facebook/buck/jvm/kotlin:kotlin\",",
                "+        \"//src/com/facebook/buck/jvm/scala:scala\",",
                "+        \"//src/com/facebook/buck/log:log\",",
                "+        \"//src/com/facebook/buck/maven:util\",",
                "+        \"//src/com/facebook/buck/model:build_id\",",
                "+        \"//src/com/facebook/buck/model:model\",",
                "+        \"//src/com/facebook/buck/parser:config\",",
                "+        \"//src/com/facebook/buck/parser:parser\",",
                "+        \"//src/com/facebook/buck/parser:rule_pattern\",",
                "+        \"//src/com/facebook/buck/query:query\",",
                "+        \"//src/com/facebook/buck/rules:cli\",",
                "+        \"//src/com/facebook/buck/rules:rules\",",
                "+        \"//src/com/facebook/buck/rules:types\",",
                "+        \"//src/com/facebook/buck/rules/args:args\",",
                "+        \"//src/com/facebook/buck/rules/coercer:coercer\",",
                "+        \"//src/com/facebook/buck/rules/coercer:interface\",",
                "+        \"//src/com/facebook/buck/rules/keys:keys\",",
                "+        \"//src/com/facebook/buck/rules/macros:macros\",",
                "+        \"//src/com/facebook/buck/rules/macros:types\",",
                "+        \"//src/com/facebook/buck/rules/query:types\",",
                "+        \"//src/com/facebook/buck/shell:rules\",",
                "+        \"//src/com/facebook/buck/shell:steps\",",
                "+        \"//src/com/facebook/buck/shell:worker\",",
                "+        \"//src/com/facebook/buck/shell:worker_tool\",",
                "+        \"//src/com/facebook/buck/slb:slb\",",
                "+        \"//src/com/facebook/buck/step:step\",",
                "+        \"//src/com/facebook/buck/swift:swift\",",
                "+        \"//src/com/facebook/buck/test:test\",",
                "+        \"//src/com/facebook/buck/test/result/type:type\",",
                "+        \"//src/com/facebook/buck/test/selectors:selectors\",",
                "+        \"//src/com/facebook/buck/util:exceptions\",",
                "+        \"//src/com/facebook/buck/util:io\",",
                "+        \"//src/com/facebook/buck/util:packaged_resource\",",
                "+        \"//src/com/facebook/buck/util:process_executor\",",
                "+        \"//src/com/facebook/buck/util:util\",",
                "+        \"//src/com/facebook/buck/util/cache:cache\",",
                "+        \"//src/com/facebook/buck/util/concurrent:concurrent\",",
                "+        \"//src/com/facebook/buck/util/environment:environment\",",
                "+        \"//src/com/facebook/buck/util/environment:platform\",",
                "+        \"//src/com/facebook/buck/util/immutables:immutables\",",
                "+        \"//src/com/facebook/buck/util/network/hostname:hostname\",",
                "+        \"//src/com/facebook/buck/util/sha1:sha1\",",
                "+        \"//src/com/facebook/buck/util/trace:trace\",",
                "+        \"//src/com/facebook/buck/util/unit:unit\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_config\",",
                "+        \"//src/com/facebook/buck/util/versioncontrol:versioncontrol_generator\",",
                "+        \"//src/com/facebook/buck/versions:translator\",",
                "+        \"//src/com/facebook/buck/versions:types\",",
                "+        \"//src/com/facebook/buck/versions:versions\",",
                "+        \"//src/com/facebook/buck/worker:worker_job_params\",",
                "+        \"//src/com/facebook/buck/worker:worker_pool_factory\",",
                "+        \"//src/com/facebook/buck/worker:worker_process\",",
                "+        \"//test/com/facebook/buck/config:FakeBuckConfig\",",
                "+        \"//test/com/facebook/buck/cxx:testutil\",",
                "+        \"//test/com/facebook/buck/cxx/toolchain:testutil\",",
                "+        \"//test/com/facebook/buck/features/haskell:testutil\",",
                "+        \"//test/com/facebook/buck/model:testutil\",",
                "+        \"//test/com/facebook/buck/rules:testutil\",",
                "+        \"//test/com/facebook/buck/testutil:testutil\",",
                "+        \"//test/com/facebook/buck/testutil/integration:util\",",
                "+        \"//third-party/java/aether:aether-api\",",
                "+        \"//third-party/java/android:ddmlib\",",
                "+        \"//third-party/java/android:tools-sdk-common\",",
                "+        \"//third-party/java/aosp:aosp\",",
                "+        \"//third-party/java/args4j:args4j\",",
                "+        \"//third-party/java/asm:asm\",",
                "+        \"//third-party/java/dd-plist:dd-plist\",",
                "+        \"//third-party/java/guava:guava\",",
                "+        \"//third-party/java/hamcrest:java-hamcrest\",",
                "+        \"//third-party/java/immutables:immutables\",",
                "+        \"//third-party/java/infer-annotations:infer-annotations\",",
                "+        \"//third-party/java/jackson:jackson-annotations\",",
                "+        \"//third-party/java/jackson:jackson-core\",",
                "+        \"//third-party/java/jackson:jackson-databind\",",
                "+        \"//third-party/java/jna:jna\",",
                "+        \"//third-party/java/jsr:jsr305\",",
                "+        \"//third-party/java/junit:junit\",",
                "+        \"//third-party/java/maven:maven-model\",",
                "+        \"//third-party/java/nailgun:nailgun\",",
                "+        \"//third-party/java/nuprocess:nuprocess\",",
                "+        \"//third-party/java/okhttp:okhttp\",",
                "+        \"//third-party/java/okio:okio\",",
                "+        \"//third-party/java/stringtemplate:stringtemplate\",",
                "+        \"//third-party/java/thrift:libthrift\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/features/haskell/HaskellBinaryBuilder.java b/test/com/facebook/buck/features/haskell/HaskellBinaryBuilder.java",
                "new file mode 100644",
                "index 0000000000..e2372142e4",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/HaskellBinaryBuilder.java",
                "@@ -0,0 +1,68 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.rules.AbstractNodeBuilder;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.query.Query;",
                "+import com.facebook.buck.toolchain.impl.ToolchainProviderBuilder;",
                "+import com.google.common.collect.ImmutableList;",
                "+import java.util.Optional;",
                "+",
                "+public class HaskellBinaryBuilder",
                "+    extends AbstractNodeBuilder<",
                "+        HaskellBinaryDescriptionArg.Builder, HaskellBinaryDescriptionArg, HaskellBinaryDescription,",
                "+        BuildRule> {",
                "+",
                "+  public HaskellBinaryBuilder(",
                "+      BuildTarget target,",
                "+      HaskellPlatform defaultPlatform,",
                "+      FlavorDomain<HaskellPlatform> platforms,",
                "+      CxxBuckConfig cxxBuckConfig) {",
                "+    super(",
                "+        new HaskellBinaryDescription(",
                "+            new ToolchainProviderBuilder()",
                "+                .withToolchain(",
                "+                    HaskellPlatformsProvider.DEFAULT_NAME,",
                "+                    HaskellPlatformsProvider.of(defaultPlatform, platforms))",
                "+                .build(),",
                "+            cxxBuckConfig),",
                "+        target);",
                "+  }",
                "+",
                "+  public HaskellBinaryBuilder(BuildTarget target) {",
                "+    this(",
                "+        target,",
                "+        HaskellTestUtils.DEFAULT_PLATFORM,",
                "+        HaskellTestUtils.DEFAULT_PLATFORMS,",
                "+        CxxPlatformUtils.DEFAULT_CONFIG);",
                "+  }",
                "+",
                "+  public HaskellBinaryBuilder setCompilerFlags(ImmutableList<String> flags) {",
                "+    getArgForPopulating().setCompilerFlags(flags);",
                "+    return this;",
                "+  }",
                "+",
                "+  public HaskellBinaryBuilder setDepQuery(Query depQuery) {",
                "+    getArgForPopulating().setDepsQuery(Optional.of(depQuery));",
                "+    return this;",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/haskell/HaskellBinaryDescriptionTest.java b/test/com/facebook/buck/features/haskell/HaskellBinaryDescriptionTest.java",
                "new file mode 100644",
                "index 0000000000..58d90021e7",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/HaskellBinaryDescriptionTest.java",
                "@@ -0,0 +1,72 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import static org.junit.Assert.assertThat;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.TargetGraph;",
                "+import com.facebook.buck.rules.TestBuildRuleResolver;",
                "+import com.facebook.buck.rules.query.Query;",
                "+import com.facebook.buck.testutil.TargetGraphFactory;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Test;",
                "+",
                "+public class HaskellBinaryDescriptionTest {",
                "+",
                "+  @Test",
                "+  public void compilerFlags() {",
                "+    BuildTarget target = BuildTargetFactory.newInstance(\"//:rule\");",
                "+    String flag = \"-compiler-flag\";",
                "+    HaskellBinaryBuilder builder =",
                "+        new HaskellBinaryBuilder(target).setCompilerFlags(ImmutableList.of(flag));",
                "+    BuildRuleResolver resolver =",
                "+        new TestBuildRuleResolver(TargetGraphFactory.newInstance(builder.build()));",
                "+    builder.build(resolver);",
                "+    BuildTarget compileTarget =",
                "+        HaskellDescriptionUtils.getCompileBuildTarget(",
                "+            target, HaskellTestUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, false);",
                "+    HaskellCompileRule rule = resolver.getRuleWithType(compileTarget, HaskellCompileRule.class);",
                "+    assertThat(rule.getFlags(), Matchers.hasItem(flag));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void depQuery() {",
                "+    HaskellLibraryBuilder transitiveDepBuilder =",
                "+        new HaskellLibraryBuilder(BuildTargetFactory.newInstance(\"//:transitive_dep\"));",
                "+    HaskellLibraryBuilder depBuilder =",
                "+        new HaskellLibraryBuilder(BuildTargetFactory.newInstance(\"//:dep\"))",
                "+            .setDeps(ImmutableSortedSet.of(transitiveDepBuilder.getTarget()));",
                "+    HaskellBinaryBuilder builder =",
                "+        new HaskellBinaryBuilder(BuildTargetFactory.newInstance(\"//:rule\"))",
                "+            .setDepQuery(Query.of(\"filter(transitive, deps(//:dep))\"));",
                "+    TargetGraph targetGraph =",
                "+        TargetGraphFactory.newInstance(",
                "+            transitiveDepBuilder.build(), depBuilder.build(), builder.build());",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    HaskellLibrary transitiveDep = transitiveDepBuilder.build(resolver, targetGraph);",
                "+    HaskellLibrary dep = depBuilder.build(resolver, targetGraph);",
                "+    HaskellBinary binary = (HaskellBinary) builder.build(resolver, targetGraph);",
                "+    assertThat(binary.getBinaryDeps(), Matchers.hasItem(transitiveDep));",
                "+    assertThat(binary.getBinaryDeps(), Matchers.not(Matchers.hasItem(dep)));",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/haskell/HaskellBinaryIntegrationTest.java b/test/com/facebook/buck/features/haskell/HaskellBinaryIntegrationTest.java",
                "new file mode 100644",
                "index 0000000000..66031adcb8",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/HaskellBinaryIntegrationTest.java",
                "@@ -0,0 +1,132 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import static org.junit.Assert.assertThat;",
                "+import static org.junit.Assume.assumeThat;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.testutil.ProcessResult;",
                "+import com.facebook.buck.testutil.TemporaryPaths;",
                "+import com.facebook.buck.testutil.integration.ProjectWorkspace;",
                "+import com.facebook.buck.testutil.integration.TestDataHelper;",
                "+import com.facebook.buck.util.environment.Platform;",
                "+import com.google.common.collect.ImmutableList;",
                "+import java.io.IOException;",
                "+import java.util.Collection;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Before;",
                "+import org.junit.Rule;",
                "+import org.junit.Test;",
                "+import org.junit.runner.RunWith;",
                "+import org.junit.runners.Parameterized;",
                "+",
                "+@RunWith(Parameterized.class)",
                "+public class HaskellBinaryIntegrationTest {",
                "+",
                "+  @Parameterized.Parameters(name = \"{0}\")",
                "+  public static Collection<Object[]> data() {",
                "+    return ImmutableList.copyOf(",
                "+        new Object[][] {",
                "+          {Linker.LinkableDepType.STATIC},",
                "+          {Linker.LinkableDepType.STATIC_PIC},",
                "+          {Linker.LinkableDepType.SHARED},",
                "+        });",
                "+  }",
                "+",
                "+  private ProjectWorkspace workspace;",
                "+",
                "+  @Rule public TemporaryPaths tmp = new TemporaryPaths();",
                "+",
                "+  @Parameterized.Parameter(value = 0)",
                "+  public Linker.LinkableDepType linkStyle;",
                "+",
                "+  private String getLinkFlavor() {",
                "+    return linkStyle.toString().toLowerCase().replace('_', '-');",
                "+  }",
                "+",
                "+  @Before",
                "+  public void setUp() throws IOException, InterruptedException {",
                "+",
                "+    // We don't currently support windows.",
                "+    assumeThat(Platform.detect(), Matchers.not(Platform.WINDOWS));",
                "+",
                "+    // Verify that the system contains a compiler.",
                "+    HaskellVersion version = HaskellTestUtils.assumeSystemCompiler();",
                "+",
                "+    // Setup the workspace.",
                "+    workspace = TestDataHelper.createProjectWorkspaceForScenario(this, \"binary_test\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    // Write out the `.buckconfig`.",
                "+    workspace.writeContentsToPath(HaskellTestUtils.formatHaskellConfig(version), \".buckconfig\");",
                "+  }",
                "+",
                "+  @Test",
                "+  public void simple() throws IOException {",
                "+    ProcessResult result = workspace.runBuckCommand(\"run\", \"//:foo#default,\" + getLinkFlavor());",
                "+    result.assertSuccess();",
                "+    assertThat(result.getStdout(), Matchers.equalTo(\"5\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void ghcLinkerFlags() throws IOException {",
                "+    ProcessResult result =",
                "+        workspace.runBuckCommand(",
                "+            \"run\", \"//:foo_rtsflags#default,\" + getLinkFlavor(), \"-- +RTS -A512m -RTS\");",
                "+    result.assertSuccess();",
                "+    assertThat(result.getStdout(), Matchers.equalTo(\"5\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void dependency() throws IOException {",
                "+    ProcessResult result =",
                "+        workspace.runBuckCommand(\"run\", \"//:dependent#default,\" + getLinkFlavor());",
                "+    result.assertSuccess();",
                "+    assertThat(result.getStdout(), Matchers.equalTo(\"5\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void foreign() throws IOException {",
                "+    ProcessResult result = workspace.runBuckCommand(\"run\", \"//:foreign#default,\" + getLinkFlavor());",
                "+    result.assertSuccess();",
                "+    assertThat(result.getStdout(), Matchers.equalTo(\"hello world\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void cxxGenrule() throws IOException {",
                "+    ProcessResult result =",
                "+        workspace.runBuckCommand(",
                "+            \"run\", \"-c\", \"cxx.cppflags=-some-flag\", \"//:gen_main#default,\" + getLinkFlavor());",
                "+    result.assertSuccess();",
                "+    assertThat(result.getStdout().trim(), Matchers.equalTo(\"-some-flag\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void cHeader() throws IOException {",
                "+    ProcessResult result =",
                "+        workspace.runBuckCommand(\"run\", \"//:hs_header#default,\" + getLinkFlavor());",
                "+    result.assertSuccess();",
                "+    assertThat(result.getStdout(), Matchers.equalTo(\"hello\"));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void buildError() throws IOException {",
                "+    ProcessResult result = workspace.runBuckBuild(\"//:error#default,\" + getLinkFlavor());",
                "+    result.assertFailure();",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/haskell/HaskellLibraryBuilder.java b/test/com/facebook/buck/features/haskell/HaskellLibraryBuilder.java",
                "new file mode 100644",
                "index 0000000000..941fcbefac",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/HaskellLibraryBuilder.java",
                "@@ -0,0 +1,90 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.rules.AbstractNodeBuilder;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.toolchain.impl.ToolchainProviderBuilder;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+",
                "+public class HaskellLibraryBuilder",
                "+    extends AbstractNodeBuilder<",
                "+        HaskellLibraryDescriptionArg.Builder, HaskellLibraryDescriptionArg,",
                "+        HaskellLibraryDescription, HaskellLibrary> {",
                "+",
                "+  public HaskellLibraryBuilder(",
                "+      BuildTarget target,",
                "+      HaskellPlatform defaultPlatform,",
                "+      FlavorDomain<HaskellPlatform> platforms,",
                "+      CxxBuckConfig cxxBuckConfig) {",
                "+    super(",
                "+        new HaskellLibraryDescription(",
                "+            new ToolchainProviderBuilder()",
                "+                .withToolchain(",
                "+                    HaskellPlatformsProvider.DEFAULT_NAME,",
                "+                    HaskellPlatformsProvider.of(defaultPlatform, platforms))",
                "+                .build(),",
                "+            cxxBuckConfig),",
                "+        target);",
                "+  }",
                "+",
                "+  public HaskellLibraryBuilder(BuildTarget target) {",
                "+    this(",
                "+        target,",
                "+        HaskellTestUtils.DEFAULT_PLATFORM,",
                "+        HaskellTestUtils.DEFAULT_PLATFORMS,",
                "+        CxxPlatformUtils.DEFAULT_CONFIG);",
                "+  }",
                "+",
                "+  public HaskellLibraryBuilder setSrcs(SourceList srcs) {",
                "+    getArgForPopulating().setSrcs(srcs);",
                "+    return this;",
                "+  }",
                "+",
                "+  public HaskellLibraryBuilder setCompilerFlags(ImmutableList<String> flags) {",
                "+    getArgForPopulating().setCompilerFlags(flags);",
                "+    return this;",
                "+  }",
                "+",
                "+  public HaskellLibraryBuilder setLinkWhole(boolean linkWhole) {",
                "+    getArgForPopulating().setLinkWhole(linkWhole);",
                "+    return this;",
                "+  }",
                "+",
                "+  public HaskellLibraryBuilder setPreferredLinkage(NativeLinkable.Linkage preferredLinkage) {",
                "+    getArgForPopulating().setPreferredLinkage(preferredLinkage);",
                "+    return this;",
                "+  }",
                "+",
                "+  public HaskellLibraryBuilder setDeps(ImmutableSortedSet<BuildTarget> deps) {",
                "+    getArgForPopulating().setDeps(deps);",
                "+    return this;",
                "+  }",
                "+",
                "+  public HaskellLibraryBuilder setPlatformDeps(",
                "+      PatternMatchedCollection<ImmutableSortedSet<BuildTarget>> platformDeps) {",
                "+    getArgForPopulating().setPlatformDeps(platformDeps);",
                "+    return this;",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/haskell/HaskellLibraryDescriptionTest.java b/test/com/facebook/buck/features/haskell/HaskellLibraryDescriptionTest.java",
                "new file mode 100644",
                "index 0000000000..94f6e04234",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/HaskellLibraryDescriptionTest.java",
                "@@ -0,0 +1,275 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import static org.hamcrest.Matchers.hasItems;",
                "+import static org.hamcrest.Matchers.not;",
                "+import static org.junit.Assert.assertThat;",
                "+",
                "+import com.facebook.buck.config.FakeBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkable;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.facebook.buck.rules.BuildRule;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.BuildableSupport;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.FakeSourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.TargetGraph;",
                "+import com.facebook.buck.rules.TestBuildRuleResolver;",
                "+import com.facebook.buck.rules.args.Arg;",
                "+import com.facebook.buck.rules.args.StringArg;",
                "+import com.facebook.buck.rules.coercer.PatternMatchedCollection;",
                "+import com.facebook.buck.rules.coercer.SourceList;",
                "+import com.facebook.buck.testutil.TargetGraphFactory;",
                "+import com.google.common.base.Preconditions;",
                "+import com.google.common.base.Predicates;",
                "+import com.google.common.collect.FluentIterable;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableSet;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import java.nio.file.Path;",
                "+import java.util.regex.Pattern;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Test;",
                "+",
                "+public class HaskellLibraryDescriptionTest {",
                "+",
                "+  @Test",
                "+  public void compilerFlags() {",
                "+    BuildTarget target = BuildTargetFactory.newInstance(\"//:rule\");",
                "+    String flag = \"-compiler-flag\";",
                "+    HaskellLibraryBuilder builder =",
                "+        new HaskellLibraryBuilder(target).setCompilerFlags(ImmutableList.of(flag));",
                "+    BuildRuleResolver resolver =",
                "+        new TestBuildRuleResolver(TargetGraphFactory.newInstance(builder.build()));",
                "+    HaskellLibrary library = builder.build(resolver);",
                "+    library.getCompileInput(",
                "+        HaskellTestUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, false);",
                "+    BuildTarget compileTarget =",
                "+        HaskellDescriptionUtils.getCompileBuildTarget(",
                "+            target, HaskellTestUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, false);",
                "+    HaskellCompileRule rule = resolver.getRuleWithType(compileTarget, HaskellCompileRule.class);",
                "+    assertThat(rule.getFlags(), Matchers.hasItem(flag));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void targetsAndOutputsAreDifferentBetweenLinkStyles() throws Exception {",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(TargetGraphFactory.newInstance());",
                "+    BuildTarget baseTarget = BuildTargetFactory.newInstance(\"//:rule\");",
                "+",
                "+    BuildRule staticLib =",
                "+        new HaskellLibraryBuilder(",
                "+                baseTarget.withFlavors(",
                "+                    CxxPlatformUtils.DEFAULT_PLATFORM.getFlavor(),",
                "+                    HaskellLibraryDescription.Type.STATIC.getFlavor()))",
                "+            .build(resolver);",
                "+    BuildRule staticPicLib =",
                "+        new HaskellLibraryBuilder(",
                "+                baseTarget.withFlavors(",
                "+                    CxxPlatformUtils.DEFAULT_PLATFORM.getFlavor(),",
                "+                    HaskellLibraryDescription.Type.STATIC_PIC.getFlavor()))",
                "+            .build(resolver);",
                "+    BuildRule sharedLib =",
                "+        new HaskellLibraryBuilder(",
                "+                baseTarget.withFlavors(",
                "+                    CxxPlatformUtils.DEFAULT_PLATFORM.getFlavor(),",
                "+                    HaskellLibraryDescription.Type.SHARED.getFlavor()))",
                "+            .build(resolver);",
                "+",
                "+    SourcePathResolver pathResolver =",
                "+        DefaultSourcePathResolver.from(new SourcePathRuleFinder(resolver));",
                "+    ImmutableList<Path> outputs =",
                "+        ImmutableList.of(",
                "+                Preconditions.checkNotNull(staticLib.getSourcePathToOutput()),",
                "+                Preconditions.checkNotNull(staticPicLib.getSourcePathToOutput()),",
                "+                Preconditions.checkNotNull(sharedLib.getSourcePathToOutput()))",
                "+            .stream()",
                "+            .map(pathResolver::getRelativePath)",
                "+            .collect(ImmutableList.toImmutableList());",
                "+    assertThat(outputs.size(), Matchers.equalTo(ImmutableSet.copyOf(outputs).size()));",
                "+",
                "+    ImmutableList<BuildTarget> targets =",
                "+        ImmutableList.of(",
                "+            staticLib.getBuildTarget(), staticPicLib.getBuildTarget(), sharedLib.getBuildTarget());",
                "+    assertThat(targets.size(), Matchers.equalTo(ImmutableSet.copyOf(targets).size()));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void linkWhole() {",
                "+    BuildTarget target = BuildTargetFactory.newInstance(\"//:rule\");",
                "+    HaskellLibraryBuilder builder = new HaskellLibraryBuilder(target).setLinkWhole(true);",
                "+    BuildRuleResolver resolver =",
                "+        new TestBuildRuleResolver(TargetGraphFactory.newInstance(builder.build()));",
                "+    SourcePathResolver pathResolver =",
                "+        DefaultSourcePathResolver.from(new SourcePathRuleFinder(resolver));",
                "+    HaskellLibrary library = builder.build(resolver);",
                "+",
                "+    // Lookup the link whole flags.",
                "+    Linker linker = CxxPlatformUtils.DEFAULT_PLATFORM.getLd().resolve(resolver);",
                "+    ImmutableList<String> linkWholeFlags =",
                "+        FluentIterable.from(linker.linkWhole(StringArg.of(\"sentinel\")))",
                "+            .transformAndConcat((input) -> Arg.stringifyList(input, pathResolver))",
                "+            .filter(Predicates.not(\"sentinel\"::equals))",
                "+            .toList();",
                "+",
                "+    // Test static dep type.",
                "+    NativeLinkableInput staticInput =",
                "+        library.getNativeLinkableInput(",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, resolver);",
                "+    assertThat(",
                "+        Arg.stringify(staticInput.getArgs(), pathResolver),",
                "+        hasItems(linkWholeFlags.toArray(new String[linkWholeFlags.size()])));",
                "+",
                "+    // Test static-pic dep type.",
                "+    NativeLinkableInput staticPicInput =",
                "+        library.getNativeLinkableInput(",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC, resolver);",
                "+    assertThat(",
                "+        Arg.stringify(staticPicInput.getArgs(), pathResolver),",
                "+        hasItems(linkWholeFlags.toArray(new String[linkWholeFlags.size()])));",
                "+",
                "+    // Test shared dep type.",
                "+    NativeLinkableInput sharedInput =",
                "+        library.getNativeLinkableInput(",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver);",
                "+    assertThat(",
                "+        Arg.stringify(sharedInput.getArgs(), pathResolver),",
                "+        not(hasItems(linkWholeFlags.toArray(new String[linkWholeFlags.size()]))));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void preferredLinkage() throws Exception {",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(TargetGraphFactory.newInstance());",
                "+",
                "+    // Test default value.",
                "+    HaskellLibrary defaultLib =",
                "+        new HaskellLibraryBuilder(BuildTargetFactory.newInstance(\"//:default\")).build(resolver);",
                "+    assertThat(",
                "+        defaultLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "+        Matchers.is(NativeLinkable.Linkage.ANY));",
                "+",
                "+    // Test `ANY` value.",
                "+    HaskellLibrary anyLib =",
                "+        new HaskellLibraryBuilder(BuildTargetFactory.newInstance(\"//:any\"))",
                "+            .setPreferredLinkage(NativeLinkable.Linkage.ANY)",
                "+            .build(resolver);",
                "+    assertThat(",
                "+        anyLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "+        Matchers.is(NativeLinkable.Linkage.ANY));",
                "+",
                "+    // Test `STATIC` value.",
                "+    HaskellLibrary staticLib =",
                "+        new HaskellLibraryBuilder(BuildTargetFactory.newInstance(\"//:static\"))",
                "+            .setPreferredLinkage(NativeLinkable.Linkage.STATIC)",
                "+            .build(resolver);",
                "+    assertThat(",
                "+        staticLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "+        Matchers.is(NativeLinkable.Linkage.STATIC));",
                "+",
                "+    // Test `SHARED` value.",
                "+    HaskellLibrary sharedLib =",
                "+        new HaskellLibraryBuilder(BuildTargetFactory.newInstance(\"//:shared\"))",
                "+            .setPreferredLinkage(NativeLinkable.Linkage.SHARED)",
                "+            .build(resolver);",
                "+    assertThat(",
                "+        sharedLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "+        Matchers.is(NativeLinkable.Linkage.SHARED));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void thinArchivesPropagatesDepFromObjects() {",
                "+    BuildTarget target = BuildTargetFactory.newInstance(\"//:rule\");",
                "+    CxxBuckConfig cxxBuckConfig =",
                "+        new CxxBuckConfig(",
                "+            FakeBuckConfig.builder().setSections(\"[cxx]\", \"archive_contents=thin\").build());",
                "+    HaskellLibraryBuilder builder =",
                "+        new HaskellLibraryBuilder(",
                "+                target,",
                "+                HaskellTestUtils.DEFAULT_PLATFORM,",
                "+                HaskellTestUtils.DEFAULT_PLATFORMS,",
                "+                cxxBuckConfig)",
                "+            .setSrcs(",
                "+                SourceList.ofUnnamedSources(ImmutableSortedSet.of(FakeSourcePath.of(\"Test.hs\"))))",
                "+            .setLinkWhole(true);",
                "+    BuildRuleResolver resolver =",
                "+        new TestBuildRuleResolver(TargetGraphFactory.newInstance(builder.build()));",
                "+    HaskellLibrary library = builder.build(resolver);",
                "+",
                "+    // Test static dep type.",
                "+    NativeLinkableInput staticInput =",
                "+        library.getNativeLinkableInput(",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, resolver);",
                "+    assertThat(",
                "+        FluentIterable.from(staticInput.getArgs())",
                "+            .transformAndConcat(",
                "+                arg -> BuildableSupport.getDepsCollection(arg, new SourcePathRuleFinder(resolver)))",
                "+            .transform(BuildRule::getBuildTarget)",
                "+            .toList(),",
                "+        Matchers.hasItem(",
                "+            HaskellDescriptionUtils.getCompileBuildTarget(",
                "+                library.getBuildTarget(),",
                "+                HaskellTestUtils.DEFAULT_PLATFORM,",
                "+                Linker.LinkableDepType.STATIC,",
                "+                false)));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void platformDeps() {",
                "+    HaskellLibraryBuilder depABuilder =",
                "+        new HaskellLibraryBuilder(BuildTargetFactory.newInstance(\"//:depA\"));",
                "+    HaskellLibraryBuilder depBBuilder =",
                "+        new HaskellLibraryBuilder(BuildTargetFactory.newInstance(\"//:depB\"));",
                "+    HaskellLibraryBuilder ruleBuilder =",
                "+        new HaskellLibraryBuilder(BuildTargetFactory.newInstance(\"//:rule\"))",
                "+            .setPlatformDeps(",
                "+                PatternMatchedCollection.<ImmutableSortedSet<BuildTarget>>builder()",
                "+                    .add(",
                "+                        Pattern.compile(",
                "+                            CxxPlatformUtils.DEFAULT_PLATFORM.getFlavor().toString(),",
                "+                            Pattern.LITERAL),",
                "+                        ImmutableSortedSet.of(depABuilder.getTarget()))",
                "+                    .add(",
                "+                        Pattern.compile(\"matches nothing\", Pattern.LITERAL),",
                "+                        ImmutableSortedSet.of(depBBuilder.getTarget()))",
                "+                    .build());",
                "+    TargetGraph targetGraph =",
                "+        TargetGraphFactory.newInstance(",
                "+            depABuilder.build(), depBBuilder.build(), ruleBuilder.build());",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    HaskellLibrary depA = (HaskellLibrary) resolver.requireRule(depABuilder.getTarget());",
                "+    HaskellLibrary depB = (HaskellLibrary) resolver.requireRule(depBBuilder.getTarget());",
                "+    HaskellLibrary rule = (HaskellLibrary) resolver.requireRule(ruleBuilder.getTarget());",
                "+    assertThat(",
                "+        rule.getCompileDeps(HaskellTestUtils.DEFAULT_PLATFORM),",
                "+        Matchers.allOf(Matchers.hasItem(depA), not(Matchers.hasItem(depB))));",
                "+    assertThat(",
                "+        ImmutableList.copyOf(",
                "+            rule.getNativeLinkableExportedDepsForPlatform(",
                "+                CxxPlatformUtils.DEFAULT_PLATFORM, resolver)),",
                "+        Matchers.allOf(Matchers.hasItem(depA), not(Matchers.hasItem(depB))));",
                "+    assertThat(",
                "+        rule.getCxxPreprocessorDeps(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "+        Matchers.allOf(Matchers.hasItem(depA), not(Matchers.hasItem(depB))));",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/haskell/HaskellLibraryIntegrationTest.java b/test/com/facebook/buck/features/haskell/HaskellLibraryIntegrationTest.java",
                "new file mode 100644",
                "index 0000000000..12a74c829f",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/HaskellLibraryIntegrationTest.java",
                "@@ -0,0 +1,120 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import static org.junit.Assert.assertThat;",
                "+import static org.junit.Assume.assumeThat;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.testutil.ProcessResult;",
                "+import com.facebook.buck.testutil.TemporaryPaths;",
                "+import com.facebook.buck.testutil.integration.ProjectWorkspace;",
                "+import com.facebook.buck.testutil.integration.TestDataHelper;",
                "+import com.facebook.buck.util.environment.Platform;",
                "+import com.google.common.collect.ImmutableList;",
                "+import java.io.IOException;",
                "+import java.util.Collection;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Before;",
                "+import org.junit.Rule;",
                "+import org.junit.Test;",
                "+import org.junit.runner.RunWith;",
                "+import org.junit.runners.Parameterized;",
                "+",
                "+@RunWith(Parameterized.class)",
                "+public class HaskellLibraryIntegrationTest {",
                "+",
                "+  @Parameterized.Parameters(name = \"{0}\")",
                "+  public static Collection<Object[]> data() {",
                "+    return ImmutableList.copyOf(",
                "+        new Object[][] {",
                "+          {Linker.LinkableDepType.STATIC},",
                "+          {Linker.LinkableDepType.STATIC_PIC},",
                "+          {Linker.LinkableDepType.SHARED},",
                "+        });",
                "+  }",
                "+",
                "+  private ProjectWorkspace workspace;",
                "+",
                "+  @Rule public TemporaryPaths tmp = new TemporaryPaths();",
                "+",
                "+  @Parameterized.Parameter(value = 0)",
                "+  public Linker.LinkableDepType linkStyle;",
                "+",
                "+  private String getLinkFlavor() {",
                "+    return linkStyle.toString().toLowerCase().replace('_', '-');",
                "+  }",
                "+",
                "+  @Before",
                "+  public void setUp() throws IOException, InterruptedException {",
                "+",
                "+    // We don't currently support windows.",
                "+    assumeThat(Platform.detect(), Matchers.not(Platform.WINDOWS));",
                "+",
                "+    // Verify that the system contains a compiler.",
                "+    HaskellVersion version = HaskellTestUtils.assumeSystemCompiler();",
                "+",
                "+    // Setup the workspace.",
                "+    workspace = TestDataHelper.createProjectWorkspaceForScenario(this, \"library_test\", tmp);",
                "+    workspace.setUp();",
                "+",
                "+    // Write out the `.buckconfig`.",
                "+    workspace.writeContentsToPath(HaskellTestUtils.formatHaskellConfig(version), \".buckconfig\");",
                "+  }",
                "+",
                "+  @Test",
                "+  public void simple() throws IOException {",
                "+    workspace.runBuckBuild(\"//:foo#default,\" + getLinkFlavor()).assertSuccess();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void dependency() throws IOException {",
                "+    workspace.runBuckBuild(\"//:dependent#default,\" + getLinkFlavor()).assertSuccess();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void foreign() throws IOException {",
                "+    workspace.runBuckBuild(\"//:foreign#default,\" + getLinkFlavor()).assertSuccess();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void firstOrderDeps() throws IOException {",
                "+    workspace.runBuckBuild(\"//:first_order_a_pass#default,\" + getLinkFlavor()).assertSuccess();",
                "+    ProcessResult result =",
                "+        workspace.runBuckBuild(\"//:first_order_a_fail#default,\" + getLinkFlavor()).assertFailure();",
                "+    assertThat(",
                "+        result.getStderr(),",
                "+        Matchers.anyOf(",
                "+            Matchers.containsString(\"It is a member of the hidden package\"), // < GHC 8.1",
                "+            Matchers.containsString(\"Could not find module\"))); // > GHC 8.1",
                "+  }",
                "+",
                "+  @Test",
                "+  public void order() throws IOException {",
                "+    workspace.writeContentsToPath(\"module OrderA where\\nimport OrderB\\n\", \"OrderA.hs\");",
                "+    workspace.runBuckBuild(\"//:order#default,\" + getLinkFlavor()).assertSuccess();",
                "+    workspace.runBuckCommand(\"clean\", \"--keep-cache\");",
                "+    workspace.writeContentsToPath(\"module OrderA where\\n\", \"OrderA.hs\");",
                "+    workspace.writeContentsToPath(\"module OrderB where\\nimport OrderA\\n\", \"OrderB.hs\");",
                "+    workspace.runBuckBuild(\"//:order#default,\" + getLinkFlavor()).assertSuccess();",
                "+  }",
                "+",
                "+  @Test",
                "+  public void cHeader() throws IOException {",
                "+    workspace.runBuckBuild(\"//:hs_header#default,\" + getLinkFlavor()).assertSuccess();",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/haskell/HaskellPrebuiltLibraryDescriptionTest.java b/test/com/facebook/buck/features/haskell/HaskellPrebuiltLibraryDescriptionTest.java",
                "new file mode 100644",
                "index 0000000000..75bf6ba20d",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/HaskellPrebuiltLibraryDescriptionTest.java",
                "@@ -0,0 +1,230 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import static org.junit.Assert.assertThat;",
                "+",
                "+import com.facebook.buck.cxx.CxxHeadersDir;",
                "+import com.facebook.buck.cxx.CxxPreprocessables;",
                "+import com.facebook.buck.cxx.CxxPreprocessorInput;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "+import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.BuildTargetFactory;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.BuildableSupport;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.FakeSourcePath;",
                "+import com.facebook.buck.rules.PathSourcePath;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.TargetGraph;",
                "+import com.facebook.buck.rules.TestBuildRuleResolver;",
                "+import com.facebook.buck.rules.args.Arg;",
                "+import com.facebook.buck.testutil.FakeProjectFilesystem;",
                "+import com.facebook.buck.testutil.TargetGraphFactory;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+import org.hamcrest.Matchers;",
                "+import org.junit.Test;",
                "+",
                "+public class HaskellPrebuiltLibraryDescriptionTest {",
                "+",
                "+  @Test",
                "+  public void staticLibraries() {",
                "+    PathSourcePath lib = FakeSourcePath.of(\"libfoo.a\");",
                "+    BuildTarget target = BuildTargetFactory.newInstance(\"//:rule\");",
                "+    PrebuiltHaskellLibraryBuilder builder =",
                "+        new PrebuiltHaskellLibraryBuilder(target)",
                "+            .setVersion(\"1.0.0\")",
                "+            .setDb(FakeSourcePath.of(\"package.conf.d\"))",
                "+            .setStaticLibs(ImmutableList.of(lib));",
                "+    TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    PrebuiltHaskellLibrary library = builder.build(resolver, filesystem, targetGraph);",
                "+    NativeLinkableInput input =",
                "+        library.getNativeLinkableInput(",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, resolver);",
                "+    assertThat(",
                "+        RichStream.from(input.getArgs())",
                "+            .flatMap(",
                "+                a ->",
                "+                    BuildableSupport.deriveInputs(a)",
                "+                        .collect(ImmutableList.toImmutableList())",
                "+                        .stream())",
                "+            .toImmutableSet(),",
                "+        Matchers.contains(lib));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void sharedLibraries() {",
                "+    PathSourcePath lib = FakeSourcePath.of(\"libfoo.so\");",
                "+    BuildTarget target = BuildTargetFactory.newInstance(\"//:rule\");",
                "+    PrebuiltHaskellLibraryBuilder builder =",
                "+        new PrebuiltHaskellLibraryBuilder(target)",
                "+            .setVersion(\"1.0.0\")",
                "+            .setDb(FakeSourcePath.of(\"package.conf.d\"))",
                "+            .setSharedLibs(ImmutableMap.of(\"libfoo.so\", lib));",
                "+    TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    PrebuiltHaskellLibrary library = builder.build(resolver, filesystem, targetGraph);",
                "+    NativeLinkableInput input =",
                "+        library.getNativeLinkableInput(",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver);",
                "+    assertThat(",
                "+        RichStream.from(input.getArgs())",
                "+            .flatMap(",
                "+                a ->",
                "+                    BuildableSupport.deriveInputs(a)",
                "+                        .collect(ImmutableList.toImmutableList())",
                "+                        .stream())",
                "+            .toImmutableSet(),",
                "+        Matchers.contains(lib));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void interfaces() {",
                "+    PathSourcePath interfaces = FakeSourcePath.of(\"interfaces\");",
                "+    BuildTarget target = BuildTargetFactory.newInstance(\"//:rule\");",
                "+    PrebuiltHaskellLibraryBuilder builder =",
                "+        new PrebuiltHaskellLibraryBuilder(target)",
                "+            .setVersion(\"1.0.0\")",
                "+            .setDb(FakeSourcePath.of(\"package.conf.d\"))",
                "+            .setImportDirs(ImmutableList.of(interfaces));",
                "+    TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    PrebuiltHaskellLibrary library = builder.build(resolver, filesystem, targetGraph);",
                "+    HaskellCompileInput input =",
                "+        library.getCompileInput(",
                "+            HaskellTestUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, false);",
                "+    assertThat(input.getPackages().get(0).getInterfaces(), Matchers.contains(interfaces));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void packageDb() {",
                "+    BuildTarget target = BuildTargetFactory.newInstance(\"//:rule\");",
                "+    PathSourcePath db = FakeSourcePath.of(\"package.conf.d\");",
                "+    PrebuiltHaskellLibraryBuilder builder =",
                "+        new PrebuiltHaskellLibraryBuilder(target).setVersion(\"1.0.0\").setDb(db);",
                "+    TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    PrebuiltHaskellLibrary library = builder.build(resolver, filesystem, targetGraph);",
                "+    HaskellCompileInput input =",
                "+        library.getCompileInput(",
                "+            HaskellTestUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, false);",
                "+    assertThat(input.getPackages().get(0).getPackageDb(), Matchers.equalTo(db));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void packageInfo() {",
                "+    BuildTarget target = BuildTargetFactory.newInstance(\"//:rule\");",
                "+    PrebuiltHaskellLibraryBuilder builder =",
                "+        new PrebuiltHaskellLibraryBuilder(target)",
                "+            .setVersion(\"1.0.0\")",
                "+            .setDb(FakeSourcePath.of(\"package.conf.d\"))",
                "+            .setId(\"id\");",
                "+    TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    PrebuiltHaskellLibrary library = builder.build(resolver, filesystem, targetGraph);",
                "+    HaskellCompileInput input =",
                "+        library.getCompileInput(",
                "+            HaskellTestUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, false);",
                "+    assertThat(",
                "+        input.getPackages().get(0).getInfo(),",
                "+        Matchers.equalTo(HaskellPackageInfo.of(\"rule\", \"1.0.0\", \"id\")));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void exportedLinkerFlags() {",
                "+    BuildTarget target = BuildTargetFactory.newInstance(\"//:rule\");",
                "+    String flag = \"-exported-linker-flags\";",
                "+    PrebuiltHaskellLibraryBuilder builder =",
                "+        new PrebuiltHaskellLibraryBuilder(target)",
                "+            .setVersion(\"1.0.0\")",
                "+            .setDb(FakeSourcePath.of(\"package.conf.d\"))",
                "+            .setExportedLinkerFlags(ImmutableList.of(flag));",
                "+    TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    SourcePathResolver pathResolver =",
                "+        DefaultSourcePathResolver.from(new SourcePathRuleFinder(resolver));",
                "+    PrebuiltHaskellLibrary library = builder.build(resolver, filesystem, targetGraph);",
                "+    NativeLinkableInput staticInput =",
                "+        library.getNativeLinkableInput(",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, resolver);",
                "+    assertThat(Arg.stringify(staticInput.getArgs(), pathResolver), Matchers.contains(flag));",
                "+    NativeLinkableInput sharedInput =",
                "+        library.getNativeLinkableInput(",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.SHARED, resolver);",
                "+    assertThat(Arg.stringify(sharedInput.getArgs(), pathResolver), Matchers.contains(flag));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void exportedCompilerFlags() {",
                "+    String flag = \"-exported-compiler-flags\";",
                "+    BuildTarget target = BuildTargetFactory.newInstance(\"//:rule\");",
                "+    PrebuiltHaskellLibraryBuilder builder =",
                "+        new PrebuiltHaskellLibraryBuilder(target)",
                "+            .setVersion(\"1.0.0\")",
                "+            .setDb(FakeSourcePath.of(\"package.conf.d\"))",
                "+            .setExportedCompilerFlags(ImmutableList.of(flag));",
                "+    TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    PrebuiltHaskellLibrary library = builder.build(resolver, filesystem, targetGraph);",
                "+    HaskellCompileInput staticInput =",
                "+        library.getCompileInput(",
                "+            HaskellTestUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC, false);",
                "+    assertThat(staticInput.getFlags(), Matchers.contains(flag));",
                "+    HaskellCompileInput sharedInput =",
                "+        library.getCompileInput(",
                "+            HaskellTestUtils.DEFAULT_PLATFORM, Linker.LinkableDepType.STATIC_PIC, false);",
                "+    assertThat(sharedInput.getFlags(), Matchers.contains(flag));",
                "+  }",
                "+",
                "+  @Test",
                "+  public void cxxHeaderDirs() {",
                "+    PathSourcePath interfaces = FakeSourcePath.of(\"interfaces\");",
                "+    BuildTarget target = BuildTargetFactory.newInstance(\"//:rule\");",
                "+    PathSourcePath path = FakeSourcePath.of(\"include_dir\");",
                "+    PrebuiltHaskellLibraryBuilder builder =",
                "+        new PrebuiltHaskellLibraryBuilder(target)",
                "+            .setVersion(\"1.0.0\")",
                "+            .setDb(FakeSourcePath.of(\"package.conf.d\"))",
                "+            .setImportDirs(ImmutableList.of(interfaces))",
                "+            .setCxxHeaderDirs(ImmutableSortedSet.of(path));",
                "+    TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());",
                "+    ProjectFilesystem filesystem = new FakeProjectFilesystem();",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver(targetGraph);",
                "+    PrebuiltHaskellLibrary library = builder.build(resolver, filesystem, targetGraph);",
                "+    assertThat(",
                "+        library.getCxxPreprocessorInput(CxxPlatformUtils.DEFAULT_PLATFORM, resolver),",
                "+        Matchers.equalTo(",
                "+            CxxPreprocessorInput.builder()",
                "+                .addIncludes(CxxHeadersDir.of(CxxPreprocessables.IncludeType.SYSTEM, path))",
                "+                .build()));",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/haskell/HaskellTestUtils.java b/test/com/facebook/buck/features/haskell/HaskellTestUtils.java",
                "new file mode 100644",
                "index 0000000000..6d9d9e1b32",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/HaskellTestUtils.java",
                "@@ -0,0 +1,121 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import static org.junit.Assert.assertTrue;",
                "+import static org.junit.Assume.assumeTrue;",
                "+",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.io.ExecutableFinder;",
                "+import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.rules.CommandTool;",
                "+import com.facebook.buck.rules.ConstantToolProvider;",
                "+import com.google.common.base.Charsets;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.io.ByteStreams;",
                "+import java.io.IOException;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                "+import java.util.Optional;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "+",
                "+class HaskellTestUtils {",
                "+",
                "+  public static final HaskellPlatform DEFAULT_PLATFORM =",
                "+      HaskellPlatform.builder()",
                "+          .setCompiler(new ConstantToolProvider(new CommandTool.Builder().build()))",
                "+          .setLinker(new ConstantToolProvider(new CommandTool.Builder().build()))",
                "+          .setPackager(new ConstantToolProvider(new CommandTool.Builder().build()))",
                "+          .setHaddock(new ConstantToolProvider(new CommandTool.Builder().build()))",
                "+          .setHaskellVersion(HaskellVersion.of(8))",
                "+          .setShouldCacheLinks(true)",
                "+          .setCxxPlatform(CxxPlatformUtils.DEFAULT_PLATFORM)",
                "+          .setGhciScriptTemplate(",
                "+              () -> {",
                "+                throw new UnsupportedOperationException();",
                "+              })",
                "+          .setGhciIservScriptTemplate(",
                "+              () -> {",
                "+                throw new UnsupportedOperationException();",
                "+              })",
                "+          .setGhciBinutils(",
                "+              () -> {",
                "+                throw new UnsupportedOperationException();",
                "+              })",
                "+          .setGhciGhc(",
                "+              () -> {",
                "+                throw new UnsupportedOperationException();",
                "+              })",
                "+          .setGhciIServ(",
                "+              () -> {",
                "+                throw new UnsupportedOperationException();",
                "+              })",
                "+          .setGhciIServProf(",
                "+              () -> {",
                "+                throw new UnsupportedOperationException();",
                "+              })",
                "+          .setGhciLib(",
                "+              () -> {",
                "+                throw new UnsupportedOperationException();",
                "+              })",
                "+          .setGhciCc(",
                "+              () -> {",
                "+                throw new UnsupportedOperationException();",
                "+              })",
                "+          .setGhciCxx(",
                "+              () -> {",
                "+                throw new UnsupportedOperationException();",
                "+              })",
                "+          .setGhciCpp(",
                "+              () -> {",
                "+                throw new UnsupportedOperationException();",
                "+              })",
                "+          .build();",
                "+",
                "+  public static final FlavorDomain<HaskellPlatform> DEFAULT_PLATFORMS =",
                "+      FlavorDomain.of(\"Haskell Platform\", DEFAULT_PLATFORM);",
                "+",
                "+  private HaskellTestUtils() {}",
                "+",
                "+  /** Assume that we can find a haskell compiler on the system. */",
                "+  static HaskellVersion assumeSystemCompiler() throws IOException {",
                "+    ExecutableFinder executableFinder = new ExecutableFinder();",
                "+    Optional<Path> compilerOptional =",
                "+        executableFinder.getOptionalExecutable(",
                "+            Paths.get(\"ghc\"), ImmutableMap.copyOf(System.getenv()));",
                "+    assumeTrue(compilerOptional.isPresent());",
                "+",
                "+    // Find the major version of the haskell compiler.",
                "+    ImmutableList<String> cmd = ImmutableList.of(compilerOptional.get().toString(), \"--version\");",
                "+    Process process = Runtime.getRuntime().exec(cmd.toArray(new String[cmd.size()]));",
                "+    String output = new String(ByteStreams.toByteArray(process.getInputStream()), Charsets.UTF_8);",
                "+    Pattern versionPattern = Pattern.compile(\".*version ([0-9]+).*\");",
                "+    Matcher matcher = versionPattern.matcher(output.trim());",
                "+    assertTrue(",
                "+        String.format(",
                "+            \"Cannot match version from `ghc --version` output (using %s): %s\",",
                "+            versionPattern, output),",
                "+        matcher.matches());",
                "+    return HaskellVersion.of(Integer.valueOf(matcher.group(1)));",
                "+  }",
                "+",
                "+  static String formatHaskellConfig(HaskellVersion version) {",
                "+    return String.format(\"[haskell]\\ncompiler_major_version = %s\", version.getMajorVersion());",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/haskell/PrebuiltHaskellLibraryBuilder.java b/test/com/facebook/buck/features/haskell/PrebuiltHaskellLibraryBuilder.java",
                "new file mode 100644",
                "index 0000000000..74c971773a",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/PrebuiltHaskellLibraryBuilder.java",
                "@@ -0,0 +1,80 @@",
                "+/*",
                "+ * Copyright 2016-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.features.haskell;",
                "+",
                "+import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.rules.AbstractNodeBuilder;",
                "+import com.facebook.buck.rules.SourcePath;",
                "+import com.google.common.collect.ImmutableList;",
                "+import com.google.common.collect.ImmutableMap;",
                "+import com.google.common.collect.ImmutableSortedSet;",
                "+",
                "+public class PrebuiltHaskellLibraryBuilder",
                "+    extends AbstractNodeBuilder<",
                "+        HaskellPrebuiltLibraryDescriptionArg.Builder, HaskellPrebuiltLibraryDescriptionArg,",
                "+        HaskellPrebuiltLibraryDescription, PrebuiltHaskellLibrary> {",
                "+",
                "+  public PrebuiltHaskellLibraryBuilder(BuildTarget target) {",
                "+    super(new HaskellPrebuiltLibraryDescription(), target);",
                "+  }",
                "+",
                "+  public PrebuiltHaskellLibraryBuilder setVersion(String version) {",
                "+    getArgForPopulating().setVersion(version);",
                "+    return this;",
                "+  }",
                "+",
                "+  public PrebuiltHaskellLibraryBuilder setId(String id) {",
                "+    getArgForPopulating().setId(id);",
                "+    return this;",
                "+  }",
                "+",
                "+  public PrebuiltHaskellLibraryBuilder setDb(SourcePath path) {",
                "+    getArgForPopulating().setDb(path);",
                "+    return this;",
                "+  }",
                "+",
                "+  public PrebuiltHaskellLibraryBuilder setImportDirs(ImmutableList<SourcePath> interfaces) {",
                "+    getArgForPopulating().setImportDirs(interfaces);",
                "+    return this;",
                "+  }",
                "+",
                "+  public PrebuiltHaskellLibraryBuilder setStaticLibs(ImmutableList<SourcePath> libs) {",
                "+    getArgForPopulating().setStaticLibs(libs);",
                "+    return this;",
                "+  }",
                "+",
                "+  public PrebuiltHaskellLibraryBuilder setSharedLibs(ImmutableMap<String, SourcePath> libs) {",
                "+    getArgForPopulating().setSharedLibs(libs);",
                "+    return this;",
                "+  }",
                "+",
                "+  public PrebuiltHaskellLibraryBuilder setExportedLinkerFlags(ImmutableList<String> flags) {",
                "+    getArgForPopulating().setExportedLinkerFlags(flags);",
                "+    return this;",
                "+  }",
                "+",
                "+  public PrebuiltHaskellLibraryBuilder setExportedCompilerFlags(ImmutableList<String> flags) {",
                "+    getArgForPopulating().setExportedCompilerFlags(flags);",
                "+    return this;",
                "+  }",
                "+",
                "+  public PrebuiltHaskellLibraryBuilder setCxxHeaderDirs(",
                "+      ImmutableSortedSet<SourcePath> cxxHeaderDirs) {",
                "+    getArgForPopulating().setCxxHeaderDirs(cxxHeaderDirs);",
                "+    return this;",
                "+  }",
                "+}",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/binary_test/BUCK.fixture b/test/com/facebook/buck/features/haskell/testdata/binary_test/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..eef7e92394",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/binary_test/BUCK.fixture",
                "@@ -0,0 +1,94 @@",
                "+haskell_binary(",
                "+    name = \"foo\",",
                "+    srcs = [",
                "+        \"Foo.hs\",",
                "+    ],",
                "+    main = \"Foo\",",
                "+)",
                "+",
                "+haskell_binary(",
                "+    name = \"foo_rtsflags\",",
                "+    srcs = [",
                "+        \"Foo.hs\",",
                "+    ],",
                "+    linker_flags = [",
                "+        \"-rtsopts\",",
                "+    ],",
                "+    main = \"Foo\",",
                "+)",
                "+",
                "+haskell_binary(",
                "+    name = \"dependent\",",
                "+    srcs = [",
                "+        \"Dependent.hs\",",
                "+    ],",
                "+    main = \"Dependent\",",
                "+    deps = [",
                "+        \":dependency\",",
                "+    ],",
                "+)",
                "+",
                "+haskell_library(",
                "+    name = \"dependency\",",
                "+    srcs = [",
                "+        \"Dependency.hs\",",
                "+    ],",
                "+)",
                "+",
                "+haskell_binary(",
                "+    name = \"foreign\",",
                "+    srcs = [",
                "+        \"Foreign.hs\",",
                "+    ],",
                "+    main = \"Foreign\",",
                "+    deps = [",
                "+        \":c\",",
                "+    ],",
                "+)",
                "+",
                "+cxx_library(",
                "+    name = \"c\",",
                "+    srcs = [",
                "+        \"foreign.c\",",
                "+    ],",
                "+)",
                "+",
                "+haskell_binary(",
                "+    name = \"gen_main\",",
                "+    srcs = [",
                "+        \":gen\",",
                "+    ],",
                "+)",
                "+",
                "+cxx_genrule(",
                "+    name = \"gen\",",
                "+    out = \"Main.hs\",",
                "+    cmd = \"echo 'module Main where\\nmain = putStrLn \\\"$(cppflags)\\\"' > $OUT\",",
                "+)",
                "+",
                "+cxx_library(",
                "+    name = \"c_header\",",
                "+    exported_headers = [",
                "+        \"header.h\",",
                "+    ],",
                "+)",
                "+",
                "+haskell_binary(",
                "+    name = \"hs_header\",",
                "+    srcs = [",
                "+        \"HsHeader.hs\",",
                "+    ],",
                "+    compiler_flags = [\"-cpp\"],",
                "+    main = \"HsHeader\",",
                "+    deps = [",
                "+        \":c_header\",",
                "+    ],",
                "+)",
                "+",
                "+haskell_binary(",
                "+    name = \"error\",",
                "+    srcs = [",
                "+        \"Error.hs\",",
                "+    ],",
                "+    main = \"Error\",",
                "+)",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/binary_test/Dependency.hs b/test/com/facebook/buck/features/haskell/testdata/binary_test/Dependency.hs",
                "new file mode 100644",
                "index 0000000000..90fc9aabd1",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/binary_test/Dependency.hs",
                "@@ -0,0 +1,4 @@",
                "+module Dependency where",
                "+",
                "+dependency :: Int",
                "+dependency = 5",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/binary_test/Dependent.hs b/test/com/facebook/buck/features/haskell/testdata/binary_test/Dependent.hs",
                "new file mode 100644",
                "index 0000000000..57f8ecf29b",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/binary_test/Dependent.hs",
                "@@ -0,0 +1,6 @@",
                "+module Dependent where",
                "+",
                "+import Dependency",
                "+",
                "+main :: IO ()",
                "+main = putStr $ show dependency",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/binary_test/Error.hs b/test/com/facebook/buck/features/haskell/testdata/binary_test/Error.hs",
                "new file mode 100644",
                "index 0000000000..0a2c0ef162",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/binary_test/Error.hs",
                "@@ -0,0 +1,3 @@",
                "+module Error where",
                "+",
                "+syntax error causing compile error",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/binary_test/Foo.hs b/test/com/facebook/buck/features/haskell/testdata/binary_test/Foo.hs",
                "new file mode 100644",
                "index 0000000000..6255e4f059",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/binary_test/Foo.hs",
                "@@ -0,0 +1,4 @@",
                "+module Foo where",
                "+",
                "+main :: IO ()",
                "+main = putStr $ show 5",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/binary_test/Foreign.hs b/test/com/facebook/buck/features/haskell/testdata/binary_test/Foreign.hs",
                "new file mode 100644",
                "index 0000000000..21c3a17d6f",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/binary_test/Foreign.hs",
                "@@ -0,0 +1,7 @@",
                "+module Foreign where",
                "+",
                "+foreign import ccall \"func\"",
                "+  c_func :: IO ()",
                "+",
                "+main :: IO ()",
                "+main = c_func",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/binary_test/HsHeader.hs b/test/com/facebook/buck/features/haskell/testdata/binary_test/HsHeader.hs",
                "new file mode 100644",
                "index 0000000000..b1936e9e45",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/binary_test/HsHeader.hs",
                "@@ -0,0 +1,6 @@",
                "+module HsHeader where",
                "+",
                "+#include <header.h>",
                "+",
                "+main :: IO ()",
                "+main = putStr FOO",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/binary_test/foreign.c b/test/com/facebook/buck/features/haskell/testdata/binary_test/foreign.c",
                "new file mode 100644",
                "index 0000000000..c8fd628043",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/binary_test/foreign.c",
                "@@ -0,0 +1,5 @@",
                "+#include <stdio.h>",
                "+",
                "+void func() {",
                "+  printf(\"hello world\");",
                "+}",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/binary_test/header.h b/test/com/facebook/buck/features/haskell/testdata/binary_test/header.h",
                "new file mode 100644",
                "index 0000000000..b96fb7fabf",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/binary_test/header.h",
                "@@ -0,0 +1 @@",
                "+#define FOO \"hello\"",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/library_test/BUCK.fixture b/test/com/facebook/buck/features/haskell/testdata/library_test/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..3a1884df5e",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/library_test/BUCK.fixture",
                "@@ -0,0 +1,104 @@",
                "+haskell_library(",
                "+    name = \"foo\",",
                "+    srcs = [",
                "+        \"Foo.hs\",",
                "+    ],",
                "+)",
                "+",
                "+haskell_library(",
                "+    name = \"dependent\",",
                "+    srcs = [",
                "+        \"Dependent.hs\",",
                "+    ],",
                "+    deps = [",
                "+        \":dependency\",",
                "+    ],",
                "+)",
                "+",
                "+haskell_library(",
                "+    name = \"dependency\",",
                "+    srcs = [",
                "+        \"Dependency.hs\",",
                "+    ],",
                "+)",
                "+",
                "+haskell_library(",
                "+    name = \"foreign\",",
                "+    srcs = [",
                "+        \"Foreign.hs\",",
                "+    ],",
                "+    deps = [",
                "+        \":c\",",
                "+    ],",
                "+)",
                "+",
                "+cxx_library(",
                "+    name = \"c\",",
                "+    srcs = [",
                "+        \"foreign.c\",",
                "+    ],",
                "+)",
                "+",
                "+haskell_library(",
                "+    name = \"first_order_a_fail\",",
                "+    srcs = [",
                "+        \"FirstOrderA.hs\",",
                "+    ],",
                "+    deps = [",
                "+        \":first_order_b\",",
                "+    ],",
                "+)",
                "+",
                "+haskell_library(",
                "+    name = \"first_order_a_pass\",",
                "+    srcs = [",
                "+        \"FirstOrderA.hs\",",
                "+    ],",
                "+    deps = [",
                "+        \":first_order_b\",",
                "+        \":first_order_c\",",
                "+    ],",
                "+)",
                "+",
                "+haskell_library(",
                "+    name = \"first_order_b\",",
                "+    srcs = [",
                "+        \"FirstOrderB.hs\",",
                "+    ],",
                "+    deps = [",
                "+        \":first_order_c\",",
                "+    ],",
                "+)",
                "+",
                "+haskell_library(",
                "+    name = \"first_order_c\",",
                "+    srcs = [",
                "+        \"FirstOrderC.hs\",",
                "+    ],",
                "+)",
                "+",
                "+haskell_library(",
                "+    name = \"order\",",
                "+    srcs = [",
                "+        \"OrderA.hs\",",
                "+        \"OrderB.hs\",",
                "+    ],",
                "+)",
                "+",
                "+cxx_library(",
                "+    name = \"c_header\",",
                "+    exported_headers = [",
                "+        \"header.h\",",
                "+    ],",
                "+)",
                "+",
                "+haskell_library(",
                "+    name = \"hs_header\",",
                "+    srcs = [",
                "+        \"HsHeader.hs\",",
                "+    ],",
                "+    compiler_flags = [\"-cpp\"],",
                "+    deps = [",
                "+        \":c_header\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/library_test/Dependency.hs b/test/com/facebook/buck/features/haskell/testdata/library_test/Dependency.hs",
                "new file mode 100644",
                "index 0000000000..90fc9aabd1",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/library_test/Dependency.hs",
                "@@ -0,0 +1,4 @@",
                "+module Dependency where",
                "+",
                "+dependency :: Int",
                "+dependency = 5",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/library_test/Dependent.hs b/test/com/facebook/buck/features/haskell/testdata/library_test/Dependent.hs",
                "new file mode 100644",
                "index 0000000000..f2b57bc092",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/library_test/Dependent.hs",
                "@@ -0,0 +1,6 @@",
                "+module Dependent where",
                "+",
                "+import Dependency",
                "+",
                "+dependent :: Int",
                "+dependent = dependency",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/library_test/FirstOrderA.hs b/test/com/facebook/buck/features/haskell/testdata/library_test/FirstOrderA.hs",
                "new file mode 100644",
                "index 0000000000..5532df26d1",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/library_test/FirstOrderA.hs",
                "@@ -0,0 +1,4 @@",
                "+module FirstOrderA where",
                "+",
                "+import FirstOrderB",
                "+import FirstOrderC",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/library_test/FirstOrderB.hs b/test/com/facebook/buck/features/haskell/testdata/library_test/FirstOrderB.hs",
                "new file mode 100644",
                "index 0000000000..11bea2b05e",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/library_test/FirstOrderB.hs",
                "@@ -0,0 +1,3 @@",
                "+module FirstOrderB where",
                "+",
                "+import FirstOrderC",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/library_test/FirstOrderC.hs b/test/com/facebook/buck/features/haskell/testdata/library_test/FirstOrderC.hs",
                "new file mode 100644",
                "index 0000000000..edd2330ea2",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/library_test/FirstOrderC.hs",
                "@@ -0,0 +1 @@",
                "+module FirstOrderC where",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/library_test/Foo.hs b/test/com/facebook/buck/features/haskell/testdata/library_test/Foo.hs",
                "new file mode 100644",
                "index 0000000000..7ce4512876",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/library_test/Foo.hs",
                "@@ -0,0 +1,4 @@",
                "+module Foo where",
                "+",
                "+foo :: Int",
                "+foo = 5",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/library_test/Foreign.hs b/test/com/facebook/buck/features/haskell/testdata/library_test/Foreign.hs",
                "new file mode 100644",
                "index 0000000000..6925edee80",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/library_test/Foreign.hs",
                "@@ -0,0 +1,7 @@",
                "+module Foreign where",
                "+",
                "+foreign import ccall \"func\"",
                "+  c_func :: IO Int",
                "+",
                "+foreignFunc :: IO Int",
                "+foreignFunc = c_func",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/library_test/HsHeader.hs b/test/com/facebook/buck/features/haskell/testdata/library_test/HsHeader.hs",
                "new file mode 100644",
                "index 0000000000..b1936e9e45",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/library_test/HsHeader.hs",
                "@@ -0,0 +1,6 @@",
                "+module HsHeader where",
                "+",
                "+#include <header.h>",
                "+",
                "+main :: IO ()",
                "+main = putStr FOO",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/library_test/OrderA.hs b/test/com/facebook/buck/features/haskell/testdata/library_test/OrderA.hs",
                "new file mode 100644",
                "index 0000000000..3026357ad8",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/library_test/OrderA.hs",
                "@@ -0,0 +1 @@",
                "+module OrderA where",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/library_test/OrderB.hs b/test/com/facebook/buck/features/haskell/testdata/library_test/OrderB.hs",
                "new file mode 100644",
                "index 0000000000..bf84dc5252",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/library_test/OrderB.hs",
                "@@ -0,0 +1 @@",
                "+module OrderB where",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/library_test/foreign.c b/test/com/facebook/buck/features/haskell/testdata/library_test/foreign.c",
                "new file mode 100644",
                "index 0000000000..5d39cbcd47",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/library_test/foreign.c",
                "@@ -0,0 +1,3 @@",
                "+int func() {",
                "+  return 5;",
                "+}",
                "diff --git a/test/com/facebook/buck/features/haskell/testdata/library_test/header.h b/test/com/facebook/buck/features/haskell/testdata/library_test/header.h",
                "new file mode 100644",
                "index 0000000000..b96fb7fabf",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/features/haskell/testdata/library_test/header.h",
                "@@ -0,0 +1 @@",
                "+#define FOO \"hello\""
            ],
            "changed_files": [
                "build.xml",
                "programs/BUCK",
                "src/com/facebook/buck/features/haskell/AbstractHaskellCompileInput.java",
                "src/com/facebook/buck/features/haskell/AbstractHaskellHaddockInput.java",
                "src/com/facebook/buck/features/haskell/AbstractHaskellPackage.java",
                "src/com/facebook/buck/features/haskell/AbstractHaskellPackageInfo.java",
                "src/com/facebook/buck/features/haskell/AbstractHaskellPlatform.java",
                "src/com/facebook/buck/features/haskell/AbstractHaskellPlatformsProvider.java",
                "src/com/facebook/buck/features/haskell/AbstractHaskellSources.java",
                "src/com/facebook/buck/features/haskell/AbstractHaskellVersion.java",
                "src/com/facebook/buck/features/haskell/BUCK",
                "src/com/facebook/buck/features/haskell/HaskellBinary.java",
                "src/com/facebook/buck/features/haskell/HaskellBinaryDescription.java",
                "src/com/facebook/buck/features/haskell/HaskellBuckConfig.java",
                "src/com/facebook/buck/features/haskell/HaskellCompileDep.java",
                "src/com/facebook/buck/features/haskell/HaskellCompileRule.java",
                "src/com/facebook/buck/features/haskell/HaskellDescriptionUtils.java",
                "src/com/facebook/buck/features/haskell/HaskellDescriptionsProvider.java",
                "src/com/facebook/buck/features/haskell/HaskellGhciDescription.java",
                "src/com/facebook/buck/features/haskell/HaskellGhciRule.java",
                "src/com/facebook/buck/features/haskell/HaskellHaddockDescription.java",
                "src/com/facebook/buck/features/haskell/HaskellHaddockLibRule.java",
                "src/com/facebook/buck/features/haskell/HaskellHaddockRule.java",
                "src/com/facebook/buck/features/haskell/HaskellLibrary.java",
                "src/com/facebook/buck/features/haskell/HaskellLibraryDescription.java",
                "src/com/facebook/buck/features/haskell/HaskellLinkRule.java",
                "src/com/facebook/buck/features/haskell/HaskellModule.java",
                "src/com/facebook/buck/features/haskell/HaskellPackageRule.java",
                "src/com/facebook/buck/features/haskell/HaskellPlatformsFactory.java",
                "src/com/facebook/buck/features/haskell/HaskellPlatformsProviderFactory.java",
                "src/com/facebook/buck/features/haskell/HaskellPrebuiltLibraryDescription.java",
                "src/com/facebook/buck/features/haskell/HaskellToolchainSupplier.java",
                "src/com/facebook/buck/features/haskell/PrebuiltHaskellLibrary.java",
                "test/com/facebook/buck/features/haskell/BUCK",
                "test/com/facebook/buck/features/haskell/HaskellBinaryBuilder.java",
                "test/com/facebook/buck/features/haskell/HaskellBinaryDescriptionTest.java",
                "test/com/facebook/buck/features/haskell/HaskellBinaryIntegrationTest.java",
                "test/com/facebook/buck/features/haskell/HaskellLibraryBuilder.java",
                "test/com/facebook/buck/features/haskell/HaskellLibraryDescriptionTest.java",
                "test/com/facebook/buck/features/haskell/HaskellLibraryIntegrationTest.java",
                "test/com/facebook/buck/features/haskell/HaskellPrebuiltLibraryDescriptionTest.java",
                "test/com/facebook/buck/features/haskell/HaskellTestUtils.java",
                "test/com/facebook/buck/features/haskell/PrebuiltHaskellLibraryBuilder.java",
                "test/com/facebook/buck/features/haskell/testdata/binary_test/BUCK.fixture",
                "test/com/facebook/buck/features/haskell/testdata/binary_test/Dependency.hs",
                "test/com/facebook/buck/features/haskell/testdata/binary_test/Dependent.hs",
                "test/com/facebook/buck/features/haskell/testdata/binary_test/Error.hs",
                "test/com/facebook/buck/features/haskell/testdata/binary_test/Foo.hs",
                "test/com/facebook/buck/features/haskell/testdata/binary_test/Foreign.hs",
                "test/com/facebook/buck/features/haskell/testdata/binary_test/HsHeader.hs",
                "test/com/facebook/buck/features/haskell/testdata/binary_test/foreign.c",
                "test/com/facebook/buck/features/haskell/testdata/binary_test/header.h",
                "test/com/facebook/buck/features/haskell/testdata/library_test/BUCK.fixture",
                "test/com/facebook/buck/features/haskell/testdata/library_test/Dependency.hs",
                "test/com/facebook/buck/features/haskell/testdata/library_test/Dependent.hs",
                "test/com/facebook/buck/features/haskell/testdata/library_test/FirstOrderA.hs",
                "test/com/facebook/buck/features/haskell/testdata/library_test/FirstOrderB.hs",
                "test/com/facebook/buck/features/haskell/testdata/library_test/FirstOrderC.hs",
                "test/com/facebook/buck/features/haskell/testdata/library_test/Foo.hs",
                "test/com/facebook/buck/features/haskell/testdata/library_test/Foreign.hs",
                "test/com/facebook/buck/features/haskell/testdata/library_test/HsHeader.hs",
                "test/com/facebook/buck/features/haskell/testdata/library_test/OrderA.hs",
                "test/com/facebook/buck/features/haskell/testdata/library_test/OrderB.hs",
                "test/com/facebook/buck/features/haskell/testdata/library_test/foreign.c",
                "test/com/facebook/buck/features/haskell/testdata/library_test/header.h"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "77d5ca12faaaed6f3c7c4b7ee559640edf46bb95",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1523049110,
            "hunks": 32,
            "message": "go: switch to custom platform definitions via `.buckconfig` Summary: This updates the platform handling for Go to be more similar to how other languages work, where `go#<name>` sections in `.buckconfig` are used to defined custom platforms.  In this diff, the `GoPlatformFlavorDomain`, which previously created platforms on the fly named after `<os>_<arch>`, is merged into `GoPlatformFactory` where platforms are defined exclusively via `.buckconfig` entries (and named accordingly). Reviewed By: ttsugriy fbshipit-source-id: 9b3b855",
            "diff": [
                "diff --git a/src/com/facebook/buck/go/AbstractGoPlatform.java b/src/com/facebook/buck/go/AbstractGoPlatform.java",
                "index a4e050de8c..d2255c28c5 100644",
                "--- a/src/com/facebook/buck/go/AbstractGoPlatform.java",
                "+++ b/src/com/facebook/buck/go/AbstractGoPlatform.java",
                "@@ -21,3 +21,2 @@ import com.facebook.buck.model.Flavor;",
                " import com.facebook.buck.model.FlavorConvertible;",
                "-import com.facebook.buck.model.InternalFlavor;",
                " import com.facebook.buck.rules.AddToRuleKey;",
                "@@ -41,5 +40,9 @@ abstract class AbstractGoPlatform implements FlavorConvertible, AddsToRuleKey {",
                "+  // TODO: For now, we rely on Go platforms having the same \"name\" as the C/C++ platforms they wrap,",
                "+  // due to having to lookup the Go platform in the C/C++ interfaces that Go rules implement, into",
                "+  // which only C/C++ platform objects are threaded.",
                "   @Override",
                "+  @Value.Default",
                "   public Flavor getFlavor() {",
                "-    return InternalFlavor.of(getGoOs() + \"_\" + getGoArch());",
                "+    return getCxxPlatform().getFlavor();",
                "   }",
                "diff --git a/src/com/facebook/buck/go/AbstractGoPlatformFactory.java b/src/com/facebook/buck/go/AbstractGoPlatformFactory.java",
                "index 0f18805d94..148b3e8456 100644",
                "--- a/src/com/facebook/buck/go/AbstractGoPlatformFactory.java",
                "+++ b/src/com/facebook/buck/go/AbstractGoPlatformFactory.java",
                "@@ -27,2 +27,4 @@ import com.facebook.buck.util.ProcessExecutor;",
                " import com.facebook.buck.util.ProcessExecutorParams;",
                "+import com.facebook.buck.util.environment.Architecture;",
                "+import com.facebook.buck.util.environment.Platform;",
                " import com.facebook.buck.util.immutables.BuckStyleTuple;",
                "@@ -36,2 +38,3 @@ import java.nio.file.Paths;",
                " import java.util.EnumSet;",
                "+import java.util.Map;",
                " import java.util.Optional;",
                "@@ -46,2 +49,43 @@ abstract class AbstractGoPlatformFactory {",
                "+  // GOOS/GOARCH values from",
                "+  // https://github.com/golang/go/blob/master/src/go/build/syslist.go",
                "+  private static final ImmutableMap<String, Platform> GOOS_TO_PLATFORM_LIST =",
                "+      ImmutableMap.<String, Platform>builder()",
                "+          .put(\"linux\", Platform.LINUX)",
                "+          .put(\"windows\", Platform.WINDOWS)",
                "+          .put(\"darwin\", Platform.MACOS)",
                "+          .put(\"android\", Platform.UNKNOWN)",
                "+          .put(\"dragonfly\", Platform.UNKNOWN)",
                "+          .put(\"freebsd\", Platform.UNKNOWN)",
                "+          .put(\"nacl\", Platform.UNKNOWN)",
                "+          .put(\"netbsd\", Platform.UNKNOWN)",
                "+          .put(\"openbsd\", Platform.UNKNOWN)",
                "+          .put(\"plan9\", Platform.UNKNOWN)",
                "+          .put(\"solaris\", Platform.UNKNOWN)",
                "+          .build();",
                "+",
                "+  private static final ImmutableMap<String, Architecture> GOARCH_TO_ARCH_LIST =",
                "+      ImmutableMap.<String, Architecture>builder()",
                "+          .put(\"386\", Architecture.I386)",
                "+          .put(\"amd64\", Architecture.X86_64)",
                "+          .put(\"amd64p32\", Architecture.UNKNOWN)",
                "+          .put(\"arm\", Architecture.ARM)",
                "+          .put(\"armbe\", Architecture.ARMEB)",
                "+          .put(\"arm64\", Architecture.AARCH64)",
                "+          .put(\"arm64be\", Architecture.UNKNOWN)",
                "+          .put(\"ppc64\", Architecture.PPC64)",
                "+          .put(\"ppc64le\", Architecture.UNKNOWN)",
                "+          .put(\"mips\", Architecture.MIPS)",
                "+          .put(\"mipsle\", Architecture.MIPSEL)",
                "+          .put(\"mips64\", Architecture.MIPS64)",
                "+          .put(\"mips64le\", Architecture.MIPSEL64)",
                "+          .put(\"mips64p32\", Architecture.UNKNOWN)",
                "+          .put(\"mips64p32le\", Architecture.UNKNOWN)",
                "+          .put(\"ppc\", Architecture.POWERPC)",
                "+          .put(\"s390\", Architecture.UNKNOWN)",
                "+          .put(\"s390x\", Architecture.UNKNOWN)",
                "+          .put(\"sparc\", Architecture.UNKNOWN)",
                "+          .put(\"sparc64\", Architecture.UNKNOWN)",
                "+          .build();",
                "+",
                "   @Value.Parameter",
                "@@ -55,7 +99,34 @@ abstract class AbstractGoPlatformFactory {",
                "-  @Value.Parameter",
                "-  public abstract CxxPlatform getDefaultCxxPlatform();",
                "+  @Value.Lazy",
                "+  String getDefaultOs() {",
                "+    Platform platform = Platform.detect();",
                "+    if (platform == Platform.UNKNOWN) {",
                "+      throw new HumanReadableException(\"Unable to detect system platform\");",
                "+    }",
                "+    return GOOS_TO_PLATFORM_LIST",
                "+        .entrySet()",
                "+        .stream()",
                "+        .filter(e -> e.getValue() == platform)",
                "+        .findFirst()",
                "+        .map(Map.Entry::getKey)",
                "+        .orElseThrow(() -> new HumanReadableException(\"No Go OS corresponding to %s\", platform));",
                "+  }",
                "+",
                "+  @Value.Lazy",
                "+  String getDefaultArch() {",
                "+    Architecture arch = Architecture.detect();",
                "+    if (arch == Architecture.UNKNOWN) {",
                "+      throw new HumanReadableException(\"Unable to detect system architecture\");",
                "+    }",
                "+    return GOARCH_TO_ARCH_LIST",
                "+        .entrySet()",
                "+        .stream()",
                "+        .filter(e -> e.getValue() == arch)",
                "+        .findFirst()",
                "+        .map(Map.Entry::getKey)",
                "+        .orElseThrow(() -> new HumanReadableException(\"No Go arch corresponding to %s\", arch));",
                "+  }",
                "   /** @return the {@link GoPlatform} defined in the given {@code section}. */",
                "-  public GoPlatform getPlatform(String os, String arch, String section) {",
                "+  public GoPlatform getPlatform(String section, CxxPlatform cxxPlatform) {",
                "     Path goRoot = getGoRoot(section);",
                "@@ -63,4 +134,4 @@ abstract class AbstractGoPlatformFactory {",
                "     return GoPlatform.builder()",
                "-        .setGoOs(os)",
                "-        .setGoArch(arch)",
                "+        .setGoOs(getOs(section))",
                "+        .setGoArch(getArch(section))",
                "         .setGoRoot(goRoot)",
                "@@ -74,3 +145,3 @@ abstract class AbstractGoPlatformFactory {",
                "         .setCover(getGoTool(section, goRoot, toolsDir, \"cover\", \"cover\", \"\"))",
                "-        .setCxxPlatform(getDefaultCxxPlatform())",
                "+        .setCxxPlatform(cxxPlatform)",
                "         .build();",
                "@@ -78,2 +149,28 @@ abstract class AbstractGoPlatformFactory {",
                "+  private String getOs(String section) {",
                "+    return getBuckConfig()",
                "+        .getValue(section, \"os\")",
                "+        .map(",
                "+            os -> {",
                "+              if (!GOOS_TO_PLATFORM_LIST.containsKey(os)) {",
                "+                throw new HumanReadableException(\"%s.arch: unknown OS %s\", section, os);",
                "+              }",
                "+              return os;",
                "+            })",
                "+        .orElseGet(this::getDefaultOs);",
                "+  }",
                "+",
                "+  private String getArch(String section) {",
                "+    return getBuckConfig()",
                "+        .getValue(section, \"arch\")",
                "+        .map(",
                "+            os -> {",
                "+              if (!GOARCH_TO_ARCH_LIST.containsKey(os)) {",
                "+                throw new HumanReadableException(\"%s.arch: unknown architecture %s\", section, os);",
                "+              }",
                "+              return os;",
                "+            })",
                "+        .orElseGet(this::getDefaultArch);",
                "+  }",
                "+",
                "   private Tool getGoTool(",
                "diff --git a/src/com/facebook/buck/go/AbstractGoToolchain.java b/src/com/facebook/buck/go/AbstractGoToolchain.java",
                "index 0ce9349d67..99d48fb7dd 100644",
                "--- a/src/com/facebook/buck/go/AbstractGoToolchain.java",
                "+++ b/src/com/facebook/buck/go/AbstractGoToolchain.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.go;",
                "+import com.facebook.buck.model.FlavorDomain;",
                " import com.facebook.buck.toolchain.Toolchain;",
                "@@ -29,3 +30,3 @@ public abstract class AbstractGoToolchain implements Toolchain {",
                "   @Value.Parameter",
                "-  public abstract GoPlatformFlavorDomain getPlatformFlavorDomain();",
                "+  public abstract FlavorDomain<GoPlatform> getPlatformFlavorDomain();",
                "diff --git a/src/com/facebook/buck/go/GoPlatformFlavorDomain.java b/src/com/facebook/buck/go/GoPlatformFlavorDomain.java",
                "deleted file mode 100644",
                "index e2f56fc4fe..0000000000",
                "--- a/src/com/facebook/buck/go/GoPlatformFlavorDomain.java",
                "+++ /dev/null",
                "@@ -1,144 +0,0 @@",
                "-/*",
                "- * Copyright 2016-present Facebook, Inc.",
                "- *",
                "- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "- * not use this file except in compliance with the License. You may obtain",
                "- * a copy of the License at",
                "- *",
                "- *     http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "- * License for the specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-",
                "-package com.facebook.buck.go;",
                "-",
                "-import com.facebook.buck.model.BuildTarget;",
                "-import com.facebook.buck.model.Flavor;",
                "-import com.facebook.buck.util.MoreMaps;",
                "-import com.facebook.buck.util.environment.Architecture;",
                "-import com.facebook.buck.util.environment.Platform;",
                "-import com.google.common.base.Preconditions;",
                "-import com.google.common.collect.ImmutableMap;",
                "-import com.google.common.collect.ImmutableSet;",
                "-import java.util.Map;",
                "-import java.util.Optional;",
                "-",
                "-public class GoPlatformFlavorDomain {",
                "-",
                "-  // GOOS/GOARCH values from",
                "-  // https://github.com/golang/go/blob/master/src/go/build/syslist.go",
                "-  private static final ImmutableMap<String, Platform> GOOS_TO_PLATFORM_LIST =",
                "-      ImmutableMap.<String, Platform>builder()",
                "-          .put(\"linux\", Platform.LINUX)",
                "-          .put(\"windows\", Platform.WINDOWS)",
                "-          .put(\"darwin\", Platform.MACOS)",
                "-          .put(\"android\", Platform.UNKNOWN)",
                "-          .put(\"dragonfly\", Platform.UNKNOWN)",
                "-          .put(\"freebsd\", Platform.UNKNOWN)",
                "-          .put(\"nacl\", Platform.UNKNOWN)",
                "-          .put(\"netbsd\", Platform.UNKNOWN)",
                "-          .put(\"openbsd\", Platform.UNKNOWN)",
                "-          .put(\"plan9\", Platform.UNKNOWN)",
                "-          .put(\"solaris\", Platform.UNKNOWN)",
                "-          .build();",
                "-",
                "-  private static final ImmutableMap<String, Architecture> GOARCH_TO_ARCH_LIST =",
                "-      ImmutableMap.<String, Architecture>builder()",
                "-          .put(\"386\", Architecture.I386)",
                "-          .put(\"amd64\", Architecture.X86_64)",
                "-          .put(\"amd64p32\", Architecture.UNKNOWN)",
                "-          .put(\"arm\", Architecture.ARM)",
                "-          .put(\"armbe\", Architecture.ARMEB)",
                "-          .put(\"arm64\", Architecture.AARCH64)",
                "-          .put(\"arm64be\", Architecture.UNKNOWN)",
                "-          .put(\"ppc64\", Architecture.PPC64)",
                "-          .put(\"ppc64le\", Architecture.UNKNOWN)",
                "-          .put(\"mips\", Architecture.MIPS)",
                "-          .put(\"mipsle\", Architecture.MIPSEL)",
                "-          .put(\"mips64\", Architecture.MIPS64)",
                "-          .put(\"mips64le\", Architecture.MIPSEL64)",
                "-          .put(\"mips64p32\", Architecture.UNKNOWN)",
                "-          .put(\"mips64p32le\", Architecture.UNKNOWN)",
                "-          .put(\"ppc\", Architecture.POWERPC)",
                "-          .put(\"s390\", Architecture.UNKNOWN)",
                "-          .put(\"s390x\", Architecture.UNKNOWN)",
                "-          .put(\"sparc\", Architecture.UNKNOWN)",
                "-          .put(\"sparc64\", Architecture.UNKNOWN)",
                "-          .build();",
                "-",
                "-  private ImmutableMap<String, Platform> goOsValues;",
                "-  private ImmutableMap<String, Architecture> goArchValues;",
                "-  private GoPlatformFactory platformFactory;",
                "-",
                "-  public GoPlatformFlavorDomain(",
                "-      Map<String, Platform> additionalOsValues,",
                "-      Map<String, Architecture> additionalArchValues,",
                "-      GoPlatformFactory platformFactory) {",
                "-    this.goOsValues = MoreMaps.merge(GOOS_TO_PLATFORM_LIST, additionalOsValues);",
                "-    this.goArchValues = MoreMaps.merge(GOARCH_TO_ARCH_LIST, additionalArchValues);",
                "-    this.platformFactory = platformFactory;",
                "-  }",
                "-",
                "-  public GoPlatformFlavorDomain(GoPlatformFactory platformFactory) {",
                "-    this(ImmutableMap.of(), ImmutableMap.of(), platformFactory);",
                "-  }",
                "-",
                "-  public Optional<GoPlatform> getValue(Flavor flavor) {",
                "-    String[] components = flavor.getName().split(\"_\");",
                "-    if (components.length != 2) {",
                "-      return Optional.empty();",
                "-    }",
                "-",
                "-    Platform os = goOsValues.get(components[0]);",
                "-    Architecture arch = goArchValues.get(components[1]);",
                "-    if (os != null && arch != null) {",
                "-      return Optional.of(",
                "-          platformFactory.getPlatform(components[0], components[1], GoBuckConfig.SECTION));",
                "-    }",
                "-    return Optional.empty();",
                "-  }",
                "-",
                "-  public Optional<GoPlatform> getValue(ImmutableSet<Flavor> flavors) {",
                "-    for (Flavor f : flavors) {",
                "-      Optional<GoPlatform> result = getValue(f);",
                "-      if (result.isPresent()) {",
                "-        return result;",
                "-      }",
                "-    }",
                "-    return Optional.empty();",
                "-  }",
                "-",
                "-  public Optional<GoPlatform> getValue(BuildTarget target) {",
                "-    return getValue(target.getFlavors());",
                "-  }",
                "-",
                "-  public boolean containsAnyOf(ImmutableSet<Flavor> flavors) {",
                "-    return getValue(flavors).isPresent();",
                "-  }",
                "-",
                "-  public Optional<GoPlatform> getValue(Platform platform, Architecture architecture) {",
                "-    Preconditions.checkArgument(platform != Platform.UNKNOWN);",
                "-    Preconditions.checkArgument(architecture != Architecture.UNKNOWN);",
                "-",
                "-    Optional<Map.Entry<String, Platform>> osValue =",
                "-        goOsValues.entrySet().stream().filter(input -> input.getValue() == platform).findFirst();",
                "-    Optional<Map.Entry<String, Architecture>> archValue =",
                "-        goArchValues",
                "-            .entrySet()",
                "-            .stream()",
                "-            .filter(input -> input.getValue() == architecture)",
                "-            .findFirst();",
                "-",
                "-    if (!osValue.isPresent() || !archValue.isPresent()) {",
                "-      return Optional.empty();",
                "-    }",
                "-",
                "-    return Optional.of(",
                "-        platformFactory.getPlatform(",
                "-            osValue.get().getKey(), archValue.get().getKey(), GoBuckConfig.SECTION));",
                "-  }",
                "-}",
                "diff --git a/src/com/facebook/buck/go/GoToolchainFactory.java b/src/com/facebook/buck/go/GoToolchainFactory.java",
                "index 350d25c4e8..fd9d3eaee4 100644",
                "--- a/src/com/facebook/buck/go/GoToolchainFactory.java",
                "+++ b/src/com/facebook/buck/go/GoToolchainFactory.java",
                "@@ -20,2 +20,5 @@ import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "+import com.facebook.buck.cxx.toolchain.DefaultCxxPlatforms;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.FlavorDomain;",
                " import com.facebook.buck.model.InternalFlavor;",
                "@@ -24,5 +27,4 @@ import com.facebook.buck.toolchain.ToolchainFactory;",
                " import com.facebook.buck.toolchain.ToolchainProvider;",
                "-import com.facebook.buck.util.HumanReadableException;",
                "-import com.facebook.buck.util.environment.Architecture;",
                "-import com.facebook.buck.util.environment.Platform;",
                "+import com.facebook.buck.util.RichStream;",
                "+import com.google.common.collect.ImmutableList;",
                " import java.util.Optional;",
                "@@ -38,2 +40,3 @@ public class GoToolchainFactory implements ToolchainFactory<GoToolchain> {",
                "     CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();",
                "+    FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();",
                "@@ -41,34 +44,46 @@ public class GoToolchainFactory implements ToolchainFactory<GoToolchain> {",
                "         GoPlatformFactory.of(",
                "-            context.getBuckConfig(),",
                "-            context.getProcessExecutor(),",
                "-            context.getExecutableFinder(),",
                "-            defaultCxxPlatform);",
                "-    GoPlatformFlavorDomain platformFlavorDomain = new GoPlatformFlavorDomain(platformFactory);",
                "-    GoBuckConfig goBuckConfig = new GoBuckConfig(context.getBuckConfig());",
                "+            context.getBuckConfig(), context.getProcessExecutor(), context.getExecutableFinder());",
                "-    return Optional.of(",
                "-        GoToolchain.of(",
                "-            platformFlavorDomain, getDefaultPlatform(goBuckConfig, platformFlavorDomain)));",
                "-  }",
                "+    FlavorDomain<GoPlatform> goPlatforms =",
                "+        FlavorDomain.from(",
                "+            \"Go Platforms\",",
                "+            RichStream.from(cxxPlatforms.getValues())",
                "+                .map(",
                "+                    cxxPlatform ->",
                "+                        platformFactory.getPlatform(",
                "+                            // We special case the \"default\" C/C++ platform to just use the \"Go\"",
                "+                            // section.",
                "+                            cxxPlatform.getFlavor().equals(DefaultCxxPlatforms.FLAVOR)",
                "+                                ? GoBuckConfig.SECTION",
                "+                                : GoBuckConfig.SECTION + \"#\" + cxxPlatform.getFlavor(),",
                "+                            cxxPlatform))",
                "+                .toImmutableList());",
                "+    GoBuckConfig goBuckConfig = new GoBuckConfig(context.getBuckConfig());",
                "+    GoPlatform defaultGoPlatform =",
                "+        goPlatforms.getValue(",
                "+            goBuckConfig",
                "+                .getDefaultPlatform()",
                "+                .<Flavor>map(InternalFlavor::of)",
                "+                .orElse(defaultCxxPlatform.getFlavor()));",
                "-  private GoPlatform getDefaultPlatform(",
                "-      GoBuckConfig goBuckConfig, GoPlatformFlavorDomain platformFlavorDomain) {",
                "-    Optional<String> configValue = goBuckConfig.getDefaultPlatform();",
                "-    Optional<GoPlatform> goPlatform;",
                "-    if (configValue.isPresent()) {",
                "-      goPlatform = platformFlavorDomain.getValue(InternalFlavor.of(configValue.get()));",
                "-      if (!goPlatform.isPresent()) {",
                "-        throw new HumanReadableException(",
                "-            \"Bad go platform value for go.default_platform = %s\", configValue);",
                "-      }",
                "-    } else {",
                "-      Platform platform = goBuckConfig.getDelegate().getPlatform();",
                "-      Architecture architecture = goBuckConfig.getDelegate().getArchitecture();",
                "-      goPlatform = platformFlavorDomain.getValue(platform, architecture);",
                "-      if (!goPlatform.isPresent()) {",
                "-        throw new HumanReadableException(",
                "-            \"Couldn't determine default go platform for %s %s\", platform, architecture);",
                "-      }",
                "+    // TODO(agallagher): For backwards compatibility with older style Go platform naming",
                "+    // conventions, we also install the default platform under the `<os>_<arch>` flavor.",
                "+    if (platformFactory.getDefaultOs().equals(defaultGoPlatform.getGoOs())",
                "+        && platformFactory.getDefaultArch().equals(defaultGoPlatform.getGoArch())) {",
                "+      goPlatforms =",
                "+          FlavorDomain.from(",
                "+              goPlatforms.getName(),",
                "+              ImmutableList.<GoPlatform>builder()",
                "+                  .addAll(goPlatforms.getValues())",
                "+                  .add(",
                "+                      defaultGoPlatform.withFlavor(",
                "+                          InternalFlavor.of(",
                "+                              String.format(",
                "+                                  \"%s_%s\",",
                "+                                  platformFactory.getDefaultOs(),",
                "+                                  platformFactory.getDefaultArch()))))",
                "+                  .build());",
                "     }",
                "-    return goPlatform.get();",
                "+",
                "+    return Optional.of(GoToolchain.of(goPlatforms, defaultGoPlatform));",
                "   }",
                "diff --git a/test/com/facebook/buck/go/GoDescriptorsTest.java b/test/com/facebook/buck/go/GoDescriptorsTest.java",
                "index bc6cea8cf2..a84a2895f3 100644",
                "--- a/test/com/facebook/buck/go/GoDescriptorsTest.java",
                "+++ b/test/com/facebook/buck/go/GoDescriptorsTest.java",
                "@@ -27,3 +27,2 @@ import com.facebook.buck.model.BuildTarget;",
                " import com.facebook.buck.model.BuildTargetFactory;",
                "-import com.facebook.buck.model.InternalFlavor;",
                " import com.facebook.buck.rules.BuildRule;",
                "@@ -131,2 +130,3 @@ public class GoDescriptorsTest {",
                "+    GoPlatform goPlatform = GoTestUtils.DEFAULT_PLATFORM.withGoArch(\"amd64\").withGoOs(\"linux\");",
                "     ProjectFilesystem filesystem =",
                "@@ -134,4 +134,3 @@ public class GoDescriptorsTest {",
                "     BuildTarget target =",
                "-        BuildTargetFactory.newInstance(\"//:go_library\")",
                "-            .withFlavors(InternalFlavor.of(\"linux_amd64\"));",
                "+        BuildTargetFactory.newInstance(\"//:go_library\").withFlavors(goPlatform.getFlavor());",
                "     BuildTarget srcTarget = BuildTargetFactory.newInstance(\"//:go_genrule\");",
                "@@ -145,3 +144,2 @@ public class GoDescriptorsTest {",
                "     GoBuckConfig goBuckConfig = new GoBuckConfig(FakeBuckConfig.builder().build());",
                "-    GoPlatform goPlatform = GoTestUtils.DEFAULT_PLATFORM.withGoArch(\"amd64\").withGoOs(\"linux\");",
                "@@ -178,2 +176,3 @@ public class GoDescriptorsTest {",
                "+    GoPlatform goPlatform = GoTestUtils.DEFAULT_PLATFORM;",
                "     ProjectFilesystem filesystem =",
                "@@ -181,4 +180,3 @@ public class GoDescriptorsTest {",
                "     BuildTarget target =",
                "-        BuildTargetFactory.newInstance(\"//:go_library\")",
                "-            .withFlavors(InternalFlavor.of(\"linux_amd64\"));",
                "+        BuildTargetFactory.newInstance(\"//:go_library\").withFlavors(goPlatform.getFlavor());",
                "     BuildTarget srcTarget = BuildTargetFactory.newInstance(\"//:go_genrule\");",
                "@@ -192,3 +190,2 @@ public class GoDescriptorsTest {",
                "     GoBuckConfig goBuckConfig = new GoBuckConfig(FakeBuckConfig.builder().build());",
                "-    GoPlatform goPlatform = GoTestUtils.DEFAULT_PLATFORM.withGoArch(\"amd64\").withGoOs(\"linux\");",
                "@@ -210,2 +207,3 @@ public class GoDescriptorsTest {",
                "+    System.out.println(binary.getBuildDeps());",
                "     GoCompile compile =",
                "@@ -218,3 +216,3 @@ public class GoDescriptorsTest {",
                "                         .getFullyQualifiedName()",
                "-                        .equals(\"//:go_library#compile,linux_amd64\"))",
                "+                        .equals(\"//:go_library#compile,\" + goPlatform.getFlavor()))",
                "             .map(dep -> (GoCompile) dep)",
                "diff --git a/test/com/facebook/buck/go/GoPlatformFactoryTest.java b/test/com/facebook/buck/go/GoPlatformFactoryTest.java",
                "index 01157f5384..e94b3b213f 100644",
                "--- a/test/com/facebook/buck/go/GoPlatformFactoryTest.java",
                "+++ b/test/com/facebook/buck/go/GoPlatformFactoryTest.java",
                "@@ -47,11 +47,16 @@ public class GoPlatformFactoryTest {",
                "                         ImmutableMap.of(",
                "-                            \"root\", root.toString(),",
                "-                            \"tool_dir\", root.toString())))",
                "+                            \"os\",",
                "+                            \"linux\",",
                "+                            \"arch\",",
                "+                            \"amd64\",",
                "+                            \"root\",",
                "+                            root.toString(),",
                "+                            \"tool_dir\",",
                "+                            root.toString())))",
                "                 .build(),",
                "             new FakeProcessExecutor(),",
                "-            new AlwaysFoundExecutableFinder(),",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM);",
                "-    GoPlatform platform = factory.getPlatform(\"os\", \"arch\", \"section\");",
                "-    assertThat(platform.getGoOs(), Matchers.equalTo(\"os\"));",
                "-    assertThat(platform.getGoArch(), Matchers.equalTo(\"arch\"));",
                "+            new AlwaysFoundExecutableFinder());",
                "+    GoPlatform platform = factory.getPlatform(\"section\", CxxPlatformUtils.DEFAULT_PLATFORM);",
                "+    assertThat(platform.getGoOs(), Matchers.equalTo(\"linux\"));",
                "+    assertThat(platform.getGoArch(), Matchers.equalTo(\"amd64\"));",
                "   }",
                "diff --git a/test/com/facebook/buck/go/GoTestUtils.java b/test/com/facebook/buck/go/GoTestUtils.java",
                "index b9796e7575..0d4012898e 100644",
                "--- a/test/com/facebook/buck/go/GoTestUtils.java",
                "+++ b/test/com/facebook/buck/go/GoTestUtils.java",
                "@@ -26,4 +26,4 @@ public class GoTestUtils {",
                "       GoPlatform.builder()",
                "-          .setGoOs(\"os\")",
                "-          .setGoArch(\"arch\")",
                "+          .setGoOs(\"linux\")",
                "+          .setGoArch(\"amd64\")",
                "           .setGoRoot(Paths.get(\"/root\"))"
            ],
            "changed_files": [
                "src/com/facebook/buck/go/AbstractGoPlatform.java",
                "src/com/facebook/buck/go/AbstractGoPlatformFactory.java",
                "src/com/facebook/buck/go/AbstractGoToolchain.java",
                "src/com/facebook/buck/go/GoPlatformFlavorDomain.java",
                "src/com/facebook/buck/go/GoToolchainFactory.java",
                "test/com/facebook/buck/go/GoDescriptorsTest.java",
                "test/com/facebook/buck/go/GoPlatformFactoryTest.java",
                "test/com/facebook/buck/go/GoTestUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "495e156e287166800da4c7134a27c20c6b94e12a",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522953746,
            "hunks": 44,
            "message": "go: make `CxxPlatform` a member of `GoPlatform` Summary: Construct `GoPlatform`s with a `CxxPlatform` and update descriptions to use it. Reviewed By: ttsugriy fbshipit-source-id: 86c0db9",
            "diff": [
                "diff --git a/src/com/facebook/buck/go/AbstractGoPlatform.java b/src/com/facebook/buck/go/AbstractGoPlatform.java",
                "index 75908aaf2a..a4e050de8c 100644",
                "--- a/src/com/facebook/buck/go/AbstractGoPlatform.java",
                "+++ b/src/com/facebook/buck/go/AbstractGoPlatform.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.go;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.model.Flavor;",
                "@@ -62,2 +63,4 @@ abstract class AbstractGoPlatform implements FlavorConvertible, AddsToRuleKey {",
                "   public abstract Tool getCover();",
                "+",
                "+  public abstract CxxPlatform getCxxPlatform();",
                " }",
                "diff --git a/src/com/facebook/buck/go/AbstractGoPlatformFactory.java b/src/com/facebook/buck/go/AbstractGoPlatformFactory.java",
                "index ed6b138bb6..0f18805d94 100644",
                "--- a/src/com/facebook/buck/go/AbstractGoPlatformFactory.java",
                "+++ b/src/com/facebook/buck/go/AbstractGoPlatformFactory.java",
                "@@ -19,2 +19,3 @@ package com.facebook.buck.go;",
                " import com.facebook.buck.config.BuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.io.ExecutableFinder;",
                "@@ -54,2 +55,5 @@ abstract class AbstractGoPlatformFactory {",
                "+  @Value.Parameter",
                "+  public abstract CxxPlatform getDefaultCxxPlatform();",
                "+",
                "   /** @return the {@link GoPlatform} defined in the given {@code section}. */",
                "@@ -70,2 +74,3 @@ abstract class AbstractGoPlatformFactory {",
                "         .setCover(getGoTool(section, goRoot, toolsDir, \"cover\", \"cover\", \"\"))",
                "+        .setCxxPlatform(getDefaultCxxPlatform())",
                "         .build();",
                "diff --git a/src/com/facebook/buck/go/CGoLibrary.java b/src/com/facebook/buck/go/CGoLibrary.java",
                "index f839cfccfb..6b5014ed76 100644",
                "--- a/src/com/facebook/buck/go/CGoLibrary.java",
                "+++ b/src/com/facebook/buck/go/CGoLibrary.java",
                "@@ -80,3 +80,2 @@ public class CGoLibrary extends NoopBuildRule {",
                "       CxxBuckConfig cxxBuckConfig,",
                "-      CxxPlatform cxxPlatform,",
                "       GoPlatform platform,",
                "@@ -96,3 +95,8 @@ public class CGoLibrary extends NoopBuildRule {",
                "         CxxDescriptionEnhancer.parseHeaders(",
                "-            buildTarget, ruleResolver, ruleFinder, pathResolver, Optional.of(cxxPlatform), args);",
                "+            buildTarget,",
                "+            ruleResolver,",
                "+            ruleFinder,",
                "+            pathResolver,",
                "+            Optional.of(platform.getCxxPlatform()),",
                "+            args);",
                "@@ -132,3 +136,3 @@ public class CGoLibrary extends NoopBuildRule {",
                "                     cxxBuckConfig,",
                "-                    cxxPlatform,",
                "+                    platform.getCxxPlatform(),",
                "                     args,",
                "@@ -179,3 +183,3 @@ public class CGoLibrary extends NoopBuildRule {",
                "                     cxxBuckConfig,",
                "-                    cxxPlatform,",
                "+                    platform.getCxxPlatform(),",
                "                     args,",
                "diff --git a/src/com/facebook/buck/go/CgoLibraryDescription.java b/src/com/facebook/buck/go/CgoLibraryDescription.java",
                "index 872c8b2339..f21f7a2e92 100644",
                "--- a/src/com/facebook/buck/go/CgoLibraryDescription.java",
                "+++ b/src/com/facebook/buck/go/CgoLibraryDescription.java",
                "@@ -20,5 +20,3 @@ import com.facebook.buck.cxx.CxxBinaryDescription;",
                " import com.facebook.buck.cxx.toolchain.CxxBuckConfig;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                " import com.facebook.buck.model.BuildTarget;",
                "@@ -103,3 +101,2 @@ public class CgoLibraryDescription",
                "         cxxBuckConfig,",
                "-        getCxxPlatform(),",
                "         platform,",
                "@@ -120,11 +117,11 @@ public class CgoLibraryDescription",
                "       ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "-    // Add the C/C++ linker parse time deps.",
                "-    CxxPlatform cxxPlatform = getCxxPlatform();",
                "-    targetGraphOnlyDepsBuilder.addAll(CxxPlatforms.getParseTimeDeps(cxxPlatform));",
                "-  }",
                "-",
                "-  private CxxPlatform getCxxPlatform() {",
                "-    CxxPlatformsProvider cxxPlatformsProviderFactory =",
                "-        toolchainProvider.getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class);",
                "-    return cxxPlatformsProviderFactory.getDefaultCxxPlatform();",
                "+    // Add the C/C++ platform deps.",
                "+    GoToolchain toolchain = getGoToolchain();",
                "+    targetGraphOnlyDepsBuilder.addAll(",
                "+        CxxPlatforms.getParseTimeDeps(",
                "+            toolchain",
                "+                .getPlatformFlavorDomain()",
                "+                .getValue(buildTarget)",
                "+                .orElse(toolchain.getDefaultPlatform())",
                "+                .getCxxPlatform()));",
                "   }",
                "diff --git a/src/com/facebook/buck/go/GoBinaryDescription.java b/src/com/facebook/buck/go/GoBinaryDescription.java",
                "index a816458cf1..70e5d80e27 100644",
                "--- a/src/com/facebook/buck/go/GoBinaryDescription.java",
                "+++ b/src/com/facebook/buck/go/GoBinaryDescription.java",
                "@@ -18,6 +18,3 @@ package com.facebook.buck.go;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "-import com.facebook.buck.cxx.toolchain.DefaultCxxPlatforms;",
                " import com.facebook.buck.model.BuildTarget;",
                "@@ -85,3 +82,2 @@ public class GoBinaryDescription",
                "         goBuckConfig,",
                "-        getCxxPlatform(!args.getCgoDeps().isEmpty()),",
                "         args.getSrcs(),",
                "@@ -102,17 +98,10 @@ public class GoBinaryDescription",
                "     // Add the C/C++ linker parse time deps.",
                "-    CxxPlatform cxxPlatform = getCxxPlatform(!constructorArg.getCgoDeps().isEmpty());",
                "-    targetGraphOnlyDepsBuilder.addAll(CxxPlatforms.getParseTimeDeps(cxxPlatform));",
                "-  }",
                "-",
                "-  private CxxPlatform getCxxPlatform(boolean withCgo) {",
                "-    CxxPlatformsProvider cxxPlatformsProviderFactory =",
                "-        toolchainProvider.getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class);",
                "-",
                "-    if (withCgo) {",
                "-      return cxxPlatformsProviderFactory.getDefaultCxxPlatform();",
                "-    }",
                "-    return cxxPlatformsProviderFactory",
                "-        .getCxxPlatforms()",
                "-        .getValue(ImmutableSet.of(DefaultCxxPlatforms.FLAVOR))",
                "-        .get();",
                "+    GoToolchain toolchain = getGoToolchain();",
                "+    targetGraphOnlyDepsBuilder.addAll(",
                "+        CxxPlatforms.getParseTimeDeps(",
                "+            toolchain",
                "+                .getPlatformFlavorDomain()",
                "+                .getValue(buildTarget)",
                "+                .orElse(toolchain.getDefaultPlatform())",
                "+                .getCxxPlatform()));",
                "   }",
                "diff --git a/src/com/facebook/buck/go/GoDescriptors.java b/src/com/facebook/buck/go/GoDescriptors.java",
                "index 42fce976eb..ba50a5d17d 100644",
                "--- a/src/com/facebook/buck/go/GoDescriptors.java",
                "+++ b/src/com/facebook/buck/go/GoDescriptors.java",
                "@@ -18,3 +18,2 @@ package com.facebook.buck.go;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "@@ -205,3 +204,2 @@ abstract class GoDescriptors {",
                "       GoBuckConfig goBuckConfig,",
                "-      CxxPlatform cxxPlatform,",
                "       ImmutableSet<SourcePath> srcs,",
                "@@ -260,3 +258,3 @@ abstract class GoDescriptors {",
                "-    Optional<Linker> cxxLinker = Optional.of(cxxPlatform.getLd().resolve(resolver));",
                "+    Optional<Linker> cxxLinker = Optional.of(platform.getCxxPlatform().getLd().resolve(resolver));",
                "     return new GoBinary(",
                "@@ -283,3 +281,2 @@ abstract class GoDescriptors {",
                "       GoPlatform platform,",
                "-      CxxPlatform cxxPlatform,",
                "       BuildTarget sourceBuildTarget,",
                "@@ -323,3 +320,2 @@ abstract class GoDescriptors {",
                "                   goBuckConfig,",
                "-                  cxxPlatform,",
                "                   ImmutableSet.of(writeFile.getSourcePathToOutput()),",
                "diff --git a/src/com/facebook/buck/go/GoLibraryDescription.java b/src/com/facebook/buck/go/GoLibraryDescription.java",
                "index 4254c33e77..3022dab552 100644",
                "--- a/src/com/facebook/buck/go/GoLibraryDescription.java",
                "+++ b/src/com/facebook/buck/go/GoLibraryDescription.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.go;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                " import com.facebook.buck.go.GoListStep.FileType;",
                "@@ -33,2 +34,3 @@ import com.facebook.buck.rules.HasSrcs;",
                " import com.facebook.buck.rules.HasTests;",
                "+import com.facebook.buck.rules.ImplicitDepsInferringDescription;",
                " import com.facebook.buck.rules.MetadataProvidingDescription;",
                "@@ -41,2 +43,3 @@ import com.facebook.buck.versions.VersionPropagator;",
                " import com.google.common.base.Preconditions;",
                "+import com.google.common.collect.ImmutableCollection.Builder;",
                " import com.google.common.collect.ImmutableList;",
                "@@ -55,2 +58,3 @@ public class GoLibraryDescription",
                "         MetadataProvidingDescription<GoLibraryDescriptionArg>,",
                "+        ImplicitDepsInferringDescription<GoLibraryDescriptionArg>,",
                "         VersionPropagator<GoLibraryDescriptionArg> {",
                "@@ -152,2 +156,19 @@ public class GoLibraryDescription",
                "+  @Override",
                "+  public void findDepsForTargetFromConstructorArgs(",
                "+      BuildTarget buildTarget,",
                "+      CellPathResolver cellRoots,",
                "+      GoLibraryDescriptionArg constructorArg,",
                "+      Builder<BuildTarget> extraDepsBuilder,",
                "+      Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "+    GoToolchain toolchain = getGoToolchain();",
                "+    toolchain",
                "+        .getPlatformFlavorDomain()",
                "+        .getValue(buildTarget)",
                "+        .ifPresent(",
                "+            platform ->",
                "+                targetGraphOnlyDepsBuilder.addAll(",
                "+                    CxxPlatforms.getParseTimeDeps(platform.getCxxPlatform())));",
                "+  }",
                "+",
                "   private GoToolchain getGoToolchain() {",
                "diff --git a/src/com/facebook/buck/go/GoTestDescription.java b/src/com/facebook/buck/go/GoTestDescription.java",
                "index 0ea5295d7e..d46b13ced4 100644",
                "--- a/src/com/facebook/buck/go/GoTestDescription.java",
                "+++ b/src/com/facebook/buck/go/GoTestDescription.java",
                "@@ -18,6 +18,3 @@ package com.facebook.buck.go;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatforms;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "-import com.facebook.buck.cxx.toolchain.DefaultCxxPlatforms;",
                " import com.facebook.buck.go.GoListStep.FileType;",
                "@@ -153,10 +150,3 @@ public class GoTestDescription",
                "         GoDescriptors.getTestMainGenerator(",
                "-            goBuckConfig,",
                "-            platform,",
                "-            getCxxPlatform(!cgoDeps.isEmpty()),",
                "-            buildTarget,",
                "-            projectFilesystem,",
                "-            params,",
                "-            resolver,",
                "-            cgoDeps);",
                "+            goBuckConfig, platform, buildTarget, projectFilesystem, params, resolver, cgoDeps);",
                "@@ -308,3 +298,2 @@ public class GoTestDescription",
                "             goBuckConfig,",
                "-            getCxxPlatform(!args.getCgoDeps().isEmpty()),",
                "             ImmutableSet.of(generatedTestMain.getSourcePathToOutput()),",
                "@@ -451,18 +440,11 @@ public class GoTestDescription",
                "       ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "-    // Add the C/C++ linker parse time deps.",
                "-    CxxPlatform cxxPlatform = getCxxPlatform(!constructorArg.getCgoDeps().isEmpty());",
                "-    targetGraphOnlyDepsBuilder.addAll(CxxPlatforms.getParseTimeDeps(cxxPlatform));",
                "-  }",
                "-",
                "-  private CxxPlatform getCxxPlatform(Boolean withCgo) {",
                "-    CxxPlatformsProvider cxxPlatformsProviderFactory =",
                "-        toolchainProvider.getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class);",
                "-",
                "-    if (withCgo) {",
                "-      return cxxPlatformsProviderFactory.getDefaultCxxPlatform();",
                "-    }",
                "-    return cxxPlatformsProviderFactory",
                "-        .getCxxPlatforms()",
                "-        .getValue(ImmutableSet.of(DefaultCxxPlatforms.FLAVOR))",
                "-        .get();",
                "+    GoToolchain toolchain = getGoToolchain();",
                "+    // Add the C/C++ platform parse time deps.",
                "+    targetGraphOnlyDepsBuilder.addAll(",
                "+        CxxPlatforms.getParseTimeDeps(",
                "+            toolchain",
                "+                .getPlatformFlavorDomain()",
                "+                .getValue(buildTarget)",
                "+                .orElse(toolchain.getDefaultPlatform())",
                "+                .getCxxPlatform()));",
                "   }",
                "diff --git a/src/com/facebook/buck/go/GoToolchainFactory.java b/src/com/facebook/buck/go/GoToolchainFactory.java",
                "index 684f47bf3c..350d25c4e8 100644",
                "--- a/src/com/facebook/buck/go/GoToolchainFactory.java",
                "+++ b/src/com/facebook/buck/go/GoToolchainFactory.java",
                "@@ -18,2 +18,4 @@ package com.facebook.buck.go;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                " import com.facebook.buck.model.InternalFlavor;",
                "@@ -33,5 +35,12 @@ public class GoToolchainFactory implements ToolchainFactory<GoToolchain> {",
                "+    CxxPlatformsProvider cxxPlatformsProviderFactory =",
                "+        toolchainProvider.getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class);",
                "+    CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();",
                "+",
                "     GoPlatformFactory platformFactory =",
                "         GoPlatformFactory.of(",
                "-            context.getBuckConfig(), context.getProcessExecutor(), context.getExecutableFinder());",
                "+            context.getBuckConfig(),",
                "+            context.getProcessExecutor(),",
                "+            context.getExecutableFinder(),",
                "+            defaultCxxPlatform);",
                "     GoPlatformFlavorDomain platformFlavorDomain = new GoPlatformFlavorDomain(platformFactory);",
                "diff --git a/test/com/facebook/buck/go/BUCK b/test/com/facebook/buck/go/BUCK",
                "index d08ec79fd1..91d8d3582a 100644",
                "--- a/test/com/facebook/buck/go/BUCK",
                "+++ b/test/com/facebook/buck/go/BUCK",
                "@@ -288,2 +288,3 @@ java_library(",
                "         \"//test/com/facebook/buck/config:FakeBuckConfig\",",
                "+        \"//test/com/facebook/buck/cxx/toolchain:testutil\",",
                "         \"//test/com/facebook/buck/rules/keys/config:testutil\",",
                "diff --git a/test/com/facebook/buck/go/GoAssumptions.java b/test/com/facebook/buck/go/GoAssumptions.java",
                "index a297938301..fdda701912 100644",
                "--- a/test/com/facebook/buck/go/GoAssumptions.java",
                "+++ b/test/com/facebook/buck/go/GoAssumptions.java",
                "@@ -21,2 +21,4 @@ import static org.junit.Assume.assumeNoException;",
                " import com.facebook.buck.config.FakeBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                " import com.facebook.buck.io.ExecutableFinder;",
                "@@ -66,3 +68,8 @@ abstract class GoAssumptions {",
                "           .createToolchain(",
                "-              new ToolchainProviderBuilder().build(),",
                "+              new ToolchainProviderBuilder()",
                "+                  .withToolchain(",
                "+                      CxxPlatformsProvider.DEFAULT_NAME,",
                "+                      CxxPlatformsProvider.of(",
                "+                          CxxPlatformUtils.DEFAULT_PLATFORM, CxxPlatformUtils.DEFAULT_PLATFORMS))",
                "+                  .build(),",
                "               ToolchainCreationContext.of(",
                "diff --git a/test/com/facebook/buck/go/GoDescriptorsTest.java b/test/com/facebook/buck/go/GoDescriptorsTest.java",
                "index caf83802f5..bc6cea8cf2 100644",
                "--- a/test/com/facebook/buck/go/GoDescriptorsTest.java",
                "+++ b/test/com/facebook/buck/go/GoDescriptorsTest.java",
                "@@ -21,3 +21,2 @@ import static org.junit.Assert.assertThat;",
                " import com.facebook.buck.config.FakeBuckConfig;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                " import com.facebook.buck.go.GoListStep.FileType;",
                "@@ -202,3 +201,2 @@ public class GoDescriptorsTest {",
                "             goBuckConfig,",
                "-            CxxPlatformUtils.DEFAULT_PLATFORM,",
                "             ImmutableSet.of(",
                "diff --git a/test/com/facebook/buck/go/GoPlatformFactoryTest.java b/test/com/facebook/buck/go/GoPlatformFactoryTest.java",
                "index 35a75a3f6a..01157f5384 100644",
                "--- a/test/com/facebook/buck/go/GoPlatformFactoryTest.java",
                "+++ b/test/com/facebook/buck/go/GoPlatformFactoryTest.java",
                "@@ -21,2 +21,3 @@ import static org.junit.Assert.assertThat;",
                " import com.facebook.buck.config.FakeBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                " import com.facebook.buck.io.AlwaysFoundExecutableFinder;",
                "@@ -50,3 +51,4 @@ public class GoPlatformFactoryTest {",
                "             new FakeProcessExecutor(),",
                "-            new AlwaysFoundExecutableFinder());",
                "+            new AlwaysFoundExecutableFinder(),",
                "+            CxxPlatformUtils.DEFAULT_PLATFORM);",
                "     GoPlatform platform = factory.getPlatform(\"os\", \"arch\", \"section\");",
                "diff --git a/test/com/facebook/buck/go/GoTestUtils.java b/test/com/facebook/buck/go/GoTestUtils.java",
                "index addba65a63..b9796e7575 100644",
                "--- a/test/com/facebook/buck/go/GoTestUtils.java",
                "+++ b/test/com/facebook/buck/go/GoTestUtils.java",
                "@@ -18,2 +18,3 @@ package com.facebook.buck.go;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                " import com.facebook.buck.rules.CommandTool;",
                "@@ -36,2 +37,3 @@ public class GoTestUtils {",
                "           .setCover(new CommandTool.Builder().build())",
                "+          .setCxxPlatform(CxxPlatformUtils.DEFAULT_PLATFORM)",
                "           .build();"
            ],
            "changed_files": [
                "src/com/facebook/buck/go/AbstractGoPlatform.java",
                "src/com/facebook/buck/go/AbstractGoPlatformFactory.java",
                "src/com/facebook/buck/go/CGoLibrary.java",
                "src/com/facebook/buck/go/CgoLibraryDescription.java",
                "src/com/facebook/buck/go/GoBinaryDescription.java",
                "src/com/facebook/buck/go/GoDescriptors.java",
                "src/com/facebook/buck/go/GoLibraryDescription.java",
                "src/com/facebook/buck/go/GoTestDescription.java",
                "src/com/facebook/buck/go/GoToolchainFactory.java",
                "test/com/facebook/buck/go/BUCK",
                "test/com/facebook/buck/go/GoAssumptions.java",
                "test/com/facebook/buck/go/GoDescriptorsTest.java",
                "test/com/facebook/buck/go/GoPlatformFactoryTest.java",
                "test/com/facebook/buck/go/GoTestUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "61a463f06a48e8a0f28a65e54785c830ac124c80",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521767174,
            "hunks": 1,
            "message": "Improve error when starting activity throws an exception Summary: Just makes this error actually include the underlying exception. Test Plan: none Reviewed By: asp2insp fbshipit-source-id: e4e9bb0",
            "diff": [
                "diff --git a/src/com/facebook/buck/cli/InstallCommand.java b/src/com/facebook/buck/cli/InstallCommand.java",
                "index cfca252b5a..860c27d269 100644",
                "--- a/src/com/facebook/buck/cli/InstallCommand.java",
                "+++ b/src/com/facebook/buck/cli/InstallCommand.java",
                "@@ -464,3 +464,3 @@ public class InstallCommand extends BuildCommand {",
                "       } catch (Exception e) {",
                "-        throw new BuckUncheckedExecutionException(\"When starting activity.\");",
                "+        throw new BuckUncheckedExecutionException(e, \"When starting activity.\");",
                "       }"
            ],
            "changed_files": [
                "src/com/facebook/buck/cli/InstallCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, command",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "3c539d89e2109a9330a7a5ce6b66675f944f2cb1",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521836464,
            "hunks": 14,
            "message": "Add char support to RuleKeyBuilder Summary: Lack of support for char just seems like a small oversight, RuleKeyBuilder supports all the other primitive types. Reviewed By: ttsugriy fbshipit-source-id: 2d8e989",
            "diff": [
                "diff --git a/src/com/facebook/buck/rules/keys/RuleKeyBuilder.java b/src/com/facebook/buck/rules/keys/RuleKeyBuilder.java",
                "index 5fae3f74a1..8543dd5fd4 100644",
                "--- a/src/com/facebook/buck/rules/keys/RuleKeyBuilder.java",
                "+++ b/src/com/facebook/buck/rules/keys/RuleKeyBuilder.java",
                "@@ -259,2 +259,4 @@ public abstract class RuleKeyBuilder<RULE_KEY> extends AbstractRuleKeyBuilder<RU",
                "       hasher.putString(String.valueOf(val));",
                "+    } else if (val instanceof Character) {",
                "+      hasher.putCharacter((Character) val);",
                "     } else if (val instanceof Number) {",
                "diff --git a/src/com/facebook/buck/rules/keys/hasher/CountingRuleKeyHasher.java b/src/com/facebook/buck/rules/keys/hasher/CountingRuleKeyHasher.java",
                "index 5f32fd4627..364d2aa6f1 100644",
                "--- a/src/com/facebook/buck/rules/keys/hasher/CountingRuleKeyHasher.java",
                "+++ b/src/com/facebook/buck/rules/keys/hasher/CountingRuleKeyHasher.java",
                "@@ -57,2 +57,9 @@ public class CountingRuleKeyHasher<HASH> implements RuleKeyHasher<HASH> {",
                "+  @Override",
                "+  public CountingRuleKeyHasher<HASH> putCharacter(char val) {",
                "+    count++;",
                "+    delegate.putCharacter(val);",
                "+    return this;",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/com/facebook/buck/rules/keys/hasher/ForwardingRuleKeyHasher.java b/src/com/facebook/buck/rules/keys/hasher/ForwardingRuleKeyHasher.java",
                "index 07c6be2dab..9e70af21b5 100644",
                "--- a/src/com/facebook/buck/rules/keys/hasher/ForwardingRuleKeyHasher.java",
                "+++ b/src/com/facebook/buck/rules/keys/hasher/ForwardingRuleKeyHasher.java",
                "@@ -59,2 +59,9 @@ public abstract class ForwardingRuleKeyHasher<HASH, HASH2> implements RuleKeyHas",
                "+  @Override",
                "+  public ForwardingRuleKeyHasher<HASH, HASH2> putCharacter(char val) {",
                "+    secondHasher.putCharacter(val);",
                "+    delegate.putCharacter(val);",
                "+    return this;",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/com/facebook/buck/rules/keys/hasher/GuavaRuleKeyHasher.java b/src/com/facebook/buck/rules/keys/hasher/GuavaRuleKeyHasher.java",
                "index 56762baac8..84c83fca96 100644",
                "--- a/src/com/facebook/buck/rules/keys/hasher/GuavaRuleKeyHasher.java",
                "+++ b/src/com/facebook/buck/rules/keys/hasher/GuavaRuleKeyHasher.java",
                "@@ -68,2 +68,8 @@ public class GuavaRuleKeyHasher implements RuleKeyHasher<HashCode> {",
                "+  @Override",
                "+  public GuavaRuleKeyHasher putCharacter(char val) {",
                "+    hasher.putChar(val);",
                "+    return this;",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/com/facebook/buck/rules/keys/hasher/RuleKeyHasher.java b/src/com/facebook/buck/rules/keys/hasher/RuleKeyHasher.java",
                "index 582464b4d4..1271b6189a 100644",
                "--- a/src/com/facebook/buck/rules/keys/hasher/RuleKeyHasher.java",
                "+++ b/src/com/facebook/buck/rules/keys/hasher/RuleKeyHasher.java",
                "@@ -79,2 +79,4 @@ public interface RuleKeyHasher<HASH> {",
                "+  RuleKeyHasher<HASH> putCharacter(char val);",
                "+",
                "   RuleKeyHasher<HASH> putBoolean(boolean val);",
                "diff --git a/src/com/facebook/buck/rules/keys/hasher/StringRuleKeyHasher.java b/src/com/facebook/buck/rules/keys/hasher/StringRuleKeyHasher.java",
                "index 9155ae44a0..63381a8a84 100644",
                "--- a/src/com/facebook/buck/rules/keys/hasher/StringRuleKeyHasher.java",
                "+++ b/src/com/facebook/buck/rules/keys/hasher/StringRuleKeyHasher.java",
                "@@ -50,2 +50,8 @@ public class StringRuleKeyHasher implements RuleKeyHasher<String> {",
                "+  @Override",
                "+  public StringRuleKeyHasher putCharacter(char val) {",
                "+    parts.add(String.format(\"char(%s)\", val));",
                "+    return this;",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/com/facebook/buck/rules/keys/hasher/ThriftRuleKeyHasher.java b/src/com/facebook/buck/rules/keys/hasher/ThriftRuleKeyHasher.java",
                "index 2ba7bf094d..c4c208b051 100644",
                "--- a/src/com/facebook/buck/rules/keys/hasher/ThriftRuleKeyHasher.java",
                "+++ b/src/com/facebook/buck/rules/keys/hasher/ThriftRuleKeyHasher.java",
                "@@ -91,2 +91,7 @@ public class ThriftRuleKeyHasher implements RuleKeyHasher<FullRuleKey> {",
                "+  @Override",
                "+  public RuleKeyHasher<FullRuleKey> putCharacter(char val) {",
                "+    return push(Value.numberValue(val));",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/test/com/facebook/buck/rules/keys/CommonRuleKeyHasherTest.java b/test/com/facebook/buck/rules/keys/CommonRuleKeyHasherTest.java",
                "index e930cfedc8..8864211f08 100644",
                "--- a/test/com/facebook/buck/rules/keys/CommonRuleKeyHasherTest.java",
                "+++ b/test/com/facebook/buck/rules/keys/CommonRuleKeyHasherTest.java",
                "@@ -91,2 +91,4 @@ public final class CommonRuleKeyHasherTest {",
                "             .add(",
                "+                pair.apply(\"(char) 0\", h -> h.putCharacter((char) 0)),",
                "+                pair.apply(\"(char) 42\", h -> h.putCharacter((char) 42)),",
                "                 pair.apply(\"\\\"\\\"\", h -> h.putString(\"\")),",
                "diff --git a/test/com/facebook/buck/rules/keys/CountingRuleKeyHasherTest.java b/test/com/facebook/buck/rules/keys/CountingRuleKeyHasherTest.java",
                "index f323816bff..9c2dfd74bb 100644",
                "--- a/test/com/facebook/buck/rules/keys/CountingRuleKeyHasherTest.java",
                "+++ b/test/com/facebook/buck/rules/keys/CountingRuleKeyHasherTest.java",
                "@@ -85,2 +85,9 @@ public class CountingRuleKeyHasherTest {",
                "         newCountHasher().putNumber((double) 42).hash());",
                "+    assertEquals(",
                "+        newGuavaHasher().putCharacter((char) 0).hash(),",
                "+        newCountHasher().putCharacter((char) 0).hash());",
                "+    assertEquals(",
                "+        newGuavaHasher().putCharacter((char) 42).hash(),",
                "+        newCountHasher().putCharacter((char) 42).hash());",
                "+",
                "     assertEquals(newGuavaHasher().putString(\"\").hash(), newCountHasher().putString(\"\").hash());",
                "@@ -302,2 +309,6 @@ public class CountingRuleKeyHasherTest {",
                "     assertEquals(count += 2, hasher.getCount());",
                "+    hasher.putCharacter((char) 0);",
                "+    assertEquals(++count, hasher.getCount());",
                "+    hasher.putCharacter((char) 42).putCharacter((char) 43);",
                "+    assertEquals(count += 2, hasher.getCount());",
                "     hasher.putString(\"\");",
                "diff --git a/test/com/facebook/buck/rules/keys/DefaultRuleKeyFactoryTest.java b/test/com/facebook/buck/rules/keys/DefaultRuleKeyFactoryTest.java",
                "index 2ff81dbb13..c99601785d 100644",
                "--- a/test/com/facebook/buck/rules/keys/DefaultRuleKeyFactoryTest.java",
                "+++ b/test/com/facebook/buck/rules/keys/DefaultRuleKeyFactoryTest.java",
                "@@ -434,2 +434,3 @@ public class DefaultRuleKeyFactoryTest {",
                "     assertBothKeysAndValuesGetHashed((byte) 123, (byte) 42);",
                "+    assertBothKeysAndValuesGetHashed((char) 0, (char) 42);",
                "     assertBothKeysAndValuesGetHashed(new byte[] {1, 2, 3}, new byte[] {4, 2});",
                "diff --git a/test/com/facebook/buck/rules/keys/ForwardingRuleKeyHasherTest.java b/test/com/facebook/buck/rules/keys/ForwardingRuleKeyHasherTest.java",
                "index d69763fe3c..4688369d9d 100644",
                "--- a/test/com/facebook/buck/rules/keys/ForwardingRuleKeyHasherTest.java",
                "+++ b/test/com/facebook/buck/rules/keys/ForwardingRuleKeyHasherTest.java",
                "@@ -111,2 +111,7 @@ public class ForwardingRuleKeyHasherTest {",
                "+    expect(guavaHasher.putCharacter((char) 42)).andReturn(guavaHasher);",
                "+    expect(stringHasher.putCharacter((char) 42)).andReturn(stringHasher);",
                "+    expect(guavaHasher.hash()).andReturn(hash);",
                "+    expect(stringHasher.hash()).andReturn(string);",
                "+",
                "     expect(guavaHasher.putString(\"42\")).andReturn(guavaHasher);",
                "@@ -281,2 +286,3 @@ public class ForwardingRuleKeyHasherTest {",
                "     newHasher(guavaHasher, stringHasher).putNumber((double) 42).hash();",
                "+    newHasher(guavaHasher, stringHasher).putCharacter((char) 42).hash();",
                "     newHasher(guavaHasher, stringHasher).putString(\"42\").hash();",
                "diff --git a/test/com/facebook/buck/rules/keys/RuleKeyBuilderTest.java b/test/com/facebook/buck/rules/keys/RuleKeyBuilderTest.java",
                "index 58c804c18c..a586682584 100644",
                "--- a/test/com/facebook/buck/rules/keys/RuleKeyBuilderTest.java",
                "+++ b/test/com/facebook/buck/rules/keys/RuleKeyBuilderTest.java",
                "@@ -115,2 +115,4 @@ public class RuleKeyBuilderTest {",
                "           (double) 42,",
                "+          (char) 0,",
                "+          (char) 42,",
                "           \"\","
            ],
            "changed_files": [
                "src/com/facebook/buck/rules/keys/RuleKeyBuilder.java",
                "src/com/facebook/buck/rules/keys/hasher/CountingRuleKeyHasher.java",
                "src/com/facebook/buck/rules/keys/hasher/ForwardingRuleKeyHasher.java",
                "src/com/facebook/buck/rules/keys/hasher/GuavaRuleKeyHasher.java",
                "src/com/facebook/buck/rules/keys/hasher/RuleKeyHasher.java",
                "src/com/facebook/buck/rules/keys/hasher/StringRuleKeyHasher.java",
                "src/com/facebook/buck/rules/keys/hasher/ThriftRuleKeyHasher.java",
                "test/com/facebook/buck/rules/keys/CommonRuleKeyHasherTest.java",
                "test/com/facebook/buck/rules/keys/CountingRuleKeyHasherTest.java",
                "test/com/facebook/buck/rules/keys/DefaultRuleKeyFactoryTest.java",
                "test/com/facebook/buck/rules/keys/ForwardingRuleKeyHasherTest.java",
                "test/com/facebook/buck/rules/keys/RuleKeyBuilderTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "5fd01e577efda060be292dd222360f7970da6537",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522192314,
            "hunks": 6,
            "message": "Modernize Process.waitFor with timeout Summary: Process.waitFor now offers an interface with timeout. Use that instead of creating Futures to wait on the process. Reviewed By: jtorkkola fbshipit-source-id: cdaa293",
            "diff": [
                "diff --git a/src/com/facebook/buck/util/DefaultProcessExecutor.java b/src/com/facebook/buck/util/DefaultProcessExecutor.java",
                "index 380a3256c2..eb35498584 100644",
                "--- a/src/com/facebook/buck/util/DefaultProcessExecutor.java",
                "+++ b/src/com/facebook/buck/util/DefaultProcessExecutor.java",
                "@@ -38,3 +38,2 @@ import java.util.concurrent.ThreadPoolExecutor;",
                " import java.util.concurrent.TimeUnit;",
                "-import java.util.concurrent.TimeoutException;",
                " import java.util.function.Consumer;",
                "@@ -209,14 +208,4 @@ public class DefaultProcessExecutor implements ProcessExecutor {",
                "       throws InterruptedException {",
                "-    Future<?> waiter =",
                "-        THREAD_POOL.submit(",
                "-            () -> {",
                "-              try {",
                "-                process.waitFor();",
                "-              } catch (InterruptedException e) {",
                "-                // The thread waiting has hit its timeout.",
                "-              }",
                "-            });",
                "-    try {",
                "-      waiter.get(millis, TimeUnit.MILLISECONDS);",
                "-    } catch (TimeoutException e) {",
                "+",
                "+    if (!process.waitFor(millis, TimeUnit.MILLISECONDS)) {",
                "       try {",
                "@@ -226,6 +215,3 @@ public class DefaultProcessExecutor implements ProcessExecutor {",
                "       }",
                "-      waiter.cancel(true);",
                "       return true;",
                "-    } catch (ExecutionException e) {",
                "-      throw new IllegalStateException(\"Unexpected exception thrown from waiter.\", e);",
                "     }",
                "diff --git a/test/com/facebook/buck/util/FakeProcess.java b/test/com/facebook/buck/util/FakeProcess.java",
                "index 35b83b9d6f..4e945fde1d 100644",
                "--- a/test/com/facebook/buck/util/FakeProcess.java",
                "+++ b/test/com/facebook/buck/util/FakeProcess.java",
                "@@ -25,2 +25,3 @@ import java.io.OutputStream;",
                " import java.util.Optional;",
                "+import java.util.concurrent.TimeUnit;",
                "@@ -118,2 +119,8 @@ public class FakeProcess extends Process {",
                "+  @Override",
                "+  public boolean waitFor(long timeout, TimeUnit unit) throws InterruptedException {",
                "+    waitFor();",
                "+    return true;",
                "+  }",
                "+",
                "   /** Returns true if {@link #destroy()} was called on this object, false otherwise. */"
            ],
            "changed_files": [
                "src/com/facebook/buck/util/DefaultProcessExecutor.java",
                "test/com/facebook/buck/util/FakeProcess.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "17aba06d14f0667460ee93953747421b01950dd7",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522656336,
            "hunks": 4,
            "message": "Optimize JarContentsSupplier for memory Summary: Storing strings is expensive. Let's store optimized Path instead. Reviewed By: jtorkkola fbshipit-source-id: 748e800",
            "diff": [
                "diff --git a/src/com/facebook/buck/jvm/core/HasJavaAbi.java b/src/com/facebook/buck/jvm/core/HasJavaAbi.java",
                "index 2c9285362a..a71953f14f 100644",
                "--- a/src/com/facebook/buck/jvm/core/HasJavaAbi.java",
                "+++ b/src/com/facebook/buck/jvm/core/HasJavaAbi.java",
                "@@ -35,2 +35,3 @@ import java.nio.file.Files;",
                " import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                " import java.util.Optional;",
                "@@ -118,3 +119,3 @@ public interface HasJavaAbi {",
                "     @Nullable private ImmutableSortedSet<SourcePath> contents;",
                "-    @Nullable private ImmutableSet<String> contentPaths;",
                "+    @Nullable private ImmutableSet<Path> contentPaths;",
                "@@ -159,3 +160,2 @@ public interface HasJavaAbi {",
                "                     })",
                "-                .map(Path::toString)",
                "                 .collect(ImmutableSet.toImmutableSet());",
                "@@ -169,3 +169,3 @@ public interface HasJavaAbi {",
                "     public boolean jarContains(String path) {",
                "-      return contentPaths.contains(path);",
                "+      return contentPaths.contains(Paths.get(path));",
                "     }"
            ],
            "changed_files": [
                "src/com/facebook/buck/jvm/core/HasJavaAbi.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "54ee28d5c0e33e400d5ac4b39602389a9020778d",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522136531,
            "hunks": 21,
            "message": "ocaml: provide interface method on OcamlLibrary to traverse deps Summary: Rather than using the deprecated `BuildRuleParams.getBuildDeps()`, this adds an interface method to `OcamlLibrary` to allow traversing it's deps, which are set from the corresponding description's constructor arg. Reviewed By: ttsugriy fbshipit-source-id: 8022d35",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/OcamlLibrary.java b/src/com/facebook/buck/ocaml/OcamlLibrary.java",
                "index 772c82360d..9d55af3538 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlLibrary.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlLibrary.java",
                "@@ -52,2 +52,4 @@ public abstract class OcamlLibrary extends NoopBuildRuleWithDeclaredAndExtraDeps",
                "   public abstract NativeLinkableInput getBytecodeLinkableInput(OcamlPlatform platform);",
                "+",
                "+  public abstract Iterable<BuildRule> getOcamlLibraryDeps(OcamlPlatform platform);",
                " }",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "index 5849c098d0..6b6ca26a51 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "@@ -38,2 +38,3 @@ import com.facebook.buck.rules.macros.StringWithMacros;",
                " import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.facebook.buck.util.RichStream;",
                " import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "@@ -218,2 +219,9 @@ public class OcamlLibraryDescription",
                "       }",
                "+",
                "+      @Override",
                "+      public Iterable<BuildRule> getOcamlLibraryDeps(OcamlPlatform platform) {",
                "+        return RichStream.from(args.getDeps())",
                "+            .map(context.getBuildRuleResolver()::getRule)",
                "+            .toImmutableList();",
                "+      }",
                "     };",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "index 49710205c1..ff738ae950 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "@@ -21,3 +21,2 @@ import com.facebook.buck.cxx.CxxPreprocessorDep;",
                " import com.facebook.buck.cxx.CxxPreprocessorInput;",
                "-import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.cxx.toolchain.linker.Linker;",
                "@@ -25,2 +24,5 @@ import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkableInput;",
                " import com.facebook.buck.cxx.toolchain.nativelink.NativeLinkables;",
                "+import com.facebook.buck.graph.AbstractBreadthFirstTraversal;",
                "+import com.facebook.buck.graph.DirectedAcyclicGraph;",
                "+import com.facebook.buck.graph.MutableDirectedGraph;",
                " import com.facebook.buck.graph.TopologicalSort;",
                "@@ -31,3 +33,2 @@ import com.facebook.buck.model.InternalFlavor;",
                " import com.facebook.buck.rules.BuildRule;",
                "-import com.facebook.buck.rules.BuildRuleDependencyVisitors;",
                " import com.facebook.buck.rules.BuildRuleParams;",
                "@@ -123,14 +124,23 @@ public class OcamlRuleBuilder {",
                "-  private static ImmutableList<BuildRule> getTransitiveOcamlLibraryDeps(",
                "-      Iterable<? extends BuildRule> deps) {",
                "-    return TopologicalSort.sort(",
                "-        BuildRuleDependencyVisitors.getBuildRuleDirectedGraphFilteredBy(",
                "-            deps, OcamlLibrary.class::isInstance, OcamlLibrary.class::isInstance));",
                "-  }",
                "+  private static ImmutableList<OcamlLibrary> getTransitiveOcamlLibraryDeps(",
                "+      OcamlPlatform platform, Iterable<? extends BuildRule> deps) {",
                "+    MutableDirectedGraph<OcamlLibrary> graph = new MutableDirectedGraph<>();",
                "+",
                "+    new AbstractBreadthFirstTraversal<OcamlLibrary>(",
                "+        RichStream.from(deps).filter(OcamlLibrary.class).toImmutableList()) {",
                "+      @Override",
                "+      public Iterable<OcamlLibrary> visit(OcamlLibrary node) {",
                "+        graph.addNode(node);",
                "+        Iterable<OcamlLibrary> deps =",
                "+            RichStream.from(node.getOcamlLibraryDeps(platform))",
                "+                .filter(OcamlLibrary.class)",
                "+                .toImmutableList();",
                "+        for (OcamlLibrary dep : deps) {",
                "+          graph.addEdge(node, dep);",
                "+        }",
                "+        return deps;",
                "+      }",
                "+    }.start();",
                "-  private static ImmutableList<OcamlLibrary> getTransitiveOcamlInput(",
                "-      Iterable<? extends BuildRule> deps) {",
                "-    return RichStream.from(getTransitiveOcamlLibraryDeps(deps))",
                "-        .filter(OcamlLibrary.class)",
                "-        .toImmutableList();",
                "+    return TopologicalSort.sort(new DirectedAcyclicGraph<>(graph));",
                "   }",
                "@@ -142,5 +152,5 @@ public class OcamlRuleBuilder {",
                "     // Add in the linkable input from OCaml libraries.",
                "-    ImmutableList<BuildRule> ocamlDeps = getTransitiveOcamlLibraryDeps(deps);",
                "-    for (BuildRule dep : ocamlDeps) {",
                "-      inputs.add(((OcamlLibrary) dep).getNativeLinkableInput(platform));",
                "+    ImmutableList<OcamlLibrary> ocamlDeps = getTransitiveOcamlLibraryDeps(platform, deps);",
                "+    for (OcamlLibrary dep : ocamlDeps) {",
                "+      inputs.add(dep.getNativeLinkableInput(platform));",
                "     }",
                "@@ -155,5 +165,5 @@ public class OcamlRuleBuilder {",
                "     // Add in the linkable input from OCaml libraries.",
                "-    ImmutableList<BuildRule> ocamlDeps = getTransitiveOcamlLibraryDeps(deps);",
                "-    for (BuildRule dep : ocamlDeps) {",
                "-      inputs.add(((OcamlLibrary) dep).getBytecodeLinkableInput(platform));",
                "+    ImmutableList<OcamlLibrary> ocamlDeps = getTransitiveOcamlLibraryDeps(platform, deps);",
                "+    for (OcamlLibrary dep : ocamlDeps) {",
                "+      inputs.add(dep.getBytecodeLinkableInput(platform));",
                "     }",
                "@@ -164,5 +174,5 @@ public class OcamlRuleBuilder {",
                "   private static NativeLinkableInput getCLinkableInput(",
                "-      CxxPlatform cxxPlatform, BuildRuleResolver ruleResolver, Iterable<BuildRule> deps) {",
                "+      OcamlPlatform platform, BuildRuleResolver ruleResolver, Iterable<BuildRule> deps) {",
                "     return NativeLinkables.getTransitiveNativeLinkableInput(",
                "-        cxxPlatform,",
                "+        platform.getCxxPlatform(),",
                "         ruleResolver,",
                "@@ -170,3 +180,6 @@ public class OcamlRuleBuilder {",
                "         Linker.LinkableDepType.STATIC,",
                "-        r -> r instanceof OcamlLibrary ? Optional.of(r.getBuildDeps()) : Optional.empty());",
                "+        r ->",
                "+            r instanceof OcamlLibrary",
                "+                ? Optional.of(((OcamlLibrary) r).getOcamlLibraryDeps(platform))",
                "+                : Optional.empty());",
                "   }",
                "@@ -208,6 +221,5 @@ public class OcamlRuleBuilder {",
                "     NativeLinkableInput bytecodeLinkableInput = getBytecodeLinkableInput(ocamlPlatform, deps);",
                "-    NativeLinkableInput cLinkableInput =",
                "-        getCLinkableInput(ocamlPlatform.getCxxPlatform(), resolver, deps);",
                "+    NativeLinkableInput cLinkableInput = getCLinkableInput(ocamlPlatform, resolver, deps);",
                "-    ImmutableList<OcamlLibrary> ocamlInput = getTransitiveOcamlInput(deps);",
                "+    ImmutableList<OcamlLibrary> ocamlInput = getTransitiveOcamlLibraryDeps(ocamlPlatform, deps);",
                "@@ -329,6 +341,5 @@ public class OcamlRuleBuilder {",
                "     NativeLinkableInput bytecodeLinkableInput = getBytecodeLinkableInput(ocamlPlatform, deps);",
                "-    NativeLinkableInput cLinkableInput =",
                "-        getCLinkableInput(ocamlPlatform.getCxxPlatform(), resolver, deps);",
                "+    NativeLinkableInput cLinkableInput = getCLinkableInput(ocamlPlatform, resolver, deps);",
                "-    ImmutableList<OcamlLibrary> ocamlInput = getTransitiveOcamlInput(deps);",
                "+    ImmutableList<OcamlLibrary> ocamlInput = getTransitiveOcamlLibraryDeps(ocamlPlatform, deps);",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java b/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "index 9f78b55dc2..845ddbda3f 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "@@ -129,2 +129,7 @@ class OcamlStaticLibrary extends OcamlLibrary implements HasRuntimeDeps {",
                "+  @Override",
                "+  public Iterable<BuildRule> getOcamlLibraryDeps(OcamlPlatform platform) {",
                "+    throw new UnsupportedOperationException();",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java b/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java",
                "index f568000c16..52818d8c72 100644",
                "--- a/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java",
                "+++ b/src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java",
                "@@ -51,2 +51,4 @@ class PrebuiltOcamlLibrary extends OcamlLibrary {",
                "+  private final ImmutableList<BuildRule> deps;",
                "+",
                "   public PrebuiltOcamlLibrary(",
                "@@ -61,3 +63,4 @@ class PrebuiltOcamlLibrary extends OcamlLibrary {",
                "       Path libPath,",
                "-      Path includeDir) {",
                "+      Path includeDir,",
                "+      ImmutableList<BuildRule> deps) {",
                "     super(buildTarget, projectFilesystem, params);",
                "@@ -70,2 +73,3 @@ class PrebuiltOcamlLibrary extends OcamlLibrary {",
                "     this.includeDir = includeDir;",
                "+    this.deps = deps;",
                "   }",
                "@@ -124,2 +128,7 @@ class PrebuiltOcamlLibrary extends OcamlLibrary {",
                "   }",
                "+",
                "+  @Override",
                "+  public Iterable<BuildRule> getOcamlLibraryDeps(OcamlPlatform platform) {",
                "+    return deps;",
                "+  }",
                " }",
                "diff --git a/src/com/facebook/buck/ocaml/PrebuiltOcamlLibraryDescription.java b/src/com/facebook/buck/ocaml/PrebuiltOcamlLibraryDescription.java",
                "index 34fffcb02c..21bbc79485 100644",
                "--- a/src/com/facebook/buck/ocaml/PrebuiltOcamlLibraryDescription.java",
                "+++ b/src/com/facebook/buck/ocaml/PrebuiltOcamlLibraryDescription.java",
                "@@ -28,2 +28,3 @@ import com.facebook.buck.rules.SourcePath;",
                " import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.util.RichStream;",
                " import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                "@@ -91,3 +92,6 @@ public class PrebuiltOcamlLibraryDescription",
                "         libPath,",
                "-        includeDir);",
                "+        includeDir,",
                "+        RichStream.from(args.getDeps())",
                "+            .map(context.getBuildRuleResolver()::getRule)",
                "+            .collect(ImmutableList.toImmutableList()));",
                "   }"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/OcamlLibrary.java",
                "src/com/facebook/buck/ocaml/OcamlLibraryDescription.java",
                "src/com/facebook/buck/ocaml/OcamlRuleBuilder.java",
                "src/com/facebook/buck/ocaml/OcamlStaticLibrary.java",
                "src/com/facebook/buck/ocaml/PrebuiltOcamlLibrary.java",
                "src/com/facebook/buck/ocaml/PrebuiltOcamlLibraryDescription.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "13209adeb70f879ce7fe671955bcbd32a7781152",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522431463,
            "hunks": 5,
            "message": "Use module package name is module id Summary: `BuckModule` requires an id, but in practice the id matches the package name. This change simplifies the usage by using the module class package name is the module id. `id` from existing modules will be removes in the following change. Reviewed By: ttsugriy fbshipit-source-id: 1692400",
            "diff": [
                "diff --git a/src/com/facebook/buck/module/annotationprocessor/BuckModuleAnnotationProcessor.java b/src/com/facebook/buck/module/annotationprocessor/BuckModuleAnnotationProcessor.java",
                "index 48a3da0444..750be759e2 100644",
                "--- a/src/com/facebook/buck/module/annotationprocessor/BuckModuleAnnotationProcessor.java",
                "+++ b/src/com/facebook/buck/module/annotationprocessor/BuckModuleAnnotationProcessor.java",
                "@@ -38,5 +38,5 @@ import javax.tools.Diagnostic.Kind;",
                "  * <pre>",
                "- *  {@literal @}BuckModule(",
                "- *     name = \"com.facebook.buck.some.module\"",
                "- *   )",
                "+ *   package com.facebook.buck.some.module;",
                "+ *",
                "+ *  {@literal @}BuckModule",
                "  *   public class SomeModule {}",
                "diff --git a/src/com/facebook/buck/module/annotationprocessor/BuckModuleVisitor.java b/src/com/facebook/buck/module/annotationprocessor/BuckModuleVisitor.java",
                "index dab11555e2..d442816a1e 100644",
                "--- a/src/com/facebook/buck/module/annotationprocessor/BuckModuleVisitor.java",
                "+++ b/src/com/facebook/buck/module/annotationprocessor/BuckModuleVisitor.java",
                "@@ -103,3 +103,2 @@ class BuckModuleVisitor extends SimpleElementVisitor6<Void, TypeElement> {",
                "     String className = type.getSimpleName().toString();",
                "-    String buckModuleName = getParamsFromAnnotationOrFail(type, buckModuleAnnotation, \"id\");",
                "     List<String> dependencies = extractDependencies(buckModuleAnnotation);",
                "@@ -108,22 +107,3 @@ class BuckModuleVisitor extends SimpleElementVisitor6<Void, TypeElement> {",
                "         new BuckModuleDescriptor(",
                "-            buckModuleAnnotationType, packageName, className, buckModuleName, dependencies));",
                "-  }",
                "-",
                "-  private String getParamsFromAnnotationOrFail(",
                "-      TypeElement type, AnnotationMirror annotation, String paramName) {",
                "-",
                "-    String value = getAnnotationParameterAsString(annotation, paramName);",
                "-",
                "-    if (value == null || value.isEmpty()) {",
                "-      processingEnv",
                "-          .getMessager()",
                "-          .printMessage(",
                "-              Diagnostic.Kind.ERROR,",
                "-              \"Required parameter '\" + paramName + \"' not found or is empty\",",
                "-              type,",
                "-              annotation);",
                "-      throw new IllegalArgumentException();",
                "-    }",
                "-",
                "-    return value;",
                "+            buckModuleAnnotationType, packageName, className, packageName, dependencies));",
                "   }",
                "@@ -145,4 +125,3 @@ class BuckModuleVisitor extends SimpleElementVisitor6<Void, TypeElement> {",
                "-      String dependencyBuckModuleId =",
                "-          getParamsFromAnnotationOrFail(dependencyType, dependencyBuckModuleAnnotation, \"id\");",
                "+      String dependencyBuckModuleId = getPackageName(dependencyType);",
                "@@ -191,8 +170,2 @@ class BuckModuleVisitor extends SimpleElementVisitor6<Void, TypeElement> {",
                "-  @Nullable",
                "-  public static String getAnnotationParameterAsString(",
                "-      AnnotationMirror annotation, String parameterName) {",
                "-    return (String) getAnnotationParameter(annotation, parameterName);",
                "-  }",
                "-",
                "   @Nullable"
            ],
            "changed_files": [
                "src/com/facebook/buck/module/annotationprocessor/BuckModuleAnnotationProcessor.java",
                "src/com/facebook/buck/module/annotationprocessor/BuckModuleVisitor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e5baf916a2f9c6221e651423570d2c900052d824",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522136555,
            "hunks": 20,
            "message": "ocaml: allow defining multiple platforms via `.buckconfig` Summary: Update `OcamlToolchainFactory` to parse multiple sections of `.buckconfig`, each defining a new `OcamlPlatform`. Reviewed By: ttsugriy fbshipit-source-id: 17d6a90",
            "diff": [
                "diff --git a/src/com/facebook/buck/ocaml/AbstractOcamlToolchain.java b/src/com/facebook/buck/ocaml/AbstractOcamlToolchain.java",
                "index 23047c452f..63ba2de9b4 100644",
                "--- a/src/com/facebook/buck/ocaml/AbstractOcamlToolchain.java",
                "+++ b/src/com/facebook/buck/ocaml/AbstractOcamlToolchain.java",
                "@@ -32,6 +32,3 @@ interface AbstractOcamlToolchain extends Toolchain {",
                "-  @Value.Derived",
                "-  default FlavorDomain<OcamlPlatform> getOcamlPlatforms() {",
                "-    return FlavorDomain.of(\"OCaml Platforms\", getDefaultOcamlPlatform());",
                "-  }",
                "+  FlavorDomain<OcamlPlatform> getOcamlPlatforms();",
                " }",
                "diff --git a/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java b/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java",
                "index d38b8c67e7..24889fa1c7 100644",
                "--- a/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java",
                "+++ b/src/com/facebook/buck/ocaml/OcamlToolchainFactory.java",
                "@@ -20,2 +20,5 @@ import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "+import com.facebook.buck.cxx.toolchain.DefaultCxxPlatforms;",
                "+import com.facebook.buck.model.Flavor;",
                "+import com.facebook.buck.model.FlavorDomain;",
                " import com.facebook.buck.rules.HashedFileTool;",
                "@@ -25,2 +28,3 @@ import com.facebook.buck.toolchain.ToolchainFactory;",
                " import com.facebook.buck.toolchain.ToolchainProvider;",
                "+import com.facebook.buck.util.RichStream;",
                " import com.google.common.collect.ImmutableList;",
                "@@ -42,5 +46,4 @@ public class OcamlToolchainFactory implements ToolchainFactory<OcamlToolchain> {",
                "-  @Override",
                "-  public Optional<OcamlToolchain> createToolchain(",
                "-      ToolchainProvider toolchainProvider, ToolchainCreationContext context) {",
                "+  private OcamlPlatform getPlatform(",
                "+      ToolchainCreationContext context, CxxPlatform cxxPlatform, String section) {",
                "     BiFunction<String, Path, Optional<Tool>> getTool =",
                "@@ -50,3 +53,3 @@ public class OcamlToolchainFactory implements ToolchainFactory<OcamlToolchain> {",
                "                 .getOptionalExecutable(",
                "-                    context.getBuckConfig().getPath(SECTION, field).orElse(defaultValue),",
                "+                    context.getBuckConfig().getPath(section, field).orElse(defaultValue),",
                "                     context.getBuckConfig().getEnvironment())",
                "@@ -55,31 +58,58 @@ public class OcamlToolchainFactory implements ToolchainFactory<OcamlToolchain> {",
                "                         new HashedFileTool(() -> context.getBuckConfig().getPathSourcePath(path)));",
                "-    CxxPlatform cxxPlatform =",
                "-        toolchainProvider",
                "-            .getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class)",
                "-            .getDefaultCxxPlatform();",
                "-    return Optional.of(",
                "-        OcamlToolchain.of(",
                "-            OcamlPlatform.builder()",
                "-                .setOcamlCompiler(getTool.apply(\"ocaml.compiler\", DEFAULT_OCAML_COMPILER))",
                "-                .setOcamlDepTool(getTool.apply(\"dep.tool\", DEFAULT_OCAML_DEP_TOOL))",
                "-                .setYaccCompiler(getTool.apply(\"yacc.compiler\", DEFAULT_OCAML_YACC_COMPILER))",
                "-                .setLexCompiler(getTool.apply(\"lex.compiler\", DEFAULT_OCAML_LEX_COMPILER))",
                "-                .setOcamlInteropIncludesDir(",
                "-                    context.getBuckConfig().getValue(SECTION, \"interop.includes\"))",
                "-                .setWarningsFlags(context.getBuckConfig().getValue(SECTION, \"warnings_flags\"))",
                "-                .setOcamlBytecodeCompiler(",
                "-                    getTool.apply(\"ocaml.bytecode.compiler\", DEFAULT_OCAML_BYTECODE_COMPILER))",
                "-                .setOcamlDebug(getTool.apply(\"debug\", DEFAULT_OCAML_DEBUG))",
                "-                .setCCompiler(cxxPlatform.getCc())",
                "-                .setCxxCompiler(cxxPlatform.getCxx())",
                "-                .setCPreprocessor(cxxPlatform.getCpp())",
                "-                .setCFlags(",
                "-                    ImmutableList.<String>builder()",
                "-                        .addAll(cxxPlatform.getCppflags())",
                "-                        .addAll(cxxPlatform.getCflags())",
                "-                        .addAll(cxxPlatform.getAsflags())",
                "-                        .build())",
                "-                .setLdFlags(cxxPlatform.getLdflags())",
                "-                .setCxxPlatform(cxxPlatform)",
                "-                .build()));",
                "+    return OcamlPlatform.builder()",
                "+        .setOcamlCompiler(getTool.apply(\"ocaml.compiler\", DEFAULT_OCAML_COMPILER))",
                "+        .setOcamlDepTool(getTool.apply(\"dep.tool\", DEFAULT_OCAML_DEP_TOOL))",
                "+        .setYaccCompiler(getTool.apply(\"yacc.compiler\", DEFAULT_OCAML_YACC_COMPILER))",
                "+        .setLexCompiler(getTool.apply(\"lex.compiler\", DEFAULT_OCAML_LEX_COMPILER))",
                "+        .setOcamlInteropIncludesDir(context.getBuckConfig().getValue(section, \"interop.includes\"))",
                "+        .setWarningsFlags(context.getBuckConfig().getValue(section, \"warnings_flags\"))",
                "+        .setOcamlBytecodeCompiler(",
                "+            getTool.apply(\"ocaml.bytecode.compiler\", DEFAULT_OCAML_BYTECODE_COMPILER))",
                "+        .setOcamlDebug(getTool.apply(\"debug\", DEFAULT_OCAML_DEBUG))",
                "+        .setCCompiler(cxxPlatform.getCc())",
                "+        .setCxxCompiler(cxxPlatform.getCxx())",
                "+        .setCPreprocessor(cxxPlatform.getCpp())",
                "+        .setCFlags(",
                "+            ImmutableList.<String>builder()",
                "+                .addAll(cxxPlatform.getCppflags())",
                "+                .addAll(cxxPlatform.getCflags())",
                "+                .addAll(cxxPlatform.getAsflags())",
                "+                .build())",
                "+        .setLdFlags(cxxPlatform.getLdflags())",
                "+        .setCxxPlatform(cxxPlatform)",
                "+        .build();",
                "+  }",
                "+",
                "+  private String getSection(Flavor flavor) {",
                "+    String section = SECTION;",
                "+",
                "+    // We special case the \"default\" C/C++ platform to just use the \"ocaml\" section.",
                "+    if (!flavor.equals(DefaultCxxPlatforms.FLAVOR)) {",
                "+      section += \"#\" + flavor;",
                "+    }",
                "+",
                "+    return section;",
                "+  }",
                "+",
                "+  private ImmutableList<OcamlPlatform> getPlatforms(",
                "+      ToolchainCreationContext context, Iterable<CxxPlatform> cxxPlatforms) {",
                "+    return RichStream.from(cxxPlatforms)",
                "+        .map(cxxPlatform -> getPlatform(context, cxxPlatform, getSection(cxxPlatform.getFlavor())))",
                "+        .toImmutableList();",
                "+  }",
                "+",
                "+  @Override",
                "+  public Optional<OcamlToolchain> createToolchain(",
                "+      ToolchainProvider toolchainProvider, ToolchainCreationContext context) {",
                "+",
                "+    CxxPlatformsProvider cxxPlatformsProviderFactory =",
                "+        toolchainProvider.getByName(CxxPlatformsProvider.DEFAULT_NAME, CxxPlatformsProvider.class);",
                "+    FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();",
                "+    CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();",
                "+",
                "+    FlavorDomain<OcamlPlatform> ocamlPlatforms =",
                "+        FlavorDomain.from(\"OCaml platform\", getPlatforms(context, cxxPlatforms.getValues()));",
                "+    OcamlPlatform defaultOcamlPlatform = ocamlPlatforms.getValue(defaultCxxPlatform.getFlavor());",
                "+",
                "+    return Optional.of(OcamlToolchain.of(defaultOcamlPlatform, ocamlPlatforms));",
                "   }",
                "diff --git a/test/com/facebook/buck/ocaml/OcamlLibraryBuilder.java b/test/com/facebook/buck/ocaml/OcamlLibraryBuilder.java",
                "index 2d6fdc7d27..17dd010b68 100644",
                "--- a/test/com/facebook/buck/ocaml/OcamlLibraryBuilder.java",
                "+++ b/test/com/facebook/buck/ocaml/OcamlLibraryBuilder.java",
                "@@ -19,2 +19,3 @@ package com.facebook.buck.ocaml;",
                " import com.facebook.buck.model.BuildTarget;",
                "+import com.facebook.buck.model.FlavorDomain;",
                " import com.facebook.buck.rules.AbstractNodeBuilder;",
                "@@ -29,3 +30,4 @@ public class OcamlLibraryBuilder",
                "-  public OcamlLibraryBuilder(BuildTarget target, OcamlPlatform defaultPlatform) {",
                "+  public OcamlLibraryBuilder(",
                "+      BuildTarget target, OcamlPlatform defaultPlatform, FlavorDomain<OcamlPlatform> platforms) {",
                "     super(",
                "@@ -33,3 +35,4 @@ public class OcamlLibraryBuilder",
                "             new ToolchainProviderBuilder()",
                "-                .withToolchain(OcamlToolchain.DEFAULT_NAME, OcamlToolchain.of(defaultPlatform))",
                "+                .withToolchain(",
                "+                    OcamlToolchain.DEFAULT_NAME, OcamlToolchain.of(defaultPlatform, platforms))",
                "                 .build()),",
                "@@ -39,3 +42,3 @@ public class OcamlLibraryBuilder",
                "   public OcamlLibraryBuilder(BuildTarget target) {",
                "-    this(target, OcamlTestUtils.DEFAULT_PLATFORM);",
                "+    this(target, OcamlTestUtils.DEFAULT_PLATFORM, OcamlTestUtils.DEFAULT_PLATFORMS);",
                "   }",
                "diff --git a/test/com/facebook/buck/ocaml/OcamlToolchainFactoryTest.java b/test/com/facebook/buck/ocaml/OcamlToolchainFactoryTest.java",
                "index 4700489c5d..23c951338f 100644",
                "--- a/test/com/facebook/buck/ocaml/OcamlToolchainFactoryTest.java",
                "+++ b/test/com/facebook/buck/ocaml/OcamlToolchainFactoryTest.java",
                "@@ -22,8 +22,19 @@ import com.facebook.buck.config.BuckConfig;",
                " import com.facebook.buck.config.FakeBuckConfig;",
                "+import com.facebook.buck.cxx.toolchain.CxxPlatform;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;",
                " import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;",
                "+import com.facebook.buck.io.AlwaysFoundExecutableFinder;",
                " import com.facebook.buck.io.ExecutableFinder;",
                " import com.facebook.buck.io.FakeExecutableFinder;",
                "+import com.facebook.buck.io.filesystem.ProjectFilesystem;",
                "+import com.facebook.buck.model.Flavor;",
                " import com.facebook.buck.model.FlavorDomain;",
                "+import com.facebook.buck.model.InternalFlavor;",
                "+import com.facebook.buck.rules.BuildRuleResolver;",
                "+import com.facebook.buck.rules.DefaultSourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathResolver;",
                "+import com.facebook.buck.rules.SourcePathRuleFinder;",
                "+import com.facebook.buck.rules.TestBuildRuleResolver;",
                " import com.facebook.buck.rules.keys.config.TestRuleKeyConfigurationFactory;",
                "+import com.facebook.buck.testutil.AllExistingProjectFilesystem;",
                " import com.facebook.buck.testutil.FakeProjectFilesystem;",
                "@@ -34,3 +45,5 @@ import com.facebook.buck.util.FakeProcessExecutor;",
                " import com.facebook.buck.util.ProcessExecutor;",
                "+import com.google.common.collect.ImmutableList;",
                " import com.google.common.collect.ImmutableMap;",
                "+import java.nio.file.Path;",
                " import java.util.Optional;",
                "@@ -43,2 +56,7 @@ public class OcamlToolchainFactoryTest {",
                "   public void getCFlags() {",
                "+    CxxPlatform cxxPlatform =",
                "+        CxxPlatformUtils.DEFAULT_PLATFORM",
                "+            .withAsflags(\"-asflag\")",
                "+            .withCppflags(\"-cppflag\")",
                "+            .withCflags(\"-cflag\");",
                "     ToolchainProvider toolchainProvider =",
                "@@ -47,8 +65,3 @@ public class OcamlToolchainFactoryTest {",
                "                 CxxPlatformsProvider.DEFAULT_NAME,",
                "-                CxxPlatformsProvider.of(",
                "-                    CxxPlatformUtils.DEFAULT_PLATFORM",
                "-                        .withAsflags(\"-asflag\")",
                "-                        .withCppflags(\"-cppflag\")",
                "-                        .withCflags(\"-cflag\"),",
                "-                    FlavorDomain.of(\"C/C++\")))",
                "+                CxxPlatformsProvider.of(cxxPlatform, FlavorDomain.of(\"C/C++\", cxxPlatform)))",
                "             .build();",
                "@@ -74,2 +87,51 @@ public class OcamlToolchainFactoryTest {",
                "   }",
                "+",
                "+  @Test",
                "+  public void customPlatforms() {",
                "+    BuildRuleResolver resolver = new TestBuildRuleResolver();",
                "+    SourcePathResolver pathResolver =",
                "+        DefaultSourcePathResolver.from(new SourcePathRuleFinder(resolver));",
                "+",
                "+    Flavor custom = InternalFlavor.of(\"custom\");",
                "+    CxxPlatform cxxPlatform = CxxPlatformUtils.DEFAULT_PLATFORM.withFlavor(custom);",
                "+    ToolchainProvider toolchainProvider =",
                "+        new ToolchainProviderBuilder()",
                "+            .withToolchain(",
                "+                CxxPlatformsProvider.DEFAULT_NAME,",
                "+                CxxPlatformsProvider.of(cxxPlatform, FlavorDomain.of(\"C/C++\", cxxPlatform)))",
                "+            .build();",
                "+",
                "+    ProcessExecutor processExecutor = new FakeProcessExecutor();",
                "+    ExecutableFinder executableFinder = new AlwaysFoundExecutableFinder();",
                "+    ProjectFilesystem filesystem = new AllExistingProjectFilesystem();",
                "+    Path compiler = filesystem.getPath(\"/some/compiler\");",
                "+    BuckConfig buckConfig =",
                "+        FakeBuckConfig.builder()",
                "+            .setFilesystem(filesystem)",
                "+            .setSections(",
                "+                ImmutableMap.of(",
                "+                    \"ocaml#\" + custom, ImmutableMap.of(\"ocaml.compiler\", compiler.toString())))",
                "+            .build();",
                "+    ToolchainCreationContext toolchainCreationContext =",
                "+        ToolchainCreationContext.of(",
                "+            ImmutableMap.of(),",
                "+            buckConfig,",
                "+            filesystem,",
                "+            processExecutor,",
                "+            executableFinder,",
                "+            TestRuleKeyConfigurationFactory.create());",
                "+",
                "+    OcamlToolchainFactory factory = new OcamlToolchainFactory();",
                "+    Optional<OcamlToolchain> toolchain =",
                "+        factory.createToolchain(toolchainProvider, toolchainCreationContext);",
                "+    assertThat(",
                "+        toolchain",
                "+            .get()",
                "+            .getOcamlPlatforms()",
                "+            .getValue(custom)",
                "+            .getOcamlCompiler()",
                "+            .get()",
                "+            .getCommandPrefix(pathResolver),",
                "+        Matchers.equalTo(ImmutableList.of(filesystem.resolve(compiler).toString())));",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/com/facebook/buck/ocaml/AbstractOcamlToolchain.java",
                "src/com/facebook/buck/ocaml/OcamlToolchainFactory.java",
                "test/com/facebook/buck/ocaml/OcamlLibraryBuilder.java",
                "test/com/facebook/buck/ocaml/OcamlToolchainFactoryTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7bf94f5debbf875d73a1a1297f735f42b4962084",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521657869,
            "hunks": 3,
            "message": "Make Skylark functions private. Summary: They should not be accessed directly, since `Runtime.setupModuleGlobals` should be used to set them up. Test Plan: CI Reviewed By: sbalabanov fbshipit-source-id: 0c448bf",
            "diff": [
                "diff --git a/src/com/facebook/buck/skylark/function/SkylarkExtensionFunctions.java b/src/com/facebook/buck/skylark/function/SkylarkExtensionFunctions.java",
                "index 67cb4c70d2..011ba7b281 100644",
                "--- a/src/com/facebook/buck/skylark/function/SkylarkExtensionFunctions.java",
                "+++ b/src/com/facebook/buck/skylark/function/SkylarkExtensionFunctions.java",
                "@@ -39,3 +39,3 @@ public class SkylarkExtensionFunctions {",
                "   )",
                "-  public static final Provider struct = NativeProvider.STRUCT;",
                "+  private static final Provider struct = NativeProvider.STRUCT;",
                "diff --git a/test/com/facebook/buck/skylark/function/SkylarkExtensionFunctionsTest.java b/test/com/facebook/buck/skylark/function/SkylarkExtensionFunctionsTest.java",
                "index 6224589f73..6cee6f96dd 100644",
                "--- a/test/com/facebook/buck/skylark/function/SkylarkExtensionFunctionsTest.java",
                "+++ b/test/com/facebook/buck/skylark/function/SkylarkExtensionFunctionsTest.java",
                "@@ -28,2 +28,3 @@ import com.google.devtools.build.lib.syntax.Mutability;",
                " import com.google.devtools.build.lib.syntax.ParserInputSource;",
                "+import com.google.devtools.build.lib.syntax.Runtime;",
                " import com.google.devtools.build.lib.vfs.PathFragment;",
                "@@ -54,4 +55,3 @@ public class SkylarkExtensionFunctionsTest {",
                "       Environment env = Environment.builder(mutability).useDefaultSemantics().build();",
                "-      env.setupDynamic(",
                "-          SkylarkExtensionFunctions.struct.getName(), SkylarkExtensionFunctions.struct);",
                "+      Runtime.setupModuleGlobals(env, SkylarkExtensionFunctions.class);",
                "       boolean result = buildFileAST.exec(env, eventHandler);"
            ],
            "changed_files": [
                "src/com/facebook/buck/skylark/function/SkylarkExtensionFunctions.java",
                "test/com/facebook/buck/skylark/function/SkylarkExtensionFunctionsTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e0f38bff56d338ef66c44fdaac656d25ddc5ca7c",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521697958,
            "hunks": 4,
            "message": "Detect and fail on invalid Python version. Summary: This will print an error message descriing which verison was used and which one is required. Test Plan: CI Reviewed By: jtorkkola fbshipit-source-id: a1aba3b",
            "diff": [
                "diff --git a/programs/buck.py b/programs/buck.py",
                "index 5fa18df37b..33845fe201 100755",
                "--- a/programs/buck.py",
                "+++ b/programs/buck.py",
                "@@ -1,3 +1,19 @@",
                " #!/usr/bin/env python",
                "+",
                " from __future__ import print_function",
                "+import sys",
                "+",
                "+",
                "+class ExitCode(object):",
                "+    \"\"\"Python equivalent of com.facebook.buck.util.ExitCode\"\"\"",
                "+    FATAL_BOOTSTRAP = 11",
                "+",
                "+",
                "+if sys.version_info < (2, 7):",
                "+    import platform",
                "+    print((\"Buck requires at least version 2.7 of Python, but you are using {}.\"",
                "+           \"\\nPlease follow https://buckbuild.com/setup/getting_started.html \" +",
                "+           \"to properly setup your development environment.\").format(platform.version()))",
                "+    sys.exit(ExitCode.FATAL_BOOTSTRAP)",
                "+",
                " import logging",
                "@@ -6,3 +22,2 @@ import signal",
                " import subprocess",
                "-import sys",
                " import re",
                "@@ -79,3 +94,3 @@ def _warn_about_wrong_java_version(required_version, actual_version):",
                "         \"https://buckbuild.com/setup/getting_started.html \" +",
                "-        \"to properly setup your local enviroment and avoid build issues.\",",
                "+        \"to properly setup your local environment and avoid build issues.\",",
                "         actual_version, required_version)"
            ],
            "changed_files": [
                "programs/buck.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "45125d1f91b66d746624997bd323bcddec7a736e",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521583191,
            "hunks": 28,
            "message": "Make adb timeout configurable Summary: Adb doesn't seem to reliably give output in client-server mode over the network. Increase the timeout since certain large apps can take longer than that to install on older devices. Test Plan: debugged an install with and without `adb_timeout` in `.buckconfig` Reviewed By: styurin fbshipit-source-id: 265bb61",
            "diff": [
                "diff --git a/src/com/facebook/buck/android/AdbHelper.java b/src/com/facebook/buck/android/AdbHelper.java",
                "index 8bcb23776a..6df33043c9 100644",
                "--- a/src/com/facebook/buck/android/AdbHelper.java",
                "+++ b/src/com/facebook/buck/android/AdbHelper.java",
                "@@ -487,5 +487,5 @@ public class AdbHelper implements AndroidDevicesHelper {",
                "   private static AndroidDebugBridge createAdb(",
                "-      AndroidPlatformTarget androidPlatformTarget, ExecutionContext context)",
                "+      AndroidPlatformTarget androidPlatformTarget, ExecutionContext context, int adbTimeout)",
                "       throws InterruptedException {",
                "-    DdmPreferences.setTimeOut(60000);",
                "+    DdmPreferences.setTimeOut(adbTimeout);",
                "@@ -528,3 +528,4 @@ public class AdbHelper implements AndroidDevicesHelper {",
                "                   AndroidPlatformTarget.DEFAULT_NAME, AndroidPlatformTarget.class),",
                "-              contextSupplier.get());",
                "+              contextSupplier.get(),",
                "+              options.getAdbTimeout());",
                "     } catch (InterruptedException e) {",
                "diff --git a/src/com/facebook/buck/android/AndroidBuckConfig.java b/src/com/facebook/buck/android/AndroidBuckConfig.java",
                "index 4847164fab..d5511872f0 100644",
                "--- a/src/com/facebook/buck/android/AndroidBuckConfig.java",
                "+++ b/src/com/facebook/buck/android/AndroidBuckConfig.java",
                "@@ -47,2 +47,6 @@ public class AndroidBuckConfig {",
                "+  public Integer getAdbTimeout() {",
                "+    return delegate.getInteger(\"android\", \"adb_timeout\").orElse(60000);",
                "+  }",
                "+",
                "   public Optional<String> getSdkPath() {",
                "diff --git a/src/com/facebook/buck/cli/AdbCommandLineOptions.java b/src/com/facebook/buck/cli/AdbCommandLineOptions.java",
                "index c55b9c617f..df4c32037f 100644",
                "--- a/src/com/facebook/buck/cli/AdbCommandLineOptions.java",
                "+++ b/src/com/facebook/buck/cli/AdbCommandLineOptions.java",
                "@@ -18,4 +18,6 @@ package com.facebook.buck.cli;",
                "+import com.facebook.buck.android.AndroidBuckConfig;",
                " import com.facebook.buck.config.BuckConfig;",
                " import com.facebook.buck.step.AdbOptions;",
                "+import com.facebook.buck.util.environment.Platform;",
                " import com.google.common.annotations.VisibleForTesting;",
                "@@ -50,3 +52,4 @@ public class AdbCommandLineOptions {",
                "     }",
                "-    return new AdbOptions(adbThreadCount, multiInstallMode);",
                "+    AndroidBuckConfig androidBuckConfig = new AndroidBuckConfig(buckConfig, Platform.detect());",
                "+    return new AdbOptions(adbThreadCount, multiInstallMode, androidBuckConfig.getAdbTimeout());",
                "   }",
                "diff --git a/src/com/facebook/buck/step/AdbOptions.java b/src/com/facebook/buck/step/AdbOptions.java",
                "index 6bfc5c9252..0cea85a4cb 100644",
                "--- a/src/com/facebook/buck/step/AdbOptions.java",
                "+++ b/src/com/facebook/buck/step/AdbOptions.java",
                "@@ -24,10 +24,8 @@ public class AdbOptions {",
                "   private boolean multiInstallMode;",
                "+  private int adbTimeout;",
                "-  public AdbOptions() {",
                "-    this(0, false);",
                "-  }",
                "-",
                "-  public AdbOptions(int adbThreadCount, boolean multiInstallMode) {",
                "+  public AdbOptions(int adbThreadCount, boolean multiInstallMode, int adbTimeout) {",
                "     this.adbThreadCount = adbThreadCount;",
                "     this.multiInstallMode = multiInstallMode;",
                "+    this.adbTimeout = adbTimeout;",
                "   }",
                "@@ -41,2 +39,6 @@ public class AdbOptions {",
                "   }",
                "+",
                "+  public int getAdbTimeout() {",
                "+    return adbTimeout;",
                "+  }",
                " }",
                "diff --git a/test/com/facebook/buck/android/AdbHelperTest.java b/test/com/facebook/buck/android/AdbHelperTest.java",
                "index 1c86adf2d3..bc3e0d44f5 100644",
                "--- a/test/com/facebook/buck/android/AdbHelperTest.java",
                "+++ b/test/com/facebook/buck/android/AdbHelperTest.java",
                "@@ -28,2 +28,3 @@ import com.facebook.buck.android.exopackage.RealAndroidDevice;",
                " import com.facebook.buck.android.toolchain.AndroidPlatformTarget;",
                "+import com.facebook.buck.config.FakeBuckConfig;",
                " import com.facebook.buck.event.BuckEventBusForTests;",
                "@@ -36,2 +37,3 @@ import com.facebook.buck.testutil.TestConsole;",
                " import com.facebook.buck.toolchain.impl.ToolchainProviderBuilder;",
                "+import com.facebook.buck.util.environment.Platform;",
                " import com.google.common.collect.ImmutableList;",
                "@@ -57,3 +59,3 @@ public class AdbHelperTest {",
                "     testConsole = (TestConsole) testContext.getConsole();",
                "-    basicAdbHelper = createAdbHelper(new AdbOptions(), new TargetDeviceOptions());",
                "+    basicAdbHelper = createAdbHelper(createAdbOptions(), new TargetDeviceOptions());",
                "   }",
                "@@ -120,3 +122,3 @@ public class AdbHelperTest {",
                "     AdbHelper adbHelper =",
                "-        createAdbHelper(new AdbOptions(), new TargetDeviceOptions(true, false, Optional.empty()));",
                "+        createAdbHelper(createAdbOptions(), new TargetDeviceOptions(true, false, Optional.empty()));",
                "@@ -138,3 +140,3 @@ public class AdbHelperTest {",
                "     AdbHelper adbHelper =",
                "-        createAdbHelper(new AdbOptions(), new TargetDeviceOptions(false, true, Optional.empty()));",
                "+        createAdbHelper(createAdbOptions(), new TargetDeviceOptions(false, true, Optional.empty()));",
                "@@ -171,3 +173,3 @@ public class AdbHelperTest {",
                "-    AdbHelper myAdbHelper = createAdbHelper(new AdbOptions(0, true), new TargetDeviceOptions());",
                "+    AdbHelper myAdbHelper = createAdbHelper(createAdbOptions(true), new TargetDeviceOptions());",
                "     List<IDevice> filteredDevices = myAdbHelper.filterDevices(devices);",
                "@@ -181,3 +183,3 @@ public class AdbHelperTest {",
                "     AdbHelper myAdbHelper =",
                "-        createAdbHelper(new AdbOptions(), new TargetDeviceOptions(true, false, Optional.empty()));",
                "+        createAdbHelper(createAdbOptions(), new TargetDeviceOptions(true, false, Optional.empty()));",
                "@@ -199,3 +201,3 @@ public class AdbHelperTest {",
                "     AdbHelper myAdbHelper =",
                "-        createAdbHelper(new AdbOptions(), new TargetDeviceOptions(false, true, Optional.empty()));",
                "+        createAdbHelper(createAdbOptions(), new TargetDeviceOptions(false, true, Optional.empty()));",
                "@@ -227,3 +229,3 @@ public class AdbHelperTest {",
                "           createAdbHelper(",
                "-              new AdbOptions(),",
                "+              createAdbOptions(),",
                "               new TargetDeviceOptions(false, false, Optional.of(devices[i].getSerialNumber())));",
                "@@ -254,3 +256,3 @@ public class AdbHelperTest {",
                "                   .build(),",
                "-              new AdbOptions(),",
                "+              createAdbOptions(),",
                "               new TargetDeviceOptions());",
                "@@ -276,3 +278,4 @@ public class AdbHelperTest {",
                "         createAdbHelper(",
                "-            new AdbOptions(), new TargetDeviceOptions(false, false, Optional.of(\"invalid-serial\")));",
                "+            createAdbOptions(),",
                "+            new TargetDeviceOptions(false, false, Optional.of(\"invalid-serial\")));",
                "     List<IDevice> filteredDevices = myAdbHelper.filterDevices(devices);",
                "@@ -294,3 +297,3 @@ public class AdbHelperTest {",
                "         createAdbHelper(",
                "-            new AdbOptions(),",
                "+            createAdbOptions(),",
                "             new TargetDeviceOptions(false, true, Optional.of(realDevice1.getSerialNumber())));",
                "@@ -304,3 +307,3 @@ public class AdbHelperTest {",
                "         createAdbHelper(",
                "-            new AdbOptions(),",
                "+            createAdbOptions(),",
                "             new TargetDeviceOptions(false, true, Optional.of(emulator1.getSerialNumber())));",
                "@@ -312,3 +315,3 @@ public class AdbHelperTest {",
                "         createAdbHelper(",
                "-            new AdbOptions(),",
                "+            createAdbOptions(),",
                "             new TargetDeviceOptions(true, false, Optional.of(realDevice1.getSerialNumber())));",
                "@@ -320,3 +323,3 @@ public class AdbHelperTest {",
                "         createAdbHelper(",
                "-            new AdbOptions(),",
                "+            createAdbOptions(),",
                "             new TargetDeviceOptions(true, false, Optional.of(emulator1.getSerialNumber())));",
                "@@ -330,3 +333,3 @@ public class AdbHelperTest {",
                "         createAdbHelper(",
                "-            new AdbOptions(0, true), new TargetDeviceOptions(true, true, Optional.empty()));",
                "+            createAdbOptions(true), new TargetDeviceOptions(true, true, Optional.empty()));",
                "     filteredDevices = myAdbHelper.filterDevices(devices);",
                "@@ -406,3 +409,3 @@ public class AdbHelperTest {",
                "     return new AdbHelper(",
                "-        new AdbOptions(),",
                "+        createAdbOptions(),",
                "         new TargetDeviceOptions(),",
                "@@ -427,2 +430,13 @@ public class AdbHelperTest {",
                "   }",
                "+",
                "+  private static AdbOptions createAdbOptions() {",
                "+    return createAdbOptions(false);",
                "+  }",
                "+",
                "+  private static AdbOptions createAdbOptions(boolean multiInstallMode) {",
                "+    return new AdbOptions(",
                "+        0,",
                "+        multiInstallMode,",
                "+        new AndroidBuckConfig(FakeBuckConfig.builder().build(), Platform.detect()).getAdbTimeout());",
                "+  }",
                " }"
            ],
            "changed_files": [
                "src/com/facebook/buck/android/AdbHelper.java",
                "src/com/facebook/buck/android/AndroidBuckConfig.java",
                "src/com/facebook/buck/cli/AdbCommandLineOptions.java",
                "src/com/facebook/buck/step/AdbOptions.java",
                "test/com/facebook/buck/android/AdbHelperTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, command",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "25167ba506b4823c73a3dc70e03538311bf96d0b",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522431458,
            "hunks": 4,
            "message": "Improve message when module cannot be processed Summary: Should help with understanding what's broken. Before that change it would print the exception message without the stack trace. Reviewed By: ttsugriy fbshipit-source-id: 2b1cfa3",
            "diff": [
                "diff --git a/src/com/facebook/buck/module/annotationprocessor/BuckModuleAdapterPluginGenerator.java b/src/com/facebook/buck/module/annotationprocessor/BuckModuleAdapterPluginGenerator.java",
                "index b00772bb85..5d41c67ed4 100644",
                "--- a/src/com/facebook/buck/module/annotationprocessor/BuckModuleAdapterPluginGenerator.java",
                "+++ b/src/com/facebook/buck/module/annotationprocessor/BuckModuleAdapterPluginGenerator.java",
                "@@ -117,3 +117,5 @@ class BuckModuleAdapterPluginGenerator {",
                "       } catch (IOException e) {",
                "-        processingEnv.getMessager().printMessage(Kind.WARNING, \"Exception during close: \" + e);",
                "+        processingEnv",
                "+            .getMessager()",
                "+            .printMessage(Kind.WARNING, \"Exception during close: \" + ThrowablesUtils.toString(e));",
                "       }",
                "diff --git a/src/com/facebook/buck/module/annotationprocessor/BuckModuleAnnotationProcessor.java b/src/com/facebook/buck/module/annotationprocessor/BuckModuleAnnotationProcessor.java",
                "index 652e28c9a7..48a3da0444 100644",
                "--- a/src/com/facebook/buck/module/annotationprocessor/BuckModuleAnnotationProcessor.java",
                "+++ b/src/com/facebook/buck/module/annotationprocessor/BuckModuleAnnotationProcessor.java",
                "@@ -104,3 +104,6 @@ public class BuckModuleAnnotationProcessor extends AbstractProcessor {",
                "     } catch (IOException e) {",
                "-      processingEnv.getMessager().printMessage(Kind.ERROR, \"Could not generate Buck module: \" + e);",
                "+      processingEnv",
                "+          .getMessager()",
                "+          .printMessage(",
                "+              Kind.ERROR, \"Could not generate Buck module: \" + ThrowablesUtils.toString(e));",
                "       return false;",
                "diff --git a/src/com/facebook/buck/module/annotationprocessor/BuckModuleVisitor.java b/src/com/facebook/buck/module/annotationprocessor/BuckModuleVisitor.java",
                "index 09e2502473..dab11555e2 100644",
                "--- a/src/com/facebook/buck/module/annotationprocessor/BuckModuleVisitor.java",
                "+++ b/src/com/facebook/buck/module/annotationprocessor/BuckModuleVisitor.java",
                "@@ -66,3 +66,3 @@ class BuckModuleVisitor extends SimpleElementVisitor6<Void, TypeElement> {",
                "               Diagnostic.Kind.ERROR,",
                "-              \"Cannot collect information Buck modules: \" + e.getMessage(),",
                "+              \"Cannot collect information about Buck modules: \" + ThrowablesUtils.toString(e),",
                "               type);",
                "diff --git a/src/com/facebook/buck/module/annotationprocessor/ThrowablesUtils.java b/src/com/facebook/buck/module/annotationprocessor/ThrowablesUtils.java",
                "new file mode 100644",
                "index 0000000000..93f45ed9a5",
                "--- /dev/null",
                "+++ b/src/com/facebook/buck/module/annotationprocessor/ThrowablesUtils.java",
                "@@ -0,0 +1,33 @@",
                "+/*",
                "+ * Copyright 2018-present Facebook, Inc.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
                "+ * not use this file except in compliance with the License. You may obtain",
                "+ * a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
                "+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
                "+ * License for the specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+package com.facebook.buck.module.annotationprocessor;",
                "+",
                "+import java.io.PrintWriter; // NOPMD see the javadoc",
                "+import java.io.StringWriter;",
                "+",
                "+/**",
                "+ * This class exists to avoid heavy dependencies on other libraries (like guava) or the rest of Buck",
                "+ * classes. Since those classes cannot be used NOPMD is required to allow the usage of {@link",
                "+ * PrintWriter}.",
                "+ */",
                "+class ThrowablesUtils {",
                "+  public static String toString(Throwable throwable) {",
                "+    StringWriter writer = new StringWriter();",
                "+    throwable.printStackTrace(new PrintWriter(writer)); // NOPMD see the javadoc",
                "+    return writer.toString();",
                "+  }",
                "+}"
            ],
            "changed_files": [
                "src/com/facebook/buck/module/annotationprocessor/BuckModuleAdapterPluginGenerator.java",
                "src/com/facebook/buck/module/annotationprocessor/BuckModuleAnnotationProcessor.java",
                "src/com/facebook/buck/module/annotationprocessor/BuckModuleVisitor.java",
                "src/com/facebook/buck/module/annotationprocessor/ThrowablesUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java, lead",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ce2e1bc30e41e3ad795418fcbcaef986ae99ad32",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522196712,
            "hunks": 29,
            "message": "worker_tool: convert to strongly typed macros Summary: Switch to strongly typed macros to support avoid manual parse-time deps handling and as `MacroArg`/`MacroHandler` are deprecated. Reviewed By: ttsugriy fbshipit-source-id: 3227429",
            "diff": [
                "diff --git a/src/com/facebook/buck/shell/BUCK b/src/com/facebook/buck/shell/BUCK",
                "index 6555f4ad09..9d5dca0d0a 100644",
                "--- a/src/com/facebook/buck/shell/BUCK",
                "+++ b/src/com/facebook/buck/shell/BUCK",
                "@@ -140,2 +140,3 @@ java_immutables_library(",
                "         \"//src/com/facebook/buck/rules/macros:macros\",",
                "+        \"//src/com/facebook/buck/rules/macros:types\",",
                "         \"//src/com/facebook/buck/step:step\",",
                "diff --git a/src/com/facebook/buck/shell/WorkerToolDescription.java b/src/com/facebook/buck/shell/WorkerToolDescription.java",
                "index 8c2c9854e2..3d9d59e896 100644",
                "--- a/src/com/facebook/buck/shell/WorkerToolDescription.java",
                "+++ b/src/com/facebook/buck/shell/WorkerToolDescription.java",
                "@@ -20,3 +20,2 @@ import com.facebook.buck.config.BuckConfig;",
                " import com.facebook.buck.model.BuildTarget;",
                "-import com.facebook.buck.model.macros.MacroException;",
                " import com.facebook.buck.rules.BinaryBuildRule;",
                "@@ -26,3 +25,2 @@ import com.facebook.buck.rules.BuildRuleParams;",
                " import com.facebook.buck.rules.BuildRuleResolver;",
                "-import com.facebook.buck.rules.CellPathResolver;",
                " import com.facebook.buck.rules.CommandTool;",
                "@@ -30,7 +28,6 @@ import com.facebook.buck.rules.CommonDescriptionArg;",
                " import com.facebook.buck.rules.Description;",
                "-import com.facebook.buck.rules.ImplicitDepsInferringDescription;",
                " import com.facebook.buck.rules.SourcePathResolver;",
                " import com.facebook.buck.rules.SourcePathRuleFinder;",
                "-import com.facebook.buck.rules.args.Arg;",
                " import com.facebook.buck.rules.args.ProxyArg;",
                "+import com.facebook.buck.rules.macros.AbstractMacroExpander;",
                " import com.facebook.buck.rules.macros.ClasspathMacroExpander;",
                "@@ -38,5 +35,5 @@ import com.facebook.buck.rules.macros.ExecutableMacroExpander;",
                " import com.facebook.buck.rules.macros.LocationMacroExpander;",
                "-import com.facebook.buck.rules.macros.MacroArg;",
                "-import com.facebook.buck.rules.macros.MacroExpander;",
                "-import com.facebook.buck.rules.macros.MacroHandler;",
                "+import com.facebook.buck.rules.macros.Macro;",
                "+import com.facebook.buck.rules.macros.StringWithMacros;",
                "+import com.facebook.buck.rules.macros.StringWithMacrosConverter;",
                " import com.facebook.buck.util.HumanReadableException;",
                "@@ -44,3 +41,2 @@ import com.facebook.buck.util.immutables.BuckStyleImmutable;",
                " import com.facebook.buck.util.types.Either;",
                "-import com.google.common.collect.ImmutableCollection;",
                " import com.google.common.collect.ImmutableList;",
                "@@ -51,8 +47,5 @@ import java.util.Optional;",
                " import java.util.function.Consumer;",
                "-import java.util.function.Function;",
                " import org.immutables.value.Value;",
                "-public class WorkerToolDescription",
                "-    implements Description<WorkerToolDescriptionArg>,",
                "-        ImplicitDepsInferringDescription<WorkerToolDescription.AbstractWorkerToolDescriptionArg> {",
                "+public class WorkerToolDescription implements Description<WorkerToolDescriptionArg> {",
                "@@ -61,9 +54,5 @@ public class WorkerToolDescription",
                "-  public static final MacroHandler MACRO_HANDLER =",
                "-      new MacroHandler(",
                "-          ImmutableMap.<String, MacroExpander>builder()",
                "-              .put(\"location\", new LocationMacroExpander())",
                "-              .put(\"classpath\", new ClasspathMacroExpander())",
                "-              .put(\"exe\", new ExecutableMacroExpander())",
                "-              .build());",
                "+  public static final ImmutableList<AbstractMacroExpander<? extends Macro, ?>> MACRO_EXPANDERS =",
                "+      ImmutableList.of(",
                "+          new LocationMacroExpander(), new ClasspathMacroExpander(), new ExecutableMacroExpander());",
                "@@ -111,5 +100,9 @@ public class WorkerToolDescription",
                "-    Function<String, Arg> toArg =",
                "-        MacroArg.toMacroArgFunction(",
                "-            MACRO_HANDLER, buildTarget, context.getCellPathResolver(), resolver);",
                "+    StringWithMacrosConverter macrosConverter =",
                "+        StringWithMacrosConverter.builder()",
                "+            .setBuildTarget(buildTarget)",
                "+            .setCellPathResolver(context.getCellPathResolver())",
                "+            .setResolver(resolver)",
                "+            .setExpanders(MACRO_EXPANDERS)",
                "+            .build();",
                "@@ -117,3 +110,3 @@ public class WorkerToolDescription",
                "       builder.addArg(",
                "-          new ProxyArg(toArg.apply(args.getArgs().getLeft())) {",
                "+          new ProxyArg(macrosConverter.convert(args.getArgs().getLeft())) {",
                "             @Override",
                "@@ -131,8 +124,8 @@ public class WorkerToolDescription",
                "     } else {",
                "-      for (String arg : args.getArgs().getRight()) {",
                "-        builder.addArg(toArg.apply(arg));",
                "+      for (StringWithMacros arg : args.getArgs().getRight()) {",
                "+        builder.addArg(macrosConverter.convert(arg));",
                "       }",
                "     }",
                "-    for (Map.Entry<String, String> e : args.getEnv().entrySet()) {",
                "-      builder.addEnv(e.getKey(), toArg.apply(e.getValue()));",
                "+    for (Map.Entry<String, StringWithMacros> e : args.getEnv().entrySet()) {",
                "+      builder.addEnv(e.getKey(), macrosConverter.convert(e.getValue()));",
                "     }",
                "@@ -153,32 +146,2 @@ public class WorkerToolDescription",
                "-  @Override",
                "-  public void findDepsForTargetFromConstructorArgs(",
                "-      BuildTarget buildTarget,",
                "-      CellPathResolver cellRoots,",
                "-      AbstractWorkerToolDescriptionArg constructorArg,",
                "-      ImmutableCollection.Builder<BuildTarget> extraDepsBuilder,",
                "-      ImmutableCollection.Builder<BuildTarget> targetGraphOnlyDepsBuilder) {",
                "-    try {",
                "-      if (constructorArg.getArgs().isLeft()) {",
                "-        MACRO_HANDLER.extractParseTimeDeps(",
                "-            buildTarget,",
                "-            cellRoots,",
                "-            constructorArg.getArgs().getLeft(),",
                "-            extraDepsBuilder,",
                "-            targetGraphOnlyDepsBuilder);",
                "-      } else {",
                "-        for (String arg : constructorArg.getArgs().getRight()) {",
                "-          MACRO_HANDLER.extractParseTimeDeps(",
                "-              buildTarget, cellRoots, arg, extraDepsBuilder, targetGraphOnlyDepsBuilder);",
                "-        }",
                "-      }",
                "-      for (Map.Entry<String, String> env : constructorArg.getEnv().entrySet()) {",
                "-        MACRO_HANDLER.extractParseTimeDeps(",
                "-            buildTarget, cellRoots, env.getValue(), extraDepsBuilder, targetGraphOnlyDepsBuilder);",
                "-      }",
                "-    } catch (MacroException e) {",
                "-      throw new HumanReadableException(e, \"%s: %s\", buildTarget, e.getMessage());",
                "-    }",
                "-  }",
                "-",
                "   @BuckStyleImmutable",
                "@@ -186,6 +149,6 @@ public class WorkerToolDescription",
                "   interface AbstractWorkerToolDescriptionArg extends CommonDescriptionArg {",
                "-    ImmutableMap<String, String> getEnv();",
                "+    ImmutableMap<String, StringWithMacros> getEnv();",
                "     @Value.Default",
                "-    default Either<String, ImmutableList<String>> getArgs() {",
                "+    default Either<StringWithMacros, ImmutableList<StringWithMacros>> getArgs() {",
                "       return Either.ofRight(ImmutableList.of());",
                "diff --git a/test/com/facebook/buck/rules/macros/WorkerMacroArgTest.java b/test/com/facebook/buck/rules/macros/WorkerMacroArgTest.java",
                "index d52844ed20..d2756d9cce 100644",
                "--- a/test/com/facebook/buck/rules/macros/WorkerMacroArgTest.java",
                "+++ b/test/com/facebook/buck/rules/macros/WorkerMacroArgTest.java",
                "@@ -59,3 +59,3 @@ public class WorkerMacroArgTest {",
                "         .setExe(shBinaryRule.getBuildTarget())",
                "-        .setArgs(startupArgs)",
                "+        .setArgs(StringWithMacrosUtils.format(startupArgs))",
                "         .setMaxWorkers(maxWorkers)",
                "diff --git a/test/com/facebook/buck/shell/WorkerToolBuilder.java b/test/com/facebook/buck/shell/WorkerToolBuilder.java",
                "index 887e159b9d..fad50592c2 100644",
                "--- a/test/com/facebook/buck/shell/WorkerToolBuilder.java",
                "+++ b/test/com/facebook/buck/shell/WorkerToolBuilder.java",
                "@@ -21,2 +21,3 @@ import com.facebook.buck.model.BuildTarget;",
                " import com.facebook.buck.rules.AbstractNodeBuilder;",
                "+import com.facebook.buck.rules.macros.StringWithMacros;",
                " import com.facebook.buck.util.types.Either;",
                "@@ -37,3 +38,3 @@ public class WorkerToolBuilder",
                "-  public WorkerToolBuilder setEnv(ImmutableMap<String, String> env) {",
                "+  public WorkerToolBuilder setEnv(ImmutableMap<String, StringWithMacros> env) {",
                "     getArgForPopulating().setEnv(env);",
                "@@ -47,3 +48,3 @@ public class WorkerToolBuilder",
                "-  public WorkerToolBuilder setArgs(String... args) {",
                "+  public WorkerToolBuilder setArgs(StringWithMacros... args) {",
                "     getArgForPopulating().setArgs(Either.ofRight(ImmutableList.copyOf(args)));",
                "diff --git a/test/com/facebook/buck/shell/WorkerToolTest.java b/test/com/facebook/buck/shell/WorkerToolTest.java",
                "index b2bcf89941..ab93eb9924 100644",
                "--- a/test/com/facebook/buck/shell/WorkerToolTest.java",
                "+++ b/test/com/facebook/buck/shell/WorkerToolTest.java",
                "@@ -32,2 +32,4 @@ import com.facebook.buck.rules.SourcePathRuleFinder;",
                " import com.facebook.buck.rules.TestBuildRuleResolver;",
                "+import com.facebook.buck.rules.macros.LocationMacro;",
                "+import com.facebook.buck.rules.macros.StringWithMacrosUtils;",
                " import com.facebook.buck.util.HumanReadableException;",
                "@@ -56,3 +58,3 @@ public class WorkerToolTest {",
                "             .setExe(shBinaryRule.getBuildTarget())",
                "-            .setArgs(\"arg1\", \"arg2\")",
                "+            .setArgs(StringWithMacrosUtils.format(\"arg1\"), StringWithMacrosUtils.format(\"arg2\"))",
                "             .build(resolver);",
                "@@ -104,3 +106,5 @@ public class WorkerToolTest {",
                "             .setExe(shBinaryRule.getBuildTarget())",
                "-            .setArgs(\"--input $(location //:file)\");",
                "+            .setArgs(",
                "+                StringWithMacrosUtils.format(",
                "+                    \"--input %s\", LocationMacro.of(exportFileRule.getBuildTarget())));",
                "     DefaultWorkerTool workerTool = workerToolBuilder.build(resolver);",
                "@@ -108,3 +112,4 @@ public class WorkerToolTest {",
                "     assertThat(",
                "-        workerToolBuilder.findImplicitDeps(), Matchers.hasItem(exportFileRule.getBuildTarget()));",
                "+        workerToolBuilder.build().getExtraDeps(),",
                "+        Matchers.hasItem(exportFileRule.getBuildTarget()));",
                "     assertThat(workerTool.getBuildDeps(), Matchers.hasItems(shBinaryRule, exportFileRule));",
                "@@ -138,3 +143,7 @@ public class WorkerToolTest {",
                "             .setExe(shBinaryRule.getBuildTarget())",
                "-            .setEnv(ImmutableMap.of(\"ENV_VAR_NAME\", \"$(location //:file)\"));",
                "+            .setEnv(",
                "+                ImmutableMap.of(",
                "+                    \"ENV_VAR_NAME\",",
                "+                    StringWithMacrosUtils.format(",
                "+                        \"%s\", LocationMacro.of(exportFileRule.getBuildTarget()))));",
                "     DefaultWorkerTool workerTool = workerToolBuilder.build(resolver);",
                "@@ -142,3 +151,4 @@ public class WorkerToolTest {",
                "     assertThat(",
                "-        workerToolBuilder.findImplicitDeps(), Matchers.hasItem(exportFileRule.getBuildTarget()));",
                "+        workerToolBuilder.build().getExtraDeps(),",
                "+        Matchers.hasItem(exportFileRule.getBuildTarget()));",
                "     assertThat(workerTool.getBuildDeps(), Matchers.hasItems(shBinaryRule, exportFileRule));",
                "@@ -171,3 +181,6 @@ public class WorkerToolTest {",
                "             .setExe(shBinaryRule.getBuildTarget())",
                "-            .setArgs(\"--input\", \"$(location //:file)\");",
                "+            .setArgs(",
                "+                StringWithMacrosUtils.format(\"--input\"),",
                "+                StringWithMacrosUtils.format(",
                "+                    \"%s\", LocationMacro.of(exportFileRule.getBuildTarget())));",
                "     WorkerTool workerTool = workerToolBuilder.build(resolver);"
            ],
            "changed_files": [
                "src/com/facebook/buck/shell/BUCK",
                "src/com/facebook/buck/shell/WorkerToolDescription.java",
                "test/com/facebook/buck/rules/macros/WorkerMacroArgTest.java",
                "test/com/facebook/buck/shell/WorkerToolBuilder.java",
                "test/com/facebook/buck/shell/WorkerToolTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: java",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "dd2a1eefbbeb2492babcbe040fb5e4fca41011f6",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521600820,
            "hunks": 6,
            "message": "Fix function template. Summary: Turns out spaces are important :) and `{ param` does not actually work. Test Plan: manually test Reviewed By: philipjameson fbshipit-source-id: 2c9b41d",
            "diff": [
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg",
                "index cb0018d4cb..ee5f2c7448 100644",
                "--- a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg",
                "@@ -12,3 +12,2 @@",
                "     {param content}",
                "-",
                "       {call buck.function}",
                "@@ -18,15 +17,12 @@",
                "         {/param}",
                "-",
                "         {param args}",
                "-",
                "           %signature.parameters :{parameter |",
                "-            %openCurly% call buck.functionArg %closeCurly%",
                "-              %openCurly% param name : '%parameter.name%' /%closeCurly%",
                "-              %openCurly% param desc %closeCurly%",
                "+            %openCurly%call buck.functionArg%closeCurly%",
                "+              %openCurly%param name : '%parameter.name%' /%closeCurly%",
                "+              %openCurly%param desc %closeCurly%",
                "                 %parameter.doc%",
                "               %openCurly%/param%closeCurly%",
                "-              %openCurly% param default : '%parameter.defaultValue%' /%closeCurly%",
                "+              %openCurly%param default : '%parameter.defaultValue%' /%closeCurly%",
                "             %openCurly%/call%closeCurly%",
                "           }%",
                "-",
                "         {/param}"
            ],
            "changed_files": [
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8740a5ecbb9dd026ecf23e6f0f859b1d6d7ee526",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522737089,
            "hunks": 6,
            "message": "Regenerate Skylark function docs. Summary: This gets rid of unnecessary `Arguments` section for functions without any arguments. Reviewed By: sbalabanov fbshipit-source-id: dcc5b9c",
            "diff": [
                "diff --git a/docs/skylark/generated/glob.soy b/docs/skylark/generated/glob.soy",
                "index 54fbcad226..685560a36c 100644",
                "--- a/docs/skylark/generated/glob.soy",
                "+++ b/docs/skylark/generated/glob.soy",
                "@@ -17,26 +17,26 @@",
                "         {/param}",
                "-        {param args}",
                "-                      {call buck.functionArg}",
                "-                        {param name : 'include' /}",
                "-                        {param desc }",
                "-                          a list of strings specifying patterns of files to include.",
                "-                        {/param}",
                "-                        {param default : 'None' /}",
                "-                      {/call}",
                "-                      {call buck.functionArg}",
                "-                        {param name : 'exclude' /}",
                "-                        {param desc }",
                "-                          a list of strings specifying patterns of files to exclude.",
                "-                        {/param}",
                "-                        {param default : '[]' /}",
                "-                      {/call}",
                "-                      {call buck.functionArg}",
                "-                        {param name : 'exclude_directories' /}",
                "-                        {param desc }",
                "-                          True indicates directories should not be matched.",
                "-                        {/param}",
                "-                        {param default : 'True' /}",
                "-                      {/call}",
                "+          {param args}",
                "+                          {call buck.functionArg}",
                "+                            {param name : 'include' /}",
                "+                            {param desc }",
                "+                              a list of strings specifying patterns of files to include.",
                "+                            {/param}",
                "+                            {param default : 'None' /}",
                "+                          {/call}",
                "+                          {call buck.functionArg}",
                "+                            {param name : 'exclude' /}",
                "+                            {param desc }",
                "+                              a list of strings specifying patterns of files to exclude.",
                "+                            {/param}",
                "+                            {param default : '[]' /}",
                "+                          {/call}",
                "+                          {call buck.functionArg}",
                "+                            {param name : 'exclude_directories' /}",
                "+                            {param desc }",
                "+                              True indicates directories should not be matched.",
                "+                            {/param}",
                "+                            {param default : 'True' /}",
                "+                          {/call}",
                "-        {/param}",
                "+          {/param}",
                "       {/call}",
                "diff --git a/docs/skylark/generated/host_info.soy b/docs/skylark/generated/host_info.soy",
                "index 97bfd70c91..9a73c90413 100644",
                "--- a/docs/skylark/generated/host_info.soy",
                "+++ b/docs/skylark/generated/host_info.soy",
                "@@ -69,4 +69,2 @@",
                "         {/param}",
                "-        {param args}",
                "-        {/param}",
                "       {/call}",
                "diff --git a/docs/skylark/generated/package_name.soy b/docs/skylark/generated/package_name.soy",
                "index faab15da1c..449f270008 100644",
                "--- a/docs/skylark/generated/package_name.soy",
                "+++ b/docs/skylark/generated/package_name.soy",
                "@@ -17,4 +17,2 @@",
                "         {/param}",
                "-        {param args}",
                "-        {/param}",
                "       {/call}",
                "diff --git a/docs/skylark/generated/read_config.soy b/docs/skylark/generated/read_config.soy",
                "index 0522e2780e..485187b3a1 100644",
                "--- a/docs/skylark/generated/read_config.soy",
                "+++ b/docs/skylark/generated/read_config.soy",
                "@@ -17,26 +17,26 @@",
                "         {/param}",
                "-        {param args}",
                "-                      {call buck.functionArg}",
                "-                        {param name : 'section' /}",
                "-                        {param desc }",
                "-                          the name of the .buckconfig section with the desired value.",
                "-                        {/param}",
                "-                        {param default : 'None' /}",
                "-                      {/call}",
                "-                      {call buck.functionArg}",
                "-                        {param name : 'field' /}",
                "-                        {param desc }",
                "-                          the name of the .buckconfig field with the desired value.",
                "-                        {/param}",
                "-                        {param default : 'None' /}",
                "-                      {/call}",
                "-                      {call buck.functionArg}",
                "-                        {param name : 'defaultValue' /}",
                "-                        {param desc }",
                "-                          the value to return if the desired value is not set in the .buckconfig.",
                "-                        {/param}",
                "-                        {param default : 'None' /}",
                "-                      {/call}",
                "+          {param args}",
                "+                          {call buck.functionArg}",
                "+                            {param name : 'section' /}",
                "+                            {param desc }",
                "+                              the name of the .buckconfig section with the desired value.",
                "+                            {/param}",
                "+                            {param default : 'None' /}",
                "+                          {/call}",
                "+                          {call buck.functionArg}",
                "+                            {param name : 'field' /}",
                "+                            {param desc }",
                "+                              the name of the .buckconfig field with the desired value.",
                "+                            {/param}",
                "+                            {param default : 'None' /}",
                "+                          {/call}",
                "+                          {call buck.functionArg}",
                "+                            {param name : 'defaultValue' /}",
                "+                            {param desc }",
                "+                              the value to return if the desired value is not set in the .buckconfig.",
                "+                            {/param}",
                "+                            {param default : 'None' /}",
                "+                          {/call}",
                "-        {/param}",
                "+          {/param}",
                "       {/call}",
                "diff --git a/docs/skylark/generated/repository_name.soy b/docs/skylark/generated/repository_name.soy",
                "index 9a2da1b7ea..0f6a9f5312 100644",
                "--- a/docs/skylark/generated/repository_name.soy",
                "+++ b/docs/skylark/generated/repository_name.soy",
                "@@ -17,4 +17,2 @@",
                "         {/param}",
                "-        {param args}",
                "-        {/param}",
                "       {/call}",
                "diff --git a/docs/skylark/generated/struct.soy b/docs/skylark/generated/struct.soy",
                "index 2f39330a10..3a55a75922 100644",
                "--- a/docs/skylark/generated/struct.soy",
                "+++ b/docs/skylark/generated/struct.soy",
                "@@ -19,12 +19,12 @@",
                "         {/param}",
                "-        {param args}",
                "-                      {call buck.functionArg}",
                "-                        {param name : 'kwargs' /}",
                "-                        {param desc }",
                "-                          the struct attributes.",
                "-                        {/param}",
                "-                        {param default : 'None' /}",
                "-                      {/call}",
                "+          {param args}",
                "+                          {call buck.functionArg}",
                "+                            {param name : 'kwargs' /}",
                "+                            {param desc }",
                "+                              the struct attributes.",
                "+                            {/param}",
                "+                            {param default : 'None' /}",
                "+                          {/call}",
                "-        {/param}",
                "+          {/param}",
                "       {/call}"
            ],
            "changed_files": [
                "docs/skylark/generated/glob.soy",
                "docs/skylark/generated/host_info.soy",
                "docs/skylark/generated/package_name.soy",
                "docs/skylark/generated/read_config.soy",
                "docs/skylark/generated/repository_name.soy",
                "docs/skylark/generated/struct.soy"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "39c8d86d6f857f864297abba43e336ece88aa989",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522096875,
            "hunks": 3,
            "message": "Update package info for latest release. Summary: This is in preparation for the new release. Reviewed By: styurin fbshipit-source-id: acc45a0",
            "diff": [
                "diff --git a/.buckrelease b/.buckrelease",
                "index 2bb9b46f19..37c8cca701 100644",
                "--- a/.buckrelease",
                "+++ b/.buckrelease",
                "@@ -1 +1 @@",
                "-v2018.02.16.01",
                "+v2018.03.26.01",
                "diff --git a/scripts/packages/debian/Changelog b/scripts/packages/debian/Changelog",
                "index 609caa61ae..1bcd0c4776 100644",
                "--- a/scripts/packages/debian/Changelog",
                "+++ b/scripts/packages/debian/Changelog",
                "@@ -1 +1,3 @@",
                "+buck (2018.03.26) stable; urgency=low",
                "+  * Skylark parser, stability and API improvements. See https://buckbuild.com",
                " buck (2018.02.16) stable; urgency=low",
                "diff --git a/scripts/packages/debian/buck.equivs b/scripts/packages/debian/buck.equivs",
                "index 0a2705c72b..0469734ac6 100644",
                "--- a/scripts/packages/debian/buck.equivs",
                "+++ b/scripts/packages/debian/buck.equivs",
                "@@ -6,3 +6,3 @@ Standards-Version: 3.9.2",
                " Package: buck",
                "-Version: v2017.11.16",
                "+Version: v2018.03.26.01",
                " Maintainer: team@buckaroo.pm"
            ],
            "changed_files": [
                ".buckrelease",
                "scripts/packages/debian/Changelog",
                "scripts/packages/debian/buck.equivs"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "18e338c30287d857f9ac8c9833c55c9100beb63f",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521519243,
            "hunks": 1,
            "message": "Make testdata excluded in Intellij to fix builds with it Summary: Simple config change Test Plan: ran tests locally within intellij Reviewed By: bobyangyf fbshipit-source-id: 1563dea",
            "diff": [
                "diff --git a/buck.iml b/buck.iml",
                "index 3c3c0437a7..b772161ac5 100644",
                "--- a/buck.iml",
                "+++ b/buck.iml",
                "@@ -69,2 +69,3 @@",
                "       <excludeFolder url=\"file://$MODULE_DIR$/test/com/facebook/buck/testrunner/testdata\" />",
                "+      <excludeFolder url=\"file://$MODULE_DIR$/test/com/facebook/buck/testutil/endtoend/testdata\" />",
                "       <excludeFolder url=\"file://$MODULE_DIR$/test/com/facebook/buck/testutil/integration/testlibs\" />"
            ],
            "changed_files": [
                "buck.iml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e1dd89b810b91a727041a9d32ff9fdae3df59ef9",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521827277,
            "hunks": 1,
            "message": "Deprecate export_file in favor of filegroup Summary: Updating documentation to warn users about `export_file` being deprecated and removing a phrase about breaking package visibility, this is not something we should recommend. Reviewed By: carljparker fbshipit-source-id: e8a2c7e",
            "diff": [
                "diff --git a/docs/rule/export_file.soy b/docs/rule/export_file.soy",
                "index 4014eef589..fd56854702 100644",
                "--- a/docs/rule/export_file.soy",
                "+++ b/docs/rule/export_file.soy",
                "@@ -16,5 +16,6 @@",
                " {param overview}",
                "-  An <code>export_file()</code> takes a single file or folder and exposes it so other rules can",
                "-  use it.  This is especially useful to work around package boundary violations where you want to",
                "-  use a file that is owned by a different {call buck.build_file /}.",
                "+  <p><b>Warning:</b> this build rule is deprecated.",
                "+  Use {call buck.ruleLink}{param name : 'filegroup' /}{/call} instead.</p>",
                "+  <p>An <code>export_file()</code> takes a single file or folder and exposes it so other rules can",
                "+  use it.</p>",
                " {/param}"
            ],
            "changed_files": [
                "docs/rule/export_file.soy"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "327e96dbc6a895c21ae3eb6256c5240f9f512931",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521698100,
            "hunks": 6,
            "message": "iOS e2e template: apple_library Summary: Just a lib that capitalizes the first letter Test Plan: Built locally Reviewed By: bobyangyf fbshipit-source-id: 1f196eb",
            "diff": [
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppDelegate.m b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppDelegate.m",
                "index 2104d8617a..9618aa10ea 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppDelegate.m",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppDelegate.m",
                "@@ -12,2 +12,3 @@",
                " #import \"common/hello.h\"",
                "+#import \"ios/lib/CapitalizeUtil.h\"",
                "@@ -23,3 +24,4 @@",
                "     self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];",
                "-    self.helloString = [NSString stringWithUTF8String:helloString()];",
                "+    NSString *uncapitalizedString = [NSString stringWithUTF8String:helloString()];",
                "+    self.helloString = CapitalizeFirstLetter(uncapitalizedString);",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture",
                "index 2cdd0a574e..b24aa93ca9 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture",
                "@@ -47,2 +47,3 @@ apple_binary(",
                "         \"//common:hello\",",
                "+        \"//ios/lib:capitalize\",",
                "     ],",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..d78452a865",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/BUCK.fixture",
                "@@ -0,0 +1,18 @@",
                "+# Copyright 2018-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+apple_library(",
                "+    name = \"capitalize\",",
                "+    srcs = [",
                "+        \"CapitalizeUtil.m\",",
                "+    ],",
                "+    exported_headers = [",
                "+        \"CapitalizeUtil.h\",",
                "+    ],",
                "+    visibility = [",
                "+        \"PUBLIC\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/CapitalizeUtil.h b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/CapitalizeUtil.h",
                "new file mode 100644",
                "index 0000000000..914091e43b",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/CapitalizeUtil.h",
                "@@ -0,0 +1,11 @@",
                "+/*",
                "+ * Copyright 2018-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the",
                "+ * LICENSE file in the root directory of this source tree.",
                "+ */",
                "+",
                "+#import <Foundation/Foundation.h>",
                "+",
                "+NSString *CapitalizeFirstLetter(NSString *input);",
                "\\ No newline at end of file",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/CapitalizeUtil.m b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/CapitalizeUtil.m",
                "new file mode 100644",
                "index 0000000000..e7d6207e5a",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/CapitalizeUtil.m",
                "@@ -0,0 +1,16 @@",
                "+/*",
                "+ * Copyright 2018-present, Facebook, Inc.",
                "+ * All rights reserved.",
                "+ *",
                "+ * This source code is licensed under the license found in the",
                "+ * LICENSE file in the root directory of this source tree.",
                "+ */",
                "+",
                "+#import <CapitalizeUtil.h>",
                "+",
                "+NSString *CapitalizeFirstLetter(NSString *input) {",
                "+  NSString *firstLetter = [input substringToIndex:1];",
                "+  NSString *capitalLetter = [firstLetter uppercaseString];",
                "+  NSString *restOfString = [input substringFromIndex:1];",
                "+  return [capitalLetter stringByAppendingString:restOfString];",
                "+}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/AppDelegate.m",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/CapitalizeUtil.h",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/lib/CapitalizeUtil.m"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3d7975d55bf436150ef477afb5840a71e021a2a4",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521398553,
            "hunks": 1,
            "message": "Remove unnecessary jackson deps from util target. Summary: This further reduces the size of the testrunner. Test Plan: CI Reviewed By: styurin fbshipit-source-id: 7722538",
            "diff": [
                "diff --git a/src/com/facebook/buck/util/BUCK b/src/com/facebook/buck/util/BUCK",
                "index 0a87cb9f76..1a87c3b4da 100644",
                "--- a/src/com/facebook/buck/util/BUCK",
                "+++ b/src/com/facebook/buck/util/BUCK",
                "@@ -157,4 +157,2 @@ java_immutables_library(",
                "         \"//third-party/java/jackson:jackson-annotations\",",
                "-        \"//third-party/java/jackson:jackson-datatype-guava\",",
                "-        \"//third-party/java/jackson:jackson-datatype-jdk8\",",
                "     ],"
            ],
            "changed_files": [
                "src/com/facebook/buck/util/BUCK"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e10cd76ebbb0f2a4376a8a6674339c617bf5847e",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522371680,
            "hunks": 8,
            "message": "First release of cxx_genrule topic Summary: First release of `cxx_genrule` topic Reviewed By: ttsugriy fbshipit-source-id: 6bce65d",
            "diff": [
                "diff --git a/docs/__genrule_common.soy b/docs/__genrule_common.soy",
                "index 62f158e694..6ae9e7e544 100644",
                "--- a/docs/__genrule_common.soy",
                "+++ b/docs/__genrule_common.soy",
                "@@ -46,3 +46,5 @@",
                "     {sp}<code>cmd</code>, using builtin {call buck.string_parameter_macros /}.",
                "-    This expansion takes two supported forms:",
                "+    Note that all build rules expanded in the command will be automatically",
                "+    considered to be dependencies of the <code>genrule()</code>.",
                "+",
                "     <dl>",
                "@@ -78,4 +80,2 @@",
                "-    Note that all build rules expanded in the command will be automatically",
                "-    considered to be dependencies of the <code>genrule()</code>.",
                "   {/param}",
                "@@ -90,5 +90,6 @@",
                "   {param desc}",
                "-  The platform-specific version of parameter <code>cmd</code>.",
                "-  It runs on UNIX in which <code>bash</code> is installed and has a higher priority than",
                "-  {sp}<code>cmd</code>. Command specified will be run with <code>/bin/bash -c</code>.",
                "+  A platform-specific version of the shell command parameter <code>cmd</code>.",
                "+  It runs on Linux and UNIX systems&mdash;including OSX&mdash;on which <code>bash</code> is installed. ",
                "+  It has a higher priority than {sp}<code>cmd</code>. The <code>bash</code> argument is run with <code>/bin/bash -c</code>.",
                "+  It has access to the same set of macros and variables as the <code>cmd</code> argument.",
                "   {/param}",
                "@@ -103,4 +104,5 @@",
                "   {param desc}",
                "-  The platform-specific version of parameter <code>cmd</code>. It runs on Windows and has a higher",
                "-  {sp}priority than <code>cmd</code>. Command specified will be run with <code>cmd.exe /c</code>.",
                "+  A platform-specific version of the shell command parameter <code>cmd</code>. It runs on Windows and has a higher",
                "+  {sp}priority than <code>cmd</code>. The <code>cmd_exe</code> argument is run with <code>cmd.exe /c</code>.",
                "+  It has access to the same set of macros and variables as the <code>cmd</code> argument.",
                "   {/param}",
                "diff --git a/docs/__table_of_contents.soy b/docs/__table_of_contents.soy",
                "index 4a56543e80..6364382ffe 100644",
                "--- a/docs/__table_of_contents.soy",
                "+++ b/docs/__table_of_contents.soy",
                "@@ -41,2 +41,3 @@",
                "             'cxx_library',",
                "+            'cxx_genrule',",
                "             'cxx_precompiled_header',",
                "@@ -444,2 +445,2 @@",
                "   </ul>",
                "-{/template}",
                "\\ No newline at end of file",
                "+{/template}",
                "diff --git a/docs/rule/cxx_genrule.soy b/docs/rule/cxx_genrule.soy",
                "new file mode 100644",
                "index 0000000000..37488df3a2",
                "--- /dev/null",
                "+++ b/docs/rule/cxx_genrule.soy",
                "@@ -0,0 +1,239 @@",
                "+{namespace cxx_genrule}",
                "+",
                "+/***/",
                "+{template .soyweb}",
                "+  {call buck.page}",
                "+    {param title: 'cxx_genrule()' /}",
                "+    {param navid: 'rule_cxx_genrule' /}",
                "+    {param prettify: true /}",
                "+    {param description}",
                "+      A rule that is used to post-process a C or C++ executable or library.",
                "+    {/param}",
                "+    {param content}",
                "+",
                "+{call buck.rule}",
                "+{param status: 'FROZEN' /}",
                "+{param overview}",
                "+<p>",
                "+A <code>cxx_genrule()</code> is used to post-process a C or C++ executable or library.",
                "+A <code>cxx_genrule()</code> exposes information about the tools and flags that were used during compilation and linking.",
                "+A {sp}<code>cxx_genrule()</code> can be an input to another {sp}<code>cxx_genrule()</code>.",
                "+</p>",
                "+",
                "+<p>",
                "+Note that if you specify the <code>cxx_genrule</code> as a command-line",
                "+target to <code>buck build</code>, you must include a platform flavor. For example:",
                "+</p>",
                "+",
                "+<pre>buck build :cxx_gr_name#iphonesimulator-x86_64</pre>",
                "+",
                "+{/param}",
                "+",
                "+{param args}",
                "+",
                "+{call buck.arg}",
                "+  {param name: 'name' /}",
                "+  {param desc}",
                "+  The name of the rule.",
                "+  {/param}",
                "+{/call}",
                "+",
                "+{call genrule_common.srcs_arg /}",
                "+",
                "+{call buck.arg}",
                "+  {param name: 'cmd' /}",
                "+  {param default: 'None' /}",
                "+  {param desc}",
                "+  The shell command to run to generate the output file. It is the fallback of <code>bash</code>",
                "+  {sp}and <code>cmd_exe</code>. The shell command can access information",
                "+  about the build through a set of <em>macros</em>, <em>parameterized",
                "+  macros</em>, and <em>variables</em>.",
                "+",
                "+    <h4>Macros</h4>",
                "+",
                "+    <p>",
                "+    The following macros are available to the shell command and are ",
                "+    accessed using the following syntax.",
                "+    </p>",
                "+",
                "+    <pre>$(&lt;macro&gt;)</pre>",
                "+",
                "+    <p>",
                "+    Example:",
                "+    </p>",
                "+",
                "+    <pre>$(cc)</pre>",
                "+",
                "+    <dl>",
                "+",
                "+      <dt><code>$(cc)</code></dt>",
                "+      <dd>Path to the C compiler.</dd>",
                "+      <br/>",
                "+",
                "+      <dt><code>$(cxx)</code></dt>",
                "+      <dd>Path to the C++ compiler.</dd>",
                "+      <br/>",
                "+",
                "+      <dt><code>$(cflags)</code></dt>",
                "+      <dd>Flags passed to the C compiler.</dd>",
                "+      <br/>",
                "+",
                "+      <dt><code>$(cppflags)</code></dt>",
                "+      <dd>Flags passed to the C preprocessor.</dd>",
                "+      <br/>",
                "+",
                "+      <dt><code>$(cxxflags)</code></dt>",
                "+      <dd>Flags passed to the C++ compiler.</dd>",
                "+      <br/>",
                "+",
                "+      <dt><code>$(ld)</code></dt>",
                "+      <dd>Path to the linker.</dd>",
                "+      <br/>",
                "+",
                "+      <dt><code>$(ldflags-pic)</code></dt>",
                "+      <dd>Flags passed to the linker for binaries that use",
                "+      position-independent code (PIC).</dd>",
                "+      <br/>",
                "+",
                "+      <dt><code>$(ldflags-pic-filter &lt;pattern&gt;)</code></dt>",
                "+      <dd>Flags passed to the linker for binaries that use position-independent code (PIC). ",
                "+      Use the <em>pattern</em> parameter to specify a regular expression that matches the build targets that use these flags.",
                "+      </dd>",
                "+      <br/>",
                "+",
                "+      <dt><code>$(ldflags-shared)</code></dt>",
                "+      <dd>Flags passed to the linker for shared libraries, such as dynamic-link libraries (DLLs).</dd>",
                "+      <br/>",
                "+",
                "+      <dt><code>$(ldflags-shared-filter &lt;pattern&gt;)</code></dt>",
                "+      <dd>Flags passed to the linker for shared libraries, such as dynamic-link libraries (DLLs). ",
                "+      Use the <em>pattern</em> parameter to specify a regular expression that matches the build targets that use these flags.",
                "+      </dd>",
                "+      <br/>",
                "+",
                "+      <dt><code>$(ldflags-static)</code></dt>",
                "+      <dd>Flags passed to the linker for statically-linked libraries.</dd>",
                "+      <br/>",
                "+",
                "+      <dt><code>$(ldflags-static-filter &lt;pattern&gt;)</code></dt>",
                "+      <dd>Flags passed to the linker for statically-linked libraries. ",
                "+      Use the <em>pattern</em> parameter to specify a regular expression that matches the build targets that use these flags.",
                "+      </dd>",
                "+      <br/>",
                "+",
                "+      <dt><code>$(platform-name)</code></dt>",
                "+      <dd>The platform flavor with which this <code>cxx_genrule</code> was specified.",
                "+      </dd>",
                "+",
                "+    </dl>",
                "+",
                "+    <h4>Parameterized Macros</h4>",
                "+",
                "+    <p>",
                "+    It is also possible to expand references to other rules within the",
                "+    shell command, using a subset of the builtin {call buck.string_parameter_macros /}.  ",
                "+    Note that all build rules expanded in the command will be automatically ",
                "+    considered to be dependencies of the <code>genrule()</code>.",
                "+    </p>",
                "+",
                "+    <dl>",
                "+",
                "+      <dt><code>$(exe /&#x2F;path/to:target)</code></dt>",
                "+",
                "+      <dd>Expands to the commands necessary to run the executable",
                "+      generated by the specified build rule. For a C++ executable, this",
                "+      will typically just be the name of the output executable itself,",
                "+      such as <code>main</code>. If the specified build rule does not generate an",
                "+      executable output, an exception will be thrown and the build will",
                "+      fail.</dd>",
                "+",
                "+      <br/>",
                "+",
                "+      <dt><code>$(location /&#x2F;path/to:target)</code></dt>",
                "+",
                "+      <dd>Expands to the path of the output of the build rule. This",
                "+      means that you can refer to these without needing to be aware of",
                "+      how Buck is storing data on the disk mid-build.</dd>",
                "+",
                "+    </dl>",
                "+",
                "+    <h4>Variables</h4>",
                "+",
                "+    <p>",
                "+    Finally, Buck adds the following variables to the environment in",
                "+    which the shell command runs. They are accessed using the following syntax.",
                "+    Note the use of braces rather than parentheses.",
                "+    </p>",
                "+",
                "+    <pre>$&#x7B;&lt;variable&gt;&#x7D;</pre>",
                "+",
                "+    <p>",
                "+    Example:",
                "+    </p>",
                "+",
                "+    <pre>$&#x7B;SRCS&#x7D;</pre>",
                "+",
                "+    <dl>",
                "+      <dt><code>$&#x7B;SRCS&#x7D;</code><dt>",
                "+      <dd>A string expansion of the <code>srcs</code> argument delimited by ",
                "+      the <code>environment_expansion_separator</code> argument where each element",
                "+      of <code>srcs</code> will be translated into an absolute path.</dd>",
                "+      <br/>",
                "+",
                "+      <dt><code>$&#x7B;SRCDIR&#x7D;</code><dt>",
                "+      <dd>The absolute path to the to which sources are copied",
                "+      prior to running the command.</dd>",
                "+      <br/>",
                "+",
                "+      <dt><code>$&#x7B;OUT&#x7D;</code></dt>",
                "+      <dd>The output file for the <code>genrule()</code>. The file",
                "+      specified by this variable must always be written by this",
                "+      command. If not, the execution of this rule will be considered a",
                "+      failure, halting the build process.</dd>",
                "+      <br/>",
                "+",
                "+      <dt><code>$&#x7B;TMP&#x7D;</code></dt>",
                "+      <dd>A temporary directory which can be used for intermediate results and will not be",
                "+      bundled into the output.</dd>",
                "+    </dl>",
                "+",
                "+  {/param}",
                "+{/call}",
                "+",
                "+{call genrule_common.bash_arg /}",
                "+",
                "+{call genrule_common.cmd_exe_arg /}",
                "+",
                "+{call genrule_common.type_arg /}",
                "+",
                "+{call genrule_common.out_arg /}",
                "+",
                "+{call genrule_common.environment_expansion_separator /}",
                "+",
                "+{call buck.arg}",
                "+  {param name: 'enable_sandbox' /}",
                "+  {param default : 'False' /}",
                "+  {param desc}",
                "+  Whether this target should be executed in a sandbox or not.",
                "+  {/param}",
                "+{/call}",
                "+",
                "+{call buck.arg}",
                "+  {param name: 'executable' /}",
                "+  {param default : 'False' /}",
                "+  {param desc}",
                "+  Whether the output of the genrule is itself executable. Marking an output as",
                "+  executable makes <code>buck run</code> and <code>$(exe ...)</code> macro",
                "+  expansion work with this target.",
                "+  {/param}",
                "+{/call}",
                "+",
                "+{call buck.tests_arg /}",
                "+",
                "+{/param} // close args",
                "+",
                "+{/call} // close buck.rule",
                "+",
                "+    {/param}",
                "+  {/call}",
                "+{/template}"
            ],
            "changed_files": [
                "docs/__genrule_common.soy",
                "docs/__table_of_contents.soy",
                "docs/rule/cxx_genrule.soy"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "84799ac10451fdcb6856401fe1d906f273114473",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521480382,
            "hunks": 3,
            "message": "E2E mobile template: proguard config, export_file Summary: ```                                           android_binary            apple_package                                                  +                       +       +------------+-------------+---------------+                       |       v            v             v               v                       v *export_file*   manifest     keystore     android_library           apple_bundle                    +                             +                       +                    |                    +--------+--------+              |                    v                    v                 v              v                 genrule          android_resource    cxx_library    apple_binary                    +                                      +              +    +---------------+                                      +--------------+    v               v                                      v              v genrule      python_binary                           cxx_library    apple_resource ``` Test Plan: Ran builds locally Reviewed By: styurin fbshipit-source-id: bc49c44",
            "diff": [
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/BUCK.fixture",
                "index 8b339b583b..938f3a34a7 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/BUCK.fixture",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/BUCK.fixture",
                "@@ -10,2 +10,3 @@ android_binary(",
                "     manifest = \"//android/manifest:generated_manifest\",",
                "+    proguard_config = \"//android/configs:dont_obfuscate\",",
                "     deps = [",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/configs/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/configs/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..652be1e1bb",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/configs/BUCK.fixture",
                "@@ -0,0 +1,13 @@",
                "+# Copyright 2018-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+export_file(",
                "+    name = \"dont_obfuscate\",",
                "+    src = \"dont_obfuscate.pro\",",
                "+    visibility = [",
                "+        \"PUBLIC\",",
                "+    ],",
                "+)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/configs/dont_obfuscate.pro b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/configs/dont_obfuscate.pro",
                "new file mode 100644",
                "index 0000000000..794dc22ed9",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/configs/dont_obfuscate.pro",
                "@@ -0,0 +1,5 @@",
                "+-dontobfuscate",
                "+",
                "+-keep class com.** { *; }",
                "+-keep class javax.** { *; }",
                "+-keep class org.** { *; }",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/configs/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/android/configs/dont_obfuscate.pro"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a9f149a9a2698b382153a0196562943a72b5dc41",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521763046,
            "hunks": 5,
            "message": "Make build language explicit for functions section. Summary: Currently `Python DSL` section is not labeled at all and Skylark section looks ugly. This change make it look nicer and adds a `Python DSL` label. Test Plan: CI Reviewed By: sbalabanov fbshipit-source-id: 6a792cd",
            "diff": [
                "diff --git a/docs/__table_of_contents.soy b/docs/__table_of_contents.soy",
                "index 334e3a38f5..fe92cd667d 100644",
                "--- a/docs/__table_of_contents.soy",
                "+++ b/docs/__table_of_contents.soy",
                "@@ -351,2 +351,3 @@",
                "   <ul>",
                "+    <li><strong>Python DSL</strong></li>",
                "     {foreach $function in [",
                "diff --git a/docs/skylark/generated/toc.soy b/docs/skylark/generated/toc.soy",
                "index 3996c36868..c24018a544 100644",
                "--- a/docs/skylark/generated/toc.soy",
                "+++ b/docs/skylark/generated/toc.soy",
                "@@ -7,4 +7,4 @@",
                " {template .tableOfContents}",
                "-  <h4>Skylark</h4>",
                "   <ul>",
                "+      <li><strong>Skylark</strong></li>",
                "                 {call navigation.link}",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg",
                "index 9c2e4e0240..f5224923b4 100644",
                "--- a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg",
                "@@ -7,4 +7,4 @@",
                " {template .tableOfContents}",
                "-  <h4>Skylark</h4>",
                "   <ul>",
                "+      <li><strong>Skylark</strong></li>",
                "       %signatures :{ signature |"
            ],
            "changed_files": [
                "docs/__table_of_contents.soy",
                "docs/skylark/generated/toc.soy",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3b29604adcbcdb45ac56abadf9fe7965b11b3c99",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521614416,
            "hunks": 41,
            "message": "Add generated Skylark documentation. Summary: It's generated by running a documentation generator, but committed in order to make sure that everything is reviewed and is easier to publish to the official website. Test Plan: CI + manual tests Reviewed By: philipjameson fbshipit-source-id: c073e66",
            "diff": [
                "diff --git a/docs/__common.soy b/docs/__common.soy",
                "index 43f44686dc..5a11b9cdf5 100644",
                "--- a/docs/__common.soy",
                "+++ b/docs/__common.soy",
                "@@ -162,22 +162,2 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "-/**",
                "- * @param currentnavid The navigation id of the loaded page",
                "- * @param page The filename of the target page",
                "- * @param folder href folder target",
                "- * @param text Navigation text",
                "- */",
                "-{template .navigationLink}",
                "-  {let $targetnavid}",
                "-    {$folder}_{$page}",
                "-  {/let}",
                "-  {let $classname}",
                "-    {if $targetnavid == $currentnavid}",
                "-      navActiveItem",
                "-    {/if}",
                "-  {/let}",
                "-  <li{if isNonnull($classname)} class=\"{$classname}\"{/if}>",
                "-    <a href=\"{ROOT}{$folder}/{$page}.html\">{$text}</a>",
                "-  </li>",
                "-{/template}",
                "-",
                " /**",
                "@@ -193,3 +173,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "         {/let}",
                "-        {call .navigationLink}",
                "+        {call navigation.link}",
                "           {param currentnavid: $currentnavid /}",
                "@@ -318,3 +298,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "   <ul>",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -324,3 +304,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -330,3 +310,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -336,3 +316,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -343,3 +323,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -349,3 +329,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -358,3 +338,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "   <ul>",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -364,3 +344,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -370,3 +350,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -376,3 +356,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -382,3 +362,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -388,3 +368,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -397,3 +377,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "   <ul>",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -403,3 +383,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -409,3 +389,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -415,3 +395,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -421,3 +401,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -427,3 +407,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -433,3 +413,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -439,3 +419,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -445,3 +425,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -451,3 +431,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -457,3 +437,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -567,3 +547,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "       {/let}",
                "-      {call .navigationLink}",
                "+      {call navigation.link}",
                "         {param currentnavid: $navid /}",
                "@@ -574,3 +554,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/foreach}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -581,5 +561,8 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "   </ul>",
                "+  {call skylark.tableOfContents}",
                "+    {param navid: $navid /}",
                "+  {/call}",
                "   <h3>Commands</h3>",
                "   <ul>",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -611,3 +594,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "       {/let}",
                "-      {call .navigationLink}",
                "+      {call navigation.link}",
                "         {param currentnavid: $navid /}",
                "@@ -618,3 +601,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/foreach}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -627,3 +610,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "   <ul>",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "@@ -633,3 +616,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                "     {/call}",
                "-    {call .navigationLink}",
                "+    {call navigation.link}",
                "       {param currentnavid: $navid /}",
                "diff --git a/docs/__navigation.soy b/docs/__navigation.soy",
                "new file mode 100644",
                "index 0000000000..f3be349ec9",
                "--- /dev/null",
                "+++ b/docs/__navigation.soy",
                "@@ -0,0 +1,21 @@",
                "+{namespace navigation}",
                "+",
                "+/**",
                "+ * @param currentnavid The navigation id of the loaded page",
                "+ * @param page The filename of the target page",
                "+ * @param folder href folder target",
                "+ * @param text Navigation text",
                "+ */",
                "+{template .link}",
                "+    {let $targetnavid}",
                "+        {$folder}_{$page}",
                "+    {/let}",
                "+    {let $classname}",
                "+        {if $targetnavid == $currentnavid}",
                "+          navActiveItem",
                "+        {/if}",
                "+    {/let}",
                "+    <li{if isNonnull($classname)} class=\"{$classname}\"{/if}>",
                "+      <a href=\"{ROOT}{$folder}/{$page}.html\">{$text}</a>",
                "+    </li>",
                "+{/template}",
                "diff --git a/docs/skylark/generated/glob.soy b/docs/skylark/generated/glob.soy",
                "new file mode 100644",
                "index 0000000000..54fbcad226",
                "--- /dev/null",
                "+++ b/docs/skylark/generated/glob.soy",
                "@@ -0,0 +1,45 @@",
                "+{namespace buck.skylark.glob}",
                "+",
                "+/***/",
                "+{template .soyweb}",
                "+  {call buck.page}",
                "+    {param title: 'glob()' /}",
                "+    {param navid: 'skylark/generated_glob' /}",
                "+    {param prettify: true /}",
                "+    {param description}",
                "+      Returns a list of files that match glob search pattern.",
                "+    {/param}",
                "+    {param content}",
                "+      {call buck.function}",
                "+        {param status: 'UNFROZEN' /}",
                "+        {param overview}",
                "+          Returns a list of files that match glob search pattern.",
                "+        {/param}",
                "+        {param args}",
                "+                      {call buck.functionArg}",
                "+                        {param name : 'include' /}",
                "+                        {param desc }",
                "+                          a list of strings specifying patterns of files to include.",
                "+                        {/param}",
                "+                        {param default : 'None' /}",
                "+                      {/call}",
                "+                      {call buck.functionArg}",
                "+                        {param name : 'exclude' /}",
                "+                        {param desc }",
                "+                          a list of strings specifying patterns of files to exclude.",
                "+                        {/param}",
                "+                        {param default : '[]' /}",
                "+                      {/call}",
                "+                      {call buck.functionArg}",
                "+                        {param name : 'exclude_directories' /}",
                "+                        {param desc }",
                "+                          True indicates directories should not be matched.",
                "+                        {/param}",
                "+                        {param default : 'True' /}",
                "+                      {/call}",
                "+",
                "+        {/param}",
                "+      {/call}",
                "+    {/param} // content",
                "+  {/call}",
                "+{/template}",
                "diff --git a/docs/skylark/generated/host_info.soy b/docs/skylark/generated/host_info.soy",
                "new file mode 100644",
                "index 0000000000..97bfd70c91",
                "--- /dev/null",
                "+++ b/docs/skylark/generated/host_info.soy",
                "@@ -0,0 +1,75 @@",
                "+{namespace buck.skylark.host_info}",
                "+",
                "+/***/",
                "+{template .soyweb}",
                "+  {call buck.page}",
                "+    {param title: 'host_info()' /}",
                "+    {param navid: 'skylark/generated_host_info' /}",
                "+    {param prettify: true /}",
                "+    {param description}",
                "+      The host_info() function is used to get processor and OS information about the host machine",
                "+      The <code>host_info()</code> function is used to get the current OS and processor architecture on the host. This will likely change as better cross compilation tooling comes to Buck.",
                "+          <pre class=\"prettyprint lang-py\">",
                "+        struct(",
                "+            os=struct(",
                "+                is_linux=True|False,",
                "+                is_macos=True|False,",
                "+                is_windows=True|False,",
                "+                is_freebsd=True|False,",
                "+                is_unknown=True|False,",
                "+            ),",
                "+            arch=struct(",
                "+                is_aarch64=True|False,",
                "+                is_arm=True|False,",
                "+                is_armeb=True|False,",
                "+                is_i386=True|False,",
                "+                is_mips=True|False,",
                "+                is_mips64=True|False,",
                "+                is_mipsel=True|False,",
                "+                is_mipsel64=True|False,",
                "+                is_powerpc=True|False,",
                "+                is_ppc64=True|False,",
                "+                is_unknown=True|False,",
                "+                is_x86_64=True|False,",
                "+            ),",
                "+        )</pre>",
                "+",
                "+    {/param}",
                "+    {param content}",
                "+      {call buck.function}",
                "+        {param status: 'UNFROZEN' /}",
                "+        {param overview}",
                "+          The host_info() function is used to get processor and OS information about the host machine",
                "+          The <code>host_info()</code> function is used to get the current OS and processor architecture on the host. This will likely change as better cross compilation tooling comes to Buck.",
                "+              <pre class=\"prettyprint lang-py\">",
                "+            struct(",
                "+                os=struct(",
                "+                    is_linux=True|False,",
                "+                    is_macos=True|False,",
                "+                    is_windows=True|False,",
                "+                    is_freebsd=True|False,",
                "+                    is_unknown=True|False,",
                "+                ),",
                "+                arch=struct(",
                "+                    is_aarch64=True|False,",
                "+                    is_arm=True|False,",
                "+                    is_armeb=True|False,",
                "+                    is_i386=True|False,",
                "+                    is_mips=True|False,",
                "+                    is_mips64=True|False,",
                "+                    is_mipsel=True|False,",
                "+                    is_mipsel64=True|False,",
                "+                    is_powerpc=True|False,",
                "+                    is_ppc64=True|False,",
                "+                    is_unknown=True|False,",
                "+                    is_x86_64=True|False,",
                "+                ),",
                "+            )</pre>",
                "+",
                "+        {/param}",
                "+        {param args}",
                "+        {/param}",
                "+      {/call}",
                "+    {/param} // content",
                "+  {/call}",
                "+{/template}",
                "diff --git a/docs/skylark/generated/package_name.soy b/docs/skylark/generated/package_name.soy",
                "new file mode 100644",
                "index 0000000000..faab15da1c",
                "--- /dev/null",
                "+++ b/docs/skylark/generated/package_name.soy",
                "@@ -0,0 +1,23 @@",
                "+{namespace buck.skylark.package_name}",
                "+",
                "+/***/",
                "+{template .soyweb}",
                "+  {call buck.page}",
                "+    {param title: 'package_name()' /}",
                "+    {param navid: 'skylark/generated_package_name' /}",
                "+    {param prettify: true /}",
                "+    {param description}",
                "+      The name of the package being evaluated. For example, in the build file <code>some/package/BUCK</code>, its value will be <code>some/package</code>. If the BUCK file calls a function defined in a .bzl file, <code>package_name()</code> will match the caller BUCK file package. This function is equivalent to the deprecated variable <code>PACKAGE_NAME</code>.",
                "+    {/param}",
                "+    {param content}",
                "+      {call buck.function}",
                "+        {param status: 'UNFROZEN' /}",
                "+        {param overview}",
                "+          The name of the package being evaluated. For example, in the build file <code>some/package/BUCK</code>, its value will be <code>some/package</code>. If the BUCK file calls a function defined in a .bzl file, <code>package_name()</code> will match the caller BUCK file package. This function is equivalent to the deprecated variable <code>PACKAGE_NAME</code>.",
                "+        {/param}",
                "+        {param args}",
                "+        {/param}",
                "+      {/call}",
                "+    {/param} // content",
                "+  {/call}",
                "+{/template}",
                "diff --git a/docs/skylark/generated/read_config.soy b/docs/skylark/generated/read_config.soy",
                "new file mode 100644",
                "index 0000000000..0522e2780e",
                "--- /dev/null",
                "+++ b/docs/skylark/generated/read_config.soy",
                "@@ -0,0 +1,45 @@",
                "+{namespace buck.skylark.read_config}",
                "+",
                "+/***/",
                "+{template .soyweb}",
                "+  {call buck.page}",
                "+    {param title: 'read_config()' /}",
                "+    {param navid: 'skylark/generated_read_config' /}",
                "+    {param prettify: true /}",
                "+    {param description}",
                "+      Returns a list of files that match glob search pattern.",
                "+    {/param}",
                "+    {param content}",
                "+      {call buck.function}",
                "+        {param status: 'UNFROZEN' /}",
                "+        {param overview}",
                "+          Returns a list of files that match glob search pattern.",
                "+        {/param}",
                "+        {param args}",
                "+                      {call buck.functionArg}",
                "+                        {param name : 'section' /}",
                "+                        {param desc }",
                "+                          the name of the .buckconfig section with the desired value.",
                "+                        {/param}",
                "+                        {param default : 'None' /}",
                "+                      {/call}",
                "+                      {call buck.functionArg}",
                "+                        {param name : 'field' /}",
                "+                        {param desc }",
                "+                          the name of the .buckconfig field with the desired value.",
                "+                        {/param}",
                "+                        {param default : 'None' /}",
                "+                      {/call}",
                "+                      {call buck.functionArg}",
                "+                        {param name : 'defaultValue' /}",
                "+                        {param desc }",
                "+                          the value to return if the desired value is not set in the .buckconfig.",
                "+                        {/param}",
                "+                        {param default : 'None' /}",
                "+                      {/call}",
                "+",
                "+        {/param}",
                "+      {/call}",
                "+    {/param} // content",
                "+  {/call}",
                "+{/template}",
                "diff --git a/docs/skylark/generated/struct.soy b/docs/skylark/generated/struct.soy",
                "new file mode 100644",
                "index 0000000000..8c1792d9df",
                "--- /dev/null",
                "+++ b/docs/skylark/generated/struct.soy",
                "@@ -0,0 +1,25 @@",
                "+{namespace buck.skylark.struct}",
                "+",
                "+/***/",
                "+{template .soyweb}",
                "+  {call buck.page}",
                "+    {param title: 'struct()' /}",
                "+    {param navid: 'skylark/generated_struct' /}",
                "+    {param prettify: true /}",
                "+    {param description}",
                "+      Creates an immutable struct using the keyword arguments as attributes. It is used to group multiple values and/or functions together. Example:<br><pre class=\"language-python\">s = struct(x = 2, y = 3)",
                "+      return s.x + getattr(s, \"y\")  # returns 5</pre>",
                "+    {/param}",
                "+    {param content}",
                "+      {call buck.function}",
                "+        {param status: 'UNFROZEN' /}",
                "+        {param overview}",
                "+          Creates an immutable struct using the keyword arguments as attributes. It is used to group multiple values and/or functions together. Example:<br><pre class=\"language-python\">s = struct(x = 2, y = 3)",
                "+          return s.x + getattr(s, \"y\")  # returns 5</pre>",
                "+        {/param}",
                "+        {param args}",
                "+        {/param}",
                "+      {/call}",
                "+    {/param} // content",
                "+  {/call}",
                "+{/template}",
                "diff --git a/docs/skylark/generated/toc.soy b/docs/skylark/generated/toc.soy",
                "new file mode 100644",
                "index 0000000000..3996c36868",
                "--- /dev/null",
                "+++ b/docs/skylark/generated/toc.soy",
                "@@ -0,0 +1,42 @@",
                "+{namespace skylark}",
                "+",
                "+/**",
                "+ * Table of contents for the Skylark functions section.",
                "+ * @param navid The current page's navigation id.",
                "+ */",
                "+{template .tableOfContents}",
                "+  <h4>Skylark</h4>",
                "+  <ul>",
                "+                {call navigation.link}",
                "+                    {param currentnavid: $navid /}",
                "+                    {param folder: 'skylark/generated' /}",
                "+                    {param page: 'glob' /}",
                "+                    {param text: 'glob()' /}",
                "+                {/call}",
                "+                {call navigation.link}",
                "+                    {param currentnavid: $navid /}",
                "+                    {param folder: 'skylark/generated' /}",
                "+                    {param page: 'host_info' /}",
                "+                    {param text: 'host_info()' /}",
                "+                {/call}",
                "+                {call navigation.link}",
                "+                    {param currentnavid: $navid /}",
                "+                    {param folder: 'skylark/generated' /}",
                "+                    {param page: 'read_config' /}",
                "+                    {param text: 'read_config()' /}",
                "+                {/call}",
                "+                {call navigation.link}",
                "+                    {param currentnavid: $navid /}",
                "+                    {param folder: 'skylark/generated' /}",
                "+                    {param page: 'struct' /}",
                "+                    {param text: 'struct()' /}",
                "+                {/call}",
                "+                {call navigation.link}",
                "+                    {param currentnavid: $navid /}",
                "+                    {param folder: 'skylark/generated' /}",
                "+                    {param page: 'package_name' /}",
                "+                    {param text: 'package_name()' /}",
                "+                {/call}",
                "+",
                "+  </ul>",
                "+{/template}",
                "\\ No newline at end of file",
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg",
                "index ea379f53d6..9c2e4e0240 100644",
                "--- a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg",
                "@@ -10,3 +10,3 @@",
                "       %signatures :{ signature |",
                "-          %openCurly%call buck.navigationLink%closeCurly%",
                "+          %openCurly%call navigation.link%closeCurly%",
                "               %openCurly%param currentnavid: $navid /%closeCurly%"
            ],
            "changed_files": [
                "docs/__common.soy",
                "docs/__navigation.soy",
                "docs/skylark/generated/glob.soy",
                "docs/skylark/generated/host_info.soy",
                "docs/skylark/generated/package_name.soy",
                "docs/skylark/generated/read_config.soy",
                "docs/skylark/generated/struct.soy",
                "docs/skylark/generated/toc.soy",
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/table_of_contents_template.stg"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1323e0f7dd73eec84f81c2dbbbc249d75a0d8205",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521698095,
            "hunks": 4,
            "message": "iOS template: genrule the plist Summary: ```                                           android_binary                                                                        apple_package                                                  +                                                                                   +       +------------+-------------+---------------+                                                                                   |       v            v             v               v                                                                                   v export_file     manifest     keystore     android_library                                                                       apple_bundle                    +                             +                                                                                   +                    |                    +--------+---------+------------------+---------------------+-----------------+              +-----------------------------------------+                    v                    v                  v                  v                     v                 v              v                                         v                 genrule          android_resource   android_library      prebuilt_jar     android_build_config   cxx_library    apple_binary                           *genrule (plist)*                    +                                       +                  +                                       +              +                                         +    +---------------+                                       |                  |                                       +------------------------------------+                   |    v               v                                       v                  v                                       v              v                     v                   v genrule      python_binary                      android_prebuilt_aar       genrule                               cxx_library    apple_resource     apple_asset_library  *python_binary*                                                                               +                                                                               |                                                                               v                                                                         python_binary ``` Test Plan: Built locally Reviewed By: bobyangyf fbshipit-source-id: a438c63",
            "diff": [
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture",
                "index e649ca8dd0..2cdd0a574e 100644",
                "--- a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture",
                "@@ -24,3 +24,3 @@ apple_bundle(",
                "     extension = \"app\",",
                "-    info_plist = \"Info.plist\",",
                "+    info_plist = \"//ios/plist:generated_plist\",",
                " )",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/plist/BUCK.fixture b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/plist/BUCK.fixture",
                "new file mode 100644",
                "index 0000000000..2edd8febd4",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/plist/BUCK.fixture",
                "@@ -0,0 +1,22 @@",
                "+# Copyright 2018-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+python_binary(",
                "+    name = \"py_cat\",",
                "+    main = \"py_cat.py\",",
                "+)",
                "+",
                "+genrule(",
                "+    name = \"generated_plist\",",
                "+    srcs = [",
                "+        \"Info.plist\",",
                "+    ],",
                "+    out = \"GeneratedInfo.plist\",",
                "+    # We don't just use \"cat\" so we can use a python_binary",
                "+    cmd = \"$(exe :py_cat) $SRCS > $OUT\",",
                "+    cmd_exe = \"$(exe :py_cat) %SRCS% > $OUT\",",
                "+    visibility = [\"PUBLIC\"],",
                "+)",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/plist/Info.plist b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/plist/Info.plist",
                "new file mode 100644",
                "index 0000000000..00fcae1eed",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/plist/Info.plist",
                "@@ -0,0 +1,80 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">",
                "+<plist version=\"1.0\">",
                "+<dict>",
                "+\t<key>CFBundleDevelopmentRegion</key>",
                "+\t<string>en</string>",
                "+  <key>CFBundleDisplayName</key>",
                "+  <string>Hello Buck!</string>",
                "+\t<key>CFBundleExecutable</key>",
                "+\t<string>BuckDemoApp</string>",
                "+\t<key>CFBundleIdentifier</key>",
                "+\t<string>com.facebook.BuckDemoApp</string>",
                "+\t<key>CFBundleInfoDictionaryVersion</key>",
                "+\t<string>6.0</string>",
                "+\t<key>CFBundleName</key>",
                "+\t<string>BuckDemoApp</string>",
                "+\t<key>CFBundlePackageType</key>",
                "+\t<string>APPL</string>",
                "+\t<key>CFBundleShortVersionString</key>",
                "+\t<string>1.0</string>",
                "+\t<key>CFBundleSignature</key>",
                "+\t<string>????</string>",
                "+\t<key>CFBundleVersion</key>",
                "+\t<string>1</string>",
                "+\t<key>LSRequiresIPhoneOS</key>",
                "+\t<true/>",
                "+        <key>UILaunchImages</key>",
                "+        <array>",
                "+                <dict>",
                "+                        <key>UILaunchImageMinimumOSVersion</key>",
                "+                        <string>8.0</string>",
                "+                        <key>UILaunchImageName</key>",
                "+                        <string>Default-568h</string>",
                "+                        <key>UILaunchImageOrientation</key>",
                "+                        <string>Portrait</string>",
                "+                        <key>UILaunchImageSize</key>",
                "+                        <string>{320, 568}</string>",
                "+                </dict>",
                "+                <dict>",
                "+                        <key>UILaunchImageMinimumOSVersion</key>",
                "+                        <string>8.0</string>",
                "+                        <key>UILaunchImageName</key>",
                "+                        <string>Default-667h</string>",
                "+                        <key>UILaunchImageOrientation</key>",
                "+                        <string>Portrait</string>",
                "+                        <key>UILaunchImageSize</key>",
                "+                        <string>{375, 667}</string>",
                "+                </dict>",
                "+                <dict>",
                "+                        <key>UILaunchImageMinimumOSVersion</key>",
                "+                        <string>8.0</string>",
                "+                        <key>UILaunchImageName</key>",
                "+                        <string>Default-736h</string>",
                "+                        <key>UILaunchImageOrientation</key>",
                "+                        <string>Portrait</string>",
                "+                        <key>UILaunchImageSize</key>",
                "+                        <string>{414, 736}</string>",
                "+                </dict>",
                "+        </array>",
                "+        <key>UIPrerenderedIcon</key>",
                "+        <true/>",
                "+\t<key>UIRequiredDeviceCapabilities</key>",
                "+\t<array>",
                "+\t\t<string>armv7</string>",
                "+\t</array>",
                "+\t<key>UISupportedInterfaceOrientations</key>",
                "+\t<array>",
                "+\t\t<string>UIInterfaceOrientationPortrait</string>",
                "+\t\t<string>UIInterfaceOrientationLandscapeLeft</string>",
                "+\t\t<string>UIInterfaceOrientationLandscapeRight</string>",
                "+\t</array>",
                "+\t<key>UISupportedInterfaceOrientations~ipad</key>",
                "+\t<array>",
                "+\t\t<string>UIInterfaceOrientationPortrait</string>",
                "+\t\t<string>UIInterfaceOrientationPortraitUpsideDown</string>",
                "+\t\t<string>UIInterfaceOrientationLandscapeLeft</string>",
                "+\t\t<string>UIInterfaceOrientationLandscapeRight</string>",
                "+\t</array>",
                "+</dict>",
                "+</plist>",
                "diff --git a/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/plist/py_cat.py b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/plist/py_cat.py",
                "new file mode 100644",
                "index 0000000000..8296377f63",
                "--- /dev/null",
                "+++ b/test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/plist/py_cat.py",
                "@@ -0,0 +1,21 @@",
                "+# Copyright 2018-present, Facebook, Inc.",
                "+# All rights reserved.",
                "+#",
                "+# This source code is licensed under the license found in the",
                "+# LICENSE file in the root directory of this source tree.",
                "+",
                "+import argparse",
                "+",
                "+",
                "+def parse_file_name():",
                "+    parser = argparse.ArgumentParser(description=\"Outputs given file.\")",
                "+    parser.add_argument(\"file_name\", type=str, help=\"Name of file to output\")",
                "+    return parser.parse_args().file_name",
                "+",
                "+",
                "+def output_file(file_name):",
                "+    with open(file_name, mode='r') as f:",
                "+        print(f.read())",
                "+",
                "+if __name__ == \"__main__\":",
                "+    output_file(parse_file_name())"
            ],
            "changed_files": [
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/plist/BUCK.fixture",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/plist/Info.plist",
                "test/com/facebook/buck/testutil/endtoend/testdata/mobile/ios/plist/py_cat.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "b743af1ab56f09f5eeea47846749bfbdb28b4158",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522709779,
            "hunks": 1,
            "message": "Set tests attribute for src/com/facebook/apple:apple Reviewed By: ttsugriy fbshipit-source-id: 1160452",
            "diff": [
                "diff --git a/src/com/facebook/buck/apple/BUCK b/src/com/facebook/buck/apple/BUCK",
                "index 8d00716b70..5c6d6b6430 100644",
                "--- a/src/com/facebook/buck/apple/BUCK",
                "+++ b/src/com/facebook/buck/apple/BUCK",
                "@@ -11,2 +11,6 @@ java_library_with_plugins(",
                "     ],",
                "+    tests = [",
                "+        \"//test/com/facebook/buck/apple:apple\",",
                "+        \"//test/com/facebook/buck/apple:apple_test_integration\",",
                "+    ],",
                "     visibility = ["
            ],
            "changed_files": [
                "src/com/facebook/buck/apple/BUCK"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5fe77fdb17884149660d239ec9db6d7408dc089b",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522704111,
            "hunks": 1,
            "message": "Set tests attribute for rust target Reviewed By: jtorkkola fbshipit-source-id: 63006e7",
            "diff": [
                "diff --git a/src/com/facebook/buck/rust/BUCK b/src/com/facebook/buck/rust/BUCK",
                "index 4c590cf3ca..d7ba97d2fe 100644",
                "--- a/src/com/facebook/buck/rust/BUCK",
                "+++ b/src/com/facebook/buck/rust/BUCK",
                "@@ -41,2 +41,5 @@ buck_module(",
                "     ],",
                "+    tests = [",
                "+        \"//test/com/facebook/buck/rust:rust\",",
                "+    ],",
                "     visibility = ["
            ],
            "changed_files": [
                "src/com/facebook/buck/rust/BUCK"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1b9e83eb1f126fa0ecf4e57d1de49c87633dd42d",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522704106,
            "hunks": 2,
            "message": "Fix Rust tests Reviewed By: sbalabanov fbshipit-source-id: 7bc7f43",
            "diff": [
                "diff --git a/src/com/facebook/buck/python/BUCK b/src/com/facebook/buck/python/BUCK",
                "index dabfd27e4a..8560aada21 100644",
                "--- a/src/com/facebook/buck/python/BUCK",
                "+++ b/src/com/facebook/buck/python/BUCK",
                "@@ -21,8 +21,3 @@ java_library_with_plugins(",
                "         \"//src/com/facebook/buck/rules:types\",",
                "-        \"//test/com/facebook/buck/cxx:cxx\",",
                "-        \"//test/com/facebook/buck/cxx:testutil\",",
                "-        \"//test/com/facebook/buck/jvm/java:java\",",
                "-        \"//test/com/facebook/buck/lua:lua\",",
                "-        \"//test/com/facebook/buck/python:\",",
                "-        \"//test/com/facebook/buck/versions:\",",
                "+        \"//test/...\",",
                "     ],",
                "diff --git a/test/com/facebook/buck/rust/BUCK b/test/com/facebook/buck/rust/BUCK",
                "index 0cc181b499..0dc0e8d244 100644",
                "--- a/test/com/facebook/buck/rust/BUCK",
                "+++ b/test/com/facebook/buck/rust/BUCK",
                "@@ -197,2 +197,3 @@ standard_java_test(",
                "         \"//src/com/facebook/buck/parser/exceptions:exceptions\",",
                "+        \"//src/com/facebook/buck/python:rules\",",
                "         \"//src/com/facebook/buck/query:query\","
            ],
            "changed_files": [
                "src/com/facebook/buck/python/BUCK",
                "test/com/facebook/buck/rust/BUCK"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "23a3aafcfac599a4c2d610787ebf69017cc76967",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521786393,
            "hunks": 1,
            "message": "Regenerate docs using latest generator. Summary: This includes keyword arguments documentation for all Skylark functions. Test Plan: CI Reviewed By: jtorkkola fbshipit-source-id: 1b790e3",
            "diff": [
                "diff --git a/docs/skylark/generated/struct.soy b/docs/skylark/generated/struct.soy",
                "index 8c1792d9df..2f39330a10 100644",
                "--- a/docs/skylark/generated/struct.soy",
                "+++ b/docs/skylark/generated/struct.soy",
                "@@ -20,2 +20,10 @@",
                "         {param args}",
                "+                      {call buck.functionArg}",
                "+                        {param name : 'kwargs' /}",
                "+                        {param desc }",
                "+                          the struct attributes.",
                "+                        {/param}",
                "+                        {param default : 'None' /}",
                "+                      {/call}",
                "+",
                "         {/param}"
            ],
            "changed_files": [
                "docs/skylark/generated/struct.soy"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "52ab063e3bccbd105d06fc644066a1906d87983c",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522724588,
            "hunks": 2,
            "message": "Generate package_name() function doc. Reviewed By: sbalabanov fbshipit-source-id: b164349",
            "diff": [
                "diff --git a/docs/skylark/generated/__table_of_contents.soy b/docs/skylark/generated/__table_of_contents.soy",
                "index c24018a544..92975ab6d0 100644",
                "--- a/docs/skylark/generated/__table_of_contents.soy",
                "+++ b/docs/skylark/generated/__table_of_contents.soy",
                "@@ -39,2 +39,8 @@",
                "                 {/call}",
                "+                {call navigation.link}",
                "+                    {param currentnavid: $navid /}",
                "+                    {param folder: 'skylark/generated' /}",
                "+                    {param page: 'repository_name' /}",
                "+                    {param text: 'repository_name()' /}",
                "+                {/call}",
                "diff --git a/docs/skylark/generated/repository_name.soy b/docs/skylark/generated/repository_name.soy",
                "new file mode 100644",
                "index 0000000000..9a2da1b7ea",
                "--- /dev/null",
                "+++ b/docs/skylark/generated/repository_name.soy",
                "@@ -0,0 +1,23 @@",
                "+{namespace buck.skylark.repository_name}",
                "+",
                "+/***/",
                "+{template .soyweb}",
                "+  {call buck.page}",
                "+    {param title: 'repository_name()' /}",
                "+    {param navid: 'skylark/generated_repository_name' /}",
                "+    {param prettify: true /}",
                "+    {param description}",
                "+      The name of the repository the rule or build extension is called from. For example, in packages that are called into existence inside of the cell <code>foo</code> it will return <code>@foo</code>. In packages in the main repository (or standalone project), it will be set to <code>@</code>.",
                "+    {/param}",
                "+    {param content}",
                "+      {call buck.function}",
                "+        {param status: 'UNFROZEN' /}",
                "+        {param overview}",
                "+          The name of the repository the rule or build extension is called from. For example, in packages that are called into existence inside of the cell <code>foo</code> it will return <code>@foo</code>. In packages in the main repository (or standalone project), it will be set to <code>@</code>.",
                "+        {/param}",
                "+        {param args}",
                "+        {/param}",
                "+      {/call}",
                "+    {/param} // content",
                "+  {/call}",
                "+{/template}"
            ],
            "changed_files": [
                "docs/skylark/generated/__table_of_contents.soy",
                "docs/skylark/generated/repository_name.soy"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8b01a9c6958dbcf67362e0638d2900bb8c13ef71",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522450554,
            "hunks": 29,
            "message": "Proofread Skylark documentation Summary: Just a proofreading pass. Reviewed By: ttsugriy fbshipit-source-id: 4a75f57",
            "diff": [
                "diff --git a/docs/concept/skylark.soy b/docs/concept/skylark.soy",
                "index 73e1de8c2f..fc68c2ecd4 100644",
                "--- a/docs/concept/skylark.soy",
                "+++ b/docs/concept/skylark.soy",
                "@@ -13,6 +13,6 @@",
                "       <p>",
                "-        Historically Buck relied on Python for describing {call buck.build_file /}s and {call buck.macros/}.",
                "+        Historically, Buck relied on Python for describing {call buck.build_file /}s and {call buck.macros/}.",
                "         This allowed Buck users to implement many missing features without having",
                "         to modify Buck's core. While it worked fine for local builds and small repositories, when used",
                "-        at scale, ability to access host environment and perform arbitrary actions without Buck's",
                "+        at scale, the ability to access host environment and perform arbitrary actions without Buck's",
                "         knowledge led to non-deterministic, hard to debug issues and slow parsing.",
                "@@ -21,3 +21,3 @@",
                "         To address some of these issues, Buck introduced features like <code>allow_unsafe_import</code>, but",
                "-        ultimately they were unable to provide proper sandboxing for deterministic parsing and a new",
                "+        we were ultimately unable to provide proper sandboxing for deterministic parsing and a new",
                "         solution had to be put in place.",
                "@@ -28,3 +28,3 @@",
                "         In order to tackle Python DSL parser limitations, Buck added polyglot language support",
                "-        and provided a built in parser, <a href=\"https://docs.bazel.build/versions/master/skylark/language.html\">Skylark</a>, as",
                "+        and provided a built-in parser, <a href=\"https://docs.bazel.build/versions/master/skylark/language.html\">Skylark</a>, as",
                "         an alternative to the Python DSL parser.",
                "@@ -45,3 +45,3 @@",
                "-      Since Skylark will soon be the default it's highly recommended to start the migration and to",
                "+      Since Skylark will soon be the default, it's highly recommended to start the migration. To",
                "       make it easier, Buck gives you control over which parser to use for parsing",
                "@@ -49,3 +49,3 @@",
                "       <pre># BUILD FILE SYNTAX: SKYLARK</pre> as the very first line of the {call buck.build_file/} will",
                "-      result in Buck using Skylark parser for parsing it. Similarly <pre># BUILD FILE SYNTAX: PYTHON_DSL</pre> will",
                "+      result in Buck using Skylark parser for parsing it. Similarly, <pre># BUILD FILE SYNTAX: PYTHON_DSL</pre> will",
                "       result in Python DSL parser being used.",
                "@@ -54,3 +54,3 @@",
                "       <p>",
                "-        It's best to make enable Skylark parser globally and add",
                "+        It's best to enable the Skylark parser globally and add",
                "         <pre># BUILD FILE SYNTAX: PYTHON_DSL</pre> to all {call buck.build_file/}s that rely on Python",
                "@@ -72,3 +72,3 @@",
                "         Buck team has decided to replace Python DSL with Skylark as the language for {call buck.build_file/} and",
                "-        extension files. Unfortunately migration cannot be fully automated, so below some of the",
                "+        extension files. Unfortunately, migration cannot be fully automated, so below some of the",
                "         ways to resolve common tasks when migrating to Skylark are described.",
                "@@ -77,10 +77,11 @@",
                "-        The <code>include_defs</code> function is not supported in Skylark because by default it",
                "-        pollutes execution environment and makes automated refactoring much harder. To replace a",
                "+        The <code>include_defs</code> function is not supported in Skylark because it",
                "+        pollutes the execution environment by default and makes automated refactoring much harder. To replace a",
                "         usage of <pre>include_defs(\"//tools/my_macro.bzl\")</pre> you should:",
                "         <ul>",
                "-        <li>find all variables defined in <code>my_macro</code> file that are actually used by this",
                "-          file. Say it's <code>foo</code> and <code>bar</code>",
                "+        <li>find all symbols defined in <code>my_macro</code> file that are actually used by this",
                "+          file. Say, for example, it needs <code>foo</code> and <code>bar</code>.",
                "         <li>replace <code>include_defs</code> invocation with an equivalent {call buck.fn_load /}",
                "-          function invocation <pre>load(\"//tools:my_macro.bzl\", \"foo\", \"bar\")</pre>",
                "+          function invocation explicitly importing the needed symbols:",
                "+          <pre>load(\"//tools:my_macro.bzl\", \"foo\", \"bar\")</pre>",
                "         </ul>",
                "@@ -90,3 +91,3 @@",
                "         a <code>tools</code> package {call buck.build_file/}. This means that instead",
                "-        of <code>//package/extension.bzl</code> syntax expected by {call buck.fn_include_defs/} a",
                "+        of <code>//package/extension.bzl</code> syntax expected by {call buck.fn_include_defs/}, a",
                "         similar {call buck.fn_load/} invocation would expect <code>//package:extension.bzl</code>.",
                "@@ -99,3 +100,3 @@",
                "         you should use <pre>my_var = read_config('my_project', 'my_var', 'foo')</pre>",
                "-        in your {call buck.build_file/} or extension file. When calling buck instead of passing",
                "+        in your {call buck.build_file/} or extension file. When calling buck, instead of passing",
                "         <pre>env MY_VAR='some_value' buck ...</pre>",
                "@@ -107,9 +108,9 @@",
                "         parser it's possible to invoke {call buck.fn_read_config/} function during extension file",
                "-        evaluation directly or through a set of other function invocations, with Skylark parser this",
                "-        behavior is not supported in order to track configuration option usage more precisely.",
                "-        Because of this a top level {call buck.fn_read_config/} function invocations like",
                "+        evaluation directly or through a set of other function invocations, this",
                "+        behavior is not supported with Skylark parser in order to track configuration option usage more precisely.",
                "+        Because of this, a top-level {call buck.fn_read_config/} function invocation like",
                "         <pre>foo = read_config(...)</pre>",
                "-        would either have to be performed in {call buck.build_file/} directly or preferably moved",
                "-        into a well named function within an extension file. In case configuration options are used",
                "-        to instantiate expensive objects which should ideally be created only once, consider",
                "+        would either have to be performed in {call buck.build_file/} directly or, preferably, moved",
                "+        into a well-named function within an extension file. In case configuration options are used",
                "+        to instantiate expensive objects which should be created only once, consider",
                "         replacing code like",
                "@@ -122,4 +123,4 @@ def foo():",
                "   return _EXPENSIVE1 if read_config(...) else _EXPENSIVE2",
                "-</pre>{/literal}. While it can result in instantiation of an unnecessary expensive object, it may",
                "-        still be more efficient than instantiating one the expensive objects during",
                "+</pre>{/literal} While it can result in instantiation of an unnecessary expensive object, it may",
                "+        still be more efficient than instantiating one of the expensive objects during",
                "         each <code>foo</code> invocation. Having said that, please start simple and optimize only if",
                "@@ -131,3 +132,3 @@ def foo():",
                "         The <code>instanceof</code> operator is not available in Skylark because it does not support",
                "-        inheritance, but some of its usages can be replaced with <code>type</code> operator.",
                "+        inheritance, but some of its usages can be replaced with the <code>type</code> operator.",
                "         For example,",
                "@@ -150,4 +151,4 @@ def foo():",
                "         Note, that while in {call buck.build_file /}s it's invoked",
                "-        as <code>package_name()</code>, but in extension files, it's invoked",
                "-        as <code>native.package_name()</code> as are the rest of built-in functions provided by Buck.",
                "+        as <code>package_name()</code>, it's invoked as <code>native.package_name()</code>",
                "+        in extension files, as are the rest of built-in functions provided by Buck.",
                "         It's fairly easy to write an alias if there is a strong desire to use the old name instead.",
                "@@ -164,4 +165,4 @@ def foo():",
                "         Classes are not supported.",
                "-        You can replace them with <code>struct</code> and functions. In addition to language",
                "-        simplification structs are",
                "+        You can replace them with <code>struct</code>s and functions. In addition to language",
                "+        simplification, structs are",
                "         more <a href=\"http://blog.explainmydata.com/2012/07/expensive-lessons-in-python-performance.html\">memory efficient</a>.",
                "@@ -205,3 +206,3 @@ res = some_function(foo, some_param)",
                "         Regular expressions are not supported in Skylark due to unbounded runtime and resource",
                "-        usage, but most of the time their usage is unnecessary and can be replaced with simple",
                "+        usage, but their usage is often unnecessary and can be replaced with simple",
                "         string manipulations.",
                "@@ -209,3 +210,3 @@ res = some_function(foo, some_param)",
                "         a {literal}startswith(\"//libraries/my_lib/\"){/literal}.",
                "-        Similarly <code>endswith</code> method can be used to replace a pattern that starts",
                "+        Similarly, the <code>endswith()</code> method can be used to replace a pattern that starts",
                "         with <code>.*</code> and <code>\"some_text\" in foo</code> can replace <code>re\".*some_text.*\"</code>.",
                "@@ -216,3 +217,3 @@ res = some_function(foo, some_param)",
                "         Raising and catching exceptions is not supported.",
                "-        Use <a href=\"https://docs.bazel.build/versions/master/skylark/lib/globals.html#fail\">fail function</a> instead.",
                "+        Use the <a href=\"https://docs.bazel.build/versions/master/skylark/lib/globals.html#fail\">fail function</a> instead.",
                "         For example, instead of <code>raise Exception(\"foo\")</code> or <code>raise Exception(\"attribute_name: foo\")</code> you",
                "@@ -220,3 +221,3 @@ res = some_function(foo, some_param)",
                "         to stop build/exception file evaluation and report an error.",
                "-        Since usage of <code>fail</code> triggers non-recoverable errors and halt parsing, they",
                "+        Since usage of <code>fail</code> triggers non-recoverable errors and halts parsing, it",
                "         cannot be used for control flow.",
                "@@ -226,3 +227,3 @@ res = some_function(foo, some_param)",
                "       <p>",
                "-        While loops are not supported due to unbounded runtime. Instead use <code>for</code> loop",
                "+        While loops are not supported due to unbounded runtime. Instead, use a <code>for</code> loop",
                "         with a bounded range.",
                "@@ -236,4 +237,4 @@ res = some_function(foo, some_param)",
                "         like <code>os.path.basepath</code> or <code>os.path.join</code> can be replaced",
                "-        with <code>paths.basename</code> and <code>paths.join</code> from <a href=\"https://github.com/bazelbuild/bazel-skylib\">Skylib</a> library.",
                "-        In order to use it, clone it into some directory and configure it as a cell by",
                "+        with <code>paths.basename</code> and <code>paths.join</code> from <a href=\"https://github.com/bazelbuild/bazel-skylib\">Skylib</a>.",
                "+        In order to use it, clone it into some directory, configure it as a cell by",
                "         adding {literal}<pre>",
                "@@ -241,6 +242,6 @@ res = some_function(foo, some_param)",
                "   bazel_skylib = path/to/skylib_checkout",
                "-</pre>{/literal} to a <code>.buckconfig</code> file and load corresponding function",
                "+</pre>{/literal} to a <code>.buckconfig</code> file, and load corresponding function",
                "         <pre>load(\"@bazel_skylib//lib:paths.bzl\", \"paths\")</pre>.",
                "-        An example from skylib website:",
                "+        An example from Skylib website:",
                "@@ -256,3 +257,3 @@ s = shell.quote(p)",
                "         tool which can catch and suggest fixes for some of the common issues. Unfortunately, since",
                "-        it was not designed to handle arbitrary Python files it can crash.",
                "+        it was not designed to handle arbitrary Python files, it can crash.",
                "         Some of the common reasons for it to crash are:",
                "@@ -291,3 +292,3 @@ s = shell.quote(p)",
                "         should be empty unless your changes affected semantics of some macros or build definitions.",
                "-        In order to get more insight into what exactly has changed you can use <pre>buck audit rules path/to/BUCK</pre> command",
                "+        In order to get more insight into what exactly has you, changed can use <pre>buck audit rules path/to/BUCK</pre> command",
                "         on individual {call buck.build_file /} files to see how macros are expanded by Buck."
            ],
            "changed_files": [
                "docs/concept/skylark.soy"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e45e400e8aa141422dededfaeeac32ffd5523789",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522730324,
            "hunks": 7,
            "message": "Make function args optional. Summary: Currently args are required even though some of the functions have no arguments and have to pass the same meaningless `No arguments` parameter. Now, callers can just omit args altogether. If we decide to generate some placeholder to explicitly tell that some function does not have arguments it's easier to implement it by checking if `$args` is not set and provide the same template. Reviewed By: sbalabanov fbshipit-source-id: a997c7f",
            "diff": [
                "diff --git a/docs/__common.soy b/docs/__common.soy",
                "index e4b38cd830..4332c9b201 100644",
                "--- a/docs/__common.soy",
                "+++ b/docs/__common.soy",
                "@@ -248,3 +248,3 @@ docsearch({",
                "        current level of support for the rule.",
                "- * @param args HTML documentation for each arg for the rule.",
                "+ * @param? args HTML documentation for each arg for the rule.",
                "  *     Should be created using multiple applications of the {buck.arg}",
                "@@ -365,3 +365,3 @@ docsearch({",
                "        current level of support for the rule.",
                "- * @param args HTML documentation for each arg for the function.",
                "+ * @param? args HTML documentation for each arg for the function.",
                "  *     Should be created using multiple applications of the {buck.functionArg}",
                "@@ -384,6 +384,8 @@ docsearch({",
                "-<h2>Arguments</h2>",
                "-<ul class=\"{css arglist}\">",
                "-  {$args|noAutoescape}",
                "-</ul>",
                "+{if $args}",
                "+  <h2>Arguments</h2>",
                "+  <ul class=\"{css arglist}\">",
                "+    {$args|noAutoescape}",
                "+  </ul>",
                "+{/if}",
                "diff --git a/docs/function/allow_unsafe_import.soy b/docs/function/allow_unsafe_import.soy",
                "index 7e1bb74695..a4fe8cdc59 100644",
                "--- a/docs/function/allow_unsafe_import.soy",
                "+++ b/docs/function/allow_unsafe_import.soy",
                "@@ -57,12 +57,2 @@ relpath, split, splitdrive, splitext, sep, pathsep</td>",
                "-{param args}",
                "-",
                "-{call buck.functionArg}",
                "-  {param desc}",
                "-  No arguments.",
                "-  {/param}",
                "-{/call}",
                "-",
                "-{/param}",
                "-",
                " {param examples}",
                "diff --git a/docs/function/get_base_path.soy b/docs/function/get_base_path.soy",
                "index b657ffaf25..5d917cf3e2 100644",
                "--- a/docs/function/get_base_path.soy",
                "+++ b/docs/function/get_base_path.soy",
                "@@ -20,12 +20,2 @@ from within a build file.",
                "-{param args}",
                "-",
                "-{call buck.functionArg}",
                "-  {param desc}",
                "-  No arguments.",
                "-  {/param}",
                "-{/call}",
                "-",
                "-{/param}",
                "-",
                " {/call} // buck.function",
                "diff --git a/docs/function/get_cell_name.soy b/docs/function/get_cell_name.soy",
                "index 91dbbe12ac..da783ae884 100644",
                "--- a/docs/function/get_cell_name.soy",
                "+++ b/docs/function/get_cell_name.soy",
                "@@ -20,12 +20,2 @@ from within a build file.",
                "-{param args}",
                "-",
                "-{call buck.functionArg}",
                "-  {param desc}",
                "-  No arguments.",
                "-  {/param}",
                "-{/call}",
                "-",
                "-{/param}",
                "-",
                " {/call} // buck.function",
                "diff --git a/docs/function/host_info.soy b/docs/function/host_info.soy",
                "index 4a21c5ad41..f53383e2d8 100644",
                "--- a/docs/function/host_info.soy",
                "+++ b/docs/function/host_info.soy",
                "@@ -46,10 +46,2 @@",
                "     {/param}",
                "-    {param args}",
                "-{call buck.functionArg}",
                "-  {param desc}",
                "-  No arguments.",
                "-  {/param}",
                "-{/call}",
                "-",
                "-    {/param}",
                " {/call} // buck.function"
            ],
            "changed_files": [
                "docs/__common.soy",
                "docs/function/allow_unsafe_import.soy",
                "docs/function/get_base_path.soy",
                "docs/function/get_cell_name.soy",
                "docs/function/host_info.soy"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5adf6071b9b3ece8d2a7077eafb1eaae76f34f1f",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521561054,
            "hunks": 1,
            "message": "Remove unused dependendency on closure templates. Summary: It's not used, so remove the dep. Test Plan: CI Reviewed By: jtorkkola fbshipit-source-id: 69cdb52",
            "diff": [
                "diff --git a/test/com/facebook/buck/httpserver/BUCK b/test/com/facebook/buck/httpserver/BUCK",
                "index d420d230b3..8a6f1f9466 100644",
                "--- a/test/com/facebook/buck/httpserver/BUCK",
                "+++ b/test/com/facebook/buck/httpserver/BUCK",
                "@@ -160,3 +160,2 @@ java_test(",
                "         \"//third-party/java/asm:asm\",",
                "-        \"//third-party/java/closure-templates:closure-templates\",",
                "         \"//third-party/java/dd-plist:dd-plist\","
            ],
            "changed_files": [
                "test/com/facebook/buck/httpserver/BUCK"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "f7a18224de23e5ac3a86d5475559aa49011c35b1",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1522733717,
            "hunks": 1,
            "message": "Do not generate args for functions without any. Summary: If Skylark function signature has no arguments, do not pass any to the template. Reviewed By: sbalabanov fbshipit-source-id: 664aeea",
            "diff": [
                "diff --git a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg",
                "index 3bde459806..808040843f 100644",
                "--- a/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg",
                "+++ b/tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg",
                "@@ -17,13 +17,15 @@",
                "         {/param}",
                "-        {param args}",
                "-          %signature.parameters :{parameter |",
                "-            %openCurly%call buck.functionArg%closeCurly%",
                "-              %openCurly%param name : '%parameter.name%' /%closeCurly%",
                "-              %openCurly%param desc %closeCurly%",
                "-                %parameter.doc%",
                "-              %openCurly%/param%closeCurly%",
                "-              %openCurly%param default : '%parameter.defaultValue%' /%closeCurly%",
                "-            %openCurly%/call%closeCurly%",
                "-          }%",
                "-        {/param}",
                "+        %if(signature.parameters)%",
                "+          {param args}",
                "+            %signature.parameters :{parameter |",
                "+              %openCurly%call buck.functionArg%closeCurly%",
                "+                %openCurly%param name : '%parameter.name%' /%closeCurly%",
                "+                %openCurly%param desc %closeCurly%",
                "+                  %parameter.doc%",
                "+                %openCurly%/param%closeCurly%",
                "+                %openCurly%param default : '%parameter.defaultValue%' /%closeCurly%",
                "+              %openCurly%/call%closeCurly%",
                "+            }%",
                "+          {/param}",
                "+        %endif%",
                "       {/call}"
            ],
            "changed_files": [
                "tools/documentation_generator/src/com/facebook/buck/tools/documentation/generator/skylark/rendering/signature_template.stg"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3a5b4f9f80d626592480db2c94ef4633db21709d",
            "repository": "https://github.com/facebook/buck",
            "timestamp": 1521832330,
            "hunks": 1,
            "message": "Fix copyright displayed in footer at https://buckbuild.com Summary: Add the current year (2018) to the copyright notice. Reviewed By: styurin fbshipit-source-id: 2240ce7",
            "diff": [
                "diff --git a/docs/__common.soy b/docs/__common.soy",
                "index c688d299e7..e4b38cd830 100644",
                "--- a/docs/__common.soy",
                "+++ b/docs/__common.soy",
                "@@ -183,3 +183,3 @@ src=\"https://www.facebook.com/tr?id=1637165926500152&ev=PageView&noscript=1\"",
                " <footer><div class='width'>",
                "-  &copy; Copyright Facebook, 2013 -",
                "+  &copy; Copyright Facebook, 2013 - 2018",
                " </div></footer>"
            ],
            "changed_files": [
                "docs/__common.soy"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v2018.03.26.01",
                "v2018.06.25.01",
                "v2018.07.09.01",
                "v2018.07.23.01",
                "v2018.08.07.01",
                "v2018.08.20.01",
                "v2018.08.27.01",
                "v2018.09.24.01",
                "v2018.10.17.01",
                "v2018.10.22.01",
                "v2018.10.29.01",
                "v2019.01.10.01",
                "v2019.05.06.01",
                "v2019.05.14.01",
                "v2019.05.22.01",
                "v2019.06.11.01",
                "v2019.06.17.01",
                "v2019.09.03.01",
                "v2019.09.12.01",
                "v2019.10.02.01",
                "v2019.10.17.01",
                "v2020.05.14.01",
                "v2020.06.22.01",
                "v2020.06.29.01",
                "v2020.09.09.01",
                "v2020.10.21.01",
                "v2021.01.12.01",
                "v2022.05.05.01"
            ],
            "matched_rules": []
        }
    ]
}
