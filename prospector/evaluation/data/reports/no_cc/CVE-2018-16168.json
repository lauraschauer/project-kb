{
    "advisory_record": {
        "cve_id": "CVE-2018-16168",
        "description": "LogonTracer 1.2.0 and earlier allows remote attackers to conduct Python code injection attacks via unspecified vectors.",
        "reserved_timestamp": 1535587200,
        "published_timestamp": 1547071200,
        "updated_timestamp": 1547071021,
        "repository_url": null,
        "references": {
            "": 38,
            "https://jvn.jp/en/vu/JVNVU98026636/index.html": 3,
            "https://github.com/JPCERTCC/LogonTracer/releases/tag/v1.2.1": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "commit::2bb79861dbaf7e8a9646fcd70359523fdb464d9c": 1,
            "https://docs.github.com/github/authenticating-to-github/displaying-verification-statuses-for-all-of-your-commits": 1,
            "https://jvn.jp/vu/JVNVU98026636/index.html": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1
        },
        "affected_products": [
            "LogonTracer",
            "Python"
        ],
        "versions": {
            "status": "affected",
            "version": "1.2.0 and earlier"
        },
        "files": [
            "LogonTracer"
        ],
        "keywords": [
            "logontracer",
            "attack",
            "attacker",
            "injection",
            "allow",
            "conduct",
            "python",
            "vector",
            "code"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "2bb79861dbaf7e8a9646fcd70359523fdb464d9c",
            "repository": "https://github.com/JPCERTCC/LogonTracer",
            "timestamp": 1541552192,
            "hunks": 51,
            "message": "fix multiple vulnerabilities in logontracer.py - fix multiple vulnerabilities - fix unPEP8 codes - remove dead codes",
            "diff": [
                "diff --git a/logontracer.py b/logontracer.py",
                "index 20b8d6d..f4eba7a 100644",
                "--- a/logontracer.py",
                "+++ b/logontracer.py",
                "@@ -11,3 +11,2 @@ import re",
                " import argparse",
                "-import itertools",
                " import datetime",
                "@@ -87,2 +86,6 @@ EVTX_HEADER = b\"\\x45\\x6C\\x66\\x46\\x69\\x6C\\x65\\x00\"",
                "+# String Chack list",
                "+UCHECK = r\"[%*+=\\[\\]\\\\/|;:\\\"<>?,&]\"",
                "+HCHECK = r\"[*\\\\/|:\\\"<>?&]\"",
                "+",
                " # LogonTracer folder path",
                "@@ -256,2 +259,3 @@ if args.port:",
                "+",
                " # Web application index.html",
                "@@ -279,3 +283,9 @@ def logs():",
                " def do_upload():",
                "-    filelist= \"\"",
                "+    UPLOAD_DIR = os.path.join(FPATH, 'upload')",
                "+    filelist = \"\"",
                "+",
                "+    if os.path.exists(UPLOAD_DIR) is False:",
                "+        os.mkdir(UPLOAD_DIR)",
                "+        print(\"[*] make upload folder %s.\" % UPLOAD_DIR)",
                "+",
                "     try:",
                "@@ -283,3 +293,3 @@ def do_upload():",
                "         logtype = request.form[\"logtype\"]",
                "-        for  i in range(0, len(request.files)):",
                "+        for i in range(0, len(request.files)):",
                "             loadfile = \"file\" + str(i)",
                "@@ -287,3 +297,8 @@ def do_upload():",
                "             if file and file.filename:",
                "-                filename = file.filename",
                "+                if \"EVTX\" in logtype:",
                "+                    filename = os.path.join(UPLOAD_DIR, str(i) + \".evtx\")",
                "+                elif \"XML\" in logtype:",
                "+                    filename = os.path.join(UPLOAD_DIR, str(i) + \".xml\")",
                "+                else:",
                "+                    continue",
                "                 file.save(filename)",
                "@@ -292,9 +307,15 @@ def do_upload():",
                "             logoption = \" -e \"",
                "-        if \"XML\" in logtype:",
                "+        elif \"XML\" in logtype:",
                "             logoption = \" -x \"",
                "-        parse_command = \"nohup python3 \" + FPATH + \"/logontracer.py --delete -z \" + timezone + logoption + filelist + \" -u \" + NEO4J_USER + \" -p \" + NEO4J_PASSWORD + \" >  \" + FPATH + \"/static/logontracer.log 2>&1 &\";",
                "+        else:",
                "+            return \"FAIL\"",
                "+        if not re.search(r\"\\A-{0,1}[0-9]{1,2}\\Z\", timezone):",
                "+            return \"FAIL\"",
                "+",
                "+        parse_command = \"nohup python3 \" + FPATH + \"/logontracer.py --delete -z \" + timezone + logoption + filelist + \" -u \" + NEO4J_USER + \" -p \" + NEO4J_PASSWORD + \" >  \" + FPATH + \"/static/logontracer.log 2>&1 &\"",
                "         subprocess.call(\"rm -f \" + FPATH + \"/static/logontracer.log > /dev/null\", shell=True)",
                "         subprocess.call(parse_command, shell=True)",
                "-        #parse_evtx(filename)",
                "+        # parse_evtx(filename)",
                "         return \"SUCCESS\"",
                "+",
                "     except:",
                "@@ -312,3 +333,3 @@ def adetection(counts, users, starttime, tohours):",
                "         row = users.index(event[\"username\"])",
                "-        #count_array[row, column, 0] = count_array[row, column, 0] + count",
                "+        # count_array[row, column, 0] = count_array[row, column, 0] + count",
                "         if event[\"eventid\"] == 4624:",
                "@@ -324,3 +345,3 @@ def adetection(counts, users, starttime, tohours):",
                "-    #count_average = count_array.mean(axis=0)",
                "+    # count_average = count_array.mean(axis=0)",
                "     count_sum = np.sum(count_array, axis=0)",
                "@@ -479,5 +500,5 @@ def learnhmm(frame, users, stime):",
                "     data_array[data_array == 4625] = 4",
                "-    #model = hmm.GaussianHMM(n_components=3, covariance_type=\"full\", n_iter=10000)",
                "+    # model = hmm.GaussianHMM(n_components=3, covariance_type=\"full\", n_iter=10000)",
                "     model = hmm.MultinomialHMM(n_components=3, n_iter=10000)",
                "-    #model.startprob_ = start_probability",
                "+    # model.startprob_ = start_probability",
                "     model.emissionprob_ = emission_probability",
                "@@ -491,3 +512,4 @@ def to_lxml(record_xml):",
                "     fin_xml = set_xml.encode(\"utf-8\")",
                "-    return etree.fromstring(fin_xml)",
                "+    parser = etree.XMLParser(resolve_entities=False)",
                "+    return etree.fromstring(fin_xml, parser)",
                "@@ -504,3 +526,3 @@ def xml_records(filename):",
                "     if args.xmls:",
                "-        with open(filename,'r') as fx:",
                "+        with open(filename, 'r') as fx:",
                "             xdata = fx.read()",
                "@@ -518,2 +540,3 @@ def xml_records(filename):",
                "+",
                " # Parse the EVTX file",
                "@@ -522,3 +545,3 @@ def parse_evtx(evtx_list):",
                "     count_set = pd.DataFrame(index=[], columns=[\"dates\", \"eventid\", \"username\"])",
                "-    ml_frame = pd.DataFrame(index=[], columns=[\"date\",\"user\",\"host\",\"id\"])",
                "+    ml_frame = pd.DataFrame(index=[], columns=[\"date\", \"user\", \"host\", \"id\"])",
                "     username_set = []",
                "@@ -564,3 +587,3 @@ def parse_evtx(evtx_list):",
                "         try:",
                "-            tdatetime =  datetime.datetime.strptime(args.todate, \"%Y%m%d%H%M%S\")",
                "+            tdatetime = datetime.datetime.strptime(args.todate, \"%Y%m%d%H%M%S\")",
                "             print(\"[*] Parse the EVTX from %s.\" % tdatetime.strftime(\"%Y-%m-%d %H:%M:%S\"))",
                "@@ -588,3 +611,3 @@ def parse_evtx(evtx_list):",
                "                 except:",
                "-                    record_sum =  record_sum + fh.next_record_number()",
                "+                    record_sum = record_sum + fh.next_record_number()",
                "@@ -652,3 +675,3 @@ def parse_evtx(evtx_list):",
                "                     for data in event_data:",
                "-                        if data.get(\"Name\") in \"SubjectUserName\" and data.text != None:",
                "+                        if data.get(\"Name\") in \"SubjectUserName\" and data.text is not None and not re.search(UCHECK, data.text):",
                "                             username = data.text.split(\"@\")[0]",
                "@@ -662,3 +685,3 @@ def parse_evtx(evtx_list):",
                "                     for data in event_data:",
                "-                        if data.get(\"Name\") in \"TargetUserName\" and data.text != None:",
                "+                        if data.get(\"Name\") in \"TargetUserName\" and data.text is not None and not re.search(UCHECK, data.text):",
                "                             username = data.text.split(\"@\")[0]",
                "@@ -674,3 +697,3 @@ def parse_evtx(evtx_list):",
                "                     for data in event_data:",
                "-                        if data.get(\"Name\") in \"SubjectUserName\" and data.text != None:",
                "+                        if data.get(\"Name\") in \"SubjectUserName\" and data.text is not None and not re.search(UCHECK, data.text):",
                "                             username = data.text.split(\"@\")[0]",
                "@@ -680,5 +703,5 @@ def parse_evtx(evtx_list):",
                "                                 username = \"-\"",
                "-                        if data.get(\"Name\") in \"CategoryId\" and data.text != None:",
                "+                        if data.get(\"Name\") in \"CategoryId\" and data.text is not None and re.search(r\"\\A%%\\d{4}\\Z\", data.text):",
                "                             category = data.text",
                "-                        if data.get(\"Name\") in \"SubcategoryGuid\" and data.text != None:",
                "+                        if data.get(\"Name\") in \"SubcategoryGuid\" and data.text is not None and re.search(r\"\\A{[\\w\\-]*}\\Z\", data.text):",
                "                             guid = data.text",
                "@@ -687,5 +710,5 @@ def parse_evtx(evtx_list):",
                "                     for data in event_data:",
                "-                        if data.get(\"Name\") in \"TargetUserName\" and data.text != None:",
                "+                        if data.get(\"Name\") in \"TargetUserName\" and data.text is not None and not re.search(UCHECK, data.text):",
                "                             groupname = data.text",
                "-                        elif data.get(\"Name\") in \"MemberSid\" and data.text not in \"-\" and data.text != None:",
                "+                        elif data.get(\"Name\") in \"MemberSid\" and data.text not in \"-\" and data.text is not None and re.search(r\"\\AS-[0-9\\-]*\\Z\", data.text):",
                "                             usid = data.text",
                "@@ -694,5 +717,5 @@ def parse_evtx(evtx_list):",
                "                     for data in event_data:",
                "-                        if data.get(\"Name\") in \"TargetUserName\" and data.text != None:",
                "+                        if data.get(\"Name\") in \"TargetUserName\" and data.text is not None and not re.search(UCHECK, data.text):",
                "                             groupname = data.text",
                "-                        elif data.get(\"Name\") in \"MemberSid\" and data.text not in \"-\" and data.text != None:",
                "+                        elif data.get(\"Name\") in \"MemberSid\" and data.text not in \"-\" and data.text is not None and re.search(r\"\\AS-[0-9\\-]*\\Z\", data.text):",
                "                             usid = data.text",
                "@@ -701,3 +724,3 @@ def parse_evtx(evtx_list):",
                "                     for data in event_data:",
                "-                        if data.get(\"Name\") in \"SubjectUserName\" and data.text != None:",
                "+                        if data.get(\"Name\") in \"SubjectUserName\" and data.text is not None and not re.search(UCHECK, data.text):",
                "                             username = data.text.split(\"@\")[0]",
                "@@ -713,3 +736,3 @@ def parse_evtx(evtx_list):",
                "                     for data in event_data:",
                "-                        if data.get(\"Name\") in \"SubjectUserName\" and data.text != None:",
                "+                        if data.get(\"Name\") in \"SubjectUserName\" and data.text is not None and not re.search(UCHECK, data.text):",
                "                             username = data.text.split(\"@\")[0]",
                "@@ -725,3 +748,3 @@ def parse_evtx(evtx_list):",
                "                     for data in event_data:",
                "-                        if data.get(\"Name\") in [\"IpAddress\", \"Workstation\"] and data.text != None:",
                "+                        if data.get(\"Name\") in [\"IpAddress\", \"Workstation\"] and data.text is not None and (not re.search(HCHECK, data.text) or re.search(r\"\\A\\d+\\.\\d+\\.\\d+\\.\\d+\\Z\", data.text)):",
                "                             ipaddress = data.text.split(\"@\")[0]",
                "@@ -730,3 +753,3 @@ def parse_evtx(evtx_list):",
                "-                        if data.get(\"Name\") == \"WorkstationName\" and data.text != None:",
                "+                        if data.get(\"Name\") == \"WorkstationName\" and data.text is not None and (not re.search(HCHECK, data.text) or re.search(r\"\\A\\d+\\.\\d+\\.\\d+\\.\\d+\\Z\", data.text)):",
                "                             hostname = data.text.split(\"@\")[0]",
                "@@ -735,3 +758,3 @@ def parse_evtx(evtx_list):",
                "-                        if data.get(\"Name\") in \"TargetUserName\" and data.text != None:",
                "+                        if data.get(\"Name\") in \"TargetUserName\" and data.text is not None and not re.search(UCHECK, data.text):",
                "                             username = data.text.split(\"@\")[0]",
                "@@ -742,15 +765,15 @@ def parse_evtx(evtx_list):",
                "-                        if data.get(\"Name\") in \"TargetDomainName\" and data.text != None:",
                "+                        if data.get(\"Name\") in \"TargetDomainName\" and data.text is not None and not re.search(HCHECK, data.text):",
                "                             domain = data.text",
                "-                        if data.get(\"Name\") in [\"TargetUserSid\", \"TargetSid\"] and data.text != None and data.text[0:2] in \"S-1\":",
                "+                        if data.get(\"Name\") in [\"TargetUserSid\", \"TargetSid\"] and data.text is not None and re.search(r\"\\AS-[0-9\\-]*\\Z\", data.text):",
                "                             sid = data.text",
                "-                        if data.get(\"Name\") in \"LogonType\":",
                "+                        if data.get(\"Name\") in \"LogonType\" and re.search(r\"\\A\\d{1,2}\\Z\", data.text):",
                "                             logintype = int(data.text)",
                "-                        if data.get(\"Name\") in \"Status\":",
                "+                        if data.get(\"Name\") in \"Status\" and re.search(r\"\\A0x\\w{8}\\Z\", data.text):",
                "                             status = data.text",
                "-                        if data.get(\"Name\") in \"AuthenticationPackageName\":",
                "+                        if data.get(\"Name\") in \"AuthenticationPackageName\" and re.search(r\"\\A\\w*\\Z\", data.text):",
                "                             authname = data.text",
                "@@ -764,3 +787,3 @@ def parse_evtx(evtx_list):",
                "                             ml_series = pd.Series([etime.strftime(\"%Y-%m-%d %H:%M:%S\"), username, hostname, eventid],  index=ml_frame.columns)",
                "-                        event_set = event_set.append(event_series, ignore_index = True)",
                "+                        event_set = event_set.append(event_series, ignore_index=True)",
                "                         ml_frame = ml_frame.append(ml_series, ignore_index=True)",
                "@@ -768,3 +791,3 @@ def parse_evtx(evtx_list):",
                "                         count_series = pd.Series([stime.strftime(\"%Y-%m-%d %H:%M:%S\"), eventid, username], index=count_set.columns)",
                "-                        count_set = count_set.append(count_series, ignore_index = True)",
                "+                        count_set = count_set.append(count_series, ignore_index=True)",
                "                         # print(\"%s,%s\" % (stime.strftime(\"%Y-%m-%d %H:%M:%S\"), username))",
                "@@ -783,3 +806,3 @@ def parse_evtx(evtx_list):",
                "-                        if hostname != \"-\" and ipaddress != \"-\" :",
                "+                        if hostname != \"-\" and ipaddress != \"-\":",
                "                             hosts[hostname] = ipaddress",
                "@@ -801,3 +824,3 @@ def parse_evtx(evtx_list):",
                "-                if user_data[0].text != None:",
                "+                if user_data[0].text is not None:",
                "                     username = user_data[0].text.split(\"@\")[0]",
                "@@ -810,3 +833,3 @@ def parse_evtx(evtx_list):",
                "-                if domain_data[0].text != None:",
                "+                if domain_data[0].text is not None:",
                "                     deletelog.append(domain_data[0].text)",
                "@@ -855,3 +878,3 @@ def parse_evtx(evtx_list):",
                "     try:",
                "-        graph_http = \"http://\" + NEO4J_USER + \":\" + NEO4J_PASSWORD +\"@\" + NEO4J_SERVER + \":\" + NEO4J_PORT + \"/db/data/\"",
                "+        graph_http = \"http://\" + NEO4J_USER + \":\" + NEO4J_PASSWORD + \"@\" + NEO4J_SERVER + \":\" + NEO4J_PORT + \"/db/data/\"",
                "         GRAPH = Graph(graph_http)",
                "@@ -861,3 +884,3 @@ def parse_evtx(evtx_list):",
                "     tx = GRAPH.begin()",
                "-    hosts_inv = {v:k for k, v in hosts.items()}",
                "+    hosts_inv = {v: k for k, v in hosts.items()}",
                "     for ipaddress in event_set[\"ipaddress\"].drop_duplicates():",
                "@@ -894,7 +917,7 @@ def parse_evtx(evtx_list):",
                "             ustatus = \"-\"",
                "-        tx.append(statement_user, {\"user\": username[:-1], \"rank\": ranks[username],\"rights\": rights,\"sid\": sid,\"status\": ustatus,",
                "-                                                    \"counts\": \",\".join(map(str, timelines[i*6])), \"counts4624\": \",\".join(map(str, timelines[i*6+1])),",
                "-                                                    \"counts4625\": \",\".join(map(str, timelines[i*6+2])), \"counts4768\": \",\".join(map(str, timelines[i*6+3])),",
                "-                                                    \"counts4769\": \",\".join(map(str, timelines[i*6+4])), \"counts4776\": \",\".join(map(str, timelines[i*6+5])),",
                "-                                                    \"detect\": \",\".join(map(str, detects[i]))})",
                "+        tx.append(statement_user, {\"user\": username[:-1], \"rank\": ranks[username], \"rights\": rights, \"sid\": sid, \"status\": ustatus,",
                "+                                   \"counts\": \",\".join(map(str, timelines[i*6])), \"counts4624\": \",\".join(map(str, timelines[i*6+1])),",
                "+                                   \"counts4625\": \",\".join(map(str, timelines[i*6+2])), \"counts4768\": \",\".join(map(str, timelines[i*6+3])),",
                "+                                   \"counts4769\": \",\".join(map(str, timelines[i*6+4])), \"counts4776\": \",\".join(map(str, timelines[i*6+5])),",
                "+                                   \"detect\": \",\".join(map(str, detects[i]))})",
                "         i += 1",
                "@@ -906,3 +929,3 @@ def parse_evtx(evtx_list):",
                "         tx.append(statement_r, {\"user\": events[\"username\"][:-1], \"IP\": events[\"ipaddress\"], \"id\": events[\"eventid\"], \"logintype\": events[\"logintype\"],",
                "-                                               \"status\": events[\"status\"], \"count\": events[\"count\"], \"authname\": events[\"authname\"]})",
                "+                                \"status\": events[\"status\"], \"count\": events[\"count\"], \"authname\": events[\"authname\"]})",
                "@@ -912,3 +935,3 @@ def parse_evtx(evtx_list):",
                "     tx.append(statement_date, {\"Daterange\": \"Daterange\", \"start\": datetime.datetime(*starttime.timetuple()[:4]).strftime(\"%Y-%m-%d %H:%M:%S\"),",
                "-                                                 \"end\": datetime.datetime(*endtime.timetuple()[:4]).strftime(\"%Y-%m-%d %H:%M:%S\")})",
                "+                               \"end\": datetime.datetime(*endtime.timetuple()[:4]).strftime(\"%Y-%m-%d %H:%M:%S\")})",
                "@@ -964,3 +987,3 @@ def main():",
                "     try:",
                "-        graph_http = \"http://\" + NEO4J_USER + \":\" + NEO4J_PASSWORD +\"@\" + NEO4J_SERVER + \":\" + NEO4J_PORT + \"/db/data/\"",
                "+        graph_http = \"http://\" + NEO4J_USER + \":\" + NEO4J_PASSWORD + \"@\" + NEO4J_SERVER + \":\" + NEO4J_PORT + \"/db/data/\"",
                "         GRAPH = Graph(graph_http)",
                "@@ -996,2 +1019,3 @@ def main():",
                "+",
                " if __name__ == \"__main__\":"
            ],
            "changed_files": [
                "logontracer.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v1.2.1",
                "v1.3.0",
                "v1.3.1",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2",
                "v1.5.0",
                "v1.5.1",
                "v1.5.2",
                "v1.5.3",
                "v1.5.4",
                "v1.6.0",
                "v1.6.1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 1 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: LogonTracer",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: logontracer.py",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: logontracer, code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: logontracer",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a70488aac2b32c9910e70201c78e99d453ca4f7b",
            "repository": "https://github.com/JPCERTCC/LogonTracer",
            "timestamp": 1541571648,
            "hunks": 1,
            "message": "fix typo in logontracer.py fix a typo in comment",
            "diff": [
                "diff --git a/logontracer.py b/logontracer.py",
                "index f4eba7a..732e0c8 100644",
                "--- a/logontracer.py",
                "+++ b/logontracer.py",
                "@@ -86,3 +86,3 @@ EVTX_HEADER = b\"\\x45\\x6C\\x66\\x46\\x69\\x6C\\x65\\x00\"",
                "-# String Chack list",
                "+# String Check list",
                " UCHECK = r\"[%*+=\\[\\]\\\\/|;:\\\"<>?,&]\""
            ],
            "changed_files": [
                "logontracer.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v1.3.0",
                "v1.3.1",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2",
                "v1.5.0",
                "v1.5.1",
                "v1.5.2",
                "v1.5.3",
                "v1.5.4",
                "v1.6.0",
                "v1.6.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: logontracer.py",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: logontracer",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: logontracer",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "34d4f0c25cde83264c90cfdf76f4c4e5b4c4b74b",
            "repository": "https://github.com/JPCERTCC/LogonTracer",
            "timestamp": 1541573210,
            "hunks": 0,
            "message": "Merge pull request #39 from azu/patch-1 fix typo in logontracer.py",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "39": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v1.3.0",
                "v1.3.1",
                "v1.4.0",
                "v1.4.1",
                "v1.4.2",
                "v1.5.0",
                "v1.5.1",
                "v1.5.2",
                "v1.5.3",
                "v1.5.4",
                "v1.6.0",
                "v1.6.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: logontracer",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 39",
                    "relevance": 2
                }
            ]
        }
    ]
}
