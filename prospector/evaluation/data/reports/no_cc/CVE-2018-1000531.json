{
    "advisory_record": {
        "cve_id": "CVE-2018-1000531",
        "description": "inversoft prime-jwt version prior to commit abb0d479389a2509f939452a6767dc424bb5e6ba contains a CWE-20 vulnerability in JWTDecoder.decode that can result in an incorrect signature validation of a JWT token. This attack can be exploitable when an attacker crafts a JWT token with a valid header using 'none' as algorithm and a body to requests it be validated. This vulnerability was fixed after commit abb0d479389a2509f939452a6767dc424bb5e6ba.",
        "reserved_timestamp": 1525219200,
        "published_timestamp": 1530028800,
        "updated_timestamp": 1530133021,
        "repository_url": null,
        "references": {
            "": 63,
            "commit::abb0d479389a2509f939452a6767dc424bb5e6ba": 4,
            "https://github.com/inversoft/prime-jwt/issues/3": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://docs.github.com/terms": 1,
            "https://docs.github.com/privacy": 1,
            "https://github.com/FusionAuth/fusionauth-jwt/issues/3": 1,
            "https://github.com/rcadob": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1
        },
        "affected_products": [
            "n/a",
            "JWT",
            "algorithm"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "JWTDecoder",
            "JWT",
            "CWE-20",
            "prime-jwt",
            "decode"
        ],
        "keywords": [
            "commit",
            "signature",
            "attacker",
            "body",
            "none",
            "request",
            "result",
            "version",
            "validation",
            "abb0d479389a2509f939452a6767dc424bb5e6ba",
            "contain",
            "algorithm",
            "header",
            "token",
            "vulnerability",
            "craft",
            "attack",
            "validate"
        ],
        "files_extension": [],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "abb0d479389a2509f939452a6767dc424bb5e6ba",
            "repository": "https://github.com/inversoft/prime-jwt",
            "timestamp": 1525275078,
            "hunks": 2,
            "message": "Fixing issue #3 and adding tests to confirm.",
            "diff": [
                "diff --git a/src/main/java/org/primeframework/jwt/JWTDecoder.java b/src/main/java/org/primeframework/jwt/JWTDecoder.java",
                "index 6736d6b..38214b5 100644",
                "--- a/src/main/java/org/primeframework/jwt/JWTDecoder.java",
                "+++ b/src/main/java/org/primeframework/jwt/JWTDecoder.java",
                "@@ -153,5 +153,7 @@ public class JWTDecoder {",
                "   private JWT decode(String encodedJWT, Header header, String[] parts, Verifier verifier) {",
                "-    int index = encodedJWT.lastIndexOf(\".\");",
                "-    // The message comprises the first two segments of the entire JWT, the signature is the last segment.",
                "-    byte[] message = encodedJWT.substring(0, index).getBytes(StandardCharsets.UTF_8);",
                "+    // The callers of this decode will have already handled 'none' if it was deemed to be valid based upon",
                "+    // the provided verifiers. At this point, if we have a 'none' algorithm specified in the header, it is invalid.",
                "+    if (header.algorithm == Algorithm.none) {",
                "+      throw new MissingVerifierException(\"No Verifier has been provided for verify a signature signed using [\" + header.algorithm.getName() + \"]\");",
                "+    }",
                "@@ -167,2 +169,6 @@ public class JWTDecoder {",
                "+    int index = encodedJWT.lastIndexOf(\".\");",
                "+    // The message comprises the first two segments of the entire JWT, the signature is the last segment.",
                "+    byte[] message = encodedJWT.substring(0, index).getBytes(StandardCharsets.UTF_8);",
                "+",
                "     if (parts.length == 3) {"
            ],
            "changed_files": [
                "src/main/java/org/primeframework/jwt/JWTDecoder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "3": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.3.1",
                "2.0.0",
                "2.1.0",
                "2.1.1",
                "3.0.0",
                "3.0.1",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.1.0",
                "3.1.1",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0",
                "3.4.1",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.5.3",
                "3.6.0",
                "4.0.0",
                "4.0.1",
                "4.1.0",
                "4.2.0",
                "4.2.2",
                "4.3.0",
                "4.3.1",
                "5.0.0",
                "5.1.0",
                "5.1.1",
                "5.1.2",
                "5.2.0",
                "5.2.1",
                "5.2.2",
                "5.2.3",
                "5.2.4",
                "5.3.0",
                "5.3.1",
                "5.3.2",
                "5.3.3"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 3",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 4 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: JWTDecoder, JWT, decode",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/org/primeframework/jwt/JWTDecoder.java",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 3",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "558ab8b9b763ea2f1beb5fc6152d0710858d1e49",
            "repository": "https://github.com/inversoft/prime-jwt",
            "timestamp": 1525714047,
            "hunks": 18,
            "message": "Refactor to simplify validation workflow. Thanks to @voidmain",
            "diff": [
                "diff --git a/src/main/java/org/primeframework/jwt/JWTDecoder.java b/src/main/java/org/primeframework/jwt/JWTDecoder.java",
                "index 38214b5..188e385 100644",
                "--- a/src/main/java/org/primeframework/jwt/JWTDecoder.java",
                "+++ b/src/main/java/org/primeframework/jwt/JWTDecoder.java",
                "@@ -25,3 +25,5 @@ import org.primeframework.jwt.domain.JWTExpiredException;",
                " import org.primeframework.jwt.domain.JWTUnavailableForProcessingException;",
                "+import org.primeframework.jwt.domain.MissingSignatureException;",
                " import org.primeframework.jwt.domain.MissingVerifierException;",
                "+import org.primeframework.jwt.domain.NoneNotAllowedException;",
                " import org.primeframework.jwt.json.Mapper;",
                "@@ -29,2 +31,3 @@ import org.primeframework.jwt.json.Mapper;",
                " import java.nio.charset.StandardCharsets;",
                "+import java.util.Arrays;",
                " import java.util.Base64;",
                "@@ -64,24 +67,11 @@ public class JWTDecoder {",
                "-    // An unsecured JWT will not contain a signature and should only have a header and a payload.",
                "     String[] parts = getParts(encodedJWT);",
                "-    Header header = Mapper.deserialize(base64Decode(parts[0].getBytes(StandardCharsets.UTF_8)), Header.class);",
                "-    // If parts.length == 2 we have no signature, if no verifiers were provided, decode if header says 'none', else throw an exception",
                "-    if (parts.length == 2 && verifiers.length == 0) {",
                "-      if (header.algorithm == Algorithm.none) {",
                "-        return Mapper.deserialize(base64Decode(parts[1].getBytes(StandardCharsets.UTF_8)), JWT.class);",
                "-      } else {",
                "-        throw new InvalidJWTSignatureException();",
                "-      }",
                "-    }",
                "+    Header header = Mapper.deserialize(base64Decode(parts[0]), Header.class);",
                "+    Verifier verifier = Arrays.stream(verifiers).filter(v -> v.canVerify(header.algorithm)).findFirst().orElse(null);",
                "-    // If verifiers were provided, ensure it is able to verify this JWT.",
                "-    Verifier verifier = null;",
                "-    for (Verifier v : verifiers) {",
                "-      if (v.canVerify(header.algorithm)) {",
                "-        verifier = v;",
                "-      }",
                "-    }",
                "+    // The 'none' algorithm is only allowed when no verifiers are provided.",
                "+    boolean allowNoneAlgorithm = verifiers.length == 0;",
                "-    return decode(encodedJWT, header, parts, verifier);",
                "+    return validate(encodedJWT, parts, header, verifier, allowNoneAlgorithm);",
                "   }",
                "@@ -122,27 +112,24 @@ public class JWTDecoder {",
                "     String[] parts = getParts(encodedJWT);",
                "-    Header header = Mapper.deserialize(base64Decode(parts[0].getBytes(StandardCharsets.UTF_8)), Header.class);",
                "-    // If parts.length == 2 we have no signature, if no verifiers were provided, decode if header says 'none', else throw an exception",
                "-    if (parts.length == 2 && verifiers.isEmpty()) {",
                "-      if (header.algorithm == Algorithm.none) {",
                "-        return Mapper.deserialize(base64Decode(parts[1].getBytes(StandardCharsets.UTF_8)), JWT.class);",
                "-      } else {",
                "-        throw new InvalidJWTSignatureException();",
                "-      }",
                "-    }",
                "-    // If verifiers were provided, ensure it is able to verify this JWT.",
                "+    Header header = Mapper.deserialize(base64Decode(parts[0]), Header.class);",
                "     String key = keyFunction.apply(header);",
                "     Verifier verifier = verifiers.get(key);",
                "-    if (verifier != null) {",
                "-      if (!verifier.canVerify(header.algorithm)) {",
                "-        verifier = null;",
                "-      }",
                "-    }",
                "-    return decode(encodedJWT, header, parts, verifier);",
                "+    // The 'none' algorithm is only allowed when no verifiers are provided.",
                "+    boolean allowNoneAlgorithm = verifiers.isEmpty();",
                "+",
                "+    return validate(encodedJWT, parts, header, verifier, allowNoneAlgorithm);",
                "   }",
                "-  private byte[] base64Decode(byte[] bytes) {",
                "+  /**",
                "+   * Decode the provided base64 encoded string.",
                "+   *",
                "+   * @param string the input string to decode, it is expected to be a valid base64 encoded string.",
                "+   * @return a decoded byte array",
                "+   */",
                "+  private byte[] base64Decode(String string) {",
                "     try {",
                "-      return Base64.getUrlDecoder().decode(bytes);",
                "+      // Equal to calling : .decode(string.getBytes(StandardCharsets.ISO_8859_1))",
                "+      // If this is a properly base64 encoded string, decoding using ISO_8859_1 should be fine.",
                "+      return Base64.getUrlDecoder().decode(string);",
                "     } catch (IllegalArgumentException e) {",
                "@@ -152,30 +139,65 @@ public class JWTDecoder {",
                "-  private JWT decode(String encodedJWT, Header header, String[] parts, Verifier verifier) {",
                "-    // The callers of this decode will have already handled 'none' if it was deemed to be valid based upon",
                "-    // the provided verifiers. At this point, if we have a 'none' algorithm specified in the header, it is invalid.",
                "-    if (header.algorithm == Algorithm.none) {",
                "-      throw new MissingVerifierException(\"No Verifier has been provided for verify a signature signed using [\" + header.algorithm.getName() + \"]\");",
                "+  /**",
                "+   * Split the encoded JWT on a period (.), and return the parts.",
                "+   * <p>",
                "+   * A secured JWT will be in the format : <code>XXXXX.YYYYY.ZZZZZ</code> and an un-secured JWT (no signature) will be in the format <code>XXXXX.YYYYY</code>.",
                "+   *",
                "+   * @param encodedJWT the encoded form of the JWT",
                "+   * @return an array of parts, 2 for an un-secured JWT, and 3 parts for a secured JWT.",
                "+   */",
                "+  private String[] getParts(String encodedJWT) {",
                "+    String[] parts = encodedJWT.split(\"\\\\.\");",
                "+    if (parts.length == 3 || (parts.length == 2 && encodedJWT.endsWith(\".\"))) {",
                "+      return parts;",
                "     }",
                "-    // If a signature is provided and verifier must be provided.",
                "-    if (parts.length == 3 && verifier == null) {",
                "-      throw new MissingVerifierException(\"No Verifier has been provided for verify a signature signed using [\" + header.algorithm.getName() + \"]\");",
                "-    }",
                "+    throw new InvalidJWTException(\"The encoded JWT is not properly formatted. Expected a three part dot separated string.\");",
                "+  }",
                "-    // A verifier was provided but no signature exists, this is treated as an invalid signature.",
                "-    if (parts.length == 2 && verifier != null) {",
                "-      throw new InvalidJWTSignatureException();",
                "-    }",
                "+  /**",
                "+   * Validate the encoded JWT and return the constructed JWT object if valid.",
                "+   *",
                "+   * @param encodedJWT         the encoded JWT",
                "+   * @param parts              the parts of the encoded JWT",
                "+   * @param header             the JWT header",
                "+   * @param verifier           the selected JWT verifier",
                "+   * @param allowNoneAlgorithm true if un-secured JWTs may be decoded, i.e. 'none' algorithm is allowed",
                "+   * @return the constructed JWT object containing identity claims",
                "+   */",
                "+  private JWT validate(String encodedJWT, String[] parts, Header header, Verifier verifier, boolean allowNoneAlgorithm) {",
                "+    // When parts.length == 2, we have no signature.",
                "+    //  - Case 1: If one or more verifiers are provided, we will not decode an un-secured JWT. Throw NoneNotAllowedException",
                "+    //  - Case 2: If no verifiers are provided, we will decode an un-secured JWT, the algorithm must be 'none'.",
                "+    if (parts.length == 2) {",
                "+      if (!allowNoneAlgorithm) {",
                "+        throw new NoneNotAllowedException();",
                "+      }",
                "-    int index = encodedJWT.lastIndexOf(\".\");",
                "-    // The message comprises the first two segments of the entire JWT, the signature is the last segment.",
                "-    byte[] message = encodedJWT.substring(0, index).getBytes(StandardCharsets.UTF_8);",
                "+      if (header.algorithm != Algorithm.none) {",
                "+        throw new MissingSignatureException(\"Your provided a JWT with the algorithm [\" + header.algorithm.getName() + \"] but it is missing a signature\");",
                "+      }",
                "+    } else {",
                "+      // When parts.length == 3, we have a signature.",
                "+      // - Case 1: The algorithm in the header is 'none', we do not expect a signature.",
                "+      // - Case 2: No verifier was provided that can verify the algorithm in the header, or no verifier found by the kid in the header",
                "+      // - Case 3: The requested verifier cannot verify the signature based upon the algorithm value in the header",
                "+      if (header.algorithm == Algorithm.none) {",
                "+        throw new InvalidJWTException(\"You provided a JWT with a signature and an algorithm of none\");",
                "+      }",
                "-    if (parts.length == 3) {",
                "-      // Verify the signature before de-serializing the payload.",
                "-      byte[] signature = base64Decode(parts[2].getBytes(StandardCharsets.UTF_8));",
                "-      verifier.verify(header.algorithm, message, signature);",
                "+      if (verifier == null) {",
                "+        throw new MissingVerifierException(\"No Verifier has been provided for verify a signature signed using [\" + header.algorithm.getName() + \"]\");",
                "+      }",
                "+",
                "+      // When the verifier has been selected based upon the 'kid' or other identifier in the header, we must verify it can verify the algorithm.",
                "+      // - When multiple verifiers are provided to .decode w/out a kid, we may have already called 'canVerify', this is ok.",
                "+      if (!verifier.canVerify(header.algorithm)) {",
                "+        throw new MissingVerifierException(\"No Verifier has been provided for verify a signature signed using [\" + header.algorithm.getName() + \"]\");",
                "+      }",
                "+",
                "+      verifySignature(verifier, header, parts[2], encodedJWT);",
                "     }",
                "-    JWT jwt = Mapper.deserialize(base64Decode(parts[1].getBytes(StandardCharsets.UTF_8)), JWT.class);",
                "+    // Signature is valid or there is no signature to validate for an un-secured JWT, verify time based JWT claims",
                "+    JWT jwt = Mapper.deserialize(base64Decode(parts[1]), JWT.class);",
                "@@ -194,11 +216,19 @@ public class JWTDecoder {",
                "-  private String[] getParts(String encodedJWT) {",
                "-    String[] parts = encodedJWT.split(\"\\\\.\");",
                "-    // Secured JWT XXXXX.YYYYY.ZZZZZ, Unsecured JWT XXXXX.YYYYY.",
                "-    if (parts.length == 3 || (parts.length == 2 && encodedJWT.endsWith(\".\"))) {",
                "-      return parts;",
                "-    }",
                "+  /**",
                "+   * Verify the signature of the encoded JWT. If the signature is invalid a {@link InvalidJWTSignatureException} will be thrown.",
                "+   *",
                "+   * @param verifier   the verifier",
                "+   * @param header     the JWT header",
                "+   * @param signature  the JWT signature",
                "+   * @param encodedJWT the encoded JWT",
                "+   * @throws InvalidJWTSignatureException if the JWT signature is invalid.",
                "+   */",
                "+  private void verifySignature(Verifier verifier, Header header, String signature, String encodedJWT) {",
                "+    // The message comprises the first two segments of the entire JWT, the signature is the last segment.",
                "+    int index = encodedJWT.lastIndexOf(\".\");",
                "+    byte[] message = encodedJWT.substring(0, index).getBytes(StandardCharsets.UTF_8);",
                "-    throw new InvalidJWTException(\"The encoded JWT is not properly formatted. Expected a three part dot separated string.\");",
                "+    byte[] signatureBytes = base64Decode(signature);",
                "+    verifier.verify(header.algorithm, message, signatureBytes);",
                "   }",
                "-}",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/src/main/java/org/primeframework/jwt/Verifier.java b/src/main/java/org/primeframework/jwt/Verifier.java",
                "index 8495fb3..78ce6af 100644",
                "--- a/src/main/java/org/primeframework/jwt/Verifier.java",
                "+++ b/src/main/java/org/primeframework/jwt/Verifier.java",
                "@@ -19,3 +19,3 @@ package org.primeframework.jwt;",
                " import org.primeframework.jwt.domain.Algorithm;",
                "-import org.primeframework.jwt.domain.MissingVerifierException;",
                "+import org.primeframework.jwt.domain.InvalidJWTSignatureException;",
                "@@ -37,3 +37,3 @@ public interface Verifier {",
                "    * @param signature The signature to verify.",
                "-   * @throws MissingVerifierException If no Signer has been provided to verify the JWT signature.",
                "+   * @throws InvalidJWTSignatureException If the signature is not valid.",
                "    */",
                "diff --git a/src/main/java/org/primeframework/jwt/domain/MissingSignatureException.java b/src/main/java/org/primeframework/jwt/domain/MissingSignatureException.java",
                "new file mode 100644",
                "index 0000000..52d7d73",
                "--- /dev/null",
                "+++ b/src/main/java/org/primeframework/jwt/domain/MissingSignatureException.java",
                "@@ -0,0 +1,28 @@",
                "+/*",
                "+ * Copyright (c) 2018, Inversoft Inc., All Rights Reserved",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,",
                "+ * either express or implied. See the License for the specific",
                "+ * language governing permissions and limitations under the License.",
                "+ */",
                "+",
                "+package org.primeframework.jwt.domain;",
                "+",
                "+/**",
                "+ * No signature was found but one was expected.",
                "+ *",
                "+ * @author Daniel DeGroff",
                "+ */",
                "+public class MissingSignatureException extends JWTException {",
                "+  public MissingSignatureException(String message) {",
                "+    super(message);",
                "+  }",
                "+}",
                "diff --git a/src/main/java/org/primeframework/jwt/domain/NoneNotAllowedException.java b/src/main/java/org/primeframework/jwt/domain/NoneNotAllowedException.java",
                "new file mode 100644",
                "index 0000000..2ba8ecc",
                "--- /dev/null",
                "+++ b/src/main/java/org/primeframework/jwt/domain/NoneNotAllowedException.java",
                "@@ -0,0 +1,25 @@",
                "+/*",
                "+ * Copyright (c) 2018, Inversoft Inc., All Rights Reserved",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,",
                "+ * either express or implied. See the License for the specific",
                "+ * language governing permissions and limitations under the License.",
                "+ */",
                "+",
                "+package org.primeframework.jwt.domain;",
                "+",
                "+/**",
                "+ * An un-secured JWT is may not be decoded.",
                "+ *",
                "+ * @author Daniel DeGroff",
                "+ */",
                "+public class NoneNotAllowedException extends JWTException {",
                "+}"
            ],
            "changed_files": [
                "src/main/java/org/primeframework/jwt/JWTDecoder.java",
                "src/main/java/org/primeframework/jwt/Verifier.java",
                "src/main/java/org/primeframework/jwt/domain/MissingSignatureException.java",
                "src/main/java/org/primeframework/jwt/domain/NoneNotAllowedException.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.3.1",
                "2.0.0",
                "2.1.0",
                "2.1.1",
                "3.0.0",
                "3.0.1",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.1.0",
                "3.1.1",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0",
                "3.4.1",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.5.3",
                "3.6.0",
                "4.0.0",
                "4.0.1",
                "4.1.0",
                "4.2.0",
                "4.2.2",
                "4.3.0",
                "4.3.1",
                "5.0.0",
                "5.1.0",
                "5.1.1",
                "5.1.2",
                "5.2.0",
                "5.2.1",
                "5.2.2",
                "5.2.3",
                "5.2.4",
                "5.3.0",
                "5.3.1",
                "5.3.2",
                "5.3.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: JWTDecoder, JWT, decode",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: src/main/java/org/primeframework/jwt/JWTDecoder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: validation",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: none, signature",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "5732900a4568fc27c48b740dd19f1503268dbdd3",
            "repository": "https://github.com/inversoft/prime-jwt",
            "timestamp": 1525281420,
            "hunks": 18,
            "message": "Compile warnings cleanup, update build files for next patch version.",
            "diff": [
                "diff --git a/build.savant b/build.savant",
                "index 83bf19e..e86a6e9 100644",
                "--- a/build.savant",
                "+++ b/build.savant",
                "@@ -18,3 +18,3 @@ savantVersion = \"1.0.0\"",
                "-project(group: \"com.inversoft\", name: \"prime-jwt\", version: \"1.3.0\", licenses: [\"ApacheV2_0\"]) {",
                "+project(group: \"com.inversoft\", name: \"prime-jwt\", version: \"1.3.1\", licenses: [\"ApacheV2_0\"]) {",
                "diff --git a/pom.xml b/pom.xml",
                "index cc5147f..ae9440e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -8,3 +8,3 @@",
                "   <artifactId>prime-jwt</artifactId>",
                "-  <version>1.3.0</version>",
                "+  <version>1.3.1</version>",
                "   <packaging>jar</packaging>",
                "@@ -62,3 +62,3 @@",
                "       <artifactId>jackson-core</artifactId>",
                "-      <version>2.8.1</version>",
                "+      <version>2.8.8</version>",
                "     </dependency>",
                "@@ -67,3 +67,3 @@",
                "       <artifactId>jackson-databind</artifactId>",
                "-      <version>2.8.1</version>",
                "+      <version>2.8.8</version>",
                "     </dependency>",
                "@@ -72,3 +72,3 @@",
                "       <artifactId>jackson-annotations</artifactId>",
                "-      <version>2.8.1</version>",
                "+      <version>2.8.8</version>",
                "     </dependency>",
                "diff --git a/src/main/java/org/primeframework/jwt/OpenIDConnect.java b/src/main/java/org/primeframework/jwt/OpenIDConnect.java",
                "index 79d63a4..eab4c33 100644",
                "--- a/src/main/java/org/primeframework/jwt/OpenIDConnect.java",
                "+++ b/src/main/java/org/primeframework/jwt/OpenIDConnect.java",
                "@@ -40,2 +40,3 @@ public class OpenIDConnect {",
                "    * @return a hash to be used as the <code>at_hash</code> claim in the Id Token claim payload",
                "+   * @throws NoSuchAlgorithmException Thrown when no provider supports an implementation of the specified algorithm",
                "    */",
                "@@ -51,2 +52,3 @@ public class OpenIDConnect {",
                "    * @return a hash to be used as the <code>c_hash</code> claim in the Id Token claim payload",
                "+   * @throws NoSuchAlgorithmException Thrown when no provider supports an implementation of the specified algorithm",
                "    */",
                "diff --git a/src/main/java/org/primeframework/jwt/Verifier.java b/src/main/java/org/primeframework/jwt/Verifier.java",
                "index 8cf6fc8..8495fb3 100644",
                "--- a/src/main/java/org/primeframework/jwt/Verifier.java",
                "+++ b/src/main/java/org/primeframework/jwt/Verifier.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2016, Inversoft Inc., All Rights Reserved",
                "+ * Copyright (c) 2016-2018, Inversoft Inc., All Rights Reserved",
                "  *",
                "@@ -34,2 +34,3 @@ public interface Verifier {",
                "    *",
                "+   * @param algorithm The algorithm used to verify the JWT signature.",
                "    * @param message   The JWT message. The header and claims, the first two segments of the dot separated JWT.",
                "diff --git a/src/main/java/org/primeframework/jwt/domain/Header.java b/src/main/java/org/primeframework/jwt/domain/Header.java",
                "index fd53017..e4ce555 100644",
                "--- a/src/main/java/org/primeframework/jwt/domain/Header.java",
                "+++ b/src/main/java/org/primeframework/jwt/domain/Header.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2016, Inversoft Inc., All Rights Reserved",
                "+ * Copyright (c) 2016-2018, Inversoft Inc., All Rights Reserved",
                "  *",
                "@@ -51,2 +51,4 @@ public class Header {",
                "    * this object.",
                "+   *",
                "+   * @return a map of properties to be serialized as if they were actual properties of this class.",
                "    */",
                "diff --git a/src/main/java/org/primeframework/jwt/domain/JWT.java b/src/main/java/org/primeframework/jwt/domain/JWT.java",
                "index f620075..5ed8ec6 100644",
                "--- a/src/main/java/org/primeframework/jwt/domain/JWT.java",
                "+++ b/src/main/java/org/primeframework/jwt/domain/JWT.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved",
                "+ * Copyright (c) 2016-2018, Inversoft Inc., All Rights Reserved",
                "  *",
                "@@ -146,2 +146,4 @@ public class JWT {",
                "    * Special getter used to flatten the claims into top level properties. Necessary to correctly serialize this object.",
                "+   *",
                "+   * @return a map of properties to be serialized as if they were actual properties of this class.",
                "    */",
                "@@ -199,2 +201,3 @@ public class JWT {",
                "+    //noinspection unchecked",
                "     return (List<String>) object;",
                "@@ -268,8 +271,9 @@ public class JWT {",
                "-    if (key.equals(\"sub\")) {",
                "-      return subject;",
                "-    } else if (key.equals(\"jti\")) {",
                "-      return uniqueId;",
                "-    } else if (key.equals(\"iss\")) {",
                "-      return issuer;",
                "+    switch (key) {",
                "+      case \"sub\":",
                "+        return subject;",
                "+      case \"jti\":",
                "+        return uniqueId;",
                "+      case \"iss\":",
                "+        return issuer;",
                "     }",
                "diff --git a/src/main/java/org/primeframework/jwt/domain/KeyType.java b/src/main/java/org/primeframework/jwt/domain/KeyType.java",
                "index 01694d0..8f2139b 100644",
                "--- a/src/main/java/org/primeframework/jwt/domain/KeyType.java",
                "+++ b/src/main/java/org/primeframework/jwt/domain/KeyType.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2016, Inversoft Inc., All Rights Reserved",
                "+ * Copyright (c) 2016-2018, Inversoft Inc., All Rights Reserved",
                "  *",
                "@@ -21,3 +21,3 @@ package org.primeframework.jwt.domain;",
                "  * 7518 Section 6.1</a>.",
                "- * <p>",
                "+ *",
                "  * <ul> <li>ES Elliptic Curve [DDS]</li> <li>RSA as defined by  <a href=\"https://tools.ietf.org/html/rfc3447\">RFC",
                "@@ -26,2 +26,3 @@ package org.primeframework.jwt.domain;",
                "  * Currently only the RSA Key Type is implemented and supported in this library.",
                "+ * </p>",
                "  *"
            ],
            "changed_files": [
                "build.savant",
                "pom.xml",
                "src/main/java/org/primeframework/jwt/OpenIDConnect.java",
                "src/main/java/org/primeframework/jwt/Verifier.java",
                "src/main/java/org/primeframework/jwt/domain/Header.java",
                "src/main/java/org/primeframework/jwt/domain/JWT.java",
                "src/main/java/org/primeframework/jwt/domain/KeyType.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.3.1",
                "2.0.0",
                "2.1.0",
                "2.1.1",
                "3.0.0",
                "3.0.1",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.1.0",
                "3.1.1",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0",
                "3.4.1",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.5.3",
                "3.6.0",
                "4.0.0",
                "4.0.1",
                "4.1.0",
                "4.2.0",
                "4.2.2",
                "4.3.0",
                "4.3.1",
                "5.0.0",
                "5.1.0",
                "5.1.1",
                "5.1.2",
                "5.2.0",
                "5.2.1",
                "5.2.2",
                "5.2.3",
                "5.2.4",
                "5.3.0",
                "5.3.1",
                "5.3.2",
                "5.3.3"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: JWT",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: header",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "0429e24e8b6870a121e289b0d933ca4043df8104",
            "repository": "https://github.com/inversoft/prime-jwt",
            "timestamp": 1525714289,
            "hunks": 2,
            "message": "Cleanup",
            "diff": [
                "diff --git a/src/main/java/org/primeframework/jwt/rsa/RSAUtils.java b/src/main/java/org/primeframework/jwt/rsa/RSAUtils.java",
                "index 6e3f7d1..e35a10f 100644",
                "--- a/src/main/java/org/primeframework/jwt/rsa/RSAUtils.java",
                "+++ b/src/main/java/org/primeframework/jwt/rsa/RSAUtils.java",
                "@@ -1,3 +1,3 @@",
                " /*",
                "- * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved",
                "+ * Copyright (c) 2016-2018, Inversoft Inc., All Rights Reserved",
                "  *",
                "@@ -218,3 +218,3 @@ public class RSAUtils {",
                "     while (index < encoded.length()) {",
                "-      sb.append(encoded.substring(index, Math.min(index + lineLength, encoded.length()))).append(\"\\n\");",
                "+      sb.append(encoded, index, Math.min(index + lineLength, encoded.length())).append(\"\\n\");",
                "       index += lineLength;"
            ],
            "changed_files": [
                "src/main/java/org/primeframework/jwt/rsa/RSAUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.3.1",
                "2.0.0",
                "2.1.0",
                "2.1.1",
                "3.0.0",
                "3.0.1",
                "3.0.2",
                "3.0.3",
                "3.0.4",
                "3.1.0",
                "3.1.1",
                "3.1.2",
                "3.1.3",
                "3.1.4",
                "3.1.5",
                "3.1.6",
                "3.1.7",
                "3.2.0",
                "3.3.0",
                "3.3.1",
                "3.4.0",
                "3.4.1",
                "3.5.0",
                "3.5.1",
                "3.5.2",
                "3.5.3",
                "3.6.0",
                "4.0.0",
                "4.0.1",
                "4.1.0",
                "4.2.0",
                "4.2.2",
                "4.3.0",
                "4.3.1",
                "5.0.0",
                "5.1.0",
                "5.1.1",
                "5.1.2",
                "5.2.0",
                "5.2.1",
                "5.2.2",
                "5.2.3",
                "5.2.4",
                "5.3.0",
                "5.3.1",
                "5.3.2",
                "5.3.3"
            ],
            "matched_rules": []
        }
    ]
}
