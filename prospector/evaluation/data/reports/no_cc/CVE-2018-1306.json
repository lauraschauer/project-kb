{
    "advisory_record": {
        "cve_id": "CVE-2018-1306",
        "description": "The PortletV3AnnotatedDemo Multipart Portlet war file code provided in Apache Pluto version 3.0.0 could allow a remote attacker to obtain sensitive information, caused by the failure to restrict path information provided during a file upload. An attacker could exploit this vulnerability to obtain configuration data and other sensitive information.",
        "reserved_timestamp": 1512604800,
        "published_timestamp": 1530057600,
        "updated_timestamp": 1550692621,
        "repository_url": null,
        "references": {
            "": 42,
            "https://www.exploit-db.com/exploits/45396/": 2,
            "http://portals.apache.org/pluto/security.html": 2,
            "http://portals.apache.org/pluto/": 1,
            "http://portals.apache.org/pluto": 1,
            "http://jcp.org/en/jsr/detail?id=362": 1,
            "http://jcp.org/en/jsr/detail?id=286": 1,
            "http://jcp.org/en/jsr/detail?id=168": 1,
            "http://wiki.apache.org/portals/Pluto": 1,
            "https://issues.apache.org/jira/browse/PLUTO": 1,
            "http://maven.apache.org/": 1,
            "https://issues.apache.org/jira/projects/PLUTO/versions/12351085": 1,
            "http://www.apache.org/": 1
        },
        "affected_products": [
            "Multipart",
            "Portlet",
            "Apache",
            "Pluto",
            "Apache Pluto"
        ],
        "versions": {
            "status": "affected",
            "version": "3.0.0"
        },
        "files": [
            "PortletV3AnnotatedDemo"
        ],
        "keywords": [
            "cause",
            "code",
            "obtain",
            "apache",
            "attacker",
            "restrict",
            "information",
            "file",
            "upload",
            "datum",
            "portletv3annotateddemo",
            "version",
            "failure",
            "multipart",
            "configuration",
            "pluto",
            "exploit",
            "provide",
            "portlet",
            "vulnerability",
            "allow",
            "path"
        ],
        "files_extension": [],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "1aa47c8e871c058fc347541a89c94ca34576834b",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1517594375,
            "hunks": 1,
            "message": "PLUTO-678 TCK: Contesting V2AddlRequestTests_SPEC2_11_Render_parameters13 and V3HeaderPortletTests_SPEC15_Header_parameters13",
            "diff": [
                "diff --git a/portlet-tck_3.0/V3HeaderPortletTests/src/main/java/javax/portlet/tck/portlets/HeaderPortletTests_SPEC15_Header.java b/portlet-tck_3.0/V3HeaderPortletTests/src/main/java/javax/portlet/tck/portlets/HeaderPortletTests_SPEC15_Header.java",
                "index e552aba0c..0994f09cb 100644",
                "--- a/portlet-tck_3.0/V3HeaderPortletTests/src/main/java/javax/portlet/tck/portlets/HeaderPortletTests_SPEC15_Header.java",
                "+++ b/portlet-tck_3.0/V3HeaderPortletTests/src/main/java/javax/portlet/tck/portlets/HeaderPortletTests_SPEC15_Header.java",
                "@@ -257,4 +257,4 @@ public class HeaderPortletTests_SPEC15_Header",
                "                   && portletReq.getParameter(\"tr2\") != null",
                "-                  && portletReq.getParameter(\"renderURLTr2\")",
                "-                        .contains(\"tr2:\" + portletReq.getParameter(\"tr2\"))) {",
                "+                  && (portletReq.getParameter(\"renderURLTr2\").contains(\"tr2:\" + portletReq.getParameter(\"tr2\")) ||",
                "+                      portletReq.getParameter(\"renderURLTr2\").contains(\"tr2=\" + portletReq.getParameter(\"tr2\")))) {",
                "                tr2.setTcSuccess(true);"
            ],
            "changed_files": [
                "portlet-tck_3.0/V3HeaderPortletTests/src/main/java/javax/portlet/tck/portlets/HeaderPortletTests_SPEC15_Header.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-678": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "66e71831cb17e36f1a314c112e80f766e6bb9cbe"
                ]
            ],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: portlet",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-678",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3f7184cd91b3129bcb6b7e948ac177baa871b0f4",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1517410863,
            "hunks": 2,
            "message": "PLUTO-686: TCK: Contesting tests that invoke portletConfig.getContainerRuntimeOptions (code review)",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2PortletTests/pom.xml b/portlet-tck_3.0/V2PortletTests/pom.xml",
                "index 953446211..759cb5b73 100644",
                "--- a/portlet-tck_3.0/V2PortletTests/pom.xml",
                "+++ b/portlet-tck_3.0/V2PortletTests/pom.xml",
                "@@ -90,2 +90,4 @@",
                "+      <portlet.descriptor.dir>src/main/webapp/WEB-INF/pluto</portlet.descriptor.dir>",
                "+",
                "    </properties>",
                "@@ -144,3 +146,2 @@",
                "             <expected.value>PORTLET_SCOPE</expected.value>",
                "-            <portlet.descriptor.dir>src/main/webapp/WEB-INF/pluto</portlet.descriptor.dir>",
                "          </properties>"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2PortletTests/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-686": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c573052f11d9b55d105eccf8f7e7d5b42b360dcb"
                ],
                [
                    "no-tag",
                    "a7eeb6f66169b7cefe1ff7ed836bd84646e96c8a"
                ]
            ],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code, portlet",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-686",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eba41878cf1c3bc8fe66188c9673176c2168c5a4",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1512144353,
            "hunks": 1,
            "message": "PLUTO-662 Enable Liferay Friendly URL and disable Liferay CSRF token in order to pass V2AddlRequestTests_SPEC2_11_Action_parameters9 which has an assumption that MimeResponse.createActionURL() will return a URL that dos not contain a query string",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2AddlRequestTests/src/main/webapp/WEB-INF/liferay-portlet.xml b/portlet-tck_3.0/V2AddlRequestTests/src/main/webapp/WEB-INF/liferay-portlet.xml",
                "index dec72e49c..a910d711d 100644",
                "--- a/portlet-tck_3.0/V2AddlRequestTests/src/main/webapp/WEB-INF/liferay-portlet.xml",
                "+++ b/portlet-tck_3.0/V2AddlRequestTests/src/main/webapp/WEB-INF/liferay-portlet.xml",
                "@@ -6,2 +6,5 @@",
                " \t\t<portlet-name>AddlRequestTests_SPEC2_11_Action</portlet-name>",
                "+\t\t<friendly-url-mapper-class>com.liferay.portal.kernel.portlet.DefaultFriendlyURLMapper</friendly-url-mapper-class>",
                "+\t\t<friendly-url-mapping>portlet-tck</friendly-url-mapping>",
                "+\t\t<friendly-url-routes>friendly-url-routes.xml</friendly-url-routes>",
                " \t\t<requires-namespaced-parameters>false</requires-namespaced-parameters>"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2AddlRequestTests/src/main/webapp/WEB-INF/liferay-portlet.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-662": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "18e2e6eab4ee49530fc64c5f185086858b344c47"
                ]
            ],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: dos",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-662",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6f76532516a391233b21d8b192883db4333422d0",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1516046466,
            "hunks": 5,
            "message": "PLUTO-680 TCK: Contestng V2RequestTests_PortletRequest_ApiEvent_isUserInRole1",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2RequestTests/pom.xml b/portlet-tck_3.0/V2RequestTests/pom.xml",
                "index aeac26a88..36f91811b 100644",
                "--- a/portlet-tck_3.0/V2RequestTests/pom.xml",
                "+++ b/portlet-tck_3.0/V2RequestTests/pom.xml",
                "@@ -87,2 +87,4 @@",
                "+      <portal.security.role>pluto</portal.security.role>",
                "+",
                "       <portletrequest.context.path>/tck-V2RequestTests</portletrequest.context.path>",
                "@@ -118,2 +120,3 @@",
                "          <properties>",
                "+            <portal.security.role>User</portal.security.role>",
                "             <portletrequest.context.path>/o/tck-V2RequestTests</portletrequest.context.path>",
                "diff --git a/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiEvent_event.java b/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiEvent_event.java",
                "index 8e4323296..bd64c3a40 100644",
                "--- a/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiEvent_event.java",
                "+++ b/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiEvent_event.java",
                "@@ -698,3 +698,3 @@ public class RequestTests_PortletRequest_ApiEvent_event implements Portlet, Even",
                "       TestResult tr46 = tcd.getTestResultFailed(V2REQUESTTESTS_PORTLETREQUEST_APIEVENT_ISUSERINROLE1);",
                "-      boolean usrole=portletReq.isUserInRole(\"pluto\");",
                "+      boolean usrole=portletReq.isUserInRole(pc.getInitParameter(\"javax.portlet.portal.SECURITY_ROLE\"));",
                "       if(usrole==true) {",
                "diff --git a/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiResource.java b/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiResource.java",
                "index 4de95dda7..f93aa030b 100644",
                "--- a/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiResource.java",
                "+++ b/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiResource.java",
                "@@ -699,3 +699,3 @@ public class RequestTests_PortletRequest_ApiResource implements Portlet, Resourc",
                "       TestResult tr46 = tcd.getTestResultFailed(V2REQUESTTESTS_PORTLETREQUEST_APIRESOURCE_ISUSERINROLE1);",
                "-      boolean usrole=portletReq.isUserInRole(\"pluto\");",
                "+      boolean usrole=portletReq.isUserInRole(pc.getInitParameter(\"javax.portlet.portal.SECURITY_ROLE\"));",
                "       if(usrole==true) {",
                "diff --git a/portlet-tck_3.0/V2RequestTests/src/main/webapp/WEB-INF/web.xml b/portlet-tck_3.0/V2RequestTests/src/main/webapp/WEB-INF/web.xml",
                "index fcc93311d..531fbcc37 100644",
                "--- a/portlet-tck_3.0/V2RequestTests/src/main/webapp/WEB-INF/web.xml",
                "+++ b/portlet-tck_3.0/V2RequestTests/src/main/webapp/WEB-INF/web.xml",
                "@@ -22,2 +22,7 @@",
                "+   <context-param>",
                "+      <param-name>javax.portlet.portal.SECURITY_ROLE</param-name>",
                "+      <param-value>${portal.security.role}</param-value>",
                "+   </context-param>",
                "+",
                "    <context-param>"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2RequestTests/pom.xml",
                "portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiEvent_event.java",
                "portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiResource.java",
                "portlet-tck_3.0/V2RequestTests/src/main/webapp/WEB-INF/web.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-680": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: portlet",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-680",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dd526d5d8205ba01e9b2121ef5ce1700d94b82ae",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1515014118,
            "hunks": 1,
            "message": "PLUTO-674 TCK: Contesting V2EnvironmentTests_PortletContext_ApiRender_getServerInfo1",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortletContext_ApiRender.java b/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortletContext_ApiRender.java",
                "index 05a953d0f..7c15e8e20 100644",
                "--- a/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortletContext_ApiRender.java",
                "+++ b/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortletContext_ApiRender.java",
                "@@ -146,3 +146,3 @@ public class EnvironmentTests_PortletContext_ApiRender implements Portlet {",
                "     String servInfo1 = pc.getServerInfo();",
                "-    if (servInfo1 != null && servInfo1.matches(\"([^ ]+)/([^ ]+) *(.*)\")) {",
                "+    if (servInfo1 != null && servInfo1.matches(\"(.+)/(.+) *(.*)\")) {",
                "       tr0.setTcSuccess(true);"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortletContext_ApiRender.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-674": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: portlet",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-674",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "75353b1fb38c4cdb9982d4895160303d443afb1d",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1515164414,
            "hunks": 6,
            "message": "PLUTO-675 Use parsed display name in V2EnvironmentTests_PortletContext",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortletContext_ApiRender.java b/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortletContext_ApiRender.java",
                "index 7c15e8e20..768618cfe 100644",
                "--- a/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortletContext_ApiRender.java",
                "+++ b/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortletContext_ApiRender.java",
                "@@ -40,2 +40,3 @@ import javax.portlet.tck.beans.JSR286SpecTestCaseDetails;",
                " import javax.portlet.tck.beans.TestResult;",
                "+import javax.portlet.tck.servlet.StartupListener;",
                "@@ -136,2 +137,4 @@ public class EnvironmentTests_PortletContext_ApiRender implements Portlet {",
                "+    String displayName = StartupListener.getDisplayName();",
                "+",
                "     // Create result objects for the tests",
                "@@ -748,3 +751,3 @@ public class EnvironmentTests_PortletContext_ApiRender implements Portlet {",
                "     String getCntName1 = pc.getPortletContextName();",
                "-    if (getCntName1.equals(\"javax.portlet-tck-EnvironmentTests\")) {",
                "+    if (getCntName1.equals(displayName)) {",
                "       tr49.setTcSuccess(true);",
                "@@ -762,3 +765,3 @@ public class EnvironmentTests_PortletContext_ApiRender implements Portlet {",
                "     String getCntName2 = pc.getPortletContextName();",
                "-    if (getCntName2.equals(\"javax.portlet-tck-EnvironmentTests\")) {",
                "+    if (getCntName2.equals(displayName)) {",
                "       tr50.setTcSuccess(true);",
                "@@ -766,3 +769,3 @@ public class EnvironmentTests_PortletContext_ApiRender implements Portlet {",
                "       tr50.appendTcDetail(",
                "-          \"Failed because poetlet context name is not javax.portlet-tck-EnvironmentTests but \"",
                "+          \"Failed because poetlet context name is not \" + displayName + \" but \"",
                "               + getCntName2);",
                "diff --git a/portlet-tck_3.0/V2EnvironmentTests/src/main/webapp/WEB-INF/web.xml b/portlet-tck_3.0/V2EnvironmentTests/src/main/webapp/WEB-INF/web.xml",
                "index 52c4786fe..ee9fa7694 100644",
                "--- a/portlet-tck_3.0/V2EnvironmentTests/src/main/webapp/WEB-INF/web.xml",
                "+++ b/portlet-tck_3.0/V2EnvironmentTests/src/main/webapp/WEB-INF/web.xml",
                "@@ -76,3 +76,5 @@",
                " \t</listener>",
                "-",
                "+   <listener>",
                "+      <listener-class>javax.portlet.tck.servlet.StartupListener</listener-class>",
                "+   </listener>",
                " </web-app>"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortletContext_ApiRender.java",
                "portlet-tck_3.0/V2EnvironmentTests/src/main/webapp/WEB-INF/web.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-675": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: portlet",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-675",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "33cdbe2cf7af2c25c4eac5a3937c90979209e2e3",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1511294168,
            "hunks": 2,
            "message": "PLUTO-662 Liferay compatibility with V2AddlResponseTests_SPEC2_12_Action_cookie1 (which assumes a POST-REDIRECT-GET implementation by the portlet container)",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2AddlResponseTests/src/main/webapp/WEB-INF/liferay-portlet.xml b/portlet-tck_3.0/V2AddlResponseTests/src/main/webapp/WEB-INF/liferay-portlet.xml",
                "index be862ab2f..e7561d033 100644",
                "--- a/portlet-tck_3.0/V2AddlResponseTests/src/main/webapp/WEB-INF/liferay-portlet.xml",
                "+++ b/portlet-tck_3.0/V2AddlResponseTests/src/main/webapp/WEB-INF/liferay-portlet.xml",
                "@@ -6,2 +6,3 @@",
                " \t\t<portlet-name>AddlResponseTests_SPEC2_12_Action</portlet-name>",
                "+\t\t<action-url-redirect>true</action-url-redirect>",
                " \t\t<requires-namespaced-parameters>false</requires-namespaced-parameters>",
                "@@ -10,2 +11,3 @@",
                " \t\t<portlet-name>AddlResponseTests_SPEC2_12_Event</portlet-name>",
                "+\t\t<action-url-redirect>true</action-url-redirect>",
                " \t\t<requires-namespaced-parameters>false</requires-namespaced-parameters>"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2AddlResponseTests/src/main/webapp/WEB-INF/liferay-portlet.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-662": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: portlet",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-662",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ecc5cca240ccfa89d51c938d31778c6533cdd238",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1517695439,
            "hunks": 8,
            "message": "PLUTO-680 TCK: Contesting tests that reference Pluto-specific security roles",
            "diff": [
                "diff --git a/portlet-tck_3.0/V3HeaderPortletTests/pom.xml b/portlet-tck_3.0/V3HeaderPortletTests/pom.xml",
                "index 5353e2d19..daf7c20a4 100644",
                "--- a/portlet-tck_3.0/V3HeaderPortletTests/pom.xml",
                "+++ b/portlet-tck_3.0/V3HeaderPortletTests/pom.xml",
                "@@ -89,2 +89,4 @@",
                "       <additional.pagefile.only>true</additional.pagefile.only>",
                "+",
                "+      <portal.security.role>pluto</portal.security.role>",
                "    </properties>",
                "@@ -102,2 +104,5 @@",
                "             <artifactId>maven-war-plugin</artifactId>",
                "+            <configuration>",
                "+               <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>",
                "+            </configuration>",
                "          </plugin>",
                "@@ -125,2 +130,8 @@",
                "    <profiles>",
                "+      <profile>",
                "+         <id>liferay</id>",
                "+         <properties>",
                "+            <portal.security.role>User</portal.security.role>",
                "+         </properties>",
                "+      </profile>",
                "       <profile>",
                "diff --git a/portlet-tck_3.0/V3HeaderPortletTests/src/main/java/javax/portlet/tck/portlets/HeaderPortletTests_SPEC14_PortletRequest_ApiHeader1.java b/portlet-tck_3.0/V3HeaderPortletTests/src/main/java/javax/portlet/tck/portlets/HeaderPortletTests_SPEC14_PortletRequest_ApiHeader1.java",
                "index 0e05b70ea..e49e43f0d 100644",
                "--- a/portlet-tck_3.0/V3HeaderPortletTests/src/main/java/javax/portlet/tck/portlets/HeaderPortletTests_SPEC14_PortletRequest_ApiHeader1.java",
                "+++ b/portlet-tck_3.0/V3HeaderPortletTests/src/main/java/javax/portlet/tck/portlets/HeaderPortletTests_SPEC14_PortletRequest_ApiHeader1.java",
                "@@ -37,2 +37,3 @@ import javax.portlet.Portlet;",
                " import javax.portlet.PortletConfig;",
                "+import javax.portlet.PortletContext;",
                " import javax.portlet.PortletException;",
                "@@ -839,7 +840,9 @@ public class HeaderPortletTests_SPEC14_PortletRequest_ApiHeader1 implements Port",
                "          TestResult result = tcd.getTestResultFailed(V3HEADERPORTLETTESTS_SPEC14_PORTLETREQUEST_APIHEADER_ISUSERINROLE1);",
                "-         if(portletReq.isUserInRole(\"tckuser\")){",
                "+         PortletContext portletContext = portletReq.getPortletContext();",
                "+         String securityRole = portletContext.getInitParameter(\"javax.portlet.portal.SECURITY_ROLE\");",
                "+         if(portletReq.isUserInRole(securityRole)) {",
                "             result.setTcSuccess(true);",
                "-            result.appendTcDetail(\"User is in \\\"tckuser\\\" role.\");",
                "+            result.appendTcDetail(\"User is in \\\"\" + securityRole + \"\\\" role.\");",
                "          } else {",
                "-            result.appendTcDetail(\"Failed because user is not configured to be in \\\"tckuser\\\" role.\");",
                "+            result.appendTcDetail(\"Failed because user is not configured to be in \\\"\" + securityRole + \"\\\" role.\");",
                "          }",
                "diff --git a/portlet-tck_3.0/V3HeaderPortletTests/src/main/webapp/WEB-INF/web.xml b/portlet-tck_3.0/V3HeaderPortletTests/src/main/webapp/WEB-INF/web.xml",
                "index cc7a71893..5cface27f 100644",
                "--- a/portlet-tck_3.0/V3HeaderPortletTests/src/main/webapp/WEB-INF/web.xml",
                "+++ b/portlet-tck_3.0/V3HeaderPortletTests/src/main/webapp/WEB-INF/web.xml",
                "@@ -20,2 +20,6 @@",
                " <web-app id=\"WebApp_ID\" version=\"2.4\" xmlns=\"http://java.sun.com/xml/ns/j2ee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\">",
                "+<context-param>",
                "+  <param-name>javax.portlet.portal.SECURITY_ROLE</param-name>",
                "+  <param-value>${portal.security.role}</param-value>",
                "+</context-param>",
                " <security-role>"
            ],
            "changed_files": [
                "portlet-tck_3.0/V3HeaderPortletTests/pom.xml",
                "portlet-tck_3.0/V3HeaderPortletTests/src/main/java/javax/portlet/tck/portlets/HeaderPortletTests_SPEC14_PortletRequest_ApiHeader1.java",
                "portlet-tck_3.0/V3HeaderPortletTests/src/main/webapp/WEB-INF/web.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-680": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-680",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d8351e585a8b0d91bb2dc5af3fe5a50bce2fa839",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1515175298,
            "hunks": 6,
            "message": "PLUTO-676 TCK: Contesting V2EnvironmentTests_PortletContext_ApiRender_getRealPath1",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2EnvironmentTests/pom.xml b/portlet-tck_3.0/V2EnvironmentTests/pom.xml",
                "index d32e697e6..3a3119900 100644",
                "--- a/portlet-tck_3.0/V2EnvironmentTests/pom.xml",
                "+++ b/portlet-tck_3.0/V2EnvironmentTests/pom.xml",
                "@@ -90,2 +90,4 @@",
                "+      <portletcontext.getrealpath.supported>true</portletcontext.getrealpath.supported>",
                "+",
                "    </properties>",
                "@@ -102,2 +104,5 @@",
                "             <artifactId>maven-war-plugin</artifactId>",
                "+            <configuration>",
                "+               <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>",
                "+            </configuration>",
                "          </plugin>",
                "@@ -127,2 +132,8 @@",
                "    <profiles>",
                "+      <profile>",
                "+         <id>liferay</id>",
                "+         <properties>",
                "+            <portletcontext.getrealpath.supported>false</portletcontext.getrealpath.supported>",
                "+         </properties>",
                "+      </profile>",
                "       <profile>",
                "diff --git a/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortletContext_ApiRender.java b/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortletContext_ApiRender.java",
                "index 768618cfe..218d604f0 100644",
                "--- a/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortletContext_ApiRender.java",
                "+++ b/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortletContext_ApiRender.java",
                "@@ -368,9 +368,14 @@ public class EnvironmentTests_PortletContext_ApiRender implements Portlet {",
                "     try {",
                "-      if (pc.getRealPath(",
                "-          \"/WEB-INF/V2EnvironmentTests_PortletContext_ApiRender_getMimeType1.html\") != null) {",
                "-        tr16.appendTcDetail(pc",
                "-            .getRealPath(\"/WEB-INF/V2EnvironmentTests_PortletContext_ApiRender_getMimeType1.html\"));",
                "-        tr16.setTcSuccess(true);",
                "+      boolean getRealPathSupported =",
                "+          \"true\".equalsIgnoreCase(pc.getInitParameter(\"javax.portlet.portletcontext.GET_REAL_PATH_SUPPORTED\"));",
                "+      if (getRealPathSupported) {",
                "+        if (pc.getRealPath(\"/WEB-INF/V2EnvironmentTests_PortletContext_ApiRender_getMimeType1.html\") != null) {",
                "+          tr16.appendTcDetail(pc.getRealPath(\"/WEB-INF/V2EnvironmentTests_PortletContext_ApiRender_getMimeType1.html\"));",
                "+          tr16.setTcSuccess(true);",
                "+        } else {",
                "+          tr16.appendTcDetail(\"Failed because real path cannot be determined.\");",
                "+        }",
                "       } else {",
                "-        tr16.appendTcDetail(\"Failed because real path cannot be determined.\");",
                "+        tr16.appendTcDetail(\"Portlet container does not support calling PortletContext.getRealPath() for the requested file.\");",
                "+        tr16.setTcSuccess(true);",
                "       }",
                "diff --git a/portlet-tck_3.0/V2EnvironmentTests/src/main/webapp/WEB-INF/web.xml b/portlet-tck_3.0/V2EnvironmentTests/src/main/webapp/WEB-INF/web.xml",
                "index ee9fa7694..60cfcbae6 100644",
                "--- a/portlet-tck_3.0/V2EnvironmentTests/src/main/webapp/WEB-INF/web.xml",
                "+++ b/portlet-tck_3.0/V2EnvironmentTests/src/main/webapp/WEB-INF/web.xml",
                "@@ -21,3 +21,7 @@",
                "    <display-name>javax.portlet-tck-EnvironmentTests</display-name>",
                "-   ",
                "+",
                "+   <context-param>",
                "+      <param-name>javax.portlet.portletcontext.GET_REAL_PATH_SUPPORTED</param-name>",
                "+      <param-value>${portletcontext.getrealpath.supported}</param-value>",
                "+   </context-param>",
                "    <servlet>"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2EnvironmentTests/pom.xml",
                "portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortletContext_ApiRender.java",
                "portlet-tck_3.0/V2EnvironmentTests/src/main/webapp/WEB-INF/web.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-676": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: portlet, path",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-676",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a1d2a602e0231426cd6e51c22b6a2a024150b1e9",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1511902574,
            "hunks": 33,
            "message": "PLUTO-666 TCK: Contesting AddlResponseTests_SPEC2_12_Render",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2AddlResponseTests/src/main/java/javax/portlet/tck/portlets/AddlResponseTests_SPEC2_12_Render.java b/portlet-tck_3.0/V2AddlResponseTests/src/main/java/javax/portlet/tck/portlets/AddlResponseTests_SPEC2_12_Render.java",
                "index ce47d6582..c0e4774f4 100644",
                "--- a/portlet-tck_3.0/V2AddlResponseTests/src/main/java/javax/portlet/tck/portlets/AddlResponseTests_SPEC2_12_Render.java",
                "+++ b/portlet-tck_3.0/V2AddlResponseTests/src/main/java/javax/portlet/tck/portlets/AddlResponseTests_SPEC2_12_Render.java",
                "@@ -63,2 +63,5 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "+  private static final String NON_STREAMING_BUFFERED_PORTAL_DETECTED =",
                "+    \"<em>NON-STREAMING (BUFFERED) PORTAL DETECTED</em>\";",
                "+",
                "   @Override",
                "@@ -74,2 +77,4 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "     StringWriter writer = new StringWriter();",
                "+    String streamingPortalParam = portletReq.getParameter(\"streamingPortal\");",
                "+    boolean streamingPortal = \"true\".equalsIgnoreCase(streamingPortalParam);",
                "@@ -78,22 +83,33 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "     /* to the portlet during a subsequent Action phase\" */",
                "-    Cookie[] cookies = portletReq.getCookies();",
                "-",
                "-    StringBuilder txt = new StringBuilder(128);",
                "-    txt.append(\"<p>Debug info:\");",
                "-    txt.append(\"<br>\");",
                "-    txt.append(\"# Cookies: \").append(cookies.length).append(\"<br>\");",
                "-    TestResult tr1 = tcd.getTestResultFailed(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE9);",
                "-    for (Cookie c : cookies) {",
                "-      txt.append(\"Name: \").append(c.getName());",
                "-      txt.append(\", Value: \").append(c.getValue()).append(\"<br>\");",
                "-      if (c.getName().equals(\"render_tr1_cookie\") && c.getValue().equals(\"true\")) {",
                "-        txt.append(\"<br>\").append(\"Found my cookie!\").append(\"<br>\");",
                "-        c.setMaxAge(0);",
                "-        c.setValue(\"\");",
                "-        tr1.setTcSuccess(true);",
                "+    if (streamingPortal) {",
                "+      Cookie[] cookies = portletReq.getCookies();",
                "+",
                "+      StringBuilder txt = new StringBuilder(128);",
                "+      txt.append(\"<p>Debug info:\");",
                "+      txt.append(\"<br>\");",
                "+      txt.append(\"# Cookies: \").append(cookies.length).append(\"<br>\");",
                "+      TestResult tr1 =",
                "+          tcd.getTestResultFailed(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE9);",
                "+      for (Cookie c : cookies) {",
                "+        txt.append(\"Name: \").append(c.getName());",
                "+        txt.append(\", Value: \").append(c.getValue()).append(\"<br>\");",
                "+        if (c.getName().equals(\"render_tr1_cookie\") &&",
                "+            c.getValue().equals(\"true\")) {",
                "+          txt.append(\"<br>\").append(\"Found my cookie!\").append(\"<br>\");",
                "+          c.setMaxAge(0);",
                "+          c.setValue(\"\");",
                "+          tr1.setTcSuccess(true);",
                "+        }",
                "       }",
                "+      tr1.writeTo(writer);",
                "+      txt.append(\"</p>\");",
                "+      writer.append(txt.toString());",
                "+    }",
                "+    else {",
                "+      TestResult tr1 =",
                "+          tcd.getTestResultFailed(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE9);",
                "+      tr1.setTcSuccess(true);",
                "+      tr1.setTcDetail(NON_STREAMING_BUFFERED_PORTAL_DETECTED);",
                "+      tr1.writeTo(writer);",
                "     }",
                "-    tr1.writeTo(writer);",
                "-    txt.append(\"</p>\");",
                "-    writer.append(txt.toString());",
                "@@ -103,2 +119,3 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "+    portletResp.setRenderParameter(\"streamingPortal\", Boolean.toString(streamingPortal));",
                "   }",
                "@@ -115,2 +132,4 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "     PrintWriter writer = portletResp.getWriter();",
                "+    String streamingPortalParam = portletReq.getParameter(\"streamingPortal\");",
                "+    boolean streamingPortal = \"true\".equalsIgnoreCase(streamingPortalParam);",
                "@@ -119,22 +138,33 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "     /* to the portlet during the Resource phase\" */",
                "-    Cookie[] cookies = portletReq.getCookies();",
                "-",
                "-    StringBuilder txt = new StringBuilder(128);",
                "-    txt.append(\"<p>Debug info:\");",
                "-    txt.append(\"<br>\");",
                "-    txt.append(\"# Cookies: \").append(cookies.length).append(\"<br>\");",
                "-    TestResult tr1 = tcd.getTestResultFailed(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE8);",
                "-    for (Cookie c : cookies) {",
                "-      txt.append(\"Name: \").append(c.getName());",
                "-      txt.append(\", Value: \").append(c.getValue()).append(\"<br>\");",
                "-      if (c.getName().equals(\"render_tr0_cookie\") && c.getValue().equals(\"true\")) {",
                "-        txt.append(\"<br>\").append(\"Found my cookie!\").append(\"<br>\");",
                "-        c.setMaxAge(0);",
                "-        c.setValue(\"\");",
                "-        tr1.setTcSuccess(true);",
                "+    if (streamingPortal) {",
                "+      Cookie[] cookies = portletReq.getCookies();",
                "+",
                "+      StringBuilder txt = new StringBuilder(128);",
                "+      txt.append(\"<p>Debug info:\");",
                "+      txt.append(\"<br>\");",
                "+      txt.append(\"# Cookies: \").append(cookies.length).append(\"<br>\");",
                "+      TestResult tr1 =",
                "+          tcd.getTestResultFailed(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE8);",
                "+      for (Cookie c : cookies) {",
                "+        txt.append(\"Name: \").append(c.getName());",
                "+        txt.append(\", Value: \").append(c.getValue()).append(\"<br>\");",
                "+        if (c.getName().equals(\"render_tr0_cookie\") &&",
                "+            c.getValue().equals(\"true\")) {",
                "+          txt.append(\"<br>\").append(\"Found my cookie!\").append(\"<br>\");",
                "+          c.setMaxAge(0);",
                "+          c.setValue(\"\");",
                "+          tr1.setTcSuccess(true);",
                "+        }",
                "       }",
                "+      tr1.writeTo(writer);",
                "+      txt.append(\"</p>\");",
                "+      writer.append(txt.toString());",
                "+    }",
                "+    else {",
                "+      TestResult tr1 =",
                "+          tcd.getTestResultFailed(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE8);",
                "+      tr1.setTcSuccess(true);",
                "+      tr1.setTcDetail(NON_STREAMING_BUFFERED_PORTAL_DETECTED);",
                "+      tr1.writeTo(writer);",
                "     }",
                "-    tr1.writeTo(writer);",
                "-    txt.append(\"</p>\");",
                "-    writer.append(txt.toString());",
                "   }",
                "@@ -142,3 +172,3 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "   @Override",
                "-  public void render(RenderRequest portletReq, RenderResponse portletResp)",
                "+  public void render(RenderRequest renderRequest, RenderResponse renderResponse)",
                "       throws PortletException, IOException {",
                "@@ -146,3 +176,3 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "     long tid = Thread.currentThread().getId();",
                "-    portletReq.setAttribute(THREADID_ATTR, tid);",
                "+    renderRequest.setAttribute(THREADID_ATTR, tid);",
                "@@ -152,4 +182,7 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "-    if (\"RENDER_MARKUP\".equals(portletReq.getAttribute(PortletRequest.RENDER_PART))) {",
                "-      PortletSession ps = portletReq.getPortletSession();",
                "+    Object renderPartAttribute = renderRequest.getAttribute(PortletRequest.RENDER_PART);",
                "+    boolean streamingPortal = (renderPartAttribute != null);",
                "+",
                "+    if (!streamingPortal || \"RENDER_MARKUP\".equals(renderPartAttribute)) {",
                "+      PortletSession ps = renderRequest.getPortletSession();",
                "       String msg =",
                "@@ -168,26 +201,25 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "     /* to the portlet during the Resource phase\" */",
                "-    {",
                "-      if (\"RENDER_HEADERS\".equals(portletReq.getAttribute(PortletRequest.RENDER_PART))) {",
                "-        Cookie c = new Cookie(\"render_tr0_cookie\", \"true\");",
                "-        c.setMaxAge(100);",
                "-        c.setPath(\"/\");",
                "-        portletResp.addProperty(c);",
                "-      } else {",
                "-        writer.write(\"<div id=\\\"AddlResponseTests_SPEC2_11_Render\\\">no resource output.</div>\\n\");",
                "-        ResourceURL resurl = portletResp.createResourceURL();",
                "-        resurl.setCacheability(PAGE);",
                "-        writer.write(\"<script>\\n\");",
                "-        writer.write(\"(function () {\\n\");",
                "-        writer.write(\"   var xhr = new XMLHttpRequest();\\n\");",
                "-        writer.write(\"   xhr.onreadystatechange=function() {\\n\");",
                "-        writer.write(\"      if (xhr.readyState==4 && xhr.status==200) {\\n\");",
                "-        writer.write(",
                "-            \"         document.getElementById(\\\"AddlResponseTests_SPEC2_11_Render\\\").innerHTML=xhr.responseText;\\n\");",
                "-        writer.write(\"      }\\n\");",
                "-        writer.write(\"   };\\n\");",
                "-        writer.write(\"   xhr.open(\\\"GET\\\",\\\"\" + resurl.toString() + \"\\\",true);\\n\");",
                "-        writer.write(\"   xhr.send();\\n\");",
                "-        writer.write(\"})();\\n\");",
                "-        writer.write(\"</script>\\n\");",
                "-      }",
                "+    if (\"RENDER_HEADERS\".equals(renderPartAttribute)) {",
                "+      Cookie c = new Cookie(\"render_tr0_cookie\", \"true\");",
                "+      c.setMaxAge(100);",
                "+      c.setPath(\"/\");",
                "+      renderResponse.addProperty(c);",
                "+    } else {",
                "+      writer.write(\"<div id=\\\"AddlResponseTests_SPEC2_11_Render\\\">no resource output.</div>\\n\");",
                "+      ResourceURL resurl = renderResponse.createResourceURL();",
                "+      resurl.setParameter(\"streamingPortal\", Boolean.toString(streamingPortal));",
                "+      resurl.setCacheability(PAGE);",
                "+      writer.write(\"<script>\\n\");",
                "+      writer.write(\"(function () {\\n\");",
                "+      writer.write(\"   var xhr = new XMLHttpRequest();\\n\");",
                "+      writer.write(\"   xhr.onreadystatechange=function() {\\n\");",
                "+      writer.write(\"      if (xhr.readyState==4 && xhr.status==200) {\\n\");",
                "+      writer.write(",
                "+          \"         document.getElementById(\\\"AddlResponseTests_SPEC2_11_Render\\\").innerHTML=xhr.responseText;\\n\");",
                "+      writer.write(\"      }\\n\");",
                "+      writer.write(\"   };\\n\");",
                "+      writer.write(\"   xhr.open(\\\"GET\\\",\\\"\" + resurl.toString() + \"\\\",true);\\n\");",
                "+      writer.write(\"   xhr.send();\\n\");",
                "+      writer.write(\"})();\\n\");",
                "+      writer.write(\"</script>\\n\");",
                "     }",
                "@@ -197,14 +229,13 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "     /* to the portlet during a subsequent Action phase\" */",
                "-    {",
                "-      if (\"RENDER_HEADERS\".equals(portletReq.getAttribute(PortletRequest.RENDER_PART))) {",
                "-        Cookie c = new Cookie(\"render_tr1_cookie\", \"true\");",
                "-        c.setMaxAge(100);",
                "-        c.setPath(\"/\");",
                "-        portletResp.addProperty(c);",
                "-      } else {",
                "-        PortletURL aurl = portletResp.createActionURL();",
                "-        aurl.setParameters(portletReq.getPrivateParameterMap());",
                "-        TestButton tb = new TestButton(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE9, aurl);",
                "-        tb.writeTo(writer);",
                "-      }",
                "+    if (\"RENDER_HEADERS\".equals(renderPartAttribute)) {",
                "+      Cookie c = new Cookie(\"render_tr1_cookie\", \"true\");",
                "+      c.setMaxAge(100);",
                "+      c.setPath(\"/\");",
                "+      renderResponse.addProperty(c);",
                "+    } else {",
                "+      PortletURL aurl = renderResponse.createActionURL();",
                "+      aurl.setParameters(renderRequest.getPrivateParameterMap());",
                "+      aurl.setParameter(\"streamingPortal\", Boolean.toString(streamingPortal));",
                "+      TestButton tb = new TestButton(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE9, aurl);",
                "+      tb.writeTo(writer);",
                "     }",
                "@@ -214,38 +245,54 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "     /* to the portlet during a subsequent Render phase\" */",
                "-    if (\"RENDER_MARKUP\".equals(portletReq.getAttribute(PortletRequest.RENDER_PART))",
                "-        && portletReq.getParameter(\"tr2\") != null",
                "-        && portletReq.getParameter(\"tr2\").equals(\"true\")) {",
                "-      Cookie[] cookies = portletReq.getCookies();",
                "-",
                "-      StringBuilder txt = new StringBuilder(128);",
                "-      txt.append(\"<p>Debug info:\");",
                "-      txt.append(\"<br>\");",
                "-      txt.append(\"# Cookies: \").append(cookies.length).append(\"<br>\");",
                "-      TestResult tr2 = tcd.getTestResultFailed(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE10);",
                "-      for (Cookie c : cookies) {",
                "-        txt.append(\"Name: \").append(c.getName());",
                "-        txt.append(\", Value: \").append(c.getValue()).append(\"<br>\");",
                "-        if (c.getName().equals(\"render_tr2_cookie\") && c.getValue().equals(\"true\")) {",
                "-          txt.append(\"<br>\").append(\"Found my cookie!\").append(\"<br>\");",
                "-          c.setMaxAge(0);",
                "-          c.setValue(\"\");",
                "-          tr2.setTcSuccess(true);",
                "+    if (streamingPortal) {",
                "+      if (\"RENDER_MARKUP\".equals(renderPartAttribute)",
                "+          && renderRequest.getParameter(\"tr2\") != null",
                "+          && renderRequest.getParameter(\"tr2\").equals(\"true\")) {",
                "+        Cookie[] cookies = renderRequest.getCookies();",
                "+",
                "+        StringBuilder txt = new StringBuilder(128);",
                "+        txt.append(\"<p>Debug info:\");",
                "+        txt.append(\"<br>\");",
                "+        txt.append(\"# Cookies: \").append(cookies.length).append(\"<br>\");",
                "+        TestResult tr2 = tcd.getTestResultFailed(",
                "+            V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE10);",
                "+        for (Cookie c : cookies) {",
                "+          txt.append(\"Name: \").append(c.getName());",
                "+          txt.append(\", Value: \").append(c.getValue()).append(\"<br>\");",
                "+          if (c.getName().equals(\"render_tr2_cookie\") &&",
                "+              c.getValue().equals(\"true\")) {",
                "+            txt.append(\"<br>\").append(\"Found my cookie!\").append(\"<br>\");",
                "+            c.setMaxAge(0);",
                "+            c.setValue(\"\");",
                "+            tr2.setTcSuccess(true);",
                "+          }",
                "         }",
                "+        tr2.writeTo(writer);",
                "+        txt.append(\"</p>\");",
                "+        writer.append(txt.toString());",
                "       }",
                "-      tr2.writeTo(writer);",
                "-      txt.append(\"</p>\");",
                "-      writer.append(txt.toString());",
                "-    } else {",
                "-      if (\"RENDER_HEADERS\".equals(portletReq.getAttribute(PortletRequest.RENDER_PART))) {",
                "-        Cookie c = new Cookie(\"render_tr2_cookie\", \"true\");",
                "-        c.setMaxAge(100);",
                "-        c.setPath(\"/\");",
                "-        portletResp.addProperty(c);",
                "-      } else {",
                "-        PortletURL rurl = portletResp.createRenderURL();",
                "-        rurl.setParameters(portletReq.getPrivateParameterMap());",
                "-        rurl.setParameter(\"tr2\", \"true\");",
                "-        TestButton tb = new TestButton(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE10, rurl);",
                "-        tb.writeTo(writer);",
                "+      else {",
                "+        if (\"RENDER_HEADERS\".equals(renderPartAttribute)) {",
                "+          Cookie c = new Cookie(\"render_tr2_cookie\", \"true\");",
                "+          c.setMaxAge(100);",
                "+          c.setPath(\"/\");",
                "+          renderResponse.addProperty(c);",
                "+        }",
                "+        else {",
                "+          PortletURL rurl = renderResponse.createRenderURL();",
                "+          rurl.setParameters(renderRequest.getPrivateParameterMap());",
                "+          rurl.setParameter(\"tr2\", \"true\");",
                "+          rurl.setParameter(\"streamingPortal\", Boolean.toString(streamingPortal));",
                "+          TestButton tb =",
                "+              new TestButton(",
                "+                  V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE10,",
                "+                  rurl);",
                "+          tb.writeTo(writer);",
                "+        }",
                "       }",
                "+    } else {",
                "+      TestResult tr2 = tcd.getTestResultFailed(",
                "+          V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE10);",
                "+      tr2.setTcSuccess(true);",
                "+      tr2.setTcDetail(NON_STREAMING_BUFFERED_PORTAL_DETECTED);",
                "+      tr2.writeTo(writer);",
                "     }",
                "@@ -255,40 +302,55 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "     /* to the portlet during a subsequent request triggered by a URL\" */",
                "-    if (\"RENDER_MARKUP\".equals(portletReq.getAttribute(PortletRequest.RENDER_PART))",
                "-        && portletReq.getParameter(\"tr3\") != null",
                "-        && portletReq.getParameter(\"tr3\").equals(\"true\")) {",
                "-      Cookie[] cookies = portletReq.getCookies();",
                "-",
                "-      StringBuilder txt = new StringBuilder(128);",
                "-      txt.append(\"<p>Debug info:\");",
                "-      txt.append(\"<br>\");",
                "-      txt.append(\"# Cookies: \").append(cookies.length).append(\"<br>\");",
                "-      TestResult tr2 = tcd.getTestResultFailed(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE11);",
                "-      for (Cookie c : cookies) {",
                "-        txt.append(\"Name: \").append(c.getName());",
                "-        txt.append(\", Value: \").append(c.getValue()).append(\"<br>\");",
                "-        if (c.getName().equals(\"render_tr3_cookie\") && c.getValue().equals(\"true\")) {",
                "-          txt.append(\"<br>\").append(\"Found my cookie!\").append(\"<br>\");",
                "-          c.setMaxAge(0);",
                "-          c.setValue(\"\");",
                "-          tr2.setTcSuccess(true);",
                "+    if (streamingPortal) {",
                "+      if (\"RENDER_MARKUP\".equals(renderPartAttribute)",
                "+          && renderRequest.getParameter(\"tr3\") != null",
                "+          && renderRequest.getParameter(\"tr3\").equals(\"true\")) {",
                "+        Cookie[] cookies = renderRequest.getCookies();",
                "+",
                "+        StringBuilder txt = new StringBuilder(128);",
                "+        txt.append(\"<p>Debug info:\");",
                "+        txt.append(\"<br>\");",
                "+        txt.append(\"# Cookies: \").append(cookies.length).append(\"<br>\");",
                "+        TestResult tr2 = tcd.getTestResultFailed(",
                "+            V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE11);",
                "+        for (Cookie c : cookies) {",
                "+          txt.append(\"Name: \").append(c.getName());",
                "+          txt.append(\", Value: \").append(c.getValue()).append(\"<br>\");",
                "+          if (c.getName().equals(\"render_tr3_cookie\") &&",
                "+              c.getValue().equals(\"true\")) {",
                "+            txt.append(\"<br>\").append(\"Found my cookie!\").append(\"<br>\");",
                "+            c.setMaxAge(0);",
                "+            c.setValue(\"\");",
                "+            tr2.setTcSuccess(true);",
                "+          }",
                "         }",
                "+        tr2.writeTo(writer);",
                "+        txt.append(\"</p>\");",
                "+        writer.append(txt.toString());",
                "       }",
                "-      tr2.writeTo(writer);",
                "-      txt.append(\"</p>\");",
                "-      writer.append(txt.toString());",
                "-    } else {",
                "-      if (\"RENDER_HEADERS\".equals(portletReq.getAttribute(PortletRequest.RENDER_PART))) {",
                "-        Cookie c = new Cookie(\"render_tr3_cookie\", \"true\");",
                "-        c.setMaxAge(100);",
                "-        c.setPath(\"/\");",
                "-        portletResp.addProperty(c);",
                "-      } else {",
                "-        PortletURL rurl = portletResp.createRenderURL();",
                "-        rurl.setParameters(portletReq.getPrivateParameterMap());",
                "-        rurl.setParameter(\"tr3\", \"true\");",
                "-        TestButton tb = new TestButton(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE11, rurl);",
                "-        tb.writeTo(writer);",
                "+      else {",
                "+        if (\"RENDER_HEADERS\".equals(renderPartAttribute)) {",
                "+          Cookie c = new Cookie(\"render_tr3_cookie\", \"true\");",
                "+          c.setMaxAge(100);",
                "+          c.setPath(\"/\");",
                "+          renderResponse.addProperty(c);",
                "+        }",
                "+        else {",
                "+          PortletURL rurl = renderResponse.createRenderURL();",
                "+          rurl.setParameters(renderRequest.getPrivateParameterMap());",
                "+          rurl.setParameter(\"tr3\", \"true\");",
                "+          rurl.setParameter(\"streamingPortal\", Boolean.toString(streamingPortal));",
                "+          TestButton tb =",
                "+              new TestButton(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE11,",
                "+                  rurl);",
                "+          tb.writeTo(writer);",
                "+        }",
                "       }",
                "     }",
                "-",
                "+    else {",
                "+      TestResult tr2 = tcd.getTestResultFailed(",
                "+          V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE11);",
                "+      tr2.setTcSuccess(true);",
                "+      tr2.setTcDetail(NON_STREAMING_BUFFERED_PORTAL_DETECTED);",
                "+      tr2.writeTo(writer);",
                "+    }",
                "@@ -300,5 +362,8 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "     TestResult tr5 = tcd.getTestResultFailed(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_CONTENTTYPE5);",
                "-    if (portletReq.getResponseContentType() != null) {",
                "+    if (renderRequest.getResponseContentType() != null) {",
                "       tr5.setTcSuccess(true);",
                "-      tr5.appendTcDetail(\"Content type is: \" + portletReq.getResponseContentType());",
                "+      tr5.appendTcDetail(\"Content type is: \" + renderRequest.getResponseContentType());",
                "+      if (!streamingPortal) {",
                "+        tr5.appendTcDetail(NON_STREAMING_BUFFERED_PORTAL_DETECTED);",
                "+      }",
                "     }",
                "@@ -311,7 +376,10 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "         tcd.getTestResultFailed(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_CHARACTERENCODING4);",
                "-    if (portletResp.getCharacterEncoding().equals(\"UTF-8\")) {",
                "+    if (renderResponse.getCharacterEncoding().equals(\"UTF-8\")) {",
                "       tr8.setTcSuccess(true);",
                "+      if (!streamingPortal) {",
                "+        tr8.appendTcDetail(NON_STREAMING_BUFFERED_PORTAL_DETECTED);",
                "+      }",
                "     } else {",
                "       tr8.appendTcDetail(",
                "-          \"Failed because default character encoding is \" + portletResp.getCharacterEncoding());",
                "+          \"Failed because default character encoding is \" + renderResponse.getCharacterEncoding());",
                "     }",
                "@@ -319,5 +387,4 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "-",
                "-    PrintWriter printWriter = portletResp.getWriter();",
                "-    if (\"RENDER_MARKUP\".equals(portletReq.getAttribute(PortletRequest.RENDER_PART))) {",
                "+    PrintWriter printWriter = renderResponse.getWriter();",
                "+    if (!streamingPortal || \"RENDER_MARKUP\".equals(renderPartAttribute)) {",
                "       printWriter.write(writer.toString());",
                "@@ -328,6 +395,6 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "     /* has been committed are ignored\" */",
                "-    if (\"RENDER_MARKUP\".equals(portletReq.getAttribute(PortletRequest.RENDER_PART))",
                "-        && portletReq.getParameter(\"tr4\") != null",
                "-        && portletReq.getParameter(\"tr4\").equals(\"true\")) {",
                "-      Cookie[] cookies = portletReq.getCookies();",
                "+    if (\"RENDER_MARKUP\".equals(renderPartAttribute)",
                "+        && renderRequest.getParameter(\"tr4\") != null",
                "+        && renderRequest.getParameter(\"tr4\").equals(\"true\")) {",
                "+      Cookie[] cookies = renderRequest.getCookies();",
                "@@ -352,3 +419,3 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "     } else {",
                "-      if (\"RENDER_MARKUP\".equals(portletReq.getAttribute(PortletRequest.RENDER_PART))) {",
                "+      if (\"RENDER_HEADERS\".equals(renderPartAttribute)) {",
                "         Cookie c = new Cookie(\"tr4_cookie\", \"true\");",
                "@@ -356,6 +423,7 @@ public class AddlResponseTests_SPEC2_12_Render extends GenericPortlet {",
                "         c.setPath(\"/\");",
                "-        portletResp.addProperty(c);",
                "-        PortletURL rurl = portletResp.createRenderURL();",
                "-        rurl.setParameters(portletReq.getPrivateParameterMap());",
                "+        renderResponse.addProperty(c);",
                "+        PortletURL rurl = renderResponse.createRenderURL();",
                "+        rurl.setParameters(renderRequest.getPrivateParameterMap());",
                "         rurl.setParameter(\"tr4\", \"true\");",
                "+        rurl.setParameter(\"streamingPortal\", Boolean.toString(streamingPortal));",
                "         TestButton tb = new TestButton(V2ADDLRESPONSETESTS_SPEC2_12_RENDER_COOKIE12, rurl);"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2AddlResponseTests/src/main/java/javax/portlet/tck/portlets/AddlResponseTests_SPEC2_12_Render.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-666": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7a615fcf523afe8ed3b66e20f69fcac45637ffd7"
                ],
                [
                    "no-tag",
                    "0e1b4897af42977293e9437d578563c9e9937d7f"
                ],
                [
                    "no-tag",
                    "25673085f1b6fd50909b156bd685d9f633a88715"
                ]
            ],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-666",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2405b1fcac5c39c7aaee44f4f10882f1153ee432",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1511824597,
            "hunks": 3,
            "message": "PLUTO-670 TCK: Contesting V2AddlRequestTests_SPEC2_11_Action_parameters6, V2AddlRequestTests_SPEC2_11_Event_parameters6, V2AddlRequestTests_SPEC2_11_Render_parameters6, V2AddlRequestTests_SPEC2_11_Resource_parameters6",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Event.java b/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Event.java",
                "index a258d3f6a..7a33a3c61 100644",
                "--- a/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Event.java",
                "+++ b/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Event.java",
                "@@ -208,5 +208,9 @@ public class AddlRequestTests_SPEC2_11_Event implements Portlet, EventPortlet {",
                "       String tr2TestStringArray[] = {\"Modified Value\"};",
                "-      portletReq.getParameterMap().put(\"inputval\", tr2TestStringArray);",
                "-      if (\"V2AddlRequestTests_SPEC2_11_Event_parameters6\"",
                "-          .equals(portletReq.getParameterMap().get(\"inputval\")[0])) {",
                "+      try {",
                "+        portletReq.getParameterMap().put(\"inputval\", tr2TestStringArray);",
                "+        if (\"V2AddlRequestTests_SPEC2_11_Event_parameters6\"",
                "+            .equals(portletReq.getParameterMap().get(\"inputval\")[0])) {",
                "+          tr2.setTcSuccess(true);",
                "+        }",
                "+      } catch (UnsupportedOperationException e) {",
                "         tr2.setTcSuccess(true);",
                "diff --git a/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Render.java b/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Render.java",
                "index 7e1bfc0d3..b0b42a990 100644",
                "--- a/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Render.java",
                "+++ b/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Render.java",
                "@@ -168,5 +168,10 @@ public class AddlRequestTests_SPEC2_11_Render implements Portlet {",
                "           String tr6TestStringArray[] = {\"Modified Value\"};",
                "-          portletReq.getParameterMap().put(\"inputval\", tr6TestStringArray);",
                "-          if (\"V2AddlRequestTests_SPEC2_11_Render_parameters6\"",
                "-              .equals(portletReq.getParameterMap().get(\"inputval\")[0])) {",
                "+          try {",
                "+            portletReq.getParameterMap().put(\"inputval\", tr6TestStringArray);",
                "+            if (\"V2AddlRequestTests_SPEC2_11_Render_parameters6\"",
                "+                .equals(portletReq.getParameterMap().get(\"inputval\")[0])) {",
                "+              tr6.setTcSuccess(true);",
                "+              successTr6 = true;",
                "+            }",
                "+          } catch (UnsupportedOperationException e) {",
                "             tr6.setTcSuccess(true);",
                "diff --git a/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Resource.java b/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Resource.java",
                "index 55cdd51dd..c9c0229eb 100644",
                "--- a/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Resource.java",
                "+++ b/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Resource.java",
                "@@ -110,5 +110,9 @@ public class AddlRequestTests_SPEC2_11_Resource implements Portlet, ResourceServ",
                "           String tr2TestStringArray[] = {\"Modified Value\"};",
                "-          portletReq.getParameterMap().put(\"action\", tr2TestStringArray);",
                "-          if (\"V2AddlRequestTests_SPEC2_11_Resource_parameters6\"",
                "-              .equals(portletReq.getParameterMap().get(\"action\")[0])) {",
                "+          try {",
                "+            portletReq.getParameterMap().put(\"action\", tr2TestStringArray);",
                "+            if (\"V2AddlRequestTests_SPEC2_11_Resource_parameters6\"",
                "+                .equals(portletReq.getParameterMap().get(\"action\")[0])) {",
                "+              tr2.setTcSuccess(true);",
                "+            }",
                "+          } catch (UnsupportedOperationException e) {",
                "             tr2.setTcSuccess(true);"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Event.java",
                "portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Render.java",
                "portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Resource.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-670": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-670",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a21ccfd9e3ccbb7a5d7d5da7551341bbf61ec27d",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1515164330,
            "hunks": 13,
            "message": "PLUTO-675 Parse <display-name> element in web.xml",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/servlet/StartupListener.java b/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/servlet/StartupListener.java",
                "index 75f33338d..373b1fecd 100644",
                "--- a/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/servlet/StartupListener.java",
                "+++ b/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/servlet/StartupListener.java",
                "@@ -34,2 +34,3 @@ public class StartupListener implements ServletContextListener {",
                " \tprivate static Map<String, String> configuredContextParams;",
                "+\tprivate static String displayName;",
                " \tprivate static ServletContext servletContext;",
                "@@ -62,2 +63,3 @@ public class StartupListener implements ServletContextListener {",
                " \t\t\tconfiguredContextParams = webConfig.getConfiguredContextParams();",
                "+\t\t\tdisplayName = webConfig.getDisplayName();",
                " \t\t} catch (Exception e) {",
                "@@ -70,2 +72,6 @@ public class StartupListener implements ServletContextListener {",
                " \t}",
                "+",
                "+\tpublic static String getDisplayName() {",
                "+\t\treturn displayName;",
                "+\t}",
                " }",
                "diff --git a/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/util/WebConfig.java b/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/util/WebConfig.java",
                "index 37cbfae9e..0892d2959 100644",
                "--- a/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/util/WebConfig.java",
                "+++ b/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/util/WebConfig.java",
                "@@ -27,2 +27,3 @@ public class WebConfig {",
                " \tprivate Map<String, String> configuredContextParams;",
                "+\tprivate String displayName;",
                "@@ -32,4 +33,7 @@ public class WebConfig {",
                "-\tpublic WebConfig(Map<String, String> configuredContextParams) {",
                "+\tpublic WebConfig(",
                "+\t\tMap<String, String> configuredContextParams, String displayName) {",
                "+",
                " \t\tthis.configuredContextParams = configuredContextParams;",
                "+\t\tthis.displayName = displayName;",
                " \t}",
                "@@ -39,2 +43,6 @@ public class WebConfig {",
                " \t}",
                "+",
                "+\tpublic String getDisplayName() {",
                "+\t\treturn displayName;",
                "+\t}",
                " }",
                "diff --git a/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/util/WebConfigParser.java b/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/util/WebConfigParser.java",
                "index 65f9a6e4a..a2d4344e4 100644",
                "--- a/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/util/WebConfigParser.java",
                "+++ b/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/util/WebConfigParser.java",
                "@@ -34,2 +34,3 @@ public class WebConfigParser extends SAXHandlerBase {",
                " \tprivate static final String CONTEXT_PARAM = \"context-param\";",
                "+\tprivate static final String DISPLAY_NAME = \"display-name\";",
                " \tprivate static final String PARAM_VALUE = \"param-value\";",
                "@@ -39,3 +40,5 @@ public class WebConfigParser extends SAXHandlerBase {",
                " \tprivate Map<String, String> configuredContextParams;",
                "+\tprivate String displayName;",
                " \tprivate boolean parsingContextParam;",
                "+\tprivate boolean parsingDisplayName;",
                " \tprivate boolean parsingParamName;",
                "@@ -54,3 +57,6 @@ public class WebConfigParser extends SAXHandlerBase {",
                "-\t\tif (parsingContextParam) {",
                "+\t\tif (parsingDisplayName) {",
                "+\t\t\tdisplayName = content.toString().trim();",
                "+\t\t\tparsingDisplayName = false;",
                "+\t\t} else if (parsingContextParam) {",
                "@@ -79,3 +85,3 @@ public class WebConfigParser extends SAXHandlerBase {",
                " \t\t\tsaxParser.parse(inputStream, this);",
                "-\t\t\twebConfig = new WebConfig(this.configuredContextParams);",
                "+\t\t\twebConfig = new WebConfig(this.configuredContextParams, this.displayName);",
                " \t\t\tsaxParser.reset();",
                "@@ -95,3 +101,5 @@ public class WebConfigParser extends SAXHandlerBase {",
                "-\t\tif (localName.equals(CONTEXT_PARAM)) {",
                "+\t\tif (localName.equals(DISPLAY_NAME)) {",
                "+\t\t\tparsingDisplayName = true;",
                "+\t\t} else if (localName.equals(CONTEXT_PARAM)) {",
                " \t\t\tparsingContextParam = true;"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/servlet/StartupListener.java",
                "portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/util/WebConfig.java",
                "portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/util/WebConfigParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-675": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-675",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dbdc55ad2a6cf56c0d6539808f0c47dffbbc2f20",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1512499015,
            "hunks": 1,
            "message": "PLUTO-671 TCK: Contesting V2AddlEnvironmentTests_SPEC2_17_EventPreferences_setValues4",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/portlets/AddlEnvironmentTests_SPEC2_17_EventPreferences_event.java b/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/portlets/AddlEnvironmentTests_SPEC2_17_EventPreferences_event.java",
                "index 31f5c04fa..be48ff659 100644",
                "--- a/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/portlets/AddlEnvironmentTests_SPEC2_17_EventPreferences_event.java",
                "+++ b/portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/portlets/AddlEnvironmentTests_SPEC2_17_EventPreferences_event.java",
                "@@ -124,5 +124,3 @@ public class AddlEnvironmentTests_SPEC2_17_EventPreferences_event implements Por",
                "             portletPrefs.setValues(\"tr0\", (String[])null);",
                "-            if (portletPrefs.getValue(\"tr0\", \"tr0\") == null) {",
                "-               tr0.setTcSuccess(true);",
                "-            }",
                "+            tr0.setTcSuccess(true);",
                "          } catch (Exception e) {"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2AddlEnvironmentTests/src/main/java/javax/portlet/tck/portlets/AddlEnvironmentTests_SPEC2_17_EventPreferences_event.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-671": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-671",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fea0d6d0981a3ae9bae86d3b2b0b73360daa9ba1",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1515164376,
            "hunks": 6,
            "message": "PLUTO-675 Move the web.xml parsing classes to tck-common",
            "diff": [
                "diff --git a/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/servlet/StartupListener.java b/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/servlet/StartupListener.java",
                "new file mode 100644",
                "index 000000000..373b1fecd",
                "--- /dev/null",
                "+++ b/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/servlet/StartupListener.java",
                "@@ -0,0 +1,77 @@",
                "+/*  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ */",
                "+",
                "+package javax.portlet.tck.servlet;",
                "+",
                "+import java.util.Map;",
                "+",
                "+import javax.portlet.tck.util.ResourceReader;",
                "+import javax.portlet.tck.util.WebConfig;",
                "+import javax.portlet.tck.util.WebConfigScanner;",
                "+import javax.servlet.ServletContext;",
                "+import javax.servlet.ServletContextEvent;",
                "+import javax.servlet.ServletContextListener;",
                "+import javax.xml.parsers.SAXParser;",
                "+import javax.xml.parsers.SAXParserFactory;",
                "+",
                "+public class StartupListener implements ServletContextListener {",
                "+",
                "+\tprivate static Map<String, String> configuredContextParams;",
                "+\tprivate static String displayName;",
                "+\tprivate static ServletContext servletContext;",
                "+",
                "+\tpublic static ServletContext getServletContext() {",
                "+\t\treturn servletContext;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void contextDestroyed(ServletContextEvent servletContextEvent) {",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void contextInitialized(ServletContextEvent servletContextEvent) {",
                "+\t\tservletContext = servletContextEvent.getServletContext();",
                "+",
                "+\t\tResourceReader resourceReader = new ResourceReader(servletContext);",
                "+\t\tSAXParserFactory saxParserFactory = SAXParserFactory.newInstance();",
                "+\t\tboolean validating = false;",
                "+\t\tsaxParserFactory.setValidating(validating);",
                "+\t\tsaxParserFactory.setNamespaceAware(true);",
                "+\t\tSAXParser saxParser;",
                "+\t\ttry {",
                "+\t\t\tsaxParser = saxParserFactory.newSAXParser();",
                "+\t\t\tboolean resolveEntities = false;",
                "+\t\t\tboolean scanWebFragments = true;",
                "+\t\t\tWebConfigScanner webConfigScanner = new WebConfigScanner(getClass().getClassLoader(), resourceReader,",
                "+\t\t\t\t\tsaxParser, resolveEntities, scanWebFragments);",
                "+\t\t\tWebConfig webConfig = webConfigScanner.scan();",
                "+\t\t\tconfiguredContextParams = webConfig.getConfiguredContextParams();",
                "+\t\t\tdisplayName = webConfig.getDisplayName();",
                "+\t\t} catch (Exception e) {",
                "+\t\t\te.printStackTrace();",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tpublic static Map<String, String> getConfiguredContextParams() {",
                "+\t\treturn configuredContextParams;",
                "+\t}",
                "+",
                "+\tpublic static String getDisplayName() {",
                "+\t\treturn displayName;",
                "+\t}",
                "+}",
                "diff --git a/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/ResourceReader.java b/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/ResourceReader.java",
                "new file mode 100644",
                "index 000000000..94e04d6dd",
                "--- /dev/null",
                "+++ b/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/ResourceReader.java",
                "@@ -0,0 +1,36 @@",
                "+/*  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ */",
                "+",
                "+package javax.portlet.tck.util;",
                "+",
                "+import java.io.InputStream;",
                "+",
                "+import javax.servlet.ServletContext;",
                "+",
                "+public class ResourceReader {",
                "+",
                "+\tprivate ServletContext servletContext;",
                "+",
                "+\tpublic ResourceReader(ServletContext servletContext) {",
                "+\t\tthis.servletContext = servletContext;",
                "+\t}",
                "+",
                "+\tpublic InputStream getResourceAsStream(String path) {",
                "+\t\treturn servletContext.getResourceAsStream(path);",
                "+\t}",
                "+}",
                "diff --git a/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/SAXHandlerBase.java b/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/SAXHandlerBase.java",
                "new file mode 100644",
                "index 000000000..85fe6826e",
                "--- /dev/null",
                "+++ b/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/SAXHandlerBase.java",
                "@@ -0,0 +1,79 @@",
                "+/*  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ */",
                "+",
                "+package javax.portlet.tck.util;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.StringReader;",
                "+import java.net.URL;",
                "+",
                "+import org.xml.sax.InputSource;",
                "+import org.xml.sax.SAXException;",
                "+import org.xml.sax.helpers.DefaultHandler;",
                "+",
                "+public class SAXHandlerBase extends DefaultHandler {",
                "+",
                "+\t// Protected Data Members",
                "+\tprotected StringBuilder content;",
                "+",
                "+\t// Private Data Members",
                "+\tprivate boolean resolveEntities;",
                "+\tprivate URL url;",
                "+",
                "+\tpublic SAXHandlerBase(boolean resolveEntities) {",
                "+\t\tsuper();",
                "+\t\tthis.resolveEntities = resolveEntities;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void characters(char[] ch, int start, int length) throws SAXException {",
                "+",
                "+\t\tif ((content != null) && (ch != null) && (length > 0)) {",
                "+\t\t\tcontent.append(ch, start, length);",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic InputSource resolveEntity(String publicId, String systemId) throws IOException, SAXException {",
                "+",
                "+\t\tInputSource inputSource = new InputSource(new StringReader(\"\"));",
                "+",
                "+\t\tif (resolveEntities) {",
                "+\t\t\tinputSource = super.resolveEntity(publicId, systemId);",
                "+",
                "+\t\t\tif (inputSource == null) {",
                "+",
                "+\t\t\t\ttry {",
                "+",
                "+\t\t\t\t\t// Note: Not sure why, but following line of code has suffered terrible performance problems.",
                "+\t\t\t\t\t// At times, it could take over a minute for the stream to open. This is why the web.xml",
                "+\t\t\t\t\t// default for resolving entities is false.",
                "+\t\t\t\t\tinputSource = new InputSource(new URL(systemId).openStream());",
                "+\t\t\t\t}",
                "+\t\t\t\tcatch (IOException ioException) {",
                "+",
                "+\t\t\t\t\t// Don't bother logging this as a warning or an error, because we can't assume connectivity to",
                "+\t\t\t\t\t// the Internet to download a public URL.",
                "+\t\t\t\t\tSystem.err.println(\"Unable to download publicId=[\" + publicId + \"], systemId=[\" + systemId + \"], referenced-in=[\" + url +\"]\");",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\treturn inputSource;",
                "+\t}",
                "+}",
                "diff --git a/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/WebConfig.java b/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/WebConfig.java",
                "new file mode 100644",
                "index 000000000..0892d2959",
                "--- /dev/null",
                "+++ b/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/WebConfig.java",
                "@@ -0,0 +1,48 @@",
                "+/*  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ */",
                "+",
                "+package javax.portlet.tck.util;",
                "+",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+",
                "+public class WebConfig {",
                "+",
                "+\t// Private Data Members",
                "+\tprivate Map<String, String> configuredContextParams;",
                "+\tprivate String displayName;",
                "+",
                "+\tpublic WebConfig() {",
                "+\t\tthis.configuredContextParams = new HashMap<String, String>();",
                "+\t}",
                "+",
                "+\tpublic WebConfig(",
                "+\t\tMap<String, String> configuredContextParams, String displayName) {",
                "+",
                "+\t\tthis.configuredContextParams = configuredContextParams;",
                "+\t\tthis.displayName = displayName;",
                "+\t}",
                "+",
                "+\tpublic Map<String, String> getConfiguredContextParams() {",
                "+\t\treturn configuredContextParams;",
                "+\t}",
                "+",
                "+\tpublic String getDisplayName() {",
                "+\t\treturn displayName;",
                "+\t}",
                "+}",
                "diff --git a/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/WebConfigParser.java b/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/WebConfigParser.java",
                "new file mode 100644",
                "index 000000000..a2d4344e4",
                "--- /dev/null",
                "+++ b/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/WebConfigParser.java",
                "@@ -0,0 +1,112 @@",
                "+/*  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ */",
                "+",
                "+package javax.portlet.tck.util;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+",
                "+import javax.xml.parsers.SAXParser;",
                "+",
                "+import org.xml.sax.Attributes;",
                "+import org.xml.sax.SAXException;",
                "+",
                "+public class WebConfigParser extends SAXHandlerBase {",
                "+",
                "+\t// Private Constants",
                "+\tprivate static final String CONTEXT_PARAM = \"context-param\";",
                "+\tprivate static final String DISPLAY_NAME = \"display-name\";",
                "+\tprivate static final String PARAM_VALUE = \"param-value\";",
                "+\tprivate static final String PARAM_NAME = \"param-name\";",
                "+",
                "+\t// Private Data Members",
                "+\tprivate Map<String, String> configuredContextParams;",
                "+\tprivate String displayName;",
                "+\tprivate boolean parsingContextParam;",
                "+\tprivate boolean parsingDisplayName;",
                "+\tprivate boolean parsingParamName;",
                "+\tprivate boolean parsingParamValue;",
                "+\tprivate String paramValue;",
                "+\tprivate String paramName;",
                "+\tprivate SAXParser saxParser;",
                "+",
                "+\tpublic WebConfigParser(SAXParser saxParser, boolean resolveEntities) {",
                "+\t\tsuper(resolveEntities);",
                "+\t\tthis.saxParser = saxParser;",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void endElement(String uri, String localName, String qName) throws SAXException {",
                "+",
                "+\t\tif (parsingDisplayName) {",
                "+\t\t\tdisplayName = content.toString().trim();",
                "+\t\t\tparsingDisplayName = false;",
                "+\t\t} else if (parsingContextParam) {",
                "+",
                "+\t\t\tif (parsingParamName) {",
                "+\t\t\t\tparamName = content.toString().trim();",
                "+\t\t\t\tparsingParamName = false;",
                "+\t\t\t} else if (parsingParamValue) {",
                "+\t\t\t\tparamValue = content.toString().trim();",
                "+\t\t\t\tparsingParamValue = false;",
                "+\t\t\t}",
                "+",
                "+\t\t\tif (CONTEXT_PARAM.equals(qName)) {",
                "+\t\t\t\tSystem.out.println(\"    Found context-param name=\" + paramName + \" value=\" + paramValue);",
                "+\t\t\t\tconfiguredContextParams.put(paramName, paramValue);",
                "+\t\t\t\tparsingContextParam = false;",
                "+\t\t\t}",
                "+\t\t}",
                "+\t}",
                "+",
                "+\tpublic WebConfig parse(InputStream inputStream, WebConfig webConfig) throws IOException {",
                "+",
                "+\t\tMap<String, String> configuredContextParams = webConfig.getConfiguredContextParams();",
                "+\t\tthis.configuredContextParams = new HashMap<String, String>(configuredContextParams);",
                "+",
                "+\t\ttry {",
                "+\t\t\tsaxParser.parse(inputStream, this);",
                "+\t\t\twebConfig = new WebConfig(this.configuredContextParams, this.displayName);",
                "+\t\t\tsaxParser.reset();",
                "+",
                "+\t\t\treturn webConfig;",
                "+\t\t} catch (SAXException e) {",
                "+\t\t\te.printStackTrace();",
                "+\t\t\tthrow new IOException(e.getMessage());",
                "+\t\t}",
                "+\t}",
                "+",
                "+\t@Override",
                "+\tpublic void startElement(String uri, String localName, String elementName, Attributes attributes)",
                "+\t\t\tthrows SAXException {",
                "+",
                "+\t\tcontent = new StringBuilder();",
                "+",
                "+\t\tif (localName.equals(DISPLAY_NAME)) {",
                "+\t\t\tparsingDisplayName = true;",
                "+\t\t} else if (localName.equals(CONTEXT_PARAM)) {",
                "+\t\t\tparsingContextParam = true;",
                "+\t\t} else if (localName.equals(PARAM_NAME)) {",
                "+\t\t\tparsingParamName = true;",
                "+\t\t} else if (localName.equals(PARAM_VALUE)) {",
                "+\t\t\tparsingParamValue = true;",
                "+\t\t}",
                "+\t}",
                "+}",
                "diff --git a/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/WebConfigScanner.java b/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/WebConfigScanner.java",
                "new file mode 100644",
                "index 000000000..ea870a992",
                "--- /dev/null",
                "+++ b/portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/WebConfigScanner.java",
                "@@ -0,0 +1,100 @@",
                "+/*  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ */",
                "+",
                "+package javax.portlet.tck.util;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.net.URL;",
                "+import java.util.Enumeration;",
                "+",
                "+import javax.xml.parsers.SAXParser;",
                "+",
                "+public class WebConfigScanner {",
                "+",
                "+\t// Private Constants",
                "+\tprivate static final String WEB_XML_PATH = \"/WEB-INF/web.xml\";",
                "+\tprivate static final String WEB_FRAGMENT_META_INF_PATH = \"META-INF/web-fragment.xml\";",
                "+",
                "+\t// Private Data Members",
                "+\tprivate ClassLoader classLoader;",
                "+\tprivate boolean resolveEntities;",
                "+\tprivate ResourceReader resourceReader;",
                "+\tprivate SAXParser saxParser;",
                "+\tprivate boolean scanWebFragments;",
                "+",
                "+\tpublic WebConfigScanner(ClassLoader classLoader, ResourceReader resourceReader, SAXParser saxParser,",
                "+\t\t\tboolean resolveEntities, boolean scanWebFragments) {",
                "+\t\tthis.classLoader = classLoader;",
                "+\t\tthis.resourceReader = resourceReader;",
                "+\t\tthis.saxParser = saxParser;",
                "+\t\tthis.resolveEntities = resolveEntities;",
                "+\t\tthis.scanWebFragments = scanWebFragments;",
                "+\t}",
                "+",
                "+\tprotected WebConfigParser newWebConfigParser() {",
                "+\t\treturn new WebConfigParser(saxParser, resolveEntities);",
                "+\t}",
                "+",
                "+\tpublic WebConfig scan() throws IOException {",
                "+",
                "+\t\t// Parse the Servlet 3.0 META-INF/web-fragment.xml descriptor files",
                "+\t\t// found in the classpath.",
                "+\t\tWebConfig webConfig = new WebConfig();",
                "+\t\tInputStream inputStream = null;",
                "+\t\tif (scanWebFragments) {",
                "+\t\t\tEnumeration<URL> webFragmentURLs = classLoader.getResources(WEB_FRAGMENT_META_INF_PATH);",
                "+",
                "+\t\t\tif (webFragmentURLs != null) {",
                "+",
                "+\t\t\t\twhile (webFragmentURLs.hasMoreElements()) {",
                "+\t\t\t\t\tURL webFragmentURL = webFragmentURLs.nextElement();",
                "+\t\t\t\t\tSystem.out.println(\"Processing web-fragment: [\" + webFragmentURL + \"]\");",
                "+\t\t\t\t\tinputStream = webFragmentURL.openStream();",
                "+",
                "+\t\t\t\t\tWebConfigParser webConfigParser = newWebConfigParser();",
                "+",
                "+\t\t\t\t\ttry {",
                "+\t\t\t\t\t\twebConfig = webConfigParser.parse(inputStream, webConfig);",
                "+\t\t\t\t\t\tinputStream.close();",
                "+\t\t\t\t\t} catch (Exception e) {",
                "+\t\t\t\t\t\te.printStackTrace();",
                "+\t\t\t\t\t}",
                "+\t\t\t\t}",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\t// Parse the WEB-INF/web.xml descriptor.",
                "+\t\tinputStream = resourceReader.getResourceAsStream(WEB_XML_PATH);",
                "+",
                "+\t\tif (inputStream != null) {",
                "+\t\t\tSystem.out.println(\"Processing web-app: [\" + WEB_XML_PATH + \"]\");",
                "+",
                "+\t\t\tWebConfigParser webConfigParser = newWebConfigParser();",
                "+",
                "+\t\t\ttry {",
                "+\t\t\t\twebConfig = webConfigParser.parse(inputStream, webConfig);",
                "+\t\t\t} catch (IOException e) {",
                "+\t\t\t\te.printStackTrace();",
                "+\t\t\t\tthrow new IOException(e.getMessage());",
                "+\t\t\t}",
                "+\t\t}",
                "+",
                "+\t\treturn webConfig;",
                "+\t}",
                "+}"
            ],
            "changed_files": [
                "portlet-tck_3.0/common/src/main/java/javax/portlet/tck/servlet/StartupListener.java",
                "portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/ResourceReader.java",
                "portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/SAXHandlerBase.java",
                "portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/WebConfig.java",
                "portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/WebConfigParser.java",
                "portlet-tck_3.0/common/src/main/java/javax/portlet/tck/util/WebConfigScanner.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-675": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-675",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "202a28205cc7e8c93772745a549614009ce0085c",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1510178525,
            "hunks": 35,
            "message": "PLUTO-665 TCK: V3ResourceParametersTests copy+paste error leaves tests unimplemented",
            "diff": [
                "diff --git a/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_1.java b/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_1.java",
                "index 2e29e50e7..0fa5aaf4c 100644",
                "--- a/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_1.java",
                "+++ b/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_1.java",
                "@@ -56,2 +56,4 @@ import static javax.portlet.tck.util.ModuleTestCaseDetails.V3PORTLETPARAMETERSTE",
                "         publicParams = {",
                "+                @PublicRenderParameterDefinition(identifier = \"myPRP1\", qname = @PortletQName(localPart = \"myPRP1\", namespaceURI = \"\")),",
                "+                @PublicRenderParameterDefinition(identifier = \"myPRP2\", qname = @PortletQName(localPart = \"myPRP2\", namespaceURI = \"\")),",
                "                 @PublicRenderParameterDefinition(identifier = \"names_public1\", qname = @PortletQName(localPart = \"names_public1\", namespaceURI = \"\"))",
                "diff --git a/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_3.java b/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_3.java",
                "index b63cb46aa..8f4ffe9a4 100644",
                "--- a/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_3.java",
                "+++ b/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_3.java",
                "@@ -220,3 +220,3 @@ public class PortletParametersTests_SPEC11_3 implements Portlet {",
                "             else {",
                "-                result.appendTcDetail(\"Found correct count of Render parameters.\");",
                "+                result.appendTcDetail(\"Found correct count of Action parameters.\");",
                "             }",
                "@@ -284,4 +284,4 @@ public class PortletParametersTests_SPEC11_3 implements Portlet {",
                "         {",
                "-            RenderParameters actionParams = portletReq.getRenderParameters();",
                "-            if (actionParams.isEmpty()) {",
                "+            RenderParameters renderParams = portletReq.getRenderParameters();",
                "+            if (renderParams.isEmpty()) {",
                "                 ActionURL actionURL = portletResp.createActionURL();",
                "diff --git a/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_4.java b/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_4.java",
                "index 5d2c31405..77ba25319 100644",
                "--- a/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_4.java",
                "+++ b/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_4.java",
                "@@ -20,7 +20,5 @@ package javax.portlet.tck.portlets;",
                "-import javax.portlet.ActionParameters;",
                " import javax.portlet.ActionRequest;",
                " import javax.portlet.ActionResponse;",
                "-import javax.portlet.ActionURL;",
                "-import javax.portlet.MutableActionParameters;",
                "+import javax.portlet.MutableResourceParameters;",
                " import javax.portlet.Portlet;",
                "@@ -32,5 +30,9 @@ import javax.portlet.RenderRequest;",
                " import javax.portlet.RenderResponse;",
                "+import javax.portlet.ResourceParameters;",
                "+import javax.portlet.ResourceRequest;",
                "+import javax.portlet.ResourceResponse;",
                "+import javax.portlet.ResourceServingPortlet;",
                "+import javax.portlet.ResourceURL;",
                " import javax.portlet.annotations.PortletConfiguration;",
                " import javax.portlet.tck.beans.TestResult;",
                "-import javax.portlet.tck.beans.TestSetupLink;",
                " import javax.portlet.tck.util.ModuleTestCaseDetails;",
                "@@ -54,3 +56,3 @@ import static javax.portlet.tck.util.ModuleTestCaseDetails.V3PORTLETPARAMETERSTE",
                " @PortletConfiguration(portletName = \"PortletParametersTests_SPEC11_4\", publicParams = {\"names_public1\"})",
                "-public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "+public class PortletParametersTests_SPEC11_4 implements Portlet, ResourceServingPortlet {",
                "@@ -79,3 +81,7 @@ public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "     @Override",
                "-    public void processAction(ActionRequest portletReq, ActionResponse portletResp) throws PortletException, IOException {",
                "+    public void processAction(ActionRequest request, ActionResponse response) throws PortletException, IOException {",
                "+    }",
                "+",
                "+    @Override",
                "+    public void serveResource(ResourceRequest resourceRequest, ResourceResponse resourceResponse) throws PortletException, IOException {",
                "         ModuleTestCaseDetails tcd = new ModuleTestCaseDetails();",
                "@@ -86,3 +92,3 @@ public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "             TestResult result = tcd.getTestResultFailed(V3PORTLETPARAMETERSTESTS_SPEC11_4_GETNAMES);",
                "-            ActionParameters resourceParameters = portletReq.getActionParameters();",
                "+            ResourceParameters resourceParameters = resourceRequest.getResourceParameters();",
                "             if (!resourceParameters.isEmpty()) {",
                "@@ -110,6 +116,6 @@ public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "                 if (valid) {",
                "-                    result.appendTcDetail(\"successfully set and read ACTION parameter names\");",
                "+                    result.appendTcDetail(\"successfully set and read RESOURCE parameter names\");",
                "                     result.setTcSuccess(true);",
                "                 }",
                "-                PortletSession session = portletReq.getPortletSession();",
                "+                PortletSession session = resourceRequest.getPortletSession();",
                "                 session.setAttribute(SPEC_11_4_GETNAMES_STATUS, result.isTcSuccess());",
                "@@ -123,3 +129,3 @@ public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "             TestResult result = tcd.getTestResultFailed(V3PORTLETPARAMETERSTESTS_SPEC11_4_GETVALUE);",
                "-            ActionParameters resourceParameters = portletReq.getActionParameters();",
                "+            ResourceParameters resourceParameters = resourceRequest.getResourceParameters();",
                "             if (!resourceParameters.isEmpty()) {",
                "@@ -160,3 +166,3 @@ public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "                 }",
                "-                PortletSession session = portletReq.getPortletSession();",
                "+                PortletSession session = resourceRequest.getPortletSession();",
                "                 session.setAttribute(SPEC_11_4_GETVALUE_STATUS, result.isTcSuccess());",
                "@@ -170,3 +176,3 @@ public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "             TestResult result = tcd.getTestResultFailed(V3PORTLETPARAMETERSTESTS_SPEC11_4_GETVALUES);",
                "-            ActionParameters resourceParams = portletReq.getActionParameters();",
                "+            ResourceParameters resourceParams = resourceRequest.getResourceParameters();",
                "             if (!resourceParams.isEmpty()) {",
                "@@ -203,3 +209,3 @@ public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "                 }",
                "-                PortletSession session = portletReq.getPortletSession();",
                "+                PortletSession session = resourceRequest.getPortletSession();",
                "                 session.setAttribute(SPEC_11_4_GETVALUES_STATUS, result.isTcSuccess());",
                "@@ -213,6 +219,6 @@ public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "             TestResult result = tcd.getTestResultSucceeded(V3PORTLETPARAMETERSTESTS_SPEC11_4_SIZE);",
                "-            ActionParameters resourceParams = portletReq.getActionParameters();",
                "+            ResourceParameters resourceParams = resourceRequest.getResourceParameters();",
                "             int expectedCount = (resourceParams.isEmpty()) ? 0 : 7;",
                "             if (expectedCount != resourceParams.size()) {",
                "-                result.appendTcDetail(\"Failed to get correct Action Parameters count, expected: \" + expectedCount + \", found: \" + resourceParams.size());",
                "+                result.appendTcDetail(\"Failed to get correct Resource Parameters count, expected: \" + expectedCount + \", found: \" + resourceParams.size());",
                "                 result.setTcSuccess(false);",
                "@@ -222,3 +228,3 @@ public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "             }",
                "-            PortletSession session = portletReq.getPortletSession();",
                "+            PortletSession session = resourceRequest.getPortletSession();",
                "             session.setAttribute(SPEC_11_4_SIZE_STATUS, result.isTcSuccess());",
                "@@ -231,4 +237,4 @@ public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "         {",
                "-            ActionParameters resourceParams = portletReq.getActionParameters();",
                "-            MutableActionParameters mrp = resourceParams.clone();",
                "+            ResourceParameters resourceParams = resourceRequest.getResourceParameters();",
                "+            MutableResourceParameters mrp = resourceParams.clone();",
                "             TestResult result = tcd.getTestResultSucceeded(V3PORTLETPARAMETERSTESTS_SPEC11_4_CLONE);",
                "@@ -268,5 +274,5 @@ public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "             if (result.isTcSuccess()) {",
                "-                result.setTcDetail(\"Clone on Action parameters successful\");",
                "+                result.setTcDetail(\"Clone on Resource parameters successful\");",
                "             }",
                "-            PortletSession session = portletReq.getPortletSession();",
                "+            PortletSession session = resourceRequest.getPortletSession();",
                "             session.setAttribute(SPEC_11_4_CLONE_STATUS, result.isTcSuccess());",
                "@@ -286,18 +292,31 @@ public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "             if (resourceParams.isEmpty()) {",
                "-                ActionURL resourceURL = portletResp.createActionURL();",
                "-                MutableActionParameters mutableActionParameters = resourceURL.getActionParameters();",
                "+                ResourceURL resourceURL = portletResp.createResourceURL();",
                "+                MutableResourceParameters mutableResourceParameters = resourceURL.getResourceParameters();",
                "                 // Setup Private Tests",
                "-                mutableActionParameters.setValue(\"names_private1\", \"one\");",
                "-                mutableActionParameters.setValue(\"names_private2\", \"two\");",
                "-                mutableActionParameters.setValues(\"names_multi\", \"a\", \"b\", \"c\");",
                "+                mutableResourceParameters.setValue(\"names_private1\", \"one\");",
                "+                mutableResourceParameters.setValue(\"names_private2\", \"two\");",
                "+                mutableResourceParameters.setValues(\"names_multi\", \"a\", \"b\", \"c\");",
                "                 // Setup Public Test",
                "-                mutableActionParameters.setValue(\"names_public1\", \"three\");",
                "-                mutableActionParameters.setValue(\"names_nullok1\", null);",
                "-                mutableActionParameters.setValues(\"names_nullsok2\", null, \"notnull\", null);",
                "+                mutableResourceParameters.setValue(\"names_public1\", \"three\");",
                "+                mutableResourceParameters.setValue(\"names_nullok1\", null);",
                "+                mutableResourceParameters.setValues(\"names_nullsok2\", null, \"notnull\", null);",
                "                 // Setup Encoding Test",
                "-                mutableActionParameters.setValue(\"names_encode1\", \"url&enco ded\");",
                "-                TestSetupLink tb = new TestSetupLink(",
                "-                        V3PORTLETPARAMETERSTESTS_SPEC11_4_GETNAMES,",
                "-                        resourceURL);",
                "-                tb.writeTo(writer);",
                "+                mutableResourceParameters.setValue(\"names_encode1\", \"url&enco ded\");",
                "+",
                "+                writer.write(",
                "+                    \"<div id=\\\"PortletParametersTests_SPEC11_4_Resource\\\">no resource output.</div>\\n\");",
                "+                writer.write(\"<script>\\n\");",
                "+                writer.write(\"(function () {\\n\");",
                "+                writer.write(\"   var xhr = new XMLHttpRequest();\\n\");",
                "+                writer.write(\"   xhr.onreadystatechange=function() {\\n\");",
                "+                writer.write(\"      if (xhr.readyState==4 && xhr.status==200) {\\n\");",
                "+                writer.write(",
                "+                    \"         document.getElementById(\\\"PortletParametersTests_SPEC11_4_Resource\\\").innerHTML=xhr.responseText;\\n\");",
                "+                writer.write(\"      }\\n\");",
                "+                writer.write(\"   };\\n\");",
                "+                writer.write(",
                "+                    \"   xhr.open(\\\"GET\\\",\\\"\" + resourceURL.toString() + \"\\\",true);\\n\");",
                "+                writer.write(\"   xhr.send();\\n\");",
                "+                writer.write(\"})();\\n\");",
                "+                writer.write(\"</script>\\n\");",
                "@@ -306,3 +325,3 @@ public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "                 try {",
                "-                    mutableActionParameters.setValue(null, \"bad\");",
                "+                    mutableResourceParameters.setValue(null, \"bad\");",
                "                 } catch (RuntimeException e) {",
                "@@ -317,3 +336,3 @@ public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "-        /* TestCase: V3ActionParametersTests_SPEC11_4_getNames                        */",
                "+        /* TestCase: V3ResourceParametersTests_SPEC11_4_getNames                        */",
                "         /* Details: \"Returns a set of strings representing the portlet parameter names */",
                "@@ -398,3 +417,3 @@ public class PortletParametersTests_SPEC11_4 implements Portlet {",
                "                 result.setTcSuccess(true);",
                "-                result.setTcDetail(\"Action Clone test is setup and ready to run\");",
                "+                result.setTcDetail(\"Resource Clone test is setup and ready to run\");",
                "                 result.writeTo(writer);",
                "diff --git a/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_4A.java b/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_4A.java",
                "new file mode 100644",
                "index 000000000..031dac0cf",
                "--- /dev/null",
                "+++ b/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_4A.java",
                "@@ -0,0 +1,579 @@",
                "+/*  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ */",
                "+",
                "+package javax.portlet.tck.portlets;",
                "+",
                "+import javax.portlet.ActionParameters;",
                "+import javax.portlet.ActionRequest;",
                "+import javax.portlet.ActionResponse;",
                "+import javax.portlet.ActionURL;",
                "+import javax.portlet.HeaderPortlet;",
                "+import javax.portlet.HeaderRequest;",
                "+import javax.portlet.HeaderResponse;",
                "+import javax.portlet.MutableActionParameters;",
                "+import javax.portlet.MutableRenderParameters;",
                "+import javax.portlet.MutableResourceParameters;",
                "+import javax.portlet.Portlet;",
                "+import javax.portlet.PortletConfig;",
                "+import javax.portlet.PortletException;",
                "+import javax.portlet.PortletRequest;",
                "+import javax.portlet.PortletSession;",
                "+import javax.portlet.RenderParameters;",
                "+import javax.portlet.RenderRequest;",
                "+import javax.portlet.RenderResponse;",
                "+import javax.portlet.ResourceParameters;",
                "+import javax.portlet.ResourceRequest;",
                "+import javax.portlet.ResourceResponse;",
                "+import javax.portlet.ResourceServingPortlet;",
                "+import javax.portlet.ResourceURL;",
                "+import javax.portlet.annotations.PortletConfiguration;",
                "+import javax.portlet.tck.beans.TestCaseDetails;",
                "+import javax.portlet.tck.beans.TestResult;",
                "+import javax.portlet.tck.beans.TestSetupButton;",
                "+import javax.portlet.tck.beans.TestSetupLink;",
                "+import javax.portlet.tck.util.ModuleTestCaseDetails;",
                "+import java.io.IOException;",
                "+import java.io.PrintWriter;",
                "+import java.util.Set;",
                "+",
                "+import static javax.portlet.tck.util.ModuleTestCaseDetails.V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_GETNAMES;",
                "+import static javax.portlet.tck.util.ModuleTestCaseDetails.V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_GETVALUES;",
                "+import static javax.portlet.tck.util.ModuleTestCaseDetails.V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_SIZE;",
                "+import static javax.portlet.tck.util.ModuleTestCaseDetails.V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_GETNAMES;",
                "+import static javax.portlet.tck.util.ModuleTestCaseDetails.V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_SIZE;",
                "+import static javax.portlet.tck.util.ModuleTestCaseDetails.V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_GETVALUES;",
                "+import static javax.portlet.tck.util.ModuleTestCaseDetails.V3PORTLETPARAMETERSTESTS_SPEC11_4A_RENDER_PHASE_GETNAMES;",
                "+import static javax.portlet.tck.util.ModuleTestCaseDetails.V3PORTLETPARAMETERSTESTS_SPEC11_4A_RENDER_PHASE_SIZE;",
                "+import static javax.portlet.tck.util.ModuleTestCaseDetails.V3PORTLETPARAMETERSTESTS_SPEC11_4A_RENDER_PHASE_GETVALUES;",
                "+import static javax.portlet.tck.util.ModuleTestCaseDetails.V3PORTLETPARAMETERSTESTS_SPEC11_4A_RESOURCE_PHASE_GETNAMES;",
                "+import static javax.portlet.tck.util.ModuleTestCaseDetails.V3PORTLETPARAMETERSTESTS_SPEC11_4A_RESOURCE_PHASE_GETVALUES;",
                "+import static javax.portlet.tck.util.ModuleTestCaseDetails.V3PORTLETPARAMETERSTESTS_SPEC11_4A_RESOURCE_PHASE_SIZE;",
                "+",
                "+/**",
                "+ * This portlet implements several test cases for the JSR 362 TCK. The test case names",
                "+ * are defined in the /src/main/resources/xml-resources/additionalTCs.xml",
                "+ * file. The build process will integrate the test case names defined in the",
                "+ * additionalTCs.xml file into the complete list of test case names for execution by the driver.",
                "+ */",
                "+",
                "+@PortletConfiguration(portletName = \"PortletParametersTests_SPEC11_4A\", publicParams = {\"myPRP1\", \"myPRP2\"})",
                "+public class PortletParametersTests_SPEC11_4A implements Portlet,",
                "+    HeaderPortlet, ResourceServingPortlet {",
                "+",
                "+    private PortletConfig portletConfig = null;",
                "+",
                "+    private final static String SPEC_11_4A_ACTION_PHASE_GETNAMES_STATUS = \"SPEC_11_4A_ACTION_PHASE_GETNAMES_STATUS\";",
                "+    private final static String SPEC_11_4A_ACTION_PHASE_GETNAMES_MESSAGE = \"SPEC_11_4A_ACTION_PHASE_GETNAMES_MESSAGE\";",
                "+    private final static String SPEC_11_4A_ACTION_PHASE_GETVALUES_STATUS = \"SPEC_11_4A_ACTION_PHASE_GETVALUES_STATUS\";",
                "+    private final static String SPEC_11_4A_ACTION_PHASE_GETVALUES_MESSAGE = \"SPEC_11_4A_ACTION_PHASE_GETVALUES_MESSAGE\";",
                "+    private final static String SPEC_11_4A_ACTION_PHASE_SIZE_STATUS = \"SPEC_11_4A_ACTION_PHASE_SIZE_STATUS\";",
                "+    private final static String SPEC_11_4A_ACTION_PHASE_SIZE_MESSAGE = \"SPEC_11_4A_ACTION_PHASE_SIZE_MESSAGE\";",
                "+    private final static String SPEC_11_4A_HEADER_PHASE_GETNAMES_STATUS = \"SPEC_11_4A_HEADER_PHASE_GETNAMES_STATUS\";",
                "+    private final static String SPEC_11_4A_HEADER_PHASE_GETNAMES_MESSAGE = \"SPEC_11_4A_HEADER_PHASE_GETNAMES_MESSAGE\";",
                "+    private final static String SPEC_11_4A_HEADER_PHASE_GETVALUES_STATUS = \"SPEC_11_4A_HEADER_PHASE_GETVALUES_STATUS\";",
                "+    private final static String SPEC_11_4A_HEADER_PHASE_GETVALUES_MESSAGE = \"SPEC_11_4A_HEADER_PHASE_GETVALUES_MESSAGE\";",
                "+    private final static String SPEC_11_4A_HEADER_PHASE_SIZE_STATUS = \"SPEC_11_4A_HEADER_PHASE_SIZE_STATUS\";",
                "+    private final static String SPEC_11_4A_HEADER_PHASE_SIZE_MESSAGE = \"SPEC_11_4A_HEADER_PHASE_SIZE_MESSAGE\";",
                "+",
                "+    @Override",
                "+    public void init(PortletConfig config) throws PortletException {",
                "+        this.portletConfig = config;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void destroy() {",
                "+    }",
                "+",
                "+    @Override",
                "+    public void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException, IOException {",
                "+        ModuleTestCaseDetails tcd = new ModuleTestCaseDetails();",
                "+",
                "+        /* TestCase: V3PortletParametersTests_SPEC11_4A_actionPhaseGetNames */",
                "+        /* Details: \"Returns one set of strings containing the action parameter names and another containing the render parameter names */",
                "+        {",
                "+            TestResult result = tcd.getTestResultFailed(V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_GETNAMES);",
                "+            ActionParameters actionParameters = actionRequest.getActionParameters();",
                "+            RenderParameters renderParameters = actionRequest.getRenderParameters();",
                "+            if (!actionParameters.isEmpty()) {",
                "+                boolean valid = true;",
                "+                Set<String> actionParameterNames = actionParameters.getNames();",
                "+                if (!actionParameterNames.contains(\"myActionParam1\")) {",
                "+                    result.appendTcDetail(\"action parameter myActionParam1 not found\");",
                "+                    valid = false;",
                "+                }",
                "+                if (!actionParameterNames.contains(\"myPRP1\")) {",
                "+                    result.appendTcDetail(\"action parameter myPRP1 (same name as public render parameter) not found\");",
                "+                    valid = false;",
                "+                }",
                "+                Set<String> renderParameterNames = renderParameters.getNames();",
                "+                if (!renderParameterNames.contains(\"myRenderParam1\") || renderParameters.isPublic(\"myRenderParam1\")) {",
                "+                    result.appendTcDetail(\"private render parameter myRenderParam1 not found\");",
                "+                    valid = false;",
                "+                }",
                "+                if (!renderParameterNames.contains(\"myPRP1\") || !renderParameters.isPublic(\"myPRP1\")) {",
                "+                    result.appendTcDetail(\"public render parameter myPRP1 not found\");",
                "+                    valid = false;",
                "+                }",
                "+                if (!renderParameterNames.contains(\"myPRP2\") || !renderParameters.isPublic(\"myPRP2\")) {",
                "+                    result.appendTcDetail(\"public render parameter myPRP2 not found\");",
                "+                    valid = false;",
                "+                }",
                "+                if (valid) {",
                "+                    result.appendTcDetail(\"successfully set and read ACTION and RENDER parameter names\");",
                "+                    result.setTcSuccess(true);",
                "+                }",
                "+                PortletSession session = actionRequest.getPortletSession();",
                "+                session.setAttribute(SPEC_11_4A_ACTION_PHASE_GETNAMES_STATUS, result.isTcSuccess());",
                "+                session.setAttribute(SPEC_11_4A_ACTION_PHASE_GETNAMES_MESSAGE, result.getTcDetail());",
                "+            }",
                "+        }",
                "+",
                "+        /* TestCase: V3PortletParametersTests_SPEC11_4A_actionPhaseGetValues */",
                "+        /* Details: \"Returns one string array of action parameter values for a given name, and another with render parameter values for a different name */",
                "+        {",
                "+            TestResult result = tcd.getTestResultFailed(V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_GETVALUES);",
                "+            ActionParameters actionParameters = actionRequest.getActionParameters();",
                "+            RenderParameters renderParameters = actionRequest.getRenderParameters();",
                "+            if (!actionParameters.isEmpty() && !renderParameters.isEmpty()) {",
                "+                boolean valid = true;",
                "+                String[] trPrivate = actionParameters.getValues(\"myActionParam1\");",
                "+                if (trPrivate == null || (trPrivate.length != 3) || !trPrivate[0].equals(\"a\") || !trPrivate[1].equals(\"b\") || !trPrivate[2].equals(\"c\")) {",
                "+                    result.appendTcDetail(\"failed to get action parameter values for myActionParam1\");",
                "+                    valid = false;",
                "+                }",
                "+                trPrivate = actionRequest.getParameterValues(\"myPRP1\");",
                "+                if (trPrivate == null || (trPrivate.length != 4) || !trPrivate[0].equals(\"actionParamValue\") || !trPrivate[1].equals(\"x\") || !trPrivate[2].equals(\"y\") || !trPrivate[3].equals(\"z\")) {",
                "+                    result.appendTcDetail(\"failed to get combined PRP+ACTION parameter values for myPRP1\");",
                "+                    valid = false;",
                "+                }",
                "+                String[] myRenderParam1 = renderParameters.getValues(\"myRenderParam1\");",
                "+                if (myRenderParam1 == null || (myRenderParam1.length != 1) || renderParameters.isPublic(\"myRenderParam1\") || !myRenderParam1[0].equals(\"abc\")) {",
                "+                    result.appendTcDetail(\"failed to get public render parameter value for myRenderParam1\");",
                "+                    valid = false;",
                "+                }",
                "+                String[] myPRP1 = renderParameters.getValues(\"myPRP1\");",
                "+                if (myPRP1 == null || (myPRP1.length != 3) || !renderParameters.isPublic(\"myPRP1\") || !myPRP1[0].equals(\"x\") || !myPRP1[1].equals(\"y\") || !myPRP1[2].equals(\"z\")) {",
                "+                    result.appendTcDetail(\"failed to get public render parameter value for myPRP1\");",
                "+                    valid = false;",
                "+                }",
                "+                String[] myPRP2 = renderParameters.getValues(\"myPRP2\");",
                "+                if (myPRP2 == null || (myPRP2.length != 1) || !renderParameters.isPublic(\"myPRP2\") || !myPRP2[0].equals(\"xyz\")) {",
                "+                    result.appendTcDetail(\"failed to get public render parameter value for myPRP2\");",
                "+                    valid = false;",
                "+                }",
                "+                if (valid) {",
                "+                    result.appendTcDetail(\"successfully getValues on action and render parameters\");",
                "+                    result.setTcSuccess(true);",
                "+                }",
                "+                PortletSession session = actionRequest.getPortletSession();",
                "+                session.setAttribute(SPEC_11_4A_ACTION_PHASE_GETVALUES_STATUS, result.isTcSuccess());",
                "+                session.setAttribute(SPEC_11_4A_ACTION_PHASE_GETVALUES_MESSAGE, result.getTcDetail());",
                "+            }",
                "+        }",
                "+",
                "+        /* TestCase: V3PortletParametersTests_SPEC11_4A_actionPhaseSize */",
                "+        /* Details: \"Returns the number of action and render parameters available\" */",
                "+        {",
                "+            TestResult result = tcd.getTestResultSucceeded(V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_SIZE);",
                "+            ActionParameters actionParams = actionRequest.getActionParameters();",
                "+            RenderParameters renderParams = actionRequest.getRenderParameters();",
                "+            int expectedActionCount = 3; // myActionParam1, inputval, and myPRP1",
                "+            int expectedRenderCount = 3; // myRenderParm1, myPRP1, and myPRP2",
                "+            if (expectedActionCount != actionParams.size()) {",
                "+                result.appendTcDetail(\"Failed to get correct Action Parameters count, expected: \" + expectedActionCount + \", found: \" + actionParams.size());",
                "+                result.setTcSuccess(false);",
                "+            }",
                "+            else if (expectedRenderCount != renderParams.size()) {",
                "+                result.appendTcDetail(\"Failed to get correct Render Parameters count, expected: \" + expectedRenderCount + \", found: \" + renderParams.size());",
                "+                result.setTcSuccess(false);",
                "+            }",
                "+            else {",
                "+                result.appendTcDetail(\"Found correct count of Action and Render parameters.\");",
                "+            }",
                "+            PortletSession session = actionRequest.getPortletSession();",
                "+            session.setAttribute(SPEC_11_4A_ACTION_PHASE_SIZE_STATUS, result.isTcSuccess());",
                "+            session.setAttribute(SPEC_11_4A_ACTION_PHASE_SIZE_MESSAGE, result.getTcDetail());",
                "+        }",
                "+",
                "+        MutableRenderParameters mutableRenderParameters = actionResponse.getRenderParameters();",
                "+        mutableRenderParameters.setValue(\"myPRP2\", \"valueFromActionPhase\");",
                "+    }",
                "+",
                "+    @Override",
                "+    public void renderHeaders(",
                "+        HeaderRequest headerRequest, HeaderResponse headerResponse)",
                "+        throws PortletException, IOException {",
                "+        {",
                "+            RenderParameters renderParameters =",
                "+                headerRequest.getRenderParameters();",
                "+            if (!renderParameters.isEmpty()) {",
                "+                TestCaseDetails tcd = new ModuleTestCaseDetails();",
                "+                executeHeaderRenderTests(tcd, headerRequest, PortletRequest.HEADER_PHASE, renderParameters, null);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void render(RenderRequest renderRequest, RenderResponse renderResponse) throws PortletException, IOException {",
                "+",
                "+        PrintWriter writer = renderResponse.getWriter();",
                "+",
                "+        {",
                "+            RenderParameters renderParameters = renderRequest.getRenderParameters();",
                "+            if (renderParameters.isEmpty()) {",
                "+                ActionURL actionURL = renderResponse.createActionURL();",
                "+                MutableActionParameters mutableActionParameters = actionURL.getActionParameters();",
                "+                // Setup Action Parameter Tests",
                "+                mutableActionParameters.setValues(\"myActionParam1\", \"a\", \"b\", \"c\");",
                "+                mutableActionParameters.setValues(\"myPRP1\", \"actionParamValue\");",
                "+                // Setup Public Render Parameter Test",
                "+                MutableRenderParameters mutableRenderParameters = actionURL.getRenderParameters();",
                "+                mutableRenderParameters.setValues(\"myRenderParam1\", \"abc\");",
                "+                mutableRenderParameters.setValues(\"myPRP1\", \"x\", \"y\", \"z\");",
                "+                mutableRenderParameters.setValues(\"myPRP2\", \"xyz\");",
                "+                TestSetupButton tb = new TestSetupButton(",
                "+                    V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_GETNAMES,",
                "+                    actionURL);",
                "+                tb.writeTo(writer);",
                "+            }",
                "+            else {",
                "+",
                "+                // Setup ResourceURL, XHR, and DOM replacement for the RESOURCE_PHASE",
                "+                writer.write(",
                "+                    \"<div id=\\\"PortletParametersTests_SPEC11_4A_ResourcePhase\\\">no resource output.</div>\\n\");",
                "+                ResourceURL resourceURL = renderResponse.createResourceURL();",
                "+                MutableResourceParameters mutableResourceParameters =",
                "+                    resourceURL.getResourceParameters();",
                "+                mutableResourceParameters.setValues(\"myResourceParam1\", \"1\", \"2\", \"3\");",
                "+                mutableResourceParameters.setValues(\"myPRP2\", \"valueFromResourcePhase\");",
                "+                writer.write(\"<script>\\n\");",
                "+                writer.write(\"(function () {\\n\");",
                "+                writer.write(\"   var xhr = new XMLHttpRequest();\\n\");",
                "+                writer.write(\"   xhr.onreadystatechange=function() {\\n\");",
                "+                writer.write(\"      if (xhr.readyState==4 && xhr.status==200) {\\n\");",
                "+                writer.write(",
                "+                    \"         document.getElementById(\\\"PortletParametersTests_SPEC11_4A_ResourcePhase\\\").innerHTML=xhr.responseText;\\n\");",
                "+                writer.write(\"      }\\n\");",
                "+                writer.write(\"   };\\n\");",
                "+                writer.write(",
                "+                    \"   xhr.open(\\\"GET\\\",\\\"\" + resourceURL.toString() + \"\\\",true);\\n\");",
                "+                writer.write(\"   xhr.send();\\n\");",
                "+                writer.write(\"})();\\n\");",
                "+                writer.write(\"</script>\\n\");",
                "+",
                "+                TestCaseDetails tcd = new ModuleTestCaseDetails();",
                "+",
                "+                writer.write(\"<hr />\");",
                "+",
                "+                /* TestCase: V3PortletParametersTests_SPEC11_4A_headerPhaseGetNames         */",
                "+                /* Details: \"Returns a set of strings containing the render parameter names */",
                "+                tcd.getTestResultFailed(",
                "+                    V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_GETNAMES);",
                "+                TestResult result;",
                "+                result = tcd.getTestResultFailed(V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_GETNAMES);",
                "+                PortletSession session = renderRequest.getPortletSession();",
                "+                Boolean success = (Boolean) session.getAttribute(SPEC_11_4A_HEADER_PHASE_GETNAMES_STATUS);",
                "+                String message = (String) session.getAttribute(SPEC_11_4A_HEADER_PHASE_GETNAMES_MESSAGE);",
                "+                result.setTcSuccess(success);",
                "+                result.setTcDetail(message);",
                "+                result.writeTo(writer);",
                "+                session.removeAttribute(SPEC_11_4A_HEADER_PHASE_GETNAMES_STATUS);",
                "+                session.removeAttribute(SPEC_11_4A_HEADER_PHASE_GETNAMES_MESSAGE);",
                "+",
                "+                /* TestCase: V3PortletParametersTests_SPEC11_4A_headerPhaseGetValues            */",
                "+                /* Details: \"Returns a string array of render parameter values for a given name */",
                "+                result = tcd.getTestResultFailed(V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_GETVALUES);",
                "+                session = renderRequest.getPortletSession();",
                "+                success = (Boolean) session.getAttribute(SPEC_11_4A_HEADER_PHASE_GETVALUES_STATUS);",
                "+                message = (String) session.getAttribute(SPEC_11_4A_HEADER_PHASE_GETVALUES_MESSAGE);",
                "+                result.setTcSuccess(success);",
                "+                result.setTcDetail(message);",
                "+                result.writeTo(writer);",
                "+                session.removeAttribute(SPEC_11_4A_HEADER_PHASE_GETVALUES_STATUS);",
                "+                session.removeAttribute(SPEC_11_4A_HEADER_PHASE_GETVALUES_MESSAGE);",
                "+",
                "+                /* TestCase: V3PortletParametersTests_SPEC11_4A_headerPhaseSize            */",
                "+                /* Details: \"Returns the number of action and render parameters available\" */",
                "+                result = tcd.getTestResultFailed(V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_SIZE);",
                "+                session = renderRequest.getPortletSession();",
                "+                success = (Boolean) session.getAttribute(SPEC_11_4A_HEADER_PHASE_SIZE_STATUS);",
                "+                message = (String) session.getAttribute(SPEC_11_4A_HEADER_PHASE_SIZE_MESSAGE);",
                "+                result.setTcSuccess(success);",
                "+                result.setTcDetail(message);",
                "+                result.writeTo(writer);",
                "+                session.removeAttribute(SPEC_11_4A_HEADER_PHASE_SIZE_STATUS);",
                "+                session.removeAttribute(SPEC_11_4A_HEADER_PHASE_SIZE_MESSAGE);",
                "+",
                "+                executeHeaderRenderTests(tcd, renderRequest, PortletRequest.RENDER_PHASE, renderParameters, writer);",
                "+",
                "+                /* TestCase: V3PortletParametersTests_SPEC11_4A_actionPhaseGetNames            */",
                "+                /* Details: \"Returns a set of strings representing the portlet parameter names */",
                "+                tcd.getTestResultFailed(",
                "+                    V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_GETNAMES);",
                "+                writer.write(\"<hr />\");",
                "+                result = tcd.getTestResultFailed(V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_GETNAMES);",
                "+                session = renderRequest.getPortletSession();",
                "+                success = (Boolean) session.getAttribute(SPEC_11_4A_ACTION_PHASE_GETNAMES_STATUS);",
                "+                message = (String) session.getAttribute(SPEC_11_4A_ACTION_PHASE_GETNAMES_MESSAGE);",
                "+                result.setTcSuccess(success);",
                "+                result.setTcDetail(message);",
                "+                result.writeTo(writer);",
                "+                session.removeAttribute(SPEC_11_4A_ACTION_PHASE_GETNAMES_STATUS);",
                "+                session.removeAttribute(SPEC_11_4A_ACTION_PHASE_GETNAMES_MESSAGE);",
                "+",
                "+                /* TestCase: V3PortletParametersTests_SPEC11_4A_actionPhaseGetValues          */",
                "+                /* Details: \"Returns all action parameter values as a string array for a name */",
                "+                result = tcd.getTestResultFailed(V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_GETVALUES);",
                "+                session = renderRequest.getPortletSession();",
                "+                success = (Boolean) session.getAttribute(SPEC_11_4A_ACTION_PHASE_GETVALUES_STATUS);",
                "+                message = (String) session.getAttribute(SPEC_11_4A_ACTION_PHASE_GETVALUES_MESSAGE);",
                "+                result.setTcSuccess(success);",
                "+                result.setTcDetail(message);",
                "+                result.writeTo(writer);",
                "+                session.removeAttribute(SPEC_11_4A_ACTION_PHASE_GETVALUES_STATUS);",
                "+                session.removeAttribute(SPEC_11_4A_ACTION_PHASE_GETVALUES_MESSAGE);",
                "+",
                "+                /* TestCase: V3PortletParametersTests_SPEC11_4A_actionPhaseSize            */",
                "+                /* Details: \"Returns the number of action and render parameters available\" */",
                "+                result = tcd.getTestResultFailed(V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_SIZE);",
                "+                session = renderRequest.getPortletSession();",
                "+                success = (Boolean) session.getAttribute(SPEC_11_4A_ACTION_PHASE_SIZE_STATUS);",
                "+                message = (String) session.getAttribute(SPEC_11_4A_ACTION_PHASE_SIZE_MESSAGE);",
                "+                result.setTcSuccess(success);",
                "+                result.setTcDetail(message);",
                "+                result.writeTo(writer);",
                "+                session.removeAttribute(SPEC_11_4A_ACTION_PHASE_SIZE_STATUS);",
                "+                session.removeAttribute(SPEC_11_4A_ACTION_PHASE_SIZE_MESSAGE);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    private void executeHeaderRenderTests(TestCaseDetails tcd, RenderRequest renderRequest, String lifecyclePhase,",
                "+                                          RenderParameters renderParameters, PrintWriter writer)",
                "+        throws IOException {",
                "+",
                "+        boolean headerPhase = PortletRequest.HEADER_PHASE.equals(lifecyclePhase);",
                "+",
                "+        if (writer != null) {",
                "+            writer.write(\"<hr />\");",
                "+        }",
                "+",
                "+        Set<String> renderParameterNames = renderParameters.getNames();",
                "+        TestResult result;",
                "+        if (headerPhase) {",
                "+            /* TestCase: V3PortletParametersTests_SPEC11_4A_headerPhaseGetNames */",
                "+            /* Details: \"Returns a set of strings containing the render parameter names */",
                "+            result = tcd.getTestResultSucceeded(V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_GETNAMES);",
                "+        }",
                "+        else {",
                "+            /* TestCase: V3PortletParametersTests_SPEC11_4A_renderPhaseGetNames */",
                "+            /* Details: \"Returns a set of strings containing the render parameter names */",
                "+            result = tcd.getTestResultSucceeded(V3PORTLETPARAMETERSTESTS_SPEC11_4A_RENDER_PHASE_GETNAMES);",
                "+        }",
                "+        if (!renderParameterNames.contains(\"myRenderParam1\") || renderParameters.isPublic(\"myRenderParam1\")) {",
                "+            result.appendTcDetail(\"private render parameter myRenderParam1 not found\");",
                "+            result.setTcSuccess(false);",
                "+        }",
                "+        else if (!renderParameterNames.contains(\"myPRP1\") || !renderParameters.isPublic(\"myPRP1\")) {",
                "+            result.appendTcDetail(\"public render parameter myPRP1 not found\");",
                "+            result.setTcSuccess(false);",
                "+        }",
                "+        else if (!renderParameterNames.contains(\"myPRP2\") || !renderParameters.isPublic(\"myPRP2\")) {",
                "+            result.appendTcDetail(\"public render parameter myPRP2 not found\");",
                "+            result.setTcSuccess(false);",
                "+        }",
                "+        else {",
                "+            result.appendTcDetail(\"successfully read RENDER parameter names\");",
                "+        }",
                "+        if (headerPhase) {",
                "+            PortletSession session = renderRequest.getPortletSession();",
                "+            session.setAttribute(SPEC_11_4A_HEADER_PHASE_GETNAMES_STATUS, result.isTcSuccess());",
                "+            session.setAttribute(SPEC_11_4A_HEADER_PHASE_GETNAMES_MESSAGE, result.getTcDetail());",
                "+        }",
                "+        else {",
                "+            result.writeTo(writer);",
                "+        }",
                "+",
                "+        if (headerPhase) {",
                "+            /* TestCase: V3PortletParametersTests_SPEC11_4A_headerPhaseGetValues */",
                "+            /* Details: \"Returns a string array of render parameter values for a given name */",
                "+            result = tcd.getTestResultSucceeded(V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_GETVALUES);",
                "+        }",
                "+        else {",
                "+            /* TestCase: V3PortletParametersTests_SPEC11_4A_renderPhaseGetValues */",
                "+            /* Details: \"Returns a string array of render parameter values for a given name */",
                "+            result = tcd.getTestResultSucceeded(V3PORTLETPARAMETERSTESTS_SPEC11_4A_RENDER_PHASE_GETVALUES);",
                "+        }",
                "+        String[] myRenderParam1 = renderParameters.getValues(\"myRenderParam1\");",
                "+        String[] myPRP1 = renderParameters.getValues(\"myPRP1\");",
                "+        String[] myPRP2 = renderParameters.getValues(\"myPRP2\");",
                "+        if ((myRenderParam1 == null) || (myRenderParam1.length != 1) || renderParameters.isPublic(\"myRenderParam1\") || !myRenderParam1[0].equals(\"abc\")) {",
                "+            result.appendTcDetail(\"failed to get public render parameter value for myRenderParam1\");",
                "+            result.setTcSuccess(false);",
                "+        }",
                "+        else if (myPRP1 == null || (myPRP1.length != 3) || !renderParameters.isPublic(\"myPRP1\") || !myPRP1[0].equals(\"x\") || !myPRP1[1].equals(\"y\") || !myPRP1[2].equals(\"z\")) {",
                "+            result.appendTcDetail(\"failed to get public render parameter value for myPRP1\");",
                "+            result.setTcSuccess(false);",
                "+        }",
                "+        else if ((myPRP2 == null) || (myPRP2.length != 1) || !renderParameters.isPublic(\"myPRP2\") || !myPRP2[0].equals(\"valueFromActionPhase\")) {",
                "+            result.appendTcDetail(\"failed to get public render parameter value for myPRP2\");",
                "+            result.setTcSuccess(false);",
                "+        }",
                "+        else {",
                "+            result.appendTcDetail(\"successfully getValues on render parameters\");",
                "+        }",
                "+        if (headerPhase) {",
                "+            PortletSession session = renderRequest.getPortletSession();",
                "+            session.setAttribute(SPEC_11_4A_HEADER_PHASE_GETVALUES_STATUS, result.isTcSuccess());",
                "+            session.setAttribute(SPEC_11_4A_HEADER_PHASE_GETVALUES_MESSAGE, result.getTcDetail());",
                "+        }",
                "+        else {",
                "+            result.writeTo(writer);",
                "+        }",
                "+",
                "+        if (headerPhase) {",
                "+            /* TestCase: V3PortletParametersTests_SPEC11_4A_headerPhaseSize */",
                "+            /* Details: \"Returns the number of action and render parameters available\" */",
                "+            result = tcd.getTestResultSucceeded(V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_SIZE);",
                "+        }",
                "+        else {",
                "+            /* TestCase: V3PortletParametersTests_SPEC11_4A_renderPhaseSize */",
                "+            /* Details: \"Returns the number of action and render parameters available\" */",
                "+            result = tcd.getTestResultSucceeded(V3PORTLETPARAMETERSTESTS_SPEC11_4A_RENDER_PHASE_SIZE);",
                "+        }",
                "+        int expectedCount = 3; // myRenderParam1, myPRP1, and myPRP2",
                "+        if (expectedCount != renderParameters.size()) {",
                "+            result.appendTcDetail(\"Failed to get correct Render Parameters count, expected: \" + expectedCount + \", found: \" + renderParameters.size());",
                "+            result.setTcSuccess(false);",
                "+        }",
                "+        else {",
                "+            result.appendTcDetail(\"Found correct count of Render parameters.\");",
                "+        }",
                "+        if (headerPhase) {",
                "+            PortletSession session = renderRequest.getPortletSession();",
                "+            session.setAttribute(SPEC_11_4A_HEADER_PHASE_SIZE_STATUS, result.isTcSuccess());",
                "+            session.setAttribute(SPEC_11_4A_HEADER_PHASE_SIZE_MESSAGE, result.getTcDetail());",
                "+        }",
                "+        else {",
                "+            result.writeTo(writer);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void serveResource(",
                "+        ResourceRequest resourceRequest, ResourceResponse resourceResponse)",
                "+        throws PortletException, IOException {",
                "+",
                "+        PrintWriter writer = resourceResponse.getWriter();",
                "+        ModuleTestCaseDetails tcd = new ModuleTestCaseDetails();",
                "+",
                "+        /* TestCase: V3PortletParametersTests_SPEC11_4A_resourcePhaseGetNames */",
                "+        /* Details: \"Returns one set of strings containing the resource parameter names and another containing the render parameter names */",
                "+        {",
                "+            TestResult result = tcd.getTestResultFailed(V3PORTLETPARAMETERSTESTS_SPEC11_4A_RESOURCE_PHASE_GETNAMES);",
                "+            ResourceParameters resourceParameters = resourceRequest.getResourceParameters();",
                "+            RenderParameters renderParameters = resourceRequest.getRenderParameters();",
                "+            if (!resourceParameters.isEmpty()) {",
                "+                boolean valid = true;",
                "+                Set<String> resourceParameterNames = resourceParameters.getNames();",
                "+                if (!resourceParameterNames.contains(\"myResourceParam1\")) {",
                "+                    result.appendTcDetail(\"resource parameter myResourceParam1 not found\");",
                "+                    valid = false;",
                "+                }",
                "+                Set<String> renderParameterNames = renderParameters.getNames();",
                "+                if (!renderParameterNames.contains(\"myPRP1\") || !renderParameters.isPublic(\"myPRP1\")) {",
                "+                    result.appendTcDetail(\"public render parameter myPRP1 not found\");",
                "+                    valid = false;",
                "+                }",
                "+                if (valid) {",
                "+                    result.appendTcDetail(\"successfully set and read RESOURCE and RENDER parameter names\");",
                "+                    result.setTcSuccess(true);",
                "+                }",
                "+            }",
                "+            result.writeTo(writer);",
                "+        }",
                "+",
                "+        /* TestCase: V3PortletParametersTests_SPEC11_4A_resourcePhaseGetValues */",
                "+        /* Details: \"Returns one string array of resource parameter values for a given name, and another with render parameter values for a different name */",
                "+        {",
                "+            TestResult result = tcd.getTestResultFailed(V3PORTLETPARAMETERSTESTS_SPEC11_4A_RESOURCE_PHASE_GETVALUES);",
                "+            ResourceParameters resourceParameters = resourceRequest.getResourceParameters();",
                "+            RenderParameters renderParameters = resourceRequest.getRenderParameters();",
                "+            if (!resourceParameters.isEmpty() && !renderParameters.isEmpty()) {",
                "+                boolean valid = true;",
                "+                String[] trPrivate = resourceParameters.getValues(\"myResourceParam1\");",
                "+                if (trPrivate == null || (trPrivate.length != 3) || !trPrivate[0].equals(\"1\") || !trPrivate[1].equals(\"2\") || !trPrivate[2].equals(\"3\")) {",
                "+                    result.appendTcDetail(\"failed to get resource parameter values for myResourceParam1\");",
                "+                    valid = false;",
                "+                }",
                "+                String[] myPRP2 = resourceParameters.getValues(\"myPRP2\");",
                "+                if (myPRP2 == null || (myPRP2.length != 1) || !myPRP2[0].equals(\"valueFromResourcePhase\")) {",
                "+                    result.appendTcDetail(\"failed to get RESOURCE parameter value for myPRP2\");",
                "+                    valid = false;",
                "+                }",
                "+                myPRP2 = resourceRequest.getParameterValues(\"myPRP2\");",
                "+                if (myPRP2 == null || (myPRP2.length != 2) || !myPRP2[0].equals(\"valueFromResourcePhase\") || !myPRP2[1].equals(\"valueFromActionPhase\")) {",
                "+                    result.appendTcDetail(\"failed to get combined PRP+RESOURCE parameter values for myPRP2\");",
                "+                    valid = false;",
                "+                }",
                "+                String[] myRenderParam1 = renderParameters.getValues(\"myRenderParam1\");",
                "+                if (myRenderParam1 == null || (myRenderParam1.length != 1) || renderParameters.isPublic(\"myRenderParam1\") || !myRenderParam1[0].equals(\"abc\")) {",
                "+                    result.appendTcDetail(\"failed to get public render parameter value for myRenderParam1\");",
                "+                    valid = false;",
                "+                }",
                "+                String[] myPRP1 = renderParameters.getValues(\"myPRP1\");",
                "+                if (myPRP1 == null || (myPRP1.length != 3) || !renderParameters.isPublic(\"myPRP1\") || !myPRP1[0].equals(\"x\") || !myPRP1[1].equals(\"y\") || !myPRP1[2].equals(\"z\")) {",
                "+                    result.appendTcDetail(\"failed to get public render parameter value for myPRP1\");",
                "+                    valid = false;",
                "+                }",
                "+                myPRP2 = renderParameters.getValues(\"myPRP2\");",
                "+                if (myPRP2 == null || (myPRP2.length != 1) || !renderParameters.isPublic(\"myPRP2\") || !myPRP2[0].equals(\"valueFromActionPhase\")) {",
                "+                    result.appendTcDetail(\"failed to get public render parameter value for myPRP2\");",
                "+                    valid = false;",
                "+                }",
                "+                if (valid) {",
                "+                    result.appendTcDetail(\"successfully getValues on resource and render parameters\");",
                "+                    result.setTcSuccess(true);",
                "+                }",
                "+            }",
                "+            result.writeTo(writer);",
                "+        }",
                "+",
                "+        /* TestCase: V3PortletParametersTests_SPEC11_4A_resourcePhaseSize */",
                "+        /* Details: \"Returns the number of resource and render parameters available\" */",
                "+        {",
                "+            TestResult result = tcd.getTestResultSucceeded(V3PORTLETPARAMETERSTESTS_SPEC11_4A_RESOURCE_PHASE_SIZE);",
                "+            ResourceParameters resourceParams = resourceRequest.getResourceParameters();",
                "+            RenderParameters renderParams = resourceRequest.getRenderParameters();",
                "+            int expectedResourceCount = 2; // myResourceParam1, and myPRP2=valueFromResourcePhase",
                "+            int expectedRenderCount = 3; // myRenderParam1, myPRP1, and myPRP2=valueFromActionPhase",
                "+            if (expectedResourceCount != resourceParams.size()) {",
                "+                result.appendTcDetail(\"Failed to get correct Resource Parameters count, expected: \" + expectedResourceCount + \", found: \" + resourceParams.size());",
                "+                result.setTcSuccess(false);",
                "+            }",
                "+            else if (expectedRenderCount != renderParams.size()) {",
                "+                result.appendTcDetail(\"Failed to get correct Render Parameters count, expected: \" + expectedRenderCount + \", found: \" + renderParams.size());",
                "+                result.setTcSuccess(false);",
                "+            }",
                "+            else {",
                "+                result.appendTcDetail(\"Found correct count of Resource and Render parameters.\");",
                "+            }",
                "+            result.writeTo(writer);",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/util/ModuleTestCaseDetails.java b/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/util/ModuleTestCaseDetails.java",
                "index 32e220bb7..5a2b9b5b5 100644",
                "--- a/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/util/ModuleTestCaseDetails.java",
                "+++ b/portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/util/ModuleTestCaseDetails.java",
                "@@ -54,2 +54,15 @@ public class ModuleTestCaseDetails extends TestCaseDetails {",
                "+    public final static String V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_GETNAMES = \"V3PortletParametersTests_SPEC11_4A_actionPhaseGetNames\";",
                "+    public final static String V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_GETVALUES = \"V3PortletParametersTests_SPEC11_4A_actionPhaseGetValues\";",
                "+    public final static String V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_SIZE = \"V3PortletParametersTests_SPEC11_4A_actionPhaseSize\";",
                "+    public final static String V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_GETNAMES = \"V3PortletParametersTests_SPEC11_4A_headerPhaseGetNames\";",
                "+    public final static String V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_GETVALUES = \"V3PortletParametersTests_SPEC11_4A_headerPhaseGetValues\";",
                "+    public final static String V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_SIZE = \"V3PortletParametersTests_SPEC11_4A_headerPhaseSize\";",
                "+    public final static String V3PORTLETPARAMETERSTESTS_SPEC11_4A_RENDER_PHASE_GETNAMES = \"V3PortletParametersTests_SPEC11_4A_renderPhaseGetNames\";",
                "+    public final static String V3PORTLETPARAMETERSTESTS_SPEC11_4A_RENDER_PHASE_GETVALUES = \"V3PortletParametersTests_SPEC11_4A_renderPhaseGetValues\";",
                "+    public final static String V3PORTLETPARAMETERSTESTS_SPEC11_4A_RENDER_PHASE_SIZE = \"V3PortletParametersTests_SPEC11_4A_renderPhaseSize\";",
                "+    public final static String V3PORTLETPARAMETERSTESTS_SPEC11_4A_RESOURCE_PHASE_GETNAMES = \"V3PortletParametersTests_SPEC11_4A_resourcePhaseGetNames\";",
                "+    public final static String V3PORTLETPARAMETERSTESTS_SPEC11_4A_RESOURCE_PHASE_GETVALUES = \"V3PortletParametersTests_SPEC11_4A_resourcePhaseGetValues\";",
                "+    public final static String V3PORTLETPARAMETERSTESTS_SPEC11_4A_RESOURCE_PHASE_SIZE = \"V3PortletParametersTests_SPEC11_4A_resourcePhaseSize\";",
                "+",
                "     private final static Map<String, String> tcd = new HashMap<String, String>();",
                "@@ -76,2 +89,14 @@ public class ModuleTestCaseDetails extends TestCaseDetails {",
                "+        tcd.put(V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_GETNAMES, \"Returns one set of strings containing the action parameter names and another containing the render parameter names\");",
                "+        tcd.put(V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_GETVALUES, \"Returns one string array of action parameter values for a given name, and another with render parameter values for a different name\");",
                "+        tcd.put(V3PORTLETPARAMETERSTESTS_SPEC11_4A_ACTION_PHASE_SIZE, \"Returns the number of action and render parameters available\");",
                "+        tcd.put(V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_GETNAMES, \"Returns a set of strings containing the render parameter names\");",
                "+        tcd.put(V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_GETVALUES, \"Returns a string array of render parameter values for a given name\");",
                "+        tcd.put(V3PORTLETPARAMETERSTESTS_SPEC11_4A_HEADER_PHASE_SIZE, \"Returns the number of action and render parameters available\");",
                "+        tcd.put(V3PORTLETPARAMETERSTESTS_SPEC11_4A_RENDER_PHASE_GETNAMES, \"Returns a set of strings containing the render parameter names\");",
                "+        tcd.put(V3PORTLETPARAMETERSTESTS_SPEC11_4A_RENDER_PHASE_GETVALUES, \"Returns a string array of render parameter values for a given name\");",
                "+        tcd.put(V3PORTLETPARAMETERSTESTS_SPEC11_4A_RENDER_PHASE_SIZE, \"Returns the number of action and render parameters available\");",
                "+        tcd.put(V3PORTLETPARAMETERSTESTS_SPEC11_4A_RESOURCE_PHASE_GETNAMES, \"Returns one set of strings containing the resource parameter names and another containing the render parameter names\");",
                "+        tcd.put(V3PORTLETPARAMETERSTESTS_SPEC11_4A_RESOURCE_PHASE_GETVALUES, \"Returns one string array of resource parameter values for a given name, and another with render parameter values for a different name\");",
                "+        tcd.put(V3PORTLETPARAMETERSTESTS_SPEC11_4A_RESOURCE_PHASE_SIZE, \"Returns the number of resource and render parameters available\");",
                "     }",
                "diff --git a/portlet-tck_3.0/V3PortletParametersTests/src/main/resources/xml-resources/additionalPages.xml b/portlet-tck_3.0/V3PortletParametersTests/src/main/resources/xml-resources/additionalPages.xml",
                "index 3ce09f569..37b400f06 100644",
                "--- a/portlet-tck_3.0/V3PortletParametersTests/src/main/resources/xml-resources/additionalPages.xml",
                "+++ b/portlet-tck_3.0/V3PortletParametersTests/src/main/resources/xml-resources/additionalPages.xml",
                "@@ -34,3 +34,3 @@",
                " <page xmlns=\"\" name=\"V3PortletParametersTests\" uri=\"/WEB-INF/themes/pluto-default-theme.jsp\">",
                "-<portlet context=\"/${project.artifactId}-${project.version}\" name=\"PortletParametersTests_SPEC11_1\"/>",
                "+    <portlet context=\"/${project.artifactId}-${project.version}\" name=\"PortletParametersTests_SPEC11_1\"/>",
                " </page>",
                "@@ -42,2 +42,5 @@",
                " </page>",
                "+<page xmlns=\"\" name=\"V3ResourceParametersAddlTests\" uri=\"/WEB-INF/themes/pluto-default-theme.jsp\">",
                "+    <portlet context=\"/${project.artifactId}-${project.version}\" name=\"PortletParametersTests_SPEC11_4A\"/>",
                "+</page>",
                " </render-config>",
                "diff --git a/portlet-tck_3.0/V3PortletParametersTests/src/main/resources/xml-resources/additionalTCs.xml b/portlet-tck_3.0/V3PortletParametersTests/src/main/resources/xml-resources/additionalTCs.xml",
                "index 7280b6c16..8005f7799 100644",
                "--- a/portlet-tck_3.0/V3PortletParametersTests/src/main/resources/xml-resources/additionalTCs.xml",
                "+++ b/portlet-tck_3.0/V3PortletParametersTests/src/main/resources/xml-resources/additionalTCs.xml",
                "@@ -37,2 +37,14 @@",
                " <entry key=\"V3PortletParametersTests_SPEC11_4_clone\">V3ResourceParametersTests</entry>",
                "+<entry key=\"V3PortletParametersTests_SPEC11_4A_actionPhaseGetNames\">V3ResourceParametersAddlTests</entry>",
                "+<entry key=\"V3PortletParametersTests_SPEC11_4A_actionPhaseGetValues\">V3ResourceParametersAddlTests</entry>",
                "+<entry key=\"V3PortletParametersTests_SPEC11_4A_actionPhaseSize\">V3ResourceParametersAddlTests</entry>",
                "+<entry key=\"V3PortletParametersTests_SPEC11_4A_headerPhaseGetNames\">V3ResourceParametersAddlTests</entry>",
                "+<entry key=\"V3PortletParametersTests_SPEC11_4A_headerPhaseGetValues\">V3ResourceParametersAddlTests</entry>",
                "+<entry key=\"V3PortletParametersTests_SPEC11_4A_headerPhaseSize\">V3ResourceParametersAddlTests</entry>",
                "+<entry key=\"V3PortletParametersTests_SPEC11_4A_renderPhaseGetNames\">V3ResourceParametersAddlTests</entry>",
                "+<entry key=\"V3PortletParametersTests_SPEC11_4A_renderPhaseGetValues\">V3ResourceParametersAddlTests</entry>",
                "+<entry key=\"V3PortletParametersTests_SPEC11_4A_renderPhaseSize\">V3ResourceParametersAddlTests</entry>",
                "+<entry key=\"V3PortletParametersTests_SPEC11_4A_resourcePhaseGetNames\">V3ResourceParametersAddlTests</entry>",
                "+<entry key=\"V3PortletParametersTests_SPEC11_4A_resourcePhaseGetValues\">V3ResourceParametersAddlTests</entry>",
                "+<entry key=\"V3PortletParametersTests_SPEC11_4A_resourcePhaseSize\">V3ResourceParametersAddlTests</entry>",
                " </properties>"
            ],
            "changed_files": [
                "portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_1.java",
                "portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_3.java",
                "portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_4.java",
                "portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/portlets/PortletParametersTests_SPEC11_4A.java",
                "portlet-tck_3.0/V3PortletParametersTests/src/main/java/javax/portlet/tck/util/ModuleTestCaseDetails.java",
                "portlet-tck_3.0/V3PortletParametersTests/src/main/resources/xml-resources/additionalPages.xml",
                "portlet-tck_3.0/V3PortletParametersTests/src/main/resources/xml-resources/additionalTCs.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-665": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-665",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "db5b343d0d88fb97968201b86d839bc9016d8082",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1517591722,
            "hunks": 1,
            "message": "PLUTO-670 TCK: Contesting getParameterMap tests that verify an \"unmodifiable\" Map object",
            "diff": [
                "diff --git a/portlet-tck_3.0/V3HeaderPortletTests/src/main/java/javax/portlet/tck/portlets/HeaderPortletTests_SPEC15_Header.java b/portlet-tck_3.0/V3HeaderPortletTests/src/main/java/javax/portlet/tck/portlets/HeaderPortletTests_SPEC15_Header.java",
                "index 8ba496a72..e552aba0c 100644",
                "--- a/portlet-tck_3.0/V3HeaderPortletTests/src/main/java/javax/portlet/tck/portlets/HeaderPortletTests_SPEC15_Header.java",
                "+++ b/portlet-tck_3.0/V3HeaderPortletTests/src/main/java/javax/portlet/tck/portlets/HeaderPortletTests_SPEC15_Header.java",
                "@@ -292,5 +292,13 @@ public class HeaderPortletTests_SPEC15_Header",
                "                String tr6TestStringArray[] = { \"Modified Value\" };",
                "-               portletReq.getParameterMap().put(\"inputval\", tr6TestStringArray);",
                "-               if (V3HEADERPORTLETTESTS_SPEC15_HEADER_PARAMETERS6",
                "-                     .equals(portletReq.getParameterMap().get(\"inputval\")[0])) {",
                "+               try {",
                "+                  portletReq.getParameterMap().put(",
                "+                      \"inputval\", tr6TestStringArray);",
                "+                  if (V3HEADERPORTLETTESTS_SPEC15_HEADER_PARAMETERS6",
                "+                      .equals(",
                "+                          portletReq.getParameterMap().get(\"inputval\")[0])) {",
                "+                     tr6.setTcSuccess(true);",
                "+                     successTr6 = true;",
                "+                  }",
                "+               }",
                "+               catch (UnsupportedOperationException e) {",
                "                   tr6.setTcSuccess(true);"
            ],
            "changed_files": [
                "portlet-tck_3.0/V3HeaderPortletTests/src/main/java/javax/portlet/tck/portlets/HeaderPortletTests_SPEC15_Header.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-670": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-670",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "846888e53326e4dcaa00172e0aaf6adeff2733a9",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1511396526,
            "hunks": 1,
            "message": "PLUTO-669 V3URLTests_BaseURL_append incorrectly calls BaseURL.append(Appendable, boolean) instead of BaseURL.append(Appendable)",
            "diff": [
                "diff --git a/portlet-tck_3.0/V3URLTests/src/main/java/javax/portlet/tck/portlets/URLTests_BaseURL.java b/portlet-tck_3.0/V3URLTests/src/main/java/javax/portlet/tck/portlets/URLTests_BaseURL.java",
                "index fe9a0402c..cd6ef2942 100644",
                "--- a/portlet-tck_3.0/V3URLTests/src/main/java/javax/portlet/tck/portlets/URLTests_BaseURL.java",
                "+++ b/portlet-tck_3.0/V3URLTests/src/main/java/javax/portlet/tck/portlets/URLTests_BaseURL.java",
                "@@ -114,3 +114,3 @@ public class URLTests_BaseURL {",
                "          StringBuilder sb = new StringBuilder();",
                "-         baseURL.append(sb, true);",
                "+         baseURL.append(sb);",
                "          String resultingString = sb.toString();"
            ],
            "changed_files": [
                "portlet-tck_3.0/V3URLTests/src/main/java/javax/portlet/tck/portlets/URLTests_BaseURL.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-669": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-669",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9bc57805cf0693330ea064abb3536744e9ff56fc",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1515013992,
            "hunks": 1,
            "message": "PLUTO-673 TCK: Contesting V2EnvironmentTests_PortalContext_ApiRender_getPortalInfo1",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortalContext_ApiRender.java b/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortalContext_ApiRender.java",
                "index c3a3e8350..88d163ec3 100644",
                "--- a/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortalContext_ApiRender.java",
                "+++ b/portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortalContext_ApiRender.java",
                "@@ -295,3 +295,3 @@ public class EnvironmentTests_PortalContext_ApiRender implements Portlet {",
                "     String portal = pcn.getPortalInfo();",
                "-    if (portal != null && portal.matches(\"([^ ]+)/([^ ]+) *(.*)\")) {",
                "+    if (portal != null && portal.matches(\"(.+)/(.+) *(.*)\")) {",
                "       tr14.setTcSuccess(true);"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2EnvironmentTests/src/main/java/javax/portlet/tck/portlets/EnvironmentTests_PortalContext_ApiRender.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-673": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-673",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "280e27344b78c9ac514296b47e21a22855f7a6bd",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1511380367,
            "hunks": 6,
            "message": "PLUTO-667 TCK: Contesting V2ResponseTests_MimeResponse_ApiRender_setContentType4 and V2ResponseTests_RenderResponse_ApiRender_setContentType2",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2ResponseTests/src/main/java/javax/portlet/tck/portlets/ResponseTests_MimeResponse_ApiRender.java b/portlet-tck_3.0/V2ResponseTests/src/main/java/javax/portlet/tck/portlets/ResponseTests_MimeResponse_ApiRender.java",
                "index cf2258fd5..6ceb707f6 100644",
                "--- a/portlet-tck_3.0/V2ResponseTests/src/main/java/javax/portlet/tck/portlets/ResponseTests_MimeResponse_ApiRender.java",
                "+++ b/portlet-tck_3.0/V2ResponseTests/src/main/java/javax/portlet/tck/portlets/ResponseTests_MimeResponse_ApiRender.java",
                "@@ -111,6 +111,18 @@ public class ResponseTests_MimeResponse_ApiRender implements Portlet {",
                "-      PrintWriter writer = portletResp.getWriter();",
                "-",
                "       JSR286ApiTestCaseDetails tcd = new JSR286ApiTestCaseDetails();",
                "+      /* TestCase: V2ResponseTests_MimeResponse_ApiRender_setContentType4 */",
                "+      /* Details: \"Method setContentType(String): Throws */",
                "+      /* IllegalArgumentException if the specified MIME type is invalid\" */",
                "+      TestResult tr11 = tcd.getTestResultFailed(",
                "+          V2RESPONSETESTS_MIMERESPONSE_APIRENDER_SETCONTENTTYPE4);",
                "+      try {",
                "+         portletResp.setContentType(\"Invalid\");",
                "+         tr11.appendTcDetail(\"Method did not throw Exception\");",
                "+      } catch (IllegalArgumentException iae) {",
                "+         tr11.setTcSuccess(true);",
                "+      }",
                "+      PrintWriter writer = portletResp.getWriter();",
                "+      tr11.writeTo(writer);",
                "+",
                "       // Create result objects for the tests",
                "@@ -267,15 +279,2 @@ public class ResponseTests_MimeResponse_ApiRender implements Portlet {",
                "-      /* TestCase: V2ResponseTests_MimeResponse_ApiRender_setContentType4 */",
                "-      /* Details: \"Method setContentType(String): Throws */",
                "-      /* IllegalArgumentException if the specified MIME type is invalid\" */",
                "-      TestResult tr11 = tcd.getTestResultFailed(",
                "-            V2RESPONSETESTS_MIMERESPONSE_APIRENDER_SETCONTENTTYPE4);",
                "-      try {",
                "-         portletResp.setContentType(\"Invalid\");",
                "-         tr11.appendTcDetail(\"Method did not throw Exception\");",
                "-      } catch (IllegalArgumentException iae) {",
                "-         tr11.setTcSuccess(true);",
                "-      }",
                "-      tr11.writeTo(writer);",
                "-",
                "       /*",
                "diff --git a/portlet-tck_3.0/V2ResponseTests/src/main/java/javax/portlet/tck/portlets/ResponseTests_RenderResponse_ApiRender.java b/portlet-tck_3.0/V2ResponseTests/src/main/java/javax/portlet/tck/portlets/ResponseTests_RenderResponse_ApiRender.java",
                "index 1f174fdcf..dcc8d0418 100644",
                "--- a/portlet-tck_3.0/V2ResponseTests/src/main/java/javax/portlet/tck/portlets/ResponseTests_RenderResponse_ApiRender.java",
                "+++ b/portlet-tck_3.0/V2ResponseTests/src/main/java/javax/portlet/tck/portlets/ResponseTests_RenderResponse_ApiRender.java",
                "@@ -79,6 +79,18 @@ public class ResponseTests_RenderResponse_ApiRender implements Portlet {",
                "-      PrintWriter writer = portletResp.getWriter();",
                "-",
                "       JSR286ApiTestCaseDetails tcd = new JSR286ApiTestCaseDetails();",
                "+      /* TestCase: V2ResponseTests_RenderResponse_ApiRender_setContentType2 */",
                "+      /* Details: \"Method setContentType(String): Throws */",
                "+      /* IllegalArgumentException if the content type is not valid\" */",
                "+      TestResult tr3 = tcd.getTestResultFailed(",
                "+          V2RESPONSETESTS_RENDERRESPONSE_APIRENDER_SETCONTENTTYPE2);",
                "+      try {",
                "+         portletResp.setContentType(\"Invalid\");",
                "+         tr3.appendTcDetail(\"Method did not throw Exception\");",
                "+      } catch (IllegalArgumentException iae) {",
                "+         tr3.setTcSuccess(true);",
                "+      }",
                "+      PrintWriter writer = portletResp.getWriter();",
                "+      tr3.writeTo(writer);",
                "+",
                "       // Create result objects for the tests",
                "@@ -114,15 +126,2 @@ public class ResponseTests_RenderResponse_ApiRender implements Portlet {",
                "-      /* TestCase: V2ResponseTests_RenderResponse_ApiRender_setContentType2 */",
                "-      /* Details: \"Method setContentType(String): Throws */",
                "-      /* IllegalArgumentException if the content type is not valid\" */",
                "-      TestResult tr3 = tcd.getTestResultFailed(",
                "-            V2RESPONSETESTS_RENDERRESPONSE_APIRENDER_SETCONTENTTYPE2);",
                "-      try {",
                "-         portletResp.setContentType(\"Invalid\");",
                "-         tr3.appendTcDetail(\"Method did not throw Exception\");",
                "-      } catch (IllegalArgumentException iae) {",
                "-         tr3.setTcSuccess(true);",
                "-      }",
                "-      tr3.writeTo(writer);",
                "-",
                "    }"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2ResponseTests/src/main/java/javax/portlet/tck/portlets/ResponseTests_MimeResponse_ApiRender.java",
                "portlet-tck_3.0/V2ResponseTests/src/main/java/javax/portlet/tck/portlets/ResponseTests_RenderResponse_ApiRender.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-667": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-667",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5dca2adc6a7ca1e9f101fd3211efacc849c64ad2",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1511634683,
            "hunks": 1,
            "message": "PLUTO-670: Contesting V2AddlRequestTests_SPEC2_11_Action_parameters6",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Action.java b/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Action.java",
                "index 733343fd3..ec6053375 100644",
                "--- a/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Action.java",
                "+++ b/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Action.java",
                "@@ -95,5 +95,10 @@ public class AddlRequestTests_SPEC2_11_Action implements Portlet {",
                "         String tr2TestStringArray[] = {\"Modified Value\"};",
                "-        portletReq.getParameterMap().put(\"inputval\", tr2TestStringArray);",
                "-        if (\"V2AddlRequestTests_SPEC2_11_Action_parameters6\"",
                "-            .equals(portletReq.getParameterMap().get(\"inputval\")[0])) {",
                "+        try {",
                "+          portletReq.getParameterMap().put(\"inputval\", tr2TestStringArray);",
                "+          if (\"V2AddlRequestTests_SPEC2_11_Action_parameters6\"",
                "+              .equals(portletReq.getParameterMap().get(\"inputval\")[0])) {",
                "+            tr2.setTcSuccess(true);",
                "+          }",
                "+        }",
                "+        catch (UnsupportedOperationException e) {",
                "           tr2.setTcSuccess(true);"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Action.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-670": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-670",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dd20a3d4f07f52aaac101107388678205c23653c",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1511396117,
            "hunks": 4,
            "message": "PLUTO-668 TCK: Contesting V3URLTests_BaseURL_append and V3URLTests_BaseURL_append2",
            "diff": [
                "diff --git a/portlet-tck_3.0/V3URLTests/src/main/java/javax/portlet/tck/portlets/URLTests_BaseURL.java b/portlet-tck_3.0/V3URLTests/src/main/java/javax/portlet/tck/portlets/URLTests_BaseURL.java",
                "index c3dcec9f5..fe9a0402c 100644",
                "--- a/portlet-tck_3.0/V3URLTests/src/main/java/javax/portlet/tck/portlets/URLTests_BaseURL.java",
                "+++ b/portlet-tck_3.0/V3URLTests/src/main/java/javax/portlet/tck/portlets/URLTests_BaseURL.java",
                "@@ -112,3 +112,3 @@ public class URLTests_BaseURL {",
                "          BaseURL baseURL = portletResp.createRenderURL();",
                "-         baseURL.setParameter(\"tr1\", \">&'\\\"\");",
                "+         baseURL.setParameter(\"tr1\", \">'\\\"\");",
                "          StringBuilder sb = new StringBuilder();",
                "@@ -118,3 +118,2 @@ public class URLTests_BaseURL {",
                "                && !resultingString.contains(\">\")",
                "-               && !resultingString.contains(\"&\")",
                "                && !resultingString.contains(\"'\")",
                "@@ -143,3 +142,3 @@ public class URLTests_BaseURL {",
                "          BaseURL baseURL = portletResp.createRenderURL();",
                "-         baseURL.setParameter(\"tr2\", \">&'\\\"\");",
                "+         baseURL.setParameter(\"tr2\", \">'\\\"\");",
                "          StringBuilder sb = new StringBuilder();",
                "@@ -149,3 +148,2 @@ public class URLTests_BaseURL {",
                "                && !resultingString.contains(\">\")",
                "-               && !resultingString.contains(\"&\")",
                "                && !resultingString.contains(\"'\")"
            ],
            "changed_files": [
                "portlet-tck_3.0/V3URLTests/src/main/java/javax/portlet/tck/portlets/URLTests_BaseURL.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-668": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-668",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8e73939cbfbc44dff0702c1c7b9e3da53c05191e",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1511633234,
            "hunks": 1,
            "message": "PLUTO-662 Disable Liferay's Single Page Application (SPA) feature in order for V2AddlRequestTests_SPEC2_11_Action_parameters8 to pass under Liferay Portal.",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Action.java b/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Action.java",
                "index 1cce0248e..733343fd3 100644",
                "--- a/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Action.java",
                "+++ b/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Action.java",
                "@@ -245,3 +245,3 @@ public class AddlRequestTests_SPEC2_11_Action implements Portlet {",
                "       writer.write(",
                "-          \"<form class=\\\"portletTCKButton\\\" action=\\\"\" + aurl.toString() + \"\\\" method=\\\"post\\\">\");",
                "+          \"<form class=\\\"portletTCKButton\\\" action=\\\"\" + aurl.toString() + \"\\\" method=\\\"post\\\" data-senna-off>\");",
                "       writer.write(\"<input type=\\\"hidden\\\" name=\\\"tr3\\\" value=\\\"true\\\"/>\");"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Action.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-662": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-662",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "847890616b465775a8ce706d139ed5952842293b",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1515600378,
            "hunks": 19,
            "message": "Merge remote-tracking branch 'dantewang/PLUTO-679'",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2RequestTests/pom.xml b/portlet-tck_3.0/V2RequestTests/pom.xml",
                "index 2b1ef9903..aeac26a88 100644",
                "--- a/portlet-tck_3.0/V2RequestTests/pom.xml",
                "+++ b/portlet-tck_3.0/V2RequestTests/pom.xml",
                "@@ -87,2 +87,3 @@",
                "+      <portletrequest.context.path>/tck-V2RequestTests</portletrequest.context.path>",
                "    </properties>",
                "@@ -99,2 +100,5 @@",
                "             <artifactId>maven-war-plugin</artifactId>",
                "+            <configuration>",
                "+               <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>",
                "+            </configuration>",
                "          </plugin>",
                "@@ -111,2 +115,8 @@",
                "    <profiles>",
                "+      <profile>",
                "+         <id>liferay</id>",
                "+         <properties>",
                "+            <portletrequest.context.path>/o/tck-V2RequestTests</portletrequest.context.path>",
                "+         </properties>",
                "+      </profile>",
                "       <profile>",
                "diff --git a/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiAction.java b/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiAction.java",
                "index b66c43e32..9d1068de8 100644",
                "--- a/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiAction.java",
                "+++ b/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiAction.java",
                "@@ -136,2 +136,3 @@ import javax.portlet.Portlet;",
                " import javax.portlet.PortletConfig;",
                "+import javax.portlet.PortletContext;",
                " import javax.portlet.PortletException;",
                "@@ -174,5 +175,7 @@ public class RequestTests_PortletRequest_ApiAction implements Portlet, ResourceS",
                "+   private PortletConfig portletConfig = null;",
                "+",
                "    @Override",
                "    public void init(PortletConfig config) throws PortletException {",
                "-      ",
                "+      this.portletConfig = config;",
                "    }",
                "@@ -196,2 +199,4 @@ public class RequestTests_PortletRequest_ApiAction implements Portlet, ResourceS",
                "+      PortletContext pc = portletConfig.getPortletContext();",
                "+",
                "       // Create result objects for the tests",
                "@@ -616,3 +621,3 @@ public class RequestTests_PortletRequest_ApiAction implements Portlet, ResourceS",
                "       String getctxtpath =portletReq.getContextPath();",
                "-      if(getctxtpath!=null && getctxtpath.startsWith(\"/tck-V2RequestTests\")) {",
                "+      if(getctxtpath!=null && getctxtpath.startsWith(pc.getInitParameter(\"javax.portlet.portletrequest.CONTEXT_PATH\"))) {",
                "     \t  tr39.setTcSuccess(true);",
                "diff --git a/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiEvent_event.java b/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiEvent_event.java",
                "index bf0368161..8e4323296 100644",
                "--- a/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiEvent_event.java",
                "+++ b/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiEvent_event.java",
                "@@ -139,2 +139,3 @@ import javax.portlet.Portlet;",
                " import javax.portlet.PortletConfig;",
                "+import javax.portlet.PortletContext;",
                " import javax.portlet.PortletException;",
                "@@ -166,6 +167,8 @@ public class RequestTests_PortletRequest_ApiEvent_event implements Portlet, Even",
                "    private final Logger LOGGER = LoggerFactory.getLogger(RequestTests_PortletRequest_ApiEvent_event.class);",
                "-   ",
                "+",
                "+   private PortletConfig portletConfig = null;",
                "+",
                "    @Override",
                "    public void init(PortletConfig config) throws PortletException {",
                "-  ",
                "+      this.portletConfig = config;",
                "    }",
                "@@ -203,2 +206,4 @@ public class RequestTests_PortletRequest_ApiEvent_event implements Portlet, Even",
                "+      PortletContext pc = portletConfig.getPortletContext();",
                "+",
                "       // Create result objects for the tests",
                "@@ -621,3 +626,3 @@ public class RequestTests_PortletRequest_ApiEvent_event implements Portlet, Even",
                "       String getctxtpath =portletReq.getContextPath();",
                "-      if(getctxtpath!=null && getctxtpath.startsWith(\"/tck-V2RequestTests\")) {",
                "+      if(getctxtpath!=null && getctxtpath.startsWith(pc.getInitParameter(\"javax.portlet.portletrequest.CONTEXT_PATH\"))) {",
                "     \t  tr39.setTcSuccess(true);",
                "diff --git a/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiResource.java b/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiResource.java",
                "index 01fd42add..4de95dda7 100644",
                "--- a/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiResource.java",
                "+++ b/portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiResource.java",
                "@@ -134,2 +134,3 @@ import javax.portlet.Portlet;",
                " import javax.portlet.PortletConfig;",
                "+import javax.portlet.PortletContext;",
                " import javax.portlet.PortletException;",
                "@@ -171,5 +172,7 @@ public class RequestTests_PortletRequest_ApiResource implements Portlet, Resourc",
                "+   private PortletConfig portletConfig = null;",
                "+",
                "    @Override",
                "    public void init(PortletConfig config) throws PortletException {",
                "-   ",
                "+      this.portletConfig = config;",
                "    }",
                "@@ -205,2 +208,4 @@ public class RequestTests_PortletRequest_ApiResource implements Portlet, Resourc",
                "+      PortletContext pc = portletConfig.getPortletContext();",
                "+",
                "       // Create result objects for the tests",
                "@@ -622,3 +627,3 @@ public class RequestTests_PortletRequest_ApiResource implements Portlet, Resourc",
                "       String getctxtpath =portletReq.getContextPath();",
                "-      if(getctxtpath!=null && getctxtpath.startsWith(\"/tck-V2RequestTests\")) {",
                "+      if(getctxtpath!=null && getctxtpath.startsWith(pc.getInitParameter(\"javax.portlet.portletrequest.CONTEXT_PATH\"))) {",
                "     \t  tr39.setTcSuccess(true);",
                "diff --git a/portlet-tck_3.0/V2RequestTests/src/main/webapp/WEB-INF/web.xml b/portlet-tck_3.0/V2RequestTests/src/main/webapp/WEB-INF/web.xml",
                "index a3881246f..fcc93311d 100644",
                "--- a/portlet-tck_3.0/V2RequestTests/src/main/webapp/WEB-INF/web.xml",
                "+++ b/portlet-tck_3.0/V2RequestTests/src/main/webapp/WEB-INF/web.xml",
                "@@ -22,2 +22,6 @@",
                "+   <context-param>",
                "+      <param-name>javax.portlet.portletrequest.CONTEXT_PATH</param-name>",
                "+      <param-value>${portletrequest.context.path}</param-value>",
                "+   </context-param>",
                " </web-app>"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2RequestTests/pom.xml",
                "portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiAction.java",
                "portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiEvent_event.java",
                "portlet-tck_3.0/V2RequestTests/src/main/java/javax/portlet/tck/portlets/RequestTests_PortletRequest_ApiResource.java",
                "portlet-tck_3.0/V2RequestTests/src/main/webapp/WEB-INF/web.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-679": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-679",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b2f2f3db283d20af0f6f21a91ed9eddfbf122fec",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1515179728,
            "hunks": 3,
            "message": "PLUTO-677 TCK: Contesting DispatcherTests3S_SPEC2_19_ForwardServletRender_dispatch4",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2DispatcherTests3S/src/main/java/javax/portlet/tck/portlets/DispatcherTests3S_SPEC2_19_ForwardServletRender.java b/portlet-tck_3.0/V2DispatcherTests3S/src/main/java/javax/portlet/tck/portlets/DispatcherTests3S_SPEC2_19_ForwardServletRender.java",
                "index c9d9ae1d1..d055b2d78 100644",
                "--- a/portlet-tck_3.0/V2DispatcherTests3S/src/main/java/javax/portlet/tck/portlets/DispatcherTests3S_SPEC2_19_ForwardServletRender.java",
                "+++ b/portlet-tck_3.0/V2DispatcherTests3S/src/main/java/javax/portlet/tck/portlets/DispatcherTests3S_SPEC2_19_ForwardServletRender.java",
                "@@ -38,2 +38,3 @@ import javax.portlet.PortletException;",
                " import javax.portlet.PortletRequestDispatcher;",
                "+import javax.portlet.PortletSession;",
                " import javax.portlet.RenderRequest;",
                "@@ -99,32 +100,37 @@ public class DispatcherTests3S_SPEC2_19_ForwardServletRender implements Portlet,",
                "       PrintWriter writer = portletResp.getWriter();",
                "-",
                "-      Map<String, String[]> oldmap = new HashMap<String, String[]>();",
                "-      for (String name : portletReq.getParameterMap().keySet()) {",
                "-         String[] vals = portletReq.getParameterValues(name);",
                "-         vals = (vals == null) ? null : vals.clone();",
                "-         oldmap.put(name, vals);",
                "-      }",
                "-",
                "-      // Now do the actual dispatch",
                "-      String target = SERVLET_PREFIX + \"DispatcherTests3S_SPEC2_19_ForwardServletRender_servlet\" + SERVLET_SUFFIX + \"?\"",
                "-            + QUERY_STRING;",
                "-      PortletRequestDispatcher rd = portletConfig.getPortletContext().getRequestDispatcher(target);",
                "-      rd.forward(portletReq, portletResp);",
                "-",
                "-      Map<String, String[]> newmap = new HashMap<String, String[]>();",
                "-      for (String name : portletReq.getParameterMap().keySet()) {",
                "-         String[] vals = portletReq.getParameterValues(name);",
                "-         vals = (vals == null) ? null : vals.clone();",
                "-         newmap.put(name, vals);",
                "+      PortletSession portletSession = portletReq.getPortletSession();",
                "+      TestResult tr0 = (TestResult) portletSession.getAttribute(V2DISPATCHERTESTS3S_SPEC2_19_FORWARDSERVLETRENDER_DISPATCH4);",
                "+      if (tr0 == null) {",
                "+",
                "+         Map<String, String[]> oldmap = new HashMap<String, String[]>();",
                "+         for (String name : portletReq.getParameterMap().keySet()) {",
                "+            String[] vals = portletReq.getParameterValues(name);",
                "+            vals = (vals == null) ? null : vals.clone();",
                "+            oldmap.put(name, vals);",
                "+         }",
                "+",
                "+         // Now do the actual dispatch",
                "+         String target = SERVLET_PREFIX + \"DispatcherTests3S_SPEC2_19_ForwardServletRender_servlet\" + SERVLET_SUFFIX + \"?\" + QUERY_STRING;",
                "+         PortletRequestDispatcher rd = portletConfig.getPortletContext().getRequestDispatcher(target);",
                "+         rd.forward(portletReq, portletResp);",
                "+",
                "+         Map<String, String[]> newmap = new HashMap<String, String[]>();",
                "+         for (String name : portletReq.getParameterMap().keySet()) {",
                "+            String[] vals = portletReq.getParameterValues(name);",
                "+            vals = (vals == null) ? null : vals.clone();",
                "+            newmap.put(name, vals);",
                "+         }",
                "+",
                "+         JSR286DispatcherTestCaseDetails tcd = new JSR286DispatcherTestCaseDetails();",
                "+",
                "+         /* TestCase: DispatcherTests3S_SPEC2_19_ForwardServletRender_dispatch4 */",
                "+         /* Details: \"The parameters associated with a request dispatcher are */",
                "+         /* scoped only for the duration of the include or forward call\" */",
                "+         tr0 = tcd.getTestResultFailed(V2DISPATCHERTESTS3S_SPEC2_19_FORWARDSERVLETRENDER_DISPATCH4);",
                "+         CompareUtils.mapsEqual(\"Before dispatch\", oldmap, \"After dispatch\", newmap, tr0);",
                "+         portletSession.setAttribute(V2DISPATCHERTESTS3S_SPEC2_19_FORWARDSERVLETRENDER_DISPATCH4, tr0);",
                "+      } else {",
                "+         tr0.writeTo(writer);",
                "+         portletSession.removeAttribute(V2DISPATCHERTESTS3S_SPEC2_19_FORWARDSERVLETRENDER_DISPATCH4);",
                "       }",
                "-",
                "-      JSR286DispatcherTestCaseDetails tcd = new JSR286DispatcherTestCaseDetails();",
                "-",
                "-      /* TestCase: DispatcherTests3S_SPEC2_19_ForwardServletRender_dispatch4 */",
                "-      /* Details: \"The parameters associated with a request dispatcher are */",
                "-      /* scoped only for the duration of the include or forward call\" */",
                "-      TestResult tr0 = tcd.getTestResultFailed(V2DISPATCHERTESTS3S_SPEC2_19_FORWARDSERVLETRENDER_DISPATCH4);",
                "-      CompareUtils.mapsEqual(\"Before dispatch\", oldmap, \"After dispatch\", newmap, tr0);",
                "-      tr0.writeTo(writer);",
                "-",
                "    }"
            ],
            "changed_files": [
                "portlet-tck_3.0/V2DispatcherTests3S/src/main/java/javax/portlet/tck/portlets/DispatcherTests3S_SPEC2_19_ForwardServletRender.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PLUTO-677": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PLUTO-677",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8c161bc28b5f4b4bfed605e45d9bfc0f20a7a019",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1511633065,
            "hunks": 1,
            "message": "Fixed typo",
            "diff": [
                "diff --git a/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Action.java b/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Action.java",
                "index 645338f65..1cce0248e 100644",
                "--- a/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Action.java",
                "+++ b/portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Action.java",
                "@@ -263,3 +263,3 @@ public class AddlRequestTests_SPEC2_11_Action implements Portlet {",
                "           \"<div class=\\\"portletTCKTestcase\\\" name=\\\"V2AddlRequestTests_SPEC2_11_Action_parameters9\\\">\");",
                "-      writer.write(\"<h4>V2AddlRequestTests_SPEC2_11_Action_parameters9 button (POST):</h4>\");",
                "+      writer.write(\"<h4>V2AddlRequestTests_SPEC2_11_Action_parameters9 button (GET):</h4>\");",
                "       writer.write("
            ],
            "changed_files": [
                "portlet-tck_3.0/V2AddlRequestTests/src/main/java/javax/portlet/tck/portlets/AddlRequestTests_SPEC2_11_Action.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a4903f6ce2301b20fff3128c33e88c813791b8ef",
            "repository": "https://github.com/apache/portals-pluto",
            "timestamp": 1511913060,
            "hunks": 2,
            "message": "Removed inaccurate TODO comments",
            "diff": [
                "diff --git a/portlet-tck_3.0/V3RenderStateTests/src/main/java/javax/portlet/tck/portlets/RenderStateTests_SPEC1_12_RenderState.java b/portlet-tck_3.0/V3RenderStateTests/src/main/java/javax/portlet/tck/portlets/RenderStateTests_SPEC1_12_RenderState.java",
                "index e3a0d9889..8d2910c0a 100644",
                "--- a/portlet-tck_3.0/V3RenderStateTests/src/main/java/javax/portlet/tck/portlets/RenderStateTests_SPEC1_12_RenderState.java",
                "+++ b/portlet-tck_3.0/V3RenderStateTests/src/main/java/javax/portlet/tck/portlets/RenderStateTests_SPEC1_12_RenderState.java",
                "@@ -209,3 +209,2 @@ public class RenderStateTests_SPEC1_12_RenderState implements Portlet, ResourceS",
                "        */",
                "-      // TODO: Fix test case. Not working with FULL cacheability",
                "       {",
                "@@ -229,3 +228,2 @@ public class RenderStateTests_SPEC1_12_RenderState implements Portlet, ResourceS",
                "        */",
                "-       // TODO: Fix test case. Not working with FULL cacheability",
                "       {"
            ],
            "changed_files": [
                "portlet-tck_3.0/V3RenderStateTests/src/main/java/javax/portlet/tck/portlets/RenderStateTests_SPEC1_12_RenderState.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "bean-portlet-archetype-3.0.1",
                "bean-portlet-archetype-3.1.0",
                "bean-portlet-archetype-3.1.1",
                "generic-portlet-archetype-3.0.1",
                "generic-portlet-archetype-3.1.0",
                "generic-portlet-archetype-3.1.1",
                "mvcbean-jsp-portlet-archetype-3.1.0",
                "mvcbean-jsp-portlet-archetype-3.1.1",
                "mvcbean-thymeleaf-portlet-archetype-3.1.0",
                "mvcbean-thymeleaf-portlet-archetype-3.1.1",
                "pluto-3.0.1",
                "pluto-3.1.0",
                "pluto-3.1.1",
                "pluto-3.1.2",
                "portlet-tck-3.0.2",
                "portlet-tck-3.0.3"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: portlet",
                    "relevance": 4
                }
            ]
        }
    ]
}
