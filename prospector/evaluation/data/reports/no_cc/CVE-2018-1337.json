{
    "advisory_record": {
        "cve_id": "CVE-2018-1337",
        "description": "In Apache Directory LDAP API before 1.0.2, a bug in the way the SSL Filter was setup made it possible for another thread to use the connection before the TLS layer has been established, if the connection has already been used and put back in a pool of connections, leading to leaking any information contained in this request (including the credentials when sending a BIND request).",
        "reserved_timestamp": 1512604800,
        "published_timestamp": 1531180800,
        "updated_timestamp": 1598277980,
        "repository_url": null,
        "references": {
            "": 26,
            "http://www.securityfocus.com/bid/104744": 2,
            "https://lists.apache.org/thread.html/d66081195e9a02ee7cc20fb243b60467d1419586eed28297d820768f%40%3Cdev.directory.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/r1a258430d820a90ff9d4558319296cc517ff2252327d7b3546d16749%40%3Cjira.kafka.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/r56b304fb9960c869995efbb31da3b9b7c6d53ee31f7f7048eb80434b%40%3Cdev.kafka.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/r55e74532e7f9e84ecfa56b4e0a50a5fe0ba6f7a76880520e4400b0d7%40%3Cjira.kafka.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/r4da40aa50cfdb2158898f2bc6df81feec1d42c6a06db6537d5cc0496%40%3Cjira.kafka.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/r0e645b3f6ca977dc60b7cec231215c59a9471736c2402c1fef5a0616%40%3Cjira.kafka.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/r1815fb5b0c345f571c740e7a1b48d7477647edd4ffcf9d5321e69446%40%3Cdev.kafka.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/d66081195e9a02ee7cc20fb243b60467d1419586eed28297d820768f@%3Cdev.directory.apache.org%3E": 2
        },
        "affected_products": [
            "SSL",
            "TLS",
            "Apache",
            "Apache Directory",
            "Filter",
            "LDAP",
            "Directory"
        ],
        "versions": {
            "status": "affected",
            "version": "LDAP API prior to 1.0.2"
        },
        "files": [
            "SSL",
            "API",
            "BIND",
            "TLS",
            "LDAP"
        ],
        "keywords": [
            "credential",
            "apache",
            "filter",
            "information",
            "layer",
            "setup",
            "make",
            "directory",
            "request",
            "send",
            "include",
            "connection",
            "contain",
            "pool",
            "establish",
            "leak",
            "thread",
            "ldap",
            "lead"
        ],
        "files_extension": [],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "73907522c1fd9ab48306d469bd0065498cf903d0",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1516947991,
            "hunks": 11,
            "message": "Added the EndTransactionRequest decoder",
            "diff": [
                "diff --git a/i18n/src/main/java/org/apache/directory/api/i18n/I18n.java b/i18n/src/main/java/org/apache/directory/api/i18n/I18n.java",
                "index f60a36518..4c2bf02ce 100644",
                "--- a/i18n/src/main/java/org/apache/directory/api/i18n/I18n.java",
                "+++ b/i18n/src/main/java/org/apache/directory/api/i18n/I18n.java",
                "@@ -630,2 +630,3 @@ public enum I18n",
                "     ERR_04489_SYNTAX_INVALID(\"ERR_04489_SYNTAX_INVALID\"),",
                "+    ERR_04490_BAD_END_TRANSACTION_COMMIT(\"ERR_04490_BAD_END_TRANSACTION_COMMIT\"),",
                "diff --git a/i18n/src/main/resources/org/apache/directory/api/i18n/errors.properties b/i18n/src/main/resources/org/apache/directory/api/i18n/errors.properties",
                "index 1573f8b58..ca14fd90a 100644",
                "--- a/i18n/src/main/resources/org/apache/directory/api/i18n/errors.properties",
                "+++ b/i18n/src/main/resources/org/apache/directory/api/i18n/errors.properties",
                "@@ -617,2 +617,4 @@ ERR_04488_NULL_ATTRIBUTE_TYPE=The AttributeType cannot be null",
                " ERR_04489_SYNTAX_INVALID=Syntax invalid for ''{0}''",
                "+ERR_04490_BAD_END_TRANSACTION_COMMIT=The EndTransactionRequest Commit value {0} is invalid: {1}. It should be 0 or 255",
                "+",
                " # ldap-constants",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequest.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequest.java",
                "index 5e159b6fe..a160db115 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequest.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequest.java",
                "@@ -59,3 +59,3 @@ public interface EndTransactionRequest extends ExtendedRequest",
                "      * ",
                "-     * @param commit <tt>true</tt> if teh transaction should be committed, <tt>false</tt> if",
                "+     * @param commit <tt>true</tt> if the transaction should be committed, <tt>false</tt> if",
                "      * it should be rollbacked.",
                "@@ -73,3 +73,3 @@ public interface EndTransactionRequest extends ExtendedRequest",
                "      * ",
                "-     * @param transactionId The transaction ID we got from teh startTransaction response",
                "+     * @param transactionId The transaction ID we got from the startTransaction response",
                "      */",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionFactory.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionFactory.java",
                "new file mode 100644",
                "index 000000000..08367ebfa",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionFactory.java",
                "@@ -0,0 +1,118 @@",
                "+/*",
                "+ *   Licensed to the Apache Software Foundation (ASF) under one",
                "+ *   or more contributor license agreements.  See the NOTICE file",
                "+ *   distributed with this work for additional information",
                "+ *   regarding copyright ownership.  The ASF licenses this file",
                "+ *   to you under the Apache License, Version 2.0 (the",
                "+ *   \"License\"); you may not use this file except in compliance",
                "+ *   with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *   Unless required by applicable law or agreed to in writing,",
                "+ *   software distributed under the License is distributed on an",
                "+ *   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *   KIND, either express or implied.  See the License for the",
                "+ *   specific language governing permissions and limitations",
                "+ *   under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.ldap.codec.api.ExtendedOperationFactory;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+import org.apache.directory.api.ldap.extras.extended.cancel.CancelRequest;",
                "+import org.apache.directory.api.ldap.extras.extended.endTransaction.EndTransactionRequest;",
                "+import org.apache.directory.api.ldap.extras.extended.endTransaction.EndTransactionRequestImpl;",
                "+import org.apache.directory.api.ldap.extras.extended.endTransaction.EndTransactionResponse;",
                "+import org.apache.directory.api.ldap.extras.extended.endTransaction.EndTransactionResponseImpl;",
                "+import org.apache.directory.api.ldap.model.message.ExtendedRequest;",
                "+import org.apache.directory.api.ldap.model.message.ExtendedResponse;",
                "+",
                "+",
                "+/**",
                "+ * An {@link ExtendedOperationFactory} for creating EndTransaction extended request response ",
                "+ * pairs.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class EndTransactionFactory implements ExtendedOperationFactory",
                "+{",
                "+    private LdapApiService codec;",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new instance of EndTransactionFactory.",
                "+     *",
                "+     * @param codec The codec for this factory.",
                "+     */",
                "+    public EndTransactionFactory( LdapApiService codec )",
                "+    {",
                "+        this.codec = codec;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public String getOid()",
                "+    {",
                "+        return CancelRequest.EXTENSION_OID;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public EndTransactionResponse newResponse( byte[] encodedValue ) throws DecoderException",
                "+    {",
                "+        EndTransactionResponseDecorator response = new EndTransactionResponseDecorator( codec, new EndTransactionResponseImpl() );",
                "+        response.setResponseValue( encodedValue );",
                "+",
                "+        return response;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public EndTransactionRequest newRequest( byte[] value )",
                "+    {",
                "+        return new EndTransactionRequestDecorator( codec, new EndTransactionRequestImpl() );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public EndTransactionRequestDecorator decorate( ExtendedRequest modelRequest )",
                "+    {",
                "+        if ( modelRequest instanceof EndTransactionRequestDecorator )",
                "+        {",
                "+            return ( EndTransactionRequestDecorator ) modelRequest;",
                "+        }",
                "+",
                "+        return new EndTransactionRequestDecorator( codec, null );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public EndTransactionResponseDecorator decorate( ExtendedResponse decoratedMessage )",
                "+    {",
                "+        if ( decoratedMessage instanceof EndTransactionResponseDecorator )",
                "+        {",
                "+            return ( EndTransactionResponseDecorator ) decoratedMessage;",
                "+        }",
                "+",
                "+        return new EndTransactionResponseDecorator( codec, null );",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java",
                "new file mode 100644",
                "index 000000000..58d676580",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java",
                "@@ -0,0 +1,79 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.ber.AbstractContainer;",
                "+",
                "+",
                "+/**",
                "+ * A container for EndTransactionRequest codec.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class EndTransactionRequestContainer extends AbstractContainer",
                "+{",
                "+    /** EndTransactionRequest decorator*/",
                "+    private EndTransactionRequestDecorator endTransactionRequest;",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new EndTransactionContainer object. We will store one",
                "+     * grammar, it's enough ...",
                "+     */",
                "+    public EndTransactionRequestContainer()",
                "+    {",
                "+        super();",
                "+        setGrammar( EndTransactionRequestGrammar.getInstance() );",
                "+        setTransition( EndTransactionRequestStatesEnum.START_STATE );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @return Returns the EndTransactionRequest instance.",
                "+     */",
                "+    public EndTransactionRequestDecorator getEndTransactionRequest()",
                "+    {",
                "+        return endTransactionRequest;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Set a EndTransactionRequest Object into the container. It will be completed by",
                "+     * the ldapDecoder.",
                "+     * ",
                "+     * @param endTransactionRequestDecorator the EndTransactionRequest to set.",
                "+     */",
                "+    public void setEndTransactionRequest( EndTransactionRequestDecorator endTransactionRequestDecorator )",
                "+    {",
                "+        this.endTransactionRequest = endTransactionRequestDecorator;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Clean the container for the next decoding.",
                "+     */",
                "+    @Override",
                "+    public void clean()",
                "+    {",
                "+        super.clean();",
                "+        endTransactionRequest = null;",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecoder.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecoder.java",
                "new file mode 100644",
                "index 000000000..012fca995",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecoder.java",
                "@@ -0,0 +1,62 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction;",
                "+",
                "+",
                "+import java.nio.ByteBuffer;",
                "+",
                "+import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.asn1.ber.Asn1Decoder;",
                "+import org.apache.directory.api.ldap.extras.extended.endTransaction.EndTransactionRequest;",
                "+",
                "+",
                "+/**",
                "+ * ",
                "+ * A decoder for EndTransactionRequest.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class EndTransactionRequestDecoder extends Asn1Decoder",
                "+{",
                "+    /** The decoder */",
                "+    private static final Asn1Decoder DECODER = new Asn1Decoder();",
                "+",
                "+",
                "+    /**",
                "+     * Decode a PDU which must contain a EndTransactionRequest extended operation.",
                "+     * Note that the stream of bytes much contain a full PDU, not a partial one.",
                "+     * ",
                "+     * @param stream The bytes to be decoded",
                "+     * @return a EndTransactionRequest object",
                "+     * @throws org.apache.directory.api.asn1.DecoderException If the decoding failed",
                "+     */",
                "+    public EndTransactionRequest decode( byte[] stream ) throws DecoderException",
                "+    {",
                "+        ByteBuffer bb = ByteBuffer.wrap( stream );",
                "+        EndTransactionRequestContainer container = new EndTransactionRequestContainer();",
                "+        DECODER.decode( bb, container );",
                "+        EndTransactionRequestDecorator endTransactionRequest = container.getEndTransactionRequest();",
                "+",
                "+        // Clean the container for the next decoding",
                "+        container.clean();",
                "+",
                "+        return endTransactionRequest;",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java",
                "new file mode 100644",
                "index 000000000..985ff84fd",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java",
                "@@ -0,0 +1,138 @@",
                "+/*",
                "+ *   Licensed to the Apache Software Foundation (ASF) under one",
                "+ *   or more contributor license agreements.  See the NOTICE file",
                "+ *   distributed with this work for additional information",
                "+ *   regarding copyright ownership.  The ASF licenses this file",
                "+ *   to you under the Apache License, Version 2.0 (the",
                "+ *   \"License\"); you may not use this file except in compliance",
                "+ *   with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *   Unless required by applicable law or agreed to in writing,",
                "+ *   software distributed under the License is distributed on an",
                "+ *   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *   KIND, either express or implied.  See the License for the",
                "+ *   specific language governing permissions and limitations",
                "+ *   under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.i18n.I18n;",
                "+import org.apache.directory.api.ldap.codec.api.ExtendedRequestDecorator;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+import org.apache.directory.api.ldap.extras.extended.endTransaction.EndTransactionRequest;",
                "+import org.apache.directory.api.ldap.extras.extended.endTransaction.EndTransactionResponse;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+",
                "+/**",
                "+ * A Decorator for EndTransaction request.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class EndTransactionRequestDecorator extends ExtendedRequestDecorator<EndTransactionRequest> implements",
                "+    EndTransactionRequest",
                "+{",
                "+    private static final Logger LOG = LoggerFactory.getLogger( EndTransactionRequestDecorator.class );",
                "+",
                "+    /** The internal EndTransaction request */",
                "+    private EndTransactionRequest endTransactionRequest;",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new instance of EndTransactionRequestDecorator.",
                "+     * ",
                "+     * @param codec The LDAP Service to use",
                "+     * @param decoratedMessage The canceled request",
                "+     */",
                "+    public EndTransactionRequestDecorator( LdapApiService codec, EndTransactionRequest decoratedMessage )",
                "+    {",
                "+        super( codec, decoratedMessage );",
                "+        endTransactionRequest = decoratedMessage;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public EndTransactionResponse getResultResponse()",
                "+    {",
                "+        return ( EndTransactionResponse ) endTransactionRequest.getResultResponse();",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public boolean getCommit()",
                "+    {",
                "+        return endTransactionRequest.getCommit();",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void setCommit( boolean commit )",
                "+    {",
                "+        endTransactionRequest.setCommit( commit );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public byte[] getTransactionId()",
                "+    {",
                "+        return endTransactionRequest.getTransactionId();",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void setTransactionId( byte[] transactionId )",
                "+    {",
                "+        endTransactionRequest.setTransactionId( transactionId );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void setRequestValue( byte[] requestValue )",
                "+    {",
                "+        EndTransactionRequestDecoder decoder = new EndTransactionRequestDecoder();",
                "+",
                "+        try",
                "+        {",
                "+            if ( requestValue != null )",
                "+            {",
                "+                endTransactionRequest = decoder.decode( requestValue );",
                "+",
                "+                this.requestValue = new byte[requestValue.length];",
                "+                System.arraycopy( requestValue, 0, this.requestValue, 0, requestValue.length );",
                "+            }",
                "+            else",
                "+            {",
                "+                this.requestValue = null;",
                "+            }",
                "+        }",
                "+        catch ( DecoderException e )",
                "+        {",
                "+            LOG.error( I18n.err( I18n.ERR_04165 ), e );",
                "+            throw new RuntimeException( e );",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java",
                "new file mode 100644",
                "index 000000000..13b62e9e5",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java",
                "@@ -0,0 +1,225 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.asn1.ber.grammar.AbstractGrammar;",
                "+import org.apache.directory.api.asn1.ber.grammar.Grammar;",
                "+import org.apache.directory.api.asn1.ber.grammar.GrammarAction;",
                "+import org.apache.directory.api.asn1.ber.grammar.GrammarTransition;",
                "+import org.apache.directory.api.asn1.ber.tlv.BerValue;",
                "+import org.apache.directory.api.asn1.ber.tlv.BooleanDecoder;",
                "+import org.apache.directory.api.asn1.ber.tlv.BooleanDecoderException;",
                "+import org.apache.directory.api.asn1.ber.tlv.UniversalTag;",
                "+import org.apache.directory.api.i18n.I18n;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiServiceFactory;",
                "+import org.apache.directory.api.ldap.extras.extended.endTransaction.EndTransactionRequestImpl;",
                "+import org.apache.directory.api.util.Strings;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+",
                "+/**",
                "+ * This class implements the EndTransactionRequest extended operation's ASN.1 grammer. ",
                "+ * All the actions are declared in this class. As it is a singleton, ",
                "+ * these declaration are only done once. The grammar is :",
                "+ * ",
                "+ * <pre>",
                "+ * txnEndReq ::= SEQUENCE {",
                "+ *         commit         BOOLEAN DEFAULT TRUE,",
                "+ *         identifier     OCTET STRING }",
                "+ * </pre>",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+",
                "+public class EndTransactionRequestGrammar extends AbstractGrammar<EndTransactionRequestContainer>",
                "+{",
                "+",
                "+    /** logger */",
                "+    private static final Logger LOG = LoggerFactory.getLogger( EndTransactionRequestGrammar.class );",
                "+",
                "+    /** Speedup for logs */",
                "+    static final boolean IS_DEBUG = LOG.isDebugEnabled();",
                "+",
                "+    /** The instance of grammar. EndTransactionRequestGrammar is a singleton */",
                "+    private static Grammar<EndTransactionRequestContainer> instance = new EndTransactionRequestGrammar();",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new EndTransactionRequestGrammar object.",
                "+     */",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    public EndTransactionRequestGrammar()",
                "+    {",
                "+        setName( EndTransactionRequestGrammar.class.getName() );",
                "+",
                "+        // Create the transitions table",
                "+        super.transitions = new GrammarTransition[EndTransactionRequestStatesEnum.LAST_STATE",
                "+            .ordinal()][256];",
                "+",
                "+        /**",
                "+         * Transition from init state to EndTransactionRequest Sequence",
                "+         * ",
                "+         *  txnEndReq ::= SEQUENCE {",
                "+         *     ...",
                "+         *     ",
                "+         * Creates the EndTransactionRequest object",
                "+         */",
                "+        super.transitions[EndTransactionRequestStatesEnum.START_STATE.ordinal()][UniversalTag.SEQUENCE.getValue()] =",
                "+            new GrammarTransition<EndTransactionRequestContainer>(",
                "+                EndTransactionRequestStatesEnum.START_STATE,",
                "+                EndTransactionRequestStatesEnum.SEQUENCE_STATE,",
                "+                UniversalTag.SEQUENCE.getValue(), ",
                "+                new GrammarAction<EndTransactionRequestContainer>( \"Init EndTransactionRequest\" )",
                "+                {",
                "+                    public void action( EndTransactionRequestContainer container )",
                "+                    {",
                "+                        EndTransactionRequestDecorator endTransactionRequestDecorator = new EndTransactionRequestDecorator(",
                "+                            LdapApiServiceFactory.getSingleton(), new EndTransactionRequestImpl() );",
                "+                        container.setEndTransactionRequest( endTransactionRequestDecorator );",
                "+                    }",
                "+                } );",
                "+",
                "+        /**",
                "+         * Transition from Sequence to commit flag",
                "+         *",
                "+         * txnEndReq ::= SEQUENCE {",
                "+         *         commit         BOOLEAN DEFAULT TRUE,",
                "+         *     ...",
                "+         *     ",
                "+         * Set the commit flag into the EndTransactionRequest instance.",
                "+         */",
                "+        super.transitions[EndTransactionRequestStatesEnum.SEQUENCE_STATE.ordinal()][UniversalTag.BOOLEAN.getValue()] =",
                "+            new GrammarTransition<EndTransactionRequestContainer>(",
                "+                EndTransactionRequestStatesEnum.SEQUENCE_STATE,",
                "+                EndTransactionRequestStatesEnum.COMMIT_STATE,",
                "+                UniversalTag.BOOLEAN.getValue(),",
                "+                new GrammarAction<EndTransactionRequestContainer>( \"Set EndTransactionRequest commit flag\" )",
                "+                {",
                "+                    public void action( EndTransactionRequestContainer container ) throws DecoderException",
                "+                    {",
                "+                        BerValue value = container.getCurrentTLV().getValue();",
                "+",
                "+                        try",
                "+                        {",
                "+                            container.getEndTransactionRequest().setCommit( BooleanDecoder.parse( value ) );",
                "+                        }",
                "+                        catch ( BooleanDecoderException bde )",
                "+                        {",
                "+                            LOG.error( I18n",
                "+                                .err( I18n.ERR_04490_BAD_END_TRANSACTION_COMMIT, Strings.dumpBytes( value.getData() ), bde.getMessage() ) );",
                "+",
                "+                            // This will generate a PROTOCOL_ERROR",
                "+                            throw new DecoderException( bde.getMessage(), bde );",
                "+                        }",
                "+                    }",
                "+                } );",
                "+",
                "+        /**",
                "+         * Transition from Sequence to identifier",
                "+         *",
                "+         * txnEndReq ::= SEQUENCE {",
                "+         *         identifier     OCTET STRING }",
                "+         *     ",
                "+         * Set the commit flag into the EndTransactionRequest instance.",
                "+         */",
                "+        super.transitions[EndTransactionRequestStatesEnum.SEQUENCE_STATE.ordinal()][UniversalTag.OCTET_STRING.getValue()] =",
                "+            new GrammarTransition<EndTransactionRequestContainer>(",
                "+                EndTransactionRequestStatesEnum.SEQUENCE_STATE,",
                "+                EndTransactionRequestStatesEnum.IDENTFIER_STATE,",
                "+                UniversalTag.OCTET_STRING.getValue(),",
                "+                new GrammarAction<EndTransactionRequestContainer>( \"Set EndTransactionRequest identifier\" )",
                "+                {",
                "+                    public void action( EndTransactionRequestContainer container ) throws DecoderException",
                "+                    {",
                "+                        BerValue value = container.getCurrentTLV().getValue();",
                "+",
                "+                        byte[] identifier = value.getData();",
                "+",
                "+                        if ( IS_DEBUG )",
                "+                        {",
                "+                            LOG.debug( \"Identifier = {}\", Strings.dumpBytes( identifier ) );",
                "+                        }",
                "+",
                "+                        if ( identifier == null )",
                "+                        {",
                "+                            identifier = Strings.EMPTY_BYTES;",
                "+                        }",
                "+",
                "+                        container.getEndTransactionRequest().setTransactionId( identifier );",
                "+",
                "+                        // We may have nothing left",
                "+                        container.setGrammarEndAllowed( true );",
                "+                    }",
                "+                } );",
                "+",
                "+        /**",
                "+         * Transition from commit flag to identifier",
                "+         *",
                "+         * txnEndReq ::= SEQUENCE {",
                "+         *         commit         BOOLEAN DEFAULT TRUE,",
                "+         *         identifier     OCTET STRING }",
                "+         *     ",
                "+         * Set the identifier into the EndTransactionRequest instance.",
                "+         */",
                "+        super.transitions[EndTransactionRequestStatesEnum.COMMIT_STATE.ordinal()][UniversalTag.OCTET_STRING.getValue()] =",
                "+            new GrammarTransition<EndTransactionRequestContainer>(",
                "+                EndTransactionRequestStatesEnum.COMMIT_STATE,",
                "+                EndTransactionRequestStatesEnum.IDENTFIER_STATE,",
                "+                UniversalTag.OCTET_STRING.getValue(),",
                "+                new GrammarAction<EndTransactionRequestContainer>( \"Set EndTransactionRequest identifier\" )",
                "+                {",
                "+                    public void action( EndTransactionRequestContainer container ) throws DecoderException",
                "+                    {",
                "+                        BerValue value = container.getCurrentTLV().getValue();",
                "+",
                "+                        byte[] identifier = value.getData();",
                "+",
                "+                        if ( IS_DEBUG )",
                "+                        {",
                "+                            LOG.debug( \"Identifier = {}\", Strings.dumpBytes( identifier ) );",
                "+                        }",
                "+",
                "+                        if ( identifier == null )",
                "+                        {",
                "+                            identifier = Strings.EMPTY_BYTES;",
                "+                        }",
                "+",
                "+                        container.getEndTransactionRequest().setTransactionId( identifier );",
                "+",
                "+                        // We may have nothing left",
                "+                        container.setGrammarEndAllowed( true );",
                "+                    }",
                "+                } );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * This class is a singleton.",
                "+     * ",
                "+     * @return An instance on this grammar",
                "+     */",
                "+    public static Grammar<EndTransactionRequestContainer> getInstance()",
                "+    {",
                "+        return instance;",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStatesEnum.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStatesEnum.java",
                "new file mode 100644",
                "index 000000000..d28be3c8e",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStatesEnum.java",
                "@@ -0,0 +1,94 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.ber.grammar.States;",
                "+",
                "+",
                "+/**",
                "+ * This class store the EndTransactionRequest's grammar constants. It is also used",
                "+ * for debugging purposes.",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public enum EndTransactionRequestStatesEnum implements States",
                "+{",
                "+    /** The END_STATE */",
                "+    END_STATE,",
                "+    ",
                "+    /** start state*/",
                "+    START_STATE,",
                "+    ",
                "+    /** The initial SEQUENCE */",
                "+    SEQUENCE_STATE,",
                "+    ",
                "+    /** The commit flag */",
                "+    COMMIT_STATE,",
                "+    ",
                "+    /** he identifier state */",
                "+    IDENTFIER_STATE,",
                "+",
                "+    /** Last state */",
                "+    LAST_STATE;",
                "+",
                "+",
                "+    /**",
                "+     * Get the grammar name",
                "+     * ",
                "+     * @return The grammar name",
                "+     */",
                "+    public String getGrammarName()",
                "+    {",
                "+        return \"END_TRANSACTION_REQUEST_GRAMMER\";",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Get the string representing the state",
                "+     * ",
                "+     * @param state The state number",
                "+     * @return The String representing the state",
                "+     */",
                "+    public String getState( int state )",
                "+    {",
                "+        return ( state == END_STATE.ordinal() ) ? \"END_TRANSACTION_REQUEST_GRAMMER\" : name();",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public boolean isEndState()",
                "+    {",
                "+        return this == END_STATE;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public EndTransactionRequestStatesEnum getStartState()",
                "+    {",
                "+        return START_STATE;",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java",
                "new file mode 100644",
                "index 000000000..860c2250f",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java",
                "@@ -0,0 +1,80 @@",
                "+/*",
                "+ *   Licensed to the Apache Software Foundation (ASF) under one",
                "+ *   or more contributor license agreements.  See the NOTICE file",
                "+ *   distributed with this work for additional information",
                "+ *   regarding copyright ownership.  The ASF licenses this file",
                "+ *   to you under the Apache License, Version 2.0 (the",
                "+ *   \"License\"); you may not use this file except in compliance",
                "+ *   with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *   Unless required by applicable law or agreed to in writing,",
                "+ *   software distributed under the License is distributed on an",
                "+ *   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *   KIND, either express or implied.  See the License for the",
                "+ *   specific language governing permissions and limitations",
                "+ *   under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction;",
                "+",
                "+",
                "+import java.util.List;",
                "+",
                "+import org.apache.directory.api.ldap.codec.api.ExtendedResponseDecorator;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+import org.apache.directory.api.ldap.extras.extended.endTransaction.EndTransactionResponse;",
                "+import org.apache.directory.api.ldap.extras.extended.endTransaction.UpdateControls;",
                "+import org.apache.directory.api.util.Strings;",
                "+",
                "+",
                "+/**",
                "+ * A Decorator for EndTransaction response.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class EndTransactionResponseDecorator extends ExtendedResponseDecorator<EndTransactionResponse> implements EndTransactionResponse",
                "+{",
                "+    /** The endTransaction response */",
                "+    private EndTransactionResponse endTransactionResponse;",
                "+",
                "+    /**",
                "+     * Creates a new instance of EndTransactionResponseDecorator.",
                "+     *",
                "+     * @param codec The LDAP service instance",
                "+     * @param decoratedMessage The decorated message",
                "+     */",
                "+    public EndTransactionResponseDecorator( LdapApiService codec, EndTransactionResponse decoratedMessage )",
                "+    {",
                "+        super( codec, decoratedMessage );",
                "+        endTransactionResponse = decoratedMessage;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void setResponseValue( byte[] responseValue )",
                "+    {",
                "+        this.responseValue = Strings.copy( responseValue );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public int getFailedMessageId()",
                "+    {",
                "+        return endTransactionResponse.getFailedMessageId();",
                "+    }",
                "+",
                "+",
                "+    @Override",
                "+    public List<UpdateControls> getUpdateControls()",
                "+    {",
                "+        return endTransactionResponse.getUpdateControls();",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "i18n/src/main/java/org/apache/directory/api/i18n/I18n.java",
                "i18n/src/main/resources/org/apache/directory/api/i18n/errors.properties",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequest.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionFactory.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecoder.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStatesEnum.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: LDAP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequest.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecoder.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionFactory.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStatesEnum.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: request, contain",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "58610c7acc72ba912e745f46f695602fb09fe3e3",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1516750916,
            "hunks": 17,
            "message": "o Removed the useless LDAP_ENCODER/LDAP_DECODER variables in LdapProtocolCodecFactory. Same thing with the MAX_PDU_SIZE o Removed the EncoderException from the PasswordModifyRequestDecorator/PasswordModifyResponseDecorator o Fixed the code and tests acordingly o Added some Javadoc o Removed the useless setResponseValue() method from the StartTlsResponseDecorator class o Added the startTransaction extended operation",
            "diff": [
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelRequest.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelRequest.java",
                "index 392f44712..9352f0fec 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelRequest.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelRequest.java",
                "@@ -26,3 +26,9 @@ import org.apache.directory.api.ldap.model.message.ExtendedRequest;",
                " /**",
                "- * The CancelRequest interface.",
                "+ * The CancelRequest interface, as described in RFC 3909 :",
                "+ * ",
                "+ * <pre>",
                "+ * cancelRequestValue ::= SEQUENCE {",
                "+ *        cancelID        MessageID",
                "+ *                        -- MessageID is as defined in [RFC2251]",
                "+ * </pre>",
                "  *",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelResponse.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelResponse.java",
                "index 4b0e4a276..c48311f42 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelResponse.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelResponse.java",
                "@@ -26,3 +26,4 @@ import org.apache.directory.api.ldap.model.message.ExtendedResponse;",
                " /**",
                "- * The interface for Cancel ExtendedResponses.",
                "+ * The interface for Cancel ExtendedResponse, as defined in RFC 3909. The responseName ",
                "+ * and responseValue are absent.",
                "  * ",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequest.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequest.java",
                "new file mode 100644",
                "index 000000000..51e07b074",
                "--- /dev/null",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequest.java",
                "@@ -0,0 +1,43 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.startTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.ldap.model.message.ExtendedRequest;",
                "+",
                "+",
                "+/**",
                "+ * The TransactionRequest interface. This is for the RFC 5805 Start Transaction Request,",
                "+ * which grammar is :",
                "+ * <pre>",
                "+ * ExtendedRequest ::= [APPLICATION 23] SEQUENCE {",
                "+ *              requestName      [0] LDAPOID,",
                "+ *              requestValue     [1] OCTET STRING OPTIONAL }",
                "+ * </pre>",
                "+ * ",
                "+ * where 'requestName' is 1.3.6.1.1.21.1 and requestValue is absent.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public interface StartTransactionRequest extends ExtendedRequest",
                "+{",
                "+    /** The OID for the Transaction extended operation request. */",
                "+    String EXTENSION_OID = \"1.3.6.1.1.21.1\";",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequestImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequestImpl.java",
                "new file mode 100644",
                "index 000000000..1b2038c0d",
                "--- /dev/null",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequestImpl.java",
                "@@ -0,0 +1,77 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.startTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.ldap.model.message.AbstractExtendedRequest;",
                "+",
                "+",
                "+/**",
                "+ * Implement the extended Start Transaction Request as described in RFC 5805.",
                "+ * ",
                "+ * It's grammar is :",
                "+ * ",
                "+ * <pre>",
                "+ * ExtendedRequest ::= [APPLICATION 23] SEQUENCE {",
                "+ *              requestName      [0] LDAPOID,",
                "+ *              requestValue     [1] OCTET STRING OPTIONAL }",
                "+ * </pre>",
                "+ * ",
                "+ * where 'requestName' is 1.3.6.1.1.21.1 and requestValue is absent.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class StartTransactionRequestImpl extends AbstractExtendedRequest implements StartTransactionRequest",
                "+{",
                "+    /**",
                "+     * Creates a new instance of StartTransactionRequestImpl.",
                "+     *",
                "+     * @param messageId the message id",
                "+     */",
                "+    public StartTransactionRequestImpl( int messageId )",
                "+    {",
                "+        super( messageId );",
                "+        setRequestName( EXTENSION_OID );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new instance of StartTransactionRequestImpl.",
                "+     */",
                "+    public StartTransactionRequestImpl()",
                "+    {",
                "+        setRequestName( EXTENSION_OID );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public StartTransactionResponse getResultResponse()",
                "+    {",
                "+        if ( getResponse() == null )",
                "+        {",
                "+            setResponse( new StartTransactionResponseImpl() );",
                "+        }",
                "+",
                "+        return ( StartTransactionResponse ) getResponse();",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponse.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponse.java",
                "new file mode 100644",
                "index 000000000..0c9fdbe6b",
                "--- /dev/null",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponse.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.startTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.ldap.model.message.ExtendedResponse;",
                "+",
                "+",
                "+/**",
                "+ * The interface for Start Transaction Extended Response. It's described in RFC 5805 :",
                "+ * ",
                "+ * <pre>",
                "+ * ExtendedResponse ::= [APPLICATION 24] SEQUENCE {",
                "+ *            COMPONENTS OF LDAPResult,",
                "+ *            responseName     [10] LDAPOID OPTIONAL,",
                "+ *            responseValue    [11] OCTET STRING OPTIONAL }",
                "+ * </pre>",
                "+ * ",
                "+ * where the responseName is not present, and the responseValue contain",
                "+ * a transaction identifier when the result is SUCCESS.",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public interface StartTransactionResponse extends ExtendedResponse",
                "+{",
                "+    /** The OID for the Start Transaction extended operation response. */",
                "+    String EXTENSION_OID = StartTransactionRequest.EXTENSION_OID;",
                "+    ",
                "+    ",
                "+    /**",
                "+     * @return The transaction ID if success",
                "+     */",
                "+    byte[] getTransactionId();",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponseImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponseImpl.java",
                "new file mode 100644",
                "index 000000000..61f8f2f34",
                "--- /dev/null",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponseImpl.java",
                "@@ -0,0 +1,191 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.startTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.i18n.I18n;",
                "+import org.apache.directory.api.ldap.model.message.ExtendedResponseImpl;",
                "+import org.apache.directory.api.ldap.model.message.ResultCodeEnum;",
                "+import org.apache.directory.api.util.Strings;",
                "+",
                "+",
                "+/**",
                "+ * The interface for Start Transaction Extended Response. It's described in RFC 5805 :",
                "+ * ",
                "+ * <pre>",
                "+ * ExtendedResponse ::= [APPLICATION 24] SEQUENCE {",
                "+ *            COMPONENTS OF LDAPResult,",
                "+ *            responseName     [10] LDAPOID OPTIONAL,",
                "+ *            responseValue    [11] OCTET STRING OPTIONAL }",
                "+ * </pre>",
                "+ * ",
                "+ * where the responseName is not present, and the responseValue contain",
                "+ * a transaction identifier when the result is SUCCESS.",
                "+ * ",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class StartTransactionResponseImpl extends ExtendedResponseImpl implements StartTransactionResponse",
                "+{",
                "+    /** The transaction ID if the request was successful */",
                "+    private byte[] transactionId;",
                "+    ",
                "+    /**",
                "+     * Create a new StartTransactionResponseImpl object",
                "+     * ",
                "+     * @param messageId The messageId",
                "+     * @param rcode the result code",
                "+     * @param transactionId The transaction ID ",
                "+     */",
                "+    public StartTransactionResponseImpl( int messageId, ResultCodeEnum resultCode, byte[] transactionId )",
                "+    {",
                "+        super( messageId );",
                "+",
                "+        switch ( resultCode )",
                "+        {",
                "+            case SUCCESS:",
                "+                this.transactionId = Strings.copy( transactionId );",
                "+                // pass through ...",
                "+            case CANCELED:",
                "+            case CANNOT_CANCEL:",
                "+            case NO_SUCH_OPERATION:",
                "+            case TOO_LATE:",
                "+                break;",
                "+",
                "+            default:",
                "+                throw new IllegalArgumentException( I18n.err( I18n.ERR_04166, ResultCodeEnum.SUCCESS,",
                "+                    ResultCodeEnum.OPERATIONS_ERROR, ResultCodeEnum.INSUFFICIENT_ACCESS_RIGHTS ) );",
                "+        }",
                "+",
                "+        super.getLdapResult().setMatchedDn( null );",
                "+        super.getLdapResult().setResultCode( resultCode );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Create a new StartTransactionResponseImpl instance",
                "+     * ",
                "+     * @param messageId The request's messageId",
                "+     * @param transactionId The transaction ID ",
                "+     */",
                "+    public StartTransactionResponseImpl( int messageId, byte[] transactionId )",
                "+    {",
                "+        super( messageId );",
                "+        super.getLdapResult().setMatchedDn( null );",
                "+        super.getLdapResult().setResultCode( ResultCodeEnum.SUCCESS );",
                "+        this.transactionId = Strings.copy( transactionId );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Create a new StartTransactionResponseImpl instance",
                "+     * ",
                "+     * @param transactionId The transaction ID ",
                "+     */",
                "+    public StartTransactionResponseImpl( byte[] transactionId )",
                "+    {",
                "+        super( StartTransactionRequest.EXTENSION_OID );",
                "+        super.getLdapResult().setMatchedDn( null );",
                "+        super.getLdapResult().setResultCode( ResultCodeEnum.SUCCESS );",
                "+        this.transactionId = Strings.copy( transactionId );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Create a new StartTransactionResponseImpl instance",
                "+     */",
                "+    public StartTransactionResponseImpl()",
                "+    {",
                "+        super( StartTransactionRequest.EXTENSION_OID );",
                "+        super.getLdapResult().setMatchedDn( null );",
                "+        super.getLdapResult().setResultCode( ResultCodeEnum.UNWILLING_TO_PERFORM );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Gets the OID uniquely identifying this extended response (a.k.a. its",
                "+     * name). It's a null value for the Cancel response",
                "+     * ",
                "+     * @return the OID of the extended response type.",
                "+     */",
                "+    @Override",
                "+    public String getResponseName()",
                "+    {",
                "+        return \"\";",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public int hashCode()",
                "+    {",
                "+        int hash = 37;",
                "+        // Seems simple but look at the equals() method ...",
                "+        hash = hash * 17;",
                "+        ",
                "+        if ( transactionId != null )",
                "+        {",
                "+            for ( byte b : transactionId )",
                "+            {",
                "+                hash += hash * 17 + b;",
                "+            }",
                "+        }",
                "+        ",
                "+        hash = hash * 17 + getClass().getName().hashCode();",
                "+",
                "+        return hash;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @see Object#equals(Object)",
                "+     */",
                "+    @Override",
                "+    public boolean equals( Object obj )",
                "+    {",
                "+        if ( obj == this )",
                "+        {",
                "+            return true;",
                "+        }",
                "+",
                "+        return obj instanceof StartTransactionResponseImpl;",
                "+    }",
                "+    ",
                "+    ",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public byte[] getTransactionId()",
                "+    {",
                "+        return Strings.copy( transactionId );",
                "+    }",
                "+    ",
                "+    ",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    public void setTransactionId( byte[] transactionId )",
                "+    {",
                "+        this.transactionId = Strings.copy( transactionId );",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyRequestDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyRequestDecorator.java",
                "index 8ca5c03e1..ddd4a6c0e 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyRequestDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyRequestDecorator.java",
                "@@ -25,3 +25,2 @@ import java.nio.ByteBuffer;",
                " import org.apache.directory.api.asn1.DecoderException;",
                "-import org.apache.directory.api.asn1.EncoderException;",
                " import org.apache.directory.api.asn1.ber.tlv.TLV;",
                "@@ -104,11 +103,3 @@ public class PasswordModifyRequestDecorator extends ExtendedRequestDecorator<Pas",
                "         {",
                "-            try",
                "-            {",
                "-                requestValue = encodeInternal().array();",
                "-            }",
                "-            catch ( EncoderException e )",
                "-            {",
                "-                LOG.error( I18n.err( I18n.ERR_04167 ), e );",
                "-                throw new RuntimeException( e );",
                "-            }",
                "+            requestValue = encodeInternal().array();",
                "         }",
                "@@ -231,3 +222,3 @@ public class PasswordModifyRequestDecorator extends ExtendedRequestDecorator<Pas",
                "      */",
                "-    /* No qualifier */ByteBuffer encodeInternal() throws EncoderException",
                "+    /* No qualifier */ByteBuffer encodeInternal()",
                "     {",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyResponseDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyResponseDecorator.java",
                "index 0c1b076e5..19faba62f 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyResponseDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyResponseDecorator.java",
                "@@ -25,3 +25,2 @@ import java.nio.ByteBuffer;",
                " import org.apache.directory.api.asn1.DecoderException;",
                "-import org.apache.directory.api.asn1.EncoderException;",
                " import org.apache.directory.api.asn1.ber.tlv.TLV;",
                "@@ -105,11 +104,3 @@ public class PasswordModifyResponseDecorator extends ExtendedResponseDecorator<P",
                "         {",
                "-            try",
                "-            {",
                "-                responseValue = encodeInternal().array();",
                "-            }",
                "-            catch ( EncoderException e )",
                "-            {",
                "-                LOG.error( I18n.err( I18n.ERR_04167 ), e );",
                "-                throw new RuntimeException( e );",
                "-            }",
                "+            responseValue = encodeInternal().array();",
                "         }",
                "@@ -178,3 +169,3 @@ public class PasswordModifyResponseDecorator extends ExtendedResponseDecorator<P",
                "      */",
                "-    /* no qualifier */ByteBuffer encodeInternal() throws EncoderException",
                "+    /* no qualifier */ByteBuffer encodeInternal()",
                "     {",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTls/StartTlsResponseDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTls/StartTlsResponseDecorator.java",
                "index 5edfeed15..28a5a7235 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTls/StartTlsResponseDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTls/StartTlsResponseDecorator.java",
                "@@ -47,11 +47,2 @@ public class StartTlsResponseDecorator extends ExtendedResponseDecorator<StartTl",
                "-    /**",
                "-     * {@inheritDoc}",
                "-     */",
                "-    @Override",
                "-    public void setResponseValue( byte[] responseValue )",
                "-    {",
                "-    }",
                "-",
                "-",
                "     /**",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java",
                "new file mode 100644",
                "index 000000000..33283478b",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java",
                "@@ -0,0 +1,123 @@",
                "+/*",
                "+ *   Licensed to the Apache Software Foundation (ASF) under one",
                "+ *   or more contributor license agreements.  See the NOTICE file",
                "+ *   distributed with this work for additional information",
                "+ *   regarding copyright ownership.  The ASF licenses this file",
                "+ *   to you under the Apache License, Version 2.0 (the",
                "+ *   \"License\"); you may not use this file except in compliance",
                "+ *   with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *   Unless required by applicable law or agreed to in writing,",
                "+ *   software distributed under the License is distributed on an",
                "+ *   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *   KIND, either express or implied.  See the License for the",
                "+ *   specific language governing permissions and limitations",
                "+ *   under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.startTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.ldap.codec.api.ExtendedOperationFactory;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+import org.apache.directory.api.ldap.extras.extended.cancel.CancelRequest;",
                "+import org.apache.directory.api.ldap.extras.extended.startTransaction.StartTransactionRequest;",
                "+import org.apache.directory.api.ldap.extras.extended.startTransaction.StartTransactionResponse;",
                "+import org.apache.directory.api.ldap.model.message.ExtendedRequest;",
                "+import org.apache.directory.api.ldap.model.message.ExtendedResponse;",
                "+",
                "+",
                "+/**",
                "+ * An {@link ExtendedOperationFactory} for creating cancel extended request response ",
                "+ * pairs.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class StartTransactionFactory implements ExtendedOperationFactory",
                "+{",
                "+    private LdapApiService codec;",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new instance of CancelFactory.",
                "+     *",
                "+     * @param codec The codec for this factory.",
                "+     */",
                "+    public StartTransactionFactory( LdapApiService codec )",
                "+    {",
                "+        this.codec = codec;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public String getOid()",
                "+    {",
                "+        return CancelRequest.EXTENSION_OID;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public StartTransactionResponse newResponse( byte[] encodedValue ) throws DecoderException",
                "+    {",
                "+        StartTransactionResponseDecorator response = new StartTransactionResponseDecorator( codec, null );",
                "+        response.setResponseValue( encodedValue );",
                "+",
                "+        return response;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public StartTransactionRequest newRequest( byte[] value )",
                "+    {",
                "+        /*",
                "+        StartTransactionRequestDecorator req = new StartTransactionResponseDecorator( codec, new StartTransactionResponseImpl() );",
                "+        req.setRequestValue( value );",
                "+",
                "+        return req;",
                "+        */",
                "+        ",
                "+        return null;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public StartTransactionRequestDecorator decorate( ExtendedRequest modelRequest )",
                "+    {",
                "+        if ( modelRequest instanceof StartTransactionRequestDecorator )",
                "+        {",
                "+            return ( StartTransactionRequestDecorator ) modelRequest;",
                "+        }",
                "+",
                "+        return new StartTransactionRequestDecorator( codec, null );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public StartTransactionResponseDecorator decorate( ExtendedResponse decoratedMessage )",
                "+    {",
                "+        if ( decoratedMessage instanceof StartTransactionResponseDecorator )",
                "+        {",
                "+            return ( StartTransactionResponseDecorator ) decoratedMessage;",
                "+        }",
                "+",
                "+        return new StartTransactionResponseDecorator( codec, null );",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionRequestDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionRequestDecorator.java",
                "new file mode 100644",
                "index 000000000..aff0a0401",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionRequestDecorator.java",
                "@@ -0,0 +1,63 @@",
                "+/*",
                "+ *   Licensed to the Apache Software Foundation (ASF) under one",
                "+ *   or more contributor license agreements.  See the NOTICE file",
                "+ *   distributed with this work for additional information",
                "+ *   regarding copyright ownership.  The ASF licenses this file",
                "+ *   to you under the Apache License, Version 2.0 (the",
                "+ *   \"License\"); you may not use this file except in compliance",
                "+ *   with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *   Unless required by applicable law or agreed to in writing,",
                "+ *   software distributed under the License is distributed on an",
                "+ *   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *   KIND, either express or implied.  See the License for the",
                "+ *   specific language governing permissions and limitations",
                "+ *   under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.startTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.Asn1Object;",
                "+import org.apache.directory.api.ldap.codec.api.ExtendedRequestDecorator;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+import org.apache.directory.api.ldap.extras.extended.startTransaction.StartTransactionRequest;",
                "+import org.apache.directory.api.ldap.extras.extended.startTransaction.StartTransactionResponse;",
                "+",
                "+",
                "+/**",
                "+ * A Decorator for startTransaction request.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class StartTransactionRequestDecorator extends ExtendedRequestDecorator<StartTransactionRequest> implements",
                "+    StartTransactionRequest, Asn1Object",
                "+{",
                "+    /** The internal startTransaction request */",
                "+    private StartTransactionRequest startTransactionRequest;",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new instance of StartTransactionRequestDecorator.",
                "+     * ",
                "+     * @param codec The LDAP Service to use",
                "+     * @param decoratedMessage The canceled request",
                "+     */",
                "+    public StartTransactionRequestDecorator( LdapApiService codec, StartTransactionRequest decoratedMessage )",
                "+    {",
                "+        super( codec, decoratedMessage );",
                "+        startTransactionRequest = decoratedMessage;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public StartTransactionResponse getResultResponse()",
                "+    {",
                "+        return ( StartTransactionResponse ) startTransactionRequest.getResultResponse();",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionResponseDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionResponseDecorator.java",
                "new file mode 100644",
                "index 000000000..a6aa1c5f9",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionResponseDecorator.java",
                "@@ -0,0 +1,70 @@",
                "+/*",
                "+ *   Licensed to the Apache Software Foundation (ASF) under one",
                "+ *   or more contributor license agreements.  See the NOTICE file",
                "+ *   distributed with this work for additional information",
                "+ *   regarding copyright ownership.  The ASF licenses this file",
                "+ *   to you under the Apache License, Version 2.0 (the",
                "+ *   \"License\"); you may not use this file except in compliance",
                "+ *   with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *   Unless required by applicable law or agreed to in writing,",
                "+ *   software distributed under the License is distributed on an",
                "+ *   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *   KIND, either express or implied.  See the License for the",
                "+ *   specific language governing permissions and limitations",
                "+ *   under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.startTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.ldap.codec.api.ExtendedResponseDecorator;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+import org.apache.directory.api.ldap.extras.extended.startTransaction.StartTransactionResponse;",
                "+import org.apache.directory.api.util.Strings;",
                "+",
                "+",
                "+/**",
                "+ * A Decorator for CancelResponses.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class StartTransactionResponseDecorator extends ExtendedResponseDecorator<StartTransactionResponse> implements StartTransactionResponse",
                "+{",
                "+    /** The startTransaction response */",
                "+    private StartTransactionResponse startTransactionResponse;",
                "+",
                "+    /**",
                "+     * Creates a new instance of CancelResponseDecorator.",
                "+     *",
                "+     * @param codec The LDAP service instance",
                "+     * @param decoratedMessage The decorated message",
                "+     */",
                "+    public StartTransactionResponseDecorator( LdapApiService codec, StartTransactionResponse decoratedMessage )",
                "+    {",
                "+        super( codec, decoratedMessage );",
                "+        startTransactionResponse = decoratedMessage;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void setResponseValue( byte[] responseValue )",
                "+    {",
                "+        this.responseValue = Strings.copy( responseValue );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public byte[] getTransactionId()",
                "+    {",
                "+        return startTransactionResponse.getTransactionId();",
                "+    }",
                "+}",
                "diff --git a/ldap/net/mina/src/main/java/org/apache/directory/api/ldap/codec/protocol/mina/LdapProtocolCodecFactory.java b/ldap/net/mina/src/main/java/org/apache/directory/api/ldap/codec/protocol/mina/LdapProtocolCodecFactory.java",
                "index 742846211..f78b2ad3e 100644",
                "--- a/ldap/net/mina/src/main/java/org/apache/directory/api/ldap/codec/protocol/mina/LdapProtocolCodecFactory.java",
                "+++ b/ldap/net/mina/src/main/java/org/apache/directory/api/ldap/codec/protocol/mina/LdapProtocolCodecFactory.java",
                "@@ -37,11 +37,2 @@ public class LdapProtocolCodecFactory implements ProtocolCodecFactory",
                " {",
                "-    /** The tag stored into the session if we want to set a max PDU size */",
                "-    public static final String MAX_PDU_SIZE = \"MAX_PDU_SIZE\";",
                "-",
                "-    /** The LdapDecoder key */",
                "-    public static final String LDAP_DECODER = \"LDAP_DECODER\";",
                "-",
                "-    /** The LdapEncoder key */",
                "-    public static final String LDAP_ENCODER = \"LDAP_ENCODER\";",
                "-",
                "     /** The statefull LDAP decoder */"
            ],
            "changed_files": [
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelRequest.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelResponse.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequest.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequestImpl.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponse.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponseImpl.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyRequestDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyResponseDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTls/StartTlsResponseDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionRequestDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionResponseDecorator.java",
                "ldap/net/mina/src/main/java/org/apache/directory/api/ldap/codec/protocol/mina/LdapProtocolCodecFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: LDAP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponse.java, ldap/net/mina/src/main/java/org/apache/directory/api/ldap/codec/protocol/mina/LdapProtocolCodecFactory.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyResponseDecorator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelRequest.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTls/StartTlsResponseDecorator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionResponseDecorator.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelResponse.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponseImpl.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequest.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyRequestDecorator.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequestImpl.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionRequestDecorator.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: request",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "8655468c953c20e44c223e2112e164083160bd61",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1516920095,
            "hunks": 6,
            "message": "Added the EndTransaction extended request and response",
            "diff": [
                "diff --git a/ldap/extras/codec-api/pom.xml b/ldap/extras/codec-api/pom.xml",
                "index 6db0e3dcf..be2101e63 100644",
                "--- a/ldap/extras/codec-api/pom.xml",
                "+++ b/ldap/extras/codec-api/pom.xml",
                "@@ -77,2 +77,3 @@",
                "               org.apache.directory.api.ldap.extras.extended.certGeneration;version=${project.version};-noimport:=true,",
                "+              org.apache.directory.api.ldap.extras.extended.endTransaction;version=${project.version};-noimport:=true,",
                "               org.apache.directory.api.ldap.extras.extended.gracefulDisconnect;version=${project.version};-noimport:=true,",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequest.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequest.java",
                "new file mode 100644",
                "index 000000000..5e159b6fe",
                "--- /dev/null",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequest.java",
                "@@ -0,0 +1,77 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.endTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.ldap.model.message.ExtendedRequest;",
                "+",
                "+",
                "+/**",
                "+ * The EndTransactionRequest interface. This is for the RFC 5805 End Transaction Request,",
                "+ * which grammar is :",
                "+ * <pre>",
                "+ * ExtendedRequest ::= [APPLICATION 23] SEQUENCE {",
                "+ *              requestName      [0] LDAPOID,",
                "+ *              requestValue     [1] OCTET STRING OPTIONAL }",
                "+ * </pre>",
                "+ * ",
                "+ * where 'requestName' is 1.3.6.1.1.21.3 and requestValue is a BER encoded value. The ",
                "+ * syntax for this value is :",
                "+ * ",
                "+ * <pre>",
                "+ * txnEndReq ::= SEQUENCE {",
                "+ *         commit         BOOLEAN DEFAULT TRUE,",
                "+ *         identifier     OCTET STRING }",
                "+ * </pre>",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public interface EndTransactionRequest extends ExtendedRequest",
                "+{",
                "+    /** The OID for the EndTransaction extended operation request. */",
                "+    String EXTENSION_OID = \"1.3.6.1.1.21.3\";",
                "+    ",
                "+    /**",
                "+     * @return <tt>true</tt> if the operation should be committed, <tt>false</tt> otherwise",
                "+     */",
                "+    boolean getCommit();",
                "+    ",
                "+    ",
                "+    /**",
                "+     * Set the Commit flag for this transaction.",
                "+     * ",
                "+     * @param commit <tt>true</tt> if teh transaction should be committed, <tt>false</tt> if",
                "+     * it should be rollbacked.",
                "+     */",
                "+    void setCommit( boolean commit );",
                "+    ",
                "+    ",
                "+    /**",
                "+     * @return The transaction ID ",
                "+     */",
                "+    byte[] getTransactionId();",
                "+",
                "+    /**",
                "+     * Set the transaction ID to commit or rollback",
                "+     * ",
                "+     * @param transactionId The transaction ID we got from teh startTransaction response",
                "+     */",
                "+    void setTransactionId( byte[] transactionId );",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequestImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequestImpl.java",
                "new file mode 100644",
                "index 000000000..16b920342",
                "--- /dev/null",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequestImpl.java",
                "@@ -0,0 +1,155 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.endTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.ldap.model.message.AbstractExtendedRequest;",
                "+import org.apache.directory.api.util.Strings;",
                "+",
                "+",
                "+/**",
                "+ * The EndTransactionRequest implementation. This is for the RFC 5805 End Transaction Request,",
                "+ * which grammar is :",
                "+ * <pre>",
                "+ * ExtendedRequest ::= [APPLICATION 23] SEQUENCE {",
                "+ *              requestName      [0] LDAPOID,",
                "+ *              requestValue     [1] OCTET STRING OPTIONAL }",
                "+ * </pre>",
                "+ * ",
                "+ * where 'requestName' is 1.3.6.1.1.21.3 and requestValue is a BER encoded value. The ",
                "+ * syntax for this value is :",
                "+ * ",
                "+ * <pre>",
                "+ * txnEndReq ::= SEQUENCE {",
                "+ *         commit         BOOLEAN DEFAULT TRUE,",
                "+ *         identifier     OCTET STRING }",
                "+ * </pre>",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class EndTransactionRequestImpl extends AbstractExtendedRequest implements EndTransactionRequest",
                "+{",
                "+    /** The transaction ID received from teh StartTransactionResponse */",
                "+    private byte[] transactionId;",
                "+    ",
                "+    /** A flag telling of we should commit or rollback the transaction */",
                "+    private boolean commit = true;",
                "+    ",
                "+    /**",
                "+     * Creates a new instance of EndTransactionRequestImpl.",
                "+     *",
                "+     * @param messageId the message id",
                "+     */",
                "+    public EndTransactionRequestImpl( int messageId )",
                "+    {",
                "+        super( messageId );",
                "+        setRequestName( EXTENSION_OID );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new instance of EndTransactionRequestImpl.",
                "+     */",
                "+    public EndTransactionRequestImpl()",
                "+    {",
                "+        setRequestName( EXTENSION_OID );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public EndTransactionResponse getResultResponse()",
                "+    {",
                "+        if ( getResponse() == null )",
                "+        {",
                "+            setResponse( new EndTransactionResponseImpl() );",
                "+        }",
                "+",
                "+        return ( EndTransactionResponse ) getResponse();",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public boolean getCommit()",
                "+    {",
                "+        return commit;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void setCommit( boolean commit )",
                "+    {",
                "+        this.commit = commit;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public byte[] getTransactionId()",
                "+    {",
                "+        return Strings.copy( transactionId );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void setTransactionId( byte[] transactionId )",
                "+    {",
                "+        this.transactionId = Strings.copy( transactionId );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @see Object#toString()",
                "+     */",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        StringBuilder sb = new StringBuilder();",
                "+",
                "+        sb.append( \"EndTransactionRequest :\" );",
                "+        sb.append( \"\\n    commit : \" ).append( commit );",
                "+",
                "+        sb.append( \"\\n    transactionId : \" );",
                "+",
                "+        if ( transactionId != null )",
                "+        {",
                "+            sb.append( Strings.dumpBytes( transactionId ) );",
                "+        }",
                "+        else",
                "+        {",
                "+            sb.append( \"null\" );",
                "+        }",
                "+",
                "+        return sb.toString();",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponse.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponse.java",
                "new file mode 100644",
                "index 000000000..eac3f1f56",
                "--- /dev/null",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponse.java",
                "@@ -0,0 +1,70 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.endTransaction;",
                "+",
                "+",
                "+import java.util.List;",
                "+",
                "+import org.apache.directory.api.ldap.model.message.ExtendedResponse;",
                "+",
                "+",
                "+/**",
                "+ * The interface for End Transaction Extended Response. It's described in RFC 5805 :",
                "+ * ",
                "+ * <pre>",
                "+ * ExtendedResponse ::= [APPLICATION 24] SEQUENCE {",
                "+ *            COMPONENTS OF LDAPResult,",
                "+ *            responseName     [10] LDAPOID OPTIONAL,",
                "+ *            responseValue    [11] OCTET STRING OPTIONAL }",
                "+ * </pre>",
                "+ * ",
                "+ * where the responseName is not present, and the responseValue contains",
                "+ * a BER encoded value, defined by the following grammar :",
                "+ * ",
                "+ * <pre>",
                "+ * txnEndRes ::= SEQUENCE {",
                "+ *         messageID MessageID OPTIONAL,",
                "+ *              -- msgid associated with non-success resultCode",
                "+ *         updatesControls SEQUENCE OF updateControls SEQUENCE {",
                "+ *              messageID MessageID,",
                "+ *                   -- msgid associated with controls",
                "+ *              controls  Controls",
                "+ *         } OPTIONAL",
                "+ *    }",
                "+ * </pre>",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public interface EndTransactionResponse extends ExtendedResponse",
                "+{",
                "+    /** The OID for the Start Transaction extended operation response. */",
                "+    String EXTENSION_OID = EndTransactionRequest.EXTENSION_OID;",
                "+    ",
                "+    ",
                "+    /**",
                "+     * @return The Message ID if failire",
                "+     */",
                "+    int getFailedMessageId();",
                "+    ",
                "+    /**",
                "+     * @return the list of <messageId, Controls> processed within the transaction ",
                "+     */",
                "+    List<UpdateControls> getUpdateControls();",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponseImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponseImpl.java",
                "new file mode 100644",
                "index 000000000..a0efe68ad",
                "--- /dev/null",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponseImpl.java",
                "@@ -0,0 +1,215 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.endTransaction;",
                "+",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+import org.apache.directory.api.ldap.model.message.ExtendedResponseImpl;",
                "+import org.apache.directory.api.ldap.model.message.ResultCodeEnum;",
                "+",
                "+",
                "+/**",
                "+ * The End Transaction Extended Response implementation. It's described in RFC 5805 :",
                "+ * ",
                "+ * <pre>",
                "+ * ExtendedResponse ::= [APPLICATION 24] SEQUENCE {",
                "+ *            COMPONENTS OF LDAPResult,",
                "+ *            responseName     [10] LDAPOID OPTIONAL,",
                "+ *            responseValue    [11] OCTET STRING OPTIONAL }",
                "+ * </pre>",
                "+ * ",
                "+ * where the responseName is not present, and the responseValue contains",
                "+ * a BER encoded value, defined by the following grammar :",
                "+ * ",
                "+ * <pre>",
                "+ * txnEndRes ::= SEQUENCE {",
                "+ *         messageID MessageID OPTIONAL,",
                "+ *              -- msgid associated with non-success resultCode",
                "+ *         updatesControls SEQUENCE OF updateControls SEQUENCE {",
                "+ *              messageID MessageID,",
                "+ *                   -- msgid associated with controls",
                "+ *              controls  Controls",
                "+ *         } OPTIONAL",
                "+ *    }",
                "+ * </pre>",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class EndTransactionResponseImpl extends ExtendedResponseImpl implements EndTransactionResponse",
                "+{",
                "+    /** The faulty Message ID, if any */",
                "+    private int failedMessageId;",
                "+    ",
                "+    /** The list of update controls for the message processed in the transaction */",
                "+    private List<UpdateControls> updateControls = new ArrayList<>();",
                "+",
                "+    /**",
                "+     * Create a new EndTransactionResponseImpl object",
                "+     * ",
                "+     * @param failedMessageId The faulty messageId",
                "+     * @param rcode the result code",
                "+     */",
                "+    public EndTransactionResponseImpl( int failedMessageId, ResultCodeEnum resultCode )",
                "+    {",
                "+        super( failedMessageId );",
                "+",
                "+        switch ( resultCode )",
                "+        {",
                "+            case SUCCESS:",
                "+                this.failedMessageId = -1;",
                "+                break;",
                "+",
                "+            default:",
                "+                this.failedMessageId = failedMessageId;",
                "+        }",
                "+",
                "+        super.getLdapResult().setMatchedDn( null );",
                "+        super.getLdapResult().setResultCode( resultCode );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Create a new EndTransactionResponseImpl instance",
                "+     * ",
                "+     * @param failedMessageId The request's messageId",
                "+     */",
                "+    public EndTransactionResponseImpl( int failedMessageId )",
                "+    {",
                "+        super( failedMessageId );",
                "+        super.getLdapResult().setMatchedDn( null );",
                "+        super.getLdapResult().setResultCode( ResultCodeEnum.SUCCESS );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Create a new StartTransactionResponseImpl instance",
                "+     */",
                "+    public EndTransactionResponseImpl()",
                "+    {",
                "+        super( EndTransactionRequest.EXTENSION_OID );",
                "+        super.getLdapResult().setMatchedDn( null );",
                "+        super.getLdapResult().setResultCode( ResultCodeEnum.UNWILLING_TO_PERFORM );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Gets the OID uniquely identifying this extended response (a.k.a. its",
                "+     * name). It's a null value for the Cancel response",
                "+     * ",
                "+     * @return the OID of the extended response type.",
                "+     */",
                "+    @Override",
                "+    public String getResponseName()",
                "+    {",
                "+        return \"\";",
                "+    }",
                "+    ",
                "+    ",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public int getFailedMessageId()",
                "+    {",
                "+        return failedMessageId;",
                "+    }",
                "+    ",
                "+    ",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    public void setFailedMessageId( int failedMessageId )",
                "+    {",
                "+        this.failedMessageId = failedMessageId;",
                "+    }",
                "+    ",
                "+    /**",
                "+     * @return the updateControls",
                "+     */",
                "+    public List<UpdateControls> getUpdateControls()",
                "+    {",
                "+        return updateControls;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @param updateControls the updateControls to set",
                "+     */",
                "+    public void setUpdateControls( List<UpdateControls> updateControls )",
                "+    {",
                "+        this.updateControls = updateControls;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public int hashCode()",
                "+    {",
                "+        int hash = 37;",
                "+",
                "+        hash = hash * 17 + failedMessageId;",
                "+        ",
                "+        for ( UpdateControls updateControl : updateControls )",
                "+        {",
                "+            hash = hash * 17 + updateControl.hashCode();",
                "+        }",
                "+",
                "+        return hash;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @see Object#equals(Object)",
                "+     */",
                "+    @Override",
                "+    public boolean equals( Object obj )",
                "+    {",
                "+        if ( obj == this )",
                "+        {",
                "+            return true;",
                "+        }",
                "+",
                "+        if ( !( obj instanceof EndTransactionResponse ) )",
                "+        {",
                "+            return false;",
                "+        }",
                "+        ",
                "+        EndTransactionResponse that = ( EndTransactionResponse ) obj;",
                "+        ",
                "+        if ( failedMessageId != that.getFailedMessageId() )",
                "+        {",
                "+            return false;",
                "+        }",
                "+        ",
                "+        for ( UpdateControls updateControl : updateControls )",
                "+        {",
                "+            if ( !that.getUpdateControls().contains( updateControl ) )",
                "+            {",
                "+                return false;",
                "+            }",
                "+        }",
                "+        ",
                "+        return true;",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/UpdateControls.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/UpdateControls.java",
                "new file mode 100644",
                "index 000000000..6962ef9a6",
                "--- /dev/null",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/UpdateControls.java",
                "@@ -0,0 +1,191 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.endTransaction;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+import javax.naming.ldap.Control;",
                "+",
                "+/**",
                "+ * The interface for End Transaction Extended Response UpdateControl. It's described in RFC 5805 :",
                "+ * ",
                "+ * <pre>",
                "+ * updateControls SEQUENCE {",
                "+ *     messageID MessageID,",
                "+ *               -- msgid associated with controls",
                "+ *     controls  Controls",
                "+ * } OPTIONAL",
                "+ * </pre>",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class UpdateControls",
                "+{",
                "+    /** The message ID for which we want to get back the controls */",
                "+    private int messageId;",
                "+",
                "+    /** The list of controls (may be empty) */",
                "+    private List<Control> controls = new ArrayList<>();",
                "+    ",
                "+    /**",
                "+     * A default constructor for the UpdateControls class",
                "+     */",
                "+    public UpdateControls()",
                "+    {",
                "+        // Nothing to do",
                "+    }",
                "+    ",
                "+    ",
                "+    /**",
                "+     * @return The messageID",
                "+     */",
                "+    public int getMessageId()",
                "+    {",
                "+        return messageId;",
                "+    }",
                "+    ",
                "+    ",
                "+    /**",
                "+     * @param messageId the messageId to set",
                "+     */",
                "+    public void setMessageId( int messageId )",
                "+    {",
                "+        this.messageId = messageId;",
                "+    }",
                "+   ",
                "+   ",
                "+    /**",
                "+     * @return The set of controls associated with the messageID",
                "+     */",
                "+    public List<Control> getControls()",
                "+    {",
                "+        return controls;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @param controls the controls to set",
                "+     */",
                "+    public void setControls( List<Control> controls )",
                "+    {",
                "+        this.controls = controls;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public int hashCode()",
                "+    {",
                "+        int hash = 37;",
                "+",
                "+        hash = hash * 17 + messageId;",
                "+        ",
                "+        for ( Control control : controls )",
                "+        {",
                "+            hash = hash * 17 + control.hashCode();",
                "+        }",
                "+",
                "+        return hash;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @see Object#equals(Object)",
                "+     */",
                "+    @Override",
                "+    public boolean equals( Object obj )",
                "+    {",
                "+        if ( obj == this )",
                "+        {",
                "+            return true;",
                "+        }",
                "+",
                "+        if ( !( obj instanceof UpdateControls ) )",
                "+        {",
                "+            return false;",
                "+        }",
                "+        ",
                "+        UpdateControls that = ( UpdateControls ) obj;",
                "+        ",
                "+        if ( messageId != that.getMessageId() )",
                "+        {",
                "+            return false;",
                "+        }",
                "+        ",
                "+        if ( controls.size() != that.getControls().size() )",
                "+        {",
                "+            return false;",
                "+        }",
                "+        ",
                "+        for ( Control control : controls )",
                "+        {",
                "+            if ( !that.getControls().contains( control ) )",
                "+            {",
                "+                return false;",
                "+            }",
                "+        }",
                "+        ",
                "+        return true;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @see Object#toString()",
                "+     */",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        StringBuilder sb = new StringBuilder();",
                "+",
                "+        sb.append( \"UpdateControl :\" );",
                "+        sb.append( \"\\n    messageId : \" ).append( messageId );",
                "+",
                "+        if ( controls.isEmpty() )",
                "+        {",
                "+            sb.append( \"\\n    No controls\" );",
                "+        }",
                "+        else",
                "+        {",
                "+            sb.append( \"\\n    Controls: [\" );",
                "+            boolean isFirst = true;",
                "+            ",
                "+            for ( Control control : controls )",
                "+            {",
                "+                if ( isFirst )",
                "+                {",
                "+                    isFirst = false;",
                "+                }",
                "+                else",
                "+                {",
                "+                    sb.append( \", \" );",
                "+                }",
                "+                ",
                "+                sb.append( control.getID() );",
                "+            }",
                "+            ",
                "+            sb.append( ']' );",
                "+        }",
                "+",
                "+        return sb.toString();",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "ldap/extras/codec-api/pom.xml",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequest.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequestImpl.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponse.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponseImpl.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/UpdateControls.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: LDAP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequestImpl.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionRequest.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/UpdateControls.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponse.java, ldap/extras/codec-api/pom.xml, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponseImpl.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: request",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "eed35a509543563524b9ce44ae2f615af7edf1f5",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1517521787,
            "hunks": 56,
            "message": "o Added the EndTransactionResponse implementation o Fixed some I28n name (adding some text after the error number)",
            "diff": [
                "diff --git a/i18n/src/main/java/org/apache/directory/api/i18n/I18n.java b/i18n/src/main/java/org/apache/directory/api/i18n/I18n.java",
                "index e9f31bd53..26979506b 100644",
                "--- a/i18n/src/main/java/org/apache/directory/api/i18n/I18n.java",
                "+++ b/i18n/src/main/java/org/apache/directory/api/i18n/I18n.java",
                "@@ -236,7 +236,7 @@ public enum I18n",
                "     ERR_04095(\"ERR_04095\"),",
                "-    ERR_04096(\"ERR_04096\"),",
                "-    ERR_04097(\"ERR_04097\"),",
                "-    ERR_04098(\"ERR_04098\"),",
                "-    ERR_04099(\"ERR_04099\"),",
                "-    ERR_04100(\"ERR_04100\"),",
                "+    ERR_04096_NULL_CONTROL_LENGTH(\"ERR_04096_NULL_CONTROL_LENGTH\"),",
                "+    ERR_04097_NULL_CONTROL_OID(\"ERR_04097_NULL_CONTROL_OID\"),",
                "+    ERR_04098_INVALID_CONTROL_OID(\"ERR_04098_INVALID_CONTROL_OID\"),",
                "+    ERR_04099_INVALID_CONTROL_LIST(\"ERR_04099_INVALID_CONTROL_LIST\"),",
                "+    ERR_04100_BAD_CONTROL_CRITICALITY(\"ERR_04100_BAD_CONTROL_CRITICALITY\"),",
                "     ERR_04101(\"ERR_04101\"),",
                "@@ -631,2 +631,3 @@ public enum I18n",
                "     ERR_04490_BAD_END_TRANSACTION_COMMIT(\"ERR_04490_BAD_END_TRANSACTION_COMMIT\"),",
                "+    ERR_04491_BAD_END_TRANSACTION_MESSAGE_ID(\"ERR_04490_BAD_END_TRANSACTION_MESSAGE_ID\"),",
                "diff --git a/i18n/src/main/resources/org/apache/directory/api/i18n/errors.properties b/i18n/src/main/resources/org/apache/directory/api/i18n/errors.properties",
                "index c4df6567d..c3f1ae435 100644",
                "--- a/i18n/src/main/resources/org/apache/directory/api/i18n/errors.properties",
                "+++ b/i18n/src/main/resources/org/apache/directory/api/i18n/errors.properties",
                "@@ -223,7 +223,7 @@ ERR_04094=The CompareResponse must not be null",
                " ERR_04095=The name must not be null",
                "-ERR_04096=The length of a control must not be null",
                "-ERR_04097=The OID must not be null",
                "-ERR_04098=The control type {0} is not a valid OID",
                "-ERR_04099=Invalid control OID : {0}",
                "-ERR_04100=The control criticality flag {0} is invalid : {1}. It should be 0 or 255",
                "+ERR_04096_NULL_CONTROL_LENGTH=The length of a control must not be null",
                "+ERR_04097_NULL_CONTROL_OID=The OID must not be null",
                "+ERR_04098_INVALID_CONTROL_OID=The control type {0} is not a valid OID",
                "+ERR_04099_INVALID_CONTROL_LIST=Invalid control list {0} : {1}",
                "+ERR_04100_BAD_CONTROL_CRITICALITY=The control criticality flag {0} is invalid : {1}. It should be 0 or 255",
                " ERR_04101=The scope is not in [0..2] : {0}",
                "@@ -618,2 +618,3 @@ ERR_04489_SYNTAX_INVALID=Syntax invalid for ''{0}''",
                " ERR_04490_BAD_END_TRANSACTION_COMMIT=The EndTransactionRequest Commit value {0} is invalid: {1}. It should be 0 or 255",
                "+ERR_04490_BAD_END_TRANSACTION_MESSAGE_ID=The endTransactionResponse UpdateControl MessageID value {0} is invalid: {1}. It should be a numeric value",
                "diff --git a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/CheckLengthNotNull.java b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/CheckLengthNotNull.java",
                "index 1fdc2f395..ed23577a7 100644",
                "--- a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/CheckLengthNotNull.java",
                "+++ b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/CheckLengthNotNull.java",
                "@@ -64,3 +64,3 @@ public class CheckLengthNotNull extends GrammarAction<LdapMessageContainer<Messa",
                "         {",
                "-            String msg = I18n.err( I18n.ERR_04096 );",
                "+            String msg = I18n.err( I18n.ERR_04096_NULL_CONTROL_LENGTH );",
                "             LOG.error( msg );",
                "diff --git a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/controls/AddControl.java b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/controls/AddControl.java",
                "index d9f0a99bb..4a89e2a46 100644",
                "--- a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/controls/AddControl.java",
                "+++ b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/controls/AddControl.java",
                "@@ -75,3 +75,3 @@ public class AddControl extends GrammarAction<LdapMessageContainer<MessageDecora",
                "         {",
                "-            String msg = I18n.err( I18n.ERR_04097 );",
                "+            String msg = I18n.err( I18n.ERR_04097_NULL_CONTROL_OID );",
                "             LOG.error( msg );",
                "@@ -88,6 +88,7 @@ public class AddControl extends GrammarAction<LdapMessageContainer<MessageDecora",
                "         {",
                "-            LOG.error( I18n.err( I18n.ERR_04098, Strings.dumpBytes( value ) ) );",
                "+            String msg = I18n.err( I18n.ERR_04098_INVALID_CONTROL_OID, oidValue );",
                "+            LOG.error( msg );",
                "             // This will generate a PROTOCOL_ERROR",
                "-            throw new DecoderException( I18n.err( I18n.ERR_04099, oidValue ) );",
                "+            throw new DecoderException( msg );",
                "         }",
                "@@ -105,3 +106,3 @@ public class AddControl extends GrammarAction<LdapMessageContainer<MessageDecora",
                "         {",
                "-            LOG.debug( \"Control OID : \" + oidValue );",
                "+            LOG.debug( \"Control OID : {}\", oidValue );",
                "         }",
                "diff --git a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/controls/StoreControlCriticality.java b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/controls/StoreControlCriticality.java",
                "index c221fe046..582434a9a 100644",
                "--- a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/controls/StoreControlCriticality.java",
                "+++ b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/controls/StoreControlCriticality.java",
                "@@ -75,6 +75,4 @@ public class StoreControlCriticality extends GrammarAction<LdapMessageContainer<",
                "         // Get the current control",
                "-        Control control;",
                "-",
                "         MessageDecorator<? extends Message> message = container.getMessage();",
                "-        control = message.getCurrentControl();",
                "+        Control control = message.getCurrentControl();",
                "@@ -96,3 +94,3 @@ public class StoreControlCriticality extends GrammarAction<LdapMessageContainer<",
                "             LOG.error( I18n",
                "-                .err( I18n.ERR_04100, Strings.dumpBytes( value.getData() ), bde.getMessage() ) );",
                "+                .err( I18n.ERR_04100_BAD_CONTROL_CRITICALITY, Strings.dumpBytes( value.getData() ), bde.getMessage() ) );",
                "@@ -107,3 +105,3 @@ public class StoreControlCriticality extends GrammarAction<LdapMessageContainer<",
                "         {",
                "-            LOG.debug( \"Control criticality : \" + control.isCritical() );",
                "+            LOG.debug( \"Control criticality : {}\", control.isCritical() );",
                "         }",
                "diff --git a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/LdapEncoder.java b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/LdapEncoder.java",
                "index da795c0c7..911a5453b 100644",
                "--- a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/LdapEncoder.java",
                "+++ b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/LdapEncoder.java",
                "@@ -69,3 +69,3 @@ public class LdapEncoder",
                "      */",
                "-    private int computeControlLength( Control control )",
                "+    public static int computeControlLength( Control control )",
                "     {",
                "@@ -98,3 +98,3 @@ public class LdapEncoder",
                "      */",
                "-    private ByteBuffer encodeControl( ByteBuffer buffer, Control control ) throws EncoderException",
                "+    public static ByteBuffer encodeControl( ByteBuffer buffer, Control control ) throws EncoderException",
                "     {",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponse.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponse.java",
                "index eac3f1f56..4b92a89fe 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponse.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponse.java",
                "@@ -61,3 +61,3 @@ public interface EndTransactionResponse extends ExtendedResponse",
                "     /**",
                "-     * @return The Message ID if failire",
                "+     * @return The Message ID if failure",
                "      */",
                "@@ -65,2 +65,9 @@ public interface EndTransactionResponse extends ExtendedResponse",
                "+    ",
                "+    /**",
                "+     * @param failedMessageId The messageId that causes the failure",
                "+     */",
                "+    void setFailedMessageId( int failedMessageId );",
                "+    ",
                "+    ",
                "     /**",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponseImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponseImpl.java",
                "index a0efe68ad..e3a5fa19b 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponseImpl.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponseImpl.java",
                "@@ -59,3 +59,3 @@ public class EndTransactionResponseImpl extends ExtendedResponseImpl implements",
                "     /** The faulty Message ID, if any */",
                "-    private int failedMessageId;",
                "+    private int failedMessageId = -1;",
                "@@ -139,2 +139,3 @@ public class EndTransactionResponseImpl extends ExtendedResponseImpl implements",
                "      */",
                "+    @Override",
                "     public void setFailedMessageId( int failedMessageId )",
                "@@ -147,2 +148,3 @@ public class EndTransactionResponseImpl extends ExtendedResponseImpl implements",
                "      */",
                "+    @Override",
                "     public List<UpdateControls> getUpdateControls()",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/UpdateControls.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/UpdateControls.java",
                "index 6962ef9a6..46c23df07 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/UpdateControls.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/UpdateControls.java",
                "@@ -24,3 +24,3 @@ import java.util.List;",
                "-import javax.naming.ldap.Control;",
                "+import org.apache.directory.api.ldap.model.message.Control;",
                "@@ -182,3 +182,3 @@ public class UpdateControls",
                "-                sb.append( control.getID() );",
                "+                sb.append( control.getOid() );",
                "             }",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java",
                "index 14b48cf7f..573a04896 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java",
                "@@ -44,3 +44,3 @@ public class EndTransactionRequestContainer extends AbstractContainer",
                "         setGrammar( EndTransactionRequestGrammar.getInstance() );",
                "-        setTransition( EndTransactionRequestStatesEnum.START_STATE );",
                "+        setTransition( EndTransactionRequestStates.START_STATE );",
                "     }",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java",
                "index f012f10dc..610e8d52e 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java",
                "@@ -30,3 +30,2 @@ import org.apache.directory.api.asn1.ber.tlv.BooleanDecoder;",
                " import org.apache.directory.api.asn1.ber.tlv.BooleanDecoderException;",
                "-import org.apache.directory.api.asn1.ber.tlv.UniversalTag;",
                " import org.apache.directory.api.i18n.I18n;",
                "@@ -38,2 +37,5 @@ import org.slf4j.LoggerFactory;",
                "+import static org.apache.directory.api.asn1.ber.tlv.UniversalTag.BOOLEAN;",
                "+import static org.apache.directory.api.asn1.ber.tlv.UniversalTag.OCTET_STRING;",
                "+import static org.apache.directory.api.asn1.ber.tlv.UniversalTag.SEQUENCE;",
                "@@ -75,3 +77,3 @@ public class EndTransactionRequestGrammar extends AbstractGrammar<EndTransaction",
                "         // Create the transitions table",
                "-        super.transitions = new GrammarTransition[EndTransactionRequestStatesEnum.LAST_STATE",
                "+        super.transitions = new GrammarTransition[EndTransactionRequestStates.LAST_STATE",
                "             .ordinal()][256];",
                "@@ -86,7 +88,7 @@ public class EndTransactionRequestGrammar extends AbstractGrammar<EndTransaction",
                "          */",
                "-        super.transitions[EndTransactionRequestStatesEnum.START_STATE.ordinal()][UniversalTag.SEQUENCE.getValue()] =",
                "+        super.transitions[EndTransactionRequestStates.START_STATE.ordinal()][SEQUENCE.getValue()] =",
                "             new GrammarTransition<EndTransactionRequestContainer>(",
                "-                EndTransactionRequestStatesEnum.START_STATE,",
                "-                EndTransactionRequestStatesEnum.SEQUENCE_STATE,",
                "-                UniversalTag.SEQUENCE.getValue(), ",
                "+                EndTransactionRequestStates.START_STATE,",
                "+                EndTransactionRequestStates.SEQUENCE_STATE,",
                "+                SEQUENCE, ",
                "                 new GrammarAction<EndTransactionRequestContainer>( \"Init EndTransactionRequest\" )",
                "@@ -110,7 +112,7 @@ public class EndTransactionRequestGrammar extends AbstractGrammar<EndTransaction",
                "          */",
                "-        super.transitions[EndTransactionRequestStatesEnum.SEQUENCE_STATE.ordinal()][UniversalTag.BOOLEAN.getValue()] =",
                "+        super.transitions[EndTransactionRequestStates.SEQUENCE_STATE.ordinal()][BOOLEAN.getValue()] =",
                "             new GrammarTransition<EndTransactionRequestContainer>(",
                "-                EndTransactionRequestStatesEnum.SEQUENCE_STATE,",
                "-                EndTransactionRequestStatesEnum.COMMIT_STATE,",
                "-                UniversalTag.BOOLEAN.getValue(),",
                "+                EndTransactionRequestStates.SEQUENCE_STATE,",
                "+                EndTransactionRequestStates.COMMIT_STATE,",
                "+                BOOLEAN,",
                "                 new GrammarAction<EndTransactionRequestContainer>( \"Set EndTransactionRequest commit flag\" )",
                "@@ -144,10 +146,10 @@ public class EndTransactionRequestGrammar extends AbstractGrammar<EndTransaction",
                "          */",
                "-        super.transitions[EndTransactionRequestStatesEnum.SEQUENCE_STATE.ordinal()][UniversalTag.OCTET_STRING.getValue()] =",
                "+        super.transitions[EndTransactionRequestStates.SEQUENCE_STATE.ordinal()][OCTET_STRING.getValue()] =",
                "             new GrammarTransition<EndTransactionRequestContainer>(",
                "-                EndTransactionRequestStatesEnum.SEQUENCE_STATE,",
                "-                EndTransactionRequestStatesEnum.IDENTFIER_STATE,",
                "-                UniversalTag.OCTET_STRING.getValue(),",
                "+                EndTransactionRequestStates.SEQUENCE_STATE,",
                "+                EndTransactionRequestStates.IDENTFIER_STATE,",
                "+                OCTET_STRING,",
                "                 new GrammarAction<EndTransactionRequestContainer>( \"Set EndTransactionRequest identifier\" )",
                "                 {",
                "-                    public void action( EndTransactionRequestContainer container ) throws DecoderException",
                "+                    public void action( EndTransactionRequestContainer container )",
                "                     {",
                "@@ -183,10 +185,10 @@ public class EndTransactionRequestGrammar extends AbstractGrammar<EndTransaction",
                "          */",
                "-        super.transitions[EndTransactionRequestStatesEnum.COMMIT_STATE.ordinal()][UniversalTag.OCTET_STRING.getValue()] =",
                "+        super.transitions[EndTransactionRequestStates.COMMIT_STATE.ordinal()][OCTET_STRING.getValue()] =",
                "             new GrammarTransition<EndTransactionRequestContainer>(",
                "-                EndTransactionRequestStatesEnum.COMMIT_STATE,",
                "-                EndTransactionRequestStatesEnum.IDENTFIER_STATE,",
                "-                UniversalTag.OCTET_STRING.getValue(),",
                "+                EndTransactionRequestStates.COMMIT_STATE,",
                "+                EndTransactionRequestStates.IDENTFIER_STATE,",
                "+                OCTET_STRING,",
                "                 new GrammarAction<EndTransactionRequestContainer>( \"Set EndTransactionRequest identifier\" )",
                "                 {",
                "-                    public void action( EndTransactionRequestContainer container ) throws DecoderException",
                "+                    public void action( EndTransactionRequestContainer container )",
                "                     {",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStates.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStates.java",
                "new file mode 100644",
                "index 000000000..8c42f6418",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStates.java",
                "@@ -0,0 +1,94 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.ber.grammar.States;",
                "+",
                "+",
                "+/**",
                "+ * This class store the EndTransactionRequest's grammar constants. It is also used",
                "+ * for debugging purposes.",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public enum EndTransactionRequestStates implements States",
                "+{",
                "+    /** The END_STATE */",
                "+    END_STATE,",
                "+    ",
                "+    /** start state*/",
                "+    START_STATE,",
                "+    ",
                "+    /** The initial SEQUENCE */",
                "+    SEQUENCE_STATE,",
                "+    ",
                "+    /** The commit flag */",
                "+    COMMIT_STATE,",
                "+    ",
                "+    /** The identifier state */",
                "+    IDENTFIER_STATE,",
                "+",
                "+    /** Last state */",
                "+    LAST_STATE;",
                "+",
                "+",
                "+    /**",
                "+     * Get the grammar name",
                "+     * ",
                "+     * @return The grammar name",
                "+     */",
                "+    public String getGrammarName()",
                "+    {",
                "+        return \"END_TRANSACTION_REQUEST_GRAMMER\";",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Get the string representing the state",
                "+     * ",
                "+     * @param state The state number",
                "+     * @return The String representing the state",
                "+     */",
                "+    public String getState( int state )",
                "+    {",
                "+        return ( state == END_STATE.ordinal() ) ? \"END_TRANSACTION_REQUEST_GRAMMER\" : name();",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public boolean isEndState()",
                "+    {",
                "+        return this == END_STATE;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public EndTransactionRequestStates getStartState()",
                "+    {",
                "+        return START_STATE;",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseContainer.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseContainer.java",
                "new file mode 100644",
                "index 000000000..6b131453a",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseContainer.java",
                "@@ -0,0 +1,113 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction;",
                "+",
                "+",
                "+import java.nio.ByteBuffer;",
                "+import java.util.List;",
                "+",
                "+import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.asn1.ber.AbstractContainer;",
                "+import org.apache.directory.api.asn1.ber.Asn1Decoder;",
                "+import org.apache.directory.api.asn1.ber.tlv.TLVStateEnum;",
                "+import org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.controls.ControlsContainer;",
                "+import org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.controls.ControlsStates;",
                "+import org.apache.directory.api.ldap.model.message.Control;",
                "+",
                "+",
                "+/**",
                "+ * A container for EndTransactionResponse codec.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class EndTransactionResponseContainer extends AbstractContainer",
                "+{",
                "+    /** EndTransactionResponse decorator*/",
                "+    private EndTransactionResponseDecorator endTransactionResponse;",
                "+    ",
                "+    private static final Asn1Decoder DECODER = new Asn1Decoder();",
                "+",
                "+    /**",
                "+     * Creates a new EndTransactionResponseContainer object. We will store one",
                "+     * grammar, it's enough ...",
                "+     */",
                "+    public EndTransactionResponseContainer()",
                "+    {",
                "+        super();",
                "+        setGrammar( EndTransactionResponseGrammar.getInstance() );",
                "+        setTransition( EndTransactionResponseStates.START_STATE );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @return Returns the EndTransactionResponse instance.",
                "+     */",
                "+    public EndTransactionResponseDecorator getEndTransactionResponse()",
                "+    {",
                "+        return endTransactionResponse;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Set a EndTransactionResponse Object into the container. It will be completed by",
                "+     * the ldapDecoder.",
                "+     * ",
                "+     * @param endTransactionResponseDecorator the EndTransactionResponse to set.",
                "+     */",
                "+    public void setEndTransactionResponse( EndTransactionResponseDecorator endTransactionResponseDecorator )",
                "+    {",
                "+        this.endTransactionResponse = endTransactionResponseDecorator;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Clean the container for the next decoding.",
                "+     */",
                "+    @Override",
                "+    public void clean()",
                "+    {",
                "+        super.clean();",
                "+        endTransactionResponse = null;",
                "+    }",
                "+    ",
                "+    ",
                "+    /**",
                "+     * Decodes raw ASN.1 encoded bytes into an Asn1Object for the controls.",
                "+     * ",
                "+     * @param controlsBytes the encoded controls bytes",
                "+     * @return the decoded controls",
                "+     * @throws DecoderException if anything goes wrong",
                "+     */",
                "+    public static List<Control> decode( byte[] controlsBytes ) throws DecoderException",
                "+    {",
                "+        ByteBuffer bb = ByteBuffer.wrap( controlsBytes );",
                "+        ControlsContainer container = new ControlsContainer();",
                "+        ",
                "+        // Loop on all the contained controls",
                "+        while ( bb.hasRemaining() )",
                "+        {",
                "+            DECODER.decode( bb, container );",
                "+            container.setState( TLVStateEnum.TAG_STATE_START );",
                "+            container.setTransition( ControlsStates.START_STATE );",
                "+        }",
                "+        ",
                "+        return container.getControls();",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecoder.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecoder.java",
                "new file mode 100644",
                "index 000000000..75a8189c2",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecoder.java",
                "@@ -0,0 +1,60 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction;",
                "+",
                "+",
                "+import java.nio.ByteBuffer;",
                "+",
                "+import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.asn1.ber.Asn1Decoder;",
                "+import org.apache.directory.api.ldap.extras.extended.endTransaction.EndTransactionResponse;",
                "+",
                "+",
                "+/**",
                "+ * A decoder for EndTransactionResponse.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class EndTransactionResponseDecoder extends Asn1Decoder",
                "+{",
                "+    /** The decoder */",
                "+    private static final Asn1Decoder DECODER = new Asn1Decoder();",
                "+",
                "+    /**",
                "+     * Decode a PDU which must contain a EndTransactionResponse extended operation.",
                "+     * Note that the stream of bytes much contain a full PDU, not a partial one.",
                "+     * ",
                "+     * @param stream The bytes to be decoded",
                "+     * @return a EndTransactionResponse object",
                "+     * @throws org.apache.directory.api.asn1.DecoderException If the decoding failed",
                "+     */",
                "+    public EndTransactionResponse decode( byte[] stream ) throws DecoderException",
                "+    {",
                "+        ByteBuffer bb = ByteBuffer.wrap( stream );",
                "+        EndTransactionResponseContainer container = new EndTransactionResponseContainer();",
                "+        DECODER.decode( bb, container );",
                "+        EndTransactionResponseDecorator endTransactionResponse = container.getEndTransactionResponse();",
                "+",
                "+        // Clean the container for the next decoding",
                "+        container.clean();",
                "+",
                "+        return endTransactionResponse;",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java",
                "index 0d194c2ac..e87e4fb78 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java",
                "@@ -22,9 +22,20 @@ package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction;",
                "+import java.nio.ByteBuffer;",
                " import java.util.List;",
                "+import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.asn1.EncoderException;",
                "+import org.apache.directory.api.asn1.ber.tlv.BerValue;",
                "+import org.apache.directory.api.asn1.ber.tlv.TLV;",
                "+import org.apache.directory.api.asn1.ber.tlv.UniversalTag;",
                "+import org.apache.directory.api.i18n.I18n;",
                "+import org.apache.directory.api.ldap.codec.api.CodecControl;",
                " import org.apache.directory.api.ldap.codec.api.ExtendedResponseDecorator;",
                " import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+import org.apache.directory.api.ldap.codec.api.LdapEncoder;",
                " import org.apache.directory.api.ldap.extras.extended.endTransaction.EndTransactionResponse;",
                " import org.apache.directory.api.ldap.extras.extended.endTransaction.UpdateControls;",
                "-import org.apache.directory.api.util.Strings;",
                "+import org.apache.directory.api.ldap.model.message.Control;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "@@ -38,2 +49,4 @@ public class EndTransactionResponseDecorator extends ExtendedResponseDecorator<E",
                " {",
                "+    private static final Logger LOG = LoggerFactory.getLogger( EndTransactionResponseDecorator.class );",
                "+",
                "     /** The endTransaction response */",
                "@@ -41,4 +54,19 @@ public class EndTransactionResponseDecorator extends ExtendedResponseDecorator<E",
                "-    /** stores the length of the request*/",
                "-    private int requestLength = 0;",
                "+    /** The current UpdateControls */",
                "+    private UpdateControls currentUpdateControls;",
                "+",
                "+    /** Stores the length of the request*/",
                "+    private int globalSequenceLength = 0;",
                "+    ",
                "+    /** Stores the length of the updateControls part */",
                "+    private int updateSequenceLength = 0;",
                "+    ",
                "+    /** Stores the length of updateControls */",
                "+    private int[] updateControlsLength;",
                "+    ",
                "+    /** Stores the Controls global lengths */",
                "+    private int[] controlsLengths;",
                "+    ",
                "+    /** The message controls' lengths */ ",
                "+    private int[][] controlLengths;",
                "@@ -63,3 +91,23 @@ public class EndTransactionResponseDecorator extends ExtendedResponseDecorator<E",
                "     {",
                "-        this.responseValue = Strings.copy( responseValue );",
                "+        EndTransactionResponseDecoder decoder = new EndTransactionResponseDecoder();",
                "+",
                "+        try",
                "+        {",
                "+            if ( responseValue != null )",
                "+            {",
                "+                endTransactionResponse = decoder.decode( responseValue );",
                "+",
                "+                this.responseValue = new byte[responseValue.length];",
                "+                System.arraycopy( responseValue, 0, this.responseValue, 0, responseValue.length );",
                "+            }",
                "+            else",
                "+            {",
                "+                this.responseValue = null;",
                "+            }",
                "+        }",
                "+        catch ( DecoderException e )",
                "+        {",
                "+            LOG.error( I18n.err( I18n.ERR_04165_PAYLOAD_DECODING_ERROR ), e );",
                "+            throw new RuntimeException( e );",
                "+        }",
                "     }",
                "@@ -77,2 +125,12 @@ public class EndTransactionResponseDecorator extends ExtendedResponseDecorator<E",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void setFailedMessageId( int failedMessageId )",
                "+    {",
                "+        endTransactionResponse.setFailedMessageId( failedMessageId );",
                "+    }",
                "+",
                "+",
                "     @Override",
                "@@ -82,2 +140,183 @@ public class EndTransactionResponseDecorator extends ExtendedResponseDecorator<E",
                "     }",
                "+",
                "+    ",
                "+    /**",
                "+     * @return the currentUpdateControls",
                "+     */",
                "+    public UpdateControls getCurrentUpdateControls()",
                "+    {",
                "+        return currentUpdateControls;",
                "+    }",
                "+",
                "+    ",
                "+    /**",
                "+     * @param currentUpdateControls the currentUpdateControls to set",
                "+     */",
                "+    public void setCurrentControls( UpdateControls currentUpdateControls )",
                "+    {",
                "+        this.currentUpdateControls = currentUpdateControls;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Compute the EndTransactionResponse extended operation length",
                "+     * <pre>",
                "+     * 0x30 L1 ",
                "+     *   | ",
                "+     *  [+-- 0x02 L2 failed message ID] ",
                "+     *  [+-- 0x30 L3 updateControls SEQUENCE OF",
                "+     *         |",
                "+     *         +-- 0x30 L4 updateControls SEQUENCE",
                "+     *               |",
                "+     *               +-- 0x02 L5 messageID",
                "+     *               +-- <controls>]",
                "+     *               ",
                "+     * </pre>",
                "+     */",
                "+    /* No qualifier */int computeLengthInternal()",
                "+    {",
                "+        globalSequenceLength = 0;",
                "+        ",
                "+        if ( endTransactionResponse.getFailedMessageId() >= 0 )",
                "+        {",
                "+            // We have had a failure, there is no updateControls just the failed MessageID",
                "+            globalSequenceLength = 1 + 1 + BerValue.getNbBytes( endTransactionResponse.getFailedMessageId() );",
                "+            ",
                "+            // The message ID length is always below 128, so we only need 1 byte for the global length",
                "+            return 1 + 1 + globalSequenceLength;",
                "+        }",
                "+        else",
                "+        {",
                "+            // If it's a success, we won't have a messageId, just update controls (if any)",
                "+            int updateControlsSize = getUpdateControls().size();",
                "+            ",
                "+            if ( updateControlsSize > 0 )",
                "+            {",
                "+                updateControlsLength = new int[updateControlsSize];",
                "+                controlsLengths = new int[updateControlsSize];",
                "+                controlLengths = new int[updateControlsSize][];",
                "+                int messageControlsCount = 0;",
                "+                updateSequenceLength = 0;",
                "+                ",
                "+                // Ok, process the updateControls",
                "+                for ( UpdateControls updateControls : getUpdateControls() )",
                "+                {",
                "+                    // The message ID, 0x02 LL and the ID",
                "+                    updateControlsLength[messageControlsCount] = 1 + 1 + BerValue.getNbBytes( updateControls.getMessageId() );",
                "+                    ",
                "+                    // The controls",
                "+                    int controlNumber = updateControls.getControls().size();",
                "+                    ",
                "+                    if ( controlNumber > 0 )",
                "+                    { ",
                "+                        int controlCount = 0;",
                "+                        controlLengths[messageControlsCount] = new int[controlNumber];",
                "+                        ",
                "+                        for ( Control control : updateControls.getControls() )",
                "+                        {",
                "+                            controlLengths[messageControlsCount][controlCount] = LdapEncoder.computeControlLength( control );",
                "+                            controlsLengths[messageControlsCount] +=  1 + TLV.getNbBytes( controlLengths[messageControlsCount][controlCount] ) + controlLengths[messageControlsCount][controlCount];",
                "+                            controlCount++;",
                "+                        }",
                "+                        ",
                "+                        int controlsLength = controlsLengths[messageControlsCount];",
                "+                        updateControlsLength[messageControlsCount] +=  1 + TLV.getNbBytes( controlsLength ) + controlsLength;",
                "+                    }",
                "+                    ",
                "+                    updateSequenceLength += 1 + TLV.getNbBytes( updateControlsLength[messageControlsCount] ) ",
                "+                        + updateControlsLength[messageControlsCount];",
                "+",
                "+                    messageControlsCount++;",
                "+                }",
                "+                ",
                "+                globalSequenceLength = 1 + TLV.getNbBytes( updateSequenceLength ) + updateSequenceLength;",
                "+                ",
                "+                return 1 + TLV.getNbBytes( globalSequenceLength ) + globalSequenceLength;",
                "+            }",
                "+            else",
                "+            {",
                "+                // No update control, return immediately",
                "+                return 0;",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Encodes the EndTransactionResponse extended operation.",
                "+     * ",
                "+     * @return A ByteBuffer that contains the encoded PDU",
                "+     * @throws org.apache.directory.api.asn1.EncoderException If anything goes wrong.",
                "+     */",
                "+    /* No qualifier */ByteBuffer encodeInternal() throws EncoderException",
                "+    {",
                "+        ByteBuffer bb = ByteBuffer.allocate( computeLengthInternal() );",
                "+",
                "+        bb.put( UniversalTag.SEQUENCE.getValue() );",
                "+        bb.put( TLV.getBytes( globalSequenceLength ) );",
                "+        ",
                "+        // The failed message id, if any",
                "+        if ( getFailedMessageId() >= 0 )",
                "+        {",
                "+            // We have had an error, just encode the messageId",
                "+            BerValue.encode( bb, getFailedMessageId() );",
                "+        }",
                "+        else",
                "+        {",
                "+            // No error, just updateControls",
                "+            bb.put( UniversalTag.SEQUENCE.getValue() );",
                "+            bb.put( TLV.getBytes( updateSequenceLength ) );",
                "+",
                "+            int updateControlsNb = 0;",
                "+            ",
                "+            for ( UpdateControls updateControls : getUpdateControls() )",
                "+            {",
                "+                // The updateControls length",
                "+                bb.put( UniversalTag.SEQUENCE.getValue() );",
                "+                bb.put( TLV.getBytes( updateControlsLength[updateControlsNb] ) );",
                "+",
                "+                // The message ID",
                "+                BerValue.encode( bb, updateControls.getMessageId() );",
                "+                ",
                "+                // The controls sequence",
                "+                bb.put( UniversalTag.SEQUENCE.getValue() );",
                "+                bb.put( TLV.getBytes( controlsLengths[updateControlsNb] ) );",
                "+                ",
                "+                // The controls",
                "+                int controlNb = 0;",
                "+",
                "+                for ( Control control : updateControls.getControls() )",
                "+                {",
                "+                    // The control SEQUENCE",
                "+                    bb.put( UniversalTag.SEQUENCE.getValue() );",
                "+                    bb.put( TLV.getBytes( controlLengths[updateControlsNb][controlNb] ) );",
                "+                    ",
                "+                    // The control OID",
                "+                    BerValue.encode( bb, control.getOid() );",
                "+",
                "+                    // The criticality, if true",
                "+                    if ( control.isCritical() )",
                "+                    {",
                "+                        BerValue.encode( bb,  true );",
                "+                    }",
                "+                    ",
                "+                    // compute the value length ",
                "+                    int valueLength = ( ( CodecControl<?> ) control ).computeLength();",
                "+                    ",
                "+                    if ( valueLength > 0 )",
                "+                    {",
                "+                        bb.put( UniversalTag.OCTET_STRING.getValue() );",
                "+                        bb.put( TLV.getBytes( valueLength ) );",
                "+                        ( ( CodecControl<?> ) control ).encode( bb );",
                "+                    }",
                "+                    ",
                "+                    controlNb++;",
                "+                }",
                "+                ",
                "+                updateControlsNb++;",
                "+            }",
                "+        }",
                "+",
                "+        return bb;",
                "+    }",
                " }",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseGrammar.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseGrammar.java",
                "new file mode 100644",
                "index 000000000..1a570f05c",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseGrammar.java",
                "@@ -0,0 +1,330 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction;",
                "+",
                "+",
                "+import static org.apache.directory.api.asn1.ber.tlv.UniversalTag.SEQUENCE;",
                "+",
                "+import java.util.List;",
                "+",
                "+import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.asn1.ber.grammar.AbstractGrammar;",
                "+import org.apache.directory.api.asn1.ber.grammar.Grammar;",
                "+import org.apache.directory.api.asn1.ber.grammar.GrammarAction;",
                "+import org.apache.directory.api.asn1.ber.grammar.GrammarTransition;",
                "+import org.apache.directory.api.asn1.ber.tlv.BerValue;",
                "+import org.apache.directory.api.asn1.ber.tlv.IntegerDecoder;",
                "+import org.apache.directory.api.asn1.ber.tlv.IntegerDecoderException;",
                "+import org.apache.directory.api.i18n.I18n;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiServiceFactory;",
                "+import org.apache.directory.api.ldap.extras.extended.endTransaction.EndTransactionResponseImpl;",
                "+import org.apache.directory.api.ldap.extras.extended.endTransaction.UpdateControls;",
                "+import org.apache.directory.api.ldap.model.message.Control;",
                "+import org.apache.directory.api.util.Strings;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import static org.apache.directory.api.asn1.ber.tlv.UniversalTag.INTEGER;",
                "+",
                "+/**",
                "+ * This class implements the EndTransactionResponse extended operation's ASN.1 grammar. ",
                "+ * All the actions are declared in this class. As it is a singleton, ",
                "+ * these declaration are only done once. The grammar is :",
                "+ * ",
                "+ * <pre>",
                "+ * txnEndRes ::= SEQUENCE {",
                "+ *         messageID MessageID OPTIONAL,",
                "+ *              -- msgid associated with non-success resultCode",
                "+ *         updatesControls SEQUENCE OF updateControl SEQUENCE {",
                "+ *              messageID MessageID,",
                "+ *                   -- msgid associated with controls",
                "+ *              controls  Controls",
                "+ *         } OPTIONAL",
                "+ *    }",
                "+ * </pre>",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class EndTransactionResponseGrammar extends AbstractGrammar<EndTransactionResponseContainer>",
                "+{",
                "+    /** logger */",
                "+    private static final Logger LOG = LoggerFactory.getLogger( EndTransactionResponseGrammar.class );",
                "+",
                "+    /** Speedup for logs */",
                "+    static final boolean IS_DEBUG = LOG.isDebugEnabled();",
                "+",
                "+    /** The instance of grammar. EndTransactionResponseGrammar is a singleton */",
                "+    private static Grammar<EndTransactionResponseContainer> instance = new EndTransactionResponseGrammar();",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new EndTransactionResponseGrammar object.",
                "+     */",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    public EndTransactionResponseGrammar()",
                "+    {",
                "+        setName( EndTransactionResponseGrammar.class.getName() );",
                "+",
                "+        // Create the transitions table",
                "+        super.transitions = new GrammarTransition[EndTransactionResponseStates.LAST_STATE",
                "+            .ordinal()][256];",
                "+",
                "+        /**",
                "+         * Transition from init state to EndTransactionResponse Sequence",
                "+         * ",
                "+         *  txnEndRes ::= SEQUENCE {",
                "+         *     ...",
                "+         *     ",
                "+         * Creates the EndTransactionResponse object",
                "+         */",
                "+        super.transitions[EndTransactionResponseStates.START_STATE.ordinal()][SEQUENCE.getValue()] =",
                "+            new GrammarTransition<EndTransactionResponseContainer>(",
                "+                EndTransactionResponseStates.START_STATE,",
                "+                EndTransactionResponseStates.END_TRANSACTION_SEQUENCE_STATE,",
                "+                SEQUENCE, ",
                "+                new GrammarAction<EndTransactionResponseContainer>( \"Init EndTransactionResponse\" )",
                "+                {",
                "+                    public void action( EndTransactionResponseContainer container )",
                "+                    {",
                "+                        // Create the decorator, and stores it in the container",
                "+                        EndTransactionResponseDecorator endTransactionResponseDecorator = new EndTransactionResponseDecorator(",
                "+                            LdapApiServiceFactory.getSingleton(), new EndTransactionResponseImpl() );",
                "+                        container.setEndTransactionResponse( endTransactionResponseDecorator );",
                "+                    }",
                "+                } );",
                "+",
                "+        /**",
                "+         * Transition from Sequence to messageId",
                "+         *",
                "+         * txnEndReq ::= SEQUENCE {",
                "+         *         messageID MessageID OPTIONAL,",
                "+         *              -- msgid associated with non-success resultCode",
                "+         *     ...",
                "+         *     ",
                "+         * Set the messageId into the EndTransactionResponse instance, if it's not SUCCESS.",
                "+         */",
                "+        super.transitions[EndTransactionResponseStates.END_TRANSACTION_SEQUENCE_STATE.ordinal()][INTEGER.getValue()] =",
                "+            new GrammarTransition<EndTransactionResponseContainer>(",
                "+                EndTransactionResponseStates.END_TRANSACTION_SEQUENCE_STATE,",
                "+                EndTransactionResponseStates.FAILED_MESSAGE_ID_STATE,",
                "+                INTEGER,",
                "+                new GrammarAction<EndTransactionResponseContainer>( \"Set EndTransactionResponse failed MessageID\" )",
                "+                {",
                "+                    public void action( EndTransactionResponseContainer container ) throws DecoderException",
                "+                    {",
                "+                        BerValue value = container.getCurrentTLV().getValue();",
                "+",
                "+                        try",
                "+                        {",
                "+                            int failedMessageId = IntegerDecoder.parse( value );",
                "+                            ",
                "+                            if ( failedMessageId > 0 )",
                "+                            {",
                "+                                container.getEndTransactionResponse().setFailedMessageId( failedMessageId );",
                "+                            }",
                "+",
                "+                            // We may have nothing left",
                "+                            container.setGrammarEndAllowed( true );",
                "+                        }",
                "+                        catch ( IntegerDecoderException ide )",
                "+                        {",
                "+                            LOG.error( I18n",
                "+                                .err( I18n.ERR_04490_BAD_END_TRANSACTION_COMMIT, Strings.dumpBytes( value.getData() ), ide.getMessage() ) );",
                "+",
                "+                            // This will generate a PROTOCOL_ERROR",
                "+                            throw new DecoderException( ide.getMessage(), ide );",
                "+                        }",
                "+                    }",
                "+                } );",
                "+",
                "+        ",
                "+        /**",
                "+         * Transition from Sequence to updateControls",
                "+         *",
                "+         * txnEndReq ::= SEQUENCE {",
                "+         *                  ...",
                "+         *                  updatesControls SEQUENCE OF updateControls SEQUENCE {",
                "+         *     ",
                "+         * Nothing to do, just transitionning",
                "+         */",
                "+        super.transitions[EndTransactionResponseStates.END_TRANSACTION_SEQUENCE_STATE.ordinal()][SEQUENCE.getValue()] =",
                "+            new GrammarTransition<EndTransactionResponseContainer>(",
                "+                EndTransactionResponseStates.END_TRANSACTION_SEQUENCE_STATE,",
                "+                EndTransactionResponseStates.UPDATE_CONTROLS_SEQ_STATE,",
                "+                SEQUENCE );",
                "+",
                "+        ",
                "+        /**",
                "+         * Transition from updateControls to updateControl",
                "+         *",
                "+         * txnEndReq ::= SEQUENCE {",
                "+         *                  ...updateControls SEQUENCE {",
                "+         *     ",
                "+         * Create a new UpdateControls instane",
                "+         */",
                "+        super.transitions[EndTransactionResponseStates.UPDATE_CONTROLS_SEQ_STATE.ordinal()][SEQUENCE.getValue()] =",
                "+            new GrammarTransition<EndTransactionResponseContainer>(",
                "+                EndTransactionResponseStates.UPDATE_CONTROLS_SEQ_STATE,",
                "+                EndTransactionResponseStates.UPDATE_CONTROL_SEQ_STATE,",
                "+                SEQUENCE,",
                "+                new GrammarAction<EndTransactionResponseContainer>( \"Create an updateControl\" )",
                "+                {",
                "+                    public void action( EndTransactionResponseContainer container )",
                "+                    {",
                "+                        // Create the current UpdateControls",
                "+                        UpdateControls currentUpdateControls = new UpdateControls();",
                "+                        ",
                "+                        container.getEndTransactionResponse().setCurrentControls( currentUpdateControls );",
                "+                    }",
                "+                } );",
                "+",
                "+        ",
                "+        /**",
                "+         * Transition from updateControl to messageId",
                "+         *",
                "+         * txnEndReq ::= SEQUENCE {",
                "+         *                  ...",
                "+         *                  messageID MessageID,",
                "+         *     ",
                "+         * Set the messageId into the current updateControl",
                "+         */",
                "+        super.transitions[EndTransactionResponseStates.UPDATE_CONTROL_SEQ_STATE.ordinal()][INTEGER.getValue()] =",
                "+            new GrammarTransition<EndTransactionResponseContainer>(",
                "+                EndTransactionResponseStates.UPDATE_CONTROL_SEQ_STATE,",
                "+                EndTransactionResponseStates.CONTROL_MESSAGE_ID_STATE,",
                "+                INTEGER,",
                "+                new GrammarAction<EndTransactionResponseContainer>( \"Get the updateControl messageId\" )",
                "+                {",
                "+                    public void action( EndTransactionResponseContainer container ) throws DecoderException",
                "+                    {",
                "+                        UpdateControls currentUpdateControls = container.getEndTransactionResponse().getCurrentUpdateControls();",
                "+                        BerValue value = container.getCurrentTLV().getValue();",
                "+",
                "+                        try",
                "+                        {",
                "+                            int messageId = IntegerDecoder.parse( value );",
                "+                            ",
                "+                            currentUpdateControls.setMessageId( messageId );",
                "+                            ",
                "+                            // Make the container gather the following bytes",
                "+                            container.setGathering( true );",
                "+                        }",
                "+                        catch ( IntegerDecoderException ide )",
                "+                        {",
                "+                            LOG.error( I18n",
                "+                                .err( I18n.ERR_04491_BAD_END_TRANSACTION_MESSAGE_ID, Strings.dumpBytes( value.getData() ), ",
                "+                                    ide.getMessage() ) );",
                "+",
                "+                            // This will generate a PROTOCOL_ERROR",
                "+                            throw new DecoderException( ide.getMessage(), ide );",
                "+                        }",
                "+                    }",
                "+                } );",
                "+        ",
                "+        ",
                "+        /**",
                "+         * ...",
                "+         *              messageID MessageID,",
                "+         *                   -- msgid associated with controls",
                "+         *              controls  Controls",
                "+         *  ...",
                "+         *",
                "+         * Process the controls",
                "+         */",
                "+        super.transitions[EndTransactionResponseStates.CONTROL_MESSAGE_ID_STATE.ordinal()][SEQUENCE.getValue()] =",
                "+            new GrammarTransition<EndTransactionResponseContainer>(",
                "+                EndTransactionResponseStates.CONTROL_MESSAGE_ID_STATE,",
                "+                EndTransactionResponseStates.CONTROLS_STATE,",
                "+                SEQUENCE,",
                "+                new GrammarAction<EndTransactionResponseContainer>( \"Process the controls\" )",
                "+                {",
                "+                    public void action( EndTransactionResponseContainer container ) throws DecoderException",
                "+                    {",
                "+                        BerValue value = container.getCurrentTLV().getValue();",
                "+                        ",
                "+                        container.setGathering( false );",
                "+",
                "+                        try",
                "+                        {",
                "+                            List<Control> controls = EndTransactionResponseContainer.decode( value.getData() );",
                "+                            ",
                "+                            // Add the updateControls to the list of updateControls",
                "+                            UpdateControls currentUpdateControls = container.getEndTransactionResponse().getCurrentUpdateControls();",
                "+                            ",
                "+                            // Add the decoder controls",
                "+                            currentUpdateControls.setControls( controls );",
                "+                            ",
                "+                            // And add the decoded updateControls to the list of updateControls",
                "+                            container.getEndTransactionResponse().getUpdateControls().add( currentUpdateControls );",
                "+                        }",
                "+                        catch ( DecoderException de )",
                "+                        {",
                "+                            // Add an error",
                "+                            LOG.error( I18n",
                "+                                .err( I18n.ERR_04099_INVALID_CONTROL_LIST, Strings.dumpBytes( value.getData() ), ",
                "+                                    de.getMessage() ) );",
                "+",
                "+                            // This will generate a PROTOCOL_ERROR",
                "+                            throw new DecoderException( de.getMessage(), de );",
                "+                        }",
                "+",
                "+                        // We may have nothing left",
                "+                        container.setGrammarEndAllowed( true );",
                "+                    }",
                "+                } );",
                "+",
                "+        ",
                "+        /**",
                "+         * Transition from controls to updateControl",
                "+         *",
                "+         * txnEndReq ::= SEQUENCE {",
                "+         *                  ...",
                "+         *                  messageID MessageID,",
                "+         *     ",
                "+         * Loop on the updateControl",
                "+         */",
                "+        super.transitions[EndTransactionResponseStates.CONTROLS_STATE.ordinal()][SEQUENCE.getValue()] =",
                "+            new GrammarTransition<EndTransactionResponseContainer>(",
                "+                EndTransactionResponseStates.CONTROLS_STATE,",
                "+                EndTransactionResponseStates.UPDATE_CONTROL_SEQ_STATE,",
                "+                SEQUENCE,",
                "+                new GrammarAction<EndTransactionResponseContainer>( \"Get the updateControl messageId\" )",
                "+                {",
                "+                    public void action( EndTransactionResponseContainer container )",
                "+                    {",
                "+                        // Create a new current UpdateControl",
                "+                        UpdateControls currentUpdateControls = new UpdateControls();",
                "+                        ",
                "+                        container.getEndTransactionResponse().setCurrentControls( currentUpdateControls );",
                "+                    }",
                "+                } );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * This class is a singleton.",
                "+     * ",
                "+     * @return An instance on this grammar",
                "+     */",
                "+    public static Grammar<EndTransactionResponseContainer> getInstance()",
                "+    {",
                "+        return instance;",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseStates.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseStates.java",
                "new file mode 100644",
                "index 000000000..7be6e9e74",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseStates.java",
                "@@ -0,0 +1,103 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.ber.grammar.States;",
                "+",
                "+",
                "+/**",
                "+ * This class store the EndTransactionResponse's grammar constants. It is also used",
                "+ * for debugging purposes.",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public enum EndTransactionResponseStates implements States",
                "+{",
                "+    /** The END_STATE */",
                "+    END_STATE,",
                "+    ",
                "+    /** start state*/",
                "+    START_STATE,",
                "+    ",
                "+    /** The initial SEQUENCE */",
                "+    END_TRANSACTION_SEQUENCE_STATE,",
                "+    ",
                "+    /** The failed message ID */",
                "+    FAILED_MESSAGE_ID_STATE,",
                "+    ",
                "+    /** The update controls SEQ */",
                "+    UPDATE_CONTROLS_SEQ_STATE,",
                "+    ",
                "+    /** The update control SEQ */",
                "+    UPDATE_CONTROL_SEQ_STATE,",
                "+    ",
                "+    /** THe control's message ID state */",
                "+    CONTROL_MESSAGE_ID_STATE,",
                "+    ",
                "+    /** The control's state */",
                "+    CONTROLS_STATE,",
                "+",
                "+    /** Last state */",
                "+    LAST_STATE;",
                "+",
                "+",
                "+    /**",
                "+     * Get the grammar name",
                "+     * ",
                "+     * @return The grammar name",
                "+     */",
                "+    public String getGrammarName()",
                "+    {",
                "+        return \"END_TRANSACTION_RESPONSE_GRAMMER\";",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Get the string representing the state",
                "+     * ",
                "+     * @param state The state number",
                "+     * @return The String representing the state",
                "+     */",
                "+    public String getState( int state )",
                "+    {",
                "+        return ( state == END_STATE.ordinal() ) ? \"END_TRANSACTION_RESPONSE_GRAMMER\" : name();",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public boolean isEndState()",
                "+    {",
                "+        return this == END_STATE;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public EndTransactionResponseStates getStartState()",
                "+    {",
                "+        return START_STATE;",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/ControlsContainer.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/ControlsContainer.java",
                "new file mode 100644",
                "index 000000000..3d9d74814",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/ControlsContainer.java",
                "@@ -0,0 +1,104 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.controls;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+import org.apache.directory.api.asn1.ber.AbstractContainer;",
                "+import org.apache.directory.api.ldap.codec.api.CodecControl;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+import org.apache.directory.api.ldap.codec.osgi.DefaultLdapCodecService;",
                "+import org.apache.directory.api.ldap.model.message.Control;",
                "+",
                "+/**",
                "+ * A container storing decoded controls for a EndTransactionResponse extended operation",
                "+ *  ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class ControlsContainer extends AbstractContainer",
                "+{",
                "+    /** The list of decoded controls */",
                "+    private List<Control> controls = new ArrayList<>();",
                "+    ",
                "+    /** The current control */",
                "+    private CodecControl<?> currentControl;",
                "+",
                "+    /** The codec service */",
                "+    private final LdapApiService codec;",
                "+",
                "+    /**",
                "+     * A constructor for this container",
                "+     */",
                "+    public ControlsContainer()",
                "+    {",
                "+        super();",
                "+        setGrammar( ControlsGrammar.getInstance() );",
                "+        setTransition( ControlsStates.START_STATE );",
                "+        this.codec = new DefaultLdapCodecService();",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Gets the {@link LdapApiService} associated with this Container.",
                "+     *",
                "+     * @return The LDAP service instance",
                "+     */",
                "+    public LdapApiService getLdapCodecService()",
                "+    {",
                "+        return codec;",
                "+    }",
                "+",
                "+    ",
                "+    /**",
                "+     * @return the currentControl",
                "+     */",
                "+    public CodecControl<?> getCurrentControl()",
                "+    {",
                "+        return currentControl;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @param currentControl the currentControl to set",
                "+     */",
                "+    public void setCurrentControl( CodecControl<?> currentControl )",
                "+    {",
                "+        this.currentControl = currentControl;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @return the controls",
                "+     */",
                "+    public List<Control> getControls()",
                "+    {",
                "+        return controls;",
                "+    }",
                "+    ",
                "+",
                "+    /**",
                "+     * @param control the controls to add to the list of controls",
                "+     */",
                "+    public void addControl( Control control )",
                "+    {",
                "+        controls.add( control );",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/ControlsGrammar.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/ControlsGrammar.java",
                "new file mode 100644",
                "index 000000000..d9e3b2c68",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/ControlsGrammar.java",
                "@@ -0,0 +1,219 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.controls;",
                "+",
                "+import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.asn1.ber.grammar.AbstractGrammar;",
                "+import org.apache.directory.api.asn1.ber.grammar.Grammar;",
                "+import org.apache.directory.api.asn1.ber.grammar.GrammarAction;",
                "+import org.apache.directory.api.asn1.ber.grammar.GrammarTransition;",
                "+import org.apache.directory.api.asn1.ber.tlv.TLV;",
                "+import org.apache.directory.api.i18n.I18n;",
                "+import org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.controls.actions.AddControl;",
                "+import org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.controls.actions.StoreControlCriticality;",
                "+import org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.controls.actions.StoreControlValue;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+import static org.apache.directory.api.asn1.ber.tlv.UniversalTag.BOOLEAN;",
                "+import static org.apache.directory.api.asn1.ber.tlv.UniversalTag.OCTET_STRING;",
                "+import static org.apache.directory.api.asn1.ber.tlv.UniversalTag.SEQUENCE;",
                "+",
                "+/**",
                "+ * A grammar to decode controls in a EndTransactionResponse extended operation",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class ControlsGrammar extends AbstractGrammar<ControlsContainer>",
                "+{",
                "+    /** logger */",
                "+    private static final Logger LOG = LoggerFactory.getLogger( ControlsGrammar.class );",
                "+",
                "+    /** Speedup for logs */",
                "+    static final boolean IS_DEBUG = LOG.isDebugEnabled();",
                "+",
                "+    /** The instance of grammar. ControlsGrammar is a singleton */",
                "+    private static Grammar<ControlsContainer> instance = new ControlsGrammar();",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new ControlsGrammar object.",
                "+     */",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    public ControlsGrammar()",
                "+    {",
                "+        setName( ControlsGrammar.class.getName() );",
                "+",
                "+        // Create the transitions table",
                "+        super.transitions = new GrammarTransition[ControlsStates.LAST_STATE.ordinal()][256];",
                "+",
                "+        /**",
                "+         * Transition from init state to Control Sequence",
                "+         * ",
                "+         *  Control ::= SEQUENCE {",
                "+         *     ...",
                "+         *     ",
                "+         * Creates the current control instance",
                "+         */",
                "+        super.transitions[ControlsStates.START_STATE.ordinal()][SEQUENCE.getValue()] =",
                "+            new GrammarTransition<ControlsContainer>(",
                "+                ControlsStates.START_STATE,",
                "+                ControlsStates.CONTROL_SEQUENCE_STATE,",
                "+                SEQUENCE, ",
                "+                new GrammarAction<ControlsContainer>( \"Init Control\" )",
                "+                {",
                "+                    public void action( ControlsContainer container ) throws DecoderException",
                "+                    {",
                "+                        TLV tlv = container.getCurrentTLV();",
                "+                        int expectedLength = tlv.getLength();",
                "+",
                "+                        // The Length should be null",
                "+                        if ( expectedLength == 0 )",
                "+                        {",
                "+                            String msg = I18n.err( I18n.ERR_04096_NULL_CONTROL_LENGTH );",
                "+                            LOG.error( msg );",
                "+",
                "+                            // This will generate a PROTOCOL_ERROR",
                "+                            throw new DecoderException( msg );",
                "+                        }",
                "+                    }",
                "+                } );",
                "+",
                "+        /**",
                "+         * Transition from controlSequence state to control type",
                "+         * ",
                "+         *  Control ::= SEQUENCE {",
                "+         *     controlType             LDAPOID,",
                "+         *     ...",
                "+         *     ",
                "+         * Creates the current control instance",
                "+         */",
                "+        super.transitions[ControlsStates.CONTROL_SEQUENCE_STATE.ordinal()][OCTET_STRING.getValue()] =",
                "+            new GrammarTransition<ControlsContainer>(",
                "+                ControlsStates.CONTROL_SEQUENCE_STATE,",
                "+                ControlsStates.CONTROL_TYPE_STATE,",
                "+                OCTET_STRING, ",
                "+                new AddControl() );",
                "+",
                "+        /**",
                "+         * Transition from control type to control criticality",
                "+         * ",
                "+         *  Control ::= SEQUENCE {",
                "+         *     controlType             LDAPOID,",
                "+         *     criticality             BOOLEAN DEFAULT FALSE,",
                "+         *     ...",
                "+         *     ",
                "+         * Store the criticality",
                "+         */",
                "+        super.transitions[ControlsStates.CONTROL_TYPE_STATE.ordinal()][BOOLEAN.getValue()] =",
                "+            new GrammarTransition<ControlsContainer>(",
                "+                ControlsStates.CONTROL_TYPE_STATE,",
                "+                ControlsStates.CONTROL_CRITICALITY_STATE,",
                "+                BOOLEAN, ",
                "+                new StoreControlCriticality() );",
                "+",
                "+        /**",
                "+         * Transition from control type to control value",
                "+         * ",
                "+         *  Control ::= SEQUENCE {",
                "+         *     controlType             LDAPOID,",
                "+         *     ...",
                "+         *     controlValue            OCTET STRING OPTIONAL }",
                "+         *     ",
                "+         * Store the value",
                "+         */",
                "+        super.transitions[ControlsStates.CONTROL_TYPE_STATE.ordinal()][OCTET_STRING.getValue()] =",
                "+            new GrammarTransition<ControlsContainer>(",
                "+                ControlsStates.CONTROL_TYPE_STATE,",
                "+                ControlsStates.CONTROL_VALUE_STATE,",
                "+                OCTET_STRING, ",
                "+                new StoreControlValue() );",
                "+",
                "+        /**",
                "+         * Transition from control type to control sequence",
                "+         * ",
                "+         *  Control ::= SEQUENCE {",
                "+         *     controlType             LDAPOID,",
                "+         *     ",
                "+         * Nothing to do",
                "+         */",
                "+        super.transitions[ControlsStates.CONTROL_TYPE_STATE.ordinal()][SEQUENCE.getValue()] =",
                "+            new GrammarTransition<ControlsContainer>(",
                "+                ControlsStates.CONTROL_TYPE_STATE,",
                "+                ControlsStates.CONTROL_SEQUENCE_STATE,",
                "+                SEQUENCE );",
                "+        ",
                "+        /**",
                "+         * Transition from control criticality to control value",
                "+         * ",
                "+         *  Control ::= SEQUENCE {",
                "+         *     ...",
                "+         *     criticality             BOOLEAN DEFAULT FALSE,",
                "+         *     controlValue            OCTET STRING OPTIONAL }",
                "+         *     ",
                "+         * Store the value",
                "+         */",
                "+        super.transitions[ControlsStates.CONTROL_CRITICALITY_STATE.ordinal()][OCTET_STRING.getValue()] =",
                "+            new GrammarTransition<ControlsContainer>(",
                "+                ControlsStates.CONTROL_CRITICALITY_STATE,",
                "+                ControlsStates.CONTROL_VALUE_STATE,",
                "+                OCTET_STRING, ",
                "+                new StoreControlValue() );",
                "+        ",
                "+        /**",
                "+         * Transition from control criticality to control sequence",
                "+         * ",
                "+         *  Control ::= SEQUENCE {",
                "+         *     ...",
                "+         *     criticality             BOOLEAN DEFAULT FALSE,",
                "+         *     ",
                "+         * Nothing to do",
                "+         */",
                "+        super.transitions[ControlsStates.CONTROL_CRITICALITY_STATE.ordinal()][SEQUENCE.getValue()] =",
                "+            new GrammarTransition<ControlsContainer>(",
                "+                ControlsStates.CONTROL_CRITICALITY_STATE,",
                "+                ControlsStates.CONTROL_SEQUENCE_STATE,",
                "+                SEQUENCE );",
                "+",
                "+        /**",
                "+         * Transition from control value to control sequence",
                "+         * ",
                "+         *  Control ::= SEQUENCE {",
                "+         *     ",
                "+         * Nothing to do",
                "+         */",
                "+        super.transitions[ControlsStates.CONTROL_VALUE_STATE.ordinal()][SEQUENCE.getValue()] =",
                "+            new GrammarTransition<ControlsContainer>(",
                "+                ControlsStates.CONTROL_VALUE_STATE,",
                "+                ControlsStates.CONTROL_SEQUENCE_STATE,",
                "+                SEQUENCE ); ",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * This class is a singleton.",
                "+     * ",
                "+     * @return An instance on this grammar",
                "+     */",
                "+    public static Grammar<ControlsContainer> getInstance()",
                "+    {",
                "+        return instance;",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/ControlsStates.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/ControlsStates.java",
                "new file mode 100644",
                "index 000000000..b0d10fc7b",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/ControlsStates.java",
                "@@ -0,0 +1,95 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *  ",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *  ",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License. ",
                "+ *  ",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.controls;",
                "+",
                "+import org.apache.directory.api.asn1.ber.grammar.States;",
                "+",
                "+/**",
                "+ * This class store the Controls' grammar constants. It is also used",
                "+ * for debugging purposes.",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public enum ControlsStates implements States",
                "+{",
                "+    /** The END_STATE */",
                "+    END_STATE,",
                "+    ",
                "+    /** start state*/",
                "+    START_STATE,",
                "+    ",
                "+    /** The Control SEQUENCE */",
                "+    CONTROL_SEQUENCE_STATE,",
                "+    ",
                "+    /** The Control type */",
                "+    CONTROL_TYPE_STATE,",
                "+    ",
                "+    /** The criticality */",
                "+    CONTROL_CRITICALITY_STATE,",
                "+    ",
                "+    /** The value */",
                "+    CONTROL_VALUE_STATE,",
                "+",
                "+    /** Last state */",
                "+    LAST_STATE;",
                "+",
                "+",
                "+    /**",
                "+     * Get the grammar name",
                "+     * ",
                "+     * @return The grammar name",
                "+     */",
                "+    public String getGrammarName()",
                "+    {",
                "+        return \"CONTROLS_GRAMMAR\";",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Get the string representing the state",
                "+     * ",
                "+     * @param state The state number",
                "+     * @return The String representing the state",
                "+     */",
                "+    public String getState( int state )",
                "+    {",
                "+        return ( state == END_STATE.ordinal() ) ? \"CONTROLS_GRAMMER\" : name();",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public boolean isEndState()",
                "+    {",
                "+        return this == END_STATE;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public ControlsStates getStartState()",
                "+    {",
                "+        return START_STATE;",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/actions/AddControl.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/actions/AddControl.java",
                "new file mode 100644",
                "index 000000000..37c9451e5",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/actions/AddControl.java",
                "@@ -0,0 +1,107 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.controls.actions;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.asn1.ber.grammar.GrammarAction;",
                "+import org.apache.directory.api.asn1.ber.tlv.TLV;",
                "+import org.apache.directory.api.asn1.util.Oid;",
                "+import org.apache.directory.api.i18n.I18n;",
                "+import org.apache.directory.api.ldap.codec.api.CodecControl;",
                "+import org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.controls.ControlsContainer;",
                "+import org.apache.directory.api.util.Strings;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+",
                "+/**",
                "+ * The action used add a new control. We store its OID.",
                "+ * <pre>",
                "+ * Control ::= SEQUENCE {",
                "+ *     controlType             LDAPOID,",
                "+ *     ...",
                "+ * </pre>",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class AddControl extends GrammarAction<ControlsContainer>",
                "+{",
                "+    /** The logger */",
                "+    private static final Logger LOG = LoggerFactory.getLogger( AddControl.class );",
                "+",
                "+    /** Speedup for logs */",
                "+    private static final boolean IS_DEBUG = LOG.isDebugEnabled();",
                "+",
                "+",
                "+    /**",
                "+     * Instantiates a new AddControl action.",
                "+     */",
                "+    public AddControl()",
                "+    {",
                "+        super( \"Add a new control\" );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    public void action( ControlsContainer container ) throws DecoderException",
                "+    {",
                "+        TLV tlv = container.getCurrentTLV();",
                "+",
                "+        // Store the type",
                "+        // We have to handle the special case of a 0 length OID",
                "+        if ( tlv.getLength() == 0 )",
                "+        {",
                "+            String msg = I18n.err( I18n.ERR_04097_NULL_CONTROL_OID );",
                "+            LOG.error( msg );",
                "+",
                "+            // This will generate a PROTOCOL_ERROR",
                "+            throw new DecoderException( msg );",
                "+        }",
                "+",
                "+        byte[] value = tlv.getValue().getData();",
                "+        String oidValue = Strings.asciiBytesToString( value );",
                "+",
                "+        // The OID is encoded as a String, not an Object Id",
                "+        if ( !Oid.isOid( oidValue ) )",
                "+        {",
                "+            String msg = I18n.err( I18n.ERR_04098_INVALID_CONTROL_OID, oidValue );",
                "+            LOG.error( msg );",
                "+",
                "+            // This will generate a PROTOCOL_ERROR",
                "+            throw new DecoderException( msg );",
                "+        }",
                "+",
                "+        CodecControl<?> control = container.getLdapCodecService().newControl( oidValue );",
                "+",
                "+        container.setCurrentControl( control );",
                "+        container.addControl( control );",
                "+        ",
                "+        // We can have an END transition",
                "+        container.setGrammarEndAllowed( true );",
                "+",
                "+        if ( IS_DEBUG )",
                "+        {",
                "+            LOG.debug( \"Control OID : {}\", oidValue );",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/actions/StoreControlCriticality.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/actions/StoreControlCriticality.java",
                "new file mode 100644",
                "index 000000000..ad5fe5a50",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/actions/StoreControlCriticality.java",
                "@@ -0,0 +1,106 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.controls.actions;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.asn1.ber.grammar.GrammarAction;",
                "+import org.apache.directory.api.asn1.ber.tlv.BerValue;",
                "+import org.apache.directory.api.asn1.ber.tlv.BooleanDecoder;",
                "+import org.apache.directory.api.asn1.ber.tlv.BooleanDecoderException;",
                "+import org.apache.directory.api.asn1.ber.tlv.TLV;",
                "+import org.apache.directory.api.i18n.I18n;",
                "+import org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.controls.ControlsContainer;",
                "+import org.apache.directory.api.ldap.model.message.Control;",
                "+import org.apache.directory.api.util.Strings;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+",
                "+/**",
                "+ * The action used to set the control criticality flag",
                "+ * <pre>",
                "+ * Control ::= SEQUENCE {",
                "+ *     ...",
                "+ *     criticality BOOLEAN DEFAULT FALSE,",
                "+ *     ...",
                "+ * </pre>",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class StoreControlCriticality extends GrammarAction<ControlsContainer>",
                "+{",
                "+    /** The logger */",
                "+    private static final Logger LOG = LoggerFactory.getLogger( StoreControlCriticality.class );",
                "+",
                "+    /** Speedup for logs */",
                "+    private static final boolean IS_DEBUG = LOG.isDebugEnabled();",
                "+",
                "+",
                "+    /**",
                "+     * Instantiates a new StoreControlCriticality action.",
                "+     */",
                "+    public StoreControlCriticality()",
                "+    {",
                "+        super( \"Store the control criticality\" );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    public void action( ControlsContainer container ) throws DecoderException",
                "+    {",
                "+        TLV tlv = container.getCurrentTLV();",
                "+",
                "+        // Get the current control",
                "+        Control control = container.getCurrentControl();",
                "+",
                "+        // Store the criticality",
                "+        // We get the value. If it's a 0, it's a FALSE. If it's",
                "+        // a FF, it's a TRUE. Any other value should be an error,",
                "+        // but we could relax this constraint. So if we have",
                "+        // something",
                "+        // which is not 0, it will be interpreted as TRUE, but we",
                "+        // will generate a warning.",
                "+        BerValue value = tlv.getValue();",
                "+",
                "+        try",
                "+        {",
                "+            control.setCritical( BooleanDecoder.parse( value ) );",
                "+        }",
                "+        catch ( BooleanDecoderException bde )",
                "+        {",
                "+            LOG.error( I18n",
                "+                .err( I18n.ERR_04100_BAD_CONTROL_CRITICALITY, Strings.dumpBytes( value.getData() ), bde.getMessage() ) );",
                "+",
                "+            // This will generate a PROTOCOL_ERROR",
                "+            throw new DecoderException( bde.getMessage(), bde );",
                "+        }",
                "+",
                "+        // We can have an END transition",
                "+        container.setGrammarEndAllowed( true );",
                "+",
                "+        if ( IS_DEBUG )",
                "+        {",
                "+            LOG.debug( \"Control criticality : {}\", control.isCritical() );",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/actions/StoreControlValue.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/actions/StoreControlValue.java",
                "new file mode 100644",
                "index 000000000..bbe35a3ea",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/actions/StoreControlValue.java",
                "@@ -0,0 +1,94 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.controls.actions;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.ber.grammar.GrammarAction;",
                "+import org.apache.directory.api.asn1.ber.tlv.BerValue;",
                "+import org.apache.directory.api.asn1.ber.tlv.TLV;",
                "+import org.apache.directory.api.ldap.codec.api.CodecControl;",
                "+import org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.controls.ControlsContainer;",
                "+import org.apache.directory.api.util.Strings;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+",
                "+/**",
                "+ * The action used to set the value of a control. This is an extension point",
                "+ * where different controls can be plugged in (at least eventually). For now we",
                "+ * hard code controls.",
                "+ * <pre>",
                "+ * Control ::= SEQUENCE {",
                "+ *     ...",
                "+ *     controlValue OCTET STRING OPTIONAL }",
                "+ * </pre>",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class StoreControlValue extends GrammarAction<ControlsContainer>",
                "+{",
                "+    /** The logger */",
                "+    private static final Logger LOG = LoggerFactory.getLogger( StoreControlValue.class );",
                "+",
                "+    /** Speedup for logs */",
                "+    private static final boolean IS_DEBUG = LOG.isDebugEnabled();",
                "+",
                "+",
                "+    /**",
                "+     * Instantiates a new StoreControlValue action.",
                "+     */",
                "+    public StoreControlValue()",
                "+    {",
                "+        super( \"Store the control value\" );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void action( ControlsContainer container )",
                "+    {",
                "+        TLV tlv = container.getCurrentTLV();",
                "+",
                "+        CodecControl<?> control = container.getCurrentControl();",
                "+",
                "+        // Get the current control",
                "+        BerValue value = tlv.getValue();",
                "+",
                "+        // Store the value - have to handle the special case of a 0 length value",
                "+        if ( tlv.getLength() == 0 )",
                "+        {",
                "+            control.setValue( Strings.EMPTY_BYTES );",
                "+        }",
                "+        else",
                "+        {",
                "+            control.setValue( value.getData() );",
                "+        }",
                "+",
                "+        // We can have an END transition",
                "+        container.setGrammarEndAllowed( true );",
                "+",
                "+        if ( IS_DEBUG )",
                "+        {",
                "+            LOG.debug( \"Control value : {}\", Strings.dumpBytes( control.getValue() ) );",
                "+        }",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "i18n/src/main/java/org/apache/directory/api/i18n/I18n.java",
                "i18n/src/main/resources/org/apache/directory/api/i18n/errors.properties",
                "ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/CheckLengthNotNull.java",
                "ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/controls/AddControl.java",
                "ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/controls/StoreControlCriticality.java",
                "ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/LdapEncoder.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponse.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponseImpl.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/UpdateControls.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStates.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseContainer.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecoder.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseGrammar.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseStates.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/ControlsContainer.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/ControlsGrammar.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/ControlsStates.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/actions/AddControl.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/actions/StoreControlCriticality.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/actions/StoreControlValue.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: LDAP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/ControlsGrammar.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/actions/StoreControlValue.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponse.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java, ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/controls/AddControl.java, ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/CheckLengthNotNull.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/actions/StoreControlCriticality.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/UpdateControls.java, ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/actions/controls/StoreControlCriticality.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/ControlsStates.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java, ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/LdapEncoder.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseGrammar.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/endTransaction/EndTransactionResponseImpl.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/actions/AddControl.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseStates.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseContainer.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/controls/ControlsContainer.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStates.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecoder.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: request, contain",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e74cf767777d5511327d2763914a1b61065783a6",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1516170897,
            "hunks": 28,
            "message": "o Made the Decorator interface inherit from Asn1Object, and removed the now useless encode() and computeLength() methods o MessageDecorator and ControlDecorator does not need to implements Asn1Object, has they implement Decorator that now extends Asn1Object o Removed some useless 'implements CodecControl<XXX>' from some controls, it's already inherited by the XXX interface o OpaqueControl does not need to implements Control as it extends AbstractControl o Added the TransactionSpecification control o Some Javadoc formating",
            "diff": [
                "diff --git a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/ControlDecorator.java b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/ControlDecorator.java",
                "index 0d6a99003..cb03e0330 100644",
                "--- a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/ControlDecorator.java",
                "+++ b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/ControlDecorator.java",
                "@@ -22,3 +22,2 @@ package org.apache.directory.api.ldap.codec.api;",
                "-import org.apache.directory.api.asn1.Asn1Object;",
                " import org.apache.directory.api.ldap.model.message.Control;",
                "@@ -35,3 +34,3 @@ import org.apache.directory.api.ldap.model.message.Control;",
                "  */",
                "-public abstract class ControlDecorator<E extends Control> implements CodecControl<E>, Asn1Object",
                "+public abstract class ControlDecorator<E extends Control> implements CodecControl<E>",
                " {",
                "@@ -177,16 +176,2 @@ public abstract class ControlDecorator<E extends Control> implements CodecContro",
                "-    // ------------------------------------------------------------------------",
                "-    // CodecControl Methods",
                "-    // ------------------------------------------------------------------------",
                "-",
                "-    /**",
                "-     * {@inheritDoc}",
                "-     */",
                "-    @Override",
                "-    public int computeLength()",
                "-    {",
                "-        return 0;",
                "-    }",
                "-",
                "-",
                "     // ------------------------------------------------------------------------",
                "diff --git a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/Decorator.java b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/Decorator.java",
                "index 1a67cbba3..eceb716c3 100644",
                "--- a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/Decorator.java",
                "+++ b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/Decorator.java",
                "@@ -22,5 +22,3 @@ package org.apache.directory.api.ldap.codec.api;",
                "-import java.nio.ByteBuffer;",
                "-",
                "-import org.apache.directory.api.asn1.EncoderException;",
                "+import org.apache.directory.api.asn1.Asn1Object;",
                "@@ -35,3 +33,3 @@ import org.apache.directory.api.asn1.EncoderException;",
                "  */",
                "-public interface Decorator<E>",
                "+public interface Decorator<E> extends Asn1Object",
                " {",
                "@@ -45,20 +43,2 @@ public interface Decorator<E>",
                "-    /**",
                "-     * Compute the object length, which is the sum of all inner length.",
                "-     * ",
                "-     * @return The object's computed length",
                "-     */",
                "-    int computeLength();",
                "-",
                "-",
                "-    /**",
                "-     * Encode the object to a PDU.",
                "-     * ",
                "-     * @param buffer The buffer where to put the PDU",
                "-     * @return The PDU.",
                "-     * @throws EncoderException if the buffer can't be encoded",
                "-     */",
                "-    ByteBuffer encode( ByteBuffer buffer ) throws EncoderException;",
                "-",
                "-",
                "     /**",
                "diff --git a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/MessageDecorator.java b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/MessageDecorator.java",
                "index e950a26d6..133d05f6d 100644",
                "--- a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/MessageDecorator.java",
                "+++ b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/MessageDecorator.java",
                "@@ -25,3 +25,2 @@ import java.util.Map;",
                "-import org.apache.directory.api.asn1.Asn1Object;",
                " import org.apache.directory.api.ldap.codec.decorators.AbandonRequestDecorator;",
                "@@ -78,3 +77,3 @@ import org.apache.directory.api.ldap.model.message.UnbindRequest;",
                "  */",
                "-public abstract class MessageDecorator<E extends Message> implements Message, Decorator<E>, Asn1Object",
                "+public abstract class MessageDecorator<E extends Message> implements Message, Decorator<E>",
                " {",
                "diff --git a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/controls/cascade/CascadeDecorator.java b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/controls/cascade/CascadeDecorator.java",
                "index 53f414907..4bf07df32 100644",
                "--- a/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/controls/cascade/CascadeDecorator.java",
                "+++ b/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/controls/cascade/CascadeDecorator.java",
                "@@ -27,3 +27,2 @@ import org.apache.directory.api.asn1.DecoderException;",
                " import org.apache.directory.api.asn1.EncoderException;",
                "-import org.apache.directory.api.ldap.codec.api.CodecControl;",
                " import org.apache.directory.api.ldap.codec.api.ControlDecorator;",
                "@@ -38,3 +37,3 @@ import org.apache.directory.api.ldap.model.message.controls.Cascade;",
                "  */",
                "-public class CascadeDecorator extends ControlDecorator<Cascade> implements CodecControl<Cascade>, Cascade",
                "+public class CascadeDecorator extends ControlDecorator<Cascade> implements Cascade",
                " {",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdDirSync.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdDirSync.java",
                "index a4fc4bb05..1986a9034 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdDirSync.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdDirSync.java",
                "@@ -38,2 +38,3 @@ import org.apache.directory.api.ldap.model.message.Control;",
                "  * }",
                "+ * </pre>",
                "  * ",
                "@@ -41,2 +42,3 @@ import org.apache.directory.api.ldap.model.message.Control;",
                "  * ",
                "+ * <pre>",
                "  * Client side :",
                "@@ -47,2 +49,3 @@ import org.apache.directory.api.ldap.model.message.Control;",
                "  * }",
                "+ * </pre>",
                "  * ",
                "@@ -50,3 +53,4 @@ import org.apache.directory.api.ldap.model.message.Control;",
                "  * ",
                "- * server side :",
                "+ * <pre>",
                "+ * Server side :",
                "  * realReplControlValue ::= SEQUENCE {",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecification.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecification.java",
                "new file mode 100644",
                "index 000000000..7b92207ee",
                "--- /dev/null",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecification.java",
                "@@ -0,0 +1,46 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.transaction;",
                "+",
                "+import org.apache.directory.api.ldap.model.message.Control;",
                "+",
                "+/**",
                "+ * The Transaction Specification control. It's defined in RFC 5805.",
                "+ * This control is sent with every update once a transaction is started.",
                "+ * It contains the Transaction ID. ",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public interface TransactionSpecification extends Control",
                "+{",
                "+    /** The Transaction Specification control OID */",
                "+    String OID = \"1.3.6.1.1.21.2\";",
                "+",
                "+    /**",
                "+     * @return The transaction identifier",
                "+     */",
                "+    byte[] getIdentifier();",
                "+    ",
                "+    ",
                "+    /**",
                "+     * Set the transaction ID",
                "+     * @param The transaction identifier, an opaque byte array",
                "+     */",
                "+    void setIdentifier( byte[] identifier );",
                "+}",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationImpl.java",
                "new file mode 100644",
                "index 000000000..4e9f793cc",
                "--- /dev/null",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationImpl.java",
                "@@ -0,0 +1,86 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.transaction;",
                "+",
                "+import org.apache.directory.api.ldap.model.message.controls.AbstractControl;",
                "+import org.apache.directory.api.util.Strings;",
                "+",
                "+/**",
                "+ * The Transaction Specification control. It's defined in RFC 5805.",
                "+ * This control is sent with every update once a transaction is started.",
                "+ * It contains the Transaction ID. ",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class TransactionSpecificationImpl extends AbstractControl implements TransactionSpecification",
                "+{",
                "+    /** The Transaction Specification identifier */",
                "+    private byte[] identifier;",
                "+",
                "+",
                "+    /**",
                "+     * Default constructor",
                "+     */",
                "+    public TransactionSpecificationImpl()",
                "+    {",
                "+        super( OID );",
                "+    }",
                "+    ",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public byte[] getIdentifier()",
                "+    {",
                "+        return identifier;",
                "+    }",
                "+    ",
                "+    ",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void setIdentifier( byte[] identifier )",
                "+    {",
                "+        // Copy the byte[]",
                "+        if ( identifier != null )",
                "+        {",
                "+            this.identifier = new byte[identifier.length];",
                "+            System.arraycopy( identifier, 0, this.identifier, 0, identifier.length );",
                "+        }",
                "+    }",
                "+    ",
                "+    ",
                "+    /**",
                "+     * @see Object#toString()",
                "+     */",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        if ( identifier != null )",
                "+        {",
                "+            return \"Transaction specification ID=null\";",
                "+        }",
                "+        else",
                "+        {",
                "+            return \"Transaction specification ID=\" + Strings.dumpBytes( identifier );",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelRequestImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelRequestImpl.java",
                "index 806077f3e..f8b11e678 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelRequestImpl.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelRequestImpl.java",
                "@@ -30,2 +30,3 @@ import org.apache.directory.api.ldap.model.message.AbstractExtendedRequest;",
                "  * ",
                "+ * <pre>",
                "  * cancelRequestValue ::= SEQUENCE {",
                "@@ -34,3 +35,4 @@ import org.apache.directory.api.ldap.model.message.AbstractExtendedRequest;",
                "  * }",
                "- *",
                "+ * </pre>",
                "+ * ",
                "  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdShowDeletedDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdShowDeletedDecorator.java",
                "index b17b374c9..29a53dc8b 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdShowDeletedDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdShowDeletedDecorator.java",
                "@@ -27,3 +27,2 @@ import org.apache.directory.api.asn1.DecoderException;",
                " import org.apache.directory.api.asn1.EncoderException;",
                "-import org.apache.directory.api.ldap.codec.api.CodecControl;",
                " import org.apache.directory.api.ldap.codec.api.ControlDecorator;",
                "@@ -38,3 +37,3 @@ import org.apache.directory.api.ldap.extras.controls.ad.AdShowDeleted;",
                "  */",
                "-public class AdShowDeletedDecorator extends ControlDecorator<AdShowDeleted> implements CodecControl<AdShowDeleted>, AdShowDeleted",
                "+public class AdShowDeletedDecorator extends ControlDecorator<AdShowDeleted> implements AdShowDeleted",
                " {",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/permissiveModify_impl/PermissiveModifyDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/permissiveModify_impl/PermissiveModifyDecorator.java",
                "index 9ad67eeae..07c671337 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/permissiveModify_impl/PermissiveModifyDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/permissiveModify_impl/PermissiveModifyDecorator.java",
                "@@ -27,3 +27,2 @@ import org.apache.directory.api.asn1.DecoderException;",
                " import org.apache.directory.api.asn1.EncoderException;",
                "-import org.apache.directory.api.ldap.codec.api.CodecControl;",
                " import org.apache.directory.api.ldap.codec.api.ControlDecorator;",
                "@@ -38,3 +37,3 @@ import org.apache.directory.api.ldap.extras.controls.permissiveModify.Permissive",
                "  */",
                "-public class PermissiveModifyDecorator extends ControlDecorator<PermissiveModify> implements CodecControl<PermissiveModify>, PermissiveModify",
                "+public class PermissiveModifyDecorator extends ControlDecorator<PermissiveModify> implements PermissiveModify",
                " {",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationDecorator.java",
                "new file mode 100644",
                "index 000000000..a6f32095c",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationDecorator.java",
                "@@ -0,0 +1,122 @@",
                "+/*",
                "+ *   Licensed to the Apache Software Foundation (ASF) under one",
                "+ *   or more contributor license agreements.  See the NOTICE file",
                "+ *   distributed with this work for additional information",
                "+ *   regarding copyright ownership.  The ASF licenses this file",
                "+ *   to you under the Apache License, Version 2.0 (the",
                "+ *   \"License\"); you may not use this file except in compliance",
                "+ *   with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *   Unless required by applicable law or agreed to in writing,",
                "+ *   software distributed under the License is distributed on an",
                "+ *   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *   KIND, either express or implied.  See the License for the",
                "+ *   specific language governing permissions and limitations",
                "+ *   under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.transaction;",
                "+",
                "+import java.nio.ByteBuffer;",
                "+",
                "+import org.apache.directory.api.asn1.Asn1Object;",
                "+import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.asn1.EncoderException;",
                "+import org.apache.directory.api.ldap.codec.api.ControlDecorator;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+",
                "+/**",
                "+ * TransactionSpecification decorator.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class TransactionSpecificationDecorator extends ControlDecorator<TransactionSpecification> implements TransactionSpecification",
                "+{",
                "+    /**",
                "+     * Create a new instance of TransactionSpecificationDecorator",
                "+     * ",
                "+     * @param codec  The LDAP Service to use",
                "+     * @param decoratedControl The control to decorate",
                "+     */",
                "+    public TransactionSpecificationDecorator( LdapApiService codec, TransactionSpecification decoratedControl )",
                "+    {",
                "+        super( codec, decoratedControl );",
                "+    }",
                "+    ",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public Asn1Object decode( byte[] controlBytes ) throws DecoderException",
                "+    {",
                "+        // Nothing to decode, the byte array is copied as is in identifier",
                "+        setIdentifier( controlBytes );",
                "+        ",
                "+        return this;",
                "+    }",
                "+",
                "+    ",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public int computeLength()",
                "+    {",
                "+        byte[] identifier = getDecorated().getIdentifier();",
                "+        ",
                "+        if ( identifier != null )",
                "+        {",
                "+            return identifier.length;",
                "+        }",
                "+        else",
                "+        {",
                "+            return -1;",
                "+        }",
                "+    }",
                "+",
                "+    ",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public ByteBuffer encode( ByteBuffer buffer ) throws EncoderException",
                "+    {",
                "+        byte[] identifier = getDecorated().getIdentifier();",
                "+        ",
                "+        if ( identifier != null )",
                "+        {",
                "+            ByteBuffer encoded = ByteBuffer.allocate( identifier.length );",
                "+            ",
                "+            encoded.put( identifier );",
                "+            ",
                "+            return encoded;",
                "+        }",
                "+        else",
                "+        {",
                "+            return ByteBuffer.allocate( 0 );",
                "+        }",
                "+    }",
                "+",
                "+    ",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public byte[] getIdentifier()",
                "+    {",
                "+        return getDecorated().getIdentifier();",
                "+    }",
                "+",
                "+    ",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void setIdentifier( byte[] identifier )",
                "+    {",
                "+        getDecorated().setIdentifier( identifier );",
                "+    }",
                "+}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationFactory.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationFactory.java",
                "new file mode 100644",
                "index 000000000..0c8871eca",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationFactory.java",
                "@@ -0,0 +1,78 @@",
                "+/*",
                "+ *   Licensed to the Apache Software Foundation (ASF) under one",
                "+ *   or more contributor license agreements.  See the NOTICE file",
                "+ *   distributed with this work for additional information",
                "+ *   regarding copyright ownership.  The ASF licenses this file",
                "+ *   to you under the Apache License, Version 2.0 (the",
                "+ *   \"License\"); you may not use this file except in compliance",
                "+ *   with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *   Unless required by applicable law or agreed to in writing,",
                "+ *   software distributed under the License is distributed on an",
                "+ *   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *   KIND, either express or implied.  See the License for the",
                "+ *   specific language governing permissions and limitations",
                "+ *   under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.transaction;",
                "+",
                "+",
                "+import org.apache.directory.api.ldap.codec.api.CodecControl;",
                "+import org.apache.directory.api.ldap.codec.api.ControlFactory;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+",
                "+",
                "+/**",
                "+ * A codec {@link ControlFactory} implementation for {@link TransactionSpecification} controls.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class TransactionSpecificationFactory implements ControlFactory<TransactionSpecification>",
                "+{",
                "+    /** The LDAP codec responsible for encoding and decoding Cascade Controls */",
                "+    private LdapApiService codec;",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new instance of TransactionSpecificationFactory.",
                "+     *",
                "+     * @param codec The LDAP codec",
                "+     */",
                "+    public TransactionSpecificationFactory( LdapApiService codec )",
                "+    {",
                "+        this.codec = codec;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public String getOid()",
                "+    {",
                "+        return TransactionSpecification.OID;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public CodecControl<TransactionSpecification> newCodecControl()",
                "+    {",
                "+        return new TransactionSpecificationDecorator( codec, new TransactionSpecificationImpl() );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public CodecControl<TransactionSpecification> newCodecControl( TransactionSpecification control )",
                "+    {",
                "+        return new TransactionSpecificationDecorator( codec, control );",
                "+    }",
                "+}",
                "diff --git a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/AbstractExtendedRequest.java b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/AbstractExtendedRequest.java",
                "index ec5973aca..669913988 100644",
                "--- a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/AbstractExtendedRequest.java",
                "+++ b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/AbstractExtendedRequest.java",
                "@@ -184,2 +184,3 @@ public abstract class AbstractExtendedRequest extends AbstractRequest implements",
                "         int hash = 37;",
                "+        ",
                "         if ( oid != null )",
                "@@ -188,2 +189,3 @@ public abstract class AbstractExtendedRequest extends AbstractRequest implements",
                "         }",
                "+        ",
                "         hash = hash * 17 + super.hashCode();",
                "diff --git a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/OpaqueControl.java b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/OpaqueControl.java",
                "index b735d0e48..5272999ea 100644",
                "--- a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/OpaqueControl.java",
                "+++ b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/OpaqueControl.java",
                "@@ -35,3 +35,3 @@ import org.apache.directory.api.util.Strings;",
                "  */",
                "-public final class OpaqueControl extends AbstractControl implements Control",
                "+public final class OpaqueControl extends AbstractControl",
                " {",
                "diff --git a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortResponseControlImpl.java b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortResponseControlImpl.java",
                "index 92f276626..99773ebc8 100644",
                "--- a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortResponseControlImpl.java",
                "+++ b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortResponseControlImpl.java",
                "@@ -26,3 +26,3 @@ package org.apache.directory.api.ldap.model.message.controls;",
                "  */",
                "-public class SortResponseControlImpl extends AbstractControl  implements SortResponse",
                "+public class SortResponseControlImpl extends AbstractControl implements SortResponse",
                " {"
            ],
            "changed_files": [
                "ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/ControlDecorator.java",
                "ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/Decorator.java",
                "ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/MessageDecorator.java",
                "ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/controls/cascade/CascadeDecorator.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdDirSync.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecification.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationImpl.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelRequestImpl.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdShowDeletedDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/permissiveModify_impl/PermissiveModifyDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationFactory.java",
                "ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/AbstractExtendedRequest.java",
                "ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/OpaqueControl.java",
                "ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortResponseControlImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: LDAP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/permissiveModify_impl/PermissiveModifyDecorator.java, ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/ControlDecorator.java, ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/Decorator.java, ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/MessageDecorator.java, ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/OpaqueControl.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecification.java, ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/AbstractExtendedRequest.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationImpl.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/cancel/CancelRequestImpl.java, ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortResponseControlImpl.java, ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/controls/cascade/CascadeDecorator.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdDirSync.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationFactory.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdShowDeletedDecorator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationDecorator.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: request",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "187912fc46aff4c97f47c63efe453950f5828807",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1514222872,
            "hunks": 21,
            "message": "Reapplied the PolicyHints PR - with updates - to master",
            "diff": [
                "diff --git a/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java b/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "index 3a7699cf6..2fc976ca4 100644",
                "--- a/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "+++ b/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "@@ -36,5 +36,9 @@ import org.apache.directory.api.ldap.codec.controls.sort.SortRequestFactory;",
                " import org.apache.directory.api.ldap.codec.controls.sort.SortResponseFactory;",
                "+",
                " import org.apache.directory.api.ldap.extras.controls.ad.AdShowDeleted;",
                "-import org.apache.directory.api.ldap.extras.controls.ad.AdDirSync;",
                "+import org.apache.directory.api.ldap.extras.controls.ad.AdPolicyHints;",
                " import org.apache.directory.api.ldap.extras.controls.ad_impl.AdShowDeletedFactory;",
                "+import org.apache.directory.api.ldap.extras.controls.ad_impl.AdPolicyHintsFactory;",
                "+import org.apache.directory.api.ldap.extras.controls.ad.AdDirSync;",
                "+import org.apache.directory.api.ldap.extras.controls.ad_impl.AdDirSyncFactory;",
                " import org.apache.directory.api.ldap.extras.controls.changeNotifications.ChangeNotifications;",
                "@@ -43,3 +47,2 @@ import org.apache.directory.api.ldap.extras.controls.permissiveModify.Permissive",
                " import org.apache.directory.api.ldap.extras.controls.permissiveModify_impl.PermissiveModifyFactory;",
                "-import org.apache.directory.api.ldap.extras.controls.ad_impl.AdDirSyncFactory;",
                " import org.apache.directory.api.ldap.extras.controls.ppolicy.PasswordPolicy;",
                "@@ -102,2 +105,3 @@ public final class CodecFactoryUtil",
                "     {",
                "+        // Standard controls",
                "         ControlFactory<Cascade> cascadeFactory = new CascadeFactory( apiService );",
                "@@ -129,2 +133,31 @@ public final class CodecFactoryUtil",
                "         LOG.info( \"Registered pre-bundled control factory: {}\", subentriesFactory.getOid() );",
                "+        ",
                "+        ControlFactory<SortRequest> sortRequestFactory = new SortRequestFactory( apiService );",
                "+        controlFactories.put( sortRequestFactory.getOid(), sortRequestFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", sortRequestFactory.getOid() );",
                "+",
                "+        ControlFactory<SortResponse> sortResponseFactory = new SortResponseFactory( apiService );",
                "+        controlFactories.put( sortResponseFactory.getOid(), sortResponseFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", sortResponseFactory.getOid() );",
                "+",
                "+        // Extra controls",
                "+        ControlFactory<AdDirSync> adDirSyncFactory = new AdDirSyncFactory( apiService );",
                "+        controlFactories.put( adDirSyncFactory.getOid(), adDirSyncFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", adDirSyncFactory.getOid() );",
                "+        ",
                "+        ControlFactory<AdShowDeleted> adShowDeletedFactory = new AdShowDeletedFactory( apiService );",
                "+        controlFactories.put( adShowDeletedFactory.getOid(), adShowDeletedFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", adShowDeletedFactory.getOid() );",
                "+        ",
                "+        ControlFactory<AdPolicyHints> adPolicyHintsFactory = new AdPolicyHintsFactory( apiService );",
                "+        controlFactories.put( adPolicyHintsFactory.getOid(), adPolicyHintsFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", adPolicyHintsFactory.getOid() );",
                "+",
                "+        ControlFactory<ChangeNotifications> changeNotificationsFactory = new ChangeNotificationsFactory( apiService );",
                "+        controlFactories.put( changeNotificationsFactory.getOid(), changeNotificationsFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", changeNotificationsFactory.getOid() );",
                "+",
                "+        ControlFactory<PermissiveModify> permissiveModifyFactory = new PermissiveModifyFactory( apiService );",
                "+        controlFactories.put( permissiveModifyFactory.getOid(), permissiveModifyFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", permissiveModifyFactory.getOid() );",
                "@@ -134,12 +167,2 @@ public final class CodecFactoryUtil",
                "-        ControlFactory<VirtualListViewRequest> virtualListViewRequestFactory = new VirtualListViewRequestFactory(",
                "-            apiService );",
                "-        controlFactories.put( virtualListViewRequestFactory.getOid(), virtualListViewRequestFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", virtualListViewRequestFactory.getOid() );",
                "-",
                "-        ControlFactory<VirtualListViewResponse> virtualListViewResponseFactory = new VirtualListViewResponseFactory(",
                "-            apiService );",
                "-        controlFactories.put( virtualListViewResponseFactory.getOid(), virtualListViewResponseFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", virtualListViewResponseFactory.getOid() );",
                "-",
                "         ControlFactory<SyncDoneValue> syncDoneValueFactory = new SyncDoneValueFactory( apiService );",
                "@@ -160,25 +183,11 @@ public final class CodecFactoryUtil",
                "-        ControlFactory<SortRequest> sortRequestFactory = new SortRequestFactory( apiService );",
                "-        controlFactories.put( sortRequestFactory.getOid(), sortRequestFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", sortRequestFactory.getOid() );",
                "-",
                "-        ControlFactory<SortResponse> sortResponseFactory = new SortResponseFactory( apiService );",
                "-        controlFactories.put( sortResponseFactory.getOid(), sortResponseFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", sortResponseFactory.getOid() );",
                "-",
                "-        ControlFactory<AdDirSync> adDirSyncFactory = new AdDirSyncFactory( apiService );",
                "-        controlFactories.put( adDirSyncFactory.getOid(), adDirSyncFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", adDirSyncFactory.getOid() );",
                "-        ",
                "-        ControlFactory<AdShowDeleted> adDeletedFactory = new AdShowDeletedFactory( apiService );",
                "-        controlFactories.put( adDeletedFactory.getOid(), adDeletedFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", adDeletedFactory.getOid() );",
                "-",
                "-        ControlFactory<PermissiveModify> permissiveModifyFactory = new PermissiveModifyFactory( apiService );",
                "-        controlFactories.put( permissiveModifyFactory.getOid(), permissiveModifyFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", permissiveModifyFactory.getOid() );",
                "+        ControlFactory<VirtualListViewRequest> virtualListViewRequestFactory = new VirtualListViewRequestFactory(",
                "+            apiService );",
                "+        controlFactories.put( virtualListViewRequestFactory.getOid(), virtualListViewRequestFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", virtualListViewRequestFactory.getOid() );",
                "-        ControlFactory<ChangeNotifications> changeNotificationsFactory = new ChangeNotificationsFactory( apiService );",
                "-        controlFactories.put( changeNotificationsFactory.getOid(), changeNotificationsFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", changeNotificationsFactory.getOid() );",
                "+        ControlFactory<VirtualListViewResponse> virtualListViewResponseFactory = new VirtualListViewResponseFactory(",
                "+            apiService );",
                "+        controlFactories.put( virtualListViewResponseFactory.getOid(), virtualListViewResponseFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", virtualListViewResponseFactory.getOid() );",
                "     }",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHints.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHints.java",
                "new file mode 100644",
                "index 000000000..4784fc0ab",
                "--- /dev/null",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHints.java",
                "@@ -0,0 +1,54 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad;",
                "+",
                "+",
                "+import org.apache.directory.api.ldap.model.message.Control;",
                "+",
                "+",
                "+/**",
                "+ * The AdPolicyHints control, an Active Directory control. Its syntax is :",
                "+ * ",
                "+ * <pre>",
                "+ * PolicyHintsRequestValue ::= SEQUENCE {",
                "+ *       Flags    INTEGER",
                "+ *   }",
                "+ * </pre>",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public interface AdPolicyHints extends Control",
                "+{",
                "+    /** This control OID */",
                "+    String OID = \"1.2.840.113556.1.4.2239\";",
                "+",
                "+    /**",
                "+     * @return The flags",
                "+     */",
                "+    int getFlags();",
                "+",
                "+",
                "+    /**",
                "+     * Set the flags in the control.",
                "+     * ",
                "+     * @param flags The flags to set.",
                "+     */",
                "+    void setFlags( int flags );",
                "+} ",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java",
                "new file mode 100644",
                "index 000000000..09cd7c37b",
                "--- /dev/null",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java",
                "@@ -0,0 +1,64 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad;",
                "+",
                "+",
                "+import org.apache.directory.api.ldap.model.message.controls.AbstractControl;",
                "+",
                "+",
                "+/**",
                "+ * Implementation of the AD PolicyHints control.",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class AdPolicyHintsImpl extends AbstractControl implements AdPolicyHints",
                "+{",
                "+    /** This control OID */",
                "+    private int flags;",
                "+",
                "+",
                "+    /**",
                "+     * Creates an instance of AdPolicyHintsImpl",
                "+     */",
                "+    public AdPolicyHintsImpl()",
                "+    {",
                "+        super( OID );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public int getFlags()",
                "+    {",
                "+        return flags;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void setFlags( int flags )",
                "+    {",
                "+        this.flags = flags;",
                "+    }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "index 7fc32c749..73c5933fc 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "@@ -25,4 +25,6 @@ import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                " import org.apache.directory.api.ldap.extras.controls.ad.AdShowDeleted;",
                "+import org.apache.directory.api.ldap.extras.controls.ad.AdPolicyHints;",
                " import org.apache.directory.api.ldap.extras.controls.ad.AdDirSync;",
                " import org.apache.directory.api.ldap.extras.controls.ad_impl.AdShowDeletedFactory;",
                "+import org.apache.directory.api.ldap.extras.controls.ad_impl.AdPolicyHintsFactory;",
                " import org.apache.directory.api.ldap.extras.controls.changeNotifications.ChangeNotifications;",
                "@@ -157,4 +159,6 @@ public class ExtrasBundleActivator implements BundleActivator",
                "             codec.unregisterControl( AdShowDeleted.OID );",
                "+            codec.unregisterControl( AdPolicyHints.OID );",
                "             codec.unregisterControl( ChangeNotifications.OID );",
                "             codec.unregisterControl( PasswordPolicy.OID );",
                "+            codec.unregisterControl( PermissiveModify.OID );",
                "             codec.unregisterControl( SyncDoneValue.OID );",
                "@@ -194,2 +198,5 @@ public class ExtrasBundleActivator implements BundleActivator",
                "+            ControlFactory<AdPolicyHints> adPolicyHintsFactory = new AdPolicyHintsFactory( codec );",
                "+            codec.registerControl( adPolicyHintsFactory );",
                "+            ",
                "             ControlFactory<ChangeNotifications> changeNotificationsFactory = new ChangeNotificationsFactory( codec );",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsContainer.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsContainer.java",
                "new file mode 100644",
                "index 000000000..bf2ef5b21",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsContainer.java",
                "@@ -0,0 +1,114 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad_impl;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.ber.AbstractContainer;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+import org.apache.directory.api.ldap.extras.controls.ad.AdPolicyHints;",
                "+",
                "+",
                "+/**",
                "+ * A container for the AdPolicyHints request control.",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class AdPolicyHintsContainer extends AbstractContainer",
                "+{",
                "+    private AdPolicyHintsDecorator control;",
                "+",
                "+    private LdapApiService codec;",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new AdPolicyHintsContainer instance",
                "+     *",
                "+     * @param codec The LDAP Service to use",
                "+     */",
                "+    public AdPolicyHintsContainer( LdapApiService codec )",
                "+    {",
                "+        super();",
                "+        this.codec = codec;",
                "+        setGrammar( AdPolicyHintsGrammar.getInstance() );",
                "+        setTransition( AdPolicyHintsStates.START_STATE );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new AdPolicyHintsContainer instance",
                "+     *",
                "+     * @param control The AdPolicyHints control",
                "+     * @param codec The LDAP Service to use",
                "+     */",
                "+    public AdPolicyHintsContainer( AdPolicyHintsDecorator control, LdapApiService codec )",
                "+    {",
                "+        this( codec );",
                "+        decorate( control );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @return The AdPolicyHints control",
                "+     */",
                "+    public AdPolicyHintsDecorator getDecorator()",
                "+    {",
                "+        return control;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Decorate the AdPolicyHints control",
                "+     *",
                "+     * @param control The control to decorate",
                "+     */",
                "+    public void decorate( AdPolicyHints control )",
                "+    {",
                "+        if ( control instanceof AdPolicyHintsDecorator )",
                "+        {",
                "+            this.control = ( AdPolicyHintsDecorator ) control;",
                "+        }",
                "+        else",
                "+        {",
                "+            this.control = new AdPolicyHintsDecorator( codec, control );",
                "+        }",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Sets the AdPolicyHints control",
                "+     *",
                "+     * @param control The AdPolicyHints control",
                "+     */",
                "+    public void setAdPolicyHintsRequestControl( AdPolicyHintsDecorator control )",
                "+    {",
                "+        this.control = control;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void clean()",
                "+    {",
                "+        super.clean();",
                "+        control = null;",
                "+    }",
                "+} ",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsDecorator.java",
                "new file mode 100644",
                "index 000000000..bddf91ddf",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsDecorator.java",
                "@@ -0,0 +1,166 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad_impl;",
                "+",
                "+",
                "+import java.nio.ByteBuffer;",
                "+",
                "+import org.apache.directory.api.asn1.Asn1Object;",
                "+import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.asn1.EncoderException;",
                "+import org.apache.directory.api.asn1.ber.Asn1Decoder;",
                "+import org.apache.directory.api.asn1.ber.tlv.BerValue;",
                "+import org.apache.directory.api.asn1.ber.tlv.TLV;",
                "+import org.apache.directory.api.asn1.ber.tlv.UniversalTag;",
                "+import org.apache.directory.api.i18n.I18n;",
                "+import org.apache.directory.api.ldap.codec.api.ControlDecorator;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+import org.apache.directory.api.ldap.extras.controls.ad.AdPolicyHints;",
                "+import org.apache.directory.api.ldap.extras.controls.ad.AdPolicyHintsImpl;",
                "+",
                "+",
                "+/**",
                "+ *  A decorator over a AdPolicyHints control.",
                "+ *   ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class AdPolicyHintsDecorator extends ControlDecorator<AdPolicyHints>",
                "+    implements AdPolicyHints",
                "+{",
                "+    private int seqLength;",
                "+",
                "+    private static final Asn1Decoder DECODER = new Asn1Decoder();",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new instance of AdPolicyHintsDecorator.",
                "+     *",
                "+     * @param codec The LDAP Service to use",
                "+     */",
                "+    public AdPolicyHintsDecorator( LdapApiService codec )",
                "+    {",
                "+        this( codec, new AdPolicyHintsImpl() );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new instance of AdPolicyHintsDecorator.",
                "+     *",
                "+     * @param codec The LDAP Service to use",
                "+     * @param adPolicyHintsRequest The AdPolicyHints request to use",
                "+     */",
                "+    public AdPolicyHintsDecorator( LdapApiService codec, AdPolicyHints adPolicyHintsRequest )",
                "+    {",
                "+        super( codec, adPolicyHintsRequest );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public int computeLength()",
                "+    {",
                "+        seqLength = 1 + 1 + BerValue.getNbBytes( getFlags() );",
                "+",
                "+        valueLength = 1 + TLV.getNbBytes( seqLength ) + seqLength;",
                "+",
                "+        return valueLength;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public ByteBuffer encode( ByteBuffer buffer ) throws EncoderException",
                "+    {",
                "+        if ( buffer == null )",
                "+        {",
                "+            throw new EncoderException( I18n.err( I18n.ERR_04023 ) );",
                "+        }",
                "+",
                "+        buffer.put( UniversalTag.SEQUENCE.getValue() );",
                "+        buffer.put( TLV.getBytes( seqLength ) );",
                "+",
                "+        BerValue.encode( buffer, getFlags() );",
                "+",
                "+        return buffer;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public byte[] getValue()",
                "+    {",
                "+        if ( value == null )",
                "+        {",
                "+            try",
                "+            {",
                "+                computeLength();",
                "+                ByteBuffer buffer = ByteBuffer.allocate( valueLength );",
                "+",
                "+                value = encode( buffer ).array();",
                "+            }",
                "+            catch ( Exception e )",
                "+            {",
                "+                return null;",
                "+            }",
                "+        }",
                "+",
                "+        return value;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public Asn1Object decode( byte[] controlBytes ) throws DecoderException",
                "+    {",
                "+        ByteBuffer buffer = ByteBuffer.wrap( controlBytes );",
                "+        AdPolicyHintsContainer container = new AdPolicyHintsContainer( this, getCodecService() );",
                "+        DECODER.decode( buffer, container );",
                "+",
                "+        return this;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public int getFlags()",
                "+    {",
                "+        return getDecorated().getFlags();",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void setFlags( int flags )",
                "+    {",
                "+        getDecorated().setFlags( flags );",
                "+    }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsFactory.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsFactory.java",
                "new file mode 100644",
                "index 000000000..574d5bc64",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsFactory.java",
                "@@ -0,0 +1,78 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad_impl;",
                "+",
                "+",
                "+import org.apache.directory.api.ldap.codec.api.CodecControl;",
                "+import org.apache.directory.api.ldap.codec.api.ControlFactory;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+import org.apache.directory.api.ldap.extras.controls.ad.AdPolicyHints;",
                "+",
                "+",
                "+/**",
                "+ * A {@link ControlFactory} for {@link AdPolicyHints} controls.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class AdPolicyHintsFactory implements ControlFactory<AdPolicyHints>",
                "+{",
                "+    private LdapApiService codec;",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new instance of AdPolicyHintsFactory.",
                "+     *",
                "+     * @param codec The codec for this factory.",
                "+     */",
                "+    public AdPolicyHintsFactory( LdapApiService codec )",
                "+    {",
                "+        this.codec = codec;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public String getOid()",
                "+    {",
                "+        return AdPolicyHints.OID;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public CodecControl<AdPolicyHints> newCodecControl()",
                "+    {",
                "+        return new AdPolicyHintsDecorator( codec );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public CodecControl<AdPolicyHints> newCodecControl( AdPolicyHints control )",
                "+    {",
                "+        return new AdPolicyHintsDecorator( codec, control );",
                "+    }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsGrammar.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsGrammar.java",
                "new file mode 100644",
                "index 000000000..9f659f59b",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsGrammar.java",
                "@@ -0,0 +1,72 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad_impl;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.ber.grammar.AbstractGrammar;",
                "+import org.apache.directory.api.asn1.ber.grammar.Grammar;",
                "+import org.apache.directory.api.asn1.ber.grammar.GrammarTransition;",
                "+import org.apache.directory.api.asn1.ber.tlv.UniversalTag;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+",
                "+/**",
                "+ * The AdPolicyHints grammar",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public final class AdPolicyHintsGrammar extends AbstractGrammar<AdPolicyHintsContainer>",
                "+{",
                "+    static final Logger LOG = LoggerFactory.getLogger( AdPolicyHintsGrammar.class );",
                "+",
                "+    static final boolean IS_DEBUG = LOG.isDebugEnabled();",
                "+",
                "+    private static Grammar<?> instance = new AdPolicyHintsGrammar();",
                "+",
                "+",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    private AdPolicyHintsGrammar()",
                "+    {",
                "+        setName( AdPolicyHintsGrammar.class.getName() );",
                "+",
                "+        super.transitions = new GrammarTransition[AdPolicyHintsStates.END_STATE.ordinal()][256];",
                "+",
                "+        super.transitions[AdPolicyHintsStates.START_STATE.ordinal()][UniversalTag.SEQUENCE",
                "+            .getValue()] = new GrammarTransition<AdPolicyHintsContainer>(",
                "+                AdPolicyHintsStates.START_STATE, AdPolicyHintsStates.AD_POLICY_HINTS_SEQUENCE_STATE,",
                "+                UniversalTag.SEQUENCE.getValue(), null );",
                "+",
                "+        super.transitions[AdPolicyHintsStates.AD_POLICY_HINTS_SEQUENCE_STATE.ordinal()][UniversalTag.INTEGER",
                "+            .getValue()] = new GrammarTransition<AdPolicyHintsContainer>(",
                "+                AdPolicyHintsStates.AD_POLICY_HINTS_SEQUENCE_STATE,",
                "+                AdPolicyHintsStates.AD_POLICY_HINTS_FLAGS_STATE, UniversalTag.INTEGER.getValue(),",
                "+                new StoreFlags() );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @return the singleton instance of the AdPolicyHintsGrammar",
                "+     */",
                "+    public static Grammar<?> getInstance()",
                "+    {",
                "+        return instance;",
                "+    }",
                "+} ",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsStates.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsStates.java",
                "new file mode 100644",
                "index 000000000..48e09aca0",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsStates.java",
                "@@ -0,0 +1,86 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad_impl;",
                "+",
                "+import org.apache.directory.api.asn1.ber.grammar.States;",
                "+",
                "+",
                "+/**",
                "+ * This class store the AdPolicyHints grammar constants. It is also",
                "+ * used for debugging purposes.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public enum AdPolicyHintsStates implements States",
                "+{",
                "+    /** Initial state */",
                "+    START_STATE,",
                "+",
                "+    /** PolicyRequestValue ::= SEQUENCE transition */",
                "+    AD_POLICY_HINTS_SEQUENCE_STATE,",
                "+",
                "+    /** flags INTEGER transition */",
                "+    AD_POLICY_HINTS_FLAGS_STATE,",
                "+",
                "+    /** Final state */",
                "+    END_STATE;",
                "+",
                "+    /**",
                "+     * Get the grammar name",
                "+     *",
                "+     * @return The grammar name",
                "+     */",
                "+    public String getGrammarName()",
                "+    {",
                "+        return \"AD POLICY_HINTS_GRAMMAR\";",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Get the string representing the state",
                "+     *",
                "+     * @param state The state number",
                "+     * @return The String representing the state",
                "+     */",
                "+    public String getState( int state )",
                "+    {",
                "+        return ( state == END_STATE.ordinal() ) ? \"AD_POLICY_HINTS_END_STATE\" : name();",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public boolean isEndState()",
                "+    {",
                "+        return this == END_STATE;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public Enum<?> getStartState()",
                "+    {",
                "+        return START_STATE;",
                "+    }",
                "+} ",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/StoreFlags.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/StoreFlags.java",
                "new file mode 100644",
                "index 000000000..02ee3bad1",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/StoreFlags.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad_impl;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.actions.AbstractReadInteger;",
                "+",
                "+",
                "+/**",
                "+ * The action used to store the AdPolicyHints control's Flags value",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class StoreFlags extends AbstractReadInteger<AdPolicyHintsContainer>",
                "+{",
                "+",
                "+    /**",
                "+     * Instantiates a new Flags action.",
                "+     */",
                "+    public StoreFlags()",
                "+    {",
                "+        super( \"AdPolicyHints Flags\" );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    protected void setIntegerValue( int value, AdPolicyHintsContainer adPolicyHintsContainer )",
                "+    {",
                "+        adPolicyHintsContainer.getDecorator().setFlags( value );",
                "+    }",
                "+}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHints.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsContainer.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsFactory.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsGrammar.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsStates.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/StoreFlags.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: LDAP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsStates.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsContainer.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/StoreFlags.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsDecorator.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHints.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsFactory.java, ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsGrammar.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: contain",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fea8bf548ae492e1f2962072347965d22dc2ecb1",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1514142952,
            "hunks": 21,
            "message": "o Added the PolicyHints control o Added a few missing controls in the OSGi init",
            "diff": [
                "diff --git a/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java b/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "index 3a7699cf6..2fc976ca4 100644",
                "--- a/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "+++ b/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "@@ -36,5 +36,9 @@ import org.apache.directory.api.ldap.codec.controls.sort.SortRequestFactory;",
                " import org.apache.directory.api.ldap.codec.controls.sort.SortResponseFactory;",
                "+",
                " import org.apache.directory.api.ldap.extras.controls.ad.AdShowDeleted;",
                "-import org.apache.directory.api.ldap.extras.controls.ad.AdDirSync;",
                "+import org.apache.directory.api.ldap.extras.controls.ad.AdPolicyHints;",
                " import org.apache.directory.api.ldap.extras.controls.ad_impl.AdShowDeletedFactory;",
                "+import org.apache.directory.api.ldap.extras.controls.ad_impl.AdPolicyHintsFactory;",
                "+import org.apache.directory.api.ldap.extras.controls.ad.AdDirSync;",
                "+import org.apache.directory.api.ldap.extras.controls.ad_impl.AdDirSyncFactory;",
                " import org.apache.directory.api.ldap.extras.controls.changeNotifications.ChangeNotifications;",
                "@@ -43,3 +47,2 @@ import org.apache.directory.api.ldap.extras.controls.permissiveModify.Permissive",
                " import org.apache.directory.api.ldap.extras.controls.permissiveModify_impl.PermissiveModifyFactory;",
                "-import org.apache.directory.api.ldap.extras.controls.ad_impl.AdDirSyncFactory;",
                " import org.apache.directory.api.ldap.extras.controls.ppolicy.PasswordPolicy;",
                "@@ -102,2 +105,3 @@ public final class CodecFactoryUtil",
                "     {",
                "+        // Standard controls",
                "         ControlFactory<Cascade> cascadeFactory = new CascadeFactory( apiService );",
                "@@ -129,2 +133,31 @@ public final class CodecFactoryUtil",
                "         LOG.info( \"Registered pre-bundled control factory: {}\", subentriesFactory.getOid() );",
                "+        ",
                "+        ControlFactory<SortRequest> sortRequestFactory = new SortRequestFactory( apiService );",
                "+        controlFactories.put( sortRequestFactory.getOid(), sortRequestFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", sortRequestFactory.getOid() );",
                "+",
                "+        ControlFactory<SortResponse> sortResponseFactory = new SortResponseFactory( apiService );",
                "+        controlFactories.put( sortResponseFactory.getOid(), sortResponseFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", sortResponseFactory.getOid() );",
                "+",
                "+        // Extra controls",
                "+        ControlFactory<AdDirSync> adDirSyncFactory = new AdDirSyncFactory( apiService );",
                "+        controlFactories.put( adDirSyncFactory.getOid(), adDirSyncFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", adDirSyncFactory.getOid() );",
                "+        ",
                "+        ControlFactory<AdShowDeleted> adShowDeletedFactory = new AdShowDeletedFactory( apiService );",
                "+        controlFactories.put( adShowDeletedFactory.getOid(), adShowDeletedFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", adShowDeletedFactory.getOid() );",
                "+        ",
                "+        ControlFactory<AdPolicyHints> adPolicyHintsFactory = new AdPolicyHintsFactory( apiService );",
                "+        controlFactories.put( adPolicyHintsFactory.getOid(), adPolicyHintsFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", adPolicyHintsFactory.getOid() );",
                "+",
                "+        ControlFactory<ChangeNotifications> changeNotificationsFactory = new ChangeNotificationsFactory( apiService );",
                "+        controlFactories.put( changeNotificationsFactory.getOid(), changeNotificationsFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", changeNotificationsFactory.getOid() );",
                "+",
                "+        ControlFactory<PermissiveModify> permissiveModifyFactory = new PermissiveModifyFactory( apiService );",
                "+        controlFactories.put( permissiveModifyFactory.getOid(), permissiveModifyFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", permissiveModifyFactory.getOid() );",
                "@@ -134,12 +167,2 @@ public final class CodecFactoryUtil",
                "-        ControlFactory<VirtualListViewRequest> virtualListViewRequestFactory = new VirtualListViewRequestFactory(",
                "-            apiService );",
                "-        controlFactories.put( virtualListViewRequestFactory.getOid(), virtualListViewRequestFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", virtualListViewRequestFactory.getOid() );",
                "-",
                "-        ControlFactory<VirtualListViewResponse> virtualListViewResponseFactory = new VirtualListViewResponseFactory(",
                "-            apiService );",
                "-        controlFactories.put( virtualListViewResponseFactory.getOid(), virtualListViewResponseFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", virtualListViewResponseFactory.getOid() );",
                "-",
                "         ControlFactory<SyncDoneValue> syncDoneValueFactory = new SyncDoneValueFactory( apiService );",
                "@@ -160,25 +183,11 @@ public final class CodecFactoryUtil",
                "-        ControlFactory<SortRequest> sortRequestFactory = new SortRequestFactory( apiService );",
                "-        controlFactories.put( sortRequestFactory.getOid(), sortRequestFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", sortRequestFactory.getOid() );",
                "-",
                "-        ControlFactory<SortResponse> sortResponseFactory = new SortResponseFactory( apiService );",
                "-        controlFactories.put( sortResponseFactory.getOid(), sortResponseFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", sortResponseFactory.getOid() );",
                "-",
                "-        ControlFactory<AdDirSync> adDirSyncFactory = new AdDirSyncFactory( apiService );",
                "-        controlFactories.put( adDirSyncFactory.getOid(), adDirSyncFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", adDirSyncFactory.getOid() );",
                "-        ",
                "-        ControlFactory<AdShowDeleted> adDeletedFactory = new AdShowDeletedFactory( apiService );",
                "-        controlFactories.put( adDeletedFactory.getOid(), adDeletedFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", adDeletedFactory.getOid() );",
                "-",
                "-        ControlFactory<PermissiveModify> permissiveModifyFactory = new PermissiveModifyFactory( apiService );",
                "-        controlFactories.put( permissiveModifyFactory.getOid(), permissiveModifyFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", permissiveModifyFactory.getOid() );",
                "+        ControlFactory<VirtualListViewRequest> virtualListViewRequestFactory = new VirtualListViewRequestFactory(",
                "+            apiService );",
                "+        controlFactories.put( virtualListViewRequestFactory.getOid(), virtualListViewRequestFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", virtualListViewRequestFactory.getOid() );",
                "-        ControlFactory<ChangeNotifications> changeNotificationsFactory = new ChangeNotificationsFactory( apiService );",
                "-        controlFactories.put( changeNotificationsFactory.getOid(), changeNotificationsFactory );",
                "-        LOG.info( \"Registered pre-bundled control factory: {}\", changeNotificationsFactory.getOid() );",
                "+        ControlFactory<VirtualListViewResponse> virtualListViewResponseFactory = new VirtualListViewResponseFactory(",
                "+            apiService );",
                "+        controlFactories.put( virtualListViewResponseFactory.getOid(), virtualListViewResponseFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", virtualListViewResponseFactory.getOid() );",
                "     }",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHints.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHints.java",
                "new file mode 100644",
                "index 000000000..4784fc0ab",
                "--- /dev/null",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHints.java",
                "@@ -0,0 +1,54 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad;",
                "+",
                "+",
                "+import org.apache.directory.api.ldap.model.message.Control;",
                "+",
                "+",
                "+/**",
                "+ * The AdPolicyHints control, an Active Directory control. Its syntax is :",
                "+ * ",
                "+ * <pre>",
                "+ * PolicyHintsRequestValue ::= SEQUENCE {",
                "+ *       Flags    INTEGER",
                "+ *   }",
                "+ * </pre>",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public interface AdPolicyHints extends Control",
                "+{",
                "+    /** This control OID */",
                "+    String OID = \"1.2.840.113556.1.4.2239\";",
                "+",
                "+    /**",
                "+     * @return The flags",
                "+     */",
                "+    int getFlags();",
                "+",
                "+",
                "+    /**",
                "+     * Set the flags in the control.",
                "+     * ",
                "+     * @param flags The flags to set.",
                "+     */",
                "+    void setFlags( int flags );",
                "+} ",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java",
                "new file mode 100644",
                "index 000000000..09cd7c37b",
                "--- /dev/null",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java",
                "@@ -0,0 +1,64 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad;",
                "+",
                "+",
                "+import org.apache.directory.api.ldap.model.message.controls.AbstractControl;",
                "+",
                "+",
                "+/**",
                "+ * Implementation of the AD PolicyHints control.",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class AdPolicyHintsImpl extends AbstractControl implements AdPolicyHints",
                "+{",
                "+    /** This control OID */",
                "+    private int flags;",
                "+",
                "+",
                "+    /**",
                "+     * Creates an instance of AdPolicyHintsImpl",
                "+     */",
                "+    public AdPolicyHintsImpl()",
                "+    {",
                "+        super( OID );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public int getFlags()",
                "+    {",
                "+        return flags;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void setFlags( int flags )",
                "+    {",
                "+        this.flags = flags;",
                "+    }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "index 7fc32c749..73c5933fc 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "@@ -25,4 +25,6 @@ import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                " import org.apache.directory.api.ldap.extras.controls.ad.AdShowDeleted;",
                "+import org.apache.directory.api.ldap.extras.controls.ad.AdPolicyHints;",
                " import org.apache.directory.api.ldap.extras.controls.ad.AdDirSync;",
                " import org.apache.directory.api.ldap.extras.controls.ad_impl.AdShowDeletedFactory;",
                "+import org.apache.directory.api.ldap.extras.controls.ad_impl.AdPolicyHintsFactory;",
                " import org.apache.directory.api.ldap.extras.controls.changeNotifications.ChangeNotifications;",
                "@@ -157,4 +159,6 @@ public class ExtrasBundleActivator implements BundleActivator",
                "             codec.unregisterControl( AdShowDeleted.OID );",
                "+            codec.unregisterControl( AdPolicyHints.OID );",
                "             codec.unregisterControl( ChangeNotifications.OID );",
                "             codec.unregisterControl( PasswordPolicy.OID );",
                "+            codec.unregisterControl( PermissiveModify.OID );",
                "             codec.unregisterControl( SyncDoneValue.OID );",
                "@@ -194,2 +198,5 @@ public class ExtrasBundleActivator implements BundleActivator",
                "+            ControlFactory<AdPolicyHints> adPolicyHintsFactory = new AdPolicyHintsFactory( codec );",
                "+            codec.registerControl( adPolicyHintsFactory );",
                "+            ",
                "             ControlFactory<ChangeNotifications> changeNotificationsFactory = new ChangeNotificationsFactory( codec );",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsContainer.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsContainer.java",
                "new file mode 100644",
                "index 000000000..bf2ef5b21",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsContainer.java",
                "@@ -0,0 +1,114 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad_impl;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.ber.AbstractContainer;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+import org.apache.directory.api.ldap.extras.controls.ad.AdPolicyHints;",
                "+",
                "+",
                "+/**",
                "+ * A container for the AdPolicyHints request control.",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class AdPolicyHintsContainer extends AbstractContainer",
                "+{",
                "+    private AdPolicyHintsDecorator control;",
                "+",
                "+    private LdapApiService codec;",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new AdPolicyHintsContainer instance",
                "+     *",
                "+     * @param codec The LDAP Service to use",
                "+     */",
                "+    public AdPolicyHintsContainer( LdapApiService codec )",
                "+    {",
                "+        super();",
                "+        this.codec = codec;",
                "+        setGrammar( AdPolicyHintsGrammar.getInstance() );",
                "+        setTransition( AdPolicyHintsStates.START_STATE );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new AdPolicyHintsContainer instance",
                "+     *",
                "+     * @param control The AdPolicyHints control",
                "+     * @param codec The LDAP Service to use",
                "+     */",
                "+    public AdPolicyHintsContainer( AdPolicyHintsDecorator control, LdapApiService codec )",
                "+    {",
                "+        this( codec );",
                "+        decorate( control );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @return The AdPolicyHints control",
                "+     */",
                "+    public AdPolicyHintsDecorator getDecorator()",
                "+    {",
                "+        return control;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Decorate the AdPolicyHints control",
                "+     *",
                "+     * @param control The control to decorate",
                "+     */",
                "+    public void decorate( AdPolicyHints control )",
                "+    {",
                "+        if ( control instanceof AdPolicyHintsDecorator )",
                "+        {",
                "+            this.control = ( AdPolicyHintsDecorator ) control;",
                "+        }",
                "+        else",
                "+        {",
                "+            this.control = new AdPolicyHintsDecorator( codec, control );",
                "+        }",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Sets the AdPolicyHints control",
                "+     *",
                "+     * @param control The AdPolicyHints control",
                "+     */",
                "+    public void setAdPolicyHintsRequestControl( AdPolicyHintsDecorator control )",
                "+    {",
                "+        this.control = control;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void clean()",
                "+    {",
                "+        super.clean();",
                "+        control = null;",
                "+    }",
                "+} ",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsDecorator.java",
                "new file mode 100644",
                "index 000000000..bddf91ddf",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsDecorator.java",
                "@@ -0,0 +1,166 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad_impl;",
                "+",
                "+",
                "+import java.nio.ByteBuffer;",
                "+",
                "+import org.apache.directory.api.asn1.Asn1Object;",
                "+import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.asn1.EncoderException;",
                "+import org.apache.directory.api.asn1.ber.Asn1Decoder;",
                "+import org.apache.directory.api.asn1.ber.tlv.BerValue;",
                "+import org.apache.directory.api.asn1.ber.tlv.TLV;",
                "+import org.apache.directory.api.asn1.ber.tlv.UniversalTag;",
                "+import org.apache.directory.api.i18n.I18n;",
                "+import org.apache.directory.api.ldap.codec.api.ControlDecorator;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+import org.apache.directory.api.ldap.extras.controls.ad.AdPolicyHints;",
                "+import org.apache.directory.api.ldap.extras.controls.ad.AdPolicyHintsImpl;",
                "+",
                "+",
                "+/**",
                "+ *  A decorator over a AdPolicyHints control.",
                "+ *   ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class AdPolicyHintsDecorator extends ControlDecorator<AdPolicyHints>",
                "+    implements AdPolicyHints",
                "+{",
                "+    private int seqLength;",
                "+",
                "+    private static final Asn1Decoder DECODER = new Asn1Decoder();",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new instance of AdPolicyHintsDecorator.",
                "+     *",
                "+     * @param codec The LDAP Service to use",
                "+     */",
                "+    public AdPolicyHintsDecorator( LdapApiService codec )",
                "+    {",
                "+        this( codec, new AdPolicyHintsImpl() );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new instance of AdPolicyHintsDecorator.",
                "+     *",
                "+     * @param codec The LDAP Service to use",
                "+     * @param adPolicyHintsRequest The AdPolicyHints request to use",
                "+     */",
                "+    public AdPolicyHintsDecorator( LdapApiService codec, AdPolicyHints adPolicyHintsRequest )",
                "+    {",
                "+        super( codec, adPolicyHintsRequest );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public int computeLength()",
                "+    {",
                "+        seqLength = 1 + 1 + BerValue.getNbBytes( getFlags() );",
                "+",
                "+        valueLength = 1 + TLV.getNbBytes( seqLength ) + seqLength;",
                "+",
                "+        return valueLength;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public ByteBuffer encode( ByteBuffer buffer ) throws EncoderException",
                "+    {",
                "+        if ( buffer == null )",
                "+        {",
                "+            throw new EncoderException( I18n.err( I18n.ERR_04023 ) );",
                "+        }",
                "+",
                "+        buffer.put( UniversalTag.SEQUENCE.getValue() );",
                "+        buffer.put( TLV.getBytes( seqLength ) );",
                "+",
                "+        BerValue.encode( buffer, getFlags() );",
                "+",
                "+        return buffer;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public byte[] getValue()",
                "+    {",
                "+        if ( value == null )",
                "+        {",
                "+            try",
                "+            {",
                "+                computeLength();",
                "+                ByteBuffer buffer = ByteBuffer.allocate( valueLength );",
                "+",
                "+                value = encode( buffer ).array();",
                "+            }",
                "+            catch ( Exception e )",
                "+            {",
                "+                return null;",
                "+            }",
                "+        }",
                "+",
                "+        return value;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public Asn1Object decode( byte[] controlBytes ) throws DecoderException",
                "+    {",
                "+        ByteBuffer buffer = ByteBuffer.wrap( controlBytes );",
                "+        AdPolicyHintsContainer container = new AdPolicyHintsContainer( this, getCodecService() );",
                "+        DECODER.decode( buffer, container );",
                "+",
                "+        return this;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public int getFlags()",
                "+    {",
                "+        return getDecorated().getFlags();",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public void setFlags( int flags )",
                "+    {",
                "+        getDecorated().setFlags( flags );",
                "+    }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsFactory.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsFactory.java",
                "new file mode 100644",
                "index 000000000..574d5bc64",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsFactory.java",
                "@@ -0,0 +1,78 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad_impl;",
                "+",
                "+",
                "+import org.apache.directory.api.ldap.codec.api.CodecControl;",
                "+import org.apache.directory.api.ldap.codec.api.ControlFactory;",
                "+import org.apache.directory.api.ldap.codec.api.LdapApiService;",
                "+import org.apache.directory.api.ldap.extras.controls.ad.AdPolicyHints;",
                "+",
                "+",
                "+/**",
                "+ * A {@link ControlFactory} for {@link AdPolicyHints} controls.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class AdPolicyHintsFactory implements ControlFactory<AdPolicyHints>",
                "+{",
                "+    private LdapApiService codec;",
                "+",
                "+",
                "+    /**",
                "+     * Creates a new instance of AdPolicyHintsFactory.",
                "+     *",
                "+     * @param codec The codec for this factory.",
                "+     */",
                "+    public AdPolicyHintsFactory( LdapApiService codec )",
                "+    {",
                "+        this.codec = codec;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public String getOid()",
                "+    {",
                "+        return AdPolicyHints.OID;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public CodecControl<AdPolicyHints> newCodecControl()",
                "+    {",
                "+        return new AdPolicyHintsDecorator( codec );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public CodecControl<AdPolicyHints> newCodecControl( AdPolicyHints control )",
                "+    {",
                "+        return new AdPolicyHintsDecorator( codec, control );",
                "+    }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsGrammar.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsGrammar.java",
                "new file mode 100644",
                "index 000000000..9f659f59b",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsGrammar.java",
                "@@ -0,0 +1,72 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad_impl;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.ber.grammar.AbstractGrammar;",
                "+import org.apache.directory.api.asn1.ber.grammar.Grammar;",
                "+import org.apache.directory.api.asn1.ber.grammar.GrammarTransition;",
                "+import org.apache.directory.api.asn1.ber.tlv.UniversalTag;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+",
                "+/**",
                "+ * The AdPolicyHints grammar",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public final class AdPolicyHintsGrammar extends AbstractGrammar<AdPolicyHintsContainer>",
                "+{",
                "+    static final Logger LOG = LoggerFactory.getLogger( AdPolicyHintsGrammar.class );",
                "+",
                "+    static final boolean IS_DEBUG = LOG.isDebugEnabled();",
                "+",
                "+    private static Grammar<?> instance = new AdPolicyHintsGrammar();",
                "+",
                "+",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    private AdPolicyHintsGrammar()",
                "+    {",
                "+        setName( AdPolicyHintsGrammar.class.getName() );",
                "+",
                "+        super.transitions = new GrammarTransition[AdPolicyHintsStates.END_STATE.ordinal()][256];",
                "+",
                "+        super.transitions[AdPolicyHintsStates.START_STATE.ordinal()][UniversalTag.SEQUENCE",
                "+            .getValue()] = new GrammarTransition<AdPolicyHintsContainer>(",
                "+                AdPolicyHintsStates.START_STATE, AdPolicyHintsStates.AD_POLICY_HINTS_SEQUENCE_STATE,",
                "+                UniversalTag.SEQUENCE.getValue(), null );",
                "+",
                "+        super.transitions[AdPolicyHintsStates.AD_POLICY_HINTS_SEQUENCE_STATE.ordinal()][UniversalTag.INTEGER",
                "+            .getValue()] = new GrammarTransition<AdPolicyHintsContainer>(",
                "+                AdPolicyHintsStates.AD_POLICY_HINTS_SEQUENCE_STATE,",
                "+                AdPolicyHintsStates.AD_POLICY_HINTS_FLAGS_STATE, UniversalTag.INTEGER.getValue(),",
                "+                new StoreFlags() );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @return the singleton instance of the AdPolicyHintsGrammar",
                "+     */",
                "+    public static Grammar<?> getInstance()",
                "+    {",
                "+        return instance;",
                "+    }",
                "+} ",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsStates.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsStates.java",
                "new file mode 100644",
                "index 000000000..48e09aca0",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsStates.java",
                "@@ -0,0 +1,86 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad_impl;",
                "+",
                "+import org.apache.directory.api.asn1.ber.grammar.States;",
                "+",
                "+",
                "+/**",
                "+ * This class store the AdPolicyHints grammar constants. It is also",
                "+ * used for debugging purposes.",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public enum AdPolicyHintsStates implements States",
                "+{",
                "+    /** Initial state */",
                "+    START_STATE,",
                "+",
                "+    /** PolicyRequestValue ::= SEQUENCE transition */",
                "+    AD_POLICY_HINTS_SEQUENCE_STATE,",
                "+",
                "+    /** flags INTEGER transition */",
                "+    AD_POLICY_HINTS_FLAGS_STATE,",
                "+",
                "+    /** Final state */",
                "+    END_STATE;",
                "+",
                "+    /**",
                "+     * Get the grammar name",
                "+     *",
                "+     * @return The grammar name",
                "+     */",
                "+    public String getGrammarName()",
                "+    {",
                "+        return \"AD POLICY_HINTS_GRAMMAR\";",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Get the string representing the state",
                "+     *",
                "+     * @param state The state number",
                "+     * @return The String representing the state",
                "+     */",
                "+    public String getState( int state )",
                "+    {",
                "+        return ( state == END_STATE.ordinal() ) ? \"AD_POLICY_HINTS_END_STATE\" : name();",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public boolean isEndState()",
                "+    {",
                "+        return this == END_STATE;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public Enum<?> getStartState()",
                "+    {",
                "+        return START_STATE;",
                "+    }",
                "+} ",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/StoreFlags.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/StoreFlags.java",
                "new file mode 100644",
                "index 000000000..02ee3bad1",
                "--- /dev/null",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/StoreFlags.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ *  Licensed to the Apache Software Foundation (ASF) under one",
                "+ *  or more contributor license agreements.  See the NOTICE file",
                "+ *  distributed with this work for additional information",
                "+ *  regarding copyright ownership.  The ASF licenses this file",
                "+ *  to you under the Apache License, Version 2.0 (the",
                "+ *  \"License\"); you may not use this file except in compliance",
                "+ *  with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *    http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *  Unless required by applicable law or agreed to in writing,",
                "+ *  software distributed under the License is distributed on an",
                "+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *  KIND, either express or implied.  See the License for the",
                "+ *  specific language governing permissions and limitations",
                "+ *  under the License.",
                "+ *",
                "+ */",
                "+package org.apache.directory.api.ldap.extras.controls.ad_impl;",
                "+",
                "+",
                "+import org.apache.directory.api.asn1.actions.AbstractReadInteger;",
                "+",
                "+",
                "+/**",
                "+ * The action used to store the AdPolicyHints control's Flags value",
                "+ *",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class StoreFlags extends AbstractReadInteger<AdPolicyHintsContainer>",
                "+{",
                "+",
                "+    /**",
                "+     * Instantiates a new Flags action.",
                "+     */",
                "+    public StoreFlags()",
                "+    {",
                "+        super( \"AdPolicyHints Flags\" );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    protected void setIntegerValue( int value, AdPolicyHintsContainer adPolicyHintsContainer )",
                "+    {",
                "+        adPolicyHintsContainer.getDecorator().setFlags( value );",
                "+    }",
                "+}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHints.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsContainer.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsFactory.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsGrammar.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsStates.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/StoreFlags.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: LDAP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsStates.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsContainer.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/StoreFlags.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsDecorator.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHints.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsFactory.java, ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ad_impl/AdPolicyHintsGrammar.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: contain",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "496804d484472aa68d1b940dbb51fc3e853017c8",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1511909254,
            "hunks": 11,
            "message": "o Fix for DIRSTUDIO-1160 (the isHR flag is set to TRUE by default) o Creted an initialize( AT ) method to simplify Value creations",
            "diff": [
                "diff --git a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                "index 3dc6e0383..818da7613 100644",
                "--- a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                "+++ b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                "@@ -110,4 +110,2 @@ public class Value implements Cloneable, Externalizable, Comparable<Value>",
                "     {",
                "-        isHR = true;",
                "-        ",
                "         this.upValue = upValue;",
                "@@ -133,4 +131,2 @@ public class Value implements Cloneable, Externalizable, Comparable<Value>",
                "     {",
                "-        isHR = false;",
                "-        ",
                "         if ( value != null )",
                "@@ -159,3 +155,3 @@ public class Value implements Cloneable, Externalizable, Comparable<Value>",
                "     {",
                "-        isHR = false;",
                "+        init( attributeType );",
                "@@ -170,4 +166,2 @@ public class Value implements Cloneable, Externalizable, Comparable<Value>",
                "         }",
                "-",
                "-        this.attributeType = attributeType;",
                "@@ -194,14 +188,6 @@ public class Value implements Cloneable, Externalizable, Comparable<Value>",
                "     }",
                "-",
                "-",
                "-    /**",
                "-     * Creates a schema aware binary Value with an initial value. This method is",
                "-     * only to be used by deserializers.",
                "-     *",
                "-     * @param attributeType the schema type associated with this Value",
                "-     * @param value the value to wrap",
                "-     */",
                "-    /* Package protected*/ Value( AttributeType attributeType )",
                "+    ",
                "+    ",
                "+    private void init( AttributeType attributeType )",
                "     {",
                "-        // The AttributeType must have a Syntax",
                "         if ( attributeType != null )",
                "@@ -224,5 +210,18 @@ public class Value implements Cloneable, Externalizable, Comparable<Value>",
                "         }",
                "-",
                "+        ",
                "         this.attributeType = attributeType;",
                "     }",
                "+",
                "+",
                "+    /**",
                "+     * Creates a schema aware binary Value with an initial value. This method is",
                "+     * only to be used by deserializers.",
                "+     *",
                "+     * @param attributeType the schema type associated with this Value",
                "+     * @param value the value to wrap",
                "+     */",
                "+    /* Package protected*/ Value( AttributeType attributeType )",
                "+    {",
                "+        init( attributeType );",
                "+    }",
                "@@ -239,23 +238,3 @@ public class Value implements Cloneable, Externalizable, Comparable<Value>",
                "     {",
                "-        // The AttributeType must have a Syntax",
                "-        if ( attributeType != null )",
                "-        {",
                "-            if ( attributeType.getSyntax() == null )",
                "-            {",
                "-                // Some broken LDAP servers do not have proper syntax definitions, default to HR",
                "-                LOG.info( I18n.err( I18n.ERR_04445_NO_SYNTAX ) );",
                "-                isHR = true;",
                "-                //throw new IllegalArgumentException( I18n.err( I18n.ERR_04445_NO_SYNTAX ) );",
                "-            }",
                "-            else",
                "-            {",
                "-                isHR = attributeType.getSyntax().isHumanReadable();",
                "-            }",
                "-        }",
                "-        else",
                "-        {",
                "-            throw new IllegalArgumentException( I18n.err( I18n.ERR_04488_NULL_ATTRIBUTE_TYPE ) );",
                "-        }",
                "-",
                "-        this.attributeType = attributeType;",
                "+        init( attributeType );",
                "         this.upValue = upValue;",
                "@@ -314,23 +293,3 @@ public class Value implements Cloneable, Externalizable, Comparable<Value>",
                "     {",
                "-        // The AttributeType must have a Syntax",
                "-        if ( attributeType != null )",
                "-        {",
                "-            if ( attributeType.getSyntax() == null )",
                "-            {",
                "-                // Some broken LDAP servers do not have proper syntax definitions, default to HR",
                "-                LOG.info( I18n.err( I18n.ERR_04445_NO_SYNTAX ) );",
                "-                isHR = true;",
                "-                //throw new IllegalArgumentException( I18n.err( I18n.ERR_04445_NO_SYNTAX ) );",
                "-            }",
                "-            else",
                "-            {",
                "-                isHR = attributeType.getSyntax().isHumanReadable();",
                "-            }",
                "-        }",
                "-        else",
                "-        {",
                "-            throw new IllegalArgumentException( I18n.err( I18n.ERR_04488_NULL_ATTRIBUTE_TYPE ) );",
                "-        }",
                "-",
                "-        this.attributeType = attributeType;",
                "+        init( attributeType );",
                "         this.upValue = upValue;",
                "@@ -378,23 +337,3 @@ public class Value implements Cloneable, Externalizable, Comparable<Value>",
                "     {",
                "-        // The AttributeType must have a Syntax",
                "-        if ( attributeType != null )",
                "-        {",
                "-            if ( attributeType.getSyntax() == null )",
                "-            {",
                "-                // Some broken LDAP servers do not have proper syntax definitions, default to HR",
                "-                LOG.info( I18n.err( I18n.ERR_04445_NO_SYNTAX ) );",
                "-                isHR = true;",
                "-                //throw new IllegalArgumentException( I18n.err( I18n.ERR_04445_NO_SYNTAX ) );",
                "-            }",
                "-            else",
                "-            {",
                "-                isHR = attributeType.getSyntax().isHumanReadable();",
                "-            }",
                "-        }",
                "-        else",
                "-        {",
                "-            throw new IllegalArgumentException( I18n.err( I18n.ERR_04488_NULL_ATTRIBUTE_TYPE ) );",
                "-        }",
                "-        ",
                "-        this.attributeType = attributeType;",
                "+        init( attributeType );"
            ],
            "changed_files": [
                "ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "DIRSTUDIO-1160": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: LDAP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: DIRSTUDIO-1160",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ff794ccc60ce46ee293652c02f493d5dbb4c01ef",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1517030477,
            "hunks": 5,
            "message": "o Added tests for the EndTransactionRequest class o Added the encoding for that operation",
            "diff": [
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java",
                "index 985ff84fd..68bc709f0 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java",
                "@@ -22,3 +22,9 @@ package org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction;",
                "+import java.nio.ByteBuffer;",
                "+",
                " import org.apache.directory.api.asn1.DecoderException;",
                "+import org.apache.directory.api.asn1.EncoderException;",
                "+import org.apache.directory.api.asn1.ber.tlv.BerValue;",
                "+import org.apache.directory.api.asn1.ber.tlv.TLV;",
                "+import org.apache.directory.api.asn1.ber.tlv.UniversalTag;",
                " import org.apache.directory.api.i18n.I18n;",
                "@@ -45,2 +51,5 @@ public class EndTransactionRequestDecorator extends ExtendedRequestDecorator<End",
                "+    /** stores the length of the request*/",
                "+    private int requestLength = 0;",
                "+",
                "@@ -137,2 +146,61 @@ public class EndTransactionRequestDecorator extends ExtendedRequestDecorator<End",
                "     }",
                "+",
                "+",
                "+    /**",
                "+     * Compute the EndTransactionRequest extended operation length",
                "+     * <pre>",
                "+     * 0x30 L1 ",
                "+     *   | ",
                "+     *   +-- 0x01 0x01 commit ",
                "+     *   +-- 0x04 L2 identifier] ",
                "+     * </pre>",
                "+     */",
                "+    /* No qualifier */int computeLengthInternal()",
                "+    {",
                "+        requestLength = 0;",
                "+        ",
                "+        if ( !endTransactionRequest.getCommit() )",
                "+        {",
                "+            requestLength = 1 + 1 + 1; // Commit",
                "+        }",
                "+",
                "+        if ( endTransactionRequest.getTransactionId() != null )",
                "+        {",
                "+            int len = endTransactionRequest.getTransactionId().length;",
                "+            requestLength += 1 + TLV.getNbBytes( len ) + len;",
                "+        }",
                "+",
                "+        return 1 + TLV.getNbBytes( requestLength ) + requestLength;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Encodes the EndTransactionRequest extended operation.",
                "+     * ",
                "+     * @return A ByteBuffer that contains the encoded PDU",
                "+     * @throws org.apache.directory.api.asn1.EncoderException If anything goes wrong.",
                "+     */",
                "+    /* No qualifier */ByteBuffer encodeInternal() throws EncoderException",
                "+    {",
                "+        ByteBuffer bb = ByteBuffer.allocate( computeLengthInternal() );",
                "+",
                "+        bb.put( UniversalTag.SEQUENCE.getValue() );",
                "+        bb.put( TLV.getBytes( requestLength ) );",
                "+        ",
                "+        // The commit flag, if it's not true",
                "+        if ( ! getCommit() )",
                "+        {",
                "+            BerValue.encode( bb, false );",
                "+        }",
                "+",
                "+        // The identifier",
                "+        byte[] identifier = endTransactionRequest.getTransactionId();",
                "+",
                "+        if ( identifier != null )",
                "+        {",
                "+            BerValue.encode( bb, identifier  );",
                "+        }",
                "+",
                "+        return bb;",
                "+    }",
                " }",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java",
                "index 860c2250f..0d194c2ac 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java",
                "@@ -41,2 +41,5 @@ public class EndTransactionResponseDecorator extends ExtendedResponseDecorator<E",
                "+    /** stores the length of the request*/",
                "+    private int requestLength = 0;",
                "+",
                "     /**"
            ],
            "changed_files": [
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionResponseDecorator.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: request",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: request",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2301e106195aba31acd7789126e705ad892a35b1",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1516808228,
            "hunks": 2,
            "message": "Fixed issue where Map key was using an AtomicInteger instead of the value it contain.",
            "diff": [
                "diff --git a/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java b/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "index 90f99fce2..ee38ad670 100644",
                "--- a/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "+++ b/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "@@ -823,3 +823,3 @@ public class LdapNetworkConnection extends AbstractLdapConnection implements Lda",
                "-                    futureMap.remove( messageId );",
                "+                    futureMap.remove( messageId.get() );",
                "                 }",
                "diff --git a/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdifAnonymizer.java b/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdifAnonymizer.java",
                "index e758e89bd..c37cd1498 100644",
                "--- a/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdifAnonymizer.java",
                "+++ b/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdifAnonymizer.java",
                "@@ -363,3 +363,3 @@ public class LdifAnonymizer",
                "     {",
                "-        attributeAnonymizers.remove( attributeType );",
                "+        attributeAnonymizers.remove( attributeType.getOid() );",
                "     }"
            ],
            "changed_files": [
                "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdifAnonymizer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java, ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdifAnonymizer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: contain",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: connection",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c5192d9feb1ef0563a4690bf40b0fac7374e788d",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1511909374,
            "hunks": 2,
            "message": "Added support for SASL EXTERNAL (DIRAPI-105)",
            "diff": [
                "diff --git a/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java b/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "index 8f9d138ac..e43a8f26e 100644",
                "--- a/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "+++ b/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "@@ -1708,2 +1708,59 @@ public class LdapNetworkConnection extends AbstractLdapConnection implements Lda",
                "+    /**",
                "+     * Bind to the server using a SaslExternalRequest object.",
                "+     *",
                "+     * @param request The SaslExternalRequest POJO containing all the needed parameters",
                "+     * @return A LdapResponse containing the result",
                "+     * @throws LdapException if some error occurred",
                "+     */",
                "+    public BindResponse bind( SaslExternalRequest request ) throws LdapException",
                "+    {",
                "+        if ( request == null )",
                "+        {",
                "+            String msg = \"Cannot process a null request\";",
                "+            LOG.debug( msg );",
                "+            throw new IllegalArgumentException( msg );",
                "+        }",
                "+",
                "+        BindFuture bindFuture = bindAsync( request );",
                "+",
                "+        // Get the result from the future",
                "+        try",
                "+        {",
                "+            // Read the response, waiting for it if not available immediately",
                "+            // Get the response, blocking",
                "+            BindResponse bindResponse = bindFuture.get( timeout, TimeUnit.MILLISECONDS );",
                "+",
                "+            if ( bindResponse == null )",
                "+            {",
                "+                // We didn't received anything : this is an error",
                "+                LOG.error( \"Bind failed : timeout occurred\" );",
                "+                throw new LdapException( TIME_OUT_ERROR );",
                "+            }",
                "+",
                "+            if ( bindResponse.getLdapResult().getResultCode() == ResultCodeEnum.SUCCESS )",
                "+            {",
                "+                authenticated.set( true );",
                "+",
                "+                // Everything is fine, return the response",
                "+                LOG.debug( \"Bind successful : {}\", bindResponse );",
                "+            }",
                "+            else",
                "+            {",
                "+                // We have had an error",
                "+                LOG.debug( \"Bind failed : {}\", bindResponse );",
                "+            }",
                "+",
                "+            return bindResponse;",
                "+        }",
                "+        catch ( Exception ie )",
                "+        {",
                "+            // Catch all other exceptions",
                "+            LOG.error( NO_RESPONSE_ERROR, ie );",
                "+",
                "+            throw new LdapException( NO_RESPONSE_ERROR, ie );",
                "+        }",
                "+    }",
                "+",
                "+",
                "     /**",
                "diff --git a/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/SaslExternalRequest.java b/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/SaslExternalRequest.java",
                "new file mode 100644",
                "index 000000000..c438d4749",
                "--- /dev/null",
                "+++ b/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/SaslExternalRequest.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ *   Licensed to the Apache Software Foundation (ASF) under one",
                "+ *   or more contributor license agreements.  See the NOTICE file",
                "+ *   distributed with this work for additional information",
                "+ *   regarding copyright ownership.  The ASF licenses this file",
                "+ *   to you under the Apache License, Version 2.0 (the",
                "+ *   \"License\"); you may not use this file except in compliance",
                "+ *   with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ *   Unless required by applicable law or agreed to in writing,",
                "+ *   software distributed under the License is distributed on an",
                "+ *   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ *   KIND, either express or implied.  See the License for the",
                "+ *   specific language governing permissions and limitations",
                "+ *   under the License.",
                "+ *",
                "+ */",
                "+",
                "+package org.apache.directory.ldap.client.api;",
                "+",
                "+",
                "+import org.apache.directory.api.ldap.model.constants.SupportedSaslMechanisms;",
                "+",
                "+",
                "+/**",
                "+ * Holds the data required to complete the EXTERNAL SASL operation",
                "+ * ",
                "+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>",
                "+ */",
                "+public class SaslExternalRequest extends AbstractSaslRequest",
                "+{",
                "+    /**",
                "+     * Creates a new instance of SaslExternalRequest.",
                "+     */",
                "+    public SaslExternalRequest()",
                "+    {",
                "+        super( SupportedSaslMechanisms.EXTERNAL );",
                "+    }",
                "+",
                "+    ",
                "+    /**",
                "+     * Creates a new instance of SaslExternalRequest.",
                "+     */",
                "+    public SaslExternalRequest( String authzId )",
                "+    {",
                "+        super( SupportedSaslMechanisms.EXTERNAL );",
                "+        this.authorizationId = authzId;",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/SaslExternalRequest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "DIRAPI-105": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java, ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/SaslExternalRequest.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: request, connection",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: DIRAPI-105",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9f207ec781b01b1003a3d2b04e6370618ff4236f",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1514222958,
            "hunks": 1,
            "message": "Added teh CRAM-MD5/DIGEST-MD5 dedicated bind method (not complete for DIGESMD5)",
            "diff": [
                "diff --git a/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java b/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "index e43a8f26e..90f99fce2 100644",
                "--- a/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "+++ b/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "@@ -1523,2 +1523,38 @@ public class LdapNetworkConnection extends AbstractLdapConnection implements Lda",
                "+    /**",
                "+     * Bind to the server using the SASL CRAM-MD5 mechanism.",
                "+     *",
                "+     * @param userName The user name",
                "+     * @param credentials The user credentials",
                "+     * @return  A LdapResponse containing the result",
                "+     * @throws LdapException if some error occurred",
                "+     */",
                "+    public BindResponse bindSaslCramMd5( String userName, String credentials ) throws LdapException",
                "+    {",
                "+        SaslCramMd5Request request = new SaslCramMd5Request();",
                "+        request.setUsername( userName );",
                "+        request.setCredentials( \"secret\" );",
                "+",
                "+        return bind( request );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Bind to the server using the SASL DIGEST-MD5 mechanism.",
                "+     *",
                "+     * @param userName The user name",
                "+     * @param credentials The user credentials",
                "+     * @return  A LdapResponse containing the result",
                "+     * @throws LdapException if some error occurred",
                "+     */",
                "+    public BindResponse bindSaslDigestMd5( String userName, String credentials ) throws LdapException",
                "+    {",
                "+        SaslDigestMd5Request request = new SaslDigestMd5Request();",
                "+        request.setUsername( userName );",
                "+        request.setCredentials( \"secret\" );",
                "+",
                "+        return bind( request );",
                "+    }",
                "+",
                "+",
                "     /**"
            ],
            "changed_files": [
                "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: connection",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "dc76a2250fad5925f592a15cfa60cba537e3f340",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1517031827,
            "hunks": 2,
            "message": "o Fix failing tests (ByteBuffer was not flipped) o Fix a checkstyle error o Minor typo",
            "diff": [
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java",
                "index 58d676580..14b48cf7f 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java",
                "@@ -37,3 +37,3 @@ public class EndTransactionRequestContainer extends AbstractContainer",
                "     /**",
                "-     * Creates a new EndTransactionContainer object. We will store one",
                "+     * Creates a new EndTransactionRequestContainer object. We will store one",
                "      * grammar, it's enough ...",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java",
                "index 68bc709f0..4e4768cfd 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java",
                "@@ -190,3 +190,3 @@ public class EndTransactionRequestDecorator extends ExtendedRequestDecorator<End",
                "         // The commit flag, if it's not true",
                "-        if ( ! getCommit() )",
                "+        if ( !getCommit() )",
                "         {"
            ],
            "changed_files": [
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestContainer.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: request, contain",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "06c5fcb86da3aa9fc210b08cec09cfc98d5d4b18",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1516779853,
            "hunks": 28,
            "message": "o Added the startTransaction extended operation",
            "diff": [
                "diff --git a/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java b/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "index 045c20b01..46d17bf27 100644",
                "--- a/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "+++ b/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "@@ -69,2 +69,3 @@ import org.apache.directory.api.ldap.extras.extended.ads_impl.pwdModify.Password",
                " import org.apache.directory.api.ldap.extras.extended.ads_impl.startTls.StartTlsFactory;",
                "+import org.apache.directory.api.ldap.extras.extended.ads_impl.startTransaction.StartTransactionFactory;",
                " import org.apache.directory.api.ldap.extras.extended.ads_impl.storedProcedure.StoredProcedureFactory;",
                "@@ -212,2 +213,3 @@ public final class CodecFactoryUtil",
                "      * <li>startTls</li>",
                "+     * <li>startTransaction</li>",
                "      * </ul>",
                "@@ -228,10 +230,2 @@ public final class CodecFactoryUtil",
                "-        GracefulShutdownFactory gracefulShutdownFactory = new GracefulShutdownFactory( apiService );",
                "-        extendendOperationsFactories.put( gracefulShutdownFactory.getOid(), gracefulShutdownFactory );",
                "-        LOG.info( \"Registered pre-bundled extended operation factory: {}\", gracefulShutdownFactory.getOid() );",
                "-",
                "-        StoredProcedureFactory storedProcedureFactory = new StoredProcedureFactory( apiService );",
                "-        extendendOperationsFactories.put( storedProcedureFactory.getOid(), storedProcedureFactory );",
                "-        LOG.info( \"Registered pre-bundled extended operation factory: {}\", storedProcedureFactory.getOid() );",
                "-",
                "         GracefulDisconnectFactory gracefulDisconnectFactory = new GracefulDisconnectFactory( apiService );",
                "@@ -240,2 +234,6 @@ public final class CodecFactoryUtil",
                "+        GracefulShutdownFactory gracefulShutdownFactory = new GracefulShutdownFactory( apiService );",
                "+        extendendOperationsFactories.put( gracefulShutdownFactory.getOid(), gracefulShutdownFactory );",
                "+        LOG.info( \"Registered pre-bundled extended operation factory: {}\", gracefulShutdownFactory.getOid() );",
                "+",
                "         PasswordModifyFactory passwordModifyFactory = new PasswordModifyFactory( apiService );",
                "@@ -244,6 +242,2 @@ public final class CodecFactoryUtil",
                "-        WhoAmIFactory whoAmIFactory = new WhoAmIFactory( apiService );",
                "-        extendendOperationsFactories.put( whoAmIFactory.getOid(), whoAmIFactory );",
                "-        LOG.info( \"Registered pre-bundled extended operation factory: {}\", whoAmIFactory.getOid() );",
                "-",
                "         StartTlsFactory startTlsFactory = new StartTlsFactory( apiService );",
                "@@ -251,2 +245,14 @@ public final class CodecFactoryUtil",
                "         LOG.info( \"Registered pre-bundled extended operation factory: {}\", startTlsFactory.getOid() );",
                "+",
                "+        StartTransactionFactory startTransactionFactory = new StartTransactionFactory( apiService );",
                "+        extendendOperationsFactories.put( startTransactionFactory.getOid(), startTransactionFactory );",
                "+        LOG.info( \"Registered pre-bundled extended operation factory: {}\", startTransactionFactory.getOid() );",
                "+",
                "+        StoredProcedureFactory storedProcedureFactory = new StoredProcedureFactory( apiService );",
                "+        extendendOperationsFactories.put( storedProcedureFactory.getOid(), storedProcedureFactory );",
                "+        LOG.info( \"Registered pre-bundled extended operation factory: {}\", storedProcedureFactory.getOid() );",
                "+",
                "+        WhoAmIFactory whoAmIFactory = new WhoAmIFactory( apiService );",
                "+        extendendOperationsFactories.put( whoAmIFactory.getOid(), whoAmIFactory );",
                "+        LOG.info( \"Registered pre-bundled extended operation factory: {}\", whoAmIFactory.getOid() );",
                "     }",
                "diff --git a/ldap/extras/codec-api/pom.xml b/ldap/extras/codec-api/pom.xml",
                "index 17c5f4bc3..6db0e3dcf 100644",
                "--- a/ldap/extras/codec-api/pom.xml",
                "+++ b/ldap/extras/codec-api/pom.xml",
                "@@ -81,2 +81,3 @@",
                "               org.apache.directory.api.ldap.extras.extended.startTls;version=${project.version};-noimport:=true,",
                "+              org.apache.directory.api.ldap.extras.extended.startTransaction;version=${project.version};-noimport:=true,",
                "               org.apache.directory.api.ldap.extras.extended.storedProcedure;version=${project.version};-noimport:=true,",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponseImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponseImpl.java",
                "index 61f8f2f34..904dc924f 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponseImpl.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponseImpl.java",
                "@@ -22,2 +22,4 @@ package org.apache.directory.api.ldap.extras.extended.startTransaction;",
                "+import java.util.Arrays;",
                "+",
                " import org.apache.directory.api.i18n.I18n;",
                "@@ -141,4 +143,2 @@ public class StartTransactionResponseImpl extends ExtendedResponseImpl implement",
                "         int hash = 37;",
                "-        // Seems simple but look at the equals() method ...",
                "-        hash = hash * 17;",
                "@@ -169,3 +169,8 @@ public class StartTransactionResponseImpl extends ExtendedResponseImpl implement",
                "-        return obj instanceof StartTransactionResponseImpl;",
                "+        if ( !( obj instanceof StartTransactionResponseImpl ) )",
                "+        {",
                "+            return false;",
                "+        }",
                "+        ",
                "+        return Arrays.equals( transactionId, ( ( StartTransactionResponseImpl ) obj ).transactionId );",
                "     }",
                "diff --git a/ldap/extras/codec/pom.xml b/ldap/extras/codec/pom.xml",
                "index fc7323671..b6c4fcb13 100644",
                "--- a/ldap/extras/codec/pom.xml",
                "+++ b/ldap/extras/codec/pom.xml",
                "@@ -119,2 +119,3 @@",
                "               org.apache.directory.api.ldap.extras.extended.ads_impl.startTls;version=${project.version};-noimport:=true,",
                "+              org.apache.directory.api.ldap.extras.extended.ads_impl.startTransaction;version=${project.version};-noimport:=true,",
                "               org.apache.directory.api.ldap.extras.extended.ads_impl.storedProcedure;version=${project.version};-noimport:=true,",
                "@@ -146,2 +147,3 @@",
                "               org.apache.directory.api.ldap.extras.extended.startTls;version=${project.version},",
                "+              org.apache.directory.api.ldap.extras.extended.startTransaction;version=${project.version},",
                "               org.apache.directory.api.ldap.extras.extended.storedProcedure;version=${project.version},",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "index bf0e48f74..f2ff0a015 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "@@ -56,2 +56,3 @@ import org.apache.directory.api.ldap.extras.extended.ads_impl.pwdModify.Password",
                " import org.apache.directory.api.ldap.extras.extended.ads_impl.startTls.StartTlsFactory;",
                "+import org.apache.directory.api.ldap.extras.extended.ads_impl.startTransaction.StartTransactionFactory;",
                " import org.apache.directory.api.ldap.extras.extended.ads_impl.storedProcedure.StoredProcedureFactory;",
                "@@ -64,2 +65,3 @@ import org.apache.directory.api.ldap.extras.extended.pwdModify.PasswordModifyReq",
                " import org.apache.directory.api.ldap.extras.extended.startTls.StartTlsRequest;",
                "+import org.apache.directory.api.ldap.extras.extended.startTransaction.StartTransactionRequest;",
                " import org.apache.directory.api.ldap.extras.extended.storedProcedure.StoredProcedureRequest;",
                "@@ -130,3 +132,2 @@ public class ExtrasBundleActivator implements BundleActivator",
                "             // --------------------------------------------------------------------",
                "-",
                "             CancelFactory cancelFactory = new CancelFactory( codec );",
                "@@ -137,2 +138,5 @@ public class ExtrasBundleActivator implements BundleActivator",
                "+            GracefulDisconnectFactory gracefulDisconnectFactory = new GracefulDisconnectFactory( codec );",
                "+            codec.registerExtendedRequest( gracefulDisconnectFactory );",
                "+",
                "             GracefulShutdownFactory gracefulShutdownFactory = new GracefulShutdownFactory( codec );",
                "@@ -140,5 +144,2 @@ public class ExtrasBundleActivator implements BundleActivator",
                "-            StoredProcedureFactory storedProcedureFactory = new StoredProcedureFactory( codec );",
                "-            codec.registerExtendedRequest( storedProcedureFactory );",
                "-",
                "             PasswordModifyFactory passwordModifyFactory = new PasswordModifyFactory( codec );",
                "@@ -146,4 +147,10 @@ public class ExtrasBundleActivator implements BundleActivator",
                "-            GracefulDisconnectFactory gracefulDisconnectFactory = new GracefulDisconnectFactory( codec );",
                "-            codec.registerExtendedRequest( gracefulDisconnectFactory );",
                "+            StartTlsFactory startTlsFactory = new StartTlsFactory( codec );",
                "+            codec.registerExtendedRequest( startTlsFactory );",
                "+",
                "+            StartTransactionFactory startTransactionFactory = new StartTransactionFactory( codec );",
                "+            codec.registerExtendedRequest( startTransactionFactory );",
                "+",
                "+            StoredProcedureFactory storedProcedureFactory = new StoredProcedureFactory( codec );",
                "+            codec.registerExtendedRequest( storedProcedureFactory );",
                "@@ -151,5 +158,2 @@ public class ExtrasBundleActivator implements BundleActivator",
                "             codec.registerExtendedRequest( whoAmIFactory );",
                "-",
                "-            StartTlsFactory startTlsFactory = new StartTlsFactory( codec );",
                "-            codec.registerExtendedRequest( startTlsFactory );",
                "         }",
                "@@ -180,7 +184,8 @@ public class ExtrasBundleActivator implements BundleActivator",
                "             codec.unregisterExtendedRequest( GracefulShutdownRequest.EXTENSION_OID );",
                "-            codec.unregisterExtendedRequest( StoredProcedureRequest.EXTENSION_OID );",
                "             codec.unregisterExtendedRequest( GracefulDisconnectResponse.EXTENSION_OID );",
                "             codec.unregisterExtendedRequest( PasswordModifyRequest.EXTENSION_OID );",
                "-            codec.unregisterExtendedRequest( WhoAmIRequest.EXTENSION_OID );",
                "             codec.unregisterExtendedRequest( StartTlsRequest.EXTENSION_OID );",
                "+            codec.unregisterExtendedRequest( StartTransactionRequest.EXTENSION_OID );",
                "+            codec.unregisterExtendedRequest( StoredProcedureRequest.EXTENSION_OID );",
                "+            codec.unregisterExtendedRequest( WhoAmIRequest.EXTENSION_OID );",
                "         }",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java",
                "index 33283478b..e0045856c 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java",
                "@@ -27,3 +27,5 @@ import org.apache.directory.api.ldap.extras.extended.cancel.CancelRequest;",
                " import org.apache.directory.api.ldap.extras.extended.startTransaction.StartTransactionRequest;",
                "+import org.apache.directory.api.ldap.extras.extended.startTransaction.StartTransactionRequestImpl;",
                " import org.apache.directory.api.ldap.extras.extended.startTransaction.StartTransactionResponse;",
                "+import org.apache.directory.api.ldap.extras.extended.startTransaction.StartTransactionResponseImpl;",
                " import org.apache.directory.api.ldap.model.message.ExtendedRequest;",
                "@@ -70,3 +72,3 @@ public class StartTransactionFactory implements ExtendedOperationFactory",
                "     {",
                "-        StartTransactionResponseDecorator response = new StartTransactionResponseDecorator( codec, null );",
                "+        StartTransactionResponseDecorator response = new StartTransactionResponseDecorator( codec, new StartTransactionResponseImpl() );",
                "         response.setResponseValue( encodedValue );",
                "@@ -83,10 +85,3 @@ public class StartTransactionFactory implements ExtendedOperationFactory",
                "     {",
                "-        /*",
                "-        StartTransactionRequestDecorator req = new StartTransactionResponseDecorator( codec, new StartTransactionResponseImpl() );",
                "-        req.setRequestValue( value );",
                "-",
                "-        return req;",
                "-        */",
                "-        ",
                "-        return null;",
                "+        return new StartTransactionRequestDecorator( codec, new StartTransactionRequestImpl() );",
                "     }",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionRequestDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionRequestDecorator.java",
                "index aff0a0401..3212f03bc 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionRequestDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionRequestDecorator.java",
                "@@ -22,3 +22,2 @@ package org.apache.directory.api.ldap.extras.extended.ads_impl.startTransaction;",
                "-import org.apache.directory.api.asn1.Asn1Object;",
                " import org.apache.directory.api.ldap.codec.api.ExtendedRequestDecorator;",
                "@@ -35,3 +34,3 @@ import org.apache.directory.api.ldap.extras.extended.startTransaction.StartTrans",
                " public class StartTransactionRequestDecorator extends ExtendedRequestDecorator<StartTransactionRequest> implements",
                "-    StartTransactionRequest, Asn1Object",
                "+    StartTransactionRequest",
                " {"
            ],
            "changed_files": [
                "ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "ldap/extras/codec-api/pom.xml",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponseImpl.java",
                "ldap/extras/codec/pom.xml",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionRequestDecorator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec/pom.xml, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java, ldap/extras/codec-api/pom.xml, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionResponseImpl.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java, ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionRequestDecorator.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: request",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "3749602bf14d150428a7853997cd9b8e0ed8a07d",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1516920031,
            "hunks": 55,
            "message": "o Many fixes in controls : hashCode/equals/toString",
            "diff": [
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdDirSyncImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdDirSyncImpl.java",
                "index dc35b396f..f3c92697a 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdDirSyncImpl.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdDirSyncImpl.java",
                "@@ -149,5 +149,4 @@ public class AdDirSyncImpl extends AbstractControl implements AdDirSync",
                "     {",
                "-        int h = 37;",
                "+        int h = super.hashCode();",
                "-        h = h * 17 + super.hashCode();",
                "         h = h * 17 + AdDirSyncFlag.getBitmask( flags );",
                "@@ -171,5 +170,5 @@ public class AdDirSyncImpl extends AbstractControl implements AdDirSync",
                "     @Override",
                "-    public boolean equals( Object o )",
                "+    public boolean equals( Object other )",
                "     {",
                "-        if ( this == o )",
                "+        if ( this == other )",
                "         {",
                "@@ -178,3 +177,3 @@ public class AdDirSyncImpl extends AbstractControl implements AdDirSync",
                "-        if ( !( o instanceof AdDirSync ) )",
                "+        if ( !( other instanceof AdDirSync ) )",
                "         {",
                "@@ -183,5 +182,6 @@ public class AdDirSyncImpl extends AbstractControl implements AdDirSync",
                "-        AdDirSync otherControl = ( AdDirSync ) o;",
                "+        AdDirSync otherControl = ( AdDirSync ) other;",
                "-        return ( maxReturnLength == otherControl.getMaxReturnLength() )",
                "+        return super.equals( other ) ",
                "+            && ( maxReturnLength == otherControl.getMaxReturnLength() )",
                "             && ( flags.equals( otherControl.getFlags() ) )",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java",
                "index 09cd7c37b..28b1c7659 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java",
                "@@ -35,3 +35,2 @@ public class AdPolicyHintsImpl extends AbstractControl implements AdPolicyHints",
                "-",
                "     /**",
                "@@ -63,2 +62,56 @@ public class AdPolicyHintsImpl extends AbstractControl implements AdPolicyHints",
                "     }",
                "+    ",
                "+    ",
                "+    /**",
                "+     * @see Object#hashCode()",
                "+     */",
                "+    @Override",
                "+    public int hashCode()",
                "+    {",
                "+        int h = 37;",
                "+",
                "+        h = h * 17 + super.hashCode();",
                "+        h = h * 17 + flags;",
                "+",
                "+        return h;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @see Object#equals(Object)",
                "+     */",
                "+    @Override",
                "+    public boolean equals( Object o )",
                "+    {",
                "+        if ( this == o )",
                "+        {",
                "+            return true;",
                "+        }",
                "+",
                "+        if ( !( o instanceof AdPolicyHints ) )",
                "+        {",
                "+            return false;",
                "+        }",
                "+",
                "+        AdPolicyHints otherControl = ( AdPolicyHints ) o;",
                "+",
                "+        return super.equals( o ) && flags == otherControl.getFlags();",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @see Object#toString()",
                "+     */",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        StringBuilder sb = new StringBuilder();",
                "+",
                "+        sb.append( \"    AdPolicyHints control :\\n\" );",
                "+        sb.append( \"        oid : \" ).append( getOid() ).append( '\\n' );",
                "+        sb.append( \"        critical : \" ).append( isCritical() ).append( '\\n' );",
                "+        sb.append( \"        flags : 0x\" ).append( Integer.toHexString( flags ) ).append( \"\\n\" );",
                "+",
                "+        return sb.toString();",
                "+    }",
                " }",
                "\\ No newline at end of file",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncDone/SyncDoneValueImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncDone/SyncDoneValueImpl.java",
                "index 14b83dd3f..8a387559a 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncDone/SyncDoneValueImpl.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncDone/SyncDoneValueImpl.java",
                "@@ -110,5 +110,4 @@ public class SyncDoneValueImpl extends AbstractControl implements SyncDoneValue",
                "     {",
                "-        int h = 37;",
                "+        int h = super.hashCode();",
                "-        h = h * 17 + super.hashCode();",
                "         h = h * 17 + ( refreshDeletes ? 1 : 0 );",
                "@@ -145,3 +144,4 @@ public class SyncDoneValueImpl extends AbstractControl implements SyncDoneValue",
                "-        return ( refreshDeletes == otherControl.isRefreshDeletes() )",
                "+        return super.equals( o )",
                "+            && ( refreshDeletes == otherControl.isRefreshDeletes() )",
                "             && ( Arrays.equals( cookie, otherControl.getCookie() ) )",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncInfoValue/SyncInfoValueImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncInfoValue/SyncInfoValueImpl.java",
                "index 456a9b215..7e1f4c323 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncInfoValue/SyncInfoValueImpl.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncInfoValue/SyncInfoValueImpl.java",
                "@@ -196,5 +196,4 @@ public class SyncInfoValueImpl extends AbstractControl implements SyncInfoValue",
                "     {",
                "-        int h = 37;",
                "+        int h = super.hashCode();",
                "-        h = h * 17 + super.hashCode();",
                "         h = h * 17 + type.getValue();",
                "@@ -283,3 +282,4 @@ public class SyncInfoValueImpl extends AbstractControl implements SyncInfoValue",
                "-        return ( refreshDeletes == otherControl.isRefreshDeletes() )",
                "+        return super.equals( o )",
                "+            && ( refreshDeletes == otherControl.isRefreshDeletes() )",
                "             && ( refreshDone == otherControl.isRefreshDone() )",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncInfoValue/SyncRequestValueImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncInfoValue/SyncRequestValueImpl.java",
                "index 398ae8b73..4065c5a76 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncInfoValue/SyncRequestValueImpl.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncInfoValue/SyncRequestValueImpl.java",
                "@@ -156,5 +156,4 @@ public class SyncRequestValueImpl extends AbstractControl implements SyncRequest",
                "     {",
                "-        int h = 37;",
                "+        int h = super.hashCode();",
                "-        h = h * 17 + super.hashCode();",
                "         h = h * 17 + ( isReloadHint ? 1 : 0 );",
                "@@ -180,5 +179,5 @@ public class SyncRequestValueImpl extends AbstractControl implements SyncRequest",
                "     {",
                "-        if ( !super.equals( o ) )",
                "+        if ( this == o )",
                "         {",
                "-            return false;",
                "+            return true;",
                "         }",
                "@@ -192,3 +191,4 @@ public class SyncRequestValueImpl extends AbstractControl implements SyncRequest",
                "-        return ( mode == otherControl.getMode() )",
                "+        return super.equals( o )",
                "+            && ( mode == otherControl.getMode() )",
                "             && ( isReloadHint == otherControl.isReloadHint() )",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncState/SyncStateValueImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncState/SyncStateValueImpl.java",
                "index b37cddfae..ccab04844 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncState/SyncStateValueImpl.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncState/SyncStateValueImpl.java",
                "@@ -133,5 +133,4 @@ public class SyncStateValueImpl extends AbstractControl implements SyncStateValu",
                "     {",
                "-        int h = 37;",
                "+        int h = super.hashCode();",
                "-        h = h * 17 + super.hashCode();",
                "         h = h * 17 + type.getValue();",
                "@@ -164,7 +163,7 @@ public class SyncStateValueImpl extends AbstractControl implements SyncStateValu",
                "     {",
                "-        if ( !super.equals( o ) )",
                "+        if ( this == o )",
                "         {",
                "-            return false;",
                "+            return true;",
                "         }",
                "-",
                "+        ",
                "         if ( !( o instanceof SyncStateValue ) )",
                "@@ -176,3 +175,4 @@ public class SyncStateValueImpl extends AbstractControl implements SyncStateValu",
                "-        return ( type == otherControl.getSyncStateType() )",
                "+        return super.equals( o )",
                "+            && ( type == otherControl.getSyncStateType() )",
                "             && ( Arrays.equals( entryUuid, otherControl.getEntryUUID() ) )",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationImpl.java",
                "index 4e9f793cc..22aeba900 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationImpl.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationImpl.java",
                "@@ -20,2 +20,4 @@ package org.apache.directory.api.ldap.extras.controls.transaction;",
                "+import java.util.Arrays;",
                "+",
                " import org.apache.directory.api.ldap.model.message.controls.AbstractControl;",
                "@@ -35,3 +37,2 @@ public class TransactionSpecificationImpl extends AbstractControl implements Tra",
                "-",
                "     /**",
                "@@ -68,2 +69,45 @@ public class TransactionSpecificationImpl extends AbstractControl implements Tra",
                "     }",
                "+",
                "+",
                "+    /**",
                "+     * @see Object#hashCode()",
                "+     */",
                "+    @Override",
                "+    public int hashCode()",
                "+    {",
                "+        int h = super.hashCode();",
                "+",
                "+        if ( identifier != null )",
                "+        {",
                "+            for ( byte b : identifier )",
                "+            {",
                "+                h = h * 17 + b;",
                "+            }",
                "+        }",
                "+",
                "+        return h;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @see Object#equals(Object)",
                "+     */",
                "+    @Override",
                "+    public boolean equals( Object o )",
                "+    {",
                "+        if ( this == o )",
                "+        {",
                "+            return true;",
                "+        }",
                "+        ",
                "+        if ( !( o instanceof TransactionSpecification ) )",
                "+        {",
                "+            return false;",
                "+        }",
                "+",
                "+        TransactionSpecification otherControl = ( TransactionSpecification ) o;",
                "+",
                "+        return super.equals( o )",
                "+            && Arrays.equals( identifier, otherControl.getIdentifier() );",
                "+    }",
                "@@ -76,5 +120,11 @@ public class TransactionSpecificationImpl extends AbstractControl implements Tra",
                "     {",
                "+        StringBuilder sb = new StringBuilder();",
                "+",
                "+        sb.append( \"    Transaction Spcecification control :\\n\" );",
                "+        sb.append( \"        oid : \" ).append( getOid() ).append( '\\n' );",
                "+        sb.append( \"        critical : \" ).append( isCritical() ).append( '\\n' );",
                "+        ",
                "         if ( identifier != null )",
                "         {",
                "-            return \"Transaction specification ID=null\";",
                "+            sb.append( \"        Transaction ID=null\" ).append( '\\n' );",
                "         }",
                "@@ -82,4 +132,6 @@ public class TransactionSpecificationImpl extends AbstractControl implements Tra",
                "         {",
                "-            return \"Transaction specification ID=\" + Strings.dumpBytes( identifier );",
                "+            sb.append( \"        Transaction ID=\" ).append( Strings.dumpBytes( identifier ) ).append( '\\n' );",
                "         }",
                "+        ",
                "+        return sb.toString();",
                "     }",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/vlv/VirtualListViewRequestImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/vlv/VirtualListViewRequestImpl.java",
                "index a15248d95..2305bfc01 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/vlv/VirtualListViewRequestImpl.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/vlv/VirtualListViewRequestImpl.java",
                "@@ -246,3 +246,8 @@ public class VirtualListViewRequestImpl extends AbstractControl implements Virtu",
                "     {",
                "-        if ( !super.equals( o ) )",
                "+        if ( this == o )",
                "+        {",
                "+            return true;",
                "+        }",
                "+        ",
                "+        if ( !( o instanceof VirtualListViewRequest ) )",
                "         {",
                "@@ -251,5 +256,6 @@ public class VirtualListViewRequestImpl extends AbstractControl implements Virtu",
                "-        VirtualListViewRequestImpl otherControl = ( VirtualListViewRequestImpl ) o;",
                "+        VirtualListViewRequest otherControl = ( VirtualListViewRequest ) o;",
                "-        return ( beforeCount == otherControl.getBeforeCount() )",
                "+        return super.equals( o )",
                "+            && ( beforeCount == otherControl.getBeforeCount() )",
                "             && ( afterCount == otherControl.getAfterCount() )",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/vlv/VirtualListViewResponseImpl.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/vlv/VirtualListViewResponseImpl.java",
                "index 3414fbee6..88971b1f1 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/vlv/VirtualListViewResponseImpl.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/vlv/VirtualListViewResponseImpl.java",
                "@@ -178,3 +178,8 @@ public class VirtualListViewResponseImpl extends AbstractControl implements Virt",
                "     {",
                "-        if ( !super.equals( o ) )",
                "+        if ( this == o )",
                "+        {",
                "+            return true;",
                "+        }",
                "+        ",
                "+        if ( !( o instanceof VirtualListViewRequest ) )",
                "         {",
                "@@ -183,5 +188,6 @@ public class VirtualListViewResponseImpl extends AbstractControl implements Virt",
                "-        VirtualListViewResponseImpl otherControl = ( VirtualListViewResponseImpl ) o;",
                "+        VirtualListViewResponse otherControl = ( VirtualListViewResponse ) o;",
                "-        return ( targetPosition == otherControl.getTargetPosition() )",
                "+        return super.equals( o )",
                "+            && ( targetPosition == otherControl.getTargetPosition() )",
                "             && ( contentCount == otherControl.getContentCount() )",
                "diff --git a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequest.java b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequest.java",
                "index 51e07b074..bda2dbea3 100644",
                "--- a/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequest.java",
                "+++ b/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequest.java",
                "@@ -26,3 +26,3 @@ import org.apache.directory.api.ldap.model.message.ExtendedRequest;",
                " /**",
                "- * The TransactionRequest interface. This is for the RFC 5805 Start Transaction Request,",
                "+ * The StartTransactionRequest interface. This is for the RFC 5805 Start Transaction Request,",
                "  * which grammar is :",
                "@@ -40,3 +40,3 @@ public interface StartTransactionRequest extends ExtendedRequest",
                " {",
                "-    /** The OID for the Transaction extended operation request. */",
                "+    /** The OID for the StartTransaction extended operation request. */",
                "     String EXTENSION_OID = \"1.3.6.1.1.21.1\";",
                "diff --git a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/EntryChangeImpl.java b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/EntryChangeImpl.java",
                "index d5f3f667f..243ac1a37 100644",
                "--- a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/EntryChangeImpl.java",
                "+++ b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/EntryChangeImpl.java",
                "@@ -134,3 +134,8 @@ public class EntryChangeImpl extends AbstractControl implements EntryChange",
                "     {",
                "-        if ( !super.equals( o ) )",
                "+        if ( this == o )",
                "+        {",
                "+            return true;",
                "+        }",
                "+        ",
                "+        if ( !( o instanceof EntryChange ) )",
                "         {",
                "@@ -141,3 +146,5 @@ public class EntryChangeImpl extends AbstractControl implements EntryChange",
                "-        return ( changeNumber == otherControl.getChangeNumber() ) && ( changeType == otherControl.getChangeType() )",
                "+        return super.equals( o ) ",
                "+            && ( changeNumber == otherControl.getChangeNumber() ) ",
                "+            && ( changeType == otherControl.getChangeType() )",
                "             && ( previousDn.equals( otherControl.getPreviousDn() ) );",
                "diff --git a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/PagedResultsImpl.java b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/PagedResultsImpl.java",
                "index cf4e67b06..2742b5232 100644",
                "--- a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/PagedResultsImpl.java",
                "+++ b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/PagedResultsImpl.java",
                "@@ -177,12 +177,19 @@ public class PagedResultsImpl extends AbstractControl implements PagedResults",
                "     @Override",
                "-    public boolean equals( Object o )",
                "+    public boolean equals( Object other )",
                "     {",
                "-        if ( !super.equals( o ) )",
                "+        if ( this == other )",
                "         {",
                "-            return false;",
                "+            return true;",
                "         }",
                "-        PagedResults otherControl = ( PagedResults ) o;",
                "+        if ( !( other instanceof PagedResults ) )",
                "+        {",
                "+            return false;",
                "+        }",
                "+        ",
                "+        PagedResults otherControl = ( PagedResults ) other;",
                "-        return ( size == otherControl.getSize() ) && Arrays.equals( cookie, otherControl.getCookie() );",
                "+        return super.equals( other ) ",
                "+            && ( size == otherControl.getSize() ) ",
                "+            && Arrays.equals( cookie, otherControl.getCookie() );",
                "     }",
                "diff --git a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/PersistentSearchImpl.java b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/PersistentSearchImpl.java",
                "index 14e5d5dad..4e8b861a7 100644",
                "--- a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/PersistentSearchImpl.java",
                "+++ b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/PersistentSearchImpl.java",
                "@@ -21,3 +21,2 @@ package org.apache.directory.api.ldap.model.message.controls;",
                "-",
                " /**",
                "@@ -156,2 +155,43 @@ public class PersistentSearchImpl extends AbstractControl implements PersistentS",
                "+    /**",
                "+     * @see Object#hashCode()",
                "+     */",
                "+    @Override",
                "+    public int hashCode()",
                "+    {",
                "+        int h = super.hashCode();",
                "+",
                "+        h = h * 37 + ( changesOnly ? 1 : 0 );",
                "+        h = h * 37 + ( returnECs ? 1 : 0 );",
                "+        h = h * 37 + changeTypes;",
                "+",
                "+        return h;",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * @see Object#equals(Object)",
                "+     */",
                "+    @Override",
                "+    public boolean equals( Object other )",
                "+    {",
                "+        if ( this == other )",
                "+        {",
                "+            return true;",
                "+        }",
                "+",
                "+        if ( !( other instanceof PersistentSearch ) )",
                "+        {",
                "+            return false;",
                "+        }",
                "+        ",
                "+        PersistentSearch otherControl = ( PersistentSearch ) other;",
                "+",
                "+        return super.equals( other ) ",
                "+            && ( changesOnly == otherControl.isChangesOnly() ) ",
                "+            && ( returnECs == otherControl.isReturnECs() ) ",
                "+            && ( changeTypes == otherControl.getChangeTypes() );",
                "+    }",
                "+",
                "+",
                "     /**",
                "diff --git a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/ProxiedAuthzImpl.java b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/ProxiedAuthzImpl.java",
                "index 6e25e72b4..bf4dcf865 100644",
                "--- a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/ProxiedAuthzImpl.java",
                "+++ b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/ProxiedAuthzImpl.java",
                "@@ -128,11 +128,16 @@ public class ProxiedAuthzImpl extends AbstractControl implements ProxiedAuthz",
                "     {",
                "-        if ( !super.equals( o ) )",
                "+        if ( this == o )",
                "         {",
                "-            return false;",
                "+            return true;",
                "         }",
                "+        if ( !( o instanceof ProxiedAuthz ) )",
                "+        {",
                "+            return false;",
                "+        }",
                "+        ",
                "         ProxiedAuthz otherControl = ( ProxiedAuthz ) o;",
                "-        return ( authzId == otherControl.getAuthzId() )",
                "-            || ( ( authzId != null ) && authzId.equals( otherControl.getAuthzId() ) );",
                "+        return super.equals( o )",
                "+            && ( ( authzId == otherControl.getAuthzId() ) || ( ( authzId != null ) && authzId.equals( otherControl.getAuthzId() ) ) );",
                "     }",
                "diff --git a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortRequestControlImpl.java b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortRequestControlImpl.java",
                "index b75179d7c..373ed763f 100644",
                "--- a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortRequestControlImpl.java",
                "+++ b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortRequestControlImpl.java",
                "@@ -82,2 +82,67 @@ public class SortRequestControlImpl extends AbstractControl implements SortReque",
                "+    ",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public int hashCode()",
                "+    {",
                "+        int hash = super.hashCode();",
                "+        ",
                "+        if ( sortKeys != null )",
                "+        {",
                "+            for ( SortKey sortKey : sortKeys )",
                "+            {",
                "+                hash = hash * 17 + sortKey.hashCode();",
                "+            }",
                "+        }",
                "+        ",
                "+        return hash;",
                "+    }",
                "+",
                "+    ",
                "+    /**",
                "+     * {@inheritDoc}",
                "+     */",
                "+    @Override",
                "+    public boolean equals( Object o )",
                "+    {",
                "+        if ( this == o )",
                "+        {",
                "+            return true;",
                "+        }",
                "+        ",
                "+        if ( !( o instanceof SortRequest ) )",
                "+        {",
                "+            return false;",
                "+        }",
                "+        ",
                "+        SortRequest that = ( SortRequest ) o;",
                "+        ",
                "+        if ( !super.equals( o ) )",
                "+        {",
                "+            return false;",
                "+        }",
                "+        ",
                "+        if ( sortKeys == null )",
                "+        {",
                "+            return that.getSortKeys() == null;",
                "+        }",
                "+        ",
                "+        if ( ( that.getSortKeys() == null ) || ( sortKeys.size() != that.getSortKeys().size() ) )",
                "+        {",
                "+            return false;",
                "+        }",
                "+        ",
                "+        for ( SortKey sortKey : that.getSortKeys() )",
                "+        {",
                "+            if ( !sortKeys.contains( sortKey ) )",
                "+            {",
                "+                return false;",
                "+            }",
                "+        }",
                "+        ",
                "+        return true;",
                "+    }",
                "+",
                "@@ -89,3 +154,35 @@ public class SortRequestControlImpl extends AbstractControl implements SortReque",
                "     {",
                "-        return \"SortRequestControlImpl [sortKeys=\" + sortKeys + \"]\";",
                "+        StringBuilder sb = new StringBuilder();",
                "+",
                "+        sb.append( \"    Sort Request Control\\n\" );",
                "+        sb.append( \"        oid : \" ).append( getOid() ).append( '\\n' );",
                "+        sb.append( \"        critical : \" ).append( isCritical() ).append( '\\n' );",
                "+        ",
                "+        if ( sortKeys != null )",
                "+        {",
                "+            sb.append( \"        sortKeys : [\" );",
                "+            boolean isFirst = true;",
                "+            ",
                "+            for ( SortKey sortKey : sortKeys )",
                "+            {",
                "+                if ( isFirst )",
                "+                {",
                "+                    isFirst = false;",
                "+                }",
                "+                else",
                "+                {",
                "+                    sb.append( \", \" );",
                "+                }",
                "+                ",
                "+                sb.append( sortKey.getAttributeTypeDesc() );",
                "+            }",
                "+            ",
                "+            sb.append( \"]\\n\" );",
                "+        }",
                "+        else",
                "+        {",
                "+            sb.append( \"        sortKeys : null\\n\" );",
                "+        }",
                "+        ",
                "+        return sb.toString();",
                "     }",
                "diff --git a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortResponseControlImpl.java b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortResponseControlImpl.java",
                "index 99773ebc8..655ac2a13 100644",
                "--- a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortResponseControlImpl.java",
                "+++ b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortResponseControlImpl.java",
                "@@ -89,6 +89,6 @@ public class SortResponseControlImpl extends AbstractControl implements SortResp",
                "     {",
                "-        final int prime = 31;",
                "         int hash = super.hashCode();",
                "-        hash = prime * hash + ( ( attributeName == null ) ? 0 : attributeName.hashCode() );",
                "-        hash = prime * hash + ( ( this.result == null ) ? 0 : this.result.hashCode() );",
                "+        ",
                "+        hash = 37 * hash + ( ( attributeName == null ) ? 0 : attributeName.hashCode() );",
                "+        hash = 37 * hash + ( ( this.result == null ) ? 0 : this.result.hashCode() );",
                "@@ -104,3 +104,8 @@ public class SortResponseControlImpl extends AbstractControl implements SortResp",
                "     {",
                "-        if ( !super.equals( o ) )",
                "+        if ( this == o )",
                "+        {",
                "+            return true;",
                "+        }",
                "+        ",
                "+        if ( !( o instanceof SortResponse ) )",
                "         {",
                "@@ -111,2 +116,7 @@ public class SortResponseControlImpl extends AbstractControl implements SortResp",
                "+        if ( !super.equals( o ) )",
                "+        {",
                "+            return false;",
                "+        }",
                "+        ",
                "         if ( result != that.getSortResult() )",
                "@@ -137,3 +147,2 @@ public class SortResponseControlImpl extends AbstractControl implements SortResp",
                "     }",
                "-    ",
                " }",
                "diff --git a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SubentriesImpl.java b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SubentriesImpl.java",
                "index 3d3fe9c05..643c2410d 100644",
                "--- a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SubentriesImpl.java",
                "+++ b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SubentriesImpl.java",
                "@@ -108,3 +108,8 @@ public class SubentriesImpl extends AbstractControl implements Subentries",
                "     {",
                "-        if ( !super.equals( o ) )",
                "+        if ( this == o )",
                "+        {",
                "+            return true;",
                "+        }",
                "+        ",
                "+        if ( !( o instanceof Subentries ) )",
                "         {",
                "@@ -112,6 +117,6 @@ public class SubentriesImpl extends AbstractControl implements Subentries",
                "         }",
                "-",
                "+        ",
                "         Subentries otherDecorator = ( Subentries ) o;",
                "-        return visibility == otherDecorator.isVisible();",
                "+        return super.equals( o ) && visibility == otherDecorator.isVisible();",
                "     }"
            ],
            "changed_files": [
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdDirSyncImpl.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncDone/SyncDoneValueImpl.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncInfoValue/SyncInfoValueImpl.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncInfoValue/SyncRequestValueImpl.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncState/SyncStateValueImpl.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationImpl.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/vlv/VirtualListViewRequestImpl.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/vlv/VirtualListViewResponseImpl.java",
                "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequest.java",
                "ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/EntryChangeImpl.java",
                "ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/PagedResultsImpl.java",
                "ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/PersistentSearchImpl.java",
                "ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/ProxiedAuthzImpl.java",
                "ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortRequestControlImpl.java",
                "ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortResponseControlImpl.java",
                "ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SubentriesImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/vlv/VirtualListViewResponseImpl.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncDone/SyncDoneValueImpl.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/vlv/VirtualListViewRequestImpl.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncInfoValue/SyncInfoValueImpl.java, ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/PagedResultsImpl.java, ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/ProxiedAuthzImpl.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/transaction/TransactionSpecificationImpl.java, ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortRequestControlImpl.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdDirSyncImpl.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/extended/startTransaction/StartTransactionRequest.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncState/SyncStateValueImpl.java, ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SubentriesImpl.java, ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/SortResponseControlImpl.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ad/AdPolicyHintsImpl.java, ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/PersistentSearchImpl.java, ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/syncrepl/syncInfoValue/SyncRequestValueImpl.java, ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/controls/EntryChangeImpl.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: request",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "16b5e0edaec53bc8bbc2eb6598d372f7ef89b046",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1512086752,
            "hunks": 2,
            "message": "o When passing byte[] to a Value, without attributeType, make the value non HR o When passing a byte[] to a Value with an HR attributeType, convert the byte[] to a String",
            "diff": [
                "diff --git a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                "index 818da7613..2660f90a7 100644",
                "--- a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                "+++ b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                "@@ -140,2 +140,4 @@ public class Value implements Cloneable, Externalizable, Comparable<Value>",
                "         }",
                "+        ",
                "+        isHR = false;",
                "@@ -161,2 +163,7 @@ public class Value implements Cloneable, Externalizable, Comparable<Value>",
                "             System.arraycopy( upValue, 0, bytes, 0, upValue.length );",
                "+",
                "+            if ( isHR )",
                "+            {",
                "+                this.upValue = Strings.utf8ToString( upValue );",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: make",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e9445b1466ea171e6e4c24a53db09be36705d64e",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1514156136,
            "hunks": 1,
            "message": "Added a (first) version of SASL CRAM-MD5 and DIGEST-MD5 dedicated bind function. Note that the DIGESTMD5 does not have enough parameters.",
            "diff": [
                "diff --git a/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java b/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "index e43a8f26e..90f99fce2 100644",
                "--- a/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "+++ b/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "@@ -1523,2 +1523,38 @@ public class LdapNetworkConnection extends AbstractLdapConnection implements Lda",
                "+    /**",
                "+     * Bind to the server using the SASL CRAM-MD5 mechanism.",
                "+     *",
                "+     * @param userName The user name",
                "+     * @param credentials The user credentials",
                "+     * @return  A LdapResponse containing the result",
                "+     * @throws LdapException if some error occurred",
                "+     */",
                "+    public BindResponse bindSaslCramMd5( String userName, String credentials ) throws LdapException",
                "+    {",
                "+        SaslCramMd5Request request = new SaslCramMd5Request();",
                "+        request.setUsername( userName );",
                "+        request.setCredentials( \"secret\" );",
                "+",
                "+        return bind( request );",
                "+    }",
                "+",
                "+",
                "+    /**",
                "+     * Bind to the server using the SASL DIGEST-MD5 mechanism.",
                "+     *",
                "+     * @param userName The user name",
                "+     * @param credentials The user credentials",
                "+     * @return  A LdapResponse containing the result",
                "+     * @throws LdapException if some error occurred",
                "+     */",
                "+    public BindResponse bindSaslDigestMd5( String userName, String credentials ) throws LdapException",
                "+    {",
                "+        SaslDigestMd5Request request = new SaslDigestMd5Request();",
                "+        request.setUsername( userName );",
                "+        request.setCredentials( \"secret\" );",
                "+",
                "+        return bind( request );",
                "+    }",
                "+",
                "+",
                "     /**"
            ],
            "changed_files": [
                "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: connection",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "5b68d06104740fefd94bf9d0d151f99ad8c678a5",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1517179021,
            "hunks": 12,
            "message": "o Changed an error message o Fixed a few typoes",
            "diff": [
                "diff --git a/i18n/src/main/java/org/apache/directory/api/i18n/I18n.java b/i18n/src/main/java/org/apache/directory/api/i18n/I18n.java",
                "index 4c2bf02ce..e9f31bd53 100644",
                "--- a/i18n/src/main/java/org/apache/directory/api/i18n/I18n.java",
                "+++ b/i18n/src/main/java/org/apache/directory/api/i18n/I18n.java",
                "@@ -305,3 +305,3 @@ public enum I18n",
                "     ERR_04164(\"ERR_04164\"),",
                "-    ERR_04165(\"ERR_04165\"),",
                "+    ERR_04165_PAYLOAD_DECODING_ERROR(\"ERR_04165_PAYLOAD_DECODING_ERROR\"),",
                "     ERR_04166(\"ERR_04166\"),",
                "diff --git a/i18n/src/main/resources/org/apache/directory/api/i18n/errors.properties b/i18n/src/main/resources/org/apache/directory/api/i18n/errors.properties",
                "index ca14fd90a..c4df6567d 100644",
                "--- a/i18n/src/main/resources/org/apache/directory/api/i18n/errors.properties",
                "+++ b/i18n/src/main/resources/org/apache/directory/api/i18n/errors.properties",
                "@@ -292,3 +292,3 @@ ERR_04163=Unknown SyncStateTypeEnum value {0}",
                " ERR_04164=Failed to encode payload GracefulShutdownRequest",
                "-ERR_04165=failed to decode payload",
                "+ERR_04165_PAYLOAD_DECODING_ERROR=failed to decode payload",
                " ERR_04166=The result code can only be one of: {0}, {1}, {2}",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/cancel/CancelRequestDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/cancel/CancelRequestDecorator.java",
                "index 7fc3cd4c4..ed7b8c933 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/cancel/CancelRequestDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/cancel/CancelRequestDecorator.java",
                "@@ -146,3 +146,3 @@ public class CancelRequestDecorator extends ExtendedRequestDecorator<CancelReque",
                "         {",
                "-            LOG.error( I18n.err( I18n.ERR_04165 ), e );",
                "+            LOG.error( I18n.err( I18n.ERR_04165_PAYLOAD_DECODING_ERROR ), e );",
                "             throw new RuntimeException( e );",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/certGeneration/CertGenerationRequestDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/certGeneration/CertGenerationRequestDecorator.java",
                "index f43b41d71..98433cb52 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/certGeneration/CertGenerationRequestDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/certGeneration/CertGenerationRequestDecorator.java",
                "@@ -101,3 +101,3 @@ public class CertGenerationRequestDecorator extends ExtendedRequestDecorator<Cer",
                "         {",
                "-            LOG.error( I18n.err( I18n.ERR_04165 ), e );",
                "+            LOG.error( I18n.err( I18n.ERR_04165_PAYLOAD_DECODING_ERROR ), e );",
                "             throw new RuntimeException( e );",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java",
                "index 4e4768cfd..5508f0523 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java",
                "@@ -142,3 +142,3 @@ public class EndTransactionRequestDecorator extends ExtendedRequestDecorator<End",
                "         {",
                "-            LOG.error( I18n.err( I18n.ERR_04165 ), e );",
                "+            LOG.error( I18n.err( I18n.ERR_04165_PAYLOAD_DECODING_ERROR ), e );",
                "             throw new RuntimeException( e );",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java",
                "index 13b62e9e5..f012f10dc 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java",
                "@@ -40,3 +40,3 @@ import org.slf4j.LoggerFactory;",
                " /**",
                "- * This class implements the EndTransactionRequest extended operation's ASN.1 grammer. ",
                "+ * This class implements the EndTransactionRequest extended operation's ASN.1 grammar. ",
                "  * All the actions are declared in this class. As it is a singleton, ",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStatesEnum.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStatesEnum.java",
                "index d28be3c8e..9fc8b5f42 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStatesEnum.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStatesEnum.java",
                "@@ -45,3 +45,3 @@ public enum EndTransactionRequestStatesEnum implements States",
                "-    /** he identifier state */",
                "+    /** The identifier state */",
                "     IDENTFIER_STATE,",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/gracefulShutdown/GracefulShutdownRequestDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/gracefulShutdown/GracefulShutdownRequestDecorator.java",
                "index 3e7f6dcca..e44497ada 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/gracefulShutdown/GracefulShutdownRequestDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/gracefulShutdown/GracefulShutdownRequestDecorator.java",
                "@@ -91,3 +91,3 @@ public class GracefulShutdownRequestDecorator extends ExtendedRequestDecorator<G",
                "         {",
                "-            LOG.error( I18n.err( I18n.ERR_04165 ), e );",
                "+            LOG.error( I18n.err( I18n.ERR_04165_PAYLOAD_DECODING_ERROR ), e );",
                "             throw new RuntimeException( e );",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyRequestDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyRequestDecorator.java",
                "index ddd4a6c0e..a90734e1d 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyRequestDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyRequestDecorator.java",
                "@@ -89,3 +89,3 @@ public class PasswordModifyRequestDecorator extends ExtendedRequestDecorator<Pas",
                "         {",
                "-            LOG.error( I18n.err( I18n.ERR_04165 ), e );",
                "+            LOG.error( I18n.err( I18n.ERR_04165_PAYLOAD_DECODING_ERROR ), e );",
                "             throw new RuntimeException( e );",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyResponseDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyResponseDecorator.java",
                "index 19faba62f..c6891455e 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyResponseDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyResponseDecorator.java",
                "@@ -90,3 +90,3 @@ public class PasswordModifyResponseDecorator extends ExtendedResponseDecorator<P",
                "         {",
                "-            LOG.error( I18n.err( I18n.ERR_04165 ), e );",
                "+            LOG.error( I18n.err( I18n.ERR_04165_PAYLOAD_DECODING_ERROR ), e );",
                "             throw new RuntimeException( e );",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/storedProcedure/StoredProcedureRequestDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/storedProcedure/StoredProcedureRequestDecorator.java",
                "index 48d31e968..1b80941e6 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/storedProcedure/StoredProcedureRequestDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/storedProcedure/StoredProcedureRequestDecorator.java",
                "@@ -302,3 +302,3 @@ public class StoredProcedureRequestDecorator extends ExtendedRequestDecorator<St",
                "         {",
                "-            LOG.error( I18n.err( I18n.ERR_04165 ), e );",
                "+            LOG.error( I18n.err( I18n.ERR_04165_PAYLOAD_DECODING_ERROR ), e );",
                "             throw new RuntimeException( e );",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/whoAmI/WhoAmIResponseDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/whoAmI/WhoAmIResponseDecorator.java",
                "index 787b136c4..331bbb409 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/whoAmI/WhoAmIResponseDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/whoAmI/WhoAmIResponseDecorator.java",
                "@@ -84,3 +84,3 @@ public class WhoAmIResponseDecorator extends ExtendedResponseDecorator<WhoAmIRes",
                "         {",
                "-            LOG.error( I18n.err( I18n.ERR_04165 ), e );",
                "+            LOG.error( I18n.err( I18n.ERR_04165_PAYLOAD_DECODING_ERROR ), e );",
                "             throw new RuntimeException( e );"
            ],
            "changed_files": [
                "i18n/src/main/java/org/apache/directory/api/i18n/I18n.java",
                "i18n/src/main/resources/org/apache/directory/api/i18n/errors.properties",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/cancel/CancelRequestDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/certGeneration/CertGenerationRequestDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStatesEnum.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/gracefulShutdown/GracefulShutdownRequestDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyRequestDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyResponseDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/storedProcedure/StoredProcedureRequestDecorator.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/whoAmI/WhoAmIResponseDecorator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestGrammar.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/whoAmI/WhoAmIResponseDecorator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestDecorator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/certGeneration/CertGenerationRequestDecorator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyResponseDecorator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/cancel/CancelRequestDecorator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/pwdModify/PasswordModifyRequestDecorator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/endTransaction/EndTransactionRequestStatesEnum.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/storedProcedure/StoredProcedureRequestDecorator.java, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/gracefulShutdown/GracefulShutdownRequestDecorator.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: request",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "588ad9719ca92bd70249d1d74a0c26e6209af9fb",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1511908696,
            "hunks": 1,
            "message": "Added the EXTERNAL mechanism",
            "diff": [
                "diff --git a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/constants/SupportedSaslMechanisms.java b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/constants/SupportedSaslMechanisms.java",
                "index 5eb52ff8d..99a50f550 100644",
                "--- a/ldap/model/src/main/java/org/apache/directory/api/ldap/model/constants/SupportedSaslMechanisms.java",
                "+++ b/ldap/model/src/main/java/org/apache/directory/api/ldap/model/constants/SupportedSaslMechanisms.java",
                "@@ -49,2 +49,5 @@ public final class SupportedSaslMechanisms",
                "+    /** EXTERNAL mechanism */",
                "+    public static final String EXTERNAL = \"EXTERNAL\";",
                "+",
                "     /**"
            ],
            "changed_files": [
                "ldap/model/src/main/java/org/apache/directory/api/ldap/model/constants/SupportedSaslMechanisms.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/model/src/main/java/org/apache/directory/api/ldap/model/constants/SupportedSaslMechanisms.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "539697c65b74c0f28cff0220f94129df37fb9fcc",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1516921355,
            "hunks": 2,
            "message": "Fixed some wrong Javadoc",
            "diff": [
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java",
                "index e0045856c..58d2f7e64 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java",
                "@@ -35,3 +35,3 @@ import org.apache.directory.api.ldap.model.message.ExtendedResponse;",
                " /**",
                "- * An {@link ExtendedOperationFactory} for creating cancel extended request response ",
                "+ * An {@link ExtendedOperationFactory} for creating StartTransaction extended request response ",
                "  * pairs.",
                "@@ -46,3 +46,3 @@ public class StartTransactionFactory implements ExtendedOperationFactory",
                "     /**",
                "-     * Creates a new instance of CancelFactory.",
                "+     * Creates a new instance of StartTransactionFactory.",
                "      *"
            ],
            "changed_files": [
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionFactory.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "e06d0b71843a0afa1f79ffe6042f919dbd943862",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1517523674,
            "hunks": 8,
            "message": "o Declared the EndTransaction extended operation for OSGi usage",
            "diff": [
                "diff --git a/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java b/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "index 46d17bf27..d421a5c66 100644",
                "--- a/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "+++ b/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "@@ -65,2 +65,3 @@ import org.apache.directory.api.ldap.extras.extended.ads_impl.cancel.CancelFacto",
                " import org.apache.directory.api.ldap.extras.extended.ads_impl.certGeneration.CertGenerationFactory;",
                "+import org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.EndTransactionFactory;",
                " import org.apache.directory.api.ldap.extras.extended.ads_impl.gracefulDisconnect.GracefulDisconnectFactory;",
                "@@ -230,2 +231,6 @@ public final class CodecFactoryUtil",
                "+        EndTransactionFactory endTransactionFactory = new EndTransactionFactory( apiService );",
                "+        extendendOperationsFactories.put( endTransactionFactory.getOid(), endTransactionFactory );",
                "+        LOG.info( \"Registered pre-bundled extended operation factory: {}\", endTransactionFactory.getOid() );",
                "+",
                "         GracefulDisconnectFactory gracefulDisconnectFactory = new GracefulDisconnectFactory( apiService );",
                "diff --git a/ldap/extras/codec/pom.xml b/ldap/extras/codec/pom.xml",
                "index b6c4fcb13..97b659c54 100644",
                "--- a/ldap/extras/codec/pom.xml",
                "+++ b/ldap/extras/codec/pom.xml",
                "@@ -115,2 +115,3 @@",
                "               org.apache.directory.api.ldap.extras.extended.ads_impl.certGeneration;version=${project.version};-noimport:=true,",
                "+              org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction;version=${project.version};-noimport:=true,",
                "               org.apache.directory.api.ldap.extras.extended.ads_impl.gracefulDisconnect;version=${project.version};-noimport:=true,",
                "@@ -143,2 +144,3 @@",
                "               org.apache.directory.api.ldap.extras.extended.certGeneration;version=${project.version},",
                "+              org.apache.directory.api.ldap.extras.extended.endTransaction;version=${project.version},",
                "               org.apache.directory.api.ldap.extras.extended.gracefulDisconnect;version=${project.version},",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "index f2ff0a015..a1a308d3d 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "@@ -52,2 +52,3 @@ import org.apache.directory.api.ldap.extras.extended.ads_impl.cancel.CancelFacto",
                " import org.apache.directory.api.ldap.extras.extended.ads_impl.certGeneration.CertGenerationFactory;",
                "+import org.apache.directory.api.ldap.extras.extended.ads_impl.endTransaction.EndTransactionFactory;",
                " import org.apache.directory.api.ldap.extras.extended.ads_impl.gracefulDisconnect.GracefulDisconnectFactory;",
                "@@ -61,2 +62,3 @@ import org.apache.directory.api.ldap.extras.extended.cancel.CancelRequest;",
                " import org.apache.directory.api.ldap.extras.extended.certGeneration.CertGenerationRequest;",
                "+import org.apache.directory.api.ldap.extras.extended.endTransaction.EndTransactionRequest;",
                " import org.apache.directory.api.ldap.extras.extended.gracefulDisconnect.GracefulDisconnectResponse;",
                "@@ -138,2 +140,5 @@ public class ExtrasBundleActivator implements BundleActivator",
                "+            EndTransactionFactory endTransactionFactory = new EndTransactionFactory( codec );",
                "+            codec.registerExtendedRequest( endTransactionFactory );",
                "+",
                "             GracefulDisconnectFactory gracefulDisconnectFactory = new GracefulDisconnectFactory( codec );",
                "@@ -183,2 +188,3 @@ public class ExtrasBundleActivator implements BundleActivator",
                "             codec.unregisterExtendedRequest( CertGenerationRequest.EXTENSION_OID );",
                "+            codec.unregisterExtendedRequest( EndTransactionRequest.EXTENSION_OID );",
                "             codec.unregisterExtendedRequest( GracefulShutdownRequest.EXTENSION_OID );"
            ],
            "changed_files": [
                "ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "ldap/extras/codec/pom.xml",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec/pom.xml, ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java, ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "87c4da1b57a019108d4b361ccc7a14ef7012bfa5",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1516921987,
            "hunks": 2,
            "message": "Another bad javadoc...",
            "diff": [
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionResponseDecorator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionResponseDecorator.java",
                "index a6aa1c5f9..f72cfe354 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionResponseDecorator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionResponseDecorator.java",
                "@@ -29,3 +29,3 @@ import org.apache.directory.api.util.Strings;",
                " /**",
                "- * A Decorator for CancelResponses.",
                "+ * A Decorator for EndTransactionResponses.",
                "  *",
                "@@ -39,3 +39,3 @@ public class StartTransactionResponseDecorator extends ExtendedResponseDecorator",
                "     /**",
                "-     * Creates a new instance of CancelResponseDecorator.",
                "+     * Creates a new instance of EndTransactionResponseDecorator.",
                "      *"
            ],
            "changed_files": [
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionResponseDecorator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/extended/ads_impl/startTransaction/StartTransactionResponseDecorator.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "5d934d01437c8cb790f7954a152178776eaf6af1",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1516181952,
            "hunks": 5,
            "message": "Registered the transactionSpecification control",
            "diff": [
                "diff --git a/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java b/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "index 2fc976ca4..045c20b01 100644",
                "--- a/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "+++ b/ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "@@ -57,2 +57,4 @@ import org.apache.directory.api.ldap.extras.controls.syncrepl_impl.SyncRequestVa",
                " import org.apache.directory.api.ldap.extras.controls.syncrepl_impl.SyncStateValueFactory;",
                "+import org.apache.directory.api.ldap.extras.controls.transaction.TransactionSpecification;",
                "+import org.apache.directory.api.ldap.extras.controls.transaction.TransactionSpecificationFactory;",
                " import org.apache.directory.api.ldap.extras.controls.vlv.VirtualListViewRequest;",
                "@@ -183,2 +185,6 @@ public final class CodecFactoryUtil",
                "+        ControlFactory<TransactionSpecification> transactionSpecificationFactory = new TransactionSpecificationFactory( apiService );",
                "+        controlFactories.put( transactionSpecificationFactory.getOid(), transactionSpecificationFactory );",
                "+        LOG.info( \"Registered pre-bundled control factory: {}\", transactionSpecificationFactory.getOid() );",
                "+",
                "         ControlFactory<VirtualListViewRequest> virtualListViewRequestFactory = new VirtualListViewRequestFactory(",
                "diff --git a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "index 73c5933fc..bf0e48f74 100644",
                "--- a/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "+++ b/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "@@ -44,2 +44,4 @@ import org.apache.directory.api.ldap.extras.controls.syncrepl_impl.SyncRequestVa",
                " import org.apache.directory.api.ldap.extras.controls.syncrepl_impl.SyncStateValueFactory;",
                "+import org.apache.directory.api.ldap.extras.controls.transaction.TransactionSpecification;",
                "+import org.apache.directory.api.ldap.extras.controls.transaction.TransactionSpecificationFactory;",
                " import org.apache.directory.api.ldap.extras.controls.vlv.VirtualListViewRequest;",
                "@@ -167,2 +169,3 @@ public class ExtrasBundleActivator implements BundleActivator",
                "             codec.unregisterControl( SyncStateValue.OID );",
                "+            codec.unregisterControl( TransactionSpecification.OID );",
                "             codec.unregisterControl( VirtualListViewRequest.OID );",
                "@@ -222,2 +225,5 @@ public class ExtrasBundleActivator implements BundleActivator",
                "+            ControlFactory<TransactionSpecification> transactionSpecificationfactory = new TransactionSpecificationFactory( codec );",
                "+            codec.registerControl( transactionSpecificationfactory );",
                "+",
                "             ControlFactory<VirtualListViewRequest> virtualListViewRequestFactory = new VirtualListViewRequestFactory( codec );"
            ],
            "changed_files": [
                "ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java, ldap/codec/standalone/src/main/java/org/apache/directory/api/ldap/codec/standalone/CodecFactoryUtil.java",
                    "relevance": 8
                }
            ]
        },
        {
            "commit_id": "72af649a9a1e786e6f82535b8c617027199751f1",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1514280730,
            "hunks": 1,
            "message": "Fix for DIRAPI-303",
            "diff": [
                "diff --git a/util/src/main/java/org/apache/directory/api/util/Unicode.java b/util/src/main/java/org/apache/directory/api/util/Unicode.java",
                "index 59dedb223..dc8901a3a 100644",
                "--- a/util/src/main/java/org/apache/directory/api/util/Unicode.java",
                "+++ b/util/src/main/java/org/apache/directory/api/util/Unicode.java",
                "@@ -207,3 +207,3 @@ public final class Unicode",
                "             }",
                "-            else if ( ( bytes[pos] & UTF8_FIVE_BYTES_MASK ) == UTF8_FIVE_BYTES )",
                "+            else if ( ( bytes[pos] & UTF8_SIX_BYTES_MASK ) == UTF8_SIX_BYTES )",
                "             {"
            ],
            "changed_files": [
                "util/src/main/java/org/apache/directory/api/util/Unicode.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "DIRAPI-303": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: DIRAPI-303",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4432e3dc8d993fd782d14139431ad38309b4c87b",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1513116661,
            "hunks": 1,
            "message": "Update parent pom",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 498f98d6e..3bfaec9c0 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -24,3 +24,3 @@",
                "     <artifactId>project</artifactId>",
                "-    <version>41-SNAPSHOT</version>",
                "+    <version>41</version>",
                "     <relativePath />"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "8e9d934c36fd4e2779d20c569857e986bfc37fc0",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1513117947,
            "hunks": 1,
            "message": "Try to use new JVM for each test class",
            "diff": [
                "diff --git a/integ-osgi/pom.xml b/integ-osgi/pom.xml",
                "index aae5cfb39..322c2cc3c 100644",
                "--- a/integ-osgi/pom.xml",
                "+++ b/integ-osgi/pom.xml",
                "@@ -161,2 +161,10 @@",
                "       </plugin>",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-surefire-plugin</artifactId>",
                "+        <configuration>",
                "+            <forkCount>1</forkCount>",
                "+            <reuseForks>false</reuseForks>",
                "+        </configuration>",
                "+      </plugin>",
                "     </plugins>"
            ],
            "changed_files": [
                "integ-osgi/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "cd20c748f7261db60f9bcef39b9bed36040149b9",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1514221986,
            "hunks": 1,
            "message": "Fixed a bug in the Oid state engine",
            "diff": [
                "diff --git a/asn1/api/src/main/java/org/apache/directory/api/asn1/util/Oid.java b/asn1/api/src/main/java/org/apache/directory/api/asn1/util/Oid.java",
                "index 9212040d2..a948c54f0 100644",
                "--- a/asn1/api/src/main/java/org/apache/directory/api/asn1/util/Oid.java",
                "+++ b/asn1/api/src/main/java/org/apache/directory/api/asn1/util/Oid.java",
                "@@ -623,3 +623,3 @@ public final class Oid",
                "-        if ( c == ';' )",
                "+        if ( c == '.' )",
                "         {"
            ],
            "changed_files": [
                "asn1/api/src/main/java/org/apache/directory/api/asn1/util/Oid.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "9f888e56bcc65c6a5efe7a49bf7f59d45c9fc935",
            "repository": "https://github.com/apache/directory-ldap-api",
            "timestamp": 1513113685,
            "hunks": 0,
            "message": "Merge branch 'master' into shared-value",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.0",
                "2.0.0.AM1",
                "2.0.0.AM2",
                "2.0.0.AM3",
                "2.0.0.AM4",
                "2.0.1",
                "2.0.2",
                "2.1.0",
                "2.1.1",
                "2.1.2",
                "2.1.3",
                "2.1.4",
                "2.1.5",
                "2.1.6"
            ],
            "matched_rules": []
        }
    ]
}
