{
    "advisory_record": {
        "cve_id": "CVE-2018-17184",
        "description": "A malicious user with enough administration entitlements can inject html-like elements containing JavaScript statements into Connector names, Report names, AnyTypeClass keys and Policy descriptions. When another user with enough administration entitlements edits one of the Entities above via Admin Console, the injected JavaScript code is executed.",
        "reserved_timestamp": 1537315200,
        "published_timestamp": 1541462400,
        "updated_timestamp": 1541530621,
        "repository_url": null,
        "references": {
            "": 18,
            "https://syncope.apache.org/security#CVE-2018-17184:_Stored_XSS": 2,
            "https://www.apache.org/": 1,
            "https://www.apache.org/licenses/": 1,
            "https://cwiki.apache.org/confluence/display/SYNCOPE/Roadmap": 1,
            "https://www.apache.org/foundation/how-it-works": 1,
            "https://www.apache.org/foundation/": 1,
            "https://www.apache.org/foundation/sponsorship": 1,
            "https://www.apache.org/foundation/thanks": 1,
            "https://twitter.com/syncopeidm": 1,
            "http://maven.apache.org/": 1,
            "https://www.apache.org/security/": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-11977": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1961": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1959": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-17557": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17186": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17184": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1322": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1321": 1,
            "http://svn.apache.org/viewvc?view=revision&revision=r1596537": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3503": 1,
            "http://svn.apache.org/viewvc?view=revision&revision=r1586349": 1,
            "http://svn.apache.org/viewvc?view=revision&revision=r1586317": 1,
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0111": 1,
            "https://www.openhub.net/p/syncope": 1,
            "https://bestpractices.coreinfrastructure.org/projects/154": 1,
            "https://github.com/apache/syncope/actions/workflows/crosschecks.yml": 1,
            "https://github.com/apache/syncope/actions/workflows/codeql-analysis.yml": 1
        },
        "affected_products": [
            "Report",
            "JavaScript",
            "AnyTypeClass",
            "Connector",
            "Console",
            "Entities",
            "html",
            "Apache Syncope",
            "Admin"
        ],
        "versions": {
            "status": "affected",
            "version": "Apache Syncope releases prior to 2.0.11 and 2.1.2"
        },
        "files": [
            "AnyTypeClass",
            "JavaScript",
            "html-like"
        ],
        "keywords": [
            "edit",
            "admin",
            "entitlement",
            "code",
            "user",
            "statement",
            "connector",
            "policy",
            "inject",
            "administration",
            "contain",
            "name",
            "element",
            "entities",
            "console",
            "html",
            "execute",
            "report",
            "description",
            "anytypeclass",
            "javascript"
        ],
        "files_extension": [],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "b25a8834db2cc7ea45707a1218e85e0475684270",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539948412,
            "hunks": 51,
            "message": "Fixing some missing JPA entities' validation",
            "diff": [
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java",
                "index e017d450b3..acc1577d1d 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java",
                "@@ -30,3 +30,3 @@ import org.apache.syncope.client.enduser.SyncopeEnduserSession;",
                " import org.apache.syncope.client.enduser.annotations.Resource;",
                "-import org.apache.syncope.client.enduser.util.UserRequestValidator;",
                "+import org.apache.syncope.client.enduser.util.Validation;",
                " import org.apache.syncope.common.lib.SyncopeClientException;",
                "@@ -83,3 +83,3 @@ public class UserSelfCreateResource extends BaseUserSelfResource {",
                "                 // check if request is compliant with customization form rules",
                "-                if (UserRequestValidator.compliant(userTO,",
                "+                if (Validation.isCompliant(userTO,",
                "                         SyncopeEnduserApplication.get().getCustomFormAttributes(), true)) {",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java",
                "index 3cccb8fe20..1ea8530c4b 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java",
                "@@ -32,3 +32,3 @@ import org.apache.syncope.client.enduser.annotations.Resource;",
                " import org.apache.syncope.client.enduser.model.CustomAttributesInfo;",
                "-import org.apache.syncope.client.enduser.util.UserRequestValidator;",
                "+import org.apache.syncope.client.enduser.util.Validation;",
                " import org.apache.syncope.common.lib.AnyOperations;",
                "@@ -72,3 +72,3 @@ public class UserSelfUpdateResource extends BaseUserSelfResource {",
                "             // check if request is compliant with customization form rules",
                "-            if (UserRequestValidator.compliant(userTO, customFormAttributes, false)) {",
                "+            if (Validation.isCompliant(userTO, customFormAttributes, false)) {",
                "                 // 1. membership attributes management",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/util/SaltGenerator.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/util/SaltGenerator.java",
                "index 00d784d09b..acb3f133b4 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/util/SaltGenerator.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/util/SaltGenerator.java",
                "@@ -45,2 +45,3 @@ public final class SaltGenerator {",
                "     private SaltGenerator() {",
                "+        // private constructor for static utility class",
                "     }",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/util/Validation.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/util/Validation.java",
                "new file mode 100644",
                "index 0000000000..4924a530f6",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/util/Validation.java",
                "@@ -0,0 +1,96 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.enduser.util;",
                "+",
                "+import java.util.Map;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.client.enduser.model.CustomAttribute;",
                "+import org.apache.syncope.client.enduser.model.CustomAttributesInfo;",
                "+import org.apache.syncope.client.enduser.model.CustomTemplateInfo;",
                "+import org.apache.syncope.common.lib.EntityTOUtils;",
                "+import org.apache.syncope.common.lib.to.AttrTO;",
                "+import org.apache.syncope.common.lib.to.UserTO;",
                "+import org.apache.syncope.common.lib.types.SchemaType;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+public final class Validation {",
                "+",
                "+    private static final Logger LOG = LoggerFactory.getLogger(Validation.class);",
                "+",
                "+    public static boolean isCompliant(",
                "+            final UserTO userTO,",
                "+            final Map<String, CustomAttributesInfo> customFormAttributes,",
                "+            final boolean checkDefaultValues) {",
                "+",
                "+        if (customFormAttributes == null || customFormAttributes.isEmpty()) {",
                "+            return true;",
                "+        }",
                "+",
                "+        return validateAttributes(EntityTOUtils.buildAttrMap(userTO.getPlainAttrs()),",
                "+                customFormAttributes.get(SchemaType.PLAIN.name()), checkDefaultValues)",
                "+                && validateAttributes(EntityTOUtils.buildAttrMap(userTO.getDerAttrs()),",
                "+                        customFormAttributes.get(SchemaType.DERIVED.name()), checkDefaultValues)",
                "+                && validateAttributes(EntityTOUtils.buildAttrMap(userTO.getVirAttrs()),",
                "+                        customFormAttributes.get(SchemaType.VIRTUAL.name()), checkDefaultValues);",
                "+    }",
                "+",
                "+    private static boolean validateAttributes(final Map<String, AttrTO> attrMap,",
                "+            final CustomAttributesInfo customAttrInfo, final boolean checkDefaultValues) {",
                "+",
                "+        return customAttrInfo == null",
                "+                || customAttrInfo.getAttributes().isEmpty()",
                "+                || attrMap.entrySet().stream().allMatch(entry -> {",
                "+                    String schemaKey = entry.getKey();",
                "+                    AttrTO attrTO = entry.getValue();",
                "+                    CustomAttribute customAttr = customAttrInfo.getAttributes().get(schemaKey);",
                "+                    boolean compliant = customAttr != null && (!checkDefaultValues || isValid(attrTO, customAttr));",
                "+                    if (!compliant) {",
                "+                        LOG.trace(\"Attribute [{}] or its values [{}] are not allowed by form customization rules\",",
                "+                                attrTO.getSchema(), attrTO.getValues());",
                "+                    }",
                "+                    return compliant;",
                "+                });",
                "+    }",
                "+",
                "+    public static boolean validateSteps(final CustomTemplateInfo customTemplateInfo) {",
                "+        return customTemplateInfo != null",
                "+                && StringUtils.isNotBlank(customTemplateInfo.getWizard().getFirstStep())",
                "+                && !customTemplateInfo.getWizard().getSteps().isEmpty();",
                "+",
                "+    }",
                "+",
                "+    public static boolean validateStep(final String stepName, final CustomTemplateInfo customTemplateInfo) {",
                "+        return customTemplateInfo != null",
                "+                && !customTemplateInfo.getWizard().getSteps().isEmpty()",
                "+                && customTemplateInfo.getWizard().getSteps().containsKey(stepName)",
                "+                && StringUtils.isNotBlank(customTemplateInfo.getWizard().getSteps().get(stepName).getUrl());",
                "+",
                "+    }",
                "+",
                "+    private static boolean isValid(final AttrTO attrTO, final CustomAttribute customAttribute) {",
                "+        return customAttribute.isReadonly()",
                "+                ? attrTO.getValues().stream().allMatch(value -> customAttribute.getDefaultValues().contains(value))",
                "+                : true;",
                "+    }",
                "+",
                "+    private Validation() {",
                "+        // private constructor for static utility class",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/AbstractPolicy.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/AbstractPolicy.java",
                "index 27fcb85355..5344a1eec8 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/AbstractPolicy.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/AbstractPolicy.java",
                "@@ -26,2 +26,3 @@ import org.apache.syncope.core.persistence.api.entity.policy.Policy;",
                " import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;",
                "+import org.apache.syncope.core.persistence.jpa.validation.entity.PolicyCheck;",
                "@@ -29,2 +30,3 @@ import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity",
                " @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)",
                "+@PolicyCheck",
                " public abstract class AbstractPolicy extends AbstractGeneratedKeyEntity implements Policy {",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AbstractValidator.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AbstractValidator.java",
                "index 5b12d14e33..b06d5ea957 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AbstractValidator.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AbstractValidator.java",
                "@@ -43,2 +43,6 @@ public abstract class AbstractValidator<A extends Annotation, T> implements Cons",
                "     }",
                "+",
                "+    protected boolean isHtml(final String text) {",
                "+        return text != null && (text.indexOf('<') != -1 || text.indexOf('>') != -1);",
                "+    }",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeClassCheck.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeClassCheck.java",
                "new file mode 100644",
                "index 0000000000..01572b3257",
                "--- /dev/null",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeClassCheck.java",
                "@@ -0,0 +1,41 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.validation.entity;",
                "+",
                "+import java.lang.annotation.Documented;",
                "+import java.lang.annotation.ElementType;",
                "+import java.lang.annotation.Retention;",
                "+import java.lang.annotation.RetentionPolicy;",
                "+import java.lang.annotation.Target;",
                "+",
                "+import javax.validation.Constraint;",
                "+import javax.validation.Payload;",
                "+",
                "+@Target({ ElementType.TYPE })",
                "+@Retention(RetentionPolicy.RUNTIME)",
                "+@Constraint(validatedBy = AnyTypeClassValidator.class)",
                "+@Documented",
                "+public @interface AnyTypeClassCheck {",
                "+",
                "+    String message() default \"{org.apache.syncope.core.persistence.validation.anytypeclass}\";",
                "+",
                "+    Class<?>[] groups() default {};",
                "+",
                "+    Class<? extends Payload>[] payload() default {};",
                "+}",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeClassValidator.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeClassValidator.java",
                "new file mode 100644",
                "index 0000000000..baf8d71351",
                "--- /dev/null",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeClassValidator.java",
                "@@ -0,0 +1,43 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.validation.entity;",
                "+",
                "+import javax.validation.ConstraintValidatorContext;",
                "+import org.apache.syncope.common.lib.types.EntityViolationType;",
                "+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;",
                "+",
                "+public class AnyTypeClassValidator extends AbstractValidator<AnyTypeClassCheck, AnyTypeClass> {",
                "+",
                "+    @Override",
                "+    public boolean isValid(final AnyTypeClass anyTypeClass, final ConstraintValidatorContext context) {",
                "+        context.disableDefaultConstraintViolation();",
                "+",
                "+        boolean isValid = true;",
                "+",
                "+        if (isHtml(anyTypeClass.getKey())) {",
                "+            context.buildConstraintViolationWithTemplate(",
                "+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid key\")).",
                "+                    addPropertyNode(\"key\").addConstraintViolation();",
                "+",
                "+            isValid = false;",
                "+        }",
                "+",
                "+        return isValid;",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeValidator.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeValidator.java",
                "index 639061a7ad..6fb70781b0 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeValidator.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeValidator.java",
                "@@ -29,9 +29,19 @@ public class AnyTypeValidator extends AbstractValidator<AnyTypeCheck, AnyType> {",
                "     @Override",
                "-    public boolean isValid(final AnyType object, final ConstraintValidatorContext context) {",
                "+    public boolean isValid(final AnyType anyType, final ConstraintValidatorContext context) {",
                "         context.disableDefaultConstraintViolation();",
                "-        boolean isValid;",
                "-        switch (object.getKind()) {",
                "+        boolean isValid = true;",
                "+",
                "+        if (isHtml(anyType.getKey())) {",
                "+            context.buildConstraintViolationWithTemplate(",
                "+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid key\")).",
                "+                    addPropertyNode(\"key\").addConstraintViolation();",
                "+",
                "+            isValid = false;",
                "+        }",
                "+",
                "+        boolean nameKindMatch;",
                "+        switch (anyType.getKind()) {",
                "             case USER:",
                "-                isValid = AnyTypeKind.USER.name().equalsIgnoreCase(object.getKey());",
                "+                nameKindMatch = AnyTypeKind.USER.name().equalsIgnoreCase(anyType.getKey());",
                "                 break;",
                "@@ -39,3 +49,3 @@ public class AnyTypeValidator extends AbstractValidator<AnyTypeCheck, AnyType> {",
                "             case GROUP:",
                "-                isValid = AnyTypeKind.GROUP.name().equalsIgnoreCase(object.getKey());",
                "+                nameKindMatch = AnyTypeKind.GROUP.name().equalsIgnoreCase(anyType.getKey());",
                "                 break;",
                "@@ -44,8 +54,7 @@ public class AnyTypeValidator extends AbstractValidator<AnyTypeCheck, AnyType> {",
                "             default:",
                "-                isValid = !AnyTypeKind.USER.name().equalsIgnoreCase(object.getKey())",
                "-                        && !AnyTypeKind.GROUP.name().equalsIgnoreCase(object.getKey())",
                "-                        && !SyncopeConstants.REALM_ANYTYPE.equalsIgnoreCase(object.getKey());",
                "+                nameKindMatch = !AnyTypeKind.USER.name().equalsIgnoreCase(anyType.getKey())",
                "+                        && !AnyTypeKind.GROUP.name().equalsIgnoreCase(anyType.getKey())",
                "+                        && !SyncopeConstants.REALM_ANYTYPE.equalsIgnoreCase(anyType.getKey());",
                "         }",
                "-",
                "-        if (!isValid) {",
                "+        if (!nameKindMatch) {",
                "             context.buildConstraintViolationWithTemplate(",
                "@@ -55,3 +64,3 @@ public class AnyTypeValidator extends AbstractValidator<AnyTypeCheck, AnyType> {",
                "-        return isValid;",
                "+        return isValid && nameKindMatch;",
                "     }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ConnInstanceValidator.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ConnInstanceValidator.java",
                "index ecb0edb3e4..ffbe438913 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ConnInstanceValidator.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ConnInstanceValidator.java",
                "@@ -30,4 +30,14 @@ public class ConnInstanceValidator extends AbstractValidator<ConnInstanceCheck,",
                "     public boolean isValid(final ConnInstance connInstance, final ConstraintValidatorContext context) {",
                "+        context.disableDefaultConstraintViolation();",
                "+",
                "         boolean isValid = true;",
                "+        if (isHtml(connInstance.getDisplayName())) {",
                "+            context.buildConstraintViolationWithTemplate(",
                "+                    getTemplate(EntityViolationType.InvalidName, \"Invalid display name\")).",
                "+                    addPropertyNode(\"displayName\").addConstraintViolation();",
                "+",
                "+            isValid = false;",
                "+        }",
                "+",
                "         try {",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyCheck.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyCheck.java",
                "new file mode 100644",
                "index 0000000000..45873befc2",
                "--- /dev/null",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyCheck.java",
                "@@ -0,0 +1,41 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.validation.entity;",
                "+",
                "+import java.lang.annotation.Documented;",
                "+import java.lang.annotation.ElementType;",
                "+import java.lang.annotation.Retention;",
                "+import java.lang.annotation.RetentionPolicy;",
                "+import java.lang.annotation.Target;",
                "+",
                "+import javax.validation.Constraint;",
                "+import javax.validation.Payload;",
                "+",
                "+@Target({ ElementType.TYPE })",
                "+@Retention(RetentionPolicy.RUNTIME)",
                "+@Constraint(validatedBy = PolicyValidator.class)",
                "+@Documented",
                "+public @interface PolicyCheck {",
                "+",
                "+    String message() default \"{org.apache.syncope.core.persistence.validation.policy}\";",
                "+",
                "+    Class<?>[] groups() default {};",
                "+",
                "+    Class<? extends Payload>[] payload() default {};",
                "+}",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyValidator.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyValidator.java",
                "new file mode 100644",
                "index 0000000000..47a06e9fd7",
                "--- /dev/null",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyValidator.java",
                "@@ -0,0 +1,40 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.validation.entity;",
                "+",
                "+import javax.validation.ConstraintValidatorContext;",
                "+import org.apache.syncope.common.lib.types.EntityViolationType;",
                "+import org.apache.syncope.core.persistence.api.entity.policy.Policy;",
                "+",
                "+public class PolicyValidator extends AbstractValidator<RoleCheck, Policy> {",
                "+",
                "+    @Override",
                "+    public boolean isValid(final Policy policy, final ConstraintValidatorContext context) {",
                "+        context.disableDefaultConstraintViolation();",
                "+",
                "+        if (isHtml(policy.getDescription())) {",
                "+            context.buildConstraintViolationWithTemplate(",
                "+                    getTemplate(EntityViolationType.InvalidName, \"Invalid description\")).",
                "+                    addPropertyNode(\"description\").addConstraintViolation();",
                "+            return false;",
                "+        }",
                "+",
                "+        return true;",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RealmValidator.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RealmValidator.java",
                "index 6b542d0e17..7a05ea8468 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RealmValidator.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RealmValidator.java",
                "@@ -41,4 +41,3 @@ public class RealmValidator extends AbstractValidator<RealmCheck, Realm> {",
                "                 context.buildConstraintViolationWithTemplate(",
                "-                        getTemplate(EntityViolationType.InvalidRealm,",
                "-                                \"Root realm cannot have a parent realm\")).",
                "+                        getTemplate(EntityViolationType.InvalidRealm, \"Root realm cannot have a parent realm\")).",
                "                         addPropertyNode(\"parent\").addConstraintViolation();",
                "@@ -50,4 +49,3 @@ public class RealmValidator extends AbstractValidator<RealmCheck, Realm> {",
                "                 context.buildConstraintViolationWithTemplate(",
                "-                        getTemplate(EntityViolationType.InvalidRealm,",
                "-                                \"A realm needs to reference a parent realm\")).",
                "+                        getTemplate(EntityViolationType.InvalidRealm, \"A realm needs to reference a parent realm\")).",
                "                         addPropertyNode(\"parent\").addConstraintViolation();",
                "@@ -59,4 +57,3 @@ public class RealmValidator extends AbstractValidator<RealmCheck, Realm> {",
                "                 context.buildConstraintViolationWithTemplate(",
                "-                        getTemplate(EntityViolationType.InvalidRealm,",
                "-                                \"Only letters and numbers are allowed in realm name\")).",
                "+                        getTemplate(EntityViolationType.InvalidRealm, \"Only alphanumeric chars allowed in realm name\")).",
                "                         addPropertyNode(\"name\").addConstraintViolation();",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RelationshipTypeValidator.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RelationshipTypeValidator.java",
                "index 9953859f26..550b153723 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RelationshipTypeValidator.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RelationshipTypeValidator.java",
                "@@ -28,6 +28,16 @@ public class RelationshipTypeValidator extends AbstractValidator<RelationshipTyp",
                "     @Override",
                "-    public boolean isValid(final RelationshipType object, final ConstraintValidatorContext context) {",
                "+    public boolean isValid(final RelationshipType relationShipType, final ConstraintValidatorContext context) {",
                "         context.disableDefaultConstraintViolation();",
                "-        if (MembershipType.getInstance().getKey().equalsIgnoreCase(object.getKey())) {",
                "+        boolean isValid = true;",
                "+",
                "+        if (isHtml(relationShipType.getKey())) {",
                "+            context.buildConstraintViolationWithTemplate(",
                "+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid key\")).",
                "+                    addPropertyNode(\"key\").addConstraintViolation();",
                "+",
                "+            isValid = false;",
                "+        }",
                "+",
                "+        if (MembershipType.getInstance().getKey().equalsIgnoreCase(relationShipType.getKey())) {",
                "             context.buildConstraintViolationWithTemplate(",
                "@@ -35,6 +45,7 @@ public class RelationshipTypeValidator extends AbstractValidator<RelationshipTyp",
                "                     addPropertyNode(\"key\").addConstraintViolation();",
                "-            return false;",
                "+",
                "+            isValid = false;",
                "         }",
                "-        return true;",
                "+        return isValid;",
                "     }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ReportValidator.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ReportValidator.java",
                "index e58a889cb2..2be2072c52 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ReportValidator.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ReportValidator.java",
                "@@ -33,10 +33,20 @@ public class ReportValidator extends AbstractValidator<ReportCheck, Report> {",
                "     @SuppressWarnings(\"ResultOfObjectAllocationIgnored\")",
                "-    public boolean isValid(final Report object, final ConstraintValidatorContext context) {",
                "+    public boolean isValid(final Report report, final ConstraintValidatorContext context) {",
                "+        context.disableDefaultConstraintViolation();",
                "+",
                "         boolean isValid = true;",
                "-        if (object.getCronExpression() != null) {",
                "+        if (isHtml(report.getName())) {",
                "+            context.buildConstraintViolationWithTemplate(",
                "+                    getTemplate(EntityViolationType.InvalidName, \"Invalid name\")).",
                "+                    addPropertyNode(\"name\").addConstraintViolation();",
                "+",
                "+            isValid = false;",
                "+        }",
                "+",
                "+        if (report.getCronExpression() != null) {",
                "             try {",
                "-                new CronExpression(object.getCronExpression());",
                "+                new CronExpression(report.getCronExpression());",
                "             } catch (ParseException e) {",
                "-                LOG.error(\"Invalid cron expression '\" + object.getCronExpression() + \"'\", e);",
                "+                LOG.error(\"Invalid cron expression '\" + report.getCronExpression() + \"'\", e);",
                "                 isValid = false;",
                "@@ -50,5 +60,5 @@ public class ReportValidator extends AbstractValidator<ReportCheck, Report> {",
                "-        Set<String> reportletKeys = object.getReportlets().stream().",
                "+        Set<String> reportletKeys = report.getReportlets().stream().",
                "                 map(Entity::getKey).collect(Collectors.toSet());",
                "-        if (reportletKeys.size() != object.getReportlets().size()) {",
                "+        if (reportletKeys.size() != report.getReportlets().size()) {",
                "             LOG.error(\"Reportlet key must be unique\");",
                "diff --git a/ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/OIDCProviderValidator.java b/ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/OIDCProviderValidator.java",
                "index 9e9d6871ad..90cf59b5f3 100644",
                "--- a/ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/OIDCProviderValidator.java",
                "+++ b/ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/OIDCProviderValidator.java",
                "@@ -24,2 +24,3 @@ import org.apache.syncope.common.lib.types.ImplementationEngine;",
                " import org.apache.syncope.core.persistence.api.entity.OIDCProvider;",
                "+import org.apache.syncope.core.persistence.api.entity.resource.Item;",
                " import org.apache.syncope.core.provisioning.api.data.ItemTransformer;",
                "@@ -29,5 +30,14 @@ public class OIDCProviderValidator extends AbstractValidator<OIDCProviderCheck,",
                "     @Override",
                "-    public boolean isValid(final OIDCProvider value, final ConstraintValidatorContext context) {",
                "+    public boolean isValid(final OIDCProvider oidcProvider, final ConstraintValidatorContext context) {",
                "+        context.disableDefaultConstraintViolation();",
                "-        if (value.isSelfRegUnmatching() && value.isCreateUnmatching()) {",
                "+        if (isHtml(oidcProvider.getKey())) {",
                "+            context.buildConstraintViolationWithTemplate(",
                "+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid key\")).",
                "+                    addPropertyNode(\"key\").addConstraintViolation();",
                "+",
                "+            return false;",
                "+        }",
                "+",
                "+        if (oidcProvider.isSelfRegUnmatching() && oidcProvider.isCreateUnmatching()) {",
                "             context.buildConstraintViolationWithTemplate(",
                "@@ -37,2 +47,3 @@ public class OIDCProviderValidator extends AbstractValidator<OIDCProviderCheck,",
                "                     addPropertyNode(\"createUnmatching\").addConstraintViolation();",
                "+",
                "             return false;",
                "@@ -40,4 +51,4 @@ public class OIDCProviderValidator extends AbstractValidator<OIDCProviderCheck,",
                "-        long connObjectKeys = value.getItems().stream().filter(item -> item.isConnObjectKey()).count();",
                "-        if (!value.getItems().isEmpty() && connObjectKeys != 1) {",
                "+        long connObjectKeys = oidcProvider.getItems().stream().filter(Item::isConnObjectKey).count();",
                "+        if (!oidcProvider.getItems().isEmpty() && connObjectKeys != 1) {",
                "             context.buildConstraintViolationWithTemplate(",
                "@@ -50,3 +61,3 @@ public class OIDCProviderValidator extends AbstractValidator<OIDCProviderCheck,",
                "-        long passwords = value.getItems().stream().filter(item -> item.isPassword()).count();",
                "+        long passwords = oidcProvider.getItems().stream().filter(Item::isPassword).count();",
                "         if (passwords > 0) {",
                "@@ -58,3 +69,3 @@ public class OIDCProviderValidator extends AbstractValidator<OIDCProviderCheck,",
                "-        value.getItems().forEach(item -> {",
                "+        oidcProvider.getItems().forEach(item -> {",
                "             item.getTransformers().stream().",
                "@@ -62,3 +73,2 @@ public class OIDCProviderValidator extends AbstractValidator<OIDCProviderCheck,",
                "                     forEach(transformer -> {",
                "-",
                "                         Class<?> actionsClass = null;",
                "diff --git a/ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPValidator.java b/ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPValidator.java",
                "index ab2f1129ec..a14d420a42 100644",
                "--- a/ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPValidator.java",
                "+++ b/ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPValidator.java",
                "@@ -24,2 +24,3 @@ import org.apache.syncope.common.lib.types.ImplementationEngine;",
                " import org.apache.syncope.core.persistence.api.entity.SAML2IdP;",
                "+import org.apache.syncope.core.persistence.api.entity.resource.Item;",
                " import org.apache.syncope.core.provisioning.api.data.ItemTransformer;",
                "@@ -29,4 +30,14 @@ public class SAML2IdPValidator extends AbstractValidator<SAML2IdPCheck, SAML2IdP",
                "     @Override",
                "-    public boolean isValid(final SAML2IdP value, final ConstraintValidatorContext context) {",
                "-        if (value.isSelfRegUnmatching() && value.isCreateUnmatching()) {",
                "+    public boolean isValid(final SAML2IdP saml2IdP, final ConstraintValidatorContext context) {",
                "+        context.disableDefaultConstraintViolation();",
                "+",
                "+        if (isHtml(saml2IdP.getKey())) {",
                "+            context.buildConstraintViolationWithTemplate(",
                "+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid key\")).",
                "+                    addPropertyNode(\"key\").addConstraintViolation();",
                "+",
                "+            return false;",
                "+        }",
                "+",
                "+        if (saml2IdP.isSelfRegUnmatching() && saml2IdP.isCreateUnmatching()) {",
                "             context.buildConstraintViolationWithTemplate(",
                "@@ -36,2 +47,3 @@ public class SAML2IdPValidator extends AbstractValidator<SAML2IdPCheck, SAML2IdP",
                "                     addPropertyNode(\"createUnmatching\").addConstraintViolation();",
                "+",
                "             return false;",
                "@@ -39,4 +51,4 @@ public class SAML2IdPValidator extends AbstractValidator<SAML2IdPCheck, SAML2IdP",
                "-        long connObjectKeys = value.getItems().stream().filter(item -> item.isConnObjectKey()).count();",
                "-        if (!value.getItems().isEmpty() && connObjectKeys != 1) {",
                "+        long connObjectKeys = saml2IdP.getItems().stream().filter(Item::isConnObjectKey).count();",
                "+        if (!saml2IdP.getItems().isEmpty() && connObjectKeys != 1) {",
                "             context.buildConstraintViolationWithTemplate(",
                "@@ -44,2 +56,3 @@ public class SAML2IdPValidator extends AbstractValidator<SAML2IdPCheck, SAML2IdP",
                "                     addPropertyNode(\"connObjectKey.size\").addConstraintViolation();",
                "+",
                "             return false;",
                "@@ -49,3 +62,3 @@ public class SAML2IdPValidator extends AbstractValidator<SAML2IdPCheck, SAML2IdP",
                "-        long passwords = value.getItems().stream().filter(item -> item.isPassword()).count();",
                "+        long passwords = saml2IdP.getItems().stream().filter(Item::isPassword).count();",
                "         if (passwords > 0) {",
                "@@ -57,3 +70,3 @@ public class SAML2IdPValidator extends AbstractValidator<SAML2IdPCheck, SAML2IdP",
                "-        value.getItems().forEach(item -> {",
                "+        saml2IdP.getItems().forEach(item -> {",
                "             item.getTransformers().stream().",
                "@@ -61,3 +74,2 @@ public class SAML2IdPValidator extends AbstractValidator<SAML2IdPCheck, SAML2IdP",
                "                     forEach(transformer -> {",
                "-",
                "                         Class<?> actionsClass = null;",
                "@@ -83,3 +95,2 @@ public class SAML2IdPValidator extends AbstractValidator<SAML2IdPCheck, SAML2IdP",
                "     }",
                "-",
                " }"
            ],
            "changed_files": [
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/util/SaltGenerator.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/util/Validation.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/AbstractPolicy.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AbstractValidator.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeClassCheck.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeClassValidator.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeValidator.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ConnInstanceValidator.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyCheck.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyValidator.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RealmValidator.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RelationshipTypeValidator.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ReportValidator.java",
                "ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/OIDCProviderValidator.java",
                "ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPValidator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "36fb466afd64894170fa5e2e030ce6895120b1af"
                ],
                [
                    "no-tag",
                    "73aed0a741b1255f45893e3cada6501473350738"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AnyTypeClass",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeClassCheck.java, core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeClassValidator.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: entities",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: policy, user, anytypeclass, report",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d9250efade3793edeb35be10f72890a98090438c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1533223423,
            "hunks": 338,
            "message": "[SYNCOPE-1348] Batch is in, now need to kick Bulk out",
            "diff": [
                "diff --git a/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java b/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java",
                "index 7675f0a4d4..a614dd1d5e 100644",
                "--- a/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java",
                "+++ b/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java",
                "@@ -20,2 +20,3 @@ package org.apache.syncope.client.lib;",
                "+import org.apache.syncope.client.lib.batch.BatchRequest;",
                " import com.fasterxml.jackson.core.type.TypeReference;",
                "@@ -360,2 +361,10 @@ public class SyncopeClient {",
                "     }",
                "+",
                "+    public BatchRequest batch() {",
                "+        return new BatchRequest(",
                "+                mediaType,",
                "+                restClientFactory.getAddress(),",
                "+                restClientFactory.getProviders(),",
                "+                getJWT());",
                "+    }",
                " }",
                "diff --git a/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java b/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java",
                "index d0ee76a279..90105d0806 100644",
                "--- a/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java",
                "+++ b/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java",
                "@@ -36,3 +36,2 @@ import org.apache.cxf.jaxrs.provider.JAXBElementProvider;",
                " import org.apache.cxf.staxutils.DocumentDepthProperties;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.policy.PolicyTO;",
                "@@ -50,3 +49,3 @@ public class SyncopeClientFactoryBean {",
                "         JSON(MediaType.APPLICATION_JSON_TYPE),",
                "-        YAML(SyncopeConstants.APPLICATION_YAML_TYPE),",
                "+        YAML(RESTHeaders.APPLICATION_YAML_TYPE),",
                "         XML(MediaType.APPLICATION_XML_TYPE);",
                "diff --git a/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchClientFactoryBean.java b/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchClientFactoryBean.java",
                "new file mode 100644",
                "index 0000000000..a8858dc209",
                "--- /dev/null",
                "+++ b/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchClientFactoryBean.java",
                "@@ -0,0 +1,89 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements. See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership. The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License. You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied. See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.lib.batch;",
                "+",
                "+import java.io.IOException;",
                "+import java.net.URI;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import org.apache.cxf.endpoint.ConduitSelector;",
                "+import org.apache.cxf.endpoint.Endpoint;",
                "+import org.apache.cxf.endpoint.UpfrontConduitSelector;",
                "+import org.apache.cxf.jaxrs.client.ClientProxyImpl;",
                "+import org.apache.cxf.jaxrs.client.ClientState;",
                "+import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;",
                "+import org.apache.cxf.jaxrs.model.ClassResourceInfo;",
                "+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;",
                "+",
                "+public class BatchClientFactoryBean extends JAXRSClientFactoryBean {",
                "+",
                "+    private final List<BatchRequestItem> batchRequestItems = new ArrayList<>();",
                "+",
                "+    private ClassLoader proxyLoader;",
                "+",
                "+    private boolean inheritHeaders;",
                "+",
                "+    @Override",
                "+    public void setClassLoader(final ClassLoader loader) {",
                "+        this.proxyLoader = loader;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setInheritHeaders(final boolean inheritHeaders) {",
                "+        this.inheritHeaders = inheritHeaders;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected ConduitSelector getConduitSelector(final Endpoint ep) {",
                "+        ConduitSelector cs = getConduitSelector();",
                "+        if (cs == null) {",
                "+            try {",
                "+                cs = new UpfrontConduitSelector(new BatchOfflineHTTPConduit(bus, ep.getEndpointInfo()));",
                "+            } catch (IOException e) {",
                "+                throw new IllegalArgumentException(\"Could not create \" + BatchOfflineHTTPConduit.class.getName(), e);",
                "+            }",
                "+        }",
                "+        cs.setEndpoint(ep);",
                "+        return cs;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected ClientProxyImpl createClientProxy(",
                "+            final ClassResourceInfo cri,",
                "+            final boolean isRoot,",
                "+            final ClientState actualState,",
                "+            final Object[] varValues) {",
                "+",
                "+        if (actualState == null) {",
                "+            return new BatchClientProxyImpl(",
                "+                    this, URI.create(getAddress()), proxyLoader, cri, isRoot, inheritHeaders, varValues);",
                "+        } else {",
                "+            return new BatchClientProxyImpl(",
                "+                    this, actualState, proxyLoader, cri, isRoot, inheritHeaders, varValues);",
                "+        }",
                "+    }",
                "+",
                "+    public boolean add(final BatchRequestItem item) {",
                "+        return this.batchRequestItems.add(item);",
                "+    }",
                "+",
                "+    public List<BatchRequestItem> getBatchRequestItems() {",
                "+        return batchRequestItems;",
                "+    }",
                "+}",
                "diff --git a/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchClientProxyImpl.java b/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchClientProxyImpl.java",
                "new file mode 100644",
                "index 0000000000..3e736e08a8",
                "--- /dev/null",
                "+++ b/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchClientProxyImpl.java",
                "@@ -0,0 +1,83 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements. See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership. The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License. You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied. See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.lib.batch;",
                "+",
                "+import java.net.URI;",
                "+import java.nio.charset.StandardCharsets;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.cxf.jaxrs.client.ClientProxyImpl;",
                "+import org.apache.cxf.jaxrs.client.ClientState;",
                "+import org.apache.cxf.jaxrs.model.ClassResourceInfo;",
                "+import org.apache.cxf.message.Message;",
                "+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;",
                "+",
                "+public class BatchClientProxyImpl extends ClientProxyImpl {",
                "+",
                "+    private final BatchClientFactoryBean factory;",
                "+",
                "+    public BatchClientProxyImpl(",
                "+            final BatchClientFactoryBean factory,",
                "+            final URI baseURI,",
                "+            final ClassLoader loader,",
                "+            final ClassResourceInfo cri,",
                "+            final boolean isRoot,",
                "+            final boolean inheritHeaders,",
                "+            final Object... varValues) {",
                "+",
                "+        super(baseURI, loader, cri, isRoot, inheritHeaders, varValues);",
                "+        this.factory = factory;",
                "+    }",
                "+",
                "+    public BatchClientProxyImpl(",
                "+            final BatchClientFactoryBean factory,",
                "+            final ClientState initialState,",
                "+            final ClassLoader loader,",
                "+            final ClassResourceInfo cri,",
                "+            final boolean isRoot,",
                "+            final boolean inheritHeaders,",
                "+            final Object... varValues) {",
                "+",
                "+        super(initialState, loader, cri, isRoot, inheritHeaders, varValues);",
                "+        this.factory = factory;",
                "+    }",
                "+",
                "+    @Override",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    protected Object[] preProcessResult(final Message message) throws Exception {",
                "+        BatchRequestItem bri = new BatchRequestItem();",
                "+        bri.setMethod((String) message.get(Message.HTTP_REQUEST_METHOD));",
                "+        bri.setRequestURI(StringUtils.substringAfter(",
                "+                (String) message.getContextualProperty(Message.REQUEST_URI),",
                "+                getState().getBaseURI().toASCIIString()));",
                "+        bri.setHeaders((Map<String, List<Object>>) message.get(Message.PROTOCOL_HEADERS));",
                "+",
                "+        BatchOfflineHTTPConduit conduit = (BatchOfflineHTTPConduit) message.getExchange().getConduit(message);",
                "+        bri.setContent(conduit.getOutputStream().toString(StandardCharsets.UTF_8.name()));",
                "+",
                "+        factory.add(bri);",
                "+        return null;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected Object handleResponse(final Message outMessage, final Class<?> serviceCls) throws Throwable {",
                "+        return null;",
                "+    }",
                "+}",
                "diff --git a/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchOfflineHTTPConduit.java b/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchOfflineHTTPConduit.java",
                "new file mode 100644",
                "index 0000000000..e4587bec90",
                "--- /dev/null",
                "+++ b/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchOfflineHTTPConduit.java",
                "@@ -0,0 +1,77 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements. See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership. The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License. You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied. See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.lib.batch;",
                "+",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.OutputStream;",
                "+import org.apache.cxf.Bus;",
                "+import org.apache.cxf.configuration.security.ProxyAuthorizationPolicy;",
                "+import org.apache.cxf.message.Message;",
                "+import org.apache.cxf.service.model.EndpointInfo;",
                "+import org.apache.cxf.transport.http.Address;",
                "+import org.apache.cxf.transport.http.HTTPConduit;",
                "+import org.apache.cxf.transport.http.auth.DefaultBasicAuthSupplier;",
                "+import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;",
                "+import org.apache.cxf.ws.addressing.EndpointReferenceType;",
                "+",
                "+public class BatchOfflineHTTPConduit extends HTTPConduit {",
                "+",
                "+    private ByteArrayOutputStream baos;",
                "+",
                "+    public BatchOfflineHTTPConduit(final Bus bus, final EndpointInfo ei) throws IOException {",
                "+        this(bus, ei, null);",
                "+    }",
                "+",
                "+    public BatchOfflineHTTPConduit(",
                "+            final Bus bus,",
                "+            final EndpointInfo ei,",
                "+            final EndpointReferenceType t) throws IOException {",
                "+",
                "+        super(bus, ei, t);",
                "+        this.proxyAuthSupplier = new DefaultBasicAuthSupplier();",
                "+        this.proxyAuthorizationPolicy = new ProxyAuthorizationPolicy();",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void setupConnection(",
                "+            final Message message, final Address address,",
                "+            final HTTPClientPolicy csPolicy) throws IOException {",
                "+    }",
                "+",
                "+    @Override",
                "+    public HTTPClientPolicy getClient(final Message message) {",
                "+        return new HTTPClientPolicy();",
                "+    }",
                "+",
                "+    @Override",
                "+    protected OutputStream createOutputStream(",
                "+            final Message message,",
                "+            final boolean needToCacheRequest,",
                "+            final boolean isChunking,",
                "+            final int chunkThreshold) throws IOException {",
                "+",
                "+        baos = new ByteArrayOutputStream();",
                "+        return baos;",
                "+    }",
                "+",
                "+    public ByteArrayOutputStream getOutputStream() {",
                "+        return baos;",
                "+    }",
                "+}",
                "diff --git a/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchRequest.java b/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchRequest.java",
                "new file mode 100644",
                "index 0000000000..580c95a389",
                "--- /dev/null",
                "+++ b/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchRequest.java",
                "@@ -0,0 +1,102 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.lib.batch;",
                "+",
                "+import java.util.List;",
                "+import java.util.UUID;",
                "+import javax.ws.rs.core.HttpHeaders;",
                "+import javax.ws.rs.core.MediaType;",
                "+import org.apache.cxf.jaxrs.client.Client;",
                "+import org.apache.cxf.jaxrs.client.WebClient;",
                "+import org.apache.syncope.common.rest.api.Preference;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "+import org.apache.syncope.common.rest.api.batch.BatchPayloadGenerator;",
                "+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+public class BatchRequest {",
                "+",
                "+    private static final Logger LOG = LoggerFactory.getLogger(BatchRequest.class);",
                "+",
                "+    private final MediaType mediaType;",
                "+",
                "+    private final String jwt;",
                "+",
                "+    private final String address;",
                "+",
                "+    private final List<?> providers;",
                "+",
                "+    private BatchClientFactoryBean bcfb;",
                "+",
                "+    public BatchRequest(",
                "+            final MediaType mediaType,",
                "+            final String address,",
                "+            final List<?> providers,",
                "+            final String jwt) {",
                "+",
                "+        this.mediaType = mediaType;",
                "+        this.jwt = jwt;",
                "+        this.address = address;",
                "+        this.providers = providers;",
                "+        initBatchClientFactoryBean();",
                "+    }",
                "+",
                "+    private void initBatchClientFactoryBean() {",
                "+        this.bcfb = new BatchClientFactoryBean();",
                "+        this.bcfb.setAddress(address);",
                "+        this.bcfb.setProviders(providers);",
                "+    }",
                "+",
                "+    public <T> T getService(final Class<T> serviceClass) {",
                "+        bcfb.setServiceClass(serviceClass);",
                "+        T serviceInstance = bcfb.create(serviceClass);",
                "+",
                "+        Client client = WebClient.client(serviceInstance);",
                "+        client.type(mediaType).accept(mediaType);",
                "+",
                "+        return serviceInstance;",
                "+    }",
                "+",
                "+    public List<BatchRequestItem> getItems() {",
                "+        return bcfb.getBatchRequestItems();",
                "+    }",
                "+",
                "+    public BatchResponse commit() {",
                "+        return commit(false);",
                "+    }",
                "+",
                "+    public BatchResponse commit(final boolean async) {",
                "+        String boundary = \"--batch_\" + UUID.randomUUID().toString();",
                "+",
                "+        WebClient webClient = WebClient.create(bcfb.getAddress()).path(\"batch\").",
                "+                header(HttpHeaders.AUTHORIZATION, \"Bearer \" + jwt).",
                "+                type(RESTHeaders.multipartMixedWith(boundary.substring(2)));",
                "+        if (async) {",
                "+            webClient.header(RESTHeaders.PREFER, Preference.RESPOND_ASYNC);",
                "+        }",
                "+",
                "+        String body = BatchPayloadGenerator.generate(bcfb.getBatchRequestItems(), boundary);",
                "+        LOG.debug(\"Batch request body:\\n{}\", body);",
                "+",
                "+        initBatchClientFactoryBean();",
                "+",
                "+        return new BatchResponse(boundary, jwt, webClient.post(body));",
                "+    }",
                "+}",
                "diff --git a/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchResponse.java b/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchResponse.java",
                "new file mode 100644",
                "index 0000000000..89cd0e7fc9",
                "--- /dev/null",
                "+++ b/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchResponse.java",
                "@@ -0,0 +1,95 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.lib.batch;",
                "+",
                "+import java.io.ByteArrayInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.net.URI;",
                "+import java.nio.charset.StandardCharsets;",
                "+import java.util.List;",
                "+import javax.ws.rs.core.HttpHeaders;",
                "+import javax.ws.rs.core.Response;",
                "+import org.apache.cxf.helpers.IOUtils;",
                "+import org.apache.cxf.jaxrs.client.WebClient;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "+import org.apache.syncope.common.rest.api.batch.BatchPayloadParser;",
                "+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+public class BatchResponse {",
                "+",
                "+    private static final Logger LOG = LoggerFactory.getLogger(BatchResponse.class);",
                "+",
                "+    private final String boundary;",
                "+",
                "+    private final String jwt;",
                "+",
                "+    private final URI monitor;",
                "+",
                "+    private Response response;",
                "+",
                "+    public BatchResponse(final String boundary, final String jwt, final Response response) {",
                "+        this.boundary = boundary;",
                "+        this.jwt = jwt;",
                "+        this.monitor = response.getLocation();",
                "+        this.response = response;",
                "+    }",
                "+",
                "+    /**",
                "+     * Gives the last Response received from the Batch service.",
                "+     *",
                "+     * @return the last Response received from the Batch service",
                "+     */",
                "+    public Response getResponse() {",
                "+        return response;",
                "+    }",
                "+",
                "+    /**",
                "+     * If asynchronous processing was requested, query the monitor URI.",
                "+     *",
                "+     * @return the last Response received from the Batch service",
                "+     */",
                "+    public Response poll() {",
                "+        if (monitor != null) {",
                "+            response = WebClient.create(monitor).",
                "+                    header(HttpHeaders.AUTHORIZATION, \"Bearer \" + jwt).",
                "+                    type(RESTHeaders.multipartMixedWith(boundary.substring(2))).get();",
                "+        }",
                "+",
                "+        return response;",
                "+    }",
                "+",
                "+    /**",
                "+     * Parses the latest Response received into a list of {@link BatchResponseItem}s.",
                "+     *",
                "+     * @return the Batch Response parsed as list of {@link BatchResponseItem}s",
                "+     * @throws IOException if there are issues when reading the response body",
                "+     */",
                "+    public List<BatchResponseItem> getItems() throws IOException {",
                "+        String body = IOUtils.toString((InputStream) response.getEntity(), StandardCharsets.UTF_8.name());",
                "+        LOG.debug(\"Batch response body:\\n{}\", body);",
                "+",
                "+        return BatchPayloadParser.parse(",
                "+                new ByteArrayInputStream(body.getBytes()),",
                "+                response.getMediaType(),",
                "+                new BatchResponseItem());",
                "+    }",
                "+}",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java b/common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java",
                "index 517e775453..b8a7ee4caf 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java",
                "@@ -23,3 +23,2 @@ import java.util.Set;",
                " import java.util.regex.Pattern;",
                "-import javax.ws.rs.core.MediaType;",
                "@@ -66,5 +65,5 @@ public final class SyncopeConstants {",
                "-    public static final String APPLICATION_YAML = \"application/yaml\";",
                "+    public static final String DOUBLE_DASH = \"--\";",
                "-    public static final MediaType APPLICATION_YAML_TYPE = new MediaType(\"application\", \"yaml\");",
                "+    public static final String CRLF = \"\\r\\n\";",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/Preference.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/Preference.java",
                "index 8d21e549a4..a2e6fb2356 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/Preference.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/Preference.java",
                "@@ -30,3 +30,4 @@ public enum Preference {",
                "     RETURN_CONTENT(\"return-content\"),",
                "-    RETURN_NO_CONTENT(\"return-no-content\");",
                "+    RETURN_NO_CONTENT(\"return-no-content\"),",
                "+    RESPOND_ASYNC(\"respond-async\");",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java",
                "index 40cd8ba989..f99331767a 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api;",
                "+import javax.ws.rs.core.MediaType;",
                "+",
                " /**",
                "@@ -53,5 +55,3 @@ public final class RESTHeaders {",
                "     /**",
                "-     * Mediatype for PNG images, not defined in <tt>javax.ws.rs.core.MediaType</tt>.",
                "-     *",
                "-     * @see javax.ws.rs.core.MediaType",
                "+     * Mediatype for PNG images, not defined in {@link javax.ws.rs.core.MediaType}.",
                "      */",
                "@@ -59,2 +59,32 @@ public final class RESTHeaders {",
                "+    /**",
                "+     * Mediatype for YAML, not defined in {@link javax.ws.rs.core.MediaType}.",
                "+     */",
                "+    public static final String APPLICATION_YAML = \"application/yaml\";",
                "+",
                "+    /**",
                "+     * Mediatype for YAML, not defined in {@link javax.ws.rs.core.MediaType}.",
                "+     */",
                "+    public static final MediaType APPLICATION_YAML_TYPE = new MediaType(\"application\", \"yaml\");",
                "+",
                "+    /**",
                "+     * Mediatype for multipart/mixed, not defined in {@link javax.ws.rs.core.MediaType}.",
                "+     */",
                "+    public static final String MULTIPART_MIXED = \"multipart/mixed\";",
                "+",
                "+    /**",
                "+     * The boundary parameter name for multipart, not defined in {@link javax.ws.rs.core.MediaType}.",
                "+     */",
                "+    public static final String BOUNDARY_PARAMETER = \"boundary\";",
                "+",
                "+    /**",
                "+     * Builds Content-Type string for multipart/mixed and the given boundary.",
                "+     * ",
                "+     * @param boundary multipart boundary value",
                "+     * @return multipart/mixed Content-Type string, with given boundary",
                "+     */",
                "+    public static String multipartMixedWith(final String boundary) {",
                "+        return MULTIPART_MIXED + \";\" + BOUNDARY_PARAMETER + \"=\" + boundary;",
                "+    }",
                "+",
                "     /**",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchItem.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchItem.java",
                "new file mode 100644",
                "index 0000000000..561ac6a5be",
                "--- /dev/null",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchItem.java",
                "@@ -0,0 +1,57 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements. See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership. The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License. You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied. See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.rest.api.batch;",
                "+",
                "+import java.io.Serializable;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.TreeMap;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "+import org.apache.commons.lang3.builder.ToStringStyle;",
                "+",
                "+public abstract class BatchItem implements Serializable {",
                "+",
                "+    private static final long serialVersionUID = -1393976266651766259L;",
                "+",
                "+    private final Map<String, List<Object>> headers = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);",
                "+",
                "+    private String content;",
                "+",
                "+    public Map<String, List<Object>> getHeaders() {",
                "+        return headers;",
                "+    }",
                "+",
                "+    public void setHeaders(final Map<String, List<Object>> headers) {",
                "+        this.headers.clear();",
                "+        this.headers.putAll(headers);",
                "+    }",
                "+",
                "+    public String getContent() {",
                "+        return content;",
                "+    }",
                "+",
                "+    public void setContent(final String content) {",
                "+        this.content = content;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);",
                "+    }",
                "+}",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadGenerator.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadGenerator.java",
                "new file mode 100644",
                "index 0000000000..18d5f64c5e",
                "--- /dev/null",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadGenerator.java",
                "@@ -0,0 +1,78 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements. See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership. The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License. You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied. See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.rest.api.batch;",
                "+",
                "+import java.util.List;",
                "+import javax.ws.rs.core.HttpHeaders;",
                "+import javax.ws.rs.core.Response;",
                "+import org.apache.syncope.common.lib.SyncopeConstants;",
                "+",
                "+public final class BatchPayloadGenerator {",
                "+",
                "+    private static final String HTTP_1_1 = \"HTTP/1.1\";",
                "+",
                "+    public static <T extends BatchItem> String generate(final List<T> items, final String boundary) {",
                "+        StringBuilder payload = new StringBuilder();",
                "+",
                "+        items.forEach(item -> {",
                "+            payload.append(boundary).append(SyncopeConstants.CRLF);",
                "+            payload.append(HttpHeaders.CONTENT_TYPE).append(\": \").append(\"application/http\").append('\\n');",
                "+            payload.append(\"Content-Transfer-Encoding: binary\").append('\\n');",
                "+            payload.append(SyncopeConstants.CRLF);",
                "+",
                "+            if (item instanceof BatchRequestItem) {",
                "+                BatchRequestItem bri = BatchRequestItem.class.cast(item);",
                "+                payload.append(bri.getMethod()).append(' ').append(bri.getRequestURI());",
                "+                if (bri.getQueryString() != null) {",
                "+                    payload.append('?').append(bri.getQueryString());",
                "+                }",
                "+                payload.append(' ').append(HTTP_1_1).append('\\n');",
                "+            }",
                "+",
                "+            if (item instanceof BatchResponseItem) {",
                "+                BatchResponseItem bri = BatchResponseItem.class.cast(item);",
                "+                payload.append(HTTP_1_1).append(' ').",
                "+                        append(bri.getStatus()).append(' ').",
                "+                        append(Response.Status.fromStatusCode(bri.getStatus()).getReasonPhrase()).",
                "+                        append('\\n');",
                "+            }",
                "+",
                "+            if (item.getHeaders() != null && !item.getHeaders().isEmpty()) {",
                "+                item.getHeaders().forEach((key, values) -> {",
                "+                    values.forEach(value -> {",
                "+                        payload.append(key).append(\": \").append(value).append('\\n');",
                "+                    });",
                "+                });",
                "+                payload.append(SyncopeConstants.CRLF);",
                "+            }",
                "+",
                "+            if (item.getContent() != null) {",
                "+                payload.append(item.getContent()).append('\\n');",
                "+            }",
                "+        });",
                "+",
                "+        payload.append(boundary).append(SyncopeConstants.DOUBLE_DASH).append('\\n');",
                "+",
                "+        return payload.toString();",
                "+    }",
                "+",
                "+    private BatchPayloadGenerator() {",
                "+        // private constructor for static utility class",
                "+    }",
                "+}",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadLine.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadLine.java",
                "new file mode 100644",
                "index 0000000000..aa2cf41908",
                "--- /dev/null",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadLine.java",
                "@@ -0,0 +1,53 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.rest.api.batch;",
                "+",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+",
                "+public class BatchPayloadLine {",
                "+",
                "+    private final int lineNumber;",
                "+",
                "+    private final String content;",
                "+",
                "+    public BatchPayloadLine(final String content, final int lineNumber) {",
                "+        this.content = content;",
                "+        this.lineNumber = lineNumber;",
                "+    }",
                "+",
                "+    public int getLineNumber() {",
                "+        return lineNumber;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return content;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        return EqualsBuilder.reflectionEquals(this, obj);",
                "+    }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return HashCodeBuilder.reflectionHashCode(this);",
                "+    }",
                "+}",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadLineReader.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadLineReader.java",
                "new file mode 100644",
                "index 0000000000..b4a4d9f150",
                "--- /dev/null",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadLineReader.java",
                "@@ -0,0 +1,193 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements. See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership. The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License. You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied. See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.rest.api.batch;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.nio.ByteBuffer;",
                "+import java.nio.charset.Charset;",
                "+import java.nio.charset.StandardCharsets;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import javax.ws.rs.core.HttpHeaders;",
                "+import javax.ws.rs.core.MediaType;",
                "+import org.apache.syncope.common.lib.SyncopeConstants;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "+",
                "+public class BatchPayloadLineReader implements AutoCloseable {",
                "+",
                "+    private static final byte CR = '\\r';",
                "+",
                "+    private static final byte LF = '\\n';",
                "+",
                "+    private static final int EOF = -1;",
                "+",
                "+    private static final int BUFFER_SIZE = 8192;",
                "+",
                "+    private static final Charset DEFAULT_CHARSET = StandardCharsets.UTF_8;",
                "+",
                "+    private final ReadState readState = new ReadState();",
                "+",
                "+    private final InputStream in;",
                "+",
                "+    private final MediaType multipartMixed;",
                "+",
                "+    private final byte[] buffer = new byte[BUFFER_SIZE];",
                "+",
                "+    private Charset currentCharset = DEFAULT_CHARSET;",
                "+",
                "+    private String currentBoundary = null;",
                "+",
                "+    private int offset = 0;",
                "+",
                "+    private int limit = 0;",
                "+",
                "+    public BatchPayloadLineReader(final InputStream in, final MediaType multipartMixed) {",
                "+        this.in = in;",
                "+        this.multipartMixed = multipartMixed;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void close() throws IOException {",
                "+        in.close();",
                "+    }",
                "+",
                "+    private boolean isBoundary(final String currentLine) {",
                "+        return (currentBoundary + SyncopeConstants.CRLF).equals(currentLine)",
                "+                || (currentBoundary + SyncopeConstants.DOUBLE_DASH + SyncopeConstants.CRLF).equals(currentLine);",
                "+    }",
                "+",
                "+    private int fillBuffer() throws IOException {",
                "+        limit = in.read(buffer, 0, buffer.length);",
                "+        offset = 0;",
                "+",
                "+        return limit;",
                "+    }",
                "+",
                "+    private String readLine() throws IOException {",
                "+        if (limit == EOF) {",
                "+            return null;",
                "+        }",
                "+",
                "+        ByteBuffer innerBuffer = ByteBuffer.allocate(BUFFER_SIZE);",
                "+        // EOF will be considered as line ending",
                "+        boolean foundLineEnd = false;",
                "+",
                "+        while (!foundLineEnd) {",
                "+            // Is buffer refill required?",
                "+            if (limit == offset && fillBuffer() == EOF) {",
                "+                foundLineEnd = true;",
                "+            }",
                "+",
                "+            if (!foundLineEnd) {",
                "+                byte currentChar = buffer[offset++];",
                "+                if (!innerBuffer.hasRemaining()) {",
                "+                    innerBuffer.flip();",
                "+                    ByteBuffer tmp = ByteBuffer.allocate(innerBuffer.limit() * 2);",
                "+                    tmp.put(innerBuffer);",
                "+                    innerBuffer = tmp;",
                "+                }",
                "+                innerBuffer.put(currentChar);",
                "+",
                "+                if (currentChar == LF) {",
                "+                    foundLineEnd = true;",
                "+                } else if (currentChar == CR) {",
                "+                    foundLineEnd = true;",
                "+",
                "+                    // Check next byte. Consume \\n if available",
                "+                    // Is buffer refill required?",
                "+                    if (limit == offset) {",
                "+                        fillBuffer();",
                "+                    }",
                "+",
                "+                    // Check if there is at least one character",
                "+                    if (limit != EOF && buffer[offset] == LF) {",
                "+                        innerBuffer.put(LF);",
                "+                        offset++;",
                "+                    }",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        if (innerBuffer.position() == 0) {",
                "+            return null;",
                "+        } else {",
                "+            String currentLine = new String(innerBuffer.array(), 0, innerBuffer.position(),",
                "+                    readState.isReadBody() ? currentCharset : DEFAULT_CHARSET);",
                "+",
                "+            if (currentLine.startsWith(HttpHeaders.CONTENT_TYPE)) {",
                "+                String charsetString = multipartMixed.getParameters().get(MediaType.CHARSET_PARAMETER);",
                "+                currentCharset = charsetString == null",
                "+                        ? DEFAULT_CHARSET",
                "+                        : Charset.forName(charsetString);",
                "+",
                "+                currentBoundary = SyncopeConstants.DOUBLE_DASH + multipartMixed.getParameters().",
                "+                        get(RESTHeaders.BOUNDARY_PARAMETER);",
                "+            } else if (SyncopeConstants.CRLF.equals(currentLine)) {",
                "+                readState.foundLinebreak();",
                "+            } else if (isBoundary(currentLine)) {",
                "+                readState.foundBoundary();",
                "+            }",
                "+",
                "+            return currentLine;",
                "+        }",
                "+    }",
                "+",
                "+    public List<BatchPayloadLine> read() throws IOException {",
                "+        List<BatchPayloadLine> result = new ArrayList<>();",
                "+",
                "+        String currentLine = readLine();",
                "+        if (currentLine != null) {",
                "+            currentBoundary = currentLine.trim();",
                "+            int counter = 1;",
                "+            result.add(new BatchPayloadLine(currentLine, counter++));",
                "+",
                "+            while ((currentLine = readLine()) != null) {",
                "+                result.add(new BatchPayloadLine(currentLine, counter++));",
                "+            }",
                "+        }",
                "+",
                "+        return result;",
                "+    }",
                "+",
                "+    /**",
                "+     * Read state indicator (whether currently the {@code body} or {@code header} part is read).",
                "+     */",
                "+    private static class ReadState {",
                "+",
                "+        private int state = 0;",
                "+",
                "+        public void foundLinebreak() {",
                "+            state++;",
                "+        }",
                "+",
                "+        public void foundBoundary() {",
                "+            state = 0;",
                "+        }",
                "+",
                "+        public boolean isReadBody() {",
                "+            return state >= 2;",
                "+        }",
                "+",
                "+        @Override",
                "+        public String toString() {",
                "+            return String.valueOf(state);",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadParser.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadParser.java",
                "new file mode 100644",
                "index 0000000000..a558db1d28",
                "--- /dev/null",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadParser.java",
                "@@ -0,0 +1,208 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.rest.api.batch;",
                "+",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.util.ArrayList;",
                "+import java.util.HashMap;",
                "+import java.util.Iterator;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "+import java.util.stream.Collectors;",
                "+import java.util.stream.Stream;",
                "+import javax.ws.rs.HttpMethod;",
                "+import javax.ws.rs.core.MediaType;",
                "+import org.apache.commons.lang3.ArrayUtils;",
                "+import org.apache.commons.lang3.SerializationUtils;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+public final class BatchPayloadParser {",
                "+",
                "+    private static final Logger LOG = LoggerFactory.getLogger(BatchPayloadParser.class);",
                "+",
                "+    private static final Pattern PATTERN_LAST_CRLF = Pattern.compile(\"(.*)\\\\r\\\\n\\\\s*\", Pattern.DOTALL);",
                "+",
                "+    private static final Pattern PATTERN_HEADER_LINE = Pattern.compile(\"((?:\\\\w|[!#$%\\\\&'*+\\\\-.^`|~])+):\\\\s?(.*)\\\\s*\");",
                "+",
                "+    private static final Pattern PATTERN_BLANK_LINE = Pattern.compile(\"\\\\s*\\r?\\n\\\\s*\");",
                "+",
                "+    private static final String[] HTTP_METHODS = {",
                "+        HttpMethod.DELETE,",
                "+        HttpMethod.PATCH,",
                "+        HttpMethod.POST,",
                "+        HttpMethod.PUT",
                "+    };",
                "+",
                "+    private static BatchPayloadLine removeEndingCRLF(final BatchPayloadLine line) {",
                "+        Matcher matcher = PATTERN_LAST_CRLF.matcher(line.toString());",
                "+        return matcher.matches()",
                "+                ? new BatchPayloadLine(matcher.group(1), line.getLineNumber())",
                "+                : line;",
                "+    }",
                "+",
                "+    private static void removeEndingCRLFFromList(final List<BatchPayloadLine> lines) {",
                "+        if (!lines.isEmpty()) {",
                "+            BatchPayloadLine lastLine = lines.remove(lines.size() - 1);",
                "+            lines.add(removeEndingCRLF(lastLine));",
                "+        }",
                "+    }",
                "+",
                "+    private static List<List<BatchPayloadLine>> split(final List<BatchPayloadLine> lines, final String boundary) {",
                "+        List<List<BatchPayloadLine>> messageParts = new ArrayList<>();",
                "+        List<BatchPayloadLine> currentPart = new ArrayList<>();",
                "+        boolean isEndReached = false;",
                "+",
                "+        String quotedBoundary = Pattern.quote(boundary);",
                "+        Pattern boundaryDelimiterPattern = Pattern.compile(\"--\" + quotedBoundary + \"--\\\\s*\");",
                "+        Pattern boundaryPattern = Pattern.compile(\"--\" + quotedBoundary + \"\\\\s*\");",
                "+",
                "+        for (BatchPayloadLine line : lines) {",
                "+            if (boundaryDelimiterPattern.matcher(line.toString()).matches()) {",
                "+                removeEndingCRLFFromList(currentPart);",
                "+                messageParts.add(currentPart);",
                "+                isEndReached = true;",
                "+            } else if (boundaryPattern.matcher(line.toString()).matches()) {",
                "+                removeEndingCRLFFromList(currentPart);",
                "+                messageParts.add(currentPart);",
                "+                currentPart = new ArrayList<>();",
                "+            } else {",
                "+                currentPart.add(line);",
                "+            }",
                "+",
                "+            if (isEndReached) {",
                "+                break;",
                "+            }",
                "+        }",
                "+",
                "+        // Remove preamble",
                "+        if (!messageParts.isEmpty()) {",
                "+            messageParts.remove(0);",
                "+        }",
                "+",
                "+        if (!isEndReached) {",
                "+            int lineNumber = lines.isEmpty() ? 0 : lines.get(0).getLineNumber();",
                "+            throw new IllegalArgumentException(\"Missing close boundary delimiter around line \" + lineNumber);",
                "+        }",
                "+",
                "+        return messageParts;",
                "+    }",
                "+",
                "+    private static void consumeHeaders(final List<BatchPayloadLine> bodyPart, final BatchItem item) {",
                "+        Map<String, List<Object>> headers = new HashMap<>();",
                "+",
                "+        boolean isHeader = true;",
                "+        for (Iterator<BatchPayloadLine> itor = bodyPart.iterator(); itor.hasNext() && isHeader;) {",
                "+            BatchPayloadLine currentLine = itor.next();",
                "+",
                "+            Matcher headerMatcher = PATTERN_HEADER_LINE.matcher(currentLine.toString());",
                "+            if (headerMatcher.matches() && headerMatcher.groupCount() == 2) {",
                "+                itor.remove();",
                "+            } else {",
                "+                isHeader = false;",
                "+            }",
                "+        }",
                "+        consumeBlankLine(bodyPart);",
                "+",
                "+        isHeader = true;",
                "+        for (Iterator<BatchPayloadLine> itor = bodyPart.iterator(); itor.hasNext() && isHeader;) {",
                "+            BatchPayloadLine currentLine = itor.next();",
                "+",
                "+            if (currentLine.toString().contains(\"HTTP/1.1\")) {",
                "+                itor.remove();",
                "+",
                "+                if (ArrayUtils.contains(HTTP_METHODS, StringUtils.substringBefore(currentLine.toString(), \" \"))",
                "+                        && item instanceof BatchRequestItem) {",
                "+",
                "+                    BatchRequestItem bri = BatchRequestItem.class.cast(item);",
                "+                    String[] parts = currentLine.toString().split(\" \");",
                "+                    bri.setMethod(parts[0]);",
                "+                    String[] target = parts[1].split(\"\\\\?\");",
                "+                    bri.setRequestURI(target[0]);",
                "+                    if (target.length > 1) {",
                "+                        bri.setQueryString(target[1]);",
                "+                    }",
                "+                } else if (item instanceof BatchResponseItem) {",
                "+                    BatchResponseItem bri = BatchResponseItem.class.cast(item);",
                "+                    bri.setStatus(Integer.valueOf(StringUtils.substringBefore(",
                "+                            StringUtils.substringAfter(currentLine.toString(), \" \"), \" \").trim()));",
                "+                }",
                "+            } else {",
                "+                Matcher headerMatcher = PATTERN_HEADER_LINE.matcher(currentLine.toString());",
                "+                if (headerMatcher.matches() && headerMatcher.groupCount() == 2) {",
                "+                    itor.remove();",
                "+",
                "+                    String headerName = headerMatcher.group(1).trim();",
                "+                    String headerValue = headerMatcher.group(2).trim();",
                "+",
                "+                    List<Object> header = headers.get(headerName);",
                "+                    if (header == null) {",
                "+                        header = new ArrayList<>();",
                "+                        headers.put(headerName, header);",
                "+                    }",
                "+                    header.addAll(Stream.of(headerValue.split(\",\")).map(String::trim).collect(Collectors.toList()));",
                "+                } else {",
                "+                    isHeader = false;",
                "+                }",
                "+            }",
                "+        }",
                "+        consumeBlankLine(bodyPart);",
                "+",
                "+        item.setHeaders(headers);",
                "+    }",
                "+",
                "+    private static void consumeBlankLine(final List<BatchPayloadLine> bodyPart) {",
                "+        if (!bodyPart.isEmpty() && PATTERN_BLANK_LINE.matcher(bodyPart.get(0).toString()).matches()) {",
                "+            bodyPart.remove(0);",
                "+        }",
                "+    }",
                "+",
                "+    public static <T extends BatchItem> List<T> parse(",
                "+            final InputStream in,",
                "+            final MediaType multipartMixed,",
                "+            final T template) throws IOException {",
                "+",
                "+        List<BatchPayloadLine> lines;",
                "+        try (BatchPayloadLineReader lineReader = new BatchPayloadLineReader(in, multipartMixed)) {",
                "+            lines = lineReader.read();",
                "+        }",
                "+",
                "+        return split(lines, multipartMixed.getParameters().get(RESTHeaders.BOUNDARY_PARAMETER)).stream().",
                "+                map(bodyPart -> {",
                "+                    LOG.debug(\"Body part:\\n{}\", bodyPart);",
                "+",
                "+                    T item = SerializationUtils.clone(template);",
                "+",
                "+                    consumeHeaders(bodyPart, item);",
                "+                    item.setContent(",
                "+                            bodyPart.stream().map(BatchPayloadLine::toString).collect(Collectors.joining()));",
                "+",
                "+                    return item;",
                "+                }).collect(Collectors.toList());",
                "+    }",
                "+",
                "+    private BatchPayloadParser() {",
                "+        // private constructor for static utility class",
                "+    }",
                "+}",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchRequestItem.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchRequestItem.java",
                "new file mode 100644",
                "index 0000000000..834b0fe8d9",
                "--- /dev/null",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchRequestItem.java",
                "@@ -0,0 +1,54 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements. See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership. The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License. You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied. See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.rest.api.batch;",
                "+",
                "+public class BatchRequestItem extends BatchItem {",
                "+",
                "+    private static final long serialVersionUID = -986002485818968262L;",
                "+",
                "+    private String method;",
                "+",
                "+    private String requestURI;",
                "+",
                "+    private String queryString;",
                "+",
                "+    public String getMethod() {",
                "+        return method;",
                "+    }",
                "+",
                "+    public void setMethod(final String method) {",
                "+        this.method = method;",
                "+    }",
                "+",
                "+    public String getRequestURI() {",
                "+        return requestURI;",
                "+    }",
                "+",
                "+    public void setRequestURI(final String requestURI) {",
                "+        this.requestURI = requestURI;",
                "+    }",
                "+",
                "+    public String getQueryString() {",
                "+        return queryString;",
                "+    }",
                "+",
                "+    public void setQueryString(final String queryString) {",
                "+        this.queryString = queryString;",
                "+    }",
                "+}",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchResponseItem.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchResponseItem.java",
                "new file mode 100644",
                "index 0000000000..e989b65712",
                "--- /dev/null",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchResponseItem.java",
                "@@ -0,0 +1,34 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements. See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership. The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License. You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied. See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.rest.api.batch;",
                "+",
                "+public class BatchResponseItem extends BatchItem {",
                "+",
                "+    private static final long serialVersionUID = -2163506313221985565L;",
                "+",
                "+    private int status;",
                "+",
                "+    public int getStatus() {",
                "+        return status;",
                "+    }",
                "+",
                "+    public void setStatus(final int status) {",
                "+        this.status = status;",
                "+    }",
                "+}",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java",
                "index e9ae07b17f..e26b2e8aa0 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java",
                "@@ -37,3 +37,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.AccessTokenTO;",
                "@@ -69,3 +68,3 @@ public interface AccessTokenService extends JAXRSService {",
                "     @Path(\"login\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response login();",
                "@@ -91,3 +90,3 @@ public interface AccessTokenService extends JAXRSService {",
                "     @Path(\"refresh\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response refresh();",
                "@@ -103,3 +102,3 @@ public interface AccessTokenService extends JAXRSService {",
                "     @Path(\"logout\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void logout();",
                "@@ -116,4 +115,4 @@ public interface AccessTokenService extends JAXRSService {",
                "     @GET",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     PagedResult<AccessTokenTO> list(@BeanParam AccessTokenQuery query);",
                "@@ -132,3 +131,3 @@ public interface AccessTokenService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "index e8169b1776..f9b628743e 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "@@ -40,3 +40,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.patch.AnyObjectPatch;",
                "@@ -107,4 +106,4 @@ public interface AnyObjectService extends AnyService<AnyObjectTO> {",
                "     @POST",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull AnyObjectTO anyObjectTO);",
                "@@ -150,4 +149,4 @@ public interface AnyObjectService extends AnyService<AnyObjectTO> {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response update(@NotNull AnyObjectPatch anyObjectPatch);",
                "@@ -193,4 +192,4 @@ public interface AnyObjectService extends AnyService<AnyObjectTO> {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response update(@NotNull AnyObjectTO anyObjectTO);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java",
                "index 73cd69fc18..7bb78d8841 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java",
                "@@ -41,3 +41,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.patch.AssociationPatch;",
                "@@ -70,3 +69,3 @@ public interface AnyService<TO extends AnyTO> extends JAXRSService {",
                "     @Path(\"{key}/{schemaType}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Set<AttrTO> read(@NotNull @PathParam(\"key\") String key, @NotNull @PathParam(\"schemaType\") SchemaType schemaType);",
                "@@ -86,3 +85,3 @@ public interface AnyService<TO extends AnyTO> extends JAXRSService {",
                "     @Path(\"{key}/{schemaType}/{schema}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     AttrTO read(",
                "@@ -100,3 +99,3 @@ public interface AnyService<TO extends AnyTO> extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     TO read(@NotNull @PathParam(\"key\") String key);",
                "@@ -110,3 +109,3 @@ public interface AnyService<TO extends AnyTO> extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     PagedResult<TO> search(@BeanParam AnyQuery anyQuery);",
                "@@ -125,4 +124,4 @@ public interface AnyService<TO extends AnyTO> extends JAXRSService {",
                "     @Path(\"{key}/{schemaType}/{schema}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response update(",
                "@@ -143,3 +142,3 @@ public interface AnyService<TO extends AnyTO> extends JAXRSService {",
                "     @Path(\"{key}/{schemaType}/{schema}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(",
                "@@ -186,3 +185,3 @@ public interface AnyService<TO extends AnyTO> extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response delete(@NotNull @PathParam(\"key\") String key);",
                "@@ -229,4 +228,4 @@ public interface AnyService<TO extends AnyTO> extends JAXRSService {",
                "     @Path(\"{key}/deassociate/{action}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response deassociate(@NotNull DeassociationPatch patch);",
                "@@ -273,4 +272,4 @@ public interface AnyService<TO extends AnyTO> extends JAXRSService {",
                "     @Path(\"{key}/associate/{action}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response associate(@NotNull AssociationPatch patch);",
                "@@ -305,4 +304,4 @@ public interface AnyService<TO extends AnyTO> extends JAXRSService {",
                "     @Path(\"bulk\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response bulk(@NotNull BulkAction bulkAction);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java",
                "index 7752defb01..6b90a1b07c 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java",
                "@@ -42,3 +42,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.AnyTypeClassTO;",
                "@@ -62,3 +61,3 @@ public interface AnyTypeClassService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<AnyTypeClassTO> list();",
                "@@ -73,3 +72,3 @@ public interface AnyTypeClassService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     AnyTypeClassTO read(@NotNull @PathParam(\"key\") String key);",
                "@@ -92,4 +91,4 @@ public interface AnyTypeClassService extends JAXRSService {",
                "     @POST",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull AnyTypeClassTO anyTypeClassTO);",
                "@@ -107,4 +106,4 @@ public interface AnyTypeClassService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull AnyTypeClassTO anyTypeClassTO);",
                "@@ -120,3 +119,3 @@ public interface AnyTypeClassService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java",
                "index 53b8b8725c..e5db5063d1 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java",
                "@@ -42,3 +42,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.AnyTypeTO;",
                "@@ -62,3 +61,3 @@ public interface AnyTypeService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<AnyTypeTO> list();",
                "@@ -73,3 +72,3 @@ public interface AnyTypeService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     AnyTypeTO read(@NotNull @PathParam(\"key\") String key);",
                "@@ -92,3 +91,3 @@ public interface AnyTypeService extends JAXRSService {",
                "     @POST",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull AnyTypeTO anyTypeTO);",
                "@@ -106,3 +105,3 @@ public interface AnyTypeService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull AnyTypeTO anyTypeTO);",
                "@@ -118,3 +117,3 @@ public interface AnyTypeService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ApplicationService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ApplicationService.java",
                "index cec7938116..e8e8b19a82 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ApplicationService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ApplicationService.java",
                "@@ -42,3 +42,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.ApplicationTO;",
                "@@ -63,3 +62,3 @@ public interface ApplicationService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<ApplicationTO> list();",
                "@@ -74,3 +73,3 @@ public interface ApplicationService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     ApplicationTO read(@NotNull @PathParam(\"key\") String key);",
                "@@ -85,3 +84,3 @@ public interface ApplicationService extends JAXRSService {",
                "     @Path(\"privileges/{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     PrivilegeTO readPrivilege(@NotNull @PathParam(\"key\") String key);",
                "@@ -104,4 +103,4 @@ public interface ApplicationService extends JAXRSService {",
                "     @POST",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull ApplicationTO applicationTO);",
                "@@ -119,4 +118,4 @@ public interface ApplicationService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull ApplicationTO applicationTO);",
                "@@ -132,3 +131,3 @@ public interface ApplicationService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java",
                "index e2193aa93e..02871541f0 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java",
                "@@ -39,4 +39,4 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.AttrTO;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "@@ -67,3 +67,3 @@ public interface ConfigurationService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<AttrTO> list();",
                "@@ -78,3 +78,3 @@ public interface ConfigurationService extends JAXRSService {",
                "     @Path(\"{schema}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     AttrTO get(@NotNull @PathParam(\"schema\") String schema);",
                "@@ -92,4 +92,4 @@ public interface ConfigurationService extends JAXRSService {",
                "     @Path(\"{schema}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void set(@NotNull AttrTO value);",
                "@@ -105,3 +105,3 @@ public interface ConfigurationService extends JAXRSService {",
                "     @Path(\"{schema}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"schema\") String schema);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java",
                "index 76d46415a7..c94799f5cf 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java",
                "@@ -34,4 +34,4 @@ import javax.ws.rs.Produces;",
                " import javax.ws.rs.core.MediaType;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "@@ -55,3 +55,3 @@ public interface ConnectorHistoryService extends JAXRSService {",
                "     @Path(\"{connectorKey}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<ConnInstanceHistoryConfTO> list(@NotNull @PathParam(\"connectorKey\") String connectorKey);",
                "@@ -67,3 +67,3 @@ public interface ConnectorHistoryService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void restore(@NotNull @PathParam(\"key\") String key);",
                "@@ -79,3 +79,3 @@ public interface ConnectorHistoryService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java",
                "index cb98215b46..a301e89ded 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java",
                "@@ -44,3 +44,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.ConnBundleTO;",
                "@@ -68,3 +67,3 @@ public interface ConnectorService extends JAXRSService {",
                "     @Path(\"bundles\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<ConnBundleTO> getBundles(@QueryParam(\"lang\") String lang);",
                "@@ -85,4 +84,4 @@ public interface ConnectorService extends JAXRSService {",
                "     @Path(\"{key}/supportedObjectClasses\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<ConnIdObjectClassTO> buildObjectClassInfo(",
                "@@ -101,3 +100,3 @@ public interface ConnectorService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     ConnInstanceTO read(@NotNull @PathParam(\"key\") String key, @QueryParam(\"lang\") String lang);",
                "@@ -114,3 +113,3 @@ public interface ConnectorService extends JAXRSService {",
                "     @Path(\"byResource/{resourceName}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     ConnInstanceTO readByResource(",
                "@@ -126,3 +125,3 @@ public interface ConnectorService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<ConnInstanceTO> list(@QueryParam(\"lang\") String lang);",
                "@@ -145,4 +144,4 @@ public interface ConnectorService extends JAXRSService {",
                "     @POST",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull ConnInstanceTO connInstanceTO);",
                "@@ -160,4 +159,4 @@ public interface ConnectorService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull ConnInstanceTO connInstanceTO);",
                "@@ -173,3 +172,3 @@ public interface ConnectorService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "@@ -185,4 +184,4 @@ public interface ConnectorService extends JAXRSService {",
                "     @Path(\"check\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void check(@NotNull ConnInstanceTO connInstanceTO);",
                "@@ -196,3 +195,3 @@ public interface ConnectorService extends JAXRSService {",
                "     @Path(\"reload\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void reload();",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java",
                "index d879e89a7d..93c717ac6a 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java",
                "@@ -42,3 +42,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.DomainTO;",
                "@@ -62,3 +61,3 @@ public interface DomainService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<DomainTO> list();",
                "@@ -73,3 +72,3 @@ public interface DomainService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     DomainTO read(@NotNull @PathParam(\"key\") String key);",
                "@@ -92,4 +91,4 @@ public interface DomainService extends JAXRSService {",
                "     @POST",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull DomainTO domainTO);",
                "@@ -107,4 +106,4 @@ public interface DomainService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull DomainTO domainTO);",
                "@@ -120,3 +119,3 @@ public interface DomainService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java",
                "index 7ebe9354e6..0de27f7581 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java",
                "@@ -42,3 +42,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.DynRealmTO;",
                "@@ -62,3 +61,3 @@ public interface DynRealmService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<DynRealmTO> list();",
                "@@ -73,3 +72,3 @@ public interface DynRealmService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     DynRealmTO read(@NotNull @PathParam(\"key\") String key);",
                "@@ -92,4 +91,4 @@ public interface DynRealmService extends JAXRSService {",
                "     @POST",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull DynRealmTO dynDynRealmTO);",
                "@@ -107,4 +106,4 @@ public interface DynRealmService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull DynRealmTO dynDynRealmTO);",
                "@@ -120,3 +119,3 @@ public interface DynRealmService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java",
                "index caeb2bf9d6..416bcdca34 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java",
                "@@ -35,3 +35,2 @@ import javax.ws.rs.QueryParam;",
                " import javax.ws.rs.core.MediaType;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.BulkActionResult;",
                "@@ -41,2 +40,3 @@ import org.apache.syncope.common.lib.to.PagedResult;",
                " import org.apache.syncope.common.lib.types.JobAction;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                " import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;",
                "@@ -55,3 +55,3 @@ public interface ExecutableService extends JAXRSService {",
                "     @Path(\"{key}/executions\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     PagedResult<ExecTO> listExecutions(@BeanParam ExecQuery query);",
                "@@ -66,3 +66,3 @@ public interface ExecutableService extends JAXRSService {",
                "     @Path(\"executions/recent\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<ExecTO> listRecentExecutions(@Min(1) @QueryParam(JAXRSService.PARAM_MAX) @DefaultValue(\"25\") int max);",
                "@@ -78,3 +78,3 @@ public interface ExecutableService extends JAXRSService {",
                "     @Path(\"executions/{executionKey}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void deleteExecution(@NotNull @PathParam(\"executionKey\") String executionKey);",
                "@@ -89,3 +89,3 @@ public interface ExecutableService extends JAXRSService {",
                "     @Path(\"{key}/executions\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     BulkActionResult deleteExecutions(@BeanParam BulkExecDeleteQuery query);",
                "@@ -100,3 +100,3 @@ public interface ExecutableService extends JAXRSService {",
                "     @Path(\"{key}/execute\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     ExecTO execute(@BeanParam ExecuteQuery query);",
                "@@ -111,3 +111,3 @@ public interface ExecutableService extends JAXRSService {",
                "     @Path(\"jobs/{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     JobTO getJob(@PathParam(\"key\") String key);",
                "@@ -121,3 +121,3 @@ public interface ExecutableService extends JAXRSService {",
                "     @Path(\"jobs\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<JobTO> listJobs();",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "index 197d5f3b99..8b7d89360e 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "@@ -43,3 +43,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.patch.GroupPatch;",
                "@@ -111,4 +110,4 @@ public interface GroupService extends AnyService<GroupTO> {",
                "     @POST",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull GroupTO groupTO);",
                "@@ -154,4 +153,4 @@ public interface GroupService extends AnyService<GroupTO> {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response update(@NotNull GroupPatch groupPatch);",
                "@@ -197,4 +196,4 @@ public interface GroupService extends AnyService<GroupTO> {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response update(@NotNull GroupTO groupTO);",
                "@@ -208,3 +207,3 @@ public interface GroupService extends AnyService<GroupTO> {",
                "     @Path(\"own\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<GroupTO> own();",
                "@@ -220,3 +219,3 @@ public interface GroupService extends AnyService<GroupTO> {",
                "     @Path(\"{key}/members/{actionType}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     ExecTO bulkMembersAction(",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java",
                "index 42bdd4866b..912b4ab53c 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java",
                "@@ -38,5 +38,5 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.ImplementationTO;",
                " import org.apache.syncope.common.lib.types.ImplementationType;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "@@ -60,3 +60,3 @@ public interface ImplementationService extends JAXRSService {",
                "     @Path(\"{type}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<ImplementationTO> list(@NotNull @PathParam(\"type\") ImplementationType type);",
                "@@ -72,3 +72,3 @@ public interface ImplementationService extends JAXRSService {",
                "     @Path(\"{type}/{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     ImplementationTO read(@NotNull @PathParam(\"type\") ImplementationType type, @NotNull @PathParam(\"key\") String key);",
                "@@ -87,4 +87,4 @@ public interface ImplementationService extends JAXRSService {",
                "     @Path(\"{type}/{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull ImplementationTO implementationTO);",
                "@@ -103,4 +103,4 @@ public interface ImplementationService extends JAXRSService {",
                "     @Path(\"{type}/{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response update(@NotNull ImplementationTO implementationTO);",
                "@@ -116,3 +116,3 @@ public interface ImplementationService extends JAXRSService {",
                "     @Path(\"{type}/{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response delete(@NotNull @PathParam(\"type\") ImplementationType type, @NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "index e3fa626fee..6be90200a4 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "@@ -38,3 +38,2 @@ import javax.ws.rs.Produces;",
                " import javax.ws.rs.core.MediaType;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.log.EventCategoryTO;",
                "@@ -44,2 +43,3 @@ import org.apache.syncope.common.lib.log.LoggerTO;",
                " import org.apache.syncope.common.lib.types.LoggerType;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "@@ -62,3 +62,3 @@ public interface LoggerService extends JAXRSService {",
                "     @Path(\"memoryAppenders\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<LogAppender> memoryAppenders();",
                "@@ -73,3 +73,3 @@ public interface LoggerService extends JAXRSService {",
                "     @Path(\"memoryAppenders/{memoryAppender}/lastLogStatements\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<LogStatementTO> getLastLogStatements(@NotNull @PathParam(\"memoryAppender\") String memoryAppender);",
                "@@ -83,3 +83,3 @@ public interface LoggerService extends JAXRSService {",
                "     @Path(\"events\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<EventCategoryTO> events();",
                "@@ -95,3 +95,3 @@ public interface LoggerService extends JAXRSService {",
                "     @Path(\"{type}/{name}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     LoggerTO read(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") final String name);",
                "@@ -106,3 +106,3 @@ public interface LoggerService extends JAXRSService {",
                "     @Path(\"{type}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<LoggerTO> list(@NotNull @PathParam(\"type\") LoggerType type);",
                "@@ -121,4 +121,4 @@ public interface LoggerService extends JAXRSService {",
                "     @Path(\"{type}/{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull @PathParam(\"type\") LoggerType type, @NotNull LoggerTO logger);",
                "@@ -135,3 +135,3 @@ public interface LoggerService extends JAXRSService {",
                "     @Path(\"{type}/{name}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") String name);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java",
                "index 4a8795a634..2757fe405b 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java",
                "@@ -41,3 +41,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.MailTemplateTO;",
                "@@ -62,3 +61,3 @@ public interface MailTemplateService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<MailTemplateTO> list();",
                "@@ -81,4 +80,4 @@ public interface MailTemplateService extends JAXRSService {",
                "     @POST",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull MailTemplateTO mailTemplateTO);",
                "@@ -93,3 +92,3 @@ public interface MailTemplateService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     MailTemplateTO read(@NotNull @PathParam(\"key\") String key);",
                "@@ -105,3 +104,3 @@ public interface MailTemplateService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "@@ -132,3 +131,3 @@ public interface MailTemplateService extends JAXRSService {",
                "     @Path(\"{key}/{format}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void setFormat(",
                "@@ -148,3 +147,3 @@ public interface MailTemplateService extends JAXRSService {",
                "     @Path(\"{key}/{format}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void removeFormat(",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java",
                "index d7d94f2c4c..06fc7a4ec1 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java",
                "@@ -43,3 +43,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.JobTO;",
                "@@ -67,3 +66,3 @@ public interface NotificationService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     NotificationTO read(@NotNull @PathParam(\"key\") String key);",
                "@@ -76,3 +75,3 @@ public interface NotificationService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<NotificationTO> list();",
                "@@ -95,4 +94,4 @@ public interface NotificationService extends JAXRSService {",
                "     @POST",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull NotificationTO notificationTO);",
                "@@ -110,4 +109,4 @@ public interface NotificationService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull NotificationTO notificationTO);",
                "@@ -123,3 +122,3 @@ public interface NotificationService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "@@ -133,3 +132,3 @@ public interface NotificationService extends JAXRSService {",
                "     @Path(\"job\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     JobTO getJob();",
                "@@ -145,3 +144,3 @@ public interface NotificationService extends JAXRSService {",
                "     @Path(\"job\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void actionJob(@QueryParam(\"action\") JobAction action);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java",
                "index 374c9fc1e4..3fbb4ad149 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java",
                "@@ -42,3 +42,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.policy.PolicyTO;",
                "@@ -67,3 +66,3 @@ public interface PolicyService extends JAXRSService {",
                "     @Path(\"{type}/{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     <T extends PolicyTO> T read(@NotNull @PathParam(\"type\") PolicyType type, @NotNull @PathParam(\"key\") String key);",
                "@@ -79,3 +78,3 @@ public interface PolicyService extends JAXRSService {",
                "     @Path(\"{type}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     <T extends PolicyTO> List<T> list(@NotNull @PathParam(\"type\") PolicyType type);",
                "@@ -100,4 +99,4 @@ public interface PolicyService extends JAXRSService {",
                "     @Path(\"{type}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull @PathParam(\"type\") PolicyType type, @NotNull PolicyTO policyTO);",
                "@@ -116,4 +115,4 @@ public interface PolicyService extends JAXRSService {",
                "     @Path(\"{type}/{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull @PathParam(\"type\") PolicyType type, @NotNull PolicyTO policyTO);",
                "@@ -130,3 +129,3 @@ public interface PolicyService extends JAXRSService {",
                "     @Path(\"{type}/{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"type\") PolicyType type, @NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java",
                "index ddc6242205..c7617a965a 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java",
                "@@ -43,3 +43,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.ProvisioningResult;",
                "@@ -64,3 +63,3 @@ public interface RealmService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<RealmTO> list();",
                "@@ -75,3 +74,3 @@ public interface RealmService extends JAXRSService {",
                "     @Path(\"{fullPath:.*}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<RealmTO> list(@NotNull @PathParam(\"fullPath\") String fullPath);",
                "@@ -114,4 +113,4 @@ public interface RealmService extends JAXRSService {",
                "     @Path(\"{parentPath:.*}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull @PathParam(\"parentPath\") String parentPath, @NotNull RealmTO realmTO);",
                "@@ -149,4 +148,4 @@ public interface RealmService extends JAXRSService {",
                "     @Path(\"{fullPath:.*}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response update(@NotNull RealmTO realmTO);",
                "@@ -182,3 +181,3 @@ public interface RealmService extends JAXRSService {",
                "     @Path(\"{fullPath:.*}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response delete(@NotNull @PathParam(\"fullPath\") String fullPath);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReconciliationService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReconciliationService.java",
                "index b971a3ec16..68e4179f86 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReconciliationService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReconciliationService.java",
                "@@ -33,3 +33,2 @@ import javax.ws.rs.QueryParam;",
                " import javax.ws.rs.core.MediaType;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.PullTaskTO;",
                "@@ -38,2 +37,3 @@ import org.apache.syncope.common.lib.to.ReconStatus;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "@@ -60,3 +60,3 @@ public interface ReconciliationService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     ReconStatus status(",
                "@@ -79,4 +79,4 @@ public interface ReconciliationService extends JAXRSService {",
                "     @Path(\"push\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void push(",
                "@@ -100,4 +100,4 @@ public interface ReconciliationService extends JAXRSService {",
                "     @Path(\"pull\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void pull(",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java",
                "index bc43a0bf18..245d6a360a 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java",
                "@@ -42,3 +42,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.RelationshipTypeTO;",
                "@@ -62,3 +61,3 @@ public interface RelationshipTypeService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<RelationshipTypeTO> list();",
                "@@ -73,3 +72,3 @@ public interface RelationshipTypeService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     RelationshipTypeTO read(@NotNull @PathParam(\"key\") String key);",
                "@@ -92,4 +91,4 @@ public interface RelationshipTypeService extends JAXRSService {",
                "     @POST",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull RelationshipTypeTO relationshipTypeTO);",
                "@@ -107,4 +106,4 @@ public interface RelationshipTypeService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull RelationshipTypeTO relationshipTypeTO);",
                "@@ -120,3 +119,3 @@ public interface RelationshipTypeService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RemediationService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RemediationService.java",
                "index 09d2b228e1..2e1fe92a08 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RemediationService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RemediationService.java",
                "@@ -43,3 +43,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.patch.AnyPatch;",
                "@@ -69,3 +68,3 @@ public interface RemediationService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     PagedResult<RemediationTO> list(@BeanParam RemediationQuery query);",
                "@@ -80,3 +79,3 @@ public interface RemediationService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     RemediationTO read(@NotNull @PathParam(\"key\") String key);",
                "@@ -91,3 +90,3 @@ public interface RemediationService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response delete(@NotNull @PathParam(\"key\") String key);",
                "@@ -132,4 +131,4 @@ public interface RemediationService extends JAXRSService {",
                "     @Path(\"{remediationKey}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response remedy(@NotNull @PathParam(\"remediationKey\") String remediationKey, @NotNull AnyTO anyTO);",
                "@@ -176,4 +175,4 @@ public interface RemediationService extends JAXRSService {",
                "     @Path(\"{remediationKey}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response remedy(@NotNull @PathParam(\"remediationKey\") String remediationKey, @NotNull AnyPatch anyPatch);",
                "@@ -218,3 +217,3 @@ public interface RemediationService extends JAXRSService {",
                "     @Path(\"{remediationKey}/{anyKey}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response remedy(",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java",
                "index ae0b7fe2fd..9f1bf29665 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java",
                "@@ -43,3 +43,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.ReportTO;",
                "@@ -66,3 +65,3 @@ public interface ReportService extends ExecutableService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     ReportTO read(@NotNull @PathParam(\"key\") String key);",
                "@@ -75,3 +74,3 @@ public interface ReportService extends ExecutableService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<ReportTO> list();",
                "@@ -94,4 +93,4 @@ public interface ReportService extends ExecutableService {",
                "     @POST",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull ReportTO reportTO);",
                "@@ -109,4 +108,4 @@ public interface ReportService extends ExecutableService {",
                "     @Path(\"{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull ReportTO reportTO);",
                "@@ -122,3 +121,3 @@ public interface ReportService extends ExecutableService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "@@ -134,3 +133,3 @@ public interface ReportService extends ExecutableService {",
                "     @Path(\"executions/{executionKey}/stream\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response exportExecutionResult(",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java",
                "index 1188e279f7..37474e9fc2 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java",
                "@@ -41,3 +41,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.ReportTemplateTO;",
                "@@ -62,3 +61,3 @@ public interface ReportTemplateService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<ReportTemplateTO> list();",
                "@@ -81,3 +80,3 @@ public interface ReportTemplateService extends JAXRSService {",
                "     @POST",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull ReportTemplateTO reportTemplateTO);",
                "@@ -92,3 +91,3 @@ public interface ReportTemplateService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     ReportTemplateTO read(@NotNull @PathParam(\"key\") String key);",
                "@@ -104,3 +103,3 @@ public interface ReportTemplateService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java",
                "index fed99ed234..1024f6ef03 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java",
                "@@ -34,4 +34,4 @@ import javax.ws.rs.Produces;",
                " import javax.ws.rs.core.MediaType;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "@@ -55,3 +55,3 @@ public interface ResourceHistoryService extends JAXRSService {",
                "     @Path(\"{resourceKey}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<ResourceHistoryConfTO> list(@NotNull @PathParam(\"resourceKey\") String resourceKey);",
                "@@ -67,3 +67,3 @@ public interface ResourceHistoryService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void restore(@NotNull @PathParam(\"key\") String key);",
                "@@ -79,3 +79,3 @@ public interface ResourceHistoryService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java",
                "index a72ba13b6c..6aaa3a82a8 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java",
                "@@ -43,3 +43,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.patch.ResourceDeassociationPatch;",
                "@@ -73,3 +72,3 @@ public interface ResourceService extends JAXRSService {",
                "     @Path(\"{key}/{anyTypeKey}/{anyKey}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     ConnObjectTO readConnObject(",
                "@@ -90,3 +89,3 @@ public interface ResourceService extends JAXRSService {",
                "     @Path(\"{key}/{anyTypeKey}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     PagedConnObjectTOResult listConnObjects(",
                "@@ -104,3 +103,3 @@ public interface ResourceService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     ResourceTO read(@NotNull @PathParam(\"key\") String key);",
                "@@ -113,3 +112,3 @@ public interface ResourceService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<ResourceTO> list();",
                "@@ -132,4 +131,4 @@ public interface ResourceService extends JAXRSService {",
                "     @POST",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull ResourceTO resourceTO);",
                "@@ -147,4 +146,4 @@ public interface ResourceService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull ResourceTO resourceTO);",
                "@@ -162,3 +161,3 @@ public interface ResourceService extends JAXRSService {",
                "     @Path(\"{key}/{anyTypeKey}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void setLatestSyncToken(",
                "@@ -177,3 +176,3 @@ public interface ResourceService extends JAXRSService {",
                "     @Path(\"{key}/{anyTypeKey}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void removeSyncToken(",
                "@@ -191,4 +190,4 @@ public interface ResourceService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "@@ -204,4 +203,4 @@ public interface ResourceService extends JAXRSService {",
                "     @Path(\"check\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void check(@NotNull ResourceTO resourceTO);",
                "@@ -222,4 +221,4 @@ public interface ResourceService extends JAXRSService {",
                "     @Path(\"{key}/bulkDeassociation/{anyTypeKey}/{action}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     BulkActionResult bulkDeassociation(@NotNull ResourceDeassociationPatch patch);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java",
                "index 1ce31016ca..4db8fb79d4 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java",
                "@@ -43,3 +43,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.RoleTO;",
                "@@ -63,3 +62,3 @@ public interface RoleService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<RoleTO> list();",
                "@@ -74,3 +73,3 @@ public interface RoleService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     RoleTO read(@NotNull @PathParam(\"key\") String key);",
                "@@ -93,4 +92,4 @@ public interface RoleService extends JAXRSService {",
                "     @POST",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull RoleTO roleTO);",
                "@@ -108,4 +107,4 @@ public interface RoleService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull RoleTO roleTO);",
                "@@ -121,3 +120,3 @@ public interface RoleService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "@@ -146,3 +145,3 @@ public interface RoleService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_JSON })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void setConsoleLayoutInfo(@NotNull @PathParam(\"key\") String key, InputStream consoleLayoutInfoIn);",
                "@@ -158,3 +157,3 @@ public interface RoleService extends JAXRSService {",
                "     @Path(\"{key}/consoleLayout\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void removeConsoleLayoutInfo(@NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java",
                "index 14e28bfb26..96995200e2 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java",
                "@@ -43,3 +43,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.SchemaTO;",
                "@@ -69,3 +68,3 @@ public interface SchemaService extends JAXRSService {",
                "     @Path(\"{type}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     <T extends SchemaTO> List<T> search(@BeanParam SchemaQuery query);",
                "@@ -82,3 +81,3 @@ public interface SchemaService extends JAXRSService {",
                "     @Path(\"{type}/{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     <T extends SchemaTO> T read(",
                "@@ -104,4 +103,4 @@ public interface SchemaService extends JAXRSService {",
                "     @Path(\"{type}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull @PathParam(\"type\") SchemaType type, @NotNull SchemaTO schemaTO);",
                "@@ -120,4 +119,4 @@ public interface SchemaService extends JAXRSService {",
                "     @Path(\"{type}/{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull @PathParam(\"type\") SchemaType type, @NotNull SchemaTO schemaTO);",
                "@@ -134,3 +133,3 @@ public interface SchemaService extends JAXRSService {",
                "     @Path(\"{type}/{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"type\") SchemaType type, @NotNull @PathParam(\"key\") String key);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java",
                "index b9df752dd7..3eb45a4e60 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java",
                "@@ -42,3 +42,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.SecurityQuestionTO;",
                "@@ -62,3 +61,3 @@ public interface SecurityQuestionService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<SecurityQuestionTO> list();",
                "@@ -73,3 +72,3 @@ public interface SecurityQuestionService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     SecurityQuestionTO read(@NotNull @PathParam(\"key\") String key);",
                "@@ -92,4 +91,4 @@ public interface SecurityQuestionService extends JAXRSService {",
                "     @POST",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull SecurityQuestionTO securityQuestionTO);",
                "@@ -107,4 +106,4 @@ public interface SecurityQuestionService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull SecurityQuestionTO securityQuestionTO);",
                "@@ -120,3 +119,3 @@ public interface SecurityQuestionService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"key\") String key);",
                "@@ -131,4 +130,4 @@ public interface SecurityQuestionService extends JAXRSService {",
                "     @Path(\"byUser/{username}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     SecurityQuestionTO readByUser(@NotNull @PathParam(\"username\") String username);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java",
                "index c5e2a67d13..26332e8352 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java",
                "@@ -20,2 +20,8 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.v3.oas.annotations.Parameter;",
                "+import io.swagger.v3.oas.annotations.enums.ParameterIn;",
                "+import io.swagger.v3.oas.annotations.headers.Header;",
                "+import io.swagger.v3.oas.annotations.media.Schema;",
                "+import io.swagger.v3.oas.annotations.responses.ApiResponse;",
                "+import io.swagger.v3.oas.annotations.responses.ApiResponses;",
                " import io.swagger.v3.oas.annotations.security.SecurityRequirement;",
                "@@ -23,4 +29,6 @@ import io.swagger.v3.oas.annotations.security.SecurityRequirements;",
                " import io.swagger.v3.oas.annotations.tags.Tag;",
                "+import java.io.InputStream;",
                " import javax.validation.constraints.Min;",
                " import javax.validation.constraints.NotNull;",
                "+import javax.ws.rs.Consumes;",
                " import javax.ws.rs.DefaultValue;",
                "@@ -32,4 +40,5 @@ import javax.ws.rs.Produces;",
                " import javax.ws.rs.QueryParam;",
                "+import javax.ws.rs.core.HttpHeaders;",
                " import javax.ws.rs.core.MediaType;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.syncope.common.lib.info.NumbersInfo;",
                "@@ -40,2 +49,3 @@ import org.apache.syncope.common.lib.to.PagedResult;",
                " import org.apache.syncope.common.lib.to.TypeExtensionTO;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "@@ -60,3 +70,3 @@ public interface SyncopeService extends JAXRSService {",
                "     @Path(\"/platform\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     PlatformInfo platform();",
                "@@ -70,6 +80,6 @@ public interface SyncopeService extends JAXRSService {",
                "     @Path(\"/system\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     SystemInfo system();",
                "-    /** *",
                "+    /**",
                "      * Provides some numbers about the managed entities (users, groups, any objects...).",
                "@@ -80,5 +90,57 @@ public interface SyncopeService extends JAXRSService {",
                "     @Path(\"/numbers\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     NumbersInfo numbers();",
                "+    /**",
                "+     * Requests for batch execution.",
                "+     *",
                "+     * @param input batch request",
                "+     * @return batch results returned as Response entity, in case no 'Prefer: respond-async' was specified",
                "+     */",
                "+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,",
                "+            description = \"Allows client to specify a preference to process the batch request asynchronously\",",
                "+            allowEmptyValue = true, schema =",
                "+            @Schema(defaultValue = \"\", allowableValues = { \"respond-async\" }))",
                "+    @ApiResponses({",
                "+        @ApiResponse(responseCode = \"200\",",
                "+                description = \"Batch request processed, results returned as Response entity, \"",
                "+                + \"in case no 'Prefer: respond-async' was specified\"),",
                "+        @ApiResponse(responseCode = \"202\",",
                "+                description = \"Batch accepted for asynchronous processing, \"",
                "+                + \"in case 'Prefer: respond-async' was specified\", headers = {",
                "+                    @Header(name = HttpHeaders.LOCATION, schema =",
                "+                            @Schema(type = \"string\"),",
                "+                            description = \"URL to poll in order to get the results of the requested batch processing\"),",
                "+                    @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =",
                "+                            @Schema(type = \"string\"),",
                "+                            description = \"Allows the server to inform the \"",
                "+                            + \"client about the fact that a specified preference was applied\") }) })",
                "+    @POST",
                "+    @Path(\"/batch\")",
                "+    @Consumes(RESTHeaders.MULTIPART_MIXED)",
                "+    @Produces(RESTHeaders.MULTIPART_MIXED)",
                "+    Response batch(InputStream input);",
                "+",
                "+    /**",
                "+     * Gets batch results, in case asynchronous was requested.",
                "+     *",
                "+     * @return batch results returned as Response entity",
                "+     */",
                "+    @GET",
                "+    @ApiResponses({",
                "+        @ApiResponse(responseCode = \"200\",",
                "+                description = \"Batch results available, returned as Response entity\"),",
                "+        @ApiResponse(responseCode = \"202\",",
                "+                description = \"Batch results not yet available, retry later\", headers = {",
                "+                    @Header(name = HttpHeaders.LOCATION, schema =",
                "+                            @Schema(type = \"string\"),",
                "+                            description = \"URL to poll in order to get the results of the requested batch processing\"),",
                "+                    @Header(name = HttpHeaders.RETRY_AFTER, schema =",
                "+                            @Schema(type = \"integer\"),",
                "+                            description = \"seconds after which attempt again to get batch results\") }),",
                "+        @ApiResponse(responseCode = \"404\", description = \"No batch process was found for the provided boundary\") })",
                "+    @Path(\"/batch\")",
                "+    @Produces(RESTHeaders.MULTIPART_MIXED)",
                "+    Response batch();",
                "+",
                "     /**",
                "@@ -96,3 +158,3 @@ public interface SyncopeService extends JAXRSService {",
                "     @Path(\"/assignableGroups/{realm:.*}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     PagedResult<GroupTO> searchAssignableGroups(",
                "@@ -111,3 +173,3 @@ public interface SyncopeService extends JAXRSService {",
                "     @Path(\"/userTypeExtension/{groupName}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     TypeExtensionTO readUserTypeExtension(@NotNull @PathParam(\"groupName\") String groupName);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java",
                "index b74ede1c60..70f59350de 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java",
                "@@ -44,3 +44,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.TaskTO;",
                "@@ -75,3 +74,3 @@ public interface TaskService extends ExecutableService {",
                "     @Path(\"{type}/{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     <T extends TaskTO> T read(",
                "@@ -90,3 +89,3 @@ public interface TaskService extends ExecutableService {",
                "     @Path(\"{type}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     <T extends TaskTO> PagedResult<T> search(@BeanParam TaskQuery query);",
                "@@ -111,4 +110,4 @@ public interface TaskService extends ExecutableService {",
                "     @Path(\"{type}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull @PathParam(\"type\") TaskType type, @NotNull SchedTaskTO taskTO);",
                "@@ -127,4 +126,4 @@ public interface TaskService extends ExecutableService {",
                "     @Path(\"{type}/{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull @PathParam(\"type\") TaskType type, @NotNull SchedTaskTO taskTO);",
                "@@ -141,3 +140,3 @@ public interface TaskService extends ExecutableService {",
                "     @Path(\"{type}/{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@NotNull @PathParam(\"type\") TaskType type, @NotNull @PathParam(\"key\") String key);",
                "@@ -152,4 +151,4 @@ public interface TaskService extends ExecutableService {",
                "     @Path(\"bulk\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     BulkActionResult bulk(@NotNull BulkAction bulkAction);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "index fd1665a410..b655e8b514 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "@@ -44,3 +44,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.patch.StatusPatch;",
                "@@ -79,3 +78,3 @@ public interface UserSelfService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response read();",
                "@@ -112,4 +111,4 @@ public interface UserSelfService extends JAXRSService {",
                "     @POST",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(@NotNull UserTO userTO,",
                "@@ -146,4 +145,4 @@ public interface UserSelfService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response update(@NotNull UserPatch patch);",
                "@@ -179,4 +178,4 @@ public interface UserSelfService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response update(@NotNull UserTO user);",
                "@@ -212,4 +211,4 @@ public interface UserSelfService extends JAXRSService {",
                "     @Path(\"{key}/status\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response status(@NotNull StatusPatch statusPatch);",
                "@@ -225,3 +224,3 @@ public interface UserSelfService extends JAXRSService {",
                "     @DELETE",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response delete();",
                "@@ -240,3 +239,3 @@ public interface UserSelfService extends JAXRSService {",
                "     @Path(\"mustChangePassword\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response mustChangePassword(String password);",
                "@@ -255,3 +254,3 @@ public interface UserSelfService extends JAXRSService {",
                "     @Path(\"requestPasswordReset\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void requestPasswordReset(@NotNull @QueryParam(\"username\") String username, String securityAnswer);",
                "@@ -271,3 +270,3 @@ public interface UserSelfService extends JAXRSService {",
                "     @Path(\"confirmPasswordReset\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void confirmPasswordReset(@NotNull @QueryParam(\"token\") String token, String password);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java",
                "index af331575d1..0274acd0b3 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java",
                "@@ -42,3 +42,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.patch.StatusPatch;",
                "@@ -110,4 +109,4 @@ public interface UserService extends AnyService<UserTO> {",
                "     @POST",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(",
                "@@ -155,4 +154,4 @@ public interface UserService extends AnyService<UserTO> {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response update(@NotNull UserPatch userPatch);",
                "@@ -199,4 +198,4 @@ public interface UserService extends AnyService<UserTO> {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response update(@NotNull UserTO userTO);",
                "@@ -243,4 +242,4 @@ public interface UserService extends AnyService<UserTO> {",
                "     @Path(\"{key}/status\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response status(@NotNull StatusPatch statusPatch);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowService.java",
                "index ee65b7e1d3..c38746f9ca 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowService.java",
                "@@ -33,3 +33,2 @@ import javax.ws.rs.Produces;",
                " import javax.ws.rs.core.MediaType;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.PagedResult;",
                "@@ -38,2 +37,3 @@ import org.apache.syncope.common.lib.to.WorkflowFormTO;",
                " import org.apache.syncope.common.lib.to.WorkflowTaskTO;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                " import org.apache.syncope.common.rest.api.beans.WorkflowFormQuery;",
                "@@ -58,3 +58,3 @@ public interface UserWorkflowService extends JAXRSService {",
                "     @Path(\"forms\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     PagedResult<WorkflowFormTO> getForms(@BeanParam WorkflowFormQuery query);",
                "@@ -69,3 +69,3 @@ public interface UserWorkflowService extends JAXRSService {",
                "     @Path(\"forms/{userKey}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     WorkflowFormTO getFormForUser(@NotNull @PathParam(\"userKey\") String userKey);",
                "@@ -80,3 +80,3 @@ public interface UserWorkflowService extends JAXRSService {",
                "     @Path(\"forms/{taskId}/claim\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     WorkflowFormTO claimForm(@NotNull @PathParam(\"taskId\") String taskId);",
                "@@ -91,4 +91,4 @@ public interface UserWorkflowService extends JAXRSService {",
                "     @Path(\"forms\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     UserTO submitForm(@NotNull WorkflowFormTO form);",
                "@@ -114,4 +114,4 @@ public interface UserWorkflowService extends JAXRSService {",
                "     @Path(\"tasks/{taskId}/execute\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     UserTO executeTask(@NotNull @PathParam(\"taskId\") String taskId, @NotNull UserTO userTO);",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java",
                "index 92d026fcac..25e3f7adcb 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java",
                "@@ -36,3 +36,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.WorkflowDefinitionTO;",
                "@@ -58,3 +57,3 @@ public interface WorkflowService extends JAXRSService {",
                "     @Path(\"{anyType}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<WorkflowDefinitionTO> list(@NotNull @PathParam(\"anyType\") String anyType);",
                "@@ -70,3 +69,3 @@ public interface WorkflowService extends JAXRSService {",
                "     @Path(\"{anyType}/{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response get(",
                "@@ -100,4 +99,4 @@ public interface WorkflowService extends JAXRSService {",
                "     @Path(\"{anyType}/{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void set(",
                "@@ -117,3 +116,3 @@ public interface WorkflowService extends JAXRSService {",
                "     @Path(\"{anyType}/{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/BatchDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/BatchDAO.java",
                "new file mode 100644",
                "index 0000000000..b5e1166027",
                "--- /dev/null",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/BatchDAO.java",
                "@@ -0,0 +1,32 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.api.dao;",
                "+",
                "+import org.apache.syncope.core.persistence.api.entity.Batch;",
                "+",
                "+public interface BatchDAO extends DAO<Batch> {",
                "+",
                "+    Batch find(String key);",
                "+",
                "+    Batch save(Batch batch);",
                "+",
                "+    void delete(String key);",
                "+",
                "+    int deleteExpired();",
                "+}",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Batch.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Batch.java",
                "new file mode 100644",
                "index 0000000000..86fa647545",
                "--- /dev/null",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Batch.java",
                "@@ -0,0 +1,32 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.api.entity;",
                "+",
                "+import java.util.Date;",
                "+",
                "+public interface Batch extends ProvidedKeyEntity {",
                "+",
                "+    Date getExpiryTime();",
                "+",
                "+    void setExpiryTime(Date expiryTime);",
                "+",
                "+    String getResults();",
                "+",
                "+    void setResults(String results);",
                "+}",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPABatchDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPABatchDAO.java",
                "new file mode 100644",
                "index 0000000000..7470c5a348",
                "--- /dev/null",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPABatchDAO.java",
                "@@ -0,0 +1,62 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.dao;",
                "+",
                "+import java.util.Date;",
                "+import javax.persistence.Query;",
                "+import org.apache.syncope.core.persistence.api.dao.BatchDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.Batch;",
                "+import org.apache.syncope.core.persistence.jpa.entity.JPABatch;",
                "+import org.springframework.stereotype.Repository;",
                "+import org.springframework.transaction.annotation.Transactional;",
                "+",
                "+@Transactional(rollbackFor = Throwable.class)",
                "+@Repository",
                "+public class JPABatchDAO extends AbstractDAO<Batch> implements BatchDAO {",
                "+",
                "+    @Transactional(readOnly = true)",
                "+    @Override",
                "+    public Batch find(final String key) {",
                "+        return entityManager().find(JPABatch.class, key);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Batch save(final Batch batch) {",
                "+        return entityManager().merge(batch);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void delete(final String key) {",
                "+        Batch batch = find(key);",
                "+        if (batch == null) {",
                "+            return;",
                "+        }",
                "+",
                "+        entityManager().remove(batch);",
                "+    }",
                "+",
                "+    @Override",
                "+    public int deleteExpired() {",
                "+        Query query = entityManager().createQuery(",
                "+                \"DELETE FROM \" + JPABatch.class.getSimpleName() + \" e \"",
                "+                + \"WHERE e.expiryTime < :now\");",
                "+        query.setParameter(\"now\", new Date());",
                "+        return query.executeUpdate();",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPABatch.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPABatch.java",
                "new file mode 100644",
                "index 0000000000..26c068c37a",
                "--- /dev/null",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPABatch.java",
                "@@ -0,0 +1,68 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity;",
                "+",
                "+import java.util.Date;",
                "+import javax.persistence.Entity;",
                "+import javax.persistence.Lob;",
                "+import javax.persistence.Table;",
                "+import javax.persistence.Temporal;",
                "+import javax.persistence.TemporalType;",
                "+import org.apache.syncope.core.persistence.api.entity.Batch;",
                "+",
                "+@Entity",
                "+@Table(name = JPABatch.TABLE)",
                "+public class JPABatch extends AbstractProvidedKeyEntity implements Batch {",
                "+",
                "+    private static final long serialVersionUID = 468423182798249255L;",
                "+",
                "+    public static final String TABLE = \"SyncopeBatch\";",
                "+",
                "+    @Temporal(TemporalType.TIMESTAMP)",
                "+    private Date expiryTime;",
                "+",
                "+    @Lob",
                "+    private String results;",
                "+",
                "+    @Override",
                "+    public Date getExpiryTime() {",
                "+        return expiryTime == null",
                "+                ? null",
                "+                : new Date(expiryTime.getTime());",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setExpiryTime(final Date expiryTime) {",
                "+        if (expiryTime == null) {",
                "+            this.expiryTime = null;",
                "+        } else {",
                "+            this.expiryTime = new Date(expiryTime.getTime());",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getResults() {",
                "+        return results;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setResults(final String results) {",
                "+        this.results = results;",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "index 0f60dd7f5b..1fa7787bda 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "@@ -33,2 +33,3 @@ import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;",
                " import org.apache.syncope.core.persistence.api.entity.Application;",
                "+import org.apache.syncope.core.persistence.api.entity.Batch;",
                " import org.apache.syncope.core.persistence.api.entity.ConnInstance;",
                "@@ -297,2 +298,4 @@ public class JPAEntityFactory implements EntityFactory {",
                "             result = (E) new JPARemediation();",
                "+        } else if (reference.equals(Batch.class)) {",
                "+            result = (E) new JPABatch();",
                "         } else {",
                "diff --git a/core/persistence-jpa/src/main/resources/domains/MasterContent.xml b/core/persistence-jpa/src/main/resources/domains/MasterContent.xml",
                "index 25c5b2aed6..123e5002d6 100644",
                "--- a/core/persistence-jpa/src/main/resources/domains/MasterContent.xml",
                "+++ b/core/persistence-jpa/src/main/resources/domains/MasterContent.xml",
                "@@ -196,2 +196,6 @@ under the License.",
                "         jobDelegate_id=\"ExpiredAccessTokenCleanup\" cronExpression=\"0 0/5 * * * ?\"/>",
                "+  <Implementation id=\"ExpiredBatchCleanup\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"",
                "+                  body=\"org.apache.syncope.core.provisioning.java.job.ExpiredBatchCleanup\"/>",
                "+  <Task DTYPE=\"SchedTask\" id=\"8ea0ea51-ce08-4fe3-a0c8-c281b31b5893\" name=\"Access Token Cleanup Task\"  active=\"1\"",
                "+        jobDelegate_id=\"ExpiredBatchCleanup\" cronExpression=\"0 0/5 * * * ?\"/>",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java",
                "index 327b39653f..351d21d87b 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java",
                "@@ -89,5 +89,5 @@ public class AccessTokenDataBinderImpl implements AccessTokenDataBinder {",
                "         jwtClaims.setNotBefore(currentTime);",
                "-        for (Map.Entry<String, Object> entry : claims.entrySet()) {",
                "-            jwtClaims.setClaim(entry.getKey(), entry.getValue());",
                "-        }",
                "+        claims.forEach((key, value) -> {",
                "+            jwtClaims.setClaim(key, value);",
                "+        });",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ExpiredBatchCleanup.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ExpiredBatchCleanup.java",
                "new file mode 100644",
                "index 0000000000..9d8e7bc82e",
                "--- /dev/null",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ExpiredBatchCleanup.java",
                "@@ -0,0 +1,39 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.provisioning.java.job;",
                "+",
                "+import org.apache.syncope.core.persistence.api.dao.BatchDAO;",
                "+import org.quartz.JobExecutionException;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                "+",
                "+public class ExpiredBatchCleanup extends AbstractSchedTaskJobDelegate {",
                "+",
                "+    @Autowired",
                "+    private BatchDAO batchDAO;",
                "+",
                "+    @Override",
                "+    protected String doExecute(final boolean dryRun) throws JobExecutionException {",
                "+        if (!dryRun) {",
                "+            int deleted = batchDAO.deleteExpired();",
                "+            LOG.debug(\"Successfully deleted {} expired batch requests\", deleted);",
                "+        }",
                "+",
                "+        return \"SUCCESS\";",
                "+    }",
                "+}",
                "diff --git a/core/rest-cxf/pom.xml b/core/rest-cxf/pom.xml",
                "index 23833d631c..d56efe0720 100644",
                "--- a/core/rest-cxf/pom.xml",
                "+++ b/core/rest-cxf/pom.xml",
                "@@ -156,2 +156,13 @@ under the License.",
                "       </plugin>",
                "+      ",
                "+      <plugin>",
                "+        <groupId>org.gaul</groupId>",
                "+        <artifactId>modernizer-maven-plugin</artifactId>",
                "+        <configuration>",
                "+          <exclusions>",
                "+            <!-- required by HttpServletRequest's override in BatchItemRequest -->",
                "+            java/lang/StringBuffer.\"&lt;init&gt;\":(Ljava/lang/String;)V",
                "+          </exclusions>",
                "+        </configuration>",
                "+      </plugin>",
                "     </plugins>",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchItemRequest.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchItemRequest.java",
                "new file mode 100644",
                "index 0000000000..cc1cd22404",
                "--- /dev/null",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchItemRequest.java",
                "@@ -0,0 +1,145 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements. See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership. The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License. You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied. See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.rest.cxf.batch;",
                "+",
                "+import java.io.ByteArrayInputStream;",
                "+import java.io.IOException;",
                "+import java.util.Arrays;",
                "+import java.util.Collections;",
                "+import java.util.Enumeration;",
                "+import java.util.stream.Collectors;",
                "+import javax.servlet.ReadListener;",
                "+import javax.servlet.ServletInputStream;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import javax.servlet.http.HttpServletRequestWrapper;",
                "+import javax.ws.rs.core.HttpHeaders;",
                "+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;",
                "+import org.springframework.http.MediaType;",
                "+",
                "+public class BatchItemRequest extends HttpServletRequestWrapper {",
                "+",
                "+    private final String basePath;",
                "+",
                "+    private final BatchRequestItem batchItem;",
                "+",
                "+    private final ServletInputStream inputStream;",
                "+",
                "+    public BatchItemRequest(",
                "+            final String basePath,",
                "+            final HttpServletRequest request,",
                "+            final BatchRequestItem batchItem) {",
                "+",
                "+        super(request);",
                "+        this.basePath = basePath;",
                "+        this.batchItem = batchItem;",
                "+        this.inputStream = new ServletInputStream() {",
                "+",
                "+            private final ByteArrayInputStream bais = new ByteArrayInputStream(batchItem.getContent().getBytes());",
                "+",
                "+            private boolean isFinished = false;",
                "+",
                "+            private boolean isReady = true;",
                "+",
                "+            @Override",
                "+            public boolean isFinished() {",
                "+                return isFinished;",
                "+            }",
                "+",
                "+            @Override",
                "+            public boolean isReady() {",
                "+                return isReady;",
                "+            }",
                "+",
                "+            @Override",
                "+            public void setReadListener(final ReadListener readListener) {",
                "+                // nope",
                "+            }",
                "+",
                "+            @Override",
                "+            public int read() {",
                "+                isFinished = true;",
                "+                isReady = false;",
                "+                return bais.read();",
                "+            }",
                "+        };",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getMethod() {",
                "+        return batchItem.getMethod();",
                "+    }",
                "+",
                "+    @Override",
                "+    public StringBuffer getRequestURL() {",
                "+        return new StringBuffer(basePath).append(getRequestURI());",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getRequestURI() {",
                "+        return batchItem.getRequestURI();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getQueryString() {",
                "+        return batchItem.getQueryString();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getContentType() {",
                "+        return batchItem.getHeaders().containsKey(HttpHeaders.CONTENT_TYPE)",
                "+                ? batchItem.getHeaders().get(HttpHeaders.CONTENT_TYPE).get(0).toString()",
                "+                : MediaType.ALL_VALUE;",
                "+    }",
                "+",
                "+    @Override",
                "+    public int getContentLength() {",
                "+        return batchItem.getHeaders().containsKey(HttpHeaders.CONTENT_LENGTH)",
                "+                ? Integer.valueOf(batchItem.getHeaders().get(HttpHeaders.CONTENT_LENGTH).get(0).toString())",
                "+                : 0;",
                "+    }",
                "+",
                "+    @Override",
                "+    public long getContentLengthLong() {",
                "+        return getContentLength();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getHeader(final String name) {",
                "+        return batchItem.getHeaders().containsKey(name)",
                "+                ? batchItem.getHeaders().get(name).get(0).toString()",
                "+                : HttpHeaders.CONTENT_TYPE.equals(name) || HttpHeaders.ACCEPT.equals(name)",
                "+                ? MediaType.ALL_VALUE",
                "+                : super.getHeader(name);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Enumeration<String> getHeaders(final String name) {",
                "+        return batchItem.getHeaders().containsKey(name)",
                "+                ? Collections.enumeration(",
                "+                        batchItem.getHeaders().get(name).stream().map(Object::toString).collect(Collectors.toList()))",
                "+                : HttpHeaders.CONTENT_TYPE.equals(name) || HttpHeaders.ACCEPT.equals(name)",
                "+                ? Collections.enumeration(Arrays.asList(MediaType.ALL_VALUE))",
                "+                : super.getHeaders(name);",
                "+    }",
                "+",
                "+    @Override",
                "+    public ServletInputStream getInputStream() throws IOException {",
                "+        return inputStream;",
                "+    }",
                "+}",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchItemResponse.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchItemResponse.java",
                "new file mode 100644",
                "index 0000000000..e16fed992d",
                "--- /dev/null",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchItemResponse.java",
                "@@ -0,0 +1,310 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements. See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership. The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License. You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied. See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.rest.cxf.batch;",
                "+",
                "+import java.io.ByteArrayOutputStream;",
                "+import java.io.IOException;",
                "+import java.io.PrintWriter;",
                "+import java.util.ArrayList;",
                "+import java.util.Collection;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.HashSet;",
                "+import java.util.List;",
                "+import java.util.Locale;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+import java.util.stream.Collectors;",
                "+import javax.servlet.ServletOutputStream;",
                "+import javax.servlet.WriteListener;",
                "+import javax.servlet.http.Cookie;",
                "+import javax.servlet.http.HttpServletResponse;",
                "+import javax.ws.rs.core.HttpHeaders;",
                "+",
                "+public class BatchItemResponse implements HttpServletResponse {",
                "+",
                "+    private final Set<Cookie> cookies = new HashSet<>();",
                "+",
                "+    private final Map<String, List<Object>> headers = new HashMap<>();",
                "+",
                "+    private final ByteArrayOutputStream baos = new ByteArrayOutputStream();",
                "+",
                "+    private final ServletOutputStream servletOuputStream = new ServletOutputStream() {",
                "+",
                "+        @Override",
                "+        public boolean isReady() {",
                "+            return true;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void setWriteListener(final WriteListener writeListener) {",
                "+            // nope",
                "+        }",
                "+",
                "+        @Override",
                "+        public void write(final int b) throws IOException {",
                "+            baos.write(b);",
                "+        }",
                "+    };",
                "+",
                "+    private final PrintWriter writer = new PrintWriter(baos);",
                "+",
                "+    private int status;",
                "+",
                "+    private Locale locale;",
                "+",
                "+    public Set<Cookie> getCookies() {",
                "+        return cookies;",
                "+    }",
                "+",
                "+    public Map<String, List<Object>> getHeaders() {",
                "+        return headers;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void addCookie(final Cookie cookie) {",
                "+        this.cookies.add(cookie);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean containsHeader(final String name) {",
                "+        return headers.containsKey(name);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setDateHeader(final String name, final long date) {",
                "+        List<Object> values = headers.get(name);",
                "+        if (values == null) {",
                "+            values = new ArrayList<>();",
                "+            headers.put(name, values);",
                "+        } else {",
                "+            values.clear();",
                "+        }",
                "+        values.add(date);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void addDateHeader(final String name, final long date) {",
                "+        List<Object> values = headers.get(name);",
                "+        if (values == null) {",
                "+            values = new ArrayList<>();",
                "+            headers.put(name, values);",
                "+        }",
                "+        values.add(date);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setHeader(final String name, final String value) {",
                "+        List<Object> values = headers.get(name);",
                "+        if (values == null) {",
                "+            values = new ArrayList<>();",
                "+            headers.put(name, values);",
                "+        } else {",
                "+            values.clear();",
                "+        }",
                "+        values.add(value);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void addHeader(final String name, final String value) {",
                "+        List<Object> values = headers.get(name);",
                "+        if (values == null) {",
                "+            values = new ArrayList<>();",
                "+            headers.put(name, values);",
                "+        }",
                "+        values.add(value);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setIntHeader(final String name, final int value) {",
                "+        List<Object> values = headers.get(name);",
                "+        if (values == null) {",
                "+            values = new ArrayList<>();",
                "+            headers.put(name, values);",
                "+        } else {",
                "+            values.clear();",
                "+        }",
                "+        values.add(value);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void addIntHeader(final String name, final int value) {",
                "+        List<Object> values = headers.get(name);",
                "+        if (values == null) {",
                "+            values = new ArrayList<>();",
                "+            headers.put(name, values);",
                "+        }",
                "+        values.add(value);",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getHeader(final String name) {",
                "+        return headers.containsKey(name) ? headers.get(name).get(0).toString() : null;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Collection<String> getHeaders(final String name) {",
                "+        return headers.containsKey(name)",
                "+                ? headers.get(name).stream().map(Object::toString).collect(Collectors.toList())",
                "+                : Collections.emptyList();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Collection<String> getHeaderNames() {",
                "+        return headers.keySet();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String encodeURL(final String url) {",
                "+        return url;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String encodeRedirectURL(final String url) {",
                "+        return url;",
                "+    }",
                "+",
                "+    @Override",
                "+    @SuppressWarnings(\"deprecation\")",
                "+    public String encodeUrl(final String url) {",
                "+        return encodeURL(url);",
                "+    }",
                "+",
                "+    @Override",
                "+    @SuppressWarnings(\"deprecation\")",
                "+    public String encodeRedirectUrl(final String url) {",
                "+        return encodeRedirectURL(url);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void sendError(final int sc, final String msg) throws IOException {",
                "+        setStatus(sc);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void sendError(final int sc) throws IOException {",
                "+        setStatus(sc);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void sendRedirect(final String location) throws IOException {",
                "+        setStatus(SC_MOVED_TEMPORARILY);",
                "+        setHeader(HttpHeaders.LOCATION, location);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setStatus(final int sc) {",
                "+        this.status = sc;",
                "+    }",
                "+",
                "+    @Override",
                "+    @SuppressWarnings(\"deprecation\")",
                "+    public void setStatus(final int sc, final String sm) {",
                "+        setStatus(sc);",
                "+    }",
                "+",
                "+    @Override",
                "+    public int getStatus() {",
                "+        return status;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getCharacterEncoding() {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getContentType() {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    public ByteArrayOutputStream getUnderlyingOutputStream() {",
                "+        return baos;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ServletOutputStream getOutputStream() throws IOException {",
                "+        return servletOuputStream;",
                "+    }",
                "+",
                "+    @Override",
                "+    public PrintWriter getWriter() throws IOException {",
                "+        return writer;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setCharacterEncoding(final String charset) {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setContentLength(final int len) {",
                "+        setIntHeader(HttpHeaders.CONTENT_LENGTH, len);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setContentLengthLong(final long len) {",
                "+        setContentLength((int) len);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setContentType(final String type) {",
                "+        setHeader(HttpHeaders.CONTENT_TYPE, type);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setBufferSize(final int size) {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public int getBufferSize() {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void flushBuffer() throws IOException {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void resetBuffer() {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isCommitted() {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void reset() {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setLocale(final Locale loc) {",
                "+        this.locale = loc;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Locale getLocale() {",
                "+        return locale;",
                "+    }",
                "+}",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchProcess.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchProcess.java",
                "new file mode 100644",
                "index 0000000000..a76d418f84",
                "--- /dev/null",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchProcess.java",
                "@@ -0,0 +1,144 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements. See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership. The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License. You may obtain a copy of the License at",
                "+ *",
                "+ * http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied. See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.rest.cxf.batch;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import javax.servlet.ServletConfig;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import org.apache.cxf.transport.http.AbstractHTTPDestination;",
                "+import org.apache.cxf.transport.http.DestinationRegistry;",
                "+import org.apache.syncope.common.lib.SyncopeConstants;",
                "+import org.apache.syncope.common.rest.api.batch.BatchPayloadGenerator;",
                "+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;",
                "+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;",
                "+import org.apache.syncope.core.persistence.api.dao.BatchDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.Batch;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                "+import org.springframework.security.core.Authentication;",
                "+import org.springframework.security.core.context.SecurityContextHolder;",
                "+",
                "+public class BatchProcess implements Runnable {",
                "+",
                "+    private static final Logger LOG = LoggerFactory.getLogger(BatchProcess.class);",
                "+",
                "+    @Autowired",
                "+    private BatchDAO batchDAO;",
                "+",
                "+    private String boundary;",
                "+",
                "+    private String basePath;",
                "+",
                "+    private List<BatchRequestItem> batchRequestItems;",
                "+",
                "+    private DestinationRegistry destinationRegistry;",
                "+",
                "+    private ServletConfig servletConfig;",
                "+",
                "+    private HttpServletRequest servletRequest;",
                "+",
                "+    private Authentication authentication;",
                "+",
                "+    public void setBoundary(final String boundary) {",
                "+        this.boundary = boundary;",
                "+    }",
                "+",
                "+    public void setBasePath(final String basePath) {",
                "+        this.basePath = basePath;",
                "+    }",
                "+",
                "+    public void setBatchRequestItems(final List<BatchRequestItem> batchRequestItems) {",
                "+        this.batchRequestItems = batchRequestItems;",
                "+    }",
                "+",
                "+    public void setDestinationRegistry(final DestinationRegistry destinationRegistry) {",
                "+        this.destinationRegistry = destinationRegistry;",
                "+    }",
                "+",
                "+    public void setServletConfig(final ServletConfig servletConfig) {",
                "+        this.servletConfig = servletConfig;",
                "+    }",
                "+",
                "+    public void setServletRequest(final HttpServletRequest servletRequest) {",
                "+        this.servletRequest = servletRequest;",
                "+    }",
                "+",
                "+    public void setAuthentication(final Authentication authentication) {",
                "+        this.authentication = authentication;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void run() {",
                "+        SecurityContextHolder.getContext().setAuthentication(authentication);",
                "+",
                "+        List<BatchResponseItem> batchResponseItems = new ArrayList<>(batchRequestItems.size());",
                "+",
                "+        batchRequestItems.forEach((BatchRequestItem reqItem) -> {",
                "+            LOG.debug(\"Batch item:\\n{}\", reqItem);",
                "+",
                "+            AbstractHTTPDestination dest = destinationRegistry.getDestinationForPath(reqItem.getRequestURI(), true);",
                "+            if (dest == null) {",
                "+                dest = destinationRegistry.checkRestfulRequest(reqItem.getRequestURI());",
                "+            }",
                "+            LOG.debug(\"Destination found for {}: {}\", reqItem.getRequestURI(), dest);",
                "+",
                "+            if (dest == null) {",
                "+                BatchResponseItem resItem = new BatchResponseItem();",
                "+                resItem.setStatus(404);",
                "+                batchResponseItems.add(resItem);",
                "+            } else {",
                "+                BatchItemRequest request = new BatchItemRequest(basePath, servletRequest, reqItem);",
                "+                BatchItemResponse response = new BatchItemResponse();",
                "+                try {",
                "+                    dest.invoke(servletConfig, servletConfig.getServletContext(), request, response);",
                "+                    LOG.debug(\"Returned:\\nstatus: {}\\nheaders: {}\\nbody:\\n{}\", response.getStatus(),",
                "+                            response.getHeaders(), new String(response.getUnderlyingOutputStream().toByteArray()));",
                "+",
                "+                    BatchResponseItem resItem = new BatchResponseItem();",
                "+                    resItem.setStatus(response.getStatus());",
                "+                    resItem.setHeaders(response.getHeaders());",
                "+                    String output = new String(response.getUnderlyingOutputStream().toByteArray());",
                "+                    if (output.length() > 0) {",
                "+                        resItem.setContent(output);",
                "+                    }",
                "+                    batchResponseItems.add(resItem);",
                "+                } catch (IOException e) {",
                "+                    LOG.error(\"Invocation of {} failed\", dest.getPath(), e);",
                "+",
                "+                    BatchResponseItem resItem = new BatchResponseItem();",
                "+                    resItem.setStatus(404);",
                "+                    batchResponseItems.add(resItem);",
                "+                }",
                "+            }",
                "+        });",
                "+",
                "+        String results = BatchPayloadGenerator.generate(batchResponseItems, SyncopeConstants.DOUBLE_DASH + boundary);",
                "+",
                "+        Batch batch = batchDAO.find(boundary);",
                "+        if (batch == null) {",
                "+            LOG.error(\"Could not find batch {}, cannot save results hence reporting here:\\n{}\", boundary, results);",
                "+        } else {",
                "+            batch.setResults(results);",
                "+            batchDAO.save(batch);",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java",
                "index caef5d85be..2e9a0c0fe8 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java",
                "@@ -82,3 +82,4 @@ abstract class AbstractServiceImpl implements JAXRSService {",
                "     protected boolean isNullPriorityAsync() {",
                "-        return BooleanUtils.toBoolean(messageContext.getHttpHeaders().getHeaderString(RESTHeaders.NULL_PRIORITY_ASYNC));",
                "+        return BooleanUtils.toBoolean(",
                "+                messageContext.getHttpServletRequest().getHeader(RESTHeaders.NULL_PRIORITY_ASYNC));",
                "     }",
                "@@ -91,4 +92,4 @@ abstract class AbstractServiceImpl implements JAXRSService {",
                "      */",
                "-    private Preference getPreference() {",
                "-        return Preference.fromString(messageContext.getHttpHeaders().getHeaderString(RESTHeaders.PREFER));",
                "+    protected Preference getPreference() {",
                "+        return Preference.fromString(messageContext.getHttpServletRequest().getHeader(RESTHeaders.PREFER));",
                "     }",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java",
                "index 2f84efc8f6..1deaa379fe 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java",
                "@@ -20,5 +20,19 @@ package org.apache.syncope.core.rest.cxf.service;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.util.Date;",
                " import java.util.List;",
                "+import javax.annotation.Resource;",
                "+import javax.ws.rs.InternalServerErrorException;",
                "+import javax.ws.rs.NotFoundException;",
                "+import javax.ws.rs.core.HttpHeaders;",
                "+import javax.ws.rs.core.MediaType;",
                "+import javax.ws.rs.core.Response;",
                " import org.apache.commons.lang3.StringUtils;",
                " import org.apache.commons.lang3.tuple.Pair;",
                "+import org.apache.cxf.Bus;",
                "+import org.apache.cxf.transport.DestinationFactoryManager;",
                "+import org.apache.cxf.transport.http.DestinationRegistry;",
                "+import org.apache.cxf.transport.http.HTTPTransportFactory;",
                "+import org.apache.syncope.common.lib.SyncopeClientException;",
                " import org.apache.syncope.common.lib.SyncopeConstants;",
                "@@ -30,6 +44,18 @@ import org.apache.syncope.common.lib.to.PagedResult;",
                " import org.apache.syncope.common.lib.to.TypeExtensionTO;",
                "+import org.apache.syncope.common.lib.types.ClientExceptionType;",
                "+import org.apache.syncope.common.rest.api.Preference;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "+import org.apache.syncope.common.rest.api.batch.BatchPayloadParser;",
                "+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;",
                " import org.apache.syncope.common.rest.api.service.SyncopeService;",
                " import org.apache.syncope.core.logic.SyncopeLogic;",
                "+import org.apache.syncope.core.rest.cxf.batch.BatchProcess;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                " import org.springframework.stereotype.Service;",
                "+import org.apache.syncope.core.persistence.api.dao.BatchDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.Batch;",
                "+import org.apache.syncope.core.persistence.api.entity.EntityFactory;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;",
                "+import org.springframework.security.core.context.SecurityContextHolder;",
                "@@ -38,2 +64,5 @@ public class SyncopeServiceImpl extends AbstractServiceImpl implements SyncopeSe",
                "+    @Resource(name = \"batchExecutor\")",
                "+    private ThreadPoolTaskExecutor batchExecutor;",
                "+",
                "     @Autowired",
                "@@ -41,2 +70,11 @@ public class SyncopeServiceImpl extends AbstractServiceImpl implements SyncopeSe",
                "+    @Autowired",
                "+    private Bus bus;",
                "+",
                "+    @Autowired",
                "+    private BatchDAO batchDAO;",
                "+",
                "+    @Autowired",
                "+    private EntityFactory entityFactory;",
                "+",
                "     @Override",
                "@@ -70,2 +108,93 @@ public class SyncopeServiceImpl extends AbstractServiceImpl implements SyncopeSe",
                "+    private DestinationRegistry getDestinationRegistryFromBusOrDefault() {",
                "+        DestinationFactoryManager dfm = bus.getExtension(DestinationFactoryManager.class);",
                "+        try {",
                "+            HTTPTransportFactory df = (HTTPTransportFactory) dfm.",
                "+                    getDestinationFactory(\"http://cxf.apache.org/transports/http/configuration\");",
                "+            return df.getRegistry();",
                "+        } catch (Exception e) {",
                "+            throw new InternalServerErrorException(\"Could not find CXF's DestinationRegistry\", e);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response batch(final InputStream input) {",
                "+        // parse Content-Type, expect appropriate boundary",
                "+        MediaType mediaType = MediaType.valueOf(messageContext.getHttpServletRequest().getContentType());",
                "+        String boundary = mediaType.getParameters().get(RESTHeaders.BOUNDARY_PARAMETER);",
                "+",
                "+        if (batchDAO.find(boundary) != null) {",
                "+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.EntityExists);",
                "+            sce.getElements().add(\"Batch with boundary \" + boundary + \" already processing\");",
                "+            throw sce;",
                "+        }",
                "+",
                "+        // parse batch request",
                "+        List<BatchRequestItem> batchRequestItems;",
                "+        try {",
                "+            batchRequestItems = BatchPayloadParser.parse(input, mediaType, new BatchRequestItem());",
                "+        } catch (IOException e) {",
                "+            LOG.error(\"Could not parse batch request with boundary {}\", boundary, e);",
                "+",
                "+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidEntity);",
                "+            sce.getElements().add(\"Batch request with boundary \" + boundary);",
                "+            throw sce;",
                "+        }",
                "+",
                "+        // prepare for batch processing",
                "+        Batch batch = entityFactory.newEntity(Batch.class);",
                "+        batch.setKey(boundary);",
                "+        batch.setExpiryTime(new Date(System.currentTimeMillis() + 5 * 60 * 1000));",
                "+        batchDAO.save(batch);",
                "+",
                "+        BatchProcess batchProcess = ApplicationContextProvider.getBeanFactory().createBean(BatchProcess.class);",
                "+        batchProcess.setBoundary(boundary);",
                "+        batchProcess.setBasePath(uriInfo.getBaseUri().toASCIIString());",
                "+        batchProcess.setBatchRequestItems(batchRequestItems);",
                "+        batchProcess.setDestinationRegistry(getDestinationRegistryFromBusOrDefault());",
                "+        batchProcess.setServletConfig(messageContext.getServletConfig());",
                "+        batchProcess.setServletRequest(messageContext.getHttpServletRequest());",
                "+        batchProcess.setAuthentication(SecurityContextHolder.getContext().getAuthentication());",
                "+",
                "+        // manage synchronous Vs asynchronous batch processing",
                "+        if (getPreference() == Preference.RESPOND_ASYNC) {",
                "+            batchExecutor.execute(batchProcess);",
                "+",
                "+            return Response.accepted().",
                "+                    header(RESTHeaders.PREFERENCE_APPLIED, getPreference().toString()).",
                "+                    header(HttpHeaders.LOCATION, uriInfo.getAbsolutePathBuilder().build()).",
                "+                    type(RESTHeaders.multipartMixedWith(boundary)).",
                "+                    build();",
                "+        } else {",
                "+            batchProcess.run();",
                "+            return batch();",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public Response batch() {",
                "+        MediaType mediaType = MediaType.valueOf(messageContext.getHttpServletRequest().getContentType());",
                "+        String boundary = mediaType.getParameters().get(RESTHeaders.BOUNDARY_PARAMETER);",
                "+",
                "+        Batch batch = batchDAO.find(boundary);",
                "+        if (batch == null) {",
                "+            throw new NotFoundException(\"Batch \" + boundary);",
                "+        }",
                "+",
                "+        if (batch.getResults() == null) {",
                "+            return Response.accepted().",
                "+                    type(RESTHeaders.multipartMixedWith(boundary)).",
                "+                    header(HttpHeaders.RETRY_AFTER, 5).",
                "+                    header(HttpHeaders.LOCATION, uriInfo.getAbsolutePathBuilder().build()).",
                "+                    build();",
                "+        }",
                "+",
                "+        Response response = Response.ok(batch.getResults()).",
                "+                type(RESTHeaders.multipartMixedWith(boundary)).",
                "+                build();",
                "+",
                "+        batchDAO.delete(boundary);",
                "+",
                "+        return response;",
                "+    }",
                " }",
                "diff --git a/core/rest-cxf/src/main/resources/restCXFContext.xml b/core/rest-cxf/src/main/resources/restCXFContext.xml",
                "index 571add9f4d..dd3ff18708 100644",
                "--- a/core/rest-cxf/src/main/resources/restCXFContext.xml",
                "+++ b/core/rest-cxf/src/main/resources/restCXFContext.xml",
                "@@ -23,2 +23,3 @@ under the License.",
                "        xmlns:context=\"http://www.springframework.org/schema/context\"",
                "+       xmlns:task=\"http://www.springframework.org/schema/task\"",
                "        xsi:schemaLocation=\"http://www.springframework.org/schema/beans",
                "@@ -28,3 +29,5 @@ under the License.",
                "                            http://www.springframework.org/schema/context",
                "-                           http://www.springframework.org/schema/context/spring-context.xsd\">",
                "+                           http://www.springframework.org/schema/context/spring-context.xsd",
                "+                           http://www.springframework.org/schema/task",
                "+                           http://www.springframework.org/schema/task/spring-task.xsd\">",
                "@@ -35,2 +38,4 @@ under the License.",
                "+  <task:executor id=\"batchExecutor\" pool-size=\"10\"/>",
                "+",
                "   <bean id=\"jaxbProvider\" class=\"org.apache.cxf.jaxrs.provider.JAXBElementProvider\">",
                "diff --git a/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java b/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java",
                "index 0760567075..020b4a2a68 100644",
                "--- a/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java",
                "+++ b/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java",
                "@@ -38,3 +38,2 @@ import javax.ws.rs.Produces;",
                " import javax.ws.rs.core.MediaType;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.CamelMetrics;",
                "@@ -42,2 +41,3 @@ import org.apache.syncope.common.lib.to.CamelRouteTO;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "@@ -61,3 +61,3 @@ public interface CamelRouteService extends JAXRSService {",
                "     @Path(\"{anyTypeKind}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<CamelRouteTO> list(@NotNull @PathParam(\"anyTypeKind\") AnyTypeKind anyTypeKind);",
                "@@ -73,3 +73,3 @@ public interface CamelRouteService extends JAXRSService {",
                "     @Path(\"{anyTypeKind}/{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     CamelRouteTO read(",
                "@@ -90,4 +90,4 @@ public interface CamelRouteService extends JAXRSService {",
                "     @Path(\"{anyTypeKind}/{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull @PathParam(\"anyTypeKind\") AnyTypeKind anyTypeKind, @NotNull CamelRouteTO route);",
                "@@ -101,3 +101,3 @@ public interface CamelRouteService extends JAXRSService {",
                "     @Path(\"restartContext\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void restartContext();",
                "@@ -111,3 +111,3 @@ public interface CamelRouteService extends JAXRSService {",
                "     @Path(\"metrics\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     CamelMetrics metrics();",
                "diff --git a/ext/oidcclient/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCClientService.java b/ext/oidcclient/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCClientService.java",
                "index eda848a684..39b719c5c9 100644",
                "--- a/ext/oidcclient/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCClientService.java",
                "+++ b/ext/oidcclient/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCClientService.java",
                "@@ -29,3 +29,2 @@ import javax.ws.rs.core.MediaType;",
                " import org.apache.syncope.common.lib.OIDCConstants;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.OIDCLoginRequestTO;",
                "@@ -33,2 +32,3 @@ import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;",
                " import org.apache.syncope.common.lib.to.OIDCLogoutRequestTO;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "@@ -53,3 +53,3 @@ public interface OIDCClientService extends JAXRSService {",
                "     @Path(\"loginRequest\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     OIDCLoginRequestTO createLoginRequest(",
                "@@ -69,3 +69,3 @@ public interface OIDCClientService extends JAXRSService {",
                "     @Path(\"login\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     OIDCLoginResponseTO login(",
                "@@ -83,3 +83,3 @@ public interface OIDCClientService extends JAXRSService {",
                "     @Path(\"logout\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     OIDCLogoutRequestTO createLogoutRequest(@QueryParam(OIDCConstants.OP) String op);",
                "diff --git a/ext/oidcclient/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCProviderService.java b/ext/oidcclient/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCProviderService.java",
                "index 9705b31df2..ca55a4ad02 100644",
                "--- a/ext/oidcclient/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCProviderService.java",
                "+++ b/ext/oidcclient/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCProviderService.java",
                "@@ -44,3 +44,2 @@ import javax.ws.rs.PathParam;",
                " import javax.ws.rs.core.HttpHeaders;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.rest.api.RESTHeaders;",
                "@@ -73,3 +72,3 @@ public interface OIDCProviderService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<OIDCProviderTO> list();",
                "@@ -84,3 +83,3 @@ public interface OIDCProviderService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     OIDCProviderTO read(@PathParam(\"key\") String key);",
                "@@ -103,4 +102,4 @@ public interface OIDCProviderService extends JAXRSService {",
                "     @POST",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response create(OIDCProviderTO oidcProviderTO);",
                "@@ -110,3 +109,3 @@ public interface OIDCProviderService extends JAXRSService {",
                "      *",
                "-     * @param oidcProviderTO OpenID Connect Provider configuration to be stored  ",
                "+     * @param oidcProviderTO OpenID Connect Provider configuration to be stored",
                "      * @return Response object featuring Location header of created OIDC Provider",
                "@@ -124,4 +123,4 @@ public interface OIDCProviderService extends JAXRSService {",
                "     @Path(\"fromDiscovery\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response createFromDiscovery(OIDCProviderTO oidcProviderTO);",
                "@@ -139,4 +138,4 @@ public interface OIDCProviderService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull OIDCProviderTO oidcProviderTO);",
                "@@ -152,3 +151,3 @@ public interface OIDCProviderService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@PathParam(\"key\") String key);",
                "diff --git a/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java b/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "index b04cc2717e..acfbeb2be2 100644",
                "--- a/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "+++ b/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "@@ -42,4 +42,4 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.SAML2IdPTO;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "@@ -71,3 +71,3 @@ public interface SAML2IdPService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     List<SAML2IdPTO> list();",
                "@@ -82,3 +82,3 @@ public interface SAML2IdPService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     SAML2IdPTO read(@PathParam(\"key\") String key);",
                "@@ -93,3 +93,3 @@ public interface SAML2IdPService extends JAXRSService {",
                "     @Consumes({ MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     Response importFromMetadata(@NotNull InputStream input);",
                "@@ -107,4 +107,4 @@ public interface SAML2IdPService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void update(@NotNull SAML2IdPTO saml2IdpTO);",
                "@@ -120,3 +120,3 @@ public interface SAML2IdPService extends JAXRSService {",
                "     @Path(\"{key}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void delete(@PathParam(\"key\") String key);",
                "diff --git a/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java b/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java",
                "index 23148cdb7c..06d09965ee 100644",
                "--- a/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java",
                "+++ b/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java",
                "@@ -33,3 +33,2 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.SAML2RequestTO;",
                "@@ -37,2 +36,3 @@ import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;",
                " import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "@@ -68,3 +68,3 @@ public interface SAML2SPService extends JAXRSService {",
                "     @Path(\"loginRequest\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     SAML2RequestTO createLoginRequest(",
                "@@ -81,4 +81,4 @@ public interface SAML2SPService extends JAXRSService {",
                "     @Path(\"loginResponse\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     SAML2LoginResponseTO validateLoginResponse(SAML2ReceivedResponseTO response);",
                "@@ -93,3 +93,3 @@ public interface SAML2SPService extends JAXRSService {",
                "     @Path(\"logoutRequest\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     SAML2RequestTO createLogoutRequest(@QueryParam(\"spEntityID\") String spEntityID);",
                "@@ -105,4 +105,4 @@ public interface SAML2SPService extends JAXRSService {",
                "     @Path(\"logoutResponse\")",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void validateLogoutResponse(SAML2ReceivedResponseTO response);",
                "diff --git a/ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java b/ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java",
                "index f0aaa24599..7e10f45de8 100644",
                "--- a/ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java",
                "+++ b/ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java",
                "@@ -32,4 +32,4 @@ import javax.ws.rs.Produces;",
                " import javax.ws.rs.core.MediaType;",
                "-import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.scim.SCIMConf;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "@@ -51,3 +51,3 @@ public interface SCIMConfService extends JAXRSService {",
                "     @GET",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     SCIMConf get();",
                "@@ -62,4 +62,4 @@ public interface SCIMConfService extends JAXRSService {",
                "     @PUT",
                "-    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "     void set(@NotNull SCIMConf conf);",
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index ccff4077ff..80851f53fd 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -1269,3 +1269,3 @@ under the License.",
                "               <container>",
                "-                <containerId>wildfly12x</containerId>",
                "+                <containerId>wildfly13x</containerId>",
                "                 <zipUrlInstaller>",
                "diff --git a/fit/core-reference/src/main/resources/jboss/restCXFContext.xml b/fit/core-reference/src/main/resources/jboss/restCXFContext.xml",
                "index 3120c813b5..b06589b44b 100644",
                "--- a/fit/core-reference/src/main/resources/jboss/restCXFContext.xml",
                "+++ b/fit/core-reference/src/main/resources/jboss/restCXFContext.xml",
                "@@ -23,2 +23,3 @@ under the License.",
                "        xmlns:context=\"http://www.springframework.org/schema/context\"",
                "+       xmlns:task=\"http://www.springframework.org/schema/task\"",
                "        xsi:schemaLocation=\"http://www.springframework.org/schema/beans",
                "@@ -28,3 +29,5 @@ under the License.",
                "                            http://www.springframework.org/schema/context",
                "-                           http://www.springframework.org/schema/context/spring-context.xsd\">",
                "+                           http://www.springframework.org/schema/context/spring-context.xsd",
                "+                           http://www.springframework.org/schema/task",
                "+                           http://www.springframework.org/schema/task/spring-task.xsd\">",
                "@@ -35,2 +38,4 @@ under the License.",
                "+  <task:executor id=\"batchExecutor\" pool-size=\"10\"/>",
                "+",
                "   <bean id=\"jaxbProvider\" class=\"org.apache.cxf.jaxrs.provider.JAXBElementProvider\">",
                "diff --git a/pom.xml b/pom.xml",
                "index ab68819129..d7278ac0f5 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1882,3 +1882,3 @@ under the License.",
                "           <artifactId>cargo-maven2-plugin</artifactId>",
                "-          <version>1.6.8</version>",
                "+          <version>1.6.9</version>",
                "           <configuration>"
            ],
            "changed_files": [
                "client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java",
                "client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java",
                "client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchClientFactoryBean.java",
                "client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchClientProxyImpl.java",
                "client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchOfflineHTTPConduit.java",
                "client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchRequest.java",
                "client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchResponse.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/Preference.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchItem.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadGenerator.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadLine.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadLineReader.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadParser.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchRequestItem.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchResponseItem.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ApplicationService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReconciliationService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RemediationService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/BatchDAO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Batch.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPABatchDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPABatch.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "core/persistence-jpa/src/main/resources/domains/MasterContent.xml",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ExpiredBatchCleanup.java",
                "core/rest-cxf/pom.xml",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchItemRequest.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchItemResponse.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchProcess.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java",
                "core/rest-cxf/src/main/resources/restCXFContext.xml",
                "ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java",
                "ext/oidcclient/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCClientService.java",
                "ext/oidcclient/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCProviderService.java",
                "ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java",
                "ext/scimv2/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SCIMConfService.java",
                "fit/core-reference/pom.xml",
                "fit/core-reference/src/main/resources/jboss/restCXFContext.xml",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1348": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3670bb31526f68a43ee05ac5558a6ec564a54916"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AnyTypeClass",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: connector, report, policy, anytypeclass, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1348",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b79398b58f15a78ee54788c443328271e1dbcf47",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541408647,
            "hunks": 263,
            "message": "[SYNCOPE-1392] Initial removal of ReflectionUtils, and most of ReflectionToStringBuilder, EqualsBuilder and HashCodeBuilder from Core",
            "diff": [
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java",
                "index 1408585eab..6675de6246 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java",
                "@@ -41,5 +41,5 @@ public interface AnyDAO<A extends Any<?>> extends DAO<A> {",
                "-    List<A> findByPlainAttrValue(String schemaName, PlainAttrValue attrValue, boolean ignoreCaseMatch);",
                "+    List<A> findByPlainAttrValue(String schema, PlainAttrValue attrValue, boolean ignoreCaseMatch);",
                "-    A findByPlainAttrUniqueValue(String schemaName, PlainAttrValue attrUniqueValue, boolean ignoreCaseMatch);",
                "+    A findByPlainAttrUniqueValue(String schema, PlainAttrValue attrUniqueValue, boolean ignoreCaseMatch);",
                "@@ -47,7 +47,7 @@ public interface AnyDAO<A extends Any<?>> extends DAO<A> {",
                "      * Find any objects by derived attribute value. This method could fail if one or more string literals contained",
                "-     * into the derived attribute value provided derive from identifier (schema name) replacement. When you are going to",
                "+     * into the derived attribute value provided derive from identifier (schema key) replacement. When you are going to",
                "      * specify a derived attribute expression you must be quite sure that string literals used to build the expression",
                "-     * cannot be found into the attribute values used to replace attribute schema names used as identifiers.",
                "+     * cannot be found into the attribute values used to replace attribute schema keys used as identifiers.",
                "      *",
                "-     * @param schemaName derived schema name",
                "+     * @param schema derived schema",
                "      * @param value derived attribute value",
                "@@ -56,3 +56,3 @@ public interface AnyDAO<A extends Any<?>> extends DAO<A> {",
                "      */",
                "-    List<A> findByDerAttrValue(String schemaName, String value, boolean ignoreCaseMatch);",
                "+    List<A> findByDerAttrValue(String schema, String value, boolean ignoreCaseMatch);",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AbstractSearchCond.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AbstractSearchCond.java",
                "index d84083cfc8..47e33d2f19 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AbstractSearchCond.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AbstractSearchCond.java",
                "@@ -21,6 +21,2 @@ package org.apache.syncope.core.persistence.api.dao.search;",
                " import java.io.Serializable;",
                "-import org.apache.commons.lang3.builder.EqualsBuilder;",
                "-import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;",
                "-import org.apache.commons.lang3.builder.ToStringStyle;",
                "@@ -30,19 +26,3 @@ public abstract class AbstractSearchCond implements Serializable {",
                "-    @Override",
                "-    public boolean equals(final Object obj) {",
                "-        return EqualsBuilder.reflectionEquals(this, obj);",
                "-    }",
                "-",
                "-    @Override",
                "-    public int hashCode() {",
                "-        return HashCodeBuilder.reflectionHashCode(this);",
                "-    }",
                "-",
                "-    @Override",
                "-    public String toString() {",
                "-        return ReflectionToStringBuilder.toString(this, ToStringStyle.JSON_STYLE);",
                "-    }",
                "-",
                "     public abstract boolean isValid();",
                "-",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AnyCond.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AnyCond.java",
                "index 8bc9669cf1..55736fa5c6 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AnyCond.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AnyCond.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.core.persistence.api.dao.search;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "+",
                " /**",
                "@@ -34,2 +36,7 @@ public class AnyCond extends AttributeCond {",
                "     }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return new ToStringBuilder(this).appendSuper(super.toString()).build();",
                "+    }",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AnyTypeCond.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AnyTypeCond.java",
                "index 5072fc17c3..98d5f9d8ce 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AnyTypeCond.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AnyTypeCond.java",
                "@@ -20,2 +20,6 @@ package org.apache.syncope.core.persistence.api.dao.search;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "+",
                " public class AnyTypeCond extends AbstractSearchCond {",
                "@@ -39,2 +43,32 @@ public class AnyTypeCond extends AbstractSearchCond {",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(anyTypeKey).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final AnyTypeCond other = (AnyTypeCond) obj;",
                "+        return new EqualsBuilder().",
                "+                append(anyTypeKey, other.anyTypeKey).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return new ToStringBuilder(this).",
                "+                append(anyTypeKey).",
                "+                build();",
                "+    }",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AssignableCond.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AssignableCond.java",
                "index 93a4d1cbb6..dae0a447b9 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AssignableCond.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AssignableCond.java",
                "@@ -20,2 +20,6 @@ package org.apache.syncope.core.persistence.api.dao.search;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "+",
                " public class AssignableCond extends AbstractSearchCond {",
                "@@ -53,2 +57,36 @@ public class AssignableCond extends AbstractSearchCond {",
                "     }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(realmFullPath).",
                "+                append(fromGroup).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final AssignableCond other = (AssignableCond) obj;",
                "+        return new EqualsBuilder().",
                "+                append(realmFullPath, other.realmFullPath).",
                "+                append(fromGroup, other.fromGroup).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return new ToStringBuilder(this).",
                "+                append(realmFullPath).",
                "+                append(fromGroup).",
                "+                build();",
                "+    }",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AttributeCond.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AttributeCond.java",
                "index b8e2b85ff4..c008f6918d 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AttributeCond.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AttributeCond.java",
                "@@ -20,2 +20,6 @@ package org.apache.syncope.core.persistence.api.dao.search;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "+",
                " /**",
                "@@ -85,2 +89,39 @@ public class AttributeCond extends AbstractSearchCond {",
                "     }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(type).",
                "+                append(schema).",
                "+                append(expression).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final AttributeCond other = (AttributeCond) obj;",
                "+        return new EqualsBuilder().",
                "+                append(type, other.type).",
                "+                append(schema, other.schema).",
                "+                append(expression, other.expression).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return new ToStringBuilder(this).",
                "+                append(type).",
                "+                append(schema).",
                "+                append(expression).",
                "+                build();",
                "+    }",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/DynRealmCond.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/DynRealmCond.java",
                "index e3f3590ede..20057f8c3e 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/DynRealmCond.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/DynRealmCond.java",
                "@@ -20,2 +20,6 @@ package org.apache.syncope.core.persistence.api.dao.search;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "+",
                " public class DynRealmCond extends AbstractSearchCond {",
                "@@ -38,2 +42,33 @@ public class DynRealmCond extends AbstractSearchCond {",
                "     }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(dynRealm).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final DynRealmCond other = (DynRealmCond) obj;",
                "+        return new EqualsBuilder().",
                "+                append(dynRealm, other.dynRealm).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return new ToStringBuilder(this).",
                "+                append(dynRealm).",
                "+                build();",
                "+    }",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MemberCond.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MemberCond.java",
                "index 677d65a801..e0cb715d26 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MemberCond.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MemberCond.java",
                "@@ -20,2 +20,6 @@ package org.apache.syncope.core.persistence.api.dao.search;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "+",
                " public class MemberCond extends AbstractSearchCond {",
                "@@ -39,2 +43,32 @@ public class MemberCond extends AbstractSearchCond {",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(member).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final MemberCond other = (MemberCond) obj;",
                "+        return new EqualsBuilder().",
                "+                append(member, other.member).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return new ToStringBuilder(this).",
                "+                append(member).",
                "+                build();",
                "+    }",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MembershipCond.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MembershipCond.java",
                "index 1d09753b51..ef3eed55a7 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MembershipCond.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MembershipCond.java",
                "@@ -20,2 +20,6 @@ package org.apache.syncope.core.persistence.api.dao.search;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "+",
                " public class MembershipCond extends AbstractSearchCond {",
                "@@ -38,2 +42,33 @@ public class MembershipCond extends AbstractSearchCond {",
                "     }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(group).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final MembershipCond other = (MembershipCond) obj;",
                "+        return new EqualsBuilder().",
                "+                append(group, other.group).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return new ToStringBuilder(this).",
                "+                append(group).",
                "+                build();",
                "+    }",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/OrderByClause.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/OrderByClause.java",
                "index 5fa9e79247..eb01ee2af7 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/OrderByClause.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/OrderByClause.java",
                "@@ -23,4 +23,3 @@ import org.apache.commons.lang3.builder.EqualsBuilder;",
                " import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;",
                "-import org.apache.commons.lang3.builder.ToStringStyle;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "@@ -58,4 +57,7 @@ public class OrderByClause implements Serializable {",
                "     @Override",
                "-    public boolean equals(final Object obj) {",
                "-        return EqualsBuilder.reflectionEquals(this, obj);",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(field).",
                "+                append(direction).",
                "+                build();",
                "     }",
                "@@ -63,4 +65,17 @@ public class OrderByClause implements Serializable {",
                "     @Override",
                "-    public int hashCode() {",
                "-        return HashCodeBuilder.reflectionHashCode(this);",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final OrderByClause other = (OrderByClause) obj;",
                "+        return new EqualsBuilder().",
                "+                append(field, other.field).",
                "+                append(direction, other.direction).",
                "+                build();",
                "     }",
                "@@ -69,3 +84,6 @@ public class OrderByClause implements Serializable {",
                "     public String toString() {",
                "-        return ReflectionToStringBuilder.toString(this, ToStringStyle.JSON_STYLE);",
                "+        return new ToStringBuilder(this).",
                "+                append(field).",
                "+                append(direction).",
                "+                build();",
                "     }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/PrivilegeCond.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/PrivilegeCond.java",
                "index 1647cdbe29..18369a030a 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/PrivilegeCond.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/PrivilegeCond.java",
                "@@ -20,2 +20,6 @@ package org.apache.syncope.core.persistence.api.dao.search;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "+",
                " public class PrivilegeCond extends AbstractSearchCond {",
                "@@ -38,2 +42,33 @@ public class PrivilegeCond extends AbstractSearchCond {",
                "     }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(privilege).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final PrivilegeCond other = (PrivilegeCond) obj;",
                "+        return new EqualsBuilder().",
                "+                append(privilege, other.privilege).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return new ToStringBuilder(this).",
                "+                append(privilege).",
                "+                build();",
                "+    }",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RelationshipCond.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RelationshipCond.java",
                "index 069278ed3b..16d71abf47 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RelationshipCond.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RelationshipCond.java",
                "@@ -20,2 +20,6 @@ package org.apache.syncope.core.persistence.api.dao.search;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "+",
                " public class RelationshipCond extends AbstractSearchCond {",
                "@@ -38,2 +42,33 @@ public class RelationshipCond extends AbstractSearchCond {",
                "     }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(anyObject).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final RelationshipCond other = (RelationshipCond) obj;",
                "+        return new EqualsBuilder().",
                "+                append(anyObject, other.anyObject).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return new ToStringBuilder(this).",
                "+                append(anyObject).",
                "+                build();",
                "+    }",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RelationshipTypeCond.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RelationshipTypeCond.java",
                "index d120e6223e..59f8e4993e 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RelationshipTypeCond.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RelationshipTypeCond.java",
                "@@ -20,2 +20,6 @@ package org.apache.syncope.core.persistence.api.dao.search;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "+",
                " public class RelationshipTypeCond extends AbstractSearchCond {",
                "@@ -38,2 +42,33 @@ public class RelationshipTypeCond extends AbstractSearchCond {",
                "     }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(relationshipTypeKey).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final RelationshipTypeCond other = (RelationshipTypeCond) obj;",
                "+        return new EqualsBuilder().",
                "+                append(relationshipTypeKey, other.relationshipTypeKey).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return new ToStringBuilder(this).",
                "+                append(relationshipTypeKey).",
                "+                build();",
                "+    }",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/ResourceCond.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/ResourceCond.java",
                "index a20f3e6c3d..ea87bb2a19 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/ResourceCond.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/ResourceCond.java",
                "@@ -20,2 +20,6 @@ package org.apache.syncope.core.persistence.api.dao.search;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "+",
                " /**",
                "@@ -41,2 +45,33 @@ public class ResourceCond extends AbstractSearchCond {",
                "     }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(resourceKey).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final ResourceCond other = (ResourceCond) obj;",
                "+        return new EqualsBuilder().",
                "+                append(resourceKey, other.resourceKey).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return new ToStringBuilder(this).",
                "+                append(resourceKey).",
                "+                build();",
                "+    }",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RoleCond.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RoleCond.java",
                "index 08972fa261..f543377983 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RoleCond.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RoleCond.java",
                "@@ -20,2 +20,6 @@ package org.apache.syncope.core.persistence.api.dao.search;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "+",
                " public class RoleCond extends AbstractSearchCond {",
                "@@ -38,2 +42,33 @@ public class RoleCond extends AbstractSearchCond {",
                "     }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(role).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final RoleCond other = (RoleCond) obj;",
                "+        return new EqualsBuilder().",
                "+                append(role, other.role).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return new ToStringBuilder(this).",
                "+                append(role).",
                "+                build();",
                "+    }",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java",
                "index bb1dfa2fdc..c90cdde7ad 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java",
                "@@ -21,2 +21,5 @@ package org.apache.syncope.core.persistence.api.dao.search;",
                " import java.util.List;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "@@ -394,2 +397,75 @@ public class SearchCond extends AbstractSearchCond {",
                "     }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(type).",
                "+                append(anyTypeCond).",
                "+                append(anyCond).",
                "+                append(attributeCond).",
                "+                append(relationshipCond).",
                "+                append(relationshipTypeCond).",
                "+                append(membershipCond).",
                "+                append(roleCond).",
                "+                append(privilegeCond).",
                "+                append(dynRealmCond).",
                "+                append(resourceCond).",
                "+                append(assignableCond).",
                "+                append(memberCond).",
                "+                append(leftSearchCond).",
                "+                append(rightSearchCond).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final SearchCond other = (SearchCond) obj;",
                "+        return new EqualsBuilder().",
                "+                append(type, other.type).",
                "+                append(anyTypeCond, other.anyTypeCond).",
                "+                append(anyCond, other.anyCond).",
                "+                append(attributeCond, other.attributeCond).",
                "+                append(relationshipCond, other.relationshipCond).",
                "+                append(relationshipTypeCond, other.relationshipTypeCond).",
                "+                append(membershipCond, other.membershipCond).",
                "+                append(roleCond, other.roleCond).",
                "+                append(privilegeCond, other.privilegeCond).",
                "+                append(dynRealmCond, other.dynRealmCond).",
                "+                append(resourceCond, other.resourceCond).",
                "+                append(assignableCond, other.assignableCond).",
                "+                append(memberCond, other.memberCond).",
                "+                append(leftSearchCond, other.leftSearchCond).",
                "+                append(rightSearchCond, other.rightSearchCond).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return new ToStringBuilder(this).",
                "+                append(type).",
                "+                append(anyTypeCond).",
                "+                append(anyCond).",
                "+                append(attributeCond).",
                "+                append(relationshipCond).",
                "+                append(relationshipTypeCond).",
                "+                append(membershipCond).",
                "+                append(roleCond).",
                "+                append(privilegeCond).",
                "+                append(dynRealmCond).",
                "+                append(resourceCond).",
                "+                append(assignableCond).",
                "+                append(memberCond).",
                "+                append(leftSearchCond).",
                "+                append(rightSearchCond).",
                "+                build();",
                "+    }",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java",
                "index 05bd85a47b..90b3c96ff0 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java",
                "@@ -20,2 +20,3 @@ package org.apache.syncope.core.persistence.api.entity;",
                "+import java.lang.reflect.Field;",
                " import java.util.Set;",
                "@@ -33,3 +34,3 @@ public interface AnyUtils {",
                "-    boolean isFieldName(String name);",
                "+    Field getField(String name);",
                "diff --git a/core/persistence-jpa/pom.xml b/core/persistence-jpa/pom.xml",
                "index 6ce92f83c9..9ca8908526 100644",
                "--- a/core/persistence-jpa/pom.xml",
                "+++ b/core/persistence-jpa/pom.xml",
                "@@ -57,6 +57,2 @@ under the License.",
                "     </dependency>",
                "-    <dependency>",
                "-      <groupId>com.fasterxml.uuid</groupId>",
                "-      <artifactId>java-uuid-generator</artifactId>",
                "-    </dependency>",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/MultiParentNode.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/MultiParentNode.java",
                "index 232e22a483..dbe1cf1720 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/MultiParentNode.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/MultiParentNode.java",
                "@@ -24,2 +24,3 @@ import org.apache.commons.lang3.builder.EqualsBuilder;",
                " import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "@@ -95,5 +96,31 @@ class MultiParentNode<T> {",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(object).",
                "+                append(children).",
                "+                append(level).",
                "+                append(exploited).",
                "+                build();",
                "+    }",
                "+",
                "     @Override",
                "     public boolean equals(final Object obj) {",
                "-        return EqualsBuilder.reflectionEquals(this, obj);",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        @SuppressWarnings(\"unchecked\")",
                "+        final MultiParentNode<T> other = (MultiParentNode<T>) obj;",
                "+        return new EqualsBuilder().",
                "+                append(object, other.object).",
                "+                append(children, other.children).",
                "+                append(level, other.level).",
                "+                append(exploited, other.exploited).",
                "+                build();",
                "     }",
                "@@ -101,4 +128,9 @@ class MultiParentNode<T> {",
                "     @Override",
                "-    public int hashCode() {",
                "-        return HashCodeBuilder.reflectionHashCode(this);",
                "+    public String toString() {",
                "+        return new ToStringBuilder(this).",
                "+                append(object).",
                "+                append(children).",
                "+                append(level).",
                "+                append(exploited).",
                "+                build();",
                "     }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java",
                "index 567a6fc070..3320bb62e6 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java",
                "@@ -201,3 +201,3 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "         if (schema == null) {",
                "-            LOG.error(\"Invalid schema name '{}'\", schemaKey);",
                "+            LOG.error(\"Invalid schema '{}'\", schemaKey);",
                "             return Collections.<A>emptyList();",
                "@@ -239,3 +239,3 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "         if (schema == null) {",
                "-            LOG.error(\"Invalid schema name '{}'\", schemaKey);",
                "+            LOG.error(\"Invalid schema '{}'\", schemaKey);",
                "             return null;",
                "@@ -250,3 +250,3 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "                 ? null",
                "-                : result.iterator().next();",
                "+                : result.get(0);",
                "     }",
                "@@ -279,3 +279,3 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "-        // Schema names",
                "+        // Schema keys",
                "         List<String> identifiers = new ArrayList<>();",
                "@@ -285,3 +285,3 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "-        // Get schema names and literals",
                "+        // Get schema keys and literals",
                "         for (Token token = parser.getNextToken(); token != null && StringUtils.isNotBlank(token.toString());",
                "@@ -299,12 +299,12 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "         // Sort literals in order to process later literals included into others",
                "-        Collections.sort(literals, (final String t, final String t1) -> {",
                "-            if (t == null && t1 == null) {",
                "+        Collections.sort(literals, (l1, l2) -> {",
                "+            if (l1 == null && l2 == null) {",
                "                 return 0;",
                "-            } else if (t != null && t1 == null) {",
                "+            } else if (l1 != null && l2 == null) {",
                "                 return -1;",
                "-            } else if (t == null && t1 != null) {",
                "+            } else if (l1 == null && l2 != null) {",
                "                 return 1;",
                "-            } else if (t.length() == t1.length()) {",
                "+            } else if (l1.length() == l2.length()) {",
                "                 return 0;",
                "-            } else if (t.length() > t1.length()) {",
                "+            } else if (l1.length() > l2.length()) {",
                "                 return -1;",
                "@@ -345,3 +345,3 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "-                    // set schema name",
                "+                    // set schema key",
                "                     bld.append(\"s.id = '\").append(identifiers.get(i)).append(\"'\");",
                "@@ -398,3 +398,3 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "         if (schema == null) {",
                "-            LOG.error(\"Invalid schema name '{}'\", schemaKey);",
                "+            LOG.error(\"Invalid schema '{}'\", schemaKey);",
                "             return Collections.<A>emptyList();",
                "@@ -553,3 +553,2 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "     }",
                "-",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "index 178fa004b1..0d35ccb6af 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "@@ -34,3 +34,2 @@ import org.apache.commons.lang3.ArrayUtils;",
                " import org.apache.commons.lang3.ClassUtils;",
                "-import org.apache.commons.lang3.SerializationUtils;",
                " import org.apache.commons.lang3.tuple.Pair;",
                "@@ -59,2 +58,3 @@ import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                " import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;",
                "+import org.apache.syncope.core.persistence.api.entity.EntityFactory;",
                " import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "@@ -66,3 +66,2 @@ import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.util.ReflectionUtils;",
                "@@ -92,2 +91,5 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "+    @Autowired",
                "+    protected EntityFactory entityFactory;",
                "+",
                "     @Autowired",
                "@@ -177,18 +179,19 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "     protected Triple<PlainSchema, PlainAttrValue, AnyCond> check(final AnyCond cond, final AnyTypeKind kind) {",
                "-        AnyCond condClone = SerializationUtils.clone(cond);",
                "+        AnyCond computed = new AnyCond(cond.getType());",
                "+        computed.setSchema(cond.getSchema());",
                "+        computed.setExpression(cond.getExpression());",
                "-        AnyUtils attrUtils = anyUtilsFactory.getInstance(kind);",
                "+        AnyUtils anyUtils = anyUtilsFactory.getInstance(kind);",
                "-        // Keeps track of difference between entity's getKey() and JPA @Id fields",
                "-        if (\"key\".equals(condClone.getSchema())) {",
                "-            condClone.setSchema(\"id\");",
                "-        }",
                "-",
                "-        Field anyField = ReflectionUtils.findField(attrUtils.anyClass(), condClone.getSchema());",
                "+        Field anyField = anyUtils.getField(computed.getSchema());",
                "         if (anyField == null) {",
                "-            LOG.warn(\"Ignoring invalid schema '{}'\", condClone.getSchema());",
                "+            LOG.warn(\"Ignoring invalid field '{}'\", computed.getSchema());",
                "             throw new IllegalArgumentException();",
                "         }",
                "+        // Keeps track of difference between entity's getKey() and JPA @Id fields",
                "+        if (\"key\".equals(computed.getSchema())) {",
                "+            computed.setSchema(\"id\");",
                "+        }",
                "-        PlainSchema schema = new JPAPlainSchema();",
                "+        PlainSchema schema = entityFactory.newEntity(PlainSchema.class);",
                "         schema.setKey(anyField.getName());",
                "@@ -226,3 +229,3 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "             if (relMethod != null && String.class.isAssignableFrom(relMethod.getReturnType())) {",
                "-                condClone.setSchema(condClone.getSchema() + \"_id\");",
                "+                computed.setSchema(computed.getSchema() + \"_id\");",
                "                 schema.setType(AttrSchemaType.String);",
                "@@ -231,12 +234,12 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "-        PlainAttrValue attrValue = attrUtils.newPlainAttrValue();",
                "-        if (condClone.getType() != AttributeCond.Type.LIKE",
                "-                && condClone.getType() != AttributeCond.Type.ILIKE",
                "-                && condClone.getType() != AttributeCond.Type.ISNULL",
                "-                && condClone.getType() != AttributeCond.Type.ISNOTNULL) {",
                "+        PlainAttrValue attrValue = anyUtils.newPlainAttrValue();",
                "+        if (computed.getType() != AttributeCond.Type.LIKE",
                "+                && computed.getType() != AttributeCond.Type.ILIKE",
                "+                && computed.getType() != AttributeCond.Type.ISNULL",
                "+                && computed.getType() != AttributeCond.Type.ISNOTNULL) {",
                "             try {",
                "-                ((JPAPlainSchema) schema).validator().validate(condClone.getExpression(), attrValue);",
                "+                ((JPAPlainSchema) schema).validator().validate(computed.getExpression(), attrValue);",
                "             } catch (ValidationException e) {",
                "-                LOG.error(\"Could not validate expression '\" + condClone.getExpression() + \"'\", e);",
                "+                LOG.error(\"Could not validate expression '\" + computed.getExpression() + \"'\", e);",
                "                 throw new IllegalArgumentException();",
                "@@ -245,3 +248,3 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "-        return Triple.of(schema, attrValue, condClone);",
                "+        return Triple.of(schema, attrValue, computed);",
                "     }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "index c6ebca16dc..0a04ac01e8 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "@@ -55,2 +55,3 @@ import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                " import org.apache.syncope.core.persistence.api.entity.DynRealm;",
                "+import org.apache.syncope.core.persistence.api.entity.Entity;",
                " import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "@@ -58,3 +59,2 @@ import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                " import org.apache.syncope.core.persistence.api.entity.Realm;",
                "-import org.springframework.util.ReflectionUtils;",
                "@@ -65,5 +65,5 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    private static final String EMPTY_QUERY = \"SELECT any_id FROM user_search_attr WHERE 1=2\";",
                "+    protected static final String EMPTY_QUERY = \"SELECT any_id FROM user_search WHERE 1=2\";",
                "-    private static final String[] RELATIONSHIP_FIELDS = new String[] { \"realm\", \"userOwner\", \"groupOwner\" };",
                "+    protected static final String[] RELATIONSHIP_FIELDS = new String[] { \"realm\", \"userOwner\", \"groupOwner\" };",
                "@@ -85,3 +85,3 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "                     realmKeys.addAll(realmDAO.findDescendants(realm).stream().",
                "-                            map(r -> r.getKey()).collect(Collectors.toSet()));",
                "+                            map(Entity::getKey).collect(Collectors.toSet()));",
                "                 }",
                "@@ -98,3 +98,3 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "             realmKeys.addAll(realmDAO.findAll().stream().",
                "-                    map(r -> r.getKey()).collect(Collectors.toSet()));",
                "+                    map(Entity::getKey).collect(Collectors.toSet()));",
                "         }",
                "@@ -121,7 +121,11 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "+    SearchSupport buildSearchSupport(final AnyTypeKind kind) {",
                "+        return new SearchViewSupport(kind);",
                "+    }",
                "+",
                "     @Override",
                "     protected int doCount(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind kind) {",
                "-        List<Object> parameters = Collections.synchronizedList(new ArrayList<>());",
                "+        List<Object> parameters = new ArrayList<>();",
                "-        SearchSupport svs = new SearchSupport(kind);",
                "+        SearchSupport svs = buildSearchSupport(kind);",
                "@@ -157,5 +161,5 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "         try {",
                "-            List<Object> parameters = Collections.synchronizedList(new ArrayList<>());",
                "+            List<Object> parameters = new ArrayList<>();",
                "-            SearchSupport svs = new SearchSupport(kind);",
                "+            SearchSupport svs = buildSearchSupport(kind);",
                "@@ -201,10 +205,5 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    private int setParameter(final List<Object> parameters, final Object parameter) {",
                "-        int key;",
                "-        synchronized (parameters) {",
                "-            parameters.add(parameter);",
                "-            key = parameters.size();",
                "-        }",
                "-",
                "-        return key;",
                "+    protected int setParameter(final List<Object> parameters, final Object parameter) {",
                "+        parameters.add(parameter);",
                "+        return parameters.size();",
                "     }",
                "@@ -226,3 +225,3 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "     private StringBuilder buildSelect(final OrderBySupport obs) {",
                "-        final StringBuilder select = new StringBuilder(\"SELECT u.any_id\");",
                "+        StringBuilder select = new StringBuilder(\"SELECT u.any_id\");",
                "@@ -236,7 +235,6 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    private StringBuilder buildWhere(final SearchSupport svs, final OrderBySupport obs) {",
                "-        StringBuilder where = new StringBuilder(\" u\");",
                "+    protected void processOBS(final SearchSupport svs, final OrderBySupport obs, final StringBuilder where) {",
                "         obs.views.forEach(searchView -> {",
                "             where.append(',');",
                "-            if (searchView.name.equals(svs.attr().name)) {",
                "+            if (searchView.name.equals(svs.asSearchViewSupport().attr().name)) {",
                "                 where.append(\" (SELECT * FROM \").append(searchView.name);",
                "@@ -244,3 +242,3 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "                 if (svs.nonMandatorySchemas || obs.nonMandatorySchemas) {",
                "-                    where.append(\" UNION SELECT * FROM \").append(svs.nullAttr().name);",
                "+                    where.append(\" UNION SELECT * FROM \").append(svs.asSearchViewSupport().nullAttr().name);",
                "                 }",
                "@@ -253,2 +251,7 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "         });",
                "+    }",
                "+",
                "+    private StringBuilder buildWhere(final SearchSupport svs, final OrderBySupport obs) {",
                "+        StringBuilder where = new StringBuilder(\" u\");",
                "+        processOBS(svs, obs, where);",
                "         where.append(\" WHERE \");",
                "@@ -281,6 +284,43 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "+    protected void parseOrderByForPlainSchema(",
                "+            final SearchSupport svs,",
                "+            final OrderBySupport obs,",
                "+            final OrderBySupport.Item item,",
                "+            final OrderByClause clause,",
                "+            final PlainSchema schema,",
                "+            final String fieldName) {",
                "+",
                "+        // keep track of involvement of non-mandatory schemas in the order by clauses",
                "+        obs.nonMandatorySchemas = !\"true\".equals(schema.getMandatoryCondition());",
                "+",
                "+        if (schema.isUniqueConstraint()) {",
                "+            obs.views.add(svs.asSearchViewSupport().uniqueAttr());",
                "+",
                "+            item.select = new StringBuilder().",
                "+                    append(svs.asSearchViewSupport().uniqueAttr().alias).append('.').",
                "+                    append(svs.fieldName(schema.getType())).",
                "+                    append(\" AS \").append(fieldName).toString();",
                "+            item.where = new StringBuilder().",
                "+                    append(svs.asSearchViewSupport().uniqueAttr().alias).",
                "+                    append(\".schema_id='\").append(fieldName).append(\"'\").toString();",
                "+            item.orderBy = fieldName + \" \" + clause.getDirection().name();",
                "+        } else {",
                "+            obs.views.add(svs.asSearchViewSupport().attr());",
                "+",
                "+            item.select = new StringBuilder().",
                "+                    append(svs.asSearchViewSupport().attr().alias).append('.').append(svs.fieldName(schema.getType())).",
                "+                    append(\" AS \").append(fieldName).toString();",
                "+            item.where = new StringBuilder().",
                "+                    append(svs.asSearchViewSupport().attr().alias).",
                "+                    append(\".schema_id='\").append(fieldName).append(\"'\").toString();",
                "+            item.orderBy = fieldName + \" \" + clause.getDirection().name();",
                "+        }",
                "+    }",
                "+",
                "     private OrderBySupport parseOrderBy(",
                "-            final AnyTypeKind kind, final SearchSupport svs, final List<OrderByClause> orderBy) {",
                "+            final AnyTypeKind kind,",
                "+            final SearchSupport svs,",
                "+            final List<OrderByClause> orderBy) {",
                "-        AnyUtils attrUtils = anyUtilsFactory.getInstance(kind);",
                "+        AnyUtils anyUtils = anyUtilsFactory.getInstance(kind);",
                "@@ -291,34 +331,11 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-            // Manage difference among external key attribute and internal JPA @Id",
                "-            String fieldName = \"key\".equals(clause.getField()) ? \"id\" : clause.getField();",
                "-",
                "-            if (ReflectionUtils.findField(attrUtils.anyClass(), fieldName) == null) {",
                "-                PlainSchema schema = schemaDAO.find(fieldName);",
                "+            if (anyUtils.getField(clause.getField()) == null) {",
                "+                PlainSchema schema = schemaDAO.find(clause.getField());",
                "                 if (schema != null) {",
                "-                    // keep track of involvement of non-mandatory schemas in the order by clauses",
                "-                    obs.nonMandatorySchemas = !\"true\".equals(schema.getMandatoryCondition());",
                "-",
                "-                    if (schema.isUniqueConstraint()) {",
                "-                        obs.views.add(svs.uniqueAttr());",
                "-",
                "-                        item.select = new StringBuilder().",
                "-                                append(svs.uniqueAttr().alias).append('.').append(svs.fieldName(schema.getType())).",
                "-                                append(\" AS \").append(fieldName).toString();",
                "-                        item.where = new StringBuilder().",
                "-                                append(svs.uniqueAttr().alias).",
                "-                                append(\".schema_id='\").append(fieldName).append(\"'\").toString();",
                "-                        item.orderBy = fieldName + \" \" + clause.getDirection().name();",
                "-                    } else {",
                "-                        obs.views.add(svs.attr());",
                "-",
                "-                        item.select = new StringBuilder().",
                "-                                append(svs.attr().alias).append('.').append(svs.fieldName(schema.getType())).",
                "-                                append(\" AS \").append(fieldName).toString();",
                "-                        item.where = new StringBuilder().",
                "-                                append(svs.attr().alias).",
                "-                                append(\".schema_id='\").append(fieldName).append(\"'\").toString();",
                "-                        item.orderBy = fieldName + \" \" + clause.getDirection().name();",
                "-                    }",
                "+                    parseOrderByForPlainSchema(svs, obs, item, clause, schema, clause.getField());",
                "                 }",
                "             } else {",
                "+                // Manage difference among external key attribute and internal JPA @Id",
                "+                String fieldName = \"key\".equals(clause.getField()) ? \"id\" : clause.getField();",
                "+",
                "                 // Adjust field name to column name",
                "@@ -421,4 +438,7 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    private String getQuery(",
                "-            final AnyTypeCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {",
                "+    protected String getQuery(",
                "+            final AnyTypeCond cond,",
                "+            final boolean not,",
                "+            final List<Object> parameters,",
                "+            final SearchSupport svs) {",
                "@@ -438,3 +458,3 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    private String getQuery(",
                "+    protected String getQuery(",
                "             final RelationshipTypeCond cond,",
                "@@ -464,4 +484,7 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    private String getQuery(",
                "-            final RelationshipCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {",
                "+    protected String getQuery(",
                "+            final RelationshipCond cond,",
                "+            final boolean not,",
                "+            final List<Object> parameters,",
                "+            final SearchSupport svs) {",
                "@@ -491,4 +514,7 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    private String getQuery(",
                "-            final MembershipCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {",
                "+    protected String getQuery(",
                "+            final MembershipCond cond,",
                "+            final boolean not,",
                "+            final List<Object> parameters,",
                "+            final SearchSupport svs) {",
                "@@ -529,4 +555,7 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    private String getQuery(",
                "-            final RoleCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {",
                "+    protected String getQuery(",
                "+            final RoleCond cond,",
                "+            final boolean not,",
                "+            final List<Object> parameters,",
                "+            final SearchSupport svs) {",
                "@@ -560,4 +589,7 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    private String getQuery(",
                "-            final PrivilegeCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {",
                "+    protected String getQuery(",
                "+            final PrivilegeCond cond,",
                "+            final boolean not,",
                "+            final List<Object> parameters,",
                "+            final SearchSupport svs) {",
                "@@ -591,4 +623,7 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    private String getQuery(",
                "-            final DynRealmCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {",
                "+    protected String getQuery(",
                "+            final DynRealmCond cond,",
                "+            final boolean not,",
                "+            final List<Object> parameters,",
                "+            final SearchSupport svs) {",
                "@@ -611,4 +646,7 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    private String getQuery(",
                "-            final ResourceCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {",
                "+    protected String getQuery(",
                "+            final ResourceCond cond,",
                "+            final boolean not,",
                "+            final List<Object> parameters,",
                "+            final SearchSupport svs) {",
                "@@ -640,3 +678,7 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    private String getQuery(final AssignableCond cond, final List<Object> parameters, final SearchSupport svs) {",
                "+    protected String getQuery(",
                "+            final AssignableCond cond,",
                "+            final List<Object> parameters,",
                "+            final SearchSupport svs) {",
                "+",
                "         Realm realm;",
                "@@ -666,4 +708,7 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    private String getQuery(",
                "-            final MemberCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {",
                "+    protected String getQuery(",
                "+            final MemberCond cond,",
                "+            final boolean not,",
                "+            final List<Object> parameters,",
                "+            final SearchSupport svs) {",
                "@@ -768,3 +813,3 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "                 }",
                "-                if ((schema.getType() == AttrSchemaType.String ",
                "+                if ((schema.getType() == AttrSchemaType.String",
                "                         || schema.getType() == AttrSchemaType.Enum) && ignoreCase) {",
                "@@ -820,4 +865,7 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    private String getQuery(",
                "-            final AttributeCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {",
                "+    protected String getQuery(",
                "+            final AttributeCond cond,",
                "+            final boolean not,",
                "+            final List<Object> parameters,",
                "+            final SearchSupport svs) {",
                "@@ -835,3 +883,3 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "                         append(\" WHERE any_id NOT IN (SELECT any_id FROM \").",
                "-                        append(svs.nullAttr().name).",
                "+                        append(svs.asSearchViewSupport().nullAttr().name).",
                "                         append(\" WHERE schema_id='\").append(checked.getLeft().getKey()).append(\"')\");",
                "@@ -840,3 +888,3 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "             case ISNULL:",
                "-                query.append(svs.nullAttr().name).",
                "+                query.append(svs.asSearchViewSupport().nullAttr().name).",
                "                         append(\" WHERE schema_id='\").append(checked.getLeft().getKey()).append(\"'\");",
                "@@ -846,5 +894,5 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "                 if (checked.getLeft().isUniqueConstraint()) {",
                "-                    query.append(svs.uniqueAttr().name);",
                "+                    query.append(svs.asSearchViewSupport().uniqueAttr().name);",
                "                 } else {",
                "-                    query.append(svs.attr().name);",
                "+                    query.append(svs.asSearchViewSupport().attr().name);",
                "                 }",
                "@@ -857,4 +905,7 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    private String getQuery(",
                "-            final AnyCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {",
                "+    protected String getQuery(",
                "+            final AnyCond cond,",
                "+            final boolean not,",
                "+            final List<Object> parameters,",
                "+            final SearchSupport svs) {",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java",
                "index 7657112b97..b9d2f01999 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java",
                "@@ -104,4 +104,4 @@ public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO",
                "                     matching.forEach(any -> {",
                "-                        Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE",
                "-                                + \" VALUES(?, ?)\");",
                "+                        Query insert = entityManager().createNativeQuery(",
                "+                                \"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");",
                "                         insert.setParameter(1, any.getKey());",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java",
                "index de8f5ec6dd..e26ce3127a 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java",
                "@@ -161,4 +161,4 @@ public class JPAReportExecDAO extends AbstractDAO<ReportExec> implements ReportE",
                "-    @Override",
                "     @Transactional(rollbackFor = Throwable.class)",
                "+    @Override",
                "     public ReportExec save(final ReportExec execution) {",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/OrderBySupport.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/OrderBySupport.java",
                "index ec87f5b283..0f31c57fa8 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/OrderBySupport.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/OrderBySupport.java",
                "@@ -25,5 +25,5 @@ import java.util.Set;",
                "-class OrderBySupport {",
                "+public class OrderBySupport {",
                "-    static class Item {",
                "+    public static class Item {",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java",
                "index aa65aea718..3304a7080d 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java",
                "@@ -25,5 +25,5 @@ import org.apache.syncope.common.lib.types.AttrSchemaType;",
                "-class SearchSupport {",
                "+public class SearchSupport {",
                "-    static class SearchView {",
                "+    public static class SearchView {",
                "@@ -39,4 +39,7 @@ class SearchSupport {",
                "         @Override",
                "-        public boolean equals(final Object obj) {",
                "-            return EqualsBuilder.reflectionEquals(this, obj);",
                "+        public int hashCode() {",
                "+            return new HashCodeBuilder().",
                "+                    append(alias).",
                "+                    append(name).",
                "+                    build();",
                "         }",
                "@@ -44,4 +47,17 @@ class SearchSupport {",
                "         @Override",
                "-        public int hashCode() {",
                "-            return HashCodeBuilder.reflectionHashCode(this);",
                "+        public boolean equals(final Object obj) {",
                "+            if (this == obj) {",
                "+                return true;",
                "+            }",
                "+            if (obj == null) {",
                "+                return false;",
                "+            }",
                "+            if (getClass() != obj.getClass()) {",
                "+                return false;",
                "+            }",
                "+            final SearchView other = (SearchView) obj;",
                "+            return new EqualsBuilder().",
                "+                    append(alias, other.alias).",
                "+                    append(name, other.name).",
                "+                    build();",
                "         }",
                "@@ -53,3 +69,3 @@ class SearchSupport {",
                "-    SearchSupport(final AnyTypeKind anyTypeKind) {",
                "+    public SearchSupport(final AnyTypeKind anyTypeKind) {",
                "         this.anyTypeKind = anyTypeKind;",
                "@@ -90,3 +106,3 @@ class SearchSupport {",
                "     public SearchView field() {",
                "-        String result = \"\";",
                "+        String result;",
                "@@ -110,6 +126,2 @@ class SearchSupport {",
                "-    public SearchView attr() {",
                "-        return new SearchView(\"sva\", field().name + \"_attr\");",
                "-    }",
                "-",
                "     public SearchView relationship() {",
                "@@ -149,6 +161,2 @@ class SearchSupport {",
                "-    public SearchView nullAttr() {",
                "-        return new SearchView(\"svna\", field().name + \"_null_attr\");",
                "-    }",
                "-",
                "     public SearchView resource() {",
                "@@ -161,6 +169,2 @@ class SearchSupport {",
                "-    public SearchView uniqueAttr() {",
                "-        return new SearchView(\"svua\", field().name + \"_unique_attr\");",
                "-    }",
                "-",
                "     public SearchView entitlements() {",
                "@@ -168,2 +172,9 @@ class SearchSupport {",
                "     }",
                "+",
                "+    SearchViewSupport asSearchViewSupport() {",
                "+        if (this instanceof SearchViewSupport) {",
                "+            return (SearchViewSupport) this;",
                "+        }",
                "+        throw new IllegalArgumentException(\"Not an \" + SearchViewSupport.class + \" instance\");",
                "+    }",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchViewSupport.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchViewSupport.java",
                "new file mode 100644",
                "index 0000000000..9dc95d84a9",
                "--- /dev/null",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchViewSupport.java",
                "@@ -0,0 +1,40 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.dao;",
                "+",
                "+import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "+",
                "+public class SearchViewSupport extends SearchSupport {",
                "+",
                "+    public SearchViewSupport(final AnyTypeKind anyTypeKind) {",
                "+        super(anyTypeKind);",
                "+    }",
                "+",
                "+    public SearchView attr() {",
                "+        return new SearchView(\"sva\", field().name + \"_attr\");",
                "+    }",
                "+",
                "+    public SearchView nullAttr() {",
                "+        return new SearchView(\"svna\", field().name + \"_null_attr\");",
                "+    }",
                "+",
                "+    public SearchView uniqueAttr() {",
                "+        return new SearchView(\"svua\", field().name + \"_unique_attr\");",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractEntity.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractEntity.java",
                "index 7c9fdf7a87..93e281e0b7 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractEntity.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractEntity.java",
                "@@ -20,8 +20,3 @@ package org.apache.syncope.core.persistence.jpa.entity;",
                "-import java.beans.PropertyDescriptor;",
                "-import java.util.Collections;",
                "-import java.util.HashSet;",
                "-import java.util.Set;",
                "-import org.apache.commons.lang3.builder.EqualsBuilder;",
                "-import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import java.util.Objects;",
                " import org.apache.syncope.common.lib.types.ImplementationType;",
                "@@ -31,3 +26,2 @@ import org.slf4j.Logger;",
                " import org.slf4j.LoggerFactory;",
                "-import org.springframework.beans.BeanUtils;",
                "@@ -51,22 +45,12 @@ public abstract class AbstractEntity implements Entity {",
                "-    /**",
                "-     * @return fields to be excluded when computing equals() or hashcode()",
                "-     */",
                "-    private String[] getExcludeFields() {",
                "-        Set<String> excludeFields = new HashSet<>();",
                "-",
                "-        for (PropertyDescriptor propDesc : BeanUtils.getPropertyDescriptors(getClass())) {",
                "-            if (propDesc.getPropertyType().isInstance(Collections.emptySet())",
                "-                    || propDesc.getPropertyType().isInstance(Collections.emptyList())) {",
                "-",
                "-                excludeFields.add(propDesc.getName());",
                "-            }",
                "-        }",
                "-",
                "-        return excludeFields.toArray(new String[] {});",
                "-    }",
                "-",
                "     @Override",
                "     public boolean equals(final Object obj) {",
                "-        return EqualsBuilder.reflectionEquals(this, obj, getExcludeFields());",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (!(obj instanceof AbstractEntity)) {",
                "+            return false;",
                "+        }",
                "+        AbstractEntity entity = (AbstractEntity) obj;",
                "+        return Objects.equals(getKey(), entity.getKey());",
                "     }",
                "@@ -75,3 +59,3 @@ public abstract class AbstractEntity implements Entity {",
                "     public int hashCode() {",
                "-        return HashCodeBuilder.reflectionHashCode(this, getExcludeFields());",
                "+        return Objects.hash(getKey());",
                "     }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractGeneratedKeyEntity.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractGeneratedKeyEntity.java",
                "index c642ea3f62..c795d078d2 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractGeneratedKeyEntity.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractGeneratedKeyEntity.java",
                "@@ -21,4 +21,2 @@ package org.apache.syncope.core.persistence.jpa.entity;",
                " import javax.persistence.Column;",
                "-import javax.persistence.GeneratedValue;",
                "-import javax.persistence.GenerationType;",
                " import javax.persistence.Id;",
                "@@ -32,3 +30,2 @@ public abstract class AbstractGeneratedKeyEntity extends AbstractEntity {",
                "     @Id",
                "-    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"uuid\")",
                "     @Column(length = 36)",
                "@@ -41,2 +38,5 @@ public abstract class AbstractGeneratedKeyEntity extends AbstractEntity {",
                "+    public void setKey(final String key) {",
                "+        this.id = key;",
                "+    }",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractProvidedKeyEntity.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractProvidedKeyEntity.java",
                "index 3709584955..f50f095342 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractProvidedKeyEntity.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractProvidedKeyEntity.java",
                "@@ -41,3 +41,2 @@ public abstract class AbstractProvidedKeyEntity extends AbstractEntity implement",
                "     }",
                "-",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java",
                "index 70f62c6335..aa8651922a 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java",
                "@@ -23,2 +23,3 @@ import java.lang.reflect.Modifier;",
                " import java.util.Collection;",
                "+import java.util.HashMap;",
                " import java.util.HashSet;",
                "@@ -45,2 +46,3 @@ import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;",
                " import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                "+import org.apache.syncope.core.persistence.api.entity.EntityFactory;",
                " import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "@@ -49,17 +51,17 @@ import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                " import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;",
                " import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;",
                "+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;",
                " import org.apache.syncope.core.persistence.api.entity.group.Group;",
                " import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;",
                " import org.apache.syncope.core.persistence.api.entity.user.User;",
                "-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttr;",
                "-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue;",
                "-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;",
                " import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;",
                "-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;",
                "-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;",
                "-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;",
                " import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;",
                "-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;",
                "-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;",
                "-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;",
                " import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;",
                "@@ -75,15 +77,15 @@ public class JPAAnyUtils implements AnyUtils {",
                "-    private static final Set<String> USER_FIELD_NAMES = new HashSet<>();",
                "+    private static final Map<String, Field> USER_FIELDS = new HashMap<>();",
                "-    private static final Set<String> GROUP_FIELD_NAMES = new HashSet<>();",
                "+    private static final Map<String, Field> GROUP_FIELDS = new HashMap<>();",
                "-    private static final Set<String> ANY_OBJECT_FIELD_NAMES = new HashSet<>();",
                "+    private static final Map<String, Field> ANY_OBJECT_FIELDS = new HashMap<>();",
                "     static {",
                "-        initFieldNames(JPAUser.class, USER_FIELD_NAMES);",
                "-        initFieldNames(JPAGroup.class, GROUP_FIELD_NAMES);",
                "-        initFieldNames(JPAAnyObject.class, ANY_OBJECT_FIELD_NAMES);",
                "+        initFieldNames(JPAUser.class, USER_FIELDS);",
                "+        initFieldNames(JPAGroup.class, GROUP_FIELDS);",
                "+        initFieldNames(JPAAnyObject.class, ANY_OBJECT_FIELDS);",
                "     }",
                "-    private static void initFieldNames(final Class<?> entityClass, final Set<String> keys) {",
                "+    private static void initFieldNames(final Class<?> entityClass, final Map<String, Field> fields) {",
                "         List<Class<?>> classes = ClassUtils.getAllSuperclasses(entityClass);",
                "@@ -97,3 +99,6 @@ public class JPAAnyUtils implements AnyUtils {",
                "-                    keys.add(\"id\".equals(field.getName()) ? \"key\" : field.getName());",
                "+                    fields.put(field.getName(), field);",
                "+                    if (\"id\".equals(field.getName())) {",
                "+                        fields.put(\"key\", field);",
                "+                    }",
                "                 }",
                "@@ -104,5 +109,5 @@ public class JPAAnyUtils implements AnyUtils {",
                "     public static boolean matchesFieldName(final String candidate) {",
                "-        return USER_FIELD_NAMES.contains(candidate)",
                "-                || GROUP_FIELD_NAMES.contains(candidate)",
                "-                || ANY_OBJECT_FIELD_NAMES.contains(candidate);",
                "+        return USER_FIELDS.containsKey(candidate)",
                "+                || GROUP_FIELDS.containsKey(candidate)",
                "+                || ANY_OBJECT_FIELDS.containsKey(candidate);",
                "     }",
                "@@ -120,2 +125,5 @@ public class JPAAnyUtils implements AnyUtils {",
                "+    @Autowired",
                "+    private EntityFactory entityFactory;",
                "+",
                "     protected JPAAnyUtils(final AnyTypeKind typeKind) {",
                "@@ -135,3 +143,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             case GROUP:",
                "-                result = JPAGroup.class;",
                "+                result = entityFactory.newEntity(Group.class).getClass();",
                "                 break;",
                "@@ -139,3 +147,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             case ANY_OBJECT:",
                "-                result = JPAAnyObject.class;",
                "+                result = entityFactory.newEntity(AnyObject.class).getClass();",
                "                 break;",
                "@@ -144,3 +152,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             default:",
                "-                result = JPAUser.class;",
                "+                result = entityFactory.newEntity(User.class).getClass();",
                "         }",
                "@@ -151,4 +159,4 @@ public class JPAAnyUtils implements AnyUtils {",
                "     @Override",
                "-    public boolean isFieldName(final String name) {",
                "-        Set<String> names;",
                "+    public Field getField(final String name) {",
                "+        Map<String, Field> fields;",
                "@@ -156,3 +164,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             case GROUP:",
                "-                names = GROUP_FIELD_NAMES;",
                "+                fields = GROUP_FIELDS;",
                "                 break;",
                "@@ -160,3 +168,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             case ANY_OBJECT:",
                "-                names = ANY_OBJECT_FIELD_NAMES;",
                "+                fields = ANY_OBJECT_FIELDS;",
                "                 break;",
                "@@ -165,3 +173,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             default:",
                "-                names = USER_FIELD_NAMES;",
                "+                fields = USER_FIELDS;",
                "                 break;",
                "@@ -169,3 +177,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "-        return names.contains(name);",
                "+        return fields.get(name);",
                "     }",
                "@@ -173,21 +181,5 @@ public class JPAAnyUtils implements AnyUtils {",
                "     @Override",
                "+    @SuppressWarnings(\"unchecked\")",
                "     public <T extends PlainAttr<?>> Class<T> plainAttrClass() {",
                "-        Class result;",
                "-",
                "-        switch (anyTypeKind) {",
                "-            case GROUP:",
                "-                result = JPAGPlainAttr.class;",
                "-                break;",
                "-",
                "-            case ANY_OBJECT:",
                "-                result = JPAAPlainAttr.class;",
                "-                break;",
                "-",
                "-            case USER:",
                "-            default:",
                "-                result = JPAUPlainAttr.class;",
                "-                break;",
                "-        }",
                "-",
                "-        return result;",
                "+        return (Class<T>) newPlainAttr().getClass();",
                "     }",
                "@@ -200,3 +192,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             case USER:",
                "-                result = (T) new JPAUPlainAttr();",
                "+                result = (T) entityFactory.newEntity(UPlainAttr.class);",
                "                 break;",
                "@@ -204,3 +196,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             case GROUP:",
                "-                result = (T) new JPAGPlainAttr();",
                "+                result = (T) entityFactory.newEntity(GPlainAttr.class);",
                "                 break;",
                "@@ -208,3 +200,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             case ANY_OBJECT:",
                "-                result = (T) new JPAAPlainAttr();",
                "+                result = (T) entityFactory.newEntity(APlainAttr.class);",
                "                 break;",
                "@@ -218,21 +210,5 @@ public class JPAAnyUtils implements AnyUtils {",
                "     @Override",
                "+    @SuppressWarnings(\"unchecked\")",
                "     public <T extends PlainAttrValue> Class<T> plainAttrValueClass() {",
                "-        Class result;",
                "-",
                "-        switch (anyTypeKind) {",
                "-            case GROUP:",
                "-                result = JPAGPlainAttrValue.class;",
                "-                break;",
                "-",
                "-            case ANY_OBJECT:",
                "-                result = JPAAPlainAttrValue.class;",
                "-                break;",
                "-",
                "-            case USER:",
                "-            default:",
                "-                result = JPAUPlainAttrValue.class;",
                "-                break;",
                "-        }",
                "-",
                "-        return result;",
                "+        return (Class<T>) newPlainAttrValue().getClass();",
                "     }",
                "@@ -245,3 +221,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             case USER:",
                "-                result = (T) new JPAUPlainAttrValue();",
                "+                result = (T) entityFactory.newEntity(UPlainAttrValue.class);",
                "                 break;",
                "@@ -249,3 +225,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             case GROUP:",
                "-                result = (T) new JPAGPlainAttrValue();",
                "+                result = (T) entityFactory.newEntity(GPlainAttrValue.class);",
                "                 break;",
                "@@ -253,3 +229,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             case ANY_OBJECT:",
                "-                result = (T) new JPAAPlainAttrValue();",
                "+                result = (T) entityFactory.newEntity(APlainAttrValue.class);",
                "                 break;",
                "@@ -263,21 +239,5 @@ public class JPAAnyUtils implements AnyUtils {",
                "     @Override",
                "+    @SuppressWarnings(\"unchecked\")",
                "     public <T extends PlainAttrValue> Class<T> plainAttrUniqueValueClass() {",
                "-        Class result;",
                "-",
                "-        switch (anyTypeKind) {",
                "-            case GROUP:",
                "-                result = JPAGPlainAttrUniqueValue.class;",
                "-                break;",
                "-",
                "-            case ANY_OBJECT:",
                "-                result = JPAAPlainAttrUniqueValue.class;",
                "-                break;",
                "-",
                "-            case USER:",
                "-            default:",
                "-                result = JPAUPlainAttrUniqueValue.class;",
                "-                break;",
                "-        }",
                "-",
                "-        return result;",
                "+        return (Class<T>) newPlainAttrUniqueValue().getClass();",
                "     }",
                "@@ -290,3 +250,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             case USER:",
                "-                result = (T) new JPAUPlainAttrUniqueValue();",
                "+                result = (T) entityFactory.newEntity(UPlainAttrUniqueValue.class);",
                "                 break;",
                "@@ -294,3 +254,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             case GROUP:",
                "-                result = (T) new JPAGPlainAttrUniqueValue();",
                "+                result = (T) entityFactory.newEntity(GPlainAttrUniqueValue.class);",
                "                 break;",
                "@@ -298,3 +258,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             case ANY_OBJECT:",
                "-                result = (T) new JPAAPlainAttrUniqueValue();",
                "+                result = (T) entityFactory.newEntity(APlainAttrUniqueValue.class);",
                "                 break;",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnPoolConf.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnPoolConf.java",
                "index 2d40dd44b4..c8714687e4 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnPoolConf.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnPoolConf.java",
                "@@ -93,4 +93,10 @@ public class JPAConnPoolConf implements ConnPoolConf, Serializable {",
                "     @Override",
                "-    public boolean equals(final Object obj) {",
                "-        return EqualsBuilder.reflectionEquals(this, obj);",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(maxObjects).",
                "+                append(minIdle).",
                "+                append(maxIdle).",
                "+                append(maxWait).",
                "+                append(minEvictableIdleTimeMillis).",
                "+                build();",
                "     }",
                "@@ -98,4 +104,20 @@ public class JPAConnPoolConf implements ConnPoolConf, Serializable {",
                "     @Override",
                "-    public int hashCode() {",
                "-        return HashCodeBuilder.reflectionHashCode(this);",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final JPAConnPoolConf other = (JPAConnPoolConf) obj;",
                "+        return new EqualsBuilder().",
                "+                append(maxObjects, other.maxObjects).",
                "+                append(minIdle, other.minIdle).",
                "+                append(maxIdle, other.maxIdle).",
                "+                append(maxWait, other.maxWait).",
                "+                append(minEvictableIdleTimeMillis, other.minEvictableIdleTimeMillis).",
                "+                build();",
                "     }",
                "@@ -104,3 +126,9 @@ public class JPAConnPoolConf implements ConnPoolConf, Serializable {",
                "     public String toString() {",
                "-        return ToStringBuilder.reflectionToString(this);",
                "+        return new ToStringBuilder(this).",
                "+                append(maxObjects).",
                "+                append(minIdle).",
                "+                append(maxIdle).",
                "+                append(maxWait).",
                "+                append(minEvictableIdleTimeMillis).",
                "+                build();",
                "     }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "index 96a333a74c..79bc299501 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "@@ -144,2 +144,3 @@ import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRule",
                " import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushCorrelationRuleEntity;",
                "+import org.apache.syncope.core.spring.security.SecureRandomUtils;",
                "@@ -305,2 +306,6 @@ public class JPAEntityFactory implements EntityFactory {",
                "+        if (result instanceof AbstractGeneratedKeyEntity) {",
                "+            ((AbstractGeneratedKeyEntity) result).setKey(SecureRandomUtils.generateRandomUUID().toString());",
                "+        }",
                "+",
                "         return result;",
                "@@ -312,3 +317,2 @@ public class JPAEntityFactory implements EntityFactory {",
                "     }",
                "-",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtils.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtils.java",
                "index 0d8352323f..3f9ee99878 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtils.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtils.java",
                "@@ -27,2 +27,3 @@ import org.apache.syncope.common.lib.to.PullTaskTO;",
                " import org.apache.syncope.common.lib.types.TaskType;",
                "+import org.apache.syncope.core.persistence.api.entity.EntityFactory;",
                " import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;",
                "@@ -34,2 +35,3 @@ import org.apache.syncope.core.persistence.api.entity.task.TaskUtils;",
                " import org.apache.syncope.core.persistence.api.entity.task.PullTask;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -40,2 +42,5 @@ public final class JPATaskUtils implements TaskUtils {",
                "+    @Autowired",
                "+    private EntityFactory entityFactory;",
                "+",
                "     protected JPATaskUtils(final TaskType type) {",
                "@@ -86,3 +91,3 @@ public final class JPATaskUtils implements TaskUtils {",
                "             case PROPAGATION:",
                "-                result = (T) new JPAPropagationTask();",
                "+                result = (T) entityFactory.newEntity(PropagationTask.class);",
                "                 break;",
                "@@ -90,3 +95,3 @@ public final class JPATaskUtils implements TaskUtils {",
                "             case SCHEDULED:",
                "-                result = (T) new JPASchedTask();",
                "+                result = (T) entityFactory.newEntity(SchedTask.class);",
                "                 break;",
                "@@ -94,3 +99,3 @@ public final class JPATaskUtils implements TaskUtils {",
                "             case PULL:",
                "-                result = (T) new JPAPullTask();",
                "+                result = (T) entityFactory.newEntity(PullTask.class);",
                "                 break;",
                "@@ -98,3 +103,3 @@ public final class JPATaskUtils implements TaskUtils {",
                "             case PUSH:",
                "-                result = (T) new JPAPushTask();",
                "+                result = (T) entityFactory.newEntity(PushTask.class);",
                "                 break;",
                "@@ -102,3 +107,3 @@ public final class JPATaskUtils implements TaskUtils {",
                "             case NOTIFICATION:",
                "-                result = (T) new JPANotificationTask();",
                "+                result = (T) entityFactory.newEntity(NotificationTask.class);",
                "                 break;",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtilsFactory.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtilsFactory.java",
                "index be38e3a453..48a77fbd05 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtilsFactory.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtilsFactory.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.core.persistence.jpa.entity.task;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                " import org.apache.syncope.common.lib.to.TaskTO;",
                "@@ -36,2 +38,3 @@ import org.springframework.stereotype.Component;",
                " import org.apache.syncope.core.persistence.api.entity.task.PullTask;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "@@ -40,5 +43,17 @@ public class JPATaskUtilsFactory implements TaskUtilsFactory {",
                "+    private final Map<TaskType, TaskUtils> instances = new HashMap<>(5);",
                "+",
                "     @Override",
                "     public TaskUtils getInstance(final TaskType type) {",
                "-        return new JPATaskUtils(type);",
                "+        TaskUtils instance;",
                "+        synchronized (instances) {",
                "+            instance = instances.get(type);",
                "+            if (instance == null) {",
                "+                instance = new JPATaskUtils(type);",
                "+                ApplicationContextProvider.getBeanFactory().autowireBean(instance);",
                "+                instances.put(type, instance);",
                "+            }",
                "+        }",
                "+",
                "+        return instance;",
                "     }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/openjpa/UUIDGenerator.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/openjpa/UUIDGenerator.java",
                "deleted file mode 100644",
                "index bf572fa535..0000000000",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/openjpa/UUIDGenerator.java",
                "+++ /dev/null",
                "@@ -1,58 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-package org.apache.syncope.core.persistence.jpa.openjpa;",
                "-",
                "-import com.fasterxml.uuid.Generators;",
                "-import com.fasterxml.uuid.impl.RandomBasedGenerator;",
                "-import org.apache.openjpa.kernel.Seq;",
                "-import org.apache.openjpa.kernel.StoreContext;",
                "-import org.apache.openjpa.meta.ClassMetaData;",
                "-",
                "-/**",
                "- * Fast UUID generator for OpenJPA entities.",
                "- */",
                "-public class UUIDGenerator implements Seq {",
                "-",
                "-    private static final RandomBasedGenerator GENERATOR = Generators.randomBasedGenerator();",
                "-",
                "-    private String last;",
                "-",
                "-    @Override",
                "-    public void setType(final int i) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public Object next(final StoreContext sc, final ClassMetaData cmd) {",
                "-        last = GENERATOR.generate().toString();",
                "-        return last;",
                "-    }",
                "-",
                "-    @Override",
                "-    public Object current(final StoreContext sc, final ClassMetaData cmd) {",
                "-        return last;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void allocate(final int i, final StoreContext sc, final ClassMetaData cmd) {",
                "-    }",
                "-",
                "-    @Override",
                "-    public void close() {",
                "-    }",
                "-}",
                "diff --git a/core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml b/core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml",
                "index da39ce30cc..0ac2579e23 100644",
                "--- a/core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml",
                "+++ b/core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml",
                "@@ -36,4 +36,2 @@ under the License.",
                "-  <sequence-generator name=\"uuid\" sequence-name=\"org.apache.syncope.core.persistence.jpa.openjpa.UUIDGenerator()\"/>",
                "-",
                "   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue\">",
                "diff --git a/core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml b/core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml",
                "index 8bcb833c0b..8c52f2e612 100644",
                "--- a/core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml",
                "+++ b/core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml",
                "@@ -36,4 +36,2 @@ under the License.",
                "-  <sequence-generator name=\"uuid\" sequence-name=\"org.apache.syncope.core.persistence.jpa.openjpa.UUIDGenerator()\"/>",
                "-  ",
                "   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue\">",
                "diff --git a/core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml b/core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml",
                "index c0033a5237..aaf42b3a50 100644",
                "--- a/core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml",
                "+++ b/core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml",
                "@@ -36,4 +36,2 @@ under the License.",
                "-  <sequence-generator name=\"uuid\" sequence-name=\"org.apache.syncope.core.persistence.jpa.openjpa.UUIDGenerator()\"/>",
                "-  ",
                "   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue\">",
                "diff --git a/core/persistence-jpa/src/main/resources/views.xml b/core/persistence-jpa/src/main/resources/views.xml",
                "index 37fd431550..e8e9a2177d 100644",
                "--- a/core/persistence-jpa/src/main/resources/views.xml",
                "+++ b/core/persistence-jpa/src/main/resources/views.xml",
                "@@ -267,2 +267,2 @@ under the License.",
                "-</properties>",
                "+</properties>",
                "\\ No newline at end of file",
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/IntAttrName.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/IntAttrName.java",
                "index c504fd24a3..e8d5cb4d2b 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/IntAttrName.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/IntAttrName.java",
                "@@ -20,4 +20,5 @@ package org.apache.syncope.core.provisioning.api;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                " import org.apache.commons.lang3.builder.ToStringBuilder;",
                "-import org.apache.commons.lang3.builder.ToStringStyle;",
                " import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "@@ -138,6 +139,61 @@ public class IntAttrName {",
                "     @Override",
                "-    public String toString() {",
                "-        return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(anyTypeKind).",
                "+                append(field).",
                "+                append(schemaType).",
                "+                append(schemaName).",
                "+                append(enclosingGroup).",
                "+                append(relatedUser).",
                "+                append(relatedAnyObject).",
                "+                append(membershipOfGroup).",
                "+                append(privilegesOfApplication).",
                "+                append(relationshipType).",
                "+                append(relationshipAnyType).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final IntAttrName other = (IntAttrName) obj;",
                "+        return new EqualsBuilder().",
                "+                append(anyTypeKind, other.anyTypeKind).",
                "+                append(field, other.field).",
                "+                append(schemaType, other.schemaType).",
                "+                append(schemaName, other.schemaName).",
                "+                append(enclosingGroup, other.enclosingGroup).",
                "+                append(relatedUser, other.relatedUser).",
                "+                append(relatedAnyObject, other.relatedAnyObject).",
                "+                append(membershipOfGroup, other.membershipOfGroup).",
                "+                append(privilegesOfApplication, other.privilegesOfApplication).",
                "+                append(relationshipType, other.relationshipType).",
                "+                append(relationshipAnyType, other.relationshipAnyType).",
                "+                build();",
                "     }",
                "+    @Override",
                "+    public String toString() {",
                "+        return new ToStringBuilder(this).",
                "+                append(anyTypeKind).",
                "+                append(field).",
                "+                append(schemaType).",
                "+                append(schemaName).",
                "+                append(enclosingGroup).",
                "+                append(relatedUser).",
                "+                append(relatedAnyObject).",
                "+                append(membershipOfGroup).",
                "+                append(privilegesOfApplication).",
                "+                append(relationshipType).",
                "+                append(relationshipAnyType).",
                "+                build();",
                "+    }",
                " }",
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/WorkflowResult.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/WorkflowResult.java",
                "index 472a108009..cb59c82be5 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/WorkflowResult.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/WorkflowResult.java",
                "@@ -24,4 +24,3 @@ import org.apache.commons.lang3.builder.EqualsBuilder;",
                " import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;",
                "-import org.apache.commons.lang3.builder.ToStringStyle;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                "@@ -68,4 +67,8 @@ public class WorkflowResult<T> {",
                "     @Override",
                "-    public boolean equals(final Object obj) {",
                "-        return EqualsBuilder.reflectionEquals(this, obj);",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(result).",
                "+                append(propByRes).",
                "+                append(performedTasks).",
                "+                build();",
                "     }",
                "@@ -73,4 +76,19 @@ public class WorkflowResult<T> {",
                "     @Override",
                "-    public int hashCode() {",
                "-        return HashCodeBuilder.reflectionHashCode(this);",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        @SuppressWarnings(\"unchecked\")",
                "+        final WorkflowResult<T> other = (WorkflowResult<T>) obj;",
                "+        return new EqualsBuilder().",
                "+                append(result, other.result).",
                "+                append(propByRes, other.propByRes).",
                "+                append(performedTasks, other.performedTasks).",
                "+                build();",
                "     }",
                "@@ -79,3 +97,7 @@ public class WorkflowResult<T> {",
                "     public String toString() {",
                "-        return ReflectionToStringBuilder.toString(this, ToStringStyle.JSON_STYLE);",
                "+        return new ToStringBuilder(this).",
                "+                append(result).",
                "+                append(propByRes).",
                "+                append(performedTasks).",
                "+                build();",
                "     }",
                "diff --git a/core/provisioning-java/pom.xml b/core/provisioning-java/pom.xml",
                "index 9ce59fe652..bb00dd6d3e 100644",
                "--- a/core/provisioning-java/pom.xml",
                "+++ b/core/provisioning-java/pom.xml",
                "@@ -50,7 +50,2 @@ under the License.",
                "     </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>com.fasterxml.uuid</groupId>",
                "-      <artifactId>java-uuid-generator</artifactId>",
                "-    </dependency>",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/IntAttrNameParser.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/IntAttrNameParser.java",
                "index 914d2485fd..0a7a2c0bfb 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/IntAttrNameParser.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/IntAttrNameParser.java",
                "@@ -92,7 +92,7 @@ public class IntAttrNameParser {",
                "-        if (anyUtilsFactory.getInstance(anyTypeKind).isFieldName(fieldOrSchemaName)) {",
                "-            result.setField(fieldOrSchemaName);",
                "-        } else {",
                "+        if (anyUtilsFactory.getInstance(anyTypeKind).getField(fieldOrSchemaName) == null) {",
                "             result.setSchemaType(find(fieldOrSchemaName));",
                "             result.setSchemaName(fieldOrSchemaName);",
                "+        } else {",
                "+            result.setField(fieldOrSchemaName);",
                "         }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java",
                "index 351d21d87b..f6ec55fbd5 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java",
                "@@ -20,4 +20,2 @@ package org.apache.syncope.core.provisioning.java.data;",
                "-import com.fasterxml.uuid.Generators;",
                "-import com.fasterxml.uuid.impl.RandomBasedGenerator;",
                " import java.util.Date;",
                "@@ -40,2 +38,3 @@ import org.apache.syncope.core.spring.BeanUtils;",
                " import org.apache.syncope.core.spring.security.DefaultCredentialChecker;",
                "+import org.apache.syncope.core.spring.security.SecureRandomUtils;",
                " import org.apache.syncope.core.spring.security.jws.AccessTokenJwsSignatureProvider;",
                "@@ -47,4 +46,2 @@ public class AccessTokenDataBinderImpl implements AccessTokenDataBinder {",
                "-    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();",
                "-",
                "     @Resource(name = \"adminUser\")",
                "@@ -136,3 +133,3 @@ public class AccessTokenDataBinderImpl implements AccessTokenDataBinder {",
                "             accessToken = entityFactory.newEntity(AccessToken.class);",
                "-            accessToken.setKey(UUID_GENERATOR.generate().toString());",
                "+            accessToken.setKey(SecureRandomUtils.generateRandomUUID().toString());",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java",
                "index 333311cd33..6cd5e8eac6 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java",
                "@@ -21,3 +21,2 @@ package org.apache.syncope.core.provisioning.java.data;",
                " import java.net.URI;",
                "-import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;",
                " import java.util.Arrays;",
                "@@ -46,2 +45,3 @@ import org.apache.syncope.core.persistence.api.entity.Realm;",
                " import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;",
                "+import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;",
                " import org.apache.syncope.core.provisioning.api.utils.ConnPoolConfUtils;",
                "@@ -59,3 +59,3 @@ public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {",
                "-    private static final String[] IGNORE_PROPERTIES = { \"poolConf\", \"location\", \"adminRealm\", \"conf\" };",
                "+    private static final String[] IGNORE_PROPERTIES = { \"key\", \"poolConf\", \"location\", \"adminRealm\", \"conf\" };",
                "@@ -248,2 +248,3 @@ public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {",
                "         BeanUtils.copyProperties(connInstance, connInstanceTO, IGNORE_PROPERTIES);",
                "+        connInstanceTO.setKey(connInstance.getKey());",
                "         connInstanceTO.setAdminRealm(connInstance.getAdminRealm().getFullPath());",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AfterHandlingJob.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AfterHandlingJob.java",
                "index 4e530775a6..82f6d42d68 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AfterHandlingJob.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AfterHandlingJob.java",
                "@@ -20,4 +20,2 @@ package org.apache.syncope.core.provisioning.java.job;",
                "-import com.fasterxml.uuid.Generators;",
                "-import com.fasterxml.uuid.impl.RandomBasedGenerator;",
                " import java.util.Map;",
                "@@ -30,2 +28,3 @@ import org.apache.syncope.core.spring.ApplicationContextProvider;",
                " import org.apache.syncope.core.spring.security.AuthContextUtils;",
                "+import org.apache.syncope.core.spring.security.SecureRandomUtils;",
                " import org.quartz.JobBuilder;",
                "@@ -52,4 +51,2 @@ public class AfterHandlingJob extends AbstractInterruptableJob {",
                "-    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();",
                "-",
                "     public static void schedule(final SchedulerFactoryBean scheduler, final Map<String, Object> jobMap) {",
                "@@ -58,3 +55,3 @@ public class AfterHandlingJob extends AbstractInterruptableJob {",
                "                 createBean(AfterHandlingJob.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);",
                "-        String jobName = AfterHandlingJob.class.getName() + UUID_GENERATOR.generate();",
                "+        String jobName = AfterHandlingJob.class.getName() + SecureRandomUtils.generateRandomUUID();",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SchedulingPullActions.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SchedulingPullActions.java",
                "index 4320b9abb7..c7b0beaa30 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SchedulingPullActions.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SchedulingPullActions.java",
                "@@ -20,4 +20,2 @@ package org.apache.syncope.core.provisioning.java.pushpull;",
                "-import com.fasterxml.uuid.Generators;",
                "-import com.fasterxml.uuid.impl.RandomBasedGenerator;",
                " import java.util.Map;",
                "@@ -28,2 +26,3 @@ import org.apache.syncope.core.spring.ApplicationContextProvider;",
                " import org.apache.syncope.core.spring.security.AuthContextUtils;",
                "+import org.apache.syncope.core.spring.security.SecureRandomUtils;",
                " import org.quartz.Job;",
                "@@ -46,4 +45,2 @@ public abstract class SchedulingPullActions implements PullActions {",
                "-    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();",
                "-",
                "     @Autowired",
                "@@ -57,3 +54,3 @@ public abstract class SchedulingPullActions implements PullActions {",
                "                 createBean(reference, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);",
                "-        String jobName = getClass().getName() + UUID_GENERATOR.generate();",
                "+        String jobName = getClass().getName() + SecureRandomUtils.generateRandomUUID();",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java",
                "index 59a451ab92..2d8c3b43cf 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java",
                "@@ -55,2 +55,3 @@ import org.apache.syncope.core.persistence.api.dao.search.SearchCond;",
                " import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "+import org.apache.syncope.core.spring.security.SecureRandomUtils;",
                "@@ -281,3 +282,3 @@ public abstract class AbstractAnyService<TO extends AnyTO, P extends AnyPatch>",
                "-        String boundary = \"deassociate_\" + GENERATOR.generate().toString();",
                "+        String boundary = \"deassociate_\" + SecureRandomUtils.generateRandomUUID().toString();",
                "         return Response.ok(BatchPayloadGenerator.generate(",
                "@@ -370,3 +371,3 @@ public abstract class AbstractAnyService<TO extends AnyTO, P extends AnyPatch>",
                "-        String boundary = \"associate_\" + GENERATOR.generate().toString();",
                "+        String boundary = \"associate_\" + SecureRandomUtils.generateRandomUUID().toString();",
                "         return Response.ok(BatchPayloadGenerator.generate(",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java",
                "index 569da48649..48d238c4eb 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java",
                "@@ -36,2 +36,3 @@ import org.apache.syncope.common.rest.api.service.ExecutableService;",
                " import org.apache.syncope.core.logic.AbstractExecutableLogic;",
                "+import org.apache.syncope.core.spring.security.SecureRandomUtils;",
                "@@ -70,3 +71,3 @@ public abstract class AbstractExecutableService extends AbstractServiceImpl impl",
                "-        String boundary = \"deleteExecutions_\" + GENERATOR.generate().toString();",
                "+        String boundary = \"deleteExecutions_\" + SecureRandomUtils.generateRandomUUID().toString();",
                "         return Response.ok(BatchPayloadGenerator.generate(",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java",
                "index c92e7a291f..2e9a0c0fe8 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java",
                "@@ -20,4 +20,2 @@ package org.apache.syncope.core.rest.cxf.service;",
                "-import com.fasterxml.uuid.Generators;",
                "-import com.fasterxml.uuid.impl.RandomBasedGenerator;",
                " import java.util.ArrayList;",
                "@@ -60,4 +58,2 @@ abstract class AbstractServiceImpl implements JAXRSService {",
                "-    protected static final RandomBasedGenerator GENERATOR = Generators.randomBasedGenerator();",
                "-",
                "     protected static final String OPTIONS_ALLOW = \"GET,POST,OPTIONS,HEAD\";",
                "diff --git a/core/spring/pom.xml b/core/spring/pom.xml",
                "index dd01d4860c..551dd0371b 100644",
                "--- a/core/spring/pom.xml",
                "+++ b/core/spring/pom.xml",
                "@@ -79,2 +79,7 @@ under the License.",
                "+    <dependency>",
                "+      <groupId>com.fasterxml.uuid</groupId>",
                "+      <artifactId>java-uuid-generator</artifactId>",
                "+    </dependency>",
                "+",
                "     <dependency>",
                "diff --git a/core/spring/src/main/java/org/apache/syncope/core/spring/security/SecureRandomUtils.java b/core/spring/src/main/java/org/apache/syncope/core/spring/security/SecureRandomUtils.java",
                "index daf093a2f4..5d9eeac52a 100644",
                "--- a/core/spring/src/main/java/org/apache/syncope/core/spring/security/SecureRandomUtils.java",
                "+++ b/core/spring/src/main/java/org/apache/syncope/core/spring/security/SecureRandomUtils.java",
                "@@ -20,3 +20,6 @@ package org.apache.syncope.core.spring.security;",
                "+import com.fasterxml.uuid.Generators;",
                "+import com.fasterxml.uuid.impl.RandomBasedGenerator;",
                " import java.security.SecureRandom;",
                "+import java.util.UUID;",
                " import org.apache.commons.text.RandomStringGenerator;",
                "@@ -43,2 +46,4 @@ public final class SecureRandomUtils {",
                "+    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator(RANDOM);",
                "+",
                "     public static String generateRandomPassword(final int tokenLength) {",
                "@@ -72,2 +77,6 @@ public final class SecureRandomUtils {",
                "+    public static UUID generateRandomUUID() {",
                "+        return UUID_GENERATOR.generate();",
                "+    }",
                "+",
                "     private SecureRandomUtils() {",
                "diff --git a/core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeAuthenticationDetails.java b/core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeAuthenticationDetails.java",
                "index cfd1eecefe..de86f94dea 100644",
                "--- a/core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeAuthenticationDetails.java",
                "+++ b/core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeAuthenticationDetails.java",
                "@@ -25,4 +25,3 @@ import org.apache.commons.lang3.builder.EqualsBuilder;",
                " import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;",
                "-import org.apache.commons.lang3.builder.ToStringStyle;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                " import org.apache.syncope.common.lib.SyncopeConstants;",
                "@@ -51,4 +50,6 @@ public class SyncopeAuthenticationDetails implements Serializable {",
                "     @Override",
                "-    public boolean equals(final Object obj) {",
                "-        return EqualsBuilder.reflectionEquals(this, obj);",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(domain).",
                "+                build();",
                "     }",
                "@@ -56,4 +57,16 @@ public class SyncopeAuthenticationDetails implements Serializable {",
                "     @Override",
                "-    public int hashCode() {",
                "-        return HashCodeBuilder.reflectionHashCode(this);",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final SyncopeAuthenticationDetails other = (SyncopeAuthenticationDetails) obj;",
                "+        return new EqualsBuilder().",
                "+                append(domain, other.domain).",
                "+                build();",
                "     }",
                "@@ -62,5 +75,6 @@ public class SyncopeAuthenticationDetails implements Serializable {",
                "     public String toString() {",
                "-        return ReflectionToStringBuilder.toString(this, ToStringStyle.JSON_STYLE);",
                "+        return new ToStringBuilder(this).",
                "+                append(domain).",
                "+                build();",
                "     }",
                "-",
                " }",
                "diff --git a/core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeGrantedAuthority.java b/core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeGrantedAuthority.java",
                "index c9ba8d3ec7..9e2c29a0c1 100644",
                "--- a/core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeGrantedAuthority.java",
                "+++ b/core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeGrantedAuthority.java",
                "@@ -29,4 +29,3 @@ import org.apache.commons.lang3.builder.EqualsBuilder;",
                " import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;",
                "-import org.apache.commons.lang3.builder.ToStringStyle;",
                "+import org.apache.commons.lang3.builder.ToStringBuilder;",
                " import org.apache.syncope.core.provisioning.api.utils.RealmUtils;",
                "@@ -72,4 +71,7 @@ public class SyncopeGrantedAuthority implements GrantedAuthority {",
                "     @Override",
                "-    public boolean equals(final Object obj) {",
                "-        return EqualsBuilder.reflectionEquals(this, obj);",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(entitlement).",
                "+                append(realms).",
                "+                build();",
                "     }",
                "@@ -77,4 +79,17 @@ public class SyncopeGrantedAuthority implements GrantedAuthority {",
                "     @Override",
                "-    public int hashCode() {",
                "-        return HashCodeBuilder.reflectionHashCode(this);",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final SyncopeGrantedAuthority other = (SyncopeGrantedAuthority) obj;",
                "+        return new EqualsBuilder().",
                "+                append(entitlement, other.entitlement).",
                "+                append(realms, other.realms).",
                "+                build();",
                "     }",
                "@@ -83,5 +98,7 @@ public class SyncopeGrantedAuthority implements GrantedAuthority {",
                "     public String toString() {",
                "-        return ReflectionToStringBuilder.toString(this, ToStringStyle.JSON_STYLE);",
                "+        return new ToStringBuilder(this).",
                "+                append(entitlement).",
                "+                append(realms).",
                "+                build();",
                "     }",
                "-",
                " }",
                "diff --git a/ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java b/ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java",
                "index de070f1b99..89f7ac2a7e 100644",
                "--- a/ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java",
                "+++ b/ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java",
                "@@ -65,3 +65,2 @@ import org.elasticsearch.search.sort.SortOrder;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.util.ReflectionUtils;",
                "@@ -145,3 +144,3 @@ public class ElasticsearchAnySearchDAO extends AbstractAnySearchDAO {",
                "-        AnyUtils attrUtils = anyUtilsFactory.getInstance(kind);",
                "+        AnyUtils anyUtils = anyUtilsFactory.getInstance(kind);",
                "@@ -153,3 +152,3 @@ public class ElasticsearchAnySearchDAO extends AbstractAnySearchDAO {",
                "-            Field anyField = ReflectionUtils.findField(attrUtils.anyClass(), fieldName);",
                "+            Field anyField = anyUtils.getField(fieldName);",
                "             if (anyField == null) {",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "index e02f017cd9..9ff621cc8c 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "@@ -217,2 +217,4 @@ public final class FlowableRuntimeUtils {",
                "             throw (InvalidEntityException) e.getCause();",
                "+        } else if (e.getCause().getClass().getName().contains(\"persistence\")) {",
                "+            throw (RuntimeException) e.getCause();",
                "         }",
                "diff --git a/ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/OIDCClientLogic.java b/ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/OIDCClientLogic.java",
                "index 12ca5fa46c..5141c6f3c0 100644",
                "--- a/ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/OIDCClientLogic.java",
                "+++ b/ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/OIDCClientLogic.java",
                "@@ -21,4 +21,2 @@ package org.apache.syncope.core.logic;",
                " import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;",
                "-import com.fasterxml.uuid.Generators;",
                "-import com.fasterxml.uuid.impl.RandomBasedGenerator;",
                " import java.io.IOException;",
                "@@ -69,2 +67,3 @@ import org.apache.syncope.core.spring.security.AuthDataAccessor;",
                " import org.apache.syncope.core.spring.security.Encryptor;",
                "+import org.apache.syncope.core.spring.security.SecureRandomUtils;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -76,6 +75,2 @@ public class OIDCClientLogic extends AbstractTransactionalLogic<AbstractBaseBean",
                "-    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();",
                "-",
                "-    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();",
                "-",
                "     private static final String JWT_CLAIM_OP_ENTITYID = \"OP_ENTITYID\";",
                "@@ -84,2 +79,4 @@ public class OIDCClientLogic extends AbstractTransactionalLogic<AbstractBaseBean",
                "+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();",
                "+",
                "     @Autowired",
                "@@ -126,3 +123,3 @@ public class OIDCClientLogic extends AbstractTransactionalLogic<AbstractBaseBean",
                "         requestTO.setRedirectURI(redirectURI);",
                "-        requestTO.setState(UUID_GENERATOR.generate().toString());",
                "+        requestTO.setState(SecureRandomUtils.generateRandomUUID().toString());",
                "         return requestTO;",
                "diff --git a/ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCEntityFactory.java b/ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCEntityFactory.java",
                "index e5870bf75a..81608bbc68 100644",
                "--- a/ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCEntityFactory.java",
                "+++ b/ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCEntityFactory.java",
                "@@ -25,2 +25,3 @@ import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;",
                " import org.apache.syncope.core.persistence.api.entity.OIDCUserTemplate;",
                "+import org.apache.syncope.core.spring.security.SecureRandomUtils;",
                " import org.springframework.stereotype.Component;",
                "@@ -45,5 +46,8 @@ public class JPAOIDCEntityFactory implements OIDCEntityFactory {",
                "+        if (result instanceof AbstractGeneratedKeyEntity) {",
                "+            ((AbstractGeneratedKeyEntity) result).setKey(SecureRandomUtils.generateRandomUUID().toString());",
                "+        }",
                "+",
                "         return result;",
                "     }",
                "-",
                " }",
                "diff --git a/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java b/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java",
                "index 4ae24d7940..b660b27973 100644",
                "--- a/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java",
                "+++ b/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java",
                "@@ -20,4 +20,2 @@ package org.apache.syncope.core.logic;",
                "-import com.fasterxml.uuid.Generators;",
                "-import com.fasterxml.uuid.impl.RandomBasedGenerator;",
                " import java.io.OutputStream;",
                "@@ -106,2 +104,3 @@ import org.apache.syncope.core.spring.security.AuthDataAccessor;",
                " import org.apache.syncope.core.spring.security.Encryptor;",
                "+import org.apache.syncope.core.spring.security.SecureRandomUtils;",
                " import org.opensaml.core.xml.schema.XSAny;",
                "@@ -127,4 +126,2 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {",
                "-    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();",
                "-",
                "     private static final Encryptor ENCRYPTOR = Encryptor.getInstance();",
                "@@ -312,3 +309,3 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {",
                "         AuthnRequest authnRequest = new AuthnRequestBuilder().buildObject();",
                "-        authnRequest.setID(\"_\" + UUID_GENERATOR.generate().toString());",
                "+        authnRequest.setID(\"_\" + SecureRandomUtils.generateRandomUUID().toString());",
                "         authnRequest.setForceAuthn(false);",
                "@@ -331,3 +328,4 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {",
                "             Pair<String, Date> relayState = accessTokenDataBinder.generateJWT(",
                "-                    UUID_GENERATOR.generate().toString(), authnRequest.getID(), JWT_RELAY_STATE_DURATION, claims);",
                "+                    SecureRandomUtils.generateRandomUUID().toString(),",
                "+                    authnRequest.getID(), JWT_RELAY_STATE_DURATION, claims);",
                "@@ -584,3 +582,3 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {",
                "         LogoutRequest logoutRequest = new LogoutRequestBuilder().buildObject();",
                "-        logoutRequest.setID(\"_\" + UUID_GENERATOR.generate().toString());",
                "+        logoutRequest.setID(\"_\" + SecureRandomUtils.generateRandomUUID().toString());",
                "         logoutRequest.setDestination(idp.getSLOLocation(idp.getBindingType()).getLocation());",
                "@@ -613,3 +611,4 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {",
                "             Pair<String, Date> relayState = accessTokenDataBinder.generateJWT(",
                "-                    UUID_GENERATOR.generate().toString(), logoutRequest.getID(), JWT_RELAY_STATE_DURATION, claims);",
                "+                    SecureRandomUtils.generateRandomUUID().toString(),",
                "+                    logoutRequest.getID(), JWT_RELAY_STATE_DURATION, claims);",
                "             requestTO.setRelayState(relayState.getLeft());",
                "diff --git a/ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2EntityFactory.java b/ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2EntityFactory.java",
                "index 888e87047f..bd17ac48a2 100644",
                "--- a/ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2EntityFactory.java",
                "+++ b/ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2EntityFactory.java",
                "@@ -25,2 +25,3 @@ import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;",
                " import org.apache.syncope.core.persistence.api.entity.SAML2UserTemplate;",
                "+import org.apache.syncope.core.spring.security.SecureRandomUtils;",
                " import org.springframework.stereotype.Component;",
                "@@ -45,2 +46,6 @@ public class JPASAML2EntityFactory implements SAML2EntityFactory {",
                "+        if (result instanceof AbstractGeneratedKeyEntity) {",
                "+            ((AbstractGeneratedKeyEntity) result).setKey(SecureRandomUtils.generateRandomUUID().toString());",
                "+        }",
                "+",
                "         return result;",
                "diff --git a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestAccountRule.java b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestAccountRule.java",
                "index ddd48fe7a1..037bc59e55 100644",
                "--- a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestAccountRule.java",
                "+++ b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestAccountRule.java",
                "@@ -49,3 +49,2 @@ public class TestAccountRule implements AccountRule {",
                "     }",
                "-",
                " }",
                "diff --git a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRule.java b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRule.java",
                "index 69431ef870..aeb8bf4b56 100644",
                "--- a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRule.java",
                "+++ b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRule.java",
                "@@ -45,3 +45,2 @@ public class TestPasswordRule implements PasswordRule {",
                "         }",
                "-",
                "     }",
                "@@ -51,3 +50,3 @@ public class TestPasswordRule implements PasswordRule {",
                "     public void enforce(final User user) {",
                "-        if (!user.getClearPassword().endsWith(this.conf.getMustEndWith())) {",
                "+        if (user.getClearPassword() != null && !user.getClearPassword().endsWith(this.conf.getMustEndWith())) {",
                "             throw new PasswordPolicyException(\"Password not ending with \" + this.conf.getMustEndWith());",
                "@@ -55,3 +54,2 @@ public class TestPasswordRule implements PasswordRule {",
                "     }",
                "-",
                " }"
            ],
            "changed_files": [
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AbstractSearchCond.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AnyCond.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AnyTypeCond.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AssignableCond.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AttributeCond.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/DynRealmCond.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MemberCond.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MembershipCond.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/OrderByClause.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/PrivilegeCond.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RelationshipCond.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RelationshipTypeCond.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/ResourceCond.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RoleCond.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java",
                "core/persistence-jpa/pom.xml",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/MultiParentNode.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/OrderBySupport.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchViewSupport.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractEntity.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractGeneratedKeyEntity.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractProvidedKeyEntity.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnPoolConf.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtils.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtilsFactory.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/openjpa/UUIDGenerator.java",
                "core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml",
                "core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml",
                "core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml",
                "core/persistence-jpa/src/main/resources/views.xml",
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/IntAttrName.java",
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/WorkflowResult.java",
                "core/provisioning-java/pom.xml",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/IntAttrNameParser.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AfterHandlingJob.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SchedulingPullActions.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java",
                "core/spring/pom.xml",
                "core/spring/src/main/java/org/apache/syncope/core/spring/security/SecureRandomUtils.java",
                "core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeAuthenticationDetails.java",
                "core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeGrantedAuthority.java",
                "ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/OIDCClientLogic.java",
                "ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCEntityFactory.java",
                "ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java",
                "ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2EntityFactory.java",
                "fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestAccountRule.java",
                "fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRule.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1392": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8bbfe71a3e556fb7ef57fc092dc297b65b807253"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AnyTypeClass",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: name, report",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1392",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ff37c3f763b967d928a5dd5d4764b54694ca299f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539097693,
            "hunks": 68,
            "message": "[SYNCOPE-1369] Some refinements + admin console suport",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "index 2e15b19eab..f03f823350 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "@@ -64,3 +64,3 @@ import org.apache.wicket.request.resource.IResource;",
                " import org.apache.wicket.request.resource.ResourceReference;",
                "-import org.apache.wicket.resource.DynamicJQueryResourceReference;",
                "+import org.apache.wicket.resource.JQueryResourceReference;",
                " import org.apache.wicket.util.lang.Args;",
                "@@ -192,3 +192,3 @@ public class SyncopeConsoleApplication extends AuthenticatedWebApplication {",
                "-        getJavaScriptLibrarySettings().setJQueryReference(new DynamicJQueryResourceReference());",
                "+        getJavaScriptLibrarySettings().setJQueryReference(JQueryResourceReference.getV2());",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/commons/Constants.java b/client/console/src/main/java/org/apache/syncope/client/console/commons/Constants.java",
                "index 48b5813776..2e60aa9ac5 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/commons/Constants.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/commons/Constants.java",
                "@@ -125,4 +125,2 @@ public final class Constants {",
                "-    public static final String PREF_WORKFLOW_FORM_PAGINATOR_ROWS = \"workflow.paginator.rows\";",
                "-",
                "     public static final String PREF_REMEDIATION_PAGINATOR_ROWS = \"remediation.paginator.rows\";",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java b/client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java",
                "index 8b609411b7..a80cdcbf27 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java",
                "@@ -20,4 +20,2 @@ package org.apache.syncope.client.console.rest;",
                "-import static org.apache.syncope.client.console.rest.BaseRestClient.getStatus;",
                "-",
                " import java.io.IOException;",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java",
                "index 0dc445de82..c333f3452e 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java",
                "@@ -231,4 +231,3 @@ public abstract class SchedTaskDirectoryPanel<T extends SchedTaskTO>",
                "                                         SchedTaskDirectoryPanel.this,",
                "-                                        Model.of(Pair.of(",
                "-                                                ActionLink.ActionType.CLONE, model.getObject())))));",
                "+                                        Model.of(Pair.of(ActionLink.ActionType.CLONE, model.getObject())))));",
                "             }",
                "@@ -243,4 +242,3 @@ public abstract class SchedTaskDirectoryPanel<T extends SchedTaskTO>",
                "                 SchedTaskDirectoryPanel.this.getTogglePanel().close(target);",
                "-                startAt.setExecutionDetail(",
                "-                        model.getObject().getKey(), model.getObject().getName(), target);",
                "+                startAt.setExecutionDetail(model.getObject().getKey(), model.getObject().getName(), target);",
                "                 startAt.toggle(target, true);",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Approvals.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Approvals.java",
                "deleted file mode 100644",
                "index 0dbc4dbb05..0000000000",
                "--- a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Approvals.java",
                "+++ /dev/null",
                "@@ -1,41 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-package org.apache.syncope.client.console.pages;",
                "-",
                "-import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;",
                "-import org.apache.syncope.client.console.approvals.ApprovalDirectoryPanel;",
                "-import org.apache.wicket.markup.html.WebMarkupContainer;",
                "-import org.apache.wicket.request.mapper.parameter.PageParameters;",
                "-",
                "-public class Approvals extends BasePage {",
                "-",
                "-    private static final long serialVersionUID = -1100228004207271271L;",
                "-",
                "-    public Approvals(final PageParameters parameters) {",
                "-        super(parameters);",
                "-",
                "-        body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));",
                "-",
                "-        WebMarkupContainer content = new WebMarkupContainer(\"content\");",
                "-        content.setOutputMarkupId(true);",
                "-        body.add(content);",
                "-",
                "-        content.add(new ApprovalDirectoryPanel(\"wfPanel\", getPageReference()));",
                "-    }",
                "-}",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java",
                "index 8062a77b13..a533897002 100644",
                "--- a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java",
                "@@ -21,3 +21,2 @@ package org.apache.syncope.client.console.pages;",
                " import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;",
                "-import org.apache.syncope.client.console.SyncopeConsoleSession;",
                " import org.apache.syncope.client.console.annotations.ExtPage;",
                "@@ -59,8 +58,2 @@ public class Flowable extends BaseExtPage {",
                "         content.add(bpmnProcessesPanel);",
                "-",
                "-        if (SyncopeConsoleSession.get().getPlatformInfo().getUserWorkflowAdapter().contains(\"Flowable\")) {",
                "-            disabled.setVisible(false);",
                "-        } else {",
                "-            bpmnProcessesPanel.setVisible(false);",
                "-        }",
                "     }",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/UserRequests.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/UserRequests.java",
                "new file mode 100644",
                "index 0000000000..c23e1ad2bf",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/UserRequests.java",
                "@@ -0,0 +1,74 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.console.pages;",
                "+",
                "+import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;",
                "+import org.apache.syncope.client.console.panels.UserRequestFormDirectoryPanel;",
                "+import org.apache.syncope.client.console.panels.UserRequestDirectoryPanel;",
                "+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;",
                "+import org.apache.wicket.extensions.markup.html.tabs.ITab;",
                "+import org.apache.wicket.markup.html.WebMarkupContainer;",
                "+import org.apache.wicket.markup.html.panel.Panel;",
                "+import org.apache.wicket.model.ResourceModel;",
                "+import org.apache.wicket.request.mapper.parameter.PageParameters;",
                "+",
                "+public class UserRequests extends BasePage {",
                "+",
                "+    private static final long serialVersionUID = -1100228004207271271L;",
                "+",
                "+    public UserRequests(final PageParameters parameters) {",
                "+        super(parameters);",
                "+",
                "+        body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));",
                "+",
                "+        WebMarkupContainer content = new WebMarkupContainer(\"content\");",
                "+        content.setOutputMarkupId(true);",
                "+        content.setMarkupId(\"userRequests\");",
                "+        content.add(new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList()));",
                "+        body.add(content);",
                "+    }",
                "+",
                "+    private List<ITab> buildTabList() {",
                "+        final List<ITab> tabs = new ArrayList<>();",
                "+",
                "+        tabs.add(new AbstractTab(new ResourceModel(\"userRequestForms\")) {",
                "+",
                "+            private static final long serialVersionUID = -6815067322125799251L;",
                "+",
                "+            @Override",
                "+            public Panel getPanel(final String panelId) {",
                "+                return new UserRequestFormDirectoryPanel(panelId, getPageReference());",
                "+            }",
                "+        });",
                "+",
                "+        tabs.add(new AbstractTab(new ResourceModel(\"activeRequests\")) {",
                "+",
                "+            private static final long serialVersionUID = -6815067322125799251L;",
                "+",
                "+            @Override",
                "+            public Panel getPanel(final String panelId) {",
                "+                return new UserRequestDirectoryPanel(panelId, getPageReference());",
                "+            }",
                "+        });",
                "+        return tabs;",
                "+    }",
                "+}",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestDirectoryPanel.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestDirectoryPanel.java",
                "new file mode 100644",
                "index 0000000000..3c043ac60d",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestDirectoryPanel.java",
                "@@ -0,0 +1,163 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.console.panels;",
                "+",
                "+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;",
                "+import java.util.ArrayList;",
                "+import java.util.Collection;",
                "+import java.util.Collections;",
                "+import java.util.Iterator;",
                "+import java.util.List;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.client.console.SyncopeConsoleSession;",
                "+import org.apache.syncope.client.console.commons.Constants;",
                "+import org.apache.syncope.client.console.commons.DirectoryDataProvider;",
                "+import org.apache.syncope.client.console.pages.BasePage;",
                "+import org.apache.syncope.client.console.panels.UserRequestDirectoryPanel.UserRequestProvider;",
                "+import org.apache.syncope.client.console.rest.UserRequestRestClient;",
                "+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;",
                "+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;",
                "+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;",
                "+import org.apache.syncope.common.lib.SyncopeClientException;",
                "+import org.apache.syncope.common.lib.to.UserRequest;",
                "+import org.apache.syncope.common.lib.types.FlowableEntitlement;",
                "+import org.apache.wicket.PageReference;",
                "+import org.apache.wicket.ajax.AjaxRequestTarget;",
                "+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;",
                "+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;",
                "+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;",
                "+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;",
                "+import org.apache.wicket.model.IModel;",
                "+import org.apache.wicket.model.ResourceModel;",
                "+",
                "+public class UserRequestDirectoryPanel",
                "+        extends DirectoryPanel<UserRequest, UserRequest, UserRequestProvider, UserRequestRestClient> {",
                "+",
                "+    private static final long serialVersionUID = -5346161040211617763L;",
                "+",
                "+    private static final String PREF_USER_REQUEST_PAGINATOR_ROWS = \"userrequest.paginator.rows\";",
                "+",
                "+    public UserRequestDirectoryPanel(final String id, final PageReference pageReference) {",
                "+        super(id, pageReference, true);",
                "+        disableCheckBoxes();",
                "+        setFooterVisibility(false);",
                "+        modal.size(Modal.Size.Large);",
                "+",
                "+        restClient = new UserRequestRestClient();",
                "+",
                "+        initResultTable();",
                "+",
                "+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, FlowableEntitlement.USER_REQUEST_LIST);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected List<IColumn<UserRequest, String>> getColumns() {",
                "+        List<IColumn<UserRequest, String>> columns = new ArrayList<>();",
                "+",
                "+        columns.add(new PropertyColumn<>(",
                "+                new ResourceModel(\"bpmnProcess\"), \"bpmnProcess\", \"bpmnProcess\"));",
                "+        columns.add(new DatePropertyColumn<>(",
                "+                new ResourceModel(\"startTime\"), \"startTime\", \"startTime\"));",
                "+        columns.add(new PropertyColumn<>(",
                "+                new ResourceModel(\"username\"), \"username\"));",
                "+        columns.add(new PropertyColumn<>(",
                "+                new ResourceModel(\"activityId\"), \"activityId\"));",
                "+",
                "+        return columns;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ActionsPanel<UserRequest> getActions(final IModel<UserRequest> model) {",
                "+        final ActionsPanel<UserRequest> panel = super.getActions(model);",
                "+",
                "+        panel.add(new ActionLink<UserRequest>() {",
                "+",
                "+            private static final long serialVersionUID = -3722207913631435501L;",
                "+",
                "+            @Override",
                "+            public void onClick(final AjaxRequestTarget target, final UserRequest ignore) {",
                "+                try {",
                "+                    restClient.cancelRequest(model.getObject().getExecutionId(), null);",
                "+                    SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));",
                "+                    target.add(container);",
                "+                    UserRequestDirectoryPanel.this.getTogglePanel().close(target);",
                "+                } catch (SyncopeClientException e) {",
                "+                    SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())",
                "+                            ? e.getClass().getName() : e.getMessage());",
                "+                    LOG.error(\"While canceling execution {}\", model.getObject().getExecutionId(), e);",
                "+                }",
                "+                ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);",
                "+            }",
                "+        }, ActionLink.ActionType.DELETE, FlowableEntitlement.USER_REQUEST_CANCEL, true);",
                "+",
                "+        return panel;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected UserRequestProvider dataProvider() {",
                "+        return new UserRequestProvider(rows);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected String paginatorRowsKey() {",
                "+        return PREF_USER_REQUEST_PAGINATOR_ROWS;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected Collection<ActionLink.ActionType> getBatches() {",
                "+        return Collections.<ActionLink.ActionType>emptyList();",
                "+    }",
                "+",
                "+    protected static class UserRequestProvider extends DirectoryDataProvider<UserRequest> {",
                "+",
                "+        private static final long serialVersionUID = -1392420250782313734L;",
                "+",
                "+        private final UserRequestRestClient restClient = new UserRequestRestClient();",
                "+",
                "+        public UserRequestProvider(final int paginatorRows) {",
                "+            super(paginatorRows);",
                "+",
                "+            setSort(\"startTime\", SortOrder.ASCENDING);",
                "+        }",
                "+",
                "+        @Override",
                "+        public Iterator<UserRequest> iterator(final long first, final long count) {",
                "+            int page = ((int) first / paginatorRows);",
                "+            return restClient.getUserRequests((page < 0 ? 0 : page) + 1, paginatorRows, getSort()).iterator();",
                "+        }",
                "+",
                "+        @Override",
                "+        public long size() {",
                "+            return restClient.countUserRequests();",
                "+        }",
                "+",
                "+        @Override",
                "+        public IModel<UserRequest> model(final UserRequest request) {",
                "+            return new IModel<UserRequest>() {",
                "+",
                "+                private static final long serialVersionUID = -2566070996511906708L;",
                "+",
                "+                @Override",
                "+                public UserRequest getObject() {",
                "+                    return request;",
                "+                }",
                "+            };",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormDetails.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormDetails.java",
                "new file mode 100644",
                "index 0000000000..9c29105549",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormDetails.java",
                "@@ -0,0 +1,62 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.console.panels;",
                "+",
                "+import org.apache.syncope.client.console.layout.UserFormLayoutInfo;",
                "+import org.apache.syncope.client.console.rest.AnyTypeRestClient;",
                "+import org.apache.syncope.client.console.wizards.AjaxWizard;",
                "+import org.apache.syncope.client.console.wizards.any.UserWizardBuilder;",
                "+import org.apache.syncope.common.lib.AnyOperations;",
                "+import org.apache.syncope.common.lib.to.UserTO;",
                "+import org.apache.syncope.common.lib.to.UserRequestForm;",
                "+import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "+import org.apache.wicket.PageReference;",
                "+",
                "+public class UserRequestFormDetails extends MultilevelPanel.SecondLevel {",
                "+",
                "+    private static final long serialVersionUID = -8847854414429745216L;",
                "+",
                "+    public UserRequestFormDetails(final PageReference pageRef, final UserRequestForm formTO) {",
                "+        super(MultilevelPanel.SECOND_LEVEL_ID);",
                "+",
                "+        final UserTO newUserTO;",
                "+        final UserTO previousUserTO;",
                "+        if (formTO.getUserPatch() == null) {",
                "+            newUserTO = formTO.getUserTO();",
                "+            previousUserTO = null;",
                "+        } else if (formTO.getUserTO() == null) {",
                "+            // make it stronger by handling possible NPE",
                "+            previousUserTO = new UserTO();",
                "+            previousUserTO.setKey(formTO.getUserPatch().getKey());",
                "+            newUserTO = AnyOperations.patch(previousUserTO, formTO.getUserPatch());",
                "+        } else {",
                "+            formTO.getUserTO().setKey(formTO.getUserPatch().getKey());",
                "+            newUserTO = AnyOperations.patch(formTO.getUserTO(), formTO.getUserPatch());",
                "+            previousUserTO = formTO.getUserTO();",
                "+        }",
                "+",
                "+        add(new UserWizardBuilder(",
                "+                previousUserTO,",
                "+                newUserTO,",
                "+                new AnyTypeRestClient().read(AnyTypeKind.USER.name()).getClasses(),",
                "+                new UserFormLayoutInfo(),",
                "+                pageRef).",
                "+                build(AjaxWizard.Mode.READONLY));",
                "+    }",
                "+}",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormDirectoryPanel.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormDirectoryPanel.java",
                "new file mode 100644",
                "index 0000000000..bf82896507",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormDirectoryPanel.java",
                "@@ -0,0 +1,353 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.console.panels;",
                "+",
                "+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;",
                "+import java.io.Serializable;",
                "+import java.util.ArrayList;",
                "+import java.util.Collection;",
                "+import java.util.Collections;",
                "+import java.util.Iterator;",
                "+import java.util.List;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.client.console.SyncopeConsoleSession;",
                "+import org.apache.syncope.client.console.commons.Constants;",
                "+import org.apache.syncope.client.console.commons.DirectoryDataProvider;",
                "+import org.apache.syncope.client.console.rest.UserRequestRestClient;",
                "+import org.apache.syncope.client.console.panels.UserRequestFormDirectoryPanel.UserRequestFormProvider;",
                "+import org.apache.syncope.client.console.layout.FormLayoutInfoUtils;",
                "+import org.apache.syncope.client.console.layout.UserFormLayoutInfo;",
                "+import org.apache.syncope.client.console.pages.BasePage;",
                "+import org.apache.syncope.client.console.rest.AnyTypeRestClient;",
                "+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;",
                "+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;",
                "+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;",
                "+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;",
                "+import org.apache.syncope.client.console.widgets.UserRequestFormsWidget;",
                "+import org.apache.syncope.client.console.wizards.AjaxWizard;",
                "+import org.apache.syncope.client.console.wizards.any.AnyWrapper;",
                "+import org.apache.syncope.client.console.wizards.any.UserWizardBuilder;",
                "+import org.apache.syncope.common.lib.AnyOperations;",
                "+import org.apache.syncope.common.lib.SyncopeClientException;",
                "+import org.apache.syncope.common.lib.patch.PasswordPatch;",
                "+import org.apache.syncope.common.lib.patch.UserPatch;",
                "+import org.apache.syncope.common.lib.to.ProvisioningResult;",
                "+import org.apache.syncope.common.lib.to.UserTO;",
                "+import org.apache.syncope.common.lib.to.UserRequestForm;",
                "+import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "+import org.apache.syncope.common.lib.types.FlowableEntitlement;",
                "+import org.apache.wicket.PageReference;",
                "+import org.apache.wicket.ajax.AjaxRequestTarget;",
                "+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;",
                "+import org.apache.wicket.event.Broadcast;",
                "+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;",
                "+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;",
                "+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;",
                "+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;",
                "+import org.apache.wicket.model.CompoundPropertyModel;",
                "+import org.apache.wicket.model.IModel;",
                "+import org.apache.wicket.model.Model;",
                "+import org.apache.wicket.model.ResourceModel;",
                "+",
                "+public class UserRequestFormDirectoryPanel",
                "+        extends DirectoryPanel<UserRequestForm, UserRequestForm, UserRequestFormProvider, UserRequestRestClient> {",
                "+",
                "+    private static final long serialVersionUID = -7122136682275797903L;",
                "+",
                "+    private static final String PREF_USER_REQUEST_FORM_PAGINATOR_ROWS = \"userrequestform.paginator.rows\";",
                "+",
                "+    protected final BaseModal<UserRequestForm> manageFormModal = new BaseModal<UserRequestForm>(\"outer\") {",
                "+",
                "+        private static final long serialVersionUID = 389935548143327858L;",
                "+",
                "+        @Override",
                "+        protected void onConfigure() {",
                "+            super.onConfigure();",
                "+            addSubmitButton();",
                "+            size(Modal.Size.Large);",
                "+        }",
                "+",
                "+    };",
                "+",
                "+    public UserRequestFormDirectoryPanel(final String id, final PageReference pageReference) {",
                "+        super(id, pageReference, true);",
                "+        disableCheckBoxes();",
                "+        setFooterVisibility(false);",
                "+        modal.size(Modal.Size.Large);",
                "+",
                "+        addOuterObject(manageFormModal);",
                "+",
                "+        manageFormModal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {",
                "+",
                "+            private static final long serialVersionUID = 8804221891699487139L;",
                "+",
                "+            @Override",
                "+            public void onClose(final AjaxRequestTarget target) {",
                "+                updateResultTable(target);",
                "+",
                "+                Serializable widget = SyncopeConsoleSession.get().getAttribute(UserRequestFormsWidget.class.getName());",
                "+                if (widget instanceof UserRequestFormsWidget) {",
                "+                    ((UserRequestFormsWidget) widget).refreshLatestAlerts(target);",
                "+                }",
                "+",
                "+                manageFormModal.show(false);",
                "+            }",
                "+        });",
                "+",
                "+        restClient = new UserRequestRestClient();",
                "+",
                "+        initResultTable();",
                "+",
                "+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, FlowableEntitlement.USER_REQUEST_FORM_SUBMIT);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected List<IColumn<UserRequestForm, String>> getColumns() {",
                "+        List<IColumn<UserRequestForm, String>> columns = new ArrayList<>();",
                "+",
                "+        columns.add(new PropertyColumn<>(",
                "+                new ResourceModel(\"bpmnProcess\"), \"bpmnProcess\", \"bpmnProcess\"));",
                "+        columns.add(new PropertyColumn<>(",
                "+                new ResourceModel(\"key\"), \"formKey\", \"formKey\"));",
                "+        columns.add(new PropertyColumn<>(",
                "+                new ResourceModel(\"username\"), \"username\"));",
                "+        columns.add(new DatePropertyColumn<>(",
                "+                new ResourceModel(\"createTime\"), \"createTime\", \"createTime\"));",
                "+        columns.add(new DatePropertyColumn<>(",
                "+                new ResourceModel(\"dueDate\"), \"dueDate\", \"dueDate\"));",
                "+        columns.add(new PropertyColumn<>(",
                "+                new ResourceModel(\"owner\"), \"owner\", \"owner\"));",
                "+",
                "+        return columns;",
                "+    }",
                "+",
                "+    @Override",
                "+    public ActionsPanel<UserRequestForm> getActions(final IModel<UserRequestForm> model) {",
                "+        final ActionsPanel<UserRequestForm> panel = super.getActions(model);",
                "+",
                "+        panel.add(new ActionLink<UserRequestForm>() {",
                "+",
                "+            private static final long serialVersionUID = -3722207913631435501L;",
                "+",
                "+            @Override",
                "+            public void onClick(final AjaxRequestTarget target, final UserRequestForm ignore) {",
                "+                claimForm(model.getObject().getTaskId());",
                "+                SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));",
                "+                ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);",
                "+                target.add(container);",
                "+            }",
                "+        }, ActionLink.ActionType.CLAIM, FlowableEntitlement.USER_REQUEST_FORM_CLAIM);",
                "+",
                "+        panel.add(new ActionLink<UserRequestForm>() {",
                "+",
                "+            private static final long serialVersionUID = -3722207913631435501L;",
                "+",
                "+            @Override",
                "+            public void onClick(final AjaxRequestTarget target, final UserRequestForm ignore) {",
                "+                manageFormModal.setFormModel(new CompoundPropertyModel<>(model.getObject()));",
                "+",
                "+                target.add(manageFormModal.setContent(new UserRequestFormModal(manageFormModal, pageRef, model.",
                "+                        getObject()) {",
                "+",
                "+                    private static final long serialVersionUID = 5546519445061007248L;",
                "+",
                "+                    @Override",
                "+                    public void onSubmit(final AjaxRequestTarget target) {",
                "+                        try {",
                "+                            super.onSubmit(target);",
                "+",
                "+                            UserRequestFormDirectoryPanel.this.getTogglePanel().close(target);",
                "+                        } catch (SyncopeClientException e) {",
                "+                            SyncopeConsoleSession.get().error(getString(Constants.ERROR) + \": \" + e.getMessage());",
                "+                        }",
                "+                        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);",
                "+                    }",
                "+",
                "+                }));",
                "+",
                "+                manageFormModal.header(new Model<>(getString(\"form.manage\", new Model<>(model.getObject()))));",
                "+                manageFormModal.show(true);",
                "+            }",
                "+",
                "+            @Override",
                "+            protected boolean statusCondition(final UserRequestForm modelObject) {",
                "+                return SyncopeConsoleSession.get().getSelfTO().getUsername().",
                "+                        equals(model.getObject().getOwner());",
                "+            }",
                "+",
                "+        }, ActionLink.ActionType.MANAGE_APPROVAL, FlowableEntitlement.USER_REQUEST_FORM_SUBMIT);",
                "+",
                "+        // SYNCOPE-1200 edit user while in approval state",
                "+        panel.add(new ActionLink<UserRequestForm>() {",
                "+",
                "+            private static final long serialVersionUID = -3722207913631435501L;",
                "+",
                "+            @Override",
                "+            public void onClick(final AjaxRequestTarget target, final UserRequestForm ignore) {",
                "+                modal.setFormModel(new CompoundPropertyModel<>(model.getObject()));",
                "+",
                "+                UserRequestForm formTO = model.getObject();",
                "+                UserTO newUserTO;",
                "+                UserTO previousUserTO;",
                "+                if (formTO.getUserPatch() == null) {",
                "+                    newUserTO = formTO.getUserTO();",
                "+                    previousUserTO = null;",
                "+                } else if (formTO.getUserTO() == null) {",
                "+                    // make it stronger by handling possible NPE",
                "+                    previousUserTO = new UserTO();",
                "+                    previousUserTO.setKey(formTO.getUserPatch().getKey());",
                "+                    newUserTO = AnyOperations.patch(previousUserTO, formTO.getUserPatch());",
                "+                } else {",
                "+                    previousUserTO = formTO.getUserTO();",
                "+                    formTO.getUserTO().setKey(formTO.getUserPatch().getKey());",
                "+                    formTO.getUserTO().setPassword(null);",
                "+                    newUserTO = AnyOperations.patch(formTO.getUserTO(), formTO.getUserPatch());",
                "+                }",
                "+",
                "+                AjaxWizard.EditItemActionEvent<UserTO> editItemActionEvent =",
                "+                        new AjaxWizard.EditItemActionEvent<>(newUserTO, target);",
                "+                editItemActionEvent.forceModalPanel(new FormUserWizardBuilder(",
                "+                        model.getObject(),",
                "+                        previousUserTO,",
                "+                        newUserTO,",
                "+                        new AnyTypeRestClient().read(AnyTypeKind.USER.name()).getClasses(),",
                "+                        FormLayoutInfoUtils.fetch(Collections.singletonList(AnyTypeKind.USER.name())).getLeft(),",
                "+                        pageRef",
                "+                ).build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT));",
                "+",
                "+                send(UserRequestFormDirectoryPanel.this, Broadcast.EXACT, editItemActionEvent);",
                "+            }",
                "+",
                "+            @Override",
                "+            protected boolean statusCondition(final UserRequestForm modelObject) {",
                "+                return SyncopeConsoleSession.get().getSelfTO().getUsername().",
                "+                        equals(model.getObject().getOwner());",
                "+            }",
                "+",
                "+        }, ActionLink.ActionType.EDIT_APPROVAL, FlowableEntitlement.USER_REQUEST_FORM_SUBMIT);",
                "+",
                "+        return panel;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected UserRequestFormProvider dataProvider() {",
                "+        return new UserRequestFormProvider(rows);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected String paginatorRowsKey() {",
                "+        return PREF_USER_REQUEST_FORM_PAGINATOR_ROWS;",
                "+    }",
                "+",
                "+    protected static class UserRequestFormProvider extends DirectoryDataProvider<UserRequestForm> {",
                "+",
                "+        private static final long serialVersionUID = -2311716167583335852L;",
                "+",
                "+        private final UserRequestRestClient restClient = new UserRequestRestClient();",
                "+",
                "+        public UserRequestFormProvider(final int paginatorRows) {",
                "+            super(paginatorRows);",
                "+",
                "+            setSort(\"createTime\", SortOrder.ASCENDING);",
                "+        }",
                "+",
                "+        @Override",
                "+        public Iterator<UserRequestForm> iterator(final long first, final long count) {",
                "+            int page = ((int) first / paginatorRows);",
                "+            return restClient.getForms((page < 0 ? 0 : page) + 1, paginatorRows, getSort()).iterator();",
                "+        }",
                "+",
                "+        @Override",
                "+        public long size() {",
                "+            return restClient.countForms();",
                "+        }",
                "+",
                "+        @Override",
                "+        public IModel<UserRequestForm> model(final UserRequestForm form) {",
                "+            return new IModel<UserRequestForm>() {",
                "+",
                "+                private static final long serialVersionUID = -2566070996511906708L;",
                "+",
                "+                @Override",
                "+                public UserRequestForm getObject() {",
                "+                    return form;",
                "+                }",
                "+            };",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    protected Collection<ActionLink.ActionType> getBatches() {",
                "+        return Collections.<ActionLink.ActionType>emptyList();",
                "+    }",
                "+",
                "+    private void claimForm(final String taskId) {",
                "+        try {",
                "+            restClient.claimForm(taskId);",
                "+        } catch (SyncopeClientException scee) {",
                "+            SyncopeConsoleSession.get().error(getString(Constants.ERROR) + \": \" + scee.getMessage());",
                "+        }",
                "+    }",
                "+",
                "+    private class FormUserWizardBuilder extends UserWizardBuilder {",
                "+",
                "+        private static final long serialVersionUID = 1854981134836384069L;",
                "+",
                "+        private final UserRequestForm formTO;",
                "+",
                "+        FormUserWizardBuilder(",
                "+                final UserRequestForm formTO,",
                "+                final UserTO previousUserTO,",
                "+                final UserTO userTO,",
                "+                final List<String> anyTypeClasses,",
                "+                final UserFormLayoutInfo formLayoutInfo,",
                "+                final PageReference pageRef) {",
                "+",
                "+            super(previousUserTO, userTO, anyTypeClasses, formLayoutInfo, pageRef);",
                "+            this.formTO = formTO;",
                "+        }",
                "+",
                "+        @Override",
                "+        protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {",
                "+            UserTO inner = modelObject.getInnerObject();",
                "+",
                "+            UserPatch patch = AnyOperations.diff(inner, formTO.getUserTO(), false);",
                "+",
                "+            if (StringUtils.isNotBlank(inner.getPassword())) {",
                "+                PasswordPatch passwordPatch = new PasswordPatch.Builder().",
                "+                        value(inner.getPassword()).onSyncope(true).resources(inner.",
                "+                        getResources()).",
                "+                        build();",
                "+                patch.setPassword(passwordPatch);",
                "+            }",
                "+",
                "+            // update just if it is changed",
                "+            ProvisioningResult<UserTO> result;",
                "+            if (patch.isEmpty()) {",
                "+                result = new ProvisioningResult<>();",
                "+                result.setEntity(inner);",
                "+            } else {",
                "+                result = userRestClient.update(getOriginalItem().getInnerObject().getETagValue(), patch);",
                "+                restClient.getForm(result.getEntity().getKey()).ifPresent(form -> claimForm(form.getTaskId()));",
                "+            }",
                "+",
                "+            return result;",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormModal.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormModal.java",
                "new file mode 100644",
                "index 0000000000..07a7950b45",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormModal.java",
                "@@ -0,0 +1,79 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.console.panels;",
                "+",
                "+import org.apache.syncope.client.console.SyncopeConsoleSession;",
                "+import org.apache.syncope.client.console.commons.Constants;",
                "+import org.apache.syncope.client.console.pages.BasePage;",
                "+import org.apache.syncope.client.console.rest.UserRequestRestClient;",
                "+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;",
                "+import org.apache.syncope.common.lib.to.UserRequestForm;",
                "+import org.apache.wicket.PageReference;",
                "+import org.apache.wicket.ajax.AjaxRequestTarget;",
                "+import org.apache.wicket.markup.html.panel.Panel;",
                "+",
                "+public class UserRequestFormModal extends Panel implements SubmitableModalPanel, WizardModalPanel<UserRequestForm> {",
                "+",
                "+    private static final long serialVersionUID = -8847854414429745216L;",
                "+",
                "+    private final UserRequestRestClient restClient = new UserRequestRestClient();",
                "+",
                "+    private final BaseModal<?> modal;",
                "+",
                "+    private final UserRequestForm formTO;",
                "+",
                "+    private final PageReference pageRef;",
                "+",
                "+    public UserRequestFormModal(final BaseModal<?> modal, final PageReference pageRef, final UserRequestForm formTO) {",
                "+        super(BaseModal.CONTENT_ID);",
                "+        this.modal = modal;",
                "+        this.formTO = formTO;",
                "+        this.pageRef = pageRef;",
                "+",
                "+        MultilevelPanel mlp = new MultilevelPanel(\"userRequestForm\");",
                "+        mlp.setFirstLevel(new UserRequestFormPanel(pageRef, formTO) {",
                "+",
                "+            private static final long serialVersionUID = -2195387360323687302L;",
                "+",
                "+            @Override",
                "+            protected void viewDetails(final AjaxRequestTarget target) {",
                "+                mlp.next(getString(\"userRequest.details\"), new UserRequestFormDetails(pageRef, formTO), target);",
                "+            }",
                "+        });",
                "+        add(mlp);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void onSubmit(final AjaxRequestTarget target) {",
                "+        this.restClient.submitForm(formTO);",
                "+        this.modal.show(false);",
                "+        this.modal.close(target);",
                "+        SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));",
                "+    }",
                "+",
                "+    @Override",
                "+    public void onError(final AjaxRequestTarget target) {",
                "+        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);",
                "+    }",
                "+",
                "+    @Override",
                "+    public UserRequestForm getItem() {",
                "+        return this.formTO;",
                "+    }",
                "+}",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormPanel.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormPanel.java",
                "new file mode 100644",
                "index 0000000000..6520177f1d",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormPanel.java",
                "@@ -0,0 +1,200 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.console.panels;",
                "+",
                "+import java.text.ParseException;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.Date;",
                "+import java.util.List;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.commons.lang3.math.NumberUtils;",
                "+import org.apache.commons.lang3.time.FastDateFormat;",
                "+import org.apache.syncope.client.console.commons.MapChoiceRenderer;",
                "+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;",
                "+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSpinnerFieldPanel;",
                "+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;",
                "+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDateTimeFieldPanel;",
                "+import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;",
                "+import org.apache.syncope.common.lib.to.UserRequestFormProperty;",
                "+import org.apache.syncope.common.lib.to.UserRequestForm;",
                "+import org.apache.syncope.common.lib.types.StandardEntitlement;",
                "+import org.apache.wicket.PageReference;",
                "+import org.apache.wicket.ajax.AjaxRequestTarget;",
                "+import org.apache.wicket.ajax.markup.html.AjaxLink;",
                "+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;",
                "+import org.apache.wicket.markup.html.list.ListItem;",
                "+import org.apache.wicket.markup.html.list.ListView;",
                "+import org.apache.wicket.markup.html.panel.Panel;",
                "+import org.apache.wicket.model.IModel;",
                "+import org.apache.wicket.model.LoadableDetachableModel;",
                "+import org.apache.wicket.model.PropertyModel;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+public abstract class UserRequestFormPanel extends Panel {",
                "+",
                "+    private static final long serialVersionUID = -8847854414429745216L;",
                "+",
                "+    protected static final Logger LOG = LoggerFactory.getLogger(UserRequestFormPanel.class);",
                "+",
                "+    public UserRequestFormPanel(final PageReference pageRef, final UserRequestForm form) {",
                "+        super(MultilevelPanel.FIRST_LEVEL_ID);",
                "+",
                "+        IModel<List<UserRequestFormProperty>> formProps = new LoadableDetachableModel<List<UserRequestFormProperty>>() {",
                "+",
                "+            private static final long serialVersionUID = 3169142472626817508L;",
                "+",
                "+            @Override",
                "+            protected List<UserRequestFormProperty> load() {",
                "+                return form.getProperties();",
                "+            }",
                "+        };",
                "+",
                "+        ListView<UserRequestFormProperty> propView = new ListView<UserRequestFormProperty>(\"propView\", formProps) {",
                "+",
                "+            private static final long serialVersionUID = 9101744072914090143L;",
                "+",
                "+            @Override",
                "+            @SuppressWarnings({ \"unchecked\", \"rawtypes\" })",
                "+            protected void populateItem(final ListItem<UserRequestFormProperty> item) {",
                "+                final UserRequestFormProperty prop = item.getModelObject();",
                "+",
                "+                String label = StringUtils.isBlank(prop.getName()) ? prop.getId() : prop.getName();",
                "+",
                "+                FieldPanel field;",
                "+                switch (prop.getType()) {",
                "+                    case Boolean:",
                "+                        field = new AjaxDropDownChoicePanel(\"value\", label, new PropertyModel<String>(prop, \"value\") {",
                "+",
                "+                            private static final long serialVersionUID = -3743432456095828573L;",
                "+",
                "+                            @Override",
                "+                            public String getObject() {",
                "+                                return StringUtils.isBlank(prop.getValue())",
                "+                                        ? null",
                "+                                        : prop.getValue().equals(\"true\") ? \"Yes\" : \"No\";",
                "+                            }",
                "+",
                "+                            @Override",
                "+                            public void setObject(final String object) {",
                "+                                prop.setValue(String.valueOf(object.equalsIgnoreCase(\"yes\")));",
                "+                            }",
                "+",
                "+                        }, false).setChoices(Arrays.asList(new String[] { \"Yes\", \"No\" }));",
                "+                        break;",
                "+",
                "+                    case Date:",
                "+                        FastDateFormat formatter = FastDateFormat.getInstance(prop.getDatePattern());",
                "+                        field = new AjaxDateTimeFieldPanel(\"value\", label, new PropertyModel<Date>(prop, \"value\") {",
                "+",
                "+                            private static final long serialVersionUID = -3743432456095828573L;",
                "+",
                "+                            @Override",
                "+                            public Date getObject() {",
                "+                                try {",
                "+                                    return StringUtils.isBlank(prop.getValue())",
                "+                                            ? null",
                "+                                            : formatter.parse(prop.getValue());",
                "+                                } catch (ParseException e) {",
                "+                                    LOG.error(\"Unparsable date: {}\", prop.getValue(), e);",
                "+                                    return null;",
                "+                                }",
                "+                            }",
                "+",
                "+                            @Override",
                "+                            public void setObject(final Date object) {",
                "+                                prop.setValue(formatter.format(object));",
                "+                            }",
                "+",
                "+                        }, prop.getDatePattern());",
                "+                        break;",
                "+",
                "+                    case Enum:",
                "+                        field = new AjaxDropDownChoicePanel(",
                "+                                \"value\", label, new PropertyModel<String>(prop, \"value\"), false).",
                "+                                setChoiceRenderer(new MapChoiceRenderer(prop.getEnumValues())).",
                "+                                setChoices(new ArrayList<>(prop.getEnumValues().keySet()));",
                "+                        break;",
                "+",
                "+                    case Dropdown:",
                "+                        field = new AjaxDropDownChoicePanel(",
                "+                                \"value\", label, new PropertyModel<String>(prop, \"value\"), false).",
                "+                                setChoiceRenderer(new MapChoiceRenderer(prop.getDropdownValues())).",
                "+                                setChoices(new ArrayList<>(prop.getDropdownValues().keySet()));",
                "+                        break;",
                "+",
                "+                    case Long:",
                "+                        field = new AjaxSpinnerFieldPanel.Builder<Long>().build(",
                "+                                \"value\",",
                "+                                label,",
                "+                                Long.class,",
                "+                                new PropertyModel<Long>(prop, \"value\") {",
                "+",
                "+                            private static final long serialVersionUID = -7688359318035249200L;",
                "+",
                "+                            @Override",
                "+                            public Long getObject() {",
                "+                                return StringUtils.isBlank(prop.getValue())",
                "+                                        ? null",
                "+                                        : NumberUtils.toLong(prop.getValue());",
                "+                            }",
                "+",
                "+                            @Override",
                "+                            public void setObject(final Long object) {",
                "+                                prop.setValue(String.valueOf(object));",
                "+                            }",
                "+                        });",
                "+                        break;",
                "+",
                "+                    case String:",
                "+                    default:",
                "+                        field = new AjaxTextFieldPanel(\"value\", label, new PropertyModel<>(prop, \"value\"), false);",
                "+                        break;",
                "+                }",
                "+",
                "+                field.setReadOnly(!prop.isWritable());",
                "+                if (prop.isRequired()) {",
                "+                    field.addRequiredLabel();",
                "+                }",
                "+",
                "+                item.add(field);",
                "+            }",
                "+        };",
                "+",
                "+        AjaxLink<String> userDetails = new AjaxLink<String>(\"userDetails\") {",
                "+",
                "+            private static final long serialVersionUID = -4804368561204623354L;",
                "+",
                "+            @Override",
                "+            public void onClick(final AjaxRequestTarget target) {",
                "+                viewDetails(target);",
                "+            }",
                "+        };",
                "+        MetaDataRoleAuthorizationStrategy.authorize(userDetails, ENABLE, StandardEntitlement.USER_READ);",
                "+",
                "+        boolean enabled = form.getUserTO() != null;",
                "+        userDetails.setVisible(enabled).setEnabled(enabled);",
                "+",
                "+        add(propView);",
                "+        add(userDetails);",
                "+    }",
                "+",
                "+    protected abstract void viewDetails(final AjaxRequestTarget target);",
                "+}",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/UserRequestRestClient.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/UserRequestRestClient.java",
                "index e3a179f71c..8d3b03b3fa 100644",
                "--- a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/UserRequestRestClient.java",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/UserRequestRestClient.java",
                "@@ -23,4 +23,6 @@ import java.util.Optional;",
                " import org.apache.syncope.common.lib.to.PagedResult;",
                "+import org.apache.syncope.common.lib.to.UserRequest;",
                " import org.apache.syncope.common.lib.to.UserRequestForm;",
                " import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;",
                "+import org.apache.syncope.common.rest.api.beans.UserRequestQuery;",
                " import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;",
                "@@ -32,2 +34,18 @@ public class UserRequestRestClient extends BaseRestClient {",
                "+    public int countUserRequests() {",
                "+        return getService(UserRequestService.class).",
                "+                list(new UserRequestQuery.Builder().page(1).size(1).build()).",
                "+                getTotalCount();",
                "+    }",
                "+",
                "+    public List<UserRequest> getUserRequests(final int page, final int size, final SortParam<String> sort) {",
                "+        return getService(UserRequestService.class).",
                "+                list(new UserRequestQuery.Builder().page(page).size(size).orderBy(toOrderBy(sort)).build()).",
                "+                getResult();",
                "+    }",
                "+",
                "+    public void cancelRequest(final String executionId, final String reason) {",
                "+        getService(UserRequestService.class).cancel(executionId, reason);",
                "+    }",
                "+",
                "     public int countForms() {",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/widgets/UserRequestFormsWidget.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/widgets/UserRequestFormsWidget.java",
                "new file mode 100644",
                "index 0000000000..b445dd926f",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/widgets/UserRequestFormsWidget.java",
                "@@ -0,0 +1,128 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.console.widgets;",
                "+",
                "+import de.agilecoders.wicket.core.markup.html.bootstrap.image.Icon;",
                "+import de.agilecoders.wicket.extensions.markup.html.bootstrap.icon.FontAwesomeIconTypeBuilder;",
                "+import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "+import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;",
                "+import org.apache.syncope.client.console.SyncopeConsoleSession;",
                "+import org.apache.syncope.client.console.annotations.ExtWidget;",
                "+import org.apache.syncope.client.console.pages.UserRequests;",
                "+import org.apache.syncope.client.console.rest.UserRequestRestClient;",
                "+import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;",
                "+import org.apache.syncope.common.lib.to.UserRequestForm;",
                "+import org.apache.syncope.common.lib.types.FlowableEntitlement;",
                "+import org.apache.wicket.PageReference;",
                "+import org.apache.wicket.ajax.AjaxRequestTarget;",
                "+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;",
                "+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;",
                "+import org.apache.wicket.markup.html.WebPage;",
                "+import org.apache.wicket.markup.html.link.AbstractLink;",
                "+import org.apache.wicket.markup.html.link.BookmarkablePageLink;",
                "+import org.apache.wicket.model.IModel;",
                "+import org.apache.wicket.model.util.ListModel;",
                "+import org.apache.wicket.util.time.Duration;",
                "+",
                "+@ExtWidget(priority = 10)",
                "+public class UserRequestFormsWidget extends ExtAlertWidget<UserRequestForm> {",
                "+",
                "+    private static final long serialVersionUID = 7667120094526529934L;",
                "+",
                "+    private final UserRequestRestClient restClient = new UserRequestRestClient();",
                "+",
                "+    private final List<UserRequestForm> lastForms = new ArrayList<>();",
                "+",
                "+    public UserRequestFormsWidget(final String id, final PageReference pageRef) {",
                "+        super(id);",
                "+        setOutputMarkupId(true);",
                "+",
                "+        latestAlertsList.add(new IndicatorAjaxTimerBehavior(Duration.seconds(30)) {",
                "+",
                "+            private static final long serialVersionUID = 7298597675929755960L;",
                "+",
                "+            @Override",
                "+            protected void onTimer(final AjaxRequestTarget target) {",
                "+                if (!latestAlerts.getObject().equals(lastForms)) {",
                "+                    refreshLatestAlerts(target);",
                "+                }",
                "+            }",
                "+        });",
                "+    }",
                "+",
                "+    public final void refreshLatestAlerts(final AjaxRequestTarget target) {",
                "+        latestAlerts.getObject().clear();",
                "+        latestAlerts.getObject().addAll(lastForms);",
                "+",
                "+        int latestAlertSize = getLatestAlertsSize();",
                "+        linkAlertsNumber.setDefaultModelObject(latestAlertSize);",
                "+        target.add(linkAlertsNumber);",
                "+",
                "+        headerAlertsNumber.setDefaultModelObject(latestAlertSize);",
                "+        target.add(headerAlertsNumber);",
                "+",
                "+        target.add(latestAlertsList);",
                "+",
                "+        lastForms.clear();",
                "+        lastForms.addAll(latestAlerts.getObject());",
                "+    }",
                "+",
                "+    @Override",
                "+    protected int getLatestAlertsSize() {",
                "+        return SyncopeConsoleSession.get().owns(FlowableEntitlement.USER_REQUEST_FORM_LIST)",
                "+                ? restClient.countForms()",
                "+                : 0;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected IModel<List<UserRequestForm>> getLatestAlerts() {",
                "+        return new ListModel<UserRequestForm>() {",
                "+",
                "+            private static final long serialVersionUID = -2583290457773357445L;",
                "+",
                "+            @Override",
                "+            public List<UserRequestForm> getObject() {",
                "+                List<UserRequestForm> updatedForms;",
                "+                if (SyncopeConsoleSession.get().owns(FlowableEntitlement.USER_REQUEST_FORM_LIST)) {",
                "+                    updatedForms = restClient.getForms(1, MAX_SIZE, new SortParam<>(\"createTime\", true));",
                "+                } else {",
                "+                    updatedForms = Collections.<UserRequestForm>emptyList();",
                "+                }",
                "+",
                "+                return updatedForms;",
                "+            }",
                "+        };",
                "+    }",
                "+",
                "+    @Override",
                "+    protected AbstractLink getEventsLink(final String linkid) {",
                "+        BookmarkablePageLink<UserRequests> userRequests = BookmarkablePageLinkBuilder.build(linkid, UserRequests.class);",
                "+        MetaDataRoleAuthorizationStrategy.authorize(",
                "+                userRequests, WebPage.ENABLE, FlowableEntitlement.USER_REQUEST_FORM_LIST);",
                "+        return userRequests;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected Icon getIcon(final String iconid) {",
                "+        return new Icon(iconid,",
                "+                FontAwesomeIconTypeBuilder.on(FontAwesomeIconTypeBuilder.FontAwesomeGraphic.handshake_o).build());",
                "+    }",
                "+}",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests.html b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests.html",
                "new file mode 100644",
                "index 0000000000..d14949c7e9",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests.html",
                "@@ -0,0 +1,35 @@",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">",
                "+  <wicket:extend>",
                "+    <section class=\"content-header\">",
                "+      <h1>&nbsp;</h1>",
                "+      <ol class=\"breadcrumb\">",
                "+        <li><a wicket:id=\"dashboardBr\"><i class=\"fa fa-dashboard\"></i> <wicket:message key=\"dashboard\">[DASHBOARD]</wicket:message></a></li>",
                "+        <li class=\"active\"><wicket:message key=\"userRequests\"/></li>",
                "+      </ol>",
                "+    </section>",
                "+",
                "+    <section class=\"content\" wicket:id=\"content\">",
                "+      <div class=\"box\">",
                "+        <div class=\"box-body\" wicket:id=\"tabbedPanel\"/>",
                "+      </div>",
                "+    </section>",
                "+  </wicket:extend>",
                "+</html>",
                "\\ No newline at end of file",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests.properties",
                "new file mode 100644",
                "index 0000000000..9f30811f25",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests.properties",
                "@@ -0,0 +1,38 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+bpmnProcess=User Request",
                "+key=Key",
                "+description=Description",
                "+createTime=Create Time",
                "+dueDate=Due Date",
                "+owner=Owner",
                "+claim=Claim",
                "+manage=Manage",
                "+userRequests=User Requests",
                "+delete=Delete",
                "+type=Type",
                "+username=Username",
                "+new_user=New User",
                "+creationDate = Creation Date",
                "+claimDate = Claim Dare",
                "+form.edit=Edit",
                "+form.manage=Manage",
                "+any.edit=Edit ${anyTO.type} ${anyTO.username}",
                "+userRequestForms=Forms",
                "+activeRequests=Active Requests",
                "+startTime=Start",
                "+activityId=Status",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_it.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_it.properties",
                "new file mode 100644",
                "index 0000000000..04f5462aed",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_it.properties",
                "@@ -0,0 +1,38 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+bpmnProcess=User Request",
                "+key=Chiave",
                "+description=Descrizione",
                "+createTime=Data di creazione",
                "+dueDate=Scadenza",
                "+owner=Esecutore",
                "+claim=Richiedi",
                "+manage=Gestisci",
                "+userRequests=Richieste utente",
                "+delete=Rimuovi",
                "+type=Tipo",
                "+username=Utente",
                "+new_user=Nuovo utente",
                "+creationDate = Data creazione",
                "+claimDate = Data rivendicazione",
                "+form.manage=Gestisci",
                "+form.edit=Modifica",
                "+any.edit=Edit ${anyTO.type} ${anyTO.username}",
                "+userRequestForms=Form",
                "+activeRequests=Richieste attive",
                "+startTime=Inizio",
                "+activityId=Stato",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_ja.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_ja.properties",
                "new file mode 100644",
                "index 0000000000..61fef13ff1",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_ja.properties",
                "@@ -0,0 +1,38 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+bpmnProcess=User Request",
                "+key=\\u30ad\\u30fc",
                "+description=\\u8aac\\u660e",
                "+createTime=\\u4f5c\\u6210\\u6642\\u523b",
                "+dueDate=\\u671f\\u9650",
                "+owner=\\u30aa\\u30fc\\u30ca\\u30fc",
                "+claim=\\u7533\\u8acb",
                "+manage=\\u7ba1\\u7406",
                "+userRequests=User Requests",
                "+delete=\\u524a\\u9664",
                "+type=\\u30bf\\u30a4\\u30d7",
                "+username=\\u30e6\\u30fc\\u30b6\\u30fc\\u540d",
                "+new_user=\\u65b0\\u3057\\u3044\\u30e6\\u30fc\\u30b6\\u30fc",
                "+creationDate = \\u4f5c\\u6210\\u65e5",
                "+claimDate = \\u7533\\u8acb\\u65e5",
                "+form.edit=Edit",
                "+form.manage=Manage",
                "+any.edit=${anyTO.type} ${anyTO.username} \\u3092\\u7de8\\u96c6",
                "+userRequestForms=Forms",
                "+activeRequests=Active Requests",
                "+startTime=Start",
                "+activityId=Status",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_pt_BR.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_pt_BR.properties",
                "new file mode 100644",
                "index 0000000000..65c43f4451",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_pt_BR.properties",
                "@@ -0,0 +1,38 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+bpmnProcess=User Request",
                "+key=Chave",
                "+description=Descri\\u00e7\\u00e3o",
                "+createTime=Tempo de Cria\\u00e7\\u00e3o",
                "+dueDate=Data acordada",
                "+owner=Propriet\\u00e1rio",
                "+claim=Requerimento",
                "+manage=Ger\\u00eancia",
                "+userRequests=User Requests",
                "+delete=Excluir",
                "+type=Tipo",
                "+username=Usu\\u00e1rio",
                "+new_user=Novo Usu\\u00e1rio",
                "+creationDate = Data de cria\\u00e7\\u00e3o",
                "+claimDate = Data de reivindica\\u00e7\\u00e3o",
                "+form.manage=Manage",
                "+form.edit=Edit",
                "+any.edit=Edit ${anyTO.type} ${anyTO.username}",
                "+userRequestForms=Forms",
                "+activeRequests=Active Requests",
                "+startTime=Start",
                "+activityId=Status",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_ru.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_ru.properties",
                "new file mode 100644",
                "index 0000000000..52b454b6c4",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_ru.properties",
                "@@ -0,0 +1,56 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+#",
                "+# taskId=\\u00d0\\u0097\\u00d0\\u00b0\\u00d1\\u008f\\u00d0\\u00b2\\u00d0\\u00ba\\u00d0\\u00b0",
                "+bpmnProcess=User Request",
                "+# key=\\u00d0\\u0098\\u00d0\\u00b4\\u00d0\\u00b5\\u00d0\\u00bd\\u00d1\\u0082\\u00d0\\u00b8\\u00d1\\u0084\\u00d0\\u00b8\\u00d0\\u00ba\\u00d0\\u00b0\\u00d1\\u0082\\u00d0\\u00be\\u00d1\\u0080",
                "+key=\\u0418\\u0434\\u0435\\u043d\\u0442\\u0438\\u0444\\u0438\\u043a\\u0430\\u0442\\u043e\\u0440",
                "+# description=\\u00d0\\u009e\\u00d0\\u00bf\\u00d0\\u00b8\\u00d1\\u0081\\u00d0\\u00b0\\u00d0\\u00bd\\u00d0\\u00b8\\u00d0\\u00b5",
                "+description=\\u041e\\u043f\\u0438\\u0441\\u0430\\u043d\\u0438\\u0435",
                "+# createTime=\\u00d0\\u0094\\u00d0\\u00b0\\u00d1\\u0082\\u00d0\\u00b0 \\u00d1\\u0081\\u00d0\\u00be\\u00d0\\u00b7\\u00d0\\u00b4\\u00d0\\u00b0\\u00d0\\u00bd\\u00d0\\u00b8\\u00d1\\u008f",
                "+createTime=\\u0414\\u0430\\u0442\\u0430 \\u0441\\u043e\\u0437\\u0434\\u0430\\u043d\\u0438\\u044f",
                "+# dueDate=\\u00d0\\u00a1\\u00d1\\u0080\\u00d0\\u00be\\u00d0\\u00ba",
                "+dueDate=\\u0421\\u0440\\u043e\\u043a",
                "+# owner=\\u00d0\\u0092\\u00d0\\u00bb\\u00d0\\u00b0\\u00d0\\u00b4\\u00d0\\u00b5\\u00d0\\u00bb\\u00d0\\u00b5\\u00d1\\u0086",
                "+owner=\\u0412\\u043b\\u0430\\u0434\\u0435\\u043b\\u0435\\u0446",
                "+# claim=\\u00d0\\u0092\\u00d1\\u008b\\u00d0\\u00bf\\u00d0\\u00be\\u00d0\\u00bb\\u00d0\\u00bd\\u00d0\\u00b8\\u00d1\\u0082\\u00d1\\u008c \\u00d1\\u0081\\u00d0\\u00be\\u00d0\\u00b3\\u00d0\\u00bb\\u00d0\\u00b0\\u00d1\\u0081\\u00d0\\u00be\\u00d0\\u00b2\\u00d0\\u00b0\\u00d0\\u00bd\\u00d0\\u00b8\\u00d0\\u00b5",
                "+claim=\\u0412\\u044b\\u043f\\u043e\\u043b\\u043d\\u0438\\u0442\\u044c \\u0441\\u043e\\u0433\\u043b\\u0430\\u0441\\u043e\\u0432\\u0430\\u043d\\u0438\\u0435",
                "+# manage=\\u00d0\\u00a3\\u00d0\\u00bf\\u00d1\\u0080\\u00d0\\u00b0\\u00d0\\u00b2\\u00d0\\u00bb\\u00d0\\u00b5\\u00d0\\u00bd\\u00d0\\u00b8\\u00d0\\u00b5",
                "+manage=\\u0423\\u043f\\u0440\\u0430\\u0432\\u043b\\u0435\\u043d\\u0438\\u0435",
                "+# approvals=\\u00d0\\u0097\\u00d0\\u00b0\\u00d1\\u008f\\u00d0\\u00b2\\u00d0\\u00ba\\u00d0\\u00b8",
                "+userRequests=User Requests",
                "+# delete=\\u00d0\\u00a3\\u00d0\\u00b4\\u00d0\\u00b0\\u00d0\\u00bb\\u00d0\\u00b8\\u00d1\\u0082\\u00d1\\u008c",
                "+delete=\\u0423\\u0434\\u0430\\u043b\\u0438\\u0442\\u044c",
                "+# type=\\u00d0\\u00a2\\u00d0\\u00b8\\u00d0\\u00bf",
                "+type=\\u0422\\u0438\\u043f",
                "+# username=\\u00d0\\u0098\\u00d0\\u00bc\\u00d1\\u008f \\u00d0\\u00bf\\u00d0\\u00be\\u00d0\\u00bb\\u00d1\\u008c\\u00d0\\u00b7\\u00d0\\u00be\\u00d0\\u00b2\\u00d0\\u00b0\\u00d1\\u0082\\u00d0\\u00b5\\u00d0\\u00bb\\u00d1\\u008f",
                "+username=\\u0418\\u043c\\u044f \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u044f",
                "+# new_user=\\u00d0\\u00a1\\u00d0\\u00be\\u00d0\\u00b7\\u00d0\\u00b4\\u00d0\\u00b0\\u00d0\\u00bd\\u00d0\\u00b8\\u00d0\\u00b5 \\u00d0\\u00bf\\u00d0\\u00be\\u00d0\\u00bb\\u00d1\\u008c\\u00d0\\u00b7\\u00d0\\u00be\\u00d0\\u00b2\\u00d0\\u00b0\\u00d1\\u0082\\u00d0\\u00b5\\u00d0\\u00bb\\u00d1\\u008f",
                "+new_user=\\u0421\\u043e\\u0437\\u0434\\u0430\\u043d\\u0438\\u0435 \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u044f",
                "+# creationDate=\\u00d0\\u0094\\u00d0\\u00b0\\u00d1\\u0082\\u00d0\\u00b0 \\u00d1\\u0081\\u00d0\\u00be\\u00d0\\u00b7\\u00d0\\u00b4\\u00d0\\u00b0\\u00d0\\u00bd\\u00d0\\u00b8\\u00d1\\u008f",
                "+creationDate=\\u0414\\u0430\\u0442\\u0430 \\u0441\\u043e\\u0437\\u0434\\u0430\\u043d\\u0438\\u044f",
                "+# claimDate=\\u00d0\\u0094\\u00d0\\u00b0\\u00d1\\u0082\\u00d0\\u00b0 \\u00d0\\u00bd\\u00d0\\u00b0\\u00d1\\u0087\\u00d0\\u00b0\\u00d0\\u00bb\\u00d0\\u00b0 \\u00d1\\u0081\\u00d0\\u00be\\u00d0\\u00b3\\u00d0\\u00bb\\u00d0\\u00b0\\u00d1\\u0081\\u00d0\\u00be\\u00d0\\u00b2\\u00d0\\u00b0\\u00d0\\u00bd\\u00d0\\u00b8\\u00d1\\u008f",
                "+claimDate=\\u0414\\u0430\\u0442\\u0430 \\u043d\\u0430\\u0447\\u0430\\u043b\\u0430 \\u0441\\u043e\\u0433\\u043b\\u0430\\u0441\\u043e\\u0432\\u0430\\u043d\\u0438\\u044f",
                "+# approval.edit=\\u00d0\\u00a1\\u00d0\\u00be\\u00d0\\u00b3\\u00d0\\u00bb\\u00d0\\u00b0\\u00d1\\u0081\\u00d0\\u00be\\u00d0\\u00b2\\u00d0\\u00b0\\u00d0\\u00bd\\u00d0\\u00b8\\u00d0\\u00b5",
                "+form.edit=Edit",
                "+# approval.manage=\\u00d0\\u00a1\\u00d0\\u00be\\u00d0\\u00b3\\u00d0\\u00bb\\u00d0\\u00b0\\u00d1\\u0081\\u00d0\\u00be\\u00d0\\u00b2\\u00d0\\u00b0\\u00d0\\u00bd\\u00d0\\u00b8\\u00d0\\u00b5",
                "+form.manage=Manage",
                "+any.edit=Edit ${anyTO.type} ${anyTO.username}",
                "+userRequestForms=Forms",
                "+activeRequests=Active Requests",
                "+startTime=Start",
                "+activityId=Status",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormDetails.html b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormDetails.html",
                "new file mode 100644",
                "index 0000000000..1de2361f09",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormDetails.html",
                "@@ -0,0 +1,23 @@",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">",
                "+  <wicket:panel>",
                "+    <span wicket:id=\"wizard\"/>",
                "+  </wicket:panel>",
                "+</html>",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal.html b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal.html",
                "new file mode 100644",
                "index 0000000000..777dbd8d5a",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal.html",
                "@@ -0,0 +1,23 @@",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">",
                "+  <wicket:panel>",
                "+    <span wicket:id=\"userRequestForm\"></span>",
                "+  </wicket:panel>",
                "+</html>",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal.properties",
                "new file mode 100644",
                "index 0000000000..b636185750",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal.properties",
                "@@ -0,0 +1,17 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+userRequest.details=Request details",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_it.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_it.properties",
                "new file mode 100644",
                "index 0000000000..e68bb1563c",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_it.properties",
                "@@ -0,0 +1,17 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+userRequest.details=Dettagli richiesta",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_ja.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_ja.properties",
                "new file mode 100644",
                "index 0000000000..b636185750",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_ja.properties",
                "@@ -0,0 +1,17 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+userRequest.details=Request details",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_pt_BR.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_pt_BR.properties",
                "new file mode 100644",
                "index 0000000000..b636185750",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_pt_BR.properties",
                "@@ -0,0 +1,17 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+userRequest.details=Request details",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_ru.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_ru.properties",
                "new file mode 100644",
                "index 0000000000..b636185750",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_ru.properties",
                "@@ -0,0 +1,17 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+userRequest.details=Request details",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel.html b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel.html",
                "new file mode 100644",
                "index 0000000000..64805b9d59",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel.html",
                "@@ -0,0 +1,31 @@",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">",
                "+  <wicket:panel>",
                "+    <div wicket:id=\"propView\">",
                "+      <span wicket:id=\"value\">[value]</span>",
                "+    </div>",
                "+",
                "+    <div style=\"margin: 20px 0\">",
                "+      <a href=\"#\" alt=\"user details\" class=\"btn btn-primary btn-circle btn-lg\" wicket:id=\"userDetails\" wicket:message=\"title:userDetails\">",
                "+        <i class=\"glyphicon glyphicon-eye-open\"></i>",
                "+      </a>",
                "+    </div>",
                "+  </wicket:panel>",
                "+</html>",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel.properties",
                "new file mode 100644",
                "index 0000000000..450ff508db",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel.properties",
                "@@ -0,0 +1,18 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+userDetails=User details",
                "+userForm=Edit User",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_it.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_it.properties",
                "new file mode 100644",
                "index 0000000000..92c475d20e",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_it.properties",
                "@@ -0,0 +1,18 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+userDetails=Dettagli utente",
                "+userForm=Modifica utente",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_ja.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_ja.properties",
                "new file mode 100644",
                "index 0000000000..5a9cc2d8aa",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_ja.properties",
                "@@ -0,0 +1,18 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+userDetails=\\u30e6\\u30fc\\u30b6\\u30fc\\u8a73\\u7d30",
                "+userForm=\\u30e6\\u30fc\\u30b6\\u30fc\\u3092\\u7de8\\u96c6",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_pt_BR.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_pt_BR.properties",
                "new file mode 100644",
                "index 0000000000..00a8971539",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_pt_BR.properties",
                "@@ -0,0 +1,18 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+userDetails=Detalhes do Usu\\u00e1rio",
                "+userForm=Detalhes do Usu\\u00e1rio",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_ru.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_ru.properties",
                "similarity index 56%",
                "rename from ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_ru.properties",
                "rename to ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_ru.properties",
                "index 10281ff587..02c159a166 100644",
                "--- a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_ru.properties",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_ru.properties",
                "@@ -17,6 +17,4 @@",
                " #",
                "-alerts.view.all=\\u041f\\u043e\\u0441\\u043c\\u043e\\u0442\\u0440\\u0435\\u0442\\u044c \\u0432\\u0441\\u0435 \\u0437\\u0430\\u044f\\u0432\\u043a\\u0438",
                "-duedate=\\u0421\\u0440\\u043e\\u043a",
                "-owner=\\u0412\\u043b\\u0430\\u0434\\u0435\\u043b\\u0435\\u0446",
                "-createApproval=\\u0421\\u043e\\u0437\\u0434\\u0430\\u0442\\u044c \\u0437\\u0430\\u044f\\u0432\\u043a\\u0443",
                "-summary=\\u041e\\u0436\\u0438\\u0434\\u0430\\u044e\\u0442 \\u0441\\u043e\\u0433\\u043b\\u0430\\u0441\\u043e\\u0432\\u0430\\u043d\\u0438\\u044f: ${number}",
                "+# userDetails=\\u00d0\\u0098\\u00d0\\u00bd\\u00d1\\u0084\\u00d0\\u00be\\u00d1\\u0080\\u00d0\\u00bc\\u00d0\\u00b0\\u00d1\\u0086\\u00d0\\u00b8\\u00d1\\u008f \\u00d0\\u00be \\u00d0\\u00bf\\u00d0\\u00be\\u00d0\\u00bb\\u00d1\\u008c\\u00d0\\u00b7\\u00d0\\u00be\\u00d0\\u00b2\\u00d0\\u00b0\\u00d1\\u0082\\u00d0\\u00b5\\u00d0\\u00bb\\u00d0\\u00b5",
                "+userDetails=\\u0418\\u043d\\u0444\\u043e\\u0440\\u043c\\u0430\\u0446\\u0438\\u044f \\u043e \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u0435",
                "+userForm=\\u0418\\u043d\\u0444\\u043e\\u0440\\u043c\\u0430\\u0446\\u0438\\u044f \\u043e \\u043f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u0435",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_pt_BR.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget.properties",
                "similarity index 88%",
                "rename from ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_pt_BR.properties",
                "rename to ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget.properties",
                "index c24f3d8f74..36e1e2e4ee 100644",
                "--- a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_pt_BR.properties",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget.properties",
                "@@ -16,6 +16,5 @@",
                " # under the License.",
                "-alerts.view.all=View all Approvals",
                "+alerts.view.all=View all forms",
                " duedate=Due date",
                " owner=Owner",
                "-createApproval=Create Approval",
                "-summary=${number} pending approval(s)",
                "+summary=${number} pending form(s)",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_it.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_it.properties",
                "similarity index 87%",
                "rename from ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_it.properties",
                "rename to ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_it.properties",
                "index 7b2287e45a..bf3e9adfc4 100644",
                "--- a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_it.properties",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_it.properties",
                "@@ -16,6 +16,5 @@",
                " # under the License.",
                "-alerts.view.all=Tutte le approvazioni",
                "+alerts.view.all=Tutte le form",
                " duedate=Scadenza",
                " owner=Assegnato",
                "-createApproval=Approvazione Creazione",
                "-summary=${number} approvazioni pendenti",
                "+summary=${number} form pendenti",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_ja.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_ja.properties",
                "similarity index 83%",
                "rename from ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_ja.properties",
                "rename to ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_ja.properties",
                "index a6089eb857..0d938e397c 100644",
                "--- a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_ja.properties",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_ja.properties",
                "@@ -16,6 +16,5 @@",
                " # under the License.",
                "-alerts.view.all=\\u3059\\u3079\\u3066\\u306e\\u627f\\u8a8d\\u3092\\u8868\\u793a",
                "+alerts.view.all=View all forms",
                " duedate=\\u671f\\u9650",
                " owner=\\u30aa\\u30fc\\u30ca\\u30fc",
                "-createApproval=\\u627f\\u8a8d\\u3092\\u4f5c\\u6210",
                "-summary=${number} \\u4fdd\\u7559\\u306e\\u627f\\u8a8d",
                "+summary=${number} pending form(s)",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_pt_BR.properties",
                "similarity index 88%",
                "rename from ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget.properties",
                "rename to ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_pt_BR.properties",
                "index dd5b98f97a..36e1e2e4ee 100644",
                "--- a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget.properties",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_pt_BR.properties",
                "@@ -16,6 +16,5 @@",
                " # under the License.",
                "-alerts.view.all=View all approvals",
                "+alerts.view.all=View all forms",
                " duedate=Due date",
                " owner=Owner",
                "-createApproval=Create Approval",
                "-summary=${number} pending approval(s)",
                "+summary=${number} pending form(s)",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_ru.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_ru.properties",
                "new file mode 100644",
                "index 0000000000..e713681519",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_ru.properties",
                "@@ -0,0 +1,21 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+#",
                "+alerts.view.all=View all forms",
                "+duedate=\\u0421\\u0440\\u043e\\u043a",
                "+owner=\\u0412\\u043b\\u0430\\u0434\\u0435\\u043b\\u0435\\u0446",
                "+summary=${number} pending form(s)",
                "diff --git a/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequest.java b/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequest.java",
                "index 251eb89b41..9b6584553d 100644",
                "--- a/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequest.java",
                "+++ b/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequest.java",
                "@@ -20,2 +20,3 @@ package org.apache.syncope.common.lib.to;",
                "+import java.util.Date;",
                " import javax.xml.bind.annotation.XmlRootElement;",
                "@@ -32,3 +33,5 @@ public class UserRequest extends AbstractBaseBean {",
                "-    private String user;",
                "+    private Date startTime;",
                "+",
                "+    private String username;",
                "@@ -46,8 +49,16 @@ public class UserRequest extends AbstractBaseBean {",
                "-    public String getUser() {",
                "-        return user;",
                "+    public Date getStartTime() {",
                "+        return startTime;",
                "+    }",
                "+",
                "+    public void setStartTime(final Date startTime) {",
                "+        this.startTime = startTime;",
                "+    }",
                "+",
                "+    public String getUsername() {",
                "+        return username;",
                "     }",
                "-    public void setUser(final String user) {",
                "-        this.user = user;",
                "+    public void setUsername(final String username) {",
                "+        this.username = username;",
                "     }",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java",
                "index 45a834b0fd..c1d20b10f8 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java",
                "@@ -64,5 +64,3 @@ import org.flowable.engine.impl.persistence.entity.ExecutionEntity;",
                " import org.flowable.engine.impl.persistence.entity.HistoricFormPropertyEntity;",
                "-import org.flowable.engine.runtime.NativeProcessInstanceQuery;",
                " import org.flowable.engine.runtime.ProcessInstance;",
                "-import org.flowable.engine.runtime.ProcessInstanceQuery;",
                " import org.flowable.task.api.Task;",
                "@@ -101,22 +99,24 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "-    protected NativeProcessInstanceQuery createProcessInstanceQuery(final String userKey) {",
                "-        return engine.getRuntimeService().createNativeProcessInstanceQuery().",
                "-                sql(\"SELECT DISTINCT ID_,BUSINESS_KEY_,ACT_ID_ FROM \"",
                "-                        + engine.getManagementService().getTableName(ExecutionEntity.class)",
                "-                        + \" WHERE BUSINESS_KEY_ LIKE '\"",
                "-                        + FlowableRuntimeUtils.getProcBusinessKey(\"%\", userKey) + \"'\"",
                "-                        + \" AND BUSINESS_KEY_ NOT LIKE '\"",
                "-                        + FlowableRuntimeUtils.getProcBusinessKey(FlowableRuntimeUtils.WF_PROCESS_ID, \"%\") + \"'\"",
                "-                        + \" AND PARENT_ID_ IS NULL\");",
                "+    protected StringBuilder createProcessInstanceQuery(final String userKey) {",
                "+        StringBuilder query = new StringBuilder().",
                "+                append(\"SELECT DISTINCT ID_,BUSINESS_KEY_,PROC_DEF_ID_,PROC_INST_ID_,START_TIME_ FROM \").",
                "+                append(engine.getManagementService().getTableName(ExecutionEntity.class)).",
                "+                append(\" WHERE BUSINESS_KEY_ NOT LIKE '\").",
                "+                append(FlowableRuntimeUtils.getProcBusinessKey(FlowableRuntimeUtils.WF_PROCESS_ID, \"%\")).",
                "+                append(\"'\");",
                "+        if (userKey != null) {",
                "+            query.append(\" AND BUSINESS_KEY_ LIKE '\").",
                "+                    append(FlowableRuntimeUtils.getProcBusinessKey(\"%\", userKey)).",
                "+                    append(\"'\");",
                "+        }",
                "+        query.append(\" AND PARENT_ID_ IS NULL\");",
                "+",
                "+        return query;",
                "     }",
                "-    protected int countProcessInstances(final String userKey) {",
                "+    protected int countProcessInstances(final StringBuilder processInstanceQuery) {",
                "         return (int) engine.getRuntimeService().createNativeProcessInstanceQuery().",
                "                 sql(\"SELECT COUNT(ID_) FROM \"",
                "-                        + engine.getManagementService().getTableName(ExecutionEntity.class)",
                "-                        + \" WHERE BUSINESS_KEY_ LIKE '\"",
                "-                        + FlowableRuntimeUtils.getProcBusinessKey(\"%\", userKey) + \"'\"",
                "-                        + \" AND BUSINESS_KEY_ NOT LIKE '\"",
                "-                        + FlowableRuntimeUtils.getProcBusinessKey(FlowableRuntimeUtils.WF_PROCESS_ID, \"%\") + \"'\"",
                "-                        + \" AND PARENT_ID_ IS NULL\").count();",
                "+                        + StringUtils.substringAfter(processInstanceQuery.toString(), \" FROM \")).",
                "+                count();",
                "     }",
                "@@ -128,5 +128,7 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "         userRequest.setBpmnProcess(split.getLeft());",
                "-        userRequest.setUser(split.getRight());",
                "+        userRequest.setStartTime(procInst.getStartTime());",
                "+        userRequest.setUsername(userDAO.find(split.getRight()).getUsername());",
                "         userRequest.setExecutionId(procInst.getId());",
                "-        userRequest.setActivityId(procInst.getActivityId());",
                "+        userRequest.setActivityId(FlowableRuntimeUtils.createTaskQuery(engine, false).",
                "+                processInstanceId(procInst.getProcessInstanceId()).singleResult().getTaskDefinitionKey());",
                "         return userRequest;",
                "@@ -142,6 +144,8 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "-        Integer count = null;",
                "-        List<UserRequest> result = null;",
                "-        if (userKey == null) {",
                "-            ProcessInstanceQuery query = engine.getRuntimeService().createProcessInstanceQuery().active();",
                "+        StringBuilder query = createProcessInstanceQuery(userKey);",
                "+        Integer count = countProcessInstances(query);",
                "+",
                "+        if (!orderByClauses.isEmpty()) {",
                "+            query.append(\" ORDER BY\");",
                "+",
                "             for (OrderByClause clause : orderByClauses) {",
                "@@ -149,12 +153,12 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "                 switch (clause.getField().trim()) {",
                "-                    case \"processDefinitionId\":",
                "-                        query.orderByProcessDefinitionId();",
                "+                    case \"bpmnProcess\":",
                "+                        query.append(\" PROC_DEF_ID_\");",
                "                         break;",
                "-                    case \"processDefinitionKey\":",
                "-                        query.orderByProcessDefinitionKey();",
                "+                    case \"startTime\":",
                "+                        query.append(\" START_TIME_\");",
                "                         break;",
                "-                    case \"processInstanceId\":",
                "-                        query.orderByProcessInstanceId();",
                "+                    case \"executionId\":",
                "+                        query.append(\" PROC_INST_ID_\");",
                "                         break;",
                "@@ -167,20 +171,18 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "                     if (clause.getDirection() == OrderByClause.Direction.ASC) {",
                "-                        query.asc();",
                "+                        query.append(\" ASC,\");",
                "                     } else {",
                "-                        query.desc();",
                "+                        query.append(\" DESC,\");",
                "                     }",
                "                 }",
                "-",
                "-                count = (int) query.count();",
                "-                result = query.listPage(size * (page <= 0 ? 0 : page - 1), size).stream().",
                "-                        map(procInst -> getUserRequest(procInst)).",
                "-                        collect(Collectors.toList());",
                "             }",
                "-        } else {",
                "-            count = countProcessInstances(userKey);",
                "-            result = createProcessInstanceQuery(userKey).listPage(size * (page <= 0 ? 0 : page - 1), size).stream().",
                "-                    map(procInst -> getUserRequest(procInst)).",
                "-                    collect(Collectors.toList());",
                "+",
                "+            query.setLength(query.length() - 1);",
                "         }",
                "+        List<UserRequest> result = engine.getRuntimeService().createNativeProcessInstanceQuery().",
                "+                sql(query.toString()).",
                "+                listPage(size * (page <= 0 ? 0 : page - 1), size).stream().",
                "+                map(procInst -> getUserRequest(procInst)).",
                "+                collect(Collectors.toList());",
                "+",
                "         return Pair.of(count, result);",
                "@@ -258,4 +260,5 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "             String username = event.getAnyName();",
                "-            createProcessInstanceQuery(event.getAnyKey()).list().",
                "-                    forEach(procInst -> {",
                "+            engine.getRuntimeService().createNativeProcessInstanceQuery().",
                "+                    sql(createProcessInstanceQuery(event.getAnyKey()).toString()).",
                "+                    list().forEach(procInst -> {",
                "                         engine.getRuntimeService().deleteProcessInstance("
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "client/console/src/main/java/org/apache/syncope/client/console/commons/Constants.java",
                "client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java",
                "client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Approvals.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/UserRequests.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestDirectoryPanel.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormDetails.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormDirectoryPanel.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormModal.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormPanel.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/UserRequestRestClient.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/widgets/UserRequestFormsWidget.java",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests.html",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_it.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_ja.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_pt_BR.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/UserRequests_ru.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormDetails.html",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal.html",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_it.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_ja.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_pt_BR.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormModal_ru.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel.html",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_it.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_ja.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_pt_BR.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/panels/UserRequestFormPanel_ru.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_it.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_ja.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_pt_BR.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/ApprovalsWidget_ru.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_it.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_ja.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_pt_BR.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/widgets/UserRequestFormsWidget_ru.properties",
                "ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequest.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1369": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9d78874fb7edb84a616b274c8af5160d3ef7f826"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: JavaScript",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: console, admin",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: report, console, html, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1369",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f5d2399cd532020b552286af894fca67b970fc3d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1532418448,
            "hunks": 39,
            "message": "Extensive usage of SyncopeConstants.ROOT_REALM + review group search only when entitlement is owned",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java",
                "index 6bef561a4d..59c490187f 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java",
                "@@ -97,6 +97,6 @@ public class GroupDirectoryPanel extends AnyDirectoryPanel<GroupTO, GroupRestCli",
                "-                final AnyTypeRestClient typeRestClient = new AnyTypeRestClient();",
                "-                final AnyTypeClassRestClient classRestClient = new AnyTypeClassRestClient();",
                "+                AnyTypeRestClient typeRestClient = new AnyTypeRestClient();",
                "+                AnyTypeClassRestClient classRestClient = new AnyTypeClassRestClient();",
                "-                final AnyTypeTO anyTypeTO = typeRestClient.read(type);",
                "+                AnyTypeTO anyTypeTO = typeRestClient.read(type);",
                "@@ -118,3 +118,3 @@ public class GroupDirectoryPanel extends AnyDirectoryPanel<GroupTO, GroupRestCli",
                "                                     classRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).",
                "-                                    setRealm(\"/\").",
                "+                                    setRealm(SyncopeConstants.ROOT_REALM).",
                "                                     setFiltered(true).",
                "@@ -138,3 +138,3 @@ public class GroupDirectoryPanel extends AnyDirectoryPanel<GroupTO, GroupRestCli",
                "                                     classRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).",
                "-                                    setRealm(\"/\").",
                "+                                    setRealm(SyncopeConstants.ROOT_REALM).",
                "                                     setFiltered(true).",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java",
                "index 1301f0dc07..ed17bc3010 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java",
                "@@ -49,2 +49,3 @@ import org.apache.syncope.client.lib.SyncopeClient;",
                " import org.apache.syncope.common.lib.SyncopeClientException;",
                "+import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.AnyTypeTO;",
                "@@ -147,3 +148,3 @@ public class RoleDirectoryPanel extends DirectoryPanel<RoleTO, RoleWrapper, Role",
                "             public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {",
                "-                final RoleTO clone = SerializationUtils.clone(model.getObject());",
                "+                RoleTO clone = SerializationUtils.clone(model.getObject());",
                "                 clone.setKey(null);",
                "@@ -160,3 +161,3 @@ public class RoleDirectoryPanel extends DirectoryPanel<RoleTO, RoleWrapper, Role",
                "             public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {",
                "-                final String query = SyncopeClient.getUserSearchConditionBuilder().and(",
                "+                String query = SyncopeClient.getUserSearchConditionBuilder().and(",
                "                         SyncopeClient.getUserSearchConditionBuilder().inRoles(model.getObject().getKey()),",
                "@@ -164,6 +165,6 @@ public class RoleDirectoryPanel extends DirectoryPanel<RoleTO, RoleWrapper, Role",
                "-                final AnyTypeRestClient typeRestClient = new AnyTypeRestClient();",
                "-                final AnyTypeClassRestClient classRestClient = new AnyTypeClassRestClient();",
                "+                AnyTypeRestClient typeRestClient = new AnyTypeRestClient();",
                "+                AnyTypeClassRestClient classRestClient = new AnyTypeClassRestClient();",
                "-                final AnyTypeTO anyTypeTO = typeRestClient.read(AnyTypeKind.USER.name());",
                "+                AnyTypeTO anyTypeTO = typeRestClient.read(AnyTypeKind.USER.name());",
                "@@ -175,5 +176,5 @@ public class RoleDirectoryPanel extends DirectoryPanel<RoleTO, RoleWrapper, Role",
                "                     protected Panel getDirectoryPanel(final String id) {",
                "-                        final Panel panel = new UserDirectoryPanel.Builder(",
                "+                        Panel panel = new UserDirectoryPanel.Builder(",
                "                                 classRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).",
                "-                                setRealm(\"/\").",
                "+                                setRealm(SyncopeConstants.ROOT_REALM).",
                "                                 setFiltered(true).",
                "@@ -210,3 +211,3 @@ public class RoleDirectoryPanel extends DirectoryPanel<RoleTO, RoleWrapper, Role",
                "             public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {",
                "-                final ConsoleLayoutInfo info = new ConsoleLayoutInfo(model.getObject().getKey());",
                "+                ConsoleLayoutInfo info = new ConsoleLayoutInfo(model.getObject().getKey());",
                "                 info.setContent(restClient.readConsoleLayoutInfo(model.getObject().getKey()));",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java",
                "index 9103ba6d25..6094143595 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java",
                "@@ -26,2 +26,3 @@ import java.util.stream.Collectors;",
                " import org.apache.commons.lang3.tuple.Pair;",
                "+import org.apache.syncope.client.console.SyncopeConsoleSession;",
                " import org.apache.syncope.client.console.rest.AnyTypeRestClient;",
                "@@ -31,2 +32,3 @@ import org.apache.syncope.client.console.rest.SchemaRestClient;",
                " import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;",
                "+import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.search.SearchableFields;",
                "@@ -36,4 +38,4 @@ import org.apache.syncope.common.lib.types.AnyTypeKind;",
                " import org.apache.syncope.common.lib.types.SchemaType;",
                "+import org.apache.syncope.common.lib.types.StandardEntitlement;",
                " import org.apache.wicket.event.IEventSink;",
                "-import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;",
                " import org.apache.wicket.markup.html.WebMarkupContainer;",
                "@@ -130,7 +132,5 @@ public abstract class AbstractSearchPanel extends Panel {",
                "         Pair<IModel<Map<String, String>>, Integer> groupInfo =",
                "-                Pair.of(groupNames, groupRestClient.search(\"/\",",
                "-                        null,",
                "-                        1,",
                "-                        1,",
                "-                        new SortParam<>(\"name\", true)).getTotalCount());",
                "+                SyncopeConsoleSession.get().owns(StandardEntitlement.GROUP_SEARCH)",
                "+                ? Pair.of(groupNames, groupRestClient.count(SyncopeConstants.ROOT_REALM, null, null))",
                "+                : Pair.of(groupNames, 0);",
                "@@ -187,6 +187,5 @@ public abstract class AbstractSearchPanel extends Panel {",
                "             protected Map<String, PlainSchemaTO> load() {",
                "-                final List<PlainSchemaTO> schemas = schemaRestClient.<PlainSchemaTO>getSchemas(",
                "-                        SchemaType.PLAIN, null, anyTypeRestClient.read(type).getClasses().toArray(new String[] {}));",
                "-",
                "-                return schemas.stream().collect(Collectors.toMap(schema -> schema.getKey(), Function.identity()));",
                "+                return schemaRestClient.<PlainSchemaTO>getSchemas(",
                "+                        SchemaType.PLAIN, null, anyTypeRestClient.read(type).getClasses().toArray(new String[] {})).",
                "+                        stream().collect(Collectors.toMap(schema -> schema.getKey(), Function.identity()));",
                "             }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java",
                "index 0a94110976..75c03ac5cc 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java",
                "@@ -21,5 +21,6 @@ package org.apache.syncope.client.console.panels.search;",
                " import java.util.ArrayList;",
                "-import java.util.HashMap;",
                " import java.util.List;",
                " import java.util.Map;",
                "+import java.util.stream.Collectors;",
                "+import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.GroupTO;",
                "@@ -81,3 +82,3 @@ public class AnyObjectSearchPanel extends AbstractSearchPanel {",
                "             protected Map<String, String> load() {",
                "-                List<GroupTO> res = groupRestClient.search(\"/\",",
                "+                return groupRestClient.search(SyncopeConstants.ROOT_REALM,",
                "                         null,",
                "@@ -86,10 +87,3 @@ public class AnyObjectSearchPanel extends AbstractSearchPanel {",
                "                         new SortParam<>(\"name\", true),",
                "-                        null);",
                "-",
                "-                final Map<String, String> result = new HashMap<>(res.size());",
                "-                for (GroupTO group : res) {",
                "-                    result.put(group.getKey(), group.getName());",
                "-                }",
                "-",
                "-                return result;",
                "+                        null).stream().collect(Collectors.toMap(GroupTO::getKey, GroupTO::getName));",
                "             }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java",
                "index 01566191fe..69e6e1ca21 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java",
                "@@ -43,2 +43,3 @@ import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;",
                " import org.apache.syncope.client.lib.SyncopeClient;",
                "+import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.GroupTO;",
                "@@ -399,4 +400,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "-                    if (StringUtils.isBlank(property.getField().getInput())",
                "-                            || inputAsArray.length == 0) {",
                "+                    if (StringUtils.isBlank(property.getField().getInput()) || inputAsArray.length == 0) {",
                "                         property.setChoices(properties.getObject());",
                "@@ -414,3 +414,4 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                         if (groupInfo.getRight() > AnyObjectSearchPanel.MAX_GROUP_LIST_CARDINALITY) {",
                "-                            List<GroupTO> filteredGroups = groupRestClient.search(\"/\",",
                "+                            property.setChoices(groupRestClient.search(",
                "+                                    SyncopeConstants.ROOT_REALM,",
                "                                     SyncopeClient.getGroupSearchConditionBuilder().",
                "@@ -421,7 +422,3 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {",
                "                                     new SortParam<>(\"name\", true),",
                "-                                    null);",
                "-                            List<String> names = filteredGroups.stream().",
                "-                                    map(GroupTO::getName).collect(Collectors.toList());",
                "-                            Collections.sort(names);",
                "-                            property.setChoices(names);",
                "+                                    null).stream().map(GroupTO::getName).collect(Collectors.toList()));",
                "                         }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/UserSearchPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/UserSearchPanel.java",
                "index 7dd81b3816..9de89ef27a 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/UserSearchPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/UserSearchPanel.java",
                "@@ -94,3 +94,2 @@ public final class UserSearchPanel extends AnyObjectSearchPanel {",
                "     }",
                "-",
                " }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java b/client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java",
                "index 9ecd9ca403..e5d642b005 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java",
                "@@ -20,3 +20,2 @@ package org.apache.syncope.client.console.rest;",
                "-import java.util.ArrayList;",
                " import java.util.List;",
                "@@ -26,3 +25,2 @@ import org.apache.syncope.common.lib.patch.GroupPatch;",
                " import org.apache.syncope.common.lib.to.GroupTO;",
                "-import org.apache.syncope.common.lib.to.PagedResult;",
                " import org.apache.syncope.common.lib.to.ProvisioningResult;",
                "@@ -79,29 +77,5 @@ public class GroupRestClient extends AbstractAnyRestClient<GroupTO> {",
                "-        List<GroupTO> result = new ArrayList<>();",
                "-        PagedResult<GroupTO> res;",
                "-        do {",
                "-            res = getService(GroupService.class).",
                "-                    search(new AnyQuery.Builder().realm(realm).fiql(fiql).page(page).size(size).",
                "-                            orderBy(toOrderBy(sort)).details(false).build());",
                "-            result.addAll(res.getResult());",
                "-        } while (page == -1 && size == -1 && res.getNext() != null);",
                "-",
                "-        return result;",
                "-    }",
                "-",
                "-    public PagedResult<GroupTO> search(",
                "-            final String realm,",
                "-            final String fiql,",
                "-            final int page,",
                "-            final int size,",
                "-            final SortParam<String> sort) {",
                "-",
                "-        PagedResult<GroupTO> res;",
                "-        do {",
                "-            res = getService(GroupService.class).",
                "-                    search(new AnyQuery.Builder().realm(realm).fiql(fiql).page(page).size(size).",
                "-                            orderBy(toOrderBy(sort)).details(false).build());",
                "-        } while (page == -1 && size == -1 && res.getNext() != null);",
                "-",
                "-        return res;",
                "+        return getService(GroupService.class).",
                "+                search(new AnyQuery.Builder().realm(realm).fiql(fiql).page(page).size(size).",
                "+                        orderBy(toOrderBy(sort)).details(false).build()).getResult();",
                "     }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java",
                "index eb99715f0c..29e4111308 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java",
                "@@ -24,2 +24,3 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.function.Function;",
                " import java.util.stream.Collectors;",
                "@@ -29,2 +30,3 @@ import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;",
                " import org.apache.syncope.client.console.SyncopeConsoleApplication;",
                "+import org.apache.syncope.client.console.SyncopeConsoleSession;",
                " import org.apache.syncope.client.console.rest.DynRealmRestClient;",
                "@@ -34,2 +36,3 @@ import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePane",
                " import org.apache.syncope.client.lib.SyncopeClient;",
                "+import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;",
                "@@ -46,2 +49,3 @@ import org.apache.wicket.model.util.ListModel;",
                " import org.apache.syncope.common.lib.to.GroupableRelatableTO;",
                "+import org.apache.syncope.common.lib.types.StandardEntitlement;",
                " import org.apache.wicket.authroles.authorization.strategies.role.metadata.ActionPermissions;",
                "@@ -248,6 +252,6 @@ public class Groups extends WizardStep implements ICondition {",
                "-            List<CompleteCondition> conditions = new ArrayList<>();",
                "-            GroupableRelatableTO.class.cast(anyTO).getMemberships().forEach(membershipTO -> {",
                "-                conditions.add(searchConditionBuilder.is(\"key\").equalTo(membershipTO.getGroupKey()).wrap());",
                "-            });",
                "+            List<CompleteCondition> conditions = GroupableRelatableTO.class.cast(anyTO).getMemberships().",
                "+                    stream().map(membership",
                "+                            -> searchConditionBuilder.is(\"key\").equalTo(membership.getGroupKey()).wrap()).",
                "+                    collect(Collectors.toList());",
                "@@ -255,3 +259,3 @@ public class Groups extends WizardStep implements ICondition {",
                "             if (!conditions.isEmpty()) {",
                "-                groupRestClient.search(",
                "+                assignedGroups.putAll(groupRestClient.search(",
                "                         realm,",
                "@@ -261,6 +265,3 @@ public class Groups extends WizardStep implements ICondition {",
                "                         new SortParam<>(\"name\", true),",
                "-                        null).",
                "-                        forEach(group -> {",
                "-                            assignedGroups.put(group.getKey(), group);",
                "-                        });",
                "+                        null).stream().collect(Collectors.toMap(GroupTO::getKey, Function.identity())));",
                "             }",
                "@@ -292,11 +293,11 @@ public class Groups extends WizardStep implements ICondition {",
                "-            ArrayList<CompleteCondition> conditions = new ArrayList<>();",
                "-            GroupableRelatableTO.class.cast(anyTO).getDynMemberships().forEach(membership -> {",
                "-                conditions.add(searchConditionBuilder.is(\"key\").equalTo(membership.getGroupKey()).wrap());",
                "-            });",
                "+            List<CompleteCondition> conditions = GroupableRelatableTO.class.cast(anyTO).getDynMemberships().",
                "+                    stream().map(membership",
                "+                            -> searchConditionBuilder.is(\"key\").equalTo(membership.getGroupKey()).wrap()).",
                "+                    collect(Collectors.toList());",
                "-            Map<String, GroupTO> assignedGroups = new HashMap<>();",
                "-            if (!conditions.isEmpty()) {",
                "-                groupRestClient.search(",
                "-                        \"/\",",
                "+            dynMemberships = new ArrayList<>();",
                "+            if (SyncopeConsoleSession.get().owns(StandardEntitlement.GROUP_SEARCH) && !conditions.isEmpty()) {",
                "+                dynMemberships.addAll(groupRestClient.search(",
                "+                        SyncopeConstants.ROOT_REALM,",
                "                         searchConditionBuilder.or(conditions).query(),",
                "@@ -305,9 +306,4 @@ public class Groups extends WizardStep implements ICondition {",
                "                         new SortParam<>(\"name\", true),",
                "-                        null).",
                "-                        forEach(group -> {",
                "-                            assignedGroups.put(group.getKey(), group);",
                "-                        });",
                "+                        null).stream().map(GroupTO::getName).collect(Collectors.toList()));",
                "             }",
                "-",
                "-            dynMemberships = assignedGroups.values().stream().map(GroupTO::getName).collect(Collectors.toList());",
                "         }",
                "@@ -322,3 +318,3 @@ public class Groups extends WizardStep implements ICondition {",
                "                 reload = realm == null;",
                "-                realm = \"/\";",
                "+                realm = SyncopeConstants.ROOT_REALM;",
                "             } else {"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/search/UserSearchPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c98b3e723f164114d242e2182119857c7ae7c9f3"
                ],
                [
                    "no-tag",
                    "d420c398f58495b7e46ae7128245382940cb7004"
                ]
            ],
            "tags": [
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AnyTypeClass",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: entitlement",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "540c8cc94729818e681b93c60f69e38ac5490cc8",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541669438,
            "hunks": 140,
            "message": "[SYNCOPE-1395] Preliminary changes",
            "diff": [
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AllowedSchemas.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AllowedSchemas.java",
                "index 54f5e51389..aa3eee1068 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AllowedSchemas.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AllowedSchemas.java",
                "@@ -101,3 +101,2 @@ public class AllowedSchemas<S extends Schema> {",
                "         }",
                "-",
                "     }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java",
                "index f8f05f9611..6fb8d79267 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java",
                "@@ -28,2 +28,3 @@ import org.apache.syncope.core.persistence.api.entity.AnyType;",
                " import org.apache.syncope.core.persistence.api.entity.Relationship;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;",
                " import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;",
                "@@ -46,2 +47,4 @@ public interface AnyObjectDAO extends AnyDAO<AnyObject> {",
                "+    AMembership findMembership(String key);",
                "+",
                "     List<Group> findDynGroups(String key);",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainAttrDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainAttrDAO.java",
                "index 204aade529..bce54f22da 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainAttrDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainAttrDAO.java",
                "@@ -24,6 +24,8 @@ public interface PlainAttrDAO extends DAO<PlainAttr<?>> {",
                "-    <T extends PlainAttr<?>> T find(String key, Class<T> reference);",
                "-",
                "-    <T extends PlainAttr<?>> void delete(String key, Class<T> reference);",
                "-",
                "+    /**",
                "+     * Deletes the given plain attribute and removes it from its owner.",
                "+     *",
                "+     * @param <T> actual plain attr class",
                "+     * @param attr plain attribute",
                "+     */",
                "     <T extends PlainAttr<?>> void delete(T attr);",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainAttrValueDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainAttrValueDAO.java",
                "index 26bfeaae72..ec980d8d2b 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainAttrValueDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainAttrValueDAO.java",
                "@@ -20,3 +20,4 @@ package org.apache.syncope.core.persistence.api.dao;",
                "-import java.util.List;",
                "+import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                " import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "@@ -25,9 +26,9 @@ public interface PlainAttrValueDAO extends DAO<PlainAttrValue> {",
                "-    <T extends PlainAttrValue> T find(String key, Class<T> reference);",
                "-",
                "-    <T extends PlainAttrValue> List<T> findAll(Class<T> reference);",
                "-",
                "-    <T extends PlainAttrValue> T save(T attributeValue);",
                "-",
                "-    <T extends PlainAttrValue> void delete(String key, Class<T> reference);",
                "+    /**",
                "+     * Deletes and remove all values of the given attribute.",
                "+     *",
                "+     * @param attr plain attribute",
                "+     * @param anyUtils utility",
                "+     */",
                "+    void deleteAll(PlainAttr<?> attr, AnyUtils anyUtils);",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java",
                "index 13d7c7755d..bda2a8d13c 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java",
                "@@ -29,2 +29,3 @@ import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;",
                " import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UMembership;",
                " import org.apache.syncope.core.persistence.api.entity.user.User;",
                "@@ -43,2 +44,4 @@ public interface UserDAO extends AnyDAO<User> {",
                "+    UMembership findMembership(String key);",
                "+",
                "     List<Role> findDynRoles(String key);",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/EntityFactory.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/EntityFactory.java",
                "index 29be9ed41f..a75602890a 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/EntityFactory.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/EntityFactory.java",
                "@@ -20,2 +20,8 @@ package org.apache.syncope.core.persistence.api.entity;",
                "+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.Conf;",
                "+import org.apache.syncope.core.persistence.api.entity.group.Group;",
                "+import org.apache.syncope.core.persistence.api.entity.user.User;",
                "+",
                " public interface EntityFactory {",
                "@@ -25,2 +31,12 @@ public interface EntityFactory {",
                "     ConnPoolConf newConnPoolConf();",
                "+",
                "+    Class<? extends User> userClass();",
                "+",
                "+    Class<? extends Group> groupClass();",
                "+",
                "+    Class<? extends AnyObject> anyObjectClass();",
                "+",
                "+    Class<? extends Conf> confClass();",
                "+",
                "+    Class<? extends AnySearchDAO> anySearchDAOClass();",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/GroupableRelatable.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/GroupableRelatable.java",
                "index dd13b4af71..daa8a4cd3b 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/GroupableRelatable.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/GroupableRelatable.java",
                "@@ -85,2 +85,4 @@ public interface GroupableRelatable<",
                "+    boolean remove(M membership);",
                "+",
                "     Optional<? extends M> getMembership(String groupKey);",
                "@@ -98,3 +100,2 @@ public interface GroupableRelatable<",
                "     List<? extends REL> getRelationships();",
                "-",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java",
                "index 568b00796e..531607b757 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java",
                "@@ -49,2 +49,3 @@ import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;",
                " import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                "+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;",
                " import org.apache.syncope.core.persistence.api.entity.DerSchema;",
                "@@ -67,2 +68,5 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "+    @Autowired",
                "+    protected AnyUtilsFactory anyUtilsFactory;",
                "+",
                "     @Autowired",
                "@@ -71,6 +75,6 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "     @Autowired",
                "-    private PlainSchemaDAO plainSchemaDAO;",
                "+    protected PlainSchemaDAO plainSchemaDAO;",
                "     @Autowired",
                "-    private DerSchemaDAO derSchemaDAO;",
                "+    protected DerSchemaDAO derSchemaDAO;",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "index 0d35ccb6af..2a204cc6a0 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "@@ -355,13 +355,3 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "-        List<OrderByClause> effectiveOrderBy;",
                "-        if (orderBy.isEmpty()) {",
                "-            OrderByClause keyClause = new OrderByClause();",
                "-            keyClause.setField(\"key\");",
                "-            keyClause.setDirection(OrderByClause.Direction.ASC);",
                "-            effectiveOrderBy = Collections.singletonList(keyClause);",
                "-        } else {",
                "-            effectiveOrderBy = orderBy;",
                "-        }",
                "-",
                "-        return doSearch(adminRealms, cond, page, itemsPerPage, effectiveOrderBy, kind);",
                "+        return doSearch(adminRealms, cond, page, itemsPerPage, orderBy, kind);",
                "     }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "index 278434f07c..f4aacd235d 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "@@ -46,2 +46,3 @@ import org.apache.syncope.core.persistence.api.entity.Realm;",
                " import org.apache.syncope.core.persistence.api.entity.Relationship;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;",
                " import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;",
                "@@ -51,3 +52,3 @@ import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;",
                " import org.apache.syncope.core.persistence.api.entity.user.URelationship;",
                "-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;",
                "+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;",
                " import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;",
                "@@ -58,3 +59,2 @@ import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.stereotype.Repository;",
                " import org.springframework.transaction.annotation.Propagation;",
                "@@ -62,3 +62,2 @@ import org.springframework.transaction.annotation.Transactional;",
                "-@Repository",
                " public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObjectDAO {",
                "@@ -73,3 +72,3 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "     protected AnyUtils init() {",
                "-        return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.ANY_OBJECT);",
                "+        return anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT);",
                "     }",
                "@@ -91,3 +90,3 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "         Query query = entityManager().createQuery(",
                "-                \"SELECT e.type, COUNT(e) AS countByType FROM  \" + JPAAnyObject.class.getSimpleName() + \" e \"",
                "+                \"SELECT e.type, COUNT(e) AS countByType FROM  \" + anyUtils().anyClass().getSimpleName() + \" e \"",
                "                 + \"GROUP BY e.type ORDER BY countByType DESC\");",
                "@@ -107,3 +106,3 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "         Query query = entityManager().createQuery(",
                "-                \"SELECT e.realm, COUNT(e) FROM  \" + JPAAnyObject.class.getSimpleName() + \" e \"",
                "+                \"SELECT e.realm, COUNT(e) FROM  \" + anyUtils().anyClass().getSimpleName() + \" e \"",
                "                 + \"WHERE e.type=:type GROUP BY e.realm\");",
                "@@ -140,3 +139,3 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "         TypedQuery<AnyObject> query = entityManager().createQuery(",
                "-                \"SELECT e FROM \" + JPAAnyObject.class.getSimpleName() + \" e WHERE e.name = :name\", AnyObject.class);",
                "+                \"SELECT e FROM \" + anyUtils().anyClass().getSimpleName() + \" e WHERE e.name = :name\", AnyObject.class);",
                "         query.setParameter(\"name\", name);",
                "@@ -153,2 +152,7 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "+    @Override",
                "+    public AMembership findMembership(final String key) {",
                "+        return entityManager().find(JPAAMembership.class, key);",
                "+    }",
                "+",
                "     @Override",
                "@@ -179,3 +183,3 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "         Query query = entityManager().createQuery(",
                "-                \"SELECT COUNT(e) FROM  \" + JPAAnyObject.class.getSimpleName() + \" e\");",
                "+                \"SELECT COUNT(e) FROM  \" + anyUtils().anyClass().getSimpleName() + \" e\");",
                "         return ((Number) query.getSingleResult()).intValue();",
                "@@ -186,3 +190,3 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "         TypedQuery<AnyObject> query = entityManager().createQuery(",
                "-                \"SELECT e FROM  \" + JPAAnyObject.class.getSimpleName() + \" e ORDER BY e.id\", AnyObject.class);",
                "+                \"SELECT e FROM  \" + anyUtils().anyClass().getSimpleName() + \" e ORDER BY e.id\", AnyObject.class);",
                "         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));",
                "@@ -310,3 +314,2 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "     }",
                "-",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "index 0a04ac01e8..53c52d9c98 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "@@ -225,3 +225,3 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "     private StringBuilder buildSelect(final OrderBySupport obs) {",
                "-        StringBuilder select = new StringBuilder(\"SELECT u.any_id\");",
                "+        StringBuilder select = new StringBuilder(\"SELECT DISTINCT u.any_id\");",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java",
                "index 35d07d286d..ed065fe993 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java",
                "@@ -24,5 +24,6 @@ import java.util.List;",
                " import org.apache.syncope.core.persistence.api.dao.ConfDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.EntityFactory;",
                " import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;",
                " import org.apache.syncope.core.persistence.api.entity.conf.Conf;",
                "-import org.apache.syncope.core.persistence.jpa.entity.conf.JPAConf;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                " import org.springframework.stereotype.Repository;",
                "@@ -35,7 +36,10 @@ public class JPAConfDAO extends AbstractDAO<Conf> implements ConfDAO {",
                "+    @Autowired",
                "+    private EntityFactory entityFactory;",
                "+",
                "     @Override",
                "     public Conf get() {",
                "-        Conf instance = entityManager().find(JPAConf.class, KEY);",
                "+        Conf instance = entityManager().find(entityFactory.confClass(), KEY);",
                "         if (instance == null) {",
                "-            instance = new JPAConf();",
                "+            instance = entityFactory.newEntity(Conf.class);",
                "             instance.setKey(KEY);",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java",
                "index 7fc9585ca9..d9c1775107 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java",
                "@@ -29,2 +29,3 @@ import org.apache.syncope.core.persistence.api.entity.DynRealm;",
                " import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;",
                "+import org.apache.syncope.core.persistence.api.entity.EntityFactory;",
                " import org.apache.syncope.core.persistence.api.search.SearchCondConverter;",
                "@@ -49,2 +50,5 @@ public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO",
                "+    @Autowired",
                "+    private EntityFactory entityFactory;",
                "+",
                "     @Autowired",
                "@@ -57,7 +61,7 @@ public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO",
                "             if (jpaAnySearchDAO == null) {",
                "-                if (AopUtils.getTargetClass(searchDAO).equals(JPAAnySearchDAO.class)) {",
                "+                if (AopUtils.getTargetClass(searchDAO).equals(entityFactory.anySearchDAOClass())) {",
                "                     jpaAnySearchDAO = searchDAO;",
                "                 } else {",
                "-                    jpaAnySearchDAO = (AnySearchDAO) ApplicationContextProvider.getBeanFactory().",
                "-                            createBean(JPAAnySearchDAO.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);",
                "+                    jpaAnySearchDAO = (AnySearchDAO) ApplicationContextProvider.getBeanFactory().createBean(",
                "+                            entityFactory.anySearchDAOClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);",
                "                 }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "index b8125ef191..a343ebc725 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "@@ -56,2 +56,3 @@ import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                " import org.apache.syncope.core.persistence.api.entity.Entity;",
                "+import org.apache.syncope.core.persistence.api.entity.EntityFactory;",
                " import org.apache.syncope.core.persistence.api.entity.Realm;",
                "@@ -63,3 +64,2 @@ import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;",
                " import org.apache.syncope.core.persistence.api.entity.user.UMembership;",
                "-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;",
                " import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;",
                "@@ -75,6 +75,4 @@ import org.springframework.beans.factory.annotation.Autowired;",
                " import org.springframework.beans.factory.support.AbstractBeanDefinition;",
                "-import org.springframework.stereotype.Repository;",
                " import org.springframework.transaction.annotation.Transactional;",
                "-@Repository",
                " public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "@@ -85,2 +83,5 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "+    @Autowired",
                "+    private EntityFactory entityFactory;",
                "+",
                "     @Autowired",
                "@@ -102,7 +103,7 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "             if (jpaAnySearchDAO == null) {",
                "-                if (AopUtils.getTargetClass(searchDAO).equals(JPAAnySearchDAO.class)) {",
                "+                if (AopUtils.getTargetClass(searchDAO).equals(entityFactory.anySearchDAOClass())) {",
                "                     jpaAnySearchDAO = searchDAO;",
                "                 } else {",
                "-                    jpaAnySearchDAO = (AnySearchDAO) ApplicationContextProvider.getBeanFactory().",
                "-                            createBean(JPAAnySearchDAO.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);",
                "+                    jpaAnySearchDAO = (AnySearchDAO) ApplicationContextProvider.getBeanFactory().createBean(",
                "+                            entityFactory.anySearchDAOClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);",
                "                 }",
                "@@ -115,3 +116,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "     protected AnyUtils init() {",
                "-        return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.GROUP);",
                "+        return anyUtilsFactory.getInstance(AnyTypeKind.GROUP);",
                "     }",
                "@@ -133,3 +134,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "         Query query = entityManager().createQuery(",
                "-                \"SELECT COUNT(e) FROM  \" + JPAGroup.class.getSimpleName() + \" e\");",
                "+                \"SELECT COUNT(e) FROM  \" + anyUtils().anyClass().getSimpleName() + \" e\");",
                "         return ((Number) query.getSingleResult()).intValue();",
                "@@ -140,3 +141,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "         Query query = entityManager().createQuery(",
                "-                \"SELECT e.realm, COUNT(e) FROM  \" + JPAGroup.class.getSimpleName() + \" e GROUP BY e.realm\");",
                "+                \"SELECT e.realm, COUNT(e) FROM  \" + anyUtils().anyClass().getSimpleName() + \" e GROUP BY e.realm\");",
                "@@ -172,3 +173,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "         TypedQuery<Group> query = entityManager().createQuery(",
                "-                \"SELECT e FROM \" + JPAGroup.class.getSimpleName() + \" e WHERE e.name = :name\", Group.class);",
                "+                \"SELECT e FROM \" + anyUtils().anyClass().getSimpleName() + \" e WHERE e.name = :name\", Group.class);",
                "         query.setParameter(\"name\", name);",
                "@@ -193,3 +194,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "-        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPAGroup.class.getSimpleName()).",
                "+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(anyUtils().anyClass().getSimpleName()).",
                "                 append(\" e WHERE e.userOwner=:owner \");",
                "@@ -214,3 +215,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "         TypedQuery<Group> query = entityManager().createQuery(",
                "-                \"SELECT e FROM \" + JPAGroup.class.getSimpleName() + \" e WHERE e.groupOwner=:owner\", Group.class);",
                "+                \"SELECT e FROM \" + anyUtils().anyClass().getSimpleName() + \" e WHERE e.groupOwner=:owner\", Group.class);",
                "         query.setParameter(\"owner\", owner);",
                "@@ -243,3 +244,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "         TypedQuery<Group> query = entityManager().createQuery(",
                "-                \"SELECT e FROM  \" + JPAGroup.class.getSimpleName() + \" e ORDER BY e.id\", Group.class);",
                "+                \"SELECT e FROM  \" + anyUtils().anyClass().getSimpleName() + \" e ORDER BY e.id\", Group.class);",
                "         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));",
                "@@ -326,3 +327,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "             AnyObject leftEnd = membership.getLeftEnd();",
                "-            leftEnd.getMemberships().remove(membership);",
                "+            leftEnd.remove(membership);",
                "             membership.setRightEnd(null);",
                "@@ -341,3 +342,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "             User leftEnd = membership.getLeftEnd();",
                "-            leftEnd.getMemberships().remove(membership);",
                "+            leftEnd.remove(membership);",
                "             membership.setRightEnd(null);",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrDAO.java",
                "index d4ba926517..5ca294c09e 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrDAO.java",
                "@@ -32,8 +32,6 @@ import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;",
                " import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;",
                "-import org.springframework.stereotype.Repository;",
                "-@Repository",
                " public class JPAPlainAttrDAO extends AbstractDAO<PlainAttr<?>> implements PlainAttrDAO {",
                "-    public <T extends PlainAttr<?>> Class<? extends AbstractPlainAttr<?>> getEntityReference(",
                "+    public static <T extends PlainAttr<?>> Class<? extends AbstractPlainAttr<?>> getEntityReference(",
                "             final Class<T> reference) {",
                "@@ -51,17 +49,2 @@ public class JPAPlainAttrDAO extends AbstractDAO<PlainAttr<?>> implements PlainA",
                "-    @Override",
                "-    public <T extends PlainAttr<?>> T find(final String key, final Class<T> reference) {",
                "-        return reference.cast(entityManager().find(getEntityReference(reference), key));",
                "-    }",
                "-",
                "-    @Override",
                "-    public <T extends PlainAttr<?>> void delete(final String key, final Class<T> reference) {",
                "-        T attribute = find(key, reference);",
                "-        if (attribute == null) {",
                "-            return;",
                "-        }",
                "-",
                "-        delete(attribute);",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrValueDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrValueDAO.java",
                "index 9e24017661..c0ede1d6f8 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrValueDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrValueDAO.java",
                "@@ -20,6 +20,7 @@ package org.apache.syncope.core.persistence.jpa.dao;",
                "-import java.util.List;",
                "-import javax.persistence.TypedQuery;",
                "+import java.util.stream.Collectors;",
                " import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;",
                "-import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                "+import org.apache.syncope.core.persistence.api.entity.Entity;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                " import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "@@ -42,5 +43,3 @@ import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueVa",
                " import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;",
                "-import org.springframework.stereotype.Repository;",
                "-@Repository",
                " public class JPAPlainAttrValueDAO extends AbstractDAO<PlainAttrValue> implements PlainAttrValueDAO {",
                "@@ -48,3 +47,3 @@ public class JPAPlainAttrValueDAO extends AbstractDAO<PlainAttrValue> implements",
                "     @SuppressWarnings(\"unchecked\")",
                "-    private <T extends PlainAttrValue> Class<? extends AbstractPlainAttrValue> getEntityReference(",
                "+    public static <T extends PlainAttrValue> Class<? extends AbstractPlainAttrValue> getEntityReference(",
                "             final Class<T> reference) {",
                "@@ -73,34 +72,16 @@ public class JPAPlainAttrValueDAO extends AbstractDAO<PlainAttrValue> implements",
                "     @Override",
                "-    public <T extends PlainAttrValue> T find(final String key, final Class<T> reference) {",
                "-        return reference.cast(entityManager().find(getEntityReference(reference), key));",
                "-    }",
                "-",
                "-    @Override",
                "-    public <T extends PlainAttrValue> List<T> findAll(final Class<T> reference) {",
                "-        TypedQuery<T> query = entityManager().createQuery(",
                "-                \"SELECT e FROM \" + getEntityReference(reference).getSimpleName() + \" e\", reference);",
                "-        return query.getResultList();",
                "-    }",
                "-",
                "-    @Override",
                "-    public <T extends PlainAttrValue> T save(final T attributeValue) {",
                "-        return entityManager().merge(attributeValue);",
                "-    }",
                "-",
                "-    @Override",
                "-    public <T extends PlainAttrValue> void delete(final String key, final Class<T> reference) {",
                "-        T attrValue = find(key, reference);",
                "-        if (attrValue == null) {",
                "-            return;",
                "+    public void deleteAll(final PlainAttr<?> attr, final AnyUtils anyUtils) {",
                "+        if (attr.getUniqueValue() == null) {",
                "+            attr.getValues().stream().map(Entity::getKey).collect(Collectors.toSet()).forEach(attrValueKey -> {",
                "+                PlainAttrValue attrValue = anyUtils.plainAttrValueClass().cast(",
                "+                        entityManager().find(getEntityReference(anyUtils.plainAttrValueClass()), attrValueKey));",
                "+                if (attrValue != null) {",
                "+                    entityManager().remove(attrValue);",
                "+                    attr.getValues().remove(attrValue);",
                "+                }",
                "+            });",
                "+        } else {",
                "+            entityManager().remove(attr.getUniqueValue());",
                "+            attr.setUniqueValue(null);",
                "         }",
                "-",
                "-        if (attrValue.getAttr() != null) {",
                "-            if (attrValue instanceof PlainAttrUniqueValue) {",
                "-                attrValue.getAttr().setUniqueValue(null);",
                "-            } else {",
                "-                attrValue.getAttr().getValues().remove(attrValue);",
                "-            }",
                "-        }",
                "-",
                "-        entityManager().remove(attrValue);",
                "     }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java",
                "index ef569d75b2..46df7424fd 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java",
                "@@ -33,10 +33,10 @@ import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                " import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                "-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;",
                " import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.stereotype.Repository;",
                "-@Repository",
                " public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema> implements PlainSchemaDAO {",
                "+    @Autowired",
                "+    private AnyUtilsFactory anyUtilsFactory;",
                "+",
                "     @Autowired",
                "@@ -96,3 +96,3 @@ public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema> implements Plain",
                "         TypedQuery<T> query = entityManager().createQuery(",
                "-                \"SELECT e FROM \" + ((JPAPlainAttrDAO) plainAttrDAO).getEntityReference(reference).getSimpleName()",
                "+                \"SELECT e FROM \" + JPAPlainAttrDAO.getEntityReference(reference).getSimpleName()",
                "                 + \" e WHERE e.schema=:schema\", reference);",
                "@@ -108,2 +108,12 @@ public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema> implements Plain",
                "+    protected void deleteAttrs(final PlainSchema schema) {",
                "+        for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {",
                "+            AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);",
                "+",
                "+            findAttrs(schema, anyUtils.plainAttrClass()).forEach(attr -> {",
                "+                plainAttrDAO.delete(attr);",
                "+            });",
                "+        }",
                "+    }",
                "+",
                "     @Override",
                "@@ -117,12 +127,5 @@ public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema> implements Plain",
                "-        AnyUtilsFactory anyUtilsFactory = new JPAAnyUtilsFactory();",
                "-        for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {",
                "-            AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);",
                "-",
                "-            findAttrs(schema, anyUtils.plainAttrClass()).forEach(attr -> {",
                "-                plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());",
                "-            });",
                "+        deleteAttrs(schema);",
                "-            resourceDAO.deleteMapping(key);",
                "-        }",
                "+        resourceDAO.deleteMapping(key);",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARelationshipTypeDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARelationshipTypeDAO.java",
                "index fd1f73124f..4d7f64e822 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARelationshipTypeDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARelationshipTypeDAO.java",
                "@@ -84,3 +84,3 @@ public class JPARelationshipTypeDAO extends AbstractDAO<RelationshipType> implem",
                "             } else if (relationship instanceof UMembership) {",
                "-                ((UMembership) relationship).getLeftEnd().getMemberships().remove((UMembership) relationship);",
                "+                ((UMembership) relationship).getLeftEnd().remove((UMembership) relationship);",
                "             } else if (relationship instanceof ARelationship) {",
                "@@ -88,3 +88,3 @@ public class JPARelationshipTypeDAO extends AbstractDAO<RelationshipType> implem",
                "             } else if (relationship instanceof AMembership) {",
                "-                ((AMembership) relationship).getLeftEnd().getMemberships().remove((AMembership) relationship);",
                "+                ((AMembership) relationship).getLeftEnd().remove((AMembership) relationship);",
                "             }",
                "@@ -96,3 +96,2 @@ public class JPARelationshipTypeDAO extends AbstractDAO<RelationshipType> implem",
                "     }",
                "-",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java",
                "index a86ee8e9e6..33bf9f7cb2 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java",
                "@@ -63,4 +63,5 @@ import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;",
                " import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UMembership;",
                " import org.apache.syncope.core.persistence.api.entity.user.User;",
                "-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;",
                "+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;",
                " import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;",
                "@@ -71,3 +72,2 @@ import org.apache.syncope.core.spring.security.Encryptor;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.stereotype.Repository;",
                " import org.springframework.transaction.annotation.Propagation;",
                "@@ -75,3 +75,2 @@ import org.springframework.transaction.annotation.Transactional;",
                "-@Repository",
                " public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "@@ -103,3 +102,3 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "     protected AnyUtils init() {",
                "-        return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.USER);",
                "+        return anyUtilsFactory.getInstance(AnyTypeKind.USER);",
                "     }",
                "@@ -121,3 +120,3 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "         Query query = entityManager().createQuery(",
                "-                \"SELECT COUNT(e) FROM  \" + JPAUser.class.getSimpleName() + \" e\");",
                "+                \"SELECT COUNT(e) FROM  \" + anyUtils().anyClass().getSimpleName() + \" e\");",
                "         return ((Number) query.getSingleResult()).intValue();",
                "@@ -128,3 +127,3 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "         Query query = entityManager().createQuery(",
                "-                \"SELECT e.realm, COUNT(e) FROM  \" + JPAUser.class.getSimpleName() + \" e GROUP BY e.realm\");",
                "+                \"SELECT e.realm, COUNT(e) FROM  \" + anyUtils().anyClass().getSimpleName() + \" e GROUP BY e.realm\");",
                "@@ -140,3 +139,3 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "         Query query = entityManager().createQuery(",
                "-                \"SELECT e.status, COUNT(e) FROM  \" + JPAUser.class.getSimpleName() + \" e GROUP BY e.status\");",
                "+                \"SELECT e.status, COUNT(e) FROM  \" + anyUtils().anyClass().getSimpleName() + \" e GROUP BY e.status\");",
                "@@ -176,3 +175,4 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "     public User findByUsername(final String username) {",
                "-        TypedQuery<User> query = entityManager().createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()",
                "+        TypedQuery<User> query = entityManager().createQuery(",
                "+                \"SELECT e FROM \" + anyUtils().anyClass().getSimpleName()",
                "                 + \" e WHERE e.username = :username\", User.class);",
                "@@ -192,3 +192,4 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "     public User findByToken(final String token) {",
                "-        TypedQuery<User> query = entityManager().createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()",
                "+        TypedQuery<User> query = entityManager().createQuery(",
                "+                \"SELECT e FROM \" + anyUtils().anyClass().getSimpleName()",
                "                 + \" e WHERE e.token LIKE :token\", User.class);",
                "@@ -208,3 +209,4 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "     public List<User> findBySecurityQuestion(final SecurityQuestion securityQuestion) {",
                "-        TypedQuery<User> query = entityManager().createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()",
                "+        TypedQuery<User> query = entityManager().createQuery(",
                "+                \"SELECT e FROM \" + anyUtils().anyClass().getSimpleName()",
                "                 + \" e WHERE e.securityQuestion = :securityQuestion\", User.class);",
                "@@ -215,2 +217,7 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "+    @Override",
                "+    public UMembership findMembership(final String key) {",
                "+        return entityManager().find(JPAUMembership.class, key);",
                "+    }",
                "+",
                "     private List<PasswordPolicy> getPasswordPolicies(final User user) {",
                "@@ -242,3 +249,3 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "         TypedQuery<User> query = entityManager().createQuery(",
                "-                \"SELECT e FROM  \" + JPAUser.class.getSimpleName() + \" e ORDER BY e.id\", User.class);",
                "+                \"SELECT e FROM  \" + anyUtils().anyClass().getSimpleName() + \" e ORDER BY e.id\", User.class);",
                "         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java",
                "index aa8651922a..4cc3058c4b 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java",
                "@@ -143,3 +143,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             case GROUP:",
                "-                result = entityFactory.newEntity(Group.class).getClass();",
                "+                result = entityFactory.groupClass();",
                "                 break;",
                "@@ -147,3 +147,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             case ANY_OBJECT:",
                "-                result = entityFactory.newEntity(AnyObject.class).getClass();",
                "+                result = entityFactory.anyObjectClass();",
                "                 break;",
                "@@ -152,3 +152,3 @@ public class JPAAnyUtils implements AnyUtils {",
                "             default:",
                "-                result = entityFactory.newEntity(User.class).getClass();",
                "+                result = entityFactory.userClass();",
                "         }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtilsFactory.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtilsFactory.java",
                "index 1fa004b89f..7e5d282447 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtilsFactory.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtilsFactory.java",
                "@@ -69,3 +69,2 @@ public class JPAAnyUtilsFactory implements AnyUtilsFactory {",
                "     }",
                "-",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "index 79bc299501..81be309f13 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "@@ -20,2 +20,3 @@ package org.apache.syncope.core.persistence.jpa.entity;",
                "+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;",
                " import org.apache.syncope.core.persistence.jpa.entity.user.JPASecurityQuestion;",
                "@@ -124,3 +125,2 @@ import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;",
                " import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;",
                "-import org.springframework.stereotype.Component;",
                " import org.apache.syncope.core.persistence.api.entity.task.PullTask;",
                "@@ -143,2 +143,3 @@ import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRule",
                " import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;",
                "+import org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO;",
                " import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushCorrelationRuleEntity;",
                "@@ -146,3 +147,2 @@ import org.apache.syncope.core.spring.security.SecureRandomUtils;",
                "-@Component",
                " public class JPAEntityFactory implements EntityFactory {",
                "@@ -317,2 +317,27 @@ public class JPAEntityFactory implements EntityFactory {",
                "     }",
                "+",
                "+    @Override",
                "+    public Class<? extends User> userClass() {",
                "+        return JPAUser.class;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Class<? extends Group> groupClass() {",
                "+        return JPAGroup.class;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Class<? extends AnyObject> anyObjectClass() {",
                "+        return JPAAnyObject.class;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Class<? extends Conf> confClass() {",
                "+        return JPAConf.class;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Class<? extends AnySearchDAO> anySearchDAOClass() {",
                "+        return JPAAnySearchDAO.class;",
                "+    }",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java",
                "index d72e36a888..0a04e01a71 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java",
                "@@ -176,2 +176,8 @@ public class JPAAnyObject",
                "+    @Override",
                "+    public boolean remove(final AMembership membership) {",
                "+        checkType(membership, JPAAMembership.class);",
                "+        return this.memberships.remove((JPAAMembership) membership);",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java",
                "index b4be3601b9..3911d28f46 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java",
                "@@ -61,3 +61,3 @@ public class JPAConf extends AbstractProvidedKeyEntity implements Conf {",
                "         checkType(attr, JPACPlainAttr.class);",
                "-        return plainAttrs.remove((JPACPlainAttr) attr);",
                "+        return getPlainAttrs().remove((JPACPlainAttr) attr);",
                "     }",
                "@@ -66,3 +66,3 @@ public class JPAConf extends AbstractProvidedKeyEntity implements Conf {",
                "     public Optional<? extends CPlainAttr> getPlainAttr(final String plainSchema) {",
                "-        return plainAttrs.stream().filter(plainAttr",
                "+        return getPlainAttrs().stream().filter(plainAttr",
                "                 -> plainAttr != null && plainAttr.getSchema() != null",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java",
                "index 53ef4fb45c..d10cb9a5b5 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java",
                "@@ -166,3 +166,3 @@ public class JPAGroup extends AbstractAny<GPlainAttr> implements Group {",
                "         checkType(attr, JPAGPlainAttr.class);",
                "-        return plainAttrs.remove((JPAGPlainAttr) attr);",
                "+        return getPlainAttrs().remove((JPAGPlainAttr) attr);",
                "     }",
                "@@ -238,3 +238,2 @@ public class JPAGroup extends AbstractAny<GPlainAttr> implements Group {",
                "     }",
                "-",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/AbstractAnyTemplate.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/AbstractAnyTemplate.java",
                "index 2af788b5bc..ce9dae3dff 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/AbstractAnyTemplate.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/AbstractAnyTemplate.java",
                "@@ -27,5 +27,6 @@ import org.apache.syncope.core.persistence.api.entity.AnyTemplate;",
                " import org.apache.syncope.core.persistence.api.entity.AnyType;",
                "+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;",
                " import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;",
                " import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;",
                "-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "@@ -58,3 +59,4 @@ public abstract class AbstractAnyTemplate extends AbstractGeneratedKeyEntity imp",
                "                         ? null",
                "-                        : new JPAAnyUtilsFactory().getInstance(anyType.getKind()).newAnyTO()",
                "+                        : ApplicationContextProvider.getApplicationContext().getBean(AnyUtilsFactory.class).",
                "+                                getInstance(anyType.getKind()).newAnyTO()",
                "                 : anyType == null",
                "@@ -72,3 +74,2 @@ public abstract class AbstractAnyTemplate extends AbstractGeneratedKeyEntity imp",
                "     }",
                "-",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java",
                "index 4ede8b730d..4d91360401 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java",
                "@@ -455,2 +455,8 @@ public class JPAUser",
                "+    @Override",
                "+    public boolean remove(final UMembership membership) {",
                "+        checkType(membership, JPAUMembership.class);",
                "+        return this.memberships.remove((JPAUMembership) membership);",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyValidator.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyValidator.java",
                "index fba6674746..fefb1e7fe2 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyValidator.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyValidator.java",
                "@@ -24,2 +24,3 @@ import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;",
                " import org.apache.syncope.core.persistence.api.entity.Any;",
                "+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;",
                " import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;",
                "@@ -30,3 +31,3 @@ import org.apache.syncope.core.persistence.api.entity.conf.Conf;",
                " import org.apache.syncope.core.persistence.api.entity.group.Group;",
                "-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "@@ -59,4 +60,5 @@ public class AnyValidator extends AbstractValidator<AnyCheck, Any> {",
                "         if (!(any instanceof Conf)) {",
                "-            AllowedSchemas<PlainSchema> allowedPlainSchemas = new JPAAnyUtilsFactory().",
                "-                    getInstance(any.getType().getKind()).dao().findAllowedSchemas(any, PlainSchema.class);",
                "+            AllowedSchemas<PlainSchema> allowedPlainSchemas =",
                "+                    ApplicationContextProvider.getApplicationContext().getBean(AnyUtilsFactory.class).",
                "+                            getInstance(any.getType().getKind()).dao().findAllowedSchemas(any, PlainSchema.class);",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValidator.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValidator.java",
                "index d9975db6d8..89ee1f8bda 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValidator.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValidator.java",
                "@@ -27,15 +27,16 @@ public class PlainAttrValidator extends AbstractValidator<PlainAttrCheck, PlainA",
                "     @Override",
                "-    public boolean isValid(final PlainAttr<?> object, final ConstraintValidatorContext context) {",
                "-        boolean isValid;",
                "+    public boolean isValid(final PlainAttr<?> attr, final ConstraintValidatorContext context) {",
                "+        context.disableDefaultConstraintViolation();",
                "-        if (object == null) {",
                "+        boolean isValid;",
                "+        if (attr == null) {",
                "             isValid = true;",
                "         } else {",
                "-            if (object.getSchema().isUniqueConstraint()) {",
                "-                isValid = object.getValues().isEmpty() && object.getUniqueValue() != null;",
                "+            if (attr.getSchema().isUniqueConstraint()) {",
                "+                isValid = attr.getValues().isEmpty() && attr.getUniqueValue() != null;",
                "             } else {",
                "-                isValid = !object.getValues().isEmpty() && object.getUniqueValue() == null;",
                "+                isValid = !attr.getValues().isEmpty() && attr.getUniqueValue() == null;",
                "-                if (!object.getSchema().isMultivalue()) {",
                "-                    isValid &= object.getValues().size() == 1;",
                "+                if (!attr.getSchema().isMultivalue()) {",
                "+                    isValid &= attr.getValues().size() == 1;",
                "                 }",
                "@@ -44,6 +45,4 @@ public class PlainAttrValidator extends AbstractValidator<PlainAttrCheck, PlainA",
                "             if (!isValid) {",
                "-                LOG.error(\"Invalid values for attribute \" + object + \": \" + \"schema=\" + object.getSchema().getKey()",
                "-                        + \", values={}\", object.getValuesAsStrings());",
                "-",
                "-                context.disableDefaultConstraintViolation();",
                "+                LOG.error(\"Invalid values for attribute \" + attr + \": \"",
                "+                        + \"schema=\" + attr.getSchema().getKey() + \", values={}\", attr.getValuesAsStrings());",
                "@@ -51,4 +50,4 @@ public class PlainAttrValidator extends AbstractValidator<PlainAttrCheck, PlainA",
                "                         getTemplate(EntityViolationType.InvalidValueList,",
                "-                                \"Invalid values \" + object.getValuesAsStrings())).",
                "-                        addPropertyNode(object.getSchema().getKey()).addConstraintViolation();",
                "+                                \"Invalid values \" + attr.getValuesAsStrings())).",
                "+                        addPropertyNode(attr.getSchema().getKey()).addConstraintViolation();",
                "             }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValueValidator.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValueValidator.java",
                "index 64ec693e2b..fcb008dd26 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValueValidator.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValueValidator.java",
                "@@ -29,6 +29,7 @@ public class PlainAttrValueValidator extends AbstractValidator<PlainAttrValueChe",
                "     @Override",
                "-    public boolean isValid(final PlainAttrValue object, final ConstraintValidatorContext context) {",
                "-        boolean isValid;",
                "+    public boolean isValid(final PlainAttrValue value, final ConstraintValidatorContext context) {",
                "+        context.disableDefaultConstraintViolation();",
                "-        if (object == null) {",
                "+        boolean isValid;",
                "+        if (value == null) {",
                "             isValid = true;",
                "@@ -36,18 +37,18 @@ public class PlainAttrValueValidator extends AbstractValidator<PlainAttrValueChe",
                "             int nonNullVales = 0;",
                "-            if (object.getBooleanValue() != null) {",
                "+            if (value.getBooleanValue() != null) {",
                "                 nonNullVales++;",
                "             }",
                "-            if (object.getDateValue() != null) {",
                "+            if (value.getDateValue() != null) {",
                "                 nonNullVales++;",
                "             }",
                "-            if (object.getDoubleValue() != null) {",
                "+            if (value.getDoubleValue() != null) {",
                "                 nonNullVales++;",
                "             }",
                "-            if (object.getLongValue() != null) {",
                "+            if (value.getLongValue() != null) {",
                "                 nonNullVales++;",
                "             }",
                "-            if (object.getBinaryValue() != null) {",
                "+            if (value.getBinaryValue() != null) {",
                "                 nonNullVales++;",
                "             }",
                "-            if (object.getStringValue() != null) {",
                "+            if (value.getStringValue() != null) {",
                "                 nonNullVales++;",
                "@@ -57,13 +58,12 @@ public class PlainAttrValueValidator extends AbstractValidator<PlainAttrValueChe",
                "             if (!isValid) {",
                "-                LOG.error(\"More than one non-null value for \" + object);",
                "+                LOG.error(\"More than one non-null value for \" + value);",
                "-                context.disableDefaultConstraintViolation();",
                "                 context.buildConstraintViolationWithTemplate(",
                "                         getTemplate(EntityViolationType.MoreThanOneNonNull, \"More than one non-null value found\")).",
                "-                        addPropertyNode(object.getClass().getSimpleName().replaceAll(\"\\\\n\", \" \")).",
                "+                        addPropertyNode(value.getClass().getSimpleName().replaceAll(\"\\\\n\", \" \")).",
                "                         addConstraintViolation();",
                "-            } else if (object instanceof PlainAttrUniqueValue) {",
                "-                PlainSchema uniqueValueSchema = ((PlainAttrUniqueValue) object).getSchema();",
                "-                PlainSchema attrSchema = object.getAttr().getSchema();",
                "+            } else if (value instanceof PlainAttrUniqueValue) {",
                "+                PlainSchema uniqueValueSchema = ((PlainAttrUniqueValue) value).getSchema();",
                "+                PlainSchema attrSchema = value.getAttr().getSchema();",
                "@@ -72,9 +72,8 @@ public class PlainAttrValueValidator extends AbstractValidator<PlainAttrValueChe",
                "                 if (!isValid) {",
                "-                    LOG.error(\"Unique value schema for \" + object.getClass().getSimpleName() + \"[\" + object.getKey()",
                "-                            + \"]\" + \" is \" + uniqueValueSchema + \", while owning attribute schema is \" + attrSchema);",
                "+                    LOG.error(\"Unique value schema for \" + value + \" is \" + uniqueValueSchema",
                "+                            + \", while owning attribute's schema is \" + attrSchema);",
                "-                    context.disableDefaultConstraintViolation();",
                "                     context.buildConstraintViolationWithTemplate(getTemplate(EntityViolationType.InvalidPlainAttr,",
                "                             \"Unique value schema is \" + uniqueValueSchema",
                "-                            + \", while owning attribute schema is \" + attrSchema)).addPropertyNode(\"schema\").",
                "+                            + \", while owning attribute's schema is \" + attrSchema)).addPropertyNode(\"schema\").",
                "                             addConstraintViolation();",
                "diff --git a/core/persistence-jpa/src/main/resources/persistence.properties b/core/persistence-jpa/src/main/resources/persistence.properties",
                "index 946e58800e..0841aa0de0 100644",
                "--- a/core/persistence-jpa/src/main/resources/persistence.properties",
                "+++ b/core/persistence-jpa/src/main/resources/persistence.properties",
                "@@ -17,3 +17,10 @@",
                " content.directory=${conf.directory}",
                "+entity.factory=org.apache.syncope.core.persistence.jpa.entity.JPAEntityFactory",
                "+plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO",
                "+plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO",
                "+plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO",
                " any.search.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO",
                "+user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO",
                "+group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO",
                "+anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO",
                " openjpa.RemoteCommitProvider=sjvm",
                "diff --git a/core/persistence-jpa/src/main/resources/persistenceContext.xml b/core/persistence-jpa/src/main/resources/persistenceContext.xml",
                "index 50153a4c1e..c7c54c2336 100644",
                "--- a/core/persistence-jpa/src/main/resources/persistenceContext.xml",
                "+++ b/core/persistence-jpa/src/main/resources/persistenceContext.xml",
                "@@ -32,3 +32,10 @@ under the License.",
                "   <context:component-scan base-package=\"org.apache.syncope.core.persistence.jpa\"/>",
                "+  <bean class=\"${entity.factory}\"/>",
                "+  <bean class=\"${plainSchema.dao}\"/>",
                "+  <bean class=\"${plainAttr.dao}\"/>",
                "+  <bean class=\"${plainAttrValue.dao}\"/>",
                "   <bean class=\"${any.search.dao}\"/>",
                "+  <bean class=\"${user.dao}\"/>",
                "+  <bean class=\"${group.dao}\"/>",
                "+  <bean class=\"${anyObject.dao}\"/>",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "index c7499a8ea3..528b88c9ab 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "@@ -298,10 +298,6 @@ abstract class AbstractAnyDataBinder {",
                "-                        plainAttrValueDAO.delete(attr.getUniqueValue().getKey(), anyUtils.plainAttrUniqueValueClass());",
                "+                        plainAttrValueDAO.deleteAll(attr, anyUtils);",
                "                     }",
                "                 } else {",
                "-                    Collection<String> valuesToBeRemoved = attr.getValues().stream().",
                "-                            map(value -> value.getKey()).collect(Collectors.toSet());",
                "-                    valuesToBeRemoved.forEach(attrValueKey -> {",
                "-                        plainAttrValueDAO.delete(attrValueKey, anyUtils.plainAttrValueClass());",
                "-                    });",
                "+                    plainAttrValueDAO.deleteAll(attr, anyUtils);",
                "                 }",
                "@@ -326,3 +322,3 @@ abstract class AbstractAnyDataBinder {",
                "                 any.remove(attr);",
                "-                plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());",
                "+                plainAttrDAO.delete(attr);",
                "         }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "index 3bab7fe1fc..f772503e29 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "@@ -341,3 +341,3 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "             anyObject.getMembership(membPatch.getGroup()).ifPresent(membership -> {",
                "-                anyObject.getMemberships().remove(membership);",
                "+                anyObject.remove(membership);",
                "                 membership.setLeftEnd(null);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "index e50f59e6c2..055f7aa7c3 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "@@ -414,3 +414,3 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "             user.getMembership(membPatch.getGroup()).ifPresent(membership -> {",
                "-                user.getMemberships().remove(membership);",
                "+                user.remove(membership);",
                "                 membership.setLeftEnd(null);",
                "diff --git a/docker/core/src/main/resources/persistence.properties b/docker/core/src/main/resources/persistence.properties",
                "index 6df809138c..b656eb28f0 100644",
                "--- a/docker/core/src/main/resources/persistence.properties",
                "+++ b/docker/core/src/main/resources/persistence.properties",
                "@@ -17,3 +17,10 @@",
                " content.directory=/etc/apache-syncope",
                "+entity.factory=org.apache.syncope.core.persistence.jpa.entity.JPAEntityFactory",
                "+plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO",
                "+plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO",
                "+plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO",
                " any.search.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO",
                "+user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO",
                "+group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO",
                "+anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO",
                " openjpa.RemoteCommitProvider=${OPENJPA_REMOTE_COMMIT}",
                "diff --git a/ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties b/ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties",
                "index a3048a1189..194c758426 100644",
                "--- a/ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties",
                "+++ b/ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties",
                "@@ -17,3 +17,10 @@",
                " content.directory=${conf.directory}",
                "+entity.factory=org.apache.syncope.core.persistence.jpa.entity.JPAEntityFactory",
                "+plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO",
                "+plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO",
                "+plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO",
                " any.search.dao=org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearchDAO",
                "+user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO",
                "+group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO",
                "+anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO",
                " openjpa.RemoteCommitProvider=sjvm",
                "diff --git a/fit/core-reference/src/main/resources/elasticsearch/persistence.properties b/fit/core-reference/src/main/resources/elasticsearch/persistence.properties",
                "index a3048a1189..194c758426 100644",
                "--- a/fit/core-reference/src/main/resources/elasticsearch/persistence.properties",
                "+++ b/fit/core-reference/src/main/resources/elasticsearch/persistence.properties",
                "@@ -17,3 +17,10 @@",
                " content.directory=${conf.directory}",
                "+entity.factory=org.apache.syncope.core.persistence.jpa.entity.JPAEntityFactory",
                "+plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO",
                "+plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO",
                "+plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO",
                " any.search.dao=org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearchDAO",
                "+user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO",
                "+group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO",
                "+anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO",
                " openjpa.RemoteCommitProvider=sjvm"
            ],
            "changed_files": [
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AllowedSchemas.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainAttrDAO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainAttrValueDAO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/EntityFactory.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/GroupableRelatable.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrValueDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARelationshipTypeDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtilsFactory.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/AbstractAnyTemplate.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyValidator.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValidator.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValueValidator.java",
                "core/persistence-jpa/src/main/resources/persistence.properties",
                "core/persistence-jpa/src/main/resources/persistenceContext.xml",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "docker/core/src/main/resources/persistence.properties",
                "ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties",
                "fit/core-reference/src/main/resources/elasticsearch/persistence.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1395": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1f54d793fdec207774a53f2c8372de470defdad7"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AnyTypeClass",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1395",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "52565680e74e888ddeb1bc58f038474e7a6eff90",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541495740,
            "hunks": 1,
            "message": "Publishing 2 security advisories",
            "diff": [
                "diff --git a/src/site/xdoc/security.xml b/src/site/xdoc/security.xml",
                "index f71503d78c..9f1ceb33e8 100644",
                "--- a/src/site/xdoc/security.xml",
                "+++ b/src/site/xdoc/security.xml",
                "@@ -36,2 +36,94 @@ under the License.",
                "+      <subsection name=\"CVE-2018-17186: XXE on BPMN definitions\">\t",
                "+        <p>An administrator with workflow definition entitlements can use DTD to perform malicious operations, including",
                "+          but not limited to file read, file write, and code execution.</p>",
                "+",
                "+        <p>",
                "+          <b>Severity</b>",
                "+        </p>",
                "+        <p>Medium</p>",
                "+",
                "+        <p>",
                "+          <b>Affects</b>",
                "+        </p>",
                "+        <p>",
                "+          <ul>",
                "+            <li>Releases prior to 2.0.11</li>",
                "+            <li>Releases prior to 2.1.2</li>",
                "+          </ul>",
                "+        </p>",
                "+        <p>The unsupported Releases 1.2.x may be also affected.</p>",
                "+",
                "+        <p>",
                "+          <b>Solution</b>",
                "+        </p>",
                "+        <p>",
                "+          <ul>",
                "+            <li>2.0.X users should upgrade to 2.0.11</li>",
                "+            <li>2.1.X users should upgrade to 2.1.2</li>",
                "+          </ul>          ",
                "+        </p>",
                "+",
                "+        <p>",
                "+          <b>Mitigation</b>",
                "+        </p>",
                "+        <p>Do not assign workflow definition entitlements to any administrator.</p>",
                "+",
                "+        <p>",
                "+          <b>Fixed in</b>",
                "+        </p>",
                "+        <p>",
                "+          <ul>",
                "+            <li>Release 2.0.11</li>",
                "+            <li>Release 2.1.2</li>",
                "+          </ul>",
                "+        </p>",
                "+",
                "+        <p>Read the <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17186\">full CVE advisory</a>.</p>",
                "+      </subsection>",
                "+",
                "+      <subsection name=\"CVE-2018-17184: Stored XSS\">\t",
                "+        <p>A malicious user with enough administration entitlements can inject html-like elements containing JavaScript",
                "+          statements into Connector names, Report names, AnyTypeClass keys and Policy descriptions.<br/>",
                "+          When another user with enough administration entitlements edits one of the Entities above via Admin Console,",
                "+          the injected JavaScript code is executed.</p>",
                "+",
                "+        <p>",
                "+          <b>Severity</b>",
                "+        </p>",
                "+        <p>Important</p>",
                "+",
                "+        <p>",
                "+          <b>Affects</b>",
                "+        </p>",
                "+        <p>",
                "+          <ul>",
                "+            <li>Releases prior to 2.0.11</li>",
                "+            <li>Releases prior to 2.1.2</li>",
                "+          </ul>",
                "+        </p>",
                "+",
                "+        <p>",
                "+          <b>Solution</b>",
                "+        </p>",
                "+        <p>",
                "+          <ul>",
                "+            <li>2.0.X users should upgrade to 2.0.11</li>",
                "+            <li>2.1.X users should upgrade to 2.1.2</li>",
                "+          </ul>          ",
                "+        </p>",
                "+        ",
                "+        <p>",
                "+          <b>Fixed in</b>",
                "+        </p>",
                "+        <p>",
                "+          <ul>",
                "+            <li>Release 2.0.11</li>",
                "+            <li>Release 2.1.2</li>",
                "+          </ul>",
                "+        </p>",
                "+",
                "+        <p>Read the <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17184\">full CVE advisory</a>.</p>",
                "+      </subsection>",
                "+",
                "       <subsection name=\"CVE-2018-1322: Information disclosure via FIQL and ORDER BY sorting\">\t"
            ],
            "changed_files": [
                "src/site/xdoc/security.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4c5d58a4e43396e75f3830a69f528fbbbcb56ba2"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: AnyTypeClass, JavaScript, html-like",
                    "relevance": 8
                },
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "01e32d2d0ad7a9f171440dcf369da6a8f72a7d4b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540918619,
            "hunks": 36,
            "message": "[SYNCOPE-1388] Now only POST /user/self/mustChangePassword is allowed when mustChangePassword flag is set on user",
            "diff": [
                "diff --git a/appveyor.yml b/appveyor.yml",
                "index acd8bb4ca7..f58a884c6d 100644",
                "--- a/appveyor.yml",
                "+++ b/appveyor.yml",
                "@@ -28,5 +28,5 @@ install:",
                "       }",
                "-  - cmd: SET PATH=C:\\maven\\apache-maven-3.5.3\\bin;%JAVA_HOME%\\bin;=%;",
                "-  - cmd: SET JAVA_HOME=C:\\Program Files\\Java\\jdk10",
                "-  - cmd: SET M2_HOME=C:\\maven\\apache-maven-3.5.3",
                "+  - cmd: SET PATH=C:\\maven\\apache-maven-3.5.4\\bin;%JAVA_HOME%\\bin;=%;",
                "+  - cmd: SET JAVA_HOME=C:\\Program Files\\Java\\jdk1.8.0",
                "+  - cmd: SET M2_HOME=C:\\maven\\apache-maven-3.5.4",
                "   - cmd: SET MAVEN_OPTS=-Xmx4g",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "index f03f823350..3431f04d92 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "@@ -51,3 +51,2 @@ import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.syncope.common.lib.to.EntityTO;",
                "-import org.apache.syncope.common.lib.types.StandardEntitlement;",
                " import org.apache.syncope.common.rest.api.service.DomainService;",
                "@@ -256,3 +255,3 @@ public class SyncopeConsoleApplication extends AuthenticatedWebApplication {",
                "         return AuthenticatedWebSession.get().isSignedIn()",
                "-                && SyncopeConsoleSession.get().owns(StandardEntitlement.MUST_CHANGE_PASSWORD)",
                "+                && SyncopeConsoleSession.get().getSelfTO().isMustChangePassword()",
                "                 ? MustChangePassword.class",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "index d793da20fe..6f9d7a9009 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "@@ -33,2 +33,3 @@ import java.util.concurrent.CompletableFuture;",
                " import java.util.concurrent.Future;",
                "+import javax.ws.rs.ForbiddenException;",
                " import javax.ws.rs.core.EntityTag;",
                "@@ -50,2 +51,3 @@ import org.apache.syncope.common.lib.info.SystemInfo;",
                " import org.apache.syncope.common.lib.to.UserTO;",
                "+import org.apache.syncope.common.lib.types.StandardEntitlement;",
                " import org.apache.syncope.common.rest.api.service.SyncopeService;",
                "@@ -165,3 +167,3 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession {",
                "-            refreshAuth();",
                "+            refreshAuth(username);",
                "@@ -181,3 +183,3 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession {",
                "-            refreshAuth();",
                "+            refreshAuth(null);",
                "@@ -272,7 +274,15 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession {",
                "-    public void refreshAuth() {",
                "-        Pair<Map<String, Set<String>>, UserTO> self = client.self();",
                "-        auth = self.getLeft();",
                "-        selfTO = self.getRight();",
                "-        roles = null;",
                "+    public void refreshAuth(final String username) {",
                "+        try {",
                "+            Pair<Map<String, Set<String>>, UserTO> self = client.self();",
                "+            auth = self.getLeft();",
                "+            selfTO = self.getRight();",
                "+            roles = null;",
                "+        } catch (ForbiddenException e) {",
                "+            LOG.warn(\"Could not read self(), probably in a {} scenario\", StandardEntitlement.MUST_CHANGE_PASSWORD, e);",
                "+",
                "+            selfTO = new UserTO();",
                "+            selfTO.setUsername(username);",
                "+            selfTO.setMustChangePassword(true);",
                "+        }",
                "     }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java",
                "index 97158e5438..8e407f7a3e 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java",
                "@@ -77,3 +77,3 @@ public class AnyTypesPanel extends TypesDirectoryPanel<AnyTypeTO, AnyTypesPanel.",
                "                                 restClient.create(modelObject);",
                "-                                SyncopeConsoleSession.get().refreshAuth();",
                "+                                SyncopeConsoleSession.get().refreshAuth(null);",
                "                             } else {",
                "@@ -177,3 +177,3 @@ public class AnyTypesPanel extends TypesDirectoryPanel<AnyTypeTO, AnyTypesPanel.",
                "                     restClient.delete(model.getObject().getKey());",
                "-                    SyncopeConsoleSession.get().refreshAuth();",
                "+                    SyncopeConsoleSession.get().refreshAuth(null);",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java",
                "index 9f8fe09b5f..3b48522fef 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java",
                "@@ -21,8 +21,6 @@ package org.apache.syncope.client.enduser;",
                " import java.util.List;",
                "-import java.util.Map;",
                "-import java.util.Set;",
                " import java.util.stream.Collectors;",
                "+import javax.ws.rs.ForbiddenException;",
                " import javax.ws.rs.core.EntityTag;",
                " import javax.ws.rs.core.MediaType;",
                "-import org.apache.commons.lang3.tuple.Pair;",
                " import org.apache.cxf.jaxrs.client.WebClient;",
                "@@ -35,2 +33,3 @@ import org.apache.syncope.common.lib.types.AttrSchemaType;",
                " import org.apache.syncope.common.lib.types.SchemaType;",
                "+import org.apache.syncope.common.lib.types.StandardEntitlement;",
                " import org.apache.syncope.common.rest.api.beans.SchemaQuery;",
                "@@ -89,5 +88,12 @@ public class SyncopeEnduserSession extends WebSession {",
                "-    private void afterAuthentication() {",
                "-        Pair<Map<String, Set<String>>, UserTO> self = client.self();",
                "-        selfTO = self.getRight();",
                "+    private void afterAuthentication(final String username) {",
                "+        try {",
                "+            selfTO = client.self().getRight();",
                "+        } catch (ForbiddenException e) {",
                "+            LOG.warn(\"Could not read self(), probably in a {} scenario\", StandardEntitlement.MUST_CHANGE_PASSWORD, e);",
                "+",
                "+            selfTO = new UserTO();",
                "+            selfTO.setUsername(username);",
                "+            selfTO.setMustChangePassword(true);",
                "+        }",
                "@@ -106,3 +112,3 @@ public class SyncopeEnduserSession extends WebSession {",
                "-            afterAuthentication();",
                "+            afterAuthentication(username);",
                "@@ -123,3 +129,3 @@ public class SyncopeEnduserSession extends WebSession {",
                "-            afterAuthentication();",
                "+            afterAuthentication(null);",
                "@@ -192,3 +198,2 @@ public class SyncopeEnduserSession extends WebSession {",
                "     }",
                "-",
                " }",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfChangePassword.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfChangePassword.java",
                "index 2d476e8aa3..e18cd288a9 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfChangePassword.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfChangePassword.java",
                "@@ -20,3 +20,2 @@ package org.apache.syncope.client.enduser.resources;",
                "-import java.io.IOException;",
                " import java.nio.charset.StandardCharsets;",
                "@@ -58,12 +57,3 @@ public class UserSelfChangePassword extends BaseResource {",
                "             response.setTextEncoding(StandardCharsets.UTF_8.name());",
                "-",
                "-            response.setWriteCallback(new WriteCallback() {",
                "-",
                "-                @Override",
                "-                public void writeData(final Attributes attributes) throws IOException {",
                "-                    attributes.getResponse().write(\"Password changed correctly\");",
                "-                }",
                "-            });",
                "-",
                "-            response.setStatusCode(Response.Status.OK.getStatusCode());",
                "+            response.setStatusCode(Response.Status.NO_CONTENT.getStatusCode());",
                "         } catch (final Exception e) {",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java",
                "index 3e8e2ceedd..c58be8531c 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java",
                "@@ -151,3 +151,2 @@ public class UserSelfReadResource extends BaseUserSelfResource {",
                "     }",
                "-",
                " }",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "index 7718db7b58..f919b08e99 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "@@ -343,3 +343,2 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "-",
                "           $scope.initialSecurityQuestion = $scope.user.securityQuestion;",
                "@@ -522,3 +521,3 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "         }, function (response) {",
                "-          console.info(\"Error during user update: \", response);",
                "+          console.error(\"Error during user update: \", response);",
                "           var errorMessage;",
                "@@ -616,4 +615,7 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "           if (user && user.password) {",
                "-            UserSelfService.changePassword({\"newPassword\": user.password}).then(function (data) {",
                "-              $scope.logout(data);",
                "+            UserSelfService.changePassword({\"newPassword\": user.password}).then(function (response) {",
                "+              console.debug(\"User \" + user.username + \" password successfully CHANGED\");",
                "+              $scope.logout({",
                "+                successMessage: $filter('translate')([\"PASSWORD_UPDATED\"]).PASSWORD_UPDATED",
                "+              });",
                "             }, function (response) {",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/services/userSelfService.js b/client/enduser/src/main/resources/META-INF/resources/app/js/services/userSelfService.js",
                "index 2920814452..b7e05d3499 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/services/userSelfService.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/services/userSelfService.js",
                "@@ -117,4 +117,5 @@ angular.module('login')",
                "                       .then(function (response) {",
                "-                        return response.data || response.statusText;",
                "+                        return response;",
                "                       }, function (response) {",
                "+                        console.error(\"Something went wrong during passwod change, exit with status: \", response);",
                "                         return $q.reject(response.data || response.statusText);",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "index dace468882..56a01b40b7 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "@@ -87,3 +87,3 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {",
                "-    @PreAuthorize(\"isAuthenticated()\")",
                "+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"'))\")",
                "     @Transactional(readOnly = true)",
                "@@ -166,3 +166,5 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {",
                "-    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"'))\")",
                "+    @PreAuthorize(\"isAuthenticated() \"",
                "+            + \"and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"')) \"",
                "+            + \"and not(hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"'))\")",
                "     public ProvisioningResult<UserTO> selfUpdate(final UserPatch userPatch, final boolean nullPriorityAsync) {",
                "@@ -266,3 +268,3 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {",
                "-    @PreAuthorize(\"isAuthenticated()\")",
                "+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"'))\")",
                "     public ProvisioningResult<UserTO> selfStatus(final StatusPatch statusPatch, final boolean nullPriorityAsync) {",
                "@@ -318,3 +320,5 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {",
                "-    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"'))\")",
                "+    @PreAuthorize(\"isAuthenticated() \"",
                "+            + \"and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"')) \"",
                "+            + \"and not(hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"'))\")",
                "     public ProvisioningResult<UserTO> selfDelete(final boolean nullPriorityAsync) {",
                "diff --git a/core/spring/src/main/java/org/apache/syncope/core/spring/security/MustChangePasswordFilter.java b/core/spring/src/main/java/org/apache/syncope/core/spring/security/MustChangePasswordFilter.java",
                "index c901c0b408..15ea6a9850 100644",
                "--- a/core/spring/src/main/java/org/apache/syncope/core/spring/security/MustChangePasswordFilter.java",
                "+++ b/core/spring/src/main/java/org/apache/syncope/core/spring/security/MustChangePasswordFilter.java",
                "@@ -27,3 +27,2 @@ import javax.servlet.ServletRequest;",
                " import javax.servlet.ServletResponse;",
                "-import org.apache.commons.lang3.ArrayUtils;",
                " import org.apache.syncope.common.lib.types.StandardEntitlement;",
                "@@ -35,6 +34,2 @@ public class MustChangePasswordFilter implements Filter {",
                "-    private static final String[] ALLOWED = new String[] {",
                "-        \"/users/self\", \"/users/self/changePassword\"",
                "-    };",
                "-",
                "     @Override",
                "@@ -60,4 +55,4 @@ public class MustChangePasswordFilter implements Filter {",
                "                     SecurityContextHolderAwareRequestWrapper.class.cast(request);",
                "-            if (isMustChangePassword && \"GET\".equalsIgnoreCase(wrapper.getMethod())",
                "-                    && !ArrayUtils.contains(ALLOWED, wrapper.getPathInfo())) {",
                "+            if (isMustChangePassword && !\"POST\".equalsIgnoreCase(wrapper.getMethod())",
                "+                    && !\"/users/self/changePassword\".equals(wrapper.getPathInfo())) {",
                "@@ -69,3 +64,2 @@ public class MustChangePasswordFilter implements Filter {",
                "     }",
                "-",
                " }",
                "diff --git a/core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeJWTSSOProvider.java b/core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeJWTSSOProvider.java",
                "index 08715e1b46..279cd6fee7 100644",
                "--- a/core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeJWTSSOProvider.java",
                "+++ b/core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeJWTSSOProvider.java",
                "@@ -89,3 +89,3 @@ public class SyncopeJWTSSOProvider implements JWTSSOProvider {",
                "             AccessToken accessToken = accessTokenDAO.find(jwtClaims.getTokenId());",
                "-            if (accessToken.getAuthorities() != null) {",
                "+            if (accessToken != null && accessToken.getAuthorities() != null) {",
                "                 try {",
                "diff --git a/ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SPLogin.java b/ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SPLogin.java",
                "index 69f8294e03..d6b10c9b73 100644",
                "--- a/ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SPLogin.java",
                "+++ b/ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SPLogin.java",
                "@@ -70,3 +70,2 @@ public class SAML2SPLogin extends WebPage {",
                "     }",
                "-",
                " }"
            ],
            "changed_files": [
                "appveyor.yml",
                "client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfChangePassword.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java",
                "client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/services/userSelfService.js",
                "core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java",
                "core/spring/src/main/java/org/apache/syncope/core/spring/security/MustChangePasswordFilter.java",
                "core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeJWTSSOProvider.java",
                "ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/pages/SAML2SPLogin.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1388": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "eae67f83d57b8382c5e6aa10d0ca1838c4018856"
                ],
                [
                    "no-tag",
                    "9488345f84951b74f4604852391815266c285fbb"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1388",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b9a5c5d1ebc97d7f78afba8befda3c4c5fbe6f82",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1535988485,
            "hunks": 32,
            "message": "[SYNCOPE-1360] Reworking DynRealms-based delegated administration from Admin Console",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "index aa8a28c5f8..bda14db213 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "@@ -22,4 +22,6 @@ import java.text.DateFormat;",
                " import java.util.ArrayList;",
                "+import java.util.Arrays;",
                " import java.util.Collections;",
                " import java.util.HashMap;",
                "+import java.util.HashSet;",
                " import java.util.List;",
                "@@ -35,2 +37,3 @@ import org.apache.commons.collections4.Predicate;",
                " import org.apache.commons.collections4.list.SetUniqueList;",
                "+import org.apache.commons.lang3.ArrayUtils;",
                " import org.apache.commons.lang3.StringUtils;",
                "@@ -215,7 +218,3 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession {",
                "-    public boolean owns(final String entitlements) {",
                "-        return owns(entitlements, SyncopeConstants.ROOT_REALM);",
                "-    }",
                "-",
                "-    public boolean owns(final String entitlements, final String realm) {",
                "+    public boolean owns(final String entitlements, final String... realms) {",
                "         if (StringUtils.isEmpty(entitlements)) {",
                "@@ -224,12 +223,30 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession {",
                "+        if (auth == null) {",
                "+            return false;",
                "+        }",
                "+",
                "+        Set<String> requested = ArrayUtils.isEmpty(realms)",
                "+                ? Collections.singleton(SyncopeConstants.ROOT_REALM)",
                "+                : new HashSet<>(Arrays.asList(realms));",
                "+",
                "         for (String entitlement : entitlements.split(\",\")) {",
                "-            if (auth != null && auth.containsKey(entitlement)",
                "-                    && (realm == null || IterableUtils.matchesAny(auth.get(entitlement), new Predicate<String>() {",
                "-",
                "-                        @Override",
                "-                        public boolean evaluate(final String ownedRealm) {",
                "-                            return realm.startsWith(ownedRealm);",
                "-                        }",
                "-                    }))) {",
                "-                return true;",
                "+            if (auth.containsKey(entitlement)) {",
                "+                boolean owns = false;",
                "+",
                "+                Set<String> owned = auth.get(entitlement);",
                "+                for (final String realm : requested) {",
                "+                    if (realm.startsWith(SyncopeConstants.ROOT_REALM)) {",
                "+                        owns |= IterableUtils.matchesAny(owned, new Predicate<String>() {",
                "+",
                "+                            @Override",
                "+                            public boolean evaluate(final String ownedRealm) {",
                "+                                return realm.startsWith(ownedRealm);",
                "+                            }",
                "+                        });",
                "+                    } else {",
                "+                        owns |= owned.contains(realm);",
                "+                    }",
                "+                }",
                "+",
                "+                return owns;",
                "             }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "index c2b10fd693..5eb6f82437 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "@@ -106,3 +106,7 @@ public abstract class AnyDirectoryPanel<A extends AnyTO, E extends AbstractAnyRe",
                "         }",
                "-        setReadOnly(!SyncopeConsoleSession.get().owns(String.format(\"%s_UPDATE\", builder.type), builder.realm));",
                "+        if (builder.dynRealm == null) {",
                "+            setReadOnly(!SyncopeConsoleSession.get().owns(String.format(\"%s_UPDATE\", builder.type), builder.realm));",
                "+        } else {",
                "+            setReadOnly(!SyncopeConsoleSession.get().owns(String.format(\"%s_UPDATE\", builder.type), builder.dynRealm));",
                "+        }",
                "@@ -253,2 +257,4 @@ public abstract class AnyDirectoryPanel<A extends AnyTO, E extends AbstractAnyRe",
                "+        protected String dynRealm = null;",
                "+",
                "         /**",
                "@@ -276,2 +282,7 @@ public abstract class AnyDirectoryPanel<A extends AnyTO, E extends AbstractAnyRe",
                "+        public Builder<A, E> setDynRealm(final String dynRealm) {",
                "+            this.dynRealm = dynRealm;",
                "+            return this;",
                "+        }",
                "+",
                "         @Override",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyObjectDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyObjectDirectoryPanel.java",
                "index 7a642dc518..34eeed575b 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyObjectDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyObjectDirectoryPanel.java",
                "@@ -113,3 +113,3 @@ public class AnyObjectDirectoryPanel extends AnyDirectoryPanel<AnyObjectTO, AnyO",
                "                 String.format(\"%s,%s\", AnyEntitlement.READ.getFor(type), AnyEntitlement.UPDATE.getFor(type))).",
                "-                setRealm(realm);",
                "+                setRealms(realm, model.getObject().getDynRealms());",
                "@@ -158,3 +158,3 @@ public class AnyObjectDirectoryPanel extends AnyDirectoryPanel<AnyObjectTO, AnyO",
                "                     String.format(\"%s,%s\", AnyEntitlement.READ.getFor(type), AnyEntitlement.UPDATE.getFor(type))).",
                "-                    setRealm(realm);",
                "+                    setRealms(realm, model.getObject().getDynRealms());",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyPanel.java",
                "index 127471b0f1..12ec331284 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/AnyPanel.java",
                "@@ -252,3 +252,3 @@ public class AnyPanel extends Panel implements ModalPanel {",
                "                         anyTypeTO.getKey(),",
                "-                        pageRef).setRealm(realm).setFiltered(true).",
                "+                        pageRef).setRealm(realm).setDynRealm(dynRealm).setFiltered(true).",
                "                         setFiql(fiql).setWizardInModal(true).addNewItemPanelBuilder(FormLayoutInfoUtils.instantiate(",
                "@@ -271,3 +271,3 @@ public class AnyPanel extends Panel implements ModalPanel {",
                "                         anyTypeTO.getKey(),",
                "-                        pageRef).setRealm(realm).setFiltered(true).",
                "+                        pageRef).setRealm(realm).setDynRealm(dynRealm).setFiltered(true).",
                "                         setFiql(fiql).setWizardInModal(true).addNewItemPanelBuilder(FormLayoutInfoUtils.instantiate(",
                "@@ -293,3 +293,3 @@ public class AnyPanel extends Panel implements ModalPanel {",
                "                         anyTypeTO.getKey(),",
                "-                        pageRef).setRealm(realm).setFiltered(true).",
                "+                        pageRef).setRealm(realm).setDynRealm(dynRealm).setFiltered(true).",
                "                         setFiql(fiql).setWizardInModal(true).addNewItemPanelBuilder(FormLayoutInfoUtils.instantiate(",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java",
                "index 188e21a58c..c371cc7ade 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java",
                "@@ -218,3 +218,3 @@ public class GroupDirectoryPanel extends AnyDirectoryPanel<GroupTO, GroupRestCli",
                "                 String.format(\"%s,%s\", StandardEntitlement.GROUP_READ, StandardEntitlement.GROUP_UPDATE)).",
                "-                setRealm(realm);",
                "+                setRealms(realm, model.getObject().getDynRealms());",
                "@@ -249,3 +249,4 @@ public class GroupDirectoryPanel extends AnyDirectoryPanel<GroupTO, GroupRestCli",
                "             }",
                "-        }, ActionType.TYPE_EXTENSIONS, StandardEntitlement.GROUP_UPDATE).setRealm(realm);",
                "+        }, ActionType.TYPE_EXTENSIONS, StandardEntitlement.GROUP_UPDATE).",
                "+                setRealms(realm, model.getObject().getDynRealms());",
                "@@ -267,3 +268,3 @@ public class GroupDirectoryPanel extends AnyDirectoryPanel<GroupTO, GroupRestCli",
                "                 String.format(\"%s,%s\", StandardEntitlement.GROUP_READ, StandardEntitlement.GROUP_UPDATE)).",
                "-                setRealm(realm);",
                "+                setRealms(realm, model.getObject().getDynRealms());",
                "@@ -336,3 +337,3 @@ public class GroupDirectoryPanel extends AnyDirectoryPanel<GroupTO, GroupRestCli",
                "                 String.format(\"%s,%s\", StandardEntitlement.GROUP_READ, StandardEntitlement.GROUP_UPDATE)).",
                "-                setRealm(realm);",
                "+                setRealms(realm, model.getObject().getDynRealms());",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java",
                "index d9b89a58fc..9c42ecbefd 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java",
                "@@ -145,3 +145,3 @@ public class UserDirectoryPanel extends AnyDirectoryPanel<UserTO, UserRestClient",
                "                 String.format(\"%s,%s\", StandardEntitlement.USER_READ, StandardEntitlement.USER_UPDATE)).",
                "-                setRealm(realm);",
                "+                setRealms(realm, model.getObject().getDynRealms());",
                "@@ -187,3 +187,4 @@ public class UserDirectoryPanel extends AnyDirectoryPanel<UserTO, UserRestClient",
                "             }",
                "-        }, ActionType.MUSTCHANGEPASSWORD, StandardEntitlement.USER_UPDATE).setRealm(realm);",
                "+        }, ActionType.MUSTCHANGEPASSWORD, StandardEntitlement.USER_UPDATE).",
                "+                setRealms(realm, model.getObject().getDynRealms());",
                "@@ -210,4 +211,4 @@ public class UserDirectoryPanel extends AnyDirectoryPanel<UserTO, UserRestClient",
                "                 }",
                "-            }, ActionType.PASSWORD_MANAGEMENT,",
                "-                    new StringBuilder().append(StandardEntitlement.USER_UPDATE).toString()).setRealm(realm);",
                "+            }, ActionType.PASSWORD_MANAGEMENT, StandardEntitlement.USER_UPDATE).",
                "+                    setRealms(realm, model.getObject().getDynRealms());",
                "@@ -235,3 +236,4 @@ public class UserDirectoryPanel extends AnyDirectoryPanel<UserTO, UserRestClient",
                "                     }",
                "-                }, ActionType.REQUEST_PASSWORD_RESET, StandardEntitlement.USER_UPDATE).setRealm(realm);",
                "+                }, ActionType.REQUEST_PASSWORD_RESET, StandardEntitlement.USER_UPDATE).",
                "+                        setRealms(realm, model.getObject().getDynRealms());",
                "             }",
                "@@ -260,3 +262,4 @@ public class UserDirectoryPanel extends AnyDirectoryPanel<UserTO, UserRestClient",
                "                 }",
                "-            }, ActionType.ENABLE, StandardEntitlement.USER_UPDATE).setRealm(realm);",
                "+            }, ActionType.ENABLE, StandardEntitlement.USER_UPDATE).",
                "+                    setRealms(realm, model.getObject().getDynRealms());",
                "@@ -286,3 +289,3 @@ public class UserDirectoryPanel extends AnyDirectoryPanel<UserTO, UserRestClient",
                "                     String.format(\"%s,%s\", StandardEntitlement.USER_READ, StandardEntitlement.USER_UPDATE)).",
                "-                    setRealm(realm);",
                "+                    setRealms(realm, model.getObject().getDynRealms());",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/Action.java b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/Action.java",
                "index 98d2556524..f01a984106 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/Action.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/Action.java",
                "@@ -21,2 +21,4 @@ package org.apache.syncope.client.console.wicket.markup.html.form;",
                " import java.io.Serializable;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                " import org.apache.commons.lang3.StringUtils;",
                "@@ -33,3 +35,3 @@ public final class Action<T extends Serializable> implements Serializable {",
                "-    private String realm = null;",
                "+    private final List<String> realms = new ArrayList<>();",
                "@@ -68,4 +70,4 @@ public final class Action<T extends Serializable> implements Serializable {",
                "-    public String getRealm() {",
                "-        return realm;",
                "+    public String[] getRealms() {",
                "+        return realms.toArray(new String[realms.size()]);",
                "     }",
                "@@ -73,3 +75,15 @@ public final class Action<T extends Serializable> implements Serializable {",
                "     public void setRealm(final String realm) {",
                "-        this.realm = realm;",
                "+        this.realms.clear();",
                "+",
                "+        if (realm != null) {",
                "+            this.realms.add(realm);",
                "+        }",
                "+    }",
                "+",
                "+    public void setRealms(final String realm, final List<String> dynRealms) {",
                "+        setRealm(realm);",
                "+",
                "+        if (dynRealms != null) {",
                "+            this.realms.addAll(dynRealms);",
                "+        }",
                "     }",
                "@@ -106,3 +120,3 @@ public final class Action<T extends Serializable> implements Serializable {",
                "     }",
                "-    ",
                "+",
                "     public Action<T> showLabel() {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel.java",
                "index 91f83b9846..6b986197d6 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel.java",
                "@@ -132,3 +132,3 @@ public final class ActionPanel<T extends Serializable> extends Panel {",
                "-        if (SyncopeConsoleSession.get().owns(action.getEntitlements(), action.getRealm())) {",
                "+        if (SyncopeConsoleSession.get().owns(action.getEntitlements(), action.getRealms())) {",
                "             MetaDataRoleAuthorizationStrategy.authorizeAll(actionLink, RENDER);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "index 04246bd20d..175375c63e 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "@@ -604,6 +604,6 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "-        if (details) {",
                "-            // dynamic realms",
                "-            userTO.getDynRealms().addAll(userDAO.findDynRealms(user.getKey()));",
                "+        // dynamic realms",
                "+        userTO.getDynRealms().addAll(userDAO.findDynRealms(user.getKey()));",
                "+        if (details) {",
                "             // roles",
                "diff --git a/src/main/asciidoc/reference-guide/concepts/roles.adoc b/src/main/asciidoc/reference-guide/concepts/roles.adoc",
                "index ee235656e3..91401c9355 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/roles.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/roles.adoc",
                "@@ -104,2 +104,3 @@ For example, the following entitlements are normally required to be granted for",
                " . `REALM_LIST`",
                "+. `GROUP_SEARCH`",
                " ===="
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/AnyObjectDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/AnyPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/Action.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionPanel.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "src/main/asciidoc/reference-guide/concepts/roles.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1360": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "37539b4dee039af19e60ad5694b57bfcdf56b207"
                ],
                [
                    "no-tag",
                    "4fec32be0708252585f4cbfbc9dd25b5670d37ff"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: console, admin, administration",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, html, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1360",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "35d46cfe3985976a609b8f1d2293de2245ba3c92",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538405773,
            "hunks": 55,
            "message": "[SYNCOPE-1367] Added some accessibility features to Enduser",
            "diff": [
                "diff --git a/client/enduser/pom.xml b/client/enduser/pom.xml",
                "index b8a824a75e..7b6e97176f 100644",
                "--- a/client/enduser/pom.xml",
                "+++ b/client/enduser/pom.xml",
                "@@ -120,2 +120,6 @@ under the License.",
                "     </dependency>",
                "+    <dependency>",
                "+      <groupId>org.webjars.bowergithub.angular</groupId>",
                "+      <artifactId>bower-angular-aria</artifactId>",
                "+    </dependency>  ",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/css/accessibility.css b/client/enduser/src/main/resources/META-INF/resources/app/css/accessibility.css",
                "new file mode 100644",
                "index 0000000000..04c57a5ee7",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/css/accessibility.css",
                "@@ -0,0 +1,44 @@",
                "+/*",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+*/",
                "+",
                "+#accessibility {",
                "+  display: block;",
                "+}",
                "+",
                "+.btn-accessibility {",
                "+  position: absolute;",
                "+  right: 0;",
                "+  font-size: 12px;",
                "+  padding: 15px 15px 0 0;",
                "+}",
                "+",
                "+.btn-accessibility i {",
                "+  font-size: 30px;",
                "+}",
                "+",
                "+.btn-accessibility:hover {",
                "+  cursor:pointer;",
                "+}",
                "+",
                "+#change_contrast {",
                "+  top: 0;",
                "+}",
                "+#change_fontSize {",
                "+  top: 40px;",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/css/accessibility/accessibilityFont.css b/client/enduser/src/main/resources/META-INF/resources/app/css/accessibility/accessibilityFont.css",
                "new file mode 100644",
                "index 0000000000..fa4310c5e1",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/css/accessibility/accessibilityFont.css",
                "@@ -0,0 +1,78 @@",
                "+/*",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+*/",
                "+",
                "+body {",
                "+  font-size: 400%;",
                "+}",
                "+",
                "+.nav-button,",
                "+#login-btn,",
                "+#resetpassword,",
                "+#status-buttons a,",
                "+#login-container a,",
                "+.form-group input,",
                "+.form-group select,",
                "+.panel-title,",
                "+#questionCaptcha,",
                "+#refresh,",
                "+.suggestions,",
                "+.k-notification-wrap,",
                "+.btn-secondary,",
                "+ .card-body #attribute .fa {",
                "+  font-size: 20px;",
                "+}",
                "+",
                "+.k-picker-wrap {",
                "+  font-size: 17px;",
                "+}",
                "+",
                "+#finish {",
                "+  margin-right: 0;",
                "+}",
                "+#navButtons {",
                "+  padding-right: 20px;",
                "+}",
                "+",
                "+.k-notification-wrap {",
                "+  padding: .1em .2em;",
                "+  line-height: 1.5;",
                "+}",
                "+",
                "+.select2-choices li {",
                "+  line-height: 1 !important;",
                "+}",
                "+",
                "+.select2-choices li .ui-select-match-close {",
                "+  -ms-transform: scale(1.5); /* IE */",
                "+  -moz-transform: scale(1.5); /* FF */",
                "+  -webkit-transform: scale(1.5); /* Safari and Chrome */",
                "+  -o-transform: scale(1.5); /* Opera */",
                "+}",
                "+",
                "+input[type=checkbox] {",
                "+  -ms-transform: scale(2); /* IE */",
                "+  -moz-transform: scale(2); /* FF */",
                "+  -webkit-transform: scale(2); /* Safari and Chrome */",
                "+  -o-transform: scale(2); /* Opera */",
                "+}",
                "+",
                "+/* Workaround - to avoid nav buttons not to be vertically aligned  */",
                "+#navButtons .float-right {",
                "+  font-size: 1px;",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/css/accessibility/accessibilityHC.css b/client/enduser/src/main/resources/META-INF/resources/app/css/accessibility/accessibilityHC.css",
                "new file mode 100644",
                "index 0000000000..235daaf12f",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/css/accessibility/accessibilityHC.css",
                "@@ -0,0 +1,150 @@",
                "+/*",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+*/",
                "+",
                "+.btn-accessibility {",
                "+  color: #ffffff;",
                "+}",
                "+",
                "+",
                "+/* EditUser",
                "+============================================================================= */",
                "+html,",
                "+body {",
                "+  height: 100%;",
                "+}",
                "+body {",
                "+  background: #464646;",
                "+}",
                "+",
                "+#form-container .page-header,",
                "+#previous,",
                "+#next,",
                "+#save,",
                "+#finish,",
                "+#resetpassword {",
                "+  background: #464646;",
                "+  color: #ffffff;",
                "+}",
                "+",
                "+#previous:hover,",
                "+#next:hover,",
                "+#save:hover,",
                "+#finish:hover,",
                "+#resetpassword:hover {",
                "+  background: #6d6d6d;",
                "+}",
                "+",
                "+#form-container .btn-danger {",
                "+  background-color: #a93f3c;",
                "+  border-color: #ffffff;",
                "+}",
                "+",
                "+",
                "+#form-container,",
                "+#form-container .panel {",
                "+  background-color: #151515;",
                "+  color: #ffffff;",
                "+}",
                "+",
                "+#form-container input, ",
                "+#form-container select,",
                "+#form-container select option,",
                "+#form-container label,",
                "+.k-icon,",
                "+.card-header h5 a {",
                "+  color: #ffffff;",
                "+}",
                "+",
                "+#form-container input:disabled {",
                "+  background: #6d6d6d;",
                "+}",
                "+",
                "+#form-container input,",
                "+#form-container select,",
                "+#form-container select option,",
                "+span.k-datepicker, ",
                "+span.k-timepicker, ",
                "+span.k-datetimepicker, ",
                "+span.k-colorpicker, ",
                "+span.k-numerictextbox, ",
                "+span.k-combobox, ",
                "+span.k-dropdown, ",
                "+.k-toolbar .k-split-button,",
                "+.k-autocomplete.k-state-default, ",
                "+.k-picker-wrap.k-state-default, ",
                "+.k-numeric-wrap.k-state-default, ",
                "+.k-dropdown-wrap.k-state-default {",
                "+  background: #313131;",
                "+}",
                "+",
                "+.card-header,",
                "+.ui-select-choices-row:hover {",
                "+  background-color: #6d6d6d;",
                "+}",
                "+",
                "+.select2-choices,",
                "+.select2-drop-active {",
                "+  background-color: #3e3e3e;",
                "+  color: #ffffff;",
                "+}",
                "+",
                "+",
                "+/* Login",
                "+============================================================================= */",
                "+#login-container .card {",
                "+  background-color: #151515;",
                "+  color: #ffffff;",
                "+}",
                "+",
                "+#login-container .login-logo {",
                "+  background-color: rgba(255, 255, 255, 0.15);",
                "+  border-radius: 10px;",
                "+",
                "+  margin: 0px auto 20px auto;",
                "+}",
                "+",
                "+#login-container input,",
                "+#login-container select,",
                "+#login-container select option {",
                "+  color: #ffffff;",
                "+  background: #313131;",
                "+}",
                "+",
                "+#login-container input:disabled {",
                "+  background: #6d6d6d;",
                "+}",
                "+",
                "+#login-container .btn-link {",
                "+  color: #ffffff;",
                "+}",
                "+#login-container .btn-link:focus, ",
                "+#login-container .btn-link:hover {",
                "+  color: #b5dcff;",
                "+}",
                "+",
                "+#login-container .login-btn {",
                "+  color: #ffffff;",
                "+  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#6a9647), color-stop(100%,#48543d));",
                "+",
                "+  background: #464646;",
                "+}",
                "+",
                "+#login-container .form-group {",
                "+  margin-bottom: 20px;",
                "+}",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/css/editUser.css b/client/enduser/src/main/resources/META-INF/resources/app/css/editUser.css",
                "index 41ba63cadc..536b41a2f3 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/css/editUser.css",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/css/editUser.css",
                "@@ -34,3 +34,3 @@ under the License.",
                "-#form-container .breadcrumb-header{",
                "+#form-container .breadcrumb-header {",
                "   margin: auto;",
                "@@ -40,3 +40,3 @@ under the License.",
                "-#form-container .page-header   { ",
                "+#form-container .page-header { ",
                "   background: -moz-linear-gradient(top, #a9db80 0%, #96c56f 100%); /* FF3.6+ */",
                "@@ -198,3 +198,3 @@ span.k-datetimepicker{",
                " .btn-breadcrumb .btn:not(:last-child):after {",
                "-  border-left: 10px solid white;",
                "+  border-left: 10px solid #ffffff;",
                " }",
                "@@ -382,3 +382,3 @@ div[role=\"tablist\"] {",
                "     display: block;",
                "-    color: white !important;",
                "+    color: #ffffff !important;",
                "   }",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/css/init.css b/client/enduser/src/main/resources/META-INF/resources/app/css/init.css",
                "new file mode 100644",
                "index 0000000000..21555b42de",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/css/init.css",
                "@@ -0,0 +1,22 @@",
                "+/*",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+*/",
                "+",
                "+#accessibility {",
                "+  display: none;",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/index.html b/client/enduser/src/main/resources/META-INF/resources/app/index.html",
                "index 6ef3c4d5b9..4a137960cd 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/index.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/index.html",
                "@@ -46,2 +46,3 @@ under the License.",
                "+    <link href=\"css/init.css\" rel=\"stylesheet\" type=\"text/css\"/>",
                "     <link href=\"css/customSpinner.css\" rel=\"stylesheet\" type=\"text/css\"/>",
                "@@ -50,12 +51,30 @@ under the License.",
                "-    <!--[if lt IE 7]>",
                "-        <p class=\"browsehappy\">You are using an <strong>outdated</strong> browser. Please <a href=\"http://browsehappy.com/\">upgrade your browser</a> to improve your experience.</p>",
                "-    <![endif]-->",
                "+  <!--[if lt IE 7]>",
                "+      <p class=\"browsehappy\">You are using an <strong>outdated</strong> browser. Please <a href=\"http://browsehappy.com/\">upgrade your browser</a> to improve your experience.</p>",
                "+  <![endif]-->",
                "-    <span id=\"notifications\"></span>",
                "+  <span id=\"notifications\"></span>",
                "   <treasure-overlay-spinner active='spinner.active'>",
                "-    <div ui-view ng-cloak ng-controller=\"ApplicationController\" ng-init=\"initApplication()\">   ",
                "+    <div ng-cloak ng-controller=\"ApplicationController\" ng-init=\"initApplication()\">   ",
                "+      <div id=\"accessibility\" ng-controller=\"AccessibilityController\">",
                "+        <div id=\"change_contrast\" class=\"btn-accessibility\" ",
                "+             ng-init=\"checkPref(HC_THEME_PREF)\">",
                "+          <i ng-click=\"switchTheme()\"",
                "+             aria-label=\"Toggle high contrast colors mode\" tabindex=\"0\" accesskey=\"H\"",
                "+             class=\"fa fa-adjust\">",
                "+          </i>",
                "+        </div>",
                "+        <div id=\"change_fontSize\" class=\"btn-accessibility\" ",
                "+             ng-init=\"checkPref(FONT_SIZE_PREF)\">",
                "+          <i ng-click=\"switchIncreasedFont()\"",
                "+             aria-label=\"Toggle font size increment\" tabindex=\"0\" accesskey=\"F\"",
                "+             class=\"fa fa-font\">",
                "+          </i>",
                "+        </div>",
                "+      </div>",
                "-    </div>    ",
                "+      <!-- Dynamic view -->",
                "+      <div ui-view></div>",
                "+    </div>",
                "   </treasure-overlay-spinner>",
                "@@ -88,2 +107,3 @@ under the License.",
                "   <script src=\"../webjars/bootstrap-fileinput/${bootstrap-fileinput.version}/js/fileinput.js\"></script>",
                "+  <script src=\"../webjars/angular-aria/angular-aria.min.js\" ></script>",
                "@@ -112,2 +132,3 @@ under the License.",
                "   <script src=\"js/controllers/UserController.js\"></script>",
                "+  <script src=\"js/controllers/AccessibilityController.js\"></script>",
                "   <!--directives-->",
                "@@ -130,2 +151,3 @@ under the License.",
                "   <script src=\"js/directives/dynamicTemplateItem.js\"></script>",
                "+  <script src=\"js/directives/ngEnter.js\"></script>",
                "   <!--validator-->",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/app.js b/client/enduser/src/main/resources/META-INF/resources/app/js/app.js",
                "index bcd3fc4b01..9e3128bc22 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/app.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/app.js",
                "@@ -44,3 +44,4 @@ var app = angular.module('SyncopeEnduserApp', [",
                "   'ngCookies',",
                "-  'pascalprecht.translate'",
                "+  'pascalprecht.translate',",
                "+  'ngAria'",
                " ]);",
                "@@ -263,3 +264,3 @@ app.config(['$stateProvider', '$urlRouterProvider', '$httpProvider', '$translate",
                "     $httpProvider.defaults.headers.common[\"If-Modified-Since\"] = \"0\";",
                "-    $httpProvider.interceptors.push(function ($q, $rootScope, $location) {",
                "+    $httpProvider.interceptors.push(function ($q, $rootScope) {",
                "       return {",
                "@@ -298,4 +299,4 @@ app.config(['$stateProvider', '$urlRouterProvider', '$httpProvider', '$translate",
                "   }]);",
                "-app.run(['$rootScope', '$location', '$state', 'AuthService', '$transitions',",
                "-  function ($rootScope, $location, $state, AuthService, $transitions) {",
                "+app.run(['$rootScope', '$state', 'AuthService', '$transitions',",
                "+  function ($rootScope, $state, AuthService, $transitions) {",
                "     /*",
                "@@ -466,3 +467,3 @@ app.controller('ApplicationController', ['$scope', '$rootScope', 'InfoService',",
                "       $rootScope.getWizardFirstStep = function () {",
                "-        return ($scope.wizardFirstStep ? ('.' + $scope.wizardFirstStep) : '');",
                "+        return $scope.wizardFirstStep ? ('.' + $scope.wizardFirstStep) : '';",
                "       };",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/AccessibilityController.js b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/AccessibilityController.js",
                "new file mode 100644",
                "index 0000000000..1d9e7999fd",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/AccessibilityController.js",
                "@@ -0,0 +1,89 @@",
                "+/**",
                "+ Licensed to the Apache Software Foundation (ASF) under one",
                "+ or more contributor license agreements.  See the NOTICE file",
                "+ distributed with this work for additional information",
                "+ regarding copyright ownership.  The ASF licenses this file",
                "+ to you under the Apache License, Version 2.0 (the",
                "+ \"License\"); you may not use this file except in compliance",
                "+ with the License.  You may obtain a copy of the License at",
                "+ ",
                "+ http://www.apache.org/licenses/LICENSE-2.0",
                "+ ",
                "+ Unless required by applicable law or agreed to in writing,",
                "+ software distributed under the License is distributed on an",
                "+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ KIND, either express or implied.  See the License for the",
                "+ specific language governing permissions and limitations",
                "+ under the License.",
                "+ **/",
                "+",
                "+'use strict';",
                "+angular.module(\"home\").controller(\"AccessibilityController\", ['$scope', 'AssetsManager', '$window',",
                "+  function ($scope, AssetsManager, $window) {",
                "+",
                "+    var darkThemeFiles = [",
                "+      'css/accessibility/accessibilityHC.css'",
                "+    ];",
                "+",
                "+    var fontSizeFiles = [",
                "+      'css/accessibility/accessibilityFont.css'",
                "+    ];",
                "+",
                "+    $scope.FONT_SIZE_PREF = \"font_size_pref\";",
                "+    $scope.HC_THEME_PREF = \"hc_theme_pref\";",
                "+",
                "+    var doSwitch = function (check, files) {",
                "+      if (!check) {",
                "+        for (var i = 0; i < files.length; i++) {",
                "+          AssetsManager.remove(files[i], \"css\");",
                "+        }",
                "+      } else {",
                "+        for (var i = 0; i < files.length; i++) {",
                "+          AssetsManager.inject(AssetsManager.accessibilityCssId + \"_\" + i, files[i], \"css\");",
                "+        }",
                "+      }",
                "+    };",
                "+",
                "+    var savePreference = function (key, value) {",
                "+      $window.localStorage.setItem(key, value);",
                "+    };",
                "+",
                "+    var getPreference = function (key) {",
                "+      var storageValue = $window.localStorage.getItem(key);",
                "+      if (storageValue === null) {",
                "+        savePreference(key, \"false\");",
                "+      }",
                "+      return storageValue === 'true';",
                "+    };",
                "+",
                "+    $scope.isHighContrast = getPreference($scope.HC_THEME_PREF);",
                "+    $scope.isIncreasedFont = getPreference($scope.FONT_SIZE_PREF);",
                "+",
                "+    $scope.checkPref = function (pref) {",
                "+      switch (pref) {",
                "+        case $scope.FONT_SIZE_PREF:",
                "+          doSwitch($scope.isIncreasedFont, fontSizeFiles);",
                "+          break;",
                "+",
                "+        case $scope.HC_THEME_PREF:",
                "+          doSwitch($scope.isHighContrast, darkThemeFiles);",
                "+          break;",
                "+",
                "+        default:",
                "+          break;",
                "+      }",
                "+    };",
                "+",
                "+    $scope.switchTheme = function () {",
                "+      $scope.isHighContrast = !$scope.isHighContrast;",
                "+      doSwitch($scope.isHighContrast, darkThemeFiles);",
                "+      savePreference($scope.HC_THEME_PREF, $scope.isHighContrast);",
                "+    };",
                "+",
                "+    $scope.switchIncreasedFont = function () {",
                "+      $scope.isIncreasedFont = !$scope.isIncreasedFont;",
                "+      doSwitch($scope.isIncreasedFont, fontSizeFiles);",
                "+      savePreference($scope.FONT_SIZE_PREF, $scope.isIncreasedFont);",
                "+    };",
                "+",
                "+  }]);",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/navigationButtonsPartial.js b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/navigationButtonsPartial.js",
                "index 6d0d81dad4..67a70d56ca 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/navigationButtonsPartial.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/navigationButtonsPartial.js",
                "@@ -43,5 +43,5 @@ angular.module('self')",
                "               controller: function ($scope) {",
                "-                $scope.validateAndNext = function (event, state) {",
                "+                $scope.validateAndNext = function ($event, state) {",
                "                   //getting the enclosing form in order to access to its name                ",
                "-                  var currentForm = GenericUtil.getEnclosingForm(event.target);",
                "+                  var currentForm = GenericUtil.getEnclosingForm($event.target);",
                "                   if (currentForm !== null) {",
                "@@ -55,3 +55,2 @@ angular.module('self')",
                "                   }",
                "-",
                "                 };",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/ngEnter.js b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/ngEnter.js",
                "new file mode 100644",
                "index 0000000000..4f7e5a9e85",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/ngEnter.js",
                "@@ -0,0 +1,39 @@",
                "+/* ",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+'use strict';",
                "+",
                "+angular.module('self')",
                "+        .directive('ngEnter', function ($parse) {",
                "+",
                "+          return function (scope, element, attrs) {",
                "+            element.bind(\"keydown keypress\", function (event) {",
                "+              // check enter key pressed",
                "+              if (event.which === 13) {",
                "+                scope.$apply(function () {",
                "+                  $parse(attrs.ngEnter)(scope, {",
                "+                    $event: event",
                "+                  });",
                "+                });",
                "+",
                "+                event.preventDefault();",
                "+              }",
                "+            });",
                "+          };",
                "+",
                "+        });",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/util/assetsManager.js b/client/enduser/src/main/resources/META-INF/resources/app/js/util/assetsManager.js",
                "index 48ec119d6b..6402f84cdf 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/util/assetsManager.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/util/assetsManager.js",
                "@@ -25,5 +25,8 @@ angular.module('SyncopeEnduserApp')",
                "+            assetsManager.accessibilityCssId = \"access_css\";",
                "+",
                "             var createLink = function (id, url, deferred) {",
                "-              if (!angular.element('link#' + id).length && !angular.element('link[href=\"' + url + '\"').length) {",
                "+              if (!angular.element('link[href=\"' + url + '\"').length) {",
                "                 var link = document.createElement('link');",
                "+                link.id = id;",
                "                 link.rel = 'stylesheet';",
                "@@ -32,3 +35,9 @@ angular.module('SyncopeEnduserApp')",
                "                 link.onerror = deferred.reject;",
                "-                angular.element('head').append(link);",
                "+",
                "+                var themeElems = angular.element('[id*=\"' + assetsManager.accessibilityCssId + '\"]');",
                "+                if (themeElems.length) {",
                "+                  angular.element(themeElems[0]).before(link);",
                "+                } else {",
                "+                  angular.element('head').append(link);",
                "+                }",
                "               }",
                "@@ -37,4 +46,5 @@ angular.module('SyncopeEnduserApp')",
                "             var createScript = function (id, url, deferred) {",
                "-              if (!angular.element('script#' + id).length && !angular.element('script[src=\"' + url + '\"').length) {",
                "+              if (!angular.element('script[src=\"' + url + '\"').length) {",
                "                 var script = document.createElement('script');",
                "+                script.id = id;",
                "                 script.src = url;",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/navigationButtonsPartial.html b/client/enduser/src/main/resources/META-INF/resources/app/views/navigationButtonsPartial.html",
                "index cd2f907742..1676b73391 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/navigationButtonsPartial.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/navigationButtonsPartial.html",
                "@@ -19,3 +19,5 @@ under the License.",
                " <div class=\"float-right\">",
                "-  <a ng-show=\"next !== 'none'\" id=\"next\" class=\"btn btn-secondary btn-default\" ng-click=\"validateAndNext($event)\">",
                "+  <a ng-show=\"next !== 'none'\" id=\"next\" ng-click=\"validateAndNext($event)\"",
                "+     class=\"btn btn-secondary btn-default\" ",
                "+     ng-enter=\"validateAndNext($event)\" tabindex=\"0\">",
                "     {{'NEXT'| translate}}",
                "@@ -23,4 +25,5 @@ under the License.",
                "   </a>",
                "-  <a ng-show=\"previous !== 'none'\" id=\"previous\" ",
                "-     ng-click=\"previousTab()\" class=\"btn btn-secondary btn-default float-left\">",
                "+  <a ng-show=\"previous !== 'none'\" id=\"previous\" ng-click=\"previousTab()\" ",
                "+     class=\"btn btn-secondary btn-default float-left\"",
                "+     tabindex=\"0\" ng-enter=\"previousTab()\">",
                "     <span class=\"fa fa-arrow-circle-left\"></span>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/templates/editUserTemplate.html b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/editUserTemplate.html",
                "index a309f71f24..396bfe7fc2 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/templates/editUserTemplate.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/editUserTemplate.html",
                "@@ -33,7 +33,8 @@ under the License.",
                "               <a class=\"btn btn-secondary btn-default breadcrumb-btn-elem breadcrumb-home\" ",
                "-                 ng-show=\"createMode\" ng-click=\"logout()\">",
                "+                 tabindex=\"0\" ng-enter=\"logout()\" ng-show=\"createMode\" ng-click=\"logout()\">",
                "                 <i class=\"fa fa-home\"></i>",
                "               </a>",
                "+",
                "               <a id=\"logout\" class=\"btn btn-secondary btn-default breadcrumb-btn-elem\" ",
                "-                 ng-show=\"!createMode\" ng-click=\"logout()\">",
                "+                 tabindex=\"0\" ng-enter=\"logout()\" ng-show=\"!createMode\" ng-click=\"logout()\">",
                "                 <i class=\"fa fa-power-off\" style=\"color:red\"></i>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/templates/passwordresetTemplate.html b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/passwordresetTemplate.html",
                "index b2d6a3bb42..12be2a8963 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/templates/passwordresetTemplate.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/passwordresetTemplate.html",
                "@@ -27,3 +27,4 @@ under the License.",
                "         <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb\">",
                "-          <a class=\"btn btn-default breadcrumb-btn-elem breadcrumb-home\" ng-click=\"logout()\">",
                "+          <a class=\"btn btn-default breadcrumb-btn-elem breadcrumb-home\" ng-click=\"logout()\"",
                "+             tabindex=\"0\" ng-enter=\"logout()\">",
                "             <i class=\"fa fa-home\"></i>",
                "@@ -31,3 +32,4 @@ under the License.",
                "           <!--add class breadcrumb-disabled-link to buttons to prevent click-->",
                "-          <a ui-sref-active=\"active\" class=\"btn btn-secondary btn-default active\">{{'USERDETAILS'| translate}}</a>",
                "+          <a ui-sref-active=\"active\" tabindex=\"0\"",
                "+             class=\"btn btn-secondary btn-default active\">{{'USERDETAILS'| translate}}</a>",
                "         </div>",
                "@@ -63,3 +65,4 @@ under the License.",
                "             <div class=\"col-xs-6\">",
                "-              <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+              <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\"",
                "+                 tabindex=\"0\" ng-enter=\"logout()\">",
                "                 {{'CANCEL'| translate}}",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/user-credentials.html b/client/enduser/src/main/resources/META-INF/resources/app/views/user-credentials.html",
                "index 6a3524e4f8..68d442ce77 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/user-credentials.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/user-credentials.html",
                "@@ -70,3 +70,4 @@ under the License.",
                "   <div class=\"col-xs-3\">",
                "-    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ",
                "+       ng-enter=\"logout()\" ng-click=\"logout()\">",
                "       {{'CANCEL'| translate}}",
                "@@ -87,3 +88,3 @@ under the License.",
                "               class=\"btn btn-secondary btn-default float-right nav-button\" ",
                "-              ng-click=\"finish()\">",
                "+              ng-enter=\"logout()\" ng-click=\"finish()\">",
                "         {{'FINISH'| translate}}",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/user-derived-schemas.html b/client/enduser/src/main/resources/META-INF/resources/app/views/user-derived-schemas.html",
                "index a4435274a6..718fb99730 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/user-derived-schemas.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/user-derived-schemas.html",
                "@@ -24,3 +24,4 @@ under the License.",
                "   <div class=\"col-xs-3\">",
                "-    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ",
                "+       ng-enter=\"logout()\" ng-click=\"logout()\">",
                "       {{'CANCEL'| translate}}",
                "@@ -41,3 +42,3 @@ under the License.",
                "               class=\"btn btn-secondary btn-default float-right nav-button\" ",
                "-              ng-click=\"finish()\">",
                "+              ng-enter=\"finish()\" ng-click=\"finish()\">",
                "         {{'FINISH'| translate}}",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/user-form-finish.html b/client/enduser/src/main/resources/META-INF/resources/app/views/user-form-finish.html",
                "index ad3485b4b1..9f01174c8e 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/user-form-finish.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/user-form-finish.html",
                "@@ -26,3 +26,4 @@ under the License.",
                "   <div class=\"col-xs-3\">",
                "-    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ",
                "+       ng-enter=\"logout()\" ng-click=\"logout()\">",
                "       {{'CANCEL'| translate}}",
                "@@ -38,3 +39,4 @@ under the License.",
                "     <div class=\"col-xs-2 float-right p-0\">",
                "-      <button id=\"save\" type=\"submit\" tabindex=\"0\" class=\"btn btn-secondary btn-default float-right nav-button\">",
                "+      <button id=\"save\" type=\"submit\" tabindex=\"0\" ",
                "+              class=\"btn btn-secondary btn-default float-right nav-button\">",
                "         {{'SAVE'| translate}}",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/user-groups.html b/client/enduser/src/main/resources/META-INF/resources/app/views/user-groups.html",
                "index 85812071da..73a1e888dd 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/user-groups.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/user-groups.html",
                "@@ -37,3 +37,4 @@ under the License.",
                "   <div class=\"col-xs-3\">",
                "-    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ",
                "+       ng-enter=\"logout()\" ng-click=\"logout()\">",
                "       {{'CANCEL'| translate}}",
                "@@ -54,3 +55,3 @@ under the License.",
                "               class=\"btn btn-secondary btn-default float-right nav-button\" ",
                "-              ng-click=\"finish()\">",
                "+              ng-enter=\"finish()\" ng-click=\"finish()\">",
                "         {{'FINISH'| translate}}",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/user-plain-schemas.html b/client/enduser/src/main/resources/META-INF/resources/app/views/user-plain-schemas.html",
                "index a23df5043f..e7ae2b918d 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/user-plain-schemas.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/user-plain-schemas.html",
                "@@ -24,3 +24,4 @@ under the License.",
                "   <div class=\"col-xs-3\">",
                "-    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ",
                "+       ng-enter=\"logout()\" ng-click=\"logout()\">",
                "       {{'CANCEL'| translate}}",
                "@@ -41,3 +42,3 @@ under the License.",
                "               class=\"btn btn-secondary btn-default float-right nav-button\"",
                "-              ng-click=\"finish()\">",
                "+              ng-enter=\"finish()\" ng-click=\"finish()\">",
                "         {{'FINISH'| translate}}",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/user-resources.html b/client/enduser/src/main/resources/META-INF/resources/app/views/user-resources.html",
                "index a8cde79dd3..9d09da13f2 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/user-resources.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/user-resources.html",
                "@@ -24,3 +24,4 @@ under the License.",
                "   <div class=\"col-xs-3\">",
                "-    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ",
                "+       ng-enter=\"logout()\" ng-click=\"logout()\">",
                "       {{'CANCEL'| translate}}",
                "@@ -41,3 +42,3 @@ under the License.",
                "               class=\"btn btn-secondary btn-default float-right nav-button\" ",
                "-              ng-click=\"finish()\">",
                "+              ng-enter=\"finish()\" ng-click=\"finish()\">",
                "         {{'FINISH'| translate}}",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/user-virtual-schemas.html b/client/enduser/src/main/resources/META-INF/resources/app/views/user-virtual-schemas.html",
                "index d184a96cc2..e688043593 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/user-virtual-schemas.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/user-virtual-schemas.html",
                "@@ -24,3 +24,4 @@ under the License.",
                "   <div class=\"col-xs-3\">",
                "-    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ",
                "+       ng-enter=\"logout()\" ng-click=\"logout()\">",
                "       {{'CANCEL'| translate}}",
                "@@ -41,3 +42,3 @@ under the License.",
                "               class=\"btn btn-secondary btn-default float-right nav-button\" ",
                "-              ng-click=\"finish()\">",
                "+              ng-enter=\"finish()\" ng-click=\"finish()\">",
                "         {{'FINISH'| translate}}",
                "diff --git a/client/enduser/src/main/resources/customTemplate.json b/client/enduser/src/main/resources/customTemplate.json",
                "index 6b0efc146d..9b760b9ac9 100644",
                "--- a/client/enduser/src/main/resources/customTemplate.json",
                "+++ b/client/enduser/src/main/resources/customTemplate.json",
                "@@ -33,3 +33,4 @@",
                "               \"css/notification.css\",",
                "-              \"css/app.css\"",
                "+              \"css/app.css\",",
                "+              \"css/accessibility.css\"",
                "             ]",
                "diff --git a/fit/enduser-reference/src/main/resources/customTemplate.json b/fit/enduser-reference/src/main/resources/customTemplate.json",
                "index 6b0efc146d..9b760b9ac9 100644",
                "--- a/fit/enduser-reference/src/main/resources/customTemplate.json",
                "+++ b/fit/enduser-reference/src/main/resources/customTemplate.json",
                "@@ -33,3 +33,4 @@",
                "               \"css/notification.css\",",
                "-              \"css/app.css\"",
                "+              \"css/app.css\",",
                "+              \"css/accessibility.css\"",
                "             ]",
                "diff --git a/pom.xml b/pom.xml",
                "index e77a599aed..b4c82ae9a8 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1462,3 +1462,8 @@ under the License.",
                "         <version>${angular-translate.version}</version>",
                "-      </dependency>      ",
                "+      </dependency>",
                "+      <dependency>",
                "+        <groupId>org.webjars.bowergithub.angular</groupId>",
                "+        <artifactId>bower-angular-aria</artifactId>",
                "+        <version>${angular.version}</version>",
                "+      </dependency>  "
            ],
            "changed_files": [
                "client/enduser/pom.xml",
                "client/enduser/src/main/resources/META-INF/resources/app/css/accessibility.css",
                "client/enduser/src/main/resources/META-INF/resources/app/css/accessibility/accessibilityFont.css",
                "client/enduser/src/main/resources/META-INF/resources/app/css/accessibility/accessibilityHC.css",
                "client/enduser/src/main/resources/META-INF/resources/app/css/editUser.css",
                "client/enduser/src/main/resources/META-INF/resources/app/css/init.css",
                "client/enduser/src/main/resources/META-INF/resources/app/index.html",
                "client/enduser/src/main/resources/META-INF/resources/app/js/app.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/controllers/AccessibilityController.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/directives/navigationButtonsPartial.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/directives/ngEnter.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/util/assetsManager.js",
                "client/enduser/src/main/resources/META-INF/resources/app/views/navigationButtonsPartial.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/templates/editUserTemplate.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/templates/passwordresetTemplate.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/user-credentials.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/user-derived-schemas.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/user-form-finish.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/user-groups.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/user-plain-schemas.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/user-resources.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/user-virtual-schemas.html",
                "client/enduser/src/main/resources/customTemplate.json",
                "fit/enduser-reference/src/main/resources/customTemplate.json",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1367": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3285cc036e94028fd7219d16d1ca35f25ab5e322"
                ],
                [
                    "no-tag",
                    "fba9bce622df4eab6229f1adb4bc3e3fea738935"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: html, edit, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1367",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "11e88868b1bf88d3b3ab0d6cb25261d7686d9a8e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539006942,
            "hunks": 19,
            "message": "[SYNCOPE-1379] provide the possibility to configure check connection timeouts (console side) + properties to customize resource connection checks thread pool",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "index eeaf60226b..e160f1fb42 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "@@ -113,2 +113,8 @@ public class SyncopeConsoleApplication extends AuthenticatedWebApplication {",
                "+    private Integer corePoolSize;",
                "+",
                "+    private Integer maxPoolSize;",
                "+",
                "+    private Integer queueCapacity;",
                "+",
                "     private List<String> domains;",
                "@@ -168,2 +174,7 @@ public class SyncopeConsoleApplication extends AuthenticatedWebApplication {",
                "+        // Resource connections check thread pool size",
                "+        corePoolSize = Integer.valueOf(props.getProperty(\"topology.corePoolSize\", \"5\"));",
                "+        maxPoolSize = Integer.valueOf(props.getProperty(\"topology.maxPoolSize\", \"10\"));",
                "+        queueCapacity = Integer.valueOf(props.getProperty(\"topology.queueCapacity\", \"50\"));",
                "+",
                "         String csrf = props.getProperty(\"csrf\");",
                "@@ -324,2 +335,14 @@ public class SyncopeConsoleApplication extends AuthenticatedWebApplication {",
                "+    public Integer getCorePoolSize() {",
                "+        return corePoolSize;",
                "+    }",
                "+",
                "+    public Integer getMaxPoolSize() {",
                "+        return maxPoolSize;",
                "+    }",
                "+",
                "+    public Integer getQueueCapacity() {",
                "+        return queueCapacity;",
                "+    }",
                "+",
                "     public SyncopeClientFactoryBean newClientFactory() {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "index bda14db213..f312ca53af 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "@@ -105,5 +105,5 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession {",
                "         executor.setWaitForTasksToCompleteOnShutdown(false);",
                "-        executor.setCorePoolSize(5);",
                "-        executor.setMaxPoolSize(10);",
                "-        executor.setQueueCapacity(50);",
                "+        executor.setCorePoolSize(SyncopeConsoleApplication.get().getCorePoolSize());",
                "+        executor.setMaxPoolSize(SyncopeConsoleApplication.get().getMaxPoolSize());",
                "+        executor.setQueueCapacity(SyncopeConsoleApplication.get().getQueueCapacity());",
                "         executor.initialize();",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "index 1134a00405..9f1501828b 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "@@ -29,5 +29,11 @@ import java.util.Map;",
                " import java.util.Set;",
                "+import java.util.concurrent.Callable;",
                "+import java.util.concurrent.TimeUnit;",
                "+import java.util.concurrent.TimeoutException;",
                " import org.apache.syncope.client.console.SyncopeConsoleSession;",
                "+import org.apache.syncope.client.console.rest.ConfRestClient;",
                " import org.apache.syncope.client.console.rest.ConnectorRestClient;",
                " import org.apache.syncope.client.console.rest.ResourceRestClient;",
                "+import org.apache.syncope.common.lib.SyncopeClientException;",
                "+import org.apache.syncope.common.lib.to.AttrTO;",
                " import org.apache.syncope.common.lib.to.ConnInstanceTO;",
                "@@ -42,2 +48,3 @@ import org.slf4j.Logger;",
                " import org.slf4j.LoggerFactory;",
                "+import org.springframework.util.CollectionUtils;",
                "@@ -51,4 +58,12 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "-    private final Map<String, String> resources =",
                "-            Collections.<String, String>synchronizedMap(new HashMap<String, String>());",
                "+    private static final String CONNECTOR_TEST_TIMEOUT_PARAMETER = \"connector.test.timeout\";",
                "+",
                "+    private Integer connectorTestTimeout = null;",
                "+",
                "+    private static final String RESOURCE_TEST_TIMEOUT_PARAMETER = \"resource.test.timeout\";",
                "+",
                "+    private Integer resourceTestTimeout = null;",
                "+",
                "+    private final Map<String, String> resources",
                "+            = Collections.<String, String>synchronizedMap(new HashMap<String, String>());",
                "@@ -56,4 +71,4 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "-    private final Map<String, String> connectors =",
                "-            Collections.<String, String>synchronizedMap(new HashMap<String, String>());",
                "+    private final Map<String, String> connectors",
                "+            = Collections.<String, String>synchronizedMap(new HashMap<String, String>());",
                "@@ -65,2 +80,24 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "+    public TopologyWebSocketBehavior() {",
                "+        // Handling with timeout as per SYNCOPE-1379",
                "+        try {",
                "+            // Loop just to avoid NotFound exception raising on the Core side",
                "+            for (AttrTO param : new ConfRestClient().list()) {",
                "+                if (!CollectionUtils.isEmpty(param.getValues())) {",
                "+                    try {",
                "+                        if (CONNECTOR_TEST_TIMEOUT_PARAMETER.equalsIgnoreCase(param.getSchema())) {",
                "+                            connectorTestTimeout = Integer.parseInt(param.getValues().get(0));",
                "+                        } else if (RESOURCE_TEST_TIMEOUT_PARAMETER.equalsIgnoreCase(param.getSchema())) {",
                "+                            resourceTestTimeout = Integer.parseInt(param.getValues().get(0));",
                "+                        }",
                "+                    } catch (NumberFormatException e) {",
                "+                        LOG.warn(\"Invalid timeout {}\", param);",
                "+                    }",
                "+                }",
                "+            }",
                "+        } catch (SyncopeClientException e) {",
                "+            // ignore exception",
                "+        }",
                "+    }",
                "+",
                "     @Override",
                "@@ -87,3 +124,7 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "-                    SyncopeConsoleSession.get().execute(new ConnCheck(ckey));",
                "+                    try {",
                "+                        SyncopeConsoleSession.get().execute(new ConnCheck(ckey));",
                "+                    } catch (Exception e) {",
                "+                        LOG.error(\"Unexpected error\", e);",
                "+                    }",
                "@@ -106,3 +147,7 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "-                    SyncopeConsoleSession.get().execute(new ResCheck(rkey));",
                "+                    try {",
                "+                        SyncopeConsoleSession.get().execute(new ResCheck(rkey));",
                "+                    } catch (Exception e) {",
                "+                        LOG.error(\"Unexpected error\", e);",
                "+                    }",
                "@@ -130,2 +175,33 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "+    private void timeoutHandlingConnectionChecker(",
                "+            final Checker checker,",
                "+            final Integer timeout,",
                "+            final Map<String, String> responses,",
                "+            final Set<String> running) {",
                "+        String res = null;",
                "+        try {",
                "+            if (timeout == null) {",
                "+                LOG.debug(\"No timeouts for resource connection checking ... \");",
                "+                res = SyncopeConsoleSession.get().execute(checker).get();",
                "+            } else if (timeout > 0) {",
                "+                LOG.debug(\"Timeouts provided for resource connection checking ... \");",
                "+                res = SyncopeConsoleSession.get().execute(checker).get(timeout, TimeUnit.SECONDS);",
                "+            }",
                "+        } catch (InterruptedException | TimeoutException e) {",
                "+            LOG.warn(\"Connection with {} timed out\", checker.getKey());",
                "+            res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",",
                "+                    TopologyNode.Status.UNREACHABLE, checker.getKey());",
                "+        } catch (Exception e) {",
                "+            LOG.error(\"Unexpected exception conneting to {}\", checker.getKey(), e);",
                "+            res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",",
                "+                    TopologyNode.Status.FAILURE, checker.getKey());",
                "+        }",
                "+",
                "+        if (res != null) {",
                "+            responses.put(checker.getKey(), res);",
                "+        }",
                "+",
                "+        running.remove(checker.getKey());",
                "+    }",
                "+",
                "     class ConnCheck implements Runnable {",
                "@@ -146,19 +222,11 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "         public void run() {",
                "-            try {",
                "-                ThreadContext.setApplication(application);",
                "-                ThreadContext.setSession(session);",
                "-",
                "-                String res;",
                "-                try {",
                "-                    final ConnInstanceTO connector = connectorRestClient.read(key);",
                "-                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",",
                "-                            connectorRestClient.check(connector).getLeft()",
                "-                            ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);",
                "-                } catch (Exception e) {",
                "-                    LOG.warn(\"Error checking connection for {}\", key, e);",
                "-                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", TopologyNode.Status.FAILURE, key);",
                "-                }",
                "+            ThreadContext.setApplication(application);",
                "+            ThreadContext.setSession(session);",
                "-                connectors.put(key, res);",
                "-                runningConnCheck.remove(key);",
                "+            try {",
                "+                timeoutHandlingConnectionChecker(",
                "+                        new ConnectorChecker(key, this.application),",
                "+                        connectorTestTimeout,",
                "+                        connectors,",
                "+                        runningConnCheck);",
                "             } finally {",
                "@@ -185,19 +253,86 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "         public void run() {",
                "+            ThreadContext.setApplication(application);",
                "+            ThreadContext.setSession(session);",
                "+",
                "             try {",
                "-                ThreadContext.setApplication(application);",
                "-                ThreadContext.setSession(session);",
                "-",
                "-                String res;",
                "-                try {",
                "-                    final ResourceTO resource = resourceRestClient.read(key);",
                "-                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",",
                "-                            resourceRestClient.check(resource).getLeft()",
                "-                            ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);",
                "-                } catch (Exception e) {",
                "-                    LOG.warn(\"Error checking connection for {}\", key, e);",
                "-                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", TopologyNode.Status.FAILURE, key);",
                "-                }",
                "+                timeoutHandlingConnectionChecker(",
                "+                        new ResourceChecker(key, this.application),",
                "+                        resourceTestTimeout,",
                "+                        resources,",
                "+                        runningResCheck);",
                "+            } finally {",
                "+                ThreadContext.detach();",
                "+            }",
                "+        }",
                "+    }",
                "-                resources.put(key, res);",
                "-                runningResCheck.remove(key);",
                "+    abstract class Checker implements Callable<String> {",
                "+",
                "+        protected final String key;",
                "+",
                "+        protected final Application application;",
                "+",
                "+        protected final Session session;",
                "+",
                "+        Checker(final String key, final Application application) {",
                "+            this.key = key;",
                "+            this.application = application;",
                "+            this.session = Session.exists() ? Session.get() : null;",
                "+        }",
                "+",
                "+        public String getKey() {",
                "+            return key;",
                "+        }",
                "+",
                "+        @Override",
                "+        public abstract String call() throws Exception;",
                "+    }",
                "+",
                "+    class ConnectorChecker extends Checker {",
                "+",
                "+        ConnectorChecker(final String key, final Application application) {",
                "+            super(key, application);",
                "+        }",
                "+",
                "+        @Override",
                "+        public String call() throws Exception {",
                "+            ThreadContext.setApplication(application);",
                "+            ThreadContext.setSession(session);",
                "+",
                "+            try {",
                "+                final ConnInstanceTO connector = connectorRestClient.read(key);",
                "+                return String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",",
                "+                        connectorRestClient.check(connector).getLeft()",
                "+                        ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);",
                "+            } catch (Exception e) {",
                "+                LOG.warn(\"Error checking connection for {}\", key, e);",
                "+                return String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",",
                "+                        TopologyNode.Status.FAILURE, key);",
                "+            } finally {",
                "+                ThreadContext.detach();",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    class ResourceChecker extends Checker {",
                "+",
                "+        ResourceChecker(final String key, final Application application) {",
                "+            super(key, application);",
                "+        }",
                "+",
                "+        @Override",
                "+        public String call() throws Exception {",
                "+            ThreadContext.setApplication(application);",
                "+            ThreadContext.setSession(session);",
                "+",
                "+            try {",
                "+                final ResourceTO resource = resourceRestClient.read(key);",
                "+                return String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",",
                "+                        resourceRestClient.check(resource).getLeft()",
                "+                        ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);",
                "+            } catch (Exception e) {",
                "+                LOG.warn(\"Error checking connection for {}\", key, e);",
                "+                return String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",",
                "+                        TopologyNode.Status.FAILURE,",
                "+                        key);",
                "             } finally {",
                "diff --git a/client/console/src/main/resources/console.properties b/client/console/src/main/resources/console.properties",
                "index 0bb81710c5..3611052fb7 100644",
                "--- a/client/console/src/main/resources/console.properties",
                "+++ b/client/console/src/main/resources/console.properties",
                "@@ -53 +53,5 @@ page.notifications=org.apache.syncope.client.console.pages.Notifications",
                " page.parameters=org.apache.syncope.client.console.pages.Parameters",
                "+",
                "+topology.corePoolSize=10",
                "+topology.maxPoolSize=20",
                "+topology.queueCapacity=50",
                "diff --git a/fit/console-reference/src/main/resources/console.properties b/fit/console-reference/src/main/resources/console.properties",
                "index 6bd549c02b..366d0de627 100644",
                "--- a/fit/console-reference/src/main/resources/console.properties",
                "+++ b/fit/console-reference/src/main/resources/console.properties",
                "@@ -53 +53,5 @@ page.notifications=org.apache.syncope.client.console.pages.Notifications",
                " page.parameters=org.apache.syncope.client.console.pages.Parameters",
                "+",
                "+topology.corePoolSize=50",
                "+topology.maxPoolSize=100",
                "+topology.queueCapacity=10"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java",
                "client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java",
                "client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "client/console/src/main/resources/console.properties",
                "fit/console-reference/src/main/resources/console.properties"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1379": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e1b88c21913f24c0e574080f6f7464e3a755b35a"
                ],
                [
                    "no-tag",
                    "1302734d34336558948205e0bfb17ecadaa24ede"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: console",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1379",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1533742026,
            "hunks": 4,
            "message": "[SYNCOPE-1339] Spinner loader in Enduser now covers the whole page while it's active",
            "diff": [
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/css/app.css b/client/enduser/src/main/resources/META-INF/resources/app/css/app.css",
                "index 721abf70fb..a91d76465a 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/css/app.css",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/css/app.css",
                "@@ -81,7 +81,14 @@ treasure-overlay-spinner {",
                "   bottom: 0;",
                "-  position: absolute;",
                "+  position: fixed;",
                "   right: 0;",
                "   left: 0;",
                "+  overflow-y: auto;",
                " }",
                "+",
                "+treasure-overlay-spinner .treasure-overlay-spinner {",
                "+  position: fixed;",
                "+}",
                "+",
                " treasure-overlay-spinner .treasure-overlay-spinner-container {",
                "+  position: fixed;",
                "   background: rgba(0, 0, 0, 0.5490196078431373);"
            ],
            "changed_files": [
                "client/enduser/src/main/resources/META-INF/resources/app/css/app.css"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1339": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0d49824940940faf7cbaaa350ba7d84488ec42cc"
                ],
                [
                    "no-tag",
                    "c819eb5b97406e6bde57ba8b502fdee5568c0e6b"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1339",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f38f1cbe0e2c73bf4c5466af75a01b15a72e8629",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1532178786,
            "hunks": 10,
            "message": "[SYNCOPE-1341] Adding DOMAIN variable for the Enduser image",
            "diff": [
                "diff --git a/docker/enduser/src/main/resources/enduser.properties.template b/docker/enduser/src/main/resources/enduser.properties.template",
                "index 8f0547a13c..8ce17e9e4c 100644",
                "--- a/docker/enduser/src/main/resources/enduser.properties.template",
                "+++ b/docker/enduser/src/main/resources/enduser.properties.template",
                "@@ -18,3 +18,3 @@ enduser.directory=/etc/apache-syncope",
                "-domain=Master",
                "+domain=${DOMAIN}",
                "diff --git a/docker/enduser/src/main/resources/startup.sh b/docker/enduser/src/main/resources/startup.sh",
                "index fa2b5f386b..6838fbd6c5 100755",
                "--- a/docker/enduser/src/main/resources/startup.sh",
                "+++ b/docker/enduser/src/main/resources/startup.sh",
                "@@ -22,2 +22,3 @@ cd /etc/apache-syncope",
                " sed \"s/\\${CORE_SCHEME}/$CORE_SCHEME/\" enduser.properties.template | ",
                "+sed \"s/\\${DOMAIN}/$DOMAIN/\" enduser.properties.template | ",
                " sed \"s/\\${CORE_HOST}/$CORE_HOST/\" | sed \"s/\\${CORE_PORT}/$CORE_PORT/\" > enduser.properties",
                "diff --git a/docker/src/main/resources/docker-compose-ha.yml b/docker/src/main/resources/docker-compose-ha.yml",
                "index c97deab7e3..0eb26f55c1 100644",
                "--- a/docker/src/main/resources/docker-compose-ha.yml",
                "+++ b/docker/src/main/resources/docker-compose-ha.yml",
                "@@ -92 +92,2 @@ services:",
                "        CORE_PORT: 8080",
                "+       DOMAIN: Master",
                "diff --git a/docker/src/main/resources/docker-compose-mariadb.yml b/docker/src/main/resources/docker-compose-mariadb.yml",
                "index 7e78637e86..65851bb69b 100644",
                "--- a/docker/src/main/resources/docker-compose-mariadb.yml",
                "+++ b/docker/src/main/resources/docker-compose-mariadb.yml",
                "@@ -70 +70,2 @@ services:",
                "        CORE_PORT: 8080",
                "+       DOMAIN: Master",
                "diff --git a/docker/src/main/resources/docker-compose-mssql.yml b/docker/src/main/resources/docker-compose-mssql.yml",
                "index 592192a3c4..462f7491cc 100644",
                "--- a/docker/src/main/resources/docker-compose-mssql.yml",
                "+++ b/docker/src/main/resources/docker-compose-mssql.yml",
                "@@ -72 +72,2 @@ services:",
                "        CORE_PORT: 8080",
                "+       DOMAIN: Master",
                "diff --git a/docker/src/main/resources/docker-compose-mysql.yml b/docker/src/main/resources/docker-compose-mysql.yml",
                "index ed29be5084..d2af8c0b54 100644",
                "--- a/docker/src/main/resources/docker-compose-mysql.yml",
                "+++ b/docker/src/main/resources/docker-compose-mysql.yml",
                "@@ -69 +69,2 @@ services:",
                "        CORE_PORT: 8080",
                "+       DOMAIN: Master",
                "diff --git a/docker/src/main/resources/docker-compose-postgresql.yml b/docker/src/main/resources/docker-compose-postgresql.yml",
                "index e7abdfe76b..862a051b22 100644",
                "--- a/docker/src/main/resources/docker-compose-postgresql.yml",
                "+++ b/docker/src/main/resources/docker-compose-postgresql.yml",
                "@@ -75 +75,2 @@ services:",
                "        CORE_PORT: 8080",
                "+       DOMAIN: Master",
                "diff --git a/src/main/asciidoc/getting-started/obtain.adoc b/src/main/asciidoc/getting-started/obtain.adoc",
                "index f02fbf4eaf..d57133af94 100644",
                "--- a/src/main/asciidoc/getting-started/obtain.adoc",
                "+++ b/src/main/asciidoc/getting-started/obtain.adoc",
                "@@ -341,2 +341,3 @@ Environment variables:",
                " * `CORE_PORT`: port number to connect to Syncope Core",
                "+* `DOMAIN`: Syncope Core's domain to work with",
                "@@ -415,2 +416,3 @@ services:",
                "        CORE_PORT: 8080",
                "+       DOMAIN: Master",
                " ----",
                "@@ -419,3 +421,3 @@ services:",
                " <3> Apache Syncope Admin UI, port `28080` exposed",
                "-<4> Apache Syncope Enduser UI, port `38080` exposed",
                "+<4> Apache Syncope Enduser UI, port `38080` exposed, working with `Master` domain",
                " ===="
            ],
            "changed_files": [
                "docker/enduser/src/main/resources/enduser.properties.template",
                "docker/enduser/src/main/resources/startup.sh",
                "docker/src/main/resources/docker-compose-ha.yml",
                "docker/src/main/resources/docker-compose-mariadb.yml",
                "docker/src/main/resources/docker-compose-mssql.yml",
                "docker/src/main/resources/docker-compose-mysql.yml",
                "docker/src/main/resources/docker-compose-postgresql.yml",
                "src/main/asciidoc/getting-started/obtain.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1341": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d478c0a5fd5b7ee34ddfe2c19c4b8eb6cdbf4899"
                ],
                [
                    "no-tag",
                    "4ff68ce563c8832cdb7abcab10426836923ee28f"
                ]
            ],
            "tags": [
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1341",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "59a36b775a4957480c9089f7a5aae0299671dfdd",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538667054,
            "hunks": 1,
            "message": "[SYNCOPE-1367] Added documentation about Enduser accessibility",
            "diff": [
                "diff --git a/src/main/asciidoc/images/accessibility-enduser01.png b/src/main/asciidoc/images/accessibility-enduser01.png",
                "new file mode 100644",
                "index 0000000000..5ed2303724",
                "Binary files /dev/null and b/src/main/asciidoc/images/accessibility-enduser01.png differ",
                "diff --git a/src/main/asciidoc/images/accessibility-enduser02.png b/src/main/asciidoc/images/accessibility-enduser02.png",
                "new file mode 100644",
                "index 0000000000..57241f688c",
                "Binary files /dev/null and b/src/main/asciidoc/images/accessibility-enduser02.png differ",
                "diff --git a/src/main/asciidoc/images/accessibility-enduser03.png b/src/main/asciidoc/images/accessibility-enduser03.png",
                "new file mode 100644",
                "index 0000000000..5c230ea85e",
                "Binary files /dev/null and b/src/main/asciidoc/images/accessibility-enduser03.png differ",
                "diff --git a/src/main/asciidoc/reference-guide/architecture/architecture.adoc b/src/main/asciidoc/reference-guide/architecture/architecture.adoc",
                "index b183e08e7c..90dd618baa 100644",
                "--- a/src/main/asciidoc/reference-guide/architecture/architecture.adoc",
                "+++ b/src/main/asciidoc/reference-guide/architecture/architecture.adoc",
                "@@ -45,2 +45,51 @@ The communication between End-user UI and Core is exclusively REST-based.",
                "+==== Accessibility",
                "+",
                "+The End-user UI is accessible to the visually impaired.",
                "+",
                "+Two icons are present in the main page, in the right corner:",
                "+",
                "+[.text-center]",
                "+image::accessibility-enduser01.png[title=\"Enduser accessibility icons\",alt=\"Enduser accessibility icons\"]",
                "+",
                "+By clicking the top right corner icon image:accessibility-enduser02.png[Accessibility HC mode,30,30] it is possible to ",
                "+toggle the \"High contrast mode\".",
                "+In this mode, the website colors are switched to a higher contrast color schema.",
                "+",
                "+[TIP]",
                "+====",
                "+The `H` https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey[accesskey^] shortcut can",
                "+be used to easily toggle \"High contrast mode\" by using the keyboard.",
                "+",
                "+E.g. ",
                "+|===",
                "+|Shortcut |Purpose",
                "+",
                "+|`Alt` + `Shift` + `H`",
                "+|Toggle \"High contrast mode\" on Firefox and Chrome browsers on Linux",
                "+|===",
                "+",
                "+====",
                "+",
                "+By clicking the second icon image:accessibility-enduser03.png[Accessibility HC mode,30,30] it is possible ",
                "+to toggle the \"Increased font mode\".",
                "+In this mode, the website font size is increased.",
                "+",
                "+[TIP]",
                "+====",
                "+The `F` https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey[accesskey^] shortcut can",
                "+be used to easily toggle \"Increased font mode\" by using the keyboard.",
                "+",
                "+E.g. ",
                "+|===",
                "+|Shortcut |Purpose",
                "+",
                "+|`Alt` + `Shift` + `F`",
                "+|Toggle \"Increased font mode\" on Firefox and Chrome browsers on Linux",
                "+|===",
                "+",
                "+====",
                "+",
                "+To reset to the default mode, it is enough to click again on the specific icon.",
                "+",
                " [[cli-component]]"
            ],
            "changed_files": [
                "src/main/asciidoc/images/accessibility-enduser01.png",
                "src/main/asciidoc/images/accessibility-enduser02.png",
                "src/main/asciidoc/images/accessibility-enduser03.png",
                "src/main/asciidoc/reference-guide/architecture/architecture.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1367": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "09b37dd1982e6128753265b6158094b7bd9cd919"
                ],
                [
                    "no-tag",
                    "c99a99ece984e4d582b44bd08b15c8ae5c849c4a"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1367",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "23daf200a657dec48530be35b470a055da253c52",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537431653,
            "hunks": 11,
            "message": "[SYNCOPE-1374] Ensuring Spring can correctly inject the actual Domain",
            "diff": [
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskCallable.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskCallable.java",
                "index d1e9c10ca1..9c4f1074d7 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskCallable.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskCallable.java",
                "@@ -26,4 +26,2 @@ public interface PropagationTaskCallable extends Callable<TaskExec> {",
                "-    void setExecutor(PropagationTaskExecutor executor);",
                "-",
                "     void setTaskTO(PropagationTaskTO taskTO);",
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java",
                "index af3bfc3487..e331aa762a 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java",
                "@@ -51,2 +51,11 @@ public interface PropagationTaskExecutor {",
                "+    /**",
                "+     * Execute the given PropagationTask and returns the generated {@link TaskExec}.",
                "+     *",
                "+     * @param task to be executed",
                "+     * @param reporter to report propagation execution status",
                "+     * @return the generated TaskExec",
                "+     */",
                "+    TaskExec execute(PropagationTaskTO task, PropagationReporter reporter);",
                "+",
                "     /**",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "index 6a9e4c380f..805b772ad3 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "@@ -166,7 +166,2 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "-    @Override",
                "-    public TaskExec execute(final PropagationTaskTO task) {",
                "-        return execute(task, null);",
                "-    }",
                "-",
                "     protected List<PropagationActions> getPropagationActions(final ExternalResource resource) {",
                "@@ -352,3 +347,9 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "-    protected TaskExec execute(final PropagationTaskTO taskTO, final PropagationReporter reporter) {",
                "+    @Override",
                "+    public TaskExec execute(final PropagationTaskTO task) {",
                "+        return execute(task, null);",
                "+    }",
                "+",
                "+    @Override",
                "+    public TaskExec execute(final PropagationTaskTO taskTO, final PropagationReporter reporter) {",
                "         PropagationTask task;",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java",
                "index e714a5f86b..9967549142 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java",
                "@@ -30,2 +30,3 @@ import org.slf4j.Logger;",
                " import org.slf4j.LoggerFactory;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                " import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;",
                "@@ -42,2 +43,5 @@ public class DefaultPropagationTaskCallable implements PropagationTaskCallable {",
                "+    @Autowired",
                "+    protected PropagationTaskExecutor taskExecutor;",
                "+",
                "     protected final String domain;",
                "@@ -48,4 +52,2 @@ public class DefaultPropagationTaskCallable implements PropagationTaskCallable {",
                "-    protected AbstractPropagationTaskExecutor executor;",
                "-",
                "     protected PropagationTaskTO taskTO;",
                "@@ -61,9 +63,2 @@ public class DefaultPropagationTaskCallable implements PropagationTaskCallable {",
                "-    @Override",
                "-    public void setExecutor(final PropagationTaskExecutor executor) {",
                "-        if (executor instanceof AbstractPropagationTaskExecutor) {",
                "-            this.executor = (AbstractPropagationTaskExecutor) executor;",
                "-        }",
                "-    }",
                "-",
                "     @Override",
                "@@ -88,3 +83,3 @@ public class DefaultPropagationTaskCallable implements PropagationTaskCallable {",
                "-        TaskExec execution = executor.execute(taskTO, reporter);",
                "+        TaskExec execution = taskExecutor.execute(taskTO, reporter);",
                "@@ -94,3 +89,2 @@ public class DefaultPropagationTaskCallable implements PropagationTaskCallable {",
                "     }",
                "-",
                " }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java",
                "index adaa8f798e..77581a91c6 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java",
                "@@ -73,3 +73,2 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec",
                "                 createBean(DefaultPropagationTaskCallable.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);",
                "-        callable.setExecutor(this);",
                "         callable.setTaskTO(taskTO);"
            ],
            "changed_files": [
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskCallable.java",
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1374": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "50e4b14c316ca416edfa3e26954bc539a966c03b"
                ],
                [
                    "no-tag",
                    "16938c73b373dcb9d803c566349a812f437de8b4"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: inject",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: inject",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1374",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "63371f7b9fe483dc60c3aaf29c9dde9eb15ecf74",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536132788,
            "hunks": 8,
            "message": "[SYNCOPE-1363] Avoid re-reading deleted users, groups or any objects",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/batch/BatchContent.java b/client/console/src/main/java/org/apache/syncope/client/console/batch/BatchContent.java",
                "index 37daa333a3..b0138e9f81 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/batch/BatchContent.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/batch/BatchContent.java",
                "@@ -24,2 +24,3 @@ import java.util.Collection;",
                " import java.util.HashMap;",
                "+import java.util.HashSet;",
                " import java.util.Iterator;",
                "@@ -27,2 +28,3 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Set;",
                " import org.apache.cxf.helpers.CastUtils;",
                "@@ -34,2 +36,4 @@ import org.apache.syncope.client.console.panels.MultilevelPanel;",
                " import org.apache.syncope.client.console.rest.AbstractAnyRestClient;",
                "+import org.apache.syncope.client.console.rest.AnyObjectRestClient;",
                "+import org.apache.syncope.client.console.rest.GroupRestClient;",
                " import org.apache.syncope.client.console.rest.RestClient;",
                "@@ -247,2 +251,4 @@ public class BatchContent<T extends Serializable, S> extends MultilevelPanel.Sec",
                "+                            Set<String> deletedAnys = new HashSet<>();",
                "+",
                "                             switch (action) {",
                "@@ -297,2 +303,3 @@ public class BatchContent<T extends Serializable, S> extends MultilevelPanel.Sec",
                "                                             batchAnyService.delete(any.getKey());",
                "+                                            deletedAnys.add(any.getKey());",
                "                                         } else if (singleItem instanceof TaskTO) {",
                "@@ -346,6 +353,13 @@ public class BatchContent<T extends Serializable, S> extends MultilevelPanel.Sec",
                "-                            if (singleItem instanceof UserTO) {",
                "-                                UserRestClient userRestClient = UserRestClient.class.cast(batchExecutor);",
                "+                            if (singleItem instanceof AnyTO) {",
                "+                                AbstractAnyRestClient<? extends AnyTO> anyRestClient = singleItem instanceof UserTO",
                "+                                        ? UserRestClient.class.cast(batchExecutor)",
                "+                                        : singleItem instanceof GroupTO",
                "+                                                ? GroupRestClient.class.cast(batchExecutor)",
                "+                                                : AnyObjectRestClient.class.cast(batchExecutor);",
                "                                 for (int i = 0; i < items.size(); i++) {",
                "-                                    items.set(i, (T) userRestClient.read(((UserTO) items.get(i)).getKey()));",
                "+                                    String key = ((AnyTO) items.get(i)).getKey();",
                "+                                    if (!deletedAnys.contains(key)) {",
                "+                                        items.set(i, (T) anyRestClient.read(key));",
                "+                                    }",
                "                                 }",
                "@@ -371,3 +385,3 @@ public class BatchContent<T extends Serializable, S> extends MultilevelPanel.Sec",
                "                         LOG.error(\"Batch failure\", e);",
                "-                        SyncopeConsoleSession.get().error(\"Operation \" + action.getActionId() + \" not supported\");",
                "+                        SyncopeConsoleSession.get().error(\"Operation \" + action.getActionId() + \" failed\");",
                "                     }"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/batch/BatchContent.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1363": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "212705fd41435bb99f892c2af5f4a8609e27d1f3"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1363",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "99074ba9300e595c7e4893787fe0b735913d7ca7",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536154113,
            "hunks": 46,
            "message": "[SYNCOPE-1366] Picking the actual user at the right time",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/LogicInvocationHandler.java b/core/logic/src/main/java/org/apache/syncope/core/logic/LogicInvocationHandler.java",
                "index 38c5e9218c..f7c5fce7b0 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/LogicInvocationHandler.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/LogicInvocationHandler.java",
                "@@ -30,2 +30,3 @@ import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;",
                " import org.apache.syncope.core.provisioning.java.job.AfterHandlingJob;",
                "+import org.apache.syncope.core.spring.security.AuthContextUtils;",
                " import org.aspectj.lang.ProceedingJoinPoint;",
                "@@ -69,3 +70,3 @@ public class LogicInvocationHandler {",
                "         boolean auditRequested = auditManager.auditRequested(",
                "-                AuditElements.EventCategoryType.LOGIC, category, null, event);",
                "+                AuthContextUtils.getUsername(), AuditElements.EventCategoryType.LOGIC, category, null, event);",
                "@@ -102,2 +103,3 @@ public class LogicInvocationHandler {",
                "                 jobMap.put(AfterHandlingEvent.JOBMAP_KEY, new AfterHandlingEvent(",
                "+                        AuthContextUtils.getUsername(),",
                "                         AuditElements.EventCategoryType.LOGIC,",
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AuditManager.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AuditManager.java",
                "index f397351f58..a59d77dd78 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AuditManager.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AuditManager.java",
                "@@ -28,2 +28,3 @@ public interface AuditManager {",
                "      *",
                "+     * @param who user triggering the event",
                "      * @param type event category type",
                "@@ -35,2 +36,3 @@ public interface AuditManager {",
                "     boolean auditRequested(",
                "+            String who,",
                "             AuditElements.EventCategoryType type,",
                "@@ -42,6 +44,6 @@ public interface AuditManager {",
                "      * Create audit entries according to the provided event.",
                "-     * ",
                "+     *",
                "      * @param event Spring event raised during Logic processing",
                "      */",
                "-    void audit(final AfterHandlingEvent event);",
                "+    void audit(AfterHandlingEvent event);",
                "@@ -50,2 +52,3 @@ public interface AuditManager {",
                "      *",
                "+     * @param who user triggering the event",
                "      * @param type event category type",
                "@@ -60,2 +63,3 @@ public interface AuditManager {",
                "     void audit(",
                "+            String who,",
                "             AuditElements.EventCategoryType type,",
                "@@ -68,3 +72,2 @@ public interface AuditManager {",
                "             Object... input);",
                "-",
                " }",
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/event/AfterHandlingEvent.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/event/AfterHandlingEvent.java",
                "index 2e2e44e98c..4e14ee20d5 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/event/AfterHandlingEvent.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/event/AfterHandlingEvent.java",
                "@@ -29,2 +29,4 @@ public class AfterHandlingEvent implements Serializable {",
                "+    private final String who;",
                "+",
                "     private final AuditElements.EventCategoryType type;",
                "@@ -46,2 +48,3 @@ public class AfterHandlingEvent implements Serializable {",
                "     public AfterHandlingEvent(",
                "+            final String who,",
                "             final AuditElements.EventCategoryType type,",
                "@@ -55,2 +58,3 @@ public class AfterHandlingEvent implements Serializable {",
                "+        this.who = who;",
                "         this.type = type;",
                "@@ -65,2 +69,6 @@ public class AfterHandlingEvent implements Serializable {",
                "+    public String getWho() {",
                "+        return who;",
                "+    }",
                "+",
                "     public AuditElements.EventCategoryType getType() {",
                "@@ -96,3 +104,2 @@ public class AfterHandlingEvent implements Serializable {",
                "     }",
                "-",
                " }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditManagerImpl.java",
                "index 6b32cbbf9d..3a2877f1f6 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditManagerImpl.java",
                "@@ -25,3 +25,2 @@ import org.apache.syncope.common.lib.types.AuditLoggerName;",
                " import org.apache.syncope.common.lib.types.LoggerLevel;",
                "-import org.apache.syncope.core.spring.security.AuthContextUtils;",
                " import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "@@ -29,2 +28,3 @@ import org.apache.syncope.core.persistence.api.dao.LoggerDAO;",
                " import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;",
                "+import org.apache.syncope.core.spring.security.AuthContextUtils;",
                " import org.slf4j.Logger;",
                "@@ -44,2 +44,3 @@ public class AuditManagerImpl implements AuditManager {",
                "     public boolean auditRequested(",
                "+            final String who,",
                "             final AuditElements.EventCategoryType type,",
                "@@ -50,3 +51,3 @@ public class AuditManagerImpl implements AuditManager {",
                "         AuditEntry auditEntry = new AuditEntry(",
                "-                AuthContextUtils.getUsername(),",
                "+                who,",
                "                 new AuditLoggerName(type, category, subcategory, event, Result.SUCCESS),",
                "@@ -64,3 +65,3 @@ public class AuditManagerImpl implements AuditManager {",
                "         auditEntry = new AuditEntry(",
                "-                AuthContextUtils.getUsername(),",
                "+                who,",
                "                 new AuditLoggerName(type, category, subcategory, event, Result.FAILURE),",
                "@@ -78,2 +79,3 @@ public class AuditManagerImpl implements AuditManager {",
                "         audit(",
                "+                event.getWho(),",
                "                 event.getType(),",
                "@@ -90,2 +92,3 @@ public class AuditManagerImpl implements AuditManager {",
                "     public void audit(",
                "+            final String who,",
                "             final AuditElements.EventCategoryType type,",
                "@@ -105,3 +108,3 @@ public class AuditManagerImpl implements AuditManager {",
                "         AuditEntry auditEntry = new AuditEntry(",
                "-                AuthContextUtils.getUsername(),",
                "+                who,",
                "                 new AuditLoggerName(type, category, subcategory, event, condition),",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java",
                "index 3f7e280147..91b9b2a79f 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java",
                "@@ -32,2 +32,3 @@ import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;",
                " import org.apache.syncope.core.provisioning.api.notification.NotificationManager;",
                "+import org.apache.syncope.core.spring.security.AuthContextUtils;",
                " import org.quartz.JobExecutionContext;",
                "@@ -148,2 +149,3 @@ public abstract class AbstractSchedTaskJobDelegate implements SchedTaskJobDelega",
                "         auditManager.audit(",
                "+                AuthContextUtils.getUsername(),",
                "                 AuditElements.EventCategoryType.TASK,",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AfterHandlingJob.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AfterHandlingJob.java",
                "index 08ace7d72a..7d4240cd4d 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AfterHandlingJob.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AfterHandlingJob.java",
                "@@ -104,3 +104,2 @@ public class AfterHandlingJob extends AbstractInterruptableJob {",
                "     }",
                "-",
                " }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/DefaultNotificationJobDelegate.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/DefaultNotificationJobDelegate.java",
                "index 8279bd2d57..f9a09c8e56 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/DefaultNotificationJobDelegate.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/DefaultNotificationJobDelegate.java",
                "@@ -43,2 +43,3 @@ import org.apache.syncope.core.provisioning.api.notification.NotificationJobDele",
                " import org.apache.syncope.core.provisioning.api.notification.NotificationManager;",
                "+import org.apache.syncope.core.spring.security.AuthContextUtils;",
                " import org.apache.syncope.core.spring.security.Encryptor;",
                "@@ -289,2 +290,3 @@ public class DefaultNotificationJobDelegate implements InitializingBean, Notific",
                "             auditManager.audit(",
                "+                    AuthContextUtils.getUsername(),",
                "                     AuditElements.EventCategoryType.TASK,",
                "@@ -302,2 +304,3 @@ public class DefaultNotificationJobDelegate implements InitializingBean, Notific",
                "             auditManager.audit(",
                "+                    AuthContextUtils.getUsername(),",
                "                     AuditElements.EventCategoryType.TASK,",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "index 178b19d3a6..8d6f5348cf 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "@@ -73,2 +73,3 @@ import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                " import org.apache.syncope.core.provisioning.java.utils.MappingUtils;",
                "+import org.apache.syncope.core.spring.security.AuthContextUtils;",
                " import org.identityconnectors.framework.common.exceptions.ConnectorException;",
                "@@ -538,4 +539,8 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "                 AuditElements.EventCategoryType.PROPAGATION, anyTypeKind, resource, operation);",
                "-        boolean auditRequested = auditManager.auditRequested(AuditElements.EventCategoryType.PROPAGATION, anyTypeKind,",
                "-                resource, operation);",
                "+        boolean auditRequested = auditManager.auditRequested(",
                "+                AuthContextUtils.getUsername(),",
                "+                AuditElements.EventCategoryType.PROPAGATION,",
                "+                anyTypeKind,",
                "+                resource,",
                "+                operation);",
                "@@ -550,3 +555,8 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "-            auditManager.audit(AuditElements.EventCategoryType.PROPAGATION, anyTypeKind, resource, operation,",
                "+            auditManager.audit(",
                "+                    AuthContextUtils.getUsername(),",
                "+                    AuditElements.EventCategoryType.PROPAGATION,",
                "+                    anyTypeKind,",
                "+                    resource,",
                "+                    operation,",
                "                     result,",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "index 6f31125104..05219901db 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "@@ -55,2 +55,3 @@ import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullResultHandle",
                " import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;",
                "+import org.apache.syncope.core.spring.security.AuthContextUtils;",
                " import org.identityconnectors.framework.common.objects.Attribute;",
                "@@ -855,3 +856,5 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "-        auditManager.audit(AuditElements.EventCategoryType.PULL,",
                "+        auditManager.audit(",
                "+                AuthContextUtils.getUsername(),",
                "+                AuditElements.EventCategoryType.PULL,",
                "                 getAnyUtils().anyTypeKind().name().toLowerCase(),",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java",
                "index 798e2b7c52..076f7bd6a5 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java",
                "@@ -61,2 +61,3 @@ import org.apache.syncope.core.provisioning.java.utils.MappingUtils;",
                " import org.identityconnectors.framework.common.objects.AttributeBuilder;",
                "+import org.apache.syncope.core.spring.security.AuthContextUtils;",
                " import org.identityconnectors.framework.common.objects.ConnectorObject;",
                "@@ -308,2 +309,3 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan",
                "             boolean auditRequested = auditManager.auditRequested(",
                "+                    AuthContextUtils.getUsername(),",
                "                     AuditElements.EventCategoryType.PUSH,",
                "@@ -477,2 +479,3 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan",
                "                     jobMap.put(AfterHandlingEvent.JOBMAP_KEY, new AfterHandlingEvent(",
                "+                            AuthContextUtils.getUsername(),",
                "                             AuditElements.EventCategoryType.PUSH,",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "index b1dcf3dbf1..95cb3d5154 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "@@ -51,2 +51,3 @@ import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullExecutor;",
                " import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;",
                "+import org.apache.syncope.core.spring.security.AuthContextUtils;",
                " import org.apache.syncope.core.spring.security.DelegatedAdministrationException;",
                "@@ -785,3 +786,5 @@ public class DefaultRealmPullResultHandler",
                "-        auditManager.audit(AuditElements.EventCategoryType.PULL,",
                "+        auditManager.audit(",
                "+                AuthContextUtils.getUsername(),",
                "+                AuditElements.EventCategoryType.PULL,",
                "                 REALM_TYPE.toLowerCase(),",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPushResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPushResultHandler.java",
                "index 54b56c9fce..0225f39ca1 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPushResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPushResultHandler.java",
                "@@ -49,2 +49,3 @@ import org.apache.syncope.core.provisioning.java.job.AfterHandlingJob;",
                " import org.apache.syncope.core.provisioning.java.utils.MappingUtils;",
                "+import org.apache.syncope.core.spring.security.AuthContextUtils;",
                " import org.identityconnectors.framework.common.objects.AttributeBuilder;",
                "@@ -229,2 +230,3 @@ public class DefaultRealmPushResultHandler",
                "             boolean auditRequested = auditManager.auditRequested(",
                "+                    AuthContextUtils.getUsername(),",
                "                     AuditElements.EventCategoryType.PUSH,",
                "@@ -405,2 +407,3 @@ public class DefaultRealmPushResultHandler",
                "                     jobMap.put(AfterHandlingEvent.JOBMAP_KEY, new AfterHandlingEvent(",
                "+                            AuthContextUtils.getUsername(),",
                "                             AuditElements.EventCategoryType.PUSH,",
                "diff --git a/core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java b/core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java",
                "index be3be3fa9b..a52522c9a7 100644",
                "--- a/core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java",
                "+++ b/core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java",
                "@@ -442,2 +442,3 @@ public class AuthDataAccessor {",
                "     public void audit(",
                "+            final String who,",
                "             final AuditElements.EventCategoryType type,",
                "@@ -451,3 +452,3 @@ public class AuthDataAccessor {",
                "-        auditManager.audit(type, category, subcategory, event, result, before, output, input);",
                "+        auditManager.audit(who, type, category, subcategory, event, result, before, output, input);",
                "     }",
                "diff --git a/core/spring/src/main/java/org/apache/syncope/core/spring/security/UsernamePasswordAuthenticationProvider.java b/core/spring/src/main/java/org/apache/syncope/core/spring/security/UsernamePasswordAuthenticationProvider.java",
                "index da11553fc1..c9476b5e54 100644",
                "--- a/core/spring/src/main/java/org/apache/syncope/core/spring/security/UsernamePasswordAuthenticationProvider.java",
                "+++ b/core/spring/src/main/java/org/apache/syncope/core/spring/security/UsernamePasswordAuthenticationProvider.java",
                "@@ -169,3 +169,5 @@ public class UsernamePasswordAuthenticationProvider implements AuthenticationPro",
                "-                    dataAccessor.audit(AuditElements.EventCategoryType.LOGIC,",
                "+                    dataAccessor.audit(",
                "+                            username[0],",
                "+                            AuditElements.EventCategoryType.LOGIC,",
                "                             AuditElements.AUTHENTICATION_CATEGORY,",
                "@@ -189,3 +191,5 @@ public class UsernamePasswordAuthenticationProvider implements AuthenticationPro",
                "                 public Void exec() {",
                "-                    dataAccessor.audit(AuditElements.EventCategoryType.LOGIC,",
                "+                    dataAccessor.audit(",
                "+                            username[0],",
                "+                            AuditElements.EventCategoryType.LOGIC,",
                "                             AuditElements.AUTHENTICATION_CATEGORY,"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/LogicInvocationHandler.java",
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AuditManager.java",
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/event/AfterHandlingEvent.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditManagerImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AfterHandlingJob.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/DefaultNotificationJobDelegate.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPushResultHandler.java",
                "core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java",
                "core/spring/src/main/java/org/apache/syncope/core/spring/security/UsernamePasswordAuthenticationProvider.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1366": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4918e957a15cbde6d62b36ab50e5d8315d00ef55"
                ],
                [
                    "no-tag",
                    "d5ac346976dfbfacb2d0e5aa4d6c604c11e90995"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: name, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1366",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ac909f2ec079969b3860e31fc62470b493ea90eb",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1535443907,
            "hunks": 344,
            "message": "[SYNCOPE-1019] Added dynamic templating feature to Enduser app",
            "diff": [
                "diff --git a/.gitignore b/.gitignore",
                "index 3388d02340..d479649a1e 100644",
                "--- a/.gitignore",
                "+++ b/.gitignore",
                "@@ -16 +16,2 @@ ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/screenshots/",
                " *nb-configuration.xml",
                "+node_modules",
                "diff --git a/archetype/pom.xml b/archetype/pom.xml",
                "index 70f296ae4c..25d1ce86a0 100644",
                "--- a/archetype/pom.xml",
                "+++ b/archetype/pom.xml",
                "@@ -278,3 +278,4 @@ under the License.",
                "           <include>enduser.properties</include>",
                "-          <include>customForm.json</include>",
                "+          <include>customFormAttributes.json</include>",
                "+          <include>customTemplate.json</include>",
                "         </includes>",
                "@@ -312,3 +313,3 @@ under the License.",
                "           <include>saml2sp-agent.properties</include>",
                "-          <include>customForm.json</include>",
                "+          <include>customFormAttributes.json</include>",
                "         </includes>",
                "@@ -321,3 +322,3 @@ under the License.",
                "           <include>oidcclient-agent.properties</include>",
                "-          <include>customForm.json</include>",
                "+          <include>customFormAttributes.json</include>",
                "         </includes>",
                "diff --git a/archetype/src/main/resources/archetype-resources/enduser/pom.xml b/archetype/src/main/resources/archetype-resources/enduser/pom.xml",
                "index 5f98d31f92..0c03dec646 100644",
                "--- a/archetype/src/main/resources/archetype-resources/enduser/pom.xml",
                "+++ b/archetype/src/main/resources/archetype-resources/enduser/pom.xml",
                "@@ -249,3 +249,7 @@ under the License.",
                "-                    <copy file=\"${project.build.directory}/test-classes/customForm.json\" ",
                "+                    <copy file=\"${project.build.directory}/test-classes/customFormAttributes.json\" ",
                "+                          todir=\"${project.build.directory}/${project.build.finalName}/WEB-INF/classes\" ",
                "+                          overwrite=\"true\"/>",
                "+                    ",
                "+                    <copy file=\"${project.build.directory}/test-classes/customTemplate.json\" ",
                "                           todir=\"${project.build.directory}/${project.build.finalName}/WEB-INF/classes\" ",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/pages/BasePage.html b/client/console/src/main/resources/org/apache/syncope/client/console/pages/BasePage.html",
                "index 169e2d6bdd..d477213ac0 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/pages/BasePage.html",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/pages/BasePage.html",
                "@@ -28,3 +28,3 @@ under the License.",
                "-    <link href=\"webjars/font-awesome/${font-awesome.version}/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\"/>",
                "+    <link href=\"webjars/font-awesome/${font-awesome.version}/css/${font-awesome.filename}\" rel=\"stylesheet\" type=\"text/css\"/>",
                "     <link href=\"webjars/ionicons/${ionicons.version}/css/ionicons.min.css\" rel=\"stylesheet\" type=\"text/css\"/>",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/pages/Login.html b/client/console/src/main/resources/org/apache/syncope/client/console/pages/Login.html",
                "index bb5cd3aa09..0340b83053 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/pages/Login.html",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/pages/Login.html",
                "@@ -29,3 +29,3 @@ under the License.",
                "-    <link href=\"webjars/font-awesome/${font-awesome.version}/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\" />",
                "+    <link href=\"webjars/font-awesome/${font-awesome.version}/css/${font-awesome.filename}\" rel=\"stylesheet\" type=\"text/css\" />",
                "     <link href=\"webjars/ionicons/${ionicons.version}/css/ionicons.min.css\" rel=\"stylesheet\" type=\"text/css\" />",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/pages/MustChangePassword.html b/client/console/src/main/resources/org/apache/syncope/client/console/pages/MustChangePassword.html",
                "index 4aef1535e4..037ea71bc7 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/pages/MustChangePassword.html",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/pages/MustChangePassword.html",
                "@@ -29,3 +29,3 @@ under the License.",
                "-    <link href=\"webjars/font-awesome/${font-awesome.version}/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\" />",
                "+    <link href=\"webjars/font-awesome/${font-awesome.version}/css/${font-awesome.filename}\" rel=\"stylesheet\" type=\"text/css\" />",
                "     <link href=\"webjars/ionicons/${ionicons.version}/css/ionicons.min.css\" rel=\"stylesheet\" type=\"text/css\" />",
                "diff --git a/client/enduser/pom.xml b/client/enduser/pom.xml",
                "index d0d8d42f7a..b8a824a75e 100644",
                "--- a/client/enduser/pom.xml",
                "+++ b/client/enduser/pom.xml",
                "@@ -139,4 +139,4 @@ under the License.",
                "     <dependency>",
                "-      <groupId>org.webjars</groupId>",
                "-      <artifactId>angular-ui-bootstrap</artifactId>",
                "+      <groupId>org.webjars.npm</groupId>",
                "+      <artifactId>ui-bootstrap4</artifactId>",
                "     </dependency>",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserApplication.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserApplication.java",
                "index 98e723fa6b..be67966cb4 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserApplication.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserApplication.java",
                "@@ -41,2 +41,3 @@ import org.apache.syncope.client.enduser.init.EnduserInitializer;",
                " import org.apache.syncope.client.enduser.model.CustomAttributesInfo;",
                "+import org.apache.syncope.client.enduser.model.CustomTemplateInfo;",
                " import org.apache.syncope.client.enduser.resources.CaptchaResource;",
                "@@ -66,3 +67,5 @@ public class SyncopeEnduserApplication extends WebApplication implements Seriali",
                "-    private static final String CUSTOM_FORM_FILE = \"customForm.json\";",
                "+    private static final String CUSTOM_FORM_ATTRIBUTES_FILE = \"customFormAttributes.json\";",
                "+",
                "+    private static final String CUSTOM_TEMPLATE_FILE = \"customTemplate.json\";",
                "@@ -88,3 +91,5 @@ public class SyncopeEnduserApplication extends WebApplication implements Seriali",
                "-    private Map<String, CustomAttributesInfo> customForm;",
                "+    private Map<String, CustomAttributesInfo> customFormAttributes;",
                "+",
                "+    private CustomTemplateInfo customTemplate;",
                "@@ -132,13 +137,16 @@ public class SyncopeEnduserApplication extends WebApplication implements Seriali",
                "-        // read customForm.json",
                "-        try (InputStream is = getClass().getResourceAsStream(\"/\" + CUSTOM_FORM_FILE)) {",
                "-            customForm = MAPPER.readValue(is,",
                "+        // read customFormAttributes.json",
                "+        File enduserDir;",
                "+        try (InputStream is = getClass().getResourceAsStream(\"/\" + CUSTOM_FORM_ATTRIBUTES_FILE)) {",
                "+            customFormAttributes = MAPPER.readValue(is,",
                "                     new TypeReference<HashMap<String, CustomAttributesInfo>>() {",
                "             });",
                "-            File enduserDir = new File(props.getProperty(\"enduser.directory\"));",
                "+            enduserDir = new File(props.getProperty(\"enduser.directory\"));",
                "             boolean existsEnduserDir = enduserDir.exists() && enduserDir.canRead() && enduserDir.isDirectory();",
                "             if (existsEnduserDir) {",
                "-                File customFormFile = FileUtils.getFile(enduserDir, CUSTOM_FORM_FILE);",
                "-                if (customFormFile.exists() && customFormFile.canRead() && customFormFile.isFile()) {",
                "-                    customForm = MAPPER.readValue(FileUtils.openInputStream(customFormFile),",
                "+                File customFormAttributesFile = FileUtils.getFile(enduserDir, CUSTOM_FORM_ATTRIBUTES_FILE);",
                "+                if (customFormAttributesFile.exists()",
                "+                        && customFormAttributesFile.canRead()",
                "+                        && customFormAttributesFile.isFile()) {",
                "+                    customFormAttributes = MAPPER.readValue(FileUtils.openInputStream(customFormAttributesFile),",
                "                             new TypeReference<HashMap<String, CustomAttributesInfo>>() {",
                "@@ -149,5 +157,5 @@ public class SyncopeEnduserApplication extends WebApplication implements Seriali",
                "                     ? new FileAlterationObserver(enduserDir,",
                "-                            pathname -> StringUtils.contains(pathname.getPath(), CUSTOM_FORM_FILE))",
                "-                    : new FileAlterationObserver(getClass().getResource(\"/\" + CUSTOM_FORM_FILE).getFile(),",
                "-                            pathname -> StringUtils.contains(pathname.getPath(), CUSTOM_FORM_FILE));",
                "+                            pathname -> StringUtils.contains(pathname.getPath(), CUSTOM_FORM_ATTRIBUTES_FILE))",
                "+                    : new FileAlterationObserver(getClass().getResource(\"/\" + CUSTOM_FORM_ATTRIBUTES_FILE).getFile(),",
                "+                            pathname -> StringUtils.contains(pathname.getPath(), CUSTOM_FORM_ATTRIBUTES_FILE));",
                "@@ -160,4 +168,5 @@ public class SyncopeEnduserApplication extends WebApplication implements Seriali",
                "                     try {",
                "-                        LOG.trace(\"{} has changed. Reloading form customization configuration.\", CUSTOM_FORM_FILE);",
                "-                        customForm = MAPPER.readValue(FileUtils.openInputStream(file),",
                "+                        LOG.trace(\"{} has changed. Reloading form attributes customization configuration.\",",
                "+                                CUSTOM_FORM_ATTRIBUTES_FILE);",
                "+                        customFormAttributes = MAPPER.readValue(FileUtils.openInputStream(file),",
                "                                 new TypeReference<HashMap<String, CustomAttributesInfo>>() {",
                "@@ -172,4 +181,5 @@ public class SyncopeEnduserApplication extends WebApplication implements Seriali",
                "                     try {",
                "-                        LOG.trace(\"{} has been created. Loading form customization configuration.\", CUSTOM_FORM_FILE);",
                "-                        customForm = MAPPER.readValue(FileUtils.openInputStream(file),",
                "+                        LOG.trace(\"{} has been created. Loading form attributes customization configuration.\",",
                "+                                CUSTOM_FORM_ATTRIBUTES_FILE);",
                "+                        customFormAttributes = MAPPER.readValue(FileUtils.openInputStream(file),",
                "                                 new TypeReference<HashMap<String, CustomAttributesInfo>>() {",
                "@@ -183,4 +193,68 @@ public class SyncopeEnduserApplication extends WebApplication implements Seriali",
                "                 public void onFileDelete(final File file) {",
                "-                    LOG.trace(\"{} has been deleted. Resetting form customization configuration.\", CUSTOM_FORM_FILE);",
                "-                    customForm = null;",
                "+                    LOG.trace(\"{} has been deleted. Resetting form attributes customization configuration.\",",
                "+                            CUSTOM_FORM_ATTRIBUTES_FILE);",
                "+                    customFormAttributes = null;",
                "+                }",
                "+            };",
                "+",
                "+            observer.addListener(listener);",
                "+            monitor.addObserver(observer);",
                "+            monitor.start();",
                "+        } catch (Exception e) {",
                "+            throw new WicketRuntimeException(\"Could not read \" + CUSTOM_FORM_ATTRIBUTES_FILE, e);",
                "+        }",
                "+",
                "+        // read customTemplate.json",
                "+        try (InputStream is = getClass().getResourceAsStream(\"/\" + CUSTOM_TEMPLATE_FILE)) {",
                "+            customTemplate = MAPPER.readValue(is, CustomTemplateInfo.class);",
                "+            enduserDir = new File(props.getProperty(\"enduser.directory\"));",
                "+            boolean existsEnduserDir = enduserDir.exists() && enduserDir.canRead() && enduserDir.isDirectory();",
                "+            if (existsEnduserDir) {",
                "+                File customTemplateFile = FileUtils.getFile(enduserDir, CUSTOM_TEMPLATE_FILE);",
                "+                if (customTemplateFile.exists()",
                "+                        && customTemplateFile.canRead()",
                "+                        && customTemplateFile.isFile()) {",
                "+                    customTemplate = MAPPER.readValue(FileUtils.openInputStream(customTemplateFile),",
                "+                            CustomTemplateInfo.class);",
                "+                }",
                "+            }",
                "+            FileAlterationObserver observer = existsEnduserDir",
                "+                    ? new FileAlterationObserver(enduserDir,",
                "+                            pathname -> StringUtils.contains(pathname.getPath(), CUSTOM_TEMPLATE_FILE))",
                "+                    : new FileAlterationObserver(getClass().getResource(\"/\" + CUSTOM_TEMPLATE_FILE).getFile(),",
                "+                            pathname -> StringUtils.contains(pathname.getPath(), CUSTOM_TEMPLATE_FILE));",
                "+",
                "+            FileAlterationMonitor monitor = new FileAlterationMonitor(5000);",
                "+",
                "+            FileAlterationListener listener = new FileAlterationListenerAdaptor() {",
                "+",
                "+                @Override",
                "+                public void onFileChange(final File file) {",
                "+                    try {",
                "+                        LOG.trace(\"{} has changed. Reloading app customization configuration.\",",
                "+                                CUSTOM_TEMPLATE_FILE);",
                "+                        customTemplate = MAPPER.readValue(FileUtils.openInputStream(file),",
                "+                                CustomTemplateInfo.class);",
                "+                    } catch (IOException e) {",
                "+                        e.printStackTrace(System.err);",
                "+                    }",
                "+                }",
                "+",
                "+                @Override",
                "+                public void onFileCreate(final File file) {",
                "+                    try {",
                "+                        LOG.trace(\"{} has been created. Loading app customization configuration.\",",
                "+                                CUSTOM_TEMPLATE_FILE);",
                "+                        customTemplate = MAPPER.readValue(FileUtils.openInputStream(file),",
                "+                                CustomTemplateInfo.class);",
                "+                    } catch (IOException e) {",
                "+                        e.printStackTrace(System.err);",
                "+                    }",
                "+                }",
                "+",
                "+                @Override",
                "+                public void onFileDelete(final File file) {",
                "+                    LOG.trace(\"{} has been deleted. Resetting app customization configuration.\",",
                "+                            CUSTOM_TEMPLATE_FILE);",
                "+                    customTemplate = null;",
                "                 }",
                "@@ -192,3 +266,3 @@ public class SyncopeEnduserApplication extends WebApplication implements Seriali",
                "         } catch (Exception e) {",
                "-            throw new WicketRuntimeException(\"Could not read \" + CUSTOM_FORM_FILE, e);",
                "+            throw new WicketRuntimeException(\"Could not read \" + CUSTOM_TEMPLATE_FILE, e);",
                "         }",
                "@@ -277,9 +351,17 @@ public class SyncopeEnduserApplication extends WebApplication implements Seriali",
                "-    public Map<String, CustomAttributesInfo> getCustomForm() {",
                "-        return customForm;",
                "+    public Map<String, CustomAttributesInfo> getCustomFormAttributes() {",
                "+        return customFormAttributes;",
                "+    }",
                "+",
                "+    public void setCustomFormAttributes(final Map<String, CustomAttributesInfo> customFormAttributes) {",
                "+        this.customFormAttributes.clear();",
                "+        this.customFormAttributes.putAll(customFormAttributes);",
                "+    }",
                "+",
                "+    public void setCustomTemplate(final CustomTemplateInfo customTemplate) {",
                "+        this.customTemplate = customTemplate;",
                "     }",
                "-    public void setCustomForm(final Map<String, CustomAttributesInfo> customForm) {",
                "-        this.customForm.clear();",
                "-        this.customForm.putAll(customForm);",
                "+    public CustomTemplateInfo getCustomTemplate() {",
                "+        return customTemplate;",
                "     }",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/adapters/PlatformInfoAdapter.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/adapters/PlatformInfoAdapter.java",
                "index a9fcf3c8d2..e194d6b3af 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/adapters/PlatformInfoAdapter.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/adapters/PlatformInfoAdapter.java",
                "@@ -29,3 +29,3 @@ public final class PlatformInfoAdapter {",
                "     public static PlatformInfoRequest toPlatformInfoRequest(final PlatformInfo platformInfo,",
                "-            final Map<String, CustomAttributesInfo> customForm) {",
                "+            final Map<String, CustomAttributesInfo> customFormAttributes) {",
                "         PlatformInfoRequest request = new PlatformInfoRequest();",
                "@@ -39,3 +39,3 @@ public final class PlatformInfoAdapter {",
                "         }",
                "-        request.setCustomForm(customForm);",
                "+        request.setCustomFormAttributes(customFormAttributes);",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomAttributesInfo.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomAttributesInfo.java",
                "index 63eaa0b1f4..c49253c742 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomAttributesInfo.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomAttributesInfo.java",
                "@@ -28,4 +28,2 @@ public class CustomAttributesInfo implements Serializable {",
                "-    private Boolean show = Boolean.TRUE;",
                "-",
                "     private Map<String, CustomAttribute> attributes = new LinkedHashMap<>();",
                "@@ -35,10 +33,2 @@ public class CustomAttributesInfo implements Serializable {",
                "-    public Boolean isShow() {",
                "-        return show;",
                "-    }",
                "-",
                "-    public void setShow(final Boolean show) {",
                "-        this.show = show;",
                "-    }",
                "-",
                "     public Map<String, CustomAttribute> getAttributes() {",
                "@@ -51,7 +41,2 @@ public class CustomAttributesInfo implements Serializable {",
                "-    public CustomAttributesInfo show(final Boolean value) {",
                "-        this.show = value;",
                "-        return this;",
                "-    }",
                "-",
                "     public CustomAttributesInfo attributes(final Map<String, CustomAttribute> value) {",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplate.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplate.java",
                "new file mode 100644",
                "index 0000000000..19d4a5b4b0",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplate.java",
                "@@ -0,0 +1,77 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.enduser.model;",
                "+",
                "+import java.io.Serializable;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+public class CustomTemplate implements Serializable {",
                "+",
                "+    private static final long serialVersionUID = -3870675034923683299L;",
                "+",
                "+    private String templateUrl;",
                "+",
                "+    private List<String> css = new ArrayList<>();",
                "+",
                "+    private List<String> js = new ArrayList<>();",
                "+",
                "+    public CustomTemplate() {",
                "+    }",
                "+",
                "+    public String getTemplateUrl() {",
                "+        return templateUrl;",
                "+    }",
                "+",
                "+    public void setTemplateUrl(final String templateUrl) {",
                "+        this.templateUrl = templateUrl;",
                "+    }",
                "+",
                "+    public List<String> getCss() {",
                "+        return css;",
                "+    }",
                "+",
                "+    public void setCss(final List<String> css) {",
                "+        this.css = css;",
                "+    }",
                "+",
                "+    public List<String> getJs() {",
                "+        return js;",
                "+    }",
                "+",
                "+    public void setJs(final List<String> js) {",
                "+        this.js = js;",
                "+    }",
                "+",
                "+    public CustomTemplate templateUrl(final String value) {",
                "+        this.templateUrl = value;",
                "+        return this;",
                "+    }",
                "+",
                "+    public CustomTemplate css(final List<String> value) {",
                "+        this.css = value;",
                "+        return this;",
                "+    }",
                "+",
                "+    public CustomTemplate js(final List<String> value) {",
                "+        this.js = value;",
                "+        return this;",
                "+    }",
                "+",
                "+}",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplateInfo.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplateInfo.java",
                "new file mode 100644",
                "index 0000000000..d2fe9c12e8",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplateInfo.java",
                "@@ -0,0 +1,72 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.enduser.model;",
                "+",
                "+import java.io.Serializable;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+",
                "+public class CustomTemplateInfo implements Serializable {",
                "+",
                "+    private static final long serialVersionUID = -3422125754029851539L;",
                "+",
                "+    private Map<String, CustomTemplate> templates = new LinkedHashMap<>();",
                "+",
                "+    private CustomTemplateWizard wizard = new CustomTemplateWizard();",
                "+",
                "+    private Map<String, List<String>> generalAssets = new LinkedHashMap<>();",
                "+",
                "+    public CustomTemplateInfo() {",
                "+    }",
                "+",
                "+    public Map<String, CustomTemplate> getTemplates() {",
                "+        return templates;",
                "+    }",
                "+",
                "+    public void setTemplates(final Map<String, CustomTemplate> templates) {",
                "+        this.templates = templates;",
                "+    }",
                "+",
                "+    public CustomTemplateWizard getWizard() {",
                "+        return wizard;",
                "+    }",
                "+",
                "+    public void setWizard(final CustomTemplateWizard wizard) {",
                "+        this.wizard = wizard;",
                "+    }",
                "+",
                "+    public Map<String, List<String>> getGeneralAssets() {",
                "+        return generalAssets;",
                "+    }",
                "+",
                "+    public void setGeneralAssets(final Map<String, List<String>> generalAssets) {",
                "+        this.generalAssets = generalAssets;",
                "+    }",
                "+",
                "+    public CustomTemplateInfo templates(final Map<String, CustomTemplate> templates,",
                "+            final CustomTemplateWizard wizard, final Map<String, List<String>> generalAssets) {",
                "+",
                "+        this.templates = templates;",
                "+        this.wizard = wizard;",
                "+        this.generalAssets = generalAssets;",
                "+        return this;",
                "+    }",
                "+",
                "+}",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplateUrl.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplateUrl.java",
                "new file mode 100644",
                "index 0000000000..40bde34e62",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplateUrl.java",
                "@@ -0,0 +1,37 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.enduser.model;",
                "+",
                "+import java.io.Serializable;",
                "+",
                "+public class CustomTemplateUrl implements Serializable {",
                "+",
                "+    private static final long serialVersionUID = 3971593691907398343L;",
                "+",
                "+    private String url;",
                "+",
                "+    public String getUrl() {",
                "+        return url;",
                "+    }",
                "+",
                "+    public void setUrl(final String url) {",
                "+        this.url = url;",
                "+    }",
                "+",
                "+}",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplateWizard.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplateWizard.java",
                "new file mode 100644",
                "index 0000000000..3952f9b106",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplateWizard.java",
                "@@ -0,0 +1,49 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.enduser.model;",
                "+",
                "+import java.io.Serializable;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+",
                "+public class CustomTemplateWizard implements Serializable {",
                "+",
                "+    private static final long serialVersionUID = -4290154059045309105L;",
                "+",
                "+    private String firstStep;",
                "+",
                "+    private Map<String, CustomTemplateUrl> steps = new HashMap<>();",
                "+",
                "+    public String getFirstStep() {",
                "+        return firstStep;",
                "+    }",
                "+",
                "+    public void setFirstStep(final String firstStep) {",
                "+        this.firstStep = firstStep;",
                "+    }",
                "+",
                "+    public Map<String, CustomTemplateUrl> getSteps() {",
                "+        return steps;",
                "+    }",
                "+",
                "+    public void setSteps(final Map<String, CustomTemplateUrl> steps) {",
                "+        this.steps = steps;",
                "+    }",
                "+",
                "+}",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/PlatformInfoRequest.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/PlatformInfoRequest.java",
                "index c4daa444a3..bd80359ffe 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/PlatformInfoRequest.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/model/PlatformInfoRequest.java",
                "@@ -39,3 +39,3 @@ public class PlatformInfoRequest implements Serializable {",
                "-    private Map<String, CustomAttributesInfo> customForm;",
                "+    private Map<String, CustomAttributesInfo> customFormAttributes;",
                "@@ -92,8 +92,8 @@ public class PlatformInfoRequest implements Serializable {",
                "-    public Map<String, CustomAttributesInfo> getCustomForm() {",
                "-        return customForm;",
                "+    public Map<String, CustomAttributesInfo> getCustomFormAttributes() {",
                "+        return customFormAttributes;",
                "     }",
                "-    public void setCustomForm(final Map<String, CustomAttributesInfo> customForm) {",
                "-        this.customForm = customForm;",
                "+    public void setCustomFormAttributes(final Map<String, CustomAttributesInfo> customFormAttributes) {",
                "+        this.customFormAttributes = customFormAttributes;",
                "     }",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/DynamicTemplateResource.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/DynamicTemplateResource.java",
                "new file mode 100644",
                "index 0000000000..86b19bd798",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/DynamicTemplateResource.java",
                "@@ -0,0 +1,79 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.client.enduser.resources;",
                "+",
                "+import static org.apache.syncope.client.enduser.resources.BaseResource.MAPPER;",
                "+",
                "+import java.io.IOException;",
                "+import java.nio.charset.StandardCharsets;",
                "+import javax.ws.rs.core.MediaType;",
                "+import javax.ws.rs.core.Response;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.client.enduser.SyncopeEnduserApplication;",
                "+import org.apache.syncope.client.enduser.SyncopeEnduserConstants;",
                "+import org.apache.syncope.client.enduser.SyncopeEnduserSession;",
                "+import org.apache.syncope.client.enduser.annotations.Resource;",
                "+import org.apache.syncope.client.enduser.model.CustomTemplateInfo;",
                "+import org.apache.syncope.client.enduser.util.SaltGenerator;",
                "+import org.apache.wicket.request.resource.IResource;",
                "+import org.apache.wicket.util.cookies.CookieUtils;",
                "+",
                "+@Resource(key = \"info\", path = \"/api/dynamicTemplate\")",
                "+public class DynamicTemplateResource extends BaseResource {",
                "+",
                "+    private static final long serialVersionUID = 7181372091437530936L;",
                "+",
                "+    @Override",
                "+    protected ResourceResponse newResourceResponse(final IResource.Attributes attributes) {",
                "+        ResourceResponse response = new ResourceResponse();",
                "+        response.setContentType(MediaType.APPLICATION_JSON);",
                "+",
                "+        try {",
                "+            final CookieUtils sessionCookieUtils = SyncopeEnduserSession.get().getCookieUtils();",
                "+            // set XSRF_TOKEN cookie",
                "+            if (!SyncopeEnduserSession.get().isXsrfTokenGenerated() && (sessionCookieUtils.getCookie(",
                "+                    SyncopeEnduserConstants.XSRF_COOKIE) == null || StringUtils.isBlank(",
                "+                            sessionCookieUtils.getCookie(SyncopeEnduserConstants.XSRF_COOKIE).getValue()))) {",
                "+                LOG.debug(\"Set XSRF-TOKEN cookie\");",
                "+                SyncopeEnduserSession.get().setXsrfTokenGenerated(true);",
                "+                sessionCookieUtils.save(SyncopeEnduserConstants.XSRF_COOKIE,",
                "+                        SaltGenerator.generate(SyncopeEnduserSession.get().getId()));",
                "+            }",
                "+            response.setTextEncoding(StandardCharsets.UTF_8.name());",
                "+            response.setWriteCallback(new WriteCallback() {",
                "+",
                "+                @Override",
                "+                public void writeData(final IResource.Attributes attributes) throws IOException {",
                "+                    CustomTemplateInfo customTemplate = SyncopeEnduserApplication.get().getCustomTemplate();",
                "+                    attributes.getResponse().write(MAPPER.writeValueAsString(customTemplate));",
                "+                }",
                "+            });",
                "+            response.setStatusCode(Response.Status.OK.getStatusCode());",
                "+        } catch (Exception e) {",
                "+            LOG.error(\"Error retrieving syncope custom dynamic template\", e);",
                "+            response.setError(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), new StringBuilder()",
                "+                    .append(\"ErrorMessage{{ \")",
                "+                    .append(e.getMessage())",
                "+                    .append(\" }}\")",
                "+                    .toString());",
                "+        }",
                "+",
                "+        return response;",
                "+    }",
                "+}",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/ExternalResourceResource.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/ExternalResourceResource.java",
                "index d354f56901..2d7736c9f5 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/ExternalResourceResource.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/ExternalResourceResource.java",
                "@@ -22,2 +22,3 @@ import java.io.IOException;",
                " import java.nio.charset.StandardCharsets;",
                "+import java.util.Collections;",
                " import java.util.List;",
                "@@ -26,4 +27,6 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "+import org.apache.syncope.client.enduser.SyncopeEnduserApplication;",
                " import org.apache.syncope.client.enduser.SyncopeEnduserSession;",
                " import org.apache.syncope.client.enduser.annotations.Resource;",
                "+import org.apache.syncope.client.enduser.model.CustomTemplateInfo;",
                " import org.apache.syncope.common.rest.api.service.SyncopeService;",
                "@@ -51,6 +54,9 @@ public class ExternalResourceResource extends BaseResource {",
                "-            final List<String> resources = SyncopeEnduserSession.get().",
                "-                    getService(SyncopeService.class).platform().getResources();",
                "+            CustomTemplateInfo customTemplate =",
                "+                    SyncopeEnduserApplication.get().getCustomTemplate();",
                "+            final List<String> resources = customTemplate.getWizard().getSteps().containsKey(\"groups\")",
                "+                    ? SyncopeEnduserSession.get().",
                "+                            getService(SyncopeService.class).platform().getResources()",
                "+                    : Collections.<String>emptyList();",
                "-            response.setTextEncoding(StandardCharsets.UTF_8.name());",
                "             response.setWriteCallback(new AbstractResource.WriteCallback() {",
                "@@ -62,2 +68,4 @@ public class ExternalResourceResource extends BaseResource {",
                "             });",
                "+",
                "+            response.setTextEncoding(StandardCharsets.UTF_8.name());",
                "             response.setStatusCode(Response.Status.OK.getStatusCode());",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "index 66ae3122c2..14fb790ccc 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "@@ -24,2 +24,3 @@ import java.nio.charset.StandardCharsets;",
                " import java.util.Collections;",
                "+import java.util.HashMap;",
                " import java.util.List;",
                "@@ -30,4 +31,6 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "+import org.apache.syncope.client.enduser.SyncopeEnduserApplication;",
                " import org.apache.syncope.client.enduser.SyncopeEnduserSession;",
                " import org.apache.syncope.client.enduser.annotations.Resource;",
                "+import org.apache.syncope.client.enduser.model.CustomTemplateInfo;",
                " import org.apache.syncope.common.lib.SyncopeConstants;",
                "@@ -57,20 +60,27 @@ public class GroupResource extends BaseResource {",
                "-            String realm = URLDecoder.decode(attributes.getParameters().get(\"realm\").",
                "-                    toString(SyncopeConstants.ROOT_REALM), \"UTF-8\");",
                "-            StringValue term = attributes.getParameters().get(\"term\");",
                "-",
                "+            CustomTemplateInfo customTemplate =",
                "+                    SyncopeEnduserApplication.get().getCustomTemplate();",
                "             final GroupResponse groupResponse = new GroupResponse();",
                "-            final int totGroups = SyncopeEnduserSession.get().",
                "-                    getService(SyncopeService.class).numbers().getTotalGroups();",
                "-            final List<GroupTO> groupTOs = SyncopeEnduserSession.get().",
                "-                    getService(SyncopeService.class).searchAssignableGroups(",
                "-                    realm,",
                "-                    term.isNull() || term.isEmpty() ? null : URLDecoder.decode(term.toString(), \"UTF-8\"),",
                "-                    1,",
                "-                    30).getResult();",
                "-            groupResponse.setTotGroups(totGroups);",
                "-            groupResponse.setGroupTOs(groupTOs.stream().collect(",
                "-                    Collectors.toMap(GroupTO::getKey, GroupTO::getName)));",
                "+            if (customTemplate.getWizard().getSteps().containsKey(\"groups\")) {",
                "+                String realm = URLDecoder.decode(attributes.getParameters().get(\"realm\").",
                "+                        toString(SyncopeConstants.ROOT_REALM), \"UTF-8\");",
                "+                StringValue term = attributes.getParameters().get(\"term\");",
                "+",
                "+                final int totGroups = SyncopeEnduserSession.get().",
                "+                        getService(SyncopeService.class).numbers().getTotalGroups();",
                "+                final List<GroupTO> groupTOs = SyncopeEnduserSession.get().",
                "+                        getService(SyncopeService.class).searchAssignableGroups(",
                "+                        realm,",
                "+                        term.isNull() || term.isEmpty() ? null : URLDecoder.decode(term.toString(), \"UTF-8\"),",
                "+                        1,",
                "+                        30).getResult();",
                "+                groupResponse.setTotGroups(totGroups);",
                "+                groupResponse.setGroupTOs(groupTOs.stream().collect(",
                "+                        Collectors.toMap(GroupTO::getKey, GroupTO::getName)));",
                "+            } else {",
                "+                groupResponse.setTotGroups(0);",
                "+                Map<String, String> groups = new HashMap<>();",
                "+                groupResponse.setGroupTOs(groups);",
                "+            }",
                "-            response.setTextEncoding(StandardCharsets.UTF_8.name());",
                "             response.setWriteCallback(new AbstractResource.WriteCallback() {",
                "@@ -82,2 +92,3 @@ public class GroupResource extends BaseResource {",
                "             });",
                "+            response.setTextEncoding(StandardCharsets.UTF_8.name());",
                "             response.setStatusCode(Response.Status.OK.getStatusCode());",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/InfoResource.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/InfoResource.java",
                "index 58bd2381a2..9b990a0d9c 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/InfoResource.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/InfoResource.java",
                "@@ -59,2 +59,3 @@ public class InfoResource extends BaseResource {",
                "             response.setTextEncoding(StandardCharsets.UTF_8.name());",
                "+",
                "             response.setWriteCallback(new WriteCallback() {",
                "@@ -63,3 +64,4 @@ public class InfoResource extends BaseResource {",
                "                 public void writeData(final IResource.Attributes attributes) throws IOException {",
                "-                    Map<String, CustomAttributesInfo> customForm = SyncopeEnduserApplication.get().getCustomForm();",
                "+                    Map<String, CustomAttributesInfo> customFormAttributes =",
                "+                            SyncopeEnduserApplication.get().getCustomFormAttributes();",
                "                     attributes.getResponse().write(",
                "@@ -68,5 +70,5 @@ public class InfoResource extends BaseResource {",
                "                                             SyncopeEnduserSession.get().getPlatformInfo(),",
                "-                                            customForm == null",
                "+                                            customFormAttributes == null",
                "                                                     ? new HashMap<>()",
                "-                                                    : customForm)));",
                "+                                                    : customFormAttributes)));",
                "                 }",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java",
                "index 3559bdbf61..b6c57e8bf2 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java",
                "@@ -37,2 +37,3 @@ import org.apache.syncope.client.enduser.model.CustomAttribute;",
                " import org.apache.syncope.client.enduser.model.CustomAttributesInfo;",
                "+import org.apache.syncope.client.enduser.model.CustomTemplateInfo;",
                " import org.apache.syncope.client.enduser.model.SchemaResponse;",
                "@@ -90,3 +91,6 @@ public class SchemaResource extends BaseResource {",
                "             // USER from customization, if empty or null ignore it, use it to filter attributes otherwise",
                "-            Map<String, CustomAttributesInfo> customForm = SyncopeEnduserApplication.get().getCustomForm();",
                "+            Map<String, CustomAttributesInfo> customFormAttributes =",
                "+                    SyncopeEnduserApplication.get().getCustomFormAttributes();",
                "+            CustomTemplateInfo customTemplate =",
                "+                    SyncopeEnduserApplication.get().getCustomTemplate();",
                "@@ -95,9 +99,11 @@ public class SchemaResource extends BaseResource {",
                "                     ? Collections.<SchemaTO>emptyList()",
                "-                    : customForm == null || customForm.isEmpty() || customForm.get(SchemaType.PLAIN.name()) == null",
                "+                    : customFormAttributes == null",
                "+                    || customFormAttributes.isEmpty()",
                "+                    || customFormAttributes.get(SchemaType.PLAIN.name()) == null",
                "                     ? schemaService.search(",
                "                             new SchemaQuery.Builder().type(SchemaType.PLAIN).anyTypeClasses(classes).build())",
                "-                    : customForm.get(SchemaType.PLAIN.name()).isShow()",
                "+                    : customTemplate.getWizard().getSteps().containsKey(\"plainSchemas\")",
                "                     ? customizeSchemas(schemaService.search(new SchemaQuery.Builder().type(SchemaType.PLAIN).",
                "-                            anyTypeClasses(classes).build()), group, customForm.get(SchemaType.PLAIN.name()).",
                "-                            getAttributes())",
                "+                            anyTypeClasses(classes).build()), group,",
                "+                            customFormAttributes.get(SchemaType.PLAIN.name()).getAttributes())",
                "                     : Collections.<SchemaTO>emptyList();",
                "@@ -105,9 +111,11 @@ public class SchemaResource extends BaseResource {",
                "                     ? Collections.<SchemaTO>emptyList()",
                "-                    : customForm == null || customForm.isEmpty() || customForm.get(SchemaType.DERIVED.name()) == null",
                "+                    : customFormAttributes == null",
                "+                    || customFormAttributes.isEmpty()",
                "+                    || customFormAttributes.get(SchemaType.DERIVED.name()) == null",
                "                     ? schemaService.search(",
                "                             new SchemaQuery.Builder().type(SchemaType.DERIVED).anyTypeClasses(classes).build())",
                "-                    : customForm.get(SchemaType.DERIVED.name()).isShow()",
                "+                    : customTemplate.getWizard().getSteps().containsKey(\"derivedSchemas\")",
                "                     ? customizeSchemas(schemaService.search(new SchemaQuery.Builder().type(SchemaType.DERIVED).",
                "-                            anyTypeClasses(classes).build()), group, customForm.get(SchemaType.DERIVED.name()).",
                "-                            getAttributes())",
                "+                            anyTypeClasses(classes).build()), group,",
                "+                            customFormAttributes.get(SchemaType.DERIVED.name()).getAttributes())",
                "                     : Collections.<SchemaTO>emptyList();",
                "@@ -115,9 +123,11 @@ public class SchemaResource extends BaseResource {",
                "                     ? Collections.<SchemaTO>emptyList()",
                "-                    : customForm == null || customForm.isEmpty() || customForm.get(SchemaType.VIRTUAL.name()) == null",
                "+                    : customFormAttributes == null",
                "+                    || customFormAttributes.isEmpty()",
                "+                    || customFormAttributes.get(SchemaType.VIRTUAL.name()) == null",
                "                     ? schemaService.search(",
                "                             new SchemaQuery.Builder().type(SchemaType.VIRTUAL).anyTypeClasses(classes).build())",
                "-                    : customForm.get(SchemaType.VIRTUAL.name()).isShow()",
                "+                    : customTemplate.getWizard().getSteps().containsKey(\"virtualSchemas\")",
                "                     ? customizeSchemas(schemaService.search(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).",
                "-                            anyTypeClasses(classes).build()), group, customForm.get(SchemaType.VIRTUAL.name()).",
                "-                            getAttributes())",
                "+                            anyTypeClasses(classes).build()), group,",
                "+                            customFormAttributes.get(SchemaType.VIRTUAL.name()).getAttributes())",
                "                     : Collections.<SchemaTO>emptyList();",
                "@@ -163,5 +173,4 @@ public class SchemaResource extends BaseResource {",
                "             final String groupParam,",
                "-            final Map<String, CustomAttribute> customForm) {",
                "-",
                "-        if (customForm.isEmpty()) {",
                "+            final Map<String, CustomAttribute> customFormAttributes) {",
                "+        if (customFormAttributes.isEmpty()) {",
                "             return schemaTOs;",
                "@@ -171,3 +180,3 @@ public class SchemaResource extends BaseResource {",
                "         schemaTOs.removeAll(schemaTOs.stream().",
                "-                filter(schema -> !customForm.containsKey(isGroupBlank",
                "+                filter(schema -> !customFormAttributes.containsKey(isGroupBlank",
                "                 ? schema.getKey()",
                "@@ -177,3 +186,3 @@ public class SchemaResource extends BaseResource {",
                "         Collections.sort(schemaTOs, (schemaTO1, schemaTO2) -> {",
                "-            List<String> order = new ArrayList<>(customForm.keySet());",
                "+            List<String> order = new ArrayList<>(customFormAttributes.keySet());",
                "             return order.indexOf(isGroupBlank",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java",
                "index 9d8d7d5066..e017d450b3 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java",
                "@@ -83,3 +83,4 @@ public class UserSelfCreateResource extends BaseUserSelfResource {",
                "                 // check if request is compliant with customization form rules",
                "-                if (UserRequestValidator.compliant(userTO, SyncopeEnduserApplication.get().getCustomForm(), true)) {",
                "+                if (UserRequestValidator.compliant(userTO,",
                "+                        SyncopeEnduserApplication.get().getCustomFormAttributes(), true)) {",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java",
                "index 255449aa6a..3e8e2ceedd 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java",
                "@@ -99,3 +99,3 @@ public class UserSelfReadResource extends BaseUserSelfResource {",
                "             // USER from customization, if empty or null ignore it, use it to filter attributes otherwise",
                "-            applyFromCustomization(userTO, SyncopeEnduserApplication.get().getCustomForm());",
                "+            applyFromCustomization(userTO, SyncopeEnduserApplication.get().getCustomFormAttributes());",
                "@@ -129,10 +129,11 @@ public class UserSelfReadResource extends BaseUserSelfResource {",
                "-    private void applyFromCustomization(final UserTO userTO, final Map<String, CustomAttributesInfo> customForm) {",
                "-        if (customForm != null && !customForm.isEmpty()) {",
                "+    private void applyFromCustomization(final UserTO userTO,",
                "+            final Map<String, CustomAttributesInfo> customFormAttributes) {",
                "+        if (customFormAttributes != null && !customFormAttributes.isEmpty()) {",
                "             // filter PLAIN attributes",
                "-            customizeAttrTOs(userTO.getPlainAttrs(), customForm.get(SchemaType.PLAIN.name()));",
                "+            customizeAttrTOs(userTO.getPlainAttrs(), customFormAttributes.get(SchemaType.PLAIN.name()));",
                "             // filter DERIVED attributes",
                "-            customizeAttrTOs(userTO.getDerAttrs(), customForm.get(SchemaType.DERIVED.name()));",
                "+            customizeAttrTOs(userTO.getDerAttrs(), customFormAttributes.get(SchemaType.DERIVED.name()));",
                "             // filter VIRTUAL attributes",
                "-            customizeAttrTOs(userTO.getVirAttrs(), customForm.get(SchemaType.VIRTUAL.name()));",
                "+            customizeAttrTOs(userTO.getVirAttrs(), customFormAttributes.get(SchemaType.VIRTUAL.name()));",
                "         }",
                "@@ -142,3 +143,2 @@ public class UserSelfReadResource extends BaseUserSelfResource {",
                "         if (customAttributesInfo != null",
                "-                && customAttributesInfo.isShow()",
                "                 && !customAttributesInfo.getAttributes().isEmpty()) {",
                "@@ -148,3 +148,2 @@ public class UserSelfReadResource extends BaseUserSelfResource {",
                "                     collect(Collectors.toList()));",
                "-        } else if (customAttributesInfo != null && !customAttributesInfo.isShow()) {",
                "             attrs.clear();",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java",
                "index 26bad61849..3cccb8fe20 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java",
                "@@ -68,6 +68,7 @@ public class UserSelfUpdateResource extends BaseUserSelfResource {",
                "             UserTO userTO = MAPPER.readValue(request.getReader().readLine(), UserTO.class);",
                "-            Map<String, CustomAttributesInfo> customForm = SyncopeEnduserApplication.get().getCustomForm();",
                "+            Map<String, CustomAttributesInfo> customFormAttributes =",
                "+                    SyncopeEnduserApplication.get().getCustomFormAttributes();",
                "             // check if request is compliant with customization form rules",
                "-            if (UserRequestValidator.compliant(userTO, customForm, false)) {",
                "+            if (UserRequestValidator.compliant(userTO, customFormAttributes, false)) {",
                "                 // 1. membership attributes management",
                "@@ -148,3 +149,3 @@ public class UserSelfUpdateResource extends BaseUserSelfResource {",
                "                 // align \"userTO\" and \"selfTO\" objects",
                "-                if (customForm != null && !customForm.isEmpty()) {",
                "+                if (customFormAttributes != null && !customFormAttributes.isEmpty()) {",
                "                     completeUserObject(userTO, selfTO);",
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/util/UserRequestValidator.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/util/UserRequestValidator.java",
                "index c5d348b4bf..7772fcbc8a 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/util/UserRequestValidator.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/util/UserRequestValidator.java",
                "@@ -21,4 +21,6 @@ package org.apache.syncope.client.enduser.util;",
                " import java.util.Map;",
                "+import org.apache.commons.lang3.StringUtils;",
                " import org.apache.syncope.client.enduser.model.CustomAttribute;",
                " import org.apache.syncope.client.enduser.model.CustomAttributesInfo;",
                "+import org.apache.syncope.client.enduser.model.CustomTemplateInfo;",
                " import org.apache.syncope.common.lib.EntityTOUtils;",
                "@@ -37,6 +39,6 @@ public final class UserRequestValidator {",
                "-    public static boolean compliant(final UserTO userTO, final Map<String, CustomAttributesInfo> customForm,",
                "+    public static boolean compliant(final UserTO userTO, final Map<String, CustomAttributesInfo> customFormAttributes,",
                "             final boolean checkDefaultValues) {",
                "-        if (customForm == null || customForm.isEmpty()) {",
                "+        if (customFormAttributes == null || customFormAttributes.isEmpty()) {",
                "             return true;",
                "@@ -45,7 +47,7 @@ public final class UserRequestValidator {",
                "         return validateAttributes(EntityTOUtils.buildAttrMap(userTO.getPlainAttrs()),",
                "-                customForm.get(SchemaType.PLAIN.name()), checkDefaultValues)",
                "+                customFormAttributes.get(SchemaType.PLAIN.name()), checkDefaultValues)",
                "                 && validateAttributes(EntityTOUtils.buildAttrMap(userTO.getDerAttrs()),",
                "-                        customForm.get(SchemaType.DERIVED.name()), checkDefaultValues)",
                "+                        customFormAttributes.get(SchemaType.DERIVED.name()), checkDefaultValues)",
                "                 && validateAttributes(EntityTOUtils.buildAttrMap(userTO.getVirAttrs()),",
                "-                        customForm.get(SchemaType.VIRTUAL.name()), checkDefaultValues);",
                "+                        customFormAttributes.get(SchemaType.VIRTUAL.name()), checkDefaultValues);",
                "     }",
                "@@ -56,3 +58,3 @@ public final class UserRequestValidator {",
                "         return customAttrInfo == null",
                "-                || (customAttrInfo.getAttributes().isEmpty() && customAttrInfo.isShow())",
                "+                || customAttrInfo.getAttributes().isEmpty()",
                "                 || attrMap.entrySet().stream().allMatch(entry -> {",
                "@@ -71,2 +73,17 @@ public final class UserRequestValidator {",
                "+    public static boolean validateSteps(final CustomTemplateInfo customTemplateInfo) {",
                "+        return customTemplateInfo != null",
                "+                && StringUtils.isNotBlank(customTemplateInfo.getWizard().getFirstStep())",
                "+                && !customTemplateInfo.getWizard().getSteps().isEmpty();",
                "+",
                "+    }",
                "+",
                "+    public static boolean validateStep(final String stepName, final CustomTemplateInfo customTemplateInfo) {",
                "+        return customTemplateInfo != null",
                "+                && !customTemplateInfo.getWizard().getSteps().isEmpty()",
                "+                && customTemplateInfo.getWizard().getSteps().containsKey(stepName)",
                "+                && StringUtils.isNotBlank(customTemplateInfo.getWizard().getSteps().get(stepName).getUrl());",
                "+",
                "+    }",
                "+",
                "     private static boolean isValid(final AttrTO attrTO, final CustomAttribute customAttribute) {",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/css/app.css b/client/enduser/src/main/resources/META-INF/resources/app/css/app.css",
                "index a91d76465a..494fb66f42 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/css/app.css",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/css/app.css",
                "@@ -19,3 +19,4 @@ under the License.",
                "-/* app general css stylesheet */",
                "+/* App general css stylesheet",
                "+============================================================================= */",
                "@@ -29,71 +30,71 @@ under the License.",
                "-.k-notification-wrap{",
                "-  white-space: normal !important;",
                "-  word-wrap: break-word !important;",
                "-  font-size: 12px;",
                "-",
                "+.disable-link {",
                "+  pointer-events: none;",
                "+  cursor: default;",
                " }",
                "-.k-notification{",
                "-  width : 320px;",
                "-  font-size: 12px;",
                "+.form-control:disabled, ",
                "+.form-control[readonly] {",
                "+  cursor: not-allowed;",
                " }",
                "-.suggestions{",
                "-  font-size: 10px;",
                "-  display: inline-block;",
                "-  margin-bottom: 5px;",
                "+.card-container.card {",
                "+  width: 350px;",
                "+  padding: 40px 40px 0px;",
                " }",
                "-#resetpassword{",
                "-  background: -moz-linear-gradient(top, #a9db80 0%, #96c56f 100%); /* FF3.6+ */",
                "-  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#a9db80), color-stop(100%,#96c56f)); /* Chrome,Safari4+ */",
                "-  background: -webkit-linear-gradient(top, #a9db80 0%,#96c56f 100%); /* Chrome10+,Safari5.1+ */",
                "-  background: -o-linear-gradient(top, #a9db80 0%,#96c56f 100%); /* Opera 11.10+ */",
                "-  background: -ms-linear-gradient(top, #a9db80 0%,#96c56f 100%); /* IE10+ */",
                "-  color: black;",
                "-  margin-left: 5px;",
                "-  /*width: 15%;*/",
                "-}",
                "-#resetpassword:hover {",
                "-  background: #658D5D;",
                "-}",
                "-#captchaImg{",
                "-  display: block;",
                "-  margin: 0 auto;",
                "+.card {",
                "+  background-color: #F7F7F7;",
                "+  /* just in case there no content*/",
                "+  padding: 20px 25px 30px;",
                "+  margin: 0 auto 25px;",
                "+  margin-top: 50px;",
                "+  /* shadows and rounded borders */",
                "+  -moz-border-radius: 2px;",
                "+  -webkit-border-radius: 2px;",
                "+  border-radius: 2px;",
                "+  -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);",
                "+  -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);",
                "+  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);",
                " }",
                "-.disable-link{",
                "-  pointer-events: none;",
                "-  cursor: default;",
                "+.form-control {",
                "+  display: block;",
                "+  width: 100%;",
                "+  height: 34px;",
                "+  padding: 6px 12px;",
                "+  font-size: 14px;",
                "+  line-height: 1.42857;",
                "+  color: #555;",
                "+  background-color: #FFF;",
                "+  /*background-image: none;*/",
                "+  border: 1px solid #CCC;",
                "+  border-radius: 4px;",
                "+  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.075) inset;",
                "+  transition: border-color 0.15s ease-in-out 0s, box-shadow 0.15s ease-in-out 0s;",
                " }",
                "-.treasure-overlay-spinner-container{",
                "-  z-index : 10001;",
                "+#captchaButtons {",
                "+  margin-top: 5%;",
                "+  margin-bottom: 10px;",
                " }",
                "-treasure-overlay-spinner .treasure-overlay-spinner-content {",
                "-  height: 100%;",
                "-}",
                "-treasure-overlay-spinner {",
                "-  height: 100%;",
                "-  top: 0;",
                "-  bottom: 0;",
                "-  position: fixed;",
                "-  right: 0;",
                "-  left: 0;",
                "-  overflow-y: auto;",
                "+/* <!-- Useless with Bootstrap > 3 */",
                "+.p-0 {",
                "+  padding-left: 0 !important;",
                "+  padding-right: 0 !important;",
                " }",
                "-treasure-overlay-spinner .treasure-overlay-spinner {",
                "-  position: fixed;",
                "+.float-left {",
                "+  float: left !important;",
                " }",
                "-",
                "-treasure-overlay-spinner .treasure-overlay-spinner-container {",
                "-  position: fixed;",
                "-  background: rgba(0, 0, 0, 0.5490196078431373);",
                "+.float-right {",
                "+  float: right !important;",
                " }",
                "-treasure-overlay-spinner.treasure-overlay-spinner-active-remove{",
                "-  transition: all 150ms ease-in 0s",
                "+.btn-default {",
                "+  color: #333;",
                "+  background-color: #fff;",
                "+  border-color: #ccc;",
                " }",
                "+/* Useless with Bootstrap > 3 --> */",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/css/customSpinner.css b/client/enduser/src/main/resources/META-INF/resources/app/css/customSpinner.css",
                "new file mode 100644",
                "index 0000000000..bbfe1de232",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/css/customSpinner.css",
                "@@ -0,0 +1,49 @@",
                "+/*",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+*/",
                "+",
                "+.treasure-overlay-spinner-container{",
                "+  z-index : 10001;",
                "+}",
                "+",
                "+treasure-overlay-spinner .treasure-overlay-spinner-content {",
                "+  height: 100%;",
                "+}",
                "+treasure-overlay-spinner {",
                "+  height: 100%;",
                "+  top: 0;",
                "+  bottom: 0;",
                "+  position: fixed;",
                "+  right: 0;",
                "+  left: 0;",
                "+  overflow-y: auto;",
                "+}",
                "+",
                "+treasure-overlay-spinner .treasure-overlay-spinner {",
                "+  position: fixed;",
                "+  pointer-events: none;",
                "+}",
                "+",
                "+treasure-overlay-spinner .treasure-overlay-spinner-container {",
                "+  position: fixed;",
                "+  background: rgba(0, 0, 0, 0.5490196078431373);",
                "+}",
                "+",
                "+treasure-overlay-spinner.treasure-overlay-spinner-active-remove {",
                "+  transition: all 150ms ease-in 0s;",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/css/editUser.css b/client/enduser/src/main/resources/META-INF/resources/app/css/editUser.css",
                "index ec5bacaa06..41ba63cadc 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/css/editUser.css",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/css/editUser.css",
                "@@ -19,2 +19,4 @@ under the License.",
                "+/* Default style",
                "+============================================================================= */",
                " * {",
                "@@ -29,2 +31,3 @@ under the License.",
                "   text-align: center;",
                "+  background-color: #F7F7F7;",
                " }",
                "@@ -37,16 +40,19 @@ under the License.",
                "-#form-container .page-header   { background: -moz-linear-gradient(top, #a9db80 0%, #96c56f 100%); /* FF3.6+ */",
                "-                                 background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#a9db80), color-stop(100%,#96c56f)); /* Chrome,Safari4+ */",
                "-                                 background: -webkit-linear-gradient(top, #a9db80 0%,#96c56f 100%); /* Chrome10+,Safari5.1+ */",
                "-                                 background: -o-linear-gradient(top, #a9db80 0%,#96c56f 100%); /* Opera 11.10+ */",
                "-                                 background: -ms-linear-gradient(top, #a9db80 0%,#96c56f 100%); /* IE10+ */ ",
                "-                                 margin: 1% 9%;",
                "-                                 width: 83%; padding:10px; ",
                "-                                 /* shadows and rounded borders */",
                "-                                 -moz-border-radius: 5px;",
                "-                                 -webkit-border-radius: 5px;",
                "-                                 border-radius: 5px;",
                "-                                 -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);",
                "-                                 -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);",
                "-                                 box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);",
                "+#form-container .page-header   { ",
                "+  background: -moz-linear-gradient(top, #a9db80 0%, #96c56f 100%); /* FF3.6+ */",
                "+  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#a9db80), color-stop(100%,#96c56f)); /* Chrome,Safari4+ */",
                "+  background: -webkit-linear-gradient(top, #a9db80 0%,#96c56f 100%); /* Chrome10+,Safari5.1+ */",
                "+  background: -o-linear-gradient(top, #a9db80 0%,#96c56f 100%); /* Opera 11.10+ */",
                "+  background: -ms-linear-gradient(top, #a9db80 0%,#96c56f 100%); /* IE10+ */ ",
                "+  margin: 1% 9%;",
                "+  width: 83%; padding:10px; ",
                "+  /* shadows and rounded borders */",
                "+  -moz-border-radius: 5px;",
                "+  -webkit-border-radius: 5px;",
                "+  border-radius: 5px;",
                "+  -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);",
                "+  -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);",
                "+  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);",
                "+  text-align: left; ",
                "+  font-weight: 700;",
                " }",
                "@@ -95,21 +101,7 @@ under the License.",
                "-#previous {",
                "-  background: -moz-linear-gradient(top, #a9db80 0%, #96c56f 100%);  /*FF3.6+ */",
                "-  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#a9db80), color-stop(100%,#96c56f));  /*Chrome,Safari4+ */",
                "-  background: -webkit-linear-gradient(top, #a9db80 0%,#96c56f 100%);  /*Chrome10+,Safari5.1+ */",
                "-  background: -o-linear-gradient(top, #a9db80 0%,#96c56f 100%);  /*Opera 11.10+*/ ",
                "-  background: -ms-linear-gradient(top, #a9db80 0%,#96c56f 100%);  /*IE10+*/ ",
                "-  display: inline-block;",
                "-  color: black;",
                "-  padding-left: 8px;",
                "-  padding-right: 8px;",
                "-  margin-left: 5px;",
                "-}",
                "-",
                "-#previous:hover {",
                "-  background: #658D5D;",
                "-}",
                "-",
                "-#next{",
                "-  background: -moz-linear-gradient(top, #a9db80 0%, #96c56f 100%); /*FF3.6+ */",
                "+#next,",
                "+#previous,",
                "+#save,",
                "+#finish {",
                "+  background: -moz-linear-gradient(top, #a9db80 0%, #96c56f 100%);  /*FF3.6+*/ ",
                "   background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#a9db80), color-stop(100%,#96c56f));  /*Chrome,Safari4+ */",
                "@@ -119,6 +111,7 @@ under the License.",
                "   display: inline-block;",
                "-  margin-left: 5px;",
                "+",
                "   padding-left: 8px;",
                "   padding-right: 8px;",
                "-  float: right;",
                "+  margin-left: 5px;",
                "+  border: none;",
                "   color: black;",
                "@@ -126,2 +119,5 @@ under the License.",
                "+#save:hover,",
                "+#previous:hover,",
                "+#finish:hover,",
                " #next:hover {",
                "@@ -130,13 +126,3 @@ under the License.",
                "-#save{",
                "-  background: -moz-linear-gradient(top, #a9db80 0%, #96c56f 100%);  /*FF3.6+*/ ",
                "-  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#a9db80), color-stop(100%,#96c56f));  /*Chrome,Safari4+ */",
                "-  background: -webkit-linear-gradient(top, #a9db80 0%,#96c56f 100%);  /*Chrome10+,Safari5.1+ */",
                "-  background: -o-linear-gradient(top, #a9db80 0%,#96c56f 100%);  /*Opera 11.10+ */",
                "-  background: -ms-linear-gradient(top, #a9db80 0%,#96c56f 100%);  /*IE10+ */",
                "-  color: black;",
                "-  display: inline-block;",
                "-  padding-left: 8px;",
                "-  padding-right: 8px;",
                "-  margin-left: 5px;",
                "+#save {",
                "   margin-right: 5px;",
                "@@ -144,18 +130,3 @@ under the License.",
                "-#save:hover {",
                "-  background: #658D5D;",
                "-}",
                "-",
                "-#finish{",
                "-  background: -moz-linear-gradient(top, #a9db80 0%, #96c56f 100%);  /*FF3.6+ */",
                "-  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#a9db80), color-stop(100%,#96c56f));  /*Chrome,Safari4+ */",
                "-  background: -webkit-linear-gradient(top, #a9db80 0%,#96c56f 100%);  /*Chrome10+,Safari5.1+*/ ",
                "-  background: -o-linear-gradient(top, #a9db80 0%,#96c56f 100%);  /*Opera 11.10+ */",
                "-  background: -ms-linear-gradient(top, #a9db80 0%,#96c56f 100%);  /*IE10+*/",
                "-  display: inline-block;",
                "-  margin-left:5px;",
                "-  padding-left: 8px;",
                "-  padding-right: 8px;",
                "-  color: black;",
                "-  margin-left: 5px;",
                "+#finish {",
                "   margin-right: 5px;",
                "@@ -163,7 +134,4 @@ under the License.",
                "-#finish:hover {",
                "-  background: #658D5D;",
                "-}",
                "-",
                " #cancel {",
                "+  color: #fff;",
                "   margin-top: 0%;",
                "@@ -230,16 +198,10 @@ span.k-datetimepicker{",
                " .btn-breadcrumb .btn:not(:last-child):after {",
                "-  content: \" \";",
                "-  display: block;",
                "-  width: 0;",
                "-  height: 0;",
                "-  border-top: 17px solid transparent;",
                "-  border-bottom: 17px solid transparent;",
                "   border-left: 10px solid white;",
                "-  position: absolute;",
                "-  top: 50%;",
                "-  margin-top: -17px;",
                "-  left: 100%;",
                "-  z-index: 3;",
                " }",
                " .btn-breadcrumb .btn:not(:last-child):before {",
                "+  margin-left: 1px;",
                "+  border-left: 10px solid rgb(173, 173, 173);",
                "+}",
                "+.btn-breadcrumb .btn:not(:last-child):before,",
                "+.btn-breadcrumb .btn:not(:last-child):after {",
                "   content: \" \";",
                "@@ -250,3 +212,2 @@ span.k-datetimepicker{",
                "   border-bottom: 17px solid transparent;",
                "-  border-left: 10px solid rgb(173, 173, 173);",
                "   position: absolute;",
                "@@ -254,3 +215,2 @@ span.k-datetimepicker{",
                "   margin-top: -17px;",
                "-  margin-left: 1px;",
                "   left: 100%;",
                "@@ -270,13 +230,25 @@ span.k-datetimepicker{",
                "-/** Default button **/",
                "-.btn-breadcrumb .btn.btn-default:not(:last-child):after {",
                "+/** Default buttons **/",
                "+.breadcrumb-disabled-link {",
                "+  pointer-events: none;",
                "+  cursor: default;",
                "+}",
                "+",
                "+.breadcrumb-btn-elem {",
                "+  border-color: #ccc;",
                "+}",
                "+",
                "+.btn-breadcrumb .breadcrumb-btn-elem:not(:last-child):after {",
                "   border-left: 10px solid #fff;",
                " }",
                "-.btn-breadcrumb .btn.btn-default:not(:last-child):before {",
                "+.btn-breadcrumb .breadcrumb-btn-elem:not(:last-child):before {",
                "   border-left: 10px solid #ccc;",
                " }",
                "-.btn-breadcrumb .btn.btn-default:hover:not(:last-child):after {",
                "+",
                "+.btn-breadcrumb .breadcrumb-btn-elem.active:not(:last-child):after,",
                "+.btn-breadcrumb .breadcrumb-btn-elem:hover:not(:last-child):after {",
                "   border-left: 10px solid #ebebeb;",
                " }",
                "-.btn-breadcrumb .btn.btn-default:hover:not(:last-child):before {",
                "+.btn-breadcrumb .breadcrumb-btn-elem.active:not(:last-child):before,",
                "+.btn-breadcrumb .breadcrumb-btn-elem:hover:not(:last-child):before {",
                "   border-left: 10px solid #adadad;",
                "@@ -284,13 +256,42 @@ span.k-datetimepicker{",
                "-.btn-breadcrumb .btn.btn-default.active:not(:last-child):after {",
                "-  border-left: 10px solid #e6e6e6;",
                "+.btn-breadcrumb .breadcrumb-btn-elem.active {",
                "+  box-shadow: 0 0px 0px rgba(0, 0, 0, 0.125)",
                "+}",
                "+.btn-breadcrumb .breadcrumb-btn-elem:focus {",
                "+  box-shadow: none !important;",
                " }",
                "-.btn-breadcrumb .btn.btn-default.active {",
                "-  box-shadow: 0 0px 0px rgba(0, 0, 0, 0.125)",
                "+.btn-breadcrumb .btn:before,",
                "+.btn-breadcrumb .btn:after {",
                "+  transition: all .15s ease-in-out;",
                " }",
                "-.breadcrumb-disabled-link {",
                "-  pointer-events: none;",
                "-  cursor: default;",
                "+div[role=\"tablist\"] {",
                "+  margin-bottom: 20px;",
                "+}",
                "+",
                "+/* For Bootstrap 4 */",
                "+",
                "+/*",
                "+.btn-breadcrumb .breadcrumb-btn-elem:hover {",
                "+  color: #ffffff !important;",
                "+}",
                "+",
                "+.btn-breadcrumb .breadcrumb-btn-elem:not(:hover),",
                "+.btn-breadcrumb .breadcrumb-home:not(:hover) {",
                "+  color: #333;",
                "+  background-color: #fff;",
                "+}",
                "+",
                "+.btn-breadcrumb .breadcrumb-btn-elem:hover:not(:last-child):after,",
                "+.btn-breadcrumb .breadcrumb-btn-elem:hover:not(:last-child):before,",
                "+.btn-breadcrumb .breadcrumb-btn-elem.active:not(:last-child):after,",
                "+.btn-breadcrumb .breadcrumb-btn-elem.active:not(:last-child):before {",
                "+  border-left: 10px solid #4c4c4c;",
                "+}",
                "+*/",
                "+",
                "+.btn-file {",
                "+  background: transparent;",
                "+  color: black;",
                " }",
                "@@ -302,5 +303,77 @@ span.k-datetimepicker{",
                "-/*--------------end default style*/",
                "+.multivalue button{",
                "+  float: right",
                "+}",
                "+.schema-type #date{",
                "+  margin-top: 35px;",
                "+  margin-bottom: 2px;",
                "+}",
                "+",
                "+.multivalue input{",
                "+  width: calc(100% - 70px);",
                "+  margin-top: 10px",
                "+}",
                "+",
                "+.multivalue input:disabled{",
                "+  width: 100%;  ",
                "+}",
                "+",
                "+.multivalue button{",
                "+  margin-top: 2px",
                "+}",
                "+",
                "+.multivalue #datetime{",
                "+  margin-top: 0px",
                "+}",
                "+",
                "+#datetime input{",
                "+  width: 100%;",
                "+  margin-top: 0px",
                "+}",
                "+#timepicker input{",
                "+  width: 50px;",
                "+  margin-top: 0px",
                "+}",
                "-/*style for devices max width 350 */",
                "+.multivalue #timepicker {",
                "+  margin-top: -35px;",
                "+}",
                "+",
                "+.suggestions{",
                "+  font-size: 10px;",
                "+  display: inline-block;",
                "+  margin-bottom: 5px;",
                "+}",
                "+",
                "+#status-buttons {",
                "+  padding-left: 15px;",
                "+  -webkit-flex-flow: row wrap; /* Safari 6.1+ */",
                "+  flex-flow: row wrap;",
                "+}",
                "+",
                "+.card.card-open {",
                "+  background-color: #ffffff;",
                "+}",
                "+",
                "+.card-header a {",
                "+  text-decoration: none;",
                "+}",
                "+",
                "+.card-header h5 a {",
                "+  color: black;",
                "+}",
                "+",
                "+.card-header {",
                "+  padding: 2px 15px;",
                "+  border-bottom: 1px solid transparent;",
                "+  border-top-left-radius: 3px;",
                "+  border-top-right-radius: 3px;",
                "+  background-color: #f5f5f5;",
                "+  border-color: #ddd;",
                "+}",
                "+/* end default style",
                "+============================================================================= */",
                "+",
                "+/* Style for devices max width 350",
                "+============================================================================= */",
                " @media only screen and (max-width: 350px) {",
                "@@ -339,5 +412,11 @@ span.k-datetimepicker{",
                "-  #finish{",
                "+  #finish,",
                "+  #save,",
                "+  #next,",
                "+  #previous {",
                "     padding-left: 2px;",
                "     padding-right: 2px;",
                "+  }",
                "+",
                "+  #finish{",
                "     margin-left:-27px;",
                "@@ -346,4 +425,2 @@ span.k-datetimepicker{",
                "   #next{",
                "-    padding-left: 2px;",
                "-    padding-right: 2px;",
                "     margin-left: 1px;",
                "@@ -351,4 +428,2 @@ span.k-datetimepicker{",
                "   #previous{",
                "-    padding-left: 2px;",
                "-    padding-right: 2px;",
                "     margin-left:-126px;",
                "@@ -357,4 +432,2 @@ span.k-datetimepicker{",
                "     margin-top: 4px;",
                "-    padding-left: 2px;",
                "-    padding-right: 2px;",
                "     margin-top:-31px;",
                "@@ -363,3 +436,3 @@ span.k-datetimepicker{",
                "   }",
                "-  ",
                "+",
                "   span.k-datetimepicker {",
                "@@ -367,7 +440,10 @@ span.k-datetimepicker{",
                "     margin-top: -50px;",
                "-}",
                "+  }",
                " }",
                "+/* ",
                "+============================================================================= */",
                "-/*style for devices max width 400 */",
                "+/* Style for devices max width 400",
                "+============================================================================= */",
                " @media only screen and (max-width: 400px) {",
                "@@ -420,4 +496,10 @@ span.k-datetimepicker{",
                "-  #finish{",
                "+  #next,",
                "+  #finish,",
                "+  #previous,",
                "+  #save {",
                "     padding-left: 2px;",
                "+  }",
                "+",
                "+  #finish {",
                "     padding-right: 2px;",
                "@@ -426,4 +508,3 @@ span.k-datetimepicker{",
                "   }",
                "-  #next{",
                "-    padding-left: 2px;",
                "+  #next {",
                "     padding-right: 2px;",
                "@@ -431,4 +512,3 @@ span.k-datetimepicker{",
                "   }",
                "-  #previous{",
                "-    padding-left: 2px;",
                "+  #previous {",
                "     padding-right: 2px;",
                "@@ -436,4 +516,3 @@ span.k-datetimepicker{",
                "   }",
                "-  #save{",
                "-    padding-left: 2px;",
                "+  #save {",
                "     padding-right: 0px;",
                "@@ -442,4 +521,4 @@ span.k-datetimepicker{",
                "   }",
                "-  ",
                "-    span.k-datetimepicker{",
                "+",
                "+  span.k-datetimepicker{",
                "     width: 160%;",
                "@@ -448,4 +527,7 @@ span.k-datetimepicker{",
                " }",
                "+/* ",
                "+============================================================================= */",
                "-/*style for devices max width 500*/",
                "+/* Style for devices max width 500",
                "+============================================================================= */",
                " @media only screen and (max-width: 500px) {",
                "@@ -485,3 +567,6 @@ span.k-datetimepicker{",
                "-  .btn-group .btn+.btn, .btn-group .btn+.btn-group, .btn-group .btn-group+.btn, .btn-group .btn-group+.btn-group {",
                "+  .btn-group .btn+.btn, ",
                "+  .btn-group .btn+.btn-group, ",
                "+  .btn-group .btn-group+.btn, ",
                "+  .btn-group .btn-group+.btn-group {",
                "     margin-left: 0px;",
                "@@ -489,9 +574,2 @@ span.k-datetimepicker{",
                "-  .btn-default {",
                "-    color: #333;",
                "-    background-color: #fff;",
                "-    border-color: #ccc;",
                "-    /*width: 100%;*/",
                "-  }",
                "-",
                "   .card-container.card {",
                "@@ -545,3 +623,2 @@ span.k-datetimepicker{",
                "     font-size: 12px;",
                "-",
                "   }",
                "@@ -550,3 +627,2 @@ span.k-datetimepicker{",
                "     font-size:12px;",
                "-",
                "   }",
                "@@ -668,4 +744,7 @@ span.k-datetimepicker{",
                " }",
                "+/* ",
                "+============================================================================= */",
                "-/*style for devices max width 800) */",
                "+/* Style for devices max width 800)",
                "+============================================================================= */",
                " @media only screen and (max-width: 800px) {",
                "@@ -704,2 +783,4 @@ span.k-datetimepicker{",
                " }",
                "+/* ",
                "+============================================================================= */",
                "@@ -731,39 +812,3 @@ span.k-datetimepicker{",
                " }",
                "-",
                "-.multivalue button{",
                "-  float: right",
                "-}",
                "-.schema-type #date{",
                "-  margin-top: 35px;",
                "-  margin-bottom: 2px;",
                "-}",
                "-",
                "-.multivalue input{",
                "-  width: calc(100% - 70px);",
                "-  margin-top: 10px",
                "-}",
                "-",
                "-.multivalue input:disabled{",
                "-  width: 100%;  ",
                "-}",
                "-",
                "-.multivalue button{",
                "-  margin-top: 2px",
                "-}",
                "-",
                "-.multivalue #datetime{",
                "-  margin-top: 0px",
                "-}",
                "-",
                "-#datetime input{",
                "-  width: 100%;",
                "-  margin-top: 0px",
                "-}",
                "-#timepicker input{",
                "-  width: 50px;",
                "-  margin-top: 0px",
                "-}",
                "-",
                "-.multivalue #timepicker {",
                "-  margin-top: -35px;",
                "-}",
                "+/* ",
                "+============================================================================= */",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/css/login.css b/client/enduser/src/main/resources/META-INF/resources/app/css/login.css",
                "index a517ae5090..03212f3479 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/css/login.css",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/css/login.css",
                "@@ -56,22 +56,2 @@ body{",
                "-.card-container.card {",
                "-  width: 350px;",
                "-  padding: 40px 40px 0px;",
                "-}",
                "-",
                "-.card {",
                "-  background-color: #F7F7F7;",
                "-  /* just in case there no content*/",
                "-  padding: 20px 25px 30px;",
                "-  margin: 0 auto 25px;",
                "-  margin-top: 50px;",
                "-  /* shadows and rounded borders */",
                "-  -moz-border-radius: 2px;",
                "-  -webkit-border-radius: 2px;",
                "-  border-radius: 2px;",
                "-  -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);",
                "-  -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);",
                "-  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);",
                "-}",
                "-",
                " .login-logo {",
                "@@ -95,18 +75,2 @@ body{",
                "-.form-control {",
                "-  display: block;",
                "-  width: 100%;",
                "-  height: 34px;",
                "-  padding: 6px 12px;",
                "-  font-size: 14px;",
                "-  line-height: 1.42857;",
                "-  color: #555;",
                "-  background-color: #FFF;",
                "-  background-image: none;",
                "-  border: 1px solid #CCC;",
                "-  border-radius: 4px;",
                "-  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.075) inset;",
                "-  transition: border-color 0.15s ease-in-out 0s, box-shadow 0.15s ease-in-out 0s;",
                "-}",
                "-",
                " input[type=\"number\"]{",
                "@@ -114 +78,6 @@ input[type=\"number\"]{",
                " }",
                "+",
                "+.dropdown-toggle {",
                "+  width: 100%; ",
                "+  text-align: left;",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/css/notification.css b/client/enduser/src/main/resources/META-INF/resources/app/css/notification.css",
                "new file mode 100644",
                "index 0000000000..f2d190ebea",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/css/notification.css",
                "@@ -0,0 +1,28 @@",
                "+/*",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+*/",
                "+",
                "+.k-notification-wrap {",
                "+  white-space: normal !important;",
                "+  word-wrap: break-word !important;",
                "+}",
                "+",
                "+.k-icon {",
                "+  margin-right: 5px;",
                "+  vertical-align: sub;",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/css/passwordReset.css b/client/enduser/src/main/resources/META-INF/resources/app/css/passwordReset.css",
                "new file mode 100644",
                "index 0000000000..4f03f25c96",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/css/passwordReset.css",
                "@@ -0,0 +1,37 @@",
                "+/*",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+*/",
                "+",
                "+#resetpassword {",
                "+  background: -moz-linear-gradient(top, #a9db80 0%, #96c56f 100%); /* FF3.6+ */",
                "+  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#a9db80), color-stop(100%,#96c56f)); /* Chrome,Safari4+ */",
                "+  background: -webkit-linear-gradient(top, #a9db80 0%,#96c56f 100%); /* Chrome10+,Safari5.1+ */",
                "+  background: -o-linear-gradient(top, #a9db80 0%,#96c56f 100%); /* Opera 11.10+ */",
                "+  background: -ms-linear-gradient(top, #a9db80 0%,#96c56f 100%); /* IE10+ */",
                "+  margin-left: 5px;",
                "+  color: black;",
                "+  border: none;",
                "+}",
                "+#resetpassword:hover {",
                "+  background: #658D5D;",
                "+}",
                "+",
                "+#captchaImg {",
                "+  display: block;",
                "+  margin: 0 auto;",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/css/templates/dark/editUser.css b/client/enduser/src/main/resources/META-INF/resources/app/css/templates/dark/editUser.css",
                "new file mode 100644",
                "index 0000000000..dd0d351bde",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/css/templates/dark/editUser.css",
                "@@ -0,0 +1,95 @@",
                "+/*",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+*/",
                "+",
                "+html,",
                "+body {",
                "+  height: 100%;",
                "+}",
                "+body {",
                "+  background: -moz-linear-gradient(94deg, rgba(51,51,51,1) 0%, rgba(101,141,93,1) 100%); /* ff3.6+ */",
                "+  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, rgba(101,141,93,1)), color-stop(100%, rgba(51,51,51,1))); /* safari4+,chrome */",
                "+  background: -webkit-linear-gradient(94deg, rgba(51,51,51,1) 0%, rgba(101,141,93,1) 100%); /* safari5.1+,chrome10+ */",
                "+  background: -o-linear-gradient(94deg, rgba(51,51,51,1) 0%, rgba(101,141,93,1) 100%); /* opera 11.10+ */",
                "+  background: -ms-linear-gradient(94deg, rgba(51,51,51,1) 0%, rgba(101,141,93,1) 100%); /* ie10+ */",
                "+  background: linear-gradient(356deg, rgba(51,51,51,1) 0%, rgba(101,141,93,1) 100%); /* w3c */",
                "+  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#658d5d', endColorstr='#333333',GradientType=0 ); /* ie6-9 */",
                "+}",
                "+",
                "+#form-container .page-header,",
                "+#previous,",
                "+#next,",
                "+#save,",
                "+#finish,",
                "+#resetpassword {",
                "+  background: -moz-linear-gradient(top, #6a9647 0%, #48543d 100%); /* FF3.6+ */",
                "+  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#6a9647), color-stop(100%,#48543d)); /* Chrome,Safari4+ */",
                "+  background: -webkit-linear-gradient(top, #6a9647 0%,#48543d 100%); /* Chrome10+,Safari5.1+ */",
                "+  background: -o-linear-gradient(top, #6a9647 0%,#48543d 100%); /* Opera 11.10+ */",
                "+  background: -ms-linear-gradient(top, #6a9647 0%,#48543d 100%); /* IE10+ */",
                "+  color: white;",
                "+}",
                "+",
                "+#form-container .btn-danger {",
                "+  background-color: #a93f3c;",
                "+  border-color: #ffffff;",
                "+}",
                "+",
                "+",
                "+#form-container,",
                "+#form-container .panel {",
                "+  background-color: #151515;",
                "+  color: white;",
                "+}",
                "+",
                "+#form-container input, ",
                "+#form-container select,",
                "+#form-container select option,",
                "+#form-container label {",
                "+  color: white;",
                "+}",
                "+",
                "+#form-container input:disabled {",
                "+  background: #6d6d6d;",
                "+}",
                "+",
                "+#form-container input,",
                "+#form-container select,",
                "+#form-container select option,",
                "+span.k-datepicker, ",
                "+span.k-timepicker, ",
                "+span.k-datetimepicker, ",
                "+span.k-colorpicker, ",
                "+span.k-numerictextbox, ",
                "+span.k-combobox, ",
                "+span.k-dropdown, ",
                "+.k-toolbar .k-split-button,",
                "+.k-autocomplete.k-state-default, ",
                "+.k-picker-wrap.k-state-default, ",
                "+.k-numeric-wrap.k-state-default, ",
                "+.k-dropdown-wrap.k-state-default {",
                "+  background: #313131;",
                "+}",
                "+",
                "+.card-header h5 a {",
                "+  color: white;",
                "+}",
                "+",
                "+.card-header {",
                "+  background-color: #49553e;",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/css/templates/dark/login.css b/client/enduser/src/main/resources/META-INF/resources/app/css/templates/dark/login.css",
                "new file mode 100644",
                "index 0000000000..90da4b0714",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/css/templates/dark/login.css",
                "@@ -0,0 +1,78 @@",
                "+/*",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+*/",
                "+",
                "+html,",
                "+body {",
                "+  height: 100%;",
                "+}",
                "+body {",
                "+  background: -moz-linear-gradient(94deg, rgba(51,51,51,1) 0%, rgba(101,141,93,1) 100%); /* ff3.6+ */",
                "+  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, rgba(101,141,93,1)), color-stop(100%, rgba(51,51,51,1))); /* safari4+,chrome */",
                "+  background: -webkit-linear-gradient(94deg, rgba(51,51,51,1) 0%, rgba(101,141,93,1) 100%); /* safari5.1+,chrome10+ */",
                "+  background: -o-linear-gradient(94deg, rgba(51,51,51,1) 0%, rgba(101,141,93,1) 100%); /* opera 11.10+ */",
                "+  background: -ms-linear-gradient(94deg, rgba(51,51,51,1) 0%, rgba(101,141,93,1) 100%); /* ie10+ */",
                "+  background: linear-gradient(356deg, rgba(51,51,51,1) 0%, rgba(101,141,93,1) 100%); /* w3c */",
                "+  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#658d5d', endColorstr='#333333',GradientType=0 ); /* ie6-9 */",
                "+}",
                "+",
                "+#login-container .card {",
                "+  background-color: #151515;",
                "+  color: white;",
                "+}",
                "+",
                "+#login-container .login-logo {",
                "+  background-color: rgba(255, 255, 255, 0.15);",
                "+  border-radius: 10px;",
                "+",
                "+  margin: 0px auto 20px auto;",
                "+}",
                "+",
                "+#login-container input,",
                "+#login-container select,",
                "+#login-container select option {",
                "+  color: white;",
                "+  background: #313131;",
                "+}",
                "+",
                "+#login-container input:disabled {",
                "+  background: #6d6d6d;",
                "+}",
                "+",
                "+#login-container .btn-link {",
                "+  color: #82b9e8;",
                "+}",
                "+#login-container .btn-link:focus, ",
                "+#login-container .btn-link:hover {",
                "+  color: #b5dcff;",
                "+}",
                "+",
                "+#login-container .login-btn {",
                "+  color: white;",
                "+  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#6a9647), color-stop(100%,#48543d));",
                "+",
                "+  background: linear-gradient(top, #6a9647 0%,#48543d 100%);",
                "+  background: -webkit-linear-gradient(top, #6a9647 0%,#48543d 100%);",
                "+  background: -moz-linear-gradient(top, #6a9647 0%, #48543d 100%);",
                "+  background: -o-linear-gradient(top, #6a9647 0%,#48543d 100%);",
                "+  background: -ms-linear-gradient(top, #6a9647 0%,#48543d 100%);",
                "+}",
                "+",
                "+#login-container .form-group {",
                "+  margin-bottom: 20px;",
                "+}",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/index.html b/client/enduser/src/main/resources/META-INF/resources/app/index.html",
                "index 3aa57f53a1..6ef3c4d5b9 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/index.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/index.html",
                "@@ -34,3 +34,2 @@ under the License.",
                "-    <link href=\"css/login.css\" rel=\"stylesheet\" type=\"text/css\"/>",
                "     <link href=\"../webjars/jquery-ui/${jquery-ui.version}/jquery-ui.css\" rel=\"stylesheet\" type=\"text/css\"/>",
                "@@ -38,3 +37,3 @@ under the License.",
                "     <link href=\"../webjars/bootstrap-select/${bootstrap-select.version}/css/bootstrap-select.min.css\" rel=\"stylesheet\" type=\"text/css\"/>",
                "-    <link href=\"../webjars/font-awesome/${font-awesome.version}/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\"/>",
                "+    <link href=\"../webjars/font-awesome/${font-awesome.version}/css/${font-awesome.filename}\" rel=\"stylesheet\" type=\"text/css\"/>",
                "     <link href=\"../webjars/ionicons/${ionicons.version}/css/ionicons.min.css\" rel=\"stylesheet\" type=\"text/css\"/>",
                "@@ -46,5 +45,4 @@ under the License.",
                "     <link href=\"../webjars/select2/${select2.version}/select2.css\" rel=\"stylesheet\"/>",
                "-    <link href=\"css/app.css\" rel=\"stylesheet\" type=\"text/css\"/>",
                "-    <link href=\"css/login.css\" rel=\"stylesheet\" type=\"text/css\"/>",
                "-    <link href=\"css/editUser.css\" rel=\"stylesheet\" type=\"text/css\"/>",
                "+",
                "+    <link href=\"css/customSpinner.css\" rel=\"stylesheet\" type=\"text/css\"/>",
                "   </head>",
                "@@ -56,6 +54,7 @@ under the License.",
                "-    <span id=\"notifications\" kendo-notification=\"notifications\"></span>",
                "+    <span id=\"notifications\"></span>",
                "   <treasure-overlay-spinner active='spinner.active'>",
                "-    <div ui-view ng-cloak ng-controller=\"ApplicationController\" ng-init=\"initApplication()\">      ",
                "+    <div ui-view ng-cloak ng-controller=\"ApplicationController\" ng-init=\"initApplication()\">   ",
                "+",
                "     </div>    ",
                "@@ -67,6 +66,7 @@ under the License.",
                "   <script src=\"../webjars/angular-animate/${angular.version}/angular-animate.js\"></script>",
                "-  <script src=\"../webjars/angular-resource/${angular.version}/angular-resource.js\"></script>",
                "+  <script src=\"../webjars/angular-resource/${angular-resource.version}/angular-resource.js\"></script>",
                "   <script src=\"../webjars/angular-cookies/${angular.version}/angular-cookies.js\"></script>",
                "   <script src=\"../webjars/angular-sanitize/${angular.version}/angular-sanitize.js\"></script>",
                "-  <script src=\"../webjars/angular-ui-bootstrap/${angular-ui-bootstrap.version}/ui-bootstrap-tpls.js\"></script>",
                "+  <script src=\"../webjars/ui-bootstrap4/${ui-bootstrap.version}/dist/ui-bootstrap.js\"></script>",
                "+  <script src=\"../webjars/ui-bootstrap4/${ui-bootstrap.version}/dist/ui-bootstrap-tpls.js\"></script>",
                "   <script src=\"../webjars/angular-ui-select/${angular-ui-select.version}/select.js\"></script>",
                "@@ -81,3 +81,3 @@ under the License.",
                "   <script src=\"../webjars/ng-password-strength/${ng-password-strength.version}/dist/scripts/ng-password-strength.min.js\"></script>",
                "-  <script type=\"text/javascript\" src=\"../webjars/bootstrap-select/${bootstrap-select.version}/js/bootstrap-select.min.js\"></script>",
                "+  <script src=\"../webjars/bootstrap-select/${bootstrap-select.version}/js/bootstrap-select.min.js\"></script>",
                "   <script src=\"../webjars/FileSaver.js/${fileSaver.version}/FileSaver.js\"></script>",
                "@@ -85,3 +85,3 @@ under the License.",
                "   <script src=\"../webjars/angular-translate/${angular-translate.version}/angular-translate.js\"></script>",
                "-  <script src=\"../webjars/angular-translate-loader-partial/${angular-translate.version}/angular-translate-loader-partial.js\"></script>",
                "+  <script src=\"../webjars/angular-translate-loader-partial/${angular-translate-loader-partial.version}/angular-translate-loader-partial.js\"></script>",
                "   <script src=\"../webjars/angular-translate-storage-cookie/${angular-translate.version}/angular-translate-storage-cookie.js\"></script>",
                "@@ -98,2 +98,3 @@ under the License.",
                "   <script src=\"js/services/infoService.js\"></script>",
                "+  <script src=\"js/services/dynamicTemplateService.js\"></script>",
                "   <script src=\"js/services/resourceService.js\"></script>",
                "@@ -118,3 +119,3 @@ under the License.",
                "   <script src=\"js/directives/dynamicVirtualAttributes.js\"></script>",
                "-  <script src=\"js/directives/navigationButtons.js\"></script>",
                "+  <script src=\"js/directives/navigationButtonsPartial.js\"></script>",
                "   <script src=\"js/directives/loader.js\"></script>",
                "@@ -128,2 +129,3 @@ under the License.",
                "   <script src=\"js/directives/fileInput.js\"></script>",
                "+  <script src=\"js/directives/dynamicTemplateItem.js\"></script>",
                "   <!--validator-->",
                "@@ -136,2 +138,3 @@ under the License.",
                "   <script src=\"js/util/genericUtil.js\"></script>",
                "+  <script src=\"js/util/assetsManager.js\"></script>",
                " </body>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/app.js b/client/enduser/src/main/resources/META-INF/resources/app/js/app.js",
                "index 93a4feaaba..bcd3fc4b01 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/app.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/app.js",
                "@@ -68,3 +68,8 @@ app.config(['$stateProvider', '$urlRouterProvider', '$httpProvider', '$translate",
                "               url: '/',",
                "-              templateUrl: 'views/self.html'",
                "+              templateUrl: 'views/self.html',",
                "+              resolve: {",
                "+                loadAssets: ['DynamicTemplateService', function (DynamicTemplateService) {",
                "+                    return DynamicTemplateService.getGeneralAssetsContent([\"css\"]);",
                "+                  }]",
                "+              }",
                "             })",
                "@@ -74,2 +79,3 @@ app.config(['$stateProvider', '$urlRouterProvider', '$httpProvider', '$translate",
                "             })",
                "+",
                "             /* <Extensions> */",
                "@@ -101,2 +107,3 @@ app.config(['$stateProvider', '$urlRouterProvider', '$httpProvider', '$translate",
                "             /* </Extensions> */",
                "+",
                "             .state('user-self-update', {",
                "@@ -291,4 +298,4 @@ app.config(['$stateProvider', '$urlRouterProvider', '$httpProvider', '$translate",
                "   }]);",
                "-app.run(['$rootScope', '$location', '$state', 'AuthService',",
                "-  function ($rootScope, $location, $state, AuthService) {",
                "+app.run(['$rootScope', '$location', '$state', 'AuthService', '$transitions',",
                "+  function ($rootScope, $location, $state, AuthService, $transitions) {",
                "     /*",
                "@@ -301,12 +308,16 @@ app.run(['$rootScope', '$location', '$state', 'AuthService',",
                "      */",
                "-    $rootScope.$on('$routeChangeError', function (event, current, previous, rejection) {",
                "-      if (rejection === 'Not Authenticated') {",
                "-        $location.path('/self');",
                "+    $transitions.onError({}, function (trans) {",
                "+      if (trans.error().message === 'Not Authenticated') {",
                "+        $state.go('home');",
                "       }",
                "     });",
                "-    $rootScope.$on('$stateChangeSuccess', function (event, toState) {",
                "+",
                "+    $transitions.onSuccess({}, function (trans) {",
                "+      var toState = trans.$to();",
                "+      var fromState = trans.$from();",
                "+",
                "       if (toState.name === 'create') {",
                "-        $state.go('create.credentials');",
                "+        $state.go('create' + $rootScope.getWizardFirstStep());",
                "       } else if (toState.name === 'update') {",
                "-        $state.go('update.credentials');",
                "+        $state.go('update' + $rootScope.getWizardFirstStep());",
                "       } else if (toState.name.indexOf(\"update\") > -1) {",
                "@@ -316,16 +327,17 @@ app.run(['$rootScope', '$location', '$state', 'AuthService',",
                "           } else {",
                "-            $state.go('self');",
                "+            $state.go('home');",
                "           }",
                "         }, function (response) {",
                "-          console.error(\"not logged\");",
                "-          $state.go('self');",
                "+          console.error(\"Not logged\");",
                "+          $state.go('home');",
                "         }",
                "         );",
                "-",
                "       } else if (toState.name === 'home' || toState.name === 'self') {",
                "+        if (fromState.name === 'home' || fromState.name === 'self') {",
                "+          return false;",
                "+        }",
                "+",
                "         AuthService.islogged().then(function (response) {",
                "           if (response === \"true\") {",
                "-            $state.go('update.credentials');",
                "-          } else {",
                "-            $state.go('self');",
                "+            $state.go('update' + $rootScope.getWizardFirstStep());",
                "           }",
                "@@ -333,5 +345,4 @@ app.run(['$rootScope', '$location', '$state', 'AuthService',",
                "           console.error(\"not logged\");",
                "-          $state.go('self');",
                "-        }",
                "-        );",
                "+          $state.go('home');",
                "+        });",
                "         /*",
                "@@ -340,4 +351,12 @@ app.run(['$rootScope', '$location', '$state', 'AuthService',",
                "       } else if (toState.name === 'create.finish') {",
                "+        if (fromState.name === 'create.finish') {",
                "+          return false;",
                "+        }",
                "+",
                "         $rootScope.endReached = true;",
                "       } else {",
                "+        if (fromState.name === toState.name) {",
                "+          return false;",
                "+        }",
                "+",
                "         $state.go(toState);",
                "@@ -345,2 +364,3 @@ app.run(['$rootScope', '$location', '$state', 'AuthService',",
                "     });",
                "+",
                "     $rootScope.spinner = {",
                "@@ -355,5 +375,5 @@ app.run(['$rootScope', '$location', '$state', 'AuthService',",
                "   }]);",
                "-app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'InfoService', 'SAML2IdPService',",
                "-  'OIDCProviderService',",
                "-  function ($scope, $rootScope, $location, InfoService, SAML2IdPService, OIDCProviderService) {",
                "+app.controller('ApplicationController', ['$scope', '$rootScope', 'InfoService', 'SAML2IdPService',",
                "+  'OIDCProviderService', 'DynamicTemplateService',",
                "+  function ($scope, $rootScope, InfoService, SAML2IdPService, OIDCProviderService, DynamicTemplateService) {",
                "     $scope.initApplication = function () {",
                "@@ -398,2 +418,53 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I",
                "+      var doGetDynamicTemplateJSON = function (callback) {",
                "+        if (!$rootScope.dynTemplate) {",
                "+          DynamicTemplateService.getContent().then(",
                "+                  function (response) {",
                "+                    /* ",
                "+                     * USER dynamic template JSON",
                "+                     */",
                "+                    $rootScope.dynTemplate = response;",
                "+",
                "+                    /*",
                "+                     * Wizard steps from JSON",
                "+                     */",
                "+                    $scope.wizard = response.wizard.steps;",
                "+                    $scope.wizardFirstStep = response.wizard.firstStep;",
                "+",
                "+                    callback($rootScope.dynTemplate);",
                "+                  },",
                "+                  function (response) {",
                "+                    console.error(\"Something went wrong while accessing dynamic template resource\", response);",
                "+                  });",
                "+        } else {",
                "+          callback($rootScope.dynTemplate);",
                "+        }",
                "+      };",
                "+      $rootScope.getDynamicTemplateInfo = function (type, key, callback) {",
                "+        if (type) {",
                "+          doGetDynamicTemplateJSON(function (templateJSON) {",
                "+            callback((templateJSON && templateJSON[\"templates\"] && templateJSON[\"templates\"][type])",
                "+                    ? templateJSON[\"templates\"][type][key]",
                "+                    : \"\");",
                "+          });",
                "+        } else {",
                "+          callback(\"\");",
                "+        }",
                "+      };",
                "+      $rootScope.getDynamicTemplateOtherInfo = function (type, key, callback) {",
                "+        if (type) {",
                "+          doGetDynamicTemplateJSON(function (templateJSON) {",
                "+            callback((templateJSON && templateJSON[type])",
                "+                    ? templateJSON[type][key]",
                "+                    : \"\");",
                "+          });",
                "+        } else {",
                "+          callback(\"\");",
                "+        }",
                "+      };",
                "+",
                "+      $rootScope.getWizardFirstStep = function () {",
                "+        return ($scope.wizardFirstStep ? ('.' + $scope.wizardFirstStep) : '');",
                "+      };",
                "+",
                "       InfoService.getInfo().then(",
                "@@ -409,3 +480,3 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I",
                "                  */",
                "-                $rootScope.customForm = response.customForm;",
                "+                $rootScope.customFormAttributes = response.customFormAttributes;",
                "               },",
                "@@ -414,2 +485,3 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I",
                "               });",
                "+",
                "       /* <Extensions> */",
                "@@ -423,6 +495,2 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I",
                "       /* </Extensions> */",
                "-      /* ",
                "-       * configuration getters",
                "-       */",
                "-",
                "       /* <Extensions> */",
                "@@ -436,2 +504,3 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I",
                "       /* </Extensions> */",
                "+",
                "       /* ",
                "@@ -464,2 +533,3 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I",
                "       };",
                "+",
                "       /* ",
                "@@ -479,2 +549,3 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I",
                "       };",
                "+",
                "       /*",
                "@@ -484,4 +555,9 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I",
                "        */",
                "-      $scope.notification = $('#notifications').kendoNotification().data(\"kendoNotification\");",
                "-      $scope.notification.setOptions({stacking: \"down\"});",
                "+      $scope.notificationSuccessTimeout = 4000;",
                "+//      $scope.notification = $('#notifications').kendoNotification().data(\"kendoNotification\");",
                "+      $scope.notification = $(\"#notifications\").kendoNotification({",
                "+        stacking: \"down\",",
                "+        hideOnClick: true,",
                "+        width: 320",
                "+      }).data(\"kendoNotification\");",
                "       $scope.notification.options.position[\"top\"] = 20;",
                "@@ -491,3 +567,3 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I",
                "           window.scrollTo(0, 0);",
                "-          component.options.autoHideAfter = 3000;",
                "+          component.options.autoHideAfter = $scope.notificationSuccessTimeout;",
                "           component.show(message, \"success\");",
                "@@ -512,3 +588,3 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I",
                "         var result = false;",
                "-        if ($scope.notification !== null) {",
                "+        if ($scope.notification) {",
                "           var pendingNotifications = $scope.notification.getNotifications();",
                "@@ -525,3 +601,3 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I",
                "       $scope.hideNotifications = function (timer) {",
                "-        if ($scope.notification !== null) {",
                "+        if ($scope.notification) {",
                "           var pendingNotifications = $scope.notification.getNotifications();",
                "@@ -549,2 +625,3 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I",
                "       };",
                "+",
                "       /*",
                "@@ -554,3 +631,3 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I",
                "       $rootScope.$on(\"$locationChangeStart\", function (event, next, current) {",
                "-        $scope.hideNotifications(3000);",
                "+        $scope.hideNotifications($scope.notificationSuccessTimeout);",
                "       });",
                "@@ -564,16 +641,3 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I",
                "       });",
                "-      /*",
                "-       |--------------------------------------------------------------------------",
                "-       | Wizard configuration",
                "-       |--------------------------------------------------------------------------",
                "-       */",
                "-      $scope.wizard = {",
                "-        \"credentials\": {url: \"/credentials\"},",
                "-        \"groups\": {url: \"/groups\"},",
                "-        \"plainSchemas\": {url: \"/plainSchemas\"},",
                "-        \"derivedSchemas\": {url: \"/derivedSchemas\"},",
                "-        \"virtualSchemas\": {url: \"/virtualSchemas\"},",
                "-        \"resources\": {url: \"/resources\"},",
                "-        \"finish\": {url: \"/finish\"}",
                "-      };",
                "+",
                "       /*",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/LoginController.js b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/LoginController.js",
                "index d2b755c030..f92c15c082 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/LoginController.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/LoginController.js",
                "@@ -20,4 +20,5 @@",
                " 'use strict';",
                "-angular.module(\"login\").controller(\"LoginController\", ['$scope', '$rootScope', '$http', '$location', 'AuthService',",
                "-  function ($scope, $rootScope, $http, $location, AuthService) {",
                "+angular.module(\"login\").controller(\"LoginController\", ['$scope', '$rootScope', '$http', '$state', '$location',",
                "+  'AuthService',",
                "+  function ($scope, $rootScope, $http, $state, $location, AuthService) {",
                "@@ -39,3 +40,3 @@ angular.module(\"login\").controller(\"LoginController\", ['$scope', '$rootScope', '",
                "         // got to update page",
                "-        $location.path(\"/self/update\");",
                "+        $state.go(\"update\" + $rootScope.getWizardFirstStep());",
                "       }, function (response) {",
                "@@ -67,3 +68,3 @@ angular.module(\"login\").controller(\"LoginController\", ['$scope', '$rootScope', '",
                "     $scope.selfCreate = function () {",
                "-      $location.path(\"/self/create\");",
                "+      $state.go(\"create\" + $rootScope.getWizardFirstStep());",
                "     };",
                "@@ -71,3 +72,3 @@ angular.module(\"login\").controller(\"LoginController\", ['$scope', '$rootScope', '",
                "     $scope.passwordReset = function () {",
                "-      $location.path(\"/passwordreset\");",
                "+      $state.go(\"passwordreset\");",
                "     };",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/OIDCClientController.js b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/OIDCClientController.js",
                "index f3eab688a4..8d7b3cdd96 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/OIDCClientController.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/OIDCClientController.js",
                "@@ -20,5 +20,5 @@",
                " 'use strict';",
                "-angular.module(\"login\").controller(\"OIDCClientController\", function ($scope, $rootScope, $location, userAttrs) {",
                "+angular.module(\"login\").controller(\"OIDCClientController\", function ($scope, $rootScope, $state, userAttrs) {",
                "   $scope.selfCreate = function () {",
                "-    $location.path(\"/self/create\");",
                "+    $state.go(\"create\" + $rootScope.getWizardFirstStep());",
                "   };",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/SAML2SPController.js b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/SAML2SPController.js",
                "index 05adf188dc..6d6bd33fab 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/SAML2SPController.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/SAML2SPController.js",
                "@@ -20,5 +20,5 @@",
                " 'use strict';",
                "-angular.module(\"login\").controller(\"SAML2SPController\", function ($scope, $rootScope, $location, userAttrs) {",
                "+angular.module(\"login\").controller(\"SAML2SPController\", function ($scope, $rootScope, $state, userAttrs) {",
                "   $scope.selfCreate = function () {",
                "-    $location.path(\"/self/create\");",
                "+    $state.go(\"create\" + $rootScope.getWizardFirstStep());",
                "   };",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "index 629c90dc10..7718db7b58 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "@@ -121,8 +121,8 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "           var plainSchemaKey = schemas.plainSchemas[i].key;",
                "-          var initialAttributeValues = $rootScope.customForm != null",
                "-                  && $rootScope.customForm[\"PLAIN\"] != null",
                "-                  && $rootScope.customForm[\"PLAIN\"][\"attributes\"] != null",
                "-                  && $rootScope.customForm[\"PLAIN\"][\"attributes\"][plainSchemaKey] != null",
                "-                  && $rootScope.customForm[\"PLAIN\"][\"attributes\"][plainSchemaKey].defaultValues",
                "-                  ? $rootScope.customForm[\"PLAIN\"][\"attributes\"][plainSchemaKey].defaultValues",
                "+          var initialAttributeValues = $rootScope.customFormAttributes",
                "+                  && $rootScope.customFormAttributes[\"PLAIN\"]",
                "+                  && $rootScope.customFormAttributes[\"PLAIN\"][\"attributes\"]",
                "+                  && $rootScope.customFormAttributes[\"PLAIN\"][\"attributes\"][plainSchemaKey]",
                "+                  && $rootScope.customFormAttributes[\"PLAIN\"][\"attributes\"][plainSchemaKey].defaultValues",
                "+                  ? $rootScope.customFormAttributes[\"PLAIN\"][\"attributes\"][plainSchemaKey].defaultValues",
                "                   : [];",
                "@@ -137,3 +137,3 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "             }",
                "-            ",
                "+",
                "             if ($scope.loadFromOIDCAuthSelfReg) {",
                "@@ -195,4 +195,4 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "             }",
                "-            ",
                "-             if ($scope.loadFromOIDCAuthSelfReg) {",
                "+",
                "+            if ($scope.loadFromOIDCAuthSelfReg) {",
                "               $scope.user.virAttrs[virSchemaKey].values = findLoadedOIDCAttrValue(virSchemaKey);",
                "@@ -223,3 +223,3 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "         delete $rootScope.saml2idps.userAttrs;",
                "-        ",
                "+",
                "         //clean OIDC Self Reg user attributes variable",
                "@@ -366,3 +366,3 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "           if ($scope.user.mustChangePassword) {",
                "-            $location.path('/mustchangepassword');",
                "+            $state.go('mustchangepassword');",
                "           } else {",
                "@@ -471,4 +471,4 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "           }",
                "-        } ",
                "-        ",
                "+        }",
                "+",
                "         if ($scope.loadFromOIDCAuthSelfReg) {",
                "@@ -478,3 +478,3 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "           }",
                "-        } ",
                "+        }",
                "       } else {",
                "@@ -492,3 +492,4 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "           $rootScope.currentOp = \"SUCCESSFULLY_CREATED\";",
                "-          $scope.success({successMessage: $filter('translate')([\"USER\"]).USER",
                "+          $scope.success({",
                "+            successMessage: $filter('translate')([\"USER\"]).USER",
                "                     + \" \"",
                "@@ -496,3 +497,4 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "                     + \" \"",
                "-                    + $filter('translate')([\"SUCCESSFULLY_CREATED\"]).SUCCESSFULLY_CREATED});",
                "+                    + $filter('translate')([\"SUCCESSFULLY_CREATED\"]).SUCCESSFULLY_CREATED",
                "+          });",
                "         }, function (response) {",
                "@@ -512,3 +514,4 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "           $rootScope.currentOp = \"SUCCESSFULLY_UPDATED\";",
                "-          $scope.logout({successMessage: $filter('translate')([\"USER\"]).USER",
                "+          $scope.logout({",
                "+            successMessage: $filter('translate')([\"USER\"]).USER",
                "                     + \" \"",
                "@@ -516,3 +519,4 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "                     + \" \"",
                "-                    + $filter('translate')([\"SUCCESSFULLY_UPDATED\"]).SUCCESSFULLY_UPDATED});",
                "+                    + $filter('translate')([\"SUCCESSFULLY_UPDATED\"]).SUCCESSFULLY_UPDATED",
                "+          });",
                "         }, function (response) {",
                "@@ -654,3 +658,3 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l",
                "       $translate.use($scope.languages.selectedLanguage.code);",
                "-      $location.path('/self');",
                "+      $state.go('home');",
                "       $rootScope.endReached = false;",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicPlainAttribute.js b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicPlainAttribute.js",
                "index 8ccaa0205a..7ed07e1170 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicPlainAttribute.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicPlainAttribute.js",
                "@@ -129,7 +129,7 @@ angular.module('self')",
                "               $scope.customReadonly = function (schemaKey) {",
                "-                return  $rootScope.customForm != null",
                "-                        && $rootScope.customForm[\"PLAIN\"] != null",
                "-                        && $rootScope.customForm[\"PLAIN\"][\"attributes\"] != null",
                "-                        && $rootScope.customForm[\"PLAIN\"][\"attributes\"][schemaKey] != null",
                "-                        && $rootScope.customForm[\"PLAIN\"][\"attributes\"][schemaKey].readonly;",
                "+                return  $rootScope.customFormAttributes",
                "+                        && $rootScope.customFormAttributes[\"PLAIN\"]",
                "+                        && $rootScope.customFormAttributes[\"PLAIN\"][\"attributes\"]",
                "+                        && $rootScope.customFormAttributes[\"PLAIN\"][\"attributes\"][schemaKey]",
                "+                        && $rootScope.customFormAttributes[\"PLAIN\"][\"attributes\"][schemaKey].readonly;",
                "               };",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicTemplateItem.js b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicTemplateItem.js",
                "new file mode 100644",
                "index 0000000000..f82210636f",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicTemplateItem.js",
                "@@ -0,0 +1,79 @@",
                "+/* ",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+'use strict';",
                "+",
                "+angular.module('self')",
                "+        .directive('dynamicTemplateItem', ['$rootScope', '$compile', '$http', 'AssetsManager',",
                "+          function ($rootScope, $compile, $http, AssetsManager) {",
                "+",
                "+            var checkGeneralAssets = function () {",
                "+              $rootScope.getDynamicTemplateOtherInfo(\"generalAssets\", \"css\", function (assets) {",
                "+                if (assets && assets.length) {",
                "+                  for (var i = 0; i < assets.length; i++) {",
                "+                    if (!AssetsManager.checkAlreadyLoaded(assets[i], \"css\")) {",
                "+                      AssetsManager.inject(\"asset_general_css_\" + i, assets[i], \"css\");",
                "+                    }",
                "+                  }",
                "+                }",
                "+              });",
                "+            };",
                "+",
                "+            var linker = function ($scope, $element, $attrs) {",
                "+              // compile template",
                "+              $rootScope.getDynamicTemplateInfo($attrs.type, \"templateUrl\", function (templateUrl) {",
                "+                if (templateUrl) {",
                "+                  $http.get(templateUrl).then(function (response) {",
                "+                    $element.html(response.data).show();",
                "+                    $compile($element.contents())($scope);",
                "+                  }, function (e) {",
                "+                    console.error(e);",
                "+                  });",
                "+                }",
                "+              });",
                "+",
                "+              // inject template assets",
                "+              $rootScope.getDynamicTemplateInfo($attrs.type, \"css\", function (assets) {",
                "+                if (assets && assets.length) {",
                "+                  for (var i = 0; i < assets.length; i++) {",
                "+                    AssetsManager.inject(\"asset_css_\" + i, assets[i], \"css\");",
                "+                  }",
                "+                }",
                "+              });",
                "+",
                "+              // remove useless assets for little optimization",
                "+              if ($attrs.type !== \"login\") {",
                "+                $rootScope.getDynamicTemplateInfo(\"login\", \"css\", function (assets) {",
                "+                  for (var i = 0; i < assets.length; i++) {",
                "+                    AssetsManager.remove(assets[i], \"css\");",
                "+                  }",
                "+                });",
                "+              }",
                "+",
                "+              // check general assets are always loaded (in case page refreshing in wizard)",
                "+              checkGeneralAssets();",
                "+            };",
                "+",
                "+            return {",
                "+              restrict: \"E\",",
                "+              link: linker,",
                "+              replace: true",
                "+            };",
                "+",
                "+          }]);",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicVirtualAttribute.js b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicVirtualAttribute.js",
                "index 85e2934801..5a1d82c9cf 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicVirtualAttribute.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicVirtualAttribute.js",
                "@@ -31,8 +31,8 @@ angular.module('self')",
                "             controller: function ($scope, $rootScope) {",
                "-              var customValues = $rootScope.customForm != null",
                "-                      && $rootScope.customForm[\"VIRTUAL\"] != null",
                "-                      && $rootScope.customForm[\"VIRTUAL\"][\"attributes\"] != null",
                "-                      && $rootScope.customForm[\"VIRTUAL\"][\"attributes\"][$scope.schema.key] != null",
                "-                      && $rootScope.customForm[\"VIRTUAL\"][\"attributes\"][$scope.schema.key].defaultValues",
                "-                      ? $rootScope.customForm[\"VIRTUAL\"][\"attributes\"][$scope.schema.key].defaultValues",
                "+              var customValues = $rootScope.customFormAttributes",
                "+                      && $rootScope.customFormAttributes[\"VIRTUAL\"]",
                "+                      && $rootScope.customFormAttributes[\"VIRTUAL\"][\"attributes\"]",
                "+                      && $rootScope.customFormAttributes[\"VIRTUAL\"][\"attributes\"][$scope.schema.key]",
                "+                      && $rootScope.customFormAttributes[\"VIRTUAL\"][\"attributes\"][$scope.schema.key].defaultValues",
                "+                      ? $rootScope.customFormAttributes[\"VIRTUAL\"][\"attributes\"][$scope.schema.key].defaultValues",
                "                       : [];",
                "@@ -57,7 +57,7 @@ angular.module('self')",
                "               $scope.customReadonly = function (schemaKey) {",
                "-                return  $rootScope.customForm != null",
                "-                        && $rootScope.customForm[\"VIRTUAL\"] != null",
                "-                        && $rootScope.customForm[\"VIRTUAL\"][\"attributes\"] != null",
                "-                        && $rootScope.customForm[\"VIRTUAL\"][\"attributes\"][schemaKey] != null",
                "-                        && $rootScope.customForm[\"VIRTUAL\"][\"attributes\"][schemaKey].readonly;",
                "+                return  $rootScope.customFormAttributes",
                "+                        && $rootScope.customFormAttributes[\"VIRTUAL\"]",
                "+                        && $rootScope.customFormAttributes[\"VIRTUAL\"][\"attributes\"]",
                "+                        && $rootScope.customFormAttributes[\"VIRTUAL\"][\"attributes\"][schemaKey]",
                "+                        && $rootScope.customFormAttributes[\"VIRTUAL\"][\"attributes\"][schemaKey].readonly;",
                "               };",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicVirtualAttributes.js b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicVirtualAttributes.js",
                "index 300c73df4d..8532bef246 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicVirtualAttributes.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicVirtualAttributes.js",
                "@@ -58,3 +58,4 @@ angular.module('self')",
                "               $scope.addVirtualAttributeField = function (virSchemaKey) {",
                "-                $scope.dynamicForm.virtualAttributeTable[virSchemaKey].fields.push(virSchemaKey + \"_\" + ($scope.dynamicForm.virtualAttributeTable[virSchemaKey].fields.length));",
                "+                $scope.dynamicForm.virtualAttributeTable[virSchemaKey].fields.push(virSchemaKey + \"_\"",
                "+                        + ($scope.dynamicForm.virtualAttributeTable[virSchemaKey].fields.length));",
                "               };",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/fileInput.js b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/fileInput.js",
                "index 50f4a7f989..331c0f47a5 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/fileInput.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/fileInput.js",
                "@@ -37,4 +37,4 @@ angular.module('self')",
                "                   fileActionSettings: {'showZoom': false, indicatorNew: '', 'removeTitle': 'boh'},",
                "-                  removeClass: \"btn btn-default\",",
                "-                  browseClass: \"btn btn-default\",",
                "+                  removeClass: \"btn btn-secondary btn-default\",",
                "+                  browseClass: \"btn btn-secondary btn-default\",",
                "                   browseLabel: '',",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/directives/navigationButtonsPartial.js b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/navigationButtonsPartial.js",
                "new file mode 100644",
                "index 0000000000..6d0d81dad4",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/directives/navigationButtonsPartial.js",
                "@@ -0,0 +1,71 @@",
                "+/* ",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+'use strict';",
                "+",
                "+angular.module('self')",
                "+        .directive('navigationButtonsPartial', ['$state', 'GenericUtil', 'ValidationExecutor',",
                "+          function ($state, GenericUtil, ValidationExecutor) {",
                "+            return {",
                "+",
                "+              restrict: 'E',",
                "+              templateUrl: 'views/navigationButtonsPartial.html',",
                "+              scope: {",
                "+                base: \"@\",",
                "+                current: \"@\"",
                "+              },",
                "+              link: function (scope, element, attrs) {",
                "+                var base = (scope.base && scope.base !== \"\" ? scope.base + \".\" : \"\");",
                "+                scope.wizard = scope.$eval(attrs.wizard) || scope.$parent.wizard || scope.$parent.$parent.wizard;",
                "+                scope.previous = \"none\";",
                "+                if (scope.wizard) {",
                "+                  var urls = Object.keys(scope.wizard);",
                "+                  var index = urls.indexOf(scope.current);",
                "+                  scope.previous = (index > 0 ? base + urls[index - 1] : scope.previous = \"none\");",
                "+                  scope.next = (index < urls.length - 1 ? base + urls[index + 1] : scope.next = \"none\");",
                "+                }",
                "+              },",
                "+              controller: function ($scope) {",
                "+                $scope.validateAndNext = function (event, state) {",
                "+                  //getting the enclosing form in order to access to its name                ",
                "+                  var currentForm = GenericUtil.getEnclosingForm(event.target);",
                "+                  if (currentForm !== null) {",
                "+                    if (ValidationExecutor.validate(currentForm, $scope.$parent)) {",
                "+                      if (state) {",
                "+                        $scope.nextTab(state);",
                "+                      } else if ($scope.wizard) {",
                "+                        $scope.nextTab($scope.next);",
                "+                      }",
                "+                    }",
                "+                  }",
                "+",
                "+                };",
                "+",
                "+                $scope.nextTab = function (state) {",
                "+                  //change route through parent event",
                "+                  $state.go(state);",
                "+                };",
                "+",
                "+                $scope.previousTab = function () {",
                "+                  //change route through parent event",
                "+                  $state.go($scope.previous);",
                "+                };",
                "+              }",
                "+",
                "+            };",
                "+          }]);",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/services/dynamicTemplateService.js b/client/enduser/src/main/resources/META-INF/resources/app/js/services/dynamicTemplateService.js",
                "new file mode 100644",
                "index 0000000000..b3348e0220",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/services/dynamicTemplateService.js",
                "@@ -0,0 +1,67 @@",
                "+/* ",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+'use strict';",
                "+",
                "+angular.module('SyncopeEnduserApp')",
                "+        .factory('DynamicTemplateService', ['$q', '$http', 'AssetsManager',",
                "+          function ($q, $http, AssetsManager) {",
                "+",
                "+            var dynTemplateService = {};",
                "+            var dynTemplateUrl = '../api/dynamicTemplate';",
                "+",
                "+            var error = function (response) {",
                "+              console.error(\"Something went wrong while retrieving dynamic template resource\", response);",
                "+              return $q.reject(response.data || response.statusText);",
                "+            };",
                "+",
                "+            var loadAssets = function (category, assets, types) {",
                "+              var allPromises = types.reduce((acc, type) => {",
                "+                if (assets[category][type]) {",
                "+                  var currentAssetsPromises =",
                "+                          assets[category][type].map((url, index) => AssetsManager.",
                "+                            inject(\"elem_\" + index, url, type));",
                "+                  return acc.concat(currentAssetsPromises);",
                "+                }",
                "+              }, []);",
                "+",
                "+              return $q.all(allPromises);",
                "+            };",
                "+",
                "+            dynTemplateService.getContent = function () {",
                "+              return $http",
                "+                      .get(dynTemplateUrl)",
                "+                      .then(function (response) {",
                "+                        return response.data;",
                "+                      }, error);",
                "+            };",
                "+",
                "+            dynTemplateService.getGeneralAssetsContent = function (types) {",
                "+              return $http",
                "+                      .get(dynTemplateUrl)",
                "+                      .then(function (response) {",
                "+                        return loadAssets(\"generalAssets\", response.data, types);",
                "+                      }, error);",
                "+            };",
                "+",
                "+            return dynTemplateService;",
                "+",
                "+          }]);",
                "+",
                "+",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/util/assetsManager.js b/client/enduser/src/main/resources/META-INF/resources/app/js/util/assetsManager.js",
                "new file mode 100644",
                "index 0000000000..48ec119d6b",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/util/assetsManager.js",
                "@@ -0,0 +1,105 @@",
                "+/* ",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+",
                "+'use strict';",
                "+",
                "+angular.module('SyncopeEnduserApp')",
                "+        .factory(\"AssetsManager\", ['$q', function ($q) {",
                "+            var assetsManager = {};",
                "+",
                "+            var createLink = function (id, url, deferred) {",
                "+              if (!angular.element('link#' + id).length && !angular.element('link[href=\"' + url + '\"').length) {",
                "+                var link = document.createElement('link');",
                "+                link.rel = 'stylesheet';",
                "+                link.href = url;",
                "+                link.onload = deferred.resolve;",
                "+                link.onerror = deferred.reject;",
                "+                angular.element('head').append(link);",
                "+              }",
                "+            };",
                "+",
                "+            var createScript = function (id, url, deferred) {",
                "+              if (!angular.element('script#' + id).length && !angular.element('script[src=\"' + url + '\"').length) {",
                "+                var script = document.createElement('script');",
                "+                script.src = url;",
                "+                script.onload = deferred.resolve;",
                "+                script.onerror = deferred.reject;",
                "+                angular.element('body').append(script);",
                "+              }",
                "+            };",
                "+",
                "+            assetsManager.checkAlreadyLoaded = function (url, type) {",
                "+              var elems = (type === 'css') ? document.styleSheets : ((type === 'js') ? document.scripts : '');",
                "+              var attr = (type === 'js') ? 'src' : ((type === 'css') ? 'href' : 'none');",
                "+              for (var i in elems) {",
                "+                var attrUrl = elems[i][attr] || \"\";",
                "+                var assetName = attrUrl.split(\"/\").slice(-1).join();",
                "+                if (attrUrl !== \"\"",
                "+                        && (assetName === url.split(\"/\").slice(-1).join() || assetName === url)) {",
                "+                  return true;",
                "+                }",
                "+              }",
                "+              return false;",
                "+            };",
                "+",
                "+            var checkLoaded = function (url, deferred, tries, type) {",
                "+              if (assetsManager.checkAlreadyLoaded(url, type)) {",
                "+                deferred.resolve();",
                "+                return;",
                "+              }",
                "+              tries++;",
                "+              setTimeout(function () {",
                "+                checkLoaded(url, deferred, tries, type);",
                "+              }, 50);",
                "+            };",
                "+",
                "+            var removeLoaded = function (url, type) {",
                "+              var tag = (type === 'js') ? 'script' : ((type === 'css') ? 'link' : '');",
                "+              if (assetsManager.checkAlreadyLoaded(url, type)) {",
                "+                $(tag + '[href~=\"' + url + '\"]').remove();",
                "+              }",
                "+            };",
                "+",
                "+            assetsManager.inject = function (id, url, type) {",
                "+              var tries = 0,",
                "+                      deferred = $q.defer();",
                "+",
                "+              switch (type) {",
                "+                case 'js':",
                "+                  createScript(id, url, deferred);",
                "+                  break;",
                "+",
                "+                case 'css':",
                "+                  createLink(id, url, deferred);",
                "+                  break;",
                "+",
                "+                default:",
                "+                  break;",
                "+              }",
                "+              checkLoaded(url, deferred, tries, type);",
                "+",
                "+              return deferred.promise;",
                "+            };",
                "+",
                "+            assetsManager.remove = function (url, type) {",
                "+              removeLoaded(url, type);",
                "+            };",
                "+",
                "+            return assetsManager;",
                "+          }]);",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/captcha.html b/client/enduser/src/main/resources/META-INF/resources/app/views/captcha.html",
                "index 518ab35b88..88dfae1530 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/captcha.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/captcha.html",
                "@@ -23,12 +23,12 @@ under the License.",
                "         <img id=\"captchaImg\" alt=\"captcha\" ng-src=\"{{captchaUrl}}'\"/>",
                "-        <div id=\"captchaButtons\" style=\"margin-top: 5%; margin-bottom: 10px\">",
                "-          <button id=\"refresh\" type=\"button\" class=\"btn btn-default btn-xs glyphicon glyphicon-refresh\" ",
                "+        <div id=\"captchaButtons\">",
                "+          <button id=\"refresh\" type=\"button\" class=\"btn btn-default btn-xs fa fa-refresh\" ",
                "                   ng-click=\"refreshCaptcha()\" title=\"Refresh Captcha\"></button>",
                "-          <a id=\"refresh\" class=\"btn btn-default btn-xs glyphicon glyphicon-question-sign\" title=\"What is?\"",
                "-             href=\"https://it.wikipedia.org/wiki/CAPTCHA\" target=\"_blank\"/>",
                "+          <button id=\"questionCaptcha\" class=\"btn btn-default btn-xs fa fa-question-circle\" title=\"What is?\"",
                "+                  onclick=\"window.open('https://it.wikipedia.org/wiki/CAPTCHA')\"></button>",
                "         </div>",
                "         <input class=\"form-control\" style=\"margin:auto; max-width: 260px\" type=\"text\" ng-model=\"input.value\"/>",
                "-      </div>",
                "-      <div>",
                "-        <span class=\"help-block\">{{'CAPTCHA' | translate}}</span>",
                "+        <div>",
                "+          <span class=\"help-block\">{{'CAPTCHA'| translate}}</span>",
                "+        </div>",
                "       </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/confirmpasswordreset.html b/client/enduser/src/main/resources/META-INF/resources/app/views/confirmpasswordreset.html",
                "index 70a94a985a..8d165f37ef 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/confirmpasswordreset.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/confirmpasswordreset.html",
                "@@ -19,8 +19,8 @@ under the License.",
                " <div ng-cloak class=\"container\">",
                "-  <div ng-controller=\"UserController\" style=\"box-sizing: border-box; \">",
                "+  <div ng-controller=\"UserController\">",
                "-    <div id=\"form-container\" class=\"col-md-6 col-md-offset-3\" style=\"box-sizing: border-box; background-color: #F7F7F7;\">",
                "+    <div id=\"form-container\" class=\"col-md-6 col-md-offset-3\">",
                "       <div>",
                "-        <div class=\"page-header\" style=\"text-align: left; font-weight: 700;\">",
                "+        <div class=\"page-header\">",
                "           <span>{{'CONFIRM_PASSWORD_RESET'| translate}}</span>",
                "@@ -30,6 +30,6 @@ under the License.",
                "           <div class=\"row\">            ",
                "-            <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb\">",
                "-              <a href=\"#/self\" class=\"btn btn-default\"><i class=\"glyphicon glyphicon-home\"></i></a>",
                "+            <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb col-md-12 col-md-offset-3\">",
                "+              <a href=\"#/self\" class=\"btn btn-secondary btn-default\"><i class=\"fa fa-home\"></i></a>",
                "               <!--add class breadcrumb-disabled-link to buttons to prevent click-->",
                "-              <a ui-sref-active=\"active\" class=\"btn btn-default\">Password reset</a>",
                "+              <a ui-sref-active=\"active\" class=\"btn btn-secondary btn-default\">Password reset</a>",
                "             </div>",
                "@@ -37,3 +37,4 @@ under the License.",
                "         </div>",
                "-        <form class=\"signup-form\" name=\"confirmPasswordResetForm\" ng-submit=\"confirmPasswordReset(user, $event)\" novalidate>",
                "+        <form class=\"signup-form\" name=\"confirmPasswordResetForm\" ng-submit=\"confirmPasswordReset(user, $event)\" ",
                "+              novalidate>",
                "@@ -47,3 +48,4 @@ under the License.",
                "               <label for=\"confirmPassword\">{{'CONFIRM_PASSWORD'| translate}}</label>",
                "-              <input name=\"password\" type=\"password\" class=\"form-control\" equals=\"user.password\" ng-model=\"confirmPassword.value\"",
                "+              <input name=\"password\" type=\"password\" class=\"form-control\" equals=\"user.password\" ",
                "+                     ng-model=\"confirmPassword.value\"",
                "                      placeholder=\"confirm password\" validate=\"true\">",
                "@@ -55,3 +57,3 @@ under the License.",
                "                 {{'PASSWORD_STRENGTH'| translate}}:",
                "-                <span ng-if=\"passStrength < 50\">{{'INSECURE' | translate}}</span>",
                "+                <span ng-if=\"passStrength < 50\">{{'INSECURE'| translate}}</span>",
                "                 <span ng-if=\"passStrength >= 50 && passStrength <= 82\">{{'ALMOSTSECURE'| translate}}</span>",
                "@@ -59,3 +61,4 @@ under the License.",
                "               </div>",
                "-              <div ng-password-strength=\"user.password\" strength=\"passStrength\" inner-class=\"progress-bar\" inner-class-prefix=\"progress-bar-\">",
                "+              <div ng-password-strength=\"user.password\" strength=\"passStrength\" inner-class=\"progress-bar\" ",
                "+                   inner-class-prefix=\"progress-bar-\">",
                "               </div>",
                "@@ -63,4 +66,5 @@ under the License.",
                "             <div id=\"attribute\" class=\"form-group row\">",
                "-              <button id=\"resetpassword\" type=\"submit\" class=\"btn btn-default pull-right\">{{'SUBMIT'| translate}}</button>",
                "-              <div class=\"pull-left\">",
                "+              <button id=\"resetpassword\" type=\"submit\" ",
                "+                      class=\"btn btn-secondary btn-default float-right\">{{'SUBMIT'| translate}}</button>",
                "+              <div class=\"float-left\">",
                "                 <a id=\"cancel\" href=\"#/self\" class=\"btn btn-danger\">{{'CANCEL'| translate}}</a>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicDerivedAttributes.html b/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicDerivedAttributes.html",
                "index fed36789da..1454521dba 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicDerivedAttributes.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicDerivedAttributes.html",
                "@@ -19,8 +19,11 @@ under the License.",
                " <div ng-repeat=\"groupSchema in dynamicForm.groupSchemas\">",
                "-  <uib-accordion ng-if=\"getByGroup(groupSchema).length > 0\">",
                "+  <uib-accordion ng-if=\"getByGroup(groupSchema).length\">",
                "     <div uib-accordion-group heading=\"{{groupSchema| translate}}\"",
                "          ng-init=\"status = {isOpen: (groupSchema == 'own')}\" is-open=\"status.isOpen\"",
                "-         class=\"breadcrumb-header\">",
                "+         class=\"breadcrumb-header panel panel-default\">",
                "+",
                "       <div id=\"attribute\" class=\"form-group\" ng-repeat=\"derSchema in getByGroup(groupSchema) track by $index\">",
                "-        <label for=\"derSchema.key\">{{derSchema.labels[language] || derSchema.simpleKey}} <span ng-if=\"derSchema.mandatoryCondition === 'true'\">*</span></label>",
                "+        <label for=\"derSchema.key\">{{derSchema.labels[language] || derSchema.simpleKey}}",
                "+          <span ng-if=\"derSchema.mandatoryCondition === 'true'\">*</span>",
                "+        </label>",
                "         <div ng-if=\"!derSchema.multivalue\">",
                "@@ -29,2 +32,3 @@ under the License.",
                "         </div>",
                "+",
                "         <div ng-if=\"derSchema.multivalue\">",
                "@@ -34,5 +38,5 @@ under the License.",
                "             <span>",
                "-              <button class=\"btn btn-default btn-sm minus\" ng-if=\"$index > 0\" type=\"button\" ",
                "+              <button class=\"btn btn-secondary btn-default btn-sm minus\" ng-if=\"$index > 0\" type=\"button\" ",
                "                       ng-click=\"removeAttributeField(derSchema.key, $index)\">",
                "-                <i class=\"glyphicon glyphicon-minus\" title=\"Remove value\"></i>",
                "+                <i class=\"fa fa-minus\" title=\"Remove value\"></i>",
                "               </button>",
                "@@ -41,4 +45,5 @@ under the License.",
                "           <span>",
                "-            <button class=\"btn btn-default btn-sm\" type=\"button\" ng-click=\"addAttributeField(derSchema.key)\">",
                "-              <i class=\"glyphicon glyphicon-plus\" title=\"Add value\"></i>",
                "+            <button class=\"btn btn-secondary btn-default btn-sm\" type=\"button\" ",
                "+                    ng-click=\"addAttributeField(derSchema.key)\">",
                "+              <i class=\"fa fa-plus\" title=\"Add value\"></i>",
                "             </button>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicPlainAttribute.html b/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicPlainAttribute.html",
                "index e7b5bcc90a..c6b50421ab 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicPlainAttribute.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicPlainAttribute.html",
                "@@ -28,3 +28,3 @@ under the License.",
                "     <span class=\"input-group-btn\" ng-disabled=\"schema.readonly || customReadonly(schema.key)\">  ",
                "-      <button type=\"button\" class=\"btn btn-default btn-flat\"",
                "+      <button type=\"button\" class=\"btn btn-default btn-sm btn-flat\"",
                "               confirm=\"{{'CONFIRM_REMOVE'| translate}}\"",
                "@@ -51,5 +51,6 @@ under the License.",
                "            ng-required=\"{{schema.mandatoryCondition}}\" validate=\"true\"",
                "-           ng-disabled=\"schema.readonly || customReadonly(schema.key)\" ng-init=\"initAttribute(schema, index)\" name=\"{{schema.key}}\"/>",
                "+           ng-disabled=\"schema.readonly || customReadonly(schema.key)\" ng-init=\"initAttribute(schema, index)\" ",
                "+           name=\"{{schema.key}}\"/>",
                "     <span class=\"input-group-btn\">  ",
                "-      <button type=\"button\" class=\"btn btn-default btn-flat\"",
                "+      <button type=\"button\" class=\"btn btn-default btn-sm btn-flat\"",
                "               onmousedown=\"var pwd = $(this).parent().prev('input');",
                "@@ -65,9 +66,9 @@ under the License.",
                "               >",
                "-  <i class=\"fa fa-eye\"></i>",
                "-</button>",
                "-</span>",
                "-</div>",
                "+        <i class=\"fa fa-eye\"></i>",
                "+      </button>",
                "+    </span>",
                "+  </div>",
                "-<div ng-switch-when=\"Boolean\">",
                "-  <input type=\"checkbox\" ng-model=\"user.plainAttrs[schema.key].values[index]\" ",
                "+  <div ng-switch-when=\"Boolean\">",
                "+    <input type=\"checkbox\" ng-model=\"user.plainAttrs[schema.key].values[index]\" ",
                "            ng-true-value=\"'true'\" ",
                "@@ -77,71 +78,69 @@ under the License.",
                "            ng-init=\"initAttribute(schema, index)\" />",
                "-</div>",
                "+  </div>",
                "-<input ng-switch-when=\"Long\" class=\"form-control\"",
                "-           type=\"number\"",
                "-           ng-model=\"user.plainAttrs[schema.key].values[index]\" ",
                "-           ng-required=\"{{schema.mandatoryCondition}}\"",
                "+  <input ng-switch-when=\"Long\" class=\"form-control\"",
                "+         type=\"number\"",
                "+         ng-model=\"user.plainAttrs[schema.key].values[index]\" ",
                "+         ng-required=\"{{schema.mandatoryCondition}}\"",
                "+         ng-disabled=\"schema.readonly || customReadonly(schema.key)\"",
                "+         validate=\"true\"",
                "+         ng-init=\"initAttribute(schema, index)\"",
                "+         name=\"{{schema.key}}\"/>",
                "+",
                "+  <input ng-switch-when=\"Double\" class=\"form-control\" type=\"number\" ng-model=\"user.plainAttrs[schema.key].values[index]\"",
                "+         ng-required=\"{{schema.mandatoryCondition}}\" validate=\"true\"",
                "+         ng-disabled=\"schema.readonly || customReadonly(schema.key)\"",
                "+         ng-init=\"initAttribute(schema, index)\" name=\"{{schema.key}}\"/>",
                "+",
                "+  <div ng-switch-when=\"Date\" id=\"date\">",
                "+    <input type=\"text\" class=\"dateTimePicker\"",
                "+           kendo-date-time-picker",
                "+           ng-show=\"!isDateOnly\"",
                "+           ng-model=\"extendedDate\"",
                "+           ng-required=\"{{schema.mandatoryCondition}}\" close-text=\"Close\"",
                "+           ng-init=\"initAttribute(schema, index)\"",
                "+           ng-change=\"bindDateToModel(selectedDate, extendedDate)\"",
                "            ng-disabled=\"schema.readonly || customReadonly(schema.key)\"",
                "-           validate=\"true\"",
                "+           k-ng-model=\"selectedDate\"",
                "+           data-k-format=\"languageFormat\"",
                "+           />",
                "+    <input type=\"text\" class=\"datePicker\"",
                "+           kendo-date-picker",
                "+           ng-show=\"isDateOnly\"",
                "+           ng-model=\"extendedDate\"",
                "+           ng-required=\"{{schema.mandatoryCondition}}\" close-text=\"Close\"",
                "            ng-init=\"initAttribute(schema, index)\"",
                "-           name=\"{{schema.key}}\"/>",
                "-",
                "-<input ng-switch-when=\"Double\" class=\"form-control\" type=\"number\" ng-model=\"user.plainAttrs[schema.key].values[index]\"",
                "-           ng-required=\"{{schema.mandatoryCondition}}\" validate=\"true\"",
                "+           ng-change=\"bindDateToModel(selectedDate, extendedDate)\"",
                "            ng-disabled=\"schema.readonly || customReadonly(schema.key)\"",
                "-           ng-init=\"initAttribute(schema, index)\" name=\"{{schema.key}}\"/>",
                "+           k-ng-model=\"selectedDate\"",
                "+           data-k-format=\"languageFormat\"",
                "+           />",
                "+  </div>",
                "-<div ng-switch-when=\"Date\" id=\"date\">",
                "-<input type=\"text\" class=\"dateTimePicker\"",
                "-       id=\"dateTimePicker\"",
                "-       kendo-date-time-picker",
                "-       ng-show=\"!isDateOnly\"",
                "-       ng-model=\"extendedDate\"",
                "-       ng-required=\"{{schema.mandatoryCondition}}\" close-text=\"Close\"",
                "-       ng-init=\"initAttribute(schema, index)\"",
                "-       ng-change=\"bindDateToModel(selectedDate, extendedDate)\"",
                "-ng-disabled=\"schema.readonly || customReadonly(schema.key)\"",
                "-k-ng-model=\"selectedDate\"",
                "-data-k-format=\"languageFormat\"",
                "-/>",
                "-<input type=\"text\" class=\"datePicker\"",
                "-       id=\"datePicker\"",
                "-       kendo-date-picker",
                "-       ng-show=\"isDateOnly\"",
                "-       ng-model=\"extendedDate\"",
                "-       ng-required=\"{{schema.mandatoryCondition}}\" close-text=\"Close\"",
                "-       ng-init=\"initAttribute(schema, index)\"",
                "-       ng-change=\"bindDateToModel(selectedDate, extendedDate)\"",
                "-       ng-disabled=\"schema.readonly || customReadonly(schema.key)\"",
                "-       k-ng-model=\"selectedDate\"",
                "-       data-k-format=\"languageFormat\"",
                "-             />",
                "-    </div>",
                "+  <div ng-switch-when=\"Enum\" ng-init=\"initAttribute(schema, index)\">",
                "+    <select class=\"form-control custom-select\"",
                "+            ng-model=\"user.plainAttrs[schema.key].values[index]\"",
                "+            ng-required=\"{{schema.mandatoryCondition}}\"",
                "+            ng-disabled=\"schema.readonly || customReadonly(schema.key)\">",
                "+      <option ng-repeat=\"value in enumerationValues\" value=\"{{value}}\">",
                "+        {{enumerationKeys[$index]|| value}}",
                "+      </option>",
                "+    </select>",
                "+  </div>",
                "-    <div ng-switch-when=\"Enum\" ng-init=\"initAttribute(schema, index)\">",
                "-      <select class=\"form-control\"",
                "-              ng-model=\"user.plainAttrs[schema.key].values[index]\"",
                "-              ng-required=\"{{schema.mandatoryCondition}}\"",
                "-              ng-disabled=\"schema.readonly || customReadonly(schema.key)\">",
                "-        <option ng-repeat=\"value in enumerationValues\" value=\"{{value}}\">",
                "-          {{enumerationKeys[$index]|| value}}",
                "-        </option>",
                "-      </select>",
                "-    </div>",
                "+  <div ng-switch-when=\"Binary\"",
                "+       ng-disabled=\"schema.readonly || customReadonly(schema.key)\"",
                "+       ng-init=\"initAttribute(schema, index)\">",
                "+    <input file-input type=\"file\" id=\"fileInput\" name=\"fileInput\"/>",
                "+    <button type=\"button\" title=\"Download file\" class=\"fileButton btn btn-default btn-sm\" ng-click=\"download()\">",
                "+      <i class=\"fa fa-arrow-circle-down\" ></i>",
                "+    </button>",
                "+  </div>",
                "-    <div ng-switch-when=\"Binary\"",
                "+  <input ng-switch-default class=\"form-control\" type=\"text\"",
                "+         ng-model=\"user.plainAttrs[schema.key].values[index]\"",
                "+         ng-required=\"{{schema.mandatoryCondition}}\" ",
                "          ng-disabled=\"schema.readonly || customReadonly(schema.key)\"",
                "-         ng-init=\"initAttribute(schema, index)\">",
                "-      <input file-input type=\"file\" id=\"fileInput\" name=\"fileInput\"/>",
                "-      <button type=\"button\" title=\"Download file\" class=\"fileButton btn btn-default btn-sm\" ng-click=\"download()\">",
                "-        <i class=\"glyphicon glyphicon-download\" ></i>",
                "-      </button>",
                "-    </div>",
                "-",
                "-    <input ng-switch-default class=\"form-control\" type=\"text\"",
                "-           ng-model=\"user.plainAttrs[schema.key].values[index]\"",
                "-           ng-required=\"{{schema.mandatoryCondition}}\" ",
                "-           ng-disabled=\"schema.readonly || customReadonly(schema.key)\"",
                "-           ng-init=\"initAttribute(schema, index)\"/>",
                "-  </div>",
                "+         ng-init=\"initAttribute(schema, index)\"/>",
                "+</div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicPlainAttributes.html b/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicPlainAttributes.html",
                "index 4f220aa622..77554a0da0 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicPlainAttributes.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicPlainAttributes.html",
                "@@ -19,9 +19,11 @@ under the License.",
                " <div ng-repeat=\"groupSchema in dynamicForm.groupSchemas\">",
                "-  <uib-accordion ng-if=\"getByGroup(groupSchema).length > 0\">",
                "+  <uib-accordion ng-if=\"getByGroup(groupSchema).length\">",
                "     <div uib-accordion-group heading=\"{{groupSchema| translate}}\"",
                "          ng-init=\"status = {isOpen: (groupSchema == 'own')}\" is-open=\"status.isOpen\"",
                "-         class=\"breadcrumb-header\">",
                "+         class=\"breadcrumb-header panel panel-default\">",
                "       <div id=\"attribute\" class=\"form-group\" ng-repeat=\"plainSchema in getByGroup(groupSchema) track by $index\">",
                "-        <label for=\"plainSchema.key\">{{plainSchema.labels[language] || plainSchema.simpleKey}} <span ng-if=\"plainSchema.mandatoryCondition === 'true'\">*</span></label>",
                "+        <label for=\"plainSchema.key\">{{plainSchema.labels[language] || plainSchema.simpleKey}}",
                "+          <span ng-if=\"plainSchema.mandatoryCondition === 'true'\">*</span>",
                "+        </label>",
                "         <div ng-if=\"!plainSchema.multivalue\">",
                "@@ -30,3 +32,3 @@ under the License.",
                "         </div>",
                "-        ",
                "+",
                "         <div ng-if=\"plainSchema.multivalue\">",
                "@@ -36,3 +38,3 @@ under the License.",
                "               <button class=\"btn btn-default btn-sm\" type=\"button\" ng-click=\"addAttributeField(plainSchema.key)\">",
                "-                <i class=\"glyphicon glyphicon-plus\" title=\"Add value\"></i>",
                "+                <i class=\"fa fa-plus\" title=\"Add value\"></i>",
                "               </button>",
                "@@ -40,3 +42,3 @@ under the License.",
                "                       ng-click=\"removeAttributeField(plainSchema.key, $index)\">",
                "-                <i class=\"glyphicon glyphicon-minus\" title=\"Remove value\"></i>",
                "+                <i class=\"fa fa-minus\" title=\"Remove value\"></i>",
                "               </button>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicVirtualAttributes.html b/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicVirtualAttributes.html",
                "index f4c9325d25..22bc93c5e1 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicVirtualAttributes.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/dynamicVirtualAttributes.html",
                "@@ -19,8 +19,11 @@ under the License.",
                " <div  ng-repeat=\"groupSchema in dynamicForm.groupSchemas\">",
                "-  <uib-accordion ng-if=\"getByGroup(groupSchema).length > 0\">",
                "+  <uib-accordion ng-if=\"getByGroup(groupSchema).length\">",
                "     <div uib-accordion-group heading=\"{{groupSchema| translate}}\"",
                "          ng-init=\"status = {isOpen: (groupSchema == 'own')}\" is-open=\"status.isOpen\"",
                "-         class=\"breadcrumb-header\">",
                "+         class=\"breadcrumb-header panel panel-default\">",
                "+",
                "       <div id=\"attribute\" class=\"form-group\" ng-repeat=\"virSchema in getByGroup(groupSchema) track by $index\">",
                "-        <label for=\"virSchema.key\">{{virSchema.labels[language] || virSchema.simpleKey}} <span ng-if=\"virSchema.mandatoryCondition === 'true'\">*</span></label>",
                "+        <label for=\"virSchema.key\">{{virSchema.labels[language]|| virSchema.simpleKey}}",
                "+          <span ng-if=\"virSchema.mandatoryCondition === 'true'\">*</span>",
                "+        </label>",
                "         <div ng-if=\"!virSchema.multivalue\">",
                "@@ -29,2 +32,3 @@ under the License.",
                "         </div>",
                "+",
                "         <div ng-if=\"virSchema.multivalue\">",
                "@@ -34,7 +38,7 @@ under the License.",
                "               <dynamic-virtual-attribute schema=\"virSchema\" user=\"user\" index=\"$index\"></dynamic-virtual-attribute>",
                "-              <button class=\"btn btn-default btn-sm minus\" ng-if=\"$index > 0\" type=\"button\" ",
                "+              <button class=\"btn btn-secondary btn-default btn-sm minus\" ng-if=\"$index > 0\" type=\"button\" ",
                "                       ng-click=\"removeAttributeField(virSchema.key, $index)\">",
                "-                <i class=\"glyphicon glyphicon-minus\" title=\"Remove value\"></i>",
                "-              </button><button class=\"btn btn-default btn-sm\" type=\"button\" ng-click=\"addAttributeField(virSchema.key)\">",
                "-                <i class=\"glyphicon glyphicon-plus\" title=\"Add value\"></i>",
                "+                <i class=\"fa fa-minus\" title=\"Remove value\"></i>",
                "+              </button><button class=\"btn btn-secondary btn-default btn-sm\" type=\"button\" ng-click=\"addAttributeField(virSchema.key)\">",
                "+                <i class=\"fa fa-plus\" title=\"Add value\"></i>",
                "               </button>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/editUser.html b/client/enduser/src/main/resources/META-INF/resources/app/views/editUser.html",
                "index b4ea868ca2..3d0d013e19 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/editUser.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/editUser.html",
                "@@ -19,32 +19,3 @@ under the License.",
                " <div ng-cloak class=\"container\">",
                "-  <div class=\"login-container\" ng-controller=\"UserController\" ng-init=\"initUser();\" style=\"box-sizing: border-box; \">",
                "-    <div id=\"form-container\" class=\"col-md-6 col-md-offset-3\" style=\"box-sizing: border-box; background-color: #F7F7F7;\">",
                "-      <div>",
                "-        <div class=\"page-header\" style=\"text-align: left; font-weight: 700;\">          ",
                "-          <span ng-show=\"createMode\">{{'NEWUSER'| translate}}</span>",
                "-          <span ng-show=\"!createMode\">{{'USER'| translate}} {{user.username}}</span>",
                "-        </div>",
                "-        <div class=\"breadcrumb-header text-center\">",
                "-          <!-- the links to our nested states using relative paths -->",
                "-          <!-- add the active class if the state matches our ui-sref -->",
                "-          <!--<div id=\"status-buttons\" class=\"text-center\">-->",
                "-          <div class=\"row\">",
                "-            <div growl reference=\"2\" inline=\"true\"></div>              ",
                "-            <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb\">",
                "-              <a class=\"btn btn-default\" ng-show=\"createMode\" ng-click=\"logout()\"><i class=\"glyphicon glyphicon-home\"></i></a>",
                "-              <a id=\"logout\" class=\"btn btn-default\" ng-show=\"!createMode\" ng-click=\"logout()\"><i class=\"glyphicon glyphicon-off\"style=\"color:red\"></i></a>",
                "-              <!--add class breadcrumb-disabled-link to buttons to prevent click-->              ",
                "-              <a ng-repeat=\"(key, value) in wizard\" ui-sref-active=\"active\" ui-sref=\".{{key}}\" class=\"btn btn-default\" ",
                "-                 ng-class=\"createMode && !endReached ? 'disable-link' : ''\">{{key | translate}}</a>       ",
                "-            </div>",
                "-          </div>",
                "-        </div>",
                "-        <form class=\"signup-form\" name=\"userForm\" ng-submit=\"saveUser(user)\" novalidate>",
                "-          <div id=\"form-views\" ui-view >",
                "-",
                "-          </div>",
                "-        </form>",
                "-      </div>",
                "-    </div>",
                "-  </div>",
                "+  <dynamic-template-item type=\"edit_user\"/>",
                " </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/mustchangepassword.html b/client/enduser/src/main/resources/META-INF/resources/app/views/mustchangepassword.html",
                "index 083f988c9f..1245214d80 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/mustchangepassword.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/mustchangepassword.html",
                "@@ -19,8 +19,8 @@ under the License.",
                " <div ng-cloak class=\"container\">",
                "-  <div ng-controller=\"UserController\" style=\"box-sizing: border-box; \">",
                "+  <div ng-controller=\"UserController\">",
                "-    <div id=\"form-container\" class=\"col-md-6 col-md-offset-3\" style=\"box-sizing: border-box; background-color: #F7F7F7;\">",
                "+    <div id=\"form-container\" class=\"col-md-6 col-md-offset-3\">",
                "       <div>",
                "-        <div class=\"page-header\" style=\"text-align: left; font-weight: 700;\">",
                "+        <div class=\"page-header\">",
                "           <span>{{'PASSWORD_CHANGE_REQUIRED'| translate}}</span>",
                "@@ -30,6 +30,8 @@ under the License.",
                "           <div class=\"row\">            ",
                "-            <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb\">",
                "-              <a class=\"btn btn-default\" ng-click=\"logout()\"><i class=\"glyphicon glyphicon-off\"style=\"color:red\"></i></a>",
                "+            <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb col-md-12 col-md-offset-3\">",
                "+              <a class=\"btn btn-secondary btn-default breadcrumb-home\" ng-click=\"logout()\">",
                "+                <i class=\"fa fa-power-off\"style=\"color:red\"></i>",
                "+              </a>",
                "               <!--add class breadcrumb-disabled-link to buttons to prevent click-->",
                "-              <a ui-sref-active=\"active\" class=\"btn btn-default\">{{'PASSWORD_CHANGE'| translate}}</a>",
                "+              <a ui-sref-active=\"active\" class=\"btn btn-secondary btn-default\">{{'PASSWORD_CHANGE'| translate}}</a>",
                "             </div>",
                "@@ -59,3 +61,4 @@ under the License.",
                "               </div>",
                "-              <div ng-password-strength=\"user.password\" strength=\"passStrength\" inner-class=\"progress-bar\" inner-class-prefix=\"progress-bar-\">",
                "+              <div ng-password-strength=\"user.password\" strength=\"passStrength\" inner-class=\"progress-bar\" ",
                "+                   inner-class-prefix=\"progress-bar-\">",
                "               </div>",
                "@@ -63,4 +66,5 @@ under the License.",
                "             <div id=\"attribute\" class=\"form-group row\">",
                "-              <button id=\"resetpassword\" type=\"submit\" class=\"btn btn-default pull-right\">{{'SUBMIT'| translate}}</button>",
                "-              <div class=\"pull-left\">",
                "+              <button id=\"resetpassword\" type=\"submit\" ",
                "+                      class=\"btn btn-secondary btn-default float-right\">{{'SUBMIT'| translate}}</button>",
                "+              <div class=\"float-left\">",
                "                 <a id=\"cancel\" href=\"#/self\" class=\"btn btn-danger\">{{'CANCEL'| translate}}</a>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/navigationButtonsPartial.html b/client/enduser/src/main/resources/META-INF/resources/app/views/navigationButtonsPartial.html",
                "new file mode 100644",
                "index 0000000000..cd2f907742",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/navigationButtonsPartial.html",
                "@@ -0,0 +1,29 @@",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+        ",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+    ",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<div class=\"float-right\">",
                "+  <a ng-show=\"next !== 'none'\" id=\"next\" class=\"btn btn-secondary btn-default\" ng-click=\"validateAndNext($event)\">",
                "+    {{'NEXT'| translate}}",
                "+    <span class=\"fa fa-arrow-circle-right\"></span>",
                "+  </a>",
                "+  <a ng-show=\"previous !== 'none'\" id=\"previous\" ",
                "+     ng-click=\"previousTab()\" class=\"btn btn-secondary btn-default float-left\">",
                "+    <span class=\"fa fa-arrow-circle-left\"></span>",
                "+    {{'PREVIOUS'| translate}}",
                "+  </a>",
                "+</div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/passwordreset.html b/client/enduser/src/main/resources/META-INF/resources/app/views/passwordreset.html",
                "index 118b0d4e6f..baeee40657 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/passwordreset.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/passwordreset.html",
                "@@ -19,56 +19,3 @@ under the License.",
                " <div ng-cloak class=\"container\">",
                "-  <div ng-controller=\"UserController\" style=\"box-sizing: border-box; \">",
                "-",
                "-    <div id=\"form-container\" class=\"col-md-6 col-md-offset-3\" style=\"box-sizing: border-box; background-color: #F7F7F7;\">",
                "-",
                "-      <div>",
                "-        <div class=\"page-header\" style=\"text-align: left; font-weight: 700;\">",
                "-          <span>Password reset</span>",
                "-        </div>",
                "-        <div class=\"breadcrumb-header text-center\">",
                "-",
                "-          <div class=\"row\">            ",
                "-            <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb\">",
                "-              <a class=\"btn btn-default\" ng-click=\"logout()\"><i class=\"glyphicon glyphicon-home\"></i></a>",
                "-              <!--add class breadcrumb-disabled-link to buttons to prevent click-->",
                "-              <a ui-sref-active=\"active\" class=\"btn btn-default\">{{'USERDETAILS'| translate}}</a>",
                "-            </div>",
                "-          </div>",
                "-        </div>",
                "-        <form class=\"signup-form\" name=\"passwordResetForm\" ng-submit=\"resetPassword(user)\" novalidate>",
                "-",
                "-          <div id=\"form-views\" ui-view>",
                "-            <div id=\"attribute\" class=\"form-group\">",
                "-              <label for=\"user.username\">{{'USER'| translate}}</label>",
                "-              <input name=\"username\" type=\"text\" class=\"form-control\" ng-model=\"user.username\" required ",
                "-                     placeholder=\"{{'USERNAME_PLACEHOLDER'|translate}}\" ng-blur=\"retrieveSecurityQuestion(user)\">",
                "-              <p ng-show=\"(userForm.username.$error.required && !userForm.username.$pristine)\" ",
                "-                 class=\"text-validation-error\">Username is required</p>",
                "-            </div>",
                "-            <div id=\"attribute\" class=\"form-group\" ng-show=\"$root.pwdResetRequiringSecurityQuestions\">",
                "-              <label for=\"user.securityquestion\">{{'SECURITYQUESTION'| translate}}</label> ",
                "-              <div class=\"suggestions\">(Not Loading? <a href ng-click=\"retrieveSecurityQuestion(user)\">Reload</a>)</div>",
                "-              <input name=\"securityquestion\" type=\"text\" class=\"form-control\" ng-model=\"userSecurityQuestion\" ",
                "-                     disabled=\"disabled\">              ",
                "-            </div>",
                "-            <div id=\"attribute\" class=\"form-group\" ng-show=\"$root.pwdResetRequiringSecurityQuestions\">",
                "-              <label for=\"user.securityAnswer\">{{'SECURITYANSWER'| translate}}</label>",
                "-              <input name=\"securityAnswer\" type=\"text\" class=\"form-control\" ng-model=\"user.securityAnswer\" ",
                "-                     placeholder=\"{{'SECURITYANSWER_PLACEHOLDER'| translate}}\" id=\"securityAnswer\">              ",
                "-            </div>",
                "-            <div id=\"attribute\" class=\"form-group row\">",
                "-              <!--captcha-->",
                "-              <div class=\"form-group row\">",
                "-                <captcha input=\"captchaInput\" enabled=\"captchaEnabled\"></captcha>",
                "-              </div>",
                "-              <button id=\"resetpassword\" type=\"submit\" class=\"btn btn-default pull-right\">{{'SUBMIT'| translate}}</button>",
                "-              <div class=\"pull-left\">",
                "-                <a id=\"cancel\" class=\"btn btn-danger\" ng-click=\"logout()\">{{'CANCEL'| translate}}</a>",
                "-              </div>",
                "-            </div>",
                "-          </div>",
                "-        </form>",
                "-      </div>",
                "-    </div>",
                "-  </div>",
                "+  <dynamic-template-item type=\"password_reset\"/>",
                " </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/self.html b/client/enduser/src/main/resources/META-INF/resources/app/views/self.html",
                "index defab42693..b7bf74d680 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/self.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/self.html",
                "@@ -28,61 +28,3 @@ under the License.",
                "     <div ng-cloak class=\"container\">",
                "-      <div id=\"login-container\" ng-controller=\"LoginController\" style=\"box-sizing: border-box;\">",
                "-        <div id=\"login\" class=\"card card-container\">",
                "-          <div>",
                "-            <img class=\"login-logo\" src=\"img/logo-green.png\" />",
                "-            <div id=\"login-form\" class=\"form\">              ",
                "-            </div>",
                "-            <form id=\"login-form\" class=\"form form-signin\" novalidate>",
                "-              <fieldset class=\"form-group input-group\">",
                "-                <div class=\"form-group\">",
                "-                  <input autofocus=\"autofocus\" type=\"text\" class=\"form-control\" id=\"login-username\" ",
                "-                         placeholder=\"{{'USERNAME_PLACEHOLDER'| translate}}\"",
                "-                         ng-required ng-model=\"credentials.username\">",
                "-                </div>",
                "-                <div class=\"form-group\">",
                "-                  <input type=\"password\" class=\"form-control\" id=\"login-password\" ",
                "-                         placeholder=\"{{'PASSWORD_PLACEHOLDER'| translate}}\" ",
                "-                         ng-required ng-model=\"credentials.password\">",
                "-                </div>",
                "-                <div class=\"form-group\" ng-controller=\"UserController\">",
                "-                  <select  ng-change=\"switchLanguage()\"",
                "-                           id=\"language\" style=\"width: 100%; text-align: left;\" class=\"btn dropdown-toggle btn-default\" ",
                "-                           ng-options=\"language.name for language in languages.availableLanguages track by language.id\" ",
                "-                           ng-model=\"languages.selectedLanguage\"></select>",
                "-                </div>                 ",
                "-                <div class=\"form-group\">",
                "-                  <button type=\"submit\" id=\"login-btn\" class=\"btn btn-default btn-signin login-btn\" ",
                "-                          ng-click=\"login(credentials)\">Login</button>",
                "-                </div>",
                "-                <div class=\"form-group\">",
                "-                  <span ng-if=\"$root.saml2spExtAvailable()\">SAML 2.0</span>",
                "-                  <select id=\"saml2sp\" style=\"width: 100%; text-align: left;\" class=\"btn dropdown-toggle btn-default\"",
                "-                          ng-if=\"$root.saml2spExtAvailable()\"",
                "-                          ng-options=\"idp.name for idp in saml2idps.available track by idp.entityID\"",
                "-                          ng-model=\"saml2idps.selected\" ng-change=\"saml2login()\">",
                "-                  </select>",
                "-                </div>",
                "-                <div class=\"form-group\">",
                "-                  <span ng-if=\"$root.oidcclientExtAvailable()\">OpenID Connect</span>",
                "-                  <select id=\"oiscclient\" style=\"width: 100%; text-align: left;\" class=\"btn dropdown-toggle btn-default\"",
                "-                          ng-if=\"$root.oidcclientExtAvailable()\"",
                "-                          ng-options=\"op.name for op in oidcops.available track by op.name\"",
                "-                          ng-model=\"oidcops.selected\" ng-change=\"oidclogin()\">",
                "-                  </select>",
                "-                </div>",
                "-              </fieldset>",
                "-            </form>",
                "-          </div>",
                "-        </div>",
                "-        <div class=\"text-center\" ng-show=\"$root.isSelfRegAllowed()\">",
                "-          <a href=\"#\" class=\"btn btn-link\" ng-click=\"$event.preventDefault();selfCreate();\" id=\"register\">",
                "-            {{ 'SELFREGISTRATION' | translate}}",
                "-          </a>",
                "-        </div>",
                "-        <div class=\"text-center\" ng-show=\"$root.isPwdResetAllowed()\">",
                "-          <a href=\"#\" class=\"btn btn-link\" ng-click=\"$event.preventDefault();passwordReset();\" id=\"passwordreset\">",
                "-            {{ 'PASSWORDRESET' | translate}}",
                "-          </a>",
                "-        </div>",
                "-      </div> <!-- /#login -->",
                "+      <dynamic-template-item type=\"login\"/>",
                "     </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/templates/editUserTemplate.html b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/editUserTemplate.html",
                "new file mode 100644",
                "index 0000000000..a309f71f24",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/editUserTemplate.html",
                "@@ -0,0 +1,57 @@",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<div class=\"login-container\" ng-controller=\"UserController\" ng-init=\"initUser();\">",
                "+  <div id=\"form-container\" class=\"col-md-12 col-md-offset-3\">",
                "+    <div>",
                "+      <div class=\"page-header\">          ",
                "+        <span ng-show=\"createMode\">{{'NEWUSER'| translate}}</span>",
                "+        <span ng-show=\"!createMode\">{{'USER'| translate}} {{user.username}}</span>",
                "+      </div>",
                "+",
                "+      <div class=\"breadcrumb-header text-center\">",
                "+        <!-- the links to our nested states using relative paths add the active class if the state matches our ui-sref -->",
                "+        <div class=\"text-center\">",
                "+          <div class=\"row\">",
                "+            <div growl reference=\"2\" inline=\"true\"></div>              ",
                "+            <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb\">",
                "+              <a class=\"btn btn-secondary btn-default breadcrumb-btn-elem breadcrumb-home\" ",
                "+                 ng-show=\"createMode\" ng-click=\"logout()\">",
                "+                <i class=\"fa fa-home\"></i>",
                "+              </a>",
                "+              <a id=\"logout\" class=\"btn btn-secondary btn-default breadcrumb-btn-elem\" ",
                "+                 ng-show=\"!createMode\" ng-click=\"logout()\">",
                "+                <i class=\"fa fa-power-off\" style=\"color:red\"></i>",
                "+              </a>",
                "+              <!-- add class breadcrumb-disabled-link to buttons to prevent click -->              ",
                "+              <a ng-repeat=\"(key, value) in wizard\" ui-sref-active=\"active\" ui-sref=\".{{key}}\" ",
                "+                 class=\"btn btn-secondary btn-default breadcrumb-btn-elem\" ",
                "+                 ng-class=\"createMode && !endReached ? 'disable-link' : ''\">{{key| translate}}</a>       ",
                "+            </div>",
                "+          </div>",
                "+        </div>",
                "+",
                "+        <form class=\"signup-form\" name=\"userForm\" ng-submit=\"saveUser(user)\" novalidate>",
                "+          <div id=\"form-views\" ui-view >",
                "+",
                "+          </div>",
                "+        </form>",
                "+      </div>",
                "+    </div>",
                "+  </div>",
                "+</div>",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/templates/onlyPlainAttrsDetails/editUserTemplate.html b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/onlyPlainAttrsDetails/editUserTemplate.html",
                "new file mode 100644",
                "index 0000000000..a309f71f24",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/onlyPlainAttrsDetails/editUserTemplate.html",
                "@@ -0,0 +1,57 @@",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<div class=\"login-container\" ng-controller=\"UserController\" ng-init=\"initUser();\">",
                "+  <div id=\"form-container\" class=\"col-md-12 col-md-offset-3\">",
                "+    <div>",
                "+      <div class=\"page-header\">          ",
                "+        <span ng-show=\"createMode\">{{'NEWUSER'| translate}}</span>",
                "+        <span ng-show=\"!createMode\">{{'USER'| translate}} {{user.username}}</span>",
                "+      </div>",
                "+",
                "+      <div class=\"breadcrumb-header text-center\">",
                "+        <!-- the links to our nested states using relative paths add the active class if the state matches our ui-sref -->",
                "+        <div class=\"text-center\">",
                "+          <div class=\"row\">",
                "+            <div growl reference=\"2\" inline=\"true\"></div>              ",
                "+            <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb\">",
                "+              <a class=\"btn btn-secondary btn-default breadcrumb-btn-elem breadcrumb-home\" ",
                "+                 ng-show=\"createMode\" ng-click=\"logout()\">",
                "+                <i class=\"fa fa-home\"></i>",
                "+              </a>",
                "+              <a id=\"logout\" class=\"btn btn-secondary btn-default breadcrumb-btn-elem\" ",
                "+                 ng-show=\"!createMode\" ng-click=\"logout()\">",
                "+                <i class=\"fa fa-power-off\" style=\"color:red\"></i>",
                "+              </a>",
                "+              <!-- add class breadcrumb-disabled-link to buttons to prevent click -->              ",
                "+              <a ng-repeat=\"(key, value) in wizard\" ui-sref-active=\"active\" ui-sref=\".{{key}}\" ",
                "+                 class=\"btn btn-secondary btn-default breadcrumb-btn-elem\" ",
                "+                 ng-class=\"createMode && !endReached ? 'disable-link' : ''\">{{key| translate}}</a>       ",
                "+            </div>",
                "+          </div>",
                "+        </div>",
                "+",
                "+        <form class=\"signup-form\" name=\"userForm\" ng-submit=\"saveUser(user)\" novalidate>",
                "+          <div id=\"form-views\" ui-view >",
                "+",
                "+          </div>",
                "+        </form>",
                "+      </div>",
                "+    </div>",
                "+  </div>",
                "+</div>",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/templates/passwordresetTemplate.html b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/passwordresetTemplate.html",
                "new file mode 100644",
                "index 0000000000..b2d6a3bb42",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/passwordresetTemplate.html",
                "@@ -0,0 +1,79 @@",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<div ng-controller=\"UserController\">",
                "+  <div id=\"form-container\" class=\"col-md-12 col-md-offset-3\">",
                "+",
                "+    <div>",
                "+      <div class=\"page-header\">",
                "+        <span>Password reset</span>",
                "+      </div>",
                "+      <div class=\"breadcrumb-header text-center\">",
                "+        <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb\">",
                "+          <a class=\"btn btn-default breadcrumb-btn-elem breadcrumb-home\" ng-click=\"logout()\">",
                "+            <i class=\"fa fa-home\"></i>",
                "+          </a>",
                "+          <!--add class breadcrumb-disabled-link to buttons to prevent click-->",
                "+          <a ui-sref-active=\"active\" class=\"btn btn-secondary btn-default active\">{{'USERDETAILS'| translate}}</a>",
                "+        </div>",
                "+      </div>",
                "+      <form class=\"signup-form\" name=\"passwordResetForm\" ng-submit=\"resetPassword(user)\" novalidate>",
                "+",
                "+        <div id=\"form-views\" ui-view>",
                "+          <div id=\"attribute\" class=\"form-group\">",
                "+            <label for=\"user.username\">{{'USER'| translate}}</label>",
                "+            <input name=\"username\" type=\"text\" class=\"form-control\" ng-model=\"user.username\" required ",
                "+                   placeholder=\"{{'USERNAME_PLACEHOLDER'|translate}}\" ng-blur=\"retrieveSecurityQuestion(user)\">",
                "+            <p ng-show=\"(userForm.username.$error.required && !userForm.username.$pristine)\" ",
                "+               class=\"text-validation-error\">Username is required</p>",
                "+          </div>",
                "+          <div id=\"attribute\" class=\"form-group\" ng-show=\"$root.pwdResetRequiringSecurityQuestions\">",
                "+            <label for=\"user.securityquestion\">{{'SECURITYQUESTION'| translate}}</label> ",
                "+            <div class=\"suggestions\">(Not Loading? <a href ng-click=\"retrieveSecurityQuestion(user)\">Reload</a>)</div>",
                "+            <input name=\"securityquestion\" type=\"text\" class=\"form-control\" ng-model=\"userSecurityQuestion\" ",
                "+                   disabled=\"disabled\">              ",
                "+          </div>",
                "+          <div id=\"attribute\" class=\"form-group\" ng-show=\"$root.pwdResetRequiringSecurityQuestions\">",
                "+            <label for=\"user.securityAnswer\">{{'SECURITYANSWER'| translate}}</label>",
                "+            <input name=\"securityAnswer\" type=\"text\" class=\"form-control\" ng-model=\"user.securityAnswer\" ",
                "+                   placeholder=\"{{'SECURITYANSWER_PLACEHOLDER'| translate}}\" id=\"securityAnswer\">              ",
                "+          </div>",
                "+          <div id=\"attribute\" class=\"form-group row\">",
                "+            <!--captcha-->",
                "+            <div class=\"form-group row\">",
                "+              <div class=\"col-md-12\">",
                "+                <captcha input=\"captchaInput\" enabled=\"captchaEnabled\"></captcha>",
                "+              </div>",
                "+            </div>",
                "+            <div class=\"col-xs-6\">",
                "+              <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+                {{'CANCEL'| translate}}",
                "+              </a>",
                "+            </div>",
                "+            <div class=\"col-xs-6\">",
                "+              <button id=\"resetpassword\" type=\"submit\" tabindex=\"0\"",
                "+                      class=\"btn btn-secondary btn-default float-right nav-button\">",
                "+                {{'SUBMIT'| translate}}",
                "+              </button>",
                "+            </div>",
                "+          </div>",
                "+        </div>",
                "+      </form>",
                "+    </div>",
                "+  </div>",
                "+</div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/templates/selfTemplate.html b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/selfTemplate.html",
                "new file mode 100644",
                "index 0000000000..efd3350b14",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/selfTemplate.html",
                "@@ -0,0 +1,77 @@",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<div id=\"login-container\" ng-controller=\"LoginController\">",
                "+  <div id=\"login\" class=\"card card-container\">",
                "+    <div>",
                "+      <img class=\"login-logo\" src=\"img/logo-green.png\" />",
                "+      <div id=\"login-form\" class=\"form\">              ",
                "+      </div>",
                "+      <form id=\"login-form\" class=\"form form-signin\" novalidate>",
                "+        <fieldset class=\"form-group input-group\">",
                "+          <div class=\"form-group\">",
                "+            <input autofocus=\"autofocus\" type=\"text\" class=\"form-control\" id=\"login-username\" ",
                "+                   placeholder=\"{{'USERNAME_PLACEHOLDER'| translate}}\"",
                "+                   ng-required ng-model=\"credentials.username\">",
                "+          </div>",
                "+          <div class=\"form-group\">",
                "+            <input type=\"password\" class=\"form-control\" id=\"login-password\" ",
                "+                   placeholder=\"{{'PASSWORD_PLACEHOLDER'| translate}}\" ",
                "+                   ng-required ng-model=\"credentials.password\">",
                "+          </div>",
                "+          <div class=\"form-group\" ng-controller=\"UserController\">",
                "+            <select  ng-change=\"switchLanguage()\"",
                "+                     id=\"language\" class=\"dropdown-toggle custom-select btn btn-default\" ",
                "+                     ng-options=\"language.name for language in languages.availableLanguages track by language.id\" ",
                "+                     ng-model=\"languages.selectedLanguage\"></select>",
                "+          </div>                 ",
                "+          <div class=\"form-group\">",
                "+            <button type=\"submit\" id=\"login-btn\" class=\"btn btn-secondary btn-default btn-signin login-btn\" ",
                "+                    ng-click=\"login(credentials)\">Login</button>",
                "+          </div>",
                "+          <div class=\"form-group\">",
                "+            <span ng-if=\"$root.saml2spExtAvailable()\">SAML 2.0</span>",
                "+            <select id=\"saml2sp\" class=\"dropdown-toggle custom-select btn btn-default\"",
                "+                    ng-if=\"$root.saml2spExtAvailable()\"",
                "+                    ng-options=\"idp.name for idp in saml2idps.available track by idp.entityID\"",
                "+                    ng-model=\"saml2idps.selected\" ng-change=\"saml2login()\">",
                "+            </select>",
                "+          </div>",
                "+          <div class=\"form-group\">",
                "+            <span ng-if=\"$root.oidcclientExtAvailable()\">OpenID Connect</span>",
                "+            <select id=\"oiscclient\" class=\"dropdown-toggle custom-select btn btn-default\"",
                "+                    ng-if=\"$root.oidcclientExtAvailable()\"",
                "+                    ng-options=\"op.name for op in oidcops.available track by op.name\"",
                "+                    ng-model=\"oidcops.selected\" ng-change=\"oidclogin()\">",
                "+            </select>",
                "+          </div>",
                "+        </fieldset>",
                "+      </form>",
                "+    </div>",
                "+  </div>",
                "+  <div class=\"text-center\" ng-show=\"$root.isSelfRegAllowed()\">",
                "+    <a href=\"#\" class=\"btn btn-link\" ng-click=\"$event.preventDefault(); selfCreate();\" id=\"register\">",
                "+      {{ 'SELFREGISTRATION' | translate }}",
                "+    </a>",
                "+  </div>",
                "+  <div class=\"text-center\" ng-show=\"$root.isPwdResetAllowed()\">",
                "+    <a href=\"#\" class=\"btn btn-link\" ng-click=\"$event.preventDefault(); passwordReset();\" id=\"passwordreset\">",
                "+      {{ 'PASSWORDRESET' | translate }}",
                "+    </a>",
                "+  </div>",
                "+</div> <!-- /#login -->",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/user-credentials.html b/client/enduser/src/main/resources/META-INF/resources/app/views/user-credentials.html",
                "index 274e4bdc41..6a3524e4f8 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/user-credentials.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/user-credentials.html",
                "@@ -20,3 +20,4 @@ under the License.",
                "   <label for=\"user.username\">{{'USERNAME'| translate}} <span>*</span></label>",
                "-  <input name=\"username\" type=\"text\" class=\"form-control\" ng-model=\"user.username\" required placeholder=\"{{'USERNAME_PLACEHOLDER'|translate}}\" validate=\"true\"/>",
                "+  <input name=\"username\" type=\"text\" class=\"form-control\" ng-model=\"user.username\" ",
                "+         required placeholder=\"{{'USERNAME_PLACEHOLDER'|translate}}\" validate=\"true\"/>",
                "   <validation-message name=\"username\" template=\"requiredMessage\" />",
                "@@ -25,4 +26,5 @@ under the License.",
                " <div id=\"attribute\" class=\"form-group\">",
                "-  <label for=\"user.password\">{{\"PASSWORD\"|translate}}</label>",
                "-  <input type=\"password\" class=\"form-control\" name=\"password\" ng-model=\"user.password\" placeholder=\"{{'PASSWORD_PLACEHOLDER'|translate}}\">",
                "+  <label class=\"p-0\" for=\"user.password\">{{\"PASSWORD\"|translate}}</label>",
                "+  <input type=\"password\" class=\"form-control\" name=\"password\" ng-model=\"user.password\" ",
                "+         placeholder=\"{{'PASSWORD_PLACEHOLDER'|translate}}\">",
                " </div>",
                "@@ -30,5 +32,5 @@ under the License.",
                " <div id=\"attribute\" class=\"form-group\">",
                "-  <label for=\"confirmPassword\">{{'CONFIRM_PASSWORD'| translate}}</label>",
                "-  <input name=\"password\" type=\"password\" class=\"form-control\" equals=\"user.password\" ng-model=\"confirmPassword.value\"",
                "-         placeholder=\"{{'CONFIRM_PASSWORD_PLACEHOLDER'| translate}}\" validate=\"true\">",
                "+  <label class=\"p-0\" for=\"confirmPassword\">{{'CONFIRM_PASSWORD'| translate}}</label>",
                "+  <input name=\"password\" type=\"password\" class=\"form-control\" equals=\"user.password\" ",
                "+         ng-model=\"confirmPassword.value\" placeholder=\"{{'CONFIRM_PASSWORD_PLACEHOLDER'| translate}}\" validate=\"true\">",
                "   <validation-message name=\"password\"/>",
                "@@ -37,3 +39,3 @@ under the License.",
                " <div id=\"attribute\" class=\"form-group\">",
                "-  <div class=\"suggestions\">",
                "+  <div class=\"suggestions p-0\">",
                "     {{'PASSWORD_STRENGTH'| translate}}: ",
                "@@ -43,3 +45,5 @@ under the License.",
                "   </div>",
                "-  <div ng-password-strength=\"user.password\" strength=\"passStrength\" inner-class=\"progress-bar\" inner-class-prefix=\"progress-bar-\">",
                "+  <div class=\"col-md-12\" ",
                "+       ng-password-strength=\"user.password\" strength=\"passStrength\" inner-class=\"progress-bar\" ",
                "+       inner-class-prefix=\"progress-bar-\">",
                "   </div>",
                "@@ -48,4 +52,4 @@ under the License.",
                " <div id=\"attribute\" class=\"form-group\">",
                "-  <label for=\"securityQuestion\">{{'SECURITYQUESTION'| translate}}</label>",
                "-  <select name=\"securityQuestion\" class=\"form-control\"",
                "+  <label class=\"p-0\" for=\"securityQuestion\">{{'SECURITYQUESTION'| translate}}</label>",
                "+  <select name=\"securityQuestion\" class=\"form-control custom-select\"",
                "           ng-model=\"user.securityQuestion\"",
                "@@ -57,4 +61,5 @@ under the License.",
                " <div id=\"attribute\" class=\"form-group\">",
                "-  <label for=\"securityAnswer\">{{'SECURITYANSWER'| translate}}</label>",
                "-  <input ng-disabled=\"user.securityQuestion === null || user.securityQuestion === ''\" name=\"securityAnswer\" type=\"text\" class=\"form-control\" ",
                "+  <label class=\"p-0\" for=\"securityAnswer\">{{'SECURITYANSWER'| translate}}</label>",
                "+  <input ng-disabled=\"user.securityQuestion === null || user.securityQuestion === ''\" name=\"securityAnswer\" ",
                "+         type=\"text\" class=\"form-control\" ",
                "          ng-model=\"user.securityAnswer\"",
                "@@ -62,16 +67,27 @@ under the License.",
                " </div>",
                "-<div id=\"attribute\" class=\"form-group row\">",
                "-    <div class=\"pull-right\">",
                "-    <div id=\"navButtons\" class=\"pull-left\">",
                "-      <navigation-buttons ng-show=\"createMode\" base=\"create\" current=\"credentials\" wizard=\"{{wizard}}\"></navigation-buttons>",
                "-      <navigation-buttons ng-show=\"!createMode\" base=\"update\" current=\"credentials\" wizard=\"{{wizard}}\"></navigation-buttons>",
                "+",
                "+<div id=\"attribute\" class=\"form-group row justify-content-between p-0\">",
                "+  <div class=\"col-xs-3\">",
                "+    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+      {{'CANCEL'| translate}}",
                "+    </a>",
                "+  </div>",
                "+  <div class=\"col-xs-9\">",
                "+    <div id=\"navButtons\" class=\"float-left\"",
                "+         ng-class=\"(!createMode || (createMode && endReached)) ? 'col-xs-10' : 'col-xs-12'\">",
                "+      <navigation-buttons-partial ng-show=\"createMode\" base=\"create\" current=\"credentials\" wizard=\"{{wizard}}\">",
                "+      </navigation-buttons-partial>",
                "+      <navigation-buttons-partial ng-show=\"!createMode\" base=\"update\" current=\"credentials\" wizard=\"{{wizard}}\">",
                "+      </navigation-buttons-partial>",
                "     </div>",
                "-    <div class=\"pull-right\">",
                "-      <button id=\"finish\" ng-show=\"!createMode\" type=\"button\" class=\"btn btn-default pull-right\" ng-click=\"finish()\">{{'FINISH'| translate}}</button>",
                "-      <button id=\"finish\" ng-show=\"createMode && endReached\" type=\"button\" class=\"btn btn-default pull-right\" ng-click=\"finish()\">{{'FINISH'| translate}}</button>  ",
                "+    <div class=\"float-right p-0\" ",
                "+         ng-class=\"(!createMode || (createMode && endReached)) ? 'col-xs-2' : ''\" ",
                "+         ng-show=\"!createMode || (createMode && endReached)\">",
                "+      <button id=\"finish\" type=\"button\" tabindex=\"0\"",
                "+              class=\"btn btn-secondary btn-default float-right nav-button\" ",
                "+              ng-click=\"finish()\">",
                "+        {{'FINISH'| translate}}",
                "+      </button>",
                "     </div>",
                "   </div>",
                "-  <div class=\"pull-left\">",
                "-    <a id=\"cancel\" class=\"btn btn-danger pull-left\" ng-click=\"logout()\">{{'CANCEL'| translate}}</a>",
                "-  </div>",
                " </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/user-derived-schemas.html b/client/enduser/src/main/resources/META-INF/resources/app/views/user-derived-schemas.html",
                "index a788a2b6f9..a4435274a6 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/user-derived-schemas.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/user-derived-schemas.html",
                "@@ -21,16 +21,27 @@ under the License.",
                " </div>",
                "-<div id=\"attribute\" class=\"form-group row\">",
                "-  <div class=\"pull-right\">",
                "-    <div id=\"navButtons\" class=\"pull-left\">",
                "-      <navigation-buttons ng-show=\"createMode\" base=\"create\" current=\"derivedSchemas\" wizard=\"{{wizard}}\"></navigation-buttons>",
                "-      <navigation-buttons ng-show=\"!createMode\" base=\"update\" current=\"derivedSchemas\" wizard=\"{{wizard}}\"></navigation-buttons>",
                "+",
                "+<div id=\"attribute\" class=\"form-group row justify-content-between p-0\">",
                "+  <div class=\"col-xs-3\">",
                "+    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+      {{'CANCEL'| translate}}",
                "+    </a>",
                "+  </div>",
                "+  <div class=\"col-xs-9\">",
                "+    <div id=\"navButtons\" class=\"float-left\"",
                "+         ng-class=\"(!createMode || (createMode && endReached)) ? 'col-xs-10' : 'col-xs-12'\">",
                "+      <navigation-buttons-partial ng-show=\"createMode\" base=\"create\" current=\"derivedSchemas\" wizard=\"{{wizard}}\">",
                "+      </navigation-buttons-partial>",
                "+      <navigation-buttons-partial ng-show=\"!createMode\" base=\"update\" current=\"derivedSchemas\" wizard=\"{{wizard}}\">",
                "+      </navigation-buttons-partial>",
                "     </div>",
                "-    <div class=\"pull-right\">",
                "-      <button id=\"finish\" ng-show=\"!createMode\" type=\"button\" class=\"btn btn-default pull-right\" ng-click=\"finish()\">{{'FINISH'| translate}}</button>",
                "-      <button id=\"finish\" ng-show=\"createMode && endReached\" type=\"button\" class=\"btn btn-default pull-right\" ng-click=\"finish()\">{{'FINISH'| translate}}</button>  ",
                "+    <div class=\"float-right p-0\" ",
                "+         ng-class=\"(!createMode || (createMode && endReached)) ? 'col-xs-2' : ''\" ",
                "+         ng-show=\"!createMode || (createMode && endReached)\">",
                "+      <button id=\"finish\" type=\"button\" tabindex=\"0\"",
                "+              class=\"btn btn-secondary btn-default float-right nav-button\" ",
                "+              ng-click=\"finish()\">",
                "+        {{'FINISH'| translate}}",
                "+      </button>",
                "     </div>",
                "   </div>",
                "-  <div class=\"pull-left\">",
                "-    <a id=\"cancel\" class=\"btn btn-danger pull-left\" ng-click=\"logout()\">{{'CANCEL'| translate}}</a>",
                "-  </div>",
                " </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/user-form-finish.html b/client/enduser/src/main/resources/META-INF/resources/app/views/user-form-finish.html",
                "index 8e58f23b32..ad3485b4b1 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/user-form-finish.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/user-form-finish.html",
                "@@ -18,20 +18,27 @@ under the License.",
                " -->",
                "-<div id=\"attribute\" class=\"form-group row\">",
                "+<div id=\"attribute\" class=\"form-group row justify-content-between p-0\">",
                "   <!--captcha-->",
                "-  <div class=\"form-group row\">",
                "+  <div class=\"form-group row col-md-12\">",
                "     <captcha input=\"captchaInput\" enabled=\"captchaEnabled\"></captcha>",
                "   </div>",
                "+",
                "   <!--navigation buttons-->",
                "-  <div class=\"pull-right\">",
                "-    <div id=\"navButtons\" class=\"pull-left\">",
                "-      <navigation-buttons ng-show=\"createMode\" base=\"create\" current=\"finish\" wizard=\"{{wizard}}\"></navigation-buttons>",
                "-      <navigation-buttons ng-show=\"!createMode\" base=\"update\" current=\"finish\" wizard=\"{{wizard}}\"></navigation-buttons>",
                "+  <div class=\"col-xs-3\">",
                "+    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+      {{'CANCEL'| translate}}",
                "+    </a>",
                "+  </div>",
                "+  <div class=\"col-xs-9\">",
                "+    <div id=\"navButtons\" class=\"col-xs-10 float-left\">",
                "+      <navigation-buttons-partial ng-show=\"createMode\" base=\"create\" current=\"finish\" wizard=\"{{wizard}}\">",
                "+      </navigation-buttons-partial>",
                "+      <navigation-buttons-partial ng-show=\"!createMode\" base=\"update\" current=\"finish\" wizard=\"{{wizard}}\">",
                "+      </navigation-buttons-partial>",
                "     </div>",
                "-    <div class=\"pull-right\">",
                "-      <button id=\"save\" type=\"submit\" class=\"btn btn-default pull-right\">{{'SAVE'| translate}}</button>",
                "+    <div class=\"col-xs-2 float-right p-0\">",
                "+      <button id=\"save\" type=\"submit\" tabindex=\"0\" class=\"btn btn-secondary btn-default float-right nav-button\">",
                "+        {{'SAVE'| translate}}",
                "+      </button>",
                "     </div>",
                "   </div>",
                "-  <div class=\"pull-left\">",
                "-    <a id=\"cancel\" class=\"btn btn-danger pull-left\" ng-click=\"logout()\">{{'CANCEL'| translate}}</a>",
                "-  </div>",
                " </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/user-groups.html b/client/enduser/src/main/resources/META-INF/resources/app/views/user-groups.html",
                "index c95f4dfd7e..85812071da 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/user-groups.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/user-groups.html",
                "@@ -19,4 +19,4 @@ under the License.",
                " <div id=\"attribute\" class=\"form-group row upper-select\">",
                "-  <label>{{\"REALM\"|translate}}</label>",
                "-  <select class=\"form-control\"",
                "+  <label class=\"col-md-12 p-0\">{{\"REALM\"|translate}}</label>",
                "+  <select class=\"form-control col-md-12 custom-select\"",
                "           ng-model=\"user.realm\" ng-change=\"refreshGroups()\"",
                "@@ -27,23 +27,34 @@ under the License.",
                " <div id=\"attribute\" class=\"form-group row upper-select\">",
                "-  <label>{{\"groups\"|translate}}</label><br/>",
                "-  <groups form=\"dynamicForm\" user=\"user\"></groups>",
                "+  <label class=\"col-md-12 p-0\">{{\"groups\"|translate}}</label><br/>",
                "+  <groups class=\"col-md-12 p-0\" form=\"dynamicForm\" user=\"user\"></groups>",
                " </div>",
                " <div id=\"attribute\" class=\"form-group row upper-select\">",
                "-  <label>{{\"AUXILIARY CLASSES\"|translate}}</label><br/>",
                "-  <auxiliary form=\"dynamicForm\" user=\"user\"></auxiliary>",
                "+  <label class=\"col-md-12 p-0\">{{\"AUXILIARY CLASSES\"|translate}}</label>",
                "+  <auxiliary class=\"col-md-12 p-0\" form=\"dynamicForm\" user=\"user\"></auxiliary>",
                " </div>",
                "-<div id=\"attribute\" class=\"form-group row\">",
                "-  <div class=\"pull-right\">",
                "-    <div id=\"navButtons\" class=\"pull-left\">",
                "-      <navigation-buttons ng-show=\"createMode\" base=\"create\" current=\"groups\" wizard=\"{{wizard}}\"></navigation-buttons>",
                "-      <navigation-buttons ng-show=\"!createMode\" base=\"update\" current=\"groups\" wizard=\"{{wizard}}\"></navigation-buttons>",
                "+",
                "+<div id=\"attribute\" class=\"form-group row justify-content-between p-0\">",
                "+  <div class=\"col-xs-3\">",
                "+    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+      {{'CANCEL'| translate}}",
                "+    </a>",
                "+  </div>",
                "+  <div class=\"col-xs-9\">",
                "+    <div id=\"navButtons\" class=\"float-left\"",
                "+         ng-class=\"(!createMode || (createMode && endReached)) ? 'col-xs-10' : 'col-xs-12'\">",
                "+      <navigation-buttons-partial ng-show=\"createMode\" base=\"create\" current=\"groups\" wizard=\"{{wizard}}\">",
                "+      </navigation-buttons-partial>",
                "+      <navigation-buttons-partial ng-show=\"!createMode\" base=\"update\" current=\"groups\" wizard=\"{{wizard}}\">",
                "+      </navigation-buttons-partial>",
                "     </div>",
                "-    <div class=\"pull-right\">",
                "-      <button id=\"finish\" ng-show=\"!createMode\" type=\"button\" class=\"btn btn-default pull-right\" ng-click=\"finish()\">{{'FINISH'| translate}}</button>",
                "-      <button id=\"finish\" ng-show=\"createMode && endReached\" type=\"button\" class=\"btn btn-default pull-right\" ng-click=\"finish()\">{{'FINISH'| translate}}</button>  ",
                "+    <div class=\"float-right p-0\" ",
                "+         ng-class=\"(!createMode || (createMode && endReached)) ? 'col-xs-2' : ''\" ",
                "+         ng-show=\"!createMode || (createMode && endReached)\">",
                "+      <button id=\"finish\" type=\"button\" tabindex=\"0\"",
                "+              class=\"btn btn-secondary btn-default float-right nav-button\" ",
                "+              ng-click=\"finish()\">",
                "+        {{'FINISH'| translate}}",
                "+      </button>",
                "     </div>",
                "   </div>",
                "-  <div class=\"pull-left\">",
                "-    <a id=\"cancel\" class=\"btn btn-danger pull-left\" ng-click=\"logout()\">{{'CANCEL'| translate}}</a>",
                "-  </div>",
                "-</div>",
                "+</div>",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/user-plain-schemas.html b/client/enduser/src/main/resources/META-INF/resources/app/views/user-plain-schemas.html",
                "index c7cae6debd..a23df5043f 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/user-plain-schemas.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/user-plain-schemas.html",
                "@@ -21,16 +21,27 @@ under the License.",
                " </div>",
                "-<div id=\"attribute\" class=\"form-group row\">",
                "-  <div class=\"pull-right\">",
                "-    <div id=\"navButtons\" class=\"pull-left\">",
                "-      <navigation-buttons ng-show=\"createMode\" base=\"create\" current=\"plainSchemas\" wizard=\"{{wizard}}\"></navigation-buttons>",
                "-      <navigation-buttons ng-show=\"!createMode\" base=\"update\" current=\"plainSchemas\" wizard=\"{{wizard}}\"></navigation-buttons>",
                "+",
                "+<div id=\"attribute\" class=\"form-group row justify-content-between p-0\">",
                "+  <div class=\"col-xs-3\">",
                "+    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+      {{'CANCEL'| translate}}",
                "+    </a>",
                "+  </div>",
                "+  <div class=\"col-xs-9\">",
                "+    <div id=\"navButtons\" class=\"float-left\"",
                "+         ng-class=\"(!createMode || (createMode && endReached)) ? 'col-xs-10' : 'col-xs-12'\">",
                "+      <navigation-buttons-partial ng-show=\"createMode\" base=\"create\" current=\"plainSchemas\" wizard=\"{{wizard}}\">",
                "+      </navigation-buttons-partial>",
                "+      <navigation-buttons-partial ng-show=\"!createMode\" base=\"update\" current=\"plainSchemas\" wizard=\"{{wizard}}\">",
                "+      </navigation-buttons-partial>",
                "     </div>",
                "-    <div class=\"pull-right\">",
                "-      <button id=\"finish\" ng-show=\"!createMode\" type=\"button\" class=\"btn btn-default pull-right\" ng-click=\"finish()\">{{'FINISH'| translate}}</button>",
                "-      <button id=\"finish\" ng-show=\"createMode && endReached\" type=\"button\" class=\"btn btn-default pull-right\" ng-click=\"finish()\">{{'FINISH'| translate}}</button>  ",
                "+    <div class=\"float-right p-0\" ",
                "+         ng-class=\"(!createMode || (createMode && endReached)) ? 'col-xs-2' : ''\" ",
                "+         ng-show=\"!createMode || (createMode && endReached)\">",
                "+      <button id=\"finish\" type=\"button\" tabindex=\"0\"",
                "+              class=\"btn btn-secondary btn-default float-right nav-button\"",
                "+              ng-click=\"finish()\">",
                "+        {{'FINISH'| translate}}",
                "+      </button>",
                "     </div>",
                "   </div>",
                "-  <div class=\"pull-left\">",
                "-    <a id=\"cancel\" class=\"btn btn-danger pull-left\" ng-click=\"logout()\">{{'CANCEL'| translate}}</a>",
                "-  </div>",
                "-</div>",
                "+</div>",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/user-resources.html b/client/enduser/src/main/resources/META-INF/resources/app/views/user-resources.html",
                "index 86ee3bd6e8..a8cde79dd3 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/user-resources.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/user-resources.html",
                "@@ -19,18 +19,29 @@ under the License.",
                " <div id=\"attribute\" class=\"form-group row upper-select ng-scope\">",
                "-  <resources form=\"dynamicForm\" user=\"user\"></resources>",
                "+  <resources class=\"col-md-12 p-0\" form=\"dynamicForm\" user=\"user\"></resources>",
                " </div>",
                "-<div id=\"attribute\" class=\"form-group row\">",
                "-  <div class=\"pull-right\">",
                "-    <div id=\"navButtons\" class=\"pull-left\">",
                "-      <navigation-buttons ng-show=\"createMode\" base=\"create\" current=\"resources\" wizard=\"{{wizard}}\"></navigation-buttons>",
                "-      <navigation-buttons ng-show=\"!createMode\" base=\"update\" current=\"resources\" wizard=\"{{wizard}}\"></navigation-buttons>",
                "+",
                "+<div id=\"attribute\" class=\"form-group row justify-content-between p-0\">",
                "+  <div class=\"col-xs-3\">",
                "+    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+      {{'CANCEL'| translate}}",
                "+    </a>",
                "+  </div>",
                "+  <div class=\"col-xs-9\">",
                "+    <div id=\"navButtons\" class=\"float-left\"",
                "+         ng-class=\"(!createMode || (createMode && endReached)) ? 'col-xs-10' : 'col-xs-12'\">",
                "+      <navigation-buttons-partial ng-show=\"createMode\" base=\"create\" current=\"resources\" wizard=\"{{wizard}}\">",
                "+      </navigation-buttons-partial>",
                "+      <navigation-buttons-partial ng-show=\"!createMode\" base=\"update\" current=\"resources\" wizard=\"{{wizard}}\">",
                "+      </navigation-buttons-partial>",
                "     </div>",
                "-    <div class=\"pull-right\">",
                "-      <button id=\"finish\" ng-show=\"!createMode\" type=\"button\" class=\"btn btn-default pull-right\" ng-click=\"finish()\">{{'FINISH'| translate}}</button>",
                "-      <button id=\"finish\" ng-show=\"createMode && endReached\" type=\"button\" class=\"btn btn-default pull-right\" ng-click=\"finish()\">{{'FINISH'| translate}}</button>  ",
                "+    <div class=\"float-right p-0\" ",
                "+         ng-class=\"(!createMode || (createMode && endReached)) ? 'col-xs-2' : ''\" ",
                "+         ng-show=\"!createMode || (createMode && endReached)\">",
                "+      <button id=\"finish\" type=\"button\" tabindex=\"0\"",
                "+              class=\"btn btn-secondary btn-default float-right nav-button\" ",
                "+              ng-click=\"finish()\">",
                "+        {{'FINISH'| translate}}",
                "+      </button>",
                "     </div>",
                "   </div>",
                "-  <div class=\"pull-left\">",
                "-    <a id=\"cancel\" class=\"btn btn-danger pull-left\" ng-click=\"logout()\">{{'CANCEL'| translate}}</a>",
                "-  </div>",
                "-</div>",
                "+</div>",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/user-virtual-schemas.html b/client/enduser/src/main/resources/META-INF/resources/app/views/user-virtual-schemas.html",
                "index 257a9508c3..d184a96cc2 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/user-virtual-schemas.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/user-virtual-schemas.html",
                "@@ -21,16 +21,27 @@ under the License.",
                " </div>",
                "-<div id=\"attribute\" class=\"form-group row\">",
                "-  <div class=\"pull-right\">",
                "-    <div id=\"navButtons\" class=\"pull-left\">",
                "-      <navigation-buttons ng-show=\"createMode\" base=\"create\" current=\"virtualSchemas\" wizard=\"{{wizard}}\"></navigation-buttons>",
                "-      <navigation-buttons ng-show=\"!createMode\" base=\"update\" current=\"virtualSchemas\" wizard=\"{{wizard}}\"></navigation-buttons>",
                "+",
                "+<div id=\"attribute\" class=\"form-group row justify-content-between p-0\">",
                "+  <div class=\"col-xs-3\">",
                "+    <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\">",
                "+      {{'CANCEL'| translate}}",
                "+    </a>",
                "+  </div>",
                "+  <div class=\"col-xs-9\">",
                "+    <div id=\"navButtons\" class=\"float-left\"",
                "+         ng-class=\"(!createMode || (createMode && endReached)) ? 'col-xs-10' : 'col-xs-12'\">",
                "+      <navigation-buttons-partial ng-show=\"createMode\" base=\"create\" current=\"virtualSchemas\" wizard=\"{{wizard}}\">",
                "+      </navigation-buttons-partial>",
                "+      <navigation-buttons-partial ng-show=\"!createMode\" base=\"update\" current=\"virtualSchemas\" wizard=\"{{wizard}}\">",
                "+      </navigation-buttons-partial>",
                "     </div>",
                "-    <div class=\"pull-right\">",
                "-      <button id=\"finish\" ng-show=\"!createMode\" type=\"button\" class=\"btn btn-default pull-right\" ng-click=\"finish()\">{{'FINISH'| translate}}</button>",
                "-      <button id=\"finish\" ng-show=\"createMode && endReached\" type=\"button\" class=\"btn btn-default pull-right\" ng-click=\"finish()\">{{'FINISH'| translate}}</button>  ",
                "+    <div class=\"float-right p-0\" ",
                "+         ng-class=\"(!createMode || (createMode && endReached)) ? 'col-xs-2' : ''\" ",
                "+         ng-show=\"!createMode || (createMode && endReached)\">",
                "+      <button id=\"finish\" type=\"button\" tabindex=\"0\"",
                "+              class=\"btn btn-secondary btn-default float-right nav-button\" ",
                "+              ng-click=\"finish()\">",
                "+        {{'FINISH'| translate}}",
                "+      </button>",
                "     </div>",
                "   </div>",
                "-  <div class=\"pull-left\">",
                "-    <a id=\"cancel\" class=\"btn btn-danger pull-left\" ng-click=\"logout()\">{{'CANCEL'| translate}}</a>",
                "-  </div>",
                " </div>",
                "diff --git a/client/enduser/src/main/resources/customFormAttributes.json b/client/enduser/src/main/resources/customFormAttributes.json",
                "new file mode 100644",
                "index 0000000000..9e26dfeeb6",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/customFormAttributes.json",
                "@@ -0,0 +1 @@",
                "+{}",
                "\\ No newline at end of file",
                "diff --git a/client/enduser/src/main/resources/customTemplate.json b/client/enduser/src/main/resources/customTemplate.json",
                "new file mode 100644",
                "index 0000000000..6b0efc146d",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/customTemplate.json",
                "@@ -0,0 +1,65 @@",
                "+{",
                "+  \"templates\": ",
                "+          {",
                "+            \"login\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/selfTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/login.css\"",
                "+                      ]",
                "+                    },",
                "+",
                "+            \"edit_user\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/editUserTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\"",
                "+                      ]",
                "+                    },",
                "+",
                "+            \"password_reset\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/passwordresetTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\",",
                "+                        \"css/passwordReset.css\"",
                "+                      ]",
                "+                    }",
                "+          },",
                "+",
                "+  \"generalAssets\": ",
                "+          {",
                "+            \"css\": [",
                "+              \"css/notification.css\",",
                "+              \"css/app.css\"",
                "+            ]",
                "+          },",
                "+",
                "+  \"wizard\": ",
                "+          {",
                "+            \"firstStep\": \"credentials\",",
                "+            \"steps\": {",
                "+              \"credentials\": {",
                "+                \"url\": \"/credentials\"",
                "+              },",
                "+              \"groups\": {",
                "+                \"url\": \"/groups\"",
                "+              },",
                "+              \"plainSchemas\": {",
                "+                \"url\": \"/plainSchemas\"",
                "+              },",
                "+              \"derivedSchemas\": {",
                "+                \"url\": \"/derivedSchemas\"",
                "+              },",
                "+              \"virtualSchemas\": {",
                "+                \"url\": \"/virtualSchemas\"",
                "+              },",
                "+              \"resources\": {",
                "+                \"url\": \"/resources\"",
                "+              },",
                "+              \"finish\": {",
                "+                \"url\": \"/finish\"",
                "+              }",
                "+            }",
                "+          }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/deb/enduser/pom.xml b/deb/enduser/pom.xml",
                "index 274317d95d..ba1b13070e 100644",
                "--- a/deb/enduser/pom.xml",
                "+++ b/deb/enduser/pom.xml",
                "@@ -99,3 +99,4 @@ under the License.",
                "           <include>enduser.properties</include>",
                "-          <include>customForm.json</include>",
                "+          <include>customFormAttributes.json</include>",
                "+          <include>customTemplate.json</include>",
                "         </includes>",
                "diff --git a/deb/enduser/src/deb/control/conffiles b/deb/enduser/src/deb/control/conffiles",
                "index 8fb2453717..d115b8e4a6 100644",
                "--- a/deb/enduser/src/deb/control/conffiles",
                "+++ b/deb/enduser/src/deb/control/conffiles",
                "@@ -2,3 +2,4 @@",
                " /etc/apache-syncope/enduser.properties",
                "-/etc/apache-syncope/customForm.json",
                "+/etc/apache-syncope/customFormAttributes.json",
                "+/etc/apache-syncope/customTemplate.json",
                " /etc/apache-syncope/saml2sp-agent.properties",
                "diff --git a/fit/enduser-reference/pom.xml b/fit/enduser-reference/pom.xml",
                "index 7688b21e16..1c8308b84b 100644",
                "--- a/fit/enduser-reference/pom.xml",
                "+++ b/fit/enduser-reference/pom.xml",
                "@@ -136,7 +136,2 @@ under the License.",
                "     </dependency>",
                "-    <dependency>",
                "-      <groupId>com.github.detro</groupId>",
                "-      <artifactId>phantomjsdriver</artifactId>       ",
                "-      <scope>test</scope>",
                "-    </dependency>",
                "   </dependencies>",
                "@@ -145,20 +140,2 @@ under the License.",
                "     <plugins>",
                "-      <plugin>",
                "-        <groupId>com.github.klieber</groupId>",
                "-        <artifactId>phantomjs-maven-plugin</artifactId>",
                "-        <configuration>",
                "-          <version>${phantomjs.version}</version>",
                "-          <checkSystemPath>false</checkSystemPath>",
                "-          <skip>${skipTests}</skip>",
                "-        </configuration>",
                "-        <executions>",
                "-          <execution>",
                "-            <id>install-phantomjs</id>",
                "-            <goals>",
                "-              <goal>install</goal>",
                "-            </goals>",
                "-          </execution>",
                "-        </executions>",
                "-      </plugin>",
                "-",
                "       <plugin>",
                "diff --git a/fit/enduser-reference/src/main/resources/customFormAttributes.json b/fit/enduser-reference/src/main/resources/customFormAttributes.json",
                "new file mode 100644",
                "index 0000000000..9e26dfeeb6",
                "--- /dev/null",
                "+++ b/fit/enduser-reference/src/main/resources/customFormAttributes.json",
                "@@ -0,0 +1 @@",
                "+{}",
                "\\ No newline at end of file",
                "diff --git a/fit/enduser-reference/src/main/resources/customTemplate.json b/fit/enduser-reference/src/main/resources/customTemplate.json",
                "new file mode 100644",
                "index 0000000000..6b0efc146d",
                "--- /dev/null",
                "+++ b/fit/enduser-reference/src/main/resources/customTemplate.json",
                "@@ -0,0 +1,65 @@",
                "+{",
                "+  \"templates\": ",
                "+          {",
                "+            \"login\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/selfTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/login.css\"",
                "+                      ]",
                "+                    },",
                "+",
                "+            \"edit_user\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/editUserTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\"",
                "+                      ]",
                "+                    },",
                "+",
                "+            \"password_reset\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/passwordresetTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\",",
                "+                        \"css/passwordReset.css\"",
                "+                      ]",
                "+                    }",
                "+          },",
                "+",
                "+  \"generalAssets\": ",
                "+          {",
                "+            \"css\": [",
                "+              \"css/notification.css\",",
                "+              \"css/app.css\"",
                "+            ]",
                "+          },",
                "+",
                "+  \"wizard\": ",
                "+          {",
                "+            \"firstStep\": \"credentials\",",
                "+            \"steps\": {",
                "+              \"credentials\": {",
                "+                \"url\": \"/credentials\"",
                "+              },",
                "+              \"groups\": {",
                "+                \"url\": \"/groups\"",
                "+              },",
                "+              \"plainSchemas\": {",
                "+                \"url\": \"/plainSchemas\"",
                "+              },",
                "+              \"derivedSchemas\": {",
                "+                \"url\": \"/derivedSchemas\"",
                "+              },",
                "+              \"virtualSchemas\": {",
                "+                \"url\": \"/virtualSchemas\"",
                "+              },",
                "+              \"resources\": {",
                "+                \"url\": \"/resources\"",
                "+              },",
                "+              \"finish\": {",
                "+                \"url\": \"/finish\"",
                "+              }",
                "+            }",
                "+          }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/fit/enduser-reference/src/main/resources/package.json b/fit/enduser-reference/src/main/resources/package.json",
                "new file mode 100644",
                "index 0000000000..9e26dfeeb6",
                "--- /dev/null",
                "+++ b/fit/enduser-reference/src/main/resources/package.json",
                "@@ -0,0 +1 @@",
                "+{}",
                "\\ No newline at end of file",
                "diff --git a/pom.xml b/pom.xml",
                "index 63968379f4..ec0ffcaf91 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -447,4 +447,4 @@ under the License.",
                "-    <jquery.version>2.2.4</jquery.version>",
                "-    <jquery-ui.version>1.11.4</jquery-ui.version>",
                "+    <jquery.version>3.3.1-1</jquery.version>",
                "+    <jquery-ui.version>1.12.1</jquery-ui.version>",
                "     <jquery-slimscroll.version>1.3.8</jquery-slimscroll.version>",
                "@@ -457,2 +457,3 @@ under the License.",
                "     <font-awesome.version>4.7.0</font-awesome.version>",
                "+    <font-awesome.filename>font-awesome.min.css</font-awesome.filename>",
                "     <ionicons.version>2.0.1</ionicons.version>",
                "@@ -466,10 +467,12 @@ under the License.",
                "     <wicket-jqueryui.version>8.0.0</wicket-jqueryui.version>",
                "-    <wicket-bootstrap.version>2.0.2</wicket-bootstrap.version>",
                "+    <wicket-bootstrap.version>2.0.3</wicket-bootstrap.version>",
                "-    <angular.version>1.7.0</angular.version>",
                "-    <angular-ui-router.version>0.3.2</angular-ui-router.version>",
                "-    <angular-ui-bootstrap.version>1.3.3</angular-ui-bootstrap.version>",
                "+    <angular.version>1.7.3</angular.version>",
                "+    <angular-resource.version>1.7.0</angular-resource.version>",
                "+    <angular-ui-router.version>1.0.20</angular-ui-router.version>",
                "+    <ui-bootstrap.version>3.0.4</ui-bootstrap.version>",
                "     <angular-ui-select.version>0.19.8</angular-ui-select.version>",
                "     <angular-treasure-overlay-spinner.version>1.1.0</angular-treasure-overlay-spinner.version>",
                "-    <angular-translate.version>2.17.1</angular-translate.version>",
                "+    <angular-translate.version>2.18.1</angular-translate.version>",
                "+    <angular-translate-loader-partial.version>2.17.1</angular-translate-loader-partial.version>",
                "@@ -477,3 +480,3 @@ under the License.",
                "     <lodash.version>4.17.4</lodash.version>",
                "-    <kendo-ui-core.version>2014.2.716</kendo-ui-core.version>",
                "+    <kendo-ui-core.version>2018.1.221</kendo-ui-core.version>",
                "     <select2.version>3.4.8</select2.version>",
                "@@ -514,7 +517,4 @@ under the License.",
                "-    <phantomjs.driver.version>1.2.0</phantomjs.driver.version>",
                "-    <phantomjs.version>2.1.1</phantomjs.version>",
                "-    ",
                "-    <nodejs.version>v6.9.4</nodejs.version>    ",
                "-    <protractor.version>4.0.14</protractor.version>    ",
                "+    <nodejs.version>v8.11.4</nodejs.version>    ",
                "+    <protractor.version>5.4.0</protractor.version>    ",
                "@@ -1400,3 +1400,3 @@ under the License.",
                "         <artifactId>angular-resource</artifactId>",
                "-        <version>${angular.version}</version>",
                "+        <version>${angular-resource.version}</version>",
                "       </dependency>",
                "@@ -1424,11 +1424,5 @@ under the License.",
                "       <dependency>",
                "-        <groupId>org.webjars</groupId>",
                "-        <artifactId>angular-ui-bootstrap</artifactId>",
                "-        <version>${angular-ui-bootstrap.version}</version>",
                "-        <exclusions>",
                "-          <exclusion>",
                "-            <groupId>org.webjars</groupId>",
                "-            <artifactId>angularjs</artifactId>",
                "-          </exclusion>",
                "-        </exclusions>",
                "+        <groupId>org.webjars.npm</groupId>",
                "+        <artifactId>ui-bootstrap4</artifactId>",
                "+        <version>${ui-bootstrap.version}</version>",
                "       </dependency>",
                "@@ -1463,3 +1457,3 @@ under the License.",
                "         <artifactId>angular-translate-loader-partial</artifactId>",
                "-        <version>${angular-translate.version}</version>",
                "+        <version>${angular-translate-loader-partial.version}</version>",
                "       </dependency>      ",
                "@@ -1648,8 +1642,2 @@ under the License.",
                "       <!-- TEST -->",
                "-      <dependency>",
                "-        <groupId>com.github.detro</groupId>",
                "-        <artifactId>phantomjsdriver</artifactId>",
                "-        <version>${phantomjs.driver.version}</version>",
                "-        <scope>test</scope>",
                "-      </dependency>",
                "       <dependency>",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "index 8eb8faa538..22b0b7c0f8 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "@@ -112,3 +112,4 @@ $ cp console/target/classes/*properties /opt/syncope/conf",
                " $ cp enduser/target/classes/*properties /opt/syncope/conf",
                "-$ cp enduser/target/classes/customForm.json /opt/syncope/conf",
                "+$ cp enduser/target/classes/customFormAttributes.json /opt/syncope/conf",
                "+$ cp enduser/target/classes/customTemplate.json /opt/syncope/conf",
                " ....",
                "@@ -630,3 +631,3 @@ The <<enduser-application>> allows to customize the form in order to:",
                "-Under the `enduser/src/main/resources` directory, the `customForm.json` file is available, allowing to configure form",
                "+Under the `enduser/src/main/resources` directory, the `customFormAttributes.json` file is available, allowing to configure form",
                " customization.",
                "@@ -636,3 +637,3 @@ customization.",
                " ====",
                "-The `customForm.json` could be edited and reloaded without the need of re-starting the Java EE container.",
                "+The `customFormAttributes.json` could be edited and reloaded without the need of re-starting the Java EE container.",
                " ====",
                "@@ -640,3 +641,3 @@ The `customForm.json` could be edited and reloaded without the need of re-starti",
                " [TIP]",
                "-The `customForm.json` default content is just an empty object `{}`: if such file is missing, empty or not valid,",
                "+The `customFormAttributes.json` default content is just an empty object `{}`: if such file is missing, empty or not valid,",
                " form customization will be simply disabled and all attributes will be shown.",
                "@@ -650,3 +651,2 @@ form customization will be simply disabled and all attributes will be shown.",
                "           {",
                "-            \"show\": true,",
                "             \"attributes\": {",
                "@@ -683,9 +683,4 @@ form customization will be simply disabled and all attributes will be shown.",
                "           },",
                "-  \"DERIVED\":",
                "-          {",
                "-            \"show\": false",
                "-          },",
                "   \"VIRTUAL\":",
                "           {",
                "-            \"show\": true,",
                "             \"attributes\": {",
                "@@ -701,3 +696,3 @@ form customization will be simply disabled and all attributes will be shown.",
                "-The `customForm.json` file has two main levels:",
                "+The `customFormAttributes.json` file has two main levels:",
                "@@ -713,5 +708,2 @@ Only one, two or all three sections can be specified, in order to customize only",
                "-Moreover, a global boolean field `show` is available, to indicate that the whole sub-form should be shown or hidden.",
                "-When not specified, `show` is treated as `true`.",
                "-",
                " [discrete]",
                "@@ -746,3 +738,2 @@ An empty `attributes` field translates to skip filtering and show all attributes",
                "           {",
                "-            \"show\": true,",
                "             \"attributes\": {}",
                "@@ -753,3 +744,3 @@ shows all `PLAIN` attributes.",
                "-If all attributes are to be hidden, please set `\"show\": false`, instead.",
                "+If all attributes are to be hidden, please use [[customization-enduser-template]] to hide the full wizard step, instead.",
                " ====",
                "@@ -770,2 +761,186 @@ Moreover, `defaultValues` do not overwrite any existing value.",
                "+[[customization-enduser-template]]",
                "+===== Dynamic Templating",
                "+",
                "+It is possible to customize the <<enduser-application>> using the \"Dynamic Templating\" feature. ",
                "+It is a simple and fast way to customize structure and style of the whole Enduser.",
                "+",
                "+Under the `enduser/src/main/resources` directory, the `customTemplate.json` file is available, allowing to configure application",
                "+style and structure.",
                "+",
                "+[NOTE]",
                "+.Hot deploy",
                "+====",
                "+The `customTemplate.json` could be edited and reloaded without the need of re-starting the Java EE container.",
                "+====",
                "+",
                "+[TIP]",
                "+====",
                "+The `customTemplate.json` default content is:",
                "+```",
                "+{",
                "+  \"templates\": ",
                "+          {",
                "+            \"login\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/selfTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/login.css\"",
                "+                      ]",
                "+                    },",
                "+",
                "+            \"edit_user\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/editUserTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\"",
                "+                      ]",
                "+                    },",
                "+",
                "+            \"password_reset\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/passwordresetTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\",",
                "+                        \"css/passwordReset.css\"",
                "+                      ]",
                "+                    }",
                "+          },",
                "+",
                "+  \"generalAssets\": ",
                "+          {",
                "+            \"css\": [",
                "+              \"css/notification.css\",",
                "+              \"css/app.css\"",
                "+            ]",
                "+          },",
                "+",
                "+  \"wizard\": ",
                "+          {",
                "+            \"firstStep\": \"credentials\",",
                "+            \"steps\": {",
                "+              \"credentials\": {",
                "+                \"url\": \"/credentials\"",
                "+              },",
                "+              \"groups\": {",
                "+                \"url\": \"/groups\"",
                "+              },",
                "+              \"plainSchemas\": {",
                "+                \"url\": \"/plainSchemas\"",
                "+              },",
                "+              \"derivedSchemas\": {",
                "+                \"url\": \"/derivedSchemas\"",
                "+              },",
                "+              \"virtualSchemas\": {",
                "+                \"url\": \"/virtualSchemas\"",
                "+              },",
                "+              \"resources\": {",
                "+                \"url\": \"/resources\"",
                "+              },",
                "+              \"finish\": {",
                "+                \"url\": \"/finish\"",
                "+              }",
                "+            }",
                "+          }",
                "+}",
                "+```",
                "+if such file is missing, empty or not valid, Enduser structure will not be valid and won't work as expected.",
                "+====",
                "+",
                "+[discrete]",
                "+====== Editing default template",
                "+",
                "+As sample, Syncope provides a configuration to apply a dark theme to Enduser and edit the \"User Edit / Create Wizard\" ",
                "+to only display 3 steps, like:",
                "+",
                "+* PlainSchemas;",
                "+* Details (Username, Password, Security question etc\u00e2\u0080\u00a6);",
                "+* Finish.",
                "+",
                "+The configurations for that sample are in",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/client/enduser/src/test/resources/customTemplate.json[customTemplate.json^].",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/2_1_X/client/enduser/src/test/resources/customTemplate.json[customTemplate.json^].",
                "+endif::[]",
                "+In order to apply them, that content must be copied to your `customTemplate.json` file.",
                "+",
                "+[discrete]",
                "+====== Template styling assets",
                "+",
                "+In case you need, place your static `.css` resources somewhere (e.g. `enduser/src/main/resources/META-INF/resources/app/css/templates/`)",
                "+and refer them in `customTemplate.json` file.",
                "+",
                "+[discrete]",
                "+====== Wizard steps",
                "+",
                "+It is also possible to customize the list of wizard steps to be shown in \"User Edit / Create Wizard\".",
                "+E.g., only 3 steps are displayed in the dark theme template sample configuration:",
                "+",
                "+```",
                "+\"wizard\": ",
                "+        {",
                "+          \"steps\": {",
                "+            \"plainSchemas\": {",
                "+              \"url\": \"/plainSchemas\"",
                "+            },",
                "+            \"credentials\": {",
                "+              \"url\": \"/credentials\"",
                "+            },",
                "+            \"finish\": {",
                "+              \"url\": \"/finish\"",
                "+            }",
                "+          }",
                "+        }",
                "+```",
                "+",
                "+Use the `\"firstStep\"` property to decide which step must be set as first one in the wizard:",
                "+",
                "+```",
                "+\"wizard\": ",
                "+        {",
                "+          \"firstStep\": \"plainSchemas\",",
                "+        }",
                "+```",
                "+",
                "+[discrete]",
                "+====== Template structure",
                "+",
                "+The structure of the template sections is defined by `templateUrl` property, for each main section:",
                "+",
                "+```",
                "+\"templates\": ",
                "+        {",
                "+         \"login\":",
                "+                {",
                "+                  \"templateUrl\": \"views/templates/selfTemplate.html\",",
                "+                },",
                "+",
                "+        \"edit_user\":",
                "+                {",
                "+                  \"templateUrl\": \"views/templates/onlyPlainAttrsDetails/editUserTemplate.html\",",
                "+                },",
                "+",
                "+        \"password_reset\":",
                "+                {",
                "+                  \"templateUrl\": \"views/templates/passwordresetTemplate.html\",",
                "+                },          ",
                "+        },",
                "+```",
                "+",
                "+E.g., `enduser/src/main/resources/META-INF/resources/app/views/templates/onlyPlainAttrsDetails/editUserTemplate.html` is ",
                "+equals to the default",
                "+`enduser/src/main/resources/META-INF/resources/app/views/templates/editUserTemplate.html`",
                "+template file. ",
                "+Anyway, it is just helpful to show that it is possible to customize all the application structure in a very simple way.",
                "+",
                "+It could also be useful to edit the specific parts of a single wizard step or view; all of those are placed in ",
                "+`enduser/src/main/resources/META-INF/resources/app/views/` folder.",
                "+",
                "+[WARNING]",
                "+Please do not change the main object keys in `customTemplate.json` file (e.g. `templates`, `edit_user`, `login`, `generalAssets`, etc...); ",
                "+they are used to identify the specific customizable template parts of the Enduser application.",
                "+In case it is necessary to change those identifiers, remember to edit all references in other parts of the application.",
                "+",
                " [[customization-extensions]]"
            ],
            "changed_files": [
                ".gitignore",
                "archetype/pom.xml",
                "archetype/src/main/resources/archetype-resources/enduser/pom.xml",
                "client/console/src/main/resources/org/apache/syncope/client/console/pages/BasePage.html",
                "client/console/src/main/resources/org/apache/syncope/client/console/pages/Login.html",
                "client/console/src/main/resources/org/apache/syncope/client/console/pages/MustChangePassword.html",
                "client/enduser/pom.xml",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserApplication.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/adapters/PlatformInfoAdapter.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomAttributesInfo.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplate.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplateInfo.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplateUrl.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomTemplateWizard.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/model/PlatformInfoRequest.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/DynamicTemplateResource.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/ExternalResourceResource.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/InfoResource.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java",
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/util/UserRequestValidator.java",
                "client/enduser/src/main/resources/META-INF/resources/app/css/app.css",
                "client/enduser/src/main/resources/META-INF/resources/app/css/customSpinner.css",
                "client/enduser/src/main/resources/META-INF/resources/app/css/editUser.css",
                "client/enduser/src/main/resources/META-INF/resources/app/css/login.css",
                "client/enduser/src/main/resources/META-INF/resources/app/css/notification.css",
                "client/enduser/src/main/resources/META-INF/resources/app/css/passwordReset.css",
                "client/enduser/src/main/resources/META-INF/resources/app/css/templates/dark/editUser.css",
                "client/enduser/src/main/resources/META-INF/resources/app/css/templates/dark/login.css",
                "client/enduser/src/main/resources/META-INF/resources/app/index.html",
                "client/enduser/src/main/resources/META-INF/resources/app/js/app.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/controllers/LoginController.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/controllers/OIDCClientController.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/controllers/SAML2SPController.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicPlainAttribute.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicTemplateItem.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicVirtualAttribute.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/directives/dynamicVirtualAttributes.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/directives/fileInput.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/directives/navigationButtonsPartial.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/services/dynamicTemplateService.js",
                "client/enduser/src/main/resources/META-INF/resources/app/js/util/assetsManager.js",
                "client/enduser/src/main/resources/META-INF/resources/app/views/captcha.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/confirmpasswordreset.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/dynamicDerivedAttributes.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/dynamicPlainAttribute.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/dynamicPlainAttributes.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/dynamicVirtualAttributes.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/editUser.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/mustchangepassword.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/navigationButtonsPartial.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/passwordreset.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/self.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/templates/editUserTemplate.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/templates/onlyPlainAttrsDetails/editUserTemplate.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/templates/passwordresetTemplate.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/templates/selfTemplate.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/user-credentials.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/user-derived-schemas.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/user-form-finish.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/user-groups.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/user-plain-schemas.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/user-resources.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/user-virtual-schemas.html",
                "client/enduser/src/main/resources/customFormAttributes.json",
                "client/enduser/src/main/resources/customTemplate.json",
                "deb/enduser/pom.xml",
                "deb/enduser/src/deb/control/conffiles",
                "fit/enduser-reference/pom.xml",
                "fit/enduser-reference/src/main/resources/customFormAttributes.json",
                "fit/enduser-reference/src/main/resources/customTemplate.json",
                "fit/enduser-reference/src/main/resources/package.json",
                "pom.xml",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1019": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f9937e77b78057f91a35d6caa46e9b1e3af832c7"
                ],
                [
                    "no-tag",
                    "19d9e93e0d9102aa8b138b8eca88050dc81667ef"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, html, edit, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1019",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fee1317dc3e32d89fcbab5f5e748f49ce5e04f83",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538483500,
            "hunks": 289,
            "message": "[SYNCOPE-1369] User requests forms now support dropdowns - via Flowable customization",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/commons/MapChoiceRenderer.java b/client/console/src/main/java/org/apache/syncope/client/console/commons/MapChoiceRenderer.java",
                "index 284510568e..92d060d349 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/commons/MapChoiceRenderer.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/commons/MapChoiceRenderer.java",
                "@@ -25,3 +25,3 @@ import org.apache.wicket.model.IModel;",
                "-public class MapChoiceRenderer<T, K> implements IChoiceRenderer<T> {",
                "+public class MapChoiceRenderer implements IChoiceRenderer<String> {",
                "@@ -29,5 +29,5 @@ public class MapChoiceRenderer<T, K> implements IChoiceRenderer<T> {",
                "-    private final Map<T, K> map;",
                "+    private final Map<String, String> map;",
                "-    public MapChoiceRenderer(final Map<T, K> map) {",
                "+    public MapChoiceRenderer(final Map<String, String> map) {",
                "         this.map = map;",
                "@@ -36,3 +36,3 @@ public class MapChoiceRenderer<T, K> implements IChoiceRenderer<T> {",
                "     @Override",
                "-    public Object getDisplayValue(final T key) {",
                "+    public Object getDisplayValue(final String key) {",
                "         return map.get(key);",
                "@@ -41,4 +41,4 @@ public class MapChoiceRenderer<T, K> implements IChoiceRenderer<T> {",
                "     @Override",
                "-    public String getIdValue(final T key, final int index) {",
                "-        return key.toString();",
                "+    public String getIdValue(final String key, final int index) {",
                "+        return key;",
                "     }",
                "@@ -46,9 +46,4 @@ public class MapChoiceRenderer<T, K> implements IChoiceRenderer<T> {",
                "     @Override",
                "-    public T getObject(final String id, final IModel<? extends List<? extends T>> choices) {",
                "-        for (Map.Entry<T, K> entry : map.entrySet()) {",
                "-            if (entry.getValue() != null && entry.getValue().toString().equals(id)) {",
                "-                return entry.getKey();",
                "-            }",
                "-        }",
                "-        return null;",
                "+    public String getObject(final String id, final IModel<? extends List<? extends String>> choices) {",
                "+        return id;",
                "     }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxDropDownChoicePanel.java b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxDropDownChoicePanel.java",
                "index 193c0ad415..c52efac6b2 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxDropDownChoicePanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxDropDownChoicePanel.java",
                "@@ -46,4 +46,3 @@ public class AjaxDropDownChoicePanel<T extends Serializable> extends FieldPanel<",
                "-        field = new BootstrapSelect<>(",
                "-                \"dropDownChoiceField\", model, Collections.<T>emptyList(), new ChoiceRenderer<>());",
                "+        field = new BootstrapSelect<>(\"dropDownChoiceField\", model, Collections.<T>emptyList(), new ChoiceRenderer<>());",
                "         add(field.setLabel(new Model<>(name)).setOutputMarkupId(true));",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java",
                "index 06e126b06a..bfbdc1d17e 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java",
                "@@ -138,3 +138,3 @@ public class Relationships extends WizardStep implements ICondition {",
                "                             setItems(relationships.get(relationship)).",
                "-                            includes(\"otherEndType\", \"otherEndKey\").",
                "+                            includes(\"otherEndType\", \"otherEndKey\", \"otherEndName\").",
                "                             addAction(new ActionLink<RelationshipTO>() {",
                "@@ -144,4 +144,3 @@ public class Relationships extends WizardStep implements ICondition {",
                "                                 @Override",
                "-                                public void onClick(",
                "-                                        final AjaxRequestTarget target, final RelationshipTO modelObject) {",
                "+                                public void onClick(final AjaxRequestTarget target, final RelationshipTO modelObject) {",
                "                                     removeRelationships(relationships, modelObject);",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships.properties",
                "index cfefe54e61..45e8a784df 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships.properties",
                "@@ -18 +18,4 @@ relationships.empty.list=No relationships defined",
                " any.relationships=Relationships",
                "+otherEndType=AnyType",
                "+otherEndKey=Key",
                "+otherEndName=Name",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_it.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_it.properties",
                "index 5260a62cdf..cdc900fd7a 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_it.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_it.properties",
                "@@ -18 +18,4 @@ relationships.empty.list=Nessuna relazione specificata",
                " any.relationships=Relazioni",
                "+otherEndType=AnyType",
                "+otherEndKey=Chiave",
                "+otherEndName=Nome",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_ja.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_ja.properties",
                "index c0f26aef3f..5561099759 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_ja.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_ja.properties",
                "@@ -18 +18,4 @@ relationships.empty.list=\\u95a2\\u4fc2\\u306f\\u5b9a\\u7fa9\\u3055\\u308c\\u3066\\u3044\\",
                " any.relationships=\\u95a2\\u4fc2",
                "+otherEndType=AnyType",
                "+otherEndKey=Key",
                "+otherEndName=Name",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_pt_BR.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_pt_BR.properties",
                "index 44f4ac8255..c0c71dcd24 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_pt_BR.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_pt_BR.properties",
                "@@ -18 +18,4 @@ relationships.empty.list=N\\u00e3o h\\u00e1 relacionamentos definidos",
                " any.relationships=Relationships",
                "+otherEndType=AnyType",
                "+otherEndKey=Key",
                "+otherEndName=Name",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_ru.properties b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_ru.properties",
                "index 93a15fb580..9fcb63a0fe 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_ru.properties",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_ru.properties",
                "@@ -19 +19,4 @@ relationships.empty.list=\\u0421\\u0432\\u044f\\u0437\\u0438 \\u043d\\u0435 \\u0437\\u043",
                " any.relationships=\\u0421\\u0432\\u044f\\u0437\\u0438",
                "+otherEndType=AnyType",
                "+otherEndKey=Key",
                "+otherEndName=Name",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java",
                "index 015e18c333..06dbd0d8b2 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java",
                "@@ -45,2 +45,9 @@ public class RelationshipTO extends AbstractBaseBean {",
                "+        public Builder otherEnd(final String otherEndType, final String otherEndKey, final String otherEndName) {",
                "+            instance.setOtherEndType(otherEndType);",
                "+            instance.setOtherEndKey(otherEndKey);",
                "+            instance.setOtherEndName(otherEndName);",
                "+            return this;",
                "+        }",
                "+",
                "         public RelationshipTO build() {",
                "@@ -56,2 +63,4 @@ public class RelationshipTO extends AbstractBaseBean {",
                "+    private String otherEndName;",
                "+",
                "     public String getType() {",
                "@@ -80,2 +89,9 @@ public class RelationshipTO extends AbstractBaseBean {",
                "+    public String getOtherEndName() {",
                "+        return otherEndName;",
                "+    }",
                "+",
                "+    public void setOtherEndName(final String otherEndName) {",
                "+        this.otherEndName = otherEndName;",
                "+    }",
                " }",
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java",
                "index f001204ba0..f8f05f9611 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java",
                "@@ -48,3 +48,3 @@ public interface AnyObjectDAO extends AnyDAO<AnyObject> {",
                "-    List<Relationship<Any<?>, Any<?>>> findAllRelationships(AnyObject anyObject);",
                "+    List<Relationship<Any<?>, AnyObject>> findAllRelationships(AnyObject anyObject);",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "index 4d8aaea931..a7211de90d 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "@@ -170,8 +170,8 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "     @Override",
                "-    public List<Relationship<Any<?>, Any<?>>> findAllRelationships(final AnyObject anyObject) {",
                "-        List<Relationship<Any<?>, Any<?>>> result = new ArrayList<>();",
                "+    public List<Relationship<Any<?>, AnyObject>> findAllRelationships(final AnyObject anyObject) {",
                "+        List<Relationship<Any<?>, AnyObject>> result = new ArrayList<>();",
                "         @SuppressWarnings(\"unchecked\")",
                "-        TypedQuery<Relationship<Any<?>, Any<?>>> aquery =",
                "-                (TypedQuery<Relationship<Any<?>, Any<?>>>) entityManager().createQuery(",
                "+        TypedQuery<Relationship<Any<?>, AnyObject>> aquery =",
                "+                (TypedQuery<Relationship<Any<?>, AnyObject>>) entityManager().createQuery(",
                "                         \"SELECT e FROM \" + JPAARelationship.class.getSimpleName()",
                "@@ -182,4 +182,4 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "         @SuppressWarnings(\"unchecked\")",
                "-        TypedQuery<Relationship<Any<?>, Any<?>>> uquery =",
                "-                (TypedQuery<Relationship<Any<?>, Any<?>>>) entityManager().createQuery(",
                "+        TypedQuery<Relationship<Any<?>, AnyObject>> uquery =",
                "+                (TypedQuery<Relationship<Any<?>, AnyObject>>) entityManager().createQuery(",
                "                         \"SELECT e FROM \" + JPAURelationship.class.getSimpleName()",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "index b6c63e3fa1..33077fee05 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "@@ -772,4 +772,4 @@ public class MappingManagerImpl implements MappingManager {",
                "         } else if (intAttrName.getSchemaType() != null && attr != null) {",
                "-            GroupableRelatableTO groupableTO = null;",
                "-            Group group = null;",
                "+            GroupableRelatableTO groupableTO;",
                "+            Group group;",
                "             if (anyTO instanceof GroupableRelatableTO && intAttrName.getMembershipOfGroup() != null) {",
                "@@ -777,2 +777,5 @@ public class MappingManagerImpl implements MappingManager {",
                "                 group = groupDAO.findByName(intAttrName.getMembershipOfGroup());",
                "+            } else {",
                "+                groupableTO = null;",
                "+                group = null;",
                "             }",
                "@@ -800,9 +803,8 @@ public class MappingManagerImpl implements MappingManager {",
                "                     } else {",
                "-                        Optional<MembershipTO> membership = groupableTO.getMembership(group.getKey());",
                "-                        if (!membership.isPresent()) {",
                "-                            membership = Optional.of(",
                "-                                    new MembershipTO.Builder().group(group.getKey(), group.getName()).build());",
                "-                            groupableTO.getMemberships().add(membership.get());",
                "-                        }",
                "-                        membership.get().getPlainAttrs().add(attrTO);",
                "+                        MembershipTO membership = groupableTO.getMembership(group.getKey()).orElseGet(() -> {",
                "+                            MembershipTO newMemb = new MembershipTO.Builder().group(group.getKey()).build();",
                "+                            groupableTO.getMemberships().add(newMemb);",
                "+                            return newMemb;",
                "+                        });",
                "+                        membership.getPlainAttrs().add(attrTO);",
                "                     }",
                "@@ -813,2 +815,3 @@ public class MappingManagerImpl implements MappingManager {",
                "                     attrTO.setSchema(intAttrName.getSchemaName());",
                "+",
                "                     if (groupableTO == null || group == null) {",
                "@@ -816,9 +819,8 @@ public class MappingManagerImpl implements MappingManager {",
                "                     } else {",
                "-                        Optional<MembershipTO> membership = groupableTO.getMembership(group.getKey());",
                "-                        if (!membership.isPresent()) {",
                "-                            membership = Optional.of(",
                "-                                    new MembershipTO.Builder().group(group.getKey(), group.getName()).build());",
                "-                            groupableTO.getMemberships().add(membership.get());",
                "-                        }",
                "-                        membership.get().getDerAttrs().add(attrTO);",
                "+                        MembershipTO membership = groupableTO.getMembership(group.getKey()).orElseGet(() -> {",
                "+                            MembershipTO newMemb = new MembershipTO.Builder().group(group.getKey()).build();",
                "+                            groupableTO.getMemberships().add(newMemb);",
                "+                            return newMemb;",
                "+                        });",
                "+                        membership.getDerAttrs().add(attrTO);",
                "                     }",
                "@@ -840,9 +842,8 @@ public class MappingManagerImpl implements MappingManager {",
                "                     } else {",
                "-                        Optional<MembershipTO> membership = groupableTO.getMembership(group.getKey());",
                "-                        if (!membership.isPresent()) {",
                "-                            membership = Optional.of(",
                "-                                    new MembershipTO.Builder().group(group.getKey(), group.getName()).build());",
                "-                            groupableTO.getMemberships().add(membership.get());",
                "-                        }",
                "-                        membership.get().getVirAttrs().add(attrTO);",
                "+                        MembershipTO membership = groupableTO.getMembership(group.getKey()).orElseGet(() -> {",
                "+                            MembershipTO newMemb = new MembershipTO.Builder().group(group.getKey()).build();",
                "+                            groupableTO.getMemberships().add(newMemb);",
                "+                            return newMemb;",
                "+                        });",
                "+                        membership.getVirAttrs().add(attrTO);",
                "                     }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "index 5c134dff4b..c7499a8ea3 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "@@ -71,2 +71,3 @@ import org.apache.syncope.core.persistence.api.entity.Realm;",
                " import org.apache.syncope.core.persistence.api.entity.VirSchema;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;",
                " import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;",
                "@@ -573,5 +574,5 @@ abstract class AbstractAnyDataBinder {",
                "-    protected RelationshipTO getRelationshipTO(final String relationshipType, final Any<?> otherEnd) {",
                "+    protected RelationshipTO getRelationshipTO(final String relationshipType, final AnyObject otherEnd) {",
                "         return new RelationshipTO.Builder().",
                "-                type(relationshipType).otherEnd(otherEnd.getType().getKey(), otherEnd.getKey()).",
                "+                type(relationshipType).otherEnd(otherEnd.getType().getKey(), otherEnd.getKey(), otherEnd.getName()).",
                "                 build();",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "index 129d0e4c48..1dd6194fdf 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "@@ -103,7 +103,8 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "             anyObjectTO.getRelationships().addAll(",
                "-                    anyObjectDAO.findAllRelationships(anyObject).stream().map(relationship -> getRelationshipTO(",
                "-                    relationship.getType().getKey(),",
                "-                    relationship.getLeftEnd().getKey().equals(anyObject.getKey())",
                "-                    ? relationship.getRightEnd()",
                "-                    : relationship.getLeftEnd())).",
                "+                    anyObjectDAO.findAllRelationships(anyObject).stream().",
                "+                            map(relationship -> getRelationshipTO(",
                "+                            relationship.getType().getKey(),",
                "+                            relationship.getLeftEnd().getKey().equals(anyObject.getKey())",
                "+                            ? relationship.getRightEnd()",
                "+                            : anyObject)).",
                "                             collect(Collectors.toList()));",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "index d328c43d16..58c2d7d155 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "@@ -604,6 +604,5 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "             // relationships",
                "-            userTO.getRelationships().addAll(",
                "-                    user.getRelationships().stream().map(relationship -> getRelationshipTO(",
                "-                    relationship.getType().getKey(), relationship.getRightEnd())).",
                "-                            collect(Collectors.toList()));",
                "+            userTO.getRelationships().addAll(user.getRelationships().stream().",
                "+                    map(relationship -> getRelationshipTO(relationship.getType().getKey(), relationship.getRightEnd())).",
                "+                    collect(Collectors.toList()));",
                "diff --git a/ext/flowable/client-console/pom.xml b/ext/flowable/client-console/pom.xml",
                "index ef2e989234..f076186f3e 100644",
                "--- a/ext/flowable/client-console/pom.xml",
                "+++ b/ext/flowable/client-console/pom.xml",
                "@@ -85,4 +85,4 @@ under the License.",
                "                   <patternset>",
                "-                    <include name=\"WEB-INF/classes/static/**\" />",
                "-                    <include name=\"WEB-INF/lib/flowable-ui-modeler-logic-${flowable.version}.jar\" />",
                "+                    <include name=\"WEB-INF/classes/static/**\"/>",
                "+                    <include name=\"WEB-INF/lib/flowable-ui-modeler-logic-${flowable.version}.jar\"/>",
                "                   </patternset>",
                "@@ -92,3 +92,3 @@ under the License.",
                "                   <patternset>",
                "-                    <include name=\"stencilset_bpmn.json\" />",
                "+                    <include name=\"stencilset_bpmn.json\"/>",
                "                   </patternset>",
                "@@ -98,18 +98,20 @@ under the License.",
                "                   <fileset dir=\"${flowable-modeler.directory}/WEB-INF/classes/static/\">",
                "-                    <include name=\"**\" />",
                "+                    <include name=\"**\"/>",
                "                   </fileset>",
                "                 </move>",
                "-                <delete dir=\"${flowable-modeler.directory}/WEB-INF\" />",
                "+                <delete dir=\"${flowable-modeler.directory}/WEB-INF\"/>",
                "-                <replace file=\"${flowable-modeler.directory}/index.html\" token=\"&lt;/head&gt;\" value=\"&lt;script type=&quot;text/javascript&quot;&gt;window.onunload = refreshParent; function refreshParent() { window.opener.location.reload(); }&lt;/script&gt;&lt;/head&gt;\" />",
                "-                <replace file=\"${flowable-modeler.directory}/index.html\" token=\" ng-click=&quot;backToLanding()&quot;\" value=\" disabled=&quot;disabled&quot;\" />",
                "-                <replace file=\"${flowable-modeler.directory}/index.html\" token=\"&lt;ul class=&quot;nav navbar-nav&quot; id=&quot;main-nav&quot;\" value=\"&lt;ul class=&quot;nav navbar-nav&quot; id=&quot;main-nav&quot; style=&quot;display: none;&quot;\" />",
                "-                <replace file=\"${flowable-modeler.directory}/index.html\" token=\"&lt;div class=&quot;pull-right\" value=\"&lt;div style=&quot;display: none;&quot; class=&quot;pull-right\" />",
                "-                <replace file=\"${flowable-modeler.directory}/editor-app/editor.html\" token=\"&lt;div class=&quot;btn-group pull-right&quot;\" value=\"&lt;div style=&quot;display: none;&quot; class=&quot;btn-group pull-right&quot;\" />",
                "-                <replace file=\"${flowable-modeler.directory}/editor-app/configuration/toolbar-default-actions.js\" token=\"$location.path('/processes');\" value=\"window.close();\" />",
                "+                <replace file=\"${flowable-modeler.directory}/index.html\" token=\"&lt;/head&gt;\" value=\"&lt;script type=&quot;text/javascript&quot;&gt;window.onunload = refreshParent; function refreshParent() { window.opener.location.reload(); }&lt;/script&gt;&lt;/head&gt;\"/>",
                "+                <replace file=\"${flowable-modeler.directory}/index.html\" token=\" ng-click=&quot;backToLanding()&quot;\" value=\" disabled=&quot;disabled&quot;\"/>",
                "+                <replace file=\"${flowable-modeler.directory}/index.html\" token=\"&lt;ul class=&quot;nav navbar-nav&quot; id=&quot;main-nav&quot;\" value=\"&lt;ul class=&quot;nav navbar-nav&quot; id=&quot;main-nav&quot; style=&quot;display: none;&quot;\"/>",
                "+                <replace file=\"${flowable-modeler.directory}/index.html\" token=\"&lt;div class=&quot;pull-right\" value=\"&lt;div style=&quot;display: none;&quot; class=&quot;pull-right\"/>",
                "+                <replace file=\"${flowable-modeler.directory}/editor-app/editor.html\" token=\"&lt;div class=&quot;btn-group pull-right&quot;\" value=\"&lt;div style=&quot;display: none;&quot; class=&quot;btn-group pull-right&quot;\"/>",
                "+                <replace file=\"${flowable-modeler.directory}/editor-app/configuration/toolbar-default-actions.js\" token=\"$location.path('/processes');\" value=\"window.close();\"/>",
                "-                <copy file=\"${basedir}/src/main/resources/app-cfg.js\" todir=\"${flowable-modeler.directory}/scripts\" overwrite=\"true\" />",
                "-                <copy file=\"${basedir}/src/main/resources/url-config.js\" todir=\"${flowable-modeler.directory}/editor-app/configuration\" overwrite=\"true\" />",
                "-                <copy file=\"${basedir}/src/main/resources/toolbar.js\" todir=\"${flowable-modeler.directory}/editor-app/configuration\" overwrite=\"true\" />",
                "-                <copy file=\"${basedir}/src/main/resources/save-model.html\" todir=\"${flowable-modeler.directory}/editor-app/popups\" overwrite=\"true\" />",
                "+                <copy file=\"${basedir}/src/main/resources/app-cfg.js\" todir=\"${flowable-modeler.directory}/scripts\" overwrite=\"true\"/>",
                "+                <copy file=\"${basedir}/src/main/resources/url-config.js\" todir=\"${flowable-modeler.directory}/editor-app/configuration\" overwrite=\"true\"/>",
                "+                <copy file=\"${basedir}/src/main/resources/toolbar.js\" todir=\"${flowable-modeler.directory}/editor-app/configuration\" overwrite=\"true\"/>",
                "+                <copy file=\"${basedir}/src/main/resources/save-model.html\" todir=\"${flowable-modeler.directory}/editor-app/popups\" overwrite=\"true\"/>",
                "+",
                "+                <patch patchfile=\"${basedir}/src/main/resources/dropdown.diff\" dir=\"${flowable-modeler.directory}\" strip=\"1\"/>",
                "               </target>",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/approvals/Approval.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/approvals/Approval.java",
                "index 3bea1a90e4..6a66afc0e3 100644",
                "--- a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/approvals/Approval.java",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/approvals/Approval.java",
                "@@ -47,3 +47,2 @@ import org.apache.wicket.model.IModel;",
                " import org.apache.wicket.model.LoadableDetachableModel;",
                "-import org.apache.wicket.model.Model;",
                " import org.apache.wicket.model.PropertyModel;",
                "@@ -105,3 +104,3 @@ public abstract class Approval extends Panel {",
                "                     case Date:",
                "-                        final FastDateFormat formatter = FastDateFormat.getInstance(prop.getDatePattern());",
                "+                        FastDateFormat formatter = FastDateFormat.getInstance(prop.getDatePattern());",
                "                         field = new AjaxDateTimeFieldPanel(\"value\", label, new PropertyModel<Date>(prop, \"value\") {",
                "@@ -113,7 +112,5 @@ public abstract class Approval extends Panel {",
                "                                 try {",
                "-                                    if (StringUtils.isBlank(prop.getValue())) {",
                "-                                        return null;",
                "-                                    } else {",
                "-                                        return formatter.parse(prop.getValue());",
                "-                                    }",
                "+                                    return StringUtils.isBlank(prop.getValue())",
                "+                                            ? null",
                "+                                            : formatter.parse(prop.getValue());",
                "                                 } catch (ParseException e) {",
                "@@ -133,15 +130,13 @@ public abstract class Approval extends Panel {",
                "                     case Enum:",
                "-                        MapChoiceRenderer<String, String> enumCR = new MapChoiceRenderer<>(prop.getEnumValues());",
                "-",
                "                         field = new AjaxDropDownChoicePanel(",
                "                                 \"value\", label, new PropertyModel<String>(prop, \"value\"), false).",
                "-                                setChoiceRenderer(enumCR).setChoices(new Model<ArrayList<String>>() {",
                "-",
                "-                            private static final long serialVersionUID = -858521070366432018L;",
                "+                                setChoiceRenderer(new MapChoiceRenderer(prop.getEnumValues())).",
                "+                                setChoices(new ArrayList<>(prop.getEnumValues().keySet()));",
                "+                        break;",
                "-                            @Override",
                "-                            public ArrayList<String> getObject() {",
                "-                                return new ArrayList<>(prop.getEnumValues().keySet());",
                "-                            }",
                "-                        });",
                "+                    case Dropdown:",
                "+                        field = new AjaxDropDownChoicePanel(",
                "+                                \"value\", label, new PropertyModel<String>(prop, \"value\"), false).",
                "+                                setChoiceRenderer(new MapChoiceRenderer(prop.getDropdownValues())).",
                "+                                setChoices(new ArrayList<>(prop.getDropdownValues().keySet()));",
                "                         break;",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java",
                "index e16f5c2cdc..577ea65aa0 100644",
                "--- a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java",
                "@@ -115,3 +115,3 @@ public class ApprovalDirectoryPanel",
                "-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, FlowableEntitlement.WORKFLOW_FORM_SUBMIT);",
                "+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, FlowableEntitlement.USER_REQUEST_FORM_SUBMIT);",
                "     }",
                "@@ -123,3 +123,3 @@ public class ApprovalDirectoryPanel",
                "         columns.add(new PropertyColumn<>(",
                "-                new ResourceModel(\"taskId\"), \"taskId\", \"taskId\"));",
                "+                new ResourceModel(\"bpmnProcess\"), \"bpmnProcess\", \"bpmnProcess\"));",
                "         columns.add(new PropertyColumn<>(",
                "@@ -153,3 +153,3 @@ public class ApprovalDirectoryPanel",
                "             }",
                "-        }, ActionLink.ActionType.CLAIM, FlowableEntitlement.WORKFLOW_FORM_CLAIM);",
                "+        }, ActionLink.ActionType.CLAIM, FlowableEntitlement.USER_REQUEST_FORM_CLAIM);",
                "@@ -192,3 +192,3 @@ public class ApprovalDirectoryPanel",
                "-        }, ActionLink.ActionType.MANAGE_APPROVAL, FlowableEntitlement.WORKFLOW_FORM_READ);",
                "+        }, ActionLink.ActionType.MANAGE_APPROVAL, FlowableEntitlement.USER_REQUEST_FORM_SUBMIT);",
                "@@ -241,3 +241,3 @@ public class ApprovalDirectoryPanel",
                "-        }, ActionLink.ActionType.EDIT_APPROVAL, FlowableEntitlement.WORKFLOW_FORM_SUBMIT);",
                "+        }, ActionLink.ActionType.EDIT_APPROVAL, FlowableEntitlement.USER_REQUEST_FORM_SUBMIT);",
                "@@ -328,4 +328,2 @@ public class ApprovalDirectoryPanel",
                "-            ProvisioningResult<UserTO> result;",
                "-",
                "             UserPatch patch = AnyOperations.diff(inner, formTO.getUserTO(), false);",
                "@@ -339,3 +337,5 @@ public class ApprovalDirectoryPanel",
                "             }",
                "+",
                "             // update just if it is changed",
                "+            ProvisioningResult<UserTO> result;",
                "             if (patch.isEmpty()) {",
                "@@ -345,6 +345,3 @@ public class ApprovalDirectoryPanel",
                "                 result = userRestClient.update(getOriginalItem().getInnerObject().getETagValue(), patch);",
                "-                UserRequestForm workFlowTO = restClient.getForms(result.getEntity().getKey()).get(0);",
                "-                if (workFlowTO != null) {",
                "-                    claimForm(workFlowTO.getTaskId());",
                "-                }",
                "+                restClient.getForm(result.getEntity().getKey()).ifPresent(form -> claimForm(form.getTaskId()));",
                "             }",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java",
                "index 562aad1277..8062a77b13 100644",
                "--- a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java",
                "@@ -25,3 +25,3 @@ import org.apache.syncope.client.console.panels.BpmnProcessDirectoryPanel;",
                " import org.apache.syncope.client.console.wizards.WizardMgtPanel;",
                "-import org.apache.syncope.common.lib.to.BpmnProcessTO;",
                "+import org.apache.syncope.common.lib.to.BpmnProcess;",
                " import org.apache.syncope.common.lib.types.FlowableEntitlement;",
                "@@ -50,3 +50,3 @@ public class Flowable extends BaseExtPage {",
                "-        WizardMgtPanel<BpmnProcessTO> bpmnProcessesPanel = new BpmnProcessDirectoryPanel.Builder(getPageReference()) {",
                "+        WizardMgtPanel<BpmnProcess> bpmnProcessesPanel = new BpmnProcessDirectoryPanel.Builder(getPageReference()) {",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/BpmnProcessDirectoryPanel.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/BpmnProcessDirectoryPanel.java",
                "index b7914bbe54..8f4d566eaf 100644",
                "--- a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/BpmnProcessDirectoryPanel.java",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/BpmnProcessDirectoryPanel.java",
                "@@ -45,3 +45,3 @@ import org.apache.syncope.client.console.wizards.WizardMgtPanel;",
                " import org.apache.syncope.common.lib.SyncopeClientException;",
                "-import org.apache.syncope.common.lib.to.BpmnProcessTO;",
                "+import org.apache.syncope.common.lib.to.BpmnProcess;",
                " import org.apache.syncope.common.lib.types.FlowableEntitlement;",
                "@@ -67,3 +67,3 @@ import org.apache.wicket.util.io.IOUtils;",
                " public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "-        BpmnProcessTO, BpmnProcessTO, BpmProcessDataProvider, BpmnProcessRestClient> {",
                "+        BpmnProcess, BpmnProcess, BpmProcessDataProvider, BpmnProcessRestClient> {",
                "@@ -78,3 +78,3 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "-        this.addNewItemPanelBuilder(new AjaxWizardBuilder<BpmnProcessTO>(new BpmnProcessTO(), pageRef) {",
                "+        this.addNewItemPanelBuilder(new AjaxWizardBuilder<BpmnProcess>(new BpmnProcess(), pageRef) {",
                "@@ -84,3 +84,3 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "             protected WizardModel buildModelSteps(",
                "-                    final BpmnProcessTO modelObject, final WizardModel wizardModel) {",
                "+                    final BpmnProcess modelObject, final WizardModel wizardModel) {",
                "@@ -135,4 +135,4 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "     @Override",
                "-    protected List<IColumn<BpmnProcessTO, String>> getColumns() {",
                "-        List<IColumn<BpmnProcessTO, String>> columns = new ArrayList<>();",
                "+    protected List<IColumn<BpmnProcess, String>> getColumns() {",
                "+        List<IColumn<BpmnProcess, String>> columns = new ArrayList<>();",
                "@@ -145,6 +145,6 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "     @Override",
                "-    public ActionsPanel<BpmnProcessTO> getActions(final IModel<BpmnProcessTO> model) {",
                "-        final ActionsPanel<BpmnProcessTO> panel = super.getActions(model);",
                "+    public ActionsPanel<BpmnProcess> getActions(final IModel<BpmnProcess> model) {",
                "+        final ActionsPanel<BpmnProcess> panel = super.getActions(model);",
                "-        panel.add(new ActionLink<BpmnProcessTO>() {",
                "+        panel.add(new ActionLink<BpmnProcess>() {",
                "@@ -153,3 +153,3 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "             @Override",
                "-            public void onClick(final AjaxRequestTarget target, final BpmnProcessTO ignore) {",
                "+            public void onClick(final AjaxRequestTarget target, final BpmnProcess ignore) {",
                "                 final IModel<String> wfDefinition = new Model<>();",
                "@@ -191,3 +191,3 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "-        panel.add(new ActionLink<BpmnProcessTO>() {",
                "+        panel.add(new ActionLink<BpmnProcess>() {",
                "@@ -196,3 +196,3 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "             @Override",
                "-            public void onClick(final AjaxRequestTarget target, final BpmnProcessTO ignore) {",
                "+            public void onClick(final AjaxRequestTarget target, final BpmnProcess ignore) {",
                "                 modal.header(Model.of(model.getObject().getKey()));",
                "@@ -205,3 +205,3 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "-        panel.add(new ActionLink<BpmnProcessTO>() {",
                "+        panel.add(new ActionLink<BpmnProcess>() {",
                "@@ -224,3 +224,3 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "             @Override",
                "-            public void onClick(final AjaxRequestTarget target, final BpmnProcessTO ignore) {",
                "+            public void onClick(final AjaxRequestTarget target, final BpmnProcess ignore) {",
                "                 // do nothing",
                "@@ -229,3 +229,3 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "-        panel.add(new ActionLink<BpmnProcessTO>() {",
                "+        panel.add(new ActionLink<BpmnProcess>() {",
                "@@ -234,3 +234,3 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "             @Override",
                "-            protected boolean statusCondition(final BpmnProcessTO modelObject) {",
                "+            protected boolean statusCondition(final BpmnProcess modelObject) {",
                "                 return !modelObject.isUserWorkflow();",
                "@@ -239,3 +239,3 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "             @Override",
                "-            public void onClick(final AjaxRequestTarget target, final BpmnProcessTO ignore) {",
                "+            public void onClick(final AjaxRequestTarget target, final BpmnProcess ignore) {",
                "                 try {",
                "@@ -262,3 +262,3 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "     public abstract static class Builder",
                "-            extends DirectoryPanel.Builder<BpmnProcessTO, BpmnProcessTO, BpmnProcessRestClient> {",
                "+            extends DirectoryPanel.Builder<BpmnProcess, BpmnProcess, BpmnProcessRestClient> {",
                "@@ -271,3 +271,3 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "         @Override",
                "-        protected WizardMgtPanel<BpmnProcessTO> newInstance(final String id, final boolean wizardInModal) {",
                "+        protected WizardMgtPanel<BpmnProcess> newInstance(final String id, final boolean wizardInModal) {",
                "             return new BpmnProcessDirectoryPanel(id, this);",
                "@@ -276,3 +276,3 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "-    protected class BpmProcessDataProvider extends DirectoryDataProvider<BpmnProcessTO> {",
                "+    protected class BpmProcessDataProvider extends DirectoryDataProvider<BpmnProcess> {",
                "@@ -280,3 +280,3 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "-        private final SortableDataProviderComparator<BpmnProcessTO> comparator;",
                "+        private final SortableDataProviderComparator<BpmnProcess> comparator;",
                "@@ -291,4 +291,4 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "         @Override",
                "-        public Iterator<BpmnProcessTO> iterator(final long first, final long count) {",
                "-            List<BpmnProcessTO> result = restClient.getDefinitions();",
                "+        public Iterator<BpmnProcess> iterator(final long first, final long count) {",
                "+            List<BpmnProcess> result = restClient.getDefinitions();",
                "             Collections.sort(result, comparator);",
                "@@ -303,3 +303,3 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<",
                "         @Override",
                "-        public IModel<BpmnProcessTO> model(final BpmnProcessTO object) {",
                "+        public IModel<BpmnProcess> model(final BpmnProcess object) {",
                "             return new CompoundPropertyModel<>(object);",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/AbstractBpmnProcessResource.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/AbstractBpmnProcessResource.java",
                "index 91a42e3027..7ad5f24aeb 100644",
                "--- a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/AbstractBpmnProcessResource.java",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/AbstractBpmnProcessResource.java",
                "@@ -23,3 +23,3 @@ import org.apache.syncope.client.console.commons.Constants;",
                " import org.apache.syncope.client.console.rest.BpmnProcessRestClient;",
                "-import org.apache.syncope.common.lib.to.BpmnProcessTO;",
                "+import org.apache.syncope.common.lib.to.BpmnProcess;",
                " import org.apache.wicket.request.resource.AbstractResource;",
                "@@ -37,6 +37,6 @@ abstract class AbstractBpmnProcessResource extends AbstractResource {",
                "-    protected BpmnProcessTO getBpmnProcess(final Attributes attributes) {",
                "+    protected BpmnProcess getBpmnProcess(final Attributes attributes) {",
                "         StringValue modelId = attributes.getRequest().getQueryParameters().getParameterValue(Constants.MODEL_ID_PARAM);",
                "-        BpmnProcessTO bpmnProcess = modelId == null || modelId.isNull()",
                "+        BpmnProcess bpmnProcess = modelId == null || modelId.isNull()",
                "                 ? null",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/BpmnProcessGETResource.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/BpmnProcessGETResource.java",
                "index ba3450233b..dfe633e530 100644",
                "--- a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/BpmnProcessGETResource.java",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/BpmnProcessGETResource.java",
                "@@ -25,3 +25,3 @@ import org.apache.syncope.client.console.annotations.Resource;",
                " import org.apache.syncope.client.console.rest.BpmnProcessRestClient;",
                "-import org.apache.syncope.common.lib.to.BpmnProcessTO;",
                "+import org.apache.syncope.common.lib.to.BpmnProcess;",
                " import org.apache.wicket.util.io.IOUtils;",
                "@@ -38,3 +38,3 @@ public class BpmnProcessGETResource extends AbstractBpmnProcessResource {",
                "     protected ResourceResponse newResourceResponse(final Attributes attributes) {",
                "-        final BpmnProcessTO toGet = getBpmnProcess(attributes);",
                "+        final BpmnProcess toGet = getBpmnProcess(attributes);",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/BpmnProcessPUTResource.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/BpmnProcessPUTResource.java",
                "index d583396557..1031ce8e05 100644",
                "--- a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/BpmnProcessPUTResource.java",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/BpmnProcessPUTResource.java",
                "@@ -26,3 +26,3 @@ import org.apache.cxf.common.util.UrlUtils;",
                " import org.apache.syncope.client.console.annotations.Resource;",
                "-import org.apache.syncope.common.lib.to.BpmnProcessTO;",
                "+import org.apache.syncope.common.lib.to.BpmnProcess;",
                " import org.apache.wicket.util.io.IOUtils;",
                "@@ -54,3 +54,3 @@ public class BpmnProcessPUTResource extends AbstractBpmnProcessResource {",
                "-        BpmnProcessTO toSet = getBpmnProcess(attributes);",
                "+        BpmnProcess toSet = getBpmnProcess(attributes);",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/BpmnProcessRestClient.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/BpmnProcessRestClient.java",
                "index 2b7c36810a..9e8843196d 100644",
                "--- a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/BpmnProcessRestClient.java",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/BpmnProcessRestClient.java",
                "@@ -27,3 +27,3 @@ import org.apache.cxf.jaxrs.client.WebClient;",
                " import org.apache.syncope.client.console.SyncopeConsoleSession;",
                "-import org.apache.syncope.common.lib.to.BpmnProcessTO;",
                "+import org.apache.syncope.common.lib.to.BpmnProcess;",
                " import org.apache.syncope.common.rest.api.RESTHeaders;",
                "@@ -39,3 +39,3 @@ public class BpmnProcessRestClient extends BaseRestClient {",
                "-    public List<BpmnProcessTO> getDefinitions() {",
                "+    public List<BpmnProcess> getDefinitions() {",
                "         return getService(BpmnProcessService.class).list();",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/UserRequestRestClient.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/UserRequestRestClient.java",
                "index 555555b90d..e3a179f71c 100644",
                "--- a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/UserRequestRestClient.java",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/UserRequestRestClient.java",
                "@@ -21,2 +21,4 @@ package org.apache.syncope.client.console.rest;",
                " import java.util.List;",
                "+import java.util.Optional;",
                "+import org.apache.syncope.common.lib.to.PagedResult;",
                " import org.apache.syncope.common.lib.to.UserRequestForm;",
                "@@ -42,4 +44,9 @@ public class UserRequestRestClient extends BaseRestClient {",
                "-    public List<UserRequestForm> getForms(final String userKey) {",
                "-        return getService(UserRequestService.class).getForms(userKey);",
                "+    public Optional<UserRequestForm> getForm(final String userKey) {",
                "+        PagedResult<UserRequestForm> forms = getService(UserRequestService.class).",
                "+                getForms(new UserRequestFormQuery.Builder().user(userKey).page(1).size(1).build());",
                "+        UserRequestForm form = forms.getResult().isEmpty()",
                "+                ? null",
                "+                : forms.getResult().get(0);",
                "+        return Optional.ofNullable(form);",
                "     }",
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/widgets/ApprovalsWidget.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/widgets/ApprovalsWidget.java",
                "index 8f8329e872..9a9fd2d0ce 100644",
                "--- a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/widgets/ApprovalsWidget.java",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/widgets/ApprovalsWidget.java",
                "@@ -89,4 +89,3 @@ public class ApprovalsWidget extends ExtAlertWidget<UserRequestForm> {",
                "     protected int getLatestAlertsSize() {",
                "-        return SyncopeConsoleSession.get().owns(FlowableEntitlement.WORKFLOW_FORM_LIST)",
                "-                && SyncopeConsoleSession.get().owns(FlowableEntitlement.WORKFLOW_FORM_READ)",
                "+        return SyncopeConsoleSession.get().owns(FlowableEntitlement.USER_REQUEST_FORM_LIST)",
                "                 ? restClient.countForms()",
                "@@ -104,5 +103,3 @@ public class ApprovalsWidget extends ExtAlertWidget<UserRequestForm> {",
                "                 List<UserRequestForm> updatedApprovals;",
                "-                if (SyncopeConsoleSession.get().owns(FlowableEntitlement.WORKFLOW_FORM_LIST)",
                "-                        && SyncopeConsoleSession.get().owns(FlowableEntitlement.WORKFLOW_FORM_READ)) {",
                "-",
                "+                if (SyncopeConsoleSession.get().owns(FlowableEntitlement.USER_REQUEST_FORM_LIST)) {",
                "                     updatedApprovals = restClient.getForms(1, MAX_SIZE, new SortParam<>(\"createTime\", true));",
                "@@ -120,3 +117,4 @@ public class ApprovalsWidget extends ExtAlertWidget<UserRequestForm> {",
                "         BookmarkablePageLink<Approvals> approvals = BookmarkablePageLinkBuilder.build(linkid, Approvals.class);",
                "-        MetaDataRoleAuthorizationStrategy.authorize(approvals, WebPage.ENABLE, FlowableEntitlement.WORKFLOW_FORM_LIST);",
                "+        MetaDataRoleAuthorizationStrategy.authorize(",
                "+                approvals, WebPage.ENABLE, FlowableEntitlement.USER_REQUEST_FORM_LIST);",
                "         return approvals;",
                "diff --git a/ext/flowable/client-console/src/main/resources/dropdown.diff b/ext/flowable/client-console/src/main/resources/dropdown.diff",
                "new file mode 100644",
                "index 0000000000..80fe1e70d7",
                "--- /dev/null",
                "+++ b/ext/flowable/client-console/src/main/resources/dropdown.diff",
                "@@ -0,0 +1,139 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+diff --git a/editor-app/configuration/properties-form-properties-controller.js b/editor-app/configuration/properties-form-properties-controller.js",
                "+index ca8f051..fc02151 100644",
                "+--- a/editor-app/configuration/properties-form-properties-controller.js",
                "++++ b/editor-app/configuration/properties-form-properties-controller.js",
                "+@@ -102,6 +102,20 @@ angular.module('flowableModeler').controller('FlowableFormPropertiesPopupCtrl',",
                "+                 { field: 'name', displayName: $scope.labels.nameLabel}]",
                "+             }",
                "+ ",
                "++            $scope.dropdownGridOptions = {",
                "++    \t\t    data: $scope.enumValues,",
                "++                headerRowHeight: 28,",
                "++                enableRowSelection: true,",
                "++                enableRowHeaderSelection: false,",
                "++                multiSelect: false,",
                "++                modifierKeysToMultiSelect: false,",
                "++                enableHorizontalScrollbar: 0,",
                "++                enableColumnMenus: false,",
                "++                enableSorting: false,",
                "++                columnDefs: [{ field: 'id', displayName: $scope.labels.idLabel },",
                "++                { field: 'name', displayName: $scope.labels.nameLabel}]",
                "++            }",
                "++",
                "+             $scope.gridOptions.onRegisterApi = function (gridApi) {",
                "+                 //set gridApi on scope",
                "+                 $scope.gridApi = gridApi;",
                "+@@ -124,6 +138,13 @@ angular.module('flowableModeler').controller('FlowableFormPropertiesPopupCtrl',",
                "+                     $scope.selectedEnumValue = row.entity;",
                "+                 });",
                "+             };",
                "++            $scope.dropdownGridOptions.onRegisterApi = function (gridApi) {",
                "++                //set gridApi on scope",
                "++                $scope.dropdownGridApi = gridApi;",
                "++                gridApi.selection.on.rowSelectionChanged($scope, function (row) {",
                "++                    $scope.selectedDropdownValue = row.entity;",
                "++                });",
                "++            };",
                "+         });",
                "+ ",
                "+         // Handler for when the value of the type dropdown changes",
                "+@@ -143,7 +164,12 @@ angular.module('flowableModeler').controller('FlowableFormPropertiesPopupCtrl',",
                "+                 for (var i = 0; i < $scope.selectedProperty.enumValues.length; i++) {",
                "+                     $scope.enumValues.push($scope.selectedProperty.enumValues[i]);",
                "+                 }",
                "+-                ",
                "++            } else if ($scope.selectedProperty.type === 'dropdown') {",
                "++                $scope.selectedProperty.enumValues = [ {id: 'dropdownValueProvider', name: 'provider'}];",
                "++                $scope.enumValues.length = 0;",
                "++                for (var i = 0; i < $scope.selectedProperty.enumValues.length; i++) {",
                "++                    $scope.enumValues.push($scope.selectedProperty.enumValues[i]);",
                "++                }",
                "+             } else {",
                "+                 delete $scope.selectedProperty.enumValues;",
                "+                 $scope.enumValues.length = 0;",
                "+@@ -324,4 +350,4 @@ angular.module('flowableModeler').controller('FlowableFormPropertiesPopupCtrl',",
                "+         };",
                "+ ",
                "+     }])",
                "+-;",
                "+\\ No newline at end of file",
                "++;",
                "+diff --git a/editor-app/configuration/properties/form-properties-popup.html b/editor-app/configuration/properties/form-properties-popup.html",
                "+index 17c5ca8..57a24e5 100644",
                "+--- a/editor-app/configuration/properties/form-properties-popup.html",
                "++++ b/editor-app/configuration/properties/form-properties-popup.html",
                "+@@ -42,6 +42,7 @@",
                "+                                     <option>boolean</option>",
                "+                                     <option>date</option>",
                "+                                     <option>enum</option>",
                "++                                    <option>dropdown</option>",
                "+                                 </select>",
                "+             \t\t\t\t</div>",
                "+                            \t<div class=\"form-group\" ng-show=\"selectedProperty.datePattern\">",
                "+@@ -80,6 +81,38 @@",
                "+                                     </div>",
                "+                                 </div>    ",
                "+             \t\t\t\t</div>",
                "++                            <div ng-show=\"selectedProperty.type == 'dropdown'\" style=\"padding-bottom:10px\">",
                "++                                <div class=\"row row-no-gutter\">",
                "++                                    <div class=\"col-xs-6\">",
                "++                                        <div ng-if=\"translationsRetrieved\" class=\"kis-listener-grid\" ui-grid=\"dropdownGridOptions\" ui-grid-selection ui-grid-auto-resize></div>",
                "++                                        <!--<div class=\"pull-right\">",
                "++                                            <div class=\"btn-group\">",
                "++                                                <a class=\"btn btn-icon btn-lg\" rel=\"tooltip\" data-title=\"{{ACTION.MOVE.UP | translate}}\" data-placement=\"bottom\" data-original-title=\"\" title=\"\" ng-click=\"moveEnumValueUp()\"><i class=\"glyphicon glyphicon-arrow-up\"></i></a>",
                "++                                                <a class=\"btn btn-icon btn-lg\" rel=\"tooltip\" data-title=\"{{ACTION.MOVE.DOWN | translate}}\" data-placement=\"bottom\" data-original-title=\"\" title=\"\" ng-click=\"moveEnumValueDown()\"><i class=\"glyphicon glyphicon-arrow-down\"></i></a>",
                "++                                            </div>",
                "++                                            <div class=\"btn-group\">",
                "++                                                <a class=\"btn btn-icon btn-lg\" rel=\"tooltip\" data-title=\"{{ACTION.ADD | translate}}\" data-placement=\"bottom\" data-original-title=\"\" title=\"\" ng-click=\"addNewEnumValue()\"><i class=\"glyphicon glyphicon-plus\"></i></a>",
                "++                                                <a class=\"btn btn-icon btn-lg\" rel=\"tooltip\" data-title=\"{{ACTION.REMOVE | translate}}\" data-placement=\"bottom\" data-original-title=\"\" title=\"\" ng-click=\"removeEnumValue()\"><i class=\"glyphicon glyphicon-minus\"></i></a>",
                "++                                            </div>",
                "++                                        </div>-->",
                "++                                    </div>",
                "++                            ",
                "++                                    <div class=\"col-xs-6\">",
                "++                                        <div ng-show=\"selectedDropdownValue\">",
                "++                            ",
                "++                                            <div class=\"form-group\">",
                "++                                                <label for=\"classField\">{{'PROPERTY.FORMPROPERTIES.VALUES.ID' | translate}}</label>",
                "++                                                <input type=\"text\" id=\"classField\" class=\"form-control\" ng-model=\"selectedDropdownValue.id\" placeholder=\"{{'PROPERTY.FORMPROPERTIES.VALUES.ID.PLACEHOLDER' | translate}}\" />",
                "++                                            </div>",
                "++                                            <div class=\"form-group\">",
                "++                                                <label for=\"classField\">{{'PROPERTY.FORMPROPERTIES.VALUES.NAME' | translate}}</label>",
                "++                                                <input type=\"text\" id=\"classField\" class=\"form-control\" ng-model=\"selectedDropdownValue.name\" placeholder=\"{{'PROPERTY.FORMPROPERTIES.VALUES.NAME.PLACEHOLDER' | translate}}\" />",
                "++                                            </div>",
                "++                                        </div>",
                "++                                        <div ng-show=\"!selectedDropdownValue\" class=\"muted no-property-selected\" translate>PROPERTY.FORMPROPERTIES.DROPDOWNVALUES.EMPTY</div>",
                "++                                    </div>",
                "++                                </div>    ",
                "++            \t\t\t\t</div>",
                "+                             <div class=\"form-group\">",
                "+             \t\t\t   \t\t<label for=\"expressionField\">{{'PROPERTY.FORMPROPERTIES.EXPRESSION' | translate}}</label>",
                "+             \t\t\t   \t\t<input id=\"expressionField\" class=\"form-control\" type=\"text\" ng-model=\"selectedProperty.expression\" placeholder=\"{{'PROPERTY.FORMPROPERTIES.EXPRESSION.PLACEHOLDER' | translate }}\" />",
                "+diff --git a/i18n/en.json b/i18n/en.json",
                "+index 7d0e40a..1067dad 100644",
                "+--- a/i18n/en.json",
                "++++ b/i18n/en.json",
                "+@@ -824,6 +824,7 @@",
                "+     \"PROPERTY.FORMPROPERTIES.DATEPATTERN.PLACEHOLDER\" : \"Enter date pattern\",",
                "+     \"PROPERTY.FORMPROPERTIES.VALUES\" : \"Values\",",
                "+     \"PROPERTY.FORMPROPERTIES.ENUMVALUES.EMPTY\" : \"No enum value selected\",",
                "++    \"PROPERTY.FORMPROPERTIES.DROPDOWNVALUES.EMPTY\" : \"No dropdown value selected\",",
                "+     \"PROPERTY.FORMPROPERTIES.VALUES.ID\" : \"Id\",",
                "+     \"PROPERTY.FORMPROPERTIES.VALUES.NAME\" : \"Name\",",
                "+     \"PROPERTY.FORMPROPERTIES.VALUES.ID.PLACEHOLDER\" : \"Enter id of a value\",",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals.properties",
                "index 1ea806333a..84b9c8595a 100644",
                "--- a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals.properties",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals.properties",
                "@@ -16,3 +16,3 @@",
                " # under the License.",
                "-taskId=Task",
                "+bpmnProcess=User Request",
                " key=Key",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_it.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_it.properties",
                "index 7e12ce5ff7..f25abd8abe 100644",
                "--- a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_it.properties",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_it.properties",
                "@@ -16,3 +16,3 @@",
                " # under the License.",
                "-taskId=Task",
                "+bpmnProcess=User Request",
                " key=Chiave",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_ja.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_ja.properties",
                "index b2ff626122..dcca6e1248 100644",
                "--- a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_ja.properties",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_ja.properties",
                "@@ -16,3 +16,3 @@",
                " # under the License.",
                "-taskId=\\u30bf\\u30b9\\u30af",
                "+bpmnProcess=User Request",
                " key=\\u30ad\\u30fc",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_pt_BR.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_pt_BR.properties",
                "index e5ff74cffb..88a9e05ef3 100644",
                "--- a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_pt_BR.properties",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_pt_BR.properties",
                "@@ -16,3 +16,3 @@",
                " # under the License.",
                "-taskId=Tarefa",
                "+bpmnProcess=User Request",
                " key=Chave",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_ru.properties b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_ru.properties",
                "index 6f4fb58b75..2e7a1994ec 100644",
                "--- a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_ru.properties",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_ru.properties",
                "@@ -18,3 +18,3 @@",
                " # taskId=\\u00d0\\u0097\\u00d0\\u00b0\\u00d1\\u008f\\u00d0\\u00b2\\u00d0\\u00ba\\u00d0\\u00b0",
                "-taskId=\\u0417\\u0430\\u044f\\u0432\\u043a\\u0430",
                "+bpmnProcess=User Request",
                " # key=\\u00d0\\u0098\\u00d0\\u00b4\\u00d0\\u00b5\\u00d0\\u00bd\\u00d1\\u0082\\u00d0\\u00b8\\u00d1\\u0084\\u00d0\\u00b8\\u00d0\\u00ba\\u00d0\\u00b0\\u00d1\\u0082\\u00d0\\u00be\\u00d1\\u0080",
                "diff --git a/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/BpmnProcess.java b/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/BpmnProcess.java",
                "new file mode 100644",
                "index 0000000000..35a7883bc2",
                "--- /dev/null",
                "+++ b/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/BpmnProcess.java",
                "@@ -0,0 +1,72 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.to;",
                "+",
                "+import javax.xml.bind.annotation.XmlRootElement;",
                "+import javax.xml.bind.annotation.XmlType;",
                "+import org.apache.syncope.common.lib.AbstractBaseBean;",
                "+",
                "+@XmlRootElement(name = \"bpmnProcess\")",
                "+@XmlType",
                "+public class BpmnProcess extends AbstractBaseBean implements EntityTO {",
                "+",
                "+    private static final long serialVersionUID = -7044543391316529128L;",
                "+",
                "+    private String key;",
                "+",
                "+    private String modelId;",
                "+",
                "+    private String name;",
                "+",
                "+    private boolean userWorkflow;",
                "+",
                "+    @Override",
                "+    public String getKey() {",
                "+        return key;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setKey(final String key) {",
                "+        this.key = key;",
                "+    }",
                "+",
                "+    public String getModelId() {",
                "+        return modelId;",
                "+    }",
                "+",
                "+    public void setModelId(final String modelId) {",
                "+        this.modelId = modelId;",
                "+    }",
                "+",
                "+    public String getName() {",
                "+        return name;",
                "+    }",
                "+",
                "+    public void setName(final String name) {",
                "+        this.name = name;",
                "+    }",
                "+",
                "+    public boolean isUserWorkflow() {",
                "+        return userWorkflow;",
                "+    }",
                "+",
                "+    public void setUserWorkflow(final boolean userWorkflow) {",
                "+        this.userWorkflow = userWorkflow;",
                "+    }",
                "+}",
                "diff --git a/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequest.java b/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequest.java",
                "new file mode 100644",
                "index 0000000000..251eb89b41",
                "--- /dev/null",
                "+++ b/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequest.java",
                "@@ -0,0 +1,70 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.to;",
                "+",
                "+import javax.xml.bind.annotation.XmlRootElement;",
                "+import javax.xml.bind.annotation.XmlType;",
                "+import org.apache.syncope.common.lib.AbstractBaseBean;",
                "+",
                "+@XmlRootElement(name = \"userRequest\")",
                "+@XmlType",
                "+public class UserRequest extends AbstractBaseBean {",
                "+",
                "+    private static final long serialVersionUID = -8430826310789942133L;",
                "+",
                "+    private String bpmnProcess;",
                "+",
                "+    private String user;",
                "+",
                "+    private String executionId;",
                "+",
                "+    private String activityId;",
                "+",
                "+    public String getBpmnProcess() {",
                "+        return bpmnProcess;",
                "+    }",
                "+",
                "+    public void setBpmnProcess(final String bpmnProcess) {",
                "+        this.bpmnProcess = bpmnProcess;",
                "+    }",
                "+",
                "+    public String getUser() {",
                "+        return user;",
                "+    }",
                "+",
                "+    public void setUser(final String user) {",
                "+        this.user = user;",
                "+    }",
                "+",
                "+    public String getExecutionId() {",
                "+        return executionId;",
                "+    }",
                "+",
                "+    public void setExecutionId(final String executionId) {",
                "+        this.executionId = executionId;",
                "+    }",
                "+",
                "+    public String getActivityId() {",
                "+        return activityId;",
                "+    }",
                "+",
                "+    public void setActivityId(final String activityId) {",
                "+        this.activityId = activityId;",
                "+    }",
                "+}",
                "diff --git a/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequestForm.java b/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequestForm.java",
                "index 897cfc060a..22118b5b03 100644",
                "--- a/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequestForm.java",
                "+++ b/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequestForm.java",
                "@@ -39,4 +39,8 @@ public class UserRequestForm extends AbstractBaseBean {",
                "+    private String bpmnProcess;",
                "+",
                "     private String username;",
                "+    private String executionId;",
                "+",
                "     private String taskId;",
                "@@ -57,2 +61,10 @@ public class UserRequestForm extends AbstractBaseBean {",
                "+    public String getBpmnProcess() {",
                "+        return bpmnProcess;",
                "+    }",
                "+",
                "+    public void setBpmnProcess(final String bpmnProcess) {",
                "+        this.bpmnProcess = bpmnProcess;",
                "+    }",
                "+",
                "     public String getUsername() {",
                "@@ -65,2 +77,10 @@ public class UserRequestForm extends AbstractBaseBean {",
                "+    public String getExecutionId() {",
                "+        return executionId;",
                "+    }",
                "+",
                "+    public void setExecutionId(final String executionId) {",
                "+        this.executionId = executionId;",
                "+    }",
                "+",
                "     public String getTaskId() {",
                "@@ -140,5 +160,5 @@ public class UserRequestForm extends AbstractBaseBean {",
                "-    @XmlElementWrapper(name = \"workflowFormProperties\")",
                "-    @XmlElement(name = \"workflowFormProperty\")",
                "-    @JsonProperty(\"workflowFormProperties\")",
                "+    @XmlElementWrapper(name = \"properties\")",
                "+    @XmlElement(name = \"property\")",
                "+    @JsonProperty(\"properties\")",
                "     public List<UserRequestFormProperty> getProperties() {",
                "diff --git a/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequestFormProperty.java b/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequestFormProperty.java",
                "index 0a431c6277..95f2fec66a 100644",
                "--- a/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequestFormProperty.java",
                "+++ b/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequestFormProperty.java",
                "@@ -53,2 +53,5 @@ public class UserRequestFormProperty extends AbstractBaseBean {",
                "+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)",
                "+    private final Map<String, String> dropdownValues = new HashMap<>();",
                "+",
                "     private String value;",
                "@@ -116,2 +119,7 @@ public class UserRequestFormProperty extends AbstractBaseBean {",
                "+    @JsonProperty",
                "+    public Map<String, String> getDropdownValues() {",
                "+        return dropdownValues;",
                "+    }",
                "+",
                "     public String getValue() {",
                "diff --git a/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/types/FlowableEntitlement.java b/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/types/FlowableEntitlement.java",
                "index 43825a4a9f..fbf5b0294b 100644",
                "--- a/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/types/FlowableEntitlement.java",
                "+++ b/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/types/FlowableEntitlement.java",
                "@@ -38,15 +38,9 @@ public final class FlowableEntitlement {",
                "-    public static final String WORKFLOW_FORM_LIST = \"WORKFLOW_FORM_LIST\";",
                "+    public static final String USER_REQUEST_LIST = \"USER_REQUEST_LIST\";",
                "-    public static final String WORKFLOW_FORM_READ = \"WORKFLOW_FORM_READ\";",
                "+    public static final String USER_REQUEST_FORM_LIST = \"USER_REQUEST_FORM_LIST\";",
                "-    public static final String WORKFLOW_FORM_CLAIM = \"WORKFLOW_FORM_CLAIM\";",
                "+    public static final String USER_REQUEST_FORM_CLAIM = \"USER_REQUEST_FORM_CLAIM\";",
                "-    public static final String WORKFLOW_FORM_SUBMIT = \"WORKFLOW_FORM_SUBMIT\";",
                "-",
                "-    public static final String USER_REQUEST_DEF_CREATE = \"USER_REQUEST_DEF_CREATE\";",
                "-",
                "-    public static final String USER_REQUEST_DEF_UPDATE = \"USER_REQUEST_DEF_UPDATE\";",
                "-",
                "-    public static final String USER_REQUEST_DEF_DELETE = \"USER_REQUEST_DEF_DELETE\";",
                "+    public static final String USER_REQUEST_FORM_SUBMIT = \"USER_REQUEST_FORM_SUBMIT\";",
                "diff --git a/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/types/UserRequestFormPropertyType.java b/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/types/UserRequestFormPropertyType.java",
                "index 9565f99836..227296bb1b 100644",
                "--- a/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/types/UserRequestFormPropertyType.java",
                "+++ b/ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/types/UserRequestFormPropertyType.java",
                "@@ -29,3 +29,4 @@ public enum UserRequestFormPropertyType {",
                "     Date,",
                "-    Boolean",
                "+    Boolean,",
                "+    Dropdown",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/BpmnProcessManager.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/BpmnProcessManager.java",
                "index 9247fd4032..f7d17473c2 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/BpmnProcessManager.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/BpmnProcessManager.java",
                "@@ -22,3 +22,3 @@ import java.io.OutputStream;",
                " import java.util.List;",
                "-import org.apache.syncope.common.lib.to.BpmnProcessTO;",
                "+import org.apache.syncope.common.lib.to.BpmnProcess;",
                " import org.apache.syncope.common.lib.types.BpmnProcessFormat;",
                "@@ -30,3 +30,3 @@ public interface BpmnProcessManager {",
                "      */",
                "-    List<BpmnProcessTO> getProcesses();",
                "+    List<BpmnProcess> getProcesses();",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/DropdownValueProvider.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/DropdownValueProvider.java",
                "new file mode 100644",
                "index 0000000000..b6c79cf577",
                "--- /dev/null",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/DropdownValueProvider.java",
                "@@ -0,0 +1,31 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.flowable.api;",
                "+",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * Implementations of this interface are used with {@link org.apache.syncope.core.flowable.support.DropdownFormType}.",
                "+ */",
                "+public interface DropdownValueProvider {",
                "+",
                "+    String NAME = \"dropdownValueProvider\";",
                "+",
                "+    Map<String, String> getValues();",
                "+}",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/UserRequestHandler.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/UserRequestHandler.java",
                "index b11b97c0a3..c3c6f0de00 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/UserRequestHandler.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/UserRequestHandler.java",
                "@@ -23,3 +23,3 @@ import org.apache.commons.lang3.tuple.Pair;",
                " import org.apache.syncope.common.lib.patch.UserPatch;",
                "-import org.apache.syncope.common.lib.to.UserRequestTO;",
                "+import org.apache.syncope.common.lib.to.UserRequest;",
                " import org.apache.syncope.common.lib.to.UserRequestForm;",
                "@@ -34,2 +34,14 @@ public interface UserRequestHandler {",
                "+    /**",
                "+     * Get the running user requests matching the provided parameters.",
                "+     *",
                "+     * @param userKey user key (optional)",
                "+     * @param page result page",
                "+     * @param size items per page",
                "+     * @param orderByClauses sort conditions",
                "+     * @return total number of user requests, list of user requests matching the provided parameters",
                "+     */",
                "+    Pair<Integer, List<UserRequest>> getUserRequests(",
                "+            String userKey, int page, int size, List<OrderByClause> orderByClauses);",
                "+",
                "     /**",
                "@@ -41,3 +53,3 @@ public interface UserRequestHandler {",
                "      */",
                "-    UserRequestTO start(String bpmnProcess, User user);",
                "+    UserRequest start(String bpmnProcess, User user);",
                "@@ -75,4 +87,5 @@ public interface UserRequestHandler {",
                "     /**",
                "-     * Get the forms for current workflow process instances matching the provided parameters.",
                "+     * Get the forms matching the provided parameters.",
                "      *",
                "+     * @param userKey user key (optional)",
                "      * @param page result page",
                "@@ -82,11 +95,4 @@ public interface UserRequestHandler {",
                "      */",
                "-    Pair<Integer, List<UserRequestForm>> getForms(int page, int size, List<OrderByClause> orderByClauses);",
                "-",
                "-    /**",
                "-     * Get forms for given user (if present).",
                "-     *",
                "-     * @param userKey user key",
                "-     * @return form (if present), otherwise null",
                "-     */",
                "-    List<UserRequestForm> getForms(String userKey);",
                "+    Pair<Integer, List<UserRequestForm>> getForms(",
                "+            String userKey, int page, int size, List<OrderByClause> orderByClauses);",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableBpmnProcessManager.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableBpmnProcessManager.java",
                "index bca8b25047..50b078be34 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableBpmnProcessManager.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableBpmnProcessManager.java",
                "@@ -30,5 +30,6 @@ import java.util.stream.Collectors;",
                " import org.apache.commons.io.IOUtils;",
                "-import org.apache.syncope.common.lib.to.BpmnProcessTO;",
                "+import org.apache.syncope.common.lib.to.BpmnProcess;",
                " import org.apache.syncope.common.lib.types.BpmnProcessFormat;",
                " import org.apache.syncope.core.flowable.support.DomainProcessEngine;",
                "+import org.apache.syncope.core.flowable.support.DropdownAwareJsonConverter;",
                " import org.apache.syncope.core.persistence.api.dao.NotFoundException;",
                "@@ -75,3 +76,3 @@ public class FlowableBpmnProcessManager implements BpmnProcessManager {",
                "     @Override",
                "-    public List<BpmnProcessTO> getProcesses() {",
                "+    public List<BpmnProcess> getProcesses() {",
                "         try {",
                "@@ -79,3 +80,3 @@ public class FlowableBpmnProcessManager implements BpmnProcessManager {",
                "                     map(procDef -> {",
                "-                        BpmnProcessTO defTO = new BpmnProcessTO();",
                "+                        BpmnProcess defTO = new BpmnProcess();",
                "                         defTO.setKey(procDef.getKey());",
                "@@ -165,3 +166,3 @@ public class FlowableBpmnProcessManager implements BpmnProcessManager {",
                "-                    BpmnModel bpmnModel = new BpmnJsonConverter().convertToBpmnModel(definitionNode);",
                "+                    BpmnModel bpmnModel = new DropdownAwareJsonConverter().convertToBpmnModel(definitionNode);",
                "                     deployment = FlowableDeployUtils.deployDefinition(",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "index 12d8faada2..cdf035d239 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "@@ -24,2 +24,3 @@ import java.util.Set;",
                " import java.util.stream.Collectors;",
                "+import org.apache.commons.lang3.tuple.Pair;",
                " import org.apache.syncope.common.lib.SyncopeClientException;",
                "@@ -35,3 +36,2 @@ import org.flowable.engine.history.HistoricActivityInstance;",
                " import org.flowable.engine.impl.RuntimeServiceImpl;",
                "-import org.flowable.engine.impl.persistence.entity.ExecutionEntity;",
                " import org.flowable.engine.repository.ProcessDefinition;",
                "@@ -99,4 +99,13 @@ public final class FlowableRuntimeUtils {",
                "-    public static String getProcBusinessKey(final String processDefinitionId, final String userKey) {",
                "-        return processDefinitionId + \":\" + userKey;",
                "+    public static String getProcBusinessKey(final String procDefId, final String userKey) {",
                "+        return procDefId + \":\" + userKey;",
                "+    }",
                "+",
                "+    public static Pair<String, String> splitProcBusinessKey(final String procBusinessKey) {",
                "+        String[] split = procBusinessKey.split(\":\");",
                "+        if (split == null || split.length != 2) {",
                "+            throw new WorkflowException(new IllegalArgumentException(\"Unexpected business key: \" + procBusinessKey));",
                "+        }",
                "+",
                "+        return Pair.of(split[0], split[1]);",
                "     }",
                "@@ -113,6 +122,6 @@ public final class FlowableRuntimeUtils {",
                "     public static Set<String> getPerformedTasks(",
                "-            final DomainProcessEngine engine, final String procInstID, final User user) {",
                "+            final DomainProcessEngine engine, final String procInstId, final User user) {",
                "         return engine.getHistoryService().createHistoricActivityInstanceQuery().",
                "-                executionId(procInstID).",
                "+                executionId(procInstId).",
                "                 list().stream().",
                "@@ -122,4 +131,4 @@ public final class FlowableRuntimeUtils {",
                "-    public static void updateStatus(final DomainProcessEngine engine, final String procInstID, final User user) {",
                "-        List<Task> tasks = createTaskQuery(engine, false).processInstanceId(procInstID).list();",
                "+    public static void updateStatus(final DomainProcessEngine engine, final String procInstId, final User user) {",
                "+        List<Task> tasks = createTaskQuery(engine, false).processInstanceId(procInstId).list();",
                "         if (tasks.isEmpty() || tasks.size() > 1) {",
                "@@ -131,9 +140,2 @@ public final class FlowableRuntimeUtils {",
                "-    public static List<ProcessInstance> getProcessInstances(final DomainProcessEngine engine, final String userKey) {",
                "-        return engine.getRuntimeService().createNativeProcessInstanceQuery().",
                "-                sql(\"SELECT ID_,PROC_INST_ID_ FROM \" + engine.getManagementService().getTableName(ExecutionEntity.class)",
                "-                        + \" WHERE BUSINESS_KEY_ LIKE '\" + getProcBusinessKey(\"%\", userKey) + \"'\"",
                "-                        + \" AND PARENT_ID_ IS NULL\").list();",
                "-    }",
                "-",
                "     public static TaskQuery createTaskQuery(final DomainProcessEngine engine, final boolean onlyFormTasks) {",
                "@@ -147,6 +149,6 @@ public final class FlowableRuntimeUtils {",
                "-    public static String getFormTask(final DomainProcessEngine engine, final String procInstID) {",
                "+    public static String getFormTask(final DomainProcessEngine engine, final String procInstId) {",
                "         String result = null;",
                "-        List<Task> tasks = createTaskQuery(engine, true).processInstanceId(procInstID).list();",
                "+        List<Task> tasks = createTaskQuery(engine, true).processInstanceId(procInstId).list();",
                "         if (tasks.isEmpty() || tasks.size() > 1) {",
                "@@ -164,3 +166,3 @@ public final class FlowableRuntimeUtils {",
                "      * @param engine Flowable engine",
                "-     * @param procInstID process instance id",
                "+     * @param procInstId process instance id",
                "      * @param user user JPA entity",
                "@@ -173,3 +175,3 @@ public final class FlowableRuntimeUtils {",
                "             final DomainProcessEngine engine,",
                "-            final String procInstID,",
                "+            final String procInstId,",
                "             final User user,",
                "@@ -180,3 +182,3 @@ public final class FlowableRuntimeUtils {",
                "-        String formTaskId = getFormTask(engine, procInstID);",
                "+        String formTaskId = getFormTask(engine, procInstId);",
                "         if (formTaskId == null) {",
                "@@ -185,3 +187,3 @@ public final class FlowableRuntimeUtils {",
                "-        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.USER_TO, userTO);",
                "+        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.USER_TO, userTO);",
                "@@ -189,3 +191,3 @@ public final class FlowableRuntimeUtils {",
                "             String encryptedPwd = engine.getRuntimeService().",
                "-                    getVariable(procInstID, FlowableRuntimeUtils.ENCRYPTED_PWD, String.class);",
                "+                    getVariable(procInstId, FlowableRuntimeUtils.ENCRYPTED_PWD, String.class);",
                "             if (encryptedPwd != null) {",
                "@@ -196,8 +198,8 @@ public final class FlowableRuntimeUtils {",
                "             engine.getRuntimeService().",
                "-                    setVariable(procInstID, FlowableRuntimeUtils.ENCRYPTED_PWD, encrypt(password));",
                "+                    setVariable(procInstId, FlowableRuntimeUtils.ENCRYPTED_PWD, encrypt(password));",
                "         }",
                "-        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.ENABLED, enabled);",
                "+        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.ENABLED, enabled);",
                "-        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);",
                "+        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);",
                "         if (propByRes != null) {",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java",
                "index 1c198a8519..45a834b0fd 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java",
                "@@ -33,3 +33,3 @@ import org.apache.syncope.common.lib.patch.PasswordPatch;",
                " import org.apache.syncope.common.lib.patch.UserPatch;",
                "-import org.apache.syncope.common.lib.to.UserRequestTO;",
                "+import org.apache.syncope.common.lib.to.UserRequest;",
                " import org.apache.syncope.common.lib.to.UserTO;",
                "@@ -40,2 +40,3 @@ import org.apache.syncope.common.lib.types.ResourceOperation;",
                " import org.apache.syncope.common.lib.types.UserRequestFormPropertyType;",
                "+import org.apache.syncope.core.flowable.api.DropdownValueProvider;",
                " import org.apache.syncope.core.flowable.api.WorkflowTaskManager;",
                "@@ -51,2 +52,3 @@ import org.apache.syncope.core.provisioning.api.data.UserDataBinder;",
                " import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                " import org.apache.syncope.core.spring.BeanUtils;",
                "@@ -55,2 +57,3 @@ import org.apache.syncope.core.workflow.api.WorkflowException;",
                " import org.flowable.common.engine.api.FlowableException;",
                "+import org.flowable.common.engine.api.FlowableIllegalArgumentException;",
                " import org.flowable.engine.form.FormProperty;",
                "@@ -59,4 +62,7 @@ import org.flowable.engine.form.TaskFormData;",
                " import org.flowable.engine.history.HistoricActivityInstance;",
                "+import org.flowable.engine.impl.persistence.entity.ExecutionEntity;",
                " import org.flowable.engine.impl.persistence.entity.HistoricFormPropertyEntity;",
                "+import org.flowable.engine.runtime.NativeProcessInstanceQuery;",
                " import org.flowable.engine.runtime.ProcessInstance;",
                "+import org.flowable.engine.runtime.ProcessInstanceQuery;",
                " import org.flowable.task.api.Task;",
                "@@ -95,2 +101,89 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "+    protected NativeProcessInstanceQuery createProcessInstanceQuery(final String userKey) {",
                "+        return engine.getRuntimeService().createNativeProcessInstanceQuery().",
                "+                sql(\"SELECT DISTINCT ID_,BUSINESS_KEY_,ACT_ID_ FROM \"",
                "+                        + engine.getManagementService().getTableName(ExecutionEntity.class)",
                "+                        + \" WHERE BUSINESS_KEY_ LIKE '\"",
                "+                        + FlowableRuntimeUtils.getProcBusinessKey(\"%\", userKey) + \"'\"",
                "+                        + \" AND BUSINESS_KEY_ NOT LIKE '\"",
                "+                        + FlowableRuntimeUtils.getProcBusinessKey(FlowableRuntimeUtils.WF_PROCESS_ID, \"%\") + \"'\"",
                "+                        + \" AND PARENT_ID_ IS NULL\");",
                "+    }",
                "+",
                "+    protected int countProcessInstances(final String userKey) {",
                "+        return (int) engine.getRuntimeService().createNativeProcessInstanceQuery().",
                "+                sql(\"SELECT COUNT(ID_) FROM \"",
                "+                        + engine.getManagementService().getTableName(ExecutionEntity.class)",
                "+                        + \" WHERE BUSINESS_KEY_ LIKE '\"",
                "+                        + FlowableRuntimeUtils.getProcBusinessKey(\"%\", userKey) + \"'\"",
                "+                        + \" AND BUSINESS_KEY_ NOT LIKE '\"",
                "+                        + FlowableRuntimeUtils.getProcBusinessKey(FlowableRuntimeUtils.WF_PROCESS_ID, \"%\") + \"'\"",
                "+                        + \" AND PARENT_ID_ IS NULL\").count();",
                "+    }",
                "+",
                "+    protected UserRequest getUserRequest(final ProcessInstance procInst) {",
                "+        Pair<String, String> split = FlowableRuntimeUtils.splitProcBusinessKey(procInst.getBusinessKey());",
                "+",
                "+        UserRequest userRequest = new UserRequest();",
                "+        userRequest.setBpmnProcess(split.getLeft());",
                "+        userRequest.setUser(split.getRight());",
                "+        userRequest.setExecutionId(procInst.getId());",
                "+        userRequest.setActivityId(procInst.getActivityId());",
                "+        return userRequest;",
                "+    }",
                "+",
                "+    @Transactional(readOnly = true)",
                "+    @Override",
                "+    public Pair<Integer, List<UserRequest>> getUserRequests(",
                "+            final String userKey,",
                "+            final int page,",
                "+            final int size,",
                "+            final List<OrderByClause> orderByClauses) {",
                "+",
                "+        Integer count = null;",
                "+        List<UserRequest> result = null;",
                "+        if (userKey == null) {",
                "+            ProcessInstanceQuery query = engine.getRuntimeService().createProcessInstanceQuery().active();",
                "+            for (OrderByClause clause : orderByClauses) {",
                "+                boolean sorted = true;",
                "+                switch (clause.getField().trim()) {",
                "+                    case \"processDefinitionId\":",
                "+                        query.orderByProcessDefinitionId();",
                "+                        break;",
                "+",
                "+                    case \"processDefinitionKey\":",
                "+                        query.orderByProcessDefinitionKey();",
                "+                        break;",
                "+",
                "+                    case \"processInstanceId\":",
                "+                        query.orderByProcessInstanceId();",
                "+                        break;",
                "+",
                "+                    default:",
                "+                        LOG.warn(\"User request sort request by {}: unsupported, ignoring\", clause.getField().trim());",
                "+                        sorted = false;",
                "+                }",
                "+                if (sorted) {",
                "+                    if (clause.getDirection() == OrderByClause.Direction.ASC) {",
                "+                        query.asc();",
                "+                    } else {",
                "+                        query.desc();",
                "+                    }",
                "+                }",
                "+",
                "+                count = (int) query.count();",
                "+                result = query.listPage(size * (page <= 0 ? 0 : page - 1), size).stream().",
                "+                        map(procInst -> getUserRequest(procInst)).",
                "+                        collect(Collectors.toList());",
                "+            }",
                "+        } else {",
                "+            count = countProcessInstances(userKey);",
                "+            result = createProcessInstanceQuery(userKey).listPage(size * (page <= 0 ? 0 : page - 1), size).stream().",
                "+                    map(procInst -> getUserRequest(procInst)).",
                "+                    collect(Collectors.toList());",
                "+        }",
                "+",
                "+        return Pair.of(count, result);",
                "+    }",
                "+",
                "     protected User lazyLoad(final User user) {",
                "@@ -103,4 +196,4 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "     @Override",
                "-    public UserRequestTO start(final String bpmnProcess, final User user) {",
                "-        Map<String, Object> variables = new HashMap<>(2);",
                "+    public UserRequest start(final String bpmnProcess, final User user) {",
                "+        Map<String, Object> variables = new HashMap<>();",
                "         variables.put(FlowableRuntimeUtils.WF_EXECUTOR, AuthContextUtils.getUsername());",
                "@@ -120,8 +213,4 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "-        UserRequestTO userRequestTO = new UserRequestTO();",
                "-        userRequestTO.setProcessInstanceId(procInst.getProcessInstanceId());",
                "-        userRequestTO.setExecutionId(procInst.getId());",
                "-        userRequestTO.setBpmnProcess(bpmnProcess);",
                "-        userRequestTO.setUser(user.getKey());",
                "-        return userRequestTO;",
                "+        return getUserRequest(engine.getRuntimeService().createProcessInstanceQuery().",
                "+                processInstanceId(procInst.getProcessInstanceId()).singleResult());",
                "     }",
                "@@ -134,3 +223,7 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "                     createProcessInstanceQuery().processInstanceId(executionId).singleResult();",
                "+            if (procInst == null) {",
                "+                throw new FlowableIllegalArgumentException(\"ProcessInstance with id \" + executionId);",
                "+            }",
                "         } catch (FlowableException e) {",
                "+            LOG.error(\"Could find execution ProcessInstance with id {}\", executionId, e);",
                "             throw new NotFoundException(\"User request execution with id \" + executionId);",
                "@@ -165,3 +258,3 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "             String username = event.getAnyName();",
                "-            FlowableRuntimeUtils.getProcessInstances(engine, event.getAnyKey()).",
                "+            createProcessInstanceQuery(event.getAnyKey()).list().",
                "                     forEach(procInst -> {",
                "@@ -194,2 +287,6 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "+                case \"dropdown\":",
                "+                    result = UserRequestFormPropertyType.Dropdown;",
                "+                    break;",
                "+",
                "                 case \"string\":",
                "@@ -203,9 +300,9 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "-    protected UserRequestForm getFormTO(final Task task) {",
                "-        return getFormTO(task, engine.getFormService().getTaskFormData(task.getId()));",
                "+    protected UserRequestForm getForm(final Task task) {",
                "+        return FlowableUserRequestHandler.this.getForm(task, engine.getFormService().getTaskFormData(task.getId()));",
                "     }",
                "-    protected UserRequestForm getFormTO(final Task task, final TaskFormData fd) {",
                "+    protected UserRequestForm getForm(final Task task, final TaskFormData fd) {",
                "         UserRequestForm formTO =",
                "-                getFormTO(task.getProcessInstanceId(), task.getId(), fd.getFormKey(), fd.getFormProperties());",
                "+                getForm(task.getProcessInstanceId(), task.getId(), fd.getFormKey(), fd.getFormProperties());",
                "         BeanUtils.copyProperties(task, formTO);",
                "@@ -215,3 +312,3 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "-    protected UserRequestForm getFormTO(final HistoricTaskInstance task) {",
                "+    protected UserRequestForm getForm(final HistoricTaskInstance task) {",
                "         List<HistoricFormPropertyEntity> props = engine.getHistoryService().",
                "@@ -246,3 +343,3 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "     protected UserRequestForm getHistoricFormTO(",
                "-            final String procInstID,",
                "+            final String procInstId,",
                "             final String taskId,",
                "@@ -253,5 +350,8 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "-        User user = userDAO.find(getUserKey(procInstID));",
                "+        formTO.setBpmnProcess(engine.getRuntimeService().createProcessInstanceQuery().",
                "+                processInstanceId(procInstId).singleResult().getProcessDefinitionKey());",
                "+",
                "+        User user = userDAO.find(getUserKey(procInstId));",
                "         if (user == null) {",
                "-            throw new NotFoundException(\"User for process instance id \" + procInstID);",
                "+            throw new NotFoundException(\"User for process instance id \" + procInstId);",
                "         }",
                "@@ -263,5 +363,5 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "         formTO.setUserTO(engine.getRuntimeService().",
                "-                getVariable(procInstID, FlowableRuntimeUtils.USER_TO, UserTO.class));",
                "+                getVariable(procInstId, FlowableRuntimeUtils.USER_TO, UserTO.class));",
                "         formTO.setUserPatch(engine.getRuntimeService().",
                "-                getVariable(procInstID, FlowableRuntimeUtils.USER_PATCH, UserPatch.class));",
                "+                getVariable(procInstId, FlowableRuntimeUtils.USER_PATCH, UserPatch.class));",
                "@@ -279,4 +379,4 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "     @SuppressWarnings(\"unchecked\")",
                "-    protected UserRequestForm getFormTO(",
                "-            final String procInstID,",
                "+    protected UserRequestForm getForm(",
                "+            final String procInstId,",
                "             final String taskId,",
                "@@ -287,5 +387,8 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "-        User user = userDAO.find(getUserKey(procInstID));",
                "+        formTO.setBpmnProcess(engine.getRuntimeService().createProcessInstanceQuery().",
                "+                processInstanceId(procInstId).singleResult().getProcessDefinitionKey());",
                "+",
                "+        User user = userDAO.find(getUserKey(procInstId));",
                "         if (user == null) {",
                "-            throw new NotFoundException(\"User for process instance id \" + procInstID);",
                "+            throw new NotFoundException(\"User for process instance id \" + procInstId);",
                "         }",
                "@@ -293,2 +396,3 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "+        formTO.setExecutionId(procInstId);",
                "         formTO.setTaskId(taskId);",
                "@@ -297,5 +401,5 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "         formTO.setUserTO(engine.getRuntimeService().",
                "-                getVariable(procInstID, FlowableRuntimeUtils.USER_TO, UserTO.class));",
                "+                getVariable(procInstId, FlowableRuntimeUtils.USER_TO, UserTO.class));",
                "         formTO.setUserPatch(engine.getRuntimeService().",
                "-                getVariable(procInstID, FlowableRuntimeUtils.USER_PATCH, UserPatch.class));",
                "+                getVariable(procInstId, FlowableRuntimeUtils.USER_PATCH, UserPatch.class));",
                "@@ -305,7 +409,24 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "             propertyTO.setType(fromFlowableFormType(fProp.getType()));",
                "-            if (propertyTO.getType() == UserRequestFormPropertyType.Date) {",
                "-                propertyTO.setDatePattern((String) fProp.getType().getInformation(\"datePattern\"));",
                "-            }",
                "-            if (propertyTO.getType() == UserRequestFormPropertyType.Enum) {",
                "-                propertyTO.getEnumValues().putAll((Map<String, String>) fProp.getType().getInformation(\"values\"));",
                "+            switch (propertyTO.getType()) {",
                "+                case Date:",
                "+                    propertyTO.setDatePattern((String) fProp.getType().getInformation(\"datePattern\"));",
                "+                    break;",
                "+",
                "+                case Enum:",
                "+                    propertyTO.getEnumValues().putAll((Map<String, String>) fProp.getType().getInformation(\"values\"));",
                "+                    break;",
                "+",
                "+                case Dropdown:",
                "+                    String valueProviderBean = (String) fProp.getType().getInformation(DropdownValueProvider.NAME);",
                "+                    try {",
                "+                        DropdownValueProvider valueProvider = ApplicationContextProvider.getApplicationContext().",
                "+                                getBean(valueProviderBean, DropdownValueProvider.class);",
                "+                        propertyTO.getDropdownValues().putAll(valueProvider.getValues());",
                "+                    } catch (Exception e) {",
                "+                        LOG.error(\"Could not find bean {} of type {} for form property {}\",",
                "+                                valueProviderBean, DropdownValueProvider.class.getName(), propertyTO.getId(), e);",
                "+                    }",
                "+                    break;",
                "+",
                "+                default:",
                "             }",
                "@@ -320,7 +441,13 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "     public Pair<Integer, List<UserRequestForm>> getForms(",
                "-            final int page, final int size, final List<OrderByClause> orderByClauses) {",
                "+            final String userKey,",
                "+            final int page,",
                "+            final int size,",
                "+            final List<OrderByClause> orderByClauses) {",
                "-        Pair<Integer, List<UserRequestForm>> forms = null;",
                "+        Pair<Integer, List<UserRequestForm>> forms;",
                "-        TaskQuery formTaskQuery = FlowableRuntimeUtils.createTaskQuery(engine, true);",
                "+        TaskQuery query = FlowableRuntimeUtils.createTaskQuery(engine, true);",
                "+        if (userKey != null) {",
                "+            query.processInstanceBusinessKeyLike(FlowableRuntimeUtils.getProcBusinessKey(\"%\", userKey));",
                "+        }",
                "@@ -328,10 +455,6 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "         if (adminUser.equals(authUser)) {",
                "-            forms = getForms(formTaskQuery, page, size, orderByClauses);",
                "+            forms = getForms(query, page, size, orderByClauses);",
                "         } else {",
                "             User user = userDAO.findByUsername(authUser);",
                "-            if (user == null) {",
                "-                throw new NotFoundException(\"Syncope User \" + authUser);",
                "-            }",
                "-",
                "-            forms = getForms(formTaskQuery.taskCandidateOrAssigned(user.getUsername()), page, size, orderByClauses);",
                "+            forms = getForms(query.taskCandidateOrAssigned(user.getUsername()), page, size, orderByClauses);",
                "@@ -339,3 +462,3 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "             if (!candidateGroups.isEmpty()) {",
                "-                forms = getForms(formTaskQuery.taskCandidateGroupIn(candidateGroups), page, size, orderByClauses);",
                "+                forms = getForms(query.taskCandidateGroupIn(candidateGroups), page, size, orderByClauses);",
                "             }",
                "@@ -351,8 +474,15 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "-        TaskQuery sortedQuery = query;",
                "         for (OrderByClause clause : orderByClauses) {",
                "-            boolean ack = true;",
                "+            boolean sorted = true;",
                "             switch (clause.getField().trim()) {",
                "+                case \"bpmnProcess\":",
                "+                    query.orderByProcessDefinitionId();",
                "+                    break;",
                "+",
                "+                case \"executionId\":",
                "+                    query.orderByExecutionId();",
                "+                    break;",
                "+",
                "                 case \"taskId\":",
                "-                    sortedQuery = sortedQuery.orderByTaskId();",
                "+                    query.orderByTaskId();",
                "                     break;",
                "@@ -360,3 +490,3 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "                 case \"createTime\":",
                "-                    sortedQuery = sortedQuery.orderByTaskCreateTime();",
                "+                    query.orderByTaskCreateTime();",
                "                     break;",
                "@@ -364,3 +494,3 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "                 case \"dueDate\":",
                "-                    sortedQuery = sortedQuery.orderByTaskDueDate();",
                "+                    query.orderByTaskDueDate();",
                "                     break;",
                "@@ -368,3 +498,3 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "                 case \"owner\":",
                "-                    sortedQuery = sortedQuery.orderByTaskOwner();",
                "+                    query.orderByTaskOwner();",
                "                     break;",
                "@@ -373,8 +503,10 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "                     LOG.warn(\"Form sort request by {}: unsupported, ignoring\", clause.getField().trim());",
                "-                    ack = false;",
                "+                    sorted = false;",
                "             }",
                "-            if (ack) {",
                "-                sortedQuery = clause.getDirection() == OrderByClause.Direction.ASC",
                "-                        ? sortedQuery.asc()",
                "-                        : sortedQuery.desc();",
                "+            if (sorted) {",
                "+                if (clause.getDirection() == OrderByClause.Direction.ASC) {",
                "+                    query.asc();",
                "+                } else {",
                "+                    query.desc();",
                "+                }",
                "             }",
                "@@ -382,5 +514,6 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "-        List<UserRequestForm> result = sortedQuery.listPage(size * (page <= 0 ? 0 : page - 1), size).stream().",
                "+        List<UserRequestForm> result = query.listPage(size * (page <= 0 ? 0 : page - 1), size).stream().",
                "                 map(task -> task instanceof HistoricTaskInstance",
                "-                ? getFormTO((HistoricTaskInstance) task) : getFormTO(task)).",
                "+                ? FlowableUserRequestHandler.this.getForm((HistoricTaskInstance) task)",
                "+                : FlowableUserRequestHandler.this.getForm(task)).",
                "                 collect(Collectors.toList());",
                "@@ -390,32 +523,3 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "-    @Override",
                "-    public List<UserRequestForm> getForms(final String userKey) {",
                "-        List<UserRequestForm> result = new ArrayList<>();",
                "-        FlowableRuntimeUtils.getProcessInstances(engine, userKey).forEach(procInst -> {",
                "-            Task task;",
                "-            try {",
                "-                task = FlowableRuntimeUtils.createTaskQuery(engine, true).",
                "-                        processInstanceId(procInst.getProcessInstanceId()).singleResult();",
                "-            } catch (FlowableException e) {",
                "-                throw new WorkflowException(\"While reading form for process instance \"",
                "-                        + procInst.getProcessInstanceId(), e);",
                "-            }",
                "-",
                "-            if (task != null) {",
                "-                TaskFormData formData;",
                "-                try {",
                "-                    formData = engine.getFormService().getTaskFormData(task.getId());",
                "-                } catch (FlowableException e) {",
                "-                    throw new WorkflowException(\"Error while getting form data for task \" + task.getId(), e);",
                "-                }",
                "-                if (formData != null && !formData.getFormProperties().isEmpty()) {",
                "-                    result.add(getFormTO(task, formData));",
                "-                }",
                "-            }",
                "-        });",
                "-",
                "-        return result;",
                "-    }",
                "-",
                "-    protected Pair<Task, TaskFormData> checkTask(final String taskId, final String authUser) {",
                "+    protected Pair<Task, TaskFormData> parseTask(final String taskId) {",
                "         Task task;",
                "@@ -437,9 +541,2 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "-        if (!adminUser.equals(authUser)) {",
                "-            User user = userDAO.findByUsername(authUser);",
                "-            if (user == null) {",
                "-                throw new NotFoundException(\"Syncope User \" + authUser);",
                "-            }",
                "-        }",
                "-",
                "         return Pair.of(task, formData);",
                "@@ -449,11 +546,11 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "     public UserRequestForm claimForm(final String taskId) {",
                "-        String authUser = AuthContextUtils.getUsername();",
                "-        Pair<Task, TaskFormData> checked = checkTask(taskId, authUser);",
                "+        Pair<Task, TaskFormData> parsed = parseTask(taskId);",
                "+        String authUser = AuthContextUtils.getUsername();",
                "         if (!adminUser.equals(authUser)) {",
                "             List<Task> tasksForUser = FlowableRuntimeUtils.createTaskQuery(engine, true).",
                "-                    taskId(taskId).taskCandidateUser(authUser).list();",
                "+                    taskId(taskId).taskCandidateOrAssigned(authUser).list();",
                "             if (tasksForUser.isEmpty()) {",
                "                 throw new WorkflowException(",
                "-                        new IllegalArgumentException(authUser + \" is not candidate for task \" + taskId));",
                "+                        new IllegalArgumentException(authUser + \" is not candidate nor assignee of task \" + taskId));",
                "             }",
                "@@ -469,3 +566,3 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "-        return getFormTO(task, checked.getRight());",
                "+        return FlowableUserRequestHandler.this.getForm(task, parsed.getRight());",
                "     }",
                "@@ -484,22 +581,22 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "     public WorkflowResult<UserPatch> submitForm(final UserRequestForm form) {",
                "-        String authUser = AuthContextUtils.getUsername();",
                "-        Pair<Task, TaskFormData> checked = checkTask(form.getTaskId(), authUser);",
                "+        Pair<Task, TaskFormData> parsed = parseTask(form.getTaskId());",
                "-        if (!checked.getLeft().getOwner().equals(authUser)) {",
                "+        String authUser = AuthContextUtils.getUsername();",
                "+        if (!parsed.getLeft().getOwner().equals(authUser)) {",
                "             throw new WorkflowException(new IllegalArgumentException(\"Task \" + form.getTaskId() + \" assigned to \"",
                "-                    + checked.getLeft().getOwner() + \" but submitted by \" + authUser));",
                "+                    + parsed.getLeft().getOwner() + \" but submitted by \" + authUser));",
                "         }",
                "-        String procInstID = checked.getLeft().getProcessInstanceId();",
                "+        String procInstId = parsed.getLeft().getProcessInstanceId();",
                "-        User user = userDAO.find(getUserKey(procInstID));",
                "+        User user = userDAO.find(getUserKey(procInstId));",
                "         if (user == null) {",
                "-            throw new NotFoundException(\"User with key \" + getUserKey(procInstID));",
                "+            throw new NotFoundException(\"User with key \" + getUserKey(procInstId));",
                "         }",
                "-        Set<String> preTasks = FlowableRuntimeUtils.getPerformedTasks(engine, procInstID, user);",
                "+        Set<String> preTasks = FlowableRuntimeUtils.getPerformedTasks(engine, procInstId, user);",
                "-        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.TASK, \"submit\");",
                "-        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.FORM_SUBMITTER, authUser);",
                "-        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.USER, lazyLoad(user));",
                "+        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.TASK, \"submit\");",
                "+        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.FORM_SUBMITTER, authUser);",
                "+        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.USER, lazyLoad(user));",
                "         try {",
                "@@ -509,7 +606,7 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "         }",
                "-        Set<String> postTasks = FlowableRuntimeUtils.getPerformedTasks(engine, procInstID, user);",
                "+        Set<String> postTasks = FlowableRuntimeUtils.getPerformedTasks(engine, procInstId, user);",
                "         postTasks.removeAll(preTasks);",
                "         postTasks.add(form.getTaskId());",
                "-        if (procInstID.equals(FlowableRuntimeUtils.getWFProcInstID(engine, user.getKey()))) {",
                "-            FlowableRuntimeUtils.updateStatus(engine, procInstID, user);",
                "+        if (procInstId.equals(FlowableRuntimeUtils.getWFProcInstID(engine, user.getKey()))) {",
                "+            FlowableRuntimeUtils.updateStatus(engine, procInstId, user);",
                "         }",
                "@@ -523,8 +620,8 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "         ProcessInstance afterSubmitPI = engine.getRuntimeService().",
                "-                createProcessInstanceQuery().processInstanceId(procInstID).singleResult();",
                "+                createProcessInstanceQuery().processInstanceId(procInstId).singleResult();",
                "         if (afterSubmitPI != null) {",
                "-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.TASK);",
                "-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.FORM_SUBMITTER);",
                "-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER);",
                "-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_TO);",
                "+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.TASK);",
                "+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.FORM_SUBMITTER);",
                "+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.USER);",
                "+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.USER_TO);",
                "@@ -532,4 +629,4 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "             propByRes = engine.getRuntimeService().",
                "-                    getVariable(procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);",
                "-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE);",
                "+                    getVariable(procInstId, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);",
                "+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.PROP_BY_RESOURCE);",
                "@@ -537,4 +634,4 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "             String encryptedPwd = engine.getRuntimeService().",
                "-                    getVariable(procInstID, FlowableRuntimeUtils.ENCRYPTED_PWD, String.class);",
                "-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.ENCRYPTED_PWD);",
                "+                    getVariable(procInstId, FlowableRuntimeUtils.ENCRYPTED_PWD, String.class);",
                "+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.ENCRYPTED_PWD);",
                "             if (StringUtils.isNotBlank(encryptedPwd)) {",
                "@@ -544,4 +641,4 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "             Boolean enabled = engine.getRuntimeService().",
                "-                    getVariable(procInstID, FlowableRuntimeUtils.ENABLED, Boolean.class);",
                "-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.ENABLED);",
                "+                    getVariable(procInstId, FlowableRuntimeUtils.ENABLED, Boolean.class);",
                "+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.ENABLED);",
                "@@ -550,3 +647,3 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "                     engine,",
                "-                    procInstID,",
                "+                    procInstId,",
                "                     user,",
                "@@ -558,4 +655,4 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "             userPatch = engine.getRuntimeService().",
                "-                    getVariable(procInstID, FlowableRuntimeUtils.USER_PATCH, UserPatch.class);",
                "-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_PATCH);",
                "+                    getVariable(procInstId, FlowableRuntimeUtils.USER_PATCH, UserPatch.class);",
                "+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.USER_PATCH);",
                "         }",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DomainProcessEngineFactoryBean.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DomainProcessEngineFactoryBean.java",
                "index 162b113383..de2bbfe581 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DomainProcessEngineFactoryBean.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DomainProcessEngineFactoryBean.java",
                "@@ -20,3 +20,5 @@ package org.apache.syncope.core.flowable.support;",
                "+import java.util.ArrayList;",
                " import java.util.HashMap;",
                "+import java.util.List;",
                " import java.util.Map;",
                "@@ -27,2 +29,3 @@ import org.flowable.common.engine.impl.cfg.SpringBeanFactoryProxyMap;",
                " import org.flowable.common.engine.impl.interceptor.EngineConfigurationConstants;",
                "+import org.flowable.engine.form.AbstractFormType;",
                " import org.flowable.engine.impl.util.EngineServiceUtil;",
                "@@ -83,2 +86,5 @@ public class DomainProcessEngineFactoryBean",
                "                     }",
                "+                    List<AbstractFormType> customFormTypes = new ArrayList<>();",
                "+                    customFormTypes.add(new DropdownFormType(null));",
                "+                    conf.setCustomFormTypes(customFormTypes);",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownAwareJsonConverter.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownAwareJsonConverter.java",
                "new file mode 100644",
                "index 0000000000..ad29e17acc",
                "--- /dev/null",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownAwareJsonConverter.java",
                "@@ -0,0 +1,31 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.flowable.support;",
                "+",
                "+import org.flowable.bpmn.model.UserTask;",
                "+import org.flowable.editor.constants.StencilConstants;",
                "+import org.flowable.editor.language.json.converter.BpmnJsonConverter;",
                "+",
                "+public class DropdownAwareJsonConverter extends BpmnJsonConverter {",
                "+",
                "+    public DropdownAwareJsonConverter() {",
                "+        convertersToBpmnMap.put(StencilConstants.STENCIL_TASK_USER, DropdownAwareUserTaskJsonConverter.class);",
                "+        convertersToJsonMap.put(UserTask.class, DropdownAwareUserTaskJsonConverter.class);",
                "+    }",
                "+}",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownAwareUserTaskJsonConverter.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownAwareUserTaskJsonConverter.java",
                "new file mode 100644",
                "index 0000000000..838201ccbc",
                "--- /dev/null",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownAwareUserTaskJsonConverter.java",
                "@@ -0,0 +1,98 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.flowable.support;",
                "+",
                "+import com.fasterxml.jackson.databind.JsonNode;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.flowable.bpmn.model.BaseElement;",
                "+import org.flowable.bpmn.model.FormProperty;",
                "+import org.flowable.bpmn.model.FormValue;",
                "+import org.flowable.bpmn.model.StartEvent;",
                "+import org.flowable.bpmn.model.UserTask;",
                "+import org.flowable.editor.language.json.converter.BpmnJsonConverterUtil;",
                "+import org.flowable.editor.language.json.converter.UserTaskJsonConverter;",
                "+",
                "+public class DropdownAwareUserTaskJsonConverter extends UserTaskJsonConverter {",
                "+",
                "+    @Override",
                "+    protected void convertJsonToFormProperties(final JsonNode objectNode, final BaseElement element) {",
                "+        JsonNode formPropertiesNode = getProperty(PROPERTY_FORM_PROPERTIES, objectNode);",
                "+        if (formPropertiesNode != null) {",
                "+            formPropertiesNode = BpmnJsonConverterUtil.validateIfNodeIsTextual(formPropertiesNode);",
                "+            JsonNode propertiesArray = formPropertiesNode.get(\"formProperties\");",
                "+            if (propertiesArray != null) {",
                "+                for (JsonNode formNode : propertiesArray) {",
                "+                    JsonNode formIdNode = formNode.get(PROPERTY_FORM_ID);",
                "+                    if (formIdNode != null && StringUtils.isNotEmpty(formIdNode.asText())) {",
                "+",
                "+                        FormProperty formProperty = new FormProperty();",
                "+                        formProperty.setId(formIdNode.asText());",
                "+                        formProperty.setName(getValueAsString(PROPERTY_FORM_NAME, formNode));",
                "+                        formProperty.setType(getValueAsString(PROPERTY_FORM_TYPE, formNode));",
                "+                        formProperty.setExpression(getValueAsString(PROPERTY_FORM_EXPRESSION, formNode));",
                "+                        formProperty.setVariable(getValueAsString(PROPERTY_FORM_VARIABLE, formNode));",
                "+",
                "+                        if (\"date\".equalsIgnoreCase(formProperty.getType())) {",
                "+                            formProperty.setDatePattern(getValueAsString(PROPERTY_FORM_DATE_PATTERN, formNode));",
                "+",
                "+                        } else if (\"enum\".equalsIgnoreCase(formProperty.getType())",
                "+                                || \"dropdown\".equalsIgnoreCase(formProperty.getType())) {",
                "+",
                "+                            JsonNode enumValuesNode = formNode.get(PROPERTY_FORM_ENUM_VALUES);",
                "+                            if (enumValuesNode != null) {",
                "+                                List<FormValue> formValueList = new ArrayList<>();",
                "+                                for (JsonNode enumNode : enumValuesNode) {",
                "+                                    if (enumNode.get(PROPERTY_FORM_ENUM_VALUES_ID) != null && !enumNode.get(",
                "+                                            PROPERTY_FORM_ENUM_VALUES_ID).isNull() && enumNode.get(",
                "+                                                    PROPERTY_FORM_ENUM_VALUES_NAME) != null",
                "+                                            && !enumNode.get(PROPERTY_FORM_ENUM_VALUES_NAME).isNull()) {",
                "+",
                "+                                        FormValue formValue = new FormValue();",
                "+                                        formValue.setId(enumNode.get(PROPERTY_FORM_ENUM_VALUES_ID).asText());",
                "+                                        formValue.setName(enumNode.get(PROPERTY_FORM_ENUM_VALUES_NAME).asText());",
                "+                                        formValueList.add(formValue);",
                "+",
                "+                                    } else if (enumNode.get(\"value\") != null && !enumNode.get(\"value\").isNull()) {",
                "+                                        FormValue formValue = new FormValue();",
                "+                                        formValue.setId(enumNode.get(\"value\").asText());",
                "+                                        formValue.setName(enumNode.get(\"value\").asText());",
                "+                                        formValueList.add(formValue);",
                "+                                    }",
                "+                                }",
                "+                                formProperty.setFormValues(formValueList);",
                "+                            }",
                "+                        }",
                "+",
                "+                        formProperty.setRequired(getValueAsBoolean(PROPERTY_FORM_REQUIRED, formNode));",
                "+                        formProperty.setReadable(getValueAsBoolean(PROPERTY_FORM_READABLE, formNode));",
                "+                        formProperty.setWriteable(getValueAsBoolean(PROPERTY_FORM_WRITABLE, formNode));",
                "+",
                "+                        if (element instanceof StartEvent) {",
                "+                            ((StartEvent) element).getFormProperties().add(formProperty);",
                "+                        } else if (element instanceof UserTask) {",
                "+                            ((UserTask) element).getFormProperties().add(formProperty);",
                "+                        }",
                "+                    }",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownFormType.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownFormType.java",
                "new file mode 100644",
                "index 0000000000..6c612f6855",
                "--- /dev/null",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownFormType.java",
                "@@ -0,0 +1,59 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.flowable.support;",
                "+",
                "+import org.flowable.engine.form.AbstractFormType;",
                "+",
                "+/**",
                "+ * Extension to predefined Flowable form types relying on the provided",
                "+ * {@link org.apache.syncope.core.flowable.api.DropdownValueProvider} bean to populate values.",
                "+ */",
                "+public class DropdownFormType extends AbstractFormType {",
                "+",
                "+    private static final long serialVersionUID = -3549337216346168946L;",
                "+",
                "+    protected final String dropdownValueProvider;",
                "+",
                "+    public DropdownFormType(final String dropdownValueProvider) {",
                "+        this.dropdownValueProvider = dropdownValueProvider;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getName() {",
                "+        return \"dropdown\";",
                "+    }",
                "+",
                "+    @Override",
                "+    public Object getInformation(final String key) {",
                "+        if (key.equals(\"dropdownValueProvider\")) {",
                "+            return dropdownValueProvider;",
                "+        }",
                "+        return null;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Object convertFormValueToModelValue(final String propertyValue) {",
                "+        return propertyValue;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String convertModelValueToFormValue(final Object modelValue) {",
                "+        return modelValue == null ? null : modelValue.toString();",
                "+    }",
                "+}",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeFormHandlerHelper.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeFormHandlerHelper.java",
                "new file mode 100644",
                "index 0000000000..9f6e751123",
                "--- /dev/null",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeFormHandlerHelper.java",
                "@@ -0,0 +1,56 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.flowable.support;",
                "+",
                "+import org.flowable.bpmn.model.FlowElement;",
                "+import org.flowable.bpmn.model.UserTask;",
                "+import org.flowable.bpmn.model.Process;",
                "+import org.flowable.engine.impl.form.FormHandlerHelper;",
                "+import org.flowable.engine.impl.form.TaskFormHandler;",
                "+import org.flowable.engine.impl.persistence.entity.DeploymentEntity;",
                "+import org.flowable.engine.impl.util.CommandContextUtil;",
                "+import org.flowable.engine.impl.util.ProcessDefinitionUtil;",
                "+import org.flowable.engine.repository.ProcessDefinition;",
                "+",
                "+/**",
                "+ * Used to inject {@link SyncopeTaskFormHandler} rather than",
                "+ * {@link org.flowable.engine.impl.form.DefaultTaskFormHandler}.",
                "+ */",
                "+public class SyncopeFormHandlerHelper extends FormHandlerHelper {",
                "+",
                "+    @Override",
                "+    public TaskFormHandler getTaskFormHandlder(final String procDefId, final String taskId) {",
                "+        Process process = ProcessDefinitionUtil.getProcess(procDefId);",
                "+        FlowElement flowElement = process.getFlowElement(taskId, true);",
                "+        if (flowElement instanceof UserTask) {",
                "+            UserTask userTask = (UserTask) flowElement;",
                "+",
                "+            ProcessDefinition processDefinitionEntity = ProcessDefinitionUtil.getProcessDefinition(procDefId);",
                "+            DeploymentEntity deploymentEntity = CommandContextUtil.getProcessEngineConfiguration().",
                "+                    getDeploymentEntityManager().findById(processDefinitionEntity.getDeploymentId());",
                "+",
                "+            TaskFormHandler taskFormHandler = new SyncopeTaskFormHandler();",
                "+            taskFormHandler.parseConfiguration(",
                "+                    userTask.getFormProperties(), userTask.getFormKey(), deploymentEntity, processDefinitionEntity);",
                "+            return taskFormHandler;",
                "+        }",
                "+",
                "+        return null;",
                "+    }",
                "+}",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeTaskFormHandler.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeTaskFormHandler.java",
                "new file mode 100644",
                "index 0000000000..69c5e5009f",
                "--- /dev/null",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeTaskFormHandler.java",
                "@@ -0,0 +1,112 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.flowable.support;",
                "+",
                "+import java.util.List;",
                "+import java.util.Optional;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.core.flowable.api.DropdownValueProvider;",
                "+import org.flowable.bpmn.model.FormProperty;",
                "+import org.flowable.common.engine.api.delegate.Expression;",
                "+import org.flowable.common.engine.impl.el.ExpressionManager;",
                "+import org.flowable.engine.form.AbstractFormType;",
                "+import org.flowable.engine.impl.form.DefaultTaskFormHandler;",
                "+import org.flowable.engine.impl.form.FormPropertyHandler;",
                "+import org.flowable.engine.impl.form.FormTypes;",
                "+import org.flowable.engine.impl.persistence.entity.DeploymentEntity;",
                "+import org.flowable.engine.impl.util.CommandContextUtil;",
                "+import org.flowable.engine.repository.ProcessDefinition;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+",
                "+/**",
                "+ * Extends {@link DefaultTaskFormHandler} with purpose of supporting more form types than Flowable's default.",
                "+ */",
                "+public class SyncopeTaskFormHandler extends DefaultTaskFormHandler {",
                "+",
                "+    private static final long serialVersionUID = -5271243544388455797L;",
                "+",
                "+    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeTaskFormHandler.class);",
                "+",
                "+    protected Optional<AbstractFormType> parseFormPropertyType(",
                "+            final FormProperty formProperty, final ExpressionManager expressionManager) {",
                "+",
                "+        AbstractFormType formType = null;",
                "+",
                "+        switch (formProperty.getType()) {",
                "+            case \"dropdown\":",
                "+                if (formProperty.getFormValues().isEmpty()",
                "+                        || !DropdownValueProvider.NAME.equals(formProperty.getFormValues().get(0).getId())) {",
                "+",
                "+                    LOG.warn(\"A single value with id '\" + DropdownValueProvider.NAME + \"' was expected, ignoring\");",
                "+                } else {",
                "+                    formType = new DropdownFormType(formProperty.getFormValues().get(0).getName());",
                "+                }",
                "+                break;",
                "+",
                "+            default:",
                "+        }",
                "+",
                "+        return Optional.ofNullable(formType);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void parseConfiguration(",
                "+            final List<FormProperty> formProperties,",
                "+            final String formKey,",
                "+            final DeploymentEntity deployment,",
                "+            final ProcessDefinition processDefinition) {",
                "+",
                "+        this.deploymentId = deployment.getId();",
                "+",
                "+        ExpressionManager expressionManager = CommandContextUtil.getProcessEngineConfiguration().getExpressionManager();",
                "+",
                "+        if (StringUtils.isNotEmpty(formKey)) {",
                "+            this.formKey = expressionManager.createExpression(formKey);",
                "+        }",
                "+",
                "+        FormTypes formTypes = CommandContextUtil.getProcessEngineConfiguration().getFormTypes();",
                "+",
                "+        formProperties.forEach(formProperty -> {",
                "+            FormPropertyHandler formPropertyHandler = new FormPropertyHandler();",
                "+            formPropertyHandler.setId(formProperty.getId());",
                "+            formPropertyHandler.setName(formProperty.getName());",
                "+",
                "+            AbstractFormType type = parseFormPropertyType(formProperty, expressionManager).",
                "+                    orElse(formTypes.parseFormPropertyType(formProperty));",
                "+            formPropertyHandler.setType(type);",
                "+            formPropertyHandler.setRequired(formProperty.isRequired());",
                "+            formPropertyHandler.setReadable(formProperty.isReadable());",
                "+            formPropertyHandler.setWritable(formProperty.isWriteable());",
                "+            formPropertyHandler.setVariableName(formProperty.getVariable());",
                "+",
                "+            if (StringUtils.isNotEmpty(formProperty.getExpression())) {",
                "+                Expression expression = expressionManager.createExpression(formProperty.getExpression());",
                "+                formPropertyHandler.setVariableExpression(expression);",
                "+            }",
                "+",
                "+            if (StringUtils.isNotEmpty(formProperty.getDefaultExpression())) {",
                "+                Expression defaultExpression = expressionManager.createExpression(formProperty.getDefaultExpression());",
                "+                formPropertyHandler.setDefaultExpression(defaultExpression);",
                "+            }",
                "+",
                "+            formPropertyHandlers.add(formPropertyHandler);",
                "+        });",
                "+    }",
                "+}",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/resources/workflowFlowableContext.xml b/ext/flowable/flowable-bpmn/src/main/resources/workflowFlowableContext.xml",
                "index 9e27f47d0e..4f34237c38 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/resources/workflowFlowableContext.xml",
                "+++ b/ext/flowable/flowable-bpmn/src/main/resources/workflowFlowableContext.xml",
                "@@ -40,2 +40,4 @@ under the License.",
                "+  <bean id=\"syncopeFormHandlerHelper\" class=\"org.apache.syncope.core.flowable.support.SyncopeFormHandlerHelper\"/>",
                "+",
                "   <bean class=\"org.apache.syncope.core.flowable.support.DomainProcessEngineConfiguration\" scope=\"prototype\">",
                "@@ -54,2 +56,4 @@ under the License.",
                "     </property>",
                "+    ",
                "+    <property name=\"formHandlerHelper\" ref=\"syncopeFormHandlerHelper\"/>",
                "   </bean>",
                "diff --git a/ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/BpmnProcessLogic.java b/ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/BpmnProcessLogic.java",
                "index 8d280ace05..ad76605214 100644",
                "--- a/ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/BpmnProcessLogic.java",
                "+++ b/ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/BpmnProcessLogic.java",
                "@@ -23,3 +23,3 @@ import java.lang.reflect.Method;",
                " import java.util.List;",
                "-import org.apache.syncope.common.lib.to.BpmnProcessTO;",
                "+import org.apache.syncope.common.lib.to.BpmnProcess;",
                " import org.apache.syncope.common.lib.types.FlowableEntitlement;",
                "@@ -33,3 +33,3 @@ import org.apache.syncope.core.flowable.api.BpmnProcessManager;",
                " @Component",
                "-public class BpmnProcessLogic extends AbstractTransactionalLogic<BpmnProcessTO> {",
                "+public class BpmnProcessLogic extends AbstractTransactionalLogic<BpmnProcess> {",
                "@@ -40,3 +40,3 @@ public class BpmnProcessLogic extends AbstractTransactionalLogic<BpmnProcessTO>",
                "     @Transactional(readOnly = true)",
                "-    public List<BpmnProcessTO> list() {",
                "+    public List<BpmnProcess> list() {",
                "         return bpmnProcessManager.getProcesses();",
                "@@ -67,3 +67,3 @@ public class BpmnProcessLogic extends AbstractTransactionalLogic<BpmnProcessTO>",
                "     @Override",
                "-    protected BpmnProcessTO resolveReference(final Method method, final Object... args)",
                "+    protected BpmnProcess resolveReference(final Method method, final Object... args)",
                "             throws UnresolvedReferenceException {",
                "diff --git a/ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserRequestLogic.java b/ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserRequestLogic.java",
                "index 1acc1da148..686677e48f 100644",
                "--- a/ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserRequestLogic.java",
                "+++ b/ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserRequestLogic.java",
                "@@ -27,3 +27,3 @@ import org.apache.syncope.common.lib.patch.UserPatch;",
                " import org.apache.syncope.common.lib.to.PropagationTaskTO;",
                "-import org.apache.syncope.common.lib.to.UserRequestTO;",
                "+import org.apache.syncope.common.lib.to.UserRequest;",
                " import org.apache.syncope.common.lib.to.UserTO;",
                "@@ -33,3 +33,2 @@ import org.apache.syncope.common.lib.types.ClientExceptionType;",
                " import org.apache.syncope.common.lib.types.FlowableEntitlement;",
                "-import org.apache.syncope.common.lib.types.StandardEntitlement;",
                " import org.apache.syncope.core.flowable.api.BpmnProcessManager;",
                "@@ -43,2 +42,3 @@ import org.apache.syncope.core.provisioning.api.data.UserDataBinder;",
                " import org.apache.syncope.core.flowable.api.UserRequestHandler;",
                "+import org.apache.syncope.core.persistence.api.dao.NotFoundException;",
                " import org.apache.syncope.core.spring.security.AuthContextUtils;",
                "@@ -54,20 +54,45 @@ public class UserRequestLogic extends AbstractTransactionalLogic<UserRequestForm",
                "     @Autowired",
                "-    private BpmnProcessManager bpmnProcessManager;",
                "+    protected BpmnProcessManager bpmnProcessManager;",
                "     @Autowired",
                "-    private UserRequestHandler userRequestHandler;",
                "+    protected UserRequestHandler userRequestHandler;",
                "     @Autowired",
                "-    private PropagationManager propagationManager;",
                "+    protected PropagationManager propagationManager;",
                "     @Autowired",
                "-    private PropagationTaskExecutor taskExecutor;",
                "+    protected PropagationTaskExecutor taskExecutor;",
                "     @Autowired",
                "-    private UserDataBinder binder;",
                "+    protected UserDataBinder binder;",
                "     @Autowired",
                "-    private UserDAO userDAO;",
                "+    protected UserDAO userDAO;",
                "-    protected UserRequestTO doStart(final String bpmnProcess, final User user) {",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "+    @Transactional(readOnly = true)",
                "+    public Pair<Integer, List<UserRequest>> list(final String userKey,",
                "+            final int page,",
                "+            final int size,",
                "+            final List<OrderByClause> orderByClauses) {",
                "+",
                "+        if (userKey == null) {",
                "+            securityChecks(null,",
                "+                    FlowableEntitlement.USER_REQUEST_LIST,",
                "+                    \"Listing user requests not allowed\");",
                "+        } else {",
                "+            User user = userDAO.find(userKey);",
                "+            if (user == null) {",
                "+                throw new NotFoundException(\"User \" + userKey);",
                "+            }",
                "+",
                "+            securityChecks(user.getUsername(),",
                "+                    FlowableEntitlement.USER_REQUEST_LIST,",
                "+                    \"Listing requests for user\" + user.getUsername() + \" not allowed\");",
                "+        }",
                "+",
                "+        return userRequestHandler.getUserRequests(userKey, page, size, orderByClauses);",
                "+    }",
                "+",
                "+    protected UserRequest doStart(final String bpmnProcess, final User user) {",
                "         // check if BPMN process exists",
                "@@ -79,3 +104,3 @@ public class UserRequestLogic extends AbstractTransactionalLogic<UserRequestForm",
                "     @PreAuthorize(\"isAuthenticated()\")",
                "-    public UserRequestTO start(final String bpmnProcess) {",
                "+    public UserRequest start(final String bpmnProcess) {",
                "         return doStart(bpmnProcess, userDAO.findByUsername(AuthContextUtils.getUsername()));",
                "@@ -84,3 +109,3 @@ public class UserRequestLogic extends AbstractTransactionalLogic<UserRequestForm",
                "     @PreAuthorize(\"hasRole('\" + FlowableEntitlement.USER_REQUEST_START + \"')\")",
                "-    public UserRequestTO start(final String bpmnProcess, final String userKey) {",
                "+    public UserRequest start(final String bpmnProcess, final String userKey) {",
                "         return doStart(bpmnProcess, userDAO.authFind(userKey));",
                "@@ -88,14 +113,20 @@ public class UserRequestLogic extends AbstractTransactionalLogic<UserRequestForm",
                "-    @PreAuthorize(\"isAuthenticated()\")",
                "-    public void cancel(final String executionId, final String reason) {",
                "-        Pair<ProcessInstance, String> parsed = userRequestHandler.parse(executionId);",
                "-",
                "-        if (!AuthContextUtils.getUsername().equals(userDAO.find(parsed.getRight()).getUsername())",
                "+    protected void securityChecks(final String username, final String entitlement, final String errorMessage) {",
                "+        if (!AuthContextUtils.getUsername().equals(username)",
                "                 && !AuthContextUtils.getAuthorities().stream().",
                "-                        anyMatch(auth -> FlowableEntitlement.USER_REQUEST_CANCEL.equals(auth.getAuthority()))) {",
                "+                        anyMatch(auth -> entitlement.equals(auth.getAuthority()))) {",
                "             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.DelegatedAdministration);",
                "-            sce.getElements().add(\"Canceling \" + executionId + \" not allowed\");",
                "+            sce.getElements().add(errorMessage);",
                "             throw sce;",
                "         }",
                "+    }",
                "+",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "+    public void cancel(final String executionId, final String reason) {",
                "+        Pair<ProcessInstance, String> parsed = userRequestHandler.parse(executionId);",
                "+",
                "+        securityChecks(userDAO.find(parsed.getRight()).getUsername(),",
                "+                FlowableEntitlement.USER_REQUEST_CANCEL,",
                "+                \"Canceling \" + executionId + \" not allowed\");",
                "@@ -104,18 +135,15 @@ public class UserRequestLogic extends AbstractTransactionalLogic<UserRequestForm",
                "-    @PreAuthorize(\"hasRole('\" + FlowableEntitlement.WORKFLOW_FORM_CLAIM + \"')\")",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "     public UserRequestForm claimForm(final String taskId) {",
                "-        return userRequestHandler.claimForm(taskId);",
                "-    }",
                "-",
                "-    @PreAuthorize(\"hasRole('\" + FlowableEntitlement.WORKFLOW_FORM_READ + \"') \"",
                "-            + \"and hasRole('\" + StandardEntitlement.USER_READ + \"')\")",
                "-    @Transactional(readOnly = true)",
                "-    public List<UserRequestForm> getForms(final String key) {",
                "-        User user = userDAO.authFind(key);",
                "-        return userRequestHandler.getForms(user.getKey());",
                "+        UserRequestForm form = userRequestHandler.claimForm(taskId);",
                "+        securityChecks(form.getUsername(),",
                "+                FlowableEntitlement.USER_REQUEST_FORM_CLAIM,",
                "+                \"Claiming form \" + taskId + \" not allowed\");",
                "+        return form;",
                "     }",
                "-    @PreAuthorize(\"hasRole('\" + FlowableEntitlement.WORKFLOW_FORM_LIST + \"')\")",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "     @Transactional(readOnly = true)",
                "     public Pair<Integer, List<UserRequestForm>> getForms(",
                "+            final String userKey,",
                "             final int page,",
                "@@ -124,7 +152,32 @@ public class UserRequestLogic extends AbstractTransactionalLogic<UserRequestForm",
                "-        return userRequestHandler.getForms(page, size, orderByClauses);",
                "+        if (userKey == null) {",
                "+            securityChecks(null,",
                "+                    FlowableEntitlement.USER_REQUEST_FORM_LIST,",
                "+                    \"Listing forms not allowed\");",
                "+        } else {",
                "+            User user = userDAO.find(userKey);",
                "+            if (user == null) {",
                "+                throw new NotFoundException(\"User \" + userKey);",
                "+            }",
                "+",
                "+            securityChecks(user.getUsername(),",
                "+                    FlowableEntitlement.USER_REQUEST_FORM_LIST,",
                "+                    \"Listing forms for user\" + user.getUsername() + \" not allowed\");",
                "+        }",
                "+",
                "+        return userRequestHandler.getForms(userKey, page, size, orderByClauses);",
                "     }",
                "-    @PreAuthorize(\"hasRole('\" + FlowableEntitlement.WORKFLOW_FORM_SUBMIT + \"')\")",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "     public UserTO submitForm(final UserRequestForm form) {",
                "+        if (form.getUsername() == null) {",
                "+            securityChecks(null,",
                "+                    FlowableEntitlement.USER_REQUEST_FORM_SUBMIT,",
                "+                    \"Submitting forms not allowed\");",
                "+        } else {",
                "+            securityChecks(form.getUsername(),",
                "+                    FlowableEntitlement.USER_REQUEST_FORM_SUBMIT,",
                "+                    \"Submitting forms for user\" + form.getUsername() + \" not allowed\");",
                "+        }",
                "+",
                "         WorkflowResult<UserPatch> wfResult = userRequestHandler.submitForm(form);",
                "diff --git a/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/UserRequestFormQuery.java b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/UserRequestFormQuery.java",
                "index 4097afde33..c4ac3a07c5 100644",
                "--- a/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/UserRequestFormQuery.java",
                "+++ b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/UserRequestFormQuery.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.common.rest.api.beans;",
                "+import javax.ws.rs.QueryParam;",
                "+",
                " public class UserRequestFormQuery extends AbstractQuery {",
                "@@ -30,2 +32,18 @@ public class UserRequestFormQuery extends AbstractQuery {",
                "         }",
                "+",
                "+        public Builder user(final String user) {",
                "+            getInstance().setUser(user);",
                "+            return this;",
                "+        }",
                "+    }",
                "+",
                "+    private String user;",
                "+",
                "+    public String getUser() {",
                "+        return user;",
                "+    }",
                "+",
                "+    @QueryParam(\"user\")",
                "+    public void setUser(final String user) {",
                "+        this.user = user;",
                "     }",
                "diff --git a/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/UserRequestQuery.java b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/UserRequestQuery.java",
                "new file mode 100644",
                "index 0000000000..3f5362978c",
                "--- /dev/null",
                "+++ b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/UserRequestQuery.java",
                "@@ -0,0 +1,50 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.rest.api.beans;",
                "+",
                "+import javax.ws.rs.QueryParam;",
                "+",
                "+public class UserRequestQuery extends AbstractQuery {",
                "+",
                "+    private static final long serialVersionUID = 427312034580076640L;",
                "+",
                "+    public static class Builder extends AbstractQuery.Builder<UserRequestQuery, Builder> {",
                "+",
                "+        @Override",
                "+        protected UserRequestQuery newInstance() {",
                "+            return new UserRequestQuery();",
                "+        }",
                "+",
                "+        public Builder user(final String user) {",
                "+            getInstance().setUser(user);",
                "+            return this;",
                "+        }",
                "+    }",
                "+",
                "+    private String user;",
                "+",
                "+    public String getUser() {",
                "+        return user;",
                "+    }",
                "+",
                "+    @QueryParam(\"user\")",
                "+    public void setUser(final String user) {",
                "+        this.user = user;",
                "+    }",
                "+}",
                "diff --git a/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/BpmnProcessService.java b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/BpmnProcessService.java",
                "index 06cb056da3..bb34fdd52b 100644",
                "--- a/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/BpmnProcessService.java",
                "+++ b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/BpmnProcessService.java",
                "@@ -21,2 +21,5 @@ package org.apache.syncope.common.rest.api.service;",
                " import io.swagger.v3.oas.annotations.Operation;",
                "+import io.swagger.v3.oas.annotations.media.ArraySchema;",
                "+import io.swagger.v3.oas.annotations.media.Content;",
                "+import io.swagger.v3.oas.annotations.media.Schema;",
                " import io.swagger.v3.oas.annotations.responses.ApiResponse;",
                "@@ -37,3 +40,3 @@ import javax.ws.rs.core.MediaType;",
                " import javax.ws.rs.core.Response;",
                "-import org.apache.syncope.common.lib.to.BpmnProcessTO;",
                "+import org.apache.syncope.common.lib.to.BpmnProcess;",
                " import org.apache.syncope.common.rest.api.RESTHeaders;",
                "@@ -53,7 +56,12 @@ public interface BpmnProcessService extends JAXRSService {",
                "      *",
                "-     * @return available BPMN processs, for the given any object type",
                "+     * @return available BPMN processs",
                "      */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"200\", description = \"available BPMN processes\", content =",
                "+                    @Content(array =",
                "+                            @ArraySchema(schema =",
                "+                                    @Schema(implementation = BpmnProcess.class)))))",
                "     @GET",
                "     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    List<BpmnProcessTO> list();",
                "+    List<BpmnProcess> list();",
                "@@ -65,2 +73,4 @@ public interface BpmnProcessService extends JAXRSService {",
                "      */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"200\", description = \"BPMN process for matching key\"))",
                "     @GET",
                "@@ -74,4 +84,6 @@ public interface BpmnProcessService extends JAXRSService {",
                "      * @param key BPMN process key",
                "-     * @return workflow diagram representation",
                "+     * @return BPMN diagram representation",
                "      */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"200\", description = \"BPMN diagram representation\"))",
                "     @GET",
                "diff --git a/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserRequestService.java b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserRequestService.java",
                "index 701772dd62..5ad7b1284c 100644",
                "--- a/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserRequestService.java",
                "+++ b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserRequestService.java",
                "@@ -20,2 +20,6 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.v3.oas.annotations.media.Content;",
                "+import io.swagger.v3.oas.annotations.media.Schema;",
                "+import io.swagger.v3.oas.annotations.responses.ApiResponse;",
                "+import io.swagger.v3.oas.annotations.responses.ApiResponses;",
                " import io.swagger.v3.oas.annotations.security.SecurityRequirement;",
                "@@ -23,3 +27,2 @@ import io.swagger.v3.oas.annotations.security.SecurityRequirements;",
                " import io.swagger.v3.oas.annotations.tags.Tag;",
                "-import java.util.List;",
                " import javax.validation.constraints.NotNull;",
                "@@ -36,3 +39,3 @@ import javax.ws.rs.core.MediaType;",
                " import org.apache.syncope.common.lib.to.PagedResult;",
                "-import org.apache.syncope.common.lib.to.UserRequestTO;",
                "+import org.apache.syncope.common.lib.to.UserRequest;",
                " import org.apache.syncope.common.lib.to.UserTO;",
                "@@ -41,2 +44,3 @@ import org.apache.syncope.common.rest.api.RESTHeaders;",
                " import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;",
                "+import org.apache.syncope.common.rest.api.beans.UserRequestQuery;",
                "@@ -53,9 +57,27 @@ public interface UserRequestService extends JAXRSService {",
                "     /**",
                "-     * Starts a new user request, for the given BOMN Process and",
                "-     * user (if provided) or requesting user (if not provided).",
                "+     * Returns a list of running user requests matching the given query.",
                "+     *",
                "+     * @param query query conditions",
                "+     * @return list of all running user requests",
                "+     */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"200\", description = \"list of all running user requests\", content =",
                "+                    @Content(schema =",
                "+                            @Schema(implementation = PagedResult.class))))",
                "+    @GET",
                "+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "+    PagedResult<UserRequest> list(@BeanParam UserRequestQuery query);",
                "+",
                "+    /**",
                "+     * Starts a new request for the given BPMN Process and user (if provided) or requesting user (if not provided).",
                "      *",
                "      * @param bpmnProcess BPMN process",
                "-     * @param userKey user key",
                "+     * @param user if value looks like a UUID then it is interpreted as key otherwise as a username",
                "      * @return data about the started request service, including execution id",
                "      */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"200\",",
                "+                    description = \"data about the started request service, including execution id\", content =",
                "+                    @Content(schema =",
                "+                            @Schema(implementation = UserRequest.class))))",
                "     @POST",
                "@@ -63,5 +85,5 @@ public interface UserRequestService extends JAXRSService {",
                "     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    UserRequestTO start(",
                "+    UserRequest start(",
                "             @NotNull @PathParam(\"bpmnProcess\") String bpmnProcess,",
                "-            @QueryParam(\"userKey\") String userKey);",
                "+            @QueryParam(\"user\") String user);",
                "@@ -73,2 +95,4 @@ public interface UserRequestService extends JAXRSService {",
                "      */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))",
                "     @DELETE",
                "@@ -81,7 +105,11 @@ public interface UserRequestService extends JAXRSService {",
                "     /**",
                "-     * Returns a list of all available workflow forms.",
                "+     * Returns a list of user request forms matching the given query.",
                "      *",
                "      * @param query query conditions",
                "-     * @return list of all available workflow forms",
                "+     * @return list of all available user request forms",
                "      */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"200\", description = \"list of all available user request forms\", content =",
                "+                    @Content(schema =",
                "+                            @Schema(implementation = PagedResult.class))))",
                "     @GET",
                "@@ -92,18 +120,11 @@ public interface UserRequestService extends JAXRSService {",
                "     /**",
                "-     * Returns a list of available forms for the given user key.",
                "-     *",
                "-     * @param userKey user key",
                "-     * @return list of available forms for the given user key",
                "-     */",
                "-    @GET",
                "-    @Path(\"forms/{userKey}\")",
                "-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    List<UserRequestForm> getForms(@NotNull @PathParam(\"userKey\") String userKey);",
                "-",
                "-    /**",
                "-     * Claims the form for the given task id.",
                "+     * Requests to manage the form for the given task id.",
                "      *",
                "      * @param taskId workflow task id",
                "-     * @return the workflow form for the given task id",
                "+     * @return the form for the given task id",
                "      */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"200\", description = \"the form for the given task id\", content =",
                "+                    @Content(schema =",
                "+                            @Schema(implementation = UserRequestForm.class))))",
                "     @POST",
                "@@ -114,7 +135,11 @@ public interface UserRequestService extends JAXRSService {",
                "     /**",
                "-     * Submits a workflow form.",
                "+     * Submits a user request form.",
                "      *",
                "-     * @param form workflow form.",
                "+     * @param form user request form.",
                "      * @return updated user",
                "      */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"200\", description = \"updated user\", content =",
                "+                    @Content(schema =",
                "+                            @Schema(implementation = UserTO.class))))",
                "     @POST",
                "diff --git a/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowTaskService.java b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowTaskService.java",
                "index 54f38d0d62..b396d6e2af 100644",
                "--- a/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowTaskService.java",
                "+++ b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowTaskService.java",
                "@@ -20,2 +20,7 @@ package org.apache.syncope.common.rest.api.service;",
                "+import io.swagger.v3.oas.annotations.media.ArraySchema;",
                "+import io.swagger.v3.oas.annotations.media.Content;",
                "+import io.swagger.v3.oas.annotations.media.Schema;",
                "+import io.swagger.v3.oas.annotations.responses.ApiResponse;",
                "+import io.swagger.v3.oas.annotations.responses.ApiResponses;",
                " import io.swagger.v3.oas.annotations.security.SecurityRequirement;",
                "@@ -50,2 +55,7 @@ public interface UserWorkflowTaskService extends JAXRSService {",
                "      */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"200\", description = \"list of available tasks for the given user key\", content =",
                "+                    @Content(array =",
                "+                            @ArraySchema(schema =",
                "+                                    @Schema(implementation = WorkflowTask.class)))))",
                "     @GET",
                "@@ -61,2 +71,6 @@ public interface UserWorkflowTaskService extends JAXRSService {",
                "      */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"200\", description = \"updated user\", content =",
                "+                    @Content(schema =",
                "+                            @Schema(implementation = UserTO.class))))",
                "     @POST",
                "diff --git a/ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/BpmnProcessServiceImpl.java b/ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/BpmnProcessServiceImpl.java",
                "index dd1aea8b87..4f976b5404 100644",
                "--- a/ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/BpmnProcessServiceImpl.java",
                "+++ b/ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/BpmnProcessServiceImpl.java",
                "@@ -24,3 +24,3 @@ import javax.ws.rs.core.Response;",
                " import javax.ws.rs.core.StreamingOutput;",
                "-import org.apache.syncope.common.lib.to.BpmnProcessTO;",
                "+import org.apache.syncope.common.lib.to.BpmnProcess;",
                " import org.apache.syncope.common.lib.types.BpmnProcessFormat;",
                "@@ -39,3 +39,3 @@ public class BpmnProcessServiceImpl extends AbstractServiceImpl implements BpmnP",
                "     @Override",
                "-    public List<BpmnProcessTO> list() {",
                "+    public List<BpmnProcess> list() {",
                "         return logic.list();",
                "diff --git a/ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserRequestServiceImpl.java b/ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserRequestServiceImpl.java",
                "index 2f174a0065..188d22e87c 100644",
                "--- a/ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserRequestServiceImpl.java",
                "+++ b/ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserRequestServiceImpl.java",
                "@@ -23,3 +23,3 @@ import org.apache.commons.lang3.tuple.Pair;",
                " import org.apache.syncope.common.lib.to.PagedResult;",
                "-import org.apache.syncope.common.lib.to.UserRequestTO;",
                "+import org.apache.syncope.common.lib.to.UserRequest;",
                " import org.apache.syncope.common.lib.to.UserTO;",
                "@@ -27,6 +27,8 @@ import org.apache.syncope.common.lib.to.UserRequestForm;",
                " import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;",
                "+import org.apache.syncope.common.rest.api.beans.UserRequestQuery;",
                " import org.apache.syncope.core.logic.UserRequestLogic;",
                "+import org.apache.syncope.common.rest.api.service.UserRequestService;",
                "+import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                " import org.springframework.stereotype.Service;",
                "-import org.apache.syncope.common.rest.api.service.UserRequestService;",
                "@@ -38,7 +40,21 @@ public class UserRequestServiceImpl extends AbstractServiceImpl implements UserR",
                "+    @Autowired",
                "+    private UserDAO userDAO;",
                "+",
                "+    @Override",
                "+    public PagedResult<UserRequest> list(final UserRequestQuery query) {",
                "+        if (query.getUser() != null) {",
                "+            query.setUser(getActualKey(userDAO, query.getUser()));",
                "+        }",
                "+",
                "+        Pair<Integer, List<UserRequest>> result = logic.list(",
                "+                query.getUser(), query.getPage(), query.getSize(), getOrderByClauses(query.getOrderBy()));",
                "+        return buildPagedResult(result.getRight(), query.getPage(), query.getSize(), result.getLeft());",
                "+    }",
                "+",
                "     @Override",
                "-    public UserRequestTO start(final String bpmnProcess, final String userKey) {",
                "-        return userKey == null",
                "+    public UserRequest start(final String bpmnProcess, final String user) {",
                "+        return user == null",
                "                 ? logic.start(bpmnProcess)",
                "-                : logic.start(bpmnProcess, userKey);",
                "+                : logic.start(bpmnProcess, getActualKey(userDAO, user));",
                "     }",
                "@@ -55,11 +71,10 @@ public class UserRequestServiceImpl extends AbstractServiceImpl implements UserR",
                "-    @Override",
                "-    public List<UserRequestForm> getForms(final String userKey) {",
                "-        return logic.getForms(userKey);",
                "-    }",
                "-",
                "     @Override",
                "     public PagedResult<UserRequestForm> getForms(final UserRequestFormQuery query) {",
                "+        if (query.getUser() != null) {",
                "+            query.setUser(getActualKey(userDAO, query.getUser()));",
                "+        }",
                "+",
                "         Pair<Integer, List<UserRequestForm>> result = logic.getForms(",
                "-                query.getPage(), query.getSize(), getOrderByClauses(query.getOrderBy()));",
                "+                query.getUser(), query.getPage(), query.getSize(), getOrderByClauses(query.getOrderBy()));",
                "         return buildPagedResult(result.getRight(), query.getPage(), query.getSize(), result.getLeft());",
                "@@ -71,3 +86,2 @@ public class UserRequestServiceImpl extends AbstractServiceImpl implements UserR",
                "     }",
                "-",
                " }",
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index c89241e6a6..dc5e8d15a5 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -1543,2 +1543,22 @@ under the License.",
                "         <plugins>",
                "+          <!-- Adds Flowable custom classes -->",
                "+          <plugin>",
                "+            <groupId>org.codehaus.mojo</groupId>",
                "+            <artifactId>build-helper-maven-plugin</artifactId>",
                "+            <executions>",
                "+              <execution>",
                "+                <id>add-flowable-custom-classes</id>",
                "+                <phase>initialize</phase>",
                "+                <goals>",
                "+                  <goal>add-source</goal>",
                "+                </goals>",
                "+                <configuration>",
                "+                  <sources>",
                "+                    <source>${basedir}/src/main/java-all</source>",
                "+                  </sources>",
                "+                </configuration>",
                "+              </execution>",
                "+            </executions>",
                "+          </plugin>",
                "+",
                "           <!-- Adds Flowable test content -->",
                "diff --git a/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/AssignDirectorGroup.java b/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/AssignDirectorGroup.java",
                "new file mode 100644",
                "index 0000000000..4db7ac2279",
                "--- /dev/null",
                "+++ b/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/AssignDirectorGroup.java",
                "@@ -0,0 +1,65 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.fit.core.reference.flowable;",
                "+",
                "+import org.apache.syncope.common.lib.patch.MembershipPatch;",
                "+import org.apache.syncope.common.lib.patch.UserPatch;",
                "+import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;",
                "+import org.apache.syncope.core.flowable.task.AbstractFlowableServiceTask;",
                "+import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.user.User;",
                "+import org.apache.syncope.core.provisioning.api.PropagationByResource;",
                "+import org.apache.syncope.core.provisioning.api.data.UserDataBinder;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                "+import org.springframework.stereotype.Component;",
                "+",
                "+@Component",
                "+public class AssignDirectorGroup extends AbstractFlowableServiceTask {",
                "+",
                "+    @Autowired",
                "+    private UserDataBinder dataBinder;",
                "+",
                "+    @Autowired",
                "+    private UserDAO userDAO;",
                "+",
                "+    @Override",
                "+    protected void doExecute(final String executionId) {",
                "+        User user = engine.getRuntimeService().",
                "+                getVariable(executionId, FlowableRuntimeUtils.USER, User.class);",
                "+",
                "+        Boolean secondLevelApprove = engine.getRuntimeService().",
                "+                getVariable(executionId, \"secondLevelApprove\", Boolean.class);",
                "+        if (Boolean.TRUE.equals(secondLevelApprove)) {",
                "+            user = userDAO.save(user);",
                "+",
                "+            UserPatch userPatch = new UserPatch();",
                "+            userPatch.setKey(user.getKey());",
                "+            userPatch.getMemberships().add(new MembershipPatch.Builder().",
                "+                    group(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").build());",
                "+",
                "+            PropagationByResource propByRes = dataBinder.update(user, userPatch);",
                "+",
                "+            // report updated user and propagation by resource as result",
                "+            engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.USER, user);",
                "+            engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);",
                "+        } else {",
                "+            LOG.info(\"Second level was not approved, not assigning the director group to \" + user.getUsername());",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java b/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java",
                "new file mode 100644",
                "index 0000000000..b0c5261ac8",
                "--- /dev/null",
                "+++ b/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java",
                "@@ -0,0 +1,71 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.fit.core.reference.flowable;",
                "+",
                "+import org.apache.syncope.common.lib.patch.RelationshipPatch;",
                "+import org.apache.syncope.common.lib.patch.UserPatch;",
                "+import org.apache.syncope.common.lib.to.RelationshipTO;",
                "+import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;",
                "+import org.apache.syncope.core.flowable.task.AbstractFlowableServiceTask;",
                "+import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.user.User;",
                "+import org.apache.syncope.core.provisioning.api.PropagationByResource;",
                "+import org.apache.syncope.core.provisioning.api.data.UserDataBinder;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                "+import org.springframework.stereotype.Component;",
                "+",
                "+@Component",
                "+public class CreateARelationship extends AbstractFlowableServiceTask {",
                "+",
                "+    @Autowired",
                "+    private UserDataBinder dataBinder;",
                "+",
                "+    @Autowired",
                "+    private UserDAO userDAO;",
                "+",
                "+    @Override",
                "+    protected void doExecute(final String executionId) {",
                "+        User user = engine.getRuntimeService().",
                "+                getVariable(executionId, FlowableRuntimeUtils.USER, User.class);",
                "+",
                "+        Boolean approve = engine.getRuntimeService().",
                "+                getVariable(executionId, \"approve\", Boolean.class);",
                "+        if (Boolean.TRUE.equals(approve)) {",
                "+            user = userDAO.save(user);",
                "+",
                "+            String printer = engine.getRuntimeService().",
                "+                    getVariable(executionId, \"printer\", String.class);",
                "+",
                "+            UserPatch userPatch = new UserPatch();",
                "+            userPatch.setKey(user.getKey());",
                "+            userPatch.getRelationships().add(new RelationshipPatch.Builder().",
                "+                    relationshipTO(new RelationshipTO.Builder().",
                "+                            otherEnd(\"PRINTER\", printer).type(\"neighborhood\").build()).",
                "+                    build());",
                "+",
                "+            PropagationByResource propByRes = dataBinder.update(user, userPatch);",
                "+",
                "+            // report updated user and propagation by resource as result",
                "+            engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.USER, user);",
                "+            engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);",
                "+        } else {",
                "+            LOG.info(\"Printer assignment to \" + user.getUsername() + \" was not approved\");",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/PrintersValueProvider.java b/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/PrintersValueProvider.java",
                "new file mode 100644",
                "index 0000000000..82e969370a",
                "--- /dev/null",
                "+++ b/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/PrintersValueProvider.java",
                "@@ -0,0 +1,70 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.fit.core.reference.flowable;",
                "+",
                "+import java.util.Collections;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.stream.Collectors;",
                "+import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "+import org.apache.syncope.core.flowable.api.DropdownValueProvider;",
                "+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;",
                "+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;",
                "+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                "+import org.springframework.stereotype.Component;",
                "+import org.springframework.transaction.annotation.Transactional;",
                "+",
                "+@Component",
                "+public class PrintersValueProvider implements DropdownValueProvider {",
                "+",
                "+    private static final SearchCond PRINTER_COND;",
                "+",
                "+    private static final List<OrderByClause> ORDER_BY;",
                "+",
                "+    static {",
                "+        AnyTypeCond anyTypeCond = new AnyTypeCond();",
                "+        anyTypeCond.setAnyTypeKey(\"PRINTER\");",
                "+        PRINTER_COND = SearchCond.getLeafCond(anyTypeCond);",
                "+",
                "+        OrderByClause orderByNameAsc = new OrderByClause();",
                "+        orderByNameAsc.setField(\"name\");",
                "+        orderByNameAsc.setDirection(OrderByClause.Direction.ASC);",
                "+        ORDER_BY = Collections.singletonList(orderByNameAsc);",
                "+    }",
                "+",
                "+    @Autowired",
                "+    private AnySearchDAO anySearchDAO;",
                "+",
                "+    @Transactional(readOnly = true)",
                "+    @Override",
                "+    public Map<String, String> getValues() {",
                "+        return anySearchDAO.<AnyObject>search(PRINTER_COND, ORDER_BY, AnyTypeKind.ANY_OBJECT).stream().",
                "+                collect(Collectors.toMap(",
                "+                        AnyObject::getKey,",
                "+                        AnyObject::getName,",
                "+                        (u, v) -> {",
                "+                            throw new IllegalStateException(String.format(\"Duplicate key %s\", u));",
                "+                        },",
                "+                        LinkedHashMap::new));",
                "+    }",
                "+}",
                "diff --git a/fit/core-reference/src/main/resources/all/workflowTestContext.xml b/fit/core-reference/src/main/resources/all/workflowTestContext.xml",
                "index 2329c53437..b14490aefe 100644",
                "--- a/fit/core-reference/src/main/resources/all/workflowTestContext.xml",
                "+++ b/fit/core-reference/src/main/resources/all/workflowTestContext.xml",
                "@@ -21,6 +21,9 @@ under the License.",
                "        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+       xmlns:context=\"http://www.springframework.org/schema/context\"",
                "        xsi:schemaLocation=\"http://www.springframework.org/schema/beans",
                "-                           http://www.springframework.org/schema/beans/spring-beans.xsd\">",
                "+                           http://www.springframework.org/schema/beans/spring-beans.xsd",
                "+                           http://www.springframework.org/schema/context",
                "+                           http://www.springframework.org/schema/context/spring-context.xsd\">",
                "-  <bean id=\"assignDirectorGroup\" class=\"org.apache.syncope.fit.core.reference.AssignDirectorGroup\"/>",
                "+  <context:component-scan base-package=\"org.apache.syncope.fit.core.reference.flowable\"/>",
                "diff --git a/fit/core-reference/src/main/resources/assignPrinterRequest.bpmn20.xml b/fit/core-reference/src/main/resources/assignPrinterRequest.bpmn20.xml",
                "new file mode 100644",
                "index 0000000000..c9ecb9c15e",
                "--- /dev/null",
                "+++ b/fit/core-reference/src/main/resources/assignPrinterRequest.bpmn20.xml",
                "@@ -0,0 +1,92 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" ",
                "+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ",
                "+             xmlns:flowable=\"http://flowable.org/bpmn\"",
                "+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" ",
                "+             xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" ",
                "+             xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" ",
                "+             typeLanguage=\"http://www.w3.org/2001/XMLSchema\" ",
                "+             expressionLanguage=\"http://www.w3.org/1999/XPath\" ",
                "+             targetNamespace=\"http://www.flowable.org/processdef\">",
                "+",
                "+  <process id=\"assignPrinterRequest\" name=\"Assign printer\" isExecutable=\"true\">",
                "+    <startEvent id=\"startevent1\" name=\"Start\"/>",
                "+    <endEvent id=\"endevent1\" name=\"End\"/>",
                "+    <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"selectPrinter\"/>",
                "+    <userTask id=\"selectPrinter\" name=\"Select printer\" flowable:formKey=\"selectPrinter\" flowable:assignee=\"${wfExecutor}\">",
                "+      <extensionElements>",
                "+        <flowable:formProperty id=\"printer\" name=\"Printer\" variable=\"printer\" type=\"dropdown\" required=\"true\">",
                "+          <flowable:value id=\"dropdownValueProvider\" name=\"printersValueProvider\"/>",
                "+        </flowable:formProperty>",
                "+        <flowable:formProperty id=\"printMode\" name=\"Preferred print mode?\" type=\"enum\">",
                "+          <flowable:value id=\"bw\" name=\"Black / White\"/>",
                "+          <flowable:value id=\"color\" name=\"Color\"/>",
                "+        </flowable:formProperty>",
                "+      </extensionElements>",
                "+    </userTask>",
                "+    <userTask id=\"approvePrinter\" name=\"Approve printer\" flowable:formKey=\"approvePrinter\">",
                "+      <extensionElements>",
                "+        <flowable:formProperty id=\"username\" name=\"Username\" type=\"string\" expression=\"${userTO.username}\" writable=\"false\"/>",
                "+        <flowable:formProperty id=\"printer\" name=\"Selected printer\" type=\"string\" expression=\"${printer}\" writable=\"false\"/>",
                "+        <flowable:formProperty id=\"approve\" name=\"Approve?\" type=\"boolean\" variable=\"approve\" required=\"true\"/>",
                "+      </extensionElements>",
                "+    </userTask>",
                "+    <sequenceFlow id=\"sid-D7047714-8E57-46B8-B6D4-4844DE330329\" sourceRef=\"selectPrinter\" targetRef=\"approvePrinter\"/>",
                "+    <serviceTask id=\"createARelationship\" name=\"Create ARelationship\" flowable:expression=\"#{createARelationship.execute(execution.processInstanceId)}\"/>",
                "+    <sequenceFlow id=\"sid-33880AE7-35C6-4A39-8E5B-12D8BA53F042\" sourceRef=\"approvePrinter\" targetRef=\"createARelationship\"/>",
                "+    <sequenceFlow id=\"sid-831E1896-EDF9-4F7D-AA42-E86CC1F8C5D3\" sourceRef=\"createARelationship\" targetRef=\"endevent1\"/>",
                "+  </process>",
                "+  <bpmndi:BPMNDiagram id=\"BPMNDiagram_assignPrinterRequest\">",
                "+    <bpmndi:BPMNPlane bpmnElement=\"assignPrinterRequest\" id=\"BPMNPlane_assignPrinterRequest\">",
                "+      <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">",
                "+        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"180.0\" y=\"115.0\"/>",
                "+      </bpmndi:BPMNShape>",
                "+      <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">",
                "+        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"885.0\" y=\"116.0\"/>",
                "+      </bpmndi:BPMNShape>",
                "+      <bpmndi:BPMNShape bpmnElement=\"selectPrinter\" id=\"BPMNShape_selectPrinter\">",
                "+        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"330.0\" y=\"90.0\"/>",
                "+      </bpmndi:BPMNShape>",
                "+      <bpmndi:BPMNShape bpmnElement=\"approvePrinter\" id=\"BPMNShape_approvePrinter\">",
                "+        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"495.5\" y=\"90.0\"/>",
                "+      </bpmndi:BPMNShape>",
                "+      <bpmndi:BPMNShape bpmnElement=\"createARelationship\" id=\"BPMNShape_createARelationship\">",
                "+        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"675.0\" y=\"90.0\"/>",
                "+      </bpmndi:BPMNShape>",
                "+      <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">",
                "+        <omgdi:waypoint x=\"209.94999901196195\" y=\"130.0\"/>",
                "+        <omgdi:waypoint x=\"330.0\" y=\"130.0\"/>",
                "+      </bpmndi:BPMNEdge>",
                "+      <bpmndi:BPMNEdge bpmnElement=\"sid-D7047714-8E57-46B8-B6D4-4844DE330329\" id=\"BPMNEdge_sid-D7047714-8E57-46B8-B6D4-4844DE330329\">",
                "+        <omgdi:waypoint x=\"429.95000000000005\" y=\"130.0\"/>",
                "+        <omgdi:waypoint x=\"495.5\" y=\"130.0\"/>",
                "+      </bpmndi:BPMNEdge>",
                "+      <bpmndi:BPMNEdge bpmnElement=\"sid-33880AE7-35C6-4A39-8E5B-12D8BA53F042\" id=\"BPMNEdge_sid-33880AE7-35C6-4A39-8E5B-12D8BA53F042\">",
                "+        <omgdi:waypoint x=\"595.4499999999068\" y=\"130.0\"/>",
                "+        <omgdi:waypoint x=\"675.0\" y=\"130.0\"/>",
                "+      </bpmndi:BPMNEdge>",
                "+      <bpmndi:BPMNEdge bpmnElement=\"sid-831E1896-EDF9-4F7D-AA42-E86CC1F8C5D3\" id=\"BPMNEdge_sid-831E1896-EDF9-4F7D-AA42-E86CC1F8C5D3\">",
                "+        <omgdi:waypoint x=\"774.9499999999266\" y=\"130.0\"/>",
                "+        <omgdi:waypoint x=\"885.0\" y=\"130.0\"/>",
                "+      </bpmndi:BPMNEdge>",
                "+    </bpmndi:BPMNPlane>",
                "+  </bpmndi:BPMNDiagram>",
                "+</definitions>",
                "\\ No newline at end of file",
                "diff --git a/pom.xml b/pom.xml",
                "index edc38b01e1..a04a9e5993 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1749,2 +1749,8 @@ under the License.",
                "+        <plugin>",
                "+          <groupId>org.codehaus.mojo</groupId>",
                "+          <artifactId>build-helper-maven-plugin</artifactId>",
                "+          <version>3.0.0</version>",
                "+        </plugin>",
                "+",
                "         <plugin>",
                "@@ -2307,4 +2313,4 @@ under the License.",
                "             <link>https://build.shibboleth.net/nexus/content/sites/site/java-opensaml/3.3.0/apidocs/</link>",
                "-\t    <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/elasticsearch/6.4.1/index.html</link>",
                "-\t    <link>http://docs.swagger.io/swagger-core/v2.0.5/apidocs/</link>",
                "+            <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/elasticsearch/6.4.1/index.html</link>",
                "+            <link>http://docs.swagger.io/swagger-core/v2.0.5/apidocs/</link>",
                "           </links>"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/commons/MapChoiceRenderer.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxDropDownChoicePanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java",
                "client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_it.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_ja.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_pt_BR.properties",
                "client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_ru.properties",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java",
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "ext/flowable/client-console/pom.xml",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/approvals/Approval.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/BpmnProcessDirectoryPanel.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/AbstractBpmnProcessResource.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/BpmnProcessGETResource.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/BpmnProcessPUTResource.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/BpmnProcessRestClient.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/UserRequestRestClient.java",
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/widgets/ApprovalsWidget.java",
                "ext/flowable/client-console/src/main/resources/dropdown.diff",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_it.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_ja.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_pt_BR.properties",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_ru.properties",
                "ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/BpmnProcess.java",
                "ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequest.java",
                "ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequestForm.java",
                "ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequestFormProperty.java",
                "ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/types/FlowableEntitlement.java",
                "ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/types/UserRequestFormPropertyType.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/BpmnProcessManager.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/DropdownValueProvider.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/UserRequestHandler.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableBpmnProcessManager.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DomainProcessEngineFactoryBean.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownAwareJsonConverter.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownAwareUserTaskJsonConverter.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownFormType.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeFormHandlerHelper.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeTaskFormHandler.java",
                "ext/flowable/flowable-bpmn/src/main/resources/workflowFlowableContext.xml",
                "ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/BpmnProcessLogic.java",
                "ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserRequestLogic.java",
                "ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/UserRequestFormQuery.java",
                "ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/UserRequestQuery.java",
                "ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/BpmnProcessService.java",
                "ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserRequestService.java",
                "ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowTaskService.java",
                "ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/BpmnProcessServiceImpl.java",
                "ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserRequestServiceImpl.java",
                "fit/core-reference/pom.xml",
                "fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/AssignDirectorGroup.java",
                "fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java",
                "fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/PrintersValueProvider.java",
                "fit/core-reference/src/main/resources/all/workflowTestContext.xml",
                "fit/core-reference/src/main/resources/assignPrinterRequest.bpmn20.xml",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1369": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6f6d91569d94112023f74b42898354d190d7d180"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, html, user, entitlement",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1369",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b2ae9e1de33513de17b9a7856d7aecad7a5ab05c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539164495,
            "hunks": 2,
            "message": "[SYNCOPE-1369] Fix on console extension",
            "diff": [
                "diff --git a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java",
                "index a533897002..478491361e 100644",
                "--- a/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java",
                "+++ b/ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java",
                "@@ -45,6 +45,2 @@ public class Flowable extends BaseExtPage {",
                "-        WebMarkupContainer disabled = new WebMarkupContainer(\"disabled\");",
                "-        disabled.setOutputMarkupPlaceholderTag(true);",
                "-        content.add(disabled);",
                "-",
                "         WizardMgtPanel<BpmnProcess> bpmnProcessesPanel = new BpmnProcessDirectoryPanel.Builder(getPageReference()) {",
                "diff --git a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Flowable.html b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Flowable.html",
                "index b23fab0c3c..763e797f51 100644",
                "--- a/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Flowable.html",
                "+++ b/ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Flowable.html",
                "@@ -30,3 +30,2 @@ under the License.",
                "     <section class=\"content\" wicket:id=\"content\">",
                "-      <span wicket:id=\"disabled\"><i><wicket:message key=\"disabled\"/></i></span>",
                "       <div class=\"box\">"
            ],
            "changed_files": [
                "ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java",
                "ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Flowable.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1369": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "543996c76d436ae219728633951b969b2ebf0958"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: console",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, html",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1369",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "efe0a6544403bbe151c686c2efaa66bb5a8bf49e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538739973,
            "hunks": 104,
            "message": "Do not report loggers used to support the Audit process",
            "diff": [
                "diff --git a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerResultManager.java b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerResultManager.java",
                "index 327f8c0820..2865b9209f 100644",
                "--- a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerResultManager.java",
                "+++ b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerResultManager.java",
                "@@ -28,3 +28,3 @@ import org.apache.syncope.client.cli.commands.CommonsResultManager;",
                " import org.apache.syncope.client.cli.view.Table;",
                "-import org.apache.syncope.common.lib.log.LogStatementTO;",
                "+import org.apache.syncope.common.lib.log.LogStatement;",
                " import org.apache.syncope.common.lib.log.LoggerTO;",
                "@@ -43,5 +43,5 @@ public class LoggerResultManager extends CommonsResultManager {",
                "-    public void fromGetLastLogStatements(final List<LogStatementTO> statements) throws JsonProcessingException {",
                "+    public void fromGetLastLogStatements(final List<LogStatement> statements) throws JsonProcessingException {",
                "         final Table.TableBuilder tableBuilder = new Table.TableBuilder(\"last statements\").header(\"statement\");",
                "-        for (final LogStatementTO statement : statements) {",
                "+        for (final LogStatement statement : statements) {",
                "             tableBuilder.rowValues(Collections.singletonList(",
                "diff --git a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerSyncopeOperations.java b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerSyncopeOperations.java",
                "index b1d52bfb23..8b44c37aa5 100644",
                "--- a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerSyncopeOperations.java",
                "+++ b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerSyncopeOperations.java",
                "@@ -24,3 +24,3 @@ import org.apache.syncope.client.cli.SyncopeServices;",
                " import org.apache.syncope.common.lib.log.LogAppender;",
                "-import org.apache.syncope.common.lib.log.LogStatementTO;",
                "+import org.apache.syncope.common.lib.log.LogStatement;",
                " import org.apache.syncope.common.lib.log.LoggerTO;",
                "@@ -37,3 +37,3 @@ public class LoggerSyncopeOperations {",
                "-    public List<LogStatementTO> getLastLogStatements(final String appender) {",
                "+    public List<LogStatement> getLastLogStatements(final String appender) {",
                "         return loggerService.getLastLogStatements(appender);",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/events/EventCategoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/events/EventCategoryPanel.java",
                "index e31ffdc010..bf49fc267b 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/events/EventCategoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/events/EventCategoryPanel.java",
                "@@ -37,3 +37,3 @@ import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownCho",
                " import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;",
                "-import org.apache.syncope.common.lib.log.EventCategoryTO;",
                "+import org.apache.syncope.common.lib.log.EventCategory;",
                " import org.apache.syncope.common.lib.types.AuditElements;",
                "@@ -59,5 +59,5 @@ public abstract class EventCategoryPanel extends Panel {",
                "-    private final List<EventCategoryTO> eventCategoryTOs;",
                "+    private final List<EventCategory> eventCategoryTOs;",
                "-    private final EventCategoryTO eventCategoryTO = new EventCategoryTO();",
                "+    private final EventCategory eventCategoryTO = new EventCategory();",
                "@@ -77,3 +77,3 @@ public abstract class EventCategoryPanel extends Panel {",
                "-    private final ActionsPanel<EventCategoryTO> actionsPanel;",
                "+    private final ActionsPanel<EventCategory> actionsPanel;",
                "@@ -83,3 +83,3 @@ public abstract class EventCategoryPanel extends Panel {",
                "             final String id,",
                "-            final List<EventCategoryTO> eventCategoryTOs,",
                "+            final List<EventCategory> eventCategoryTOs,",
                "             final IModel<List<String>> model) {",
                "@@ -189,3 +189,3 @@ public abstract class EventCategoryPanel extends Panel {",
                "         actionsPanel = new ActionsPanel<>(\"customActions\", null);",
                "-        actionsPanel.add(new ActionLink<EventCategoryTO>() {",
                "+        actionsPanel.add(new ActionLink<EventCategory>() {",
                "@@ -194,5 +194,5 @@ public abstract class EventCategoryPanel extends Panel {",
                "             @Override",
                "-            public void onClick(final AjaxRequestTarget target, final EventCategoryTO ignore) {",
                "+            public void onClick(final AjaxRequestTarget target, final EventCategory ignore) {",
                "                 if (StringUtils.isNotBlank(custom.getModelObject())) {",
                "-                    Pair<EventCategoryTO, AuditElements.Result> parsed = AuditLoggerName.parseEventCategory(custom.",
                "+                    Pair<EventCategory, AuditElements.Result> parsed = AuditLoggerName.parseEventCategory(custom.",
                "                             getModelObject());",
                "@@ -216,3 +216,3 @@ public abstract class EventCategoryPanel extends Panel {",
                "         }, ActionLink.ActionType.CREATE, StringUtils.EMPTY).hideLabel();",
                "-        actionsPanel.add(new ActionLink<EventCategoryTO>() {",
                "+        actionsPanel.add(new ActionLink<EventCategory>() {",
                "@@ -221,5 +221,5 @@ public abstract class EventCategoryPanel extends Panel {",
                "             @Override",
                "-            public void onClick(final AjaxRequestTarget target, final EventCategoryTO ignore) {",
                "+            public void onClick(final AjaxRequestTarget target, final EventCategory ignore) {",
                "                 if (StringUtils.isNotBlank(custom.getModelObject())) {",
                "-                    Pair<EventCategoryTO, AuditElements.Result> parsed = AuditLoggerName.parseEventCategory(custom.",
                "+                    Pair<EventCategory, AuditElements.Result> parsed = AuditLoggerName.parseEventCategory(custom.",
                "                             getModelObject());",
                "@@ -261,3 +261,3 @@ public abstract class EventCategoryPanel extends Panel {",
                "-    private List<String> filter(final List<EventCategoryTO> eventCategoryTOs, final EventCategoryType type) {",
                "+    private List<String> filter(final List<EventCategory> eventCategoryTOs, final EventCategoryType type) {",
                "         Set<String> res = new HashSet<>();",
                "@@ -276,3 +276,3 @@ public abstract class EventCategoryPanel extends Panel {",
                "     private List<String> filter(",
                "-            final List<EventCategoryTO> eventCategoryTOs, final EventCategoryType type, final String category) {",
                "+            final List<EventCategory> eventCategoryTOs, final EventCategoryType type, final String category) {",
                "@@ -350,3 +350,3 @@ public abstract class EventCategoryPanel extends Panel {",
                "-            final Map.Entry<EventCategoryTO, AuditElements.Result> categoryEvent = AuditLoggerName.parseEventCategory(",
                "+            final Map.Entry<EventCategory, AuditElements.Result> categoryEvent = AuditLoggerName.parseEventCategory(",
                "                     inspectSelectedEvent.getEvent());",
                "@@ -391,5 +391,5 @@ public abstract class EventCategoryPanel extends Panel {",
                "     private void setEvents() {",
                "-        final Iterator<EventCategoryTO> itor = eventCategoryTOs.iterator();",
                "+        final Iterator<EventCategory> itor = eventCategoryTOs.iterator();",
                "         while (itor.hasNext() && eventCategoryTO.getEvents().isEmpty()) {",
                "-            final EventCategoryTO eventCategory = itor.next();",
                "+            final EventCategory eventCategory = itor.next();",
                "             if (eventCategory.getType() == eventCategoryTO.getType()",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/events/EventSelectionPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/events/EventSelectionPanel.java",
                "index 33844d97e1..6e3d5cac67 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/events/EventSelectionPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/events/EventSelectionPanel.java",
                "@@ -26,3 +26,3 @@ import org.apache.commons.lang3.StringUtils;",
                " import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormChoiceComponentUpdatingBehavior;",
                "-import org.apache.syncope.common.lib.log.EventCategoryTO;",
                "+import org.apache.syncope.common.lib.log.EventCategory;",
                " import org.apache.syncope.common.lib.types.AuditElements;",
                "@@ -50,3 +50,3 @@ public abstract class EventSelectionPanel extends Panel {",
                "     public EventSelectionPanel(",
                "-            final String id, final EventCategoryTO eventCategoryTO, final IModel<List<String>> model) {",
                "+            final String id, final EventCategory eventCategoryTO, final IModel<List<String>> model) {",
                "         super(id);",
                "@@ -186,3 +186,3 @@ public abstract class EventSelectionPanel extends Panel {",
                "-    private List<String> getEvents(final EventCategoryTO eventCategoryTO) {",
                "+    private List<String> getEvents(final EventCategory eventCategoryTO) {",
                "         final List<String> res;",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/pages/Audit.java b/client/console/src/main/java/org/apache/syncope/client/console/pages/Audit.java",
                "index 09ab57e62e..272842c885 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/pages/Audit.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/pages/Audit.java",
                "@@ -30,3 +30,3 @@ import org.apache.syncope.client.console.events.SelectedEventsPanel;",
                " import org.apache.syncope.client.console.rest.LoggerRestClient;",
                "-import org.apache.syncope.common.lib.log.EventCategoryTO;",
                "+import org.apache.syncope.common.lib.log.EventCategory;",
                " import org.apache.syncope.common.lib.types.AuditElements;",
                "@@ -91,3 +91,3 @@ public class Audit extends BasePage {",
                "                     eventSelectionChanged.getToBeRemoved().forEach(toBeRemoved -> {",
                "-                        Pair<EventCategoryTO, AuditElements.Result> eventCategory =",
                "+                        Pair<EventCategory, AuditElements.Result> eventCategory =",
                "                                 AuditLoggerName.parseEventCategory(toBeRemoved);",
                "@@ -106,3 +106,3 @@ public class Audit extends BasePage {",
                "                     eventSelectionChanged.getToBeAdded().forEach(toBeAdded -> {",
                "-                        Pair<EventCategoryTO, AuditElements.Result> eventCategory =",
                "+                        Pair<EventCategory, AuditElements.Result> eventCategory =",
                "                                 AuditLoggerName.parseEventCategory(toBeAdded);",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/pages/LogViewer.java b/client/console/src/main/java/org/apache/syncope/client/console/pages/LogViewer.java",
                "index ed08b11ee3..da27cf0485 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/pages/LogViewer.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/pages/LogViewer.java",
                "@@ -27,3 +27,3 @@ import org.apache.syncope.client.console.rest.LoggerRestClient;",
                " import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;",
                "-import org.apache.syncope.common.lib.log.LogStatementTO;",
                "+import org.apache.syncope.common.lib.log.LogStatement;",
                " import org.apache.syncope.common.lib.types.StandardEntitlement;",
                "@@ -66,4 +66,4 @@ public class LogViewer extends WebPage {",
                "         final Model<Long> lastTimeInMillis = Model.of(0L);",
                "-        final IModel<List<LogStatementTO>> statementViewModel = new ListModel<>(new ArrayList<>());",
                "-        final ListView<LogStatementTO> statementView = new ListView<LogStatementTO>(\"statements\", statementViewModel) {",
                "+        final IModel<List<LogStatement>> statementViewModel = new ListModel<>(new ArrayList<>());",
                "+        final ListView<LogStatement> statementView = new ListView<LogStatement>(\"statements\", statementViewModel) {",
                "@@ -72,3 +72,3 @@ public class LogViewer extends WebPage {",
                "             @Override",
                "-            protected void populateItem(final ListItem<LogStatementTO> item) {",
                "+            protected void populateItem(final ListItem<LogStatement> item) {",
                "                 LogStatementPanel panel = new LogStatementPanel(\"statement\", item.getModelObject());",
                "@@ -90,3 +90,3 @@ public class LogViewer extends WebPage {",
                "-                List<LogStatementTO> recentLogStatements = appenders.getModelObject() == null",
                "+                List<LogStatement> recentLogStatements = appenders.getModelObject() == null",
                "                         ? new ArrayList<>()",
                "@@ -99,3 +99,3 @@ public class LogViewer extends WebPage {",
                "-                    List<LogStatementTO> newModelObject = SetUniqueList.<LogStatementTO>setUniqueList(",
                "+                    List<LogStatement> newModelObject = SetUniqueList.<LogStatement>setUniqueList(",
                "                             new ArrayList<>(MAX_STATEMENTS_PER_APPENDER));",
                "@@ -126,3 +126,3 @@ public class LogViewer extends WebPage {",
                "             protected void onUpdate(final AjaxRequestTarget target) {",
                "-                List<LogStatementTO> lastStatements = appenders.getModelObject() == null",
                "+                List<LogStatement> lastStatements = appenders.getModelObject() == null",
                "                         ? new ArrayList<>()",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/LogStatementPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/LogStatementPanel.java",
                "index abae16b497..fa1833851c 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/LogStatementPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/LogStatementPanel.java",
                "@@ -26,3 +26,3 @@ import org.apache.commons.lang3.StringUtils;",
                " import org.apache.commons.lang3.time.FastDateFormat;",
                "-import org.apache.syncope.common.lib.log.LogStatementTO;",
                "+import org.apache.syncope.common.lib.log.LogStatement;",
                " import org.apache.wicket.markup.ComponentTag;",
                "@@ -41,3 +41,3 @@ public class LogStatementPanel extends Panel {",
                "-    public LogStatementPanel(final String id, final LogStatementTO statement) {",
                "+    public LogStatementPanel(final String id, final LogStatement statement) {",
                "         super(id);",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java b/client/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java",
                "index a4c7825af9..212cede331 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java",
                "@@ -29,5 +29,5 @@ import java.util.stream.Collectors;",
                " import org.apache.commons.lang3.ObjectUtils;",
                "-import org.apache.syncope.common.lib.log.EventCategoryTO;",
                "+import org.apache.syncope.common.lib.log.EventCategory;",
                " import org.apache.syncope.common.lib.log.LogAppender;",
                "-import org.apache.syncope.common.lib.log.LogStatementTO;",
                "+import org.apache.syncope.common.lib.log.LogStatement;",
                " import org.apache.syncope.common.lib.log.LoggerTO;",
                "@@ -48,4 +48,4 @@ public class LoggerRestClient extends BaseRestClient {",
                "-    public List<LogStatementTO> getLastLogStatements(final String appender, final long lastStatementTime) {",
                "-        List<LogStatementTO> result = new ArrayList<>();",
                "+    public List<LogStatement> getLastLogStatements(final String appender, final long lastStatementTime) {",
                "+        List<LogStatement> result = new ArrayList<>();",
                "         getService(LoggerService.class).getLastLogStatements(appender).stream().",
                "@@ -102,3 +102,3 @@ public class LoggerRestClient extends BaseRestClient {",
                "-    public List<EventCategoryTO> listEvents() {",
                "+    public List<EventCategory> listEvents() {",
                "         try {",
                "@@ -106,3 +106,3 @@ public class LoggerRestClient extends BaseRestClient {",
                "         } catch (Exception e) {",
                "-            return Collections.<EventCategoryTO>emptyList();",
                "+            return Collections.<EventCategory>emptyList();",
                "         }",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/log/EventCategory.java b/common/lib/src/main/java/org/apache/syncope/common/lib/log/EventCategory.java",
                "new file mode 100644",
                "index 0000000000..cf7d7a5e2e",
                "--- /dev/null",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/log/EventCategory.java",
                "@@ -0,0 +1,92 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.log;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import javax.xml.bind.annotation.XmlElement;",
                "+import javax.xml.bind.annotation.XmlElementWrapper;",
                "+import javax.xml.bind.annotation.XmlRootElement;",
                "+import javax.xml.bind.annotation.XmlType;",
                "+import org.apache.syncope.common.lib.AbstractBaseBean;",
                "+import org.apache.syncope.common.lib.types.AuditElements;",
                "+",
                "+@XmlRootElement(name = \"eventCategory\")",
                "+@XmlType",
                "+public class EventCategory extends AbstractBaseBean {",
                "+",
                "+    private static final long serialVersionUID = -4340060002701633401L;",
                "+",
                "+    private AuditElements.EventCategoryType type;",
                "+",
                "+    private String category;",
                "+",
                "+    private String subcategory;",
                "+",
                "+    private final List<String> events = new ArrayList<>();",
                "+",
                "+    /**",
                "+     * Constructor for Type.REST event category.",
                "+     */",
                "+    public EventCategory() {",
                "+        this(AuditElements.EventCategoryType.LOGIC);",
                "+    }",
                "+",
                "+    /**",
                "+     * Constructor for the given Type event category.",
                "+     *",
                "+     * @param type event category type",
                "+     */",
                "+    public EventCategory(final AuditElements.EventCategoryType type) {",
                "+        super();",
                "+        this.type = type;",
                "+    }",
                "+",
                "+    public AuditElements.EventCategoryType getType() {",
                "+        return type;",
                "+    }",
                "+",
                "+    public void setType(final AuditElements.EventCategoryType type) {",
                "+        this.type = type == null ? AuditElements.EventCategoryType.CUSTOM : type;",
                "+    }",
                "+",
                "+    public String getCategory() {",
                "+        return category;",
                "+    }",
                "+",
                "+    public void setCategory(final String category) {",
                "+        this.category = category;",
                "+    }",
                "+",
                "+    public String getSubcategory() {",
                "+        return subcategory;",
                "+    }",
                "+",
                "+    public void setSubcategory(final String subcategory) {",
                "+        this.subcategory = subcategory;",
                "+    }",
                "+",
                "+    @XmlElementWrapper(name = \"events\")",
                "+    @XmlElement(name = \"event\")",
                "+    @JsonProperty(\"events\")",
                "+    public List<String> getEvents() {",
                "+        return events;",
                "+    }",
                "+}",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/log/LogStatement.java b/common/lib/src/main/java/org/apache/syncope/common/lib/log/LogStatement.java",
                "new file mode 100644",
                "index 0000000000..7c80a9d6ab",
                "--- /dev/null",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/log/LogStatement.java",
                "@@ -0,0 +1,111 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.common.lib.log;",
                "+",
                "+import javax.xml.bind.annotation.XmlRootElement;",
                "+import javax.xml.bind.annotation.XmlType;",
                "+import org.apache.syncope.common.lib.AbstractBaseBean;",
                "+import org.apache.syncope.common.lib.types.LoggerLevel;",
                "+",
                "+@XmlRootElement(name = \"logStatement\")",
                "+@XmlType",
                "+public class LogStatement extends AbstractBaseBean {",
                "+",
                "+    private static final long serialVersionUID = -2931205859104653385L;",
                "+",
                "+    private LoggerLevel level;",
                "+",
                "+    private String loggerName;",
                "+",
                "+    private String message;",
                "+",
                "+    private String stackTrace;",
                "+",
                "+    private long timeMillis;",
                "+",
                "+    private long threadId;",
                "+",
                "+    private String threadName;",
                "+",
                "+    private int threadPriority;",
                "+",
                "+    public LoggerLevel getLevel() {",
                "+        return level;",
                "+    }",
                "+",
                "+    public void setLevel(final LoggerLevel level) {",
                "+        this.level = level;",
                "+    }",
                "+",
                "+    public String getLoggerName() {",
                "+        return loggerName;",
                "+    }",
                "+",
                "+    public void setLoggerName(final String loggerName) {",
                "+        this.loggerName = loggerName;",
                "+    }",
                "+",
                "+    public String getMessage() {",
                "+        return message;",
                "+    }",
                "+",
                "+    public void setMessage(final String message) {",
                "+        this.message = message;",
                "+    }",
                "+",
                "+    public String getStackTrace() {",
                "+        return stackTrace;",
                "+    }",
                "+",
                "+    public void setStackTrace(final String stackTrace) {",
                "+        this.stackTrace = stackTrace;",
                "+    }",
                "+",
                "+    public long getTimeMillis() {",
                "+        return timeMillis;",
                "+    }",
                "+",
                "+    public void setTimeMillis(final long timeMillis) {",
                "+        this.timeMillis = timeMillis;",
                "+    }",
                "+",
                "+    public long getThreadId() {",
                "+        return threadId;",
                "+    }",
                "+",
                "+    public void setThreadId(final long threadId) {",
                "+        this.threadId = threadId;",
                "+    }",
                "+",
                "+    public String getThreadName() {",
                "+        return threadName;",
                "+    }",
                "+",
                "+    public void setThreadName(final String threadName) {",
                "+        this.threadName = threadName;",
                "+    }",
                "+",
                "+    public int getThreadPriority() {",
                "+        return threadPriority;",
                "+    }",
                "+",
                "+    public void setThreadPriority(final int threadPriority) {",
                "+        this.threadPriority = threadPriority;",
                "+    }",
                "+}",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/types/AuditLoggerName.java b/common/lib/src/main/java/org/apache/syncope/common/lib/types/AuditLoggerName.java",
                "index 31622ec52b..a8ad23190b 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/types/AuditLoggerName.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/types/AuditLoggerName.java",
                "@@ -27,3 +27,3 @@ import org.apache.commons.lang3.tuple.Pair;",
                " import org.apache.syncope.common.lib.AbstractBaseBean;",
                "-import org.apache.syncope.common.lib.log.EventCategoryTO;",
                "+import org.apache.syncope.common.lib.log.EventCategory;",
                " import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;",
                "@@ -106,3 +106,3 @@ public class AuditLoggerName extends AbstractBaseBean {",
                "-        final Map.Entry<EventCategoryTO, Result> eventCategory = parseEventCategory(",
                "+        Map.Entry<EventCategory, Result> eventCategory = parseEventCategory(",
                "                 loggerName.replaceAll(LoggerType.AUDIT.getPrefix() + \".\", \"\"));",
                "@@ -118,4 +118,4 @@ public class AuditLoggerName extends AbstractBaseBean {",
                "-    public static Pair<EventCategoryTO, Result> parseEventCategory(final String event) {",
                "-        EventCategoryTO eventCategoryTO = new EventCategoryTO();",
                "+    public static Pair<EventCategory, Result> parseEventCategory(final String event) {",
                "+        EventCategory eventCategoryTO = new EventCategory();",
                "@@ -183,3 +183,3 @@ public class AuditLoggerName extends AbstractBaseBean {",
                "-        final StringBuilder eventBuilder = new StringBuilder();",
                "+        StringBuilder eventBuilder = new StringBuilder();",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "index 6be90200a4..262325acaa 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "@@ -22,2 +22,4 @@ import io.swagger.v3.oas.annotations.Parameter;",
                " import io.swagger.v3.oas.annotations.enums.ParameterIn;",
                "+import io.swagger.v3.oas.annotations.media.ArraySchema;",
                "+import io.swagger.v3.oas.annotations.media.Content;",
                " import io.swagger.v3.oas.annotations.media.Schema;",
                "@@ -38,5 +40,5 @@ import javax.ws.rs.Produces;",
                " import javax.ws.rs.core.MediaType;",
                "-import org.apache.syncope.common.lib.log.EventCategoryTO;",
                "+import org.apache.syncope.common.lib.log.EventCategory;",
                " import org.apache.syncope.common.lib.log.LogAppender;",
                "-import org.apache.syncope.common.lib.log.LogStatementTO;",
                "+import org.apache.syncope.common.lib.log.LogStatement;",
                " import org.apache.syncope.common.lib.log.LoggerTO;",
                "@@ -60,2 +62,9 @@ public interface LoggerService extends JAXRSService {",
                "      */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"200\",",
                "+                    description = \"list of memory appenders available in the current logging configuration\",",
                "+                    content =",
                "+                    @Content(array =",
                "+                            @ArraySchema(schema =",
                "+                                    @Schema(implementation = LogAppender.class)))))",
                "     @GET",
                "@@ -71,2 +80,9 @@ public interface LoggerService extends JAXRSService {",
                "      */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"200\",",
                "+                    description = \"last log statements available in the provided memory appender\",",
                "+                    content =",
                "+                    @Content(array =",
                "+                            @ArraySchema(schema =",
                "+                                    @Schema(implementation = LogStatement.class)))))",
                "     @GET",
                "@@ -74,3 +90,3 @@ public interface LoggerService extends JAXRSService {",
                "     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    List<LogStatementTO> getLastLogStatements(@NotNull @PathParam(\"memoryAppender\") String memoryAppender);",
                "+    List<LogStatement> getLastLogStatements(@NotNull @PathParam(\"memoryAppender\") String memoryAppender);",
                "@@ -81,2 +97,9 @@ public interface LoggerService extends JAXRSService {",
                "      */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"200\",",
                "+                    description = \"list of all managed events in audit\",",
                "+                    content =",
                "+                    @Content(array =",
                "+                            @ArraySchema(schema =",
                "+                                    @Schema(implementation = EventCategory.class)))))",
                "     @GET",
                "@@ -84,3 +107,3 @@ public interface LoggerService extends JAXRSService {",
                "     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })",
                "-    List<EventCategoryTO> events();",
                "+    List<EventCategory> events();",
                "@@ -93,2 +116,8 @@ public interface LoggerService extends JAXRSService {",
                "      */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"200\",",
                "+                    description = \"logger with matching type and name\",",
                "+                    content =",
                "+                    @Content(schema =",
                "+                            @Schema(implementation = LoggerTO.class))))",
                "     @GET",
                "@@ -104,2 +133,9 @@ public interface LoggerService extends JAXRSService {",
                "      */",
                "+    @ApiResponses(",
                "+            @ApiResponse(responseCode = \"200\",",
                "+                    description = \"list of loggers with matching type\",",
                "+                    content =",
                "+                    @Content(array =",
                "+                            @ArraySchema(schema =",
                "+                                    @Schema(implementation = LoggerTO.class)))))",
                "     @GET",
                "@@ -137,3 +173,2 @@ public interface LoggerService extends JAXRSService {",
                "     void delete(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") String name);",
                "-",
                " }",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java",
                "index c576774775..b96a4a21a2 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java",
                "@@ -25,2 +25,3 @@ import java.util.HashSet;",
                " import java.util.List;",
                "+import java.util.Objects;",
                " import java.util.Set;",
                "@@ -33,5 +34,5 @@ import org.apache.syncope.common.lib.SyncopeClientException;",
                " import org.apache.syncope.common.lib.SyncopeConstants;",
                "-import org.apache.syncope.common.lib.log.EventCategoryTO;",
                "+import org.apache.syncope.common.lib.log.EventCategory;",
                " import org.apache.syncope.common.lib.log.LogAppender;",
                "-import org.apache.syncope.common.lib.log.LogStatementTO;",
                "+import org.apache.syncope.common.lib.log.LogStatement;",
                " import org.apache.syncope.common.lib.log.LoggerTO;",
                "@@ -50,2 +51,3 @@ import org.apache.syncope.core.logic.audit.AuditAppender;",
                " import org.apache.syncope.core.logic.init.LoggerLoader;",
                "+import org.apache.syncope.core.persistence.api.dao.DomainDAO;",
                " import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;",
                "@@ -85,11 +87,6 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "     @Autowired",
                "-    private EntityFactory entityFactory;",
                "+    private DomainDAO domainDAO;",
                "-    private List<LoggerTO> list(final LoggerType type) {",
                "-        return loggerDAO.findAll(type).stream().map(logger -> {",
                "-            LoggerTO loggerTO = new LoggerTO();",
                "-            BeanUtils.copyProperties(logger, loggerTO);",
                "-            return loggerTO;",
                "-        }).collect(Collectors.toList());",
                "-    }",
                "+    @Autowired",
                "+    private EntityFactory entityFactory;",
                "@@ -109,3 +106,3 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "     @Transactional(readOnly = true)",
                "-    public List<LogStatementTO> getLastLogStatements(final String memoryAppender) {",
                "+    public List<LogStatement> getLastLogStatements(final String memoryAppender) {",
                "         MemoryAppender appender = loggerLoader.getMemoryAppenders().get(memoryAppender);",
                "@@ -118,2 +115,10 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "+    private List<LoggerTO> list(final LoggerType type) {",
                "+        return loggerDAO.findAll(type).stream().map(logger -> {",
                "+            LoggerTO loggerTO = new LoggerTO();",
                "+            BeanUtils.copyProperties(logger, loggerTO);",
                "+            return loggerTO;",
                "+        }).collect(Collectors.toList());",
                "+    }",
                "+",
                "     @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_LIST + \"') and authentication.details.domain == \"",
                "@@ -122,3 +127,7 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "     public List<LoggerTO> listLogs() {",
                "-        return list(LoggerType.LOG);",
                "+        return list(LoggerType.LOG).stream().",
                "+                filter(logger -> !logger.getKey().startsWith(SyncopeConstants.MASTER_DOMAIN)).",
                "+                filter(logger -> domainDAO.findAll().stream().",
                "+                noneMatch(domain -> logger.getKey().startsWith(domain.getKey()))).",
                "+                collect(Collectors.toList());",
                "     }",
                "@@ -129,3 +138,2 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "         return list(LoggerType.AUDIT).stream().",
                "-                filter(logger -> logger != null).",
                "                 map(logger -> {",
                "@@ -139,3 +147,5 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "                     return result;",
                "-                }).collect(Collectors.toList());",
                "+                }).",
                "+                filter(Objects::nonNull).",
                "+                collect(Collectors.toList());",
                "     }",
                "@@ -153,8 +163,5 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "     public LoggerTO readLog(final String name) {",
                "-        for (final LoggerTO logger : listLogs()) {",
                "-            if (logger.getKey().equals(name)) {",
                "-                return logger;",
                "-            }",
                "-        }",
                "-        throw new NotFoundException(\"Logger \" + name);",
                "+        return listLogs().stream().",
                "+                filter(logger -> logger.getKey().equals(name)).findFirst().",
                "+                orElseThrow(() -> new NotFoundException(\"Logger \" + name));",
                "     }",
                "@@ -164,11 +171,10 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "     public LoggerTO readAudit(final String name) {",
                "-        for (final AuditLoggerName logger : listAudits()) {",
                "-            if (logger.toLoggerName().equals(name)) {",
                "-                final LoggerTO loggerTO = new LoggerTO();",
                "-                loggerTO.setKey(logger.toLoggerName());",
                "-                loggerTO.setLevel(LoggerLevel.DEBUG);",
                "-                return loggerTO;",
                "-            }",
                "-        }",
                "-        throw new NotFoundException(\"Logger \" + name);",
                "+        return listAudits().stream().",
                "+                filter(logger -> logger.toLoggerName().equals(name)).findFirst().",
                "+                map(logger -> {",
                "+                    LoggerTO loggerTO = new LoggerTO();",
                "+                    loggerTO.setKey(logger.toLoggerName());",
                "+                    loggerTO.setLevel(LoggerLevel.DEBUG);",
                "+                    return loggerTO;",
                "+                }).orElseThrow(() -> new NotFoundException(\"Audit \" + name));",
                "     }",
                "@@ -299,7 +305,7 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_LIST + \"') or hasRole('\"",
                "-            + StandardEntitlement.NOTIFICATION_LIST + \"')\")",
                "-    public List<EventCategoryTO> listAuditEvents() {",
                "+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_LIST + \"') \"",
                "+            + \"or hasRole('\" + StandardEntitlement.NOTIFICATION_LIST + \"')\")",
                "+    public List<EventCategory> listAuditEvents() {",
                "         // use set to avoid duplications or null elements",
                "-        Set<EventCategoryTO> events = new HashSet<>();",
                "+        Set<EventCategory> events = new HashSet<>();",
                "@@ -321,9 +327,9 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "                     if (clazz.isAnnotationPresent(Component.class) && AbstractLogic.class.isAssignableFrom(clazz)) {",
                "-                        EventCategoryTO eventCategoryTO = new EventCategoryTO();",
                "-                        eventCategoryTO.setCategory(clazz.getSimpleName());",
                "+                        EventCategory eventCategory = new EventCategory();",
                "+                        eventCategory.setCategory(clazz.getSimpleName());",
                "                         for (Method method : clazz.getDeclaredMethods()) {",
                "                             if (Modifier.isPublic(method.getModifiers())",
                "-                                    && !eventCategoryTO.getEvents().contains(method.getName())) {",
                "+                                    && !eventCategory.getEvents().contains(method.getName())) {",
                "-                                eventCategoryTO.getEvents().add(method.getName());",
                "+                                eventCategory.getEvents().add(method.getName());",
                "                             }",
                "@@ -331,3 +337,3 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "-                        events.add(eventCategoryTO);",
                "+                        events.add(eventCategory);",
                "                     }",
                "@@ -337,3 +343,3 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "             // SYNCOPE-608",
                "-            EventCategoryTO authenticationControllerEvents = new EventCategoryTO();",
                "+            EventCategory authenticationControllerEvents = new EventCategory();",
                "             authenticationControllerEvents.setCategory(AuditElements.AUTHENTICATION_CATEGORY);",
                "@@ -342,5 +348,5 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "-            events.add(new EventCategoryTO(EventCategoryType.PROPAGATION));",
                "-            events.add(new EventCategoryTO(EventCategoryType.PULL));",
                "-            events.add(new EventCategoryTO(EventCategoryType.PUSH));",
                "+            events.add(new EventCategory(EventCategoryType.PROPAGATION));",
                "+            events.add(new EventCategory(EventCategoryType.PULL));",
                "+            events.add(new EventCategory(EventCategoryType.PUSH));",
                "@@ -348,18 +354,18 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "                 resourceDAO.findAll().forEach(resource -> {",
                "-                    EventCategoryTO propEventCategoryTO = new EventCategoryTO(EventCategoryType.PROPAGATION);",
                "-                    EventCategoryTO pullEventCategoryTO = new EventCategoryTO(EventCategoryType.PULL);",
                "-                    EventCategoryTO pushEventCategoryTO = new EventCategoryTO(EventCategoryType.PUSH);",
                "+                    EventCategory propEventCategory = new EventCategory(EventCategoryType.PROPAGATION);",
                "+                    EventCategory pullEventCategory = new EventCategory(EventCategoryType.PULL);",
                "+                    EventCategory pushEventCategory = new EventCategory(EventCategoryType.PUSH);",
                "-                    propEventCategoryTO.setCategory(anyTypeKind.name().toLowerCase());",
                "-                    propEventCategoryTO.setSubcategory(resource.getKey());",
                "+                    propEventCategory.setCategory(anyTypeKind.name().toLowerCase());",
                "+                    propEventCategory.setSubcategory(resource.getKey());",
                "-                    pullEventCategoryTO.setCategory(anyTypeKind.name().toLowerCase());",
                "-                    pushEventCategoryTO.setCategory(anyTypeKind.name().toLowerCase());",
                "-                    pullEventCategoryTO.setSubcategory(resource.getKey());",
                "-                    pushEventCategoryTO.setSubcategory(resource.getKey());",
                "+                    pullEventCategory.setCategory(anyTypeKind.name().toLowerCase());",
                "+                    pushEventCategory.setCategory(anyTypeKind.name().toLowerCase());",
                "+                    pullEventCategory.setSubcategory(resource.getKey());",
                "+                    pushEventCategory.setSubcategory(resource.getKey());",
                "                     for (ResourceOperation resourceOperation : ResourceOperation.values()) {",
                "-                        propEventCategoryTO.getEvents().add(resourceOperation.name().toLowerCase());",
                "+                        propEventCategory.getEvents().add(resourceOperation.name().toLowerCase());",
                "                     }",
                "-                    pullEventCategoryTO.getEvents().add(ResourceOperation.DELETE.name().toLowerCase());",
                "+                    pullEventCategory.getEvents().add(ResourceOperation.DELETE.name().toLowerCase());",
                "@@ -367,4 +373,4 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "                         String event = UnmatchingRule.toEventName(unmatching);",
                "-                        pullEventCategoryTO.getEvents().add(event);",
                "-                        pushEventCategoryTO.getEvents().add(event);",
                "+                        pullEventCategory.getEvents().add(event);",
                "+                        pushEventCategory.getEvents().add(event);",
                "                     }",
                "@@ -373,9 +379,9 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "                         String event = MatchingRule.toEventName(matching);",
                "-                        pullEventCategoryTO.getEvents().add(event);",
                "-                        pushEventCategoryTO.getEvents().add(event);",
                "+                        pullEventCategory.getEvents().add(event);",
                "+                        pushEventCategory.getEvents().add(event);",
                "                     }",
                "-                    events.add(propEventCategoryTO);",
                "-                    events.add(pullEventCategoryTO);",
                "-                    events.add(pushEventCategoryTO);",
                "+                    events.add(propEventCategory);",
                "+                    events.add(pullEventCategory);",
                "+                    events.add(pushEventCategory);",
                "                 });",
                "@@ -383,9 +389,9 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "-            EventCategoryTO eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);",
                "-            eventCategoryTO.setCategory(PullJobDelegate.class.getSimpleName());",
                "-            events.add(eventCategoryTO);",
                "+            EventCategory eventCategory = new EventCategory(EventCategoryType.TASK);",
                "+            eventCategory.setCategory(PullJobDelegate.class.getSimpleName());",
                "+            events.add(eventCategory);",
                "-            eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);",
                "-            eventCategoryTO.setCategory(PushJobDelegate.class.getSimpleName());",
                "-            events.add(eventCategoryTO);",
                "+            eventCategory = new EventCategory(EventCategoryType.TASK);",
                "+            eventCategory.setCategory(PushJobDelegate.class.getSimpleName());",
                "+            events.add(eventCategory);",
                "         } catch (Exception e) {",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/MemoryAppender.java b/core/logic/src/main/java/org/apache/syncope/core/logic/MemoryAppender.java",
                "index d78585bd51..36f6aa6075 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/MemoryAppender.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/MemoryAppender.java",
                "@@ -32,3 +32,3 @@ import org.apache.logging.log4j.message.ReusableMessage;",
                " import org.apache.syncope.common.lib.collections.CircularFifoQueue;",
                "-import org.apache.syncope.common.lib.log.LogStatementTO;",
                "+import org.apache.syncope.common.lib.log.LogStatement;",
                " import org.apache.syncope.common.lib.types.LoggerLevel;",
                "@@ -39,3 +39,3 @@ public class MemoryAppender extends AbstractAppender {",
                "-    private final CircularFifoQueue<LogStatementTO> statements;",
                "+    private final CircularFifoQueue<LogStatement> statements;",
                "@@ -53,3 +53,3 @@ public class MemoryAppender extends AbstractAppender {",
                "     public void append(final LogEvent event) {",
                "-        LogStatementTO statement = new LogStatementTO();",
                "+        LogStatement statement = new LogStatement();",
                "@@ -76,3 +76,3 @@ public class MemoryAppender extends AbstractAppender {",
                "-    public Queue<LogStatementTO> getStatements() {",
                "+    public Queue<LogStatement> getStatements() {",
                "         return statements;",
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java b/core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java",
                "index 7a5e2dcdd4..c530e49e98 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java",
                "@@ -22,3 +22,2 @@ import java.sql.Connection;",
                " import java.sql.SQLException;",
                "-import java.util.ArrayList;",
                " import java.util.HashMap;",
                "@@ -26,2 +25,3 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.stream.Collectors;",
                " import javax.sql.DataSource;",
                "@@ -72,3 +72,3 @@ public class LoggerLoader implements SyncopeLoader {",
                "     public void load() {",
                "-        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);",
                "+        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);",
                "@@ -76,3 +76,3 @@ public class LoggerLoader implements SyncopeLoader {",
                "                 filter(entry -> (entry.getValue() instanceof MemoryAppender)).",
                "-                forEachOrdered(entry -> {",
                "+                forEach(entry -> {",
                "                     memoryAppenders.put(entry.getKey(), (MemoryAppender) entry.getValue());",
                "@@ -111,7 +111,6 @@ public class LoggerLoader implements SyncopeLoader {",
                "-            LoggerConfig logConf = new LoggerConfig(",
                "-                    AuditLoggerName.getAuditLoggerName(entry.getKey()), null, false);",
                "+            LoggerConfig logConf = new LoggerConfig(AuditLoggerName.getAuditLoggerName(entry.getKey()), null, false);",
                "             logConf.addAppender(appender, Level.DEBUG, null);",
                "             logConf.setLevel(Level.DEBUG);",
                "-            ctx.getConfiguration().addLogger(AuditLoggerName.getAuditLoggerName(entry.getKey()), logConf);",
                "+            ctx.getConfiguration().addLogger(logConf.getName(), logConf);",
                "@@ -149,4 +148,3 @@ public class LoggerLoader implements SyncopeLoader {",
                "     public List<AuditAppender> auditAppenders(final String domain) throws BeansException {",
                "-        List<AuditAppender> auditAppenders = new ArrayList<>();",
                "-        implementationLookup.getAuditAppenderClasses().stream().map(clazz -> {",
                "+        return implementationLookup.getAuditAppenderClasses().stream().map(clazz -> {",
                "             AuditAppender auditAppender;",
                "@@ -162,6 +160,3 @@ public class LoggerLoader implements SyncopeLoader {",
                "             return auditAppender;",
                "-        }).forEachOrdered(auditAppender -> {",
                "-            auditAppenders.add(auditAppender);",
                "-        });",
                "-        return auditAppenders;",
                "+        }).collect(Collectors.toList());",
                "     }",
                "@@ -213,3 +208,2 @@ public class LoggerLoader implements SyncopeLoader {",
                "         }",
                "-",
                "     }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java",
                "index 38fd8df50e..8b596154ae 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java",
                "@@ -119,3 +119,3 @@ public class XMLContentLoader extends AbstractContentDealer implements ContentLo",
                "             try {",
                "-                jdbcTemplate.execute(views.get(idx).toString().replaceAll(\"\\\\n\", \" \"));",
                "+                jdbcTemplate.execute(views.getProperty(idx).replaceAll(\"\\\\n\", \" \"));",
                "             } catch (DataAccessException e) {",
                "@@ -137,3 +137,3 @@ public class XMLContentLoader extends AbstractContentDealer implements ContentLo",
                "             try {",
                "-                jdbcTemplate.execute(indexes.get(idx).toString());",
                "+                jdbcTemplate.execute(indexes.getProperty(idx));",
                "             } catch (DataAccessException e) {",
                "@@ -145,3 +145,2 @@ public class XMLContentLoader extends AbstractContentDealer implements ContentLo",
                "     }",
                "-",
                " }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditManagerImpl.java",
                "index 3a2877f1f6..180685f58a 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditManagerImpl.java",
                "@@ -122,5 +122,6 @@ public class AuditManagerImpl implements AuditManager {",
                "             String serializedAuditEntry = POJOHelper.serialize(auditEntry);",
                "+",
                "             if (throwable == null) {",
                "                 logger.debug(serializedAuditEntry);",
                "-                eventLogger.debug(POJOHelper.serialize(auditEntry));",
                "+                eventLogger.debug(serializedAuditEntry);",
                "             } else {",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java",
                "index a347dac04c..a1434035cb 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java",
                "@@ -23,5 +23,5 @@ import java.util.List;",
                " import javax.ws.rs.BadRequestException;",
                "-import org.apache.syncope.common.lib.log.EventCategoryTO;",
                "+import org.apache.syncope.common.lib.log.EventCategory;",
                " import org.apache.syncope.common.lib.log.LogAppender;",
                "-import org.apache.syncope.common.lib.log.LogStatementTO;",
                "+import org.apache.syncope.common.lib.log.LogStatement;",
                " import org.apache.syncope.common.lib.log.LoggerTO;",
                "@@ -47,3 +47,3 @@ public class LoggerServiceImpl extends AbstractServiceImpl implements LoggerServ",
                "     @Override",
                "-    public List<LogStatementTO> getLastLogStatements(final String memoryAppender) {",
                "+    public List<LogStatement> getLastLogStatements(final String memoryAppender) {",
                "         return logic.getLastLogStatements(memoryAppender);",
                "@@ -121,3 +121,3 @@ public class LoggerServiceImpl extends AbstractServiceImpl implements LoggerServ",
                "     @Override",
                "-    public List<EventCategoryTO> events() {",
                "+    public List<EventCategory> events() {",
                "         return logic.listAuditEvents();"
            ],
            "changed_files": [
                "client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerResultManager.java",
                "client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerSyncopeOperations.java",
                "client/console/src/main/java/org/apache/syncope/client/console/events/EventCategoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/events/EventSelectionPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/pages/Audit.java",
                "client/console/src/main/java/org/apache/syncope/client/console/pages/LogViewer.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/LogStatementPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/log/EventCategory.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/log/LogStatement.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/types/AuditLoggerName.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/MemoryAppender.java",
                "core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditManagerImpl.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "04f0dcb87957323827bed5a792ac15ac96b4f788"
                ],
                [
                    "no-tag",
                    "a69fe31a721bea5f99d1355e2060f9668fe40392"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: report",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: name, console, statement",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "82bfe0cbc21340faceafee1982d41719ca2fad7e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536140631,
            "hunks": 2,
            "message": "Aligning the sample MyReportlet groovy class to the Reportlet interface",
            "diff": [
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyReportlet.groovy b/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyReportlet.groovy",
                "index 07447c21cb..2ffc16c73b 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyReportlet.groovy",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyReportlet.groovy",
                "@@ -22,2 +22,3 @@ import org.apache.syncope.core.persistence.api.dao.Reportlet",
                " import org.xml.sax.SAXException",
                "+import java.util.concurrent.atomic.AtomicReference",
                "@@ -27,3 +28,3 @@ class MyReportlet implements Reportlet {",
                "   @Override",
                "-  void extract(ContentHandler handler) throws SAXException {",
                "+  void extract(ContentHandler handler, AtomicReference<String> status) throws SAXException {",
                "   }"
            ],
            "changed_files": [
                "client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyReportlet.groovy"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8de644bdfa1b00cc705c19446737993c54cfdb92"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: report",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, report",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8c34ba1b9589b119dc3a045379e004777191a633",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537440995,
            "hunks": 1,
            "message": "[SYNCOPE-1373] aligned with other branches code improvements",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java",
                "index 9a11df16fc..a17e1cf927 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java",
                "@@ -171,8 +171,8 @@ public class CrontabPanel extends Panel {",
                "             cronExpression = new StringBuilder().",
                "-                    append(seconds.getField().getModelObject().trim()).append(\" \").",
                "-                    append(minutes.getField().getModelObject().trim()).append(\" \").",
                "-                    append(hours.getField().getModelObject().trim()).append(\" \").",
                "-                    append(daysOfMonth.getField().getModelObject().trim()).append(\" \").",
                "-                    append(months.getField().getModelObject().trim()).append(\" \").",
                "-                    append(daysOfWeek.getField().getModelObject().trim()).toString();",
                "+                    append(seconds.getModelObject().trim()).append(\" \").",
                "+                    append(minutes.getModelObject().trim()).append(\" \").",
                "+                    append(hours.getModelObject().trim()).append(\" \").",
                "+                    append(daysOfMonth.getModelObject().trim()).append(\" \").",
                "+                    append(months.getModelObject().trim()).append(\" \").",
                "+                    append(daysOfWeek.getModelObject().trim()).toString();",
                "         }"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1373": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1373",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "95220f06fd2d1fe96bb59092e7c9fb8d55809ac0",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534231214,
            "hunks": 69,
            "message": "[SYNCOPE-1220] Support Groovy implementation in the Netbeans plugin, This closes #82",
            "diff": [
                "diff --git a/ide/netbeans/pom.xml b/ide/netbeans/pom.xml",
                "index 41661ea8a6..00f9a11de0 100644",
                "--- a/ide/netbeans/pom.xml",
                "+++ b/ide/netbeans/pom.xml",
                "@@ -178,2 +178,3 @@ under the License.",
                "           <include>org/apache/syncope/**/*.png</include>",
                "+          <include>org/apache/syncope/**/*.groovy</include>",
                "         </includes>",
                "diff --git a/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/PluginConstants.java b/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/PluginConstants.java",
                "index ea2fd80b7d..c1359bf309 100644",
                "--- a/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/PluginConstants.java",
                "+++ b/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/PluginConstants.java",
                "@@ -29,2 +29,4 @@ public final class PluginConstants {",
                "+    public static final String GROOVY_SCRIPTS = \"Groovy Scripts\";",
                "+",
                "     public static final String[] MAIL_TEMPLATE_FORMATS = {",
                "diff --git a/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/ResourceConnector.java b/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/ResourceConnector.java",
                "index b7739fa9e7..51df938d05 100644",
                "--- a/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/ResourceConnector.java",
                "+++ b/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/ResourceConnector.java",
                "@@ -25,2 +25,3 @@ import org.apache.syncope.ide.netbeans.service.MailTemplateManagerService;",
                " import org.apache.syncope.ide.netbeans.service.ReportTemplateManagerService;",
                "+import org.apache.syncope.ide.netbeans.service.ImplementationManagerService;",
                " import org.apache.syncope.ide.netbeans.view.ResourceExplorerTopComponent;",
                "@@ -34,2 +35,4 @@ public final class ResourceConnector {",
                "+     private static ImplementationManagerService IMPLEMENTATION_MANAGER_SERVICE;",
                "+",
                "     private static final Object MAIL_TEMPLATE_MONITOR = new Object();",
                "@@ -38,2 +41,4 @@ public final class ResourceConnector {",
                "+    private static final Object IMPLEMENTATION_MONITOR = new Object();",
                "+",
                "     private ResourceConnector() {",
                "@@ -63,2 +68,13 @@ public final class ResourceConnector {",
                "+    public static ImplementationManagerService getImplementationManagerService() throws IOException {",
                "+        synchronized (IMPLEMENTATION_MONITOR) {",
                "+            ConnectionParams connParams = getConnectionParams();",
                "+            IMPLEMENTATION_MANAGER_SERVICE = new ImplementationManagerService(",
                "+                    connParams.getUrl(),",
                "+                    connParams.getUsername(),",
                "+                    connParams.getPassword());",
                "+        }",
                "+        return IMPLEMENTATION_MANAGER_SERVICE;",
                "+    }",
                "+    ",
                "     public static ConnectionParams getConnectionParams() {",
                "diff --git a/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/service/ImplementationManagerService.java b/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/service/ImplementationManagerService.java",
                "new file mode 100644",
                "index 0000000000..b2ccfb87af",
                "--- /dev/null",
                "+++ b/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/service/ImplementationManagerService.java",
                "@@ -0,0 +1,57 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.ide.netbeans.service;",
                "+",
                "+import java.util.List;",
                "+import javax.ws.rs.core.Response;",
                "+import org.apache.syncope.client.lib.SyncopeClient;",
                "+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;",
                "+import org.apache.syncope.common.lib.to.ImplementationTO;",
                "+import org.apache.syncope.common.lib.types.ImplementationType;",
                "+import org.apache.syncope.common.rest.api.service.ImplementationService;",
                "+",
                "+public class ImplementationManagerService {",
                "+",
                "+    private final ImplementationService service ;",
                "+",
                "+    public ImplementationManagerService(final String url, final String userName, final String password) {",
                "+        SyncopeClient syncopeClient = new SyncopeClientFactoryBean().setAddress(url).create(userName, password);",
                "+        service = syncopeClient.getService(ImplementationService.class);",
                "+    }",
                "+ ",
                "+    public List<ImplementationTO> list(final ImplementationType type) {",
                "+        return service.list(type);",
                "+    } ",
                "+",
                "+    public ImplementationTO read(final ImplementationType type , final String key) {",
                "+        return service.read(type, key);",
                "+    }",
                "+",
                "+    public boolean create(final ImplementationTO implementationTO) {",
                "+        return Response.Status.CREATED.getStatusCode() == service.create(implementationTO).getStatus();",
                "+    }",
                "+",
                "+    public boolean delete(final ImplementationType type , final String key) {",
                "+        return Response.Status.NO_CONTENT.getStatusCode() == service.delete(type, key).getStatus();",
                "+    }",
                "+",
                "+    public boolean update(final ImplementationTO implementationTO) {",
                "+       return Response.Status.NO_CONTENT.getStatusCode() == service.update(implementationTO).getStatus();",
                "+    }",
                "+}",
                "diff --git a/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/view/ResourceExplorerTopComponent.java b/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/view/ResourceExplorerTopComponent.java",
                "index b2a01984a3..1edbae09fc 100644",
                "--- a/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/view/ResourceExplorerTopComponent.java",
                "+++ b/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/view/ResourceExplorerTopComponent.java",
                "@@ -49,5 +49,7 @@ import org.apache.syncope.common.lib.to.MailTemplateTO;",
                " import org.apache.syncope.common.lib.to.ReportTemplateTO;",
                "-import org.apache.syncope.common.lib.types.ClientExceptionType;",
                "+import org.apache.syncope.common.lib.to.ImplementationTO;",
                " import org.apache.syncope.common.lib.types.MailTemplateFormat;",
                " import org.apache.syncope.common.lib.types.ReportTemplateFormat;",
                "+import org.apache.syncope.common.lib.types.ImplementationType;",
                "+import org.apache.syncope.common.lib.types.ImplementationEngine;",
                " import org.apache.syncope.ide.netbeans.PluginConstants;",
                "@@ -56,2 +58,3 @@ import org.apache.syncope.ide.netbeans.service.MailTemplateManagerService;",
                " import org.apache.syncope.ide.netbeans.service.ReportTemplateManagerService;",
                "+import org.apache.syncope.ide.netbeans.service.ImplementationManagerService;",
                " import org.netbeans.api.editor.EditorRegistry;",
                "@@ -108,2 +111,4 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "+    private final DefaultMutableTreeNode groovyScripts;",
                "+",
                "     private MailTemplateManagerService mailTemplateManagerService;",
                "@@ -112,2 +117,4 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "+    private ImplementationManagerService implementationManagerService;",
                "+",
                "     private Charset encodingPattern;",
                "@@ -125,2 +132,3 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "         reportXslts = new DefaultMutableTreeNode(PluginConstants.REPORT_XSLTS);",
                "+        groovyScripts = new DefaultMutableTreeNode(PluginConstants.GROOVY_SCRIPTS);",
                "         root.add(visibleRoot);",
                "@@ -177,2 +185,4 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                 String leafNodeName = (String) selectedNode.getUserObject();",
                "+                DefaultMutableTreeNode grandParentNode = (DefaultMutableTreeNode) parentNode.getParent();",
                "+                String grandParentNodeName = (String) grandParentNode.getUserObject();",
                "                 try {",
                "@@ -182,6 +192,13 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                         openReportEditor(leafNodeName);",
                "+                    } else if (PluginConstants.GROOVY_SCRIPTS.equals(grandParentNodeName)) {",
                "+                        openScriptEditor(leafNodeName , parentNodeName);",
                "                     }",
                "-                } catch (IOException e) {",
                "-                    Exceptions.printStackTrace(e);",
                "-                }",
                "+                }  catch (SyncopeClientException ex) {",
                "+                JOptionPane.showMessageDialog(null, ex.getMessage(), \"Syncope Error\", JOptionPane.ERROR_MESSAGE);",
                "+                } catch (IOException ex) {",
                "+                JOptionPane.showMessageDialog(null , ex.getMessage(), \"Error\" , JOptionPane.ERROR_MESSAGE);",
                "+                } catch (Exception ex) {",
                "+                LOG.info(\"The Exception is\" + ex);",
                "+                getRefreshServerDetails().setVisible(true);",
                "+                }               ",
                "             }",
                "@@ -190,2 +207,4 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                     getLastSelectedPathComponent();",
                "+            DefaultMutableTreeNode parent = (DefaultMutableTreeNode) selectedNode.getParent();",
                "+            String parentNodeName = (String) parent.getUserObject();",
                "             String selectedNodeName = (String) selectedNode.getUserObject();",
                "@@ -194,3 +213,4 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                     && !PluginConstants.MAIL_TEMPLATES.equals(selectedNodeName)",
                "-                    && !PluginConstants.REPORT_XSLTS.equals(selectedNodeName)) {",
                "+                    && !PluginConstants.REPORT_XSLTS.equals(selectedNodeName)",
                "+                    && !PluginConstants.GROOVY_SCRIPTS.equals(parentNodeName)) {",
                "                 leafRightClickAction(evt, selectedNode);",
                "@@ -200,2 +220,4 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                 folderRightClickAction(evt, reportXslts);",
                "+            } else if (PluginConstants.GROOVY_SCRIPTS.equals(parentNodeName)) {",
                "+                folderRightClickAction(evt, selectedNode);",
                "             } else if (PluginConstants.ROOT_NAME.equals(selectedNodeName)) {",
                "@@ -225,2 +247,3 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "             reportTemplateManagerService = ResourceConnector.getReportTemplateManagerService();",
                "+            implementationManagerService = ResourceConnector.getImplementationManagerService();",
                "             // init tree, because on close it is reset",
                "@@ -246,2 +269,3 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                     addReportXslts();",
                "+                    addGroovyScripts();",
                "                     progr.finish();",
                "@@ -249,35 +273,16 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "-            };",
                "+           }; ",
                "             REQUEST_PROCESSOR.post(tsk);",
                "-        } catch (Exception e) {",
                "+        } catch (IOException e) {",
                "             JOptionPane.showMessageDialog(null, e.getMessage(), \"Generic Error\", JOptionPane.ERROR_MESSAGE);",
                "             ServerDetailsView serverDetails = getRefreshServerDetails();",
                "+        } catch (Exception ex) {",
                "+            getRefreshServerDetails().setVisible(true);",
                "         }",
                "-        Runnable tsk = new Runnable() {",
                "-",
                "-            @Override",
                "-            public void run() {",
                "-                final ProgressHandle progr = ProgressHandle.createHandle(\"Loading Templates\", new Cancellable() {",
                "-",
                "-                    @Override",
                "-                    public boolean cancel() {",
                "-                        return true;",
                "-                    }",
                "-                });",
                "-",
                "-                progr.start();",
                "-                progr.progress(\"Loading Templates.\");",
                "-                addMailTemplates();",
                "-                addReportXslts();",
                "-                progr.finish();",
                "-            }",
                "-",
                "-        };",
                "-        RequestProcessor.getDefault().post(tsk);",
                "     }",
                "-",
                "     @Override",
                "     public void componentClosed() {",
                "-        // TODO add custom code on component closing",
                "+        // TODO add custom code on component",
                "+        resetTree();",
                "     }",
                "@@ -314,2 +319,22 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "+    private void addGroovyScripts() {",
                "+        for (ImplementationType type : ImplementationType.values()) {",
                "+            String implType = type.toString();",
                "+            DefaultMutableTreeNode tempNode = new DefaultMutableTreeNode(implType.toString());",
                "+           if (implType.equals(\"JWT_SSO_PROVIDER\") || implType.equals(\"AUDIT_APPENDER\")) {",
                "+                continue ;",
                "+           }",
                "+            List<ImplementationTO> scripts = implementationManagerService.list(type);",
                "+            for (ImplementationTO script : scripts) {",
                "+                 if (script.getEngine() == ImplementationEngine.GROOVY) {",
                "+                    tempNode.add(new DefaultMutableTreeNode(",
                "+                        script.getKey()));",
                "+                }",
                "+            }",
                "+            groovyScripts.add(tempNode);",
                "+        }",
                "+",
                "+        treeModel.reload();",
                "+    }",
                "+",
                "     private void rootRightClickAction(final MouseEvent evt) {",
                "@@ -365,3 +390,8 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "             public void actionPerformed(final ActionEvent e) {",
                "-                String name = JOptionPane.showInputDialog(\"Enter Name\");",
                "+            try {",
                "+                String name = null ;",
                "+                while (StringUtils.isBlank(name)) {",
                "+                     name = JOptionPane.showInputDialog(\"Enter Name\");",
                "+                }",
                "+                DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();",
                "                 boolean added = false;",
                "@@ -369,3 +399,4 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "-                    if (node.getUserObject().equals(PluginConstants.MAIL_TEMPLATES)) {",
                "+                    if (PluginConstants.MAIL_TEMPLATES.equals(node.getUserObject())) {",
                "+",
                "                         MailTemplateTO mailTemplate = new MailTemplateTO();",
                "@@ -379,7 +410,74 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                                 IOUtils.toInputStream(\"//Enter Content here\", encodingPattern));",
                "-                        try {",
                "                             openMailEditor(name);",
                "-                        } catch (IOException ex) {",
                "-                            Exceptions.printStackTrace(ex);",
                "-                        }",
                "+                    } else if (PluginConstants.GROOVY_SCRIPTS.equals(parent.getUserObject())) {",
                "+                            ImplementationTO newNode = new ImplementationTO();",
                "+                            ImplementationType type = getType((String) node.getUserObject());",
                "+                            newNode.setKey(name);",
                "+                            newNode.setEngine(ImplementationEngine.GROOVY);",
                "+                            newNode.setType(type);",
                "+                            String templateClassName = null;",
                "+                            switch (type) {",
                "+                                case REPORTLET:",
                "+                                    templateClassName = \"MyReportlet\";",
                "+                                    break;",
                "+",
                "+                                case ACCOUNT_RULE:",
                "+                                    templateClassName = \"MyAccountRule\";",
                "+                                    break;",
                "+",
                "+                                case PASSWORD_RULE:",
                "+                                    templateClassName = \"MyPasswordRule\";",
                "+                                    break;",
                "+",
                "+                                case ITEM_TRANSFORMER:",
                "+                                    templateClassName = \"MyItemTransformer\";",
                "+                                    break;",
                "+",
                "+                                case TASKJOB_DELEGATE:",
                "+                                    templateClassName = \"MySchedTaskJobDelegate\";",
                "+                                    break;",
                "+",
                "+                                case RECON_FILTER_BUILDER:",
                "+                                    templateClassName = \"MyReconFilterBuilder\";",
                "+                                    break;",
                "+",
                "+                                case LOGIC_ACTIONS:",
                "+                                    templateClassName = \"MyLogicActions\";",
                "+                                    break;",
                "+",
                "+                                case PROPAGATION_ACTIONS:",
                "+                                    templateClassName = \"MyPropagationActions\";",
                "+                                    break;",
                "+",
                "+                                case PULL_ACTIONS:",
                "+                                    templateClassName = \"MyPullActions\";",
                "+                                    break;",
                "+",
                "+                                case PUSH_ACTIONS:",
                "+                                    templateClassName = \"MyPushActions\";",
                "+                                    break;",
                "+",
                "+                                case PULL_CORRELATION_RULE:",
                "+                                    templateClassName = \"MyPullCorrelationRule\";",
                "+                                    break;",
                "+",
                "+                                case PUSH_CORRELATION_RULE:",
                "+                                    templateClassName = \"MyPushCorrelationRule\";",
                "+                                    break;",
                "+",
                "+                                case VALIDATOR:",
                "+                                    templateClassName = \"MyValidator\";",
                "+                                    break;",
                "+",
                "+                                case RECIPIENTS_PROVIDER:",
                "+                                    templateClassName = \"MyRecipientsProvider\";",
                "+                                    break;",
                "+",
                "+                                default:",
                "+                            }",
                "+                                    newNode.setBody(IOUtils.toString(",
                "+                                    getClass().getResourceAsStream(\"/org/apache/syncope/ide/netbeans/implementations/\"",
                "+                                    + templateClassName + \".groovy\")));",
                "+                                    added = implementationManagerService.create(newNode);",
                "+                                    openScriptEditor(name, (String) node.getUserObject());",
                "                     } else {",
                "@@ -397,7 +495,3 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                                 IOUtils.toInputStream(\"//Enter content here\", encodingPattern));",
                "-                        try {",
                "                             openReportEditor(name);",
                "-                        } catch (IOException ex) {",
                "-                            Exceptions.printStackTrace(ex);",
                "-                        }",
                "                     }",
                "@@ -412,3 +506,10 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                 }",
                "+            } catch (SyncopeClientException excp) {",
                "+                JOptionPane.showMessageDialog(null, excp.getMessage(), \"Syncope Error\", JOptionPane.ERROR_MESSAGE);",
                "+            } catch (IOException ex) {",
                "+                JOptionPane.showMessageDialog(null , ex.getMessage(), \"Error\", JOptionPane.ERROR_MESSAGE);",
                "+            } catch (Exception exc) {",
                "+                 getRefreshServerDetails().setVisible(true);",
                "             }",
                "+        }",
                "         });",
                "@@ -431,7 +532,12 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                     DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();",
                "-                    boolean deleted;",
                "-                    if (parent.getUserObject().equals(PluginConstants.MAIL_TEMPLATES)) {",
                "-                        deleted = mailTemplateManagerService.delete((String) node.getUserObject());",
                "+                    String nodeName = (String) node.getUserObject() ;",
                "+                    boolean deleted = false;",
                "+                try {",
                "+                    if (PluginConstants.MAIL_TEMPLATES.equals(parent.getUserObject())) {",
                "+                        deleted = mailTemplateManagerService.delete(nodeName);",
                "+                    } else if (PluginConstants.REPORT_XSLTS.equals(parent.getUserObject())) {",
                "+                        deleted = reportTemplateManagerService.delete(nodeName);",
                "                     } else {",
                "-                        deleted = reportTemplateManagerService.delete((String) node.getUserObject());",
                "+                        ImplementationType type = getType((String) parent.getUserObject());",
                "+                        deleted = implementationManagerService.delete(type, nodeName);",
                "                     }",
                "@@ -444,2 +550,8 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                     }",
                "+                    } catch (SyncopeClientException exc) {",
                "+                        JOptionPane.showMessageDialog(",
                "+                            null, exc.getMessage(), \"Syncope Error\", JOptionPane.ERROR_MESSAGE);",
                "+                    } catch (Exception ex) {",
                "+                        getRefreshServerDetails().setVisible(true);",
                "+                    }",
                "                 }",
                "@@ -462,3 +574,2 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "-            try {",
                "                 switch (format) {",
                "@@ -476,20 +587,2 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                 }",
                "-            } catch (SyncopeClientException e) {",
                "-                LOG.log(Level.SEVERE,",
                "-                        String.format(\"Unable to get [%s] mail template in [%s] format\", name, format), e);",
                "-                if (ClientExceptionType.NotFound.equals(e.getType())) {",
                "-                    LOG.log(Level.SEVERE, String.format(",
                "-                            \"Report template in [%s] format not found, create an empty one\", format));",
                "-                } else {",
                "-                    JOptionPane.showMessageDialog(",
                "-                            null, String.format(\"Unable to get [%s] report template in [%s] format\", name, format),",
                "-                            \"Connection Error\", JOptionPane.ERROR_MESSAGE);",
                "-                }",
                "-            } catch (Exception e) {",
                "-                LOG.log(Level.SEVERE,",
                "-                        String.format(\"Unable to get [%s] mail template in [%s] format\", name, format), e);",
                "-                JOptionPane.showMessageDialog(",
                "-                        null, String.format(\"Unable to get [%s] mail template in [%s] format\", name, format), \"Error\",",
                "-                        JOptionPane.ERROR_MESSAGE);",
                "-            }",
                "             String content = is == null ? StringUtils.EMPTY : IOUtils.toString(is, encodingPattern);",
                "@@ -523,2 +616,31 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "+    private void openScriptEditor(final String name , final String type) throws IOException {",
                "+            ImplementationTO node = implementationManagerService.read(getType(type), name);",
                "+            String groovyScriptsDirName = System.getProperty(\"java.io.tmpdir\") + \"/Groovy/\"",
                "+            + node.getType().toString() + \"/\";",
                "+            File groovyScriptsDir = new File(groovyScriptsDirName);",
                "+            if (!groovyScriptsDir.exists()) {",
                "+                groovyScriptsDir.mkdirs();",
                "+            }",
                "+            File file = new File(groovyScriptsDirName + name + \".groovy\");",
                "+            FileWriter fw = new FileWriter(file);",
                "+            fw.write(node.getBody());",
                "+            fw.flush();",
                "+            FileObject fob = FileUtil.toFileObject(file.getAbsoluteFile());",
                "+            DataObject data = DataObject.find(fob);",
                "+            data.getLookup().lookup(OpenCookie.class).open();",
                "+            data.addPropertyChangeListener(new PropertyChangeListener() {",
                "+",
                "+                @Override",
                "+                public void propertyChange(final PropertyChangeEvent evt) {",
                "+                    if (DataObject.PROP_MODIFIED.equals(evt.getPropertyName())) {",
                "+                        //save item remotely",
                "+                        LOG.info(String.format(\"Saving Groovy template [%s]\", name));",
                "+                       saveContent();",
                "+                    }",
                "+                }",
                "+            });",
                "+",
                "+    }",
                "+",
                "     private void openReportEditor(final String name) throws IOException {",
                "@@ -529,5 +651,3 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "             ReportTemplateFormat format = ReportTemplateFormat.valueOf(formatStr);",
                "-",
                "             InputStream is = null;",
                "-            try {",
                "                 switch (format) {",
                "@@ -546,20 +666,2 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                 }",
                "-            } catch (SyncopeClientException e) {",
                "-                LOG.log(Level.SEVERE, String.format(\"Unable to get [%s] report template in [%s] format\", name, format),",
                "-                        e);",
                "-                if (ClientExceptionType.NotFound.equals(e.getType())) {",
                "-                    LOG.log(Level.SEVERE, String.format(",
                "-                            \"Report template [%s] not found, create an empty one\", name));",
                "-                } else {",
                "-                    JOptionPane.showMessageDialog(",
                "-                            null, String.format(\"Unable to get [%s] report template in [%s] format\", name, format),",
                "-                            \"Connection Error\", JOptionPane.ERROR_MESSAGE);",
                "-                }",
                "-            } catch (Exception e) {",
                "-                LOG.log(Level.SEVERE, String.format(\"Unable to get [%s] report template in [%s] format\", name, format),",
                "-                        e);",
                "-                JOptionPane.showMessageDialog(",
                "-                        null, String.format(\"Unable to get [%s] report template in [%s] format\", name, format),",
                "-                        \"Generic Error\", JOptionPane.ERROR_MESSAGE);",
                "-            }",
                "             String content = is == null ? StringUtils.EMPTY : IOUtils.toString(is, encodingPattern);",
                "@@ -599,4 +701,5 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "             String path = (String) document.getProperty(Document.TitleProperty);",
                "-            String[] temp = path.split(File.separator);",
                "+            String[] temp = path.split(File.separator.replace(\"\\\\\", \"\\\\\\\\\"));",
                "             String name = temp[temp.length - 1];",
                "+            String fileName = temp[temp.length - 3];",
                "             String templateType = temp[temp.length - 2];",
                "@@ -606,4 +709,4 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "-            if (templateType.equals(\"Mail\")) {",
                "-                if (format.equals(\"txt\")) {",
                "+            if (\"Mail\".equals(templateType)) {",
                "+                if (\"txt\".equals(format)) {",
                "                     mailTemplateManagerService.setFormat(key,",
                "@@ -616,3 +719,3 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                 }",
                "-            } else if (format.equals(\"html\")) {",
                "+            } else if (\"html\".equals(format)) {",
                "                 reportTemplateManagerService.setFormat(key,",
                "@@ -620,3 +723,3 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                         IOUtils.toInputStream(content, encodingPattern));",
                "-            } else if (format.equals(\"fo\")) {",
                "+            } else if (\"fo\".equals(format)) {",
                "                 reportTemplateManagerService.setFormat(key,",
                "@@ -624,3 +727,3 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                         IOUtils.toInputStream(content, encodingPattern));",
                "-            } else {",
                "+            } else if (\"csv\".equals(format)) {",
                "                 reportTemplateManagerService.setFormat(key,",
                "@@ -628,2 +731,6 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "                         IOUtils.toInputStream(content, encodingPattern));",
                "+            } else if (\"Groovy\".equals(fileName)) {",
                "+                    ImplementationTO node = implementationManagerService.read(getType(templateType), key);",
                "+                    node.setBody(content);",
                "+                    implementationManagerService.update(node);",
                "             }",
                "@@ -631,3 +738,16 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "             Exceptions.printStackTrace(e);",
                "+        } catch (Exception e) {",
                "+            getRefreshServerDetails().setVisible(true);",
                "+        }",
                "+    }",
                "+",
                "+    private ImplementationType getType(final String typeName) {",
                "+        ImplementationType type = null ;",
                "+        for (ImplementationType implType : ImplementationType.values()) {",
                "+            if (implType.toString().equals(typeName)) {",
                "+                type = implType ;",
                "+            }",
                "+",
                "         }",
                "+        return (type);",
                "     }",
                "@@ -644,2 +764,3 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "         visibleRoot.add(reportXslts);",
                "+        visibleRoot.add(groovyScripts);",
                "         treeModel.reload();",
                "@@ -651,2 +772,3 @@ public final class ResourceExplorerTopComponent extends TopComponent {",
                "         reportXslts.removeAllChildren();",
                "+        groovyScripts.removeAllChildren();",
                "         treeModel.reload();",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyAccountRule.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyAccountRule.groovy",
                "new file mode 100644",
                "index 0000000000..978e76db1e",
                "--- /dev/null",
                "+++ b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyAccountRule.groovy",
                "@@ -0,0 +1,29 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+import groovy.transform.CompileStatic",
                "+import org.apache.syncope.core.persistence.api.dao.AccountRule",
                "+import org.apache.syncope.core.persistence.api.entity.user.User",
                "+",
                "+@CompileStatic",
                "+class MyAccountRule implements AccountRule {",
                "+  ",
                "+  void enforce(User user) {",
                "+  }",
                "+",
                "+}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyItemTransformer.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyItemTransformer.groovy",
                "new file mode 100644",
                "index 0000000000..fd4b5d41cc",
                "--- /dev/null",
                "+++ b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyItemTransformer.groovy",
                "@@ -0,0 +1,46 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+import groovy.transform.CompileStatic",
                "+import org.apache.syncope.common.lib.to.EntityTO",
                "+import org.apache.syncope.core.persistence.api.entity.Entity",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue",
                "+import org.apache.syncope.core.persistence.api.entity.resource.Item",
                "+import org.apache.syncope.core.provisioning.api.data.ItemTransformer",
                "+",
                "+@CompileStatic",
                "+class MyItemTransformer implements ItemTransformer {",
                "+\t",
                "+  @Override",
                "+  List<PlainAttrValue> beforePropagation(",
                "+    Item item,",
                "+    Entity entity,",
                "+    List<PlainAttrValue> values) {",
                "+",
                "+    return values;",
                "+  }",
                "+    ",
                "+  @Override",
                "+  List<Object> beforePull(",
                "+    Item item,",
                "+    EntityTO entityTO,",
                "+    List<Object> values) {",
                "+",
                "+    return values;",
                "+  }",
                "+}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyLogicActions.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyLogicActions.groovy",
                "new file mode 100644",
                "index 0000000000..df22aa231b",
                "--- /dev/null",
                "+++ b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyLogicActions.groovy",
                "@@ -0,0 +1,38 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+import groovy.transform.CompileStatic",
                "+import org.apache.syncope.common.lib.patch.AnyPatch",
                "+import org.apache.syncope.common.lib.patch.AttrPatch",
                "+import org.apache.syncope.common.lib.to.AnyTO",
                "+import org.apache.syncope.common.lib.to.AttrTO",
                "+import org.apache.syncope.core.provisioning.api.LogicActions",
                "+",
                "+@CompileStatic",
                "+class MyLogicActions implements LogicActions {",
                "+  ",
                "+  @Override",
                "+  <A extends AnyTO> A beforeCreate(final A input) {",
                "+    return input;",
                "+  }",
                "+",
                "+  @Override",
                "+  <M extends AnyPatch> M beforeUpdate(final M input) {",
                "+    return input;",
                "+  }",
                "+}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPasswordRule.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPasswordRule.groovy",
                "new file mode 100644",
                "index 0000000000..dab38baca8",
                "--- /dev/null",
                "+++ b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPasswordRule.groovy",
                "@@ -0,0 +1,28 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+import groovy.transform.CompileStatic",
                "+import org.apache.syncope.core.persistence.api.dao.PasswordRule",
                "+import org.apache.syncope.core.persistence.api.entity.user.User",
                "+",
                "+@CompileStatic",
                "+class MyPasswordRule implements PasswordRule {",
                "+  ",
                "+  void enforce(User user) {",
                "+  }",
                "+}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPropagationActions.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPropagationActions.groovy",
                "new file mode 100644",
                "index 0000000000..6a24777af2",
                "--- /dev/null",
                "+++ b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPropagationActions.groovy",
                "@@ -0,0 +1,43 @@",
                "+",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+import groovy.transform.CompileStatic",
                "+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask",
                "+import org.apache.syncope.core.persistence.api.entity.task.TaskExec",
                "+import org.apache.syncope.core.provisioning.api.propagation.PropagationActions",
                "+import org.identityconnectors.framework.common.objects.ConnectorObject",
                "+",
                "+@CompileStatic",
                "+class MyPropagationActions implements PropagationActions {",
                "+  ",
                "+  @Override",
                "+  void before(PropagationTask task, ConnectorObject beforeObj) {",
                "+    // do nothing",
                "+  }",
                "+",
                "+  @Override",
                "+  void onError(PropagationTask task, TaskExec execution, Exception error) {",
                "+    // do nothing",
                "+  }",
                "+",
                "+  @Override",
                "+  void after(PropagationTask task, TaskExec execution, ConnectorObject afterObj) {",
                "+    // do nothing",
                "+  }",
                "+}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullActions.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullActions.groovy",
                "new file mode 100644",
                "index 0000000000..893e7a97f8",
                "--- /dev/null",
                "+++ b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullActions.groovy",
                "@@ -0,0 +1,122 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+import groovy.transform.CompileStatic",
                "+import org.apache.syncope.common.lib.patch.AnyPatch",
                "+import org.apache.syncope.common.lib.to.EntityTO",
                "+import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask",
                "+import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException",
                "+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningActions",
                "+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile",
                "+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport",
                "+import org.apache.syncope.core.provisioning.api.pushpull.PullActions",
                "+import org.identityconnectors.framework.common.objects.SyncDelta",
                "+import org.quartz.JobExecutionException",
                "+",
                "+@CompileStatic",
                "+class MyPullActions implements PullActions {",
                "+  ",
                "+  @Override",
                "+  SyncDelta preprocess(SyncDelta delta) {",
                "+    return delta;",
                "+  }",
                "+  ",
                "+  @Override",
                "+  void beforeProvision(",
                "+    ProvisioningProfile profile,",
                "+    SyncDelta delta,",
                "+    EntityTO entity) throws JobExecutionException {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  void beforeAssign(",
                "+    ProvisioningProfile profile,",
                "+    SyncDelta delta,",
                "+    EntityTO entity) throws JobExecutionException {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  void beforeUnassign(",
                "+    ProvisioningProfile profile,",
                "+    SyncDelta delta,",
                "+    EntityTO entity) throws JobExecutionException {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  void beforeDeprovision(",
                "+    ProvisioningProfile profile,",
                "+    SyncDelta delta,",
                "+    EntityTO entity) throws JobExecutionException {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  void beforeUnlink(",
                "+    ProvisioningProfile profile,",
                "+    SyncDelta delta,",
                "+    EntityTO entity) throws JobExecutionException {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  void beforeLink(",
                "+    ProvisioningProfile profile,",
                "+    SyncDelta delta,",
                "+    EntityTO entity) throws JobExecutionException {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  <P extends AnyPatch> void beforeUpdate(",
                "+    ProvisioningProfile profile,",
                "+    SyncDelta delta,",
                "+    EntityTO entity,",
                "+    P anyPatch) throws JobExecutionException {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  void beforeDelete(",
                "+    ProvisioningProfile profile,",
                "+    SyncDelta delta,",
                "+    EntityTO entity) throws JobExecutionException {",
                "+",
                "+  }",
                "+",
                "+  @Override",
                "+  void after(",
                "+    ProvisioningProfile profile,",
                "+    SyncDelta delta,",
                "+    EntityTO entity,",
                "+    ProvisioningReport result) throws JobExecutionException {",
                "+",
                "+    // do nothing",
                "+  }",
                "+",
                "+  @Override",
                "+  IgnoreProvisionException onError(",
                "+    ProvisioningProfile profile,",
                "+    SyncDelta delta,",
                "+    Exception e) throws JobExecutionException {",
                "+",
                "+    return null;",
                "+  }",
                "+}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullCorrelationRule.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullCorrelationRule.groovy",
                "new file mode 100644",
                "index 0000000000..bb56ebe04e",
                "--- /dev/null",
                "+++ b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullCorrelationRule.groovy",
                "@@ -0,0 +1,32 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+import groovy.transform.CompileStatic",
                "+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule",
                "+import org.apache.syncope.core.persistence.api.dao.search.SearchCond",
                "+import org.apache.syncope.core.persistence.api.entity.resource.Provision",
                "+import org.identityconnectors.framework.common.objects.ConnectorObject",
                "+",
                "+@CompileStatic",
                "+class MyPullCorrelationRule implements PullCorrelationRule {",
                "+",
                "+  @Override",
                "+  SearchCond getSearchCond(ConnectorObject connObj, Provision provision) {",
                "+    ",
                "+  }",
                "+}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPushActions.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPushActions.groovy",
                "new file mode 100644",
                "index 0000000000..dad420636f",
                "--- /dev/null",
                "+++ b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPushActions.groovy",
                "@@ -0,0 +1,112 @@",
                "+",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+import groovy.transform.CompileStatic",
                "+import org.apache.syncope.core.persistence.api.entity.Entity",
                "+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile",
                "+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport",
                "+import org.apache.syncope.core.provisioning.api.pushpull.PushActions",
                "+import org.quartz.JobExecutionException",
                "+",
                "+@CompileStatic",
                "+class MyPushActions implements PushActions {",
                "+  ",
                "+  @Override ",
                "+  Entity beforeAssign(",
                "+    ProvisioningProfile profile,",
                "+    Entity entity) throws JobExecutionException {",
                "+",
                "+    return entity;",
                "+  }",
                "+",
                "+  @Override ",
                "+  Entity beforeProvision(",
                "+    ProvisioningProfile profile,",
                "+    Entity entity) throws JobExecutionException {",
                "+",
                "+    return entity;",
                "+  }",
                "+",
                "+  @Override ",
                "+  Entity beforeUpdate(",
                "+    ProvisioningProfile profile,",
                "+    Entity entity) throws JobExecutionException {",
                "+",
                "+    return entity;",
                "+  }",
                "+",
                "+  @Override ",
                "+  Entity beforeLink(",
                "+    ProvisioningProfile profile,",
                "+    Entity entity) throws JobExecutionException {",
                "+",
                "+    return entity;",
                "+  }",
                "+",
                "+  @Override ",
                "+  Entity beforeUnlink(",
                "+    ProvisioningProfile profile,",
                "+    Entity entity) throws JobExecutionException {",
                "+",
                "+    return entity;",
                "+  }",
                "+",
                "+  @Override ",
                "+  Entity beforeUnassign(",
                "+    ProvisioningProfile profile,",
                "+    Entity entity) throws JobExecutionException {",
                "+",
                "+    return entity;",
                "+  }",
                "+",
                "+  @Override ",
                "+  Entity beforeDeprovision(",
                "+    ProvisioningProfile profile,",
                "+    Entity entity) throws JobExecutionException {",
                "+",
                "+    return entity;",
                "+  }",
                "+",
                "+  @Override ",
                "+  Entity beforeDelete(",
                "+    ProvisioningProfile profile,",
                "+    Entity entity) throws JobExecutionException {",
                "+",
                "+    return entity;",
                "+  }",
                "+",
                "+  @Override ",
                "+  void onError(",
                "+    ProvisioningProfile profile,",
                "+    Entity entity,",
                "+    ProvisioningReport result,",
                "+    Exception error) throws JobExecutionException {",
                "+",
                "+    // do nothing",
                "+  }",
                "+",
                "+  @Override ",
                "+  void after(",
                "+    ProvisioningProfile profile,",
                "+    Entity entity,",
                "+    ProvisioningReport result) throws JobExecutionException {",
                "+",
                "+    // do nothing",
                "+  }",
                "+}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyRecipientsProvider.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyRecipientsProvider.groovy",
                "new file mode 100644",
                "index 0000000000..d118861800",
                "--- /dev/null",
                "+++ b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyRecipientsProvider.groovy",
                "@@ -0,0 +1,31 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+import groovy.transform.CompileStatic",
                "+import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator",
                "+import org.apache.syncope.core.persistence.api.entity.Notification",
                "+import org.apache.syncope.core.provisioning.api.notification.RecipientsProvider",
                "+",
                "+@CompileStatic",
                "+class MyRecipientsProvider implements RecipientsProvider {",
                "+  ",
                "+  @Override",
                "+  Set<String> provideRecipients(Notification notification) {",
                "+    return Collections.emptyList();",
                "+  }",
                "+}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReconFilterBuilder.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReconFilterBuilder.groovy",
                "new file mode 100644",
                "index 0000000000..b19b88e66a",
                "--- /dev/null",
                "+++ b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReconFilterBuilder.groovy",
                "@@ -0,0 +1,30 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+import groovy.transform.CompileStatic",
                "+import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder",
                "+import org.identityconnectors.framework.common.objects.filter.Filter",
                "+",
                "+@CompileStatic",
                "+class MyReconFilterBuilder implements ReconFilterBuilder {",
                "+  ",
                "+  @Override",
                "+  Filter build() {",
                "+    return PASS_THROUGH;",
                "+  }",
                "+}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReportlet.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReportlet.groovy",
                "new file mode 100644",
                "index 0000000000..07447c21cb",
                "--- /dev/null",
                "+++ b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReportlet.groovy",
                "@@ -0,0 +1,30 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+import groovy.transform.CompileStatic",
                "+import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator",
                "+import org.apache.syncope.core.persistence.api.dao.Reportlet",
                "+import org.xml.sax.SAXException",
                "+",
                "+@CompileStatic",
                "+class MyReportlet implements Reportlet {",
                "+  ",
                "+  @Override",
                "+  void extract(ContentHandler handler) throws SAXException {",
                "+  }",
                "+}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MySchedTaskJobDelegate.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MySchedTaskJobDelegate.groovy",
                "new file mode 100644",
                "index 0000000000..3356319b04",
                "--- /dev/null",
                "+++ b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MySchedTaskJobDelegate.groovy",
                "@@ -0,0 +1,31 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+import groovy.transform.CompileStatic",
                "+import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate",
                "+import org.quartz.JobExecutionContext",
                "+import org.quartz.JobExecutionException",
                "+",
                "+@CompileStatic",
                "+class MySchedTaskJobDelegate implements SchedTaskJobDelegate {",
                "+\t",
                "+  @Override",
                "+  void execute(String taskKey, boolean dryRun, JobExecutionContext context) throws JobExecutionException {",
                "+   ",
                "+  }",
                "+}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyValidator.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyValidator.groovy",
                "new file mode 100644",
                "index 0000000000..b0c3e37750",
                "--- /dev/null",
                "+++ b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyValidator.groovy",
                "@@ -0,0 +1,34 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+import groovy.transform.CompileStatic",
                "+import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue",
                "+import org.apache.syncope.core.persistence.api.entity.PlainSchema",
                "+",
                "+@CompileStatic",
                "+class MyValidator implements Validator {",
                "+  ",
                "+  @Override",
                "+  void setSchema(PlainSchema schema) {",
                "+  }",
                "+",
                "+  @Override",
                "+  void validate(String value, PlainAttrValue attrValue) {      ",
                "+  }",
                "+}"
            ],
            "changed_files": [
                "ide/netbeans/pom.xml",
                "ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/PluginConstants.java",
                "ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/ResourceConnector.java",
                "ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/service/ImplementationManagerService.java",
                "ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/view/ResourceExplorerTopComponent.java",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyAccountRule.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyItemTransformer.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyLogicActions.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPasswordRule.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPropagationActions.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullActions.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullCorrelationRule.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPushActions.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyRecipientsProvider.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReconFilterBuilder.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReportlet.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MySchedTaskJobDelegate.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyValidator.groovy"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1220": ""
            },
            "ghissue_refs": {
                "82": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3424a1b5fd271088e7c86377cb56427ffc6d4dd8"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: connector, report",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1220",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 82",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2bf259faf23e7adcc5a1f0dc733cf7864aa917f6",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1542127719,
            "hunks": 2,
            "message": "minor changes on admin console",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AbstractFieldPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AbstractFieldPanel.java",
                "index 115349b968..dc23cc354c 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AbstractFieldPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AbstractFieldPanel.java",
                "@@ -120,2 +120,6 @@ public abstract class AbstractFieldPanel<T> extends Panel {",
                "     public abstract AbstractFieldPanel<T> setModelObject(T object);",
                "+",
                "+    public String getName() {",
                "+        return this.name;",
                "+    }",
                " }",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java",
                "index 7455ffcdbe..7a315d6007 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java",
                "@@ -208,3 +208,3 @@ public abstract class AbstractAttrs<S extends SchemaTO> extends WizardStep imple",
                "         // SYNCOPE-1213",
                "-        // default implementation does not requier to pass page reference, override this method of want otherwise",
                "+        // default implementation does not require to pass page reference, override this method of want otherwise",
                "         return null;"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AbstractFieldPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f740deed8c1e8cb3ba642173679648da5db9610d"
                ],
                [
                    "no-tag",
                    "af4132bfe0c284fe8f6279bea9dcc3da3738119c"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: console, admin",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, html",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9ffea9ce6c7cef43af1d34d6ee7d59dfd58c0348",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536218985,
            "hunks": 11,
            "message": "Reporting supported dbms and jdbc driver versions",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index fc1b120890..cd97574746 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -520,5 +520,5 @@ under the License.",
                "-    <jdbc.postgresql.version>42.2.2</jdbc.postgresql.version>",
                "-    <jdbc.mysql.version>5.1.46</jdbc.mysql.version>",
                "-    <jdbc.mariadb.version>2.2.5</jdbc.mariadb.version>",
                "+    <jdbc.postgresql.version>42.2.5</jdbc.postgresql.version>",
                "+    <jdbc.mysql.version>5.1.47</jdbc.mysql.version>",
                "+    <jdbc.mariadb.version>2.2.6</jdbc.mariadb.version>",
                "     <jdbc.mssql.version>6.4.0.jre</jdbc.mssql.version>",
                "@@ -2413,2 +2413,6 @@ under the License.",
                "                 <snapshotOrRelease>${snapshotOrRelease}</snapshotOrRelease>",
                "+                <postgresqlJDBC>${jdbc.postgresql.version}</postgresqlJDBC>",
                "+                <mysqlJDBC>${jdbc.mysql.version}</mysqlJDBC>",
                "+                <mariadbJDBC>${jdbc.mariadb.version}</mariadbJDBC>",
                "+                <sqlserverJDBC>${jdbc.mssql.version}</sqlserverJDBC>",
                "                 <year>${year}</year>",
                "diff --git a/src/main/asciidoc/getting-started/obtain.adoc b/src/main/asciidoc/getting-started/obtain.adoc",
                "index d23e06b988..b0ea49d43e 100644",
                "--- a/src/main/asciidoc/getting-started/obtain.adoc",
                "+++ b/src/main/asciidoc/getting-started/obtain.adoc",
                "@@ -106,11 +106,12 @@ $ sudo apt-get install tomcat8",
                " +",
                "-. Install PostgreSQL",
                "-+",
                "-[source,bash]",
                "-$ sudo apt-get install libpostgresql-jdbc-java postgresql postgresql-client",
                "-+",
                "+. Install PostgreSQL packages for your actual https://www.postgresql.org/download/linux/debian/[Debian^] /",
                "+https://www.postgresql.org/download/linux/ubuntu/[Ubuntu^] distribution:",
                "+",
                "+* `postgresql-10`",
                "+* `postgresql-client-10`",
                "+",
                " . Use the PostgreSQL JDBC driver with Tomcat",
                " +",
                "-[source,bash]",
                "-$ sudo ln -s /usr/share/java/postgresql-jdbc4.jar /usr/share/tomcat8/lib/",
                "+[source,bash,subs=\"attributes\"]",
                "+$ cd /usr/share/tomcat8/lib/ && sudo wget http://central.maven.org/maven2/org/postgresql/postgresql/{postgresqlJDBC}/postgresql-{postgresqlJDBC}.jar",
                " +",
                "@@ -121,3 +122,3 @@ $ sudo ln -s /usr/share/java/postgresql-jdbc4.jar /usr/share/tomcat8/lib/",
                " JAVA_OPTS=\"-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server \\",
                "-  -Xms1536m -Xmx1536m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:+DisableExplicitGC \\",
                "+  -Xms1536m -Xmx1536m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:PermSize=256m -XX:+DisableExplicitGC \\",
                "   -Djava.security.egd=file:/dev/./urandom\"",
                "diff --git a/src/main/asciidoc/getting-started/systemRequirements.adoc b/src/main/asciidoc/getting-started/systemRequirements.adoc",
                "index ab8e5528ef..3e568cf25f 100644",
                "--- a/src/main/asciidoc/getting-started/systemRequirements.adoc",
                "+++ b/src/main/asciidoc/getting-started/systemRequirements.adoc",
                "@@ -47,6 +47,6 @@ Apache Syncope {docVersion} is verified with the recent versions of the followin",
                "- . http://www.postgresql.org/[PostgreSQL^]",
                "- . https://mariadb.org/[MariaDB^]",
                "- . http://www.mysql.com/[MySQL^]",
                "- . https://www.oracle.com/database/index.html[Oracle Database^]",
                "- . http://www.microsoft.com/en-us/server-cloud/products/sql-server/[MS SQL Server^]",
                "+ . http://www.postgresql.org/[PostgreSQL^] (>= 10.3, JDBC driver >= {postgresqlJDBC})",
                "+ . https://mariadb.org/[MariaDB^] (>= 10.3.7, JDBC driver >= {mariadbJDBC})",
                "+ . http://www.mysql.com/[MySQL^] (>= 5.7, JDBC driver >= {mysqlJDBC})",
                "+ . https://www.oracle.com/database/index.html[Oracle Database^] (>= 11g, JDBC driver >= ojdbc8 12.2.0.1)",
                "+ . http://www.microsoft.com/en-us/server-cloud/products/sql-server/[MS SQL Server^] (>= 2017, JDBC driver >= {sqlserverJDBC}8)",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbms.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbms.adoc",
                "index 34e87e676c..038870b7c1 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbms.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbms.adoc",
                "@@ -26,2 +26,5 @@ updated.",
                "+[NOTE]",
                "+Apache Syncope {docVersion} is verified with PostgreSQL server >= 10.3 and JDBC driver >= {postgresqlJDBC}.",
                "+",
                " In `provisioning.properties`:",
                "@@ -60,2 +63,5 @@ and save it under `core/src/main/resources/`.",
                "+[NOTE]",
                "+Apache Syncope {docVersion} is verified with MySQL server >= 5.7 and JDBC driver >= {mysqlJDBC}.",
                "+",
                " In `provisioning.properties`:",
                "@@ -97,2 +103,5 @@ This assumes that you have a MySQL instance running on localhost, listening on i",
                "+[NOTE]",
                "+Apache Syncope {docVersion} is verified with MariaDB server >= 10.3.7 and JDBC driver >= {mariadbJDBC}.",
                "+",
                " In `provisioning.properties`:",
                "@@ -129,2 +138,5 @@ This assumes that you have a MariaDB instance running on localhost, listening on",
                "+[NOTE]",
                "+Apache Syncope {docVersion} is verified with Oracle database >= 11g and JDBC driver >= ojdbc8 12.2.0.1.",
                "+",
                " In `provisioning.properties`:",
                "@@ -155,2 +167,5 @@ This assumes that you have an Oracle instance running on localhost, listening on",
                "+[NOTE]",
                "+Apache Syncope {docVersion} is verified with MS SQL server >= 2017 and JDBC driver >= {sqlserverJDBC}8.",
                "+",
                " In `provisioning.properties`:"
            ],
            "changed_files": [
                "pom.xml",
                "src/main/asciidoc/getting-started/obtain.adoc",
                "src/main/asciidoc/getting-started/systemRequirements.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbms.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "897f83bbdd7ce99dc74de5331a9671ad5a487fe5"
                ],
                [
                    "no-tag",
                    "718b19dd99879666c53b7ddce7f6e339d892d39b"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: report",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: admin, administration",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "979c28abf2587c73b57d20e4b892410fdd336f06",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540465022,
            "hunks": 11,
            "message": "Ensuring all XML input processing is safe - disable DTD and external entities",
            "diff": [
                "diff --git a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/migrate/MigrateConf.java b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/migrate/MigrateConf.java",
                "index 8b4884d138..ec8845794a 100644",
                "--- a/client/cli/src/main/java/org/apache/syncope/client/cli/commands/migrate/MigrateConf.java",
                "+++ b/client/cli/src/main/java/org/apache/syncope/client/cli/commands/migrate/MigrateConf.java",
                "@@ -55,3 +55,3 @@ public class MigrateConf {",
                "-    private static final XMLInputFactory INPUT_FACTORY = XMLInputFactory.newInstance();",
                "+    private static final XMLInputFactory XML_INPUT_FACTORY = XMLInputFactory.newInstance();",
                "@@ -61,2 +61,7 @@ public class MigrateConf {",
                "+    static {",
                "+        XML_INPUT_FACTORY.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);",
                "+        XML_INPUT_FACTORY.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);",
                "+    }",
                "+",
                "     private final MigrateResultManager migrateResultManager = new MigrateResultManager();",
                "@@ -146,3 +151,3 @@ public class MigrateConf {",
                "         InputStream inputStream = Files.newInputStream(Paths.get(src));",
                "-        XMLStreamReader reader = INPUT_FACTORY.createXMLStreamReader(inputStream);",
                "+        XMLStreamReader reader = XML_INPUT_FACTORY.createXMLStreamReader(inputStream);",
                "         reader.nextTag(); // root",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/widgets/reconciliation/ReconciliationReportParser.java b/client/console/src/main/java/org/apache/syncope/client/console/widgets/reconciliation/ReconciliationReportParser.java",
                "index b73b4bac11..812e5c1bee 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/widgets/reconciliation/ReconciliationReportParser.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/widgets/reconciliation/ReconciliationReportParser.java",
                "@@ -35,6 +35,11 @@ public final class ReconciliationReportParser {",
                "-    private static final XMLInputFactory INPUT_FACTORY = XMLInputFactory.newInstance();",
                "+    private static final XMLInputFactory XML_INPUT_FACTORY = XMLInputFactory.newInstance();",
                "+",
                "+    static {",
                "+        XML_INPUT_FACTORY.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);",
                "+        XML_INPUT_FACTORY.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);",
                "+    }",
                "     public static ReconciliationReport parse(final Date run, final InputStream in) throws XMLStreamException {",
                "-        XMLStreamReader streamReader = INPUT_FACTORY.createXMLStreamReader(in);",
                "+        XMLStreamReader streamReader = XML_INPUT_FACTORY.createXMLStreamReader(in);",
                "         streamReader.nextTag(); // root",
                "diff --git a/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiDeployUtils.java b/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiDeployUtils.java",
                "index 6022f85cbc..ef542d7d23 100644",
                "--- a/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiDeployUtils.java",
                "+++ b/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiDeployUtils.java",
                "@@ -43,2 +43,9 @@ public final class ActivitiDeployUtils {",
                "+    private static final XMLInputFactory XML_INPUT_FACTORY = XMLInputFactory.newInstance();",
                "+",
                "+    static {",
                "+        XML_INPUT_FACTORY.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);",
                "+        XML_INPUT_FACTORY.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);",
                "+    }",
                "+",
                "     public static Deployment deployDefinition(",
                "@@ -60,3 +67,3 @@ public final class ActivitiDeployUtils {",
                "-            xtr = XMLInputFactory.newInstance().createXMLStreamReader(isr);",
                "+            xtr = XML_INPUT_FACTORY.createXMLStreamReader(isr);",
                "             BpmnModel bpmnModel = new BpmnXMLConverter().convertToBpmnModel(xtr);",
                "diff --git a/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/spring/DomainProcessEngineFactoryBean.java b/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/spring/DomainProcessEngineFactoryBean.java",
                "index cf112bdc13..bc71ac0eb7 100644",
                "--- a/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/spring/DomainProcessEngineFactoryBean.java",
                "+++ b/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/spring/DomainProcessEngineFactoryBean.java",
                "@@ -75,2 +75,3 @@ public class DomainProcessEngineFactoryBean",
                "                     }",
                "+                    conf.setEnableSafeBpmnXml(true);",
                "diff --git a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDeployUtils.java b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDeployUtils.java",
                "index 080332e7a8..7013e313c3 100644",
                "--- a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDeployUtils.java",
                "+++ b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDeployUtils.java",
                "@@ -43,2 +43,9 @@ public final class FlowableDeployUtils {",
                "+    private static final XMLInputFactory XML_INPUT_FACTORY = XMLInputFactory.newInstance();",
                "+",
                "+    static {",
                "+        XML_INPUT_FACTORY.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);",
                "+        XML_INPUT_FACTORY.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);",
                "+    }",
                "+",
                "     public static Deployment deployDefinition(",
                "@@ -60,3 +67,3 @@ public final class FlowableDeployUtils {",
                "-            xtr = XMLInputFactory.newInstance().createXMLStreamReader(isr);",
                "+            xtr = XML_INPUT_FACTORY.createXMLStreamReader(isr);",
                "             BpmnModel bpmnModel = new BpmnXMLConverter().convertToBpmnModel(xtr);",
                "diff --git a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/spring/DomainProcessEngineFactoryBean.java b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/spring/DomainProcessEngineFactoryBean.java",
                "index 620d6b9718..4ab1dd878c 100644",
                "--- a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/spring/DomainProcessEngineFactoryBean.java",
                "+++ b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/spring/DomainProcessEngineFactoryBean.java",
                "@@ -75,2 +75,3 @@ public class DomainProcessEngineFactoryBean",
                "                     }",
                "+                    conf.setEnableSafeBpmnXml(true);"
            ],
            "changed_files": [
                "client/cli/src/main/java/org/apache/syncope/client/cli/commands/migrate/MigrateConf.java",
                "client/console/src/main/java/org/apache/syncope/client/console/widgets/reconciliation/ReconciliationReportParser.java",
                "core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiDeployUtils.java",
                "core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/spring/DomainProcessEngineFactoryBean.java",
                "core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableDeployUtils.java",
                "core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/spring/DomainProcessEngineFactoryBean.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a0f35f45f8ca5c98853ae8477fb2db81a84709a1"
                ],
                [
                    "no-tag",
                    "bdb6a180dcae6f1baaff16619cb906b7292da0d1"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: entities",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, report",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7ee462a16ec76af288162f8ba7ece4c388b4053e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537440292,
            "hunks": 1,
            "message": "[SYNCOPE-1373] bad commit apply, now console compilation has been fixed",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java",
                "index 24557f2fee..f5f84b9d30 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java",
                "@@ -171,8 +171,8 @@ public class CrontabPanel extends Panel {",
                "             cronExpression = new StringBuilder().",
                "-                    append(seconds.getField().getModelObject().trim()).append(\" \").",
                "-                    append(minutes.getField().getModelObject().trim()).append(\" \").",
                "-                    append(hours.getField().getModelObject().trim()).append(\" \").",
                "-                    append(daysOfMonth.getField().getModelObject().trim()).append(\" \").",
                "-                    append(months.getField().getModelObject().trim()).append(\" \").",
                "-                    append(daysOfWeek.getField().getModelObject().trim()).toString();",
                "+                    append(seconds.getModelObject().trim()).append(\" \").",
                "+                    append(minutes.getModelObject().trim()).append(\" \").",
                "+                    append(hours.getModelObject().trim()).append(\" \").",
                "+                    append(daysOfMonth.getModelObject().trim()).append(\" \").",
                "+                    append(months.getModelObject().trim()).append(\" \").",
                "+                    append(daysOfWeek.getModelObject().trim()).toString();",
                "         }"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1373": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: console",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1373",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "03b0c294a51ca61ed776aba4fae9195e699c302d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539270911,
            "hunks": 8,
            "message": "[SYNCOPE-1383] missing some fixes for class cast exception",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java",
                "index a993450727..7883558122 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java",
                "@@ -81,2 +81,3 @@ import org.identityconnectors.framework.common.objects.SearchResult;",
                " import org.identityconnectors.framework.common.objects.Uid;",
                "+import org.identityconnectors.framework.spi.SearchResultsHandler;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -408,3 +409,4 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {",
                "-        SearchResult searchResult = connFactory.getConnector(resource).search(objectClass, null, new ResultsHandler() {",
                "+        SearchResult searchResult = connFactory.getConnector(resource).search(",
                "+                objectClass, null, new SearchResultsHandler() {",
                "@@ -419,2 +421,7 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {",
                "             }",
                "+",
                "+            @Override",
                "+            public void handleResult(final SearchResult sr) {",
                "+                // do nothing",
                "+            }",
                "         }, size, pagedResultsCookie, orderBy, options);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "index aea4e2739b..d50ddb1300 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "@@ -331,3 +331,3 @@ public class ConnectorFacadeProxy implements Connector {",
                "-        search(objectClass, filter, new ResultsHandler() {",
                "+        search(objectClass, filter, new SearchResultsHandler() {",
                "@@ -343,2 +343,7 @@ public class ConnectorFacadeProxy implements Connector {",
                "             }",
                "+",
                "+            @Override",
                "+            public void handleResult(final SearchResult sr) {",
                "+                // do nothing",
                "+            }",
                "         }, actualOptions);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "index 28c31d1039..be656d4e74 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "@@ -71,2 +71,4 @@ import org.apache.syncope.core.provisioning.java.utils.MappingUtils;",
                " import org.apache.syncope.core.provisioning.api.data.ItemTransformer;",
                "+import org.identityconnectors.framework.common.objects.SearchResult;",
                "+import org.identityconnectors.framework.spi.SearchResultsHandler;",
                "@@ -135,3 +137,3 @@ public class PullUtils {",
                "                 new EqualsFilter(new Name(name)),",
                "-                new ResultsHandler() {",
                "+                new SearchResultsHandler() {",
                "@@ -141,2 +143,7 @@ public class PullUtils {",
                "             }",
                "+",
                "+            @Override",
                "+            public void handleResult(final SearchResult sr) {",
                "+                // do nothing",
                "+            }",
                "         }, MappingUtils.buildOperationOptions(MappingUtils.getPullItems(provision.getMapping().getItems()).iterator()));"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1383": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5f55de6b5f2765c204e85ea06bb60a27921b07c2"
                ],
                [
                    "no-tag",
                    "4492950f380214122eb03308c608ac7167f2be78"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: connector",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1383",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "27b9d0725b38b317ea369b24d425b77ceff40379",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1532447958,
            "hunks": 1,
            "message": "[SYNCOPE-1344] dura fix sed fix",
            "diff": [
                "diff --git a/docker/enduser/src/main/resources/startup.sh b/docker/enduser/src/main/resources/startup.sh",
                "index 6838fbd6c5..e7cd356ff6 100755",
                "--- a/docker/enduser/src/main/resources/startup.sh",
                "+++ b/docker/enduser/src/main/resources/startup.sh",
                "@@ -22,4 +22,3 @@ cd /etc/apache-syncope",
                " sed \"s/\\${CORE_SCHEME}/$CORE_SCHEME/\" enduser.properties.template | ",
                "-sed \"s/\\${DOMAIN}/$DOMAIN/\" enduser.properties.template | ",
                "-sed \"s/\\${CORE_HOST}/$CORE_HOST/\" | sed \"s/\\${CORE_PORT}/$CORE_PORT/\" > enduser.properties",
                "+sed \"s/\\${DOMAIN}/$DOMAIN/\" | sed \"s/\\${CORE_HOST}/$CORE_HOST/\" | sed \"s/\\${CORE_PORT}/$CORE_PORT/\" > enduser.properties"
            ],
            "changed_files": [
                "docker/enduser/src/main/resources/startup.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1344": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "65fe5336441000fb608783e6348da0acff52de64"
                ],
                [
                    "no-tag",
                    "44f0d57d1e6e6e12eaf2364b57b6e1a14072ee04"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1344",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "38dc035f17f3611a6ba53d194c949b0decaf3de7",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536146882,
            "hunks": 1,
            "message": "[SYNCOPE-1234] Fixing column name",
            "diff": [
                "diff --git a/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java b/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java",
                "index cf0a9240b9..1fe72b4efe 100644",
                "--- a/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java",
                "+++ b/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java",
                "@@ -380,3 +380,3 @@ public final class GenerateUpgradeSQL {",
                "                     String actionClassName = rs.getString(2);",
                "-                    OUT.write(\"INSERT INTO RealmAction(task_id,implementation_id) VALUES(\"",
                "+                    OUT.write(\"INSERT INTO RealmAction(realm_id,implementation_id) VALUES(\"",
                "                             + \"'\" + realmId + \"',\""
            ],
            "changed_files": [
                "core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1234": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8ebd80aab9b02eecf703d20f5c7b99b9412bbfc6"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: name",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1234",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "541117a520fbdf3365f0a693bebec89cefeb542d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1532334038,
            "hunks": 6,
            "message": "[SYNCOPE-1342] Missing onblur / onchage on domain and locale dropdown",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/pages/Login.java b/client/console/src/main/java/org/apache/syncope/client/console/pages/Login.java",
                "index 796408e4c5..488494d9dd 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/pages/Login.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/pages/Login.java",
                "@@ -33,2 +33,3 @@ import org.apache.syncope.common.lib.SyncopeConstants;",
                " import org.apache.wicket.ajax.AjaxRequestTarget;",
                "+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;",
                " import org.apache.wicket.ajax.markup.html.form.AjaxButton;",
                "@@ -39,3 +40,2 @@ import org.apache.wicket.markup.html.basic.Label;",
                " import org.apache.wicket.markup.html.form.ChoiceRenderer;",
                "-import org.apache.wicket.markup.html.form.DropDownChoice;",
                " import org.apache.wicket.markup.html.form.PasswordTextField;",
                "@@ -66,6 +66,2 @@ public class Login extends WebPage {",
                "-    private final DropDownChoice<Locale> languageSelect;",
                "-",
                "-    private final DropDownChoice<String> domainSelect;",
                "-",
                "     public Login(final PageParameters parameters) {",
                "@@ -96,6 +92,23 @@ public class Login extends WebPage {",
                "-        languageSelect = new LocaleDropDown(\"language\");",
                "+        LocaleDropDown languageSelect = new LocaleDropDown(\"language\");",
                "+        languageSelect.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_BLUR) {",
                "+",
                "+            private static final long serialVersionUID = -1107858522700306810L;",
                "+",
                "+            @Override",
                "+            protected void onUpdate(final AjaxRequestTarget target) {",
                "+                // nothing to do",
                "+            }",
                "+        }).add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {",
                "+",
                "+            private static final long serialVersionUID = -1107858522700306810L;",
                "+",
                "+            @Override",
                "+            protected void onUpdate(final AjaxRequestTarget target) {",
                "+                // nothing to do",
                "+            }",
                "+        });",
                "         form.add(languageSelect);",
                "-        domainSelect = new DomainDropDown(\"domain\");",
                "+        DomainDropDown domainSelect = new DomainDropDown(\"domain\");",
                "         if (SyncopeConsoleApplication.get().getDomains().size() == 1) {",
                "@@ -103,2 +116,19 @@ public class Login extends WebPage {",
                "         }",
                "+        domainSelect.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_BLUR) {",
                "+",
                "+            private static final long serialVersionUID = -1107858522700306810L;",
                "+",
                "+            @Override",
                "+            protected void onUpdate(final AjaxRequestTarget target) {",
                "+                // nothing to do",
                "+            }",
                "+        }).add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {",
                "+",
                "+            private static final long serialVersionUID = -1107858522700306810L;",
                "+",
                "+            @Override",
                "+            protected void onUpdate(final AjaxRequestTarget target) {",
                "+                // nothing to do",
                "+            }",
                "+        });",
                "         form.add(domainSelect);"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/pages/Login.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1342": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ae5a7ff2079610452bc64e7b05519cbfec87839b"
                ]
            ],
            "tags": [
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1342",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0e6ee15026ad24e5c68338507bcee756fe4b44b5",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536130729,
            "hunks": 16,
            "message": "[SYNCOPE-1220] Why hosting duplicates?",
            "diff": [
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullActions.groovy b/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullActions.groovy",
                "index 893e7a97f8..0f995f785a 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullActions.groovy",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullActions.groovy",
                "@@ -34,3 +34,3 @@ class MyPullActions implements PullActions {",
                "   @Override",
                "-  SyncDelta preprocess(SyncDelta delta) {",
                "+  SyncDelta preprocess(ProvisioningProfile profile, SyncDelta delta) {",
                "     return delta;",
                "diff --git a/ide/netbeans/pom.xml b/ide/netbeans/pom.xml",
                "index 00f9a11de0..09e3eea656 100644",
                "--- a/ide/netbeans/pom.xml",
                "+++ b/ide/netbeans/pom.xml",
                "@@ -178,5 +178,12 @@ under the License.",
                "           <include>org/apache/syncope/**/*.png</include>",
                "-          <include>org/apache/syncope/**/*.groovy</include>",
                "         </includes>",
                "       </resource>",
                "+      <resource>",
                "+        <directory>${basedir}/../../client/console/src/main/resources/org/apache/syncope/client/console/implementations/</directory>",
                "+        <filtering>false</filtering>",
                "+        <includes>",
                "+          <include>*.groovy</include>",
                "+        </includes>",
                "+        <targetPath>org/apache/syncope/ide/netbeans/implementations</targetPath>",
                "+      </resource>",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyAccountRule.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyAccountRule.groovy",
                "deleted file mode 100644",
                "index 978e76db1e..0000000000",
                "--- a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyAccountRule.groovy",
                "+++ /dev/null",
                "@@ -1,29 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-import groovy.transform.CompileStatic",
                "-import org.apache.syncope.core.persistence.api.dao.AccountRule",
                "-import org.apache.syncope.core.persistence.api.entity.user.User",
                "-",
                "-@CompileStatic",
                "-class MyAccountRule implements AccountRule {",
                "-  ",
                "-  void enforce(User user) {",
                "-  }",
                "-",
                "-}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyItemTransformer.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyItemTransformer.groovy",
                "deleted file mode 100644",
                "index fd4b5d41cc..0000000000",
                "--- a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyItemTransformer.groovy",
                "+++ /dev/null",
                "@@ -1,46 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-import groovy.transform.CompileStatic",
                "-import org.apache.syncope.common.lib.to.EntityTO",
                "-import org.apache.syncope.core.persistence.api.entity.Entity",
                "-import org.apache.syncope.core.persistence.api.entity.PlainAttrValue",
                "-import org.apache.syncope.core.persistence.api.entity.resource.Item",
                "-import org.apache.syncope.core.provisioning.api.data.ItemTransformer",
                "-",
                "-@CompileStatic",
                "-class MyItemTransformer implements ItemTransformer {",
                "-\t",
                "-  @Override",
                "-  List<PlainAttrValue> beforePropagation(",
                "-    Item item,",
                "-    Entity entity,",
                "-    List<PlainAttrValue> values) {",
                "-",
                "-    return values;",
                "-  }",
                "-    ",
                "-  @Override",
                "-  List<Object> beforePull(",
                "-    Item item,",
                "-    EntityTO entityTO,",
                "-    List<Object> values) {",
                "-",
                "-    return values;",
                "-  }",
                "-}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyLogicActions.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyLogicActions.groovy",
                "deleted file mode 100644",
                "index df22aa231b..0000000000",
                "--- a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyLogicActions.groovy",
                "+++ /dev/null",
                "@@ -1,38 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-import groovy.transform.CompileStatic",
                "-import org.apache.syncope.common.lib.patch.AnyPatch",
                "-import org.apache.syncope.common.lib.patch.AttrPatch",
                "-import org.apache.syncope.common.lib.to.AnyTO",
                "-import org.apache.syncope.common.lib.to.AttrTO",
                "-import org.apache.syncope.core.provisioning.api.LogicActions",
                "-",
                "-@CompileStatic",
                "-class MyLogicActions implements LogicActions {",
                "-  ",
                "-  @Override",
                "-  <A extends AnyTO> A beforeCreate(final A input) {",
                "-    return input;",
                "-  }",
                "-",
                "-  @Override",
                "-  <M extends AnyPatch> M beforeUpdate(final M input) {",
                "-    return input;",
                "-  }",
                "-}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPasswordRule.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPasswordRule.groovy",
                "deleted file mode 100644",
                "index dab38baca8..0000000000",
                "--- a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPasswordRule.groovy",
                "+++ /dev/null",
                "@@ -1,28 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-import groovy.transform.CompileStatic",
                "-import org.apache.syncope.core.persistence.api.dao.PasswordRule",
                "-import org.apache.syncope.core.persistence.api.entity.user.User",
                "-",
                "-@CompileStatic",
                "-class MyPasswordRule implements PasswordRule {",
                "-  ",
                "-  void enforce(User user) {",
                "-  }",
                "-}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPropagationActions.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPropagationActions.groovy",
                "deleted file mode 100644",
                "index 6a24777af2..0000000000",
                "--- a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPropagationActions.groovy",
                "+++ /dev/null",
                "@@ -1,43 +0,0 @@",
                "-",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-import groovy.transform.CompileStatic",
                "-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask",
                "-import org.apache.syncope.core.persistence.api.entity.task.TaskExec",
                "-import org.apache.syncope.core.provisioning.api.propagation.PropagationActions",
                "-import org.identityconnectors.framework.common.objects.ConnectorObject",
                "-",
                "-@CompileStatic",
                "-class MyPropagationActions implements PropagationActions {",
                "-  ",
                "-  @Override",
                "-  void before(PropagationTask task, ConnectorObject beforeObj) {",
                "-    // do nothing",
                "-  }",
                "-",
                "-  @Override",
                "-  void onError(PropagationTask task, TaskExec execution, Exception error) {",
                "-    // do nothing",
                "-  }",
                "-",
                "-  @Override",
                "-  void after(PropagationTask task, TaskExec execution, ConnectorObject afterObj) {",
                "-    // do nothing",
                "-  }",
                "-}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullActions.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullActions.groovy",
                "deleted file mode 100644",
                "index 893e7a97f8..0000000000",
                "--- a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullActions.groovy",
                "+++ /dev/null",
                "@@ -1,122 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-import groovy.transform.CompileStatic",
                "-import org.apache.syncope.common.lib.patch.AnyPatch",
                "-import org.apache.syncope.common.lib.to.EntityTO",
                "-import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask",
                "-import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException",
                "-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningActions",
                "-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile",
                "-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport",
                "-import org.apache.syncope.core.provisioning.api.pushpull.PullActions",
                "-import org.identityconnectors.framework.common.objects.SyncDelta",
                "-import org.quartz.JobExecutionException",
                "-",
                "-@CompileStatic",
                "-class MyPullActions implements PullActions {",
                "-  ",
                "-  @Override",
                "-  SyncDelta preprocess(SyncDelta delta) {",
                "-    return delta;",
                "-  }",
                "-  ",
                "-  @Override",
                "-  void beforeProvision(",
                "-    ProvisioningProfile profile,",
                "-    SyncDelta delta,",
                "-    EntityTO entity) throws JobExecutionException {",
                "-",
                "-  }",
                "-",
                "-  @Override",
                "-  void beforeAssign(",
                "-    ProvisioningProfile profile,",
                "-    SyncDelta delta,",
                "-    EntityTO entity) throws JobExecutionException {",
                "-",
                "-  }",
                "-",
                "-  @Override",
                "-  void beforeUnassign(",
                "-    ProvisioningProfile profile,",
                "-    SyncDelta delta,",
                "-    EntityTO entity) throws JobExecutionException {",
                "-",
                "-  }",
                "-",
                "-  @Override",
                "-  void beforeDeprovision(",
                "-    ProvisioningProfile profile,",
                "-    SyncDelta delta,",
                "-    EntityTO entity) throws JobExecutionException {",
                "-",
                "-  }",
                "-",
                "-  @Override",
                "-  void beforeUnlink(",
                "-    ProvisioningProfile profile,",
                "-    SyncDelta delta,",
                "-    EntityTO entity) throws JobExecutionException {",
                "-",
                "-  }",
                "-",
                "-  @Override",
                "-  void beforeLink(",
                "-    ProvisioningProfile profile,",
                "-    SyncDelta delta,",
                "-    EntityTO entity) throws JobExecutionException {",
                "-",
                "-  }",
                "-",
                "-  @Override",
                "-  <P extends AnyPatch> void beforeUpdate(",
                "-    ProvisioningProfile profile,",
                "-    SyncDelta delta,",
                "-    EntityTO entity,",
                "-    P anyPatch) throws JobExecutionException {",
                "-",
                "-  }",
                "-",
                "-  @Override",
                "-  void beforeDelete(",
                "-    ProvisioningProfile profile,",
                "-    SyncDelta delta,",
                "-    EntityTO entity) throws JobExecutionException {",
                "-",
                "-  }",
                "-",
                "-  @Override",
                "-  void after(",
                "-    ProvisioningProfile profile,",
                "-    SyncDelta delta,",
                "-    EntityTO entity,",
                "-    ProvisioningReport result) throws JobExecutionException {",
                "-",
                "-    // do nothing",
                "-  }",
                "-",
                "-  @Override",
                "-  IgnoreProvisionException onError(",
                "-    ProvisioningProfile profile,",
                "-    SyncDelta delta,",
                "-    Exception e) throws JobExecutionException {",
                "-",
                "-    return null;",
                "-  }",
                "-}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullCorrelationRule.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullCorrelationRule.groovy",
                "deleted file mode 100644",
                "index bb56ebe04e..0000000000",
                "--- a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullCorrelationRule.groovy",
                "+++ /dev/null",
                "@@ -1,32 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-import groovy.transform.CompileStatic",
                "-import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule",
                "-import org.apache.syncope.core.persistence.api.dao.search.SearchCond",
                "-import org.apache.syncope.core.persistence.api.entity.resource.Provision",
                "-import org.identityconnectors.framework.common.objects.ConnectorObject",
                "-",
                "-@CompileStatic",
                "-class MyPullCorrelationRule implements PullCorrelationRule {",
                "-",
                "-  @Override",
                "-  SearchCond getSearchCond(ConnectorObject connObj, Provision provision) {",
                "-    ",
                "-  }",
                "-}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPushActions.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPushActions.groovy",
                "deleted file mode 100644",
                "index dad420636f..0000000000",
                "--- a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPushActions.groovy",
                "+++ /dev/null",
                "@@ -1,112 +0,0 @@",
                "-",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-import groovy.transform.CompileStatic",
                "-import org.apache.syncope.core.persistence.api.entity.Entity",
                "-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile",
                "-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport",
                "-import org.apache.syncope.core.provisioning.api.pushpull.PushActions",
                "-import org.quartz.JobExecutionException",
                "-",
                "-@CompileStatic",
                "-class MyPushActions implements PushActions {",
                "-  ",
                "-  @Override ",
                "-  Entity beforeAssign(",
                "-    ProvisioningProfile profile,",
                "-    Entity entity) throws JobExecutionException {",
                "-",
                "-    return entity;",
                "-  }",
                "-",
                "-  @Override ",
                "-  Entity beforeProvision(",
                "-    ProvisioningProfile profile,",
                "-    Entity entity) throws JobExecutionException {",
                "-",
                "-    return entity;",
                "-  }",
                "-",
                "-  @Override ",
                "-  Entity beforeUpdate(",
                "-    ProvisioningProfile profile,",
                "-    Entity entity) throws JobExecutionException {",
                "-",
                "-    return entity;",
                "-  }",
                "-",
                "-  @Override ",
                "-  Entity beforeLink(",
                "-    ProvisioningProfile profile,",
                "-    Entity entity) throws JobExecutionException {",
                "-",
                "-    return entity;",
                "-  }",
                "-",
                "-  @Override ",
                "-  Entity beforeUnlink(",
                "-    ProvisioningProfile profile,",
                "-    Entity entity) throws JobExecutionException {",
                "-",
                "-    return entity;",
                "-  }",
                "-",
                "-  @Override ",
                "-  Entity beforeUnassign(",
                "-    ProvisioningProfile profile,",
                "-    Entity entity) throws JobExecutionException {",
                "-",
                "-    return entity;",
                "-  }",
                "-",
                "-  @Override ",
                "-  Entity beforeDeprovision(",
                "-    ProvisioningProfile profile,",
                "-    Entity entity) throws JobExecutionException {",
                "-",
                "-    return entity;",
                "-  }",
                "-",
                "-  @Override ",
                "-  Entity beforeDelete(",
                "-    ProvisioningProfile profile,",
                "-    Entity entity) throws JobExecutionException {",
                "-",
                "-    return entity;",
                "-  }",
                "-",
                "-  @Override ",
                "-  void onError(",
                "-    ProvisioningProfile profile,",
                "-    Entity entity,",
                "-    ProvisioningReport result,",
                "-    Exception error) throws JobExecutionException {",
                "-",
                "-    // do nothing",
                "-  }",
                "-",
                "-  @Override ",
                "-  void after(",
                "-    ProvisioningProfile profile,",
                "-    Entity entity,",
                "-    ProvisioningReport result) throws JobExecutionException {",
                "-",
                "-    // do nothing",
                "-  }",
                "-}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyRecipientsProvider.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyRecipientsProvider.groovy",
                "deleted file mode 100644",
                "index d118861800..0000000000",
                "--- a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyRecipientsProvider.groovy",
                "+++ /dev/null",
                "@@ -1,31 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-import groovy.transform.CompileStatic",
                "-import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator",
                "-import org.apache.syncope.core.persistence.api.entity.Notification",
                "-import org.apache.syncope.core.provisioning.api.notification.RecipientsProvider",
                "-",
                "-@CompileStatic",
                "-class MyRecipientsProvider implements RecipientsProvider {",
                "-  ",
                "-  @Override",
                "-  Set<String> provideRecipients(Notification notification) {",
                "-    return Collections.emptyList();",
                "-  }",
                "-}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReconFilterBuilder.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReconFilterBuilder.groovy",
                "deleted file mode 100644",
                "index b19b88e66a..0000000000",
                "--- a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReconFilterBuilder.groovy",
                "+++ /dev/null",
                "@@ -1,30 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-import groovy.transform.CompileStatic",
                "-import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder",
                "-import org.identityconnectors.framework.common.objects.filter.Filter",
                "-",
                "-@CompileStatic",
                "-class MyReconFilterBuilder implements ReconFilterBuilder {",
                "-  ",
                "-  @Override",
                "-  Filter build() {",
                "-    return PASS_THROUGH;",
                "-  }",
                "-}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReportlet.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReportlet.groovy",
                "deleted file mode 100644",
                "index 07447c21cb..0000000000",
                "--- a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReportlet.groovy",
                "+++ /dev/null",
                "@@ -1,30 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-import groovy.transform.CompileStatic",
                "-import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator",
                "-import org.apache.syncope.core.persistence.api.dao.Reportlet",
                "-import org.xml.sax.SAXException",
                "-",
                "-@CompileStatic",
                "-class MyReportlet implements Reportlet {",
                "-  ",
                "-  @Override",
                "-  void extract(ContentHandler handler) throws SAXException {",
                "-  }",
                "-}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MySchedTaskJobDelegate.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MySchedTaskJobDelegate.groovy",
                "deleted file mode 100644",
                "index 3356319b04..0000000000",
                "--- a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MySchedTaskJobDelegate.groovy",
                "+++ /dev/null",
                "@@ -1,31 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-import groovy.transform.CompileStatic",
                "-import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate",
                "-import org.quartz.JobExecutionContext",
                "-import org.quartz.JobExecutionException",
                "-",
                "-@CompileStatic",
                "-class MySchedTaskJobDelegate implements SchedTaskJobDelegate {",
                "-\t",
                "-  @Override",
                "-  void execute(String taskKey, boolean dryRun, JobExecutionContext context) throws JobExecutionException {",
                "-   ",
                "-  }",
                "-}",
                "diff --git a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyValidator.groovy b/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyValidator.groovy",
                "deleted file mode 100644",
                "index b0c3e37750..0000000000",
                "--- a/ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyValidator.groovy",
                "+++ /dev/null",
                "@@ -1,34 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-import groovy.transform.CompileStatic",
                "-import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator",
                "-import org.apache.syncope.core.persistence.api.entity.PlainAttrValue",
                "-import org.apache.syncope.core.persistence.api.entity.PlainSchema",
                "-",
                "-@CompileStatic",
                "-class MyValidator implements Validator {",
                "-  ",
                "-  @Override",
                "-  void setSchema(PlainSchema schema) {",
                "-  }",
                "-",
                "-  @Override",
                "-  void validate(String value, PlainAttrValue attrValue) {      ",
                "-  }",
                "-}"
            ],
            "changed_files": [
                "client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullActions.groovy",
                "ide/netbeans/pom.xml",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyAccountRule.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyItemTransformer.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyLogicActions.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPasswordRule.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPropagationActions.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullActions.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPullCorrelationRule.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyPushActions.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyRecipientsProvider.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReconFilterBuilder.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyReportlet.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MySchedTaskJobDelegate.groovy",
                "ide/netbeans/src/main/resources/org/apache/syncope/ide/netbeans/implementations/MyValidator.groovy"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1220": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4546c3a54d9678002eac30dced8f916f3317a211"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, report",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1220",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1e9a5387b7080d7f47615fcaac3d3fe8694bc8fc",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537440005,
            "hunks": 2,
            "message": "[SYNCOPE-1373] cron expression is preserved while updating a scheduled task",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java",
                "index 34b005ca13..9a11df16fc 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java",
                "@@ -163,16 +163,16 @@ public class CrontabPanel extends Panel {",
                "-        if (seconds != null && seconds.getField().getInput() != null",
                "-                && minutes != null && minutes.getField().getInput() != null",
                "-                && hours != null && hours.getField().getInput() != null",
                "-                && daysOfMonth != null && daysOfMonth.getField().getInput() != null",
                "-                && months != null && months.getField().getInput() != null",
                "-                && daysOfWeek != null && daysOfWeek.getField().getInput() != null) {",
                "+        if (seconds != null && seconds.getModelObject() != null",
                "+                && minutes != null && minutes.getModelObject() != null",
                "+                && hours != null && hours.getModelObject() != null",
                "+                && daysOfMonth != null && daysOfMonth.getModelObject() != null",
                "+                && months != null && months.getModelObject() != null",
                "+                && daysOfWeek != null && daysOfWeek.getModelObject() != null) {",
                "             cronExpression = new StringBuilder().",
                "-                    append(seconds.getField().getInput().trim()).append(\" \").",
                "-                    append(minutes.getField().getInput().trim()).append(\" \").",
                "-                    append(hours.getField().getInput().trim()).append(\" \").",
                "-                    append(daysOfMonth.getField().getInput().trim()).append(\" \").",
                "-                    append(months.getField().getInput().trim()).append(\" \").",
                "-                    append(daysOfWeek.getField().getInput().trim()).toString();",
                "+                    append(seconds.getField().getModelObject().trim()).append(\" \").",
                "+                    append(minutes.getField().getModelObject().trim()).append(\" \").",
                "+                    append(hours.getField().getModelObject().trim()).append(\" \").",
                "+                    append(daysOfMonth.getField().getModelObject().trim()).append(\" \").",
                "+                    append(months.getField().getModelObject().trim()).append(\" \").",
                "+                    append(daysOfWeek.getField().getModelObject().trim()).toString();",
                "         }"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1373": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5be7cdbca9f78048857676dfb1b672d7e6ad970f"
                ],
                [
                    "no-tag",
                    "382f3f4b9f00a14f66ca52c7ae73f318b151fe4e"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1373",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7cd3597312c342c2ed3dad86f6222b0281d31342",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539266750,
            "hunks": 1,
            "message": "[SYNCOPE-1379] Added documentation about new check connection timeout parameters",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/configurationparameters.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/configurationparameters.adoc",
                "index 7ba4a4db69..e25d31da8a 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/configurationparameters.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/configurationparameters.adoc",
                "@@ -55,3 +55,20 @@ for usage with <<connectors-resources-history, connectors and resources configur",
                " * `resource.conf.history.size` - how many previous configurations shall be kept for each External Resource,",
                "-for usage with <<connectors-resources-history, connectors and resources configuration history management>>.",
                "+for usage with <<connectors-resources-history, connectors and resources configuration history management>>;",
                "+* `connector.test.timeout` - timeout (in seconds) for testing connector connection in <<Admin Console>>. ",
                "+A value of `0` means there will be no timeout;",
                "+",
                "+[NOTE]",
                "+====",
                "+This parameter is useful to avoid waiting for the default connector timeout, by setting a shorter value; ",
                "+or to completely disable connector connection testing.",
                "+====",
                "+",
                "+* `resource.test.timeout` - timeout (in seconds) for testing resource connection in <<Admin Console>>. ",
                "+A value of `0` means there will be no timeout.",
                "+",
                "+[NOTE]",
                "+====",
                "+This parameter is useful to avoid waiting for the default resource timeout, by setting a shorter value; ",
                "+or to completely disable resource connection testing.",
                "+===="
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/configurationparameters.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1379": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9e56cf510ee55df7cb713de97610e7f680b2d705"
                ],
                [
                    "no-tag",
                    "cfa980833a736bfee3ae027ae26bf7e2d6ccccb4"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: admin, administration",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1379",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "feebe33c57d03f0e6c4dc590c2f68fb1907cdb6c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1533908714,
            "hunks": 2,
            "message": "[SYNCOPE-1352] Group wizard doesn't update the plain attributes",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectWizardBuilder.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectWizardBuilder.java",
                "index 025998cf1b..4ba73c855e 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectWizardBuilder.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectWizardBuilder.java",
                "@@ -55,2 +55,3 @@ public class AnyObjectWizardBuilder extends AnyWizardBuilder<AnyObjectTO> implem",
                "         } else {",
                "+            inner.getPlainAttrs().addAll(cleanEmptyPlainAttrs(inner.getPlainAttrs()));",
                "             AnyObjectPatch patch = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupWizardBuilder.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupWizardBuilder.java",
                "index 1d75f9afd2..52fd40ce2d 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupWizardBuilder.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupWizardBuilder.java",
                "@@ -74,3 +74,2 @@ public class GroupWizardBuilder extends AnyWizardBuilder<GroupTO> implements Gro",
                "         } else {",
                "-            inner.getPlainAttrs().clear();",
                "             inner.getPlainAttrs().addAll(cleanEmptyPlainAttrs(inner.getPlainAttrs()));"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectWizardBuilder.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupWizardBuilder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1352": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "05f70d9d1f2b95f103b1ad7b89ed18ee20aab911"
                ],
                [
                    "no-tag",
                    "e0a6c7de013b4aeabd62ab2df7a82c7c59329e67"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1352",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3b81da3a7ad210b7d26ecd6f175d16851509f563",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537353073,
            "hunks": 1,
            "message": "Workaround for WICKET-6588 - take 2",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "index 7ad0f08c83..fbfdd192b5 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "@@ -90,3 +90,3 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "             HttpServletRequest httpServletRequest = (HttpServletRequest) containerRequest;",
                "-            if (jsessionid == null || httpServletRequest.isRequestedSessionIdValid() == false) {",
                "+            if (jsessionid == null || !httpServletRequest.isRequestedSessionIdValid()) {",
                "                 sessionId = component.getSession().getId();"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6588": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "196d3d204a6bb8441c325fac463fd3b677f6d0ae"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6588",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1068667e90c41cb75d5a508d43f953294646c1b6",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536151662,
            "hunks": 1,
            "message": "[SYNCOPE-1365] Fix approval process",
            "diff": [
                "diff --git a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "index 94e7127f01..d71d8c26ee 100644",
                "--- a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "+++ b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "@@ -625,3 +625,3 @@ public class FlowableUserWorkflowAdapter extends AbstractUserWorkflowAdapter {",
                "                     taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE).",
                "-                    taskCandidateOrAssigned(user.getKey()), page, size, orderByClauses);",
                "+                    taskCandidateOrAssigned(user.getUsername()), page, size, orderByClauses);"
            ],
            "changed_files": [
                "core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1365": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "272dc9790eb097879266ff938caffecb367e0593"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1365",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "65cc0891cd052b6b74f25ccc80a2eb734a1b8450",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536766460,
            "hunks": 1,
            "message": "[SYNCOPE-1370] password reset now stops on not matching captcha",
            "diff": [
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfPasswordReset.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfPasswordReset.java",
                "index 77408a6dcb..9fd42e984b 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfPasswordReset.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfPasswordReset.java",
                "@@ -76,3 +76,9 @@ public class UserSelfPasswordReset extends BaseUserSelfResource {",
                "         } catch (final Exception e) {",
                "-            LOG.error(\"Error while updating user\", e);",
                "+            LOG.error(\"Unable to process password reset request\", e);",
                "+            response.setError(Response.Status.BAD_REQUEST.getStatusCode(),",
                "+                    new StringBuilder().",
                "+                            append(\"ErrorMessage{{ \").",
                "+                            append(e.getMessage()).",
                "+                            append(\" }}\").",
                "+                            toString());",
                "         }"
            ],
            "changed_files": [
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfPasswordReset.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1370": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f9fabbf620872f8ac138cec5c488d04b3072899f"
                ],
                [
                    "no-tag",
                    "a0254d445d9f293bf1a368faa9b975178020161a"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1370",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a37007ed7b9777db0f06aad34bcaaa2a63eee2a1",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537514275,
            "hunks": 1,
            "message": "Further workaround for WICKET-6588",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "index fbfdd192b5..1b1a448776 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "@@ -84,3 +84,6 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "             CookieUtils cookieUtils = new CookieUtils();",
                "-            String jsessionCookieName = application.getServletContext().getSessionCookieConfig().getName();",
                "+            String jsessionCookieName = null;",
                "+            if (application.getServletContext().getSessionCookieConfig() != null) {",
                "+                jsessionCookieName = application.getServletContext().getSessionCookieConfig().getName();",
                "+            }",
                "             if (jsessionCookieName == null) {"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6588": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "88a5746e0b0c6bb3121ab0ebeb01ca4b3edc7ebd"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6588",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d2524ead7102e38f6b490c3da792f43bcd81ae51",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541520914,
            "hunks": 182,
            "message": "[SYNCOPE-1392] Removing BeanUtils#copyProperties",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java",
                "index b96a4a21a2..57e200722f 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java",
                "@@ -57,3 +57,2 @@ import org.apache.syncope.core.persistence.api.entity.EntityFactory;",
                " import org.apache.syncope.core.persistence.api.entity.Logger;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;",
                "@@ -118,3 +117,4 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "             LoggerTO loggerTO = new LoggerTO();",
                "-            BeanUtils.copyProperties(logger, loggerTO);",
                "+            loggerTO.setKey(logger.getKey());",
                "+            loggerTO.setLevel(logger.getLevel());",
                "             return loggerTO;",
                "@@ -232,3 +232,4 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "         LoggerTO result = new LoggerTO();",
                "-        BeanUtils.copyProperties(syncopeLogger, result);",
                "+        result.setKey(syncopeLogger.getKey());",
                "+        result.setLevel(syncopeLogger.getLevel());",
                "@@ -264,3 +265,4 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {",
                "         LoggerTO loggerToDelete = new LoggerTO();",
                "-        BeanUtils.copyProperties(syncopeLogger, loggerToDelete);",
                "+        loggerToDelete.setKey(syncopeLogger.getKey());",
                "+        loggerToDelete.setLevel(syncopeLogger.getLevel());",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java",
                "index 3320bb62e6..568b00796e 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java",
                "@@ -60,3 +60,2 @@ import org.apache.syncope.core.persistence.api.entity.user.User;",
                " import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;",
                "-import org.apache.syncope.core.spring.ApplicationContextProvider;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -71,7 +70,10 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "+    @Autowired",
                "     private PlainSchemaDAO plainSchemaDAO;",
                "+    @Autowired",
                "     private DerSchemaDAO derSchemaDAO;",
                "-    private DynRealmDAO dynRealmDAO;",
                "+    @Autowired",
                "+    protected DynRealmDAO dynRealmDAO;",
                "@@ -79,29 +81,2 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "-    private PlainSchemaDAO plainSchemaDAO() {",
                "-        synchronized (this) {",
                "-            if (plainSchemaDAO == null) {",
                "-                plainSchemaDAO = ApplicationContextProvider.getApplicationContext().getBean(PlainSchemaDAO.class);",
                "-            }",
                "-        }",
                "-        return plainSchemaDAO;",
                "-    }",
                "-",
                "-    private DerSchemaDAO derSchemaDAO() {",
                "-        synchronized (this) {",
                "-            if (derSchemaDAO == null) {",
                "-                derSchemaDAO = ApplicationContextProvider.getApplicationContext().getBean(DerSchemaDAO.class);",
                "-            }",
                "-        }",
                "-        return derSchemaDAO;",
                "-    }",
                "-",
                "-    protected DynRealmDAO dynRealmDAO() {",
                "-        synchronized (this) {",
                "-            if (dynRealmDAO == null) {",
                "-                dynRealmDAO = ApplicationContextProvider.getApplicationContext().getBean(DynRealmDAO.class);",
                "-            }",
                "-        }",
                "-        return dynRealmDAO;",
                "-    }",
                "-",
                "     protected abstract AnyUtils init();",
                "@@ -199,3 +174,3 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "-        PlainSchema schema = plainSchemaDAO().find(schemaKey);",
                "+        PlainSchema schema = plainSchemaDAO.find(schemaKey);",
                "         if (schema == null) {",
                "@@ -237,3 +212,3 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "-        PlainSchema schema = plainSchemaDAO().find(schemaKey);",
                "+        PlainSchema schema = plainSchemaDAO.find(schemaKey);",
                "         if (schema == null) {",
                "@@ -336,3 +311,3 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "                 // verify schema existence and get schema type",
                "-                PlainSchema schema = plainSchemaDAO().find(identifiers.get(i));",
                "+                PlainSchema schema = plainSchemaDAO.find(identifiers.get(i));",
                "                 if (schema == null) {",
                "@@ -396,3 +371,3 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "     public List<A> findByDerAttrValue(final String schemaKey, final String value, final boolean ignoreCaseMatch) {",
                "-        DerSchema schema = derSchemaDAO().find(schemaKey);",
                "+        DerSchema schema = derSchemaDAO.find(schemaKey);",
                "         if (schema == null) {",
                "@@ -543,3 +518,3 @@ public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> im",
                "                 forEachOrdered((actualKey) -> {",
                "-                    DynRealm dynRealm = dynRealmDAO().find(actualKey.toString());",
                "+                    DynRealm dynRealm = dynRealmDAO.find(actualKey.toString());",
                "                     if (dynRealm == null) {",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "index a7211de90d..278434f07c 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "@@ -57,3 +57,3 @@ import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;",
                " import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;",
                "-import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                " import org.springframework.stereotype.Repository;",
                "@@ -65,24 +65,8 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "+    @Autowired",
                "     private UserDAO userDAO;",
                "+    @Autowired",
                "     private GroupDAO groupDAO;",
                "-    private UserDAO userDAO() {",
                "-        synchronized (this) {",
                "-            if (userDAO == null) {",
                "-                userDAO = ApplicationContextProvider.getApplicationContext().getBean(UserDAO.class);",
                "-            }",
                "-        }",
                "-        return userDAO;",
                "-    }",
                "-",
                "-    private GroupDAO groupDAO() {",
                "-        synchronized (this) {",
                "-            if (groupDAO == null) {",
                "-                groupDAO = ApplicationContextProvider.getApplicationContext().getBean(GroupDAO.class);",
                "-            }",
                "-        }",
                "-        return groupDAO;",
                "-    }",
                "-",
                "     @Override",
                "@@ -213,4 +197,4 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "-        Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO().refreshDynMemberships(merged);",
                "-        dynRealmDAO().refreshDynMemberships(merged);",
                "+        Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO.refreshDynMemberships(merged);",
                "+        dynRealmDAO.refreshDynMemberships(merged);",
                "@@ -249,4 +233,4 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "     public void delete(final AnyObject anyObject) {",
                "-        groupDAO().removeDynMemberships(anyObject);",
                "-        dynRealmDAO().removeDynMemberships(anyObject.getKey());",
                "+        groupDAO.removeDynMemberships(anyObject);",
                "+        dynRealmDAO.removeDynMemberships(anyObject.getKey());",
                "@@ -260,3 +244,3 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "             relationship.getLeftEnd().getRelationships().remove(relationship);",
                "-            userDAO().save(relationship.getLeftEnd());",
                "+            userDAO.save(relationship.getLeftEnd());",
                "@@ -283,3 +267,3 @@ public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObj",
                "                 forEachOrdered(actualKey -> {",
                "-                    Group group = groupDAO().find(actualKey.toString());",
                "+                    Group group = groupDAO.find(actualKey.toString());",
                "                     if (group == null) {",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java",
                "index b9d2f01999..7fc9585ca9 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java",
                "@@ -49,2 +49,3 @@ public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO",
                "+    @Autowired",
                "     private AnySearchDAO searchDAO;",
                "@@ -53,11 +54,2 @@ public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO",
                "-    private AnySearchDAO searchDAO() {",
                "-        synchronized (this) {",
                "-            if (searchDAO == null) {",
                "-                searchDAO = ApplicationContextProvider.getApplicationContext().getBean(AnySearchDAO.class);",
                "-            }",
                "-        }",
                "-        return searchDAO;",
                "-    }",
                "-",
                "     private AnySearchDAO jpaAnySearchDAO() {",
                "@@ -65,4 +57,4 @@ public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO",
                "             if (jpaAnySearchDAO == null) {",
                "-                if (AopUtils.getTargetClass(searchDAO()).equals(JPAAnySearchDAO.class)) {",
                "-                    jpaAnySearchDAO = searchDAO();",
                "+                if (AopUtils.getTargetClass(searchDAO).equals(JPAAnySearchDAO.class)) {",
                "+                    jpaAnySearchDAO = searchDAO;",
                "                 } else {",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java",
                "index 9c573fd17b..f684a15403 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java",
                "@@ -54,3 +54,2 @@ import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;",
                " import org.apache.syncope.core.provisioning.api.ConnectorRegistry;",
                "-import org.apache.syncope.core.spring.ApplicationContextProvider;",
                " import org.apache.syncope.core.spring.security.AuthContextUtils;",
                "@@ -67,91 +66,26 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource> implem",
                "+    @Autowired",
                "     private TaskDAO taskDAO;",
                "+    @Autowired",
                "     private AnyObjectDAO anyObjectDAO;",
                "+    @Autowired",
                "     private UserDAO userDAO;",
                "+    @Autowired",
                "     private GroupDAO groupDAO;",
                "+    @Autowired",
                "     private PolicyDAO policyDAO;",
                "+    @Autowired",
                "     private VirSchemaDAO virSchemaDAO;",
                "+    @Autowired",
                "     private RealmDAO realmDAO;",
                "+    @Autowired",
                "     private ExternalResourceHistoryConfDAO externalResourceHistoryConfDAO;",
                "-    private TaskDAO taskDAO() {",
                "-        synchronized (this) {",
                "-            if (taskDAO == null) {",
                "-                taskDAO = ApplicationContextProvider.getApplicationContext().getBean(TaskDAO.class);",
                "-            }",
                "-        }",
                "-        return taskDAO;",
                "-    }",
                "-",
                "-    private AnyObjectDAO anyObjectDAO() {",
                "-        synchronized (this) {",
                "-            if (anyObjectDAO == null) {",
                "-                anyObjectDAO = ApplicationContextProvider.getApplicationContext().getBean(AnyObjectDAO.class);",
                "-            }",
                "-        }",
                "-        return anyObjectDAO;",
                "-    }",
                "-",
                "-    private UserDAO userDAO() {",
                "-        synchronized (this) {",
                "-            if (userDAO == null) {",
                "-                userDAO = ApplicationContextProvider.getApplicationContext().getBean(UserDAO.class);",
                "-            }",
                "-        }",
                "-        return userDAO;",
                "-    }",
                "-",
                "-    private GroupDAO groupDAO() {",
                "-        synchronized (this) {",
                "-            if (groupDAO == null) {",
                "-                groupDAO = ApplicationContextProvider.getApplicationContext().getBean(GroupDAO.class);",
                "-            }",
                "-        }",
                "-        return groupDAO;",
                "-    }",
                "-",
                "-    private PolicyDAO policyDAO() {",
                "-        synchronized (this) {",
                "-            if (policyDAO == null) {",
                "-                policyDAO = ApplicationContextProvider.getApplicationContext().getBean(PolicyDAO.class);",
                "-            }",
                "-        }",
                "-        return policyDAO;",
                "-    }",
                "-",
                "-    private VirSchemaDAO virSchemaDAO() {",
                "-        synchronized (this) {",
                "-            if (virSchemaDAO == null) {",
                "-                virSchemaDAO = ApplicationContextProvider.getApplicationContext().getBean(VirSchemaDAO.class);",
                "-            }",
                "-        }",
                "-        return virSchemaDAO;",
                "-    }",
                "-",
                "-    private RealmDAO realmDAO() {",
                "-        synchronized (this) {",
                "-            if (realmDAO == null) {",
                "-                realmDAO = ApplicationContextProvider.getApplicationContext().getBean(RealmDAO.class);",
                "-            }",
                "-        }",
                "-        return realmDAO;",
                "-    }",
                "-",
                "-    private ExternalResourceHistoryConfDAO externalResourceHistoryConfDAO() {",
                "-        synchronized (this) {",
                "-            if (externalResourceHistoryConfDAO == null) {",
                "-                externalResourceHistoryConfDAO = ApplicationContextProvider.getApplicationContext().",
                "-                        getBean(ExternalResourceHistoryConfDAO.class);",
                "-            }",
                "-        }",
                "-        return externalResourceHistoryConfDAO;",
                "-    }",
                "-",
                "     @Override",
                "@@ -304,15 +238,15 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource> implem",
                "-        taskDAO().deleteAll(resource, TaskType.PROPAGATION);",
                "-        taskDAO().deleteAll(resource, TaskType.PULL);",
                "-        taskDAO().deleteAll(resource, TaskType.PUSH);",
                "+        taskDAO.deleteAll(resource, TaskType.PROPAGATION);",
                "+        taskDAO.deleteAll(resource, TaskType.PULL);",
                "+        taskDAO.deleteAll(resource, TaskType.PUSH);",
                "-        realmDAO().findByResource(resource).",
                "+        realmDAO.findByResource(resource).",
                "                 forEach(realm -> realm.getResources().remove(resource));",
                "-        anyObjectDAO().findByResource(resource).",
                "+        anyObjectDAO.findByResource(resource).",
                "                 forEach(anyObject -> anyObject.getResources().remove(resource));",
                "-        userDAO().findByResource(resource).",
                "+        userDAO.findByResource(resource).",
                "                 forEach(user -> user.getResources().remove(resource));",
                "-        groupDAO().findByResource(resource).",
                "+        groupDAO.findByResource(resource).",
                "                 forEach(group -> group.getResources().remove(resource));",
                "-        policyDAO().findByResource(resource).",
                "+        policyDAO.findByResource(resource).",
                "                 forEach(policy -> policy.getResources().remove(resource));",
                "@@ -329,6 +263,6 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource> implem",
                "                 }).",
                "-                forEach(provision -> virSchemaDAO().findByProvision(provision).",
                "-                forEach(schema -> virSchemaDAO().delete(schema.getKey())));",
                "+                forEach(provision -> virSchemaDAO.findByProvision(provision).",
                "+                forEach(schema -> virSchemaDAO.delete(schema.getKey())));",
                "-        externalResourceHistoryConfDAO().deleteByEntity(resource);",
                "+        externalResourceHistoryConfDAO.deleteByEntity(resource);",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "index cdb2591878..b8125ef191 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "@@ -88,6 +88,9 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "+    @Autowired",
                "     private UserDAO userDAO;",
                "+    @Autowired",
                "     private AnyObjectDAO anyObjectDAO;",
                "+    @Autowired",
                "     private AnySearchDAO searchDAO;",
                "@@ -96,29 +99,2 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "-    private UserDAO userDAO() {",
                "-        synchronized (this) {",
                "-            if (userDAO == null) {",
                "-                userDAO = ApplicationContextProvider.getApplicationContext().getBean(UserDAO.class);",
                "-            }",
                "-        }",
                "-        return userDAO;",
                "-    }",
                "-",
                "-    private AnyObjectDAO anyObjectDAO() {",
                "-        synchronized (this) {",
                "-            if (anyObjectDAO == null) {",
                "-                anyObjectDAO = ApplicationContextProvider.getApplicationContext().getBean(AnyObjectDAO.class);",
                "-            }",
                "-        }",
                "-        return anyObjectDAO;",
                "-    }",
                "-",
                "-    private AnySearchDAO searchDAO() {",
                "-        synchronized (this) {",
                "-            if (searchDAO == null) {",
                "-                searchDAO = ApplicationContextProvider.getApplicationContext().getBean(AnySearchDAO.class);",
                "-            }",
                "-        }",
                "-        return searchDAO;",
                "-    }",
                "-",
                "     private AnySearchDAO jpaAnySearchDAO() {",
                "@@ -126,4 +102,4 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "             if (jpaAnySearchDAO == null) {",
                "-                if (AopUtils.getTargetClass(searchDAO()).equals(JPAAnySearchDAO.class)) {",
                "-                    jpaAnySearchDAO = searchDAO();",
                "+                if (AopUtils.getTargetClass(searchDAO).equals(JPAAnySearchDAO.class)) {",
                "+                    jpaAnySearchDAO = searchDAO;",
                "                 } else {",
                "@@ -212,3 +188,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "     public List<Group> findOwnedByUser(final String userKey) {",
                "-        User owner = userDAO().find(userKey);",
                "+        User owner = userDAO.find(userKey);",
                "         if (owner == null) {",
                "@@ -219,5 +195,5 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "                 append(\" e WHERE e.userOwner=:owner \");",
                "-        for (String groupKey : userDAO().findAllGroupKeys(owner)) {",
                "+        userDAO.findAllGroupKeys(owner).forEach(groupKey -> {",
                "             queryString.append(\"OR e.groupOwner.id='\").append(groupKey).append(\"' \");",
                "-        }",
                "+        });",
                "@@ -291,6 +267,6 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "             SearchCond cond = buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm());",
                "-            int count = searchDAO().count(",
                "+            int count = searchDAO.count(",
                "                     Collections.<String>singleton(merged.getRealm().getFullPath()), cond, AnyTypeKind.USER);",
                "             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {",
                "-                List<User> matching = searchDAO().search(",
                "+                List<User> matching = searchDAO.search(",
                "                         Collections.<String>singleton(merged.getRealm().getFullPath()),",
                "@@ -315,6 +291,6 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "             SearchCond cond = buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm());",
                "-            int count = searchDAO().count(",
                "+            int count = searchDAO.count(",
                "                     Collections.<String>singleton(merged.getRealm().getFullPath()), cond, AnyTypeKind.ANY_OBJECT);",
                "             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {",
                "-                List<AnyObject> matching = searchDAO().search(",
                "+                List<AnyObject> matching = searchDAO.search(",
                "                         Collections.<String>singleton(merged.getRealm().getFullPath()),",
                "@@ -339,3 +315,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "-        dynRealmDAO().refreshDynMemberships(merged);",
                "+        dynRealmDAO.refreshDynMemberships(merged);",
                "@@ -346,3 +322,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "     public void delete(final Group group) {",
                "-        dynRealmDAO().removeDynMemberships(group.getKey());",
                "+        dynRealmDAO.removeDynMemberships(group.getKey());",
                "@@ -359,3 +335,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "-            anyObjectDAO().save(leftEnd);",
                "+            anyObjectDAO.save(leftEnd);",
                "             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, leftEnd, AuthContextUtils.getDomain()));",
                "@@ -374,3 +350,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "-            userDAO().save(leftEnd);",
                "+            userDAO.save(leftEnd);",
                "             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, leftEnd, AuthContextUtils.getDomain()));",
                "@@ -508,3 +484,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "     public Set<String> removeDynMemberships(final AnyObject anyObject) {",
                "-        List<Group> dynGroups = anyObjectDAO().findDynGroups(anyObject.getKey());",
                "+        List<Group> dynGroups = anyObjectDAO.findDynGroups(anyObject.getKey());",
                "@@ -593,3 +569,3 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {",
                "     public Set<String> removeDynMemberships(final User user) {",
                "-        List<Group> dynGroups = userDAO().findDynGroups(user.getKey());",
                "+        List<Group> dynGroups = userDAO.findDynGroups(user.getKey());",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java",
                "index 458cf41d46..ef569d75b2 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java",
                "@@ -35,3 +35,2 @@ import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;",
                " import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;",
                "-import org.apache.syncope.core.spring.ApplicationContextProvider;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -45,13 +44,5 @@ public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema> implements Plain",
                "+    @Autowired",
                "     private ExternalResourceDAO resourceDAO;",
                "-    private ExternalResourceDAO resourceDAO() {",
                "-        synchronized (this) {",
                "-            if (resourceDAO == null) {",
                "-                resourceDAO = ApplicationContextProvider.getApplicationContext().getBean(ExternalResourceDAO.class);",
                "-            }",
                "-        }",
                "-        return resourceDAO;",
                "-    }",
                "-",
                "     @Override",
                "@@ -134,3 +125,3 @@ public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema> implements Plain",
                "-            resourceDAO().deleteMapping(key);",
                "+            resourceDAO.deleteMapping(key);",
                "         }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java",
                "index 453fb55cc0..4e8295df7a 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java",
                "@@ -36,3 +36,2 @@ import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;",
                " import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;",
                "-import org.apache.syncope.core.spring.ApplicationContextProvider;",
                " import org.apache.syncope.core.spring.security.AuthContextUtils;",
                "@@ -51,13 +50,5 @@ public class JPARoleDAO extends AbstractDAO<Role> implements RoleDAO {",
                "+    @Autowired",
                "     private AnySearchDAO searchDAO;",
                "-    private AnySearchDAO searchDAO() {",
                "-        synchronized (this) {",
                "-            if (searchDAO == null) {",
                "-                searchDAO = ApplicationContextProvider.getApplicationContext().getBean(AnySearchDAO.class);",
                "-            }",
                "-        }",
                "-        return searchDAO;",
                "-    }",
                "-",
                "     @Override",
                "@@ -110,3 +101,3 @@ public class JPARoleDAO extends AbstractDAO<Role> implements RoleDAO {",
                "         if (merged.getDynMembership() != null) {",
                "-            List<User> matching = searchDAO().search(",
                "+            List<User> matching = searchDAO.search(",
                "                     SearchCondConverter.convert(merged.getDynMembership().getFIQLCond()), AnyTypeKind.USER);",
                "@@ -189,3 +180,3 @@ public class JPARoleDAO extends AbstractDAO<Role> implements RoleDAO {",
                "-            if (searchDAO().matches(user, SearchCondConverter.convert(role.getDynMembership().getFIQLCond()))) {",
                "+            if (searchDAO.matches(user, SearchCondConverter.convert(role.getDynMembership().getFIQLCond()))) {",
                "                 Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java",
                "index adc36f5b04..a86ee8e9e6 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java",
                "@@ -45,3 +45,2 @@ import org.apache.syncope.core.spring.security.AuthContextUtils;",
                " import org.apache.syncope.core.spring.security.DelegatedAdministrationException;",
                "-import org.apache.syncope.core.spring.ApplicationContextProvider;",
                " import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;",
                "@@ -90,29 +89,13 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "-    @Resource(name = \"adminUser\")",
                "-    private String adminUser;",
                "-",
                "-    @Resource(name = \"anonymousUser\")",
                "-    private String anonymousUser;",
                "-",
                "+    @Autowired",
                "     private RealmDAO realmDAO;",
                "+    @Autowired",
                "     private GroupDAO groupDAO;",
                "-    private RealmDAO realmDAO() {",
                "-        synchronized (this) {",
                "-            if (realmDAO == null) {",
                "-                realmDAO = ApplicationContextProvider.getApplicationContext().getBean(RealmDAO.class);",
                "-            }",
                "-        }",
                "-        return realmDAO;",
                "-    }",
                "+    @Resource(name = \"adminUser\")",
                "+    private String adminUser;",
                "-    private GroupDAO groupDAO() {",
                "-        synchronized (this) {",
                "-            if (groupDAO == null) {",
                "-                groupDAO = ApplicationContextProvider.getApplicationContext().getBean(GroupDAO.class);",
                "-            }",
                "-        }",
                "-        return groupDAO;",
                "-    }",
                "+    @Resource(name = \"anonymousUser\")",
                "+    private String anonymousUser;",
                "@@ -246,3 +229,3 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "         // add realm policies",
                "-        for (Realm realm : realmDAO().findAncestors(user.getRealm())) {",
                "+        for (Realm realm : realmDAO.findAncestors(user.getRealm())) {",
                "             policy = realm.getPasswordPolicy();",
                "@@ -276,3 +259,3 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "         // add realm policies",
                "-        realmDAO().findAncestors(user.getRealm()).stream().",
                "+        realmDAO.findAncestors(user.getRealm()).stream().",
                "                 map(realm -> realm.getAccountPolicy()).",
                "@@ -403,4 +386,4 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "         roleDAO.refreshDynMemberships(merged);",
                "-        Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO().refreshDynMemberships(merged);",
                "-        dynRealmDAO().refreshDynMemberships(merged);",
                "+        Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO.refreshDynMemberships(merged);",
                "+        dynRealmDAO.refreshDynMemberships(merged);",
                "@@ -422,4 +405,4 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "         roleDAO.removeDynMemberships(user.getKey());",
                "-        groupDAO().removeDynMemberships(user);",
                "-        dynRealmDAO().removeDynMemberships(user.getKey());",
                "+        groupDAO.removeDynMemberships(user);",
                "+        dynRealmDAO.removeDynMemberships(user.getKey());",
                "@@ -482,3 +465,3 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "                 forEachOrdered(actualKey -> {",
                "-                    Group group = groupDAO().find(actualKey.toString());",
                "+                    Group group = groupDAO.find(actualKey.toString());",
                "                     if (group == null) {",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java",
                "index 65702a45fb..1d3043be9e 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java",
                "@@ -40,3 +40,3 @@ import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;",
                " import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;",
                "-import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                " import org.springframework.stereotype.Repository;",
                "@@ -46,13 +46,5 @@ public class JPAVirSchemaDAO extends AbstractDAO<VirSchema> implements VirSchema",
                "+    @Autowired",
                "     private ExternalResourceDAO resourceDAO;",
                "-    private ExternalResourceDAO resourceDAO() {",
                "-        synchronized (this) {",
                "-            if (resourceDAO == null) {",
                "-                resourceDAO = ApplicationContextProvider.getApplicationContext().getBean(ExternalResourceDAO.class);",
                "-            }",
                "-        }",
                "-        return resourceDAO;",
                "-    }",
                "-",
                "     @Override",
                "@@ -139,3 +131,3 @@ public class JPAVirSchemaDAO extends AbstractDAO<VirSchema> implements VirSchema",
                "-        resourceDAO().deleteMapping(key);",
                "+        resourceDAO.deleteMapping(key);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java",
                "index f6ec55fbd5..9e1c8c91ad 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java",
                "@@ -36,3 +36,2 @@ import org.apache.syncope.core.persistence.api.entity.EntityFactory;",
                " import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.apache.syncope.core.spring.security.DefaultCredentialChecker;",
                "@@ -178,3 +177,6 @@ public class AccessTokenDataBinderImpl implements AccessTokenDataBinder {",
                "         AccessTokenTO accessTokenTO = new AccessTokenTO();",
                "-        BeanUtils.copyProperties(accessToken, accessTokenTO);",
                "+        accessTokenTO.setKey(accessToken.getKey());",
                "+        accessTokenTO.setBody(accessToken.getBody());",
                "+        accessTokenTO.setExpiryTime(accessToken.getExpiryTime());",
                "+        accessTokenTO.setOwner(accessToken.getOwner());",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "index 1dd6194fdf..3bab7fe1fc 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "@@ -42,3 +42,2 @@ import org.apache.syncope.core.provisioning.api.PropagationByResource;",
                " import org.apache.syncope.common.lib.types.ResourceOperation;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;",
                "@@ -65,7 +64,2 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "-    private static final String[] IGNORE_PROPERTIES = {",
                "-        \"type\", \"realm\", \"auxClasses\", \"relationships\", \"memberships\", \"dynMemberships\",",
                "-        \"plainAttrs\", \"derAttrs\", \"virAttrs\", \"resources\"",
                "-    };",
                "-",
                "     @Autowired",
                "@@ -82,5 +76,10 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "         AnyObjectTO anyObjectTO = new AnyObjectTO();",
                "+        anyObjectTO.setKey(anyObject.getKey());",
                "+        anyObjectTO.setName(anyObject.getName());",
                "         anyObjectTO.setType(anyObject.getType().getKey());",
                "-",
                "-        BeanUtils.copyProperties(anyObject, anyObjectTO, IGNORE_PROPERTIES);",
                "+        anyObjectTO.setCreationDate(anyObject.getCreationDate());",
                "+        anyObjectTO.setCreator(anyObject.getCreator());",
                "+        anyObjectTO.setLastChangeDate(anyObject.getLastChangeDate());",
                "+        anyObjectTO.setLastModifier(anyObject.getLastModifier());",
                "+        anyObjectTO.setStatus(anyObject.getStatus());",
                "@@ -473,3 +472,2 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "     }",
                "-",
                " }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java",
                "index 6cd5e8eac6..d08338fba6 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java",
                "@@ -50,3 +50,2 @@ import org.identityconnectors.framework.api.ConfigurationProperty;",
                " import org.identityconnectors.framework.impl.api.ConfigurationPropertyImpl;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.apache.syncope.core.spring.security.AuthContextUtils;",
                "@@ -59,4 +58,2 @@ public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {",
                "-    private static final String[] IGNORE_PROPERTIES = { \"key\", \"poolConf\", \"location\", \"adminRealm\", \"conf\" };",
                "-",
                "     @Autowired",
                "@@ -105,3 +102,9 @@ public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {",
                "-        BeanUtils.copyProperties(connInstanceTO, connInstance, IGNORE_PROPERTIES);",
                "+        connInstance.setBundleName(connInstanceTO.getBundleName());",
                "+        connInstance.setConnectorName(connInstanceTO.getConnectorName());",
                "+        connInstance.setVersion(connInstanceTO.getVersion());",
                "+        connInstance.setDisplayName(connInstanceTO.getDisplayName());",
                "+        connInstance.setConnRequestTimeout(connInstanceTO.getConnRequestTimeout());",
                "+        connInstance.getCapabilities().addAll(connInstanceTO.getCapabilities());",
                "+",
                "         if (connInstanceTO.getAdminRealm() != null) {",
                "@@ -244,9 +247,14 @@ public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {",
                "     public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {",
                "-        ConnInstanceTO connInstanceTO = new ConnInstanceTO();",
                "-",
                "         Pair<URI, ConnectorInfo> info = connIdBundleManager.getConnectorInfo(connInstance);",
                "-        BeanUtils.copyProperties(connInstance, connInstanceTO, IGNORE_PROPERTIES);",
                "+",
                "+        ConnInstanceTO connInstanceTO = new ConnInstanceTO();",
                "         connInstanceTO.setKey(connInstance.getKey());",
                "+        connInstanceTO.setBundleName(connInstance.getBundleName());",
                "+        connInstanceTO.setConnectorName(connInstance.getConnectorName());",
                "+        connInstanceTO.setVersion(connInstance.getVersion());",
                "+        connInstanceTO.setDisplayName(connInstance.getDisplayName());",
                "+        connInstanceTO.setConnRequestTimeout(connInstance.getConnRequestTimeout());",
                "         connInstanceTO.setAdminRealm(connInstance.getAdminRealm().getFullPath());",
                "         connInstanceTO.setLocation(info.getLeft().toASCIIString());",
                "+        connInstanceTO.getCapabilities().addAll(connInstance.getCapabilities());",
                "         connInstanceTO.getConf().addAll(connInstance.getConf());",
                "@@ -275,3 +283,7 @@ public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {",
                "             ConnPoolConfTO poolConf = new ConnPoolConfTO();",
                "-            BeanUtils.copyProperties(connInstance.getPoolConf(), poolConf);",
                "+            poolConf.setMaxIdle(connInstance.getPoolConf().getMaxIdle());",
                "+            poolConf.setMaxObjects(connInstance.getPoolConf().getMaxObjects());",
                "+            poolConf.setMaxWait(connInstance.getPoolConf().getMaxWait());",
                "+            poolConf.setMinEvictableIdleTimeMillis(connInstance.getPoolConf().getMinEvictableIdleTimeMillis());",
                "+            poolConf.setMinIdle(connInstance.getPoolConf().getMinIdle());",
                "             connInstanceTO.setPoolConf(poolConf);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java",
                "index 91df46f4c7..1346a91c1a 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java",
                "@@ -43,2 +43,3 @@ import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;",
                " import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;",
                "+import org.apache.syncope.core.provisioning.api.notification.RecipientsProvider;",
                " import org.apache.syncope.core.provisioning.api.pushpull.PushActions;",
                "@@ -46,3 +47,2 @@ import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;",
                " import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.slf4j.Logger;",
                "@@ -51,3 +51,2 @@ import org.springframework.beans.factory.annotation.Autowired;",
                " import org.springframework.stereotype.Component;",
                "-import org.apache.syncope.core.provisioning.api.notification.RecipientsProvider;",
                "@@ -82,3 +81,6 @@ public class ImplementationDataBinderImpl implements ImplementationDataBinder {",
                "-        BeanUtils.copyProperties(implementationTO, implementation);",
                "+        implementation.setKey(implementationTO.getKey());",
                "+        implementation.setEngine(implementationTO.getEngine());",
                "+        implementation.setType(implementationTO.getType());",
                "+        implementation.setBody(implementationTO.getBody());",
                "@@ -193,3 +195,7 @@ public class ImplementationDataBinderImpl implements ImplementationDataBinder {",
                "         ImplementationTO implementationTO = new ImplementationTO();",
                "-        BeanUtils.copyProperties(implementation, implementationTO);",
                "+        implementationTO.setKey(implementation.getKey());",
                "+        implementationTO.setEngine(implementation.getEngine());",
                "+        implementationTO.setType(implementation.getType());",
                "+        implementationTO.setBody(implementation.getBody());",
                "+",
                "         return implementationTO;",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/NotificationDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/NotificationDataBinderImpl.java",
                "index b4131ac998..edbe242337 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/NotificationDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/NotificationDataBinderImpl.java",
                "@@ -31,3 +31,2 @@ import org.apache.syncope.core.persistence.api.entity.EntityFactory;",
                " import org.apache.syncope.core.persistence.api.entity.Notification;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;",
                "@@ -50,4 +49,2 @@ public class NotificationDataBinderImpl implements NotificationDataBinder {",
                "-    private static final String[] IGNORE_PROPERTIES = { \"key\", \"template\", \"abouts\", \"recipientsProvider\" };",
                "-",
                "     @Autowired",
                "@@ -72,4 +69,11 @@ public class NotificationDataBinderImpl implements NotificationDataBinder {",
                "         notificationTO.setTemplate(notification.getTemplate().getKey());",
                "-",
                "-        BeanUtils.copyProperties(notification, notificationTO, IGNORE_PROPERTIES);",
                "+        notificationTO.getEvents().addAll(notification.getEvents());",
                "+        notificationTO.setRecipientsFIQL(notification.getRecipientsFIQL());",
                "+        notificationTO.getStaticRecipients().addAll(notification.getStaticRecipients());",
                "+        notificationTO.setRecipientAttrName(notification.getRecipientAttrName());",
                "+        notificationTO.setSelfAsRecipient(notification.isSelfAsRecipient());",
                "+        notificationTO.setSender(notification.getSender());",
                "+        notificationTO.setSubject(notification.getSubject());",
                "+        notificationTO.setTraceLevel(notification.getTraceLevel());",
                "+        notificationTO.setActive(notification.isActive());",
                "@@ -95,3 +99,16 @@ public class NotificationDataBinderImpl implements NotificationDataBinder {",
                "     public void update(final Notification notification, final NotificationTO notificationTO) {",
                "-        BeanUtils.copyProperties(notificationTO, notification, IGNORE_PROPERTIES);",
                "+        notification.setRecipientsFIQL(notificationTO.getRecipientsFIQL());",
                "+",
                "+        notification.getStaticRecipients().clear();",
                "+        notification.getStaticRecipients().addAll(notificationTO.getStaticRecipients());",
                "+",
                "+        notification.setRecipientAttrName(notificationTO.getRecipientAttrName());",
                "+        notification.setSelfAsRecipient(notificationTO.isSelfAsRecipient());",
                "+        notification.setSender(notificationTO.getSender());",
                "+        notification.setSubject(notificationTO.getSubject());",
                "+        notification.setTraceLevel(notificationTO.getTraceLevel());",
                "+        notification.setActive(notificationTO.isActive());",
                "+",
                "+        notification.getEvents().clear();",
                "+        notification.getEvents().addAll(notificationTO.getEvents());",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RemediationDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RemediationDataBinderImpl.java",
                "index 36bac89330..c445d93a7d 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RemediationDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RemediationDataBinderImpl.java",
                "@@ -23,3 +23,2 @@ import org.apache.syncope.core.persistence.api.entity.Remediation;",
                " import org.apache.syncope.core.provisioning.api.data.RemediationDataBinder;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.springframework.stereotype.Component;",
                "@@ -29,5 +28,2 @@ public class RemediationDataBinderImpl implements RemediationDataBinder {",
                "-    private static final String[] IGNORE_PROPERTIES = {",
                "-        \"anyType\", \"payload\", \"anyTOPayload\", \"anyPatchPayload\", \"keyPayload\", \"pullTask\" };",
                "-",
                "     @Override",
                "@@ -35,4 +31,7 @@ public class RemediationDataBinderImpl implements RemediationDataBinder {",
                "         RemediationTO remediationTO = new RemediationTO();",
                "-",
                "-        BeanUtils.copyProperties(remediation, remediationTO);",
                "+        remediationTO.setKey(remediation.getKey());",
                "+        remediationTO.setOperation(remediation.getOperation());",
                "+        remediationTO.setError(remediation.getError());",
                "+        remediationTO.setInstant(remediation.getInstant());",
                "+        remediationTO.setRemoteName(remediation.getRemoteName());",
                "@@ -65,3 +64,2 @@ public class RemediationDataBinderImpl implements RemediationDataBinder {",
                "     }",
                "-",
                " }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java",
                "index ed1b3a20b0..f1d6537b8f 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java",
                "@@ -33,3 +33,2 @@ import org.apache.syncope.core.persistence.api.entity.ReportExec;",
                " import org.apache.syncope.core.provisioning.api.job.JobNamer;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;",
                "@@ -53,6 +52,2 @@ public class ReportDataBinderImpl implements ReportDataBinder {",
                "-    private static final String[] IGNORE_REPORT_PROPERTIES = { \"key\", \"template\", \"reportlets\", \"executions\" };",
                "-",
                "-    private static final String[] IGNORE_REPORT_EXECUTION_PROPERTIES = { \"key\", \"report\", \"execResult\" };",
                "-",
                "     @Autowired",
                "@@ -71,3 +66,5 @@ public class ReportDataBinderImpl implements ReportDataBinder {",
                "     public void getReport(final Report report, final ReportTO reportTO) {",
                "-        BeanUtils.copyProperties(reportTO, report, IGNORE_REPORT_PROPERTIES);",
                "+        report.setName(reportTO.getName());",
                "+        report.setCronExpression(reportTO.getCronExpression());",
                "+        report.setActive(reportTO.isActive());",
                "@@ -98,4 +95,5 @@ public class ReportDataBinderImpl implements ReportDataBinder {",
                "         reportTO.setTemplate(report.getTemplate().getKey());",
                "-",
                "-        BeanUtils.copyProperties(report, reportTO, IGNORE_REPORT_PROPERTIES);",
                "+        reportTO.setName(report.getName());",
                "+        reportTO.setCronExpression(report.getCronExpression());",
                "+        reportTO.setActive(report.isActive());",
                "@@ -144,6 +142,2 @@ public class ReportDataBinderImpl implements ReportDataBinder {",
                "         execTO.setKey(execution.getKey());",
                "-        BeanUtils.copyProperties(execution, execTO, IGNORE_REPORT_EXECUTION_PROPERTIES);",
                "-        if (execution.getKey() != null) {",
                "-            execTO.setKey(execution.getKey());",
                "-        }",
                "         execTO.setJobType(JobType.REPORT);",
                "@@ -151,2 +145,6 @@ public class ReportDataBinderImpl implements ReportDataBinder {",
                "         execTO.setRefDesc(buildRefDesc(execution.getReport()));",
                "+        execTO.setStatus(execution.getStatus());",
                "+        execTO.setMessage(execution.getMessage());",
                "+        execTO.setStart(execution.getStart());",
                "+        execTO.setEnd(execution.getEnd());",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java",
                "index b5a1ce912d..c9f6eb0f45 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java",
                "@@ -53,3 +53,2 @@ import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;",
                " import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;",
                "@@ -88,4 +87,2 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {",
                "-    private static final String[] ITEM_IGNORE_PROPERTIES = { \"key\", \"mapping\", \"transformers\" };",
                "-",
                "     @Autowired",
                "@@ -339,3 +336,10 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {",
                "                         OrgUnitItem item = entityFactory.newEntity(OrgUnitItem.class);",
                "-                        BeanUtils.copyProperties(itemTO, item, ITEM_IGNORE_PROPERTIES);",
                "+                        item.setIntAttrName(itemTO.getIntAttrName());",
                "+                        item.setExtAttrName(itemTO.getExtAttrName());",
                "+                        item.setPurpose(itemTO.getPurpose());",
                "+                        item.setMandatoryCondition(itemTO.getMandatoryCondition());",
                "+                        item.setConnObjectKey(itemTO.isConnObjectKey());",
                "+                        item.setPassword(itemTO.isPassword());",
                "+                        item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());",
                "+                        item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());",
                "                         item.setOrgUnit(orgUnit);",
                "@@ -478,3 +482,10 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {",
                "                         MappingItem item = entityFactory.newEntity(MappingItem.class);",
                "-                        BeanUtils.copyProperties(itemTO, item, ITEM_IGNORE_PROPERTIES);",
                "+                        item.setIntAttrName(itemTO.getIntAttrName());",
                "+                        item.setExtAttrName(itemTO.getExtAttrName());",
                "+                        item.setPurpose(itemTO.getPurpose());",
                "+                        item.setMandatoryCondition(itemTO.getMandatoryCondition());",
                "+                        item.setConnObjectKey(itemTO.isConnObjectKey());",
                "+                        item.setPassword(itemTO.isPassword());",
                "+                        item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());",
                "+                        item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());",
                "                         item.setMapping(mapping);",
                "@@ -583,3 +594,10 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {",
                "             itemTO.setKey(item.getKey());",
                "-            BeanUtils.copyProperties(item, itemTO, ITEM_IGNORE_PROPERTIES);",
                "+            itemTO.setIntAttrName(item.getIntAttrName());",
                "+            itemTO.setExtAttrName(item.getExtAttrName());",
                "+            itemTO.setPurpose(item.getPurpose());",
                "+            itemTO.setMandatoryCondition(item.getMandatoryCondition());",
                "+            itemTO.setConnObjectKey(item.isConnObjectKey());",
                "+            itemTO.setPassword(item.isPassword());",
                "+            itemTO.setPropagationJEXLTransformer(item.getPropagationJEXLTransformer());",
                "+            itemTO.setPullJEXLTransformer(item.getPullJEXLTransformer());",
                "@@ -637,3 +655,10 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {",
                "                 itemTO.setKey(linkingMappingItem.getKey());",
                "-                BeanUtils.copyProperties(linkingMappingItem, itemTO, ITEM_IGNORE_PROPERTIES);",
                "+                itemTO.setIntAttrName(linkingMappingItem.getIntAttrName());",
                "+                itemTO.setExtAttrName(linkingMappingItem.getExtAttrName());",
                "+                itemTO.setPurpose(linkingMappingItem.getPurpose());",
                "+                itemTO.setMandatoryCondition(linkingMappingItem.getMandatoryCondition());",
                "+                itemTO.setConnObjectKey(linkingMappingItem.isConnObjectKey());",
                "+                itemTO.setPassword(linkingMappingItem.isPassword());",
                "+                itemTO.setPropagationJEXLTransformer(linkingMappingItem.getPropagationJEXLTransformer());",
                "+                itemTO.setPullJEXLTransformer(linkingMappingItem.getPullJEXLTransformer());",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java",
                "index f91378f82f..623c3dfe63 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java",
                "@@ -35,3 +35,2 @@ import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                " import org.apache.syncope.core.persistence.api.entity.VirSchema;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;",
                "@@ -64,4 +63,2 @@ public class SchemaDataBinderImpl implements SchemaDataBinder {",
                "-    private static final String[] IGNORE_PROPERTIES = { \"anyTypeClass\", \"provision\", \"resource\", \"validator\" };",
                "-",
                "     @Autowired",
                "@@ -121,3 +118,15 @@ public class SchemaDataBinderImpl implements SchemaDataBinder {",
                "-        BeanUtils.copyProperties(schemaTO, schema, IGNORE_PROPERTIES);",
                "+        schema.setKey(schemaTO.getKey());",
                "+        schema.setType(schemaTO.getType());",
                "+        schema.setCipherAlgorithm(schemaTO.getCipherAlgorithm());",
                "+        schema.setConversionPattern(schemaTO.getConversionPattern());",
                "+        schema.setEnumerationKeys(schemaTO.getEnumerationKeys());",
                "+        schema.setEnumerationValues(schemaTO.getEnumerationValues());",
                "+        schema.setMandatoryCondition(schemaTO.getMandatoryCondition());",
                "+        schema.setMimeType(schemaTO.getMimeType());",
                "+        schema.setMultivalue(schemaTO.isMultivalue());",
                "+        schema.setReadonly(schemaTO.isReadonly());",
                "+        schema.setSecretKey(schemaTO.getSecretKey());",
                "+        schema.setUniqueConstraint(schemaTO.isUniqueConstraint());",
                "+",
                "         labels(schemaTO, schema);",
                "@@ -203,4 +212,15 @@ public class SchemaDataBinderImpl implements SchemaDataBinder {",
                "         PlainSchemaTO schemaTO = new PlainSchemaTO();",
                "+        schemaTO.setKey(schema.getKey());",
                "+        schemaTO.setType(schema.getType());",
                "+        schemaTO.setCipherAlgorithm(schema.getCipherAlgorithm());",
                "+        schemaTO.setConversionPattern(schema.getConversionPattern());",
                "+        schemaTO.setEnumerationKeys(schema.getEnumerationKeys());",
                "+        schemaTO.setEnumerationValues(schema.getEnumerationValues());",
                "+        schemaTO.setMandatoryCondition(schema.getMandatoryCondition());",
                "+        schemaTO.setMimeType(schema.getMimeType());",
                "+        schemaTO.setMultivalue(schema.isMultivalue());",
                "+        schemaTO.setReadonly(schema.isReadonly());",
                "+        schemaTO.setSecretKey(schema.getSecretKey());",
                "+        schemaTO.setUniqueConstraint(schema.isUniqueConstraint());",
                "-        BeanUtils.copyProperties(schema, schemaTO, IGNORE_PROPERTIES);",
                "         labels(schema, schemaTO);",
                "@@ -236,3 +256,5 @@ public class SchemaDataBinderImpl implements SchemaDataBinder {",
                "-        BeanUtils.copyProperties(schemaTO, schema, IGNORE_PROPERTIES);",
                "+        schema.setKey(schemaTO.getKey());",
                "+        schema.setExpression(schemaTO.getExpression());",
                "+",
                "         labels(schemaTO, schema);",
                "@@ -279,4 +301,5 @@ public class SchemaDataBinderImpl implements SchemaDataBinder {",
                "         DerSchemaTO schemaTO = new DerSchemaTO();",
                "+        schemaTO.setKey(schema.getKey());",
                "+        schemaTO.setExpression(schema.getExpression());",
                "-        BeanUtils.copyProperties(schema, schemaTO, IGNORE_PROPERTIES);",
                "         labels(schema, schemaTO);",
                "@@ -290,3 +313,6 @@ public class SchemaDataBinderImpl implements SchemaDataBinder {",
                "     private VirSchema fill(final VirSchema schema, final VirSchemaTO schemaTO) {",
                "-        BeanUtils.copyProperties(schemaTO, schema, IGNORE_PROPERTIES);",
                "+        schema.setKey(schemaTO.getKey());",
                "+        schema.setExtAttrName(schemaTO.getExtAttrName());",
                "+        schema.setReadonly(schema.isReadonly());",
                "+",
                "         labels(schemaTO, schema);",
                "@@ -352,4 +378,6 @@ public class SchemaDataBinderImpl implements SchemaDataBinder {",
                "         VirSchemaTO schemaTO = new VirSchemaTO();",
                "+        schemaTO.setKey(schema.getKey());",
                "+        schemaTO.setExtAttrName(schema.getExtAttrName());",
                "+        schemaTO.setReadonly(schema.isReadonly());",
                "-        BeanUtils.copyProperties(schema, schemaTO, IGNORE_PROPERTIES);",
                "         labels(schema, schemaTO);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SecurityQuestionDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SecurityQuestionDataBinderImpl.java",
                "index ed971eb821..a291bafe14 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SecurityQuestionDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SecurityQuestionDataBinderImpl.java",
                "@@ -24,3 +24,2 @@ import org.apache.syncope.core.persistence.api.entity.EntityFactory;",
                " import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -37,4 +36,4 @@ public class SecurityQuestionDataBinderImpl implements SecurityQuestionDataBinde",
                "         SecurityQuestionTO securityQuestionTO = new SecurityQuestionTO();",
                "-",
                "-        BeanUtils.copyProperties(securityQuestion, securityQuestionTO);",
                "+        securityQuestionTO.setKey(securityQuestion.getKey());",
                "+        securityQuestionTO.setContent(securityQuestion.getContent());",
                "@@ -52,3 +51,3 @@ public class SecurityQuestionDataBinderImpl implements SecurityQuestionDataBinde",
                "     public void update(final SecurityQuestion securityQuestion, final SecurityQuestionTO securityQuestionTO) {",
                "-        BeanUtils.copyProperties(securityQuestionTO, securityQuestion, \"key\");",
                "+        securityQuestion.setContent(securityQuestionTO.getContent());",
                "     }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java",
                "index 6fcc05e7d7..aae4c62fd9 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java",
                "@@ -20,2 +20,3 @@ package org.apache.syncope.core.provisioning.java.data;",
                "+import java.util.Objects;",
                " import java.util.stream.Collectors;",
                "@@ -52,3 +53,2 @@ import org.apache.syncope.core.persistence.api.entity.task.TaskUtils;",
                " import org.apache.syncope.core.provisioning.api.job.JobNamer;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;",
                "@@ -82,8 +82,2 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "-    private static final String[] IGNORE_TASK_PROPERTIES = {",
                "-        \"destinationRealm\", \"templates\", \"filters\", \"executions\", \"resource\", \"matchingRule\", \"unmatchingRule\",",
                "-        \"notification\", \"jobDelegate\", \"actions\" };",
                "-",
                "-    private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = { \"key\", \"task\" };",
                "-",
                "     @Autowired",
                "@@ -115,6 +109,6 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "-    private void fill(final ProvisioningTask task, final ProvisioningTaskTO taskTO) {",
                "-        if (task instanceof PushTask && taskTO instanceof PushTaskTO) {",
                "-            PushTask pushTask = (PushTask) task;",
                "-            PushTaskTO pushTaskTO = (PushTaskTO) taskTO;",
                "+    private void fill(final ProvisioningTask provisioningTask, final ProvisioningTaskTO provisioningTaskTO) {",
                "+        if (provisioningTask instanceof PushTask && provisioningTaskTO instanceof PushTaskTO) {",
                "+            PushTask pushTask = (PushTask) provisioningTask;",
                "+            PushTaskTO pushTaskTO = (PushTaskTO) provisioningTaskTO;",
                "@@ -160,5 +154,5 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "                     removeIf(anyFilter -> !pushTaskTO.getFilters().containsKey(anyFilter.getAnyType().getKey()));",
                "-        } else if (task instanceof PullTask && taskTO instanceof PullTaskTO) {",
                "-            PullTask pullTask = (PullTask) task;",
                "-            PullTaskTO pullTaskTO = (PullTaskTO) taskTO;",
                "+        } else if (provisioningTask instanceof PullTask && provisioningTaskTO instanceof PullTaskTO) {",
                "+            PullTask pullTask = (PullTask) provisioningTask;",
                "+            PullTaskTO pullTaskTO = (PullTaskTO) provisioningTaskTO;",
                "@@ -226,8 +220,8 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "         // 3. fill the remaining fields",
                "-        task.setPerformCreate(taskTO.isPerformCreate());",
                "-        task.setPerformUpdate(taskTO.isPerformUpdate());",
                "-        task.setPerformDelete(taskTO.isPerformDelete());",
                "-        task.setSyncStatus(taskTO.isSyncStatus());",
                "+        provisioningTask.setPerformCreate(provisioningTaskTO.isPerformCreate());",
                "+        provisioningTask.setPerformUpdate(provisioningTaskTO.isPerformUpdate());",
                "+        provisioningTask.setPerformDelete(provisioningTaskTO.isPerformDelete());",
                "+        provisioningTask.setSyncStatus(provisioningTaskTO.isSyncStatus());",
                "-        taskTO.getActions().forEach(action -> {",
                "+        provisioningTaskTO.getActions().forEach(action -> {",
                "             Implementation implementation = implementationDAO.find(action);",
                "@@ -236,3 +230,3 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "             } else {",
                "-                task.add(implementation);",
                "+                provisioningTask.add(implementation);",
                "             }",
                "@@ -240,3 +234,3 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "         // remove all implementations not contained in the TO",
                "-        task.getActions().removeIf(implementation -> !taskTO.getActions().contains(implementation.getKey()));",
                "+        provisioningTask.getActions().removeIf(impl -> !provisioningTaskTO.getActions().contains(impl.getKey()));",
                "     }",
                "@@ -315,7 +309,7 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "         ExecTO execTO = new ExecTO();",
                "-        BeanUtils.copyProperties(execution, execTO, IGNORE_TASK_EXECUTION_PROPERTIES);",
                "-",
                "-        if (execution.getKey() != null) {",
                "-            execTO.setKey(execution.getKey());",
                "-        }",
                "+        execTO.setKey(execution.getKey());",
                "+        execTO.setStatus(execution.getStatus());",
                "+        execTO.setMessage(execution.getMessage());",
                "+        execTO.setStart(execution.getStart());",
                "+        execTO.setEnd(execution.getEnd());",
                "@@ -330,6 +324,12 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "-    private void setExecTime(final SchedTaskTO taskTO, final Task task) {",
                "-        taskTO.setLastExec(taskTO.getStart());",
                "+    private void fill(final SchedTaskTO schedTaskTO, final SchedTask schedTask) {",
                "+        schedTaskTO.setName(schedTask.getName());",
                "+        schedTaskTO.setDescription(schedTask.getDescription());",
                "+        schedTaskTO.setStart(schedTask.getStartAt());",
                "+        schedTaskTO.setCronExpression(schedTask.getCronExpression());",
                "+        schedTaskTO.setActive(schedTask.isActive());",
                "-        String triggerName = JobNamer.getTriggerName(JobNamer.getJobKey(task).getName());",
                "+        schedTaskTO.setLastExec(schedTaskTO.getStart());",
                "+",
                "+        String triggerName = JobNamer.getTriggerName(JobNamer.getJobKey(schedTask).getName());",
                "         try {",
                "@@ -338,4 +338,4 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "             if (trigger != null) {",
                "-                taskTO.setLastExec(trigger.getPreviousFireTime());",
                "-                taskTO.setNextExec(trigger.getNextFireTime());",
                "+                schedTaskTO.setLastExec(trigger.getPreviousFireTime());",
                "+                schedTaskTO.setNextExec(trigger.getNextFireTime());",
                "             }",
                "@@ -344,2 +344,17 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "         }",
                "+",
                "+        if (schedTaskTO instanceof ProvisioningTaskTO && schedTask instanceof ProvisioningTask) {",
                "+            ProvisioningTaskTO provisioningTaskTO = (ProvisioningTaskTO) schedTaskTO;",
                "+            ProvisioningTask provisioningTask = (ProvisioningTask) schedTask;",
                "+",
                "+            provisioningTaskTO.setResource(provisioningTask.getResource().getKey());",
                "+",
                "+            provisioningTaskTO.getActions().addAll(",
                "+                    provisioningTask.getActions().stream().map(Entity::getKey).collect(Collectors.toList()));",
                "+",
                "+            provisioningTaskTO.setPerformCreate(provisioningTask.isPerformCreate());",
                "+            provisioningTaskTO.setPerformUpdate(provisioningTask.isPerformUpdate());",
                "+            provisioningTaskTO.setPerformDelete(provisioningTask.isPerformDelete());",
                "+            provisioningTaskTO.setSyncStatus(provisioningTask.isSyncStatus());",
                "+        }",
                "     }",
                "@@ -349,3 +364,3 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "         T taskTO = taskUtils.newTaskTO();",
                "-        BeanUtils.copyProperties(task, taskTO, IGNORE_TASK_PROPERTIES);",
                "+        taskTO.setKey(task.getKey());",
                "@@ -362,4 +377,4 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "             task.getExecs().stream().",
                "-                    filter(execution -> execution != null).",
                "-                    forEachOrdered(execution -> taskTO.getExecutions().add(getExecTO(execution)));",
                "+                    filter(Objects::nonNull).",
                "+                    forEach(execution -> taskTO.getExecutions().add(getExecTO(execution)));",
                "         }",
                "@@ -371,6 +386,11 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "+                propagationTaskTO.setOperation(propagationTask.getOperation());",
                "+                propagationTaskTO.setConnObjectKey(propagationTask.getConnObjectKey());",
                "+                propagationTaskTO.setOldConnObjectKey(propagationTask.getOldConnObjectKey());",
                "+                propagationTaskTO.setAttributes(propagationTask.getSerializedAttributes());",
                "+                propagationTaskTO.setResource(propagationTask.getResource().getKey());",
                "+                propagationTaskTO.setObjectClassName(propagationTask.getObjectClassName());",
                "                 propagationTaskTO.setAnyTypeKind(propagationTask.getAnyTypeKind());",
                "+                propagationTaskTO.setAnyType(propagationTask.getAnyType());",
                "                 propagationTaskTO.setEntityKey(propagationTask.getEntityKey());",
                "-                propagationTaskTO.setResource(propagationTask.getResource().getKey());",
                "-                propagationTaskTO.setAttributes(propagationTask.getSerializedAttributes());",
                "                 break;",
                "@@ -381,3 +401,3 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "-                setExecTime(schedTaskTO, task);",
                "+                fill(schedTaskTO, schedTask);",
                "@@ -392,6 +412,5 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "-                setExecTime(pullTaskTO, task);",
                "+                fill(pullTaskTO, pullTask);",
                "                 pullTaskTO.setDestinationRealm(pullTask.getDestinatioRealm().getFullPath());",
                "-                pullTaskTO.setResource(pullTask.getResource().getKey());",
                "                 pullTaskTO.setMatchingRule(pullTask.getMatchingRule() == null",
                "@@ -400,2 +419,3 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "                         ? UnmatchingRule.PROVISION : pullTask.getUnmatchingRule());",
                "+                pullTaskTO.setPullMode(pullTask.getPullMode());",
                "@@ -405,5 +425,2 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "-                pullTaskTO.getActions().addAll(",
                "-                        pullTask.getActions().stream().map(Entity::getKey).collect(Collectors.toList()));",
                "-",
                "                 pullTask.getTemplates().forEach(template -> {",
                "@@ -419,6 +436,5 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "-                setExecTime(pushTaskTO, task);",
                "+                fill(pushTaskTO, pushTask);",
                "                 pushTaskTO.setSourceRealm(pushTask.getSourceRealm().getFullPath());",
                "-                pushTaskTO.setResource(pushTask.getResource().getKey());",
                "                 pushTaskTO.setMatchingRule(pushTask.getMatchingRule() == null",
                "@@ -428,5 +444,2 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "-                pushTaskTO.getActions().addAll(",
                "-                        pushTask.getActions().stream().map(Entity::getKey).collect(Collectors.toList()));",
                "-",
                "                 pushTask.getFilters().forEach(filter -> {",
                "@@ -443,2 +456,8 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "                 notificationTaskTO.setEntityKey(notificationTask.getEntityKey());",
                "+                notificationTaskTO.setSender(notificationTask.getSender());",
                "+                notificationTaskTO.getRecipients().addAll(notificationTask.getRecipients());",
                "+                notificationTaskTO.setSubject(notificationTask.getSubject());",
                "+                notificationTaskTO.setHtmlBody(notificationTask.getHtmlBody());",
                "+                notificationTaskTO.setTextBody(notificationTask.getTextBody());",
                "+                notificationTaskTO.setExecuted(notificationTask.isExecuted());",
                "                 if (notificationTask.isExecuted() && StringUtils.isBlank(taskTO.getLatestExecStatus())) {",
                "@@ -446,2 +465,3 @@ public class TaskDataBinderImpl implements TaskDataBinder {",
                "                 }",
                "+                notificationTaskTO.setTraceLevel(notificationTask.getTraceLevel());",
                "                 break;",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "index 58c2d7d155..e50f59e6c2 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "@@ -56,3 +56,2 @@ import org.apache.syncope.core.provisioning.api.data.UserDataBinder;",
                " import org.apache.syncope.core.spring.security.AuthContextUtils;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;",
                "@@ -81,7 +80,2 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "-    private static final String[] IGNORE_PROPERTIES = {",
                "-        \"type\", \"realm\", \"auxClasses\", \"roles\", \"dynRoles\", \"relationships\", \"memberships\", \"dynMemberships\",",
                "-        \"plainAttrs\", \"derAttrs\", \"virAttrs\", \"resources\", \"securityQuestion\", \"securityAnswer\"",
                "-    };",
                "-",
                "     @Autowired",
                "@@ -569,5 +563,18 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "         UserTO userTO = new UserTO();",
                "-",
                "-        BeanUtils.copyProperties(user, userTO, IGNORE_PROPERTIES);",
                "+        userTO.setKey(user.getKey());",
                "+        userTO.setUsername(user.getUsername());",
                "+        userTO.setPassword(user.getPassword());",
                "+        userTO.setType(user.getType().getKey());",
                "+        userTO.setCreationDate(user.getCreationDate());",
                "+        userTO.setCreator(user.getCreator());",
                "+        userTO.setLastChangeDate(user.getLastChangeDate());",
                "+        userTO.setLastModifier(user.getLastModifier());",
                "+        userTO.setStatus(user.getStatus());",
                "         userTO.setSuspended(BooleanUtils.isTrue(user.isSuspended()));",
                "+        userTO.setChangePwdDate(user.getChangePwdDate());",
                "+        userTO.setFailedLogins(user.getFailedLogins());",
                "+        userTO.setLastLoginDate(user.getLastLoginDate());",
                "+        userTO.setMustChangePassword(user.isMustChangePassword());",
                "+        userTO.setToken(user.getToken());",
                "+        userTO.setTokenExpireTime(user.getTokenExpireTime());",
                "diff --git a/core/spring/src/main/java/org/apache/syncope/core/spring/BeanUtils.java b/core/spring/src/main/java/org/apache/syncope/core/spring/BeanUtils.java",
                "deleted file mode 100644",
                "index 980b02274e..0000000000",
                "--- a/core/spring/src/main/java/org/apache/syncope/core/spring/BeanUtils.java",
                "+++ /dev/null",
                "@@ -1,193 +0,0 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one",
                "- * or more contributor license agreements.  See the NOTICE file",
                "- * distributed with this work for additional information",
                "- * regarding copyright ownership.  The ASF licenses this file",
                "- * to you under the Apache License, Version 2.0 (the",
                "- * \"License\"); you may not use this file except in compliance",
                "- * with the License.  You may obtain a copy of the License at",
                "- *",
                "- *   http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing,",
                "- * software distributed under the License is distributed on an",
                "- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "- * KIND, either express or implied.  See the License for the",
                "- * specific language governing permissions and limitations",
                "- * under the License.",
                "- */",
                "-package org.apache.syncope.core.spring;",
                "-",
                "-import static org.springframework.beans.BeanUtils.getPropertyDescriptor;",
                "-import static org.springframework.beans.BeanUtils.getPropertyDescriptors;",
                "-",
                "-import java.beans.PropertyDescriptor;",
                "-import java.lang.reflect.Method;",
                "-import java.lang.reflect.Modifier;",
                "-import java.util.Arrays;",
                "-import java.util.Collection;",
                "-import java.util.Collections;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-import org.springframework.beans.FatalBeanException;",
                "-import org.springframework.util.Assert;",
                "-import org.springframework.util.ClassUtils;",
                "-",
                "-/**",
                "- * Overrides Spring's BeanUtils not using collection setters but instead getters + addAll() / putAll(),",
                "- * in a JAXB friendly way.",
                "- *",
                "- * Refer to <a href=\"https://issues.apache.org/jira/browse/SYNCOPE-246\">SYNCOPE-246</a> for more information.",
                "- *",
                "- * @see org.springframework.beans.BeanUtils",
                "- */",
                "-public final class BeanUtils {",
                "-",
                "-    private BeanUtils() {",
                "-        // Empty private constructor for static utility classes",
                "-    }",
                "-",
                "-    /**",
                "-     * Copy the property values of the given source bean into the target bean.",
                "-     * <p>",
                "-     * Note: The source and target classes do not have to match or even be derived",
                "-     * from each other, as long as the properties match. Any bean properties that the",
                "-     * source bean exposes but the target bean does not will silently be ignored.",
                "-     * </p><p>",
                "-     * This is just a convenience method. For more complex transfer needs,",
                "-     * consider using a full BeanWrapper.",
                "-     * </p>",
                "-     *",
                "-     * @param source the source bean",
                "-     * @param target the target bean",
                "-     * @see org.springframework.beans.BeanWrapper",
                "-     */",
                "-    public static void copyProperties(final Object source, final Object target) {",
                "-        copyProperties(source, target, null, (String[]) null);",
                "-    }",
                "-",
                "-    /**",
                "-     * Copy the property values of the given source bean into the given target bean,",
                "-     * only setting properties defined in the given \"editable\" class (or interface).",
                "-     * <p>",
                "-     * Note: The source and target classes do not have to match or even be derived",
                "-     * from each other, as long as the properties match. Any bean properties that the",
                "-     * source bean exposes but the target bean does not will silently be ignored.",
                "-     * </p><p>",
                "-     * This is just a convenience method. For more complex transfer needs,",
                "-     * consider using a full BeanWrapper.",
                "-     * </p>",
                "-     *",
                "-     * @param source the source bean",
                "-     * @param target the target bean",
                "-     * @param editable the class (or interface) to restrict property setting to",
                "-     * @see org.springframework.beans.BeanWrapper",
                "-     */",
                "-    public static void copyProperties(final Object source, final Object target, final Class<?> editable) {",
                "-        copyProperties(source, target, editable, (String[]) null);",
                "-    }",
                "-",
                "-    /**",
                "-     * Copy the property values of the given source bean into the given target bean,",
                "-     * ignoring the given \"ignoreProperties\".",
                "-     * <p>",
                "-     * Note: The source and target classes do not have to match or even be derived",
                "-     * from each other, as long as the properties match. Any bean properties that the",
                "-     * source bean exposes but the target bean does not will silently be ignored.",
                "-     * </p><p>",
                "-     * This is just a convenience method. For more complex transfer needs,",
                "-     * consider using a full BeanWrapper.",
                "-     * </p>",
                "-     *",
                "-     * @param source the source bean",
                "-     * @param target the target bean",
                "-     * @param ignoreProperties array of property names to ignore",
                "-     * @see org.springframework.beans.BeanWrapper",
                "-     */",
                "-    public static void copyProperties(final Object source, final Object target, final String... ignoreProperties) {",
                "-        copyProperties(source, target, null, ignoreProperties);",
                "-    }",
                "-",
                "-    /**",
                "-     * Copy the property values of the given source bean into the given target bean.",
                "-     * <p>",
                "-     * Note: The source and target classes do not have to match or even be derived",
                "-     * from each other, as long as the properties match. Any bean properties that the",
                "-     * source bean exposes but the target bean does not will silently be ignored.",
                "-     * </p>",
                "-     *",
                "-     * @param source the source bean",
                "-     * @param target the target bean",
                "-     * @param editable the class (or interface) to restrict property setting to",
                "-     * @param ignoreProperties array of property names to ignore",
                "-     * @see org.springframework.beans.BeanWrapper",
                "-     */",
                "-    @SuppressWarnings(\"unchecked\")",
                "-    private static void copyProperties(",
                "-            final Object source, final Object target, final Class<?> editable, final String... ignoreProperties) {",
                "-",
                "-        Assert.notNull(source, \"Source must not be null\");",
                "-        Assert.notNull(target, \"Target must not be null\");",
                "-",
                "-        Class<?> actualEditable = target.getClass();",
                "-        if (editable != null) {",
                "-            if (!editable.isInstance(target)) {",
                "-                throw new IllegalArgumentException(\"Target class [\" + target.getClass().getName()",
                "-                        + \"] not assignable to Editable class [\" + editable.getName() + \"]\");",
                "-            }",
                "-            actualEditable = editable;",
                "-        }",
                "-        PropertyDescriptor[] targetPds = getPropertyDescriptors(actualEditable);",
                "-        List<String> ignoreList = (ignoreProperties == null)",
                "-                ? Collections.<String>emptyList() : Arrays.asList(ignoreProperties);",
                "-",
                "-        for (PropertyDescriptor targetPd : targetPds) {",
                "-            if (ignoreProperties == null || (!ignoreList.contains(targetPd.getName()))) {",
                "-                PropertyDescriptor sourcePd = getPropertyDescriptor(source.getClass(), targetPd.getName());",
                "-                if (sourcePd != null) {",
                "-                    Method readMethod = sourcePd.getReadMethod();",
                "-                    if (readMethod != null) {",
                "-                        Method writeMethod = targetPd.getWriteMethod();",
                "-",
                "-                        try {",
                "-                            // Diverts from Spring's BeanUtils: if no write method is found and property is collection,",
                "-                            // try to use addAll() / putAll().",
                "-                            if (writeMethod == null) {",
                "-                                Object value = readMethod.invoke(source);",
                "-                                Method targetReadMethod = targetPd.getReadMethod();",
                "-                                if (targetReadMethod != null) {",
                "-                                    if (!Modifier.isPublic(targetReadMethod.getDeclaringClass().getModifiers())) {",
                "-                                        targetReadMethod.setAccessible(true);",
                "-                                    }",
                "-                                    Object destValue = targetReadMethod.invoke(target);",
                "-",
                "-                                    if (value instanceof Collection && destValue instanceof Collection) {",
                "-                                        ((Collection) destValue).clear();",
                "-                                        ((Collection) destValue).addAll((Collection) value);",
                "-                                    } else if (value instanceof Map && destValue instanceof Map) {",
                "-                                        ((Map) destValue).clear();",
                "-                                        ((Map) destValue).putAll((Map) value);",
                "-                                    }",
                "-                                }",
                "-                            } else if (ClassUtils.isAssignable(",
                "-                                    writeMethod.getParameterTypes()[0], readMethod.getReturnType())) {",
                "-",
                "-                                if (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers())) {",
                "-                                    readMethod.setAccessible(true);",
                "-                                }",
                "-                                Object value = readMethod.invoke(source);",
                "-                                if (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers())) {",
                "-                                    writeMethod.setAccessible(true);",
                "-                                }",
                "-                                writeMethod.invoke(target, value);",
                "-                            }",
                "-                        } catch (Throwable ex) {",
                "-                            throw new FatalBeanException(",
                "-                                    \"Could not copy property '\" + targetPd.getName() + \"' from source to target\", ex);",
                "-                        }",
                "-                    }",
                "-                }",
                "-            }",
                "-        }",
                "-    }",
                "-}",
                "diff --git a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/data/CamelRouteDataBinderImpl.java b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/data/CamelRouteDataBinderImpl.java",
                "index 5e7190afb6..e96f7db98d 100644",
                "--- a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/data/CamelRouteDataBinderImpl.java",
                "+++ b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/data/CamelRouteDataBinderImpl.java",
                "@@ -21,3 +21,2 @@ package org.apache.syncope.core.provisioning.camel.data;",
                " import org.apache.syncope.common.lib.to.CamelRouteTO;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;",
                "@@ -37,3 +36,6 @@ public class CamelRouteDataBinderImpl implements CamelRouteDataBinder {",
                "         CamelRouteTO routeTO = new CamelRouteTO();",
                "-        BeanUtils.copyProperties(route, routeTO);",
                "+        routeTO.setKey(route.getKey());",
                "+        routeTO.setAnyTypeKind(route.getAnyTypeKind());",
                "+        routeTO.setContent(route.getContent());",
                "+",
                "         return routeTO;",
                "@@ -46,3 +48,2 @@ public class CamelRouteDataBinderImpl implements CamelRouteDataBinder {",
                "     }",
                "-",
                " }",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java",
                "index c1d20b10f8..ac28126799 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java",
                "@@ -53,3 +53,2 @@ import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;",
                " import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.apache.syncope.core.spring.security.AuthContextUtils;",
                "@@ -70,2 +69,3 @@ import org.slf4j.Logger;",
                " import org.slf4j.LoggerFactory;",
                "+import org.springframework.beans.BeanUtils;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -79,4 +79,2 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "-    protected static final String[] PROPERTY_IGNORE_PROPS = { \"type\" };",
                "-",
                "     @Autowired",
                "@@ -310,3 +308,7 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "                 getForm(task.getProcessInstanceId(), task.getId(), fd.getFormKey(), fd.getFormProperties());",
                "-        BeanUtils.copyProperties(task, formTO);",
                "+        formTO.setCreateTime(task.getCreateTime());",
                "+        formTO.setDueDate(task.getDueDate());",
                "+        formTO.setExecutionId(task.getExecutionId());",
                "+        formTO.setFormKey(task.getFormKey());",
                "+        formTO.setOwner(task.getOwner());",
                "@@ -324,3 +326,7 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "                 task.getProcessInstanceId(), task.getId(), task.getFormKey(), props);",
                "-        BeanUtils.copyProperties(task, formTO);",
                "+        formTO.setCreateTime(task.getCreateTime());",
                "+        formTO.setDueDate(task.getDueDate());",
                "+        formTO.setExecutionId(task.getExecutionId());",
                "+        formTO.setFormKey(task.getFormKey());",
                "+        formTO.setOwner(task.getOwner());",
                "@@ -410,3 +416,8 @@ public class FlowableUserRequestHandler implements UserRequestHandler {",
                "             UserRequestFormProperty propertyTO = new UserRequestFormProperty();",
                "-            BeanUtils.copyProperties(fProp, propertyTO, PROPERTY_IGNORE_PROPS);",
                "+            propertyTO.setId(fProp.getId());",
                "+            propertyTO.setName(fProp.getName());",
                "+            propertyTO.setReadable(fProp.isReadable());",
                "+            propertyTO.setRequired(fProp.isRequired());",
                "+            propertyTO.setWritable(fProp.isWritable());",
                "+            propertyTO.setValue(fProp.getValue());",
                "             propertyTO.setType(fromFlowableFormType(fProp.getType()));",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java",
                "index f3f188024e..24e765d78e 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java",
                "@@ -37,3 +37,2 @@ import org.apache.syncope.core.flowable.api.WorkflowTaskManager;",
                " import org.apache.syncope.core.spring.security.AuthContextUtils;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.apache.syncope.core.persistence.api.entity.user.User;",
                "@@ -50,2 +49,3 @@ import org.flowable.engine.runtime.ProcessInstance;",
                " import org.flowable.task.api.Task;",
                "+import org.springframework.beans.BeanUtils;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "diff --git a/ext/oidcclient/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCProviderDataBinderImpl.java b/ext/oidcclient/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCProviderDataBinderImpl.java",
                "index 888d7a5ae4..bf3c5bb4e3 100644",
                "--- a/ext/oidcclient/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCProviderDataBinderImpl.java",
                "+++ b/ext/oidcclient/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCProviderDataBinderImpl.java",
                "@@ -43,3 +43,2 @@ import org.apache.syncope.core.provisioning.java.IntAttrNameParser;",
                " import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.slf4j.Logger;",
                "@@ -137,3 +136,9 @@ public class OIDCProviderDataBinderImpl implements OIDCProviderDataBinder {",
                "                         OIDCProviderItem item = entityFactory.newEntity(OIDCProviderItem.class);",
                "-                        BeanUtils.copyProperties(itemTO, item, ITEM_IGNORE_PROPERTIES);",
                "+                        item.setIntAttrName(itemTO.getIntAttrName());",
                "+                        item.setExtAttrName(itemTO.getExtAttrName());",
                "+                        item.setMandatoryCondition(itemTO.getMandatoryCondition());",
                "+                        item.setConnObjectKey(itemTO.isConnObjectKey());",
                "+                        item.setPassword(itemTO.isPassword());",
                "+                        item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());",
                "+                        item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());",
                "                         item.setOP(op);",
                "@@ -221,3 +226,9 @@ public class OIDCProviderDataBinderImpl implements OIDCProviderDataBinder {",
                "             itemTO.setKey(item.getKey());",
                "-            BeanUtils.copyProperties(item, itemTO, ITEM_IGNORE_PROPERTIES);",
                "+            itemTO.setIntAttrName(item.getIntAttrName());",
                "+            itemTO.setExtAttrName(item.getExtAttrName());",
                "+            itemTO.setMandatoryCondition(item.getMandatoryCondition());",
                "+            itemTO.setConnObjectKey(item.isConnObjectKey());",
                "+            itemTO.setPassword(item.isPassword());",
                "+            itemTO.setPropagationJEXLTransformer(item.getPropagationJEXLTransformer());",
                "+            itemTO.setPullJEXLTransformer(item.getPullJEXLTransformer());",
                "             itemTO.setPurpose(MappingPurpose.NONE);",
                "diff --git a/ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java b/ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java",
                "index 85c693a343..fe0f8f0305 100644",
                "--- a/ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java",
                "+++ b/ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java",
                "@@ -44,3 +44,2 @@ import org.apache.syncope.core.provisioning.java.IntAttrNameParser;",
                " import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;",
                "-import org.apache.syncope.core.spring.BeanUtils;",
                " import org.slf4j.Logger;",
                "@@ -55,4 +54,2 @@ public class SAML2IdPDataBinderImpl implements SAML2IdPDataBinder {",
                "-    private static final String[] ITEM_IGNORE_PROPERTIES = { \"key\", \"purpose\" };",
                "-",
                "     @Autowired",
                "@@ -137,3 +134,9 @@ public class SAML2IdPDataBinderImpl implements SAML2IdPDataBinder {",
                "                         SAML2IdPItem item = entityFactory.newEntity(SAML2IdPItem.class);",
                "-                        BeanUtils.copyProperties(itemTO, item, ITEM_IGNORE_PROPERTIES);",
                "+                        item.setIntAttrName(itemTO.getIntAttrName());",
                "+                        item.setExtAttrName(itemTO.getExtAttrName());",
                "+                        item.setMandatoryCondition(itemTO.getMandatoryCondition());",
                "+                        item.setConnObjectKey(itemTO.isConnObjectKey());",
                "+                        item.setPassword(itemTO.isPassword());",
                "+                        item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());",
                "+                        item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());",
                "                         item.setIdP(idp);",
                "@@ -219,3 +222,9 @@ public class SAML2IdPDataBinderImpl implements SAML2IdPDataBinder {",
                "             itemTO.setKey(item.getKey());",
                "-            BeanUtils.copyProperties(item, itemTO, ITEM_IGNORE_PROPERTIES);",
                "+            itemTO.setIntAttrName(item.getIntAttrName());",
                "+            itemTO.setExtAttrName(item.getExtAttrName());",
                "+            itemTO.setMandatoryCondition(item.getMandatoryCondition());",
                "+            itemTO.setConnObjectKey(item.isConnObjectKey());",
                "+            itemTO.setPassword(item.isPassword());",
                "+            itemTO.setPropagationJEXLTransformer(item.getPropagationJEXLTransformer());",
                "+            itemTO.setPullJEXLTransformer(item.getPullJEXLTransformer());",
                "             itemTO.setPurpose(MappingPurpose.NONE);"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/NotificationDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RemediationDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SecurityQuestionDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "core/spring/src/main/java/org/apache/syncope/core/spring/BeanUtils.java",
                "ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/data/CamelRouteDataBinderImpl.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java",
                "ext/oidcclient/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCProviderDataBinderImpl.java",
                "ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1392": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a6e9cd8fef2112cefb5c962dd76b6cd31e89e312"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: report, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1392",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0f74c3a3597d7b5b354f6c33e394f684927a76e9",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1535484992,
            "hunks": 14,
            "message": "Kubernetes Install - This closes #83 The helm charts and instructions for how to install in Kubernetes.   This is a bare bones install and can be updated to include self healing and auto scaling.  It currently works with Postgres",
            "diff": [
                "diff --git a/docker/src/main/resources/docker-compose/docker-compose-ha.yml b/docker/src/main/resources/docker-compose/docker-compose-ha.yml",
                "new file mode 100644",
                "index 0000000000..0eb26f55c1",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/docker-compose/docker-compose-ha.yml",
                "@@ -0,0 +1,93 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+",
                "+# Full deployment (Core, Console, Enduser) on PostgreSQL, with high-availability set for Core",
                "+# http://syncope.apache.org/docs/reference-guide.html#high-availability",
                "+",
                "+version: '3.3'",
                "+",
                "+services:",
                "+   db:",
                "+     image: crunchydata/crunchy-postgres:centos7-10.3-1.8.2",
                "+     restart: always",
                "+     environment:",
                "+       PG_ROOT_PASSWORD: postgres",
                "+       PG_MODE: primary",
                "+       PG_PRIMARY_USER: postgres",
                "+       PG_PRIMARY_PASSWORD: postgres",
                "+       PG_PRIMARY_HOST: localhost",
                "+       PG_PRIMARY_PORT: 5432",
                "+       PG_DATABASE: syncope",
                "+       PG_USER: syncope",
                "+       PG_PASSWORD: syncope",
                "+",
                "+   syncope1:",
                "+     depends_on:",
                "+       - db",
                "+     image: apache/syncope:${syncope.version}",
                "+     ports:",
                "+       - \"18080:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       DBMS: postgresql",
                "+       DB_URL: jdbc:postgresql://db:5432/syncope",
                "+       DB_USER: syncope",
                "+       DB_PASSWORD: syncope",
                "+       DB_POOL_MAX: 10",
                "+       DB_POOL_MIN: 2",
                "+       OPENJPA_REMOTE_COMMIT: tcp(Addresses=syncope1;syncope2)",
                "+",
                "+   syncope2:",
                "+     depends_on:",
                "+       - db",
                "+     image: apache/syncope:${syncope.version}",
                "+     ports:",
                "+       - \"18081:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       DBMS: postgresql",
                "+       DB_URL: jdbc:postgresql://db:5432/syncope",
                "+       DB_USER: syncope",
                "+       DB_PASSWORD: syncope",
                "+       DB_POOL_MAX: 10",
                "+       DB_POOL_MIN: 2",
                "+       OPENJPA_REMOTE_COMMIT: tcp(Addresses=syncope1;syncope2)",
                "+",
                "+   syncope-console:",
                "+     depends_on:",
                "+       - syncope1",
                "+     image: apache/syncope-console:${syncope.version}",
                "+     ports:",
                "+       - \"28080:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       CORE_SCHEME: http",
                "+       CORE_HOST: syncope1",
                "+       CORE_PORT: 8080",
                "+",
                "+   syncope-enduser:",
                "+     depends_on:",
                "+       - syncope1",
                "+     image: apache/syncope-enduser:${syncope.version}",
                "+     ports:",
                "+       - \"38080:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       CORE_SCHEME: http",
                "+       CORE_HOST: syncope1",
                "+       CORE_PORT: 8080",
                "+       DOMAIN: Master",
                "diff --git a/docker/src/main/resources/docker-compose/docker-compose-mariadb.yml b/docker/src/main/resources/docker-compose/docker-compose-mariadb.yml",
                "new file mode 100644",
                "index 0000000000..65851bb69b",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/docker-compose/docker-compose-mariadb.yml",
                "@@ -0,0 +1,71 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+",
                "+# Full deployment (Core, Console, Enduser) on MariaDB",
                "+",
                "+version: '3.3'",
                "+",
                "+services:",
                "+   db:",
                "+     image: mariadb:10.3.7",
                "+     restart: always",
                "+     environment:",
                "+       MYSQL_ROOT_PASSWORD: password",
                "+       MYSQL_DATABASE: syncope",
                "+       MYSQL_USER: syncope",
                "+       MYSQL_PASSWORD: syncope",
                "+",
                "+   syncope:",
                "+     depends_on:",
                "+       - db",
                "+     image: apache/syncope:${syncope.version}",
                "+     ports:",
                "+       - \"18080:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       DBMS: mariadb",
                "+       DB_URL: jdbc:mysql://db:3306/syncope?characterEncoding=UTF-8&relaxAutoCommit=true&useSSL=false",
                "+       DB_USER: syncope",
                "+       DB_PASSWORD: syncope",
                "+       DB_POOL_MAX: 10",
                "+       DB_POOL_MIN: 2",
                "+       OPENJPA_REMOTE_COMMIT: sjvm",
                "+",
                "+   syncope-console:",
                "+     depends_on:",
                "+       - syncope",
                "+     image: apache/syncope-console:${syncope.version}",
                "+     ports:",
                "+       - \"28080:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       CORE_SCHEME: http",
                "+       CORE_HOST: syncope",
                "+       CORE_PORT: 8080",
                "+",
                "+   syncope-enduser:",
                "+     depends_on:",
                "+       - syncope",
                "+     image: apache/syncope-enduser:${syncope.version}",
                "+     ports:",
                "+       - \"38080:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       CORE_SCHEME: http",
                "+       CORE_HOST: syncope",
                "+       CORE_PORT: 8080",
                "+       DOMAIN: Master",
                "diff --git a/docker/src/main/resources/docker-compose/docker-compose-mssql.yml b/docker/src/main/resources/docker-compose/docker-compose-mssql.yml",
                "new file mode 100644",
                "index 0000000000..462f7491cc",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/docker-compose/docker-compose-mssql.yml",
                "@@ -0,0 +1,73 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+",
                "+# Full deployment (Core, Console, Enduser) on MS SQL Server",
                "+",
                "+version: '3.3'",
                "+",
                "+services:",
                "+   db:",
                "+     image: mcmoe/mssqldocker:latest",
                "+     restart: always",
                "+     environment:",
                "+       ACCEPT_EULA: Y",
                "+       SA_PASSWORD: 2astazeY",
                "+       MSSQL_DB: syncope",
                "+       MSSQL_USER: syncope",
                "+       MSSQL_PASSWORD: Syncope123",
                "+",
                "+   syncope:",
                "+     depends_on:",
                "+       - db",
                "+     image: apache/syncope:${syncope.version}",
                "+     ports:",
                "+       - \"18080:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       DBMS: mssql",
                "+       DB_URL: jdbc:sqlserver://db:1433;databaseName=syncope",
                "+       DB_SCHEMA: dbo",
                "+       DB_USER: syncope",
                "+       DB_PASSWORD: Syncope123",
                "+       DB_POOL_MAX: 10",
                "+       DB_POOL_MIN: 2",
                "+       OPENJPA_REMOTE_COMMIT: sjvm",
                "+",
                "+   syncope-console:",
                "+     depends_on:",
                "+       - syncope",
                "+     image: apache/syncope-console:${syncope.version}",
                "+     ports:",
                "+       - \"28080:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       CORE_SCHEME: http",
                "+       CORE_HOST: syncope",
                "+       CORE_PORT: 8080",
                "+",
                "+   syncope-enduser:",
                "+     depends_on:",
                "+       - syncope",
                "+     image: apache/syncope-enduser:${syncope.version}",
                "+     ports:",
                "+       - \"38080:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       CORE_SCHEME: http",
                "+       CORE_HOST: syncope",
                "+       CORE_PORT: 8080",
                "+       DOMAIN: Master",
                "diff --git a/docker/src/main/resources/docker-compose/docker-compose-mysql.yml b/docker/src/main/resources/docker-compose/docker-compose-mysql.yml",
                "new file mode 100644",
                "index 0000000000..d2af8c0b54",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/docker-compose/docker-compose-mysql.yml",
                "@@ -0,0 +1,70 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+",
                "+# Full deployment (Core, Console, Enduser) on MySQL",
                "+",
                "+version: '3.3'",
                "+",
                "+services:",
                "+   db:",
                "+     image: mysql/mysql-server:5.7",
                "+     restart: always",
                "+     environment:",
                "+       MYSQL_DATABASE: syncope",
                "+       MYSQL_USER: syncope",
                "+       MYSQL_PASSWORD: syncope",
                "+",
                "+   syncope:",
                "+     depends_on:",
                "+       - db",
                "+     image: apache/syncope:${syncope.version}",
                "+     ports:",
                "+       - \"18080:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       DBMS: mysql",
                "+       DB_URL: jdbc:mysql://db:3306/syncope?characterEncoding=UTF-8&relaxAutoCommit=true&useSSL=false",
                "+       DB_USER: syncope",
                "+       DB_PASSWORD: syncope",
                "+       DB_POOL_MAX: 10",
                "+       DB_POOL_MIN: 2",
                "+       OPENJPA_REMOTE_COMMIT: sjvm",
                "+",
                "+   syncope-console:",
                "+     depends_on:",
                "+       - syncope",
                "+     image: apache/syncope-console:${syncope.version}",
                "+     ports:",
                "+       - \"28080:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       CORE_SCHEME: http",
                "+       CORE_HOST: syncope",
                "+       CORE_PORT: 8080",
                "+",
                "+   syncope-enduser:",
                "+     depends_on:",
                "+       - syncope",
                "+     image: apache/syncope-enduser:${syncope.version}",
                "+     ports:",
                "+       - \"38080:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       CORE_SCHEME: http",
                "+       CORE_HOST: syncope",
                "+       CORE_PORT: 8080",
                "+       DOMAIN: Master",
                "diff --git a/docker/src/main/resources/docker-compose/docker-compose-postgresql.yml b/docker/src/main/resources/docker-compose/docker-compose-postgresql.yml",
                "new file mode 100644",
                "index 0000000000..862a051b22",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/docker-compose/docker-compose-postgresql.yml",
                "@@ -0,0 +1,76 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+",
                "+# Full deployment (Core, Console, Enduser) on PostgreSQL",
                "+",
                "+version: '3.3'",
                "+",
                "+services:",
                "+   db:",
                "+     image: crunchydata/crunchy-postgres:centos7-10.3-1.8.2",
                "+     restart: always",
                "+     environment:",
                "+       PG_ROOT_PASSWORD: postgres",
                "+       PG_MODE: primary",
                "+       PG_PRIMARY_USER: postgres",
                "+       PG_PRIMARY_PASSWORD: postgres",
                "+       PG_PRIMARY_HOST: localhost",
                "+       PG_PRIMARY_PORT: 5432",
                "+       PG_DATABASE: syncope",
                "+       PG_USER: syncope",
                "+       PG_PASSWORD: syncope",
                "+",
                "+   syncope:",
                "+     depends_on:",
                "+       - db",
                "+     image: apache/syncope:${syncope.version}",
                "+     ports:",
                "+       - \"18080:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       DBMS: postgresql",
                "+       DB_URL: jdbc:postgresql://db:5432/syncope",
                "+       DB_USER: syncope",
                "+       DB_PASSWORD: syncope",
                "+       DB_POOL_MAX: 10",
                "+       DB_POOL_MIN: 2",
                "+       OPENJPA_REMOTE_COMMIT: sjvm",
                "+",
                "+   syncope-console:",
                "+     depends_on:",
                "+       - syncope",
                "+     image: apache/syncope-console:${syncope.version}",
                "+     ports:",
                "+       - \"28080:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       CORE_SCHEME: http",
                "+       CORE_HOST: syncope",
                "+       CORE_PORT: 8080",
                "+",
                "+   syncope-enduser:",
                "+     depends_on:",
                "+       - syncope",
                "+     image: apache/syncope-enduser:${syncope.version}",
                "+     ports:",
                "+       - \"38080:8080\"",
                "+     restart: always",
                "+     environment:",
                "+       CORE_SCHEME: http",
                "+       CORE_HOST: syncope",
                "+       CORE_PORT: 8080",
                "+       DOMAIN: Master",
                "diff --git a/docker/src/main/resources/k8s/helm/postgres/Chart.yaml b/docker/src/main/resources/k8s/helm/postgres/Chart.yaml",
                "new file mode 100644",
                "index 0000000000..a7c8b8fcd7",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/k8s/helm/postgres/Chart.yaml",
                "@@ -0,0 +1,30 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+apiVersion: v1",
                "+name: basic",
                "+description: Deploys Postgres For Syncope",
                "+version: 1",
                "+appVersion: 2.0",
                "+keywords:",
                "+- postgresql",
                "+- postgres",
                "+- database",
                "+- sql",
                "+home: https://syncope.apache.org/",
                "+icon: https://syncope.apache.org/images/apache-syncope-logo-medium.png",
                "+sources:",
                "+- https://github.com/apache/syncope",
                "diff --git a/docker/src/main/resources/k8s/helm/postgres/templates/db-deployment.yaml b/docker/src/main/resources/k8s/helm/postgres/templates/db-deployment.yaml",
                "new file mode 100644",
                "index 0000000000..55f8755b4d",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/k8s/helm/postgres/templates/db-deployment.yaml",
                "@@ -0,0 +1,141 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+apiVersion: v1",
                "+kind: ConfigMap",
                "+metadata:",
                "+ name: postgres-environment-config",
                "+data:",
                "+ PG_DATABASE: \"{{.Values.databaseEnvironment.pgDatabase}}\"",
                "+ PG_MODE: \"{{.Values.databaseEnvironment.pgMode}}\"",
                "+ PG_PASSWORD: \"{{.Values.databaseEnvironment.pgPassword}}\"",
                "+ PG_PRIMARY_HOST: \"{{.Values.databaseEnvironment.pgPrimaryHost}}\"",
                "+ PG_PRIMARY_PASSWORD: \"{{.Values.databaseEnvironment.pgPrimaryPassword}}\"",
                "+ PG_PRIMARY_PORT: \"{{.Values.databaseEnvironment.pgPrimaryPort}}\"",
                "+ PG_PRIMARY_USER: \"{{.Values.databaseEnvironment.pgPrimaryUser}}\"",
                "+ PG_ROOT_PASSWORD: \"{{.Values.databaseEnvironment.pgRootPassword}}\"",
                "+ PG_USER: \"{{.Values.databaseEnvironment.pgUser}}\"",
                "+ PGDATA_PATH_OVERRIDE: \"{{.Values.databaseEnvironment.pgdataPathOverride}}\"",
                "+---",
                "+apiVersion: v1",
                "+kind: PersistentVolume",
                "+metadata:",
                "+  name: {{.Values.pv.name}}",
                "+spec:",
                "+  storageClassName: \"\"",
                "+  capacity:",
                "+    storage: {{.Values.pv.storage}}",
                "+  accessModes:",
                "+    - {{.Values.pv.mode}}",
                "+  hostPath:",
                "+    path: \"{{.Values.pv.path}}\"",
                "+  persistentVolumeReclaimPolicy: Retain",
                "+#  gcePersistentDisk:",
                "+#    pdName: postgres-data",
                "+#    fsType: ext4",
                "+---",
                "+apiVersion: v1",
                "+kind: PersistentVolumeClaim",
                "+metadata:",
                "+  name: {{.Values.pvc.name}}",
                "+spec:",
                "+  accessModes:",
                "+    - {{.Values.pv.mode}}",
                "+  resources:",
                "+    requests:",
                "+      storage: {{.Values.pv.storage}}",
                "+---",
                "+apiVersion: extensions/v1beta1",
                "+kind: Deployment",
                "+metadata:",
                "+  name: \"{{.Values.databaseConfig.name}}\"",
                "+  labels:",
                "+    name: \"{{.Values.databaseConfig.name}}\"",
                "+    heritage: {{.Release.Service | quote }}",
                "+    release: {{.Release.Name | quote }}",
                "+    chart: \"{{.Chart.Name}}-{{.Chart.Version}}\"",
                "+  annotations:",
                "+    \"helm.sh/created\": {{.Release.Time.Seconds | quote }}",
                "+spec:",
                "+  replicas: 1",
                "+  strategy: {}",
                "+  template:",
                "+    metadata:",
                "+      creationTimestamp: null",
                "+      labels:",
                "+        name: \"{{.Values.databaseConfig.name}}\"",
                "+    spec:",
                "+      securityContext:",
                "+        fsGroup: 1000",
                "+      containers:",
                "+      - image: \"{{.Values.databaseConfig.repository}}/{{.Values.databaseConfig.container}}:{{.Values.databaseConfig.tag}}\"",
                "+        name: {{.Values.databaseConfig.name}}",
                "+#TODO: Need to impliment the readiness probe",
                "+#        readinessProbe:",
                "+#          exec:",
                "+#            command:",
                "+#            - \"/opt/cpm/bin/readiness.sh\"",
                "+#          initialDelaySeconds: 10",
                "+#          timeoutSeconds: 1",
                "+#        livenessProbe:",
                "+#          exec:",
                "+#            command:",
                "+#            - \"/opt/cpm/bin/liveness.sh\"",
                "+#          initialDelaySeconds: 120",
                "+#          timeoutSeconds: 1",
                "+        envFrom:",
                "+        - configMapRef:",
                "+           name: postgres-environment-config",
                "+        volumeMounts:",
                "+          - mountPath: {{.Values.pv.path}}",
                "+            name: {{.Values.pv.name}}",
                "+        ports:",
                "+          - containerPort: {{.Values.databaseConfig.port}}",
                "+            protocol: TCP",
                "+        resources:",
                "+          requests:",
                "+            cpu: {{ .Values.databaseConfig.cpu }}",
                "+            memory: {{ .Values.databaseConfig.memory }}",
                "+      volumes:",
                "+        - name: {{.Values.pv.name}}",
                "+          persistentVolumeClaim:",
                "+            claimName: {{.Values.pvc.name}}",
                "+            readOnly: false",
                "+      restartPolicy: Always",
                "+status: {}",
                "+---",
                "+apiVersion: v1",
                "+kind: Service",
                "+metadata:",
                "+  name: \"{{.Values.databaseConfig.name}}\"",
                "+  labels:",
                "+    name: \"{{.Values.databaseConfig.name}}\"",
                "+    heritage: {{ .Release.Service | quote }}",
                "+    release: {{ .Release.Name | quote }}",
                "+    chart: \"{{.Chart.Name}}-{{.Chart.Version}}\"",
                "+spec:",
                "+  type: \"{{.Values.serviceType}}\"",
                "+  ports:",
                "+  - protocol: TCP",
                "+    port: {{.Values.databaseConfig.port}}",
                "+    targetPort: {{.Values.databaseConfig.port}}",
                "+    nodePort: 0",
                "+    name: \"{{.Values.databaseConfig.name}}\"",
                "+  selector:",
                "+    name: \"{{.Values.databaseConfig.name}}\"",
                "+  sessionAffinity: None",
                "+status:",
                "+  loadBalancer: {}",
                "\\ No newline at end of file",
                "diff --git a/docker/src/main/resources/k8s/helm/postgres/values.yaml b/docker/src/main/resources/k8s/helm/postgres/values.yaml",
                "new file mode 100644",
                "index 0000000000..51a60b3416",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/k8s/helm/postgres/values.yaml",
                "@@ -0,0 +1,47 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+### Environment Variables that will be pumped into postgres",
                "+databaseEnvironment:",
                "+  pgDatabase: syncope",
                "+  pgMode: primary",
                "+  pgPassword: <YOURPASSWORD>",
                "+  pgPrimaryHost: localhost",
                "+  pgPrimaryPassword: <YOURPASSWORD>",
                "+  pgPrimaryPort: 5432",
                "+  pgPrimaryUser: postgres",
                "+  pgRootPassword: <YOURPASSWORD>",
                "+  pgUser: syncope",
                "+  pgdataPathOverride: postgres-data",
                "+### Database container information",
                "+databaseConfig:",
                "+  port: 5432",
                "+  name: postgres",
                "+  serviceType: ClusterIP",
                "+  repository: crunchydata",
                "+  container: crunchy-postgres",
                "+  tag: centos7-10.3-1.8.2",
                "+  cpu: 200m",
                "+  memory: 512Mi",
                "+### Persistent Volume Config",
                "+pv:",
                "+  storage: 20Gi",
                "+  name: primary-pv",
                "+  mode: ReadWriteOnce",
                "+  path: /pgdata",
                "+### The PVC that will be used by postgres",
                "+pvc:",
                "+  name: postgres-readwriteonce-pvc",
                "\\ No newline at end of file",
                "diff --git a/docker/src/main/resources/k8s/helm/syncope/Chart.yaml b/docker/src/main/resources/k8s/helm/syncope/Chart.yaml",
                "new file mode 100644",
                "index 0000000000..7f697a2b45",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/k8s/helm/syncope/Chart.yaml",
                "@@ -0,0 +1,29 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+apiVersion: v1",
                "+name: basic",
                "+description: Deploys Syncope",
                "+version: 1",
                "+appVersion: 2.0",
                "+keywords:",
                "+- syncope",
                "+- syncope-enduser",
                "+- syncope-console",
                "+home: https://syncope.apache.org/",
                "+icon: https://syncope.apache.org/images/apache-syncope-logo-medium.png",
                "+sources:",
                "+- https://github.com/apache/syncope",
                "diff --git a/docker/src/main/resources/k8s/helm/syncope/templates/syncope-console-deployment.yaml b/docker/src/main/resources/k8s/helm/syncope/templates/syncope-console-deployment.yaml",
                "new file mode 100644",
                "index 0000000000..2daf9f25ba",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/k8s/helm/syncope/templates/syncope-console-deployment.yaml",
                "@@ -0,0 +1,51 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+apiVersion: extensions/v1beta1",
                "+kind: Deployment",
                "+metadata:",
                "+  name: {{.Values.syncopeConsoleConfig.name}}",
                "+spec:",
                "+  replicas: 1",
                "+  strategy: {}",
                "+  template:",
                "+    metadata:",
                "+      labels:",
                "+        name: {{.Values.syncopeConsoleConfig.name}}",
                "+    spec:",
                "+      containers:",
                "+      - name: {{.Values.syncopeConsoleConfig.name}}",
                "+        envFrom:",
                "+        - configMapRef:",
                "+           name: syncope-environment-config",
                "+        image: \"{{.Values.syncopeConsoleConfig.repository}}/{{.Values.syncopeConsoleConfig.container}}:{{.Values.syncopeConsoleConfig.tag}}\"",
                "+        ports:",
                "+        - containerPort: {{.Values.syncopeConsoleConfig.containerPort}}",
                "+        resources: {}",
                "+      restartPolicy: Always",
                "+status: {}",
                "+---",
                "+apiVersion: v1",
                "+kind: Service",
                "+metadata:",
                "+  name: \"{{.Values.syncopeConsoleConfig.name}}\"",
                "+spec:",
                "+  type: \"{{.Values.syncopeConsoleConfig.serviceType}}\"",
                "+  selector:",
                "+    name: \"{{.Values.syncopeConsoleConfig.name}}\"",
                "+  ports:",
                "+  - port: {{.Values.syncopeConsoleConfig.containerPort}}",
                "+    name: http-api",
                "diff --git a/docker/src/main/resources/k8s/helm/syncope/templates/syncope-deployment.yaml b/docker/src/main/resources/k8s/helm/syncope/templates/syncope-deployment.yaml",
                "new file mode 100644",
                "index 0000000000..ecbf13f5bb",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/k8s/helm/syncope/templates/syncope-deployment.yaml",
                "@@ -0,0 +1,67 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+apiVersion: v1",
                "+kind: ConfigMap",
                "+metadata:",
                "+ name: syncope-environment-config",
                "+data:",
                "+ DBMS: postgresql",
                "+ DB_URL: {{.Values.syncopeEnvironment.dbUrl}}",
                "+ DB_USER: {{.Values.syncopeEnvironment.dbUser}}",
                "+ DB_PASSWORD: {{.Values.syncopeEnvironment.userCreds}}",
                "+ DB_POOL_MAX: \"{{.Values.syncopeEnvironment.dbPoolMax}}\"",
                "+ DB_POOL_MIN: \"{{.Values.syncopeEnvironment.dbPoolMin}}\"",
                "+ OPENJPA_REMOTE_COMMIT: sjvm",
                "+ CORE_SCHEME: \"{{.Values.syncopeEnvironment.coreScheme}}\"",
                "+ CORE_HOST: \"{{.Values.syncopeEnvironment.coreHost}}\"",
                "+ CORE_PORT: \"{{.Values.syncopeEnvironment.corePort}}\"",
                "+---",
                "+apiVersion: extensions/v1beta1",
                "+kind: Deployment",
                "+metadata:",
                "+  name: {{.Values.syncopeConfig.name}}",
                "+spec:",
                "+  replicas: 1",
                "+  strategy: {}",
                "+  template:",
                "+    metadata:",
                "+      labels:",
                "+        name: {{.Values.syncopeConfig.name}}",
                "+    spec:",
                "+      containers:",
                "+      - name: {{.Values.syncopeConfig.name}}",
                "+        envFrom:",
                "+        - configMapRef:",
                "+           name: syncope-environment-config",
                "+        image: \"{{.Values.syncopeConfig.repository}}/{{.Values.syncopeConfig.container}}:{{.Values.syncopeConfig.tag}}\"",
                "+        ports:",
                "+        - containerPort: {{.Values.syncopeConfig.containerPort}}",
                "+        resources: {}",
                "+      restartPolicy: Always",
                "+status: {}",
                "+---",
                "+apiVersion: v1",
                "+kind: Service",
                "+metadata:",
                "+  name: \"{{.Values.syncopeConfig.name}}\"",
                "+spec:",
                "+  type: \"{{.Values.syncopeConfig.serviceType}}\"",
                "+  selector:",
                "+    name: \"{{.Values.syncopeConfig.name}}\"",
                "+  ports:",
                "+  - port: {{.Values.syncopeConfig.containerPort}}",
                "+    name: http-api",
                "diff --git a/docker/src/main/resources/k8s/helm/syncope/templates/syncope-enduser-deployment.yaml b/docker/src/main/resources/k8s/helm/syncope/templates/syncope-enduser-deployment.yaml",
                "new file mode 100644",
                "index 0000000000..2a28cfca6d",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/k8s/helm/syncope/templates/syncope-enduser-deployment.yaml",
                "@@ -0,0 +1,51 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+apiVersion: extensions/v1beta1",
                "+kind: Deployment",
                "+metadata:",
                "+  name: {{.Values.syncopeEndUserConfig.name}}",
                "+spec:",
                "+  replicas: 1",
                "+  strategy: {}",
                "+  template:",
                "+    metadata:",
                "+      labels:",
                "+        name: {{.Values.syncopeEndUserConfig.name}}",
                "+    spec:",
                "+      containers:",
                "+      - name: {{.Values.syncopeEndUserConfig.name}}",
                "+        envFrom:",
                "+        - configMapRef:",
                "+           name: syncope-environment-config",
                "+        image: \"{{.Values.syncopeEndUserConfig.repository}}/{{.Values.syncopeEndUserConfig.container}}:{{.Values.syncopeEndUserConfig.tag}}\"",
                "+        ports:",
                "+        - containerPort: {{.Values.syncopeEndUserConfig.containerPort}}",
                "+        resources: {}",
                "+      restartPolicy: Always",
                "+status: {}",
                "+---",
                "+apiVersion: v1",
                "+kind: Service",
                "+metadata:",
                "+  name: \"{{.Values.syncopeEndUserConfig.name}}\"",
                "+spec:",
                "+  type: \"{{.Values.syncopeEndUserConfig.serviceType}}\"",
                "+  selector:",
                "+    name: \"{{.Values.syncopeEndUserConfig.name}}\"",
                "+  ports:",
                "+  - port: {{.Values.syncopeEndUserConfig.containerPort}}",
                "+    name: http-api",
                "diff --git a/docker/src/main/resources/k8s/helm/syncope/values.yaml b/docker/src/main/resources/k8s/helm/syncope/values.yaml",
                "new file mode 100644",
                "index 0000000000..54e9129ba2",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/k8s/helm/syncope/values.yaml",
                "@@ -0,0 +1,56 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+### Environment Variables that will be set on all 3 syncope docker containers (core, console, enduser)",
                "+syncopeEnvironment:",
                "+  dbUrl: jdbc:postgresql://postgres:5432/syncope",
                "+  dbUser: syncope",
                "+  dbPoolMax: 10",
                "+  dbPoolMin: 2",
                "+  coreScheme: http # valid values are http and https",
                "+  coreHost: syncope # Host that syncope will use to connect to core.  Needs to match .Values.syncopeConfig.name",
                "+  corePort: 8080",
                "+  userCreds: <YOURPASSWORD> # Needs to match the databaseEnvironment.pgPassword that was provided to the database",
                "+### Config Params for the syncope container (A.K.A. Core)",
                "+syncopeConfig:",
                "+  name: syncope",
                "+  replicas: 1",
                "+  repository: apache",
                "+  container: syncope",
                "+  tag: 2.1.0",
                "+  containerPort: 8080",
                "+  memoryLimit: 512Mi",
                "+  serviceType: ClusterIP",
                "+### Config Params for the syncope-console containers",
                "+syncopeConsoleConfig:",
                "+  name: syncope-console",
                "+  replicas: 1",
                "+  repository: apache",
                "+  container: syncope-console",
                "+  tag: 2.1.0",
                "+  containerPort: 8080",
                "+  memoryLimit: 512Mi",
                "+  serviceType: ClusterIP",
                "+### Config Params for the syncope-enduser containers",
                "+syncopeEndUserConfig:",
                "+  name: syncope-enduser",
                "+  replicas: 1",
                "+  repository: apache",
                "+  container: syncope-enduser",
                "+  tag: 2.1.0",
                "+  containerPort: 8080",
                "+  memoryLimit: 512Mi",
                "+  serviceType: ClusterIP",
                "\\ No newline at end of file",
                "diff --git a/src/main/asciidoc/getting-started/obtain.adoc b/src/main/asciidoc/getting-started/obtain.adoc",
                "index 075fd1b613..9d77fb49b9 100644",
                "--- a/src/main/asciidoc/getting-started/obtain.adoc",
                "+++ b/src/main/asciidoc/getting-started/obtain.adoc",
                "@@ -463,2 +463,44 @@ Credentials: `admin` / `password`",
                "+==== Kubernetes Install",
                "+",
                "+Using the same images above it is possible to install in Kubernetes.  Provided is a set of example helm charts that can be used to install Syncope directly in Kubernetes.  Your specific setup might be different but ideally these can be a baseline install for your specific needs.  This will walk you through the installation of syncope via helm.",
                "+",
                "+It makes a couple assumptions:",
                "+",
                "+* Have a working Kubernetes Cluster to install into.",
                "+** If you don't have one then GCP has a decent https://kubernetes.io/docs/setup/[tutorial] .  **NOTE:** You could also use any other Cloud Provider or Local install (e.g. AWS, Minikub, Openshift)",
                "+* Have helm installed",
                "+** Follow these https://docs.helm.sh/using_helm/[instructions] if you don't",
                "+* You have your kubernetes cluster to allow for dynamic provisioning of persistent volumes in K8s",
                "+** If you don't have it then you will need to manually create the volume or turn on dynamic provisioning.  Refer to this link https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/[here]",
                "+",
                "+===== Overview Of Install",
                "+",
                "+The install is broken into two separate helm charts.  This is due to the fact that syncope doesn't startup properly is the database isn't fully initialized yet.",
                "+",
                "+* Postgres Chart - this will install the postgres database.  It will also configure a persistent volume and persistent volume claim to store the data",
                "+* Syncope Chart - This is the actual syncope install.  It will install 3 separate pods (Core, Console, and Enduser)",
                "+",
                "+image::SyncopeLayoutInK8s.png[]",
                "+",
                "+**Values.yaml** - Each Helm Chart has a values.yaml.  These are the configurable parameters for your specific install.  Before running the install you need to update the values.yaml for your needs",
                "+",
                "+===== Install Commands",
                "+",
                "+Open a terminal and navigate to the \"helm\" https://github.com/apache/syncope/tree/master/docker/src/main/resources/k8s/helm[folder] wherever you downloaded the code.  **REMINDER:  SET YOUR VALUES.YAML!!!**",
                "+",
                "+.Install postgres",
                "+[source,bash]",
                "+----",
                "+helm install postgres --name postgres --namespace <YOUR_NAMESPACE> -f postgres/values.yaml",
                "+----",
                "+",
                "+Let Postgres initialize (about 20-30 seconds).  You can watch logs to confirm",
                "+",
                "+.Install syncope",
                "+[source,bash]",
                "+----",
                "+helm install syncope --name syncope --namespace <YOUR_NAMESPACE> -f syncope/values.yaml",
                "+----",
                "+",
                " === Maven Project",
                "diff --git a/src/main/asciidoc/images/SyncopeLayoutInK8s.png b/src/main/asciidoc/images/SyncopeLayoutInK8s.png",
                "new file mode 100644",
                "index 0000000000..9bfee5e217",
                "Binary files /dev/null and b/src/main/asciidoc/images/SyncopeLayoutInK8s.png differ"
            ],
            "changed_files": [
                "docker/src/main/resources/docker-compose/docker-compose-ha.yml",
                "docker/src/main/resources/docker-compose/docker-compose-mariadb.yml",
                "docker/src/main/resources/docker-compose/docker-compose-mssql.yml",
                "docker/src/main/resources/docker-compose/docker-compose-mysql.yml",
                "docker/src/main/resources/docker-compose/docker-compose-postgresql.yml",
                "docker/src/main/resources/k8s/helm/postgres/Chart.yaml",
                "docker/src/main/resources/k8s/helm/postgres/templates/db-deployment.yaml",
                "docker/src/main/resources/k8s/helm/postgres/values.yaml",
                "docker/src/main/resources/k8s/helm/syncope/Chart.yaml",
                "docker/src/main/resources/k8s/helm/syncope/templates/syncope-console-deployment.yaml",
                "docker/src/main/resources/k8s/helm/syncope/templates/syncope-deployment.yaml",
                "docker/src/main/resources/k8s/helm/syncope/templates/syncope-enduser-deployment.yaml",
                "docker/src/main/resources/k8s/helm/syncope/values.yaml",
                "src/main/asciidoc/getting-started/obtain.adoc",
                "src/main/asciidoc/images/SyncopeLayoutInK8s.png"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "83": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "dfccf431fcd34b410838c3e230c362f58e4a8877"
                ],
                [
                    "no-tag",
                    "a674ddedabbc38b8cb8ab4385c9ff6eabde394cc"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 83",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c04c374b5b060c2b867467abe02ed874c63035c5",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541770398,
            "hunks": 42,
            "message": "[SYNCOPE-1395] persistence-jpa-pgjsonb module, passing all persistence-jpa's unit tests",
            "diff": [
                "diff --git a/core/persistence-jpa-pgjsonb/pom.xml b/core/persistence-jpa-pgjsonb/pom.xml",
                "new file mode 100644",
                "index 0000000000..de080840fd",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/pom.xml",
                "@@ -0,0 +1,302 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
                "+",
                "+  <modelVersion>4.0.0</modelVersion>",
                "+",
                "+  <parent>",
                "+    <groupId>org.apache.syncope</groupId>",
                "+    <artifactId>syncope-core</artifactId>",
                "+    <version>2.1.3-SNAPSHOT</version>",
                "+  </parent>",
                "+",
                "+  <name>Apache Syncope Core Persistence JPA PostgreSQL jsonb</name>",
                "+  <description>Apache Syncope Core Persistence JPA PostgreSQL jsonb</description>",
                "+  <groupId>org.apache.syncope.core</groupId>",
                "+  <artifactId>syncope-core-persistence-jpa-pgjsonb</artifactId>",
                "+  <packaging>jar</packaging>",
                "+  ",
                "+  <properties>",
                "+    <rootpom.basedir>${basedir}/../..</rootpom.basedir>",
                "+  </properties>",
                "+",
                "+  <dependencies>",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.core</groupId>",
                "+      <artifactId>syncope-core-persistence-jpa</artifactId>",
                "+      <version>${project.version}</version>",
                "+    </dependency>",
                "+",
                "+    <!-- TEST -->",
                "+    <dependency> ",
                "+      <groupId>javax.servlet</groupId> ",
                "+      <artifactId>javax.servlet-api</artifactId> ",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.slf4j</groupId>",
                "+      <artifactId>slf4j-simple</artifactId>",
                "+      <version>${slf4j.version}</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.slf4j</groupId>",
                "+      <artifactId>jcl-over-slf4j</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>com.h2database</groupId>",
                "+      <artifactId>h2</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.springframework</groupId>",
                "+      <artifactId>spring-test</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.junit.jupiter</groupId>",
                "+      <artifactId>junit-jupiter-engine</artifactId>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+  </dependencies>",
                "+",
                "+  <build>",
                "+    <plugins>",
                "+      <plugin>",
                "+        <groupId>org.apache.openjpa</groupId>",
                "+        <artifactId>openjpa-maven-plugin</artifactId>",
                "+        <inherited>true</inherited>",
                "+        <dependencies>",
                "+          <dependency>",
                "+            <groupId>com.h2database</groupId>",
                "+            <artifactId>h2</artifactId>",
                "+            <version>${h2.version}</version>",
                "+          </dependency>",
                "+        </dependencies>",
                "+        <configuration>",
                "+          <persistenceXmlFile>${project.basedir}/../persistence-jpa/src/main/resources/persistence-enhance.xml</persistenceXmlFile> ",
                "+          <includes>org/apache/syncope/core/persistence/jpa/entity/**/*.class</includes>",
                "+          <connectionDriverName>org.springframework.jdbc.datasource.DriverManagerDataSource</connectionDriverName>",
                "+          <connectionProperties>",
                "+            driverClassName=org.h2.Driver,",
                "+            url=jdbc:h2:mem:syncopedb",
                "+            username=sa,",
                "+            password=",
                "+          </connectionProperties>",
                "+        </configuration>",
                "+        <executions>",
                "+          <execution>",
                "+            <id>enhancer</id>",
                "+            <phase>process-classes</phase>",
                "+            <goals>",
                "+              <goal>enhance</goal>",
                "+            </goals>",
                "+          </execution>",
                "+        </executions>",
                "+      </plugin>",
                "+      ",
                "+      <plugin>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-checkstyle-plugin</artifactId>",
                "+      </plugin>",
                "+    </plugins>",
                "+",
                "+    <resources>",
                "+      <resource>",
                "+        <directory>src/main/resources</directory>",
                "+        <filtering>true</filtering>",
                "+      </resource>",
                "+    </resources>",
                "+  </build>",
                "+",
                "+  <profiles>",
                "+    <profile>",
                "+      <id>ut</id>",
                "+      ",
                "+      <dependencies>",
                "+        <dependency>",
                "+          <groupId>org.postgresql</groupId>",
                "+          <artifactId>postgresql</artifactId>",
                "+          <version>${jdbc.postgresql.version}</version>",
                "+          <scope>test</scope>",
                "+        </dependency>",
                "+      </dependencies>",
                "+",
                "+      <build>",
                "+        <defaultGoal>clean verify</defaultGoal>",
                "+        ",
                "+        <plugins>",
                "+          <plugin>",
                "+            <groupId>org.codehaus.mojo</groupId>",
                "+            <artifactId>build-helper-maven-plugin</artifactId>",
                "+            <executions>",
                "+              <execution>",
                "+                <id>add-test-source</id>",
                "+                <phase>generate-test-sources</phase>",
                "+                <goals>",
                "+                  <goal>add-test-source</goal>",
                "+                </goals>",
                "+                <configuration>",
                "+                  <sources>",
                "+                    <source>${basedir}/../persistence-jpa/src/test/java</source>",
                "+                  </sources>",
                "+                </configuration>",
                "+              </execution>",
                "+            </executions>",
                "+          </plugin>",
                "+      ",
                "+          <plugin>",
                "+            <groupId>org.apache.maven.plugins</groupId>",
                "+            <artifactId>maven-surefire-plugin</artifactId>",
                "+            <configuration>",
                "+              <skip>true</skip>",
                "+            </configuration>",
                "+          </plugin>",
                "+          <plugin>",
                "+            <groupId>org.apache.maven.plugins</groupId>",
                "+            <artifactId>maven-failsafe-plugin</artifactId>",
                "+            <configuration>",
                "+              <includes>",
                "+                <include>**/*Test.java</include>",
                "+              </includes>",
                "+              <excludedGroups>multitenancy,plainAttrTable</excludedGroups>",
                "+            </configuration>",
                "+          </plugin>",
                "+",
                "+          <plugin>",
                "+            <groupId>io.fabric8</groupId>",
                "+            <artifactId>docker-maven-plugin</artifactId>",
                "+            <configuration>",
                "+              <images>",
                "+                <image>",
                "+                  <name>crunchydata/crunchy-postgres:centos7-10.5-2.1.0</name>",
                "+                  <run>",
                "+                    <env>",
                "+                      <PG_ROOT_PASSWORD>postgres</PG_ROOT_PASSWORD>",
                "+                      <PG_MODE>primary</PG_MODE>",
                "+                      <PG_PRIMARY_USER>postgres</PG_PRIMARY_USER>",
                "+                      <PG_PRIMARY_PASSWORD>postgres</PG_PRIMARY_PASSWORD>",
                "+                      <PG_PRIMARY_HOST>localhost</PG_PRIMARY_HOST>",
                "+                      <PG_PRIMARY_PORT>5432</PG_PRIMARY_PORT>",
                "+                      <PG_DATABASE>syncope</PG_DATABASE>",
                "+                      <PG_USER>syncope</PG_USER>",
                "+                      <PG_PASSWORD>syncope</PG_PASSWORD>",
                "+                    </env>",
                "+                    <ports>",
                "+                      <port>5432:5432</port>",
                "+                    </ports>",
                "+                  </run>",
                "+                </image>",
                "+              </images>",
                "+            </configuration>",
                "+            <executions>",
                "+              <execution>",
                "+                <id>start-postgres</id>",
                "+                <phase>pre-integration-test</phase>",
                "+                <goals>",
                "+                  <goal>start</goal>",
                "+                </goals>",
                "+              </execution>",
                "+              <execution>",
                "+                <id>stop-postgres</id>",
                "+                <phase>post-integration-test</phase>",
                "+                <goals>",
                "+                  <goal>stop</goal>",
                "+                  <goal>remove</goal>",
                "+                </goals>",
                "+              </execution>",
                "+            </executions>",
                "+          </plugin>",
                "+        </plugins>",
                "+        ",
                "+        <testResources>",
                "+          <testResource>",
                "+            <directory>src/test/resources</directory>",
                "+            <filtering>true</filtering>",
                "+          </testResource>",
                "+          <testResource>",
                "+            <directory>src/main/resources</directory>",
                "+            <filtering>true</filtering>",
                "+          </testResource>",
                "+        </testResources>",
                "+      </build>",
                "+    </profile>",
                "+    ",
                "+    <profile>",
                "+      <id>sqlgen</id>",
                "+      ",
                "+      <properties>",
                "+        <skipTests>true</skipTests>",
                "+      </properties>",
                "+      ",
                "+      <build>",
                "+        <defaultGoal>clean verify</defaultGoal>",
                "+        ",
                "+        <plugins>",
                "+          <plugin>",
                "+            <groupId>org.apache.openjpa</groupId>",
                "+            <artifactId>openjpa-maven-plugin</artifactId>",
                "+            <inherited>true</inherited>",
                "+            <executions>",
                "+              <execution>",
                "+                <id>sqlgen</id>",
                "+                <phase>process-classes</phase>",
                "+                <goals>",
                "+                  <goal>sql</goal>",
                "+                </goals>",
                "+              </execution>",
                "+            </executions>",
                "+          </plugin>          ",
                "+        </plugins>",
                "+      </build>",
                "+    </profile>",
                "+    ",
                "+    <profile>",
                "+      <id>schemagen</id>",
                "+      ",
                "+      <properties>",
                "+        <skipTests>true</skipTests>",
                "+      </properties>",
                "+      ",
                "+      <build>",
                "+        <defaultGoal>clean verify</defaultGoal>",
                "+        ",
                "+        <plugins>",
                "+          <plugin>",
                "+            <groupId>org.apache.openjpa</groupId>",
                "+            <artifactId>openjpa-maven-plugin</artifactId>",
                "+            <inherited>true</inherited>",
                "+            <executions>",
                "+              <execution>",
                "+                <id>schemagen</id>",
                "+                <phase>process-classes</phase>",
                "+                <goals>",
                "+                  <goal>schema</goal>",
                "+                </goals>",
                "+              </execution>",
                "+            </executions>",
                "+          </plugin>          ",
                "+        </plugins>",
                "+      </build>",
                "+    </profile>",
                "+  </profiles>",
                "+",
                "+</project>",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/api/dao/PGAnyDAO.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/api/dao/PGAnyDAO.java",
                "new file mode 100644",
                "index 0000000000..2fecad7d89",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/api/dao/PGAnyDAO.java",
                "@@ -0,0 +1,38 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.api.dao;",
                "+",
                "+import java.util.List;",
                "+import org.apache.syncope.core.persistence.api.entity.Any;",
                "+import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "+",
                "+public interface PGAnyDAO {",
                "+",
                "+    <A extends Any<?>> List<A> findByDerAttrValue(",
                "+            String table, AnyUtils anyUtils, String schemaKey, String value, boolean ignoreCaseMatch);",
                "+",
                "+    <A extends Any<?>> A findByPlainAttrUniqueValue(",
                "+            String table, AnyUtils anyUtils, String schemaKey, PlainAttrValue attrUniqueValue, boolean ignoreCaseMatch);",
                "+",
                "+    <A extends Any<?>> List<A> findByPlainAttrValue(",
                "+            String table, AnyUtils anyUtils, String schemaKey, PlainAttrValue attrValue, boolean ignoreCaseMatch);",
                "+",
                "+    <A extends Any<?>> void checkBeforeSave(String table, AnyUtils anyUtils, A any);",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyDAO.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyDAO.java",
                "new file mode 100644",
                "index 0000000000..030bba8c5f",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyDAO.java",
                "@@ -0,0 +1,355 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.dao;",
                "+",
                "+import java.io.StringReader;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.Collections;",
                "+import java.util.Date;",
                "+import java.util.HashSet;",
                "+import java.util.List;",
                "+import java.util.Set;",
                "+import java.util.StringJoiner;",
                "+import java.util.regex.Pattern;",
                "+import javax.persistence.Query;",
                "+import org.apache.commons.jexl3.parser.Parser;",
                "+import org.apache.commons.jexl3.parser.ParserConstants;",
                "+import org.apache.commons.jexl3.parser.Token;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.DuplicateException;",
                "+import org.apache.syncope.core.persistence.api.dao.PGAnyDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.Any;",
                "+import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                "+import org.apache.syncope.core.persistence.api.entity.DerSchema;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                "+import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;",
                "+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "+import org.apache.syncope.core.spring.security.AuthContextUtils;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                "+import org.springframework.stereotype.Repository;",
                "+import org.springframework.transaction.annotation.Transactional;",
                "+",
                "+@Repository",
                "+public class PGJPAAnyDAO extends AbstractDAO<AbstractEntity> implements PGAnyDAO {",
                "+",
                "+    @Autowired",
                "+    private PlainSchemaDAO plainSchemaDAO;",
                "+",
                "+    @Autowired",
                "+    private DerSchemaDAO derSchemaDAO;",
                "+",
                "+    private String queryBegin(final String table) {",
                "+        return \"SELECT DISTINCT id FROM \" + table + \" u,\"",
                "+                + \"jsonb_array_elements(u.plainAttrs) attrs,\"",
                "+                + \"jsonb_array_elements(COALESCE(attrs -> 'values', '[{}]'::jsonb)) attrValues \";",
                "+    }",
                "+",
                "+    private String attrValueMatch(",
                "+            final AnyUtils anyUtils,",
                "+            final PlainSchema schema,",
                "+            final PlainAttrValue attrValue,",
                "+            final boolean ignoreCaseMatch) {",
                "+",
                "+        String key;",
                "+        boolean lower = false;",
                "+",
                "+        switch (schema.getType()) {",
                "+            case Boolean:",
                "+                key = \"booleanValue\";",
                "+                break;",
                "+",
                "+            case Date:",
                "+                key = \"dateValue\";",
                "+                break;",
                "+",
                "+            case Double:",
                "+                key = \"doubleValue\";",
                "+                break;",
                "+",
                "+            case Long:",
                "+                key = \"longValue\";",
                "+                break;",
                "+",
                "+            case Binary:",
                "+                key = \"binaryValue\";",
                "+                break;",
                "+",
                "+            default:",
                "+                lower = ignoreCaseMatch;",
                "+                key = \"stringValue\";",
                "+        }",
                "+",
                "+        if (lower) {",
                "+            return \"attrs ->> 'schema' = ? \"",
                "+                    + \"AND \"",
                "+                    + (lower ? \"LOWER(\" : \"\")",
                "+                    + (schema.isUniqueConstraint() ? \"attrs -> 'uniqueValue'\" : \"attrValues\") + \" ->> '\" + key",
                "+                    + \"'\" + (lower ? \")\" : \"\")",
                "+                    + \" = \"",
                "+                    + (lower ? \"LOWER(\" : \"\")",
                "+                    + \"?\"",
                "+                    + (lower ? \")\" : \"\");",
                "+        } else {",
                "+            PlainAttr<?> container = anyUtils.newPlainAttr();",
                "+            container.setSchema(schema);",
                "+            if (attrValue instanceof PlainAttrUniqueValue) {",
                "+                container.setUniqueValue((PlainAttrUniqueValue) attrValue);",
                "+            } else {",
                "+                ((PGPlainAttr) container).add(attrValue);",
                "+            }",
                "+            return \"plainAttrs @> '\" + POJOHelper.serialize(Arrays.asList(container)) + \"'::jsonb\";",
                "+        }",
                "+    }",
                "+",
                "+    private <A extends Any<?>> List<A> buildResult(final AnyUtils anyUtils, final List<Object> queryResult) {",
                "+        List<A> result = new ArrayList<>();",
                "+        queryResult.forEach(anyKey -> {",
                "+            A any = anyUtils.<A>dao().find(anyKey.toString());",
                "+            if (any == null) {",
                "+                LOG.error(\"Could not find any for key {}\", anyKey);",
                "+            } else {",
                "+                result.add(any);",
                "+            }",
                "+        });",
                "+        return result;",
                "+    }",
                "+",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    @Transactional(readOnly = true)",
                "+    @Override",
                "+    public <A extends Any<?>> List<A> findByPlainAttrValue(",
                "+            final String table,",
                "+            final AnyUtils anyUtils,",
                "+            final String schemaKey,",
                "+            final PlainAttrValue attrValue,",
                "+            final boolean ignoreCaseMatch) {",
                "+",
                "+        PlainSchema schema = plainSchemaDAO.find(schemaKey);",
                "+        if (schema == null) {",
                "+            LOG.error(\"Invalid schema '{}'\", schemaKey);",
                "+            return Collections.<A>emptyList();",
                "+        }",
                "+",
                "+        Query query = entityManager().createNativeQuery(",
                "+                queryBegin(table)",
                "+                + \"WHERE \" + attrValueMatch(anyUtils, schema, attrValue, ignoreCaseMatch));",
                "+        query.setParameter(1, schemaKey);",
                "+        query.setParameter(2, attrValue.getValue());",
                "+",
                "+        return buildResult(anyUtils, query.getResultList());",
                "+    }",
                "+",
                "+    @Transactional(readOnly = true)",
                "+    @Override",
                "+    public <A extends Any<?>> A findByPlainAttrUniqueValue(",
                "+            final String table,",
                "+            final AnyUtils anyUtils,",
                "+            final String schemaKey,",
                "+            final PlainAttrValue attrUniqueValue,",
                "+            final boolean ignoreCaseMatch) {",
                "+",
                "+        PlainSchema schema = plainSchemaDAO.find(schemaKey);",
                "+        if (schema == null) {",
                "+            LOG.error(\"Invalid schema '{}'\", schemaKey);",
                "+            return null;",
                "+        }",
                "+        if (!schema.isUniqueConstraint()) {",
                "+            LOG.error(\"This schema has not unique constraint: '{}'\", schemaKey);",
                "+            return null;",
                "+        }",
                "+",
                "+        List<A> result = findByPlainAttrValue(table, anyUtils, schemaKey, attrUniqueValue, ignoreCaseMatch);",
                "+        return result.isEmpty()",
                "+                ? null",
                "+                : result.get(0);",
                "+    }",
                "+",
                "+    /**",
                "+     * Split an attribute value recurring on provided literals/tokens.",
                "+     *",
                "+     * @param attrValue value to be split",
                "+     * @param literals literals/tokens",
                "+     * @return split value",
                "+     */",
                "+    private List<String> split(final String attrValue, final List<String> literals) {",
                "+        final List<String> attrValues = new ArrayList<>();",
                "+",
                "+        if (literals.isEmpty()) {",
                "+            attrValues.add(attrValue);",
                "+        } else {",
                "+            for (String token : attrValue.split(Pattern.quote(literals.get(0)))) {",
                "+                if (!token.isEmpty()) {",
                "+                    attrValues.addAll(split(token, literals.subList(1, literals.size())));",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        return attrValues;",
                "+    }",
                "+",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    @Transactional(readOnly = true)",
                "+    @Override",
                "+    public <A extends Any<?>> List<A> findByDerAttrValue(",
                "+            final String table,",
                "+            final AnyUtils anyUtils,",
                "+            final String schemaKey,",
                "+            final String value,",
                "+            final boolean ignoreCaseMatch) {",
                "+",
                "+        DerSchema derSchema = derSchemaDAO.find(schemaKey);",
                "+        if (derSchema == null) {",
                "+            LOG.error(\"Invalid schema '{}'\", schemaKey);",
                "+            return Collections.<A>emptyList();",
                "+        }",
                "+",
                "+        Parser parser = new Parser(new StringReader(derSchema.getExpression()));",
                "+",
                "+        // Schema keys",
                "+        List<String> identifiers = new ArrayList<>();",
                "+",
                "+        // Literals",
                "+        List<String> literals = new ArrayList<>();",
                "+",
                "+        // Get schema keys and literals",
                "+        for (Token token = parser.getNextToken(); token != null && StringUtils.isNotBlank(token.toString());",
                "+                token = parser.getNextToken()) {",
                "+",
                "+            if (token.kind == ParserConstants.STRING_LITERAL) {",
                "+                literals.add(token.toString().substring(1, token.toString().length() - 1));",
                "+            }",
                "+",
                "+            if (token.kind == ParserConstants.IDENTIFIER) {",
                "+                identifiers.add(token.toString());",
                "+            }",
                "+        }",
                "+",
                "+        // Sort literals in order to process later literals included into others",
                "+        Collections.sort(literals, (l1, l2) -> {",
                "+            if (l1 == null && l2 == null) {",
                "+                return 0;",
                "+            } else if (l1 != null && l2 == null) {",
                "+                return -1;",
                "+            } else if (l1 == null && l2 != null) {",
                "+                return 1;",
                "+            } else if (l1.length() == l2.length()) {",
                "+                return 0;",
                "+            } else if (l1.length() > l2.length()) {",
                "+                return -1;",
                "+            } else {",
                "+                return 1;",
                "+            }",
                "+        });",
                "+",
                "+        // Split value on provided literals",
                "+        List<String> attrValues = split(value, literals);",
                "+",
                "+        if (attrValues.size() != identifiers.size()) {",
                "+            LOG.error(\"Ambiguous JEXL expression resolution: literals and values have different size\");",
                "+            return Collections.emptyList();",
                "+        }",
                "+",
                "+        StringJoiner clauses = new StringJoiner(\" AND id IN \");",
                "+",
                "+        // builder to build the clauses",
                "+        StringBuilder bld = new StringBuilder();",
                "+",
                "+        // Contains used identifiers in order to avoid replications",
                "+        Set<String> used = new HashSet<>();",
                "+",
                "+        List<Object> queryParams = new ArrayList<>();",
                "+",
                "+        // Create several clauses: one for eanch identifiers",
                "+        for (int i = 0; i < identifiers.size(); i++) {",
                "+            if (!used.contains(identifiers.get(i))) {",
                "+                // verify schema existence and get schema type",
                "+                PlainSchema schema = plainSchemaDAO.find(identifiers.get(i));",
                "+                if (schema == null) {",
                "+                    LOG.error(\"Invalid schema '{}', ignoring\", identifiers.get(i));",
                "+                } else {",
                "+                    // clear builder",
                "+                    bld.delete(0, bld.length());",
                "+",
                "+                    PlainAttrValue attrValue;",
                "+                    if (schema.isUniqueConstraint()) {",
                "+                        attrValue = anyUtils.newPlainAttrUniqueValue();",
                "+                    } else {",
                "+                        attrValue = anyUtils.newPlainAttrValue();",
                "+                    }",
                "+                    attrValue.setStringValue(attrValues.get(i));",
                "+",
                "+                    bld.append('(').",
                "+                            append(queryBegin(table)).",
                "+                            append(\"WHERE \").",
                "+                            append(attrValueMatch(anyUtils, schema, attrValue, ignoreCaseMatch)).",
                "+                            append(')');",
                "+                    queryParams.add(schema.getKey());",
                "+                    queryParams.add(attrValues.get(i));",
                "+",
                "+                    used.add(identifiers.get(i));",
                "+",
                "+                    clauses.add(bld.toString());",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        LOG.debug(\"Generated where clauses {}\", clauses);",
                "+",
                "+        Query query = entityManager().createNativeQuery(",
                "+                \"SELECT DISTINCT id FROM \" + table + \" u WHERE id IN \" + clauses.toString());",
                "+        for (int i = 0; i < queryParams.size(); i++) {",
                "+            query.setParameter(i + 1, queryParams.get(i));",
                "+        }",
                "+",
                "+        return buildResult(anyUtils, query.getResultList());",
                "+    }",
                "+",
                "+    @Transactional",
                "+    @Override",
                "+    public <A extends Any<?>> void checkBeforeSave(final String table, final AnyUtils anyUtils, final A any) {",
                "+        // check UNIQUE constraints",
                "+        any.getPlainAttrs().stream().",
                "+                filter(attr -> attr.getUniqueValue() != null).",
                "+                map(PGPlainAttr.class::cast).",
                "+                forEach(attr -> {",
                "+                    String schemaKey = attr.getSchemaKey();",
                "+                    List<A> others = findByPlainAttrValue(table, anyUtils, schemaKey, attr.getUniqueValue(), false);",
                "+                    if (others.isEmpty() || (others.size() == 1 && others.get(0).getKey().equals(any.getKey()))) {",
                "+                        LOG.debug(\"No duplicate value found for {}\", attr.getUniqueValue().getValueAsString());",
                "+                    } else {",
                "+                        throw new DuplicateException(",
                "+                                \"Value \" + attr.getUniqueValue().getValueAsString() + \" existing for \" + schemaKey);",
                "+                    }",
                "+                });",
                "+",
                "+        // update sysInfo - as org.apache.syncope.core.persistence.jpa.entity.PlainAttrListener is not invoked",
                "+        Date now = new Date();",
                "+        String username = AuthContextUtils.getUsername();",
                "+        LOG.debug(\"Set last change date '{}' and modifier '{}' for '{}'\", now, username, any);",
                "+        any.setLastModifier(username);",
                "+        any.setLastChangeDate(now);",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyObjectDAO.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyObjectDAO.java",
                "new file mode 100644",
                "index 0000000000..4879f2662a",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyObjectDAO.java",
                "@@ -0,0 +1,81 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.dao;",
                "+",
                "+import java.util.List;",
                "+import org.apache.syncope.core.persistence.api.dao.PGAnyDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;",
                "+import org.apache.syncope.core.persistence.jpa.entity.anyobject.PGJPAAnyObject;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "+import org.springframework.transaction.annotation.Transactional;",
                "+",
                "+public class PGJPAAnyObjectDAO extends JPAAnyObjectDAO {",
                "+",
                "+    private PGAnyDAO anyDAO;",
                "+",
                "+    private PGAnyDAO anyDAO() {",
                "+        if (anyDAO == null) {",
                "+            anyDAO = ApplicationContextProvider.getApplicationContext().getBean(PGAnyDAO.class);",
                "+        }",
                "+        return anyDAO;",
                "+    }",
                "+",
                "+    @Transactional(readOnly = true)",
                "+    @Override",
                "+    public AnyObject find(final String key) {",
                "+        return entityManager().find(PGJPAAnyObject.class, key);",
                "+    }",
                "+",
                "+    @Override",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    public List<AnyObject> findByPlainAttrValue(",
                "+            final String schemaKey,",
                "+            final PlainAttrValue attrValue,",
                "+            final boolean ignoreCaseMatch) {",
                "+",
                "+        return anyDAO().findByPlainAttrValue(PGJPAAnyObject.TABLE, anyUtils(), schemaKey, attrValue, ignoreCaseMatch);",
                "+    }",
                "+",
                "+    @Override",
                "+    public AnyObject findByPlainAttrUniqueValue(",
                "+            final String schemaKey,",
                "+            final PlainAttrValue attrUniqueValue,",
                "+            final boolean ignoreCaseMatch) {",
                "+",
                "+        return anyDAO().findByPlainAttrUniqueValue(PGJPAAnyObject.TABLE, anyUtils(),",
                "+                schemaKey, attrUniqueValue, ignoreCaseMatch);",
                "+    }",
                "+",
                "+    @Override",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    public List<AnyObject> findByDerAttrValue(",
                "+            final String schemaKey,",
                "+            final String value,",
                "+            final boolean ignoreCaseMatch) {",
                "+",
                "+        return anyDAO().findByDerAttrValue(PGJPAAnyObject.TABLE, anyUtils(), schemaKey, value, ignoreCaseMatch);",
                "+    }",
                "+",
                "+    @Override",
                "+    public AnyObject save(final AnyObject anyObject) {",
                "+        anyDAO().checkBeforeSave(PGJPAAnyObject.TABLE, anyUtils(), anyObject);",
                "+        return super.save(anyObject);",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnySearchDAO.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnySearchDAO.java",
                "new file mode 100644",
                "index 0000000000..0fa44f0ee3",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnySearchDAO.java",
                "@@ -0,0 +1,231 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.dao;",
                "+",
                "+import java.util.Arrays;",
                "+import java.util.List;",
                "+import org.apache.commons.lang3.tuple.Pair;",
                "+import org.apache.syncope.common.lib.types.AnyTypeKind;",
                "+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;",
                "+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;",
                "+import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;",
                "+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "+",
                "+public class PGJPAAnySearchDAO extends JPAAnySearchDAO {",
                "+",
                "+    @Override",
                "+    SearchSupport buildSearchSupport(final AnyTypeKind kind) {",
                "+        return new SearchSupport(kind);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void processOBS(final SearchSupport svs, final OrderBySupport obs, final StringBuilder where) {",
                "+        obs.views.forEach(searchView -> {",
                "+            where.append(',').",
                "+                    append(searchView.name).",
                "+                    append(' ').append(searchView.alias);",
                "+        });",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void parseOrderByForPlainSchema(",
                "+            final SearchSupport svs,",
                "+            final OrderBySupport obs,",
                "+            final OrderBySupport.Item item,",
                "+            final OrderByClause clause,",
                "+            final PlainSchema schema,",
                "+            final String fieldName) {",
                "+",
                "+        // keep track of involvement of non-mandatory schemas in the order by clauses",
                "+        obs.nonMandatorySchemas = !\"true\".equals(schema.getMandatoryCondition());",
                "+",
                "+        obs.views.add(svs.field());",
                "+",
                "+        item.select = svs.field().alias + \".attrValues ->> '\" + fieldName + \"' AS \" + fieldName;",
                "+        item.where = \"attrs ->> 'schema' = '\" + fieldName + \"'\";",
                "+        item.orderBy = fieldName + \" \" + clause.getDirection().name();",
                "+    }",
                "+",
                "+    private void fillAttrQuery(",
                "+            final AnyUtils anyUtils,",
                "+            final StringBuilder query,",
                "+            final PlainAttrValue attrValue,",
                "+            final PlainSchema schema,",
                "+            final AttributeCond cond,",
                "+            final boolean not,",
                "+            final List<Object> parameters) {",
                "+",
                "+        String key;",
                "+        boolean lower = false;",
                "+        switch (schema.getType()) {",
                "+            case Boolean:",
                "+                key = \"booleanValue\";",
                "+                break;",
                "+",
                "+            case Date:",
                "+                key = \"dateValue\";",
                "+                break;",
                "+",
                "+            case Double:",
                "+                key = \"doubleValue\";",
                "+                break;",
                "+",
                "+            case Long:",
                "+                key = \"longValue\";",
                "+                break;",
                "+",
                "+            case Binary:",
                "+                key = \"binaryValue\";",
                "+                break;",
                "+",
                "+            default:",
                "+                lower = cond.getType() == AttributeCond.Type.IEQ || cond.getType() == AttributeCond.Type.ILIKE;",
                "+                key = \"stringValue\";",
                "+        }",
                "+",
                "+        if (!not && cond.getType() == AttributeCond.Type.EQ) {",
                "+            PlainAttr<?> container = anyUtils.newPlainAttr();",
                "+            container.setSchema(schema);",
                "+            if (attrValue instanceof PlainAttrUniqueValue) {",
                "+                container.setUniqueValue((PlainAttrUniqueValue) attrValue);",
                "+            } else {",
                "+                ((PGPlainAttr) container).add(attrValue);",
                "+            }",
                "+",
                "+            query.append(\"plainAttrs @> '\").",
                "+                    append(POJOHelper.serialize(Arrays.asList(container))).",
                "+                    append(\"'::jsonb\");",
                "+        } else {",
                "+            query.append(\"attrs ->> 'schema' = ?\").append(setParameter(parameters, cond.getSchema())).",
                "+                    append(\" AND \").",
                "+                    append(lower ? \"LOWER(\" : \"\").",
                "+                    append(schema.isUniqueConstraint()",
                "+                            ? \"attrs -> 'uniqueValue'\" : \"attrValues\").",
                "+                    append(\" ->> '\").append(key).append(\"'\").",
                "+                    append(lower ? \")\" : \"\");",
                "+",
                "+            switch (cond.getType()) {",
                "+                case LIKE:",
                "+                case ILIKE:",
                "+                    if (not) {",
                "+                        query.append(\"NOT \");",
                "+                    }",
                "+                    query.append(\" LIKE \");",
                "+                    break;",
                "+",
                "+                case GE:",
                "+                    if (not) {",
                "+                        query.append('<');",
                "+                    } else {",
                "+                        query.append(\">=\");",
                "+                    }",
                "+                    break;",
                "+",
                "+                case GT:",
                "+                    if (not) {",
                "+                        query.append(\"<=\");",
                "+                    } else {",
                "+                        query.append('>');",
                "+                    }",
                "+                    break;",
                "+",
                "+                case LE:",
                "+                    if (not) {",
                "+                        query.append('>');",
                "+                    } else {",
                "+                        query.append(\"<=\");",
                "+                    }",
                "+                    break;",
                "+",
                "+                case LT:",
                "+                    if (not) {",
                "+                        query.append(\">=\");",
                "+                    } else {",
                "+                        query.append('<');",
                "+                    }",
                "+                    break;",
                "+",
                "+                case EQ:",
                "+                case IEQ:",
                "+                default:",
                "+                    if (not) {",
                "+                        query.append('!');",
                "+                    }",
                "+                    query.append('=');",
                "+            }",
                "+",
                "+            query.append(lower ? \"LOWER(\" : \"\").",
                "+                    append(\"?\").append(setParameter(parameters, cond.getExpression())).",
                "+                    append(lower ? \")\" : \"\");",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    protected String getQuery(",
                "+            final AttributeCond cond,",
                "+            final boolean not,",
                "+            final List<Object> parameters,",
                "+            final SearchSupport svs) {",
                "+",
                "+        Pair<PlainSchema, PlainAttrValue> checked;",
                "+        try {",
                "+            checked = check(cond, svs.anyTypeKind);",
                "+        } catch (IllegalArgumentException e) {",
                "+            return EMPTY_QUERY;",
                "+        }",
                "+",
                "+        // normalize NULL / NOT NULL checks",
                "+        if (not) {",
                "+            if (cond.getType() == AttributeCond.Type.ISNULL) {",
                "+                cond.setType(AttributeCond.Type.ISNOTNULL);",
                "+            } else if (cond.getType() == AttributeCond.Type.ISNOTNULL) {",
                "+                cond.setType(AttributeCond.Type.ISNULL);",
                "+            }",
                "+        }",
                "+",
                "+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").",
                "+                append(svs.field().name).append(\" WHERE \");",
                "+        switch (cond.getType()) {",
                "+            case ISNOTNULL:",
                "+                query.append(\"plainAttrs @> '[{\\\"schema\\\":\\\"\").",
                "+                        append(checked.getLeft().getKey()).",
                "+                        append(\"\\\"}]'::jsonb\");",
                "+                break;",
                "+",
                "+            case ISNULL:",
                "+                query.append(\"any_id NOT IN (\").",
                "+                        append(\"SELECT any_id FROM \").append(svs.field().name).",
                "+                        append(\" WHERE plainAttrs @> '[{\\\"schema\\\":\\\"\").",
                "+                        append(checked.getLeft().getKey()).",
                "+                        append(\"\\\"}]'::jsonb)\");",
                "+                break;",
                "+",
                "+            default:",
                "+                fillAttrQuery(anyUtilsFactory.getInstance(svs.anyTypeKind),",
                "+                        query, checked.getRight(), checked.getLeft(), cond, not, parameters);",
                "+        }",
                "+",
                "+        return query.toString();",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAGroupDAO.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAGroupDAO.java",
                "new file mode 100644",
                "index 0000000000..4c020c6417",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAGroupDAO.java",
                "@@ -0,0 +1,81 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.dao;",
                "+",
                "+import java.util.List;",
                "+import org.apache.syncope.core.persistence.api.dao.PGAnyDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.group.Group;",
                "+import org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "+import org.springframework.transaction.annotation.Transactional;",
                "+",
                "+public class PGJPAGroupDAO extends JPAGroupDAO {",
                "+",
                "+    private PGAnyDAO anyDAO;",
                "+",
                "+    private PGAnyDAO anyDAO() {",
                "+        if (anyDAO == null) {",
                "+            anyDAO = ApplicationContextProvider.getApplicationContext().getBean(PGAnyDAO.class);",
                "+        }",
                "+        return anyDAO;",
                "+    }",
                "+",
                "+    @Transactional(readOnly = true)",
                "+    @Override",
                "+    public Group find(final String key) {",
                "+        return entityManager().find(PGJPAGroup.class, key);",
                "+    }",
                "+",
                "+    @Override",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    public List<Group> findByPlainAttrValue(",
                "+            final String schemaKey,",
                "+            final PlainAttrValue attrValue,",
                "+            final boolean ignoreCaseMatch) {",
                "+",
                "+        return anyDAO().findByPlainAttrValue(PGJPAGroup.TABLE, anyUtils(), schemaKey, attrValue, ignoreCaseMatch);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Group findByPlainAttrUniqueValue(",
                "+            final String schemaKey,",
                "+            final PlainAttrValue attrUniqueValue,",
                "+            final boolean ignoreCaseMatch) {",
                "+",
                "+        return anyDAO().findByPlainAttrUniqueValue(PGJPAGroup.TABLE, anyUtils(),",
                "+                schemaKey, attrUniqueValue, ignoreCaseMatch);",
                "+    }",
                "+",
                "+    @Override",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    public List<Group> findByDerAttrValue(",
                "+            final String schemaKey,",
                "+            final String value,",
                "+            final boolean ignoreCaseMatch) {",
                "+",
                "+        return anyDAO().findByDerAttrValue(PGJPAGroup.TABLE, anyUtils(), schemaKey, value, ignoreCaseMatch);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Group save(final Group group) {",
                "+        anyDAO().checkBeforeSave(PGJPAGroup.TABLE, anyUtils(), group);",
                "+        return super.save(group);",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrDAO.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrDAO.java",
                "new file mode 100644",
                "index 0000000000..5ede5a6ea9",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrDAO.java",
                "@@ -0,0 +1,34 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.dao;",
                "+",
                "+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.Any;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+",
                "+public class PGJPAPlainAttrDAO extends AbstractDAO<PlainAttr<?>> implements PlainAttrDAO {",
                "+",
                "+    @Override",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    public <T extends PlainAttr<?>> void delete(final T plainAttr) {",
                "+        if (plainAttr.getOwner() != null) {",
                "+            ((Any<T>) plainAttr.getOwner()).remove(plainAttr);",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrValueDAO.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrValueDAO.java",
                "new file mode 100644",
                "index 0000000000..0b67612878",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrValueDAO.java",
                "@@ -0,0 +1,46 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.dao;",
                "+",
                "+import static org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO.getEntityReference;",
                "+",
                "+import java.util.stream.Collectors;",
                "+import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                "+import org.apache.syncope.core.persistence.api.entity.Entity;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "+",
                "+public class PGJPAPlainAttrValueDAO extends AbstractDAO<PlainAttrValue> implements PlainAttrValueDAO {",
                "+",
                "+    @Override",
                "+    public void deleteAll(final PlainAttr<?> attr, final AnyUtils anyUtils) {",
                "+        if (attr.getUniqueValue() == null) {",
                "+            attr.getValues().stream().map(Entity::getKey).collect(Collectors.toSet()).forEach(attrValueKey -> {",
                "+                PlainAttrValue attrValue = anyUtils.plainAttrValueClass().cast(",
                "+                        entityManager().find(getEntityReference(anyUtils.plainAttrValueClass()), attrValueKey));",
                "+                if (attrValue != null) {",
                "+                    attr.getValues().remove(attrValue);",
                "+                }",
                "+            });",
                "+        } else {",
                "+            attr.setUniqueValue(null);",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainSchemaDAO.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainSchemaDAO.java",
                "new file mode 100644",
                "index 0000000000..ba8b97ba15",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainSchemaDAO.java",
                "@@ -0,0 +1,38 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.dao;",
                "+",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                "+",
                "+public class PGJPAPlainSchemaDAO extends JPAPlainSchemaDAO {",
                "+",
                "+    @Override",
                "+    public <T extends PlainAttr<?>> List<T> findAttrs(final PlainSchema schema, final Class<T> reference) {",
                "+        // not possible",
                "+        return Collections.emptyList();",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void deleteAttrs(final PlainSchema schema) {",
                "+        // nothing to do",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAUserDAO.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAUserDAO.java",
                "new file mode 100644",
                "index 0000000000..340ba6e4e7",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAUserDAO.java",
                "@@ -0,0 +1,89 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.dao;",
                "+",
                "+import java.util.List;",
                "+import java.util.Set;",
                "+import org.apache.commons.lang3.tuple.Pair;",
                "+import org.apache.syncope.core.persistence.api.dao.PGAnyDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.user.User;",
                "+import org.apache.syncope.core.persistence.jpa.entity.user.PGJPAUser;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "+import org.springframework.transaction.annotation.Transactional;",
                "+",
                "+public class PGJPAUserDAO extends JPAUserDAO {",
                "+",
                "+    private PGAnyDAO anyDAO;",
                "+",
                "+    private PGAnyDAO anyDAO() {",
                "+        if (anyDAO == null) {",
                "+            anyDAO = ApplicationContextProvider.getApplicationContext().getBean(PGAnyDAO.class);",
                "+        }",
                "+        return anyDAO;",
                "+    }",
                "+",
                "+    @Transactional(readOnly = true)",
                "+    @Override",
                "+    public User find(final String key) {",
                "+        return entityManager().find(PGJPAUser.class, key);",
                "+    }",
                "+",
                "+    @Override",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    public List<User> findByPlainAttrValue(",
                "+            final String schemaKey,",
                "+            final PlainAttrValue attrValue,",
                "+            final boolean ignoreCaseMatch) {",
                "+",
                "+        return anyDAO().findByPlainAttrValue(PGJPAUser.TABLE, anyUtils(), schemaKey, attrValue, ignoreCaseMatch);",
                "+    }",
                "+",
                "+    @Override",
                "+    public User findByPlainAttrUniqueValue(",
                "+            final String schemaKey,",
                "+            final PlainAttrValue attrUniqueValue,",
                "+            final boolean ignoreCaseMatch) {",
                "+",
                "+        return anyDAO().findByPlainAttrUniqueValue(PGJPAUser.TABLE, anyUtils(),",
                "+                schemaKey, attrUniqueValue, ignoreCaseMatch);",
                "+    }",
                "+",
                "+    @Override",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    public List<User> findByDerAttrValue(",
                "+            final String schemaKey,",
                "+            final String value,",
                "+            final boolean ignoreCaseMatch) {",
                "+",
                "+        return anyDAO().findByDerAttrValue(PGJPAUser.TABLE, anyUtils(), schemaKey, value, ignoreCaseMatch);",
                "+    }",
                "+",
                "+    @Override",
                "+    public User save(final User user) {",
                "+        anyDAO().checkBeforeSave(PGJPAUser.TABLE, anyUtils(), user);",
                "+        return super.save(user);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Pair<Set<String>, Set<String>> saveAndGetDynGroupMembs(final User user) {",
                "+        anyDAO().checkBeforeSave(PGJPAUser.TABLE, anyUtils(), user);",
                "+        return super.saveAndGetDynGroupMembs(user);",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAAny.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAAny.java",
                "new file mode 100644",
                "index 0000000000..005e616fd1",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAAny.java",
                "@@ -0,0 +1,33 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity;",
                "+",
                "+import java.util.List;",
                "+import org.apache.syncope.core.persistence.api.entity.Any;",
                "+",
                "+public interface PGJPAAny<A extends Any<?>> {",
                "+",
                "+    String getPlainAttrsJSON();",
                "+",
                "+    void setPlainAttrsJSON(String plainAttrs);",
                "+",
                "+    boolean add(PGPlainAttr<A> attr);",
                "+",
                "+    List<? extends PGPlainAttr<A>> getPlainAttrList();",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityFactory.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityFactory.java",
                "new file mode 100644",
                "index 0000000000..0054d3f328",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityFactory.java",
                "@@ -0,0 +1,132 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity;",
                "+",
                "+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.Entity;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.Conf;",
                "+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.group.Group;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.user.User;",
                "+import org.apache.syncope.core.persistence.jpa.dao.PGJPAAnySearchDAO;",
                "+import org.apache.syncope.core.persistence.jpa.entity.anyobject.PGAPlainAttr;",
                "+import org.apache.syncope.core.persistence.jpa.entity.anyobject.PGAPlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.jpa.entity.anyobject.PGAPlainAttrValue;",
                "+import org.apache.syncope.core.persistence.jpa.entity.anyobject.PGJPAAnyObject;",
                "+import org.apache.syncope.core.persistence.jpa.entity.conf.PGCPlainAttr;",
                "+import org.apache.syncope.core.persistence.jpa.entity.conf.PGCPlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.jpa.entity.conf.PGCPlainAttrValue;",
                "+import org.apache.syncope.core.persistence.jpa.entity.conf.PGJPAConf;",
                "+import org.apache.syncope.core.persistence.jpa.entity.group.PGGPlainAttr;",
                "+import org.apache.syncope.core.persistence.jpa.entity.group.PGGPlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.jpa.entity.group.PGGPlainAttrValue;",
                "+import org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup;",
                "+import org.apache.syncope.core.persistence.jpa.entity.user.PGJPAUser;",
                "+import org.apache.syncope.core.persistence.jpa.entity.user.PGUPlainAttr;",
                "+import org.apache.syncope.core.persistence.jpa.entity.user.PGUPlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.jpa.entity.user.PGUPlainAttrValue;",
                "+import org.apache.syncope.core.spring.security.SecureRandomUtils;",
                "+",
                "+public class PGJPAEntityFactory extends JPAEntityFactory {",
                "+",
                "+    @Override",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    public <E extends Entity> E newEntity(final Class<E> reference) {",
                "+        E result;",
                "+",
                "+        if (reference.equals(User.class)) {",
                "+            result = (E) new PGJPAUser();",
                "+            ((PGJPAUser) result).setKey(SecureRandomUtils.generateRandomUUID().toString());",
                "+        } else if (reference.equals(Group.class)) {",
                "+            result = (E) new PGJPAGroup();",
                "+            ((PGJPAGroup) result).setKey(SecureRandomUtils.generateRandomUUID().toString());",
                "+        } else if (reference.equals(AnyObject.class)) {",
                "+            result = (E) new PGJPAAnyObject();",
                "+            ((PGJPAAnyObject) result).setKey(SecureRandomUtils.generateRandomUUID().toString());",
                "+        } else if (reference.equals(Conf.class)) {",
                "+            result = (E) new PGJPAConf();",
                "+            ((PGJPAConf) result).setKey(SecureRandomUtils.generateRandomUUID().toString());",
                "+        } else if (reference.equals(APlainAttr.class)) {",
                "+            result = (E) new PGAPlainAttr();",
                "+        } else if (reference.equals(APlainAttrValue.class)) {",
                "+            result = (E) new PGAPlainAttrValue();",
                "+        } else if (reference.equals(APlainAttrUniqueValue.class)) {",
                "+            result = (E) new PGAPlainAttrUniqueValue();",
                "+        } else if (reference.equals(CPlainAttr.class)) {",
                "+            result = (E) new PGCPlainAttr();",
                "+        } else if (reference.equals(CPlainAttrValue.class)) {",
                "+            result = (E) new PGCPlainAttrValue();",
                "+        } else if (reference.equals(CPlainAttrUniqueValue.class)) {",
                "+            result = (E) new PGCPlainAttrUniqueValue();",
                "+        } else if (reference.equals(GPlainAttr.class)) {",
                "+            result = (E) new PGGPlainAttr();",
                "+        } else if (reference.equals(GPlainAttrValue.class)) {",
                "+            result = (E) new PGGPlainAttrValue();",
                "+        } else if (reference.equals(GPlainAttrUniqueValue.class)) {",
                "+            result = (E) new PGGPlainAttrUniqueValue();",
                "+        } else if (reference.equals(UPlainAttr.class)) {",
                "+            result = (E) new PGUPlainAttr();",
                "+        } else if (reference.equals(UPlainAttrValue.class)) {",
                "+            result = (E) new PGUPlainAttrValue();",
                "+        } else if (reference.equals(UPlainAttrUniqueValue.class)) {",
                "+            result = (E) new PGUPlainAttrUniqueValue();",
                "+        } else {",
                "+            result = super.newEntity(reference);",
                "+        }",
                "+",
                "+        return result;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Class<? extends User> userClass() {",
                "+        return PGJPAUser.class;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Class<? extends Group> groupClass() {",
                "+        return PGJPAGroup.class;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Class<? extends AnyObject> anyObjectClass() {",
                "+        return PGJPAAnyObject.class;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Class<? extends Conf> confClass() {",
                "+        return PGJPAConf.class;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Class<? extends AnySearchDAO> anySearchDAOClass() {",
                "+        return PGJPAAnySearchDAO.class;",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityListener.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityListener.java",
                "new file mode 100644",
                "index 0000000000..ddbb13e160",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityListener.java",
                "@@ -0,0 +1,49 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity;",
                "+",
                "+import java.util.List;",
                "+import org.apache.syncope.core.persistence.api.entity.Any;",
                "+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "+",
                "+public abstract class PGJPAEntityListener<A extends Any<?>> {",
                "+",
                "+    protected abstract List<? extends PGPlainAttr<A>> getValues(String plainAttrsJSON);",
                "+",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    protected void read(final PGJPAAny<A> entity) {",
                "+        if (entity.getPlainAttrsJSON() != null) {",
                "+            getValues(entity.getPlainAttrsJSON()).stream().filter(attr -> attr.getSchema() != null).",
                "+                    map(attr -> {",
                "+                        attr.setOwner((A) entity);",
                "+                        attr.getValues().forEach(value -> value.setAttr(attr));",
                "+                        if (attr.getUniqueValue() != null) {",
                "+                            attr.getUniqueValue().setAttr(attr);",
                "+                        }",
                "+                        return attr;",
                "+                    }).forEach(attr -> entity.add(attr));",
                "+        }",
                "+    }",
                "+",
                "+    protected void save(final PGJPAAny<A> entity) {",
                "+        entity.setPlainAttrsJSON(entity.getPlainAttrList().isEmpty()",
                "+                ? \"[{}]\"",
                "+                : POJOHelper.serialize(entity.getPlainAttrList()));",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGPlainAttr.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGPlainAttr.java",
                "new file mode 100644",
                "index 0000000000..a802d3cf62",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGPlainAttr.java",
                "@@ -0,0 +1,30 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity;",
                "+",
                "+import org.apache.syncope.core.persistence.api.entity.Any;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "+",
                "+public interface PGPlainAttr<A extends Any<?>> extends PlainAttr<A> {",
                "+",
                "+    String getSchemaKey();",
                "+",
                "+    boolean add(PlainAttrValue value);",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGAPlainAttr.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGAPlainAttr.java",
                "new file mode 100644",
                "index 0000000000..292107ed82",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGAPlainAttr.java",
                "@@ -0,0 +1,196 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.anyobject;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonSetter;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;",
                "+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;",
                "+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "+",
                "+@JsonIgnoreProperties(\"valuesAsStrings\")",
                "+@JsonInclude(JsonInclude.Include.NON_EMPTY)",
                "+public class PGAPlainAttr extends AbstractPlainAttr<AnyObject> implements APlainAttr, PGPlainAttr<AnyObject> {",
                "+",
                "+    private static final long serialVersionUID = 806271775349587902L;",
                "+",
                "+    /**",
                "+     * The owner of this attribute.",
                "+     */",
                "+    @JsonIgnore",
                "+    private PGJPAAnyObject owner;",
                "+",
                "+    @JsonProperty",
                "+    private String schema;",
                "+",
                "+    /**",
                "+     * The membership of this attribute; might be {@code NULL} if this attribute is not related to a membership.",
                "+     */",
                "+    @JsonProperty",
                "+    private String membership;",
                "+",
                "+    /**",
                "+     * Values of this attribute (if schema is not UNIQUE).",
                "+     */",
                "+    private final List<PGAPlainAttrValue> values = new ArrayList<>();",
                "+",
                "+    /**",
                "+     * Value of this attribute (if schema is UNIQUE).",
                "+     */",
                "+    @JsonProperty",
                "+    private PGAPlainAttrUniqueValue uniqueValue;",
                "+",
                "+    @Override",
                "+    public AnyObject getOwner() {",
                "+        return owner;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setOwner(final AnyObject owner) {",
                "+        checkType(owner, PGJPAAnyObject.class);",
                "+        this.owner = (PGJPAAnyObject) owner;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public String getSchemaKey() {",
                "+        return schema;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public JPAPlainSchema getSchema() {",
                "+        return (JPAPlainSchema) ApplicationContextProvider.getBeanFactory().getBean(PlainSchemaDAO.class).find(schema);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setSchema(final PlainSchema schema) {",
                "+        if (schema != null) {",
                "+            this.schema = schema.getKey();",
                "+        }",
                "+    }",
                "+",
                "+    @JsonSetter(\"schema\")",
                "+    public void setSchema(final String schema) {",
                "+        this.schema = schema;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    public String getMembershipKey() {",
                "+        return membership;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public AMembership getMembership() {",
                "+        return ApplicationContextProvider.getBeanFactory().getBean(AnyObjectDAO.class).findMembership(membership);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setMembership(final AMembership membership) {",
                "+        if (membership != null) {",
                "+            this.membership = membership.getKey();",
                "+        }",
                "+    }",
                "+",
                "+    @JsonSetter(\"membership\")",
                "+    public void setMembership(final String membership) {",
                "+        this.membership = membership;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected boolean addForMultiValue(final PlainAttrValue attrValue) {",
                "+        checkType(attrValue, PGAPlainAttrValue.class);",
                "+        return values.add((PGAPlainAttrValue) attrValue);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean add(final PlainAttrValue value) {",
                "+        return addForMultiValue(value);",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<? extends APlainAttrValue> getValues() {",
                "+        return values;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    public List<PGAPlainAttrValue> getPGValues() {",
                "+        return values;",
                "+    }",
                "+",
                "+    @Override",
                "+    public PGAPlainAttrUniqueValue getUniqueValue() {",
                "+        return uniqueValue;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {",
                "+        checkType(uniqueValue, PGAPlainAttrUniqueValue.class);",
                "+        this.uniqueValue = (PGAPlainAttrUniqueValue) uniqueValue;",
                "+    }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(schema).",
                "+                append(membership).",
                "+                append(values).",
                "+                append(uniqueValue).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final PGAPlainAttr other = (PGAPlainAttr) obj;",
                "+        return new EqualsBuilder().",
                "+                append(schema, other.schema).",
                "+                append(membership, other.membership).",
                "+                append(values, other.values).",
                "+                append(uniqueValue, other.uniqueValue).",
                "+                build();",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGAPlainAttrUniqueValue.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGAPlainAttrUniqueValue.java",
                "new file mode 100644",
                "index 0000000000..dd245993b8",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGAPlainAttrUniqueValue.java",
                "@@ -0,0 +1,60 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.anyobject;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;",
                "+",
                "+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })",
                "+@JsonInclude(JsonInclude.Include.NON_NULL)",
                "+public class PGAPlainAttrUniqueValue extends AbstractPlainAttrValue implements APlainAttrUniqueValue {",
                "+",
                "+    private static final long serialVersionUID = -4053996864791245312L;",
                "+",
                "+    @JsonIgnore",
                "+    private PGAPlainAttr attr;",
                "+",
                "+    @Override",
                "+    public APlainAttr getAttr() {",
                "+        return attr;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setAttr(final PlainAttr<?> attr) {",
                "+        checkType(attr, PGAPlainAttr.class);",
                "+        this.attr = (PGAPlainAttr) attr;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public PlainSchema getSchema() {",
                "+        return getAttr() == null ? null : getAttr().getSchema();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setSchema(final PlainSchema schema) {",
                "+        // nothing to do",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGAPlainAttrValue.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGAPlainAttrValue.java",
                "new file mode 100644",
                "index 0000000000..b3b76fd1d6",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGAPlainAttrValue.java",
                "@@ -0,0 +1,48 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.anyobject;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;",
                "+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;",
                "+",
                "+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })",
                "+@JsonInclude(JsonInclude.Include.NON_NULL)",
                "+public class PGAPlainAttrValue extends AbstractPlainAttrValue implements APlainAttrValue {",
                "+",
                "+    private static final long serialVersionUID = 1832825176101443555L;",
                "+",
                "+    @JsonIgnore",
                "+    private PGAPlainAttr attr;",
                "+",
                "+    @Override",
                "+    public APlainAttr getAttr() {",
                "+        return attr;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setAttr(final PlainAttr<?> attr) {",
                "+        checkType(attr, PGAPlainAttr.class);",
                "+        this.attr = (PGAPlainAttr) attr;",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObject.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObject.java",
                "new file mode 100644",
                "index 0000000000..dad8536c60",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObject.java",
                "@@ -0,0 +1,97 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.anyobject;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import javax.persistence.Column;",
                "+import javax.persistence.Entity;",
                "+import javax.persistence.EntityListeners;",
                "+import javax.persistence.Lob;",
                "+import javax.persistence.Table;",
                "+import javax.persistence.Transient;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGJPAAny;",
                "+import org.apache.syncope.core.persistence.jpa.validation.entity.PGJPAAnyCheck;",
                "+",
                "+@Entity",
                "+@Table(name = JPAAnyObject.TABLE)",
                "+@EntityListeners({ PGJPAAnyObjectListener.class })",
                "+@PGJPAAnyCheck",
                "+public class PGJPAAnyObject extends JPAAnyObject implements PGJPAAny<AnyObject>, AnyObject {",
                "+",
                "+    private static final long serialVersionUID = -8543654943709531885L;",
                "+",
                "+    @Lob",
                "+    @Column(columnDefinition = \"jsonb\")",
                "+    private String plainAttrs;",
                "+",
                "+    @Transient",
                "+    private final List<PGAPlainAttr> plainAttrList = new ArrayList<>();",
                "+",
                "+    @Override",
                "+    public String getPlainAttrsJSON() {",
                "+        return plainAttrs;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setPlainAttrsJSON(final String plainAttrs) {",
                "+        this.plainAttrs = plainAttrs;",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<PGAPlainAttr> getPlainAttrList() {",
                "+        return plainAttrList;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean add(final PGPlainAttr<AnyObject> attr) {",
                "+        return add((APlainAttr) attr);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean add(final APlainAttr attr) {",
                "+        checkType(attr, PGAPlainAttr.class);",
                "+        return plainAttrList.add((PGAPlainAttr) attr);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean remove(final APlainAttr attr) {",
                "+        return plainAttrList.removeIf(pgattr",
                "+                -> pgattr.getSchemaKey().equals(attr.getSchema().getKey())",
                "+                && attr.getOwner().getKey().equals(getKey())",
                "+                && attr.getMembership() == null",
                "+                ? true",
                "+                : pgattr.getMembership() != null && pgattr.getMembershipKey().equals(attr.getMembership().getKey()));",
                "+    }",
                "+",
                "+    @Override",
                "+    protected List<? extends APlainAttr> internalGetPlainAttrs() {",
                "+        return plainAttrList;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean remove(final AMembership membership) {",
                "+        plainAttrList.removeIf(attr -> attr.getMembership().getKey().equals(membership.getKey()));",
                "+        return super.remove(membership);",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObjectListener.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObjectListener.java",
                "new file mode 100644",
                "index 0000000000..61b201f346",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObjectListener.java",
                "@@ -0,0 +1,49 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.anyobject;",
                "+",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                "+import java.util.List;",
                "+import javax.persistence.PostLoad;",
                "+import javax.persistence.PrePersist;",
                "+import javax.persistence.PreUpdate;",
                "+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGJPAEntityListener;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;",
                "+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "+",
                "+public class PGJPAAnyObjectListener extends PGJPAEntityListener<AnyObject> {",
                "+",
                "+    @Override",
                "+    protected List<? extends PGPlainAttr<AnyObject>> getValues(final String plainAttrsJSON) {",
                "+        return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<PGAPlainAttr>>() {",
                "+        });",
                "+    }",
                "+",
                "+    @PostLoad",
                "+    public void read(final PGJPAAnyObject anyObject) {",
                "+        super.read(anyObject);",
                "+    }",
                "+",
                "+    @PrePersist",
                "+    @PreUpdate",
                "+    public void save(final PGJPAAnyObject anyObject) {",
                "+        super.save(anyObject);",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGCPlainAttr.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGCPlainAttr.java",
                "new file mode 100644",
                "index 0000000000..a45d7d51a6",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGCPlainAttr.java",
                "@@ -0,0 +1,163 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.conf;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonSetter;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.Conf;",
                "+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;",
                "+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "+",
                "+@JsonIgnoreProperties(\"valuesAsStrings\")",
                "+@JsonInclude(JsonInclude.Include.NON_EMPTY)",
                "+public class PGCPlainAttr extends AbstractPlainAttr<Conf> implements CPlainAttr, PGPlainAttr<Conf> {",
                "+",
                "+    private static final long serialVersionUID = 806271775349587902L;",
                "+",
                "+    /**",
                "+     * The owner of this attribute.",
                "+     */",
                "+    @JsonIgnore",
                "+    private PGJPAConf owner;",
                "+",
                "+    @JsonProperty",
                "+    private String schema;",
                "+",
                "+    /**",
                "+     * Values of this attribute (if schema is not UNIQUE).",
                "+     */",
                "+    private final List<PGCPlainAttrValue> values = new ArrayList<>();",
                "+",
                "+    /**",
                "+     * Value of this attribute (if schema is UNIQUE).",
                "+     */",
                "+    @JsonProperty",
                "+    private PGCPlainAttrUniqueValue uniqueValue;",
                "+",
                "+    @Override",
                "+    public Conf getOwner() {",
                "+        return owner;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setOwner(final Conf owner) {",
                "+        checkType(owner, PGJPAConf.class);",
                "+        this.owner = (PGJPAConf) owner;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public String getSchemaKey() {",
                "+        return schema;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public JPAPlainSchema getSchema() {",
                "+        return (JPAPlainSchema) ApplicationContextProvider.getBeanFactory().getBean(PlainSchemaDAO.class).find(schema);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setSchema(final PlainSchema schema) {",
                "+        if (schema != null) {",
                "+            this.schema = schema.getKey();",
                "+        }",
                "+    }",
                "+",
                "+    @JsonSetter(\"schema\")",
                "+    public void setSchema(final String schema) {",
                "+        this.schema = schema;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected boolean addForMultiValue(final PlainAttrValue attrValue) {",
                "+        checkType(attrValue, PGCPlainAttrValue.class);",
                "+        return values.add((PGCPlainAttrValue) attrValue);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean add(final PlainAttrValue value) {",
                "+        return addForMultiValue(value);",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<? extends CPlainAttrValue> getValues() {",
                "+        return values;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    public List<PGCPlainAttrValue> getPGValues() {",
                "+        return values;",
                "+    }",
                "+",
                "+    @Override",
                "+    public PGCPlainAttrUniqueValue getUniqueValue() {",
                "+        return uniqueValue;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {",
                "+        checkType(uniqueValue, PGCPlainAttrUniqueValue.class);",
                "+        this.uniqueValue = (PGCPlainAttrUniqueValue) uniqueValue;",
                "+    }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(schema).",
                "+                append(values).",
                "+                append(uniqueValue).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final PGCPlainAttr other = (PGCPlainAttr) obj;",
                "+        return new EqualsBuilder().",
                "+                append(schema, other.schema).",
                "+                append(values, other.values).",
                "+                append(uniqueValue, other.uniqueValue).",
                "+                build();",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGCPlainAttrUniqueValue.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGCPlainAttrUniqueValue.java",
                "new file mode 100644",
                "index 0000000000..5877f1c1b9",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGCPlainAttrUniqueValue.java",
                "@@ -0,0 +1,60 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.conf;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;",
                "+",
                "+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })",
                "+@JsonInclude(JsonInclude.Include.NON_NULL)",
                "+public class PGCPlainAttrUniqueValue extends AbstractPlainAttrValue implements CPlainAttrUniqueValue {",
                "+",
                "+    private static final long serialVersionUID = -4326417972859745823L;",
                "+",
                "+    @JsonIgnore",
                "+    private PGCPlainAttr attr;",
                "+",
                "+    @Override",
                "+    public CPlainAttr getAttr() {",
                "+        return attr;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setAttr(final PlainAttr<?> attr) {",
                "+        checkType(attr, PGCPlainAttr.class);",
                "+        this.attr = (PGCPlainAttr) attr;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public PlainSchema getSchema() {",
                "+        return getAttr() == null ? null : getAttr().getSchema();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setSchema(final PlainSchema schema) {",
                "+        // nothing to do",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGCPlainAttrValue.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGCPlainAttrValue.java",
                "new file mode 100644",
                "index 0000000000..a537f0fd83",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGCPlainAttrValue.java",
                "@@ -0,0 +1,48 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.conf;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;",
                "+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;",
                "+",
                "+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })",
                "+@JsonInclude(JsonInclude.Include.NON_NULL)",
                "+public class PGCPlainAttrValue extends AbstractPlainAttrValue implements CPlainAttrValue {",
                "+",
                "+    private static final long serialVersionUID = 1832825176101443555L;",
                "+",
                "+    @JsonIgnore",
                "+    private PGCPlainAttr attr;",
                "+",
                "+    @Override",
                "+    public CPlainAttr getAttr() {",
                "+        return attr;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setAttr(final PlainAttr<?> attr) {",
                "+        checkType(attr, PGCPlainAttr.class);",
                "+        this.attr = (PGCPlainAttr) attr;",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConf.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConf.java",
                "new file mode 100644",
                "index 0000000000..a297d18e72",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConf.java",
                "@@ -0,0 +1,85 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.conf;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import javax.persistence.Column;",
                "+import javax.persistence.Entity;",
                "+import javax.persistence.EntityListeners;",
                "+import javax.persistence.Lob;",
                "+import javax.persistence.Table;",
                "+import javax.persistence.Transient;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.Conf;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGJPAAny;",
                "+import org.apache.syncope.core.persistence.jpa.validation.entity.PGJPAAnyCheck;",
                "+",
                "+@Entity",
                "+@Table(name = JPAConf.TABLE)",
                "+@EntityListeners({ PGJPAConfListener.class })",
                "+@PGJPAAnyCheck",
                "+public class PGJPAConf extends JPAConf implements PGJPAAny<Conf>, Conf {",
                "+",
                "+    private static final long serialVersionUID = -8543654943709531885L;",
                "+",
                "+    @Lob",
                "+    @Column(columnDefinition = \"jsonb\")",
                "+    private String plainAttrs;",
                "+",
                "+    @Transient",
                "+    private final List<PGCPlainAttr> plainAttrList = new ArrayList<>();",
                "+",
                "+    @Override",
                "+    public String getPlainAttrsJSON() {",
                "+        return plainAttrs;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setPlainAttrsJSON(final String plainAttrs) {",
                "+        this.plainAttrs = plainAttrs;",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<PGCPlainAttr> getPlainAttrList() {",
                "+        return plainAttrList;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean add(final PGPlainAttr<Conf> attr) {",
                "+        return add((CPlainAttr) attr);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean add(final CPlainAttr attr) {",
                "+        checkType(attr, PGCPlainAttr.class);",
                "+        return plainAttrList.add((PGCPlainAttr) attr);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean remove(final CPlainAttr attr) {",
                "+        return plainAttrList.removeIf(pgattr -> pgattr.getSchemaKey().equals(attr.getSchema().getKey()));",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<? extends CPlainAttr> getPlainAttrs() {",
                "+        return plainAttrList;",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConfListener.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConfListener.java",
                "new file mode 100644",
                "index 0000000000..f1a71985df",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConfListener.java",
                "@@ -0,0 +1,49 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.conf;",
                "+",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                "+import java.util.List;",
                "+import javax.persistence.PostLoad;",
                "+import javax.persistence.PrePersist;",
                "+import javax.persistence.PreUpdate;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.Conf;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGJPAEntityListener;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;",
                "+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "+",
                "+public class PGJPAConfListener extends PGJPAEntityListener<Conf> {",
                "+",
                "+    @Override",
                "+    protected List<? extends PGPlainAttr<Conf>> getValues(final String plainAttrsJSON) {",
                "+        return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<PGCPlainAttr>>() {",
                "+        });",
                "+    }",
                "+",
                "+    @PostLoad",
                "+    public void read(final PGJPAConf conf) {",
                "+        super.read(conf);",
                "+    }",
                "+",
                "+    @PrePersist",
                "+    @PreUpdate",
                "+    public void save(final PGJPAConf conf) {",
                "+        super.save(conf);",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGGPlainAttr.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGGPlainAttr.java",
                "new file mode 100644",
                "index 0000000000..9e785355ca",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGGPlainAttr.java",
                "@@ -0,0 +1,163 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.group;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonSetter;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                "+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.group.Group;",
                "+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;",
                "+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "+",
                "+@JsonIgnoreProperties(\"valuesAsStrings\")",
                "+@JsonInclude(JsonInclude.Include.NON_EMPTY)",
                "+public class PGGPlainAttr extends AbstractPlainAttr<Group> implements GPlainAttr, PGPlainAttr<Group> {",
                "+",
                "+    private static final long serialVersionUID = 806271775349587902L;",
                "+",
                "+    /**",
                "+     * The owner of this attribute.",
                "+     */",
                "+    @JsonIgnore",
                "+    private PGJPAGroup owner;",
                "+",
                "+    @JsonProperty",
                "+    private String schema;",
                "+",
                "+    /**",
                "+     * Values of this attribute (if schema is not UNIQUE).",
                "+     */",
                "+    private final List<PGGPlainAttrValue> values = new ArrayList<>();",
                "+",
                "+    /**",
                "+     * Value of this attribute (if schema is UNIQUE).",
                "+     */",
                "+    @JsonProperty",
                "+    private PGGPlainAttrUniqueValue uniqueValue;",
                "+",
                "+    @Override",
                "+    public Group getOwner() {",
                "+        return owner;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setOwner(final Group owner) {",
                "+        checkType(owner, PGJPAGroup.class);",
                "+        this.owner = (PGJPAGroup) owner;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public String getSchemaKey() {",
                "+        return schema;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public JPAPlainSchema getSchema() {",
                "+        return (JPAPlainSchema) ApplicationContextProvider.getBeanFactory().getBean(PlainSchemaDAO.class).find(schema);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setSchema(final PlainSchema schema) {",
                "+        if (schema != null) {",
                "+            this.schema = schema.getKey();",
                "+        }",
                "+    }",
                "+",
                "+    @JsonSetter(\"schema\")",
                "+    public void setSchema(final String schema) {",
                "+        this.schema = schema;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected boolean addForMultiValue(final PlainAttrValue attrValue) {",
                "+        checkType(attrValue, PGGPlainAttrValue.class);",
                "+        return values.add((PGGPlainAttrValue) attrValue);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean add(final PlainAttrValue value) {",
                "+        return addForMultiValue(value);",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<? extends GPlainAttrValue> getValues() {",
                "+        return values;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    public List<PGGPlainAttrValue> getPGValues() {",
                "+        return values;",
                "+    }",
                "+",
                "+    @Override",
                "+    public PGGPlainAttrUniqueValue getUniqueValue() {",
                "+        return uniqueValue;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {",
                "+        checkType(uniqueValue, PGGPlainAttrUniqueValue.class);",
                "+        this.uniqueValue = (PGGPlainAttrUniqueValue) uniqueValue;",
                "+    }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(schema).",
                "+                append(values).",
                "+                append(uniqueValue).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final PGGPlainAttr other = (PGGPlainAttr) obj;",
                "+        return new EqualsBuilder().",
                "+                append(schema, other.schema).",
                "+                append(values, other.values).",
                "+                append(uniqueValue, other.uniqueValue).",
                "+                build();",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGGPlainAttrUniqueValue.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGGPlainAttrUniqueValue.java",
                "new file mode 100644",
                "index 0000000000..c6219a0279",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGGPlainAttrUniqueValue.java",
                "@@ -0,0 +1,60 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.group;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                "+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;",
                "+",
                "+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })",
                "+@JsonInclude(JsonInclude.Include.NON_NULL)",
                "+public class PGGPlainAttrUniqueValue extends AbstractPlainAttrValue implements GPlainAttrUniqueValue {",
                "+",
                "+    private static final long serialVersionUID = -4326417972859745823L;",
                "+",
                "+    @JsonIgnore",
                "+    private PGGPlainAttr attr;",
                "+",
                "+    @Override",
                "+    public GPlainAttr getAttr() {",
                "+        return attr;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setAttr(final PlainAttr<?> attr) {",
                "+        checkType(attr, PGGPlainAttr.class);",
                "+        this.attr = (PGGPlainAttr) attr;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public PlainSchema getSchema() {",
                "+        return getAttr() == null ? null : getAttr().getSchema();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setSchema(final PlainSchema schema) {",
                "+        // nothing to do",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGGPlainAttrValue.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGGPlainAttrValue.java",
                "new file mode 100644",
                "index 0000000000..398e5b03b8",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGGPlainAttrValue.java",
                "@@ -0,0 +1,48 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.group;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;",
                "+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;",
                "+",
                "+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })",
                "+@JsonInclude(JsonInclude.Include.NON_NULL)",
                "+public class PGGPlainAttrValue extends AbstractPlainAttrValue implements GPlainAttrValue {",
                "+",
                "+    private static final long serialVersionUID = 1832825176101443555L;",
                "+",
                "+    @JsonIgnore",
                "+    private PGGPlainAttr attr;",
                "+",
                "+    @Override",
                "+    public GPlainAttr getAttr() {",
                "+        return attr;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setAttr(final PlainAttr<?> attr) {",
                "+        checkType(attr, PGGPlainAttr.class);",
                "+        this.attr = (PGGPlainAttr) attr;",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroup.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroup.java",
                "new file mode 100644",
                "index 0000000000..6207dfce99",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroup.java",
                "@@ -0,0 +1,87 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.group;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import javax.persistence.Column;",
                "+import javax.persistence.Entity;",
                "+import javax.persistence.EntityListeners;",
                "+import javax.persistence.Lob;",
                "+import javax.persistence.Table;",
                "+import javax.persistence.Transient;",
                "+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.group.Group;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGJPAAny;",
                "+import org.apache.syncope.core.persistence.jpa.validation.entity.PGJPAAnyCheck;",
                "+",
                "+@Entity",
                "+@Table(name = JPAGroup.TABLE)",
                "+@EntityListeners({ PGJPAGroupListener.class })",
                "+@PGJPAAnyCheck",
                "+public class PGJPAGroup extends JPAGroup implements PGJPAAny<Group>, Group {",
                "+",
                "+    private static final long serialVersionUID = -8543654943709531885L;",
                "+",
                "+    @Lob",
                "+    @Column(columnDefinition = \"jsonb\")",
                "+    private String plainAttrs;",
                "+",
                "+    @Transient",
                "+    private final List<PGGPlainAttr> plainAttrList = new ArrayList<>();",
                "+",
                "+    @Override",
                "+    public String getPlainAttrsJSON() {",
                "+        return plainAttrs;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setPlainAttrsJSON(final String plainAttrs) {",
                "+        this.plainAttrs = plainAttrs;",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<PGGPlainAttr> getPlainAttrList() {",
                "+        return plainAttrList;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean add(final PGPlainAttr<Group> attr) {",
                "+        return add((GPlainAttr) attr);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean add(final GPlainAttr attr) {",
                "+        checkType(attr, PGGPlainAttr.class);",
                "+        return plainAttrList.add((PGGPlainAttr) attr);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean remove(final GPlainAttr attr) {",
                "+        return plainAttrList.removeIf(pgattr",
                "+                -> pgattr.getSchemaKey().equals(attr.getSchema().getKey())",
                "+                && attr.getOwner().getKey().equals(getKey()));",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<? extends GPlainAttr> getPlainAttrs() {",
                "+        return plainAttrList;",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroupListener.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroupListener.java",
                "new file mode 100644",
                "index 0000000000..b32f4712c2",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroupListener.java",
                "@@ -0,0 +1,49 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.group;",
                "+",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                "+import java.util.List;",
                "+import javax.persistence.PostLoad;",
                "+import javax.persistence.PrePersist;",
                "+import javax.persistence.PreUpdate;",
                "+import org.apache.syncope.core.persistence.api.entity.group.Group;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGJPAEntityListener;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;",
                "+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "+",
                "+public class PGJPAGroupListener extends PGJPAEntityListener<Group> {",
                "+",
                "+    @Override",
                "+    protected List<? extends PGPlainAttr<Group>> getValues(final String plainAttrsJSON) {",
                "+        return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<PGGPlainAttr>>() {",
                "+        });",
                "+    }",
                "+",
                "+    @PostLoad",
                "+    public void read(final PGJPAGroup group) {",
                "+        super.read(group);",
                "+    }",
                "+",
                "+    @PrePersist",
                "+    @PreUpdate",
                "+    public void save(final PGJPAGroup group) {",
                "+        super.save(group);",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUser.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUser.java",
                "new file mode 100644",
                "index 0000000000..486ba1c2c9",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUser.java",
                "@@ -0,0 +1,90 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.user;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import javax.persistence.Column;",
                "+import javax.persistence.Entity;",
                "+import javax.persistence.EntityListeners;",
                "+import javax.persistence.Lob;",
                "+import javax.persistence.Table;",
                "+import javax.persistence.Transient;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.user.User;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGJPAAny;",
                "+import org.apache.syncope.core.persistence.jpa.validation.entity.PGJPAAnyCheck;",
                "+",
                "+@Entity",
                "+@Table(name = JPAUser.TABLE)",
                "+@EntityListeners({ PGJPAUserListener.class })",
                "+@PGJPAAnyCheck",
                "+public class PGJPAUser extends JPAUser implements PGJPAAny<User>, User {",
                "+",
                "+    private static final long serialVersionUID = -8543654943709531885L;",
                "+",
                "+    @Lob",
                "+    @Column(columnDefinition = \"jsonb\")",
                "+    private String plainAttrs;",
                "+",
                "+    @Transient",
                "+    private final List<PGUPlainAttr> plainAttrList = new ArrayList<>();",
                "+",
                "+    @Override",
                "+    public String getPlainAttrsJSON() {",
                "+        return plainAttrs;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setPlainAttrsJSON(final String plainAttrs) {",
                "+        this.plainAttrs = plainAttrs;",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<PGUPlainAttr> getPlainAttrList() {",
                "+        return plainAttrList;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean add(final PGPlainAttr<User> attr) {",
                "+        return add((UPlainAttr) attr);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean add(final UPlainAttr attr) {",
                "+        checkType(attr, PGUPlainAttr.class);",
                "+        return plainAttrList.add((PGUPlainAttr) attr);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean remove(final UPlainAttr attr) {",
                "+        return plainAttrList.removeIf(pgattr",
                "+                -> pgattr.getSchemaKey().equals(attr.getSchema().getKey())",
                "+                && attr.getOwner().getKey().equals(getKey())",
                "+                && attr.getMembership() == null",
                "+                ? true",
                "+                : pgattr.getMembership() != null && pgattr.getMembershipKey().equals(attr.getMembership().getKey()));",
                "+    }",
                "+",
                "+    @Override",
                "+    protected List<? extends UPlainAttr> internalGetPlainAttrs() {",
                "+        return plainAttrList;",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUserListener.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUserListener.java",
                "new file mode 100644",
                "index 0000000000..5baf4fcf2c",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUserListener.java",
                "@@ -0,0 +1,49 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.user;",
                "+",
                "+import com.fasterxml.jackson.core.type.TypeReference;",
                "+import java.util.List;",
                "+import javax.persistence.PostLoad;",
                "+import javax.persistence.PrePersist;",
                "+import javax.persistence.PreUpdate;",
                "+import org.apache.syncope.core.persistence.api.entity.user.User;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGJPAEntityListener;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;",
                "+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "+",
                "+public class PGJPAUserListener extends PGJPAEntityListener<User> {",
                "+",
                "+    @Override",
                "+    protected List<? extends PGPlainAttr<User>> getValues(final String plainAttrsJSON) {",
                "+        return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<PGUPlainAttr>>() {",
                "+        });",
                "+    }",
                "+",
                "+    @PostLoad",
                "+    public void read(final PGJPAUser user) {",
                "+        super.read(user);",
                "+    }",
                "+",
                "+    @PrePersist",
                "+    @PreUpdate",
                "+    public void save(final PGJPAUser user) {",
                "+        super.save(user);",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGUPlainAttr.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGUPlainAttr.java",
                "new file mode 100644",
                "index 0000000000..09abb2679e",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGUPlainAttr.java",
                "@@ -0,0 +1,196 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.user;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import com.fasterxml.jackson.annotation.JsonProperty;",
                "+import com.fasterxml.jackson.annotation.JsonSetter;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import org.apache.commons.lang3.builder.EqualsBuilder;",
                "+import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;",
                "+import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UMembership;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;",
                "+import org.apache.syncope.core.persistence.api.entity.user.User;",
                "+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;",
                "+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "+",
                "+@JsonIgnoreProperties(\"valuesAsStrings\")",
                "+@JsonInclude(JsonInclude.Include.NON_EMPTY)",
                "+public class PGUPlainAttr extends AbstractPlainAttr<User> implements UPlainAttr, PGPlainAttr<User> {",
                "+",
                "+    private static final long serialVersionUID = 806271775349587902L;",
                "+",
                "+    /**",
                "+     * The owner of this attribute.",
                "+     */",
                "+    @JsonIgnore",
                "+    private PGJPAUser owner;",
                "+",
                "+    @JsonProperty",
                "+    private String schema;",
                "+",
                "+    /**",
                "+     * The membership of this attribute; might be {@code NULL} if this attribute is not related to a membership.",
                "+     */",
                "+    @JsonProperty",
                "+    private String membership;",
                "+",
                "+    /**",
                "+     * Values of this attribute (if schema is not UNIQUE).",
                "+     */",
                "+    private final List<PGUPlainAttrValue> values = new ArrayList<>();",
                "+",
                "+    /**",
                "+     * Value of this attribute (if schema is UNIQUE).",
                "+     */",
                "+    @JsonProperty",
                "+    private PGUPlainAttrUniqueValue uniqueValue;",
                "+",
                "+    @Override",
                "+    public User getOwner() {",
                "+        return owner;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setOwner(final User owner) {",
                "+        checkType(owner, PGJPAUser.class);",
                "+        this.owner = (PGJPAUser) owner;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public String getSchemaKey() {",
                "+        return schema;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public JPAPlainSchema getSchema() {",
                "+        return (JPAPlainSchema) ApplicationContextProvider.getBeanFactory().getBean(PlainSchemaDAO.class).find(schema);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setSchema(final PlainSchema schema) {",
                "+        if (schema != null) {",
                "+            this.schema = schema.getKey();",
                "+        }",
                "+    }",
                "+",
                "+    @JsonSetter(\"schema\")",
                "+    public void setSchema(final String schema) {",
                "+        this.schema = schema;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    public String getMembershipKey() {",
                "+        return membership;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public UMembership getMembership() {",
                "+        return ApplicationContextProvider.getBeanFactory().getBean(UserDAO.class).findMembership(membership);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setMembership(final UMembership membership) {",
                "+        if (membership != null) {",
                "+            this.membership = membership.getKey();",
                "+        }",
                "+    }",
                "+",
                "+    @JsonSetter(\"membership\")",
                "+    public void setMembership(final String membership) {",
                "+        this.membership = membership;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected boolean addForMultiValue(final PlainAttrValue attrValue) {",
                "+        checkType(attrValue, PGUPlainAttrValue.class);",
                "+        return values.add((PGUPlainAttrValue) attrValue);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean add(final PlainAttrValue value) {",
                "+        return addForMultiValue(value);",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<? extends UPlainAttrValue> getValues() {",
                "+        return values;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    public List<PGUPlainAttrValue> getPGValues() {",
                "+        return values;",
                "+    }",
                "+",
                "+    @Override",
                "+    public PGUPlainAttrUniqueValue getUniqueValue() {",
                "+        return uniqueValue;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {",
                "+        checkType(uniqueValue, PGUPlainAttrUniqueValue.class);",
                "+        this.uniqueValue = (PGUPlainAttrUniqueValue) uniqueValue;",
                "+    }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        return new HashCodeBuilder().",
                "+                append(schema).",
                "+                append(membership).",
                "+                append(values).",
                "+                append(uniqueValue).",
                "+                build();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final PGUPlainAttr other = (PGUPlainAttr) obj;",
                "+        return new EqualsBuilder().",
                "+                append(schema, other.schema).",
                "+                append(membership, other.membership).",
                "+                append(values, other.values).",
                "+                append(uniqueValue, other.uniqueValue).",
                "+                build();",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGUPlainAttrUniqueValue.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGUPlainAttrUniqueValue.java",
                "new file mode 100644",
                "index 0000000000..9b6cd3e381",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGUPlainAttrUniqueValue.java",
                "@@ -0,0 +1,60 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.user;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainSchema;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrUniqueValue;",
                "+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;",
                "+",
                "+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })",
                "+@JsonInclude(JsonInclude.Include.NON_NULL)",
                "+public class PGUPlainAttrUniqueValue extends AbstractPlainAttrValue implements UPlainAttrUniqueValue {",
                "+",
                "+    private static final long serialVersionUID = -4053996864791245312L;",
                "+",
                "+    @JsonIgnore",
                "+    private PGUPlainAttr attr;",
                "+",
                "+    @Override",
                "+    public UPlainAttr getAttr() {",
                "+        return attr;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setAttr(final PlainAttr<?> attr) {",
                "+        checkType(attr, PGUPlainAttr.class);",
                "+        this.attr = (PGUPlainAttr) attr;",
                "+    }",
                "+",
                "+    @JsonIgnore",
                "+    @Override",
                "+    public PlainSchema getSchema() {",
                "+        return getAttr() == null ? null : getAttr().getSchema();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setSchema(final PlainSchema schema) {",
                "+        // nothing to do",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGUPlainAttrValue.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGUPlainAttrValue.java",
                "new file mode 100644",
                "index 0000000000..6ba15d59a9",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGUPlainAttrValue.java",
                "@@ -0,0 +1,48 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.entity.user;",
                "+",
                "+import com.fasterxml.jackson.annotation.JsonIgnore;",
                "+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;",
                "+import com.fasterxml.jackson.annotation.JsonInclude;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;",
                "+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;",
                "+",
                "+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })",
                "+@JsonInclude(JsonInclude.Include.NON_NULL)",
                "+public class PGUPlainAttrValue extends AbstractPlainAttrValue implements UPlainAttrValue {",
                "+",
                "+    private static final long serialVersionUID = 1832825176101443555L;",
                "+",
                "+    @JsonIgnore",
                "+    private PGUPlainAttr attr;",
                "+",
                "+    @Override",
                "+    public UPlainAttr getAttr() {",
                "+        return attr;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setAttr(final PlainAttr<?> attr) {",
                "+        checkType(attr, PGUPlainAttr.class);",
                "+        this.attr = (PGUPlainAttr) attr;",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PGJPAAnyCheck.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PGJPAAnyCheck.java",
                "new file mode 100644",
                "index 0000000000..ef6f87d70d",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PGJPAAnyCheck.java",
                "@@ -0,0 +1,41 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.validation.entity;",
                "+",
                "+import java.lang.annotation.Documented;",
                "+import java.lang.annotation.ElementType;",
                "+import java.lang.annotation.Retention;",
                "+import java.lang.annotation.RetentionPolicy;",
                "+import java.lang.annotation.Target;",
                "+",
                "+import javax.validation.Constraint;",
                "+import javax.validation.Payload;",
                "+",
                "+@Target({ ElementType.TYPE })",
                "+@Retention(RetentionPolicy.RUNTIME)",
                "+@Constraint(validatedBy = PGJPAAnyValidator.class)",
                "+@Documented",
                "+public @interface PGJPAAnyCheck {",
                "+",
                "+    String message() default \"{org.apache.syncope.core.persistence.validation.any}\";",
                "+",
                "+    Class<?>[] groups() default {};",
                "+",
                "+    Class<? extends Payload>[] payload() default {};",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PGJPAAnyValidator.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PGJPAAnyValidator.java",
                "new file mode 100644",
                "index 0000000000..089808c754",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PGJPAAnyValidator.java",
                "@@ -0,0 +1,45 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.validation.entity;",
                "+",
                "+import java.util.concurrent.atomic.AtomicReference;",
                "+import javax.validation.ConstraintValidatorContext;",
                "+import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "+import org.apache.syncope.core.persistence.jpa.entity.PGJPAAny;",
                "+",
                "+public class PGJPAAnyValidator extends AbstractValidator<PGJPAAnyCheck, PGJPAAny<?>> {",
                "+",
                "+    @Override",
                "+    public boolean isValid(final PGJPAAny<?> entity, final ConstraintValidatorContext context) {",
                "+        context.disableDefaultConstraintViolation();",
                "+",
                "+        PlainAttrValidator attrValidator = new PlainAttrValidator();",
                "+        PlainAttrValueValidator attrValueValidator = new PlainAttrValueValidator();",
                "+",
                "+        AtomicReference<Boolean> isValid = new AtomicReference<>(Boolean.TRUE);",
                "+        entity.getPlainAttrList().forEach(attr -> {",
                "+            PlainAttr<?> plainAttr = (PlainAttr<?>) attr;",
                "+            isValid.getAndSet(isValid.get() && attrValidator.isValid(plainAttr, context));",
                "+            plainAttr.getValues().forEach(value",
                "+                    -> isValid.getAndSet(isValid.get() && attrValueValidator.isValid(value, context)));",
                "+        });",
                "+",
                "+        return isValid.get();",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/resources/META-INF/spring-orm-pgjsonb.xml b/core/persistence-jpa-pgjsonb/src/main/resources/META-INF/spring-orm-pgjsonb.xml",
                "new file mode 100644",
                "index 0000000000..3e5b1030ba",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/resources/META-INF/spring-orm-pgjsonb.xml",
                "@@ -0,0 +1,37 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"",
                "+                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+                 xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm ",
                "+                                     http://java.sun.com/xml/ns/persistence/orm_2_0.xsd\"",
                "+                 version=\"2.0\">",
                "+  ",
                "+  <persistence-unit-metadata>",
                "+    <persistence-unit-defaults>",
                "+      <entity-listeners>",
                "+        <entity-listener class=\"org.apache.syncope.core.persistence.jpa.validation.entity.EntityValidationListener\">",
                "+          <pre-persist method-name=\"validate\"/>",
                "+          <pre-update method-name=\"validate\"/>",
                "+        </entity-listener>",
                "+      </entity-listeners>",
                "+    </persistence-unit-defaults>",
                "+  </persistence-unit-metadata>",
                "+  ",
                "+</entity-mappings>",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/resources/domains/Master.properties b/core/persistence-jpa-pgjsonb/src/main/resources/domains/Master.properties",
                "new file mode 100644",
                "index 0000000000..d9a648fb99",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/resources/domains/Master.properties",
                "@@ -0,0 +1,28 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+Master.driverClassName=org.postgresql.Driver",
                "+Master.url=jdbc:postgresql://localhost:5432/syncope?stringtype=unspecified",
                "+Master.schema=",
                "+Master.username=syncope",
                "+Master.password=syncope",
                "+Master.databasePlatform=org.apache.openjpa.jdbc.sql.PostgresDictionary",
                "+Master.orm=META-INF/spring-orm-pgjsonb.xml",
                "+",
                "+Master.pool.maxActive=10",
                "+Master.pool.minIdle=2",
                "+",
                "+Master.audit.sql=audit.sql",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/resources/indexes.xml b/core/persistence-jpa-pgjsonb/src/main/resources/indexes.xml",
                "new file mode 100644",
                "index 0000000000..3e5b92b832",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/resources/indexes.xml",
                "@@ -0,0 +1,63 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">",
                "+<properties>",
                "+  <comment>Additional indexes (in respect to JPA's)</comment>",
                "+",
                "+  <entry key=\"SyncopeUser_plainAttrs_idx\">CREATE INDEX SyncopeUser_plainAttrs_idx ON SyncopeUser USING gin ((plainAttrs) jsonb_path_ops)</entry>",
                "+  <entry key=\"SyncopeGroup_plainAttrs_idx\">CREATE INDEX SyncopeGroup_plainAttrs_idx ON SyncopeGroup USING gin ((plainAttrs) jsonb_path_ops)</entry>",
                "+  <entry key=\"AnyObject_plainAttrs_idx\">CREATE INDEX AnyObject_plainAttrs_idx ON AnyObject USING gin ((plainAttrs) jsonb_path_ops)</entry>",
                "+  <entry key=\"SyncopeConf_plainAttrs_idx\">CREATE INDEX SyncopeConf_plainAttrs_idx ON SyncopeConf USING gin ((plainAttrs) jsonb_path_ops)</entry>",
                "+",
                "+  <entry key=\"UDynGroupMembers_any_id\">CREATE INDEX UDynGroupMembers_any_id ON UDynGroupMembers(any_id)</entry>",
                "+  <entry key=\"UDynGroupMembers_group_id\">CREATE INDEX UDynGroupMembers_group_id ON UDynGroupMembers(group_id)</entry>",
                "+  <entry key=\"ADynGroupMembers_any_id\">CREATE INDEX ADynGroupMembers_any_id ON ADynGroupMembers(any_id)</entry>",
                "+  <entry key=\"ADynGroupMembers_group_id\">CREATE INDEX ADynGroupMembers_group_id ON ADynGroupMembers(group_id)</entry>",
                "+",
                "+  <entry key=\"DynRoleMembers_any_id\">CREATE INDEX DynRoleMembers_any_id ON DynRoleMembers(any_id)</entry>",
                "+  <entry key=\"DynRoleMembers_role_id\">CREATE INDEX DynRoleMembers_role_id ON DynRoleMembers(role_id)</entry>",
                "+",
                "+  <entry key=\"DynRealmMembers_any_id\">CREATE INDEX DynRealmMembers_any_id ON DynRealmMembers(any_id)</entry>",
                "+  <entry key=\"DynRealmMembers_realm_id\">CREATE INDEX DynRealmMembers_dynRealm_id ON DynRealmMembers(dynRealm_id)</entry>",
                "+",
                "+  <entry key=\"CPlainAttrValue_stringvalueIndex\">CREATE INDEX CAttrValue_stringvalueIndex ON CPlainAttrValue(stringvalue)</entry>",
                "+  <entry key=\"CPlainAttrValue_datevalueIndex\">CREATE INDEX CAttrValue_datevalueIndex ON CPlainAttrValue(datevalue)</entry>",
                "+  <entry key=\"CPlainAttrValue_longvalueIndex\">CREATE INDEX CAttrValue_longvalueIndex ON CPlainAttrValue(longvalue)</entry>",
                "+  <entry key=\"CPlainAttrValue_doublevalueIndex\">CREATE INDEX CAttrValue_doublevalueIndex ON CPlainAttrValue(doublevalue)</entry>",
                "+  <entry key=\"CPlainAttrValue_booleanvalueIndex\">CREATE INDEX CAttrValue_booleanvalueIndex ON CPlainAttrValue(booleanvalue)</entry>",
                "+",
                "+  <entry key=\"UMembership_GroupIndex\">CREATE INDEX UMembership_GroupIndex ON UMembership(group_id)</entry>",
                "+  <entry key=\"UMembership_UserIndex\">CREATE INDEX UMembership_UserIndex ON UMembership(user_id)</entry>",
                "+  <entry key=\"AMembership_GroupIndex\">CREATE INDEX AMembership_GroupIndex ON AMembership(group_id)</entry>",
                "+  <entry key=\"AMembership_AnyObjectIndex\">CREATE INDEX AMembership_AnyObjectIndex ON AMembership(anyObject_id)</entry>",
                "+",
                "+  <entry key=\"URelationship_RightIndex\">CREATE INDEX URelationship_RightIndex ON URelationship(anyObject_id)</entry>",
                "+  <entry key=\"URelationship_LeftIndex\">CREATE INDEX URelationship_LeftIndex ON URelationship(user_id)</entry>",
                "+  <entry key=\"ARelationship_RightIndex\">CREATE INDEX ARelationship_RightIndex ON ARelationship(right_anyObject_id)</entry>",
                "+  <entry key=\"ARelationship_AnyObjectIndex\">CREATE INDEX ARelationship_AnyObjectIndex ON ARelationship(left_anyObject_id)</entry>",
                "+",
                "+  <entry key=\"CPlainAttrValue_attrIndex\">CREATE INDEX CPlainAttrValue_attrIndex on CPlainAttrValue(attribute_id)</entry>",
                "+  <entry key=\"CPAttrUniqueValue_attrIndex\">CREATE INDEX CPAttrUniqueValue_attrIndex on CPlainAttrUniqueValue(attribute_id)</entry>",
                "+",
                "+  <entry key=\"CPlainAttr_owner_Index\">CREATE INDEX CPlainAttr_owner_Index on CPlainAttr(owner_id)</entry>",
                "+  <entry key=\"CPlainAttr_schema_Index\">CREATE INDEX CPlainAttr_schema_Index on CPlainAttr(schema_id)</entry>",
                "+",
                "+  <entry key=\"Task_executedIndex\">CREATE INDEX Task_executedIndex ON Task(executed)</entry>",
                "+</properties>",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/resources/persistence.properties b/core/persistence-jpa-pgjsonb/src/main/resources/persistence.properties",
                "new file mode 100644",
                "index 0000000000..c3196eb278",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/resources/persistence.properties",
                "@@ -0,0 +1,26 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+content.directory=${conf.directory}",
                "+entity.factory=org.apache.syncope.core.persistence.jpa.entity.PGJPAEntityFactory",
                "+plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAPlainSchemaDAO",
                "+plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAPlainAttrDAO",
                "+plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAPlainAttrValueDAO",
                "+any.search.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAAnySearchDAO",
                "+user.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAUserDAO",
                "+group.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAGroupDAO",
                "+anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAAnyObjectDAO",
                "+openjpa.RemoteCommitProvider=sjvm",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/resources/views.xml b/core/persistence-jpa-pgjsonb/src/main/resources/views.xml",
                "new file mode 100644",
                "index 0000000000..eb450bef72",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/resources/views.xml",
                "@@ -0,0 +1,154 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">",
                "+<properties>",
                "+  ",
                "+  <entry key=\"UDynGroupMembers\">",
                "+    CREATE TABLE UDynGroupMembers(",
                "+    any_id CHAR(36),",
                "+    group_id CHAR(36),",
                "+    UNIQUE(any_id, group_id))",
                "+  </entry>",
                "+  <entry key=\"ADynGroupMembers\">",
                "+    CREATE TABLE ADynGroupMembers(",
                "+    anyType_id VARCHAR(255),",
                "+    any_id CHAR(36),",
                "+    group_id CHAR(36),",
                "+    UNIQUE(anyType_id, any_id, group_id))",
                "+  </entry>",
                "+  <entry key=\"DynRoleMembers\">",
                "+    CREATE TABLE DynRoleMembers(",
                "+    any_id CHAR(36),",
                "+    role_id VARCHAR(255),",
                "+    UNIQUE(any_id, role_id))",
                "+  </entry>",
                "+  <entry key=\"DynRealmMembers\">",
                "+    CREATE TABLE DynRealmMembers(",
                "+    any_id CHAR(36),",
                "+    dynRealm_id VARCHAR(255),",
                "+    UNIQUE(any_id, dynRealm_id))",
                "+  </entry>",
                "+",
                "+  <!-- user -->",
                "+  <entry key=\"user_search\">",
                "+    CREATE VIEW user_search AS",
                "+",
                "+    SELECT u.id as any_id, u.*,attrs,attrValues",
                "+    FROM SyncopeUser u, jsonb_array_elements(COALESCE(u.plainAttrs, '[{}]'::jsonb)) attrs,",
                "+    jsonb_array_elements(COALESCE(attrs -> 'values', '[{}]'::jsonb)) attrValues",
                "+  </entry>",
                "+  <entry key=\"user_search_urelationship\">",
                "+    CREATE VIEW user_search_urelationship AS",
                "+",
                "+    SELECT m.user_id AS any_id, m.anyObject_id AS right_any_id, m.type_id AS type",
                "+    FROM URelationship m",
                "+  </entry>",
                "+  <entry key=\"user_search_umembership\">",
                "+    CREATE VIEW user_search_umembership AS",
                "+",
                "+    SELECT m.user_id AS any_id, g.id AS group_id, g.name AS group_name",
                "+    FROM UMembership m, SyncopeGroup g",
                "+    WHERE m.group_id = g.id",
                "+  </entry>",
                "+  <entry key=\"user_search_role\">",
                "+    CREATE VIEW user_search_role AS",
                "+",
                "+    SELECT ss.user_id AS any_id, ss.role_id AS role_id",
                "+    FROM SyncopeUser_SyncopeRole ss",
                "+  </entry>",
                "+  <entry key=\"user_search_priv\">",
                "+    CREATE VIEW user_search_priv AS",
                "+",
                "+    SELECT ss.user_id AS any_id, sp.privilege_id AS privilege_id",
                "+    FROM SyncopeUser_SyncopeRole ss, SyncopeRole_Privilege sp",
                "+    WHERE ss.role_id = sp.role_id",
                "+  </entry>",
                "+  <entry key=\"user_search_dynpriv\">",
                "+    CREATE VIEW user_search_dynpriv AS",
                "+",
                "+    SELECT any_id, privilege_id",
                "+    FROM DynRoleMembers drm, SyncopeRole_Privilege rp",
                "+    WHERE drm.role_id = rp.role_id",
                "+  </entry>",
                "+  <entry key=\"user_search_resource\">",
                "+    CREATE VIEW user_search_resource AS",
                "+",
                "+    SELECT st.user_id AS any_id, st.resource_id AS resource_id",
                "+    FROM SyncopeUser_ExternalResource st",
                "+  </entry>",
                "+  <entry key=\"user_search_group_res\">",
                "+    CREATE VIEW user_search_group_res AS",
                "+",
                "+    SELECT m.user_id AS any_id, st.resource_id AS resource_id",
                "+    FROM UMembership m, SyncopeGroup r, SyncopeGroup_ExternalResource st",
                "+    WHERE m.group_id = r.id AND st.group_id = r.id",
                "+  </entry>",
                "+",
                "+  <!-- anyObject -->",
                "+  <entry key=\"anyObject_search\">",
                "+    CREATE VIEW anyObject_search AS",
                "+",
                "+    SELECT a.id as any_id, a.*,attrs,attrValues",
                "+    FROM AnyObject a, jsonb_array_elements(COALESCE(a.plainAttrs, '[{}]'::jsonb)) attrs,",
                "+    jsonb_array_elements(COALESCE(attrs -> 'values', '[{}]'::jsonb)) attrValues",
                "+  </entry>",
                "+  <entry key=\"anyObject_search_arelationship\">",
                "+    CREATE VIEW anyObject_search_arelationship AS",
                "+",
                "+    SELECT m.left_anyObject_id AS any_id, m.right_anyObject_id AS right_any_id, m.type_id AS type",
                "+    FROM ARelationship m",
                "+  </entry>",
                "+  <entry key=\"anyObject_search_amembership\">",
                "+    CREATE VIEW anyObject_search_amembership AS",
                "+",
                "+    SELECT m.anyObject_id AS any_id, g.id AS group_id, g.name AS group_name",
                "+    FROM AMembership m, SyncopeGroup g",
                "+    WHERE m.group_id = g.id",
                "+  </entry>",
                "+  <entry key=\"anyObject_search_resource\">",
                "+    CREATE VIEW anyObject_search_resource AS",
                "+",
                "+    SELECT st.anyObject_id AS any_id, st.resource_id AS resource_id",
                "+    FROM AnyObject_ExternalResource st",
                "+  </entry>",
                "+  <entry key=\"anyObject_search_group_res\">",
                "+    CREATE VIEW anyObject_search_group_res AS",
                "+",
                "+    SELECT m.anyObject_id AS any_id, st.resource_id AS resource_id",
                "+    FROM AMembership m, SyncopeGroup r, SyncopeGroup_ExternalResource st",
                "+    WHERE m.group_id = r.id AND st.group_id = r.id",
                "+  </entry>",
                "+",
                "+  <!-- group -->",
                "+  <entry key=\"group_search\">",
                "+    CREATE VIEW group_search AS",
                "+",
                "+    SELECT g.id as any_id, g.*,attrs,attrValues",
                "+    FROM SyncopeGroup g, jsonb_array_elements(COALESCE(g.plainAttrs, '[{}]'::jsonb)) attrs,",
                "+    jsonb_array_elements(COALESCE(attrs -> 'values', '[{}]'::jsonb)) attrValues",
                "+  </entry>",
                "+  <entry key=\"group_search_resource\">",
                "+    CREATE VIEW group_search_resource AS",
                "+",
                "+    SELECT st.group_id AS any_id, st.resource_id AS resource_id",
                "+    FROM SyncopeGroup_ExternalResource st",
                "+  </entry>",
                "+",
                "+</properties>",
                "diff --git a/core/pom.xml b/core/pom.xml",
                "index 11dd2f347d..dca1b462b6 100644",
                "--- a/core/pom.xml",
                "+++ b/core/pom.xml",
                "@@ -81,2 +81,3 @@ under the License.",
                "     <module>persistence-jpa</module>",
                "+    <module>persistence-jpa-pgjsonb</module>",
                "     <module>spring</module>"
            ],
            "changed_files": [
                "core/persistence-jpa-pgjsonb/pom.xml",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/api/dao/PGAnyDAO.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyDAO.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyObjectDAO.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnySearchDAO.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAGroupDAO.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrDAO.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrValueDAO.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainSchemaDAO.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAUserDAO.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAAny.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityFactory.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityListener.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGPlainAttr.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGAPlainAttr.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGAPlainAttrUniqueValue.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGAPlainAttrValue.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObject.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObjectListener.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGCPlainAttr.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGCPlainAttrUniqueValue.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGCPlainAttrValue.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConf.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConfListener.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGGPlainAttr.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGGPlainAttrUniqueValue.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGGPlainAttrValue.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroup.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroupListener.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUser.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUserListener.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGUPlainAttr.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGUPlainAttrUniqueValue.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGUPlainAttrValue.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PGJPAAnyCheck.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PGJPAAnyValidator.java",
                "core/persistence-jpa-pgjsonb/src/main/resources/META-INF/spring-orm-pgjsonb.xml",
                "core/persistence-jpa-pgjsonb/src/main/resources/domains/Master.properties",
                "core/persistence-jpa-pgjsonb/src/main/resources/indexes.xml",
                "core/persistence-jpa-pgjsonb/src/main/resources/persistence.properties",
                "core/persistence-jpa-pgjsonb/src/main/resources/views.xml",
                "core/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1395": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "62d04f2c836c581a344ab7633d3bbab2ee8a6be0"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1395",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "78845fa962ec9497a4c390111c0976c15ea46c11",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539327489,
            "hunks": 16,
            "message": "[SYNCOPE-1383] Completely removing ResultsHandler - and fixing unused imports",
            "diff": [
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java",
                "index 20984661ec..95f4af0fca 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java",
                "@@ -30,3 +30,2 @@ import org.identityconnectors.framework.common.objects.ObjectClassInfo;",
                " import org.identityconnectors.framework.common.objects.OperationOptions;",
                "-import org.identityconnectors.framework.common.objects.ResultsHandler;",
                " import org.identityconnectors.framework.common.objects.SyncResultsHandler;",
                "@@ -37,2 +36,3 @@ import org.apache.syncope.core.provisioning.api.pushpull.ReconciliationFilterBui",
                " import org.identityconnectors.framework.common.objects.SearchResult;",
                "+import org.identityconnectors.framework.spi.SearchResultsHandler;",
                "@@ -162,3 +162,3 @@ public interface Connector {",
                "             Filter filter,",
                "-            ResultsHandler handler,",
                "+            SearchResultsHandler handler,",
                "             OperationOptions options);",
                "@@ -182,3 +182,3 @@ public interface Connector {",
                "             Filter filter,",
                "-            ResultsHandler handler,",
                "+            SearchResultsHandler handler,",
                "             int pageSize,",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "index d50ddb1300..46393b5c4e 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "@@ -53,3 +53,2 @@ import org.identityconnectors.framework.common.objects.OperationOptions;",
                " import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;",
                "-import org.identityconnectors.framework.common.objects.ResultsHandler;",
                " import org.identityconnectors.framework.common.objects.SearchResult;",
                "@@ -439,3 +438,3 @@ public class ConnectorFacadeProxy implements Connector {",
                "             final Filter filter,",
                "-            final ResultsHandler handler,",
                "+            final SearchResultsHandler handler,",
                "             final OperationOptions options) {",
                "@@ -459,5 +458,3 @@ public class ConnectorFacadeProxy implements Connector {",
                "                         public void handleResult(final SearchResult result) {",
                "-                            if (handler instanceof SearchResultsHandler) {",
                "-                                SearchResultsHandler.class.cast(handler).handleResult(result);",
                "-                            }",
                "+                            handler.handleResult(result);",
                "                             cookies[0] = result.getPagedResultsCookie();",
                "@@ -486,3 +483,3 @@ public class ConnectorFacadeProxy implements Connector {",
                "             final Filter filter,",
                "-            final ResultsHandler handler,",
                "+            final SearchResultsHandler handler,",
                "             final int pageSize,",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "index be656d4e74..7345fb79d2 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "@@ -26,5 +26,4 @@ import org.apache.commons.collections4.CollectionUtils;",
                " import org.apache.commons.lang3.StringUtils;",
                "-import org.apache.syncope.common.lib.types.AnyTypeKind;",
                " import org.apache.syncope.common.lib.policy.PullPolicySpec;",
                "-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "+import org.apache.syncope.common.lib.types.AnyTypeKind;",
                " import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;",
                "@@ -53,4 +52,9 @@ import org.apache.syncope.core.persistence.api.entity.user.User;",
                " import org.apache.syncope.core.provisioning.api.Connector;",
                "-import org.apache.syncope.core.provisioning.java.IntAttrNameParser;",
                " import org.apache.syncope.core.provisioning.api.IntAttrName;",
                "+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;",
                "+import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;",
                "+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "+import org.apache.syncope.core.provisioning.api.utils.EntityUtils;",
                "+import org.apache.syncope.core.provisioning.java.IntAttrNameParser;",
                "+import org.apache.syncope.core.provisioning.java.utils.MappingUtils;",
                " import org.identityconnectors.framework.common.objects.Attribute;",
                "@@ -60,4 +64,5 @@ import org.identityconnectors.framework.common.objects.Name;",
                " import org.identityconnectors.framework.common.objects.OperationalAttributes;",
                "-import org.identityconnectors.framework.common.objects.ResultsHandler;",
                "+import org.identityconnectors.framework.common.objects.SearchResult;",
                " import org.identityconnectors.framework.common.objects.filter.EqualsFilter;",
                "+import org.identityconnectors.framework.spi.SearchResultsHandler;",
                " import org.slf4j.Logger;",
                "@@ -67,8 +72,2 @@ import org.springframework.stereotype.Component;",
                " import org.springframework.transaction.annotation.Transactional;",
                "-import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;",
                "-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;",
                "-import org.apache.syncope.core.provisioning.java.utils.MappingUtils;",
                "-import org.apache.syncope.core.provisioning.api.data.ItemTransformer;",
                "-import org.identityconnectors.framework.common.objects.SearchResult;",
                "-import org.identityconnectors.framework.spi.SearchResultsHandler;",
                "@@ -135,5 +134,3 @@ public class PullUtils {",
                "         final List<ConnectorObject> found = new ArrayList<>();",
                "-        connector.search(provision.getObjectClass(),",
                "-                new EqualsFilter(new Name(name)),",
                "-                new SearchResultsHandler() {",
                "+        connector.search(provision.getObjectClass(), new EqualsFilter(new Name(name)), new SearchResultsHandler() {"
            ],
            "changed_files": [
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1383": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4f797206318fc00f6b0e31f30c98c0da7ea838c0"
                ],
                [
                    "no-tag",
                    "a17460de027086d989efbea25724c6f0b49ddc9f"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: connector",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1383",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fd24dd8b49a47f7868f0f995c0d180e559b4896b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539610752,
            "hunks": 45,
            "message": "[SYNCOPE-1384] Add RequestedAuthnContextProvider",
            "diff": [
                "diff --git a/ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/rest/SAML2IdPsRestClient.java b/ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/rest/SAML2IdPsRestClient.java",
                "index c7e6e0cb77..06090a0b6b 100644",
                "--- a/ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/rest/SAML2IdPsRestClient.java",
                "+++ b/ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/rest/SAML2IdPsRestClient.java",
                "@@ -40,2 +40,6 @@ public class SAML2IdPsRestClient extends BaseRestClient {",
                "+    public Set<String> getRequestedAuthnContextProviderClasses() {",
                "+        return getService(SAML2IdPService.class).getRequestedAuthnContextProviderClasses();",
                "+    }",
                "+",
                "     public void importIdPs(final InputStream input) {",
                "@@ -56,3 +60,2 @@ public class SAML2IdPsRestClient extends BaseRestClient {",
                "     }",
                "-",
                " }",
                "diff --git a/ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder.java b/ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder.java",
                "index aa3dec5a85..3d6fc14378 100644",
                "--- a/ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder.java",
                "+++ b/ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder.java",
                "@@ -133,2 +133,9 @@ public class SAML2IdPWizardBuilder extends AjaxWizardBuilder<SAML2IdPTO> {",
                "+            AjaxTextFieldPanel requestedAuthnContextProviderClassName = new AjaxTextFieldPanel(",
                "+                    \"field\", \"requestedAuthnContextProviderClassName\",",
                "+                    new PropertyModel<String>(idpTO, \"requestedAuthnContextProviderClassName\"));",
                "+            requestedAuthnContextProviderClassName.setChoices(",
                "+                    new ArrayList<>(restClient.getRequestedAuthnContextProviderClasses()));",
                "+            fields.add(requestedAuthnContextProviderClassName);",
                "+",
                "             AjaxPalettePanel<String> actionsClassNames = new AjaxPalettePanel.Builder<String>().",
                "diff --git a/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.properties b/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.properties",
                "index c2ecfe3228..3010eaac2f 100644",
                "--- a/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.properties",
                "+++ b/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.properties",
                "@@ -29 +29,2 @@ template.title=user template",
                " selfRegUnmatching=SAML-initiated self-registration",
                "+requestedAuthnContextProviderClassName=RequestedAuthnContext provider",
                "diff --git a/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_it.properties b/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_it.properties",
                "index bf8fa9e474..fe2dc04ca3 100644",
                "--- a/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_it.properties",
                "+++ b/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_it.properties",
                "@@ -29 +29,2 @@ template.title=template utenti",
                " selfRegUnmatching=SAML-initiated self-registration",
                "+requestedAuthnContextProviderClassName=RequestedAuthnContext provider",
                "diff --git a/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_pt_BR.properties b/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_pt_BR.properties",
                "index 4836116340..9f4b9b0665 100644",
                "--- a/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_pt_BR.properties",
                "+++ b/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_pt_BR.properties",
                "@@ -29 +29,2 @@ template.title=user template",
                " selfRegUnmatching=SAML-initiated self-registration",
                "+requestedAuthnContextProviderClassName=RequestedAuthnContext provider",
                "diff --git a/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_ru.properties b/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_ru.properties",
                "index f003174497..e8de69f820 100644",
                "--- a/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_ru.properties",
                "+++ b/ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_ru.properties",
                "@@ -29 +29,2 @@ template.title=user template",
                " selfRegUnmatching=SAML-initiated self-registration",
                "+requestedAuthnContextProviderClassName=RequestedAuthnContext provider",
                "diff --git a/ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java b/ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java",
                "index 851ff3a204..609f01262b 100644",
                "--- a/ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java",
                "+++ b/ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java",
                "@@ -65,2 +65,4 @@ public class SAML2IdPTO extends AbstractBaseBean implements EntityTO, ItemContai",
                "+    private String requestedAuthnContextProviderClassName;",
                "+",
                "     @Override",
                "@@ -132,2 +134,10 @@ public class SAML2IdPTO extends AbstractBaseBean implements EntityTO, ItemContai",
                "+    public boolean isSupportUnsolicited() {",
                "+        return supportUnsolicited;",
                "+    }",
                "+",
                "+    public void setSupportUnsolicited(final boolean supportUnsolicited) {",
                "+        this.supportUnsolicited = supportUnsolicited;",
                "+    }",
                "+",
                "     public SAML2BindingType getBindingType() {",
                "@@ -199,10 +209,9 @@ public class SAML2IdPTO extends AbstractBaseBean implements EntityTO, ItemContai",
                "-    public boolean isSupportUnsolicited() {",
                "-        return supportUnsolicited;",
                "+    public String getRequestedAuthnContextProviderClassName() {",
                "+        return requestedAuthnContextProviderClassName;",
                "     }",
                "-    public void setSupportUnsolicited(final boolean supportUnsolicited) {",
                "-        this.supportUnsolicited = supportUnsolicited;",
                "+    public void setRequestedAuthnContextProviderClassName(final String requestedAuthnContextProviderClassName) {",
                "+        this.requestedAuthnContextProviderClassName = requestedAuthnContextProviderClassName;",
                "     }",
                "-",
                " }",
                "diff --git a/ext/saml2sp/logic/pom.xml b/ext/saml2sp/logic/pom.xml",
                "index fc47152861..4abfefa441 100644",
                "--- a/ext/saml2sp/logic/pom.xml",
                "+++ b/ext/saml2sp/logic/pom.xml",
                "@@ -56,7 +56,2 @@ under the License.",
                "     </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.opensaml</groupId>",
                "-      <artifactId>opensaml-saml-impl</artifactId>",
                "-    </dependency>",
                "   </dependencies>",
                "diff --git a/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPLogic.java b/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPLogic.java",
                "index 170aff926d..ef9d2c53a6 100644",
                "--- a/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPLogic.java",
                "+++ b/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPLogic.java",
                "@@ -81,2 +81,7 @@ public class SAML2IdPLogic extends AbstractSAML2Logic<SAML2IdPTO> {",
                "+    @PreAuthorize(\"isAuthenticated()\")",
                "+    public Set<String> getRequestedAuthnContextProviderClasses() {",
                "+        return implLookup.getRequestedAuthnContextProvidersClasses();",
                "+    }",
                "+",
                "     private SAML2IdPTO complete(final SAML2IdP idp, final SAML2IdPTO idpTO) {",
                "diff --git a/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java b/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java",
                "index 5bfc357514..4ae24d7940 100644",
                "--- a/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java",
                "+++ b/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java",
                "@@ -57,2 +57,3 @@ import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;",
                " import org.apache.syncope.core.persistence.api.entity.SAML2IdP;",
                "+import org.apache.syncope.core.provisioning.api.RequestedAuthnContextProvider;",
                " import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;",
                "@@ -66,5 +67,2 @@ import org.opensaml.saml.saml2.core.Attribute;",
                " import org.opensaml.saml.saml2.core.AttributeStatement;",
                "-import org.opensaml.saml.saml2.core.AuthnContext;",
                "-import org.opensaml.saml.saml2.core.AuthnContextClassRef;",
                "-import org.opensaml.saml.saml2.core.AuthnContextComparisonTypeEnumeration;",
                " import org.opensaml.saml.saml2.core.AuthnRequest;",
                "@@ -76,3 +74,2 @@ import org.opensaml.saml.saml2.core.NameIDPolicy;",
                " import org.opensaml.saml.saml2.core.NameIDType;",
                "-import org.opensaml.saml.saml2.core.RequestedAuthnContext;",
                " import org.opensaml.saml.saml2.core.Response;",
                "@@ -80,3 +77,2 @@ import org.opensaml.saml.saml2.core.SessionIndex;",
                " import org.opensaml.saml.saml2.core.StatusCode;",
                "-import org.opensaml.saml.saml2.core.impl.AuthnContextClassRefBuilder;",
                " import org.opensaml.saml.saml2.core.impl.AuthnRequestBuilder;",
                "@@ -86,3 +82,2 @@ import org.opensaml.saml.saml2.core.impl.NameIDBuilder;",
                " import org.opensaml.saml.saml2.core.impl.NameIDPolicyBuilder;",
                "-import org.opensaml.saml.saml2.core.impl.RequestedAuthnContextBuilder;",
                " import org.opensaml.saml.saml2.core.impl.SessionIndexBuilder;",
                "@@ -106,2 +101,4 @@ import org.springframework.stereotype.Component;",
                " import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;",
                "+import org.apache.syncope.core.provisioning.java.DefaultRequestedAuthnContextProvider;",
                "+import org.apache.syncope.core.spring.ApplicationContextProvider;",
                " import org.apache.syncope.core.spring.security.AuthContextUtils;",
                "@@ -110,2 +107,3 @@ import org.apache.syncope.core.spring.security.Encryptor;",
                " import org.opensaml.core.xml.schema.XSAny;",
                "+import org.springframework.beans.factory.support.AbstractBeanDefinition;",
                " import org.springframework.util.ResourceUtils;",
                "@@ -300,7 +298,14 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {",
                "-        AuthnContextClassRef authnContextClassRef = new AuthnContextClassRefBuilder().buildObject();",
                "-        authnContextClassRef.setAuthnContextClassRef(AuthnContext.PPT_AUTHN_CTX);",
                "-        RequestedAuthnContext requestedAuthnContext = new RequestedAuthnContextBuilder().buildObject();",
                "-        requestedAuthnContext.setComparison(AuthnContextComparisonTypeEnumeration.EXACT);",
                "-        requestedAuthnContext.getAuthnContextClassRefs().add(authnContextClassRef);",
                "+        RequestedAuthnContextProvider requestedAuthnContextProvider = new DefaultRequestedAuthnContextProvider();",
                "+        if (idp.getRequestedAuthnContextProviderClassName() != null) {",
                "+            try {",
                "+                Class<?> actionsClass = Class.forName(idp.getRequestedAuthnContextProviderClassName());",
                "+                requestedAuthnContextProvider = (RequestedAuthnContextProvider) ApplicationContextProvider.",
                "+                        getBeanFactory().createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);",
                "+            } catch (Exception e) {",
                "+                LOG.warn(\"Cannot instantiate '{}', reverting to {}\",",
                "+                        idp.getRequestedAuthnContextProviderClassName(),",
                "+                        DefaultRequestedAuthnContextProvider.class.getName(), e);",
                "+            }",
                "+        }",
                "@@ -315,3 +320,3 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {",
                "         authnRequest.setNameIDPolicy(nameIDPolicy);",
                "-        authnRequest.setRequestedAuthnContext(requestedAuthnContext);",
                "+        authnRequest.setRequestedAuthnContext(requestedAuthnContextProvider.provide());",
                "         authnRequest.setDestination(idp.getSSOLocation(idp.getBindingType()).getLocation());",
                "diff --git a/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPClassPathScanImplementationLookup.java b/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPClassPathScanImplementationLookup.java",
                "index 13b3cab7c7..ce8fb5aa64 100644",
                "--- a/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPClassPathScanImplementationLookup.java",
                "+++ b/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPClassPathScanImplementationLookup.java",
                "@@ -26,2 +26,3 @@ import org.apache.syncope.core.persistence.api.ImplementationLookup;",
                " import org.apache.syncope.core.persistence.api.SyncopeLoader;",
                "+import org.apache.syncope.core.provisioning.api.RequestedAuthnContextProvider;",
                " import org.slf4j.Logger;",
                "@@ -44,2 +45,4 @@ public class SAML2SPClassPathScanImplementationLookup implements SyncopeLoader {",
                "+    private Set<String> requestedAuthnContextProvidersClasses;",
                "+",
                "     @Override",
                "@@ -52,2 +55,3 @@ public class SAML2SPClassPathScanImplementationLookup implements SyncopeLoader {",
                "         actionsClasses = new HashSet<>();",
                "+        requestedAuthnContextProvidersClasses = new HashSet<>();",
                "@@ -55,2 +59,3 @@ public class SAML2SPClassPathScanImplementationLookup implements SyncopeLoader {",
                "         scanner.addIncludeFilter(new AssignableTypeFilter(SAML2IdPActions.class));",
                "+        scanner.addIncludeFilter(new AssignableTypeFilter(RequestedAuthnContextProvider.class));",
                "@@ -64,2 +69,4 @@ public class SAML2SPClassPathScanImplementationLookup implements SyncopeLoader {",
                "                     actionsClasses.add(clazz.getName());",
                "+                } else if (RequestedAuthnContextProvider.class.isAssignableFrom(clazz) && !isAbstractClazz) {",
                "+                    requestedAuthnContextProvidersClasses.add(clazz.getName());",
                "                 }",
                "@@ -71,2 +78,3 @@ public class SAML2SPClassPathScanImplementationLookup implements SyncopeLoader {",
                "         actionsClasses = Collections.unmodifiableSet(actionsClasses);",
                "+        requestedAuthnContextProvidersClasses = Collections.unmodifiableSet(requestedAuthnContextProvidersClasses);",
                "     }",
                "@@ -77,2 +85,5 @@ public class SAML2SPClassPathScanImplementationLookup implements SyncopeLoader {",
                "+    public Set<String> getRequestedAuthnContextProvidersClasses() {",
                "+        return requestedAuthnContextProvidersClasses;",
                "+    }",
                " }",
                "diff --git a/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPEntity.java b/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPEntity.java",
                "index 4318069dff..18bb168826 100644",
                "--- a/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPEntity.java",
                "+++ b/ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPEntity.java",
                "@@ -164,2 +164,6 @@ public class SAML2IdPEntity {",
                "+    public String getRequestedAuthnContextProviderClassName() {",
                "+        return idpTO.getRequestedAuthnContextProviderClassName();",
                "+    }",
                "+",
                "     public Endpoint getSSOLocation(final SAML2BindingType bindingType) {",
                "@@ -179,3 +183,2 @@ public class SAML2IdPEntity {",
                "     }",
                "-",
                " }",
                "diff --git a/ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2IdP.java b/ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2IdP.java",
                "index 91bb69fd7b..3cf9ddce42 100644",
                "--- a/ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2IdP.java",
                "+++ b/ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2IdP.java",
                "@@ -75,2 +75,6 @@ public interface SAML2IdP extends Entity {",
                "     List<String> getActionsClassNames();",
                "+",
                "+    String getRequestedAuthnContextProviderClassName();",
                "+",
                "+    void setRequestedAuthnContextProviderClassName(String requestedAuthnContextProviderClassName);",
                " }",
                "diff --git a/ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdP.java b/ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdP.java",
                "index 54e76be018..a2cc963d58 100644",
                "--- a/ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdP.java",
                "+++ b/ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdP.java",
                "@@ -95,2 +95,4 @@ public class JPASAML2IdP extends AbstractGeneratedKeyEntity implements SAML2IdP",
                "+    private String requestedAuthnContextProviderClassName;",
                "+",
                "     @Override",
                "@@ -222,2 +224,12 @@ public class JPASAML2IdP extends AbstractGeneratedKeyEntity implements SAML2IdP",
                "     }",
                "+",
                "+    @Override",
                "+    public String getRequestedAuthnContextProviderClassName() {",
                "+        return requestedAuthnContextProviderClassName;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setRequestedAuthnContextProviderClassName(final String requestedAuthnContextProviderClassName) {",
                "+        this.requestedAuthnContextProviderClassName = requestedAuthnContextProviderClassName;",
                "+    }",
                " }",
                "diff --git a/ext/saml2sp/provisioning-api/pom.xml b/ext/saml2sp/provisioning-api/pom.xml",
                "index a9ec15c763..6d1cc80eca 100644",
                "--- a/ext/saml2sp/provisioning-api/pom.xml",
                "+++ b/ext/saml2sp/provisioning-api/pom.xml",
                "@@ -56,2 +56,7 @@ under the License.",
                "     </dependency>",
                "+    ",
                "+    <dependency>",
                "+      <groupId>org.opensaml</groupId>",
                "+      <artifactId>opensaml-saml-api</artifactId>",
                "+    </dependency>",
                "   </dependencies>",
                "diff --git a/ext/saml2sp/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/RequestedAuthnContextProvider.java b/ext/saml2sp/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/RequestedAuthnContextProvider.java",
                "new file mode 100644",
                "index 0000000000..0905fd99c5",
                "--- /dev/null",
                "+++ b/ext/saml2sp/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/RequestedAuthnContextProvider.java",
                "@@ -0,0 +1,26 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.provisioning.api;",
                "+",
                "+import org.opensaml.saml.saml2.core.RequestedAuthnContext;",
                "+",
                "+public interface RequestedAuthnContextProvider {",
                "+",
                "+    RequestedAuthnContext provide();",
                "+}",
                "diff --git a/ext/saml2sp/provisioning-java/pom.xml b/ext/saml2sp/provisioning-java/pom.xml",
                "index d136aa89ee..f20030e384 100644",
                "--- a/ext/saml2sp/provisioning-java/pom.xml",
                "+++ b/ext/saml2sp/provisioning-java/pom.xml",
                "@@ -50,2 +50,7 @@ under the License.",
                "     </dependency>",
                "+   ",
                "+    <dependency>",
                "+      <groupId>org.opensaml</groupId>",
                "+      <artifactId>opensaml-saml-impl</artifactId>",
                "+    </dependency>",
                "   </dependencies>",
                "diff --git a/ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultRequestedAuthnContextProvider.java b/ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultRequestedAuthnContextProvider.java",
                "new file mode 100644",
                "index 0000000000..ec54a9b332",
                "--- /dev/null",
                "+++ b/ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultRequestedAuthnContextProvider.java",
                "@@ -0,0 +1,41 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.provisioning.java;",
                "+",
                "+import org.apache.syncope.core.provisioning.api.RequestedAuthnContextProvider;",
                "+import org.opensaml.saml.saml2.core.AuthnContext;",
                "+import org.opensaml.saml.saml2.core.AuthnContextClassRef;",
                "+import org.opensaml.saml.saml2.core.AuthnContextComparisonTypeEnumeration;",
                "+import org.opensaml.saml.saml2.core.RequestedAuthnContext;",
                "+import org.opensaml.saml.saml2.core.impl.AuthnContextClassRefBuilder;",
                "+import org.opensaml.saml.saml2.core.impl.RequestedAuthnContextBuilder;",
                "+",
                "+public class DefaultRequestedAuthnContextProvider implements RequestedAuthnContextProvider {",
                "+",
                "+    @Override",
                "+    public RequestedAuthnContext provide() {",
                "+        AuthnContextClassRef authnContextClassRef = new AuthnContextClassRefBuilder().buildObject();",
                "+        authnContextClassRef.setAuthnContextClassRef(AuthnContext.PPT_AUTHN_CTX);",
                "+        RequestedAuthnContext requestedAuthnContext = new RequestedAuthnContextBuilder().buildObject();",
                "+        requestedAuthnContext.setComparison(AuthnContextComparisonTypeEnumeration.EXACT);",
                "+        requestedAuthnContext.getAuthnContextClassRefs().add(authnContextClassRef);",
                "+",
                "+        return requestedAuthnContext;",
                "+    }",
                "+}",
                "diff --git a/ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/NullRequestedAuthnContextProvider.java b/ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/NullRequestedAuthnContextProvider.java",
                "new file mode 100644",
                "index 0000000000..e95922a0ad",
                "--- /dev/null",
                "+++ b/ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/NullRequestedAuthnContextProvider.java",
                "@@ -0,0 +1,30 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.provisioning.java;",
                "+",
                "+import org.apache.syncope.core.provisioning.api.RequestedAuthnContextProvider;",
                "+import org.opensaml.saml.saml2.core.RequestedAuthnContext;",
                "+",
                "+public class NullRequestedAuthnContextProvider implements RequestedAuthnContextProvider {",
                "+",
                "+    @Override",
                "+    public RequestedAuthnContext provide() {",
                "+        return null;",
                "+    }",
                "+}",
                "diff --git a/ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java b/ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java",
                "index 7e4fb4c4b3..85c693a343 100644",
                "--- a/ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java",
                "+++ b/ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java",
                "@@ -210,2 +210,4 @@ public class SAML2IdPDataBinderImpl implements SAML2IdPDataBinder {",
                "+        idp.setRequestedAuthnContextProviderClassName(idpTO.getRequestedAuthnContextProviderClassName());",
                "+",
                "         return saml2IdPDAO.save(idp);",
                "@@ -251,2 +253,4 @@ public class SAML2IdPDataBinderImpl implements SAML2IdPDataBinder {",
                "+        idpTO.setRequestedAuthnContextProviderClassName(idp.getRequestedAuthnContextProviderClassName());",
                "+",
                "         return idpTO;",
                "diff --git a/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java b/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "index a20a3b9141..ac117c741a 100644",
                "--- a/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "+++ b/ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "@@ -65,2 +65,12 @@ public interface SAML2IdPService extends JAXRSService {",
                "+    /**",
                "+     * Returns the list of available RequestedAuthnContextProviders implementations.",
                "+     *",
                "+     * @return the list of available RequestedAuthnContextProviders implementations",
                "+     */",
                "+    @GET",
                "+    @Path(\"requestedAuthnContextProviders\")",
                "+    @Produces({ MediaType.APPLICATION_JSON })",
                "+    Set<String> getRequestedAuthnContextProviderClasses();",
                "+",
                "     /**",
                "diff --git a/ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPServiceImpl.java b/ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPServiceImpl.java",
                "index ebda30da3e..5952bec16c 100644",
                "--- a/ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPServiceImpl.java",
                "+++ b/ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPServiceImpl.java",
                "@@ -42,2 +42,7 @@ public class SAML2IdPServiceImpl extends AbstractServiceImpl implements SAML2IdP",
                "+    @Override",
                "+    public Set<String> getRequestedAuthnContextProviderClasses() {",
                "+        return logic.getRequestedAuthnContextProviderClasses();",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/pom.xml b/pom.xml",
                "index b35481f0c4..ef68dce258 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -696,2 +696,29 @@ under the License.",
                "       <!-- OpenSAML -->",
                "+      <dependency>",
                "+        <groupId>org.opensaml</groupId>",
                "+        <artifactId>opensaml-saml-api</artifactId>",
                "+        <version>${opensaml.version}</version>",
                "+        <exclusions>",
                "+          <exclusion>",
                "+            <groupId>org.opensaml</groupId>",
                "+            <artifactId>opensaml-storage-api</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.opensaml</groupId>",
                "+            <artifactId>opensaml-messaging-api</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.apache.velocity</groupId>",
                "+            <artifactId>velocity</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>org.apache.httpcomponents</groupId>",
                "+            <artifactId>httpclient</artifactId>",
                "+          </exclusion>",
                "+          <exclusion>",
                "+            <groupId>com.google.code.findbugs</groupId>",
                "+            <artifactId>jsr305</artifactId>",
                "+          </exclusion>",
                "+        </exclusions>",
                "+      </dependency>",
                "       <dependency>"
            ],
            "changed_files": [
                "ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/rest/SAML2IdPsRestClient.java",
                "ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder.java",
                "ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.properties",
                "ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_it.properties",
                "ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_pt_BR.properties",
                "ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_ru.properties",
                "ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java",
                "ext/saml2sp/logic/pom.xml",
                "ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPLogic.java",
                "ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java",
                "ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPClassPathScanImplementationLookup.java",
                "ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPEntity.java",
                "ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2IdP.java",
                "ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdP.java",
                "ext/saml2sp/provisioning-api/pom.xml",
                "ext/saml2sp/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/RequestedAuthnContextProvider.java",
                "ext/saml2sp/provisioning-java/pom.xml",
                "ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultRequestedAuthnContextProvider.java",
                "ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/NullRequestedAuthnContextProvider.java",
                "ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java",
                "ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java",
                "ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPServiceImpl.java",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1384": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "59b806731101aec64b70f306e524b9184826db12"
                ],
                [
                    "no-tag",
                    "0c03ecba9b1a0ae8e109edf0045a796479521ebc"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1384",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "da91868697e61412ef53cdee717bc82b6db405bc",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538406109,
            "hunks": 11,
            "message": "[SYNCOPE-1377] Added JAX-RS ContainerRequestFilter to check X-Syncope-Domain provided value",
            "diff": [
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/AddETagFilter.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/AddETagFilter.java",
                "index dc6f0e6dd8..145bea2508 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/AddETagFilter.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/AddETagFilter.java",
                "@@ -33,3 +33,3 @@ import org.apache.syncope.common.lib.to.ProvisioningResult;",
                " /**",
                "- * Adds the <tt>ETag</tt> header to any response containing an instance of {@link AbstractAnnotatedBean} as entity.",
                "+ * Adds the {@code ETag} header to any response containing an instance of {@link AbstractAnnotatedBean} as entity.",
                "  * The actual ETag value is computed on the basis of last change date (or creation date if not available).",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/CheckDomainFilter.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/CheckDomainFilter.java",
                "new file mode 100644",
                "index 0000000000..f2aabad3ee",
                "--- /dev/null",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/CheckDomainFilter.java",
                "@@ -0,0 +1,81 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.rest.cxf;",
                "+",
                "+import java.io.IOException;",
                "+import javax.ws.rs.container.ContainerRequestContext;",
                "+import javax.ws.rs.container.ContainerRequestFilter;",
                "+import javax.ws.rs.container.PreMatching;",
                "+import javax.ws.rs.core.HttpHeaders;",
                "+import javax.ws.rs.core.MediaType;",
                "+import javax.ws.rs.core.Response;",
                "+import javax.ws.rs.ext.Provider;",
                "+import org.apache.syncope.common.lib.SyncopeConstants;",
                "+import org.apache.syncope.common.lib.to.ErrorTO;",
                "+import org.apache.syncope.common.lib.types.ClientExceptionType;",
                "+import org.apache.syncope.common.rest.api.RESTHeaders;",
                "+import org.apache.syncope.core.persistence.api.dao.DomainDAO;",
                "+import org.apache.syncope.core.spring.security.AuthContextUtils;",
                "+import org.springframework.beans.factory.annotation.Autowired;",
                "+",
                "+/**",
                "+ * Checks that requested Domain exists.",
                "+ */",
                "+@Provider",
                "+@PreMatching",
                "+public class CheckDomainFilter implements ContainerRequestFilter {",
                "+",
                "+    @Autowired",
                "+    private DomainDAO domainDAO;",
                "+",
                "+    @Override",
                "+    public void filter(final ContainerRequestContext reqContext) throws IOException {",
                "+        final String domain = reqContext.getHeaderString(RESTHeaders.DOMAIN);",
                "+        if (domain != null && !SyncopeConstants.MASTER_DOMAIN.equals(domain)) {",
                "+            AuthContextUtils.execWithAuthContext(",
                "+                    SyncopeConstants.MASTER_DOMAIN, new AuthContextUtils.Executable<Void>() {",
                "+",
                "+                @Override",
                "+                public Void exec() {",
                "+                    if (domainDAO.find(domain) == null) {",
                "+                        String message = \"Domain '\" + domain + \"' not available\";",
                "+",
                "+                        ErrorTO error = new ErrorTO();",
                "+                        error.setStatus(Response.Status.NOT_FOUND.getStatusCode());",
                "+                        error.setType(ClientExceptionType.NotFound);",
                "+                        error.getElements().add(message);",
                "+",
                "+                        reqContext.abortWith(Response.status(Response.Status.NOT_FOUND).",
                "+                                entity(error).",
                "+                                header(HttpHeaders.CONTENT_TYPE,",
                "+                                        reqContext.getAcceptableMediaTypes().isEmpty()",
                "+                                        ? MediaType.APPLICATION_JSON",
                "+                                        : reqContext.getAcceptableMediaTypes().get(0).toString()).",
                "+                                header(RESTHeaders.ERROR_CODE,",
                "+                                        ClientExceptionType.NotFound.name()).",
                "+                                header(RESTHeaders.ERROR_INFO,",
                "+                                        ClientExceptionType.NotFound.getInfoHeaderValue(message)).",
                "+                                build());",
                "+                    }",
                "+                    return null;",
                "+                }",
                "+            });",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/core/rest-cxf/src/main/resources/restCXFContext.xml b/core/rest-cxf/src/main/resources/restCXFContext.xml",
                "index dd3ff18708..b68b33f109 100644",
                "--- a/core/rest-cxf/src/main/resources/restCXFContext.xml",
                "+++ b/core/rest-cxf/src/main/resources/restCXFContext.xml",
                "@@ -92,2 +92,3 @@ under the License.",
                "+  <bean id=\"checkDomainFilter\" class=\"org.apache.syncope.core.rest.cxf.CheckDomainFilter\"/>",
                "   <bean id=\"addDomainFilter\" class=\"org.apache.syncope.core.rest.cxf.AddDomainFilter\"/>",
                "@@ -167,2 +168,3 @@ under the License.",
                "       <ref bean=\"searchContextProvider\"/>",
                "+      <ref bean=\"checkDomainFilter\"/>",
                "       <ref bean=\"addDomainFilter\"/>",
                "diff --git a/core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthContextUtils.java b/core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthContextUtils.java",
                "index 6bc5fdb485..ee99056e4d 100644",
                "--- a/core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthContextUtils.java",
                "+++ b/core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthContextUtils.java",
                "@@ -100,3 +100,3 @@ public final class AuthContextUtils {",
                "-    private static void setFakeAuth(final String domain) {",
                "+    private static Authentication getFakeAuth(final String domain) {",
                "         List<GrantedAuthority> authorities = EntitlementsHolder.getInstance().getValues().stream().",
                "@@ -109,8 +109,8 @@ public final class AuthContextUtils {",
                "         auth.setDetails(new SyncopeAuthenticationDetails(domain));",
                "-        SecurityContextHolder.getContext().setAuthentication(auth);",
                "+        return auth;",
                "     }",
                "-    public static <T> T execWithAuthContext(final String domainKey, final Executable<T> executable) {",
                "-        SecurityContext ctx = SecurityContextHolder.getContext();",
                "-        setFakeAuth(domainKey);",
                "+    public static <T> T execWithAuthContext(final String domain, final Executable<T> executable) {",
                "+        Authentication original = SecurityContextHolder.getContext().getAuthentication();",
                "+        SecurityContextHolder.getContext().setAuthentication(getFakeAuth(domain));",
                "         try {",
                "@@ -118,7 +118,6 @@ public final class AuthContextUtils {",
                "         } catch (Throwable t) {",
                "-            LOG.debug(\"Error during execution with domain {} context\", domainKey, t);",
                "+            LOG.debug(\"Error during execution with domain {} context\", domain, t);",
                "             throw t;",
                "         } finally {",
                "-            SecurityContextHolder.clearContext();",
                "-            SecurityContextHolder.setContext(ctx);",
                "+            SecurityContextHolder.getContext().setAuthentication(original);",
                "         }",
                "diff --git a/fit/core-reference/src/main/resources/jboss/restCXFContext.xml b/fit/core-reference/src/main/resources/jboss/restCXFContext.xml",
                "index b06589b44b..7bb4b94a8a 100644",
                "--- a/fit/core-reference/src/main/resources/jboss/restCXFContext.xml",
                "+++ b/fit/core-reference/src/main/resources/jboss/restCXFContext.xml",
                "@@ -92,2 +92,3 @@ under the License.",
                "+  <bean id=\"checkDomainFilter\" class=\"org.apache.syncope.core.rest.cxf.CheckDomainFilter\"/>",
                "   <bean id=\"addDomainFilter\" class=\"org.apache.syncope.core.rest.cxf.AddDomainFilter\"/>",
                "@@ -181,2 +182,3 @@ under the License.",
                "       <ref bean=\"searchContextProvider\"/>",
                "+      <ref bean=\"checkDomainFilter\"/>",
                "       <ref bean=\"addDomainFilter\"/>"
            ],
            "changed_files": [
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/AddETagFilter.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/CheckDomainFilter.java",
                "core/rest-cxf/src/main/resources/restCXFContext.xml",
                "core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthContextUtils.java",
                "fit/core-reference/src/main/resources/jboss/restCXFContext.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1377": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "54e528b894873708b635e74a9410d1ca00e696b9"
                ],
                [
                    "no-tag",
                    "1b2c2050a0d96bc9d56105c9dd16fb412c2a673d"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: contain",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1377",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9dd0b6603a305d2c3e3155aad6177057e4a62a1c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538729557,
            "hunks": 72,
            "message": "[SYNCOPE-1369] Improving FlowableTaskService as JavaDelegate",
            "diff": [
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "index 8230ce190b..e02f017cd9 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "@@ -211,10 +211,8 @@ public final class FlowableRuntimeUtils {",
                "     public static void throwException(final FlowableException e, final String defaultMessage) {",
                "-        if (e.getCause() != null) {",
                "-            if (e.getCause().getCause() instanceof SyncopeClientException) {",
                "-                throw (SyncopeClientException) e.getCause().getCause();",
                "-            } else if (e.getCause().getCause() instanceof ParsingValidationException) {",
                "-                throw (ParsingValidationException) e.getCause().getCause();",
                "-            } else if (e.getCause().getCause() instanceof InvalidEntityException) {",
                "-                throw (InvalidEntityException) e.getCause().getCause();",
                "-            }",
                "+        if (e.getCause() instanceof SyncopeClientException) {",
                "+            throw (SyncopeClientException) e.getCause();",
                "+        } else if (e.getCause() instanceof ParsingValidationException) {",
                "+            throw (ParsingValidationException) e.getCause();",
                "+        } else if (e.getCause() instanceof InvalidEntityException) {",
                "+            throw (InvalidEntityException) e.getCause();",
                "         }",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/AutoActivate.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/AutoActivate.java",
                "index 3febfa0732..3164e526ce 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/AutoActivate.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/AutoActivate.java",
                "@@ -27,2 +27,3 @@ import org.apache.syncope.core.provisioning.api.data.UserDataBinder;",
                " import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;",
                "+import org.flowable.engine.delegate.DelegateExecution;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -31,3 +32,3 @@ import org.springframework.stereotype.Component;",
                " @Component",
                "-public class AutoActivate extends AbstractFlowableServiceTask {",
                "+public class AutoActivate extends FlowableServiceTask {",
                "@@ -40,7 +41,5 @@ public class AutoActivate extends AbstractFlowableServiceTask {",
                "     @Override",
                "-    protected void doExecute(final String executionId) {",
                "-        User user = engine.getRuntimeService().",
                "-                getVariable(executionId, FlowableRuntimeUtils.USER, User.class);",
                "-        UserTO userTO = engine.getRuntimeService().",
                "-                getVariable(executionId, FlowableRuntimeUtils.USER_TO, UserTO.class);",
                "+    protected void doExecute(final DelegateExecution execution) {",
                "+        User user = execution.getVariable(FlowableRuntimeUtils.USER, User.class);",
                "+        UserTO userTO = execution.getVariable(FlowableRuntimeUtils.USER_TO, UserTO.class);",
                "         if (userTO != null && userTO.getKey() != null && user.getKey() != null) {",
                "@@ -54,6 +53,6 @@ public class AutoActivate extends AbstractFlowableServiceTask {",
                "-            engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.USER, user);",
                "+            execution.setVariable(FlowableRuntimeUtils.USER, user);",
                "         }",
                "-        engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.PROPAGATE_ENABLE, Boolean.TRUE);",
                "+        execution.setVariable(FlowableRuntimeUtils.PROPAGATE_ENABLE, Boolean.TRUE);",
                "     }",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Create.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Create.java",
                "index 75bf0acfae..f3bd848b81 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Create.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Create.java",
                "@@ -25,2 +25,3 @@ import org.apache.syncope.core.provisioning.api.data.UserDataBinder;",
                " import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;",
                "+import org.flowable.engine.delegate.DelegateExecution;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -29,3 +30,3 @@ import org.springframework.stereotype.Component;",
                " @Component",
                "-public class Create extends AbstractFlowableServiceTask {",
                "+public class Create extends FlowableServiceTask {",
                "@@ -38,7 +39,5 @@ public class Create extends AbstractFlowableServiceTask {",
                "     @Override",
                "-    protected void doExecute(final String executionId) {",
                "-        UserTO userTO = engine.getRuntimeService().",
                "-                getVariable(executionId, FlowableRuntimeUtils.USER_TO, UserTO.class);",
                "-        Boolean storePassword = engine.getRuntimeService().",
                "-                getVariable(executionId, FlowableRuntimeUtils.STORE_PASSWORD, Boolean.class);",
                "+    protected void doExecute(final DelegateExecution execution) {",
                "+        UserTO userTO = execution.getVariable(FlowableRuntimeUtils.USER_TO, UserTO.class);",
                "+        Boolean storePassword = execution.getVariable(FlowableRuntimeUtils.STORE_PASSWORD, Boolean.class);",
                "@@ -49,6 +48,4 @@ public class Create extends AbstractFlowableServiceTask {",
                "         // report user as result",
                "-        engine.getRuntimeService().",
                "-                setVariable(executionId, FlowableRuntimeUtils.USER, user);",
                "-        engine.getRuntimeService().",
                "-                setVariable(executionId, FlowableRuntimeUtils.USER_TO, dataBinder.getUserTO(user, true));",
                "+        execution.setVariable(FlowableRuntimeUtils.USER, user);",
                "+        execution.setVariable(FlowableRuntimeUtils.USER_TO, dataBinder.getUserTO(user, true));",
                "     }",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Delete.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Delete.java",
                "index 7f3acf6a2d..8d7bef7d4e 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Delete.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Delete.java",
                "@@ -22,2 +22,3 @@ import org.apache.syncope.core.persistence.api.entity.user.User;",
                " import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;",
                "+import org.flowable.engine.delegate.DelegateExecution;",
                " import org.springframework.stereotype.Component;",
                "@@ -25,8 +26,7 @@ import org.springframework.stereotype.Component;",
                " @Component",
                "-public class Delete extends AbstractFlowableServiceTask {",
                "+public class Delete extends FlowableServiceTask {",
                "     @Override",
                "-    protected void doExecute(final String executionId) {",
                "-        User user = engine.getRuntimeService().",
                "-                getVariable(executionId, FlowableRuntimeUtils.USER, User.class);",
                "+    protected void doExecute(final DelegateExecution execution) {",
                "+        User user = execution.getVariable(FlowableRuntimeUtils.USER, User.class);",
                "@@ -38,3 +38,3 @@ public class Delete extends AbstractFlowableServiceTask {",
                "         // remove user variable",
                "-        engine.getRuntimeService().removeVariable(executionId, FlowableRuntimeUtils.USER);",
                "+        execution.removeVariable(FlowableRuntimeUtils.USER);",
                "     }",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/FlowableServiceTask.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/FlowableServiceTask.java",
                "new file mode 100644",
                "index 0000000000..b83b2a1cc0",
                "--- /dev/null",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/FlowableServiceTask.java",
                "@@ -0,0 +1,43 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.flowable.task;",
                "+",
                "+import org.flowable.engine.delegate.DelegateExecution;",
                "+import org.flowable.engine.delegate.JavaDelegate;",
                "+import org.slf4j.Logger;",
                "+import org.slf4j.LoggerFactory;",
                "+import org.springframework.stereotype.Component;",
                "+import org.springframework.transaction.annotation.Transactional;",
                "+",
                "+/**",
                "+ * Abstract base class for Flowable's service tasks in Syncope, with Spring support.",
                "+ */",
                "+@Component",
                "+public abstract class FlowableServiceTask implements JavaDelegate {",
                "+",
                "+    protected static final Logger LOG = LoggerFactory.getLogger(FlowableServiceTask.class);",
                "+",
                "+    @Transactional(rollbackFor = { Throwable.class })",
                "+    @Override",
                "+    public void execute(final DelegateExecution execution) {",
                "+        doExecute(execution);",
                "+    }",
                "+",
                "+    protected abstract void doExecute(final DelegateExecution execution);",
                "+}",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/GenerateToken.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/GenerateToken.java",
                "index aee2b7397b..2ecb0d5b8b 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/GenerateToken.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/GenerateToken.java",
                "@@ -23,2 +23,3 @@ import org.apache.syncope.core.persistence.api.entity.user.User;",
                " import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;",
                "+import org.flowable.engine.delegate.DelegateExecution;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -27,3 +28,3 @@ import org.springframework.stereotype.Component;",
                " @Component",
                "-public class GenerateToken extends AbstractFlowableServiceTask {",
                "+public class GenerateToken extends FlowableServiceTask {",
                "@@ -33,5 +34,4 @@ public class GenerateToken extends AbstractFlowableServiceTask {",
                "     @Override",
                "-    protected void doExecute(final String executionId) {",
                "-        User user = engine.getRuntimeService().",
                "-                getVariable(executionId, FlowableRuntimeUtils.USER, User.class);",
                "+    protected void doExecute(final DelegateExecution execution) {",
                "+        User user = execution.getVariable(FlowableRuntimeUtils.USER, User.class);",
                "@@ -41,3 +41,3 @@ public class GenerateToken extends AbstractFlowableServiceTask {",
                "-        engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.USER, user);",
                "+        execution.setVariable(FlowableRuntimeUtils.USER, user);",
                "     }",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Notify.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Notify.java",
                "index d64032f947..14ee9c243e 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Notify.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Notify.java",
                "@@ -26,2 +26,3 @@ import org.apache.syncope.core.provisioning.api.notification.NotificationManager",
                " import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;",
                "+import org.flowable.engine.delegate.DelegateExecution;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -35,3 +36,3 @@ import org.springframework.stereotype.Component;",
                " @Component",
                "-public class Notify extends AbstractFlowableServiceTask {",
                "+public class Notify extends FlowableServiceTask {",
                "@@ -41,9 +42,6 @@ public class Notify extends AbstractFlowableServiceTask {",
                "     @Override",
                "-    protected void doExecute(final String executionId) {",
                "-        User user = engine.getRuntimeService().",
                "-                getVariable(executionId, FlowableRuntimeUtils.USER, User.class);",
                "-        UserTO userTO = engine.getRuntimeService().",
                "-                getVariable(executionId, FlowableRuntimeUtils.USER_TO, UserTO.class);",
                "-        String event = engine.getRuntimeService().",
                "-                getVariable(executionId, FlowableRuntimeUtils.EVENT, String.class);",
                "+    protected void doExecute(final DelegateExecution execution) {",
                "+        User user = execution.getVariable(FlowableRuntimeUtils.USER, User.class);",
                "+        UserTO userTO = execution.getVariable(FlowableRuntimeUtils.USER_TO, UserTO.class);",
                "+        String event = execution.getVariable(FlowableRuntimeUtils.EVENT, String.class);",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/PasswordReset.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/PasswordReset.java",
                "index 1c36202a38..b1bb3a6062 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/PasswordReset.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/PasswordReset.java",
                "@@ -28,2 +28,3 @@ import org.apache.syncope.core.workflow.api.WorkflowException;",
                " import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;",
                "+import org.flowable.engine.delegate.DelegateExecution;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -32,3 +33,3 @@ import org.springframework.stereotype.Component;",
                " @Component",
                "-public class PasswordReset extends AbstractFlowableServiceTask {",
                "+public class PasswordReset extends FlowableServiceTask {",
                "@@ -41,9 +42,6 @@ public class PasswordReset extends AbstractFlowableServiceTask {",
                "     @Override",
                "-    protected void doExecute(final String executionId) {",
                "-        User user = engine.getRuntimeService().",
                "-                getVariable(executionId, FlowableRuntimeUtils.USER, User.class);",
                "-        String token = engine.getRuntimeService().",
                "-                getVariable(executionId, FlowableRuntimeUtils.TOKEN, String.class);",
                "-        String password = engine.getRuntimeService().",
                "-                getVariable(executionId, FlowableRuntimeUtils.PASSWORD, String.class);",
                "+    protected void doExecute(final DelegateExecution execution) {",
                "+        User user = execution.getVariable(FlowableRuntimeUtils.USER, User.class);",
                "+        String token = execution.getVariable(FlowableRuntimeUtils.TOKEN, String.class);",
                "+        String password = execution.getVariable(FlowableRuntimeUtils.PASSWORD, String.class);",
                "@@ -65,5 +63,5 @@ public class PasswordReset extends AbstractFlowableServiceTask {",
                "         // report updated user and propagation by resource as result",
                "-        engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.USER, user);",
                "-        engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.USER_PATCH, userPatch);",
                "-        engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);",
                "+        execution.setVariable(FlowableRuntimeUtils.USER, user);",
                "+        execution.setVariable(FlowableRuntimeUtils.USER_PATCH, userPatch);",
                "+        execution.setVariable(FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);",
                "     }",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Reactivate.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Reactivate.java",
                "index d6b2c2762e..ab3799bbf9 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Reactivate.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Reactivate.java",
                "@@ -20,2 +20,3 @@ package org.apache.syncope.core.flowable.task;",
                "+import org.flowable.engine.delegate.DelegateExecution;",
                " import org.springframework.stereotype.Component;",
                "@@ -23,6 +24,6 @@ import org.springframework.stereotype.Component;",
                " @Component",
                "-public class Reactivate extends AbstractFlowableServiceTask {",
                "+public class Reactivate extends FlowableServiceTask {",
                "     @Override",
                "-    protected void doExecute(final String executionId) {",
                "+    protected void doExecute(final DelegateExecution execution) {",
                "     }",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Suspend.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Suspend.java",
                "index 8e9439bf4f..0a6a85a353 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Suspend.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Suspend.java",
                "@@ -20,2 +20,3 @@ package org.apache.syncope.core.flowable.task;",
                "+import org.flowable.engine.delegate.DelegateExecution;",
                " import org.springframework.stereotype.Component;",
                "@@ -23,6 +24,6 @@ import org.springframework.stereotype.Component;",
                " @Component",
                "-public class Suspend extends AbstractFlowableServiceTask {",
                "+public class Suspend extends FlowableServiceTask {",
                "     @Override",
                "-    protected void doExecute(final String executionId) {",
                "+    protected void doExecute(final DelegateExecution execution) {",
                "     }",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Update.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Update.java",
                "index c7007ad056..0c931e4082 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Update.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Update.java",
                "@@ -26,2 +26,3 @@ import org.apache.syncope.core.provisioning.api.data.UserDataBinder;",
                " import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;",
                "+import org.flowable.engine.delegate.DelegateExecution;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -30,3 +31,3 @@ import org.springframework.stereotype.Component;",
                " @Component",
                "-public class Update extends AbstractFlowableServiceTask {",
                "+public class Update extends FlowableServiceTask {",
                "@@ -39,5 +40,4 @@ public class Update extends AbstractFlowableServiceTask {",
                "     @Override",
                "-    protected void doExecute(final String executionId) {",
                "-        UserPatch userPatch = engine.getRuntimeService().",
                "-                getVariable(executionId, FlowableRuntimeUtils.USER_PATCH, UserPatch.class);",
                "+    protected void doExecute(final DelegateExecution execution) {",
                "+        UserPatch userPatch = execution.getVariable(FlowableRuntimeUtils.USER_PATCH, UserPatch.class);",
                "         if (userPatch == null || userPatch.isEmpty()) {",
                "@@ -45,4 +45,3 @@ public class Update extends AbstractFlowableServiceTask {",
                "         } else {",
                "-            User user = engine.getRuntimeService().",
                "-                    getVariable(executionId, FlowableRuntimeUtils.USER, User.class);",
                "+            User user = execution.getVariable(FlowableRuntimeUtils.USER, User.class);",
                "@@ -53,4 +52,4 @@ public class Update extends AbstractFlowableServiceTask {",
                "             // report updated user and propagation by resource as result",
                "-            engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.USER, user);",
                "-            engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);",
                "+            execution.setVariable(FlowableRuntimeUtils.USER, user);",
                "+            execution.setVariable(FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);",
                "         }",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/resources/userWorkflow.bpmn20.xml b/ext/flowable/flowable-bpmn/src/main/resources/userWorkflow.bpmn20.xml",
                "index 5a9f1bd090..8325733f9b 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/resources/userWorkflow.bpmn20.xml",
                "+++ b/ext/flowable/flowable-bpmn/src/main/resources/userWorkflow.bpmn20.xml",
                "@@ -32,3 +32,3 @@ under the License.",
                "     <sequenceFlow id=\"flow1\" sourceRef=\"theStart\" targetRef=\"create\"/>",
                "-    <serviceTask id=\"create\" name=\"Create\" flowable:expression=\"#{create.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"create\" name=\"Create\" flowable:delegateExpression=\"${create}\"/>",
                "     <sequenceFlow id=\"flow2\" sourceRef=\"create\" targetRef=\"activate\"/>",
                "@@ -56,5 +56,5 @@ under the License.",
                "     </sequenceFlow>",
                "-    <serviceTask id=\"update\" name=\"Update\" flowable:expression=\"#{update.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"update\" name=\"Update\" flowable:delegateExpression=\"${update}\"/>",
                "     <sequenceFlow id=\"sid-EA22026A-25F0-4ED0-AB6E-9CE9CE74623C\" sourceRef=\"update\" targetRef=\"active\"/>",
                "-    <serviceTask id=\"suspend\" name=\"Suspend\" flowable:expression=\"#{suspend.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"suspend\" name=\"Suspend\" flowable:delegateExpression=\"${suspend}\"/>",
                "     <sequenceFlow id=\"flow10\" sourceRef=\"suspend\" targetRef=\"suspended\"/>",
                "@@ -69,13 +69,13 @@ under the License.",
                "     </sequenceFlow>",
                "-    <serviceTask id=\"reactivate\" name=\"Reactivate\" flowable:expression=\"#{reactivate.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"reactivate\" name=\"Reactivate\" flowable:delegateExpression=\"${reactivate}\"/>",
                "     <sequenceFlow id=\"flow12\" sourceRef=\"reactivate\" targetRef=\"active\"/>",
                "-    <serviceTask id=\"generateToken4PasswordReset\" name=\"Generate Token\" flowable:expression=\"#{generateToken.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"generateToken4PasswordReset\" name=\"Generate Token\" flowable:delegateExpression=\"${generateToken}\"/>",
                "     <sequenceFlow id=\"sid-7F78CE07-A7A1-467F-BB4B-40FB234AEFF7\" sourceRef=\"generateToken4PasswordReset\" targetRef=\"notify4RequestPasswordReset\"/>",
                "-    <serviceTask id=\"notify4RequestPasswordReset\" name=\"Notification\" flowable:expression=\"#{notify.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"notify4RequestPasswordReset\" name=\"Notification\" flowable:delegateExpression=\"${notify}\"/>",
                "     <sequenceFlow id=\"sid-CF9ACA40-7750-47C3-A508-7250D24D4F1F\" sourceRef=\"notify4RequestPasswordReset\" targetRef=\"active\"/>",
                "-    <serviceTask id=\"checkToken4ConfirmPasswordReset\" name=\"Check token, remove and update password\" flowable:expression=\"#{passwordReset.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"checkToken4ConfirmPasswordReset\" name=\"Check token, remove and update password\" flowable:delegateExpression=\"${passwordReset}\"/>",
                "     <sequenceFlow id=\"sid-3E9FE01D-CC60-4A95-B356-CA0DC000FAD6\" sourceRef=\"checkToken4ConfirmPasswordReset\" targetRef=\"notify4ConfirmPasswordReset\"/>",
                "-    <serviceTask id=\"notify4ConfirmPasswordReset\" name=\"Notification\" flowable:expression=\"#{notify.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"notify4ConfirmPasswordReset\" name=\"Notification\" flowable:delegateExpression=\"${notify}\"/>",
                "     <sequenceFlow id=\"sid-A37806A7-6B7B-48A2-BB37-DAE640231144\" sourceRef=\"notify4ConfirmPasswordReset\" targetRef=\"active\"/>",
                "-    <serviceTask id=\"delete\" name=\"Delete\" flowable:expression=\"#{delete.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"delete\" name=\"Delete\" flowable:delegateExpression=\"${delete}\"/>",
                "     <sequenceFlow id=\"flow99\" sourceRef=\"delete\" targetRef=\"theEnd\"/>",
                "diff --git a/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/AssignDirectorGroup.java b/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/AssignDirectorGroup.java",
                "index 4db7ac2279..07de2f390c 100644",
                "--- a/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/AssignDirectorGroup.java",
                "+++ b/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/AssignDirectorGroup.java",
                "@@ -23,3 +23,3 @@ import org.apache.syncope.common.lib.patch.UserPatch;",
                " import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;",
                "-import org.apache.syncope.core.flowable.task.AbstractFlowableServiceTask;",
                "+import org.apache.syncope.core.flowable.task.FlowableServiceTask;",
                " import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                "@@ -28,2 +28,3 @@ import org.apache.syncope.core.provisioning.api.PropagationByResource;",
                " import org.apache.syncope.core.provisioning.api.data.UserDataBinder;",
                "+import org.flowable.engine.delegate.DelegateExecution;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -32,3 +33,3 @@ import org.springframework.stereotype.Component;",
                " @Component",
                "-public class AssignDirectorGroup extends AbstractFlowableServiceTask {",
                "+public class AssignDirectorGroup extends FlowableServiceTask {",
                "@@ -41,8 +42,7 @@ public class AssignDirectorGroup extends AbstractFlowableServiceTask {",
                "     @Override",
                "-    protected void doExecute(final String executionId) {",
                "-        User user = engine.getRuntimeService().",
                "-                getVariable(executionId, FlowableRuntimeUtils.USER, User.class);",
                "+    protected void doExecute(final DelegateExecution execution) {",
                "+        User user = execution.getVariable(FlowableRuntimeUtils.USER, User.class);",
                "-        Boolean secondLevelApprove = engine.getRuntimeService().",
                "-                getVariable(executionId, \"secondLevelApprove\", Boolean.class);",
                "+        Boolean secondLevelApprove = execution.",
                "+                getVariable(\"secondLevelApprove\", Boolean.class);",
                "         if (Boolean.TRUE.equals(secondLevelApprove)) {",
                "@@ -58,4 +58,4 @@ public class AssignDirectorGroup extends AbstractFlowableServiceTask {",
                "             // report updated user and propagation by resource as result",
                "-            engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.USER, user);",
                "-            engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);",
                "+            execution.setVariable(FlowableRuntimeUtils.USER, user);",
                "+            execution.setVariable(FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);",
                "         } else {",
                "diff --git a/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java b/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java",
                "index b0c5261ac8..aa00fe4334 100644",
                "--- a/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java",
                "+++ b/fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java",
                "@@ -24,3 +24,3 @@ import org.apache.syncope.common.lib.to.RelationshipTO;",
                " import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;",
                "-import org.apache.syncope.core.flowable.task.AbstractFlowableServiceTask;",
                "+import org.apache.syncope.core.flowable.task.FlowableServiceTask;",
                " import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                "@@ -29,2 +29,3 @@ import org.apache.syncope.core.provisioning.api.PropagationByResource;",
                " import org.apache.syncope.core.provisioning.api.data.UserDataBinder;",
                "+import org.flowable.engine.delegate.DelegateExecution;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "@@ -33,3 +34,3 @@ import org.springframework.stereotype.Component;",
                " @Component",
                "-public class CreateARelationship extends AbstractFlowableServiceTask {",
                "+public class CreateARelationship extends FlowableServiceTask {",
                "@@ -42,8 +43,7 @@ public class CreateARelationship extends AbstractFlowableServiceTask {",
                "     @Override",
                "-    protected void doExecute(final String executionId) {",
                "-        User user = engine.getRuntimeService().",
                "-                getVariable(executionId, FlowableRuntimeUtils.USER, User.class);",
                "+    protected void doExecute(final DelegateExecution execution) {",
                "+        User user = execution.",
                "+                getVariable(FlowableRuntimeUtils.USER, User.class);",
                "-        Boolean approve = engine.getRuntimeService().",
                "-                getVariable(executionId, \"approve\", Boolean.class);",
                "+        Boolean approve = execution.getVariable(\"approve\", Boolean.class);",
                "         if (Boolean.TRUE.equals(approve)) {",
                "@@ -51,4 +51,3 @@ public class CreateARelationship extends AbstractFlowableServiceTask {",
                "-            String printer = engine.getRuntimeService().",
                "-                    getVariable(executionId, \"printer\", String.class);",
                "+            String printer = execution.getVariable(\"printer\", String.class);",
                "@@ -64,4 +63,4 @@ public class CreateARelationship extends AbstractFlowableServiceTask {",
                "             // report updated user and propagation by resource as result",
                "-            engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.USER, user);",
                "-            engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);",
                "+            execution.setVariable(FlowableRuntimeUtils.USER, user);",
                "+            execution.setVariable(FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);",
                "         } else {",
                "diff --git a/fit/core-reference/src/main/resources/assignPrinterRequest.bpmn20.xml b/fit/core-reference/src/main/resources/assignPrinterRequest.bpmn20.xml",
                "index c9ecb9c15e..4b67f8983f 100644",
                "--- a/fit/core-reference/src/main/resources/assignPrinterRequest.bpmn20.xml",
                "+++ b/fit/core-reference/src/main/resources/assignPrinterRequest.bpmn20.xml",
                "@@ -52,3 +52,3 @@ under the License.",
                "     <sequenceFlow id=\"sid-D7047714-8E57-46B8-B6D4-4844DE330329\" sourceRef=\"selectPrinter\" targetRef=\"approvePrinter\"/>",
                "-    <serviceTask id=\"createARelationship\" name=\"Create ARelationship\" flowable:expression=\"#{createARelationship.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"createARelationship\" name=\"Create ARelationship\" flowable:delegateExpression=\"${createARelationship}\"/>",
                "     <sequenceFlow id=\"sid-33880AE7-35C6-4A39-8E5B-12D8BA53F042\" sourceRef=\"approvePrinter\" targetRef=\"createARelationship\"/>",
                "diff --git a/fit/core-reference/src/main/resources/directorGroupRequest.bpmn20.xml b/fit/core-reference/src/main/resources/directorGroupRequest.bpmn20.xml",
                "index fd482b5abc..605d230f55 100644",
                "--- a/fit/core-reference/src/main/resources/directorGroupRequest.bpmn20.xml",
                "+++ b/fit/core-reference/src/main/resources/directorGroupRequest.bpmn20.xml",
                "@@ -46,3 +46,3 @@ under the License.",
                "     </userTask>",
                "-    <serviceTask id=\"assignDirectorGroup\" name=\"Assign director group\" flowable:expression=\"#{assignDirectorGroup.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"assignDirectorGroup\" name=\"Assign director group\" flowable:delegateExpression=\"${assignDirectorGroup}\"/>",
                "     <exclusiveGateway id=\"sid-1E2454BD-FAE9-4A15-B169-D41843A39C15\" default=\"sid-338A4B20-89E9-46B2-8AB3-36291455051B\"/>",
                "diff --git a/fit/core-reference/src/main/resources/userWorkflow.bpmn20.xml b/fit/core-reference/src/main/resources/userWorkflow.bpmn20.xml",
                "index 295dacf244..79e4b3971d 100644",
                "--- a/fit/core-reference/src/main/resources/userWorkflow.bpmn20.xml",
                "+++ b/fit/core-reference/src/main/resources/userWorkflow.bpmn20.xml",
                "@@ -32,3 +32,3 @@ under the License.",
                "     <sequenceFlow id=\"flow1\" sourceRef=\"theStart\" targetRef=\"create\"/>",
                "-    <serviceTask id=\"create\" name=\"Create\" flowable:expression=\"#{create.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"create\" name=\"Create\" flowable:delegateExpression=\"${create}\"/>",
                "     <sequenceFlow id=\"flow2\" sourceRef=\"create\" targetRef=\"createGW\"/>",
                "@@ -77,5 +77,5 @@ try {",
                "     </sequenceFlow>",
                "-    <serviceTask id=\"activate\" name=\"Activate\" flowable:expression=\"#{autoActivate.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"activate\" name=\"Activate\" flowable:delegateExpression=\"${autoActivate}\"/>",
                "     <sequenceFlow id=\"flow4\" sourceRef=\"activate\" targetRef=\"active\"/>",
                "-    <serviceTask id=\"generateToken\" name=\"Generate token\" flowable:expression=\"#{generateToken.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"generateToken\" name=\"Generate token\" flowable:delegateExpression=\"${generateToken}\"/>",
                "     <sequenceFlow id=\"flow5\" sourceRef=\"generateToken\" targetRef=\"created\"/>",
                "@@ -166,5 +166,5 @@ try {",
                "     <sequenceFlow id=\"flow8ter\" sourceRef=\"rejectUpdate\" targetRef=\"active\"/>",
                "-    <serviceTask id=\"update\" name=\"Update\" flowable:expression=\"#{update.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"update\" name=\"Update\" flowable:delegateExpression=\"${update}\"/>",
                "     <sequenceFlow id=\"flow9\" sourceRef=\"update\" targetRef=\"active\"/>",
                "-    <serviceTask id=\"suspend\" name=\"Suspend\" flowable:expression=\"#{suspend.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"suspend\" name=\"Suspend\" flowable:delegateExpression=\"${suspend}\"/>",
                "     <sequenceFlow id=\"flow10\" sourceRef=\"suspend\" targetRef=\"suspended\"/>",
                "@@ -179,3 +179,3 @@ try {",
                "     </sequenceFlow>",
                "-    <serviceTask id=\"reactivate\" name=\"Reactivate\" flowable:expression=\"#{reactivate.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"reactivate\" name=\"Reactivate\" flowable:delegateExpression=\"${reactivate}\"/>",
                "     <sequenceFlow id=\"flow12\" sourceRef=\"reactivate\" targetRef=\"active\"/>",
                "@@ -218,14 +218,14 @@ try {",
                "     <sequenceFlow id=\"flow14ter\" sourceRef=\"rejectDelete\" targetRef=\"active\"/>",
                "-    <serviceTask id=\"generateToken4PasswordReset\" name=\"Generate token\" flowable:expression=\"#{generateToken.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"generateToken4PasswordReset\" name=\"Generate token\" flowable:delegateExpression=\"${generateToken}\"/>",
                "     <sequenceFlow id=\"flow15\" sourceRef=\"generateToken4PasswordReset\" targetRef=\"notify4RequestPasswordReset\"/>",
                "-    <serviceTask id=\"notify4RequestPasswordReset\" name=\"Notification\" flowable:expression=\"#{notify.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"notify4RequestPasswordReset\" name=\"Notification\" flowable:delegateExpression=\"${notify}\"/>",
                "     <sequenceFlow id=\"flow16\" sourceRef=\"notify4RequestPasswordReset\" targetRef=\"active\"/>",
                "-    <serviceTask id=\"checkToken4ConfirmPasswordReset\" name=\"Check token, remove and update password\" flowable:expression=\"#{passwordReset.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"checkToken4ConfirmPasswordReset\" name=\"Check token, remove and update password\" flowable:delegateExpression=\"${passwordReset}\"/>",
                "     <sequenceFlow id=\"flow17\" sourceRef=\"checkToken4ConfirmPasswordReset\" targetRef=\"notify4ConfirmPasswordReset\"/>",
                "-    <serviceTask id=\"notify4ConfirmPasswordReset\" name=\"Notification\" flowable:expression=\"#{notify.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"notify4ConfirmPasswordReset\" name=\"Notification\" flowable:delegateExpression=\"${notify}\"/>",
                "     <sequenceFlow id=\"flow18\" sourceRef=\"notify4ConfirmPasswordReset\" targetRef=\"active\"/>",
                "-    <serviceTask id=\"delete\" name=\"Delete\" flowable:expression=\"#{delete.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"delete\" name=\"Delete\" flowable:delegateExpression=\"${delete}\"/>",
                "     <sequenceFlow id=\"flow99\" sourceRef=\"delete\" targetRef=\"theEnd\"/>",
                "     <endEvent id=\"theEnd\"/>",
                "-    <serviceTask id=\"updateWhilePendingCreateApproval\" name=\"Update\" flowable:expression=\"#{update.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"updateWhilePendingCreateApproval\" name=\"Update\" flowable:delegateExpression=\"${update}\"/>",
                "     <sequenceFlow id=\"sid-76B82B68-099D-4729-B8CF-D028386FE900\" sourceRef=\"createApprovalGW\" targetRef=\"createApproval\"/>",
                "@@ -248,3 +248,3 @@ try {",
                "     </sequenceFlow>",
                "-    <serviceTask id=\"updateWhilePendingUpdateApproval\" name=\"Update\" flowable:expression=\"#{update.execute(execution.processInstanceId)}\"/>",
                "+    <serviceTask id=\"updateWhilePendingUpdateApproval\" name=\"Update\" flowable:delegateExpression=\"${update}\"/>",
                "     <exclusiveGateway id=\"sid-4C9C9117-26DB-4326-A12B-EEDA42EADF07\" default=\"sid-12E29B94-C369-45C1-BCEF-C165AFDA525A\"/>"
            ],
            "changed_files": [
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/AutoActivate.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Create.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Delete.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/FlowableServiceTask.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/GenerateToken.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Notify.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/PasswordReset.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Reactivate.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Suspend.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Update.java",
                "ext/flowable/flowable-bpmn/src/main/resources/userWorkflow.bpmn20.xml",
                "fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/AssignDirectorGroup.java",
                "fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java",
                "fit/core-reference/src/main/resources/assignPrinterRequest.bpmn20.xml",
                "fit/core-reference/src/main/resources/directorGroupRequest.bpmn20.xml",
                "fit/core-reference/src/main/resources/userWorkflow.bpmn20.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1369": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "57e2ffcdee8f0a0cbaca3e046f46300dd6bc76d8"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1369",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "16d290b460fb3e2f7bf4c75309f9d63f39f8cf64",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534415511,
            "hunks": 7,
            "message": "[SYNCOPE-1357] Wiser equals() and hashCode()",
            "diff": [
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheKey.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheKey.java",
                "index 41d5224e14..59e1839c4e 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheKey.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheKey.java",
                "@@ -20,6 +20,3 @@ package org.apache.syncope.core.provisioning.api.cache;",
                "-import org.apache.commons.lang3.builder.EqualsBuilder;",
                "-import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;",
                "-import org.apache.commons.lang3.builder.ToStringStyle;",
                "+import java.util.Objects;",
                "@@ -64,4 +61,8 @@ public class VirAttrCacheKey {",
                "     @Override",
                "-    public boolean equals(final Object obj) {",
                "-        return EqualsBuilder.reflectionEquals(this, obj, true);",
                "+    public int hashCode() {",
                "+        int hash = 5;",
                "+        hash = 89 * hash + Objects.hashCode(this.type);",
                "+        hash = 89 * hash + Objects.hashCode(this.key);",
                "+        hash = 89 * hash + Objects.hashCode(this.virSchema);",
                "+        return hash;",
                "     }",
                "@@ -69,4 +70,20 @@ public class VirAttrCacheKey {",
                "     @Override",
                "-    public int hashCode() {",
                "-        return HashCodeBuilder.reflectionHashCode(this, true);",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final VirAttrCacheKey other = (VirAttrCacheKey) obj;",
                "+        if (!Objects.equals(this.type, other.type)) {",
                "+            return false;",
                "+        }",
                "+        if (!Objects.equals(this.key, other.key)) {",
                "+            return false;",
                "+        }",
                "+        return Objects.equals(this.virSchema, other.virSchema);",
                "     }",
                "@@ -75,3 +92,3 @@ public class VirAttrCacheKey {",
                "     public String toString() {",
                "-        return ReflectionToStringBuilder.toString(this, ToStringStyle.JSON_STYLE, true);",
                "+        return \"VirAttrCacheKey{\" + \"type=\" + type + \", key=\" + key + \", virSchema=\" + virSchema + '}';",
                "     }",
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheValue.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheValue.java",
                "index 1822744199..a032c5af0e 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheValue.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheValue.java",
                "@@ -24,2 +24,3 @@ import java.util.Date;",
                " import java.util.List;",
                "+import java.util.Objects;",
                "@@ -90,2 +91,39 @@ public class VirAttrCacheValue {",
                "     }",
                "+",
                "+    @Override",
                "+    public int hashCode() {",
                "+        int hash = 5;",
                "+        hash = 67 * hash + Objects.hashCode(this.values);",
                "+        hash = 67 * hash + Objects.hashCode(this.creationDate);",
                "+        hash = 67 * hash + Objects.hashCode(this.lastAccessDate);",
                "+        return hash;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(final Object obj) {",
                "+        if (this == obj) {",
                "+            return true;",
                "+        }",
                "+        if (obj == null) {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass()) {",
                "+            return false;",
                "+        }",
                "+        final VirAttrCacheValue other = (VirAttrCacheValue) obj;",
                "+        if (!Objects.equals(this.values, other.values)) {",
                "+            return false;",
                "+        }",
                "+        if (!Objects.equals(this.creationDate, other.creationDate)) {",
                "+            return false;",
                "+        }",
                "+        return Objects.equals(this.lastAccessDate, other.lastAccessDate);",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString() {",
                "+        return \"VirAttrCacheValue{\"",
                "+                + \"values=\" + values + \", creationDate=\" + creationDate + \", lastAccessDate=\" + lastAccessDate",
                "+                + '}';",
                "+    }",
                " }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java",
                "index 7f5cfeee65..d7dee1f699 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java",
                "@@ -83,3 +83,3 @@ public class VirAttrHandlerImpl implements VirAttrHandler {",
                "                     result.put(schema, virAttrCacheValue.getValues());",
                "-                } else {",
                "+                } else if (schema.getProvision().getAnyType().equals(any.getType())) {",
                "                     Set<VirSchema> schemasToRead = toRead.get(schema.getProvision());"
            ],
            "changed_files": [
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheKey.java",
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheValue.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1357": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ea6054a89245ebbe6c26e4ffbf2744800166e977"
                ],
                [
                    "no-tag",
                    "4649a2b6f6dfafac039db690f7d2da94172d408b"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1357",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d5e73caeebdf5c772ebfd5da958b380c1ec6fd5c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536129401,
            "hunks": 4,
            "message": "[SYNCOPE-1362] Troublesome Optional",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/commons/SortableAnyProviderComparator.java b/client/console/src/main/java/org/apache/syncope/client/console/commons/SortableAnyProviderComparator.java",
                "index 9a5d86ab01..318963d850 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/commons/SortableAnyProviderComparator.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/commons/SortableAnyProviderComparator.java",
                "@@ -85,3 +85,3 @@ public class SortableAnyProviderComparator<T extends AnyTO> extends SortableData",
                "             if (schemaType == null) {",
                "-                attr = this.anyTO.getPlainAttr(schema).get();",
                "+                attr = this.anyTO.getPlainAttr(schema).orElse(null);",
                "             } else {",
                "@@ -90,3 +90,3 @@ public class SortableAnyProviderComparator<T extends AnyTO> extends SortableData",
                "                     default:",
                "-                        attr = this.anyTO.getPlainAttr(schema).get();",
                "+                        attr = this.anyTO.getPlainAttr(schema).orElse(null);",
                "                         break;",
                "@@ -94,3 +94,3 @@ public class SortableAnyProviderComparator<T extends AnyTO> extends SortableData",
                "                     case DERIVED:",
                "-                        attr = this.anyTO.getDerAttr(schema).get();",
                "+                        attr = this.anyTO.getDerAttr(schema).orElse(null);",
                "                         break;",
                "@@ -98,3 +98,3 @@ public class SortableAnyProviderComparator<T extends AnyTO> extends SortableData",
                "                     case VIRTUAL:",
                "-                        attr = this.anyTO.getVirAttr(schema).get();",
                "+                        attr = this.anyTO.getVirAttr(schema).orElse(null);",
                "                         break;"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/commons/SortableAnyProviderComparator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1362": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3a97b618e24173c6cfd4d97341b2d000553f0939"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1362",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7de2d08eb3ea65a17d3598ef12ea7c654f9b6f6e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539246714,
            "hunks": 3,
            "message": "[SYNCOPE-1383] fixes the class cast exception by using a real SearchResultHandler",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AsyncConnectorFacade.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AsyncConnectorFacade.java",
                "index 22cc25da5a..e778639bfb 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AsyncConnectorFacade.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AsyncConnectorFacade.java",
                "@@ -30,2 +30,3 @@ import org.identityconnectors.framework.common.objects.ObjectClassInfo;",
                " import org.identityconnectors.framework.common.objects.OperationOptions;",
                "+import org.identityconnectors.framework.common.objects.SearchResult;",
                " import org.identityconnectors.framework.common.objects.SyncToken;",
                "@@ -33,2 +34,3 @@ import org.identityconnectors.framework.common.objects.Uid;",
                " import org.identityconnectors.framework.common.objects.filter.FilterBuilder;",
                "+import org.identityconnectors.framework.spi.SearchResultsHandler;",
                " import org.slf4j.Logger;",
                "@@ -109,6 +111,16 @@ public class AsyncConnectorFacade {",
                "                 ignoreCaseMatch ? FilterBuilder.equalsIgnoreCase(connObjectKey) : FilterBuilder.equalTo(connObjectKey),",
                "-                connectorObject -> {",
                "-                    objects[0] = connectorObject;",
                "-                    return false;",
                "-                }, options);",
                "+                new SearchResultsHandler() {",
                "+",
                "+            @Override",
                "+            public boolean handle(final ConnectorObject connectorObject) {",
                "+                objects[0] = connectorObject;",
                "+                return false;",
                "+            }",
                "+",
                "+            @Override",
                "+            public void handleResult(final SearchResult sr) {",
                "+                // do nothing",
                "+            }",
                "+        },",
                "+                options);"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AsyncConnectorFacade.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1383": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "31595e4e7a522d9fcf912e73ca89d0123857cd59"
                ],
                [
                    "no-tag",
                    "f092044c44cb8fa99f9e6aef5d429e1a9920afea"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: connector",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1383",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1b9bc4607eb1a49649cdaef09a5ae82b9eecc759",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537178888,
            "hunks": 1,
            "message": "[SYNCOPE-1372] Restoring check before insertion into password history",
            "diff": [
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java",
                "index cbe61595ce..b85147fa07 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java",
                "@@ -322,3 +322,5 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "             // update user's password history with encrypted password",
                "-            if (maxPPSpecHistory > 0 && user.getPassword() != null) {",
                "+            if (maxPPSpecHistory > 0 && user.getPassword() != null",
                "+                    && !user.getPasswordHistory().contains(user.getPassword())) {",
                "+",
                "                 user.getPasswordHistory().add(user.getPassword());"
            ],
            "changed_files": [
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1372": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c1f858fd8d475b5b8e701e114f93bc2bd2b6db80"
                ],
                [
                    "no-tag",
                    "3e0c00355bec768d3c798b44111b57dfc709ea16"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1372",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b570430ca160d0f27ec67e80a1bb6b09709f61bd",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539616611,
            "hunks": 4,
            "message": "[SYNCOPE-1385] makes PriorityPropagationTaskExecutor timeout closer to the maximum connector connection request timeout",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java",
                "index 77581a91c6..84339c8f07 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java",
                "@@ -21,2 +21,3 @@ package org.apache.syncope.core.provisioning.java.propagation;",
                " import java.io.Serializable;",
                "+import java.util.ArrayList;",
                " import java.util.Collection;",
                "@@ -33,3 +34,2 @@ import java.util.concurrent.Future;",
                " import java.util.concurrent.TimeUnit;",
                "-import java.util.function.Function;",
                " import java.util.stream.Collectors;",
                "@@ -85,7 +85,22 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec",
                "-        Map<PropagationTaskTO, ExternalResource> taskToResource = tasks.stream().",
                "-                collect(Collectors.toMap(Function.identity(), task -> resourceDAO.find(task.getResource())));",
                "+        Map<PropagationTaskTO, ExternalResource> taskToResource = new HashMap<>(tasks.size());",
                "+        List<PropagationTaskTO> prioritizedTasks = new ArrayList<>();",
                "+",
                "+        int[] connRequestTimeout = { 60 };",
                "+",
                "+        tasks.forEach(task -> {",
                "+            ExternalResource resource = resourceDAO.find(task.getResource());",
                "+            taskToResource.put(task, resource);",
                "+",
                "+            if (resource.getPropagationPriority() != null) {",
                "+                prioritizedTasks.add(task);",
                "+",
                "+                if (resource.getConnector().getConnRequestTimeout() != null",
                "+                        && connRequestTimeout[0] < resource.getConnector().getConnRequestTimeout()) {",
                "+                    connRequestTimeout[0] = resource.getConnector().getConnRequestTimeout();",
                "+                    LOG.debug(\"Upgrade request connection timeout to {}\", connRequestTimeout);",
                "+                }",
                "+            }",
                "+        });",
                "-        List<PropagationTaskTO> prioritizedTasks = tasks.stream().",
                "-                filter(task -> taskToResource.get(task).getPropagationPriority() != null).collect(Collectors.toList());",
                "         Collections.sort(prioritizedTasks, new PriorityComparator(taskToResource));",
                "@@ -142,3 +157,3 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec",
                "                         }",
                "-                    }).get(60, TimeUnit.SECONDS);",
                "+                    }).get(connRequestTimeout[0], TimeUnit.SECONDS);",
                "                 } catch (Exception e) {"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1385": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e7102cd3b074a8f3e7cecb2dccfaa3e2fb959cfb"
                ],
                [
                    "no-tag",
                    "28812f7d168b054eae78909092fa42840dd97ef2"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: connector",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1385",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f1c83e5487b1f497025658b88f2f3a11abd84105",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534425079,
            "hunks": 7,
            "message": "[SYNCOPE-1358] BooleanUtils to the resce",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java",
                "index 9bef61cb4a..1c8f5777e1 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java",
                "@@ -27,2 +27,3 @@ import java.util.Map;",
                " import java.util.regex.Pattern;",
                "+import org.apache.commons.lang3.BooleanUtils;",
                " import org.apache.commons.lang3.StringUtils;",
                "@@ -42,3 +43,2 @@ import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;",
                " import org.apache.syncope.common.lib.to.PlainSchemaTO;",
                "-import org.apache.syncope.common.lib.types.AttrSchemaType;",
                " import org.slf4j.Logger;",
                "@@ -266,7 +266,19 @@ public final class SearchUtils implements Serializable {",
                "                             boolean isDouble = false;",
                "+                            boolean isBoolean = false;",
                "                             if (availableSchemaTypes.get(clause.getProperty()) != null) {",
                "-                                isLong = availableSchemaTypes.get(clause.getProperty()).getType()",
                "-                                        == AttrSchemaType.Long;",
                "-                                isDouble = availableSchemaTypes.get(clause.getProperty()).getType()",
                "-                                        == AttrSchemaType.Double;",
                "+                                switch (availableSchemaTypes.get(clause.getProperty()).getType()) {",
                "+                                    case Long:",
                "+                                        isLong = true;",
                "+                                        break;",
                "+",
                "+                                    case Double:",
                "+                                        isDouble = true;",
                "+                                        break;",
                "+",
                "+                                    case Boolean:",
                "+                                        isBoolean = true;",
                "+                                        break;",
                "+",
                "+                                    default:",
                "+                                }",
                "                             }",
                "@@ -316,3 +328,10 @@ public final class SearchUtils implements Serializable {",
                "                                 case NOT_EQUALS:",
                "-                                    condition = property.notEqualTolIgnoreCase(value);",
                "+                                    condition = isLong",
                "+                                            ? property.notEqualTo(NumberUtils.toLong(value))",
                "+                                            : isDouble",
                "+                                                    ? property.notEqualTo(NumberUtils.toDouble(value))",
                "+                                                    : isBoolean",
                "+                                                            ? property.notEqualTo(BooleanUtils.toStringTrueFalse(",
                "+                                                                    BooleanUtils.toBoolean(value)))",
                "+                                                            : property.notEqualTolIgnoreCase(value);",
                "                                     break;",
                "@@ -324,4 +343,8 @@ public final class SearchUtils implements Serializable {",
                "                                                     ? property.equalTo(NumberUtils.toDouble(value))",
                "-                                                    : property.equalToIgnoreCase(value);",
                "+                                                    : isBoolean",
                "+                                                            ? property.equalTo(BooleanUtils.toStringTrueFalse(",
                "+                                                                    BooleanUtils.toBoolean(value)))",
                "+                                                            : property.equalToIgnoreCase(value);",
                "                                     break;",
                "+",
                "                                 default:"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1358": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ae8fef040c02836b442212bef8f59ecdeed90da5"
                ],
                [
                    "no-tag",
                    "95123f8e577948cc101d3718532413abff1c22a6"
                ]
            ],
            "tags": [
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1358",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1542300443,
            "hunks": 142,
            "message": "[SYNCOPE-1395] integration tests working",
            "diff": [
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/InvalidEntityException.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/InvalidEntityException.java",
                "index d6a3fe7ad2..31719d05e7 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/InvalidEntityException.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/InvalidEntityException.java",
                "@@ -23,3 +23,2 @@ import java.util.HashMap;",
                " import java.util.Map;",
                "-import java.util.Map.Entry;",
                " import java.util.Set;",
                "@@ -47,4 +46,6 @@ public class InvalidEntityException extends ValidationException {",
                "      */",
                "-    public InvalidEntityException(final Class<?> entityClass,",
                "-            final EntityViolationType entityViolationType, final String message) {",
                "+    public InvalidEntityException(",
                "+            final Class<?> entityClass,",
                "+            final EntityViolationType entityViolationType,",
                "+            final String message) {",
                "@@ -66,3 +67,4 @@ public class InvalidEntityException extends ValidationException {",
                "      */",
                "-    public InvalidEntityException(final String entityClassSimpleName,",
                "+    public InvalidEntityException(",
                "+            final String entityClassSimpleName,",
                "             final Set<ConstraintViolation<Object>> violations) {",
                "@@ -73,3 +75,3 @@ public class InvalidEntityException extends ValidationException {",
                "-        violations.forEach((violation) -> {",
                "+        violations.forEach(violation -> {",
                "             int firstComma = violation.getMessageTemplate().indexOf(';');",
                "@@ -82,3 +84,2 @@ public class InvalidEntityException extends ValidationException {",
                "             EntityViolationType entityViolationType;",
                "-",
                "             try {",
                "@@ -117,5 +118,5 @@ public class InvalidEntityException extends ValidationException {",
                "-        for (Entry<Class<?>, Set<EntityViolationType>> entry : violations.entrySet()) {",
                "-            sb.append(entry.getKey().getSimpleName()).append(' ').append(entry.getValue().toString()).append(\", \");",
                "-        }",
                "+        violations.forEach((key, value) -> {",
                "+            sb.append(key.getSimpleName()).append(' ').append(value.toString()).append(\", \");",
                "+        });",
                "         sb.delete(sb.lastIndexOf(\", \"), sb.length());",
                "diff --git a/core/persistence-jpa-pgjsonb/pom.xml b/core/persistence-jpa-pgjsonb/pom.xml",
                "index aedaa10959..34426f5e32 100644",
                "--- a/core/persistence-jpa-pgjsonb/pom.xml",
                "+++ b/core/persistence-jpa-pgjsonb/pom.xml",
                "@@ -189,14 +189,8 @@ under the License.",
                "                 <image>",
                "-                  <name>crunchydata/crunchy-postgres:centos7-10.5-2.1.0</name>",
                "+                  <name>postgres:${docker.postgresql.version}</name>",
                "                   <run>",
                "                     <env>",
                "-                      <PG_ROOT_PASSWORD>postgres</PG_ROOT_PASSWORD>",
                "-                      <PG_MODE>primary</PG_MODE>",
                "-                      <PG_PRIMARY_USER>postgres</PG_PRIMARY_USER>",
                "-                      <PG_PRIMARY_PASSWORD>postgres</PG_PRIMARY_PASSWORD>",
                "-                      <PG_PRIMARY_HOST>localhost</PG_PRIMARY_HOST>",
                "-                      <PG_PRIMARY_PORT>5432</PG_PRIMARY_PORT>",
                "-                      <PG_DATABASE>syncope</PG_DATABASE>",
                "-                      <PG_USER>syncope</PG_USER>",
                "-                      <PG_PASSWORD>syncope</PG_PASSWORD>",
                "+                      <POSTGRES_DB>syncope</POSTGRES_DB>",
                "+                      <POSTGRES_USER>syncope</POSTGRES_USER>",
                "+                      <POSTGRES_PASSWORD>syncope</POSTGRES_PASSWORD>",
                "                     </env>",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyObjectDAO.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyObjectDAO.java",
                "index 4879f2662a..f821f7f4b6 100644",
                "--- a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyObjectDAO.java",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyObjectDAO.java",
                "@@ -26,3 +26,2 @@ import org.apache.syncope.core.persistence.jpa.entity.anyobject.PGJPAAnyObject;",
                " import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "-import org.springframework.transaction.annotation.Transactional;",
                "@@ -39,8 +38,2 @@ public class PGJPAAnyObjectDAO extends JPAAnyObjectDAO {",
                "-    @Transactional(readOnly = true)",
                "-    @Override",
                "-    public AnyObject find(final String key) {",
                "-        return entityManager().find(PGJPAAnyObject.class, key);",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAConfDAO.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAConfDAO.java",
                "new file mode 100644",
                "index 0000000000..130d730d14",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAConfDAO.java",
                "@@ -0,0 +1,51 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.persistence.jpa.dao;",
                "+",
                "+import org.apache.openjpa.enhance.PersistenceCapable;",
                "+import org.apache.openjpa.util.ImplHelper;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;",
                "+import org.apache.syncope.core.persistence.api.entity.conf.Conf;",
                "+",
                "+public class PGJPAConfDAO extends JPAConfDAO {",
                "+",
                "+    /**",
                "+     * Marks the {@code plainAttrs} field as dirty, to force OpenJPA generating an update statement on the",
                "+     * SyncopeConf table - otherwise no update on the table itself would be generated when adding an attribute,",
                "+     * as the {@code plainAttrs} JSON field gets updated by the entity listener.",
                "+     */",
                "+    private void dirten() {",
                "+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(get(), null);",
                "+        if (pc != null) {",
                "+            pc.pcGetStateManager().dirty(\"plainAttrs\");",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public Conf save(final CPlainAttr attr) {",
                "+        dirten();",
                "+        return super.save(attr);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Conf delete(final String key) {",
                "+        dirten();",
                "+        return super.delete(key);",
                "+    }",
                "+}",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAGroupDAO.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAGroupDAO.java",
                "index 4c020c6417..e69252a123 100644",
                "--- a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAGroupDAO.java",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAGroupDAO.java",
                "@@ -24,5 +24,4 @@ import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;",
                " import org.apache.syncope.core.persistence.api.entity.group.Group;",
                "-import org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup;",
                "+import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;",
                " import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "-import org.springframework.transaction.annotation.Transactional;",
                "@@ -39,8 +38,2 @@ public class PGJPAGroupDAO extends JPAGroupDAO {",
                "-    @Transactional(readOnly = true)",
                "-    @Override",
                "-    public Group find(final String key) {",
                "-        return entityManager().find(PGJPAGroup.class, key);",
                "-    }",
                "-",
                "     @Override",
                "@@ -52,3 +45,3 @@ public class PGJPAGroupDAO extends JPAGroupDAO {",
                "-        return anyDAO().findByPlainAttrValue(PGJPAGroup.TABLE, anyUtils(), schemaKey, attrValue, ignoreCaseMatch);",
                "+        return anyDAO().findByPlainAttrValue(JPAGroup.TABLE, anyUtils(), schemaKey, attrValue, ignoreCaseMatch);",
                "     }",
                "@@ -61,3 +54,3 @@ public class PGJPAGroupDAO extends JPAGroupDAO {",
                "-        return anyDAO().findByPlainAttrUniqueValue(PGJPAGroup.TABLE, anyUtils(),",
                "+        return anyDAO().findByPlainAttrUniqueValue(JPAGroup.TABLE, anyUtils(),",
                "                 schemaKey, attrUniqueValue, ignoreCaseMatch);",
                "@@ -72,3 +65,3 @@ public class PGJPAGroupDAO extends JPAGroupDAO {",
                "-        return anyDAO().findByDerAttrValue(PGJPAGroup.TABLE, anyUtils(), schemaKey, value, ignoreCaseMatch);",
                "+        return anyDAO().findByDerAttrValue(JPAGroup.TABLE, anyUtils(), schemaKey, value, ignoreCaseMatch);",
                "     }",
                "@@ -77,3 +70,3 @@ public class PGJPAGroupDAO extends JPAGroupDAO {",
                "     public Group save(final Group group) {",
                "-        anyDAO().checkBeforeSave(PGJPAGroup.TABLE, anyUtils(), group);",
                "+        anyDAO().checkBeforeSave(JPAGroup.TABLE, anyUtils(), group);",
                "         return super.save(group);",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrValueDAO.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrValueDAO.java",
                "index 0b67612878..c1d9c54385 100644",
                "--- a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrValueDAO.java",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrValueDAO.java",
                "@@ -20,8 +20,4 @@ package org.apache.syncope.core.persistence.jpa.dao;",
                "-import static org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO.getEntityReference;",
                "-",
                "-import java.util.stream.Collectors;",
                " import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;",
                " import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                "-import org.apache.syncope.core.persistence.api.entity.Entity;",
                " import org.apache.syncope.core.persistence.api.entity.PlainAttr;",
                "@@ -34,9 +30,3 @@ public class PGJPAPlainAttrValueDAO extends AbstractDAO<PlainAttrValue> implemen",
                "         if (attr.getUniqueValue() == null) {",
                "-            attr.getValues().stream().map(Entity::getKey).collect(Collectors.toSet()).forEach(attrValueKey -> {",
                "-                PlainAttrValue attrValue = anyUtils.plainAttrValueClass().cast(",
                "-                        entityManager().find(getEntityReference(anyUtils.plainAttrValueClass()), attrValueKey));",
                "-                if (attrValue != null) {",
                "-                    attr.getValues().remove(attrValue);",
                "-                }",
                "-            });",
                "+            attr.getValues().clear();",
                "         } else {",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAUserDAO.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAUserDAO.java",
                "index 340ba6e4e7..f1c420fa72 100644",
                "--- a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAUserDAO.java",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAUserDAO.java",
                "@@ -28,3 +28,2 @@ import org.apache.syncope.core.persistence.jpa.entity.user.PGJPAUser;",
                " import org.apache.syncope.core.spring.ApplicationContextProvider;",
                "-import org.springframework.transaction.annotation.Transactional;",
                "@@ -41,8 +40,2 @@ public class PGJPAUserDAO extends JPAUserDAO {",
                "-    @Transactional(readOnly = true)",
                "-    @Override",
                "-    public User find(final String key) {",
                "-        return entityManager().find(PGJPAUser.class, key);",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityListener.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityListener.java",
                "index ddbb13e160..2c4c4e4602 100644",
                "--- a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityListener.java",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityListener.java",
                "@@ -29,3 +29,6 @@ public abstract class PGJPAEntityListener<A extends Any<?>> {",
                "     @SuppressWarnings(\"unchecked\")",
                "-    protected void read(final PGJPAAny<A> entity) {",
                "+    protected void json2list(final PGJPAAny<A> entity, final boolean clearFirst) {",
                "+        if (clearFirst) {",
                "+            entity.getPlainAttrList().clear();",
                "+        }",
                "         if (entity.getPlainAttrsJSON() != null) {",
                "@@ -43,3 +46,3 @@ public abstract class PGJPAEntityListener<A extends Any<?>> {",
                "-    protected void save(final PGJPAAny<A> entity) {",
                "+    protected void list2json(final PGJPAAny<A> entity) {",
                "         entity.setPlainAttrsJSON(entity.getPlainAttrList().isEmpty()",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObject.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObject.java",
                "index dad8536c60..d98c26a1ea 100644",
                "--- a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObject.java",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObject.java",
                "@@ -22,2 +22,4 @@ import java.util.ArrayList;",
                " import java.util.List;",
                "+import java.util.Objects;",
                "+import java.util.Optional;",
                " import javax.persistence.Column;",
                "@@ -28,2 +30,3 @@ import javax.persistence.Table;",
                " import javax.persistence.Transient;",
                "+import org.apache.syncope.core.persistence.api.entity.Membership;",
                " import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;",
                "@@ -80,6 +83,3 @@ public class PGJPAAnyObject extends JPAAnyObject implements PGJPAAny<AnyObject>,",
                "                 -> pgattr.getSchemaKey().equals(attr.getSchema().getKey())",
                "-                && attr.getOwner().getKey().equals(getKey())",
                "-                && attr.getMembership() == null",
                "-                ? true",
                "-                : pgattr.getMembership() != null && pgattr.getMembershipKey().equals(attr.getMembership().getKey()));",
                "+                && Objects.equals(pgattr.getMembershipKey(), ((PGAPlainAttr) attr).getMembershipKey()));",
                "     }",
                "@@ -91,5 +91,22 @@ public class PGJPAAnyObject extends JPAAnyObject implements PGJPAAny<AnyObject>,",
                "+    @Override",
                "+    public Optional<? extends APlainAttr> getPlainAttr(final String plainSchema) {",
                "+        return plainAttrList.stream().",
                "+                filter(pgattr -> pgattr.getSchemaKey() != null && pgattr.getSchemaKey().equals(plainSchema)",
                "+                && pgattr.getMembershipKey() == null).",
                "+                findFirst();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Optional<? extends APlainAttr> getPlainAttr(final String plainSchema, final Membership<?> membership) {",
                "+        return plainAttrList.stream().",
                "+                filter(pgattr -> pgattr.getSchemaKey() != null && pgattr.getSchemaKey().equals(plainSchema)",
                "+                && pgattr.getMembershipKey() != null && pgattr.getMembershipKey().equals(membership.getKey())).",
                "+                findFirst();",
                "+    }",
                "+",
                "     @Override",
                "     public boolean remove(final AMembership membership) {",
                "-        plainAttrList.removeIf(attr -> attr.getMembership().getKey().equals(membership.getKey()));",
                "+        plainAttrList.removeIf(pgattr",
                "+                -> pgattr.getMembershipKey() != null && pgattr.getMembershipKey().equals(membership.getKey()));",
                "         return super.remove(membership);",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObjectListener.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObjectListener.java",
                "index 61b201f346..112a676b9e 100644",
                "--- a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObjectListener.java",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObjectListener.java",
                "@@ -23,2 +23,4 @@ import java.util.List;",
                " import javax.persistence.PostLoad;",
                "+import javax.persistence.PostPersist;",
                "+import javax.persistence.PostUpdate;",
                " import javax.persistence.PrePersist;",
                "@@ -40,3 +42,3 @@ public class PGJPAAnyObjectListener extends PGJPAEntityListener<AnyObject> {",
                "     public void read(final PGJPAAnyObject anyObject) {",
                "-        super.read(anyObject);",
                "+        super.json2list(anyObject, false);",
                "     }",
                "@@ -46,3 +48,9 @@ public class PGJPAAnyObjectListener extends PGJPAEntityListener<AnyObject> {",
                "     public void save(final PGJPAAnyObject anyObject) {",
                "-        super.save(anyObject);",
                "+        super.list2json(anyObject);",
                "+    }",
                "+",
                "+    @PostPersist",
                "+    @PostUpdate",
                "+    public void readAfterSave(final PGJPAAnyObject anyObject) {",
                "+        super.json2list(anyObject, true);",
                "     }",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConfListener.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConfListener.java",
                "index f1a71985df..00ad5dbb17 100644",
                "--- a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConfListener.java",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConfListener.java",
                "@@ -23,2 +23,4 @@ import java.util.List;",
                " import javax.persistence.PostLoad;",
                "+import javax.persistence.PostPersist;",
                "+import javax.persistence.PostUpdate;",
                " import javax.persistence.PrePersist;",
                "@@ -40,3 +42,3 @@ public class PGJPAConfListener extends PGJPAEntityListener<Conf> {",
                "     public void read(final PGJPAConf conf) {",
                "-        super.read(conf);",
                "+        super.json2list(conf, false);",
                "     }",
                "@@ -46,3 +48,9 @@ public class PGJPAConfListener extends PGJPAEntityListener<Conf> {",
                "     public void save(final PGJPAConf conf) {",
                "-        super.save(conf);",
                "+        super.list2json(conf);",
                "+    }",
                "+",
                "+    @PostPersist",
                "+    @PostUpdate",
                "+    public void readAfterSave(final PGJPAConf conf) {",
                "+        super.json2list(conf, true);",
                "     }",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroup.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroup.java",
                "index 6207dfce99..6f65a433bf 100644",
                "--- a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroup.java",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroup.java",
                "@@ -77,5 +77,3 @@ public class PGJPAGroup extends JPAGroup implements PGJPAAny<Group>, Group {",
                "     public boolean remove(final GPlainAttr attr) {",
                "-        return plainAttrList.removeIf(pgattr",
                "-                -> pgattr.getSchemaKey().equals(attr.getSchema().getKey())",
                "-                && attr.getOwner().getKey().equals(getKey()));",
                "+        return plainAttrList.removeIf(pgattr -> pgattr.getSchemaKey().equals(attr.getSchema().getKey()));",
                "     }",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroupListener.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroupListener.java",
                "index b32f4712c2..f8e190f6d1 100644",
                "--- a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroupListener.java",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroupListener.java",
                "@@ -23,2 +23,4 @@ import java.util.List;",
                " import javax.persistence.PostLoad;",
                "+import javax.persistence.PostPersist;",
                "+import javax.persistence.PostUpdate;",
                " import javax.persistence.PrePersist;",
                "@@ -40,3 +42,3 @@ public class PGJPAGroupListener extends PGJPAEntityListener<Group> {",
                "     public void read(final PGJPAGroup group) {",
                "-        super.read(group);",
                "+        super.json2list(group, false);",
                "     }",
                "@@ -46,3 +48,9 @@ public class PGJPAGroupListener extends PGJPAEntityListener<Group> {",
                "     public void save(final PGJPAGroup group) {",
                "-        super.save(group);",
                "+        super.list2json(group);",
                "+    }",
                "+",
                "+    @PostPersist",
                "+    @PostUpdate",
                "+    public void readAfterSave(final PGJPAGroup group) {",
                "+        super.json2list(group, true);",
                "     }",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUser.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUser.java",
                "index 486ba1c2c9..b3c215d831 100644",
                "--- a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUser.java",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUser.java",
                "@@ -22,2 +22,4 @@ import java.util.ArrayList;",
                " import java.util.List;",
                "+import java.util.Objects;",
                "+import java.util.Optional;",
                " import javax.persistence.Column;",
                "@@ -28,2 +30,4 @@ import javax.persistence.Table;",
                " import javax.persistence.Transient;",
                "+import org.apache.syncope.core.persistence.api.entity.Membership;",
                "+import org.apache.syncope.core.persistence.api.entity.user.UMembership;",
                " import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;",
                "@@ -79,6 +83,3 @@ public class PGJPAUser extends JPAUser implements PGJPAAny<User>, User {",
                "                 -> pgattr.getSchemaKey().equals(attr.getSchema().getKey())",
                "-                && attr.getOwner().getKey().equals(getKey())",
                "-                && attr.getMembership() == null",
                "-                ? true",
                "-                : pgattr.getMembership() != null && pgattr.getMembershipKey().equals(attr.getMembership().getKey()));",
                "+                && Objects.equals(pgattr.getMembershipKey(), ((PGUPlainAttr) attr).getMembershipKey()));",
                "     }",
                "@@ -89,2 +90,25 @@ public class PGJPAUser extends JPAUser implements PGJPAAny<User>, User {",
                "     }",
                "+",
                "+    @Override",
                "+    public Optional<? extends UPlainAttr> getPlainAttr(final String plainSchema) {",
                "+        return plainAttrList.stream().",
                "+                filter(pgattr -> pgattr.getSchemaKey() != null && pgattr.getSchemaKey().equals(plainSchema)",
                "+                && pgattr.getMembershipKey() == null).",
                "+                findFirst();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Optional<? extends UPlainAttr> getPlainAttr(final String plainSchema, final Membership<?> membership) {",
                "+        return plainAttrList.stream().",
                "+                filter(pgattr -> pgattr.getSchemaKey() != null && pgattr.getSchemaKey().equals(plainSchema)",
                "+                && pgattr.getMembershipKey() != null && pgattr.getMembershipKey().equals(membership.getKey())).",
                "+                findFirst();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean remove(final UMembership membership) {",
                "+        plainAttrList.removeIf(pgattr",
                "+                -> pgattr.getMembershipKey() != null && pgattr.getMembershipKey().equals(membership.getKey()));",
                "+        return super.remove(membership);",
                "+    }",
                " }",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUserListener.java b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUserListener.java",
                "index 5baf4fcf2c..7ab5d32206 100644",
                "--- a/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUserListener.java",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUserListener.java",
                "@@ -23,2 +23,4 @@ import java.util.List;",
                " import javax.persistence.PostLoad;",
                "+import javax.persistence.PostPersist;",
                "+import javax.persistence.PostUpdate;",
                " import javax.persistence.PrePersist;",
                "@@ -40,3 +42,3 @@ public class PGJPAUserListener extends PGJPAEntityListener<User> {",
                "     public void read(final PGJPAUser user) {",
                "-        super.read(user);",
                "+        super.json2list(user, false);",
                "     }",
                "@@ -46,3 +48,9 @@ public class PGJPAUserListener extends PGJPAEntityListener<User> {",
                "     public void save(final PGJPAUser user) {",
                "-        super.save(user);",
                "+        super.list2json(user);",
                "+    }",
                "+",
                "+    @PostPersist",
                "+    @PostUpdate",
                "+    public void readAfterSave(final PGJPAUser user) {",
                "+        super.json2list(user, true);",
                "     }",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/resources/META-INF/spring-orm-pgjsonb.xml b/core/persistence-jpa-pgjsonb/src/main/resources/META-INF/spring-orm-pgjsonb.xml",
                "index 3e5b1030ba..0118765501 100644",
                "--- a/core/persistence-jpa-pgjsonb/src/main/resources/META-INF/spring-orm-pgjsonb.xml",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/resources/META-INF/spring-orm-pgjsonb.xml",
                "@@ -36,2 +36,66 @@ under the License.",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">",
                "+    <attributes>",
                "+      <many-to-one name=\"userOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.PGJPAUser\"/>",
                "+      <many-to-one name=\"groupOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension\">",
                "+    <attributes>",
                "+      <many-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.PGJPAUser\">",
                "+        <join-column name=\"user_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup\">",
                "+        <join-column name=\"group_id\"/>",
                "+      </many-to-one>        ",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership\">",
                "+    <attributes>",
                "+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.PGJPAUser\">",
                "+        <join-column name=\"user_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.PGJPAAnyObject\">",
                "+        <join-column name=\"anyObject_id\"/>",
                "+      </many-to-one>",
                "+    </attributes>",
                "+  </entity>",
                "+",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.PGJPAAnyObject\">",
                "+        <join-column name=\"anyObject_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup\">",
                "+        <join-column name=\"group_id\"/>",
                "+      </many-to-one>",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership\">",
                "+    <attributes>",
                "+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.PGJPAAnyObject\">",
                "+        <join-column name=\"left_anyObject_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.PGJPAAnyObject\">",
                "+        <join-column name=\"right_anyObject_id\"/>",
                "+      </many-to-one>",
                "+    </attributes>",
                "+  </entity>",
                " </entity-mappings>",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/resources/persistence.properties b/core/persistence-jpa-pgjsonb/src/main/resources/persistence.properties",
                "index c3196eb278..a2995270b3 100644",
                "--- a/core/persistence-jpa-pgjsonb/src/main/resources/persistence.properties",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/resources/persistence.properties",
                "@@ -25,2 +25,3 @@ group.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAGroupDAO",
                " anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAAnyObjectDAO",
                "+conf.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAConfDAO",
                " openjpa.RemoteCommitProvider=sjvm",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "index 0dbc686445..e09ff638ad 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "@@ -28,3 +28,2 @@ import java.util.Set;",
                " import java.util.stream.Collectors;",
                "-import javax.persistence.Entity;",
                " import javax.validation.ValidationException;",
                "@@ -58,2 +57,3 @@ import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                " import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;",
                "+import org.apache.syncope.core.persistence.api.entity.Entity;",
                " import org.apache.syncope.core.persistence.api.entity.EntityFactory;",
                "@@ -147,3 +147,3 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "     protected Pair<PlainSchema, PlainAttrValue> check(final AttributeCond cond, final AnyTypeKind kind) {",
                "-        AnyUtils attrUtils = anyUtilsFactory.getInstance(kind);",
                "+        AnyUtils anyUtils = anyUtilsFactory.getInstance(kind);",
                "@@ -155,3 +155,5 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "-        PlainAttrValue attrValue = attrUtils.newPlainAttrValue();",
                "+        PlainAttrValue attrValue = schema.isUniqueConstraint()",
                "+                ? anyUtils.newPlainAttrUniqueValue()",
                "+                : anyUtils.newPlainAttrValue();",
                "         try {",
                "@@ -214,3 +216,3 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "         // Deal with any fields representing relationships to other entities",
                "-        if (anyField.getType().getAnnotation(Entity.class) != null) {",
                "+        if (Entity.class.isAssignableFrom(anyField.getType())) {",
                "             Method relMethod = null;",
                "@@ -312,3 +314,3 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "                 : ((String) anyKey)).",
                "-                forEachOrdered((actualKey) -> {",
                "+                forEachOrdered(actualKey -> {",
                "                     @SuppressWarnings(\"unchecked\")",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java",
                "index ed065fe993..2bdb045d23 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java",
                "@@ -28,6 +28,4 @@ import org.apache.syncope.core.persistence.api.entity.conf.Conf;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.springframework.stereotype.Repository;",
                " import org.springframework.transaction.annotation.Transactional;",
                "-@Repository",
                " public class JPAConfDAO extends AbstractDAO<Conf> implements ConfDAO {",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java",
                "index 33bf9f7cb2..e86905ffbb 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java",
                "@@ -364,2 +364,5 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {",
                "         } catch (Exception e) {",
                "+            if (e instanceof InvalidEntityException) {",
                "+                throw (InvalidEntityException) e;",
                "+            }",
                "             LOG.error(\"Invalid username for {}\", user, e);",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAADynGroupMembership.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAADynGroupMembership.java",
                "index b1d55ff8a8..91fc4cb49b 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAADynGroupMembership.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAADynGroupMembership.java",
                "@@ -22,3 +22,2 @@ import javax.persistence.Entity;",
                " import javax.persistence.ManyToOne;",
                "-import javax.persistence.OneToOne;",
                " import javax.persistence.Table;",
                "@@ -40,4 +39,3 @@ public class JPAADynGroupMembership extends AbstractDynMembership<AnyObject> imp",
                "-    @OneToOne",
                "-    private JPAGroup group;",
                "+    private Group group;",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAMembership.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAMembership.java",
                "index 1561dae2f7..24992db567 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAMembership.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAMembership.java",
                "@@ -20,5 +20,3 @@ package org.apache.syncope.core.persistence.jpa.entity.anyobject;",
                "-import javax.persistence.Column;",
                " import javax.persistence.Entity;",
                "-import javax.persistence.ManyToOne;",
                " import javax.persistence.Table;",
                "@@ -40,9 +38,5 @@ public class JPAAMembership extends AbstractGeneratedKeyEntity implements AMembe",
                "-    @ManyToOne",
                "-    @Column(name = \"anyObject_id\")",
                "-    private JPAAnyObject leftEnd;",
                "+    private AnyObject leftEnd;",
                "-    @ManyToOne",
                "-    @Column(name = \"group_id\")",
                "-    private JPAGroup rightEnd;",
                "+    private Group rightEnd;",
                "@@ -70,3 +64,3 @@ public class JPAAMembership extends AbstractGeneratedKeyEntity implements AMembe",
                "     @Override",
                "-    public JPAGroup getRightEnd() {",
                "+    public Group getRightEnd() {",
                "         return rightEnd;",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAARelationship.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAARelationship.java",
                "index b488538e6e..c926a60af8 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAARelationship.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAARelationship.java",
                "@@ -20,3 +20,2 @@ package org.apache.syncope.core.persistence.jpa.entity.anyobject;",
                "-import javax.persistence.Column;",
                " import javax.persistence.Entity;",
                "@@ -45,9 +44,5 @@ public class JPAARelationship extends AbstractGeneratedKeyEntity implements ARel",
                "-    @ManyToOne",
                "-    @Column(name = \"left_anyObject_id\")",
                "-    private JPAAnyObject leftEnd;",
                "+    private AnyObject leftEnd;",
                "-    @ManyToOne",
                "-    @Column(name = \"right_anyObject_id\")",
                "-    private JPAAnyObject rightEnd;",
                "+    private AnyObject rightEnd;",
                "@@ -88,3 +83,2 @@ public class JPAARelationship extends AbstractGeneratedKeyEntity implements ARel",
                "     }",
                "-",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java",
                "index d10cb9a5b5..7c6724ab96 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java",
                "@@ -31,3 +31,2 @@ import javax.persistence.JoinTable;",
                " import javax.persistence.ManyToMany;",
                "-import javax.persistence.ManyToOne;",
                " import javax.persistence.OneToMany;",
                "@@ -70,7 +69,5 @@ public class JPAGroup extends AbstractAny<GPlainAttr> implements Group {",
                "-    @ManyToOne",
                "-    private JPAUser userOwner;",
                "+    protected User userOwner;",
                "-    @ManyToOne",
                "-    private JPAGroup groupOwner;",
                "+    protected Group groupOwner;",
                "@@ -147,3 +144,3 @@ public class JPAGroup extends AbstractAny<GPlainAttr> implements Group {",
                "     @Override",
                "-    public JPAGroup getGroupOwner() {",
                "+    public Group getGroupOwner() {",
                "         return groupOwner;",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPATypeExtension.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPATypeExtension.java",
                "index 9ddf68a7ae..648436e068 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPATypeExtension.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPATypeExtension.java",
                "@@ -47,4 +47,3 @@ public class JPATypeExtension extends AbstractGeneratedKeyEntity implements Type",
                "-    @ManyToOne",
                "-    private JPAGroup group;",
                "+    private Group group;",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUDynGroupMembership.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUDynGroupMembership.java",
                "index 875b572888..5e3a728793 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUDynGroupMembership.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUDynGroupMembership.java",
                "@@ -21,3 +21,2 @@ package org.apache.syncope.core.persistence.jpa.entity.user;",
                " import javax.persistence.Entity;",
                "-import javax.persistence.OneToOne;",
                " import javax.persistence.Table;",
                "@@ -37,4 +36,3 @@ public class JPAUDynGroupMembership extends AbstractDynMembership<User> implemen",
                "-    @OneToOne",
                "-    private JPAGroup group;",
                "+    private Group group;",
                "@@ -46,7 +44,6 @@ public class JPAUDynGroupMembership extends AbstractDynMembership<User> implemen",
                "     @Override",
                "-    public void setGroup(final Group role) {",
                "-        checkType(role, JPAGroup.class);",
                "-        this.group = (JPAGroup) role;",
                "+    public void setGroup(final Group group) {",
                "+        checkType(group, JPAGroup.class);",
                "+        this.group = (JPAGroup) group;",
                "     }",
                "-",
                " }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUMembership.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUMembership.java",
                "index 866537ed9f..a9d39e9d6f 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUMembership.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUMembership.java",
                "@@ -20,5 +20,3 @@ package org.apache.syncope.core.persistence.jpa.entity.user;",
                "-import javax.persistence.Column;",
                " import javax.persistence.Entity;",
                "-import javax.persistence.ManyToOne;",
                " import javax.persistence.Table;",
                "@@ -40,9 +38,5 @@ public class JPAUMembership extends AbstractGeneratedKeyEntity implements UMembe",
                "-    @ManyToOne",
                "-    @Column(name = \"user_id\")",
                "-    private JPAUser leftEnd;",
                "+    private User leftEnd;",
                "-    @ManyToOne",
                "-    @Column(name = \"group_id\")",
                "-    private JPAGroup rightEnd;",
                "+    private Group rightEnd;",
                "@@ -59,3 +53,3 @@ public class JPAUMembership extends AbstractGeneratedKeyEntity implements UMembe",
                "     @Override",
                "-    public JPAUser getLeftEnd() {",
                "+    public User getLeftEnd() {",
                "         return leftEnd;",
                "@@ -70,3 +64,3 @@ public class JPAUMembership extends AbstractGeneratedKeyEntity implements UMembe",
                "     @Override",
                "-    public JPAGroup getRightEnd() {",
                "+    public Group getRightEnd() {",
                "         return rightEnd;",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAURelationship.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAURelationship.java",
                "index 931b4e64e2..38c5c7347a 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAURelationship.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAURelationship.java",
                "@@ -20,3 +20,2 @@ package org.apache.syncope.core.persistence.jpa.entity.user;",
                "-import javax.persistence.Column;",
                " import javax.persistence.Entity;",
                "@@ -47,9 +46,5 @@ public class JPAURelationship extends AbstractGeneratedKeyEntity implements URel",
                "-    @ManyToOne",
                "-    @Column(name = \"user_id\")",
                "-    private JPAUser leftEnd;",
                "+    private User leftEnd;",
                "-    @ManyToOne",
                "-    @Column(name = \"anyObject_id\")",
                "-    private JPAAnyObject rightEnd;",
                "+    private AnyObject rightEnd;",
                "@@ -70,3 +65,3 @@ public class JPAURelationship extends AbstractGeneratedKeyEntity implements URel",
                "     @Override",
                "-    public JPAUser getLeftEnd() {",
                "+    public User getLeftEnd() {",
                "         return leftEnd;",
                "@@ -90,3 +85,2 @@ public class JPAURelationship extends AbstractGeneratedKeyEntity implements URel",
                "     }",
                "-",
                " }",
                "diff --git a/core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml b/core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml",
                "index 0ac2579e23..bfdc77a53f 100644",
                "--- a/core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml",
                "+++ b/core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml",
                "@@ -35,2 +35,67 @@ under the License.",
                "   </persistence-unit-metadata>",
                "+",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">",
                "+    <attributes>",
                "+      <many-to-one name=\"userOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\"/>",
                "+      <many-to-one name=\"groupOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension\">",
                "+    <attributes>",
                "+      <many-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">",
                "+        <join-column name=\"user_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">",
                "+        <join-column name=\"group_id\"/>",
                "+      </many-to-one>        ",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership\">",
                "+    <attributes>",
                "+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">",
                "+        <join-column name=\"user_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">",
                "+        <join-column name=\"anyObject_id\"/>",
                "+      </many-to-one>",
                "+    </attributes>",
                "+  </entity>",
                "+",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">",
                "+        <join-column name=\"anyObject_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">",
                "+        <join-column name=\"group_id\"/>",
                "+      </many-to-one>",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership\">",
                "+    <attributes>",
                "+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">",
                "+        <join-column name=\"left_anyObject_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">",
                "+        <join-column name=\"right_anyObject_id\"/>",
                "+      </many-to-one>",
                "+    </attributes>",
                "+  </entity>",
                "diff --git a/core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml b/core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml",
                "index 8c52f2e612..5880423f38 100644",
                "--- a/core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml",
                "+++ b/core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml",
                "@@ -36,2 +36,67 @@ under the License.",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">",
                "+    <attributes>",
                "+      <many-to-one name=\"userOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\"/>",
                "+      <many-to-one name=\"groupOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension\">",
                "+    <attributes>",
                "+      <many-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">",
                "+        <join-column name=\"user_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">",
                "+        <join-column name=\"group_id\"/>",
                "+      </many-to-one>        ",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership\">",
                "+    <attributes>",
                "+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">",
                "+        <join-column name=\"user_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">",
                "+        <join-column name=\"anyObject_id\"/>",
                "+      </many-to-one>",
                "+    </attributes>",
                "+  </entity>",
                "+",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">",
                "+        <join-column name=\"anyObject_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">",
                "+        <join-column name=\"group_id\"/>",
                "+      </many-to-one>",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership\">",
                "+    <attributes>",
                "+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">",
                "+        <join-column name=\"left_anyObject_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">",
                "+        <join-column name=\"right_anyObject_id\"/>",
                "+      </many-to-one>",
                "+    </attributes>",
                "+  </entity>",
                "+",
                "   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue\">",
                "diff --git a/core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml b/core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml",
                "index aaf42b3a50..c477773580 100644",
                "--- a/core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml",
                "+++ b/core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml",
                "@@ -36,2 +36,67 @@ under the License.",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">",
                "+    <attributes>",
                "+      <many-to-one name=\"userOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\"/>",
                "+      <many-to-one name=\"groupOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension\">",
                "+    <attributes>",
                "+      <many-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">",
                "+        <join-column name=\"user_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">",
                "+        <join-column name=\"group_id\"/>",
                "+      </many-to-one>        ",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership\">",
                "+    <attributes>",
                "+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">",
                "+        <join-column name=\"user_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">",
                "+        <join-column name=\"anyObject_id\"/>",
                "+      </many-to-one>",
                "+    </attributes>",
                "+  </entity>",
                "+",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">",
                "+        <join-column name=\"anyObject_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">",
                "+        <join-column name=\"group_id\"/>",
                "+      </many-to-one>",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership\">",
                "+    <attributes>",
                "+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>",
                "+    </attributes>",
                "+  </entity>",
                "+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship\">",
                "+    <attributes>",
                "+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">",
                "+        <join-column name=\"left_anyObject_id\"/>",
                "+      </many-to-one>",
                "+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">",
                "+        <join-column name=\"right_anyObject_id\"/>",
                "+      </many-to-one>",
                "+    </attributes>",
                "+  </entity>",
                "+",
                "   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue\">",
                "diff --git a/core/persistence-jpa/src/main/resources/persistence.properties b/core/persistence-jpa/src/main/resources/persistence.properties",
                "index 0841aa0de0..1ce4a2b4f3 100644",
                "--- a/core/persistence-jpa/src/main/resources/persistence.properties",
                "+++ b/core/persistence-jpa/src/main/resources/persistence.properties",
                "@@ -25,2 +25,3 @@ group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO",
                " anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO",
                "+conf.dao=org.apache.syncope.core.persistence.jpa.dao.JPAConfDAO",
                " openjpa.RemoteCommitProvider=sjvm",
                "diff --git a/core/persistence-jpa/src/main/resources/persistenceContext.xml b/core/persistence-jpa/src/main/resources/persistenceContext.xml",
                "index c7c54c2336..577ab7853f 100644",
                "--- a/core/persistence-jpa/src/main/resources/persistenceContext.xml",
                "+++ b/core/persistence-jpa/src/main/resources/persistenceContext.xml",
                "@@ -40,2 +40,3 @@ under the License.",
                "   <bean class=\"${anyObject.dao}\"/>",
                "+  <bean class=\"${conf.dao}\"/>",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "index f772503e29..e4ec82fa99 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "@@ -470,2 +470,4 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An",
                "+        // Re-merge any pending change from above",
                "+        anyObjectDAO.save(anyObject);",
                "         return propByRes;",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java",
                "index f207ae6595..fbe700d0f0 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java",
                "@@ -88,3 +88,3 @@ public class ConfigurationDataBinderImpl extends AbstractAnyDataBinder implement",
                "-        for (String value : valuesProvided) {",
                "+        valuesProvided.forEach(value -> {",
                "             if (value == null || value.isEmpty()) {",
                "@@ -108,3 +108,3 @@ public class ConfigurationDataBinderImpl extends AbstractAnyDataBinder implement",
                "             }",
                "-        }",
                "+        });",
                "     }",
                "@@ -129,3 +129,2 @@ public class ConfigurationDataBinderImpl extends AbstractAnyDataBinder implement",
                "     }",
                "-",
                " }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java",
                "index e2ec7ee49a..f18470a1b8 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java",
                "@@ -307,2 +307,4 @@ public class GroupDataBinderImpl extends AbstractAnyDataBinder implements GroupD",
                "+        // Re-merge any pending change from above",
                "+        groupDAO.save(group);",
                "         return propByRes;",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "index 055f7aa7c3..3ff0f2eaae 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "@@ -556,2 +556,4 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat",
                "+        // Re-merge any pending change from above",
                "+        userDAO.save(user);",
                "         return propByRes;",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java",
                "index b2eaebba3a..fc3c9e94b1 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java",
                "@@ -40,3 +40,5 @@ import org.apache.commons.jexl3.MapContext;",
                " import org.apache.commons.lang3.ArrayUtils;",
                "+import org.apache.commons.lang3.ClassUtils;",
                " import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.commons.lang3.tuple.Pair;",
                " import org.apache.syncope.common.lib.to.AnyTO;",
                "@@ -63,5 +65,5 @@ public final class JexlUtils {",
                "-    private static final Map<Class<?>, Set<PropertyDescriptor>> FIELD_CACHE =",
                "-            Collections.<Class<?>, Set<PropertyDescriptor>>synchronizedMap(",
                "-                    new HashMap<Class<?>, Set<PropertyDescriptor>>());",
                "+    private static final Map<Class<?>, Set<Pair<PropertyDescriptor, Field>>> FIELD_CACHE =",
                "+            Collections.<Class<?>, Set<Pair<PropertyDescriptor, Field>>>synchronizedMap(",
                "+                    new HashMap<Class<?>, Set<Pair<PropertyDescriptor, Field>>>());",
                "@@ -124,34 +126,48 @@ public final class JexlUtils {",
                "     public static void addFieldsToContext(final Object object, final JexlContext jexlContext) {",
                "-        Set<PropertyDescriptor> cached = FIELD_CACHE.get(object.getClass());",
                "+        Set<Pair<PropertyDescriptor, Field>> cached = FIELD_CACHE.get(object.getClass());",
                "         if (cached == null) {",
                "-            cached = new HashSet<>();",
                "-            FIELD_CACHE.put(object.getClass(), cached);",
                "-",
                "-            try {",
                "-                for (PropertyDescriptor desc : Introspector.getBeanInfo(object.getClass()).getPropertyDescriptors()) {",
                "-                    if ((!desc.getName().startsWith(\"pc\"))",
                "-                            && (!ArrayUtils.contains(IGNORE_FIELDS, desc.getName()))",
                "-                            && (!Iterable.class.isAssignableFrom(desc.getPropertyType()))",
                "-                            && (!desc.getPropertyType().isArray())) {",
                "-",
                "-                        cached.add(desc);",
                "+            FIELD_CACHE.put(object.getClass(), new HashSet<>());",
                "+",
                "+            List<Class<?>> classes = ClassUtils.getAllSuperclasses(object.getClass());",
                "+            classes.add(object.getClass());",
                "+            classes.forEach(clazz -> {",
                "+                try {",
                "+                    for (PropertyDescriptor desc : Introspector.getBeanInfo(clazz).getPropertyDescriptors()) {",
                "+                        if (!desc.getName().startsWith(\"pc\")",
                "+                                && !ArrayUtils.contains(IGNORE_FIELDS, desc.getName())",
                "+                                && !Collection.class.isAssignableFrom(desc.getPropertyType())",
                "+                                && !Map.class.isAssignableFrom(desc.getPropertyType())",
                "+                                && !desc.getPropertyType().isArray()) {",
                "+",
                "+                            Field field = null;",
                "+                            try {",
                "+                                field = clazz.getDeclaredField(desc.getName());",
                "+                            } catch (NoSuchFieldException | SecurityException e) {",
                "+                                LOG.debug(\"Could not get field {} from {}\", desc.getName(), clazz.getName(), e);",
                "+                            }",
                "+",
                "+                            FIELD_CACHE.get(object.getClass()).add(Pair.of(desc, field));",
                "+                        }",
                "                     }",
                "+                } catch (IntrospectionException e) {",
                "+                    LOG.warn(\"Could not introspect {}\", clazz.getName(), e);",
                "                 }",
                "-            } catch (IntrospectionException ie) {",
                "-                LOG.error(\"Reading class attributes error\", ie);",
                "-            }",
                "+            });",
                "+",
                "+            cached = FIELD_CACHE.get(object.getClass());",
                "         }",
                "-        for (PropertyDescriptor desc : cached) {",
                "-            String fieldName = desc.getName();",
                "-            Class<?> fieldType = desc.getPropertyType();",
                "+        cached.forEach(fd -> {",
                "+            String fieldName = fd.getLeft().getName();",
                "+            Class<?> fieldType = fd.getLeft().getPropertyType();",
                "             try {",
                "-                Object fieldValue;",
                "-                if (desc.getReadMethod() == null) {",
                "-                    final Field field = object.getClass().getDeclaredField(fieldName);",
                "-                    field.setAccessible(true);",
                "-                    fieldValue = field.get(object);",
                "+                Object fieldValue = null;",
                "+                if (fd.getLeft().getReadMethod() == null) {",
                "+                    if (fd.getRight() != null) {",
                "+                        fd.getRight().setAccessible(true);",
                "+                        fieldValue = fd.getRight().get(object);",
                "+                    }",
                "                 } else {",
                "-                    fieldValue = desc.getReadMethod().invoke(object);",
                "+                    fieldValue = fd.getLeft().getReadMethod().invoke(object);",
                "                 }",
                "@@ -169,3 +185,3 @@ public final class JexlUtils {",
                "             }",
                "-        }",
                "+        });",
                "@@ -183,13 +199,11 @@ public final class JexlUtils {",
                "     public static void addAttrTOsToContext(final Collection<AttrTO> attrs, final JexlContext jexlContext) {",
                "-        for (AttrTO attr : attrs) {",
                "-            if (attr.getSchema() != null) {",
                "-                String expressionValue = attr.getValues().isEmpty()",
                "-                        ? StringUtils.EMPTY",
                "-                        : attr.getValues().get(0);",
                "+        attrs.stream().filter(attr -> attr.getSchema() != null).forEach(attr -> {",
                "+            String expressionValue = attr.getValues().isEmpty()",
                "+                    ? StringUtils.EMPTY",
                "+                    : attr.getValues().get(0);",
                "-                LOG.debug(\"Add attribute {} with value {}\", attr.getSchema(), expressionValue);",
                "+            LOG.debug(\"Add attribute {} with value {}\", attr.getSchema(), expressionValue);",
                "-                jexlContext.set(attr.getSchema(), expressionValue);",
                "-            }",
                "-        }",
                "+            jexlContext.set(attr.getSchema(), expressionValue);",
                "+        });",
                "     }",
                "@@ -199,3 +213,3 @@ public final class JexlUtils {",
                "-        attrs.stream().filter(attr -> attr.getSchema() != null).forEachOrdered((attr) -> {",
                "+        attrs.stream().filter(attr -> attr.getSchema() != null).forEach(attr -> {",
                "             List<String> attrValues = attr.getValuesAsStrings();",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java",
                "index db834e3fdc..acf5c3bebe 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java",
                "@@ -26,2 +26,3 @@ import java.util.Map;",
                " import java.util.Set;",
                "+import java.util.stream.Collectors;",
                " import javax.persistence.EntityExistsException;",
                "@@ -77,2 +78,4 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception> {",
                "+    private static final String UNIQUE_MSG_KEY = \"UniqueConstraintViolation\";",
                "+",
                "     private static final Map<String, String> EXCEPTION_CODE_MAP = new HashMap<String, String>() {",
                "@@ -82,4 +85,4 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception> {",
                "         {",
                "-            put(\"23000\", \"UniqueConstraintViolation\");",
                "-            put(\"23505\", \"UniqueConstraintViolation\");",
                "+            put(\"23000\", UNIQUE_MSG_KEY);",
                "+            put(\"23505\", UNIQUE_MSG_KEY);",
                "         }",
                "@@ -109,5 +112,5 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception> {",
                "             builder = builder(ClientExceptionType.EntityExists,",
                "-                    getJPAMessage(ex instanceof PersistenceException ? ex.getCause() : ex));",
                "+                    getPersistenceErrorMessage(ex instanceof PersistenceException ? ex.getCause() : ex));",
                "         } else if (ex instanceof DataIntegrityViolationException || ex instanceof JpaSystemException) {",
                "-            builder = builder(ClientExceptionType.DataIntegrityViolation, getJPAMessage(ex));",
                "+            builder = builder(ClientExceptionType.DataIntegrityViolation, getPersistenceErrorMessage(ex));",
                "         } else if (ex instanceof ConnectorException) {",
                "@@ -161,6 +164,6 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception> {",
                "-        for (String element : ex.getElements()) {",
                "+        ex.getElements().forEach(element -> {",
                "             builder.header(RESTHeaders.ERROR_INFO, ex.getType().getInfoHeaderValue(element));",
                "             error.getElements().add(element);",
                "-        }",
                "+        });",
                "@@ -177,3 +180,3 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception> {",
                "         List<ErrorTO> errors = new ArrayList<>();",
                "-        for (SyncopeClientException sce : ex.getExceptions()) {",
                "+        ex.getExceptions().stream().map(sce -> {",
                "             builder.header(RESTHeaders.ERROR_CODE, sce.getType().name());",
                "@@ -184,9 +187,9 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception> {",
                "-            for (String element : sce.getElements()) {",
                "+            sce.getElements().forEach(element -> {",
                "                 builder.header(RESTHeaders.ERROR_INFO, sce.getType().getInfoHeaderValue(element));",
                "                 error.getElements().add(element);",
                "-            }",
                "+            });",
                "-            errors.add(error);",
                "-        }",
                "+            return error;",
                "+        }).collect(Collectors.toList());",
                "@@ -294,9 +297,9 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception> {",
                "         builder.entity(response.getEntity());",
                "-        for (Map.Entry<String, List<Object>> entry : response.getMetadata().entrySet()) {",
                "-            if (!HttpHeaders.CONTENT_TYPE.equals(entry.getKey())) {",
                "-                for (Object value : entry.getValue()) {",
                "-                    builder.header(entry.getKey(), value);",
                "-                }",
                "+        response.getMetadata().forEach((key, value) -> {",
                "+            if (!HttpHeaders.CONTENT_TYPE.equals(key)) {",
                "+                value.forEach(headerValue -> {",
                "+                    builder.header(key, headerValue);",
                "+                });",
                "             }",
                "-        }",
                "+        });",
                "@@ -305,4 +308,5 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception> {",
                "-    private String getJPAMessage(final Throwable ex) {",
                "+    private String getPersistenceErrorMessage(final Throwable ex) {",
                "         Throwable throwable = ExceptionUtils.getRootCause(ex);",
                "+",
                "         String message = null;",
                "@@ -313,2 +317,4 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception> {",
                "             }",
                "+        } else if (throwable instanceof EntityExistsException || throwable instanceof DuplicateException) {",
                "+            message = env.getProperty(\"errMessage.\" + UNIQUE_MSG_KEY);",
                "         }",
                "diff --git a/docker/core/src/main/resources/persistence.properties b/docker/core/src/main/resources/persistence.properties",
                "index b656eb28f0..b4e2c81ec9 100644",
                "--- a/docker/core/src/main/resources/persistence.properties",
                "+++ b/docker/core/src/main/resources/persistence.properties",
                "@@ -25,2 +25,3 @@ group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO",
                " anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO",
                "+conf.dao=org.apache.syncope.core.persistence.jpa.dao.JPAConfDAO",
                " openjpa.RemoteCommitProvider=${OPENJPA_REMOTE_COMMIT}",
                "diff --git a/docker/src/main/resources/docker-compose/docker-compose-ha.yml b/docker/src/main/resources/docker-compose/docker-compose-ha.yml",
                "index 0eb26f55c1..8f9aa0c3c0 100644",
                "--- a/docker/src/main/resources/docker-compose/docker-compose-ha.yml",
                "+++ b/docker/src/main/resources/docker-compose/docker-compose-ha.yml",
                "@@ -24,14 +24,8 @@ services:",
                "    db:",
                "-     image: crunchydata/crunchy-postgres:centos7-10.3-1.8.2",
                "+     image: postgres:latest",
                "      restart: always",
                "      environment:",
                "-       PG_ROOT_PASSWORD: postgres",
                "-       PG_MODE: primary",
                "-       PG_PRIMARY_USER: postgres",
                "-       PG_PRIMARY_PASSWORD: postgres",
                "-       PG_PRIMARY_HOST: localhost",
                "-       PG_PRIMARY_PORT: 5432",
                "-       PG_DATABASE: syncope",
                "-       PG_USER: syncope",
                "-       PG_PASSWORD: syncope",
                "+       POSTGRES_DB: syncope",
                "+       POSTGRES_USER: syncope",
                "+       POSTGRES_PASSWORD: syncope",
                "diff --git a/docker/src/main/resources/docker-compose/docker-compose-postgresql.yml b/docker/src/main/resources/docker-compose/docker-compose-postgresql.yml",
                "index 0c42ede971..9eb7ba7a5e 100644",
                "--- a/docker/src/main/resources/docker-compose/docker-compose-postgresql.yml",
                "+++ b/docker/src/main/resources/docker-compose/docker-compose-postgresql.yml",
                "@@ -23,14 +23,8 @@ services:",
                "    db:",
                "-     image: crunchydata/crunchy-postgres:centos7-10.5-2.1.0",
                "+     image: postgres:latest",
                "      restart: always",
                "      environment:",
                "-       PG_ROOT_PASSWORD: postgres",
                "-       PG_MODE: primary",
                "-       PG_PRIMARY_USER: postgres",
                "-       PG_PRIMARY_PASSWORD: postgres",
                "-       PG_PRIMARY_HOST: localhost",
                "-       PG_PRIMARY_PORT: 5432",
                "-       PG_DATABASE: syncope",
                "-       PG_USER: syncope",
                "-       PG_PASSWORD: syncope",
                "+       POSTGRES_DB: syncope",
                "+       POSTGRES_USER: syncope",
                "+       POSTGRES_PASSWORD: syncope",
                "diff --git a/ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties b/ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties",
                "index 194c758426..dd4b730829 100644",
                "--- a/ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties",
                "+++ b/ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties",
                "@@ -25,2 +25,3 @@ group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO",
                " anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO",
                "+conf.dao=org.apache.syncope.core.persistence.jpa.dao.JPAConfDAO",
                " openjpa.RemoteCommitProvider=sjvm",
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index f9d4daa09b..b7399f1be5 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -592,2 +592,153 @@ under the License.",
                "+    <profile>",
                "+      <id>pgjsonb-it</id>",
                "+",
                "+      <properties>",
                "+        <jdbcdriver.groupId>org.postgresql</jdbcdriver.groupId>",
                "+        <jdbcdriver.artifactId>postgresql</jdbcdriver.artifactId>",
                "+      </properties>",
                "+",
                "+      <dependencies>",
                "+        <dependency>",
                "+          <groupId>org.apache.syncope.core</groupId>",
                "+          <artifactId>syncope-core-persistence-jpa-pgjsonb</artifactId>",
                "+          <version>${project.version}</version>",
                "+        </dependency>",
                "+    ",
                "+        <dependency>",
                "+          <groupId>org.postgresql</groupId>",
                "+          <artifactId>postgresql</artifactId>",
                "+          <version>${jdbc.postgresql.version}</version>",
                "+          <scope>test</scope>",
                "+        </dependency>",
                "+      </dependencies>",
                "+",
                "+      <build>",
                "+        <defaultGoal>clean verify</defaultGoal>",
                "+",
                "+        <plugins>",
                "+          <plugin>",
                "+            <groupId>org.apache.maven.plugins</groupId>",
                "+            <artifactId>maven-war-plugin</artifactId>",
                "+            <configuration>",
                "+              <packagingExcludes>WEB-INF/classes/domains/Two*</packagingExcludes>",
                "+            </configuration>",
                "+          </plugin>",
                "+",
                "+          <plugin>",
                "+            <groupId>org.apache.maven.plugins</groupId>",
                "+            <artifactId>maven-antrun-plugin</artifactId>",
                "+            <inherited>true</inherited>",
                "+            <executions>",
                "+              <execution>",
                "+                <id>remove-domain-Two</id>",
                "+                <phase>prepare-package</phase>",
                "+                <configuration>",
                "+                  <target>",
                "+                    <delete>",
                "+                      <fileset dir=\"${project.build.directory}/classes/domains\" includes=\"Two*\"/>",
                "+                    </delete>",
                "+                  </target>",
                "+                </configuration>",
                "+                <goals>",
                "+                  <goal>run</goal>",
                "+                </goals>",
                "+              </execution>",
                "+            </executions>",
                "+          </plugin>",
                "+",
                "+          <plugin>",
                "+            <groupId>io.fabric8</groupId>",
                "+            <artifactId>docker-maven-plugin</artifactId>",
                "+            <configuration>",
                "+              <images>",
                "+                <image>",
                "+                  <name>postgres:${docker.postgresql.version}</name>",
                "+                  <run>",
                "+                    <env>",
                "+                      <POSTGRES_DB>syncope</POSTGRES_DB>",
                "+                      <POSTGRES_USER>syncope</POSTGRES_USER>",
                "+                      <POSTGRES_PASSWORD>syncope</POSTGRES_PASSWORD>",
                "+                    </env>",
                "+                    <ports>",
                "+                      <port>5432:5432</port>",
                "+                    </ports>",
                "+                  </run>",
                "+                </image>",
                "+              </images>",
                "+            </configuration>",
                "+            <executions>",
                "+              <execution>",
                "+                <id>start-postgres</id>",
                "+                <phase>pre-integration-test</phase>",
                "+                <goals>",
                "+                  <goal>start</goal>",
                "+                </goals>",
                "+              </execution>",
                "+              <execution>",
                "+                <id>stop-postgres</id>",
                "+                <phase>post-integration-test</phase>",
                "+                <goals>",
                "+                  <goal>stop</goal>",
                "+                  <goal>remove</goal>",
                "+                </goals>",
                "+              </execution>",
                "+            </executions>",
                "+          </plugin>",
                "+",
                "+          <plugin>",
                "+            <groupId>org.codehaus.cargo</groupId>",
                "+            <artifactId>cargo-maven2-plugin</artifactId>",
                "+            <inherited>true</inherited>",
                "+            <executions>",
                "+              <execution>",
                "+                <id>start-container</id>",
                "+                <phase>pre-integration-test</phase>",
                "+                <goals>",
                "+                  <goal>start</goal>",
                "+                </goals>",
                "+              </execution>",
                "+              <execution>",
                "+                <id>stop-container</id>",
                "+                <phase>post-integration-test</phase>",
                "+                <goals>",
                "+                  <goal>stop</goal>",
                "+                </goals>",
                "+              </execution>",
                "+            </executions>",
                "+          </plugin>",
                "+        </plugins>",
                "+",
                "+        <resources>",
                "+          <resource>",
                "+            <directory>src/main/resources</directory>",
                "+            <filtering>true</filtering>",
                "+            <excludes>",
                "+              <exclude>provisioning.properties</exclude>",
                "+              <exclude>indexes.xml</exclude>",
                "+              <exclude>views.xml</exclude>",
                "+            </excludes>",
                "+          </resource>",
                "+          <resource>",
                "+            <directory>src/main/resources/pgjsonb</directory>",
                "+            <filtering>true</filtering>",
                "+          </resource>",
                "+          <resource>",
                "+            <directory>${basedir}/../../core/persistence-jpa-pgjsonb/src/test/resources/domains</directory>",
                "+            <targetPath>${project.build.directory}/classes/domains</targetPath>",
                "+            <filtering>true</filtering>",
                "+          </resource>",
                "+        </resources>",
                "+        <testResources>",
                "+          <testResource>",
                "+            <directory>src/main/resources/pgjsonb</directory>",
                "+            <includes>",
                "+              <include>indexes.xml</include>",
                "+              <include>views.xml</include>",
                "+            </includes>            ",
                "+          </testResource>",
                "+        </testResources>",
                "+      </build>",
                "+    </profile>",
                "+",
                "     <profile>",
                "@@ -619,14 +770,8 @@ under the License.",
                "                 <image>",
                "-                  <name>crunchydata/crunchy-postgres:centos7-10.5-2.1.0</name>",
                "+                  <name>postgres:${docker.postgresql.version}</name>",
                "                   <run>",
                "                     <env>",
                "-                      <PG_ROOT_PASSWORD>postgres</PG_ROOT_PASSWORD>",
                "-                      <PG_MODE>primary</PG_MODE>",
                "-                      <PG_PRIMARY_USER>postgres</PG_PRIMARY_USER>",
                "-                      <PG_PRIMARY_PASSWORD>postgres</PG_PRIMARY_PASSWORD>",
                "-                      <PG_PRIMARY_HOST>localhost</PG_PRIMARY_HOST>",
                "-                      <PG_PRIMARY_PORT>5432</PG_PRIMARY_PORT>",
                "-                      <PG_DATABASE>syncope</PG_DATABASE>",
                "-                      <PG_USER>syncope</PG_USER>",
                "-                      <PG_PASSWORD>syncope</PG_PASSWORD>",
                "+                      <POSTGRES_DB>syncope</POSTGRES_DB>",
                "+                      <POSTGRES_USER>syncope</POSTGRES_USER>",
                "+                      <POSTGRES_PASSWORD>syncope</POSTGRES_PASSWORD>",
                "                     </env>",
                "diff --git a/fit/core-reference/src/main/resources/elasticsearch/persistence.properties b/fit/core-reference/src/main/resources/elasticsearch/persistence.properties",
                "index 194c758426..dd4b730829 100644",
                "--- a/fit/core-reference/src/main/resources/elasticsearch/persistence.properties",
                "+++ b/fit/core-reference/src/main/resources/elasticsearch/persistence.properties",
                "@@ -25,2 +25,3 @@ group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO",
                " anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO",
                "+conf.dao=org.apache.syncope.core.persistence.jpa.dao.JPAConfDAO",
                " openjpa.RemoteCommitProvider=sjvm",
                "diff --git a/fit/core-reference/src/main/resources/pgjsonb/domains/Master.properties b/fit/core-reference/src/main/resources/pgjsonb/domains/Master.properties",
                "new file mode 100644",
                "index 0000000000..d9a648fb99",
                "--- /dev/null",
                "+++ b/fit/core-reference/src/main/resources/pgjsonb/domains/Master.properties",
                "@@ -0,0 +1,28 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+Master.driverClassName=org.postgresql.Driver",
                "+Master.url=jdbc:postgresql://localhost:5432/syncope?stringtype=unspecified",
                "+Master.schema=",
                "+Master.username=syncope",
                "+Master.password=syncope",
                "+Master.databasePlatform=org.apache.openjpa.jdbc.sql.PostgresDictionary",
                "+Master.orm=META-INF/spring-orm-pgjsonb.xml",
                "+",
                "+Master.pool.maxActive=10",
                "+Master.pool.minIdle=2",
                "+",
                "+Master.audit.sql=audit.sql",
                "diff --git a/fit/core-reference/src/main/resources/pgjsonb/indexes.xml b/fit/core-reference/src/main/resources/pgjsonb/indexes.xml",
                "new file mode 100644",
                "index 0000000000..3e5b92b832",
                "--- /dev/null",
                "+++ b/fit/core-reference/src/main/resources/pgjsonb/indexes.xml",
                "@@ -0,0 +1,63 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">",
                "+<properties>",
                "+  <comment>Additional indexes (in respect to JPA's)</comment>",
                "+",
                "+  <entry key=\"SyncopeUser_plainAttrs_idx\">CREATE INDEX SyncopeUser_plainAttrs_idx ON SyncopeUser USING gin ((plainAttrs) jsonb_path_ops)</entry>",
                "+  <entry key=\"SyncopeGroup_plainAttrs_idx\">CREATE INDEX SyncopeGroup_plainAttrs_idx ON SyncopeGroup USING gin ((plainAttrs) jsonb_path_ops)</entry>",
                "+  <entry key=\"AnyObject_plainAttrs_idx\">CREATE INDEX AnyObject_plainAttrs_idx ON AnyObject USING gin ((plainAttrs) jsonb_path_ops)</entry>",
                "+  <entry key=\"SyncopeConf_plainAttrs_idx\">CREATE INDEX SyncopeConf_plainAttrs_idx ON SyncopeConf USING gin ((plainAttrs) jsonb_path_ops)</entry>",
                "+",
                "+  <entry key=\"UDynGroupMembers_any_id\">CREATE INDEX UDynGroupMembers_any_id ON UDynGroupMembers(any_id)</entry>",
                "+  <entry key=\"UDynGroupMembers_group_id\">CREATE INDEX UDynGroupMembers_group_id ON UDynGroupMembers(group_id)</entry>",
                "+  <entry key=\"ADynGroupMembers_any_id\">CREATE INDEX ADynGroupMembers_any_id ON ADynGroupMembers(any_id)</entry>",
                "+  <entry key=\"ADynGroupMembers_group_id\">CREATE INDEX ADynGroupMembers_group_id ON ADynGroupMembers(group_id)</entry>",
                "+",
                "+  <entry key=\"DynRoleMembers_any_id\">CREATE INDEX DynRoleMembers_any_id ON DynRoleMembers(any_id)</entry>",
                "+  <entry key=\"DynRoleMembers_role_id\">CREATE INDEX DynRoleMembers_role_id ON DynRoleMembers(role_id)</entry>",
                "+",
                "+  <entry key=\"DynRealmMembers_any_id\">CREATE INDEX DynRealmMembers_any_id ON DynRealmMembers(any_id)</entry>",
                "+  <entry key=\"DynRealmMembers_realm_id\">CREATE INDEX DynRealmMembers_dynRealm_id ON DynRealmMembers(dynRealm_id)</entry>",
                "+",
                "+  <entry key=\"CPlainAttrValue_stringvalueIndex\">CREATE INDEX CAttrValue_stringvalueIndex ON CPlainAttrValue(stringvalue)</entry>",
                "+  <entry key=\"CPlainAttrValue_datevalueIndex\">CREATE INDEX CAttrValue_datevalueIndex ON CPlainAttrValue(datevalue)</entry>",
                "+  <entry key=\"CPlainAttrValue_longvalueIndex\">CREATE INDEX CAttrValue_longvalueIndex ON CPlainAttrValue(longvalue)</entry>",
                "+  <entry key=\"CPlainAttrValue_doublevalueIndex\">CREATE INDEX CAttrValue_doublevalueIndex ON CPlainAttrValue(doublevalue)</entry>",
                "+  <entry key=\"CPlainAttrValue_booleanvalueIndex\">CREATE INDEX CAttrValue_booleanvalueIndex ON CPlainAttrValue(booleanvalue)</entry>",
                "+",
                "+  <entry key=\"UMembership_GroupIndex\">CREATE INDEX UMembership_GroupIndex ON UMembership(group_id)</entry>",
                "+  <entry key=\"UMembership_UserIndex\">CREATE INDEX UMembership_UserIndex ON UMembership(user_id)</entry>",
                "+  <entry key=\"AMembership_GroupIndex\">CREATE INDEX AMembership_GroupIndex ON AMembership(group_id)</entry>",
                "+  <entry key=\"AMembership_AnyObjectIndex\">CREATE INDEX AMembership_AnyObjectIndex ON AMembership(anyObject_id)</entry>",
                "+",
                "+  <entry key=\"URelationship_RightIndex\">CREATE INDEX URelationship_RightIndex ON URelationship(anyObject_id)</entry>",
                "+  <entry key=\"URelationship_LeftIndex\">CREATE INDEX URelationship_LeftIndex ON URelationship(user_id)</entry>",
                "+  <entry key=\"ARelationship_RightIndex\">CREATE INDEX ARelationship_RightIndex ON ARelationship(right_anyObject_id)</entry>",
                "+  <entry key=\"ARelationship_AnyObjectIndex\">CREATE INDEX ARelationship_AnyObjectIndex ON ARelationship(left_anyObject_id)</entry>",
                "+",
                "+  <entry key=\"CPlainAttrValue_attrIndex\">CREATE INDEX CPlainAttrValue_attrIndex on CPlainAttrValue(attribute_id)</entry>",
                "+  <entry key=\"CPAttrUniqueValue_attrIndex\">CREATE INDEX CPAttrUniqueValue_attrIndex on CPlainAttrUniqueValue(attribute_id)</entry>",
                "+",
                "+  <entry key=\"CPlainAttr_owner_Index\">CREATE INDEX CPlainAttr_owner_Index on CPlainAttr(owner_id)</entry>",
                "+  <entry key=\"CPlainAttr_schema_Index\">CREATE INDEX CPlainAttr_schema_Index on CPlainAttr(schema_id)</entry>",
                "+",
                "+  <entry key=\"Task_executedIndex\">CREATE INDEX Task_executedIndex ON Task(executed)</entry>",
                "+</properties>",
                "diff --git a/fit/core-reference/src/main/resources/pgjsonb/persistence.properties b/fit/core-reference/src/main/resources/pgjsonb/persistence.properties",
                "new file mode 100644",
                "index 0000000000..a2995270b3",
                "--- /dev/null",
                "+++ b/fit/core-reference/src/main/resources/pgjsonb/persistence.properties",
                "@@ -0,0 +1,27 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+content.directory=${conf.directory}",
                "+entity.factory=org.apache.syncope.core.persistence.jpa.entity.PGJPAEntityFactory",
                "+plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAPlainSchemaDAO",
                "+plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAPlainAttrDAO",
                "+plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAPlainAttrValueDAO",
                "+any.search.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAAnySearchDAO",
                "+user.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAUserDAO",
                "+group.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAGroupDAO",
                "+anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAAnyObjectDAO",
                "+conf.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAConfDAO",
                "+openjpa.RemoteCommitProvider=sjvm",
                "diff --git a/fit/core-reference/src/main/resources/pgjsonb/provisioning.properties b/fit/core-reference/src/main/resources/pgjsonb/provisioning.properties",
                "new file mode 100644",
                "index 0000000000..378e75e614",
                "--- /dev/null",
                "+++ b/fit/core-reference/src/main/resources/pgjsonb/provisioning.properties",
                "@@ -0,0 +1,32 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+asyncConnectorFacadeExecutor.poolSize=10",
                "+",
                "+# see http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-executor",
                "+propagationTaskExecutorAsyncExecutor.poolSize=5-25",
                "+propagationTaskExecutorAsyncExecutor.queueCapacity=100",
                "+propagationTaskExecutor=org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor",
                "+",
                "+userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager",
                "+groupProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultGroupProvisioningManager",
                "+anyObjectProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager",
                "+virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache",
                "+",
                "+quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate",
                "+quartz.sql=tables_postgres.sql",
                "+quartz.scheduler.idleWaitTime=5000",
                "+quartz.disableInstance=false",
                "diff --git a/fit/core-reference/src/main/resources/pgjsonb/views.xml b/fit/core-reference/src/main/resources/pgjsonb/views.xml",
                "new file mode 100644",
                "index 0000000000..eb450bef72",
                "--- /dev/null",
                "+++ b/fit/core-reference/src/main/resources/pgjsonb/views.xml",
                "@@ -0,0 +1,154 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">",
                "+<properties>",
                "+  ",
                "+  <entry key=\"UDynGroupMembers\">",
                "+    CREATE TABLE UDynGroupMembers(",
                "+    any_id CHAR(36),",
                "+    group_id CHAR(36),",
                "+    UNIQUE(any_id, group_id))",
                "+  </entry>",
                "+  <entry key=\"ADynGroupMembers\">",
                "+    CREATE TABLE ADynGroupMembers(",
                "+    anyType_id VARCHAR(255),",
                "+    any_id CHAR(36),",
                "+    group_id CHAR(36),",
                "+    UNIQUE(anyType_id, any_id, group_id))",
                "+  </entry>",
                "+  <entry key=\"DynRoleMembers\">",
                "+    CREATE TABLE DynRoleMembers(",
                "+    any_id CHAR(36),",
                "+    role_id VARCHAR(255),",
                "+    UNIQUE(any_id, role_id))",
                "+  </entry>",
                "+  <entry key=\"DynRealmMembers\">",
                "+    CREATE TABLE DynRealmMembers(",
                "+    any_id CHAR(36),",
                "+    dynRealm_id VARCHAR(255),",
                "+    UNIQUE(any_id, dynRealm_id))",
                "+  </entry>",
                "+",
                "+  <!-- user -->",
                "+  <entry key=\"user_search\">",
                "+    CREATE VIEW user_search AS",
                "+",
                "+    SELECT u.id as any_id, u.*,attrs,attrValues",
                "+    FROM SyncopeUser u, jsonb_array_elements(COALESCE(u.plainAttrs, '[{}]'::jsonb)) attrs,",
                "+    jsonb_array_elements(COALESCE(attrs -> 'values', '[{}]'::jsonb)) attrValues",
                "+  </entry>",
                "+  <entry key=\"user_search_urelationship\">",
                "+    CREATE VIEW user_search_urelationship AS",
                "+",
                "+    SELECT m.user_id AS any_id, m.anyObject_id AS right_any_id, m.type_id AS type",
                "+    FROM URelationship m",
                "+  </entry>",
                "+  <entry key=\"user_search_umembership\">",
                "+    CREATE VIEW user_search_umembership AS",
                "+",
                "+    SELECT m.user_id AS any_id, g.id AS group_id, g.name AS group_name",
                "+    FROM UMembership m, SyncopeGroup g",
                "+    WHERE m.group_id = g.id",
                "+  </entry>",
                "+  <entry key=\"user_search_role\">",
                "+    CREATE VIEW user_search_role AS",
                "+",
                "+    SELECT ss.user_id AS any_id, ss.role_id AS role_id",
                "+    FROM SyncopeUser_SyncopeRole ss",
                "+  </entry>",
                "+  <entry key=\"user_search_priv\">",
                "+    CREATE VIEW user_search_priv AS",
                "+",
                "+    SELECT ss.user_id AS any_id, sp.privilege_id AS privilege_id",
                "+    FROM SyncopeUser_SyncopeRole ss, SyncopeRole_Privilege sp",
                "+    WHERE ss.role_id = sp.role_id",
                "+  </entry>",
                "+  <entry key=\"user_search_dynpriv\">",
                "+    CREATE VIEW user_search_dynpriv AS",
                "+",
                "+    SELECT any_id, privilege_id",
                "+    FROM DynRoleMembers drm, SyncopeRole_Privilege rp",
                "+    WHERE drm.role_id = rp.role_id",
                "+  </entry>",
                "+  <entry key=\"user_search_resource\">",
                "+    CREATE VIEW user_search_resource AS",
                "+",
                "+    SELECT st.user_id AS any_id, st.resource_id AS resource_id",
                "+    FROM SyncopeUser_ExternalResource st",
                "+  </entry>",
                "+  <entry key=\"user_search_group_res\">",
                "+    CREATE VIEW user_search_group_res AS",
                "+",
                "+    SELECT m.user_id AS any_id, st.resource_id AS resource_id",
                "+    FROM UMembership m, SyncopeGroup r, SyncopeGroup_ExternalResource st",
                "+    WHERE m.group_id = r.id AND st.group_id = r.id",
                "+  </entry>",
                "+",
                "+  <!-- anyObject -->",
                "+  <entry key=\"anyObject_search\">",
                "+    CREATE VIEW anyObject_search AS",
                "+",
                "+    SELECT a.id as any_id, a.*,attrs,attrValues",
                "+    FROM AnyObject a, jsonb_array_elements(COALESCE(a.plainAttrs, '[{}]'::jsonb)) attrs,",
                "+    jsonb_array_elements(COALESCE(attrs -> 'values', '[{}]'::jsonb)) attrValues",
                "+  </entry>",
                "+  <entry key=\"anyObject_search_arelationship\">",
                "+    CREATE VIEW anyObject_search_arelationship AS",
                "+",
                "+    SELECT m.left_anyObject_id AS any_id, m.right_anyObject_id AS right_any_id, m.type_id AS type",
                "+    FROM ARelationship m",
                "+  </entry>",
                "+  <entry key=\"anyObject_search_amembership\">",
                "+    CREATE VIEW anyObject_search_amembership AS",
                "+",
                "+    SELECT m.anyObject_id AS any_id, g.id AS group_id, g.name AS group_name",
                "+    FROM AMembership m, SyncopeGroup g",
                "+    WHERE m.group_id = g.id",
                "+  </entry>",
                "+  <entry key=\"anyObject_search_resource\">",
                "+    CREATE VIEW anyObject_search_resource AS",
                "+",
                "+    SELECT st.anyObject_id AS any_id, st.resource_id AS resource_id",
                "+    FROM AnyObject_ExternalResource st",
                "+  </entry>",
                "+  <entry key=\"anyObject_search_group_res\">",
                "+    CREATE VIEW anyObject_search_group_res AS",
                "+",
                "+    SELECT m.anyObject_id AS any_id, st.resource_id AS resource_id",
                "+    FROM AMembership m, SyncopeGroup r, SyncopeGroup_ExternalResource st",
                "+    WHERE m.group_id = r.id AND st.group_id = r.id",
                "+  </entry>",
                "+",
                "+  <!-- group -->",
                "+  <entry key=\"group_search\">",
                "+    CREATE VIEW group_search AS",
                "+",
                "+    SELECT g.id as any_id, g.*,attrs,attrValues",
                "+    FROM SyncopeGroup g, jsonb_array_elements(COALESCE(g.plainAttrs, '[{}]'::jsonb)) attrs,",
                "+    jsonb_array_elements(COALESCE(attrs -> 'values', '[{}]'::jsonb)) attrValues",
                "+  </entry>",
                "+  <entry key=\"group_search_resource\">",
                "+    CREATE VIEW group_search_resource AS",
                "+",
                "+    SELECT st.group_id AS any_id, st.resource_id AS resource_id",
                "+    FROM SyncopeGroup_ExternalResource st",
                "+  </entry>",
                "+",
                "+</properties>",
                "diff --git a/pom.xml b/pom.xml",
                "index 31042725b9..31a0e83511 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -519,2 +519,4 @@ under the License.",
                "+    <docker.postgresql.version>11.1</docker.postgresql.version>",
                "+",
                "     <jdbc.postgresql.version>42.2.5</jdbc.postgresql.version>",
                "diff --git a/src/main/asciidoc/getting-started/obtain.adoc b/src/main/asciidoc/getting-started/obtain.adoc",
                "index ce0da9f7ea..f8cbd6adeb 100644",
                "--- a/src/main/asciidoc/getting-started/obtain.adoc",
                "+++ b/src/main/asciidoc/getting-started/obtain.adoc",
                "@@ -365,14 +365,8 @@ services:",
                "    db: // <1>",
                "-     image: crunchydata/crunchy-postgres:centos7-10.3-1.8.2",
                "+     image: postgres:latest",
                "      restart: always",
                "      environment:",
                "-       PG_ROOT_PASSWORD: postgres",
                "-       PG_MODE: primary",
                "-       PG_PRIMARY_USER: postgres",
                "-       PG_PRIMARY_PASSWORD: postgres",
                "-       PG_PRIMARY_HOST: localhost",
                "-       PG_PRIMARY_PORT: 5432",
                "-       PG_DATABASE: syncope",
                "-       PG_USER: syncope",
                "-       PG_PASSWORD: syncope",
                "+       POSTGRES_DB: syncope",
                "+       POSTGRES_USER: syncope",
                "+       POSTGRES_PASSWORD: syncope",
                "@@ -419,3 +413,3 @@ services:",
                " ----",
                "-<1> Database container for usage as internal storage, based on PostgreSQL 10.3",
                "+<1> Database container for usage as internal storage, based on latest PostgreSQL image available",
                " <2> Apache Syncope Core, single instance, port `18080` exposed"
            ],
            "changed_files": [
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/InvalidEntityException.java",
                "core/persistence-jpa-pgjsonb/pom.xml",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyObjectDAO.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAConfDAO.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAGroupDAO.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrValueDAO.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAUserDAO.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityListener.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObject.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObjectListener.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConfListener.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroup.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroupListener.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUser.java",
                "core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUserListener.java",
                "core/persistence-jpa-pgjsonb/src/main/resources/META-INF/spring-orm-pgjsonb.xml",
                "core/persistence-jpa-pgjsonb/src/main/resources/persistence.properties",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAADynGroupMembership.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAMembership.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAARelationship.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPATypeExtension.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUDynGroupMembership.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUMembership.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAURelationship.java",
                "core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml",
                "core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml",
                "core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml",
                "core/persistence-jpa/src/main/resources/persistence.properties",
                "core/persistence-jpa/src/main/resources/persistenceContext.xml",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java",
                "docker/core/src/main/resources/persistence.properties",
                "docker/src/main/resources/docker-compose/docker-compose-ha.yml",
                "docker/src/main/resources/docker-compose/docker-compose-postgresql.yml",
                "ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties",
                "fit/core-reference/pom.xml",
                "fit/core-reference/src/main/resources/elasticsearch/persistence.properties",
                "fit/core-reference/src/main/resources/pgjsonb/domains/Master.properties",
                "fit/core-reference/src/main/resources/pgjsonb/indexes.xml",
                "fit/core-reference/src/main/resources/pgjsonb/persistence.properties",
                "fit/core-reference/src/main/resources/pgjsonb/provisioning.properties",
                "fit/core-reference/src/main/resources/pgjsonb/views.xml",
                "pom.xml",
                "src/main/asciidoc/getting-started/obtain.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1395": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a98edb15f9412fe0157b4020ffa08c5f2f257c2a"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1395",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fd45e2338f4dda0d8fbec0f2f33e3c0ce532fc8a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1542033455,
            "hunks": 13,
            "message": "[SYNCOPE-1391] Fix for 'Must change password' and 'Confirm password reset' pages",
            "diff": [
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/services/dynamicTemplateService.js b/client/enduser/src/main/resources/META-INF/resources/app/js/services/dynamicTemplateService.js",
                "index b3348e0220..39a06c5a7e 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/services/dynamicTemplateService.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/services/dynamicTemplateService.js",
                "@@ -47,5 +47,5 @@ angular.module('SyncopeEnduserApp')",
                "             dynTemplateService.getContent = function () {",
                "-              return $http",
                "-                      .get(dynTemplateUrl)",
                "-                      .then(function (response) {",
                "+              return $http.",
                "+                      get(dynTemplateUrl).",
                "+                      then(function (response) {",
                "                         return response.data;",
                "@@ -55,5 +55,5 @@ angular.module('SyncopeEnduserApp')",
                "             dynTemplateService.getGeneralAssetsContent = function (types) {",
                "-              return $http",
                "-                      .get(dynTemplateUrl)",
                "-                      .then(function (response) {",
                "+              return $http.",
                "+                      get(dynTemplateUrl).",
                "+                      then(function (response) {",
                "                         return loadAssets(\"generalAssets\", response.data, types);",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/confirmpasswordreset.html b/client/enduser/src/main/resources/META-INF/resources/app/views/confirmpasswordreset.html",
                "index 8d165f37ef..3fcc5439f6 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/confirmpasswordreset.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/confirmpasswordreset.html",
                "@@ -19,60 +19,3 @@ under the License.",
                " <div ng-cloak class=\"container\">",
                "-  <div ng-controller=\"UserController\">",
                "-",
                "-    <div id=\"form-container\" class=\"col-md-6 col-md-offset-3\">",
                "-",
                "-      <div>",
                "-        <div class=\"page-header\">",
                "-          <span>{{'CONFIRM_PASSWORD_RESET'| translate}}</span>",
                "-        </div>",
                "-        <div class=\"breadcrumb-header text-center\">",
                "-",
                "-          <div class=\"row\">            ",
                "-            <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb col-md-12 col-md-offset-3\">",
                "-              <a href=\"#/self\" class=\"btn btn-secondary btn-default\"><i class=\"fa fa-home\"></i></a>",
                "-              <!--add class breadcrumb-disabled-link to buttons to prevent click-->",
                "-              <a ui-sref-active=\"active\" class=\"btn btn-secondary btn-default\">Password reset</a>",
                "-            </div>",
                "-          </div>",
                "-        </div>",
                "-        <form class=\"signup-form\" name=\"confirmPasswordResetForm\" ng-submit=\"confirmPasswordReset(user, $event)\" ",
                "-              novalidate>",
                "-",
                "-          <div id=\"form-views\" ui-view>",
                "-            <div id=\"attribute\" class=\"form-group\">",
                "-              <label for=\"user.password\">Password</label>",
                "-              <input type=\"password\" class=\"form-control\" name=\"password\" ng-model=\"user.password\" placeholder=\"password\">",
                "-            </div>",
                "-",
                "-            <div id=\"attribute\" class=\"form-group\">",
                "-              <label for=\"confirmPassword\">{{'CONFIRM_PASSWORD'| translate}}</label>",
                "-              <input name=\"password\" type=\"password\" class=\"form-control\" equals=\"user.password\" ",
                "-                     ng-model=\"confirmPassword.value\"",
                "-                     placeholder=\"confirm password\" validate=\"true\">",
                "-              <validation-message name=\"password\"/>",
                "-            </div>",
                "-",
                "-            <div id=\"attribute\" class=\"form-group\">",
                "-              <div class=\"suggestions\">",
                "-                {{'PASSWORD_STRENGTH'| translate}}:",
                "-                <span ng-if=\"passStrength < 50\">{{'INSECURE'| translate}}</span>",
                "-                <span ng-if=\"passStrength >= 50 && passStrength <= 82\">{{'ALMOSTSECURE'| translate}}</span>",
                "-                <span ng-if=\"passStrength > 82\">{{'VERYGOOD'| translate}}</span>",
                "-              </div>",
                "-              <div ng-password-strength=\"user.password\" strength=\"passStrength\" inner-class=\"progress-bar\" ",
                "-                   inner-class-prefix=\"progress-bar-\">",
                "-              </div>",
                "-            </div>",
                "-            <div id=\"attribute\" class=\"form-group row\">",
                "-              <button id=\"resetpassword\" type=\"submit\" ",
                "-                      class=\"btn btn-secondary btn-default float-right\">{{'SUBMIT'| translate}}</button>",
                "-              <div class=\"float-left\">",
                "-                <a id=\"cancel\" href=\"#/self\" class=\"btn btn-danger\">{{'CANCEL'| translate}}</a>",
                "-              </div>",
                "-            </div>",
                "-          </div>",
                "-        </form>",
                "-      </div>",
                "-    </div>",
                "-  </div>",
                "+  <dynamic-template-item type=\"confirm_password_reset\"></dynamic-template-item>",
                " </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/editUser.html b/client/enduser/src/main/resources/META-INF/resources/app/views/editUser.html",
                "index 3d0d013e19..2cae1360d8 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/editUser.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/editUser.html",
                "@@ -19,3 +19,3 @@ under the License.",
                " <div ng-cloak class=\"container\">",
                "-  <dynamic-template-item type=\"edit_user\"/>",
                "+  <dynamic-template-item type=\"edit_user\"></dynamic-template-item>",
                " </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/mustchangepassword.html b/client/enduser/src/main/resources/META-INF/resources/app/views/mustchangepassword.html",
                "index 1245214d80..7c4098d71b 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/mustchangepassword.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/mustchangepassword.html",
                "@@ -19,60 +19,3 @@ under the License.",
                " <div ng-cloak class=\"container\">",
                "-  <div ng-controller=\"UserController\">",
                "-",
                "-    <div id=\"form-container\" class=\"col-md-6 col-md-offset-3\">",
                "-",
                "-      <div>",
                "-        <div class=\"page-header\">",
                "-          <span>{{'PASSWORD_CHANGE_REQUIRED'| translate}}</span>",
                "-        </div>",
                "-        <div class=\"breadcrumb-header text-center\">",
                "-",
                "-          <div class=\"row\">            ",
                "-            <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb col-md-12 col-md-offset-3\">",
                "-              <a class=\"btn btn-secondary btn-default breadcrumb-home\" ng-click=\"logout()\">",
                "-                <i class=\"fa fa-power-off\"style=\"color:red\"></i>",
                "-              </a>",
                "-              <!--add class breadcrumb-disabled-link to buttons to prevent click-->",
                "-              <a ui-sref-active=\"active\" class=\"btn btn-secondary btn-default\">{{'PASSWORD_CHANGE'| translate}}</a>",
                "-            </div>",
                "-          </div>",
                "-        </div>",
                "-        <form class=\"signup-form\" name=\"changePasswordForm\" ng-submit=\"changePassword(user, $event)\" novalidate>",
                "-",
                "-          <div id=\"form-views\" ui-view>",
                "-            <div id=\"attribute\" class=\"form-group\">",
                "-              <label for=\"user.password\">{{'PASSWORD'| translate}}</label>",
                "-              <input type=\"password\" class=\"form-control\" name=\"password\" ng-model=\"user.password\" placeholder=\"password\">",
                "-            </div>",
                "-",
                "-            <div id=\"attribute\" class=\"form-group\">",
                "-              <label for=\"confirmPassword\">{{'CONFIRM_PASSWORD'| translate}}</label>",
                "-              <input name=\"password\" type=\"password\" class=\"form-control\" equals=\"user.password\" ng-model=\"confirmPassword.value\"",
                "-                     placeholder=\"confirm password\" validate=\"true\">",
                "-              <validation-message name=\"password\"/>",
                "-            </div>",
                "-",
                "-            <div id=\"attribute\" class=\"form-group\">",
                "-              <div class=\"suggestions\">",
                "-                {{'PASSWORD_STRENGTH'| translate}}: ",
                "-                <span ng-if=\"passStrength < 50\">{{'NOTSECURE'| translate}}</span>",
                "-                <span ng-if=\"passStrength >= 50 && passStrength <= 82\">{{'ALMOSTSECURE'| translate}}</span>",
                "-                <span ng-if=\"passStrength > 82\">{{'VERYGOOD'| translate}}</span>",
                "-              </div>",
                "-              <div ng-password-strength=\"user.password\" strength=\"passStrength\" inner-class=\"progress-bar\" ",
                "-                   inner-class-prefix=\"progress-bar-\">",
                "-              </div>",
                "-            </div>",
                "-            <div id=\"attribute\" class=\"form-group row\">",
                "-              <button id=\"resetpassword\" type=\"submit\" ",
                "-                      class=\"btn btn-secondary btn-default float-right\">{{'SUBMIT'| translate}}</button>",
                "-              <div class=\"float-left\">",
                "-                <a id=\"cancel\" href=\"#/self\" class=\"btn btn-danger\">{{'CANCEL'| translate}}</a>",
                "-              </div>",
                "-            </div>",
                "-          </div>",
                "-        </form>",
                "-      </div>",
                "-    </div>",
                "-  </div>",
                "+  <dynamic-template-item type=\"must_change_password\"></dynamic-template-item>",
                " </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/passwordreset.html b/client/enduser/src/main/resources/META-INF/resources/app/views/passwordreset.html",
                "index baeee40657..3436283730 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/passwordreset.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/passwordreset.html",
                "@@ -19,3 +19,3 @@ under the License.",
                " <div ng-cloak class=\"container\">",
                "-  <dynamic-template-item type=\"password_reset\"/>",
                "+  <dynamic-template-item type=\"password_reset\"></dynamic-template-item>",
                " </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/self.html b/client/enduser/src/main/resources/META-INF/resources/app/views/self.html",
                "index b7bf74d680..b4147a43c5 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/self.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/self.html",
                "@@ -28,3 +28,3 @@ under the License.",
                "     <div ng-cloak class=\"container\">",
                "-      <dynamic-template-item type=\"login\"/>",
                "+      <dynamic-template-item type=\"login\"></dynamic-template-item>",
                "     </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/templates/confirmPasswordResetTemplate.html b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/confirmPasswordResetTemplate.html",
                "new file mode 100644",
                "index 0000000000..6690689e72",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/confirmPasswordResetTemplate.html",
                "@@ -0,0 +1,83 @@",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<div ng-controller=\"UserController\">",
                "+",
                "+  <div id=\"form-container\" class=\"col-md-6 col-md-offset-3\">",
                "+",
                "+    <div>",
                "+      <div class=\"page-header\">",
                "+        <span>{{'CONFIRM_PASSWORD_RESET'| translate}}</span>",
                "+      </div>",
                "+      <div class=\"breadcrumb-header text-center\">",
                "+",
                "+        <div class=\"row\">            ",
                "+          <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb col-md-12 col-md-offset-3\">",
                "+            <a href=\"#/self\" class=\"btn btn-secondary btn-default\"><i class=\"fa fa-home\"></i></a>",
                "+            <!--add class breadcrumb-disabled-link to buttons to prevent click-->",
                "+            <a ui-sref-active=\"active\" class=\"btn btn-secondary btn-default\">Password reset</a>",
                "+          </div>",
                "+        </div>",
                "+      </div>",
                "+      <form class=\"signup-form\" name=\"confirmPasswordResetForm\" ng-submit=\"confirmPasswordReset(user, $event)\" ",
                "+            novalidate>",
                "+",
                "+        <div id=\"form-views\" ui-view>",
                "+          <div id=\"attribute\" class=\"form-group\">",
                "+            <label for=\"user.password\">Password</label>",
                "+            <input type=\"password\" class=\"form-control\" name=\"password\" ng-model=\"user.password\" placeholder=\"password\">",
                "+          </div>",
                "+",
                "+          <div id=\"attribute\" class=\"form-group\">",
                "+            <label for=\"confirmPassword\">{{'CONFIRM_PASSWORD'| translate}}</label>",
                "+            <input name=\"password\" type=\"password\" class=\"form-control\" equals=\"user.password\" ",
                "+                   ng-model=\"confirmPassword.value\"",
                "+                   placeholder=\"confirm password\" validate=\"true\">",
                "+            <validation-message name=\"password\"/>",
                "+          </div>",
                "+",
                "+          <div id=\"attribute\" class=\"form-group\">",
                "+            <div class=\"suggestions\">",
                "+              {{'PASSWORD_STRENGTH'| translate}}:",
                "+              <span ng-if=\"passStrength < 50\">{{'INSECURE'| translate}}</span>",
                "+              <span ng-if=\"passStrength >= 50 && passStrength <= 82\">{{'ALMOSTSECURE'| translate}}</span>",
                "+              <span ng-if=\"passStrength > 82\">{{'VERYGOOD'| translate}}</span>",
                "+            </div>",
                "+            <div ng-password-strength=\"user.password\" strength=\"passStrength\" inner-class=\"progress-bar\" ",
                "+                 inner-class-prefix=\"progress-bar-\">",
                "+            </div>",
                "+          </div>",
                "+          <div id=\"attribute\" class=\"form-group row\">",
                "+            <div class=\"col-xs-6\">",
                "+              <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\"",
                "+                 tabindex=\"0\" ng-enter=\"logout()\">",
                "+                {{'CANCEL'| translate}}",
                "+              </a>",
                "+            </div>",
                "+            <div class=\"col-xs-6\">",
                "+              <button id=\"resetpassword\" type=\"submit\" tabindex=\"0\"",
                "+                      class=\"btn btn-secondary btn-default float-right nav-button\">",
                "+                {{'SUBMIT'| translate}}",
                "+              </button>",
                "+            </div>",
                "+          </div>",
                "+        </div>",
                "+      </form>",
                "+    </div>",
                "+  </div>",
                "+</div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/templates/mustChangePasswordTemplate.html b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/mustChangePasswordTemplate.html",
                "new file mode 100644",
                "index 0000000000..c0e0587840",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/mustChangePasswordTemplate.html",
                "@@ -0,0 +1,82 @@",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<div ng-controller=\"UserController\">",
                "+  <div id=\"form-container\" class=\"col-md-6 col-md-offset-3\">",
                "+",
                "+    <div>",
                "+      <div class=\"page-header\">",
                "+        <span>{{'PASSWORD_CHANGE_REQUIRED'| translate}}</span>",
                "+      </div>",
                "+      <div class=\"breadcrumb-header text-center\">",
                "+",
                "+        <div class=\"row\">            ",
                "+          <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb col-md-12 col-md-offset-3\">",
                "+            <a class=\"btn btn-secondary btn-default breadcrumb-home\" ng-click=\"logout()\">",
                "+              <i class=\"fa fa-power-off\"style=\"color:red\"></i>",
                "+            </a>",
                "+            <!--add class breadcrumb-disabled-link to buttons to prevent click-->",
                "+            <a ui-sref-active=\"active\" class=\"btn btn-secondary btn-default\">{{'PASSWORD_CHANGE'| translate}}</a>",
                "+          </div>",
                "+        </div>",
                "+      </div>",
                "+      <form class=\"signup-form\" name=\"changePasswordForm\" ng-submit=\"changePassword(user, $event)\" novalidate>",
                "+",
                "+        <div id=\"form-views\" ui-view>",
                "+          <div id=\"attribute\" class=\"form-group\">",
                "+            <label for=\"user.password\">{{'PASSWORD'| translate}}</label>",
                "+            <input type=\"password\" class=\"form-control\" name=\"password\" ng-model=\"user.password\" placeholder=\"password\">",
                "+          </div>",
                "+",
                "+          <div id=\"attribute\" class=\"form-group\">",
                "+            <label for=\"confirmPassword\">{{'CONFIRM_PASSWORD'| translate}}</label>",
                "+            <input name=\"password\" type=\"password\" class=\"form-control\" equals=\"user.password\" ng-model=\"confirmPassword.value\"",
                "+                   placeholder=\"confirm password\" validate=\"true\">",
                "+            <validation-message name=\"password\"/>",
                "+          </div>",
                "+",
                "+          <div id=\"attribute\" class=\"form-group\">",
                "+            <div class=\"suggestions\">",
                "+              {{'PASSWORD_STRENGTH'| translate}}: ",
                "+              <span ng-if=\"passStrength < 50\">{{'NOTSECURE'| translate}}</span>",
                "+              <span ng-if=\"passStrength >= 50 && passStrength <= 82\">{{'ALMOSTSECURE'| translate}}</span>",
                "+              <span ng-if=\"passStrength > 82\">{{'VERYGOOD'| translate}}</span>",
                "+            </div>",
                "+            <div ng-password-strength=\"user.password\" strength=\"passStrength\" inner-class=\"progress-bar\" ",
                "+                 inner-class-prefix=\"progress-bar-\">",
                "+            </div>",
                "+          </div>",
                "+          <div id=\"attribute\" class=\"form-group row\">",
                "+            <div class=\"col-xs-6\">",
                "+              <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\"",
                "+                 tabindex=\"0\" ng-enter=\"logout()\">",
                "+                {{'CANCEL'| translate}}",
                "+              </a>",
                "+            </div>",
                "+            <div class=\"col-xs-6\">",
                "+              <button id=\"resetpassword\" type=\"submit\" tabindex=\"0\"",
                "+                      class=\"btn btn-secondary btn-default float-right nav-button\">",
                "+                {{'SUBMIT'| translate}}",
                "+              </button>",
                "+            </div>",
                "+          </div>",
                "+        </div>",
                "+      </form>",
                "+    </div>",
                "+  </div>",
                "+</div>",
                "diff --git a/client/enduser/src/main/resources/customTemplate.json b/client/enduser/src/main/resources/customTemplate.json",
                "index 9b760b9ac9..e55ed4c86f 100644",
                "--- a/client/enduser/src/main/resources/customTemplate.json",
                "+++ b/client/enduser/src/main/resources/customTemplate.json",
                "@@ -26,2 +26,18 @@",
                "                       ]",
                "+                    },",
                "+            \"must_change_password\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/mustChangePasswordTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\",",
                "+                        \"css/passwordReset.css\"",
                "+                      ]",
                "+                    },",
                "+            \"confirm_password_reset\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/confirmPasswordResetTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\",",
                "+                        \"css/passwordReset.css\"",
                "+                      ]",
                "                     }",
                "diff --git a/fit/enduser-reference/src/main/resources/customTemplate.json b/fit/enduser-reference/src/main/resources/customTemplate.json",
                "index 9b760b9ac9..e55ed4c86f 100644",
                "--- a/fit/enduser-reference/src/main/resources/customTemplate.json",
                "+++ b/fit/enduser-reference/src/main/resources/customTemplate.json",
                "@@ -26,2 +26,18 @@",
                "                       ]",
                "+                    },",
                "+            \"must_change_password\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/mustChangePasswordTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\",",
                "+                        \"css/passwordReset.css\"",
                "+                      ]",
                "+                    },",
                "+            \"confirm_password_reset\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/confirmPasswordResetTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\",",
                "+                        \"css/passwordReset.css\"",
                "+                      ]",
                "                     }",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "index 0f3154f8df..ee7b9cf54a 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "@@ -891,2 +891,18 @@ The `customTemplate.json` default content is:",
                "                       ]",
                "+                    },",
                "+            \"must_change_password\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/mustChangePasswordTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\",",
                "+                        \"css/passwordReset.css\"",
                "+                      ]",
                "+                    },",
                "+            \"confirm_password_reset\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/confirmPasswordResetTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\",",
                "+                        \"css/passwordReset.css\"",
                "+                      ]",
                "                     }",
                "@@ -1012,3 +1028,13 @@ The structure of the template sections is defined by `templateUrl` property, for",
                "                   \"templateUrl\": \"views/templates/passwordresetTemplate.html\",",
                "-                },          ",
                "+                },",
                "+",
                "+        \"must_change_password\":",
                "+                {",
                "+                  \"templateUrl\": \"views/templates/mustChangePasswordTemplate.html\",",
                "+                },",
                "+",
                "+        \"confirm_password_reset\":",
                "+                {",
                "+                  \"templateUrl\": \"views/templates/confirmPasswordResetTemplate.html\",",
                "+                }",
                "         },"
            ],
            "changed_files": [
                "client/enduser/src/main/resources/META-INF/resources/app/js/services/dynamicTemplateService.js",
                "client/enduser/src/main/resources/META-INF/resources/app/views/confirmpasswordreset.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/editUser.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/mustchangepassword.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/passwordreset.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/self.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/templates/confirmPasswordResetTemplate.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/templates/mustChangePasswordTemplate.html",
                "client/enduser/src/main/resources/customTemplate.json",
                "fit/enduser-reference/src/main/resources/customTemplate.json",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1391": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "65756405fe897eb8c0a35db2e1473bd7fb0cecdf"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: html, edit, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1391",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7c37f53df1f293670174154815da891b56ea6fe8",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1533050218,
            "hunks": 3,
            "message": "[SYNCOPE-1347] Solved by adding missing dependencies - the actual fix would be making IzPack resolving transitive dependencies",
            "diff": [
                "diff --git a/installer/pom.xml b/installer/pom.xml",
                "index 35bdd8d93e..d57e2f54b7 100644",
                "--- a/installer/pom.xml",
                "+++ b/installer/pom.xml",
                "@@ -138,3 +138,2 @@ under the License.",
                "               <outputDirectory>${project.build.directory}/staging/lib</outputDirectory>",
                "-              <excludeGroupIds>junit</excludeGroupIds>",
                "             </configuration>",
                "diff --git a/installer/src/main/resources/izpack/html/prerequisites.html b/installer/src/main/resources/izpack/html/prerequisites.html",
                "index 2ff8e1a8de..61abe30a51 100644",
                "--- a/installer/src/main/resources/izpack/html/prerequisites.html",
                "+++ b/installer/src/main/resources/izpack/html/prerequisites.html",
                "@@ -38,3 +38,3 @@ under the License.",
                "           <ol>",
                "-            <li class=\"prerequisite\">Java SE Development Kit 7 or higher installed;</li>",
                "+            <li class=\"prerequisite\">Java SE Development Kit 8 or higher installed;</li>",
                "             <li class=\"prerequisite\"><a href=\"http://maven.apache.org/\">Apache Maven (version 3.0.3 or higher) installed;</a></li>",
                "diff --git a/installer/src/main/resources/izpack/install.xml b/installer/src/main/resources/izpack/install.xml",
                "index 7ec67f077a..5274602bdc 100644",
                "--- a/installer/src/main/resources/izpack/install.xml",
                "+++ b/installer/src/main/resources/izpack/install.xml",
                "@@ -145,2 +145,4 @@ under the License.",
                "   <jar src=\"lib/plexus-utils-1.5.6.jar\"/>",
                "+  <jar src=\"lib/plexus-component-annotations-1.7.1.jar\"/>",
                "+  <jar src=\"lib/maven-shared-utils-3.2.1.jar\"/>"
            ],
            "changed_files": [
                "installer/pom.xml",
                "installer/src/main/resources/izpack/html/prerequisites.html",
                "installer/src/main/resources/izpack/install.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1347": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d2ff6e4a44c660c9c9c91524c91eaad5dfe2d473"
                ],
                [
                    "no-tag",
                    "cd0fdc6dd210c0d4b67543512cad3d90aecbdefe"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: html",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1347",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4c324a80f9c1bbdfdce7a8b68e0663c94907ea5e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537352493,
            "hunks": 7,
            "message": "Workaround for WICKET-6588",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "index 1134a00405..7ad0f08c83 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java",
                "@@ -29,2 +29,5 @@ import java.util.Map;",
                " import java.util.Set;",
                "+import javax.servlet.SessionTrackingMode;",
                "+import javax.servlet.http.Cookie;",
                "+import javax.servlet.http.HttpServletRequest;",
                " import org.apache.syncope.client.console.SyncopeConsoleSession;",
                "@@ -35,4 +38,6 @@ import org.apache.syncope.common.lib.to.ResourceTO;",
                " import org.apache.wicket.Application;",
                "+import org.apache.wicket.Component;",
                " import org.apache.wicket.Session;",
                " import org.apache.wicket.ThreadContext;",
                "+import org.apache.wicket.protocol.http.WebApplication;",
                " import org.apache.wicket.protocol.ws.api.WebSocketBehavior;",
                "@@ -40,2 +45,3 @@ import org.apache.wicket.protocol.ws.api.WebSocketRequestHandler;",
                " import org.apache.wicket.protocol.ws.api.message.TextMessage;",
                "+import org.apache.wicket.util.cookies.CookieUtils;",
                " import org.slf4j.Logger;",
                "@@ -52,10 +58,10 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "     private final Map<String, String> resources =",
                "-            Collections.<String, String>synchronizedMap(new HashMap<String, String>());",
                "+            Collections.<String, String>synchronizedMap(new HashMap<>());",
                "-    private final Set<String> runningResCheck = Collections.synchronizedSet(new HashSet<String>());",
                "+    private final Set<String> runningResCheck = Collections.synchronizedSet(new HashSet<>());",
                "     private final Map<String, String> connectors =",
                "-            Collections.<String, String>synchronizedMap(new HashMap<String, String>());",
                "+            Collections.<String, String>synchronizedMap(new HashMap<>());",
                "-    private final Set<String> runningConnCheck = Collections.synchronizedSet(new HashSet<String>());",
                "+    private final Set<String> runningConnCheck = Collections.synchronizedSet(new HashSet<>());",
                "@@ -65,2 +71,28 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {",
                "+    @Override",
                "+    protected CharSequence getSessionId(final Component component) {",
                "+        String sessionId = \"\";",
                "+        WebApplication application = (WebApplication) component.getApplication();",
                "+        Set<SessionTrackingMode> effectiveSessionTrackingModes =",
                "+                application.getServletContext().getEffectiveSessionTrackingModes();",
                "+        Object containerRequest = component.getRequest().getContainerRequest();",
                "+        if (effectiveSessionTrackingModes.size() == 1",
                "+                && SessionTrackingMode.URL.equals(effectiveSessionTrackingModes.iterator().next())) {",
                "+",
                "+            sessionId = component.getSession().getId();",
                "+        } else if (containerRequest instanceof HttpServletRequest) {",
                "+            CookieUtils cookieUtils = new CookieUtils();",
                "+            String jsessionCookieName = application.getServletContext().getSessionCookieConfig().getName();",
                "+            if (jsessionCookieName == null) {",
                "+                jsessionCookieName = \"JSESSIONID\";",
                "+            }",
                "+            Cookie jsessionid = cookieUtils.getCookie(jsessionCookieName);",
                "+            HttpServletRequest httpServletRequest = (HttpServletRequest) containerRequest;",
                "+            if (jsessionid == null || httpServletRequest.isRequestedSessionIdValid() == false) {",
                "+                sessionId = component.getSession().getId();",
                "+            }",
                "+        }",
                "+        return sessionId;",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "WICKET-6588": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d5b371fa13c3a70fdd408facb13e7eae1495eb46"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: WICKET-6588",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7915c896f7c0b922714fda4eb47bc5b4042997be",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540455145,
            "hunks": 2,
            "message": "Activiti / Flowable fix: lookup candidate user for forms by username - according to SyncopeGroupQueryImpl's behavior",
            "diff": [
                "diff --git a/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java b/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java",
                "index a919107e82..01647c552b 100644",
                "--- a/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java",
                "+++ b/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java",
                "@@ -633,3 +633,3 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {",
                "                     taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE).",
                "-                    taskCandidateOrAssigned(user.getKey()), page, size, orderByClauses);",
                "+                    taskCandidateOrAssigned(user.getUsername()), page, size, orderByClauses);",
                "diff --git a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "index cb7d406310..91f1fc6281 100644",
                "--- a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "+++ b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "@@ -632,3 +632,3 @@ public class FlowableUserWorkflowAdapter extends AbstractUserWorkflowAdapter {",
                "                     taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE).",
                "-                    taskCandidateOrAssigned(user.getKey()), page, size, orderByClauses);",
                "+                    taskCandidateOrAssigned(user.getUsername()), page, size, orderByClauses);"
            ],
            "changed_files": [
                "core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java",
                "core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: name, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7520d15c8a617a0d20c4a5a3fe4d70c27025ce11",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1542366752,
            "hunks": 13,
            "message": "[SYNCOPE-1395] Adding docs",
            "diff": [
                "diff --git a/core/persistence-jpa-pgjsonb/pom.xml b/core/persistence-jpa-pgjsonb/pom.xml",
                "index 34426f5e32..a51cabae7b 100644",
                "--- a/core/persistence-jpa-pgjsonb/pom.xml",
                "+++ b/core/persistence-jpa-pgjsonb/pom.xml",
                "@@ -94,3 +94,3 @@ under the License.",
                "         <configuration>",
                "-          <persistenceXmlFile>${project.basedir}/../persistence-jpa/src/main/resources/persistence-enhance.xml</persistenceXmlFile> ",
                "+          <persistenceXmlFile>src/main/resources/persistence-enhance.xml</persistenceXmlFile> ",
                "           <includes>org/apache/syncope/core/persistence/jpa/entity/**/*.class</includes>",
                "diff --git a/core/persistence-jpa-pgjsonb/src/main/resources/persistence-enhance.xml b/core/persistence-jpa-pgjsonb/src/main/resources/persistence-enhance.xml",
                "new file mode 100644",
                "index 0000000000..718f22953e",
                "--- /dev/null",
                "+++ b/core/persistence-jpa-pgjsonb/src/main/resources/persistence-enhance.xml",
                "@@ -0,0 +1,31 @@",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"",
                "+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                "+             xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence",
                "+                                 http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"",
                "+             version=\"2.0\">",
                "+  ",
                "+  <persistence-unit name=\"Master\">",
                "+    <mapping-file>META-INF/spring-orm-pgjsonb.xml</mapping-file>",
                "+    <validation-mode>NONE</validation-mode>",
                "+  </persistence-unit>",
                "+  ",
                "+</persistence>",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbms.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbms.adoc",
                "index d72113d49b..a1d1672bd0 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbms.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbms.adoc",
                "@@ -29,3 +29,3 @@ Apache Syncope {docVersion} is verified with PostgreSQL server >= 10.3 and JDBC",
                "-In `provisioning.properties`:",
                "+In `provisioning.properties`, replace as follows:",
                "@@ -36,3 +36,3 @@ quartz.sql=tables_postgres.sql",
                "-In `domains/Master.properties` (for the `Master` domain):",
                "+In `domains/Master.properties` (for the `Master` domain), replace as follows:",
                "@@ -61,2 +61,73 @@ and save it under `core/src/main/resources/`.",
                "+===== PostgreSQL (JSONB)",
                "+",
                "+[NOTE]",
                "+With the configurations reported below, Apache Syncope will leverage the",
                "+https://www.postgresql.org/docs/current/datatype-json.html[JSONB^] column type for attribute storage.",
                "+",
                "+[NOTE]",
                "+Apache Syncope {docVersion} is verified with PostgreSQL server >= 10.3 and JDBC driver >= {postgresqlJDBC}.",
                "+",
                "+In `persistence.properties`, replace as follows:",
                "+",
                "+....",
                "+entity.factory=org.apache.syncope.core.persistence.jpa.entity.PGJPAEntityFactory",
                "+plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAPlainSchemaDAO",
                "+plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAPlainAttrDAO",
                "+plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAPlainAttrValueDAO",
                "+any.search.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAAnySearchDAO",
                "+user.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAUserDAO",
                "+group.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAGroupDAO",
                "+anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAAnyObjectDAO",
                "+conf.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAConfDAO",
                "+....",
                "+",
                "+In `provisioning.properties`, replace as follows:",
                "+",
                "+....",
                "+quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate",
                "+quartz.sql=tables_postgres.sql",
                "+....",
                "+",
                "+In `domains/Master.properties` (for the `Master` domain), replace as follows:",
                "+",
                "+....",
                "+Master.driverClassName=org.postgresql.Driver",
                "+Master.url=jdbc:postgresql://localhost:5432/syncope?stringtype=unspecified",
                "+Master.schema=",
                "+Master.username=syncope",
                "+Master.password=syncope",
                "+Master.databasePlatform=org.apache.openjpa.jdbc.sql.PostgresDictionary",
                "+Master.orm=META-INF/spring-orm-pgjsonb.xml",
                "+....",
                "+",
                "+[WARNING]",
                "+This assumes that you have a PostgreSQL instance running on localhost, listening on its default port 5432 with a",
                "+database `syncope` fully accessible by user `syncope` with password `syncope`.",
                "+",
                "+Download",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/fit/core-reference/src/main/resources/pgjsonb/indexes.xml[indexes.xml^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/tree/master/fit/core-reference/src/main/resources/pgjsonb/indexes.xml[indexes.xml^]",
                "+endif::[]",
                "+and",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/fit/core-reference/src/main/resources/pgjsonb/views.xml[views.xml^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/tree/master/fit/core-reference/src/main/resources/pgjsonb/views.xml[views.xml^]",
                "+endif::[]",
                "+then save both under `core/src/main/resources/`.",
                "+",
                "+Download",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion/core/persistence-jpa-pgjsonb/src/test/resources/domains/MasterContent.xml[MasterContent.xml^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/master/core/persistence-jpa-pgjsonb/src/test/resources/domains/MasterContent.xml[MasterContent.xml^]",
                "+endif::[]",
                "+and save it under `core/src/test/resources/`.",
                "+",
                " ===== MySQL",
                "@@ -66,3 +137,3 @@ Apache Syncope {docVersion} is verified with MySQL server >= 5.7 and JDBC driver",
                "-In `provisioning.properties`:",
                "+In `provisioning.properties`, replace as follows:",
                "@@ -77,3 +148,3 @@ for `quartz.sql` to `tables_mysql.sql`.",
                "-In `domains/Master.properties` (for the `Master` domain):",
                "+In `domains/Master.properties` (for the `Master` domain), replace as follows:",
                "@@ -106,3 +177,3 @@ Apache Syncope {docVersion} is verified with MariaDB server >= 10.3.7 and JDBC d",
                "-In `provisioning.properties`:",
                "+In `provisioning.properties`, replace as follows:",
                "@@ -117,3 +188,3 @@ for `quartz.sql` to `tables_mariadb.sql`.",
                "-In `domains/Master.properties` (for the `Master` domain):",
                "+In `domains/Master.properties` (for the `Master` domain), replace as follows:",
                "@@ -141,3 +212,3 @@ Apache Syncope {docVersion} is verified with Oracle database >= 11g and JDBC dri",
                "-In `provisioning.properties`:",
                "+In `provisioning.properties`, replace as follows:",
                "@@ -148,3 +219,3 @@ quartz.sql=tables_oracle.sql",
                "-In `domains/Master.properties` (for the `Master` domain):",
                "+In `domains/Master.properties` (for the `Master` domain), replace as follows:",
                "@@ -170,3 +241,3 @@ Apache Syncope {docVersion} is verified with MS SQL server >= 2017 and JDBC driv",
                "-In `provisioning.properties`:",
                "+In `provisioning.properties`, replace as follows:",
                "@@ -177,3 +248,3 @@ quartz.sql=tables_sqlServer.sql",
                "-In `domains/Master.properties` (for the `Master` domain):",
                "+In `domains/Master.properties` (for the `Master` domain), replace as follows:"
            ],
            "changed_files": [
                "core/persistence-jpa-pgjsonb/pom.xml",
                "core/persistence-jpa-pgjsonb/src/main/resources/persistence-enhance.xml",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbms.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1395": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "804c64c87e997639cc90a1a11e7e1b1c5668d67c"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: admin, administration",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1395",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "275ca966cde33d84e8c9f5316cc9d7eca12cff8e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536764165,
            "hunks": 3,
            "message": "Updating customized Swagger UI index page",
            "diff": [
                "diff --git a/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html b/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html",
                "index 075e2c663d..4bc87ee66b 100644",
                "--- a/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html",
                "+++ b/ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html",
                "@@ -20,82 +20,44 @@ under the License.",
                " <html lang=\"en\">",
                "-<head>",
                "-  <meta charset=\"UTF-8\">",
                "-  <!-- <ApacheSyncope> -->",
                "-  <!--<title>Swagger UI</title>-->",
                "-  <title>Swagger UI - Apache Syncope ${syncope.version}</title>",
                "-  <!-- </ApacheSyncope> -->",
                "-  <link href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,700|Source+Code+Pro:300,600|Titillium+Web:400,600,700\" rel=\"stylesheet\">",
                "-  <link rel=\"stylesheet\" type=\"text/css\" href=\"./swagger-ui.css\" >",
                "-  <link rel=\"icon\" type=\"image/png\" href=\"./favicon-32x32.png\" sizes=\"32x32\" />",
                "-  <link rel=\"icon\" type=\"image/png\" href=\"./favicon-16x16.png\" sizes=\"16x16\" />",
                "-  <style>",
                "-    html",
                "-    {",
                "-      box-sizing: border-box;",
                "-      overflow: -moz-scrollbars-vertical;",
                "-      overflow-y: scroll;",
                "-    }",
                "-    *,",
                "-    *:before,",
                "-    *:after",
                "-    {",
                "-      box-sizing: inherit;",
                "-    }",
                "-",
                "-    body {",
                "-      margin:0;",
                "-      background: #fafafa;",
                "-    }",
                "-    ",
                "-    .download-url-wrapper {",
                "-      display: none !important;",
                "-    }",
                "-  </style>",
                "-</head>",
                "-",
                "-<body>",
                "-",
                "-<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"position:absolute;width:0;height:0\">",
                "-  <defs>",
                "-    <symbol viewBox=\"0 0 20 20\" id=\"unlocked\">",
                "-          <path d=\"M15.8 8H14V5.6C14 2.703 12.665 1 10 1 7.334 1 6 2.703 6 5.6V6h2v-.801C8 3.754 8.797 3 10 3c1.203 0 2 .754 2 2.199V8H4c-.553 0-1 .646-1 1.199V17c0 .549.428 1.139.951 1.307l1.197.387C5.672 18.861 6.55 19 7.1 19h5.8c.549 0 1.428-.139 1.951-.307l1.196-.387c.524-.167.953-.757.953-1.306V9.199C17 8.646 16.352 8 15.8 8z\"></path>",
                "-    </symbol>",
                "-",
                "-    <symbol viewBox=\"0 0 20 20\" id=\"locked\">",
                "-      <path d=\"M15.8 8H14V5.6C14 2.703 12.665 1 10 1 7.334 1 6 2.703 6 5.6V8H4c-.553 0-1 .646-1 1.199V17c0 .549.428 1.139.951 1.307l1.197.387C5.672 18.861 6.55 19 7.1 19h5.8c.549 0 1.428-.139 1.951-.307l1.196-.387c.524-.167.953-.757.953-1.306V9.199C17 8.646 16.352 8 15.8 8zM12 8H8V5.199C8 3.754 8.797 3 10 3c1.203 0 2 .754 2 2.199V8z\"/>",
                "-    </symbol>",
                "-",
                "-    <symbol viewBox=\"0 0 20 20\" id=\"close\">",
                "-      <path d=\"M14.348 14.849c-.469.469-1.229.469-1.697 0L10 11.819l-2.651 3.029c-.469.469-1.229.469-1.697 0-.469-.469-.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-.469-.469-.469-1.228 0-1.697.469-.469 1.228-.469 1.697 0L10 8.183l2.651-3.031c.469-.469 1.228-.469 1.697 0 .469.469.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c.469.469.469 1.229 0 1.698z\"/>",
                "-    </symbol>",
                "-",
                "-    <symbol viewBox=\"0 0 20 20\" id=\"large-arrow\">",
                "-      <path d=\"M13.25 10L6.109 2.58c-.268-.27-.268-.707 0-.979.268-.27.701-.27.969 0l7.83 7.908c.268.271.268.709 0 .979l-7.83 7.908c-.268.271-.701.27-.969 0-.268-.269-.268-.707 0-.979L13.25 10z\"/>",
                "-    </symbol>",
                "-",
                "-    <symbol viewBox=\"0 0 20 20\" id=\"large-arrow-down\">",
                "-      <path d=\"M17.418 6.109c.272-.268.709-.268.979 0s.271.701 0 .969l-7.908 7.83c-.27.268-.707.268-.979 0l-7.908-7.83c-.27-.268-.27-.701 0-.969.271-.268.709-.268.979 0L10 13.25l7.418-7.141z\"/>",
                "-    </symbol>",
                "-",
                "-",
                "-    <symbol viewBox=\"0 0 24 24\" id=\"jump-to\">",
                "-      <path d=\"M19 7v4H5.83l3.58-3.59L8 6l-6 6 6 6 1.41-1.41L5.83 13H21V7z\"/>",
                "-    </symbol>",
                "-",
                "-    <symbol viewBox=\"0 0 24 24\" id=\"expand\">",
                "-      <path d=\"M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z\"/>",
                "-    </symbol>",
                "-",
                "-  </defs>",
                "-</svg>",
                "-",
                "-<div id=\"swagger-ui\"></div>",
                "-",
                "-<script src=\"./swagger-ui-bundle.js\"> </script>",
                "-<script src=\"./swagger-ui-standalone-preset.js\"> </script>",
                "-<script>",
                "-window.onload = function() {",
                "-  ",
                "-  // Build a system",
                "-  const ui = SwaggerUIBundle({",
                "+  <head>",
                "+    <meta charset=\"UTF-8\">",
                "+    <!-- <ApacheSyncope> -->",
                "+    <!--<title>Swagger UI</title>-->",
                "+    <title>Swagger UI - Apache Syncope ${syncope.version}</title>",
                "+    <!-- </ApacheSyncope> -->",
                "+    <link rel=\"stylesheet\" type=\"text/css\" href=\"./swagger-ui.css\" >",
                "+    <link rel=\"icon\" type=\"image/png\" href=\"./favicon-32x32.png\" sizes=\"32x32\" />",
                "+    <link rel=\"icon\" type=\"image/png\" href=\"./favicon-16x16.png\" sizes=\"16x16\" />",
                "+    <style>",
                "+      html",
                "+      {",
                "+        box-sizing: border-box;",
                "+        overflow: -moz-scrollbars-vertical;",
                "+        overflow-y: scroll;",
                "+      }",
                "+",
                "+      *,",
                "+      *:before,",
                "+      *:after",
                "+      {",
                "+        box-sizing: inherit;",
                "+      }",
                "+",
                "+      body",
                "+      {",
                "+        margin:0;",
                "+        background: #fafafa;",
                "+      }",
                "+    </style>",
                "+  </head>",
                "+",
                "+  <body>",
                "+    <div id=\"swagger-ui\"></div>",
                "+",
                "+    <script src=\"./swagger-ui-bundle.js\"> </script>",
                "+    <script src=\"./swagger-ui-standalone-preset.js\"> </script>",
                "+    <script>",
                "+    window.onload = function() {",
                "+",
                "+      // Build a system",
                "+      const ui = SwaggerUIBundle({",
                "     // <ApacheSyncope>",
                "@@ -108,21 +70,20 @@ window.onload = function() {",
                "     operationsSorter: 'alpha',",
                "-    tagSorter: 'alpha',",
                "+    tagsSorter: 'alpha',",
                "     // </ApacheSyncope>",
                "-    dom_id: '#swagger-ui',",
                "-    deepLinking: true,",
                "-    presets: [",
                "-      SwaggerUIBundle.presets.apis,",
                "-      SwaggerUIStandalonePreset",
                "-    ],",
                "-    plugins: [",
                "-      SwaggerUIBundle.plugins.DownloadUrl",
                "-    ],",
                "-    layout: \"StandaloneLayout\"",
                "-  })",
                "-",
                "-  window.ui = ui",
                "-}",
                "-</script>",
                "-</body>",
                "-",
                "+        dom_id: '#swagger-ui',",
                "+        deepLinking: true,",
                "+        presets: [",
                "+          SwaggerUIBundle.presets.apis,",
                "+          SwaggerUIStandalonePreset",
                "+        ],",
                "+        plugins: [",
                "+          SwaggerUIBundle.plugins.DownloadUrl",
                "+        ],",
                "+        layout: \"StandaloneLayout\"",
                "+      })",
                "+",
                "+      window.ui = ui",
                "+    }",
                "+  </script>",
                "+  </body>",
                " </html>"
            ],
            "changed_files": [
                "ext/swagger-ui/src/main/resources/META-INF/resources/swagger/index.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8ad88dcfcb14e763f21d2506db214cfe345ddffb"
                ],
                [
                    "no-tag",
                    "0f21cafbedece07846444461e4f4204e7e400f4f"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: html",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9702f2be62c9798b9c1b1211313049e836f81418",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541426012,
            "hunks": 1,
            "message": "SYNCOPE-1393 jexl function fullPath2Dn(final String fullPath, final String attr, final String prefix) should return empty string for ROOT realm (#88)",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/SyncopeJexlFunctions.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/SyncopeJexlFunctions.java",
                "index bf770d132d..5cf632a519 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/SyncopeJexlFunctions.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/SyncopeJexlFunctions.java",
                "@@ -59,3 +59,3 @@ public class SyncopeJexlFunctions {",
                "         if (fullPathSplitted == null || fullPathSplitted.length <= 1) {",
                "-            return prefix;",
                "+            return StringUtils.EMPTY;",
                "         }"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/SyncopeJexlFunctions.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1393": ""
            },
            "ghissue_refs": {
                "88": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0636ce4afd7071d767a1e0fd8922d4646ceb2cfd"
                ],
                [
                    "no-tag",
                    "92207203968241d23d5d81fdf43c4923abddbffc"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1393",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 88",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "026713cabdd87eb3a46dbb09d0a5a593f549298f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534494536,
            "hunks": 92,
            "message": "[maven-release-plugin] prepare for next development iteration",
            "diff": [
                "diff --git a/archetype/pom.xml b/archetype/pom.xml",
                "index 98fb24607d..67dc7bd225 100644",
                "--- a/archetype/pom.xml",
                "+++ b/archetype/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/cli/pom.xml b/client/cli/pom.xml",
                "index fd3d63831b..146dcb0160 100644",
                "--- a/client/cli/pom.xml",
                "+++ b/client/cli/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/console/pom.xml b/client/console/pom.xml",
                "index adbc060d26..9bdcae354f 100644",
                "--- a/client/console/pom.xml",
                "+++ b/client/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/enduser/pom.xml b/client/enduser/pom.xml",
                "index 6ba4c108c0..8da6bdd9d5 100644",
                "--- a/client/enduser/pom.xml",
                "+++ b/client/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/lib/pom.xml b/client/lib/pom.xml",
                "index 033eef68c6..7123407e32 100644",
                "--- a/client/lib/pom.xml",
                "+++ b/client/lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/pom.xml b/client/pom.xml",
                "index 1f9b66dcab..09894de024 100644",
                "--- a/client/pom.xml",
                "+++ b/client/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/common/lib/pom.xml b/common/lib/pom.xml",
                "index b33827ecbb..44d2398b62 100644",
                "--- a/common/lib/pom.xml",
                "+++ b/common/lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-common</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/common/pom.xml b/common/pom.xml",
                "index 27dc2dffe6..9137ab6edf 100644",
                "--- a/common/pom.xml",
                "+++ b/common/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/common/rest-api/pom.xml b/common/rest-api/pom.xml",
                "index ddad655420..623bc936e1 100644",
                "--- a/common/rest-api/pom.xml",
                "+++ b/common/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-common</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/logic/pom.xml b/core/logic/pom.xml",
                "index 1924213ae4..6515bec906 100644",
                "--- a/core/logic/pom.xml",
                "+++ b/core/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/migration/pom.xml b/core/migration/pom.xml",
                "index c785469d9c..f99fbc1050 100644",
                "--- a/core/migration/pom.xml",
                "+++ b/core/migration/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/persistence-api/pom.xml b/core/persistence-api/pom.xml",
                "index b887b096c4..13f20b6f4e 100644",
                "--- a/core/persistence-api/pom.xml",
                "+++ b/core/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/persistence-jpa/pom.xml b/core/persistence-jpa/pom.xml",
                "index 81d7c9b163..0e7f64c3bb 100644",
                "--- a/core/persistence-jpa/pom.xml",
                "+++ b/core/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/pom.xml b/core/pom.xml",
                "index f38d3c3e91..280327c82a 100644",
                "--- a/core/pom.xml",
                "+++ b/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/provisioning-api/pom.xml b/core/provisioning-api/pom.xml",
                "index 516f28642f..f15eb9709c 100644",
                "--- a/core/provisioning-api/pom.xml",
                "+++ b/core/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/provisioning-java/pom.xml b/core/provisioning-java/pom.xml",
                "index 576e266b50..129445fc77 100644",
                "--- a/core/provisioning-java/pom.xml",
                "+++ b/core/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/rest-cxf/pom.xml b/core/rest-cxf/pom.xml",
                "index cd75c26fe1..41c352cfc2 100644",
                "--- a/core/rest-cxf/pom.xml",
                "+++ b/core/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/spring/pom.xml b/core/spring/pom.xml",
                "index d9eace35d4..cc6b735e2c 100644",
                "--- a/core/spring/pom.xml",
                "+++ b/core/spring/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/workflow-activiti/pom.xml b/core/workflow-activiti/pom.xml",
                "index 2de83879ee..48b778f624 100644",
                "--- a/core/workflow-activiti/pom.xml",
                "+++ b/core/workflow-activiti/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/workflow-api/pom.xml b/core/workflow-api/pom.xml",
                "index 182f437ce7..7b888cfbfc 100644",
                "--- a/core/workflow-api/pom.xml",
                "+++ b/core/workflow-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/workflow-flowable/pom.xml b/core/workflow-flowable/pom.xml",
                "index 6367ee2d23..67e7e1f17b 100644",
                "--- a/core/workflow-flowable/pom.xml",
                "+++ b/core/workflow-flowable/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/workflow-java/pom.xml b/core/workflow-java/pom.xml",
                "index 3cd5647b0d..950821fda0 100644",
                "--- a/core/workflow-java/pom.xml",
                "+++ b/core/workflow-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/console/pom.xml b/deb/console/pom.xml",
                "index ea8bc0a041..395b130990 100644",
                "--- a/deb/console/pom.xml",
                "+++ b/deb/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/core/pom.xml b/deb/core/pom.xml",
                "index e589998b39..bdfac92fe5 100644",
                "--- a/deb/core/pom.xml",
                "+++ b/deb/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/enduser/pom.xml b/deb/enduser/pom.xml",
                "index 84a2de4838..8a128ba63c 100644",
                "--- a/deb/enduser/pom.xml",
                "+++ b/deb/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/pom.xml b/deb/pom.xml",
                "index 7aa28f5bf7..5a95c20471 100644",
                "--- a/deb/pom.xml",
                "+++ b/deb/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/docker/console/pom.xml b/docker/console/pom.xml",
                "index e07bae2fa8..04e146c658 100644",
                "--- a/docker/console/pom.xml",
                "+++ b/docker/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-docker</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/docker/core/pom.xml b/docker/core/pom.xml",
                "index 39480bf1ff..adb81558e1 100644",
                "--- a/docker/core/pom.xml",
                "+++ b/docker/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-docker</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/docker/enduser/pom.xml b/docker/enduser/pom.xml",
                "index d6ef3d011e..a4fd498f43 100644",
                "--- a/docker/enduser/pom.xml",
                "+++ b/docker/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-docker</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/docker/pom.xml b/docker/pom.xml",
                "index 238cd780de..c3d88251f5 100644",
                "--- a/docker/pom.xml",
                "+++ b/docker/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/client-console/pom.xml b/ext/camel/client-console/pom.xml",
                "index 79b54b7b4b..b45aad0e3c 100644",
                "--- a/ext/camel/client-console/pom.xml",
                "+++ b/ext/camel/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/common-lib/pom.xml b/ext/camel/common-lib/pom.xml",
                "index 89f63e1738..49c5976de7 100644",
                "--- a/ext/camel/common-lib/pom.xml",
                "+++ b/ext/camel/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/logic/pom.xml b/ext/camel/logic/pom.xml",
                "index 3faba9607b..56dbb45f30 100644",
                "--- a/ext/camel/logic/pom.xml",
                "+++ b/ext/camel/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/persistence-api/pom.xml b/ext/camel/persistence-api/pom.xml",
                "index f019dcf191..4b1ba9e102 100644",
                "--- a/ext/camel/persistence-api/pom.xml",
                "+++ b/ext/camel/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/persistence-jpa/pom.xml b/ext/camel/persistence-jpa/pom.xml",
                "index e84622ddbd..6c0cec8b92 100644",
                "--- a/ext/camel/persistence-jpa/pom.xml",
                "+++ b/ext/camel/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/pom.xml b/ext/camel/pom.xml",
                "index 0990756883..eac7b29278 100644",
                "--- a/ext/camel/pom.xml",
                "+++ b/ext/camel/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/provisioning-api/pom.xml b/ext/camel/provisioning-api/pom.xml",
                "index 4b6bdc232d..66dfe3a165 100644",
                "--- a/ext/camel/provisioning-api/pom.xml",
                "+++ b/ext/camel/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/provisioning-camel/pom.xml b/ext/camel/provisioning-camel/pom.xml",
                "index d0d1b672c0..1117f22a95 100644",
                "--- a/ext/camel/provisioning-camel/pom.xml",
                "+++ b/ext/camel/provisioning-camel/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/rest-api/pom.xml b/ext/camel/rest-api/pom.xml",
                "index 2317b2c8bc..f2a6693464 100644",
                "--- a/ext/camel/rest-api/pom.xml",
                "+++ b/ext/camel/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/rest-cxf/pom.xml b/ext/camel/rest-cxf/pom.xml",
                "index 59d5a43db7..e9a8641c01 100644",
                "--- a/ext/camel/rest-cxf/pom.xml",
                "+++ b/ext/camel/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/client-elasticsearch/pom.xml b/ext/elasticsearch/client-elasticsearch/pom.xml",
                "index dca48abe4c..a296909814 100644",
                "--- a/ext/elasticsearch/client-elasticsearch/pom.xml",
                "+++ b/ext/elasticsearch/client-elasticsearch/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/persistence-jpa/pom.xml b/ext/elasticsearch/persistence-jpa/pom.xml",
                "index fb57e73f23..b66f8e94f5 100644",
                "--- a/ext/elasticsearch/persistence-jpa/pom.xml",
                "+++ b/ext/elasticsearch/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/pom.xml b/ext/elasticsearch/pom.xml",
                "index 9d23f51195..d78c2433c8 100644",
                "--- a/ext/elasticsearch/pom.xml",
                "+++ b/ext/elasticsearch/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/provisioning-java/pom.xml b/ext/elasticsearch/provisioning-java/pom.xml",
                "index c36183625a..79b8d5acd3 100644",
                "--- a/ext/elasticsearch/provisioning-java/pom.xml",
                "+++ b/ext/elasticsearch/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/agent/pom.xml b/ext/oidcclient/agent/pom.xml",
                "index b53e388ed8..3a790d1ab6 100644",
                "--- a/ext/oidcclient/agent/pom.xml",
                "+++ b/ext/oidcclient/agent/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/client-console/pom.xml b/ext/oidcclient/client-console/pom.xml",
                "index ba6ec5a1e1..0164fd461e 100644",
                "--- a/ext/oidcclient/client-console/pom.xml",
                "+++ b/ext/oidcclient/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/client-enduser/pom.xml b/ext/oidcclient/client-enduser/pom.xml",
                "index 05265a567b..1ad6e1004d 100644",
                "--- a/ext/oidcclient/client-enduser/pom.xml",
                "+++ b/ext/oidcclient/client-enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/common-lib/pom.xml b/ext/oidcclient/common-lib/pom.xml",
                "index 3b58885da3..e453578c1c 100644",
                "--- a/ext/oidcclient/common-lib/pom.xml",
                "+++ b/ext/oidcclient/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/logic/pom.xml b/ext/oidcclient/logic/pom.xml",
                "index f2e9eb1ded..d136d682b0 100644",
                "--- a/ext/oidcclient/logic/pom.xml",
                "+++ b/ext/oidcclient/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/persistence-api/pom.xml b/ext/oidcclient/persistence-api/pom.xml",
                "index 0e0792ce0f..25642940ad 100644",
                "--- a/ext/oidcclient/persistence-api/pom.xml",
                "+++ b/ext/oidcclient/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/persistence-jpa/pom.xml b/ext/oidcclient/persistence-jpa/pom.xml",
                "index 2a72bad14d..dd756ddc08 100644",
                "--- a/ext/oidcclient/persistence-jpa/pom.xml",
                "+++ b/ext/oidcclient/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/pom.xml b/ext/oidcclient/pom.xml",
                "index 9b70a75446..874ee20ba3 100644",
                "--- a/ext/oidcclient/pom.xml",
                "+++ b/ext/oidcclient/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/provisioning-api/pom.xml b/ext/oidcclient/provisioning-api/pom.xml",
                "index e85224e38a..5281283ee5 100644",
                "--- a/ext/oidcclient/provisioning-api/pom.xml",
                "+++ b/ext/oidcclient/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/provisioning-java/pom.xml b/ext/oidcclient/provisioning-java/pom.xml",
                "index f21d5c193f..ed128bf986 100644",
                "--- a/ext/oidcclient/provisioning-java/pom.xml",
                "+++ b/ext/oidcclient/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/rest-api/pom.xml b/ext/oidcclient/rest-api/pom.xml",
                "index 0283487cfe..edccfebb96 100644",
                "--- a/ext/oidcclient/rest-api/pom.xml",
                "+++ b/ext/oidcclient/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/rest-cxf/pom.xml b/ext/oidcclient/rest-cxf/pom.xml",
                "index abe2f75494..2f8c077694 100644",
                "--- a/ext/oidcclient/rest-cxf/pom.xml",
                "+++ b/ext/oidcclient/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/pom.xml b/ext/pom.xml",
                "index 9407b6a046..5f746c2722 100644",
                "--- a/ext/pom.xml",
                "+++ b/ext/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/agent/pom.xml b/ext/saml2sp/agent/pom.xml",
                "index 95994eb847..730dbe36a4 100644",
                "--- a/ext/saml2sp/agent/pom.xml",
                "+++ b/ext/saml2sp/agent/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/client-console/pom.xml b/ext/saml2sp/client-console/pom.xml",
                "index 06f2d4ee64..066df67b8e 100644",
                "--- a/ext/saml2sp/client-console/pom.xml",
                "+++ b/ext/saml2sp/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/client-enduser/pom.xml b/ext/saml2sp/client-enduser/pom.xml",
                "index 351a7c7724..cf7d8a7e10 100644",
                "--- a/ext/saml2sp/client-enduser/pom.xml",
                "+++ b/ext/saml2sp/client-enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/common-lib/pom.xml b/ext/saml2sp/common-lib/pom.xml",
                "index c40e69bee1..d7c4b048d6 100644",
                "--- a/ext/saml2sp/common-lib/pom.xml",
                "+++ b/ext/saml2sp/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/logic/pom.xml b/ext/saml2sp/logic/pom.xml",
                "index 4bdf7351cb..57f3c7b4e2 100644",
                "--- a/ext/saml2sp/logic/pom.xml",
                "+++ b/ext/saml2sp/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/persistence-api/pom.xml b/ext/saml2sp/persistence-api/pom.xml",
                "index f67ae78da9..92fade39fd 100644",
                "--- a/ext/saml2sp/persistence-api/pom.xml",
                "+++ b/ext/saml2sp/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/persistence-jpa/pom.xml b/ext/saml2sp/persistence-jpa/pom.xml",
                "index 21ddfe935c..d434631270 100644",
                "--- a/ext/saml2sp/persistence-jpa/pom.xml",
                "+++ b/ext/saml2sp/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/pom.xml b/ext/saml2sp/pom.xml",
                "index a47fb27f85..c728088b9c 100644",
                "--- a/ext/saml2sp/pom.xml",
                "+++ b/ext/saml2sp/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/provisioning-api/pom.xml b/ext/saml2sp/provisioning-api/pom.xml",
                "index 307df67c78..633f26dd99 100644",
                "--- a/ext/saml2sp/provisioning-api/pom.xml",
                "+++ b/ext/saml2sp/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/provisioning-java/pom.xml b/ext/saml2sp/provisioning-java/pom.xml",
                "index 59044d5f69..b1b59793d5 100644",
                "--- a/ext/saml2sp/provisioning-java/pom.xml",
                "+++ b/ext/saml2sp/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/rest-api/pom.xml b/ext/saml2sp/rest-api/pom.xml",
                "index a1213feed7..6270333669 100644",
                "--- a/ext/saml2sp/rest-api/pom.xml",
                "+++ b/ext/saml2sp/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/rest-cxf/pom.xml b/ext/saml2sp/rest-cxf/pom.xml",
                "index 9d445aeba1..3105a570df 100644",
                "--- a/ext/saml2sp/rest-cxf/pom.xml",
                "+++ b/ext/saml2sp/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/client-console/pom.xml b/ext/scimv2/client-console/pom.xml",
                "index 131045bb10..9d94ca7339 100644",
                "--- a/ext/scimv2/client-console/pom.xml",
                "+++ b/ext/scimv2/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/common-lib/pom.xml b/ext/scimv2/common-lib/pom.xml",
                "index cb1b805a11..c81453a6a5 100644",
                "--- a/ext/scimv2/common-lib/pom.xml",
                "+++ b/ext/scimv2/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/logic/pom.xml b/ext/scimv2/logic/pom.xml",
                "index f99883c9e7..fe1a4b48b7 100644",
                "--- a/ext/scimv2/logic/pom.xml",
                "+++ b/ext/scimv2/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/pom.xml b/ext/scimv2/pom.xml",
                "index e1c01e439f..669128686f 100644",
                "--- a/ext/scimv2/pom.xml",
                "+++ b/ext/scimv2/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/rest-api/pom.xml b/ext/scimv2/rest-api/pom.xml",
                "index 3be809c210..4f316191cd 100644",
                "--- a/ext/scimv2/rest-api/pom.xml",
                "+++ b/ext/scimv2/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/rest-cxf/pom.xml b/ext/scimv2/rest-cxf/pom.xml",
                "index 28ae2e8a2d..9be79cb84f 100644",
                "--- a/ext/scimv2/rest-cxf/pom.xml",
                "+++ b/ext/scimv2/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/scim-rest-api/pom.xml b/ext/scimv2/scim-rest-api/pom.xml",
                "index fdb0b296af..b99f473fc1 100644",
                "--- a/ext/scimv2/scim-rest-api/pom.xml",
                "+++ b/ext/scimv2/scim-rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/scim-rest-cxf/pom.xml b/ext/scimv2/scim-rest-cxf/pom.xml",
                "index 278901e100..fb82b878aa 100644",
                "--- a/ext/scimv2/scim-rest-cxf/pom.xml",
                "+++ b/ext/scimv2/scim-rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/swagger-ui/pom.xml b/ext/swagger-ui/pom.xml",
                "index f9992c3a15..a04efe417f 100644",
                "--- a/ext/swagger-ui/pom.xml",
                "+++ b/ext/swagger-ui/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/build-tools/pom.xml b/fit/build-tools/pom.xml",
                "index 046f0c92e0..037696e609 100644",
                "--- a/fit/build-tools/pom.xml",
                "+++ b/fit/build-tools/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/console-reference/pom.xml b/fit/console-reference/pom.xml",
                "index 47478d4bc7..178e63dbc3 100644",
                "--- a/fit/console-reference/pom.xml",
                "+++ b/fit/console-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index f11042135a..abffdfbfda 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/enduser-reference/pom.xml b/fit/enduser-reference/pom.xml",
                "index f11f097872..a7a6fbf22b 100644",
                "--- a/fit/enduser-reference/pom.xml",
                "+++ b/fit/enduser-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/pom.xml b/fit/pom.xml",
                "index 38095a044f..bd3e35f468 100644",
                "--- a/fit/pom.xml",
                "+++ b/fit/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "index c1a3af3365..43c106dede 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide-eclipse</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "     <relativePath>../../</relativePath>",
                "diff --git a/ide/eclipse/pom.xml b/ide/eclipse/pom.xml",
                "index d6ef24486c..978eaee3fd 100644",
                "--- a/ide/eclipse/pom.xml",
                "+++ b/ide/eclipse/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "index 3d599a3584..9d6429488a 100644",
                "--- a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "+++ b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide-eclipse</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "     <relativePath>../../</relativePath>",
                "diff --git a/ide/netbeans/pom.xml b/ide/netbeans/pom.xml",
                "index 8a122459dc..4f8e63dced 100644",
                "--- a/ide/netbeans/pom.xml",
                "+++ b/ide/netbeans/pom.xml",
                "@@ -22,3 +22,3 @@ under the License.",
                "     <artifactId>syncope-ide</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ide/pom.xml b/ide/pom.xml",
                "index 461efef8fa..362a938d9c 100644",
                "--- a/ide/pom.xml",
                "+++ b/ide/pom.xml",
                "@@ -24,3 +24,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/installer/pom.xml b/installer/pom.xml",
                "index a68d0cb85d..f64d9e7ac9 100644",
                "--- a/installer/pom.xml",
                "+++ b/installer/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/pom.xml b/pom.xml",
                "index d47a382577..aad4cfecd5 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@ under the License.",
                "   <artifactId>syncope</artifactId>",
                "-  <version>2.0.10</version>",
                "+  <version>2.0.11-SNAPSHOT</version>",
                "   <packaging>pom</packaging>",
                "@@ -54,3 +54,3 @@ under the License.",
                "     <url>https://git-wip-us.apache.org/repos/asf?p=syncope.git</url>",
                "-    <tag>syncope-2.0.10</tag>",
                "+    <tag>HEAD</tag>",
                "   </scm>",
                "diff --git a/standalone/pom.xml b/standalone/pom.xml",
                "index 6c6bc71913..c186511c24 100644",
                "--- a/standalone/pom.xml",
                "+++ b/standalone/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.10</version>",
                "+    <version>2.0.11-SNAPSHOT</version>",
                "   </parent>"
            ],
            "changed_files": [
                "archetype/pom.xml",
                "client/cli/pom.xml",
                "client/console/pom.xml",
                "client/enduser/pom.xml",
                "client/lib/pom.xml",
                "client/pom.xml",
                "common/lib/pom.xml",
                "common/pom.xml",
                "common/rest-api/pom.xml",
                "core/logic/pom.xml",
                "core/migration/pom.xml",
                "core/persistence-api/pom.xml",
                "core/persistence-jpa/pom.xml",
                "core/pom.xml",
                "core/provisioning-api/pom.xml",
                "core/provisioning-java/pom.xml",
                "core/rest-cxf/pom.xml",
                "core/spring/pom.xml",
                "core/workflow-activiti/pom.xml",
                "core/workflow-api/pom.xml",
                "core/workflow-flowable/pom.xml",
                "core/workflow-java/pom.xml",
                "deb/console/pom.xml",
                "deb/core/pom.xml",
                "deb/enduser/pom.xml",
                "deb/pom.xml",
                "docker/console/pom.xml",
                "docker/core/pom.xml",
                "docker/enduser/pom.xml",
                "docker/pom.xml",
                "ext/camel/client-console/pom.xml",
                "ext/camel/common-lib/pom.xml",
                "ext/camel/logic/pom.xml",
                "ext/camel/persistence-api/pom.xml",
                "ext/camel/persistence-jpa/pom.xml",
                "ext/camel/pom.xml",
                "ext/camel/provisioning-api/pom.xml",
                "ext/camel/provisioning-camel/pom.xml",
                "ext/camel/rest-api/pom.xml",
                "ext/camel/rest-cxf/pom.xml",
                "ext/elasticsearch/client-elasticsearch/pom.xml",
                "ext/elasticsearch/persistence-jpa/pom.xml",
                "ext/elasticsearch/pom.xml",
                "ext/elasticsearch/provisioning-java/pom.xml",
                "ext/oidcclient/agent/pom.xml",
                "ext/oidcclient/client-console/pom.xml",
                "ext/oidcclient/client-enduser/pom.xml",
                "ext/oidcclient/common-lib/pom.xml",
                "ext/oidcclient/logic/pom.xml",
                "ext/oidcclient/persistence-api/pom.xml",
                "ext/oidcclient/persistence-jpa/pom.xml",
                "ext/oidcclient/pom.xml",
                "ext/oidcclient/provisioning-api/pom.xml",
                "ext/oidcclient/provisioning-java/pom.xml",
                "ext/oidcclient/rest-api/pom.xml",
                "ext/oidcclient/rest-cxf/pom.xml",
                "ext/pom.xml",
                "ext/saml2sp/agent/pom.xml",
                "ext/saml2sp/client-console/pom.xml",
                "ext/saml2sp/client-enduser/pom.xml",
                "ext/saml2sp/common-lib/pom.xml",
                "ext/saml2sp/logic/pom.xml",
                "ext/saml2sp/persistence-api/pom.xml",
                "ext/saml2sp/persistence-jpa/pom.xml",
                "ext/saml2sp/pom.xml",
                "ext/saml2sp/provisioning-api/pom.xml",
                "ext/saml2sp/provisioning-java/pom.xml",
                "ext/saml2sp/rest-api/pom.xml",
                "ext/saml2sp/rest-cxf/pom.xml",
                "ext/scimv2/client-console/pom.xml",
                "ext/scimv2/common-lib/pom.xml",
                "ext/scimv2/logic/pom.xml",
                "ext/scimv2/pom.xml",
                "ext/scimv2/rest-api/pom.xml",
                "ext/scimv2/rest-cxf/pom.xml",
                "ext/scimv2/scim-rest-api/pom.xml",
                "ext/scimv2/scim-rest-cxf/pom.xml",
                "ext/swagger-ui/pom.xml",
                "fit/build-tools/pom.xml",
                "fit/console-reference/pom.xml",
                "fit/core-reference/pom.xml",
                "fit/enduser-reference/pom.xml",
                "fit/pom.xml",
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "ide/eclipse/pom.xml",
                "ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "ide/netbeans/pom.xml",
                "ide/pom.xml",
                "installer/pom.xml",
                "pom.xml",
                "standalone/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5030ed514c340c2ca0c05184769f385ebdc6707b"
                ],
                [
                    "no-tag",
                    "a2d2eb833445bade7cf04339595461f5a452ea4f"
                ],
                [
                    "no-tag",
                    "862e17d98fb07072dbfb0b5f38e8fbfec80b8672"
                ],
                [
                    "no-tag",
                    "1fb340370e0384f385d100929fdda21f65898470"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3d757abe4d30d451f39a026e7c5b50bb16f401d1",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1533223949,
            "hunks": 5,
            "message": "Improvement to Groups wizard step in order to allow panel customization",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java",
                "index d22a2702f0..e9a9b3ec1a 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java",
                "@@ -73,2 +73,6 @@ public class Groups extends WizardStep implements ICondition {",
                "+    protected WebMarkupContainer dyngroupsContainer;",
                "+",
                "+    protected WebMarkupContainer dynrealmsContainer;",
                "+",
                "     public <T extends AnyTO> Groups(final AnyWrapper<T> modelObject, final boolean templateMode) {",
                "@@ -96,3 +100,3 @@ public class Groups extends WizardStep implements ICondition {",
                "-        WebMarkupContainer dyngroupsContainer = new WebMarkupContainer(\"dyngroupsContainer\");",
                "+        dyngroupsContainer = new WebMarkupContainer(\"dyngroupsContainer\");",
                "         dyngroupsContainer.setOutputMarkupId(true);",
                "@@ -197,3 +201,6 @@ public class Groups extends WizardStep implements ICondition {",
                "-        add(new AjaxPalettePanel.Builder<String>().build(\"dynrealms\",",
                "+        dynrealmsContainer = new WebMarkupContainer(\"dynrealmsContainer\");",
                "+        dynrealmsContainer.setOutputMarkupId(true);",
                "+        dynrealmsContainer.setOutputMarkupPlaceholderTag(true);",
                "+        dynrealmsContainer.add(new AjaxPalettePanel.Builder<String>().build(\"dynrealms\",",
                "                 new PropertyModel<List<String>>(anyTO, \"dynRealms\"),",
                "@@ -204,2 +211,3 @@ public class Groups extends WizardStep implements ICondition {",
                "                 hideLabel().setEnabled(false).setOutputMarkupId(true));",
                "+        add(dynrealmsContainer);",
                "diff --git a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Groups.html b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Groups.html",
                "index 10b6524410..4cf95ab0b1 100644",
                "--- a/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Groups.html",
                "+++ b/client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Groups.html",
                "@@ -47,11 +47,13 @@ under the License.",
                "-    <div class=\"col-xs-12\">",
                "-      <div class=\"box\">",
                "-        <div class=\"box-header\">",
                "-          <h3 class=\"box-title\">",
                "-            <wicket:message key=\"dynrealms.palette\">[DYNAMIC REALMS]</wicket:message>",
                "-          </h3>",
                "-        </div>",
                "-        <div class=\"box-body\">",
                "-          <span wicket:id=\"dynrealms\">[DYNAMIC GROUPS]</span>",
                "+    <div class=\"col-xs-12\" wicket:id=\"dynrealmsContainer\">",
                "+      <div class=\"col-xs-12\">",
                "+        <div class=\"box\">",
                "+          <div class=\"box-header\">",
                "+            <h3 class=\"box-title\">",
                "+              <wicket:message key=\"dynrealms.palette\">[DYNAMIC REALMS]</wicket:message>",
                "+            </h3>",
                "+          </div>",
                "+          <div class=\"box-body\">",
                "+            <span wicket:id=\"dynrealms\">[DYNAMIC GROUPS]</span>",
                "+          </div>",
                "         </div>"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java",
                "client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Groups.html"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e5355f4d45ea3d54d8ac3ec20b480b65719092c4"
                ],
                [
                    "no-tag",
                    "1ce4655c3e5eecccd0c954e31b3fdd5f08d6896b"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, html",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f5a1b5b791dc5e61a91b9819f01e8bfa248d311a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539350185,
            "hunks": 13,
            "message": "Getting some nice ConnId 1.5 features onboard",
            "diff": [
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java",
                "index e5a79390d2..09de13cf89 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java",
                "@@ -201,3 +201,3 @@ public interface Connector {",
                "     /**",
                "-     * Validate a connector instance.",
                "+     * Validate connector instance.",
                "      */",
                "@@ -206,3 +206,3 @@ public interface Connector {",
                "     /**",
                "-     * Check connection to resource.",
                "+     * Check connection.",
                "      */",
                "@@ -210,2 +210,7 @@ public interface Connector {",
                "+    /**",
                "+     * Dispose of any resources associated with connector instance.",
                "+     */",
                "+    void dispose();",
                "+",
                "     /**",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "index 1608d83f1e..44dddaa86b 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "@@ -96,4 +96,4 @@ public class ConnectorFacadeProxy implements Connector {",
                "-        ConnIdBundleManager connIdBundleManager = ApplicationContextProvider.getBeanFactory().getBean(",
                "-                ConnIdBundleManager.class);",
                "+        ConnIdBundleManager connIdBundleManager =",
                "+                ApplicationContextProvider.getBeanFactory().getBean(ConnIdBundleManager.class);",
                "         ConnectorInfo info = connIdBundleManager.getConnectorInfo(connInstance).getRight();",
                "@@ -102,2 +102,5 @@ public class ConnectorFacadeProxy implements Connector {",
                "         APIConfiguration apiConfig = info.createDefaultAPIConfiguration();",
                "+        if (connInstance.getDisplayName() != null) {",
                "+            apiConfig.setInstanceName(connInstance.getDisplayName());",
                "+        }",
                "         // enable filtered results handler in validation mode",
                "@@ -499,2 +502,7 @@ public class ConnectorFacadeProxy implements Connector {",
                "+    @Override",
                "+    public void dispose() {",
                "+        connector.dispose();",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java",
                "index 32f22fbb05..0d4bcde56c 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java",
                "@@ -86,3 +86,3 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory, Sy",
                "-        return (Connector) ApplicationContextProvider.getBeanFactory().getBean(getBeanName(resource));",
                "+        return ApplicationContextProvider.getBeanFactory().getBean(getBeanName(resource), Connector.class);",
                "     }",
                "@@ -115,3 +115,3 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory, Sy",
                "-        for (ConnConfProperty prop : override.getConf()) {",
                "+        override.getConf().forEach(prop -> {",
                "             if (prop.isOverridable()) {",
                "@@ -121,11 +121,11 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory, Sy",
                "             }",
                "-        }",
                "+        });",
                "         // add override properties",
                "-        for (ConnConfProperty prop : confOverride) {",
                "-            if (overridable.containsKey(prop.getSchema().getName()) && !prop.getValues().isEmpty()) {",
                "-                conf.add(prop);",
                "-                overridable.remove(prop.getSchema().getName());",
                "-            }",
                "-        }",
                "+        confOverride.stream().",
                "+                filter(prop -> overridable.containsKey(prop.getSchema().getName()) && !prop.getValues().isEmpty()).",
                "+                forEach(prop -> {",
                "+                    conf.add(prop);",
                "+                    overridable.remove(prop.getSchema().getName());",
                "+                });",
                "@@ -192,2 +192,3 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory, Sy",
                "                 registerConnector(resource);",
                "+",
                "                 connectors++;",
                "@@ -209,3 +210,6 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory, Sy",
                "                 LOG.info(\"Unegistering resource-connector pair {}-{}\", resource, resource.getConnector());",
                "+",
                "+                getConnector(resource).dispose();",
                "                 unregisterConnector(beanName);",
                "+",
                "                 connectors++;"
            ],
            "changed_files": [
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b9cb8e55328ba9924feb6214ab61a2ffae4f7a52"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: connector",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dc1f9c33012302fa307ffd4cffb7cbaec28c2c67",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541155694,
            "hunks": 16,
            "message": "Updating docs with OpenJPA customization",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/architecture/core.adoc b/src/main/asciidoc/reference-guide/architecture/core.adoc",
                "index 88b0ce3d10..c91ff53a49 100644",
                "--- a/src/main/asciidoc/reference-guide/architecture/core.adoc",
                "+++ b/src/main/asciidoc/reference-guide/architecture/core.adoc",
                "@@ -38,3 +38,3 @@ which enables in-browser access to all the REST endpoints defined.",
                " At a technical level, the RESTful interface is a fully-compliant ",
                "-https://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services[JAX-RS 2.0^] implementation based on ",
                "+https://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services[JAX-RS 2.1^] implementation based on ",
                " http://cxf.apache.org[Apache CXF^], natively dealing either with JSON, YAML and XML payloads.",
                "@@ -89,5 +89,6 @@ https://camunda.org/[Camunda^] or http://jbpm.jboss.org/[jBPM^], can be written",
                " All data (users, groups, attributes, resources, ...) is internally managed at a high level using a standard ",
                "-https://en.wikipedia.org/wiki/Java_Persistence_API[JPA 2.0^] approach. The data is persisted into an underlying ",
                "+https://en.wikipedia.org/wiki/Java_Persistence_API[JPA 2.0^] approach based on http://openjpa.apache.org[Apache OpenJPA^].",
                "+The data is persisted into an underlying ",
                " database, referred to as *_Internal Storage_*. Consistency is ensured via the comprehensive",
                "-http://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/transaction.html[transaction management^] ",
                "+https://docs.spring.io/spring/docs/5.1.x/spring-framework-reference/data-access.html#transaction[transaction management^] ",
                " provided by the Spring Framework.",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "index 44d52ca9ad..0f3154f8df 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "@@ -32,5 +32,4 @@ adding new features or replacing existing components.",
                " [[override-behavior]]",
                "-[TIP]",
                " .Override behavior",
                "-====",
                "+****",
                " As a rule of thumb, any file of the local project will take precedence over a file with the same name in the same",
                "@@ -62,4 +61,36 @@ endif::[]",
                "-This general behavior might have exceptions, as highlighted below.",
                "-====",
                "+This general behavior might have exceptions: when you need to customize one of the Spring context definitions, say",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/spring/src/main/resources/securityContext.xml[securityContext.xml^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/2_1_X/core/spring/src/main/resources/securityContext.xml[securityContext.xml^]",
                "+endif::[]",
                "+for example, you will also need to replace the following text in `core/src/main/webapp/WEB-INF/web.xml`,",
                "+",
                "+....",
                "+classpath*:/coreContext.xml",
                "+classpath*:/securityContext.xml",
                "+classpath*:/logicContext.xml",
                "+classpath*:/restCXFContext.xml",
                "+classpath*:/persistenceContext.xml",
                "+classpath*:/provisioning*Context.xml",
                "+classpath*:/workflow*Context.xml",
                "+....",
                "+",
                "+with",
                "+",
                "+....",
                "+classpath*:/coreContext.xml",
                "+classpath:/securityContext.xml",
                "+classpath*:/logicContext.xml",
                "+classpath*:/restCXFContext.xml",
                "+classpath*:/persistenceContext.xml",
                "+classpath*:/provisioning*Context.xml",
                "+classpath*:/workflow*Context.xml",
                "+....",
                "+",
                "+to be sure that `core/src/main/resources/securityContext.xml` is picked up. +",
                "+Please also note that the actual list of Spring context files to include might depend on the configured extensions.",
                "+****",
                "@@ -197,50 +228,12 @@ be provided - under `core/src/main/java` if Java - for the following components:",
                "-[[new-rest-endpoints]]",
                "-[TIP]",
                "-.New REST endpoints",
                "-====",
                "-Adding a new REST endpoint involves several operations:",
                "+[discrete]",
                "+===== Customize OpenJPA settings",
                "-. create - in an extension's `rest-api` module or under `common` otherwise - a Java interface with package",
                "-`org.apache.syncope.common.rest.api.service` and proper JAX-RS annotations; check",
                "-ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java[CamelRouteService^]",
                "-endif::[]",
                "-ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/2_1_X/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java[CamelRouteService^]",
                "-endif::[]",
                "-for reference;",
                "-. if needed, define supporting payload objects - in an extension's `common-lib` module or under `common` otherwise;",
                "-check",
                "-ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/to/CamelRouteTO.java[CamelRouteTO^]",
                "-endif::[]",
                "-ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/2_1_X/ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/to/CamelRouteTO.java[CamelRouteTO^]",
                "-endif::[]",
                "-for reference;",
                "-. implement - in an extension's `rest-cxf` module or under `core` otherwise -  the interface defined above in a Java",
                "-class with package `org.apache.syncope.core.rest.cxf.service`; check",
                "-ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/camel/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/CamelRouteServiceImpl.java[CamelRouteServiceImpl^]",
                "-endif::[]",
                "-ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/2_1_X/ext/camel/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/CamelRouteServiceImpl.java[CamelRouteServiceImpl^]",
                "-endif::[]",
                "-for reference.",
                "+Apache OpenJPA is at the core of the <<persistence,persistence>> layer; its configuration can be tweaked under several",
                "+aspects - including http://openjpa.apache.org/builds/3.0.0/apache-openjpa/docs/ref_guide_caching.html[caching^] for",
                "+example, to best suit the various environments.",
                "-By following such conventions, the new REST endpoint will be automatically picked up alongside the default services.",
                "-====",
                "+In case you need to alter the standard settings provided, proceed as follows.",
                "-[WARNING]",
                "-====",
                "-The <<override-behavior,override behavior>> might have exceptions; if you need to customize one of the",
                "-Spring context definitions. For example, if you want to customize ",
                "-ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/spring/src/main/resources/securityContext.xml[securityContext.xml^]",
                "-endif::[]",
                "-ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/2_1_X/core/spring/src/main/resources/securityContext.xml[securityContext.xml^]",
                "-endif::[]",
                "-, you will also need to replace the following text in `core/src/main/webapp/WEB-INF/web.xml`,",
                "+Replace",
                "@@ -260,6 +253,6 @@ with",
                " classpath*:/coreContext.xml",
                "-classpath:/securityContext.xml",
                "+classpath*:/securityContext.xml",
                " classpath*:/logicContext.xml",
                "-classpath*:/restCXFContext.xml",
                "-classpath*:/persistenceContext.xml",
                "+classpath:/restCXFContext.xml",
                "+classpath:/persistenceContext.xml",
                " classpath*:/provisioning*Context.xml",
                "@@ -268,4 +261,51 @@ classpath*:/workflow*Context.xml",
                "-to be sure that `core/src/main/resources/securityContext.xml` is picked up. +",
                "-Please also note that the actual list of Spring context files to include might depend on the configured extensions.",
                "+in `core/src/main/webapp/WEB-INF/web.xml`.",
                "+",
                "+Download",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa/src/main/resources/persistenceContext.xml[persistenceContext.xml^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/2_1_X/core/persistence-jpa/src/main/resources/persistenceContext.xml[persistenceContext.xml^]",
                "+endif::[]",
                "+and save it under `core/src/main/resources/`.",
                "+",
                "+Download",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa/src/main/resources/domains.xml",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/2_1_X/core/persistence-jpa/src/main/resources/domains.xml[domains.xml^]",
                "+endif::[]",
                "+and save it under `core/src/main/resources/`.",
                "+",
                "+Now you can add any OpenJPA configuration property in one of domains configuration files as",
                "+`core/src/main/resources/domains/MasterDomain.xml` as follows, for the `EntityManagerFactory` bean:",
                "+",
                "+[source,xml]",
                "+....",
                "+<property name=\"jpaPropertyMap\">",
                "+  <map>",
                "+    <entry key=\"openjpa.DataCache\" value=\"true(Lru=true)\"/>",
                "+    <entry key=\"openjpa.QueryCache\" value=\"true(Lru=true)\"/>",
                "+  </map>",
                "+</property>",
                "+....",
                "+",
                "+[WARNING]",
                "+====",
                "+The OpenJPA documentation's XML snippets refer to a different configuration style; for example, when used in",
                "+one of domains configuration files as `MasterDomain.xml`, this:",
                "+",
                "+[source,xml]",
                "+....",
                "+<property name=\"openjpa.DataCache\" value=\"true\"/>",
                "+....",
                "+",
                "+becomes:",
                "+",
                "+[source,xml]",
                "+....",
                "+<entry key=\"openjpa.DataCache\" value=\"true\"/>",
                "+....",
                " ====",
                "@@ -468,2 +508,36 @@ Add the following dependencies to `core/pom.xml`:",
                "+[discrete]",
                "+===== New REST endpoints",
                "+Adding a new REST endpoint involves several operations:",
                "+",
                "+. create - in an extension's `rest-api` module or under `common` otherwise - a Java interface with package",
                "+`org.apache.syncope.common.rest.api.service` and proper JAX-RS annotations; check",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java[CamelRouteService^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/2_1_X/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java[CamelRouteService^]",
                "+endif::[]",
                "+for reference;",
                "+. if needed, define supporting payload objects - in an extension's `common-lib` module or under `common` otherwise;",
                "+check",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/to/CamelRouteTO.java[CamelRouteTO^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/2_1_X/ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/to/CamelRouteTO.java[CamelRouteTO^]",
                "+endif::[]",
                "+for reference;",
                "+. implement - in an extension's `rest-cxf` module or under `core` otherwise -  the interface defined above in a Java",
                "+class with package `org.apache.syncope.core.rest.cxf.service`; check",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/camel/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/CamelRouteServiceImpl.java[CamelRouteServiceImpl^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/2_1_X/ext/camel/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/CamelRouteServiceImpl.java[CamelRouteServiceImpl^]",
                "+endif::[]",
                "+for reference.",
                "+",
                "+By following such conventions, the new REST endpoint will be automatically picked up alongside the default services.",
                "+",
                " [[customization-console]]",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/highavailability.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/highavailability.adoc",
                "index 6aee40e29e..c79af0cfa3 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/highavailability.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/highavailability.adoc",
                "@@ -42,3 +42,3 @@ see the OpenJPA documentation for reference.",
                " The http://openjpa.apache.org/builds/3.0.0/apache-openjpa/docs/ref_guide_event.html[OpenJPA documentation^]'s XML",
                "-snippets refer to a different configuration style; for example, when used in persistence.properties`, this:",
                "+snippets refer to a different configuration style; for example, when used in `persistence.properties`, this:",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "index 7b77408f51..b8e0b818f5 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "@@ -190,6 +190,6 @@ Download",
                " ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/fit/core-reference/src/main/resources/jboss/domains.xml[domains.xml^]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa/src/main/resources/persistenceContext.xml[persistenceContext.xml^]",
                " endif::[]",
                " ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/2_1_X/fit/core-reference/src/main/resources/jboss/domains.xml[domains.xml^]",
                "+https://github.com/apache/syncope/blob/2_1_X/core/persistence-jpa/src/main/resources/persistenceContext.xml[persistenceContext.xml^]",
                " endif::[]",
                "@@ -199,6 +199,6 @@ Download",
                " ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa/src/main/resources/persistenceContext.xml[persistenceContext.xml^]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/fit/core-reference/src/main/resources/jboss/domains.xml[domains.xml^]",
                " endif::[]",
                " ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/2_1_X/core/persistence-jpa/src/main/resources/persistenceContext.xml[persistenceContext.xml^]",
                "+https://github.com/apache/syncope/blob/2_1_X/fit/core-reference/src/main/resources/jboss/domains.xml[domains.xml^]",
                " endif::[]"
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/architecture/core.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/highavailability.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "89c6df7e9c3970b955bc56a015a45193c9280ecc"
                ],
                [
                    "no-tag",
                    "c995e5d9e039cfe02d74ee6d6535d4a92dfbc7d3"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: contain, admin, administration",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b8f4f0bc62f4fbdb2f127afa4cd662ab08bd9f34",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534935864,
            "hunks": 2,
            "message": "Adding convenience methods to get / set variables from workflow adapter",
            "diff": [
                "diff --git a/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java b/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java",
                "index 6d32464a4b..a919107e82 100644",
                "--- a/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java",
                "+++ b/core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java",
                "@@ -245,2 +245,10 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {",
                "+    public <T> T getVariable(final String executionId, final String variableName, final Class<T> variableClass) {",
                "+        return engine.getRuntimeService().getVariable(executionId, variableName, variableClass);",
                "+    }",
                "+",
                "+    public void setVariable(final String executionId, final String variableName, final Object value) {",
                "+        engine.getRuntimeService().setVariable(executionId, variableName, value);",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "index 1e651dbdfa..cb7d406310 100644",
                "--- a/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "+++ b/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java",
                "@@ -244,2 +244,10 @@ public class FlowableUserWorkflowAdapter extends AbstractUserWorkflowAdapter {",
                "+    public <T> T getVariable(final String executionId, final String variableName, final Class<T> variableClass) {",
                "+        return engine.getRuntimeService().getVariable(executionId, variableName, variableClass);",
                "+    }",
                "+",
                "+    public void setVariable(final String executionId, final String variableName, final Object value) {",
                "+        engine.getRuntimeService().setVariable(executionId, variableName, value);",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java",
                "core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "bde77d8739abb1765c3dec45f3ea45064d1b9b7e"
                ],
                [
                    "no-tag",
                    "01bd38302505ace703b481a10b64a74bf45ce534"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "68b3b89234e5d16a63eba71402320da4dae56902",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541152743,
            "hunks": 7,
            "message": "SYNCOPE-1390: Pull Realms: pull task with Unmatching Rules: PROVISION shouldn't create propagation task (#86)",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "index c315343079..3be65543ff 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "@@ -33,3 +33,2 @@ import org.apache.syncope.common.lib.types.ClientExceptionType;",
                " import org.apache.syncope.common.lib.types.MatchingRule;",
                "-import org.apache.syncope.core.provisioning.api.PropagationByResource;",
                " import org.apache.syncope.common.lib.types.PullMode;",
                "@@ -44,2 +43,3 @@ import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;",
                " import org.apache.syncope.core.persistence.api.entity.task.PullTask;",
                "+import org.apache.syncope.core.provisioning.api.PropagationByResource;",
                " import org.apache.syncope.core.provisioning.api.propagation.PropagationException;",
                "@@ -162,3 +162,3 @@ public class DefaultRealmPullResultHandler",
                "-            create(realmTO, delta, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), result);",
                "+            create(realmTO, delta, UnmatchingRule.ASSIGN, result);",
                "         }",
                "@@ -200,3 +200,3 @@ public class DefaultRealmPullResultHandler",
                "-            create(realmTO, delta, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), result);",
                "+            create(realmTO, delta, UnmatchingRule.PROVISION, result);",
                "         }",
                "@@ -227,3 +227,3 @@ public class DefaultRealmPullResultHandler",
                "             final SyncDelta delta,",
                "-            final String operation,",
                "+            final UnmatchingRule unmatchingRule,",
                "             final ProvisioningReport result)",
                "@@ -241,4 +241,6 @@ public class DefaultRealmPullResultHandler",
                "             }",
                "-            List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "-            taskExecutor.execute(tasks, false);",
                "+            if (unmatchingRule == UnmatchingRule.ASSIGN) {",
                "+                List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "+                taskExecutor.execute(tasks, false);",
                "+            }",
                "@@ -273,3 +275,3 @@ public class DefaultRealmPullResultHandler",
                "-        finalize(operation, resultStatus, null, output, delta);",
                "+        finalize(UnmatchingRule.toEventName(unmatchingRule), resultStatus, null, output, delta);",
                "     }"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1390": ""
            },
            "ghissue_refs": {
                "86": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "2a5ebc988df1d1717835f0195e479736791abf91"
                ],
                [
                    "no-tag",
                    "9d6f89dfe67bf528d161ea3f6ac1c130434004a9"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1390",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 86",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f9d25987170336a941a42acfe287a61653c52bc1",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1542033455,
            "hunks": 13,
            "message": "[SYNCOPE-1019] Fix for 'Must change password' and 'Confirm password reset' pages",
            "diff": [
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/js/services/dynamicTemplateService.js b/client/enduser/src/main/resources/META-INF/resources/app/js/services/dynamicTemplateService.js",
                "index b3348e0220..39a06c5a7e 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/js/services/dynamicTemplateService.js",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/js/services/dynamicTemplateService.js",
                "@@ -47,5 +47,5 @@ angular.module('SyncopeEnduserApp')",
                "             dynTemplateService.getContent = function () {",
                "-              return $http",
                "-                      .get(dynTemplateUrl)",
                "-                      .then(function (response) {",
                "+              return $http.",
                "+                      get(dynTemplateUrl).",
                "+                      then(function (response) {",
                "                         return response.data;",
                "@@ -55,5 +55,5 @@ angular.module('SyncopeEnduserApp')",
                "             dynTemplateService.getGeneralAssetsContent = function (types) {",
                "-              return $http",
                "-                      .get(dynTemplateUrl)",
                "-                      .then(function (response) {",
                "+              return $http.",
                "+                      get(dynTemplateUrl).",
                "+                      then(function (response) {",
                "                         return loadAssets(\"generalAssets\", response.data, types);",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/confirmpasswordreset.html b/client/enduser/src/main/resources/META-INF/resources/app/views/confirmpasswordreset.html",
                "index 8d165f37ef..3fcc5439f6 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/confirmpasswordreset.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/confirmpasswordreset.html",
                "@@ -19,60 +19,3 @@ under the License.",
                " <div ng-cloak class=\"container\">",
                "-  <div ng-controller=\"UserController\">",
                "-",
                "-    <div id=\"form-container\" class=\"col-md-6 col-md-offset-3\">",
                "-",
                "-      <div>",
                "-        <div class=\"page-header\">",
                "-          <span>{{'CONFIRM_PASSWORD_RESET'| translate}}</span>",
                "-        </div>",
                "-        <div class=\"breadcrumb-header text-center\">",
                "-",
                "-          <div class=\"row\">            ",
                "-            <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb col-md-12 col-md-offset-3\">",
                "-              <a href=\"#/self\" class=\"btn btn-secondary btn-default\"><i class=\"fa fa-home\"></i></a>",
                "-              <!--add class breadcrumb-disabled-link to buttons to prevent click-->",
                "-              <a ui-sref-active=\"active\" class=\"btn btn-secondary btn-default\">Password reset</a>",
                "-            </div>",
                "-          </div>",
                "-        </div>",
                "-        <form class=\"signup-form\" name=\"confirmPasswordResetForm\" ng-submit=\"confirmPasswordReset(user, $event)\" ",
                "-              novalidate>",
                "-",
                "-          <div id=\"form-views\" ui-view>",
                "-            <div id=\"attribute\" class=\"form-group\">",
                "-              <label for=\"user.password\">Password</label>",
                "-              <input type=\"password\" class=\"form-control\" name=\"password\" ng-model=\"user.password\" placeholder=\"password\">",
                "-            </div>",
                "-",
                "-            <div id=\"attribute\" class=\"form-group\">",
                "-              <label for=\"confirmPassword\">{{'CONFIRM_PASSWORD'| translate}}</label>",
                "-              <input name=\"password\" type=\"password\" class=\"form-control\" equals=\"user.password\" ",
                "-                     ng-model=\"confirmPassword.value\"",
                "-                     placeholder=\"confirm password\" validate=\"true\">",
                "-              <validation-message name=\"password\"/>",
                "-            </div>",
                "-",
                "-            <div id=\"attribute\" class=\"form-group\">",
                "-              <div class=\"suggestions\">",
                "-                {{'PASSWORD_STRENGTH'| translate}}:",
                "-                <span ng-if=\"passStrength < 50\">{{'INSECURE'| translate}}</span>",
                "-                <span ng-if=\"passStrength >= 50 && passStrength <= 82\">{{'ALMOSTSECURE'| translate}}</span>",
                "-                <span ng-if=\"passStrength > 82\">{{'VERYGOOD'| translate}}</span>",
                "-              </div>",
                "-              <div ng-password-strength=\"user.password\" strength=\"passStrength\" inner-class=\"progress-bar\" ",
                "-                   inner-class-prefix=\"progress-bar-\">",
                "-              </div>",
                "-            </div>",
                "-            <div id=\"attribute\" class=\"form-group row\">",
                "-              <button id=\"resetpassword\" type=\"submit\" ",
                "-                      class=\"btn btn-secondary btn-default float-right\">{{'SUBMIT'| translate}}</button>",
                "-              <div class=\"float-left\">",
                "-                <a id=\"cancel\" href=\"#/self\" class=\"btn btn-danger\">{{'CANCEL'| translate}}</a>",
                "-              </div>",
                "-            </div>",
                "-          </div>",
                "-        </form>",
                "-      </div>",
                "-    </div>",
                "-  </div>",
                "+  <dynamic-template-item type=\"confirm_password_reset\"></dynamic-template-item>",
                " </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/editUser.html b/client/enduser/src/main/resources/META-INF/resources/app/views/editUser.html",
                "index 3d0d013e19..2cae1360d8 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/editUser.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/editUser.html",
                "@@ -19,3 +19,3 @@ under the License.",
                " <div ng-cloak class=\"container\">",
                "-  <dynamic-template-item type=\"edit_user\"/>",
                "+  <dynamic-template-item type=\"edit_user\"></dynamic-template-item>",
                " </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/mustchangepassword.html b/client/enduser/src/main/resources/META-INF/resources/app/views/mustchangepassword.html",
                "index 1245214d80..7c4098d71b 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/mustchangepassword.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/mustchangepassword.html",
                "@@ -19,60 +19,3 @@ under the License.",
                " <div ng-cloak class=\"container\">",
                "-  <div ng-controller=\"UserController\">",
                "-",
                "-    <div id=\"form-container\" class=\"col-md-6 col-md-offset-3\">",
                "-",
                "-      <div>",
                "-        <div class=\"page-header\">",
                "-          <span>{{'PASSWORD_CHANGE_REQUIRED'| translate}}</span>",
                "-        </div>",
                "-        <div class=\"breadcrumb-header text-center\">",
                "-",
                "-          <div class=\"row\">            ",
                "-            <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb col-md-12 col-md-offset-3\">",
                "-              <a class=\"btn btn-secondary btn-default breadcrumb-home\" ng-click=\"logout()\">",
                "-                <i class=\"fa fa-power-off\"style=\"color:red\"></i>",
                "-              </a>",
                "-              <!--add class breadcrumb-disabled-link to buttons to prevent click-->",
                "-              <a ui-sref-active=\"active\" class=\"btn btn-secondary btn-default\">{{'PASSWORD_CHANGE'| translate}}</a>",
                "-            </div>",
                "-          </div>",
                "-        </div>",
                "-        <form class=\"signup-form\" name=\"changePasswordForm\" ng-submit=\"changePassword(user, $event)\" novalidate>",
                "-",
                "-          <div id=\"form-views\" ui-view>",
                "-            <div id=\"attribute\" class=\"form-group\">",
                "-              <label for=\"user.password\">{{'PASSWORD'| translate}}</label>",
                "-              <input type=\"password\" class=\"form-control\" name=\"password\" ng-model=\"user.password\" placeholder=\"password\">",
                "-            </div>",
                "-",
                "-            <div id=\"attribute\" class=\"form-group\">",
                "-              <label for=\"confirmPassword\">{{'CONFIRM_PASSWORD'| translate}}</label>",
                "-              <input name=\"password\" type=\"password\" class=\"form-control\" equals=\"user.password\" ng-model=\"confirmPassword.value\"",
                "-                     placeholder=\"confirm password\" validate=\"true\">",
                "-              <validation-message name=\"password\"/>",
                "-            </div>",
                "-",
                "-            <div id=\"attribute\" class=\"form-group\">",
                "-              <div class=\"suggestions\">",
                "-                {{'PASSWORD_STRENGTH'| translate}}: ",
                "-                <span ng-if=\"passStrength < 50\">{{'NOTSECURE'| translate}}</span>",
                "-                <span ng-if=\"passStrength >= 50 && passStrength <= 82\">{{'ALMOSTSECURE'| translate}}</span>",
                "-                <span ng-if=\"passStrength > 82\">{{'VERYGOOD'| translate}}</span>",
                "-              </div>",
                "-              <div ng-password-strength=\"user.password\" strength=\"passStrength\" inner-class=\"progress-bar\" ",
                "-                   inner-class-prefix=\"progress-bar-\">",
                "-              </div>",
                "-            </div>",
                "-            <div id=\"attribute\" class=\"form-group row\">",
                "-              <button id=\"resetpassword\" type=\"submit\" ",
                "-                      class=\"btn btn-secondary btn-default float-right\">{{'SUBMIT'| translate}}</button>",
                "-              <div class=\"float-left\">",
                "-                <a id=\"cancel\" href=\"#/self\" class=\"btn btn-danger\">{{'CANCEL'| translate}}</a>",
                "-              </div>",
                "-            </div>",
                "-          </div>",
                "-        </form>",
                "-      </div>",
                "-    </div>",
                "-  </div>",
                "+  <dynamic-template-item type=\"must_change_password\"></dynamic-template-item>",
                " </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/passwordreset.html b/client/enduser/src/main/resources/META-INF/resources/app/views/passwordreset.html",
                "index baeee40657..3436283730 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/passwordreset.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/passwordreset.html",
                "@@ -19,3 +19,3 @@ under the License.",
                " <div ng-cloak class=\"container\">",
                "-  <dynamic-template-item type=\"password_reset\"/>",
                "+  <dynamic-template-item type=\"password_reset\"></dynamic-template-item>",
                " </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/self.html b/client/enduser/src/main/resources/META-INF/resources/app/views/self.html",
                "index b7bf74d680..b4147a43c5 100644",
                "--- a/client/enduser/src/main/resources/META-INF/resources/app/views/self.html",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/self.html",
                "@@ -28,3 +28,3 @@ under the License.",
                "     <div ng-cloak class=\"container\">",
                "-      <dynamic-template-item type=\"login\"/>",
                "+      <dynamic-template-item type=\"login\"></dynamic-template-item>",
                "     </div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/templates/confirmPasswordResetTemplate.html b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/confirmPasswordResetTemplate.html",
                "new file mode 100644",
                "index 0000000000..6690689e72",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/confirmPasswordResetTemplate.html",
                "@@ -0,0 +1,83 @@",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<div ng-controller=\"UserController\">",
                "+",
                "+  <div id=\"form-container\" class=\"col-md-6 col-md-offset-3\">",
                "+",
                "+    <div>",
                "+      <div class=\"page-header\">",
                "+        <span>{{'CONFIRM_PASSWORD_RESET'| translate}}</span>",
                "+      </div>",
                "+      <div class=\"breadcrumb-header text-center\">",
                "+",
                "+        <div class=\"row\">            ",
                "+          <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb col-md-12 col-md-offset-3\">",
                "+            <a href=\"#/self\" class=\"btn btn-secondary btn-default\"><i class=\"fa fa-home\"></i></a>",
                "+            <!--add class breadcrumb-disabled-link to buttons to prevent click-->",
                "+            <a ui-sref-active=\"active\" class=\"btn btn-secondary btn-default\">Password reset</a>",
                "+          </div>",
                "+        </div>",
                "+      </div>",
                "+      <form class=\"signup-form\" name=\"confirmPasswordResetForm\" ng-submit=\"confirmPasswordReset(user, $event)\" ",
                "+            novalidate>",
                "+",
                "+        <div id=\"form-views\" ui-view>",
                "+          <div id=\"attribute\" class=\"form-group\">",
                "+            <label for=\"user.password\">Password</label>",
                "+            <input type=\"password\" class=\"form-control\" name=\"password\" ng-model=\"user.password\" placeholder=\"password\">",
                "+          </div>",
                "+",
                "+          <div id=\"attribute\" class=\"form-group\">",
                "+            <label for=\"confirmPassword\">{{'CONFIRM_PASSWORD'| translate}}</label>",
                "+            <input name=\"password\" type=\"password\" class=\"form-control\" equals=\"user.password\" ",
                "+                   ng-model=\"confirmPassword.value\"",
                "+                   placeholder=\"confirm password\" validate=\"true\">",
                "+            <validation-message name=\"password\"/>",
                "+          </div>",
                "+",
                "+          <div id=\"attribute\" class=\"form-group\">",
                "+            <div class=\"suggestions\">",
                "+              {{'PASSWORD_STRENGTH'| translate}}:",
                "+              <span ng-if=\"passStrength < 50\">{{'INSECURE'| translate}}</span>",
                "+              <span ng-if=\"passStrength >= 50 && passStrength <= 82\">{{'ALMOSTSECURE'| translate}}</span>",
                "+              <span ng-if=\"passStrength > 82\">{{'VERYGOOD'| translate}}</span>",
                "+            </div>",
                "+            <div ng-password-strength=\"user.password\" strength=\"passStrength\" inner-class=\"progress-bar\" ",
                "+                 inner-class-prefix=\"progress-bar-\">",
                "+            </div>",
                "+          </div>",
                "+          <div id=\"attribute\" class=\"form-group row\">",
                "+            <div class=\"col-xs-6\">",
                "+              <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\"",
                "+                 tabindex=\"0\" ng-enter=\"logout()\">",
                "+                {{'CANCEL'| translate}}",
                "+              </a>",
                "+            </div>",
                "+            <div class=\"col-xs-6\">",
                "+              <button id=\"resetpassword\" type=\"submit\" tabindex=\"0\"",
                "+                      class=\"btn btn-secondary btn-default float-right nav-button\">",
                "+                {{'SUBMIT'| translate}}",
                "+              </button>",
                "+            </div>",
                "+          </div>",
                "+        </div>",
                "+      </form>",
                "+    </div>",
                "+  </div>",
                "+</div>",
                "diff --git a/client/enduser/src/main/resources/META-INF/resources/app/views/templates/mustChangePasswordTemplate.html b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/mustChangePasswordTemplate.html",
                "new file mode 100644",
                "index 0000000000..c0e0587840",
                "--- /dev/null",
                "+++ b/client/enduser/src/main/resources/META-INF/resources/app/views/templates/mustChangePasswordTemplate.html",
                "@@ -0,0 +1,82 @@",
                "+<!--",
                "+Licensed to the Apache Software Foundation (ASF) under one",
                "+or more contributor license agreements.  See the NOTICE file",
                "+distributed with this work for additional information",
                "+regarding copyright ownership.  The ASF licenses this file",
                "+to you under the Apache License, Version 2.0 (the",
                "+\"License\"); you may not use this file except in compliance",
                "+with the License.  You may obtain a copy of the License at",
                "+",
                "+  http://www.apache.org/licenses/LICENSE-2.0",
                "+",
                "+Unless required by applicable law or agreed to in writing,",
                "+software distributed under the License is distributed on an",
                "+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+KIND, either express or implied.  See the License for the",
                "+specific language governing permissions and limitations",
                "+under the License.",
                "+-->",
                "+<div ng-controller=\"UserController\">",
                "+  <div id=\"form-container\" class=\"col-md-6 col-md-offset-3\">",
                "+",
                "+    <div>",
                "+      <div class=\"page-header\">",
                "+        <span>{{'PASSWORD_CHANGE_REQUIRED'| translate}}</span>",
                "+      </div>",
                "+      <div class=\"breadcrumb-header text-center\">",
                "+",
                "+        <div class=\"row\">            ",
                "+          <div id=\"status-buttons\" class=\"btn-group btn-breadcrumb col-md-12 col-md-offset-3\">",
                "+            <a class=\"btn btn-secondary btn-default breadcrumb-home\" ng-click=\"logout()\">",
                "+              <i class=\"fa fa-power-off\"style=\"color:red\"></i>",
                "+            </a>",
                "+            <!--add class breadcrumb-disabled-link to buttons to prevent click-->",
                "+            <a ui-sref-active=\"active\" class=\"btn btn-secondary btn-default\">{{'PASSWORD_CHANGE'| translate}}</a>",
                "+          </div>",
                "+        </div>",
                "+      </div>",
                "+      <form class=\"signup-form\" name=\"changePasswordForm\" ng-submit=\"changePassword(user, $event)\" novalidate>",
                "+",
                "+        <div id=\"form-views\" ui-view>",
                "+          <div id=\"attribute\" class=\"form-group\">",
                "+            <label for=\"user.password\">{{'PASSWORD'| translate}}</label>",
                "+            <input type=\"password\" class=\"form-control\" name=\"password\" ng-model=\"user.password\" placeholder=\"password\">",
                "+          </div>",
                "+",
                "+          <div id=\"attribute\" class=\"form-group\">",
                "+            <label for=\"confirmPassword\">{{'CONFIRM_PASSWORD'| translate}}</label>",
                "+            <input name=\"password\" type=\"password\" class=\"form-control\" equals=\"user.password\" ng-model=\"confirmPassword.value\"",
                "+                   placeholder=\"confirm password\" validate=\"true\">",
                "+            <validation-message name=\"password\"/>",
                "+          </div>",
                "+",
                "+          <div id=\"attribute\" class=\"form-group\">",
                "+            <div class=\"suggestions\">",
                "+              {{'PASSWORD_STRENGTH'| translate}}: ",
                "+              <span ng-if=\"passStrength < 50\">{{'NOTSECURE'| translate}}</span>",
                "+              <span ng-if=\"passStrength >= 50 && passStrength <= 82\">{{'ALMOSTSECURE'| translate}}</span>",
                "+              <span ng-if=\"passStrength > 82\">{{'VERYGOOD'| translate}}</span>",
                "+            </div>",
                "+            <div ng-password-strength=\"user.password\" strength=\"passStrength\" inner-class=\"progress-bar\" ",
                "+                 inner-class-prefix=\"progress-bar-\">",
                "+            </div>",
                "+          </div>",
                "+          <div id=\"attribute\" class=\"form-group row\">",
                "+            <div class=\"col-xs-6\">",
                "+              <a id=\"cancel\" class=\"btn btn-danger float-left nav-button\" tabindex=\"0\" ng-click=\"logout()\"",
                "+                 tabindex=\"0\" ng-enter=\"logout()\">",
                "+                {{'CANCEL'| translate}}",
                "+              </a>",
                "+            </div>",
                "+            <div class=\"col-xs-6\">",
                "+              <button id=\"resetpassword\" type=\"submit\" tabindex=\"0\"",
                "+                      class=\"btn btn-secondary btn-default float-right nav-button\">",
                "+                {{'SUBMIT'| translate}}",
                "+              </button>",
                "+            </div>",
                "+          </div>",
                "+        </div>",
                "+      </form>",
                "+    </div>",
                "+  </div>",
                "+</div>",
                "diff --git a/client/enduser/src/main/resources/customTemplate.json b/client/enduser/src/main/resources/customTemplate.json",
                "index 9b760b9ac9..e55ed4c86f 100644",
                "--- a/client/enduser/src/main/resources/customTemplate.json",
                "+++ b/client/enduser/src/main/resources/customTemplate.json",
                "@@ -26,2 +26,18 @@",
                "                       ]",
                "+                    },",
                "+            \"must_change_password\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/mustChangePasswordTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\",",
                "+                        \"css/passwordReset.css\"",
                "+                      ]",
                "+                    },",
                "+            \"confirm_password_reset\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/confirmPasswordResetTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\",",
                "+                        \"css/passwordReset.css\"",
                "+                      ]",
                "                     }",
                "diff --git a/fit/enduser-reference/src/main/resources/customTemplate.json b/fit/enduser-reference/src/main/resources/customTemplate.json",
                "index 9b760b9ac9..e55ed4c86f 100644",
                "--- a/fit/enduser-reference/src/main/resources/customTemplate.json",
                "+++ b/fit/enduser-reference/src/main/resources/customTemplate.json",
                "@@ -26,2 +26,18 @@",
                "                       ]",
                "+                    },",
                "+            \"must_change_password\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/mustChangePasswordTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\",",
                "+                        \"css/passwordReset.css\"",
                "+                      ]",
                "+                    },",
                "+            \"confirm_password_reset\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/confirmPasswordResetTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\",",
                "+                        \"css/passwordReset.css\"",
                "+                      ]",
                "                     }",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "index cd846db22f..aa4127bc06 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "@@ -891,2 +891,18 @@ The `customTemplate.json` default content is:",
                "                       ]",
                "+                    },",
                "+            \"must_change_password\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/mustChangePasswordTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\",",
                "+                        \"css/passwordReset.css\"",
                "+                      ]",
                "+                    },",
                "+            \"confirm_password_reset\":",
                "+                    {",
                "+                      \"templateUrl\": \"views/templates/confirmPasswordResetTemplate.html\",",
                "+                      \"css\": [",
                "+                        \"css/editUser.css\",",
                "+                        \"css/passwordReset.css\"",
                "+                      ]",
                "                     }",
                "@@ -1012,3 +1028,13 @@ The structure of the template sections is defined by `templateUrl` property, for",
                "                   \"templateUrl\": \"views/templates/passwordresetTemplate.html\",",
                "-                },          ",
                "+                },",
                "+",
                "+        \"must_change_password\":",
                "+                {",
                "+                  \"templateUrl\": \"views/templates/mustChangePasswordTemplate.html\",",
                "+                },",
                "+",
                "+        \"confirm_password_reset\":",
                "+                {",
                "+                  \"templateUrl\": \"views/templates/confirmPasswordResetTemplate.html\",",
                "+                }",
                "         },"
            ],
            "changed_files": [
                "client/enduser/src/main/resources/META-INF/resources/app/js/services/dynamicTemplateService.js",
                "client/enduser/src/main/resources/META-INF/resources/app/views/confirmpasswordreset.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/editUser.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/mustchangepassword.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/passwordreset.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/self.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/templates/confirmPasswordResetTemplate.html",
                "client/enduser/src/main/resources/META-INF/resources/app/views/templates/mustChangePasswordTemplate.html",
                "client/enduser/src/main/resources/customTemplate.json",
                "fit/enduser-reference/src/main/resources/customTemplate.json",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1019": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: html, edit, user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1019",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "21aeaaaa814b9620d5a0af15e24ccc4e0b2dacf8",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1533044580,
            "hunks": 11,
            "message": "Upgrading Elasticsearch, IzPack and various Maven plugins",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardMgtButtonBar.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardMgtButtonBar.java",
                "index 0a192d94aa..cbedd48ad2 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardMgtButtonBar.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardMgtButtonBar.java",
                "@@ -111,3 +111,3 @@ public class AjaxWizardMgtButtonBar<T extends Serializable> extends WizardButton",
                "             @Override",
                "-            public final boolean isEnabled() {",
                "+            public boolean isEnabled() {",
                "                 switch (mode) {",
                "diff --git a/ext/scimv2/logic/pom.xml b/ext/scimv2/logic/pom.xml",
                "index 7c85b4278f..3fa3beb809 100644",
                "--- a/ext/scimv2/logic/pom.xml",
                "+++ b/ext/scimv2/logic/pom.xml",
                "@@ -77,3 +77,3 @@ under the License.",
                "         <configuration>",
                "-          <sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>",
                "+          <sourceDirectories>${project.build.sourceDirectory}</sourceDirectories>",
                "         </configuration>",
                "diff --git a/installer/src/main/resources/izpack/install.xml b/installer/src/main/resources/izpack/install.xml",
                "index c60930b2be..f07449bbe3 100644",
                "--- a/installer/src/main/resources/izpack/install.xml",
                "+++ b/installer/src/main/resources/izpack/install.xml",
                "@@ -137,3 +137,3 @@ under the License.",
                "   <jar src=\"lib/httpmime-@{httpclient.version}.jar\"/>",
                "-  <jar src=\"lib/httpcore-4.4.9.jar\"/>",
                "+  <jar src=\"lib/httpcore-4.4.10.jar\"/>",
                "   <jar src=\"lib/jackson-databind-@{jackson.version}.jar\"/>",
                "diff --git a/pom.xml b/pom.xml",
                "index 3025c0ac9a..0fb0211855 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -417,3 +417,3 @@ under the License.",
                "-    <elasticsearch.version>6.3.1</elasticsearch.version>",
                "+    <elasticsearch.version>6.3.2</elasticsearch.version>",
                "@@ -481,4 +481,4 @@ under the License.",
                "-    <izpack.version>5.1.2</izpack.version>",
                "-    <httpclient.version>4.5.5</httpclient.version>",
                "+    <izpack.version>5.1.3</izpack.version>",
                "+    <httpclient.version>4.5.6</httpclient.version>",
                "     <maven-invoker.version>3.0.1</maven-invoker.version>",
                "@@ -1669,3 +1669,3 @@ under the License.",
                "         <artifactId>bcpkix-jdk15on</artifactId>",
                "-        <version>1.59</version>",
                "+        <version>1.60</version>",
                "         <scope>test</scope>",
                "@@ -1734,3 +1734,3 @@ under the License.",
                "           <artifactId>maven-compiler-plugin</artifactId>",
                "-          <version>3.7.0</version> ",
                "+          <version>3.8.0</version> ",
                "           <configuration>",
                "@@ -1946,3 +1946,3 @@ under the License.",
                "           <artifactId>maven-checkstyle-plugin</artifactId>",
                "-          <version>2.17</version>",
                "+          <version>3.0.0</version>",
                "           <configuration>",
                "@@ -1962,3 +1962,3 @@ under the License.",
                "           <artifactId>docker-maven-plugin</artifactId>",
                "-          <version>0.26.0</version>",
                "+          <version>0.26.1</version>",
                "         </plugin>",
                "@@ -2269,3 +2269,3 @@ under the License.",
                "         <artifactId>maven-project-info-reports-plugin</artifactId>",
                "-        <version>2.9</version>",
                "+        <version>3.0.0</version>",
                "         <configuration>",
                "@@ -2315,3 +2315,3 @@ under the License.",
                "             <link>https://build.shibboleth.net/nexus/content/sites/site/java-opensaml/3.3.0/apidocs/</link>",
                "-            <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/client/transport/6.3.1/index.html</link>",
                "+            <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/client/transport/6.3.2/index.html</link>",
                "           </links>"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardMgtButtonBar.java",
                "ext/scimv2/logic/pom.xml",
                "installer/src/main/resources/izpack/install.xml",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0de2236d6177e17ca778d2ed34246a85310e9bb4"
                ]
            ],
            "tags": [
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fff23ec67857b1b26ba2df4aaeb0f3d81b9cd9c0",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540547226,
            "hunks": 2,
            "message": "Rephrase",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/configurationparameters.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/configurationparameters.adoc",
                "index e25d31da8a..8efad79ac8 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/configurationparameters.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/configurationparameters.adoc",
                "@@ -56,4 +56,4 @@ for usage with <<connectors-resources-history, connectors and resources configur",
                " for usage with <<connectors-resources-history, connectors and resources configuration history management>>;",
                "-* `connector.test.timeout` - timeout (in seconds) for testing connector connection in <<Admin Console>>. ",
                "-A value of `0` means there will be no timeout;",
                "+* `connector.test.timeout` - timeout (in seconds) to check connector connection in <<Admin Console>>;",
                "+`0` to skip any check;",
                "@@ -65,4 +65,4 @@ or to completely disable connector connection testing.",
                "-* `resource.test.timeout` - timeout (in seconds) for testing resource connection in <<Admin Console>>. ",
                "-A value of `0` means there will be no timeout.",
                "+* `resource.test.timeout` - timeout (in seconds) to check resource connection in <<Admin Console>>;",
                "+`0` to skip any check;"
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/configurationparameters.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "49dcfb0ca3b1b2e246dc3e969c7b12f0b3827579"
                ],
                [
                    "no-tag",
                    "0313d01184244f098d49907a1509e758cdf3df5d"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: admin, administration",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bb22b39ca3e770858e4162521d93a59f1cb7b70a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541167925,
            "hunks": 92,
            "message": "[maven-release-plugin] prepare release syncope-2.0.11",
            "diff": [
                "diff --git a/archetype/pom.xml b/archetype/pom.xml",
                "index 94efe7e502..0075fb4f5a 100644",
                "--- a/archetype/pom.xml",
                "+++ b/archetype/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/client/cli/pom.xml b/client/cli/pom.xml",
                "index 146dcb0160..45340ef890 100644",
                "--- a/client/cli/pom.xml",
                "+++ b/client/cli/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/client/console/pom.xml b/client/console/pom.xml",
                "index 9bdcae354f..31e51b6624 100644",
                "--- a/client/console/pom.xml",
                "+++ b/client/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/client/enduser/pom.xml b/client/enduser/pom.xml",
                "index 8f92084870..b67870e9f4 100644",
                "--- a/client/enduser/pom.xml",
                "+++ b/client/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/client/lib/pom.xml b/client/lib/pom.xml",
                "index 7123407e32..873e411e36 100644",
                "--- a/client/lib/pom.xml",
                "+++ b/client/lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/client/pom.xml b/client/pom.xml",
                "index 09894de024..3d5de171fb 100644",
                "--- a/client/pom.xml",
                "+++ b/client/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/common/lib/pom.xml b/common/lib/pom.xml",
                "index 44d2398b62..ee6f6705f9 100644",
                "--- a/common/lib/pom.xml",
                "+++ b/common/lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-common</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/common/pom.xml b/common/pom.xml",
                "index 9137ab6edf..dbf8797bd9 100644",
                "--- a/common/pom.xml",
                "+++ b/common/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/common/rest-api/pom.xml b/common/rest-api/pom.xml",
                "index 623bc936e1..3312d4bb4d 100644",
                "--- a/common/rest-api/pom.xml",
                "+++ b/common/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-common</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/core/logic/pom.xml b/core/logic/pom.xml",
                "index 8c9a944836..451008989b 100644",
                "--- a/core/logic/pom.xml",
                "+++ b/core/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/core/migration/pom.xml b/core/migration/pom.xml",
                "index f99fbc1050..e0649bcc7a 100644",
                "--- a/core/migration/pom.xml",
                "+++ b/core/migration/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/core/persistence-api/pom.xml b/core/persistence-api/pom.xml",
                "index 13f20b6f4e..fe0a1b2b3c 100644",
                "--- a/core/persistence-api/pom.xml",
                "+++ b/core/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/core/persistence-jpa/pom.xml b/core/persistence-jpa/pom.xml",
                "index 9b3db97ca5..f245ad0acd 100644",
                "--- a/core/persistence-jpa/pom.xml",
                "+++ b/core/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/core/pom.xml b/core/pom.xml",
                "index 280327c82a..2e23fab8c7 100644",
                "--- a/core/pom.xml",
                "+++ b/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/core/provisioning-api/pom.xml b/core/provisioning-api/pom.xml",
                "index f15eb9709c..f98b2051d3 100644",
                "--- a/core/provisioning-api/pom.xml",
                "+++ b/core/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/core/provisioning-java/pom.xml b/core/provisioning-java/pom.xml",
                "index 129445fc77..993fc36c9b 100644",
                "--- a/core/provisioning-java/pom.xml",
                "+++ b/core/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/core/rest-cxf/pom.xml b/core/rest-cxf/pom.xml",
                "index 41c352cfc2..7cd8b708fc 100644",
                "--- a/core/rest-cxf/pom.xml",
                "+++ b/core/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/core/spring/pom.xml b/core/spring/pom.xml",
                "index cc6b735e2c..ae76a02060 100644",
                "--- a/core/spring/pom.xml",
                "+++ b/core/spring/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/core/workflow-activiti/pom.xml b/core/workflow-activiti/pom.xml",
                "index 48b778f624..6ce50f10e2 100644",
                "--- a/core/workflow-activiti/pom.xml",
                "+++ b/core/workflow-activiti/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/core/workflow-api/pom.xml b/core/workflow-api/pom.xml",
                "index 7b888cfbfc..2e8ddc0445 100644",
                "--- a/core/workflow-api/pom.xml",
                "+++ b/core/workflow-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/core/workflow-flowable/pom.xml b/core/workflow-flowable/pom.xml",
                "index 67e7e1f17b..d1c685eb71 100644",
                "--- a/core/workflow-flowable/pom.xml",
                "+++ b/core/workflow-flowable/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/core/workflow-java/pom.xml b/core/workflow-java/pom.xml",
                "index 950821fda0..5342ff137f 100644",
                "--- a/core/workflow-java/pom.xml",
                "+++ b/core/workflow-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/deb/console/pom.xml b/deb/console/pom.xml",
                "index 395b130990..3118e94743 100644",
                "--- a/deb/console/pom.xml",
                "+++ b/deb/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/deb/core/pom.xml b/deb/core/pom.xml",
                "index bdfac92fe5..bec40ed79f 100644",
                "--- a/deb/core/pom.xml",
                "+++ b/deb/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/deb/enduser/pom.xml b/deb/enduser/pom.xml",
                "index 8c604f1a94..c180bd4328 100644",
                "--- a/deb/enduser/pom.xml",
                "+++ b/deb/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/deb/pom.xml b/deb/pom.xml",
                "index 5a95c20471..2eaba100e9 100644",
                "--- a/deb/pom.xml",
                "+++ b/deb/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/docker/console/pom.xml b/docker/console/pom.xml",
                "index 04e146c658..4ca2ff4ef3 100644",
                "--- a/docker/console/pom.xml",
                "+++ b/docker/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-docker</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/docker/core/pom.xml b/docker/core/pom.xml",
                "index adb81558e1..07fe6c1916 100644",
                "--- a/docker/core/pom.xml",
                "+++ b/docker/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-docker</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/docker/enduser/pom.xml b/docker/enduser/pom.xml",
                "index a4fd498f43..7dd4abca29 100644",
                "--- a/docker/enduser/pom.xml",
                "+++ b/docker/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-docker</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/docker/pom.xml b/docker/pom.xml",
                "index c3d88251f5..c6674c4fdf 100644",
                "--- a/docker/pom.xml",
                "+++ b/docker/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/camel/client-console/pom.xml b/ext/camel/client-console/pom.xml",
                "index b45aad0e3c..e945881db1 100644",
                "--- a/ext/camel/client-console/pom.xml",
                "+++ b/ext/camel/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/camel/common-lib/pom.xml b/ext/camel/common-lib/pom.xml",
                "index 49c5976de7..059765d9b2 100644",
                "--- a/ext/camel/common-lib/pom.xml",
                "+++ b/ext/camel/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/camel/logic/pom.xml b/ext/camel/logic/pom.xml",
                "index 56dbb45f30..f0173402e2 100644",
                "--- a/ext/camel/logic/pom.xml",
                "+++ b/ext/camel/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/camel/persistence-api/pom.xml b/ext/camel/persistence-api/pom.xml",
                "index 4b1ba9e102..e15ed7eba5 100644",
                "--- a/ext/camel/persistence-api/pom.xml",
                "+++ b/ext/camel/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/camel/persistence-jpa/pom.xml b/ext/camel/persistence-jpa/pom.xml",
                "index 6c0cec8b92..5611cea479 100644",
                "--- a/ext/camel/persistence-jpa/pom.xml",
                "+++ b/ext/camel/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/camel/pom.xml b/ext/camel/pom.xml",
                "index eac7b29278..5e88218960 100644",
                "--- a/ext/camel/pom.xml",
                "+++ b/ext/camel/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/camel/provisioning-api/pom.xml b/ext/camel/provisioning-api/pom.xml",
                "index 66dfe3a165..4c0e551305 100644",
                "--- a/ext/camel/provisioning-api/pom.xml",
                "+++ b/ext/camel/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/camel/provisioning-camel/pom.xml b/ext/camel/provisioning-camel/pom.xml",
                "index 1117f22a95..d3ab248854 100644",
                "--- a/ext/camel/provisioning-camel/pom.xml",
                "+++ b/ext/camel/provisioning-camel/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/camel/rest-api/pom.xml b/ext/camel/rest-api/pom.xml",
                "index f2a6693464..a11003387f 100644",
                "--- a/ext/camel/rest-api/pom.xml",
                "+++ b/ext/camel/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/camel/rest-cxf/pom.xml b/ext/camel/rest-cxf/pom.xml",
                "index e9a8641c01..da6542165e 100644",
                "--- a/ext/camel/rest-cxf/pom.xml",
                "+++ b/ext/camel/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/client-elasticsearch/pom.xml b/ext/elasticsearch/client-elasticsearch/pom.xml",
                "index a296909814..f84d43aafb 100644",
                "--- a/ext/elasticsearch/client-elasticsearch/pom.xml",
                "+++ b/ext/elasticsearch/client-elasticsearch/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/persistence-jpa/pom.xml b/ext/elasticsearch/persistence-jpa/pom.xml",
                "index b66f8e94f5..59f546619e 100644",
                "--- a/ext/elasticsearch/persistence-jpa/pom.xml",
                "+++ b/ext/elasticsearch/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/pom.xml b/ext/elasticsearch/pom.xml",
                "index d78c2433c8..5efd320fe5 100644",
                "--- a/ext/elasticsearch/pom.xml",
                "+++ b/ext/elasticsearch/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/provisioning-java/pom.xml b/ext/elasticsearch/provisioning-java/pom.xml",
                "index 79b8d5acd3..1558678841 100644",
                "--- a/ext/elasticsearch/provisioning-java/pom.xml",
                "+++ b/ext/elasticsearch/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/agent/pom.xml b/ext/oidcclient/agent/pom.xml",
                "index 3a790d1ab6..6f45c21b32 100644",
                "--- a/ext/oidcclient/agent/pom.xml",
                "+++ b/ext/oidcclient/agent/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/client-console/pom.xml b/ext/oidcclient/client-console/pom.xml",
                "index 0164fd461e..5c8af110d1 100644",
                "--- a/ext/oidcclient/client-console/pom.xml",
                "+++ b/ext/oidcclient/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/client-enduser/pom.xml b/ext/oidcclient/client-enduser/pom.xml",
                "index 1ad6e1004d..d6f6abdb98 100644",
                "--- a/ext/oidcclient/client-enduser/pom.xml",
                "+++ b/ext/oidcclient/client-enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/common-lib/pom.xml b/ext/oidcclient/common-lib/pom.xml",
                "index e453578c1c..8fe193271a 100644",
                "--- a/ext/oidcclient/common-lib/pom.xml",
                "+++ b/ext/oidcclient/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/logic/pom.xml b/ext/oidcclient/logic/pom.xml",
                "index d136d682b0..5be652b496 100644",
                "--- a/ext/oidcclient/logic/pom.xml",
                "+++ b/ext/oidcclient/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/persistence-api/pom.xml b/ext/oidcclient/persistence-api/pom.xml",
                "index 25642940ad..20af32ab79 100644",
                "--- a/ext/oidcclient/persistence-api/pom.xml",
                "+++ b/ext/oidcclient/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/persistence-jpa/pom.xml b/ext/oidcclient/persistence-jpa/pom.xml",
                "index dd756ddc08..06d3fd6730 100644",
                "--- a/ext/oidcclient/persistence-jpa/pom.xml",
                "+++ b/ext/oidcclient/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/pom.xml b/ext/oidcclient/pom.xml",
                "index 874ee20ba3..b6d48dd5f4 100644",
                "--- a/ext/oidcclient/pom.xml",
                "+++ b/ext/oidcclient/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/provisioning-api/pom.xml b/ext/oidcclient/provisioning-api/pom.xml",
                "index 5281283ee5..3db5e7cc3a 100644",
                "--- a/ext/oidcclient/provisioning-api/pom.xml",
                "+++ b/ext/oidcclient/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/provisioning-java/pom.xml b/ext/oidcclient/provisioning-java/pom.xml",
                "index ed128bf986..396d6d55b3 100644",
                "--- a/ext/oidcclient/provisioning-java/pom.xml",
                "+++ b/ext/oidcclient/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/rest-api/pom.xml b/ext/oidcclient/rest-api/pom.xml",
                "index edccfebb96..c4c3eee065 100644",
                "--- a/ext/oidcclient/rest-api/pom.xml",
                "+++ b/ext/oidcclient/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/rest-cxf/pom.xml b/ext/oidcclient/rest-cxf/pom.xml",
                "index 2f8c077694..80eb4e1cc7 100644",
                "--- a/ext/oidcclient/rest-cxf/pom.xml",
                "+++ b/ext/oidcclient/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/pom.xml b/ext/pom.xml",
                "index 5f746c2722..1355968c47 100644",
                "--- a/ext/pom.xml",
                "+++ b/ext/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/agent/pom.xml b/ext/saml2sp/agent/pom.xml",
                "index 730dbe36a4..889ab87c10 100644",
                "--- a/ext/saml2sp/agent/pom.xml",
                "+++ b/ext/saml2sp/agent/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/client-console/pom.xml b/ext/saml2sp/client-console/pom.xml",
                "index 066df67b8e..8770d49c43 100644",
                "--- a/ext/saml2sp/client-console/pom.xml",
                "+++ b/ext/saml2sp/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/client-enduser/pom.xml b/ext/saml2sp/client-enduser/pom.xml",
                "index cf7d8a7e10..8a2e792d89 100644",
                "--- a/ext/saml2sp/client-enduser/pom.xml",
                "+++ b/ext/saml2sp/client-enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/common-lib/pom.xml b/ext/saml2sp/common-lib/pom.xml",
                "index d7c4b048d6..828220473f 100644",
                "--- a/ext/saml2sp/common-lib/pom.xml",
                "+++ b/ext/saml2sp/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/logic/pom.xml b/ext/saml2sp/logic/pom.xml",
                "index fd65a319f1..48c31f140f 100644",
                "--- a/ext/saml2sp/logic/pom.xml",
                "+++ b/ext/saml2sp/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/persistence-api/pom.xml b/ext/saml2sp/persistence-api/pom.xml",
                "index 92fade39fd..f44d896300 100644",
                "--- a/ext/saml2sp/persistence-api/pom.xml",
                "+++ b/ext/saml2sp/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/persistence-jpa/pom.xml b/ext/saml2sp/persistence-jpa/pom.xml",
                "index d434631270..d63dca93ef 100644",
                "--- a/ext/saml2sp/persistence-jpa/pom.xml",
                "+++ b/ext/saml2sp/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/pom.xml b/ext/saml2sp/pom.xml",
                "index c728088b9c..26d5d497d4 100644",
                "--- a/ext/saml2sp/pom.xml",
                "+++ b/ext/saml2sp/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/provisioning-api/pom.xml b/ext/saml2sp/provisioning-api/pom.xml",
                "index a352067fb0..406af8355f 100644",
                "--- a/ext/saml2sp/provisioning-api/pom.xml",
                "+++ b/ext/saml2sp/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/provisioning-java/pom.xml b/ext/saml2sp/provisioning-java/pom.xml",
                "index eaaac1d6cd..a68bd64ab5 100644",
                "--- a/ext/saml2sp/provisioning-java/pom.xml",
                "+++ b/ext/saml2sp/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/rest-api/pom.xml b/ext/saml2sp/rest-api/pom.xml",
                "index 6270333669..ad042be093 100644",
                "--- a/ext/saml2sp/rest-api/pom.xml",
                "+++ b/ext/saml2sp/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/rest-cxf/pom.xml b/ext/saml2sp/rest-cxf/pom.xml",
                "index 3105a570df..e62c777d75 100644",
                "--- a/ext/saml2sp/rest-cxf/pom.xml",
                "+++ b/ext/saml2sp/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/client-console/pom.xml b/ext/scimv2/client-console/pom.xml",
                "index 9d94ca7339..7cf9f0235d 100644",
                "--- a/ext/scimv2/client-console/pom.xml",
                "+++ b/ext/scimv2/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/common-lib/pom.xml b/ext/scimv2/common-lib/pom.xml",
                "index c81453a6a5..b7377e5f3d 100644",
                "--- a/ext/scimv2/common-lib/pom.xml",
                "+++ b/ext/scimv2/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/logic/pom.xml b/ext/scimv2/logic/pom.xml",
                "index fe1a4b48b7..f835da423a 100644",
                "--- a/ext/scimv2/logic/pom.xml",
                "+++ b/ext/scimv2/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/pom.xml b/ext/scimv2/pom.xml",
                "index 669128686f..8a0ae09c67 100644",
                "--- a/ext/scimv2/pom.xml",
                "+++ b/ext/scimv2/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/rest-api/pom.xml b/ext/scimv2/rest-api/pom.xml",
                "index 4f316191cd..64cbc17e65 100644",
                "--- a/ext/scimv2/rest-api/pom.xml",
                "+++ b/ext/scimv2/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/rest-cxf/pom.xml b/ext/scimv2/rest-cxf/pom.xml",
                "index 9be79cb84f..493d7644b0 100644",
                "--- a/ext/scimv2/rest-cxf/pom.xml",
                "+++ b/ext/scimv2/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/scim-rest-api/pom.xml b/ext/scimv2/scim-rest-api/pom.xml",
                "index b99f473fc1..847e4f9ca1 100644",
                "--- a/ext/scimv2/scim-rest-api/pom.xml",
                "+++ b/ext/scimv2/scim-rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/scim-rest-cxf/pom.xml b/ext/scimv2/scim-rest-cxf/pom.xml",
                "index fb82b878aa..d16b612c7b 100644",
                "--- a/ext/scimv2/scim-rest-cxf/pom.xml",
                "+++ b/ext/scimv2/scim-rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ext/swagger-ui/pom.xml b/ext/swagger-ui/pom.xml",
                "index a04efe417f..d06c4db539 100644",
                "--- a/ext/swagger-ui/pom.xml",
                "+++ b/ext/swagger-ui/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/fit/build-tools/pom.xml b/fit/build-tools/pom.xml",
                "index 82ae0cf983..6bea3d161b 100644",
                "--- a/fit/build-tools/pom.xml",
                "+++ b/fit/build-tools/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/fit/console-reference/pom.xml b/fit/console-reference/pom.xml",
                "index 178e63dbc3..c42be1e867 100644",
                "--- a/fit/console-reference/pom.xml",
                "+++ b/fit/console-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index 4fa7b57dd8..50e535554e 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/fit/enduser-reference/pom.xml b/fit/enduser-reference/pom.xml",
                "index f399afb989..c96c7024bb 100644",
                "--- a/fit/enduser-reference/pom.xml",
                "+++ b/fit/enduser-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/fit/pom.xml b/fit/pom.xml",
                "index bd3e35f468..46e8c9eb38 100644",
                "--- a/fit/pom.xml",
                "+++ b/fit/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "index 43c106dede..3dd225f937 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide-eclipse</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "     <relativePath>../../</relativePath>",
                "diff --git a/ide/eclipse/pom.xml b/ide/eclipse/pom.xml",
                "index 978eaee3fd..85167bf42f 100644",
                "--- a/ide/eclipse/pom.xml",
                "+++ b/ide/eclipse/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "index 9d6429488a..909b21f242 100644",
                "--- a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "+++ b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide-eclipse</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "     <relativePath>../../</relativePath>",
                "diff --git a/ide/netbeans/pom.xml b/ide/netbeans/pom.xml",
                "index 4f8e63dced..314e6625bf 100644",
                "--- a/ide/netbeans/pom.xml",
                "+++ b/ide/netbeans/pom.xml",
                "@@ -22,3 +22,3 @@ under the License.",
                "     <artifactId>syncope-ide</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/ide/pom.xml b/ide/pom.xml",
                "index b7268bd873..499a3c77ed 100644",
                "--- a/ide/pom.xml",
                "+++ b/ide/pom.xml",
                "@@ -24,3 +24,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/installer/pom.xml b/installer/pom.xml",
                "index f64d9e7ac9..5903b0b6cb 100644",
                "--- a/installer/pom.xml",
                "+++ b/installer/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>",
                "diff --git a/pom.xml b/pom.xml",
                "index 90155e5e4c..bdba97859c 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@ under the License.",
                "   <artifactId>syncope</artifactId>",
                "-  <version>2.0.11-SNAPSHOT</version>",
                "+  <version>2.0.11</version>",
                "   <packaging>pom</packaging>",
                "@@ -54,3 +54,3 @@ under the License.",
                "     <url>https://gitbox.apache.org/repos/asf?p=syncope.git</url>",
                "-    <tag>HEAD</tag>",
                "+    <tag>syncope-2.0.11</tag>",
                "   </scm>",
                "diff --git a/standalone/pom.xml b/standalone/pom.xml",
                "index c186511c24..ec91bc0e76 100644",
                "--- a/standalone/pom.xml",
                "+++ b/standalone/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "   </parent>"
            ],
            "changed_files": [
                "archetype/pom.xml",
                "client/cli/pom.xml",
                "client/console/pom.xml",
                "client/enduser/pom.xml",
                "client/lib/pom.xml",
                "client/pom.xml",
                "common/lib/pom.xml",
                "common/pom.xml",
                "common/rest-api/pom.xml",
                "core/logic/pom.xml",
                "core/migration/pom.xml",
                "core/persistence-api/pom.xml",
                "core/persistence-jpa/pom.xml",
                "core/pom.xml",
                "core/provisioning-api/pom.xml",
                "core/provisioning-java/pom.xml",
                "core/rest-cxf/pom.xml",
                "core/spring/pom.xml",
                "core/workflow-activiti/pom.xml",
                "core/workflow-api/pom.xml",
                "core/workflow-flowable/pom.xml",
                "core/workflow-java/pom.xml",
                "deb/console/pom.xml",
                "deb/core/pom.xml",
                "deb/enduser/pom.xml",
                "deb/pom.xml",
                "docker/console/pom.xml",
                "docker/core/pom.xml",
                "docker/enduser/pom.xml",
                "docker/pom.xml",
                "ext/camel/client-console/pom.xml",
                "ext/camel/common-lib/pom.xml",
                "ext/camel/logic/pom.xml",
                "ext/camel/persistence-api/pom.xml",
                "ext/camel/persistence-jpa/pom.xml",
                "ext/camel/pom.xml",
                "ext/camel/provisioning-api/pom.xml",
                "ext/camel/provisioning-camel/pom.xml",
                "ext/camel/rest-api/pom.xml",
                "ext/camel/rest-cxf/pom.xml",
                "ext/elasticsearch/client-elasticsearch/pom.xml",
                "ext/elasticsearch/persistence-jpa/pom.xml",
                "ext/elasticsearch/pom.xml",
                "ext/elasticsearch/provisioning-java/pom.xml",
                "ext/oidcclient/agent/pom.xml",
                "ext/oidcclient/client-console/pom.xml",
                "ext/oidcclient/client-enduser/pom.xml",
                "ext/oidcclient/common-lib/pom.xml",
                "ext/oidcclient/logic/pom.xml",
                "ext/oidcclient/persistence-api/pom.xml",
                "ext/oidcclient/persistence-jpa/pom.xml",
                "ext/oidcclient/pom.xml",
                "ext/oidcclient/provisioning-api/pom.xml",
                "ext/oidcclient/provisioning-java/pom.xml",
                "ext/oidcclient/rest-api/pom.xml",
                "ext/oidcclient/rest-cxf/pom.xml",
                "ext/pom.xml",
                "ext/saml2sp/agent/pom.xml",
                "ext/saml2sp/client-console/pom.xml",
                "ext/saml2sp/client-enduser/pom.xml",
                "ext/saml2sp/common-lib/pom.xml",
                "ext/saml2sp/logic/pom.xml",
                "ext/saml2sp/persistence-api/pom.xml",
                "ext/saml2sp/persistence-jpa/pom.xml",
                "ext/saml2sp/pom.xml",
                "ext/saml2sp/provisioning-api/pom.xml",
                "ext/saml2sp/provisioning-java/pom.xml",
                "ext/saml2sp/rest-api/pom.xml",
                "ext/saml2sp/rest-cxf/pom.xml",
                "ext/scimv2/client-console/pom.xml",
                "ext/scimv2/common-lib/pom.xml",
                "ext/scimv2/logic/pom.xml",
                "ext/scimv2/pom.xml",
                "ext/scimv2/rest-api/pom.xml",
                "ext/scimv2/rest-cxf/pom.xml",
                "ext/scimv2/scim-rest-api/pom.xml",
                "ext/scimv2/scim-rest-cxf/pom.xml",
                "ext/swagger-ui/pom.xml",
                "fit/build-tools/pom.xml",
                "fit/console-reference/pom.xml",
                "fit/core-reference/pom.xml",
                "fit/enduser-reference/pom.xml",
                "fit/pom.xml",
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "ide/eclipse/pom.xml",
                "ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "ide/netbeans/pom.xml",
                "ide/pom.xml",
                "installer/pom.xml",
                "pom.xml",
                "standalone/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3234fb200570ef0885dd37aa2eba0242f0d4ea91"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "66cab5b3bdecf74a88f2b7685ba183a1aedbec63",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536588131,
            "hunks": 10,
            "message": "[SYNCOPE-1019] Improvements",
            "diff": [
                "diff --git a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "index 802ffdf3aa..82884eeccf 100644",
                "--- a/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "+++ b/client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "@@ -61,2 +61,4 @@ public class GroupResource extends BaseResource {",
                "                     SyncopeEnduserApplication.get().getCustomTemplate();",
                "+            final GroupResponse groupResponse = new GroupResponse();",
                "+            ",
                "             if (customTemplate.getWizard().getSteps().containsKey(\"groups\")) {",
                "@@ -66,3 +68,2 @@ public class GroupResource extends BaseResource {",
                "-                final GroupResponse groupResponse = new GroupResponse();",
                "                 final int totGroups = SyncopeEnduserSession.get().",
                "@@ -82,12 +83,3 @@ public class GroupResource extends BaseResource {",
                "                 groupResponse.setGroupTOs(groups);",
                "-",
                "-                response.setWriteCallback(new AbstractResource.WriteCallback() {",
                "-",
                "-                    @Override",
                "-                    public void writeData(final Attributes attributes) throws IOException {",
                "-                        attributes.getResponse().write(MAPPER.writeValueAsString(groupResponse));",
                "-                    }",
                "-                });",
                "             } else {",
                "-                final GroupResponse groupResponse = new GroupResponse();",
                "                 groupResponse.setTotGroups(0);",
                "@@ -95,10 +87,10 @@ public class GroupResource extends BaseResource {",
                "                 groupResponse.setGroupTOs(groups);",
                "-                response.setWriteCallback(new AbstractResource.WriteCallback() {",
                "-",
                "-                    @Override",
                "-                    public void writeData(final Attributes attributes) throws IOException {",
                "-                        attributes.getResponse().write(MAPPER.writeValueAsString(groupResponse));",
                "-                    }",
                "-                });",
                "             }",
                "+            response.setWriteCallback(new AbstractResource.WriteCallback() {",
                "+",
                "+                @Override",
                "+                public void writeData(final Attributes attributes) throws IOException {",
                "+                    attributes.getResponse().write(MAPPER.writeValueAsString(groupResponse));",
                "+                }",
                "+            });",
                "             response.setTextEncoding(StandardCharsets.UTF_8.name());",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "index ab831ec475..d6527cee54 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "@@ -780,5 +780,5 @@ The `customTemplate.json` could be edited and reloaded without the need of re-st",
                "-[WARNING]",
                "+[TIP]",
                "+====",
                " The `customTemplate.json` default content is:",
                "-",
                " ```",
                "@@ -850,4 +850,4 @@ The `customTemplate.json` default content is:",
                " ```",
                "-",
                " if such file is missing, empty or not valid, Enduser structure will not be valid and won't work as expected.",
                "+===="
            ],
            "changed_files": [
                "client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1019": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1019",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4ee463d47d892976ba596d325ca03d8ffac8d90e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1542353078,
            "hunks": 7,
            "message": "Upgrading Elasticsearch and CodeMirror",
            "diff": [
                "diff --git a/ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java b/ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java",
                "index d098a99ae7..9a0159fc93 100644",
                "--- a/ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java",
                "+++ b/ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java",
                "@@ -34,3 +34,2 @@ import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;",
                " import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;",
                "-import org.elasticsearch.action.admin.indices.delete.DeleteIndexResponse;",
                " import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsRequest;",
                "@@ -38,2 +37,3 @@ import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsRespon",
                " import org.elasticsearch.action.index.IndexResponse;",
                "+import org.elasticsearch.action.support.master.AcknowledgedResponse;",
                " import org.elasticsearch.client.Client;",
                "@@ -74,3 +74,3 @@ public class ElasticsearchReindex extends AbstractSchedTaskJobDelegate {",
                "                 if (existsIndexResponse.isExists()) {",
                "-                    DeleteIndexResponse deleteIndexResponse = client.admin().indices().",
                "+                    AcknowledgedResponse acknowledgedResponse = client.admin().indices().",
                "                             delete(new DeleteIndexRequest(AuthContextUtils.getDomain().toLowerCase())).",
                "@@ -78,3 +78,3 @@ public class ElasticsearchReindex extends AbstractSchedTaskJobDelegate {",
                "                     LOG.debug(\"Successfully removed {}: {}\",",
                "-                            AuthContextUtils.getDomain().toLowerCase(), deleteIndexResponse);",
                "+                            AuthContextUtils.getDomain().toLowerCase(), acknowledgedResponse);",
                "                 }",
                "diff --git a/pom.xml b/pom.xml",
                "index 8e7bc0d956..4fac8fb678 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -417,3 +417,3 @@ under the License.",
                "-    <elasticsearch.version>6.4.3</elasticsearch.version>",
                "+    <elasticsearch.version>6.5.0</elasticsearch.version>",
                "@@ -459,3 +459,3 @@ under the License.",
                "     <highlightjs.version>9.8.0</highlightjs.version>",
                "-    <codemirror.version>5.40.2</codemirror.version>",
                "+    <codemirror.version>5.41.0</codemirror.version>",
                "     <googlediffmatchpath.version>20121119-1</googlediffmatchpath.version>",
                "@@ -2333,3 +2333,3 @@ under the License.",
                "             <link>https://build.shibboleth.net/nexus/content/sites/site/java-opensaml/3.3.0/apidocs/</link>",
                "-            <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/elasticsearch/6.4.3/index.html</link>",
                "+            <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/elasticsearch/6.5.0/index.html</link>",
                "             <link>http://docs.swagger.io/swagger-core/v2.0.5/apidocs/</link>"
            ],
            "changed_files": [
                "ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7cf7ec1ae7f1e4129b7d1ae481a9e4376e6d1936"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "47ff5ecd3d137f097228632cf2b119e275ffcd22",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539694435,
            "hunks": 1,
            "message": "Upgrading Spring Security",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 1a43f5fd46..4a8806e6d8 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -396,3 +396,3 @@ under the License.",
                "     <spring.version>4.3.20.RELEASE</spring.version>",
                "-    <spring-security.version>4.2.7.RELEASE</spring-security.version>",
                "+    <spring-security.version>4.2.9.RELEASE</spring-security.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "72a5941f2f85f7d45dfc8145831e92b8661fb32e"
                ],
                [
                    "no-tag",
                    "65922b6a281e6b33cd678330ca95349c60f26999"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0e025ebb4054a4f1c49167c90e68aa2b4ab076a1",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541175962,
            "hunks": 1,
            "message": "Fix typo",
            "diff": [
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyValidator.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyValidator.java",
                "index 47a06e9fd7..ed9445d4fa 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyValidator.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyValidator.java",
                "@@ -24,3 +24,3 @@ import org.apache.syncope.core.persistence.api.entity.policy.Policy;",
                "-public class PolicyValidator extends AbstractValidator<RoleCheck, Policy> {",
                "+public class PolicyValidator extends AbstractValidator<PolicyCheck, Policy> {"
            ],
            "changed_files": [
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyValidator.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5e87d02b05ce43ed3a8319dfe27cd175b4a990e8"
                ],
                [
                    "no-tag",
                    "5066f6dc263580018087678a8fc1f9a7ab1896cf"
                ],
                [
                    "no-tag",
                    "f1ab5bcd021c963f732c92fa2533bb5618afabd7"
                ],
                [
                    "no-tag",
                    "4966126a119ca5f0c8b206dc8e34216f2d14d584"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: policy",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4b34cae1725217c52a8e0790173173b92c0c3f2b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1532697330,
            "hunks": 11,
            "message": "Update to Glassfish 5 and Payara Server 5",
            "diff": [
                "diff --git a/core/rest-cxf/src/main/resources/META-INF/web-fragment.xml b/core/rest-cxf/src/main/resources/META-INF/web-fragment.xml",
                "index 1346471980..b4d20e59e1 100644",
                "--- a/core/rest-cxf/src/main/resources/META-INF/web-fragment.xml",
                "+++ b/core/rest-cxf/src/main/resources/META-INF/web-fragment.xml",
                "@@ -32,3 +32,2 @@ under the License.",
                "     <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>",
                "-    <load-on-startup>1</load-on-startup>",
                "     <init-param>",
                "@@ -37,2 +36,3 @@ under the License.",
                "     </init-param>",
                "+    <load-on-startup>1</load-on-startup>",
                "   </servlet>",
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index 627137804a..feb1070bd2 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -1123,3 +1123,8 @@ under the License.",
                "         </dependency>",
                "-    ",
                "+        <dependency>",
                "+          <groupId>org.hibernate.validator</groupId>",
                "+          <artifactId>hibernate-validator</artifactId>",
                "+          <version>6.0.11.Final</version>",
                "+        </dependency>",
                "+",
                "         <dependency>",
                "@@ -1140,5 +1145,5 @@ under the License.",
                "               <container>",
                "-                <containerId>glassfish4x</containerId>",
                "+                <containerId>glassfish5x</containerId>",
                "                 <zipUrlInstaller>",
                "-                  <url>http://download.java.net/glassfish/4.1.2/release/glassfish-4.1.2.zip</url>",
                "+                  <url>http://download.oracle.com/glassfish/5.0/release/glassfish-5.0.zip</url>",
                "                   <downloadDir>${settings.localRepository}/org/codehaus/cargo/cargo-container-archives</downloadDir>",
                "@@ -1187,5 +1192,5 @@ under the License.",
                "               <container>",
                "-                <containerId>glassfish4x</containerId>",
                "+                <containerId>glassfish5x</containerId>",
                "                 <zipUrlInstaller>",
                "-                  <url>https://s3-eu-west-1.amazonaws.com/payara.fish/Payara+Downloads/Payara+4.1.2.172/payara-4.1.2.172.zip</url>",
                "+                  <url>https://s3-eu-west-1.amazonaws.com/payara.fish/Payara+Downloads/5.182/payara-5.182.zip</url>",
                "                   <downloadDir>${settings.localRepository}/org/codehaus/cargo/cargo-container-archives</downloadDir>",
                "diff --git a/src/main/asciidoc/getting-started/obtain.adoc b/src/main/asciidoc/getting-started/obtain.adoc",
                "index 4dff4e6c70..396eb5064b 100644",
                "--- a/src/main/asciidoc/getting-started/obtain.adoc",
                "+++ b/src/main/asciidoc/getting-started/obtain.adoc",
                "@@ -203,4 +203,4 @@ examples:",
                " . https://tomcat.apache.org/tomcat-9.0-doc/jdbc-pool.html[Apache Tomcat 9^]",
                "-. https://javaeesquad.github.io/tutorials/glassfishDatasource/glassFishDatasource.html[Glassfish 4.1^]",
                "-. https://payara.gitbooks.io/payara-server/content/documentation/user-guides/connection-pools/connection-pools.html[Payara Server^]",
                "+. https://javaeesquad.github.io/tutorials/glassfishDatasource/glassFishDatasource.html[Glassfish 5^]",
                "+. https://payara.gitbooks.io/payara-server/content/documentation/user-guides/connection-pools/connection-pools.html[Payara Server 5^]",
                " . https://docs.jboss.org/author/display/WFLY10/DataSource+configuration[Wildfly 13^]",
                "diff --git a/src/main/asciidoc/getting-started/systemRequirements.adoc b/src/main/asciidoc/getting-started/systemRequirements.adoc",
                "index 474c584e2f..ab8e5528ef 100644",
                "--- a/src/main/asciidoc/getting-started/systemRequirements.adoc",
                "+++ b/src/main/asciidoc/getting-started/systemRequirements.adoc",
                "@@ -39,4 +39,4 @@ Apache Syncope {docVersion} is verified with the following Java EE containers:",
                "  . http://tomcat.apache.org/download-90.cgi[Apache Tomcat 9^]",
                "- . https://glassfish.java.net/[Glassfish 4.1^]",
                "- . http://www.payara.fish/[Payara Server^]",
                "+ . https://javaee.github.io/glassfish/[Glassfish 5^]",
                "+ . http://www.payara.fish/[Payara Server 5^]",
                "  . http://www.wildfly.org/[Wildfly 13^]",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "index a544adc472..3e59024423 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "@@ -34,4 +34,4 @@ Each JavaEE Container provides its own way to accomplish this task:",
                "   * https://tomcat.apache.org/tomcat-9.0-doc/jdbc-pool.html[Apache Tomcat 9^]",
                "-  * https://javaeesquad.github.io/tutorials/glassfishDatasource/glassFishDatasource.html[Glassfish 4.1^]",
                "-  * https://payara.gitbooks.io/payara-server/content/documentation/user-guides/connection-pools/connection-pools.html[Payara^]",
                "+  * https://javaeesquad.github.io/tutorials/glassfishDatasource/glassFishDatasource.html[Glassfish^]",
                "+  * https://payara.gitbooks.io/payara-server/content/documentation/user-guides/connection-pools/connection-pools.html[Payara Server 5^]",
                "   * https://docs.jboss.org/author/display/WFLY10/DataSource+configuration[Wildfly 13^]",
                "\\ No newline at end of file",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "index de76b50ab6..de8205c42e 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "@@ -60,3 +60,37 @@ Be sure to put the corresponding JDBC driver JAR file under `$CATALINA_HOME/lib`",
                "-===== Glassfish 4.1 and Payara Server",
                "+===== Glassfish 5 and Payara Server 5",
                "+",
                "+Replace",
                "+",
                "+[source,xml]",
                "+....",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.core</groupId>",
                "+      <artifactId>syncope-core-persistence-jpa</artifactId>",
                "+    </dependency>",
                "+....",
                "+",
                "+with",
                "+",
                "+[source,xml]",
                "+....",
                "+    <dependency>",
                "+      <groupId>org.apache.syncope.core</groupId>",
                "+      <artifactId>syncope-core-persistence-jpa</artifactId>",
                "+      <version>${syncope.version}</version>",
                "+      <exclusions>",
                "+        <exclusion>",
                "+          <groupId>org.apache.bval</groupId>",
                "+          <artifactId>bval-jsr</artifactId>",
                "+        </exclusion>",
                "+      </exclusions>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.hibernate.validator</groupId>",
                "+      <artifactId>hibernate-validator</artifactId>",
                "+      <version>6.0.11.Final</version>",
                "+    </dependency>",
                "+....",
                "+",
                "+in `core/pom.xml`."
            ],
            "changed_files": [
                "core/rest-cxf/src/main/resources/META-INF/web-fragment.xml",
                "fit/core-reference/pom.xml",
                "src/main/asciidoc/getting-started/obtain.adoc",
                "src/main/asciidoc/getting-started/systemRequirements.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "24db268ddf8c4902015c8d6ca76342b6819ec2e9"
                ]
            ],
            "tags": [
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: contain, admin, administration",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8c103a87b6f966a9adb304fc78bbdf221c75b1e7",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537775648,
            "hunks": 2,
            "message": "Upgrading Commons Lang and Sping Security",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 9069409614..04597e5576 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -396,3 +396,3 @@ under the License.",
                "     <spring.version>5.1.0.RELEASE</spring.version>",
                "-    <spring-security.version>5.0.8.RELEASE</spring-security.version>",
                "+    <spring-security.version>5.1.0.RELEASE</spring-security.version>",
                "@@ -425,3 +425,3 @@ under the License.",
                "     <commons-jexl.version>3.1</commons-jexl.version>",
                "-    <commons-lang.version>3.8</commons-lang.version>",
                "+    <commons-lang.version>3.8.1</commons-lang.version>",
                "     <commons-text.version>1.4</commons-text.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "11612399a31d6cee09abfd199772989291b4dd0a"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dd38d672dec2afd976a70d500df455953223169d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539345678,
            "hunks": 13,
            "message": "Review and reflow the Kubernets sample",
            "diff": [
                "diff --git a/docker/src/main/resources/kubernetes/postgres/Chart.yaml b/docker/src/main/resources/kubernetes/postgres/Chart.yaml",
                "new file mode 100644",
                "index 0000000000..a7c8b8fcd7",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/kubernetes/postgres/Chart.yaml",
                "@@ -0,0 +1,30 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+apiVersion: v1",
                "+name: basic",
                "+description: Deploys Postgres For Syncope",
                "+version: 1",
                "+appVersion: 2.0",
                "+keywords:",
                "+- postgresql",
                "+- postgres",
                "+- database",
                "+- sql",
                "+home: https://syncope.apache.org/",
                "+icon: https://syncope.apache.org/images/apache-syncope-logo-medium.png",
                "+sources:",
                "+- https://github.com/apache/syncope",
                "diff --git a/docker/src/main/resources/kubernetes/postgres/templates/db-deployment.yaml b/docker/src/main/resources/kubernetes/postgres/templates/db-deployment.yaml",
                "new file mode 100644",
                "index 0000000000..55f8755b4d",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/kubernetes/postgres/templates/db-deployment.yaml",
                "@@ -0,0 +1,141 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+apiVersion: v1",
                "+kind: ConfigMap",
                "+metadata:",
                "+ name: postgres-environment-config",
                "+data:",
                "+ PG_DATABASE: \"{{.Values.databaseEnvironment.pgDatabase}}\"",
                "+ PG_MODE: \"{{.Values.databaseEnvironment.pgMode}}\"",
                "+ PG_PASSWORD: \"{{.Values.databaseEnvironment.pgPassword}}\"",
                "+ PG_PRIMARY_HOST: \"{{.Values.databaseEnvironment.pgPrimaryHost}}\"",
                "+ PG_PRIMARY_PASSWORD: \"{{.Values.databaseEnvironment.pgPrimaryPassword}}\"",
                "+ PG_PRIMARY_PORT: \"{{.Values.databaseEnvironment.pgPrimaryPort}}\"",
                "+ PG_PRIMARY_USER: \"{{.Values.databaseEnvironment.pgPrimaryUser}}\"",
                "+ PG_ROOT_PASSWORD: \"{{.Values.databaseEnvironment.pgRootPassword}}\"",
                "+ PG_USER: \"{{.Values.databaseEnvironment.pgUser}}\"",
                "+ PGDATA_PATH_OVERRIDE: \"{{.Values.databaseEnvironment.pgdataPathOverride}}\"",
                "+---",
                "+apiVersion: v1",
                "+kind: PersistentVolume",
                "+metadata:",
                "+  name: {{.Values.pv.name}}",
                "+spec:",
                "+  storageClassName: \"\"",
                "+  capacity:",
                "+    storage: {{.Values.pv.storage}}",
                "+  accessModes:",
                "+    - {{.Values.pv.mode}}",
                "+  hostPath:",
                "+    path: \"{{.Values.pv.path}}\"",
                "+  persistentVolumeReclaimPolicy: Retain",
                "+#  gcePersistentDisk:",
                "+#    pdName: postgres-data",
                "+#    fsType: ext4",
                "+---",
                "+apiVersion: v1",
                "+kind: PersistentVolumeClaim",
                "+metadata:",
                "+  name: {{.Values.pvc.name}}",
                "+spec:",
                "+  accessModes:",
                "+    - {{.Values.pv.mode}}",
                "+  resources:",
                "+    requests:",
                "+      storage: {{.Values.pv.storage}}",
                "+---",
                "+apiVersion: extensions/v1beta1",
                "+kind: Deployment",
                "+metadata:",
                "+  name: \"{{.Values.databaseConfig.name}}\"",
                "+  labels:",
                "+    name: \"{{.Values.databaseConfig.name}}\"",
                "+    heritage: {{.Release.Service | quote }}",
                "+    release: {{.Release.Name | quote }}",
                "+    chart: \"{{.Chart.Name}}-{{.Chart.Version}}\"",
                "+  annotations:",
                "+    \"helm.sh/created\": {{.Release.Time.Seconds | quote }}",
                "+spec:",
                "+  replicas: 1",
                "+  strategy: {}",
                "+  template:",
                "+    metadata:",
                "+      creationTimestamp: null",
                "+      labels:",
                "+        name: \"{{.Values.databaseConfig.name}}\"",
                "+    spec:",
                "+      securityContext:",
                "+        fsGroup: 1000",
                "+      containers:",
                "+      - image: \"{{.Values.databaseConfig.repository}}/{{.Values.databaseConfig.container}}:{{.Values.databaseConfig.tag}}\"",
                "+        name: {{.Values.databaseConfig.name}}",
                "+#TODO: Need to impliment the readiness probe",
                "+#        readinessProbe:",
                "+#          exec:",
                "+#            command:",
                "+#            - \"/opt/cpm/bin/readiness.sh\"",
                "+#          initialDelaySeconds: 10",
                "+#          timeoutSeconds: 1",
                "+#        livenessProbe:",
                "+#          exec:",
                "+#            command:",
                "+#            - \"/opt/cpm/bin/liveness.sh\"",
                "+#          initialDelaySeconds: 120",
                "+#          timeoutSeconds: 1",
                "+        envFrom:",
                "+        - configMapRef:",
                "+           name: postgres-environment-config",
                "+        volumeMounts:",
                "+          - mountPath: {{.Values.pv.path}}",
                "+            name: {{.Values.pv.name}}",
                "+        ports:",
                "+          - containerPort: {{.Values.databaseConfig.port}}",
                "+            protocol: TCP",
                "+        resources:",
                "+          requests:",
                "+            cpu: {{ .Values.databaseConfig.cpu }}",
                "+            memory: {{ .Values.databaseConfig.memory }}",
                "+      volumes:",
                "+        - name: {{.Values.pv.name}}",
                "+          persistentVolumeClaim:",
                "+            claimName: {{.Values.pvc.name}}",
                "+            readOnly: false",
                "+      restartPolicy: Always",
                "+status: {}",
                "+---",
                "+apiVersion: v1",
                "+kind: Service",
                "+metadata:",
                "+  name: \"{{.Values.databaseConfig.name}}\"",
                "+  labels:",
                "+    name: \"{{.Values.databaseConfig.name}}\"",
                "+    heritage: {{ .Release.Service | quote }}",
                "+    release: {{ .Release.Name | quote }}",
                "+    chart: \"{{.Chart.Name}}-{{.Chart.Version}}\"",
                "+spec:",
                "+  type: \"{{.Values.serviceType}}\"",
                "+  ports:",
                "+  - protocol: TCP",
                "+    port: {{.Values.databaseConfig.port}}",
                "+    targetPort: {{.Values.databaseConfig.port}}",
                "+    nodePort: 0",
                "+    name: \"{{.Values.databaseConfig.name}}\"",
                "+  selector:",
                "+    name: \"{{.Values.databaseConfig.name}}\"",
                "+  sessionAffinity: None",
                "+status:",
                "+  loadBalancer: {}",
                "\\ No newline at end of file",
                "diff --git a/docker/src/main/resources/kubernetes/postgres/values.yaml b/docker/src/main/resources/kubernetes/postgres/values.yaml",
                "new file mode 100644",
                "index 0000000000..51a60b3416",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/kubernetes/postgres/values.yaml",
                "@@ -0,0 +1,47 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+### Environment Variables that will be pumped into postgres",
                "+databaseEnvironment:",
                "+  pgDatabase: syncope",
                "+  pgMode: primary",
                "+  pgPassword: <YOURPASSWORD>",
                "+  pgPrimaryHost: localhost",
                "+  pgPrimaryPassword: <YOURPASSWORD>",
                "+  pgPrimaryPort: 5432",
                "+  pgPrimaryUser: postgres",
                "+  pgRootPassword: <YOURPASSWORD>",
                "+  pgUser: syncope",
                "+  pgdataPathOverride: postgres-data",
                "+### Database container information",
                "+databaseConfig:",
                "+  port: 5432",
                "+  name: postgres",
                "+  serviceType: ClusterIP",
                "+  repository: crunchydata",
                "+  container: crunchy-postgres",
                "+  tag: centos7-10.3-1.8.2",
                "+  cpu: 200m",
                "+  memory: 512Mi",
                "+### Persistent Volume Config",
                "+pv:",
                "+  storage: 20Gi",
                "+  name: primary-pv",
                "+  mode: ReadWriteOnce",
                "+  path: /pgdata",
                "+### The PVC that will be used by postgres",
                "+pvc:",
                "+  name: postgres-readwriteonce-pvc",
                "\\ No newline at end of file",
                "diff --git a/docker/src/main/resources/kubernetes/syncope/Chart.yaml b/docker/src/main/resources/kubernetes/syncope/Chart.yaml",
                "new file mode 100644",
                "index 0000000000..7f697a2b45",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/kubernetes/syncope/Chart.yaml",
                "@@ -0,0 +1,29 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+apiVersion: v1",
                "+name: basic",
                "+description: Deploys Syncope",
                "+version: 1",
                "+appVersion: 2.0",
                "+keywords:",
                "+- syncope",
                "+- syncope-enduser",
                "+- syncope-console",
                "+home: https://syncope.apache.org/",
                "+icon: https://syncope.apache.org/images/apache-syncope-logo-medium.png",
                "+sources:",
                "+- https://github.com/apache/syncope",
                "diff --git a/docker/src/main/resources/kubernetes/syncope/templates/syncope-console-deployment.yaml b/docker/src/main/resources/kubernetes/syncope/templates/syncope-console-deployment.yaml",
                "new file mode 100644",
                "index 0000000000..2daf9f25ba",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/kubernetes/syncope/templates/syncope-console-deployment.yaml",
                "@@ -0,0 +1,51 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+apiVersion: extensions/v1beta1",
                "+kind: Deployment",
                "+metadata:",
                "+  name: {{.Values.syncopeConsoleConfig.name}}",
                "+spec:",
                "+  replicas: 1",
                "+  strategy: {}",
                "+  template:",
                "+    metadata:",
                "+      labels:",
                "+        name: {{.Values.syncopeConsoleConfig.name}}",
                "+    spec:",
                "+      containers:",
                "+      - name: {{.Values.syncopeConsoleConfig.name}}",
                "+        envFrom:",
                "+        - configMapRef:",
                "+           name: syncope-environment-config",
                "+        image: \"{{.Values.syncopeConsoleConfig.repository}}/{{.Values.syncopeConsoleConfig.container}}:{{.Values.syncopeConsoleConfig.tag}}\"",
                "+        ports:",
                "+        - containerPort: {{.Values.syncopeConsoleConfig.containerPort}}",
                "+        resources: {}",
                "+      restartPolicy: Always",
                "+status: {}",
                "+---",
                "+apiVersion: v1",
                "+kind: Service",
                "+metadata:",
                "+  name: \"{{.Values.syncopeConsoleConfig.name}}\"",
                "+spec:",
                "+  type: \"{{.Values.syncopeConsoleConfig.serviceType}}\"",
                "+  selector:",
                "+    name: \"{{.Values.syncopeConsoleConfig.name}}\"",
                "+  ports:",
                "+  - port: {{.Values.syncopeConsoleConfig.containerPort}}",
                "+    name: http-api",
                "diff --git a/docker/src/main/resources/kubernetes/syncope/templates/syncope-deployment.yaml b/docker/src/main/resources/kubernetes/syncope/templates/syncope-deployment.yaml",
                "new file mode 100644",
                "index 0000000000..ecbf13f5bb",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/kubernetes/syncope/templates/syncope-deployment.yaml",
                "@@ -0,0 +1,67 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+apiVersion: v1",
                "+kind: ConfigMap",
                "+metadata:",
                "+ name: syncope-environment-config",
                "+data:",
                "+ DBMS: postgresql",
                "+ DB_URL: {{.Values.syncopeEnvironment.dbUrl}}",
                "+ DB_USER: {{.Values.syncopeEnvironment.dbUser}}",
                "+ DB_PASSWORD: {{.Values.syncopeEnvironment.userCreds}}",
                "+ DB_POOL_MAX: \"{{.Values.syncopeEnvironment.dbPoolMax}}\"",
                "+ DB_POOL_MIN: \"{{.Values.syncopeEnvironment.dbPoolMin}}\"",
                "+ OPENJPA_REMOTE_COMMIT: sjvm",
                "+ CORE_SCHEME: \"{{.Values.syncopeEnvironment.coreScheme}}\"",
                "+ CORE_HOST: \"{{.Values.syncopeEnvironment.coreHost}}\"",
                "+ CORE_PORT: \"{{.Values.syncopeEnvironment.corePort}}\"",
                "+---",
                "+apiVersion: extensions/v1beta1",
                "+kind: Deployment",
                "+metadata:",
                "+  name: {{.Values.syncopeConfig.name}}",
                "+spec:",
                "+  replicas: 1",
                "+  strategy: {}",
                "+  template:",
                "+    metadata:",
                "+      labels:",
                "+        name: {{.Values.syncopeConfig.name}}",
                "+    spec:",
                "+      containers:",
                "+      - name: {{.Values.syncopeConfig.name}}",
                "+        envFrom:",
                "+        - configMapRef:",
                "+           name: syncope-environment-config",
                "+        image: \"{{.Values.syncopeConfig.repository}}/{{.Values.syncopeConfig.container}}:{{.Values.syncopeConfig.tag}}\"",
                "+        ports:",
                "+        - containerPort: {{.Values.syncopeConfig.containerPort}}",
                "+        resources: {}",
                "+      restartPolicy: Always",
                "+status: {}",
                "+---",
                "+apiVersion: v1",
                "+kind: Service",
                "+metadata:",
                "+  name: \"{{.Values.syncopeConfig.name}}\"",
                "+spec:",
                "+  type: \"{{.Values.syncopeConfig.serviceType}}\"",
                "+  selector:",
                "+    name: \"{{.Values.syncopeConfig.name}}\"",
                "+  ports:",
                "+  - port: {{.Values.syncopeConfig.containerPort}}",
                "+    name: http-api",
                "diff --git a/docker/src/main/resources/kubernetes/syncope/templates/syncope-enduser-deployment.yaml b/docker/src/main/resources/kubernetes/syncope/templates/syncope-enduser-deployment.yaml",
                "new file mode 100644",
                "index 0000000000..2a28cfca6d",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/kubernetes/syncope/templates/syncope-enduser-deployment.yaml",
                "@@ -0,0 +1,51 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+apiVersion: extensions/v1beta1",
                "+kind: Deployment",
                "+metadata:",
                "+  name: {{.Values.syncopeEndUserConfig.name}}",
                "+spec:",
                "+  replicas: 1",
                "+  strategy: {}",
                "+  template:",
                "+    metadata:",
                "+      labels:",
                "+        name: {{.Values.syncopeEndUserConfig.name}}",
                "+    spec:",
                "+      containers:",
                "+      - name: {{.Values.syncopeEndUserConfig.name}}",
                "+        envFrom:",
                "+        - configMapRef:",
                "+           name: syncope-environment-config",
                "+        image: \"{{.Values.syncopeEndUserConfig.repository}}/{{.Values.syncopeEndUserConfig.container}}:{{.Values.syncopeEndUserConfig.tag}}\"",
                "+        ports:",
                "+        - containerPort: {{.Values.syncopeEndUserConfig.containerPort}}",
                "+        resources: {}",
                "+      restartPolicy: Always",
                "+status: {}",
                "+---",
                "+apiVersion: v1",
                "+kind: Service",
                "+metadata:",
                "+  name: \"{{.Values.syncopeEndUserConfig.name}}\"",
                "+spec:",
                "+  type: \"{{.Values.syncopeEndUserConfig.serviceType}}\"",
                "+  selector:",
                "+    name: \"{{.Values.syncopeEndUserConfig.name}}\"",
                "+  ports:",
                "+  - port: {{.Values.syncopeEndUserConfig.containerPort}}",
                "+    name: http-api",
                "diff --git a/docker/src/main/resources/kubernetes/syncope/values.yaml b/docker/src/main/resources/kubernetes/syncope/values.yaml",
                "new file mode 100644",
                "index 0000000000..a6a8513660",
                "--- /dev/null",
                "+++ b/docker/src/main/resources/kubernetes/syncope/values.yaml",
                "@@ -0,0 +1,56 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+### Environment Variables that will be set on all 3 syncope docker containers (core, console, enduser)",
                "+syncopeEnvironment:",
                "+  dbUrl: jdbc:postgresql://postgres:5432/syncope",
                "+  dbUser: syncope",
                "+  dbPoolMax: 10",
                "+  dbPoolMin: 2",
                "+  coreScheme: http # valid values are http and https",
                "+  coreHost: syncope # Host that syncope will use to connect to core.  Needs to match .Values.syncopeConfig.name",
                "+  corePort: 8080",
                "+  userCreds: <YOURPASSWORD> # Needs to match the databaseEnvironment.pgPassword that was provided to the database",
                "+### Config Params for the syncope container (A.K.A. Core)",
                "+syncopeConfig:",
                "+  name: syncope",
                "+  replicas: 1",
                "+  repository: apache",
                "+  container: syncope",
                "+  tag: ${syncope.version}",
                "+  containerPort: 8080",
                "+  memoryLimit: 512Mi",
                "+  serviceType: ClusterIP",
                "+### Config Params for the syncope-console containers",
                "+syncopeConsoleConfig:",
                "+  name: syncope-console",
                "+  replicas: 1",
                "+  repository: apache",
                "+  container: syncope-console",
                "+  tag: ${syncope.version}",
                "+  containerPort: 8080",
                "+  memoryLimit: 512Mi",
                "+  serviceType: ClusterIP",
                "+### Config Params for the syncope-enduser containers",
                "+syncopeEndUserConfig:",
                "+  name: syncope-enduser",
                "+  replicas: 1",
                "+  repository: apache",
                "+  container: syncope-enduser",
                "+  tag: ${syncope.version}",
                "+  containerPort: 8080",
                "+  memoryLimit: 512Mi",
                "+  serviceType: ClusterIP",
                "diff --git a/src/main/asciidoc/getting-started/obtain.adoc b/src/main/asciidoc/getting-started/obtain.adoc",
                "index 9d77fb49b9..1ca4cd5231 100644",
                "--- a/src/main/asciidoc/getting-started/obtain.adoc",
                "+++ b/src/main/asciidoc/getting-started/obtain.adoc",
                "@@ -356,6 +356,6 @@ Besides the one reported below, more samples are",
                " ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/tree/syncope-{docVersion}/docker/src/main/resources[available^].",
                "+https://github.com/apache/syncope/tree/syncope-{docVersion}/docker/src/main/resources/docker-compose[available^].",
                " endif::[]",
                " ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/tree/2_0_X/docker/src/main/resources[available^].",
                "+https://github.com/apache/syncope/tree/2_0_X/docker/src/main/resources/docker-compose[available^].",
                " endif::[]",
                "@@ -463,21 +463,32 @@ Credentials: `admin` / `password`",
                "-==== Kubernetes Install",
                "+==== Kubernetes sample",
                "-Using the same images above it is possible to install in Kubernetes.  Provided is a set of example helm charts that can be used to install Syncope directly in Kubernetes.  Your specific setup might be different but ideally these can be a baseline install for your specific needs.  This will walk you through the installation of syncope via helm.",
                "+A set of example https://www.helm.sh/[Helm^] charts is",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/tree/syncope-{docVersion}/docker/src/main/resources/kubernetes[available^],",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/tree/2_0_X/docker/src/main/resources/kubernetes[available^],",
                "+endif::[]",
                "+that can be used to install Apache Syncope directly in Kubernetes.",
                "-It makes a couple assumptions:",
                "+Some assumptions are made:",
                "-* Have a working Kubernetes Cluster to install into.",
                "-** If you don't have one then GCP has a decent https://kubernetes.io/docs/setup/[tutorial] .  **NOTE:** You could also use any other Cloud Provider or Local install (e.g. AWS, Minikub, Openshift)",
                "-* Have helm installed",
                "-** Follow these https://docs.helm.sh/using_helm/[instructions] if you don't",
                "-* You have your kubernetes cluster to allow for dynamic provisioning of persistent volumes in K8s",
                "-** If you don't have it then you will need to manually create the volume or turn on dynamic provisioning.  Refer to this link https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/[here]",
                "+* a working Kubernetes Cluster to install into - if not available, follow this",
                "+https://kubernetes.io/docs/setup/[tutorial^]",
                "+[NOTE]",
                "+Any other cloud provider or local install (e.g. AWS, Minikube, OpenShift) can be used",
                "+",
                "+* Helm installed - follow these https://docs.helm.sh/using_helm/[instructions^] if you don't",
                "-===== Overview Of Install",
                "+* allow for https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/[dynamic provisioning^] of persistent",
                "+volumes - otherwise you will need to manually create the volume",
                "-The install is broken into two separate helm charts.  This is due to the fact that syncope doesn't startup properly is the database isn't fully initialized yet.",
                "+The install process is broken into two separate Helm charts; this is due to the fact that Apache Syncope doesn't startup",
                "+properly if the database used as internal storage is not fully initialized yet:",
                "-* Postgres Chart - this will install the postgres database.  It will also configure a persistent volume and persistent volume claim to store the data",
                "-* Syncope Chart - This is the actual syncope install.  It will install 3 separate pods (Core, Console, and Enduser)",
                "+* `postgres` chart; this will install the PostgreSQL database and configure a persistent volume and persistent volume",
                "+claim to store the data",
                "+* `syncope` chart; this is the actual Apache Syncope install, which will deploy three separate pods",
                "+(Core, Console, and Enduser)",
                "@@ -485,9 +496,17 @@ image::SyncopeLayoutInK8s.png[]",
                "-**Values.yaml** - Each Helm Chart has a values.yaml.  These are the configurable parameters for your specific install.  Before running the install you need to update the values.yaml for your needs",
                "+The installation steps are:",
                "-===== Install Commands",
                "+. Open a terminal and navigate to the `kubernetes`",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/tree/syncope-{docVersion}/docker/src/main/resources/kubernetes[folder^],",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/tree/2_0_X/docker/src/main/resources/kubernetes[folder^],",
                "+endif::[]",
                "+wherever you downloaded it",
                "-Open a terminal and navigate to the \"helm\" https://github.com/apache/syncope/tree/master/docker/src/main/resources/k8s/helm[folder] wherever you downloaded the code.  **REMINDER:  SET YOUR VALUES.YAML!!!**",
                "+. Set your actual values in `postgres/values.yaml`",
                "-.Install postgres",
                "+. Install PostgreSQL",
                "++",
                " [source,bash]",
                "@@ -496,6 +515,9 @@ helm install postgres --name postgres --namespace <YOUR_NAMESPACE> -f postgres/v",
                " ----",
                "++",
                "+Wait until PostgreSQL is initialized (watch logs for confirmation)",
                "-Let Postgres initialize (about 20-30 seconds).  You can watch logs to confirm",
                "+. Set your actual values in `syncope/values.yaml`",
                "-.Install syncope",
                "+. Install Apache Syncope",
                "++",
                " [source,bash]"
            ],
            "changed_files": [
                "docker/src/main/resources/kubernetes/postgres/Chart.yaml",
                "docker/src/main/resources/kubernetes/postgres/templates/db-deployment.yaml",
                "docker/src/main/resources/kubernetes/postgres/values.yaml",
                "docker/src/main/resources/kubernetes/syncope/Chart.yaml",
                "docker/src/main/resources/kubernetes/syncope/templates/syncope-console-deployment.yaml",
                "docker/src/main/resources/kubernetes/syncope/templates/syncope-deployment.yaml",
                "docker/src/main/resources/kubernetes/syncope/templates/syncope-enduser-deployment.yaml",
                "docker/src/main/resources/kubernetes/syncope/values.yaml",
                "src/main/asciidoc/getting-started/obtain.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5ca5439383de631df351c035f4fcdfda5a2d43a7"
                ],
                [
                    "no-tag",
                    "44c8157d40636efa2c96bc2c83e8de452c8ff835"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "224303fd2d54edaa489718558b9c80bafcd8b3e4",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538731144,
            "hunks": 9,
            "message": "Supporting Wildfly 14",
            "diff": [
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index dc5e8d15a5..5cac7648a3 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -1220,3 +1220,3 @@ under the License.",
                "     <profile>",
                "-      <id>jboss-it</id>",
                "+      <id>wildfly-it</id>",
                "@@ -1283,3 +1283,3 @@ under the License.",
                "                 <zipUrlInstaller>",
                "-                  <url>http://download.jboss.org/wildfly/13.0.0.Final/wildfly-13.0.0.Final.zip</url>",
                "+                  <url>http://download.jboss.org/wildfly/14.0.1.Final/wildfly-14.0.1.Final.zip</url>",
                "                   <downloadDir>${settings.localRepository}/org/codehaus/cargo/cargo-container-archives</downloadDir>",
                "diff --git a/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml b/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "index e0fb916caf..eefc77d28f 100644",
                "--- a/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "+++ b/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "@@ -103,3 +103,3 @@ under the License.",
                "         <entry key=\"openjpa.MetaDataFactory\" ",
                "-               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly12x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "+               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly13x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "       </map>",
                "diff --git a/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml b/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml",
                "index 18ad5274fe..a340788aca 100644",
                "--- a/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml",
                "+++ b/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml",
                "@@ -103,3 +103,3 @@ under the License.",
                "         <entry key=\"openjpa.MetaDataFactory\" ",
                "-               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly12x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "+               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly13x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "       </map>",
                "diff --git a/src/main/asciidoc/getting-started/obtain.adoc b/src/main/asciidoc/getting-started/obtain.adoc",
                "index 741d64e3dc..3e094fbafd 100644",
                "--- a/src/main/asciidoc/getting-started/obtain.adoc",
                "+++ b/src/main/asciidoc/getting-started/obtain.adoc",
                "@@ -206,3 +206,3 @@ examples:",
                " . https://payara.gitbooks.io/payara-server/content/documentation/user-guides/connection-pools/connection-pools.html[Payara Server 5^]",
                "-. https://docs.jboss.org/author/display/WFLY10/DataSource+configuration[Wildfly 13^]",
                "+. http://docs.wildfly.org/14/Admin_Guide.html#DataSource[Wildfly 14^]",
                " ====",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "index 3e59024423..2d3a704421 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "@@ -36,2 +36,2 @@ Each JavaEE Container provides its own way to accomplish this task:",
                "   * https://payara.gitbooks.io/payara-server/content/documentation/user-guides/connection-pools/connection-pools.html[Payara Server 5^]",
                "-  * https://docs.jboss.org/author/display/WFLY10/DataSource+configuration[Wildfly 13^]",
                "\\ No newline at end of file",
                "+  * http://docs.wildfly.org/14/Admin_Guide.html#DataSource[Wildfly 14^]",
                "\\ No newline at end of file",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "index 9565da676e..ac0fb2cecd 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "@@ -118,3 +118,3 @@ among JVM options.",
                "-===== Wildfly 13",
                "+===== Wildfly 14",
                "diff --git a/src/site/xdoc/building.xml b/src/site/xdoc/building.xml",
                "index e95046e93f..c24b03ca5e 100644",
                "--- a/src/site/xdoc/building.xml",
                "+++ b/src/site/xdoc/building.xml",
                "@@ -162,3 +162,3 @@ under the License.",
                "         <a href=\"http://www.wildfly.org\">Wildfly</a> via",
                "-        <source>$ mvn -Pjboss-it</source>",
                "+        <source>$ mvn -Pwildfly-it</source>",
                "       </subsection>"
            ],
            "changed_files": [
                "fit/core-reference/pom.xml",
                "fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml",
                "src/main/asciidoc/getting-started/obtain.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "src/site/xdoc/building.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a0345d05976a4992766c6ddc7a0636bb73db8dfa"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: contain, admin, administration",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c448befbcf37f52bd1a1bd6849bc1503b99b3a7e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538746546,
            "hunks": 27,
            "message": "Fixing OpenAPI quirks on 200 responses not derived from Java when not specified as @ApiResponse",
            "diff": [
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java",
                "index ee7d8402ba..f6133703f8 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java",
                "@@ -20,23 +20,2 @@ package org.apache.syncope.common.rest.api.service;",
                "-import io.swagger.v3.oas.annotations.headers.Header;",
                "-import io.swagger.v3.oas.annotations.media.Content;",
                "-import io.swagger.v3.oas.annotations.media.Schema;",
                "-import io.swagger.v3.oas.annotations.responses.ApiResponse;",
                "-import io.swagger.v3.oas.annotations.responses.ApiResponses;",
                "-import org.apache.syncope.common.lib.to.ErrorTO;",
                "-import org.apache.syncope.common.rest.api.RESTHeaders;",
                "-",
                "-@ApiResponses(",
                "-        @ApiResponse(responseCode = \"400\",",
                "-                description = \"An error occurred; HTTP status code can vary depending on the actual error: \"",
                "-                + \"400, 403, 404, 409, 412\",",
                "-                content =",
                "-                @Content(schema =",
                "-                        @Schema(implementation = ErrorTO.class)),",
                "-                headers = {",
                "-                    @Header(name = RESTHeaders.ERROR_CODE, schema =",
                "-                            @Schema(type = \"string\"), description = \"Error code\"),",
                "-                    @Header(name = RESTHeaders.ERROR_INFO, schema =",
                "-                            @Schema(type = \"string\"), description = \"Error message\") })",
                "-)",
                " public interface JAXRSService {",
                "diff --git a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "index 262325acaa..fe8283d850 100644",
                "--- a/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "+++ b/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "@@ -22,4 +22,2 @@ import io.swagger.v3.oas.annotations.Parameter;",
                " import io.swagger.v3.oas.annotations.enums.ParameterIn;",
                "-import io.swagger.v3.oas.annotations.media.ArraySchema;",
                "-import io.swagger.v3.oas.annotations.media.Content;",
                " import io.swagger.v3.oas.annotations.media.Schema;",
                "@@ -62,9 +60,2 @@ public interface LoggerService extends JAXRSService {",
                "      */",
                "-    @ApiResponses(",
                "-            @ApiResponse(responseCode = \"200\",",
                "-                    description = \"list of memory appenders available in the current logging configuration\",",
                "-                    content =",
                "-                    @Content(array =",
                "-                            @ArraySchema(schema =",
                "-                                    @Schema(implementation = LogAppender.class)))))",
                "     @GET",
                "@@ -80,9 +71,2 @@ public interface LoggerService extends JAXRSService {",
                "      */",
                "-    @ApiResponses(",
                "-            @ApiResponse(responseCode = \"200\",",
                "-                    description = \"last log statements available in the provided memory appender\",",
                "-                    content =",
                "-                    @Content(array =",
                "-                            @ArraySchema(schema =",
                "-                                    @Schema(implementation = LogStatement.class)))))",
                "     @GET",
                "@@ -97,9 +81,2 @@ public interface LoggerService extends JAXRSService {",
                "      */",
                "-    @ApiResponses(",
                "-            @ApiResponse(responseCode = \"200\",",
                "-                    description = \"list of all managed events in audit\",",
                "-                    content =",
                "-                    @Content(array =",
                "-                            @ArraySchema(schema =",
                "-                                    @Schema(implementation = EventCategory.class)))))",
                "     @GET",
                "@@ -116,8 +93,2 @@ public interface LoggerService extends JAXRSService {",
                "      */",
                "-    @ApiResponses(",
                "-            @ApiResponse(responseCode = \"200\",",
                "-                    description = \"logger with matching type and name\",",
                "-                    content =",
                "-                    @Content(schema =",
                "-                            @Schema(implementation = LoggerTO.class))))",
                "     @GET",
                "@@ -133,9 +104,2 @@ public interface LoggerService extends JAXRSService {",
                "      */",
                "-    @ApiResponses(",
                "-            @ApiResponse(responseCode = \"200\",",
                "-                    description = \"list of loggers with matching type\",",
                "-                    content =",
                "-                    @Content(array =",
                "-                            @ArraySchema(schema =",
                "-                                    @Schema(implementation = LoggerTO.class)))))",
                "     @GET",
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java",
                "index 788c12f835..c3134b6637 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java",
                "@@ -20,3 +20,6 @@ package org.apache.syncope.core.rest.cxf;",
                "-import io.swagger.v3.oas.integration.api.OpenAPIConfiguration;",
                "+import io.swagger.v3.jaxrs2.Reader;",
                "+import io.swagger.v3.oas.models.OpenAPI;",
                "+import io.swagger.v3.oas.models.Operation;",
                "+import io.swagger.v3.oas.models.PathItem;",
                " import io.swagger.v3.oas.models.headers.Header;",
                "@@ -28,4 +31,8 @@ import io.swagger.v3.oas.models.parameters.Parameter;",
                " import io.swagger.v3.oas.models.responses.ApiResponse;",
                "+import io.swagger.v3.oas.models.responses.ApiResponses;",
                "+import io.swagger.v3.oas.models.tags.Tag;",
                " import java.net.URL;",
                " import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                " import java.util.LinkedHashMap;",
                "@@ -34,2 +41,7 @@ import java.util.Map;",
                " import java.util.Optional;",
                "+import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.commons.lang3.tuple.Pair;",
                "+import org.apache.cxf.jaxrs.model.ClassResourceInfo;",
                "+import org.apache.cxf.jaxrs.model.OperationResourceInfo;",
                "+import org.apache.cxf.jaxrs.model.doc.JavaDocProvider;",
                " import org.apache.cxf.jaxrs.openapi.OpenApiCustomizer;",
                "@@ -43,2 +55,11 @@ public class SyncopeOpenApiCustomizer extends OpenApiCustomizer {",
                "+    // remove the line below with CXF 3.2.7",
                "+    private JavaDocProvider javadocProvider;",
                "+",
                "+    // remove the line below with CXF 3.2.7",
                "+    private boolean replaceTags;",
                "+",
                "+    // remove the line below with CXF 3.2.7",
                "+    private List<ClassResourceInfo> cris;",
                "+",
                "     private List<String> domains;",
                "@@ -50,2 +71,4 @@ public class SyncopeOpenApiCustomizer extends OpenApiCustomizer {",
                "         if (javaDocURLs != null) {",
                "+            // remove the line below with CXF 3.2.7",
                "+            this.javadocProvider = new JavaDocProvider(javaDocURLs);",
                "             super.setJavaDocURLs(javaDocURLs);",
                "@@ -55,24 +78,82 @@ public class SyncopeOpenApiCustomizer extends OpenApiCustomizer {",
                "     @Override",
                "-    public OpenAPIConfiguration customize(final OpenAPIConfiguration configuration) {",
                "-        Map<String, Header> headers = new LinkedHashMap<>();",
                "-        headers.put(",
                "-                RESTHeaders.ERROR_CODE,",
                "-                new Header().schema(new Schema<>().type(\"string\")).description(\"Error code\"));",
                "-        headers.put(",
                "-                RESTHeaders.ERROR_INFO,",
                "-                new Header().schema(new Schema<>().type(\"string\")).description(\"Error message\"));",
                "+    public void setReplaceTags(final boolean replaceTags) {",
                "+        // remove this method with CXF 3.2.7",
                "+        this.replaceTags = replaceTags;",
                "+        super.setReplaceTags(replaceTags);",
                "+    }",
                "-        Content content = new Content();",
                "-        content.addMediaType(",
                "-                javax.ws.rs.core.MediaType.APPLICATION_JSON, new MediaType().schema(new Schema<ErrorTO>()));",
                "-        content.addMediaType(",
                "-                javax.ws.rs.core.MediaType.APPLICATION_XML, new MediaType().schema(new Schema<ErrorTO>()));",
                "+    @Override",
                "+    public void setClassResourceInfos(final List<ClassResourceInfo> classResourceInfos) {",
                "+        // remove this method with CXF 3.2.7",
                "+        this.cris = classResourceInfos;",
                "+        super.setClassResourceInfos(classResourceInfos);",
                "+    }",
                "-        configuration.getOpenAPI().getComponents().addResponses(\"400\", new ApiResponse().",
                "-                description(\"An error occurred; HTTP status code can vary depending on the actual error: \"",
                "-                        + \"400, 403, 404, 409, 412\").",
                "-                headers(headers).",
                "-                content(content));",
                "+    @Override",
                "+    public void customize(final OpenAPI oas) {",
                "+        // remove this method with CXF 3.2.7",
                "+        if (replaceTags || javadocProvider != null) {",
                "+            Map<String, ClassResourceInfo> operations = new HashMap<>();",
                "+            Map<Pair<String, String>, OperationResourceInfo> methods = new HashMap<>();",
                "+            cris.forEach(cri -> {",
                "+                cri.getMethodDispatcher().getOperationResourceInfos().forEach(ori -> {",
                "+                    String normalizedPath = getNormalizedPath(",
                "+                            cri.getURITemplate().getValue(), ori.getURITemplate().getValue());",
                "+",
                "+                    operations.put(normalizedPath, cri);",
                "+                    methods.put(Pair.of(ori.getHttpMethod(), normalizedPath), ori);",
                "+                });",
                "+            });",
                "+",
                "+            List<Tag> tags = new ArrayList<>();",
                "+            oas.getPaths().forEach((pathKey, pathItem) -> {",
                "+                Tag tag = null;",
                "+                if (replaceTags && operations.containsKey(pathKey)) {",
                "+                    ClassResourceInfo cri = operations.get(pathKey);",
                "+",
                "+                    tag = new Tag();",
                "+                    tag.setName(cri.getURITemplate().getValue().replaceAll(\"/\", \"_\"));",
                "+                    if (javadocProvider != null) {",
                "+                        tag.setDescription(javadocProvider.getClassDoc(cri));",
                "+                    }",
                "+",
                "+                    if (!tags.contains(tag)) {",
                "+                        tags.add(tag);",
                "+                    }",
                "+                }",
                "+",
                "+                for (Map.Entry<PathItem.HttpMethod, Operation> subentry : pathItem.readOperationsMap().entrySet()) {",
                "+                    if (replaceTags && tag != null) {",
                "+                        subentry.getValue().setTags(Collections.singletonList(tag.getName()));",
                "+                    }",
                "+",
                "+                    Pair<String, String> key = Pair.of(subentry.getKey().name(), pathKey);",
                "+                    if (methods.containsKey(key) && javadocProvider != null) {",
                "+                        OperationResourceInfo ori = methods.get(key);",
                "+",
                "+                        if (StringUtils.isBlank(subentry.getValue().getSummary())) {",
                "+                            subentry.getValue().setSummary(javadocProvider.getMethodDoc(ori));",
                "+                        }",
                "+                        if (subentry.getValue().getParameters() == null) {",
                "+                            List<Parameter> parameters = new ArrayList<>();",
                "+                            addParameters(parameters);",
                "+                            subentry.getValue().setParameters(parameters);",
                "+                        } else {",
                "+                            for (int i = 0; i < subentry.getValue().getParameters().size(); i++) {",
                "+                                if (StringUtils.isBlank(subentry.getValue().getParameters().get(i).getDescription())) {",
                "+                                    subentry.getValue().getParameters().get(i).",
                "+                                            setDescription(javadocProvider.getMethodParameterDoc(ori, i));",
                "+                                }",
                "+                            }",
                "+                            addParameters(subentry.getValue().getParameters());",
                "+                        }",
                "-        return super.customize(configuration);",
                "+                        customizeResponses(subentry.getValue(), ori);",
                "+                    }",
                "+                }",
                "+            });",
                "+            if (replaceTags && oas.getTags() != null) {",
                "+                oas.setTags(tags);",
                "+            }",
                "+        }",
                "     }",
                "@@ -104,2 +185,50 @@ public class SyncopeOpenApiCustomizer extends OpenApiCustomizer {",
                "     }",
                "+",
                "+    protected void customizeResponses(final Operation operation, final OperationResourceInfo ori) {",
                "+        // this will be replaced by super.customizeResponses(operation, ori);",
                "+        if (operation.getResponses() != null && !operation.getResponses().isEmpty()) {",
                "+            ApiResponse response = operation.getResponses().entrySet().iterator().next().getValue();",
                "+            if (StringUtils.isBlank(response.getDescription())",
                "+                    || (StringUtils.isNotBlank(javadocProvider.getMethodResponseDoc(ori))",
                "+                    && Reader.DEFAULT_DESCRIPTION.equals(response.getDescription()))) {",
                "+",
                "+                response.setDescription(javadocProvider.getMethodResponseDoc(ori));",
                "+            }",
                "+        }",
                "+        //",
                "+",
                "+        ApiResponses responses = operation.getResponses();",
                "+        if (responses == null) {",
                "+            responses = new ApiResponses();",
                "+            operation.setResponses(responses);",
                "+        }",
                "+",
                "+        ApiResponse defaultResponse = responses.getDefault();",
                "+        if (defaultResponse != null) {",
                "+            responses.remove(ApiResponses.DEFAULT);",
                "+            responses.addApiResponse(\"200\", defaultResponse);",
                "+        }",
                "+",
                "+        Map<String, Header> headers = new LinkedHashMap<>();",
                "+        headers.put(",
                "+                RESTHeaders.ERROR_CODE,",
                "+                new Header().schema(new Schema<>().type(\"string\")).description(\"Error code\"));",
                "+        headers.put(",
                "+                RESTHeaders.ERROR_INFO,",
                "+                new Header().schema(new Schema<>().type(\"string\")).description(\"Error message\"));",
                "+",
                "+        Content content = new Content();",
                "+        content.addMediaType(",
                "+                javax.ws.rs.core.MediaType.APPLICATION_JSON, new MediaType().schema(new Schema<ErrorTO>()));",
                "+        content.addMediaType(",
                "+                RESTHeaders.APPLICATION_YAML, new MediaType().schema(new Schema<ErrorTO>()));",
                "+        content.addMediaType(",
                "+                javax.ws.rs.core.MediaType.APPLICATION_XML, new MediaType().schema(new Schema<ErrorTO>()));",
                "+",
                "+        responses.addApiResponse(\"400\", new ApiResponse().",
                "+                description(\"An error occurred; HTTP status code can vary depending on the actual error: \"",
                "+                        + \"400, 403, 404, 409, 412\").",
                "+                headers(headers).",
                "+                content(content));",
                "+    }",
                " }",
                "diff --git a/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/BpmnProcessService.java b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/BpmnProcessService.java",
                "index bb34fdd52b..fcf02201e2 100644",
                "--- a/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/BpmnProcessService.java",
                "+++ b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/BpmnProcessService.java",
                "@@ -21,5 +21,2 @@ package org.apache.syncope.common.rest.api.service;",
                " import io.swagger.v3.oas.annotations.Operation;",
                "-import io.swagger.v3.oas.annotations.media.ArraySchema;",
                "-import io.swagger.v3.oas.annotations.media.Content;",
                "-import io.swagger.v3.oas.annotations.media.Schema;",
                " import io.swagger.v3.oas.annotations.responses.ApiResponse;",
                "@@ -58,7 +55,2 @@ public interface BpmnProcessService extends JAXRSService {",
                "      */",
                "-    @ApiResponses(",
                "-            @ApiResponse(responseCode = \"200\", description = \"available BPMN processes\", content =",
                "-                    @Content(array =",
                "-                            @ArraySchema(schema =",
                "-                                    @Schema(implementation = BpmnProcess.class)))))",
                "     @GET",
                "diff --git a/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserRequestService.java b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserRequestService.java",
                "index 5ad7b1284c..11aac5085b 100644",
                "--- a/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserRequestService.java",
                "+++ b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserRequestService.java",
                "@@ -20,4 +20,2 @@ package org.apache.syncope.common.rest.api.service;",
                "-import io.swagger.v3.oas.annotations.media.Content;",
                "-import io.swagger.v3.oas.annotations.media.Schema;",
                " import io.swagger.v3.oas.annotations.responses.ApiResponse;",
                "@@ -62,6 +60,2 @@ public interface UserRequestService extends JAXRSService {",
                "      */",
                "-    @ApiResponses(",
                "-            @ApiResponse(responseCode = \"200\", description = \"list of all running user requests\", content =",
                "-                    @Content(schema =",
                "-                            @Schema(implementation = PagedResult.class))))",
                "     @GET",
                "@@ -77,7 +71,2 @@ public interface UserRequestService extends JAXRSService {",
                "      */",
                "-    @ApiResponses(",
                "-            @ApiResponse(responseCode = \"200\",",
                "-                    description = \"data about the started request service, including execution id\", content =",
                "-                    @Content(schema =",
                "-                            @Schema(implementation = UserRequest.class))))",
                "     @POST",
                "@@ -110,6 +99,2 @@ public interface UserRequestService extends JAXRSService {",
                "      */",
                "-    @ApiResponses(",
                "-            @ApiResponse(responseCode = \"200\", description = \"list of all available user request forms\", content =",
                "-                    @Content(schema =",
                "-                            @Schema(implementation = PagedResult.class))))",
                "     @GET",
                "@@ -125,6 +110,2 @@ public interface UserRequestService extends JAXRSService {",
                "      */",
                "-    @ApiResponses(",
                "-            @ApiResponse(responseCode = \"200\", description = \"the form for the given task id\", content =",
                "-                    @Content(schema =",
                "-                            @Schema(implementation = UserRequestForm.class))))",
                "     @POST",
                "@@ -140,6 +121,2 @@ public interface UserRequestService extends JAXRSService {",
                "      */",
                "-    @ApiResponses(",
                "-            @ApiResponse(responseCode = \"200\", description = \"updated user\", content =",
                "-                    @Content(schema =",
                "-                            @Schema(implementation = UserTO.class))))",
                "     @POST",
                "diff --git a/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowTaskService.java b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowTaskService.java",
                "index b396d6e2af..f379ecad33 100644",
                "--- a/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowTaskService.java",
                "+++ b/ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowTaskService.java",
                "@@ -20,7 +20,5 @@ package org.apache.syncope.common.rest.api.service;",
                "-import io.swagger.v3.oas.annotations.media.ArraySchema;",
                "-import io.swagger.v3.oas.annotations.media.Content;",
                "+import io.swagger.v3.oas.annotations.Parameter;",
                "+import io.swagger.v3.oas.annotations.enums.ParameterIn;",
                " import io.swagger.v3.oas.annotations.media.Schema;",
                "-import io.swagger.v3.oas.annotations.responses.ApiResponse;",
                "-import io.swagger.v3.oas.annotations.responses.ApiResponses;",
                " import io.swagger.v3.oas.annotations.security.SecurityRequirement;",
                "@@ -55,7 +53,2 @@ public interface UserWorkflowTaskService extends JAXRSService {",
                "      */",
                "-    @ApiResponses(",
                "-            @ApiResponse(responseCode = \"200\", description = \"list of available tasks for the given user key\", content =",
                "-                    @Content(array =",
                "-                            @ArraySchema(schema =",
                "-                                    @Schema(implementation = WorkflowTask.class)))))",
                "     @GET",
                "@@ -71,6 +64,4 @@ public interface UserWorkflowTaskService extends JAXRSService {",
                "      */",
                "-    @ApiResponses(",
                "-            @ApiResponse(responseCode = \"200\", description = \"updated user\", content =",
                "-                    @Content(schema =",
                "-                            @Schema(implementation = UserTO.class))))",
                "+    @Parameter(name = \"userKey\", description = \"user key\", in = ParameterIn.PATH, schema =",
                "+            @Schema(type = \"string\"))",
                "     @POST"
            ],
            "changed_files": [
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java",
                "common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java",
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java",
                "ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/BpmnProcessService.java",
                "ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserRequestService.java",
                "ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowTaskService.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "86111565088ac15293d01dbad5be1943e0874117"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6afd17e9a959808360d707269307a649d6af12d0",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537516462,
            "hunks": 26,
            "message": "Removing quite useless (and much confusing) AttTO#schemaInfo",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersDirectoryPanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersDirectoryPanel.java",
                "index e2ebb57756..9bce3092ea 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersDirectoryPanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersDirectoryPanel.java",
                "@@ -43,2 +43,3 @@ import org.apache.syncope.common.lib.to.PlainSchemaTO;",
                " import org.apache.syncope.common.lib.types.AttrSchemaType;",
                "+import org.apache.syncope.common.lib.types.SchemaType;",
                " import org.apache.syncope.common.lib.types.StandardEntitlement;",
                "@@ -148,6 +149,14 @@ public class ParametersDirectoryPanel",
                "             @Override",
                "-            public void populateItem(final Item<ICellPopulator<AttrTO>> item,",
                "-                    final String componentId, final IModel<AttrTO> rowModel) {",
                "-                PlainSchemaTO modelSchemaTO = (PlainSchemaTO) rowModel.getObject().getSchemaInfo();",
                "-                AttrSchemaType type = modelSchemaTO.getType();",
                "+            public void populateItem(",
                "+                    final Item<ICellPopulator<AttrTO>> item,",
                "+                    final String componentId,",
                "+                    final IModel<AttrTO> rowModel) {",
                "+",
                "+                PlainSchemaTO schema = null;",
                "+                try {",
                "+                    schema = schemaRestClient.read(SchemaType.PLAIN, rowModel.getObject().getSchema());",
                "+                } catch (Exception e) {",
                "+                    LOG.error(\"Could not read conf schema {}\", rowModel.getObject().getSchema(), e);",
                "+                }",
                "+                AttrSchemaType type = schema == null ? null : schema.getType();",
                "                 if (type == AttrSchemaType.Binary || type == AttrSchemaType.Encrypted) {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java b/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java",
                "index 862747a4d1..e9f8029ee8 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java",
                "@@ -195,3 +195,3 @@ public abstract class TogglePanel<T extends Serializable> extends WizardMgtPanel",
                "         } else if (modelObject instanceof AttrTO) {",
                "-            key = ((AttrTO) modelObject).getSchemaInfo().getKey();",
                "+            key = ((AttrTO) modelObject).getSchema();",
                "         } else if (modelObject instanceof PolicyTO) {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java",
                "index 722adc945b..7357313211 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java",
                "@@ -176,5 +176,2 @@ public class PlainAttrs extends AbstractAttrs<PlainSchemaTO> {",
                "                 attrTO.getValues().add(\"\");",
                "-",
                "-                // is important to set the schema info only after values setting",
                "-                attrTO.setSchemaInfo(schema);",
                "             } else {",
                "@@ -207,5 +204,2 @@ public class PlainAttrs extends AbstractAttrs<PlainSchemaTO> {",
                "                         attrTO.getValues().add(StringUtils.EMPTY);",
                "-",
                "-                        // is important to set the schema info only after values setting",
                "-                        attrTO.setSchemaInfo(schema);",
                "                     } else {",
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/VirAttrs.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/VirAttrs.java",
                "index d2ceaefaf0..ef20e54f17 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/VirAttrs.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/any/VirAttrs.java",
                "@@ -190,2 +190,3 @@ public class VirAttrs extends AbstractAttrs<VirSchemaTO> {",
                "                     AttrTO attrTO = item.getModelObject();",
                "+                    VirSchemaTO virSchemaTO = schemas.get(attrTO.getSchema());",
                "@@ -193,3 +194,3 @@ public class VirAttrs extends AbstractAttrs<VirSchemaTO> {",
                "                             \"panel\",",
                "-                            schemas.get(attrTO.getSchema()).getLabel(SyncopeConsoleSession.get().getLocale()),",
                "+                            virSchemaTO.getLabel(SyncopeConsoleSession.get().getLocale()),",
                "                             new Model<>(),",
                "@@ -197,8 +198,4 @@ public class VirAttrs extends AbstractAttrs<VirSchemaTO> {",
                "-                    boolean readonly = attrTO.getSchemaInfo() == null",
                "-                            ? false",
                "-                            : VirSchemaTO.class.cast(attrTO.getSchemaInfo()).isReadonly();",
                "-",
                "                     if (mode == AjaxWizard.Mode.TEMPLATE) {",
                "-                        AjaxTextFieldPanel.class.cast(panel).enableJexlHelp().setEnabled(!readonly);",
                "+                        AjaxTextFieldPanel.class.cast(panel).enableJexlHelp().setEnabled(!virSchemaTO.isReadonly());",
                "                     } else {",
                "@@ -207,5 +204,5 @@ public class VirAttrs extends AbstractAttrs<VirSchemaTO> {",
                "                                 \"panel\",",
                "-                                schemas.get(attrTO.getSchema()).getLabel(SyncopeConsoleSession.get().getLocale()),",
                "+                                virSchemaTO.getLabel(SyncopeConsoleSession.get().getLocale()),",
                "                                 AjaxTextFieldPanel.class.cast(panel));",
                "-                        panel.setEnabled(!readonly);",
                "+                        panel.setEnabled(!virSchemaTO.isReadonly());",
                "                     }",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java b/common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java",
                "index 966b1f3a8d..0e1b688f2b 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java",
                "@@ -409,5 +409,2 @@ public final class AnyOperations {",
                "                 AttrTO removed = rwattrs.remove(patch.getAttrTO().getSchema());",
                "-                if (removed != null && removed.getSchemaInfo() != null) {",
                "-                    patch.getAttrTO().setSchemaInfo(removed.getSchemaInfo());",
                "-                }",
                "                 if (patch.getOperation() == PatchOperation.ADD_REPLACE && !patch.getAttrTO().getValues().isEmpty()) {",
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/to/AttrTO.java b/common/lib/src/main/java/org/apache/syncope/common/lib/to/AttrTO.java",
                "index f44258ca0a..b06b6b43f0 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/to/AttrTO.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/to/AttrTO.java",
                "@@ -22,3 +22,2 @@ import org.apache.syncope.common.lib.AbstractBaseBean;",
                " import com.fasterxml.jackson.annotation.JsonProperty;",
                "-import io.swagger.v3.oas.annotations.media.Schema;",
                " import java.util.ArrayList;",
                "@@ -48,7 +47,2 @@ public class AttrTO extends AbstractBaseBean {",
                "-        public Builder schemaInfo(final SchemaTO schemaInfo) {",
                "-            instance.schemaInfo = schemaInfo;",
                "-            return this;",
                "-        }",
                "-",
                "         public Builder value(final String value) {",
                "@@ -73,7 +67,2 @@ public class AttrTO extends AbstractBaseBean {",
                "-    /**",
                "-     * (Optional) schema information for this attribute.",
                "-     */",
                "-    private SchemaTO schemaInfo;",
                "-",
                "     /**",
                "@@ -88,14 +77,2 @@ public class AttrTO extends AbstractBaseBean {",
                "-    /**",
                "-     * @return schema information for this attribute; may be {@code NULL}",
                "-     */",
                "-    @Schema(accessMode = Schema.AccessMode.READ_ONLY)",
                "-    public SchemaTO getSchemaInfo() {",
                "-        return schemaInfo;",
                "-    }",
                "-",
                "-    public void setSchemaInfo(final SchemaTO schemaInfo) {",
                "-        this.schemaInfo = schemaInfo;",
                "-    }",
                "-",
                "     /**",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "index 28f44afe1b..5c134dff4b 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "@@ -79,3 +79,2 @@ import org.apache.syncope.core.provisioning.api.PropagationByResource;",
                " import org.apache.syncope.core.provisioning.api.VirAttrHandler;",
                "-import org.apache.syncope.core.provisioning.api.data.SchemaDataBinder;",
                " import org.apache.syncope.core.provisioning.java.IntAttrNameParser;",
                "@@ -91,5 +90,2 @@ abstract class AbstractAnyDataBinder {",
                "-    @Autowired",
                "-    protected SchemaDataBinder schemaDataBinder;",
                "-",
                "     @Autowired",
                "@@ -561,9 +557,5 @@ abstract class AbstractAnyDataBinder {",
                "         plainAttrs.forEach(plainAttr -> {",
                "-            AttrTO.Builder attrTOBuilder = new AttrTO.Builder().",
                "+            anyTO.getPlainAttrs().add(new AttrTO.Builder().",
                "                     schema(plainAttr.getSchema().getKey()).",
                "-                    values(plainAttr.getValuesAsStrings());",
                "-            if (details) {",
                "-                attrTOBuilder.schemaInfo(schemaDataBinder.getPlainSchemaTO(plainAttr.getSchema().getKey()));",
                "-            }",
                "-            anyTO.getPlainAttrs().add(attrTOBuilder.build());",
                "+                    values(plainAttr.getValuesAsStrings()).build());",
                "         });",
                "@@ -571,7 +563,3 @@ abstract class AbstractAnyDataBinder {",
                "         derAttrs.forEach((schema, value) -> {",
                "-            AttrTO.Builder attrTOBuilder = new AttrTO.Builder().schema(schema.getKey()).value(value);",
                "-            if (details) {",
                "-                attrTOBuilder.schemaInfo(schemaDataBinder.getDerSchemaTO(schema.getKey()));",
                "-            }",
                "-            anyTO.getDerAttrs().add(attrTOBuilder.build());",
                "+            anyTO.getDerAttrs().add(new AttrTO.Builder().schema(schema.getKey()).value(value).build());",
                "         });",
                "@@ -579,7 +567,3 @@ abstract class AbstractAnyDataBinder {",
                "         virAttrs.forEach((schema, values) -> {",
                "-            AttrTO.Builder attrTOBuilder = new AttrTO.Builder().schema(schema.getKey()).values(values);",
                "-            if (details) {",
                "-                attrTOBuilder.schemaInfo(schemaDataBinder.getVirSchemaTO(schema.getKey()));",
                "-            }",
                "-            anyTO.getVirAttrs().add(attrTOBuilder.build());",
                "+            anyTO.getVirAttrs().add(new AttrTO.Builder().schema(schema.getKey()).values(values).build());",
                "         });",
                "@@ -609,3 +593,2 @@ abstract class AbstractAnyDataBinder {",
                "                     values(plainAttr.getValuesAsStrings()).",
                "-                    schemaInfo(schemaDataBinder.getPlainSchemaTO(plainAttr.getSchema().getKey())).",
                "                     build());",
                "@@ -617,3 +600,2 @@ abstract class AbstractAnyDataBinder {",
                "                     value(value).",
                "-                    schemaInfo(schemaDataBinder.getDerSchemaTO(schema.getKey())).",
                "                     build());",
                "@@ -625,3 +607,2 @@ abstract class AbstractAnyDataBinder {",
                "                     values(values).",
                "-                    schemaInfo(schemaDataBinder.getVirSchemaTO(schema.getKey())).",
                "                     build());",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java",
                "index e71c54f6cf..f207ae6595 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java",
                "@@ -56,3 +56,2 @@ public class ConfigurationDataBinderImpl extends AbstractAnyDataBinder implement",
                "         return new AttrTO.Builder().",
                "-                schemaInfo(schemaDataBinder.getPlainSchemaTO(attr.getSchema().getKey())).",
                "                 schema(attr.getSchema().getKey())."
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersDirectoryPanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java",
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/any/VirAttrs.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java",
                "common/lib/src/main/java/org/apache/syncope/common/lib/to/AttrTO.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "93e1a33e6511b2942b10ba3f321e516f0a2742f1"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f068df3131de30f070197c79603e298f3ef801dd",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536651488,
            "hunks": 2,
            "message": "Upgrade Spring Security and JUnit",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index ec0ffcaf91..cca54bd4f6 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -396,3 +396,3 @@ under the License.",
                "     <spring.version>5.0.9.RELEASE</spring.version>",
                "-    <spring-security.version>5.0.7.RELEASE</spring-security.version>",
                "+    <spring-security.version>5.0.8.RELEASE</spring-security.version>",
                "@@ -435,3 +435,3 @@ under the License.",
                "-    <junit.version>5.3.0</junit.version>",
                "+    <junit.version>5.3.1</junit.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e22cdf76d6280914167d96f0f9693f8a4976788d"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "aa29d59ac7506942d72833e178ea9f7e0c81182b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541161799,
            "hunks": 97,
            "message": "[maven-release-plugin] prepare release syncope-2.1.2",
            "diff": [
                "diff --git a/archetype/pom.xml b/archetype/pom.xml",
                "index d0bbd783c3..f20a0a81be 100644",
                "--- a/archetype/pom.xml",
                "+++ b/archetype/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/client/cli/pom.xml b/client/cli/pom.xml",
                "index 1c32c849b2..1fc90a00fe 100644",
                "--- a/client/cli/pom.xml",
                "+++ b/client/cli/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/client/console/pom.xml b/client/console/pom.xml",
                "index 1adb7f4568..30915aab75 100644",
                "--- a/client/console/pom.xml",
                "+++ b/client/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/client/enduser/pom.xml b/client/enduser/pom.xml",
                "index 7b6e97176f..e6efc62c09 100644",
                "--- a/client/enduser/pom.xml",
                "+++ b/client/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/client/lib/pom.xml b/client/lib/pom.xml",
                "index 737b9204fe..5bc67820d7 100644",
                "--- a/client/lib/pom.xml",
                "+++ b/client/lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/client/pom.xml b/client/pom.xml",
                "index 5f1748d1ed..fcab6e4196 100644",
                "--- a/client/pom.xml",
                "+++ b/client/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/common/lib/pom.xml b/common/lib/pom.xml",
                "index 978d7905c9..b6fb69a4b6 100644",
                "--- a/common/lib/pom.xml",
                "+++ b/common/lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-common</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/common/pom.xml b/common/pom.xml",
                "index 0735dfae6f..28047039bc 100644",
                "--- a/common/pom.xml",
                "+++ b/common/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/common/rest-api/pom.xml b/common/rest-api/pom.xml",
                "index d23b6bbb30..1bcfb9e258 100644",
                "--- a/common/rest-api/pom.xml",
                "+++ b/common/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-common</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/core/logic/pom.xml b/core/logic/pom.xml",
                "index cb8177099c..221267ccce 100644",
                "--- a/core/logic/pom.xml",
                "+++ b/core/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/core/persistence-api/pom.xml b/core/persistence-api/pom.xml",
                "index e70606023c..de162e6cc5 100644",
                "--- a/core/persistence-api/pom.xml",
                "+++ b/core/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/core/persistence-jpa/pom.xml b/core/persistence-jpa/pom.xml",
                "index aafb24710b..5e82cff847 100644",
                "--- a/core/persistence-jpa/pom.xml",
                "+++ b/core/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/core/pom.xml b/core/pom.xml",
                "index 39f6df9fc3..0b215529a4 100644",
                "--- a/core/pom.xml",
                "+++ b/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/core/provisioning-api/pom.xml b/core/provisioning-api/pom.xml",
                "index 9b757dae83..dc2cf24077 100644",
                "--- a/core/provisioning-api/pom.xml",
                "+++ b/core/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/core/provisioning-java/pom.xml b/core/provisioning-java/pom.xml",
                "index e5428a1416..c5a95d66f7 100644",
                "--- a/core/provisioning-java/pom.xml",
                "+++ b/core/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/core/rest-cxf/pom.xml b/core/rest-cxf/pom.xml",
                "index 2aecc12559..e1de696a88 100644",
                "--- a/core/rest-cxf/pom.xml",
                "+++ b/core/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/core/spring/pom.xml b/core/spring/pom.xml",
                "index 4c59003493..6e209d5a52 100644",
                "--- a/core/spring/pom.xml",
                "+++ b/core/spring/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/core/upgrade/pom.xml b/core/upgrade/pom.xml",
                "index 35267d336e..b321056654 100644",
                "--- a/core/upgrade/pom.xml",
                "+++ b/core/upgrade/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/core/workflow-api/pom.xml b/core/workflow-api/pom.xml",
                "index 30d4f0ab33..be26248198 100644",
                "--- a/core/workflow-api/pom.xml",
                "+++ b/core/workflow-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/core/workflow-java/pom.xml b/core/workflow-java/pom.xml",
                "index a0f4587716..5abab15161 100644",
                "--- a/core/workflow-java/pom.xml",
                "+++ b/core/workflow-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/deb/console/pom.xml b/deb/console/pom.xml",
                "index 5ffdcd24b6..dd19c4a63d 100644",
                "--- a/deb/console/pom.xml",
                "+++ b/deb/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/deb/core/pom.xml b/deb/core/pom.xml",
                "index 47341d43f4..e062e9a5af 100644",
                "--- a/deb/core/pom.xml",
                "+++ b/deb/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/deb/enduser/pom.xml b/deb/enduser/pom.xml",
                "index ba1b13070e..b395c342cc 100644",
                "--- a/deb/enduser/pom.xml",
                "+++ b/deb/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/deb/pom.xml b/deb/pom.xml",
                "index 1e97bba60e..615ee94c24 100644",
                "--- a/deb/pom.xml",
                "+++ b/deb/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/docker/console/pom.xml b/docker/console/pom.xml",
                "index a7b630c78c..f4397c5dec 100644",
                "--- a/docker/console/pom.xml",
                "+++ b/docker/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-docker</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/docker/core/pom.xml b/docker/core/pom.xml",
                "index 0354d6975f..54ae03d1fd 100644",
                "--- a/docker/core/pom.xml",
                "+++ b/docker/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-docker</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/docker/enduser/pom.xml b/docker/enduser/pom.xml",
                "index cd64407b39..0a56dfc555 100644",
                "--- a/docker/enduser/pom.xml",
                "+++ b/docker/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-docker</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/docker/pom.xml b/docker/pom.xml",
                "index 6329281097..41131e6aac 100644",
                "--- a/docker/pom.xml",
                "+++ b/docker/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/camel/client-console/pom.xml b/ext/camel/client-console/pom.xml",
                "index f55ec16bf2..62acec047d 100644",
                "--- a/ext/camel/client-console/pom.xml",
                "+++ b/ext/camel/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/camel/common-lib/pom.xml b/ext/camel/common-lib/pom.xml",
                "index b13ab82f4d..af1bebedce 100644",
                "--- a/ext/camel/common-lib/pom.xml",
                "+++ b/ext/camel/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/camel/logic/pom.xml b/ext/camel/logic/pom.xml",
                "index e99b7ade73..6edee5dc30 100644",
                "--- a/ext/camel/logic/pom.xml",
                "+++ b/ext/camel/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/camel/persistence-api/pom.xml b/ext/camel/persistence-api/pom.xml",
                "index 3c55ce4a22..9d6c02e551 100644",
                "--- a/ext/camel/persistence-api/pom.xml",
                "+++ b/ext/camel/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/camel/persistence-jpa/pom.xml b/ext/camel/persistence-jpa/pom.xml",
                "index b1cffcb890..1b00b4b862 100644",
                "--- a/ext/camel/persistence-jpa/pom.xml",
                "+++ b/ext/camel/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/camel/pom.xml b/ext/camel/pom.xml",
                "index 67d36f0ef6..d94db8ea77 100644",
                "--- a/ext/camel/pom.xml",
                "+++ b/ext/camel/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/camel/provisioning-api/pom.xml b/ext/camel/provisioning-api/pom.xml",
                "index 4a73960bbd..c515b25f2d 100644",
                "--- a/ext/camel/provisioning-api/pom.xml",
                "+++ b/ext/camel/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/camel/provisioning-camel/pom.xml b/ext/camel/provisioning-camel/pom.xml",
                "index 970f6c5f80..e26ce451a6 100644",
                "--- a/ext/camel/provisioning-camel/pom.xml",
                "+++ b/ext/camel/provisioning-camel/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/camel/rest-api/pom.xml b/ext/camel/rest-api/pom.xml",
                "index 9db81f1de2..42f5e15caa 100644",
                "--- a/ext/camel/rest-api/pom.xml",
                "+++ b/ext/camel/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/camel/rest-cxf/pom.xml b/ext/camel/rest-cxf/pom.xml",
                "index 6f7d775415..0c960df7bf 100644",
                "--- a/ext/camel/rest-cxf/pom.xml",
                "+++ b/ext/camel/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/client-elasticsearch/pom.xml b/ext/elasticsearch/client-elasticsearch/pom.xml",
                "index 07df7fa102..3dbd9fd6bd 100644",
                "--- a/ext/elasticsearch/client-elasticsearch/pom.xml",
                "+++ b/ext/elasticsearch/client-elasticsearch/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/persistence-jpa/pom.xml b/ext/elasticsearch/persistence-jpa/pom.xml",
                "index d023a5e964..1ea5013732 100644",
                "--- a/ext/elasticsearch/persistence-jpa/pom.xml",
                "+++ b/ext/elasticsearch/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/pom.xml b/ext/elasticsearch/pom.xml",
                "index 59ee042398..484a613a51 100644",
                "--- a/ext/elasticsearch/pom.xml",
                "+++ b/ext/elasticsearch/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/provisioning-java/pom.xml b/ext/elasticsearch/provisioning-java/pom.xml",
                "index f3154d477d..c94355c653 100644",
                "--- a/ext/elasticsearch/provisioning-java/pom.xml",
                "+++ b/ext/elasticsearch/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/flowable/client-console/pom.xml b/ext/flowable/client-console/pom.xml",
                "index 4a7dceeb08..8f5f8efa33 100644",
                "--- a/ext/flowable/client-console/pom.xml",
                "+++ b/ext/flowable/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-flowable</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/flowable/common-lib/pom.xml b/ext/flowable/common-lib/pom.xml",
                "index 8d00e20c61..915eb8bf84 100644",
                "--- a/ext/flowable/common-lib/pom.xml",
                "+++ b/ext/flowable/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-flowable</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/flowable/flowable-bpmn/pom.xml b/ext/flowable/flowable-bpmn/pom.xml",
                "index 0cdbee6b00..837c174c18 100644",
                "--- a/ext/flowable/flowable-bpmn/pom.xml",
                "+++ b/ext/flowable/flowable-bpmn/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-flowable</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/flowable/logic/pom.xml b/ext/flowable/logic/pom.xml",
                "index 3ba752cd20..d91f06a8dc 100644",
                "--- a/ext/flowable/logic/pom.xml",
                "+++ b/ext/flowable/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-flowable</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/flowable/pom.xml b/ext/flowable/pom.xml",
                "index 764cebdb0d..6c0e3404c9 100644",
                "--- a/ext/flowable/pom.xml",
                "+++ b/ext/flowable/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/flowable/rest-api/pom.xml b/ext/flowable/rest-api/pom.xml",
                "index 2938b056c1..2d1a66119f 100644",
                "--- a/ext/flowable/rest-api/pom.xml",
                "+++ b/ext/flowable/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-flowable</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/flowable/rest-cxf/pom.xml b/ext/flowable/rest-cxf/pom.xml",
                "index adc476f0e7..37af7d66d7 100644",
                "--- a/ext/flowable/rest-cxf/pom.xml",
                "+++ b/ext/flowable/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-flowable</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/agent/pom.xml b/ext/oidcclient/agent/pom.xml",
                "index 5f7030902f..0179dc4359 100644",
                "--- a/ext/oidcclient/agent/pom.xml",
                "+++ b/ext/oidcclient/agent/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/client-console/pom.xml b/ext/oidcclient/client-console/pom.xml",
                "index 23f82551e4..00ad3312b6 100644",
                "--- a/ext/oidcclient/client-console/pom.xml",
                "+++ b/ext/oidcclient/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/client-enduser/pom.xml b/ext/oidcclient/client-enduser/pom.xml",
                "index 2e30b7d94f..3e72ecd1f1 100644",
                "--- a/ext/oidcclient/client-enduser/pom.xml",
                "+++ b/ext/oidcclient/client-enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/common-lib/pom.xml b/ext/oidcclient/common-lib/pom.xml",
                "index 402bac4bbc..8f3f41b132 100644",
                "--- a/ext/oidcclient/common-lib/pom.xml",
                "+++ b/ext/oidcclient/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/logic/pom.xml b/ext/oidcclient/logic/pom.xml",
                "index a46fb7d091..bc5dd080bd 100644",
                "--- a/ext/oidcclient/logic/pom.xml",
                "+++ b/ext/oidcclient/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/persistence-api/pom.xml b/ext/oidcclient/persistence-api/pom.xml",
                "index f775b6edda..88bc73f3b2 100644",
                "--- a/ext/oidcclient/persistence-api/pom.xml",
                "+++ b/ext/oidcclient/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/persistence-jpa/pom.xml b/ext/oidcclient/persistence-jpa/pom.xml",
                "index df6705b60f..c2b4b20759 100644",
                "--- a/ext/oidcclient/persistence-jpa/pom.xml",
                "+++ b/ext/oidcclient/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/pom.xml b/ext/oidcclient/pom.xml",
                "index 265189d638..ba74602a81 100644",
                "--- a/ext/oidcclient/pom.xml",
                "+++ b/ext/oidcclient/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/provisioning-api/pom.xml b/ext/oidcclient/provisioning-api/pom.xml",
                "index 58a82337b5..768ae9e6a0 100644",
                "--- a/ext/oidcclient/provisioning-api/pom.xml",
                "+++ b/ext/oidcclient/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/provisioning-java/pom.xml b/ext/oidcclient/provisioning-java/pom.xml",
                "index 74089d4b22..34bb3cae30 100644",
                "--- a/ext/oidcclient/provisioning-java/pom.xml",
                "+++ b/ext/oidcclient/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/rest-api/pom.xml b/ext/oidcclient/rest-api/pom.xml",
                "index 0e78bc7e61..a5d2023257 100644",
                "--- a/ext/oidcclient/rest-api/pom.xml",
                "+++ b/ext/oidcclient/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/rest-cxf/pom.xml b/ext/oidcclient/rest-cxf/pom.xml",
                "index 439e41ab90..9c0a6e6e80 100644",
                "--- a/ext/oidcclient/rest-cxf/pom.xml",
                "+++ b/ext/oidcclient/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/pom.xml b/ext/pom.xml",
                "index 23b799c7ca..ae0bfa6641 100644",
                "--- a/ext/pom.xml",
                "+++ b/ext/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/agent/pom.xml b/ext/saml2sp/agent/pom.xml",
                "index 314374198c..400877c504 100644",
                "--- a/ext/saml2sp/agent/pom.xml",
                "+++ b/ext/saml2sp/agent/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/client-console/pom.xml b/ext/saml2sp/client-console/pom.xml",
                "index b9916d4dba..21577e5b44 100644",
                "--- a/ext/saml2sp/client-console/pom.xml",
                "+++ b/ext/saml2sp/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/client-enduser/pom.xml b/ext/saml2sp/client-enduser/pom.xml",
                "index 5d8389eed3..406dd31688 100644",
                "--- a/ext/saml2sp/client-enduser/pom.xml",
                "+++ b/ext/saml2sp/client-enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/common-lib/pom.xml b/ext/saml2sp/common-lib/pom.xml",
                "index b0065bf061..40ae1042ec 100644",
                "--- a/ext/saml2sp/common-lib/pom.xml",
                "+++ b/ext/saml2sp/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/logic/pom.xml b/ext/saml2sp/logic/pom.xml",
                "index 641805bb6d..95ec6c922d 100644",
                "--- a/ext/saml2sp/logic/pom.xml",
                "+++ b/ext/saml2sp/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/persistence-api/pom.xml b/ext/saml2sp/persistence-api/pom.xml",
                "index 4c61561e4c..9dbcabe8ad 100644",
                "--- a/ext/saml2sp/persistence-api/pom.xml",
                "+++ b/ext/saml2sp/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/persistence-jpa/pom.xml b/ext/saml2sp/persistence-jpa/pom.xml",
                "index fbe1e28be3..ead9270631 100644",
                "--- a/ext/saml2sp/persistence-jpa/pom.xml",
                "+++ b/ext/saml2sp/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/pom.xml b/ext/saml2sp/pom.xml",
                "index 702f4623ce..23cff264a0 100644",
                "--- a/ext/saml2sp/pom.xml",
                "+++ b/ext/saml2sp/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/provisioning-api/pom.xml b/ext/saml2sp/provisioning-api/pom.xml",
                "index 23b8b4a899..a8debd8c88 100644",
                "--- a/ext/saml2sp/provisioning-api/pom.xml",
                "+++ b/ext/saml2sp/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/provisioning-java/pom.xml b/ext/saml2sp/provisioning-java/pom.xml",
                "index a323802450..4c7d490308 100644",
                "--- a/ext/saml2sp/provisioning-java/pom.xml",
                "+++ b/ext/saml2sp/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/rest-api/pom.xml b/ext/saml2sp/rest-api/pom.xml",
                "index 73fef72f9e..d793812fc3 100644",
                "--- a/ext/saml2sp/rest-api/pom.xml",
                "+++ b/ext/saml2sp/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/rest-cxf/pom.xml b/ext/saml2sp/rest-cxf/pom.xml",
                "index 4ba22530d7..ffac985f25 100644",
                "--- a/ext/saml2sp/rest-cxf/pom.xml",
                "+++ b/ext/saml2sp/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/client-console/pom.xml b/ext/scimv2/client-console/pom.xml",
                "index 49d1a317ca..605e6ef535 100644",
                "--- a/ext/scimv2/client-console/pom.xml",
                "+++ b/ext/scimv2/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/common-lib/pom.xml b/ext/scimv2/common-lib/pom.xml",
                "index 0195969b9e..ccbdfda365 100644",
                "--- a/ext/scimv2/common-lib/pom.xml",
                "+++ b/ext/scimv2/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/logic/pom.xml b/ext/scimv2/logic/pom.xml",
                "index e6e2b823c3..2b23efab49 100644",
                "--- a/ext/scimv2/logic/pom.xml",
                "+++ b/ext/scimv2/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/pom.xml b/ext/scimv2/pom.xml",
                "index f6157b0d43..b8a21bcbca 100644",
                "--- a/ext/scimv2/pom.xml",
                "+++ b/ext/scimv2/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/rest-api/pom.xml b/ext/scimv2/rest-api/pom.xml",
                "index d24bf7073b..c7ecf96041 100644",
                "--- a/ext/scimv2/rest-api/pom.xml",
                "+++ b/ext/scimv2/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/rest-cxf/pom.xml b/ext/scimv2/rest-cxf/pom.xml",
                "index a8c815b8c7..277a3f9de8 100644",
                "--- a/ext/scimv2/rest-cxf/pom.xml",
                "+++ b/ext/scimv2/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/scim-rest-api/pom.xml b/ext/scimv2/scim-rest-api/pom.xml",
                "index 36313b7510..ef323cf1c9 100644",
                "--- a/ext/scimv2/scim-rest-api/pom.xml",
                "+++ b/ext/scimv2/scim-rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/scim-rest-cxf/pom.xml b/ext/scimv2/scim-rest-cxf/pom.xml",
                "index 2f9dcb5283..7251fa6fcb 100644",
                "--- a/ext/scimv2/scim-rest-cxf/pom.xml",
                "+++ b/ext/scimv2/scim-rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ext/swagger-ui/pom.xml b/ext/swagger-ui/pom.xml",
                "index 72876732a8..5d0c58a418 100644",
                "--- a/ext/swagger-ui/pom.xml",
                "+++ b/ext/swagger-ui/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/fit/build-tools/pom.xml b/fit/build-tools/pom.xml",
                "index 7379a2fa0c..7db3526227 100644",
                "--- a/fit/build-tools/pom.xml",
                "+++ b/fit/build-tools/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/fit/console-reference/pom.xml b/fit/console-reference/pom.xml",
                "index 6524158455..a539b28c19 100644",
                "--- a/fit/console-reference/pom.xml",
                "+++ b/fit/console-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index aaf47c042b..303a729478 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/fit/enduser-reference/pom.xml b/fit/enduser-reference/pom.xml",
                "index 1c8308b84b..bd8fd71cdb 100644",
                "--- a/fit/enduser-reference/pom.xml",
                "+++ b/fit/enduser-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/fit/pom.xml b/fit/pom.xml",
                "index b0e04d04f8..56081b3ff4 100644",
                "--- a/fit/pom.xml",
                "+++ b/fit/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "index 767cf5d358..585a8a22cf 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide-eclipse</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "     <relativePath>../../</relativePath>",
                "diff --git a/ide/eclipse/pom.xml b/ide/eclipse/pom.xml",
                "index 59d5f228f4..ed2de3a117 100644",
                "--- a/ide/eclipse/pom.xml",
                "+++ b/ide/eclipse/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "index 3afa26c716..315d08e8b2 100644",
                "--- a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "+++ b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide-eclipse</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "     <relativePath>../../</relativePath>",
                "diff --git a/ide/netbeans/pom.xml b/ide/netbeans/pom.xml",
                "index 09e3eea656..dcfe2f524b 100644",
                "--- a/ide/netbeans/pom.xml",
                "+++ b/ide/netbeans/pom.xml",
                "@@ -22,3 +22,3 @@ under the License.",
                "     <artifactId>syncope-ide</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/ide/pom.xml b/ide/pom.xml",
                "index 6576c08334..d357fcf808 100644",
                "--- a/ide/pom.xml",
                "+++ b/ide/pom.xml",
                "@@ -24,3 +24,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/installer/pom.xml b/installer/pom.xml",
                "index 2f02a61b77..b4f8aff09e 100644",
                "--- a/installer/pom.xml",
                "+++ b/installer/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>",
                "diff --git a/pom.xml b/pom.xml",
                "index 2889bfd70a..41494196df 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@ under the License.",
                "   <artifactId>syncope</artifactId>",
                "-  <version>2.1.2-SNAPSHOT</version>",
                "+  <version>2.1.2</version>",
                "   <packaging>pom</packaging>",
                "@@ -54,3 +54,3 @@ under the License.",
                "     <url>https://gitbox.apache.org/repos/asf?p=syncope.git</url>",
                "-    <tag>HEAD</tag>",
                "+    <tag>syncope-2.1.2</tag>",
                "   </scm>",
                "diff --git a/standalone/pom.xml b/standalone/pom.xml",
                "index 72508812e2..6b96d7aaf8 100644",
                "--- a/standalone/pom.xml",
                "+++ b/standalone/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.2-SNAPSHOT</version>",
                "+    <version>2.1.2</version>",
                "   </parent>"
            ],
            "changed_files": [
                "archetype/pom.xml",
                "client/cli/pom.xml",
                "client/console/pom.xml",
                "client/enduser/pom.xml",
                "client/lib/pom.xml",
                "client/pom.xml",
                "common/lib/pom.xml",
                "common/pom.xml",
                "common/rest-api/pom.xml",
                "core/logic/pom.xml",
                "core/persistence-api/pom.xml",
                "core/persistence-jpa/pom.xml",
                "core/pom.xml",
                "core/provisioning-api/pom.xml",
                "core/provisioning-java/pom.xml",
                "core/rest-cxf/pom.xml",
                "core/spring/pom.xml",
                "core/upgrade/pom.xml",
                "core/workflow-api/pom.xml",
                "core/workflow-java/pom.xml",
                "deb/console/pom.xml",
                "deb/core/pom.xml",
                "deb/enduser/pom.xml",
                "deb/pom.xml",
                "docker/console/pom.xml",
                "docker/core/pom.xml",
                "docker/enduser/pom.xml",
                "docker/pom.xml",
                "ext/camel/client-console/pom.xml",
                "ext/camel/common-lib/pom.xml",
                "ext/camel/logic/pom.xml",
                "ext/camel/persistence-api/pom.xml",
                "ext/camel/persistence-jpa/pom.xml",
                "ext/camel/pom.xml",
                "ext/camel/provisioning-api/pom.xml",
                "ext/camel/provisioning-camel/pom.xml",
                "ext/camel/rest-api/pom.xml",
                "ext/camel/rest-cxf/pom.xml",
                "ext/elasticsearch/client-elasticsearch/pom.xml",
                "ext/elasticsearch/persistence-jpa/pom.xml",
                "ext/elasticsearch/pom.xml",
                "ext/elasticsearch/provisioning-java/pom.xml",
                "ext/flowable/client-console/pom.xml",
                "ext/flowable/common-lib/pom.xml",
                "ext/flowable/flowable-bpmn/pom.xml",
                "ext/flowable/logic/pom.xml",
                "ext/flowable/pom.xml",
                "ext/flowable/rest-api/pom.xml",
                "ext/flowable/rest-cxf/pom.xml",
                "ext/oidcclient/agent/pom.xml",
                "ext/oidcclient/client-console/pom.xml",
                "ext/oidcclient/client-enduser/pom.xml",
                "ext/oidcclient/common-lib/pom.xml",
                "ext/oidcclient/logic/pom.xml",
                "ext/oidcclient/persistence-api/pom.xml",
                "ext/oidcclient/persistence-jpa/pom.xml",
                "ext/oidcclient/pom.xml",
                "ext/oidcclient/provisioning-api/pom.xml",
                "ext/oidcclient/provisioning-java/pom.xml",
                "ext/oidcclient/rest-api/pom.xml",
                "ext/oidcclient/rest-cxf/pom.xml",
                "ext/pom.xml",
                "ext/saml2sp/agent/pom.xml",
                "ext/saml2sp/client-console/pom.xml",
                "ext/saml2sp/client-enduser/pom.xml",
                "ext/saml2sp/common-lib/pom.xml",
                "ext/saml2sp/logic/pom.xml",
                "ext/saml2sp/persistence-api/pom.xml",
                "ext/saml2sp/persistence-jpa/pom.xml",
                "ext/saml2sp/pom.xml",
                "ext/saml2sp/provisioning-api/pom.xml",
                "ext/saml2sp/provisioning-java/pom.xml",
                "ext/saml2sp/rest-api/pom.xml",
                "ext/saml2sp/rest-cxf/pom.xml",
                "ext/scimv2/client-console/pom.xml",
                "ext/scimv2/common-lib/pom.xml",
                "ext/scimv2/logic/pom.xml",
                "ext/scimv2/pom.xml",
                "ext/scimv2/rest-api/pom.xml",
                "ext/scimv2/rest-cxf/pom.xml",
                "ext/scimv2/scim-rest-api/pom.xml",
                "ext/scimv2/scim-rest-cxf/pom.xml",
                "ext/swagger-ui/pom.xml",
                "fit/build-tools/pom.xml",
                "fit/console-reference/pom.xml",
                "fit/core-reference/pom.xml",
                "fit/enduser-reference/pom.xml",
                "fit/pom.xml",
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml",
                "ide/eclipse/pom.xml",
                "ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/pom.xml",
                "ide/netbeans/pom.xml",
                "ide/pom.xml",
                "installer/pom.xml",
                "pom.xml",
                "standalone/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b1a4a9d261f54e0c91d8f86552de68313a214a21"
                ],
                [
                    "no-tag",
                    "3c02d850d0d783ecbc6e415d8a90fcf8843b06a7"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, user",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "150568f5316dfdd5136fac49d801958a9ad6c639",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1532685331,
            "hunks": 24,
            "message": "Update to Wildfly 13",
            "diff": [
                "diff --git a/fit/build-tools/pom.xml b/fit/build-tools/pom.xml",
                "index 4d14785381..b0b5d4a0a7 100644",
                "--- a/fit/build-tools/pom.xml",
                "+++ b/fit/build-tools/pom.xml",
                "@@ -81,3 +81,3 @@ under the License.",
                "     </dependency>",
                "-",
                "+        ",
                "     <dependency>",
                "diff --git a/fit/build-tools/src/main/webapp/WEB-INF/jboss-deployment-structure.xml b/fit/build-tools/src/main/webapp/WEB-INF/jboss-deployment-structure.xml",
                "index a38b3ba427..8ad59c5ccd 100644",
                "--- a/fit/build-tools/src/main/webapp/WEB-INF/jboss-deployment-structure.xml",
                "+++ b/fit/build-tools/src/main/webapp/WEB-INF/jboss-deployment-structure.xml",
                "@@ -28,2 +28,3 @@ under the License.",
                "       <module name=\"org.apache.xalan\"/>",
                "+      <module name=\"org.reactivestreams\"/>",
                "     </dependencies>",
                "diff --git a/fit/console-reference/pom.xml b/fit/console-reference/pom.xml",
                "index 7758c13466..8f982030a4 100644",
                "--- a/fit/console-reference/pom.xml",
                "+++ b/fit/console-reference/pom.xml",
                "@@ -219,3 +219,3 @@ under the License.",
                "-              <cargo.jvmargs>-XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=512m -Xmx1024m -Xms512m</cargo.jvmargs>",
                "+              <cargo.jvmargs>-XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>",
                "             </properties>",
                "@@ -356,3 +356,3 @@ under the License.",
                "                     -Dwicket.configuration=development",
                "-                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=512m -Xmx1024m -Xms512m</cargo.jvmargs>",
                "+                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>",
                "                 </properties>",
                "@@ -423,3 +423,3 @@ under the License.",
                "                     -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000",
                "-                    -XX:MaxPermSize=512m -Xmx1024m -Xms512m</cargo.jvmargs>",
                "+                    -Xmx1024m -Xms512m</cargo.jvmargs>",
                "                 </properties>",
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index 6b3fe0f2a2..3ae70871f7 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -297,3 +297,3 @@ under the License.",
                "-              <cargo.jvmargs>-XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=512m -Xmx1024m -Xms512m</cargo.jvmargs>",
                "+              <cargo.jvmargs>-XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>",
                "             </properties>",
                "@@ -1232,8 +1232,2 @@ under the License.",
                "-        <dependency>",
                "-          <groupId>org.reactivestreams</groupId>",
                "-          <artifactId>reactive-streams</artifactId>",
                "-          <version>1.0.1</version>",
                "-        </dependency>",
                "-",
                "         <dependency>",
                "@@ -1270,5 +1264,5 @@ under the License.",
                "               <container>",
                "-                <containerId>wildfly11x</containerId>",
                "+                <containerId>wildfly12x</containerId>",
                "                 <zipUrlInstaller>",
                "-                  <url>http://download.jboss.org/wildfly/11.0.0.Final/wildfly-11.0.0.Final.zip</url>",
                "+                  <url>http://download.jboss.org/wildfly/13.0.0.Final/wildfly-13.0.0.Final.zip</url>",
                "                   <downloadDir>${settings.localRepository}/org/codehaus/cargo/cargo-container-archives</downloadDir>",
                "@@ -1281,3 +1275,3 @@ under the License.",
                "                 <properties>",
                "-                  <cargo.jvmargs>-XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:PermSize=512m -XX:MaxPermSize=1024m -Xmx2048m -Xms1024m</cargo.jvmargs>",
                "+                  <cargo.jvmargs>-XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx2048m -Xms1024m</cargo.jvmargs>",
                "                 </properties>",
                "@@ -1384,3 +1378,3 @@ under the License.",
                "                   <cargo.jvmargs>-Xdebug -Djaxb.debug=true -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n",
                "-                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=512m -Xmx1024m -Xms512m</cargo.jvmargs>",
                "+                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -Xmx1024m -Xms512m</cargo.jvmargs>",
                "                 </properties>",
                "@@ -1432,3 +1426,3 @@ under the License.",
                "                     -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000",
                "-                    -XX:MaxPermSize=512m -Xmx1024m -Xms512m</cargo.jvmargs>",
                "+                    -Xmx1024m -Xms512m</cargo.jvmargs>",
                "                 </properties>",
                "diff --git a/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml b/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "index 517d0ac81a..e0fb916caf 100644",
                "--- a/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "+++ b/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "@@ -103,3 +103,3 @@ under the License.",
                "         <entry key=\"openjpa.MetaDataFactory\" ",
                "-               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly11x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "+               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly12x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "       </map>",
                "diff --git a/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml b/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml",
                "index 8fe3c0c4c1..18ad5274fe 100644",
                "--- a/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml",
                "+++ b/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml",
                "@@ -103,3 +103,3 @@ under the License.",
                "         <entry key=\"openjpa.MetaDataFactory\" ",
                "-               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly11x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "+               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly12x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "       </map>",
                "diff --git a/fit/core-reference/src/main/webapp/WEB-INF/jboss-deployment-structure.xml b/fit/core-reference/src/main/webapp/WEB-INF/jboss-deployment-structure.xml",
                "index 6baecf6c61..d3443a1e2f 100644",
                "--- a/fit/core-reference/src/main/webapp/WEB-INF/jboss-deployment-structure.xml",
                "+++ b/fit/core-reference/src/main/webapp/WEB-INF/jboss-deployment-structure.xml",
                "@@ -28,2 +28,3 @@ under the License.",
                "       <module name=\"org.apache.xalan\"/>",
                "+      <module name=\"org.reactivestreams\"/>",
                "     </dependencies>",
                "diff --git a/fit/enduser-reference/pom.xml b/fit/enduser-reference/pom.xml",
                "index 2692849149..f962530214 100644",
                "--- a/fit/enduser-reference/pom.xml",
                "+++ b/fit/enduser-reference/pom.xml",
                "@@ -302,3 +302,3 @@ under the License.",
                "-              <cargo.jvmargs>-XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=512m</cargo.jvmargs>",
                "+              <cargo.jvmargs>-XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC</cargo.jvmargs>",
                "             </properties>",
                "@@ -487,3 +487,3 @@ under the License.",
                "                   <cargo.jvmargs>-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n",
                "-                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=512m</cargo.jvmargs>",
                "+                    -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC</cargo.jvmargs>",
                "                 </properties>",
                "@@ -569,3 +569,3 @@ under the License.",
                "                     -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000",
                "-                    -XX:MaxPermSize=512m -Xmx1024m -Xms512m</cargo.jvmargs>",
                "+                    -Xmx1024m -Xms512m</cargo.jvmargs>",
                "                 </properties>",
                "diff --git a/src/main/asciidoc/getting-started/obtain.adoc b/src/main/asciidoc/getting-started/obtain.adoc",
                "index e058d5e72e..cc74338e7d 100644",
                "--- a/src/main/asciidoc/getting-started/obtain.adoc",
                "+++ b/src/main/asciidoc/getting-started/obtain.adoc",
                "@@ -205,3 +205,3 @@ examples:",
                " . https://payara.gitbooks.io/payara-server/content/documentation/user-guides/connection-pools/connection-pools.html[Payara Server^]",
                "-  * https://docs.jboss.org/author/display/WFLY11/DataSource+configuration[Wildfly 11^]",
                "+. https://docs.jboss.org/author/display/WFLY10/DataSource+configuration[Wildfly 13^]",
                " ====",
                "diff --git a/src/main/asciidoc/getting-started/systemRequirements.adoc b/src/main/asciidoc/getting-started/systemRequirements.adoc",
                "index e20a169615..474c584e2f 100644",
                "--- a/src/main/asciidoc/getting-started/systemRequirements.adoc",
                "+++ b/src/main/asciidoc/getting-started/systemRequirements.adoc",
                "@@ -41,3 +41,3 @@ Apache Syncope {docVersion} is verified with the following Java EE containers:",
                "  . http://www.payara.fish/[Payara Server^]",
                "- . http://www.wildfly.org/[Wildfly 11^]",
                "+ . http://www.wildfly.org/[Wildfly 13^]",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "index 56cbf02220..a544adc472 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "@@ -36,2 +36,2 @@ Each JavaEE Container provides its own way to accomplish this task:",
                "   * https://payara.gitbooks.io/payara-server/content/documentation/user-guides/connection-pools/connection-pools.html[Payara^]",
                "-  * https://docs.jboss.org/author/display/WFLY11/DataSource+configuration[Wildfly 11^]",
                "\\ No newline at end of file",
                "+  * https://docs.jboss.org/author/display/WFLY10/DataSource+configuration[Wildfly 13^]",
                "\\ No newline at end of file",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "index 27a95d9cbf..e8547bda48 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc",
                "@@ -84,3 +84,3 @@ among JVM options.",
                "-===== Wildfly 11",
                "+===== Wildfly 13",
                "@@ -115,8 +115,2 @@ Add",
                "     </dependency>",
                "-",
                "-    <dependency>",
                "-      <groupId>org.reactivestreams</groupId>",
                "-      <artifactId>reactive-streams</artifactId>",
                "-      <version>1.0.1</version>",
                "-    </dependency>",
                " ...."
            ],
            "changed_files": [
                "fit/build-tools/pom.xml",
                "fit/build-tools/src/main/webapp/WEB-INF/jboss-deployment-structure.xml",
                "fit/console-reference/pom.xml",
                "fit/core-reference/pom.xml",
                "fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml",
                "fit/core-reference/src/main/webapp/WEB-INF/jboss-deployment-structure.xml",
                "fit/enduser-reference/pom.xml",
                "src/main/asciidoc/getting-started/obtain.adoc",
                "src/main/asciidoc/getting-started/systemRequirements.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbcp.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/javaeecontainer.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fdd7315b77ed4526f7c3e9731e5c738a101fb997"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: contain, admin, user, console, administration",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0f9e3e1587e757e23fcb64d0adb1f08dfba33391",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534262682,
            "hunks": 16,
            "message": "Some Java 8 usage improvements",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java",
                "index bea59dbd8f..4d6a4c2907 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java",
                "@@ -314,8 +314,8 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {",
                "         // 2. build connObjectKeyItem",
                "-        Optional<MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(init.getRight());",
                "-        if (!connObjectKeyItem.isPresent()) {",
                "-            throw new NotFoundException(",
                "-                    \"ConnObjectKey mapping for \" + init.getMiddle() + \" \" + anyKey + \" on resource '\" + key + \"'\");",
                "-        }",
                "-        Optional<String> connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, init.getRight());",
                "+        MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(init.getRight()).",
                "+                orElseThrow(() -> new NotFoundException(",
                "+                \"ConnObjectKey mapping for \" + init.getMiddle() + \" \" + anyKey + \" on resource '\" + key + \"'\"));",
                "+        String connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, init.getRight()).",
                "+                orElseThrow(() -> new NotFoundException(",
                "+                \"ConnObjectKey value for \" + init.getMiddle() + \" \" + anyKey + \" on resource '\" + key + \"'\"));",
                "@@ -332,3 +332,3 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {",
                "                 init.getRight().getObjectClass(),",
                "-                AttributeBuilder.build(connObjectKeyItem.get().getExtAttrName(), connObjectKeyValue.get()),",
                "+                AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), connObjectKeyValue),",
                "                 init.getRight().isIgnoreCaseMatch(),",
                "@@ -337,3 +337,3 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {",
                "             throw new NotFoundException(",
                "-                    \"Object \" + connObjectKeyValue.get() + \" with class \" + init.getRight().getObjectClass()",
                "+                    \"Object \" + connObjectKeyValue + \" with class \" + init.getRight().getObjectClass()",
                "                     + \" not found on resource \" + key);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "index fc4ac8b47c..4fc8fec61b 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "@@ -209,3 +209,3 @@ public class MappingManagerImpl implements MappingManager {",
                "-        Optional<MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);",
                "+        Optional<? extends MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);",
                "         if (connObjectKeyItem.isPresent()) {",
                "@@ -658,3 +658,3 @@ public class MappingManagerImpl implements MappingManager {",
                "     private String getGroupOwnerValue(final Provision provision, final Any<?> any) {",
                "-        Optional<MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);",
                "+        Optional<? extends MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java",
                "index 37f9364fc6..d951a4cabf 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java",
                "@@ -101,3 +101,3 @@ public class VirAttrHandlerImpl implements VirAttrHandler {",
                "-            Optional<MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);",
                "+            Optional<? extends MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);",
                "             String connObjectKeyValue = connObjectKeyItem.isPresent()",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "index 4f51593fd6..28f44afe1b 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "@@ -183,3 +183,3 @@ abstract class AbstractAnyDataBinder {",
                "                 ? Collections.<String>emptyList()",
                "-                : Collections.singletonList(values.iterator().next()));",
                "+                : Collections.singletonList(values.get(0)));",
                "@@ -315,3 +315,3 @@ abstract class AbstractAnyDataBinder {",
                "                         && (!schema.isUniqueConstraint() || attr.getUniqueValue() == null",
                "-                        || !valuesToBeAdded.iterator().next().equals(attr.getUniqueValue().getValueAsString()))) {",
                "+                        || !valuesToBeAdded.get(0).equals(attr.getUniqueValue().getValueAsString()))) {",
                "@@ -635,17 +635,14 @@ abstract class AbstractAnyDataBinder {",
                "-        Iterable<? extends ExternalResource> iterable = anyUtils.getAllResources(any);",
                "-        anyUtils.getAllResources(any).forEach(resource -> {",
                "-            Optional<? extends Provision> provision = resource.getProvision(any.getType());",
                "-            if (provision.isPresent() && provision.get().getMapping() != null) {",
                "-                Optional<MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision.get());",
                "-                if (!connObjectKeyItem.isPresent()) {",
                "-                    throw new NotFoundException(",
                "+        anyUtils.getAllResources(any).",
                "+                forEach(resource -> resource.getProvision(any.getType()).",
                "+                filter(provision -> provision.getMapping() != null).",
                "+                ifPresent(provision -> {",
                "+                    MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision).",
                "+                            orElseThrow(() -> new NotFoundException(",
                "                             \"ConnObjectKey mapping for \" + any.getType().getKey() + \" \" + any.getKey()",
                "-                            + \" on resource '\" + resource.getKey() + \"'\");",
                "-                }",
                "+                            + \" on resource '\" + resource.getKey() + \"'\"));",
                "-                mappingManager.getConnObjectKeyValue(any, provision.get()).",
                "-                        ifPresent(connObjectKey -> connObjectKeys.put(resource.getKey(), connObjectKey));",
                "-            }",
                "-        });",
                "+                    mappingManager.getConnObjectKeyValue(any, provision).",
                "+                            ifPresent(value -> connObjectKeys.put(resource.getKey(), value));",
                "+                }));",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java",
                "index 63c6457884..91d440e2e9 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java",
                "@@ -288,3 +288,3 @@ public class ReconciliationReportlet extends AbstractReportlet {",
                "                 Provision provision = resource.getProvision(any.getType()).orElse(null);",
                "-                Optional<MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);",
                "+                Optional<? extends MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);",
                "                 final String connObjectKeyValue = connObjectKeyItem.isPresent()",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "index 766f345b04..184fc280ae 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "@@ -618,3 +618,3 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "         ConnectorObject obj = null;",
                "-        Optional<MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);",
                "+        Optional<? extends MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);",
                "         if (connObjectKeyItem.isPresent()) {",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "index 84b3661e4c..2344c69614 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "@@ -176,3 +176,3 @@ public class PullUtils {",
                "-        Optional<MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);",
                "+        Optional<? extends MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);",
                "         if (connObjectKeyItem.isPresent()) {",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushUtils.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushUtils.java",
                "index 7262a0a437..65a34b7cfa 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushUtils.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushUtils.java",
                "@@ -110,3 +110,3 @@ public class PushUtils {",
                "-        Optional<MappingItem> connObjectKey = MappingUtils.getConnObjectKeyItem(provision);",
                "+        Optional<? extends MappingItem> connObjectKey = MappingUtils.getConnObjectKeyItem(provision);",
                "         Optional<String> connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, provision);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java",
                "index 398fef53e2..5d0c9d261f 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java",
                "@@ -57,3 +57,3 @@ public final class MappingUtils {",
                "-    public static Optional<MappingItem> getConnObjectKeyItem(final Provision provision) {",
                "+    public static Optional<? extends MappingItem> getConnObjectKeyItem(final Provision provision) {",
                "         Mapping mapping = null;",
                "@@ -63,5 +63,5 @@ public final class MappingUtils {",
                "-        return Optional.ofNullable(mapping == null",
                "-                ? null",
                "-                : mapping.getConnObjectKeyItem().get());",
                "+        return mapping == null",
                "+                ? Optional.empty()",
                "+                : mapping.getConnObjectKeyItem();",
                "     }"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushUtils.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d9ff2d429a0aadc6a7757199f1a8a33446038667"
                ]
            ],
            "tags": [
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: report",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c2e8a2092c5d5ba713cef5cff535ead06b48af10",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538375836,
            "hunks": 2,
            "message": "Upgrading Codemirror and docker-maven-plugin",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index ab962f844e..e77a599aed 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -459,3 +459,3 @@ under the License.",
                "     <highlightjs.version>9.8.0</highlightjs.version>",
                "-    <codemirror.version>5.33.0</codemirror.version>",
                "+    <codemirror.version>5.40.2</codemirror.version>",
                "     <googlediffmatchpath.version>20121119-1</googlediffmatchpath.version>",
                "@@ -1949,3 +1949,3 @@ under the License.",
                "           <artifactId>docker-maven-plugin</artifactId>",
                "-          <version>0.27.0</version>",
                "+          <version>0.27.1</version>",
                "         </plugin>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "25d6c1f76b7fc544013b32710c8203f4c09dbea9"
                ],
                [
                    "no-tag",
                    "62faf1fe32dcaf80faaad85026c704f00b636368"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: code",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c0c32cd6d91cea08c73cad89b703e329d94954eb",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534172962,
            "hunks": 1,
            "message": "[SYNCOPE-1355] Document how to access services when using Docker Compose - This closes #80",
            "diff": [
                "diff --git a/src/main/asciidoc/getting-started/obtain.adoc b/src/main/asciidoc/getting-started/obtain.adoc",
                "index bb2d65ba94..49599a90bd 100644",
                "--- a/src/main/asciidoc/getting-started/obtain.adoc",
                "+++ b/src/main/asciidoc/getting-started/obtain.adoc",
                "@@ -424,2 +424,32 @@ services:",
                "+How to start the containers:",
                "+",
                "+. Save the example file locally.",
                "+. Download and start the containers:",
                "++",
                "+[source,bash]",
                "+----",
                "+$ docker-compose -f /path/to/docker-compose.yml up",
                "+----",
                "+",
                "+The following services will be available:",
                "+",
                "+[cols=\"1,2\"]",
                "+|===",
                "+",
                "+| Complete REST API reference",
                "+| http://localhost:18080/syncope/index.html",
                "+",
                "+| http://swagger.io/[Swagger^] UI",
                "+| http://localhost:18080/syncope/swagger",
                "+",
                "+| Administration console",
                "+| http://localhost:28080/syncope-console +",
                "+Credentials: `admin` / `password`",
                "+",
                "+| End-user UI",
                "+| http://localhost:38080/syncope-enduser",
                "+",
                "+|===",
                "+",
                " === Maven Project"
            ],
            "changed_files": [
                "src/main/asciidoc/getting-started/obtain.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1355": ""
            },
            "ghissue_refs": {
                "80": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b69d38c22012631f2c66246979855c78200ac992"
                ],
                [
                    "no-tag",
                    "4327bef34e19aaffb37c760a0f607d690165b87c"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1355",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 80",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f6eda62e25aca51fdee08050e6eb3a11d5f6247f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537954819,
            "hunks": 2,
            "message": "[SYNCOPE-1375] provides membership creation just in case external attribute mappend on membership attribut is really provided",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "index 4a66677d20..ad3403805b 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "@@ -763,3 +763,3 @@ public class MappingManagerImpl implements MappingManager {",
                "             }",
                "-        } else if (intAttrName.getSchemaType() != null) {",
                "+        } else if (intAttrName.getSchemaType() != null && attr != null) {",
                "             GroupableRelatableTO groupableTO = null;",
                "@@ -821,5 +821,3 @@ public class MappingManagerImpl implements MappingManager {",
                "                     // virtual attributes don't get transformed, iterate over original attr.getValue()",
                "-                    for (Object value : (attr == null || attr.getValue() == null)",
                "-                            ? Collections.emptyList() : attr.getValue()) {",
                "-",
                "+                    for (Object value : attr.getValue() == null ? Collections.emptyList() : attr.getValue()) {",
                "                         if (value != null) {"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1375": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "df5fe6c19556c66c32f054cb664f65e2e901d76c"
                ],
                [
                    "no-tag",
                    "7811bdb2d352ecd4f09b971ea38320814c03d0e8"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1375",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5639ca66d0dfe04d48e859594e205cc640234a9d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1535112806,
            "hunks": 3,
            "message": "[SYNCOPE-1220] Minimal docs added, screenshots missing from getting started",
            "diff": [
                "diff --git a/src/main/asciidoc/getting-started/obtain.adoc b/src/main/asciidoc/getting-started/obtain.adoc",
                "index 49599a90bd..0185de39b1 100644",
                "--- a/src/main/asciidoc/getting-started/obtain.adoc",
                "+++ b/src/main/asciidoc/getting-started/obtain.adoc",
                "@@ -902,3 +902,4 @@ Each template is now ready for authoring or removal; new templates can also be c",
                "-The Netbeans IDE plugin allows remote management of notification e-mail and report templates.",
                "+The Netbeans IDE plugin allows remote management of notification e-mail and report templates, and remote editing",
                "+of Apache Groovy implementations.",
                "diff --git a/src/main/asciidoc/reference-guide/architecture/architecture.adoc b/src/main/asciidoc/reference-guide/architecture/architecture.adoc",
                "index 0ba26d35db..b183e08e7c 100644",
                "--- a/src/main/asciidoc/reference-guide/architecture/architecture.adoc",
                "+++ b/src/main/asciidoc/reference-guide/architecture/architecture.adoc",
                "@@ -69,3 +69,3 @@ for interacting with the Core via REST.",
                " The Netbeans IDE plugin allows remote management of <<notification-templates,notification e-mail>> and",
                "-<<report-templates,report>> templates, and constitutes an example of a Java application relying on the Client Library",
                "-for interacting with the Core via REST.",
                "+<<report-templates,report>> templates, and remote editing of Apache Groovy <<implementations,implementations>>. +",
                "+It constitutes an example of a Java application relying on the Client Library for interacting with the Core via REST.",
                "diff --git a/src/main/asciidoc/reference-guide/concepts/implementations.adoc b/src/main/asciidoc/reference-guide/concepts/implementations.adoc",
                "index 7737359cc9..b257a48bbe 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/implementations.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/implementations.adoc",
                "@@ -24,3 +24,3 @@ as:",
                " . Java classes",
                "-. http://www.groovy-lang.org/[Groovy^] classes",
                "+. http://www.groovy-lang.org/[Apache Groovy^] classes"
            ],
            "changed_files": [
                "src/main/asciidoc/getting-started/obtain.adoc",
                "src/main/asciidoc/reference-guide/architecture/architecture.adoc",
                "src/main/asciidoc/reference-guide/concepts/implementations.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1220": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "bf68e730c4f27c3e1e67445c99ae3e52c7c81b36"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1220",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b12295fb7786188a098d5339aa05ba6030f02604",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541829497,
            "hunks": 3,
            "message": "[SYNCOPE-1395] small refactor for orderBy init",
            "diff": [
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "index 2a204cc6a0..6800dbe283 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "@@ -138,8 +138,2 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "-    protected List<OrderByClause> filterOrderBy(final List<OrderByClause> orderBy) {",
                "-        return orderBy.stream().",
                "-                filter(clause -> !ArrayUtils.contains(ORDER_BY_NOT_ALLOWED, clause.getField())).",
                "-                collect(Collectors.toList());",
                "-    }",
                "-",
                "     protected abstract <T extends Any<?>> List<T> doSearch(",
                "@@ -355,3 +349,15 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "-        return doSearch(adminRealms, cond, page, itemsPerPage, orderBy, kind);",
                "+        List<OrderByClause> effectiveOrderBy;",
                "+        if (orderBy.isEmpty()) {",
                "+            OrderByClause keyClause = new OrderByClause();",
                "+            keyClause.setField(kind == AnyTypeKind.USER ? \"username\" : \"name\");",
                "+            keyClause.setDirection(OrderByClause.Direction.ASC);",
                "+            effectiveOrderBy = Collections.singletonList(keyClause);",
                "+        } else {",
                "+            effectiveOrderBy = orderBy.stream().",
                "+                    filter(clause -> !ArrayUtils.contains(ORDER_BY_NOT_ALLOWED, clause.getField())).",
                "+                    collect(Collectors.toList());;",
                "+        }",
                "+",
                "+        return doSearch(adminRealms, cond, page, itemsPerPage, effectiveOrderBy, kind);",
                "     }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "index 53c52d9c98..58102072ac 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "@@ -328,3 +328,3 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-        filterOrderBy(orderBy).forEach(clause -> {",
                "+        orderBy.forEach(clause -> {",
                "             OrderBySupport.Item item = new OrderBySupport.Item();"
            ],
            "changed_files": [
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1395": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1325e634931402b82211c1bda855a2d963078bf1"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1395",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "669864f4e332dbfbb9d8e14599ffff66f585c2dc",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534248625,
            "hunks": 1,
            "message": "[SYNCOPE-1348] Remove duplicated 'any more'",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc",
                "index 86ecf1e379..4dd6b2b63a 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc",
                "@@ -377,3 +377,3 @@ returned, then the request is still under processing; otherwise, `200 OK` will b",
                " response. +",
                "-Once retrieved, the batch response is not available any more from the `/batch` endpoint any more.",
                "+Once retrieved, the batch response is not available any more from the `/batch` endpoint."
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1348": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "313c2aee10f041b7a6bf7ef0a0aa858d2ad41f01"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1348",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b70bbb37e0e0d2e1c9aa3f7162ab3748708b16b0",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534416912,
            "hunks": 26,
            "message": "[SYNCOPE-1356] Enhancing LDAPMembershipPullActions / SetUMembershipsJob with capabilites from 1_2_X",
            "diff": [
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java",
                "index ce2c1839fb..4db06dc596 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java",
                "@@ -59,2 +59,3 @@ public interface GroupDAO extends AnyDAO<Group> {",
                "+    @Override",
                "     Collection<String> findAllResourceKeys(final String key);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SetUMembershipsJob.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SetUMembershipsJob.java",
                "index b62ff33383..993c99900f 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SetUMembershipsJob.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SetUMembershipsJob.java",
                "@@ -20,2 +20,4 @@ package org.apache.syncope.core.provisioning.java.job;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                " import java.util.Map;",
                "@@ -42,3 +44,5 @@ public class SetUMembershipsJob extends AbstractInterruptableJob {",
                "-    public static final String MEMBERSHIPS_KEY = \"memberships\";",
                "+    public static final String MEMBERSHIPS_BEFORE_KEY = \"membershipsBefore\";",
                "+",
                "+    public static final String MEMBERSHIPS_AFTER_KEY = \"membershipsAfter\";",
                "@@ -50,27 +54,58 @@ public class SetUMembershipsJob extends AbstractInterruptableJob {",
                "         try {",
                "-            AuthContextUtils.execWithAuthContext(",
                "-                    context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY), () -> {",
                "+            AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY), () -> {",
                "+",
                "+                @SuppressWarnings(\"unchecked\")",
                "+                Map<String, Set<String>> membershipsBefore =",
                "+                        (Map<String, Set<String>>) context.getMergedJobDataMap().get(MEMBERSHIPS_BEFORE_KEY);",
                "+                LOG.debug(\"Memberships before pull (User -> Groups) {}\", membershipsBefore);",
                "                 @SuppressWarnings(\"unchecked\")",
                "-                Map<String, Set<String>> memberships =",
                "-                        (Map<String, Set<String>>) context.getMergedJobDataMap().get(MEMBERSHIPS_KEY);",
                "+                Map<String, Set<String>> membershipsAfter =",
                "+                        (Map<String, Set<String>>) context.getMergedJobDataMap().get(MEMBERSHIPS_AFTER_KEY);",
                "+                LOG.debug(\"Memberships after pull (User -> Groups) {}\", membershipsAfter);",
                "-                LOG.debug(\"About to set memberships (User -> Groups) {}\", memberships);",
                "+                List<UserPatch> patches = new ArrayList<>();",
                "-                memberships.forEach((user, groups) -> {",
                "+                membershipsAfter.forEach((user, groups) -> {",
                "                     UserPatch userPatch = new UserPatch();",
                "                     userPatch.setKey(user);",
                "+                    patches.add(userPatch);",
                "                     groups.forEach(group -> {",
                "-                        userPatch.getMemberships().add(",
                "-                                new MembershipPatch.Builder().",
                "-                                        operation(PatchOperation.ADD_REPLACE).",
                "-                                        group(group).",
                "-                                        build());",
                "+                        Set<String> before = membershipsBefore.get(user);",
                "+                        if (before == null || !before.contains(group)) {",
                "+                            userPatch.getMemberships().add(",
                "+                                    new MembershipPatch.Builder().",
                "+                                            operation(PatchOperation.ADD_REPLACE).",
                "+                                            group(group).",
                "+                                            build());",
                "+                        }",
                "                     });",
                "+                });",
                "+",
                "+                membershipsBefore.forEach((user, groups) -> {",
                "+                    UserPatch userPatch = patches.stream().",
                "+                            filter(patch -> user.equals(patch.getKey())).findFirst().",
                "+                            orElseGet(() -> {",
                "+                                UserPatch patch = new UserPatch();",
                "+                                patch.setKey(user);",
                "+                                patches.add(patch);",
                "+                                return patch;",
                "+                            });",
                "+",
                "+                    groups.forEach(group -> {",
                "+                        Set<String> after = membershipsAfter.get(user);",
                "+                        if (after == null || !after.contains(group)) {",
                "+                            userPatch.getMemberships().add(",
                "+                                    new MembershipPatch.Builder().",
                "+                                            operation(PatchOperation.DELETE).",
                "+                                            group(group).",
                "+                                            build());",
                "+                        }",
                "+                    });",
                "+                });",
                "-                    if (!userPatch.isEmpty()) {",
                "-                        LOG.debug(\"About to update User {}\", userPatch.getKey());",
                "-                        userProvisioningManager.update(userPatch, true);",
                "-                    }",
                "+                patches.stream().filter(patch -> !patch.isEmpty()).forEach(patch -> {",
                "+                    LOG.debug(\"About to update User {}\", patch);",
                "+                    userProvisioningManager.update(patch, true);",
                "                 });",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java",
                "index b7e8338f90..cdb5e1e4b6 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java",
                "@@ -27,2 +27,3 @@ import java.util.Optional;",
                " import java.util.Set;",
                "+import org.apache.syncope.common.lib.patch.AnyPatch;",
                " import org.apache.syncope.common.lib.to.EntityTO;",
                "@@ -35,3 +36,2 @@ import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;",
                " import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;",
                "-import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                " import org.apache.syncope.core.persistence.api.entity.resource.Provision;",
                "@@ -47,2 +47,3 @@ import org.springframework.beans.factory.annotation.Autowired;",
                " import org.apache.syncope.core.provisioning.java.job.SetUMembershipsJob;",
                "+import org.springframework.transaction.annotation.Transactional;",
                "@@ -61,5 +62,2 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {",
                "-    @Autowired",
                "-    protected UserDAO userDAO;",
                "-",
                "     @Autowired",
                "@@ -70,3 +68,5 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {",
                "-    protected final Map<String, Set<String>> memberships = new HashMap<>();",
                "+    protected final Map<String, Set<String>> membershipsBefore = new HashMap<>();",
                "+",
                "+    protected final Map<String, Set<String>> membershipsAfter = new HashMap<>();",
                "@@ -120,20 +120,30 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {",
                "     /**",
                "-     * Pull Syncope memberships with the situation read on the external resource's group.",
                "+     * Keep track of members of the group being updated before actual update takes place.",
                "+     * This is not needed on",
                "+     * <ul>",
                "+     * <li>{@link #beforeProvision} because the pulling group does not exist yet on Syncope</li>",
                "+     * <li>{@link #beforeDelete} because group delete cascades as membership removal for all users involved</li>",
                "+     * </ul>",
                "      *",
                "-     * @param profile pull profile",
                "-     * @param delta representing the pullong group",
                "-     * @param groupTO group after modification performed by the handler",
                "-     * @throws JobExecutionException if anything goes wrong",
                "+     * {@inheritDoc}",
                "      */",
                "-    protected void populateMemberships(",
                "-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final GroupTO groupTO)",
                "-            throws JobExecutionException {",
                "+    @Transactional(readOnly = true)",
                "+    @Override",
                "+    public <P extends AnyPatch> void beforeUpdate(",
                "+            final ProvisioningProfile<?, ?> profile,",
                "+            final SyncDelta delta,",
                "+            final EntityTO entity,",
                "+            final P anyPatch) throws JobExecutionException {",
                "-        getMembAttrValues(delta, profile.getConnector()).forEach(membValue -> {",
                "-            Set<String> memb = memberships.get(membValue.toString());",
                "+        if (!(entity instanceof GroupTO)) {",
                "+            super.beforeUpdate(profile, delta, entity, anyPatch);",
                "+        }",
                "+",
                "+        groupDAO.findUMemberships(groupDAO.find(entity.getKey())).forEach(uMembership -> {",
                "+            Set<String> memb = membershipsBefore.get(uMembership.getLeftEnd().getKey());",
                "             if (memb == null) {",
                "                 memb = new HashSet<>();",
                "-                memberships.put(membValue.toString(), memb);",
                "+                membershipsBefore.put(uMembership.getLeftEnd().getKey(), memb);",
                "             }",
                "-            memb.add(groupTO.getKey());",
                "+            memb.add(entity.getKey());",
                "         });",
                "@@ -142,3 +152,3 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {",
                "     /**",
                "-     * Pull membership at group pull time (because PullJob first pulls users then groups).",
                "+     * Keep track of members of the group being updated after actual update took place.",
                "      * {@inheritDoc}",
                "@@ -158,17 +168,10 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {",
                "                 filter(p -> p.getMapping() != null);",
                "-        if (provision.isPresent()) {",
                "-            populateMemberships(profile, delta, (GroupTO) entity);",
                "-        } else {",
                "+        if (!provision.isPresent()) {",
                "             super.after(profile, delta, entity, result);",
                "         }",
                "-    }",
                "-",
                "-    @Override",
                "-    public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {",
                "-        Map<String, Set<String>> resolvedMemberships = new HashMap<>();",
                "-        memberships.forEach((name, memb) -> {",
                "+        getMembAttrValues(delta, profile.getConnector()).forEach(membValue -> {",
                "             Optional<String> userKey = pullUtils.match(",
                "                     anyTypeDAO.findUser(),",
                "-                    name,",
                "+                    membValue.toString(),",
                "                     profile.getTask().getResource(),",
                "@@ -177,10 +180,19 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {",
                "             if (userKey.isPresent()) {",
                "-                resolvedMemberships.put(userKey.get(), memb);",
                "+                Set<String> memb = membershipsAfter.get(userKey.get());",
                "+                if (memb == null) {",
                "+                    memb = new HashSet<>();",
                "+                    membershipsAfter.put(userKey.get(), memb);",
                "+                }",
                "+                memb.add(entity.getKey());",
                "             } else {",
                "-                LOG.warn(\"Could not find matching user for {}\", name);",
                "+                LOG.warn(\"Could not find matching user for {}\", membValue);",
                "             }",
                "         });",
                "+    }",
                "+    @Override",
                "+    public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {",
                "         Map<String, Object> jobMap = new HashMap<>();",
                "-        jobMap.put(SetUMembershipsJob.MEMBERSHIPS_KEY, resolvedMemberships);",
                "+        jobMap.put(SetUMembershipsJob.MEMBERSHIPS_BEFORE_KEY, membershipsBefore);",
                "+        jobMap.put(SetUMembershipsJob.MEMBERSHIPS_AFTER_KEY, membershipsAfter);",
                "         schedule(SetUMembershipsJob.class, jobMap);"
            ],
            "changed_files": [
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SetUMembershipsJob.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1356": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4810fb796b7d6e5035005a24e213e1c9cc495693"
                ],
                [
                    "no-tag",
                    "842a0fb9d8a1c8f5a1dd4e5259b56dc8af3cf7a3"
                ]
            ],
            "tags": [
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1356",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "06f6ab307f93d2a80a656e07de27a1b9282265ae",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536734705,
            "hunks": 1,
            "message": "[SYNCOPE-1019] Missing file in archetype",
            "diff": [
                "diff --git a/archetype/pom.xml b/archetype/pom.xml",
                "index 25d1ce86a0..ad9180c7f5 100644",
                "--- a/archetype/pom.xml",
                "+++ b/archetype/pom.xml",
                "@@ -314,2 +314,3 @@ under the License.",
                "           <include>customFormAttributes.json</include>",
                "+          <include>customTemplate.json</include>",
                "         </includes>"
            ],
            "changed_files": [
                "archetype/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1019": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ea95615fded00a71eae3cba4660da2b3b9f5000b"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1019",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2569668a69ba8585577b99db4f90e7fe2a322157",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1533809528,
            "hunks": 10,
            "message": "[SYNCOPE-1350] Smarter getValueAsString",
            "diff": [
                "diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainAttrValue.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainAttrValue.java",
                "index 87eac8f844..67282ee2a8 100644",
                "--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainAttrValue.java",
                "+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainAttrValue.java",
                "@@ -45,2 +45,4 @@ public interface PlainAttrValue extends Entity {",
                "+    String getValueAsString(PlainSchema schema);",
                "+",
                "     void parseValue(PlainSchema schema, String value);",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrValue.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrValue.java",
                "index fed4d05808..03083e8bd8 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrValue.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrValue.java",
                "@@ -221,14 +221,3 @@ public abstract class AbstractPlainAttrValue extends AbstractGeneratedKeyEntity",
                "-    @Override",
                "-    public String getValueAsString() {",
                "-        final AttrSchemaType type = getAttr() == null || getAttr().getSchema() == null",
                "-                || getAttr().getSchema().getType() == null",
                "-                ? AttrSchemaType.String",
                "-                : getAttr().getSchema().getType();",
                "-",
                "-        return getValueAsString(type);",
                "-    }",
                "-",
                "-    @Override",
                "-    public String getValueAsString(final AttrSchemaType type) {",
                "+    private String getValueAsString(final AttrSchemaType type, final PlainSchema schema) {",
                "         String result;",
                "@@ -241,6 +230,5 @@ public abstract class AbstractPlainAttrValue extends AbstractGeneratedKeyEntity",
                "             case Long:",
                "-                result = getAttr() == null || getAttr().getSchema() == null",
                "-                        || getAttr().getSchema().getConversionPattern() == null",
                "+                result = schema == null || schema.getConversionPattern() == null",
                "                         ? getLongValue().toString()",
                "-                        : FormatUtils.format(getLongValue(), getAttr().getSchema().getConversionPattern());",
                "+                        : FormatUtils.format(getLongValue(), schema.getConversionPattern());",
                "                 break;",
                "@@ -248,6 +236,5 @@ public abstract class AbstractPlainAttrValue extends AbstractGeneratedKeyEntity",
                "             case Double:",
                "-                result = getAttr() == null || getAttr().getSchema() == null",
                "-                        || getAttr().getSchema().getConversionPattern() == null",
                "+                result = schema == null || schema.getConversionPattern() == null",
                "                         ? getDoubleValue().toString()",
                "-                        : FormatUtils.format(getDoubleValue(), getAttr().getSchema().getConversionPattern());",
                "+                        : FormatUtils.format(getDoubleValue(), schema.getConversionPattern());",
                "                 break;",
                "@@ -255,6 +242,5 @@ public abstract class AbstractPlainAttrValue extends AbstractGeneratedKeyEntity",
                "             case Date:",
                "-                result = getAttr() == null || getAttr().getSchema() == null",
                "-                        || getAttr().getSchema().getConversionPattern() == null",
                "+                result = schema == null || schema.getConversionPattern() == null",
                "                         ? FormatUtils.format(getDateValue())",
                "-                        : FormatUtils.format(getDateValue(), false, getAttr().getSchema().getConversionPattern());",
                "+                        : FormatUtils.format(getDateValue(), false, schema.getConversionPattern());",
                "                 break;",
                "@@ -276,2 +262,26 @@ public abstract class AbstractPlainAttrValue extends AbstractGeneratedKeyEntity",
                "+    @Override",
                "+    public String getValueAsString() {",
                "+        PlainSchema schema = getAttr() == null || getAttr().getSchema() == null",
                "+                ? null",
                "+                : getAttr().getSchema();",
                "+        AttrSchemaType type = schema == null || schema.getType() == null",
                "+                ? AttrSchemaType.String",
                "+                : getAttr().getSchema().getType();",
                "+",
                "+        return getValueAsString(type, schema);",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getValueAsString(final AttrSchemaType type) {",
                "+        return getValueAsString(",
                "+                type,",
                "+                getAttr() == null || getAttr().getSchema() == null ? null : getAttr().getSchema());",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getValueAsString(final PlainSchema schema) {",
                "+        return getValueAsString(schema.getType(), schema);",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "index 4fa0e8e362..4a66677d20 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java",
                "@@ -364,3 +364,7 @@ public class MappingManagerImpl implements MappingManager {",
                "                 } else {",
                "-                    objValues.add(value.getValueAsString(schemaType));",
                "+                    if (schema instanceof PlainSchema) {",
                "+                        objValues.add(value.getValueAsString((PlainSchema) schema));",
                "+                    } else {",
                "+                        objValues.add(value.getValueAsString(schemaType));",
                "+                    }",
                "                 }"
            ],
            "changed_files": [
                "core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainAttrValue.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrValue.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1350": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4ea63a376e01ba629446bea13ff77cfb14409048"
                ],
                [
                    "no-tag",
                    "b56f67a2d6c34d15c926475bb6150f9ad89ccb25"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1350",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "271a2e77c4f123582d3623922e09f0abc3b83a34",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1533987372,
            "hunks": 1,
            "message": "[SYNCOPE-1353] Link fixed, visible at next release",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc b/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc",
                "index ce781f70af..b92f0bad78 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc",
                "@@ -149,3 +149,3 @@ https://connid.atlassian.net/wiki/display/BASE/LDAP#LDAP-Configuration[LDAP conn",
                " ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java[DBPasswordPropagationActions^]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DBPasswordPropagationActions.java[DBPasswordPropagationActions^]",
                " endif::[]"
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "02e90b881df17674e2003b646e78dcca1e24eb06"
                ],
                [
                    "no-tag",
                    "e7854f1c64abf7c3c85389a7c86b29f6f1f089fb"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "15255c18af59060761df8daad27a7477a230ebf7",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539178463,
            "hunks": 3,
            "message": "[SYNCOPE-1369] Docs",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/concepts/workflow.adoc b/src/main/asciidoc/reference-guide/concepts/workflow.adoc",
                "index 8f3e5608ca..09dd40e2a5 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/workflow.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/workflow.adoc",
                "@@ -149,6 +149,5 @@ The following conditions must be met, for an User `U` to act as administrator fo",
                " . `U` must own the following <<entitlements,entitlements>>, for all the required realms:",
                "-.. `WORKFLOW_FORM_CLAIM`",
                "-.. `WORKFLOW_FORM_LIST`",
                "-.. `WORKFLOW_FORM_READ`",
                "-.. `WORKFLOW_FORM_SUBMIT`",
                "+.. `USER_REQUEST_FORM_CLAIM`",
                "+.. `USER_REQUEST_FORM_LIST`",
                "+.. `USER_REQUEST_FORM_SUBMIT`",
                " .. `USER_READ`",
                "@@ -174,3 +173,3 @@ http://www.flowable.org/docs/userguide/index.html#flowableModelerApp[Flowable Mo",
                "     <flowable:formProperty id=\"username\" name=\"Username\" type=\"string\"",
                "-                           expression=\"${user.username}\" writable=\"false\"/> // <2>",
                "+                           expression=\"${userTO.username}\" writable=\"false\"/> // <2>",
                "     <flowable:formProperty id=\"approve\" name=\"Approve?\" type=\"boolean\"",
                "@@ -198 +197,84 @@ the following flow (the actual operations on the admin console for the sample ab",
                " . administrator A can approve or reject such modification",
                "+",
                "+===== Request Management",
                "+",
                "+Request management is a key-feature of Identity Governance and allows to define and manage, in a structured way,",
                "+whatever process intended to update identity attributes, memberships and relationships. +",
                "+Request examples are \"assign mobile phone\", \"grant groups on AD\" or \"consent access to application\".",
                "+",
                "+Users can initiate whichever request among the ones defined; once initiated, such requests will follow their own path,",
                "+which might also include one or more <<approval,approval>> steps.",
                "+",
                "+[[sample-user-request]]",
                "+.Assigning printer to user",
                "+====",
                "+The BPMN process below shows how to define an user request in XML; the same operation can be performed via the",
                "+http://www.flowable.org/docs/userguide/index.html#flowableModelerApp[Flowable Modeler^].",
                "+",
                "+In this user request definition:",
                "+",
                "+. user selects one of printers defined in the system, for self-assignment",
                "+. administrator approves user's selection",
                "+. a <<memberships-relationships,relationship>> between user and printer is established",
                "+",
                "+[source,xml]",
                "+----",
                "+<process id=\"assignPrinterRequest\" name=\"Assign printer\" isExecutable=\"true\">",
                "+  <startEvent id=\"startevent1\" name=\"Start\"/>",
                "+  <endEvent id=\"endevent1\" name=\"End\"/>",
                "+  <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"selectPrinter\"/>",
                "+  <userTask id=\"selectPrinter\" name=\"Select printer\" flowable:formKey=\"selectPrinter\"",
                "+            flowable:assignee=\"${wfExecutor}\"> // <1>",
                "+    <extensionElements>",
                "+      <flowable:formProperty id=\"printer\" name=\"Printer\"",
                "+                             variable=\"printer\" type=\"dropdown\" required=\"true\"> // <2>",
                "+        <flowable:value id=\"dropdownValueProvider\" name=\"printersValueProvider\"/>",
                "+      </flowable:formProperty>",
                "+      <flowable:formProperty id=\"printMode\" name=\"Preferred print mode?\" type=\"enum\">",
                "+        <flowable:value id=\"bw\" name=\"Black / White\"/>",
                "+        <flowable:value id=\"color\" name=\"Color\"/>",
                "+      </flowable:formProperty>",
                "+    </extensionElements>",
                "+  </userTask>",
                "+  <userTask id=\"approvePrinter\" name=\"Approve printer\" flowable:formKey=\"approvePrinter\"> // <3>",
                "+    <extensionElements>",
                "+      <flowable:formProperty id=\"username\" name=\"Username\" type=\"string\" ",
                "+                             expression=\"${userTO.username}\" writable=\"false\"/>",
                "+      <flowable:formProperty id=\"printer\" name=\"Selected printer\" type=\"string\" ",
                "+                             expression=\"${printer}\" writable=\"false\"/>",
                "+      <flowable:formProperty id=\"approve\" name=\"Approve?\" type=\"boolean\"",
                "+                             variable=\"approve\" required=\"true\"/>",
                "+    </extensionElements>",
                "+  </userTask>",
                "+  <sequenceFlow id=\"sid-D7047714-8E57-46B8-B6D4-4844DE330329\"",
                "+                sourceRef=\"selectPrinter\" targetRef=\"approvePrinter\"/>",
                "+  <serviceTask id=\"createARelationship\" name=\"Create ARelationship\"",
                "+               flowable:delegateExpression=\"${createARelationship}\"/> // <4>",
                "+  <sequenceFlow id=\"sid-33880AE7-35C6-4A39-8E5B-12D8BA53F042\"",
                "+                sourceRef=\"approvePrinter\" targetRef=\"createARelationship\"/>",
                "+  <sequenceFlow id=\"sid-831E1896-EDF9-4F7D-AA42-E86CC1F8C5D3\"",
                "+                sourceRef=\"createARelationship\" targetRef=\"endevent1\"/>",
                "+</process>",
                "+----",
                "+<1> the first form defined is self-assigned to the user which has started this request",
                "+<2> the `dropdown` type is a Syncope extension of the",
                "+https://www.flowable.org/docs/userguide/index.html#formProperties[form property types supported by Flowable^]",
                "+and allows to inject a list of elements via the `dropdownValueProvider` value (with name `printersValueProvider` in this",
                "+sample), which must be a Spring bean implementing the",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/DropdownValueProvider.java[DropdownValueProvider^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/2_1_X/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/DropdownValueProvider.java[DropdownValueProvider^]",
                "+endif::[]",
                "+interface",
                "+<3> the second form is a traditional approval form, as seen <<sample-selfreg-approval,above>>",
                "+<4> this is a",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/FlowableServiceTask.java[FlowableServiceTask^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/2_1_X/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/FlowableServiceTask.java[FlowableServiceTask^]",
                "+endif::[]",
                "+implementation which takes care of establishing the relationship",
                "+===="
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/concepts/workflow.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1369": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "794416c94798a2bc83c9e34a52698b7e4a9ef2bf"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1369",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9126b7d0a19aafd8fec33daecb788e713b1f7132",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534248124,
            "hunks": 1,
            "message": "[SYNCOPE-1348] Async test improvement",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/concepts/policies.adoc b/src/main/asciidoc/reference-guide/concepts/policies.adoc",
                "index 9909fcb626..7e445975d4 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/policies.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/policies.adoc",
                "@@ -307,3 +307,2 @@ ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                " https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPullCorrelationRule.java[default^]",
                "-]",
                " endif::[]"
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/concepts/policies.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1348": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "dd41173ea62ef111e9b6c0b2cfde655af3e81619"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1348",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fa27b90c5d180d27fcea60020ca55f729dab2b9e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534165983,
            "hunks": 18,
            "message": "[SYNCOPE-1354] Taking always enable into account when creating Propagation Tasks upon Push",
            "diff": [
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java",
                "index 6994a47f63..00c311b6bf 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java",
                "@@ -38,2 +38,3 @@ public interface PropagationManager {",
                "      * @param key any object key",
                "+     * @param enable whether any object should be enabled or not",
                "      * @param propByRes operation to be performed per resource",
                "@@ -46,2 +47,3 @@ public interface PropagationManager {",
                "             String key,",
                "+            Boolean enable,",
                "             PropagationByResource propByRes,",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java",
                "index bffc136ed9..29447d57a8 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java",
                "@@ -80,2 +80,3 @@ public class DefaultAnyObjectProvisioningManager implements AnyObjectProvisionin",
                "                 created.getResult(),",
                "+                null,",
                "                 created.getPropByRes(),",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java",
                "index 98aab4de5e..5ca7d239d1 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java",
                "@@ -76,2 +76,3 @@ public class DefaultGroupProvisioningManager implements GroupProvisioningManager",
                "                 created.getResult(),",
                "+                null,",
                "                 created.getPropByRes(),",
                "@@ -101,2 +102,3 @@ public class DefaultGroupProvisioningManager implements GroupProvisioningManager",
                "                 created.getResult(),",
                "+                null,",
                "                 created.getPropByRes(),",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java",
                "index 7f4e06ca8a..deac6a4fd7 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java",
                "@@ -138,2 +138,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "             final String key,",
                "+            final Boolean enable,",
                "             final PropagationByResource propByRes,",
                "@@ -142,3 +143,3 @@ public class PropagationManagerImpl implements PropagationManager {",
                "-        return getCreateTasks(dao(kind).authFind(key), null, null, propByRes, vAttrs, noPropResourceKeys);",
                "+        return getCreateTasks(dao(kind).authFind(key), null, enable, propByRes, vAttrs, noPropResourceKeys);",
                "     }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java",
                "index 4d42271205..1053c021bb 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java",
                "@@ -92,3 +92,8 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan",
                "-    protected void update(final Any<?> any, final ConnectorObject beforeObj, final ProvisioningReport result) {",
                "+    protected void update(",
                "+            final Any<?> any,",
                "+            final Boolean enable,",
                "+            final ConnectorObject beforeObj,",
                "+            final ProvisioningReport result) {",
                "+",
                "         boolean changepwd = any instanceof User;",
                "@@ -108,3 +113,3 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan",
                "                 changepwd,",
                "-                null,",
                "+                enable,",
                "                 propByRes,",
                "@@ -135,3 +140,3 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan",
                "-    protected void provision(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {",
                "+    protected void provision(final Any<?> any, final Boolean enable, final ProvisioningReport result) {",
                "         AnyTO before = getAnyTO(any.getKey());",
                "@@ -147,2 +152,3 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan",
                "                 any.getKey(),",
                "+                enable,",
                "                 propByRes,",
                "@@ -262,3 +268,3 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan",
                "-        Boolean enabled = any instanceof User && profile.getTask().isSyncStatus()",
                "+        Boolean enable = any instanceof User && profile.getTask().isSyncStatus()",
                "                 ? ((User) any).isSuspended()",
                "@@ -268,4 +274,2 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan",
                "-        Boolean status = profile.getTask().isSyncStatus() ? enabled : null;",
                "-",
                "         if (profile.isDryRun()) {",
                "@@ -306,3 +310,3 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan",
                "                             } else {",
                "-                                assign(any, status, result);",
                "+                                assign(any, enable, result);",
                "                             }",
                "@@ -319,3 +323,3 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan",
                "                             } else {",
                "-                                provision(any, status, result);",
                "+                                provision(any, enable, result);",
                "                             }",
                "@@ -356,3 +360,3 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan",
                "                             } else {",
                "-                                update(any, beforeObj, result);",
                "+                                update(any, enable, beforeObj, result);",
                "                             }",
                "diff --git a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java",
                "index c18f7a0780..27ab6125ad 100644",
                "--- a/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java",
                "+++ b/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java",
                "@@ -78,2 +78,3 @@ public class CreateProducer extends AbstractProducer {",
                "                             created.getResult(),",
                "+                            null,",
                "                             created.getPropByRes(),",
                "@@ -88,2 +89,3 @@ public class CreateProducer extends AbstractProducer {",
                "                             created.getResult(),",
                "+                            null,",
                "                             created.getPropByRes(),"
            ],
            "changed_files": [
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java",
                "ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1354": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5155e37c4d6a45bd71c61fd8f7e6209b6665bd01"
                ],
                [
                    "no-tag",
                    "685cef7cf15fd0beb503069dcf87b95c7946cf20"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1354",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "41816c85027bbed8407be1a365a3f2381632811e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539271687,
            "hunks": 9,
            "message": "[SYNCOPE-1369] Special support to upgrade to Flowable in 2.1.2 added",
            "diff": [
                "diff --git a/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java b/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java",
                "index ccbf6e6ffd..37d70620bb 100644",
                "--- a/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java",
                "+++ b/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java",
                "@@ -28,2 +28,3 @@ import java.sql.Connection;",
                " import java.sql.ResultSet;",
                "+import java.sql.SQLException;",
                " import java.sql.Statement;",
                "@@ -47,8 +48,381 @@ public final class GenerateUpgradeSQL {",
                "+    private static void upgrade(final Connection conn) throws SQLException, IOException {",
                "+        // User",
                "+        OUT.write(\"UPDATE SyncopeUser SET mustChangePassword=0 WHERE mustChangePassword IS NULL;\\n\");",
                "+",
                "+        // VirSchema",
                "+        OUT.write(\"UPDATE VirSchema SET readonly=0 WHERE readonly IS NULL;\\n\");",
                "+",
                "+        // ExternalResource",
                "+        OUT.write(\"UPDATE ExternalResource SET overrideCapabilities=0 WHERE overrideCapabilities IS NULL;\\n\");",
                "+",
                "+        // OrgUnit",
                "+        OUT.write(\"UPDATE OrgUnit SET ignoreCaseMatch=0;\\n\");",
                "+",
                "+        // OrgUnitItemTransformer",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT orgUnitItem_id,transformerClassName FROM OrgUnitItem_Transformer\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String itemId = rs.getString(1);",
                "+                String transformerClassName = rs.getString(2);",
                "+",
                "+                String implementationId = \"OrgUnitItemTransformer_\" + transformerClassName + \"_\" + itemId;",
                "+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "+                        + \"'\" + implementationId + \"',\"",
                "+                        + \"'ITEM_TRANSFORMER',\"",
                "+                        + \"'JAVA',\"",
                "+                        + \"'\" + transformerClassName + \"');\\n\");",
                "+                OUT.write(\"INSERT INTO OrgUnitItemTransformer(item_id,implementation_id) VALUES(\"",
                "+                        + \"'\" + itemId + \"',\"",
                "+                        + \"'\" + implementationId + \"');\\n\");",
                "+            }",
                "+        }",
                "+        OUT.write(\"DROP TABLE OrgUnitItem_Transformer;\\n\");",
                "+",
                "+        // PlainSchema",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT DISTINCT validatorClass FROM PlainSchema WHERE validatorClass IS NOT NULL\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String validatorClass = rs.getString(1);",
                "+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "+                        + \"'\" + validatorClass + \"',\"",
                "+                        + \"'VALIDATOR',\"",
                "+                        + \"'JAVA',\"",
                "+                        + \"'\" + validatorClass + \"');\\n\");",
                "+            }",
                "+        }",
                "+        OUT.write(\"UPDATE PlainSchema SET validator_id=validatorClass;\\n\");",
                "+        OUT.write(\"ALTER TABLE PlainSchema DROP COLUMN validatorClass;\\n\");",
                "+",
                "+        // Provision",
                "+        OUT.write(\"UPDATE Provision SET ignoreCaseMatch=0;\\n\");",
                "+",
                "+        // PullPolicy",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT id,specification FROM PullPolicy WHERE specification IS NOT NULL\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String id = rs.getString(1);",
                "+                ObjectNode specification = (ObjectNode) MAPPER.readTree(rs.getString(2));",
                "+",
                "+                if (specification.has(\"conflictResolutionAction\")) {",
                "+                    OUT.write(\"UPDATE PullPolicy SET \"",
                "+                            + \"conflictResolutionAction='\"",
                "+                            + specification.get(\"conflictResolutionAction\").asText() + \"' \"",
                "+                            + \"WHERE id='\" + id + \"';\\n\");",
                "+                }",
                "+                if (specification.has(\"correlationRules\")) {",
                "+                    specification.get(\"correlationRules\").fields().forEachRemaining(entry -> {",
                "+                        ObjectNode body = MAPPER.createObjectNode();",
                "+                        body.put(\"@class\", \"org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf\");",
                "+                        body.put(\"name\", \"org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf\");",
                "+                        body.set(\"schemas\", entry.getValue());",
                "+",
                "+                        try {",
                "+                            String implementationId = \"PullCorrelationRule_\" + entry.getKey() + \"_\" + id;",
                "+                            OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "+                                    + \"'\" + implementationId + \"',\"",
                "+                                    + \"'PULL_CORRELATION_RULE',\"",
                "+                                    + \"'JAVA',\"",
                "+                                    + \"'\" + MAPPER.writeValueAsString(body) + \"');\\n\");",
                "+",
                "+                            OUT.write(\"INSERT INTO PullCorrelationRuleEntity\"",
                "+                                    + \"(id,pullPolicy_id,anyType_id,implementation_id) VALUES(\"",
                "+                                    + \"'\" + UUID.randomUUID().toString() + \"',\"",
                "+                                    + \"'\" + id + \"',\"",
                "+                                    + \"'\" + entry.getKey() + \"',\"",
                "+                                    + \"'\" + implementationId + \"');\\n\");",
                "+                        } catch (IOException e) {",
                "+                            System.err.println(\"Unexpected error: \" + e.getMessage());",
                "+                            System.exit(2);",
                "+                        }",
                "+                    });",
                "+                }",
                "+            }",
                "+            OUT.write(\"ALTER TABLE PullPolicy DROP COLUMN specification;\\n\");",
                "+        }",
                "+",
                "+        // AccountPolicy",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT id,accountPolicy_id,serializedInstance FROM AccountRuleConfInstance\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String id = rs.getString(1);",
                "+                String accountPolicyId = rs.getString(2);",
                "+                String serializedInstance = rs.getString(3);",
                "+",
                "+                String implementationId = \"AccountRule_\" + accountPolicyId + \"_\" + id;",
                "+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "+                        + \"'\" + implementationId + \"',\"",
                "+                        + \"'ACCOUNT_RULE',\"",
                "+                        + \"'JAVA',\"",
                "+                        + \"'\" + serializedInstance + \"');\\n\");",
                "+                OUT.write(\"INSERT INTO AccountPolicyRule(policy_id,implementation_id) VALUES(\"",
                "+                        + \"'\" + accountPolicyId + \"',\"",
                "+                        + \"'\" + implementationId + \"');\\n\");",
                "+            }",
                "+        }",
                "+        OUT.write(\"DROP TABLE AccountRuleConfInstance;\\n\");",
                "+",
                "+        // PasswordPolicy",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT id,passwordPolicy_id,serializedInstance FROM PasswordRuleConfInstance\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String id = rs.getString(1);",
                "+                String passwordPolicyId = rs.getString(2);",
                "+                String serializedInstance = rs.getString(3);",
                "+",
                "+                String implementationId = \"PasswordRule_\" + passwordPolicyId + \"_\" + id;",
                "+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "+                        + \"'\" + implementationId + \"',\"",
                "+                        + \"'ACCOUNT_RULE',\"",
                "+                        + \"'JAVA',\"",
                "+                        + \"'\" + serializedInstance + \"');\\n\");",
                "+                OUT.write(\"INSERT INTO PasswordPolicyRule(policy_id,implementation_id) VALUES(\"",
                "+                        + \"'\" + passwordPolicyId + \"',\"",
                "+                        + \"'\" + implementationId + \"');\\n\");",
                "+            }",
                "+        }",
                "+        OUT.write(\"DROP TABLE PasswordRuleConfInstance;\\n\");",
                "+",
                "+        // Task",
                "+        OUT.write(\"UPDATE Task SET remediation=0;\\n\");",
                "+        OUT.write(\"UPDATE Task SET active=0 WHERE active IS NULL;\\n\");",
                "+",
                "+        OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "+                + \"'PullJobDelegate',\"",
                "+                + \"'TASKJOB_DELEGATE',\"",
                "+                + \"'JAVA',\"",
                "+                + \"'org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate');\\n\");",
                "+        OUT.write(\"UPDATE Task SET jobDelegate_id='PullJobDelegate' WHERE DTYPE='PullTask';\\n\");",
                "+",
                "+        OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "+                + \"'PushJobDelegate',\"",
                "+                + \"'TASKJOB_DELEGATE',\"",
                "+                + \"'JAVA',\"",
                "+                + \"'org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate');\\n\");",
                "+        OUT.write(\"UPDATE Task SET jobDelegate_id='PushJobDelegate' WHERE DTYPE='PushTask';\\n\");",
                "+",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT DISTINCT jobDelegateClassName FROM Task WHERE jobDelegateClassName IS NOT NULL\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String jobDelegateClassName = rs.getString(1);",
                "+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "+                        + \"'\" + jobDelegateClassName + \"',\"",
                "+                        + \"'TASKJOB_DELEGATE',\"",
                "+                        + \"'JAVA',\"",
                "+                        + \"'\" + jobDelegateClassName + \"');\\n\");",
                "+            }",
                "+        }",
                "+        OUT.write(\"UPDATE Task SET jobDelegate_id=jobDelegateClassName;\\n\");",
                "+        OUT.write(\"ALTER TABLE Task DROP COLUMN jobDelegateClassName;\\n\");",
                "+",
                "+        // PullActions",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT DISTINCT actionClassName FROM PullTask_actionsClassNames\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String actionClassName = rs.getString(1);",
                "+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "+                        + \"'\" + actionClassName + \"',\"",
                "+                        + \"'PULL_ACTIONS',\"",
                "+                        + \"'JAVA',\"",
                "+                        + \"'\" + actionClassName + \"');\\n\");",
                "+            }",
                "+        }",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT pullTask_id,actionClassName FROM PullTask_actionsClassNames\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String pullTaskId = rs.getString(1);",
                "+                String actionClassName = rs.getString(2);",
                "+                OUT.write(\"INSERT INTO PullTaskAction(task_id,implementation_id) VALUES(\"",
                "+                        + \"'\" + pullTaskId + \"',\"",
                "+                        + \"'\" + actionClassName + \"');\\n\");",
                "+            }",
                "+        }",
                "+        OUT.write(\"DROP TABLE PullTask_actionsClassNames;\\n\");",
                "+",
                "+        // PushActions",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT DISTINCT actionClassName FROM PushTask_actionsClassNames\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String actionClassName = rs.getString(1);",
                "+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "+                        + \"'\" + actionClassName + \"',\"",
                "+                        + \"'PUSH_ACTIONS',\"",
                "+                        + \"'JAVA',\"",
                "+                        + \"'\" + actionClassName + \"');\\n\");",
                "+            }",
                "+        }",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT pushTask_id,actionClassName FROM PushTask_actionsClassNames\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String pushTaskId = rs.getString(1);",
                "+                String actionClassName = rs.getString(2);",
                "+                OUT.write(\"INSERT INTO PushTaskAction(task_id,implementation_id) VALUES(\"",
                "+                        + \"'\" + pushTaskId + \"',\"",
                "+                        + \"'\" + actionClassName + \"');\\n\");",
                "+            }",
                "+        }",
                "+        OUT.write(\"DROP TABLE PushTask_actionsClassNames;\\n\");",
                "+",
                "+        // PropagationActions",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT DISTINCT actionClassName FROM ExternalResource_PropActions\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String actionClassName = rs.getString(1);",
                "+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "+                        + \"'\" + actionClassName + \"',\"",
                "+                        + \"'PROPAGATION_ACTIONS',\"",
                "+                        + \"'JAVA',\"",
                "+                        + \"'\" + actionClassName + \"');\\n\");",
                "+            }",
                "+        }",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT resource_id,actionClassName FROM ExternalResource_PropActions\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String resourceId = rs.getString(1);",
                "+                String actionClassName = rs.getString(2);",
                "+                OUT.write(\"INSERT INTO ExternalResourcePropAction(resource_id,implementation_id) VALUES(\"",
                "+                        + \"'\" + resourceId + \"',\"",
                "+                        + \"'\" + actionClassName + \"');\\n\");",
                "+            }",
                "+        }",
                "+        OUT.write(\"DROP TABLE ExternalResource_PropActions;\\n\");",
                "+",
                "+        // LogicActions",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT DISTINCT actionClassName FROM Realm_actionsClassNames\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String actionClassName = rs.getString(1);",
                "+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "+                        + \"'\" + actionClassName + \"',\"",
                "+                        + \"'LOGIC_ACTIONS',\"",
                "+                        + \"'JAVA',\"",
                "+                        + \"'\" + actionClassName + \"');\\n\");",
                "+            }",
                "+        }",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT realm_id,actionClassName FROM Realm_actionsClassNames\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String realmId = rs.getString(1);",
                "+                String actionClassName = rs.getString(2);",
                "+                OUT.write(\"INSERT INTO RealmAction(realm_id,implementation_id) VALUES(\"",
                "+                        + \"'\" + realmId + \"',\"",
                "+                        + \"'\" + actionClassName + \"');\\n\");",
                "+            }",
                "+        }",
                "+        OUT.write(\"DROP TABLE Realm_actionsClassNames;\\n\");",
                "+",
                "+        // Reportlet",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT id,report_id,serializedInstance FROM ReportletConfInstance\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String id = rs.getString(1);",
                "+                String reportId = rs.getString(2);",
                "+                String serializedInstance = rs.getString(3);",
                "+",
                "+                String implementationId = \"Reportlet_\" + reportId + \"_\" + id;",
                "+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "+                        + \"'\" + implementationId + \"',\"",
                "+                        + \"'REPORTLET',\"",
                "+                        + \"'JAVA',\"",
                "+                        + \"'\" + serializedInstance + \"');\\n\");",
                "+                OUT.write(\"INSERT INTO ReportReportlet(report_id,implementation_id) VALUES(\"",
                "+                        + \"'\" + reportId + \"',\"",
                "+                        + \"'\" + implementationId + \"');\\n\");",
                "+            }",
                "+        }",
                "+        OUT.write(\"DROP TABLE ReportletConfInstance;\\n\");",
                "+",
                "+        // MappingItemTransformer",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT mappingItem_id,transformerClassName FROM MappingItem_Transformer\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String itemId = rs.getString(1);",
                "+                String transformerClassName = rs.getString(2);",
                "+",
                "+                String implementationId = \"MappingItemTransformer_\" + transformerClassName + \"_\" + itemId;",
                "+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "+                        + \"'\" + implementationId + \"',\"",
                "+                        + \"'ITEM_TRANSFORMER',\"",
                "+                        + \"'JAVA',\"",
                "+                        + \"'\" + transformerClassName + \"');\\n\");",
                "+                OUT.write(\"INSERT INTO MappingItemTransformer(item_id,implementation_id) VALUES(\"",
                "+                        + \"'\" + itemId + \"',\"",
                "+                        + \"'\" + implementationId + \"');\\n\");",
                "+            }",
                "+        }",
                "+        OUT.write(\"DROP TABLE MappingItem_Transformer;\\n\");",
                "+",
                "+        // Notification",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(",
                "+                        \"SELECT DISTINCT recipientsProviderClassName \"",
                "+                        + \"FROM Notification WHERE recipientsProviderClassName IS NOT NULL\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                String recipientsProviderClassName = rs.getString(1);",
                "+                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "+                        + \"'\" + recipientsProviderClassName + \"',\"",
                "+                        + \"'RECIPIENTS_PROVIDER',\"",
                "+                        + \"'JAVA',\"",
                "+                        + \"'\" + recipientsProviderClassName + \"');\\n\");",
                "+            }",
                "+        }",
                "+        OUT.write(\"UPDATE Notification SET recipientsProvider_id=recipientsProviderClassName;\\n\");",
                "+        OUT.write(\"ALTER TABLE Notification DROP COLUMN recipientsProviderClassName;\\n\");",
                "+    }",
                "+",
                "+    private static void upgradeFlowableTo212(final Connection conn) throws IOException, SQLException {",
                "+        try (Statement stmt = conn.createStatement();",
                "+                ResultSet rs = stmt.executeQuery(\"SELECT id,workflowId FROM SyncopeUser\")) {",
                "+",
                "+            while (rs.next()) {",
                "+                OUT.write(\"UPDATE ACT_RU_EXECUTION \"",
                "+                        + \"SET BUSINESS_KEY_='userWorkflow:\" + rs.getString(1) + \"' \"",
                "+                        + \"WHERE ID_='\" + rs.getString(2) + \"';\\n\");",
                "+            }",
                "+        }",
                "+",
                "+        OUT.write(\"DROP VIEW user_search;\\n\");",
                "+        OUT.write(\"ALTER TABLE SyncopeUser DROP COLUMN workflowId;\\n\");",
                "+        OUT.write(\"CREATE VIEW user_search AS SELECT u.id as any_id, u.* FROM SyncopeUser u;\\n\");",
                "+    }",
                "+",
                "     public static void main(final String[] args) throws Exception {",
                "         // parse args",
                "-        if (args.length < 5 || args.length > 6) {",
                "+        if (args.length < 5 || args.length > 7) {",
                "             System.err.println(\"Unexpected arguments: \" + Arrays.asList(args));",
                "             System.out.println(\"Usage: <driverClassName> <jdbcURL> <username> <password>\"",
                "-                    + \"<h2|mariadb|mysql|oracle|postgres|sqlserver> [filename]\");",
                "+                    + \"<h2|mariadb|mysql|oracle|postgres|sqlserver> [-flowable-2.1.2] [filename]\");",
                "             System.exit(1);",
                "@@ -61,4 +435,8 @@ public final class GenerateUpgradeSQL {",
                "         String dbDictionary = args[4];",
                "-        if (args.length == 6) {",
                "-            setWriter(new FileWriter(args[5]));",
                "+        boolean flowableTo212 = false;",
                "+        if (args.length >= 6) {",
                "+            flowableTo212 = \"-flowable-2.1.2\".equals(args[5]);",
                "+            if (!flowableTo212) {",
                "+                setWriter(new FileWriter(args[args.length - 1]));",
                "+            }",
                "         }",
                "@@ -72,21 +450,19 @@ public final class GenerateUpgradeSQL {",
                "-        // setup OpenJPA",
                "-        JDBCConfiguration jdbcConf = new JDBCConfigurationImpl();",
                "-        jdbcConf.setConnection2DriverName(driverClassName);",
                "-        jdbcConf.setConnection2UserName(username);",
                "-        jdbcConf.setConnection2Password(password);",
                "-        jdbcConf.setDBDictionary(dbDictionary);",
                "-        jdbcConf.setConnectionFactory2(dataSource);",
                "-",
                "-        FileSchemaFactory schemaFactory = new FileSchemaFactory();",
                "-        schemaFactory.setConfiguration(jdbcConf);",
                "-        schemaFactory.setFile(\"schema.xml\");",
                "-        jdbcConf.setSchemaFactory(schemaFactory);",
                "-",
                "-        WiserSchemaTool schemaTool = new WiserSchemaTool(jdbcConf, SchemaTool.ACTION_ADD);",
                "-        schemaTool.setSchemaGroup(schemaFactory.readSchema());",
                "-        schemaTool.setWriter(OUT);",
                "         try {",
                "-            // run OpenJPA's SchemaTool to get the update statements",
                "-            schemaTool.run();",
                "+            // setup OpenJPA",
                "+            JDBCConfiguration jdbcConf = new JDBCConfigurationImpl();",
                "+            jdbcConf.setConnection2DriverName(driverClassName);",
                "+            jdbcConf.setConnection2UserName(username);",
                "+            jdbcConf.setConnection2Password(password);",
                "+            jdbcConf.setDBDictionary(dbDictionary);",
                "+            jdbcConf.setConnectionFactory2(dataSource);",
                "+",
                "+            FileSchemaFactory schemaFactory = new FileSchemaFactory();",
                "+            schemaFactory.setConfiguration(jdbcConf);",
                "+            schemaFactory.setFile(\"schema.xml\");",
                "+            jdbcConf.setSchemaFactory(schemaFactory);",
                "+",
                "+            WiserSchemaTool schemaTool = new WiserSchemaTool(jdbcConf, SchemaTool.ACTION_ADD);",
                "+            schemaTool.setSchemaGroup(schemaFactory.readSchema());",
                "+            schemaTool.setWriter(OUT);",
                "@@ -95,356 +471,10 @@ public final class GenerateUpgradeSQL {",
                "-            // User",
                "-            OUT.write(\"UPDATE SyncopeUser SET mustChangePassword=0 WHERE mustChangePassword IS NULL;\\n\");",
                "-",
                "-            // VirSchema",
                "-            OUT.write(\"UPDATE VirSchema SET readonly=0 WHERE readonly IS NULL;\\n\");",
                "-",
                "-            // ExternalResource",
                "-            OUT.write(\"UPDATE ExternalResource SET overrideCapabilities=0 WHERE overrideCapabilities IS NULL;\\n\");",
                "-",
                "-            // OrgUnit",
                "-            OUT.write(\"UPDATE OrgUnit SET ignoreCaseMatch=0;\\n\");",
                "+            if (flowableTo212) {",
                "+                upgradeFlowableTo212(conn);",
                "+            } else {",
                "+                // run OpenJPA's SchemaTool to get the update statements",
                "+                schemaTool.run();",
                "-            // OrgUnitItemTransformer",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT orgUnitItem_id,transformerClassName FROM OrgUnitItem_Transformer\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String itemId = rs.getString(1);",
                "-                    String transformerClassName = rs.getString(2);",
                "-",
                "-                    String implementationId = \"OrgUnitItemTransformer_\" + transformerClassName + \"_\" + itemId;",
                "-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "-                            + \"'\" + implementationId + \"',\"",
                "-                            + \"'ITEM_TRANSFORMER',\"",
                "-                            + \"'JAVA',\"",
                "-                            + \"'\" + transformerClassName + \"');\\n\");",
                "-                    OUT.write(\"INSERT INTO OrgUnitItemTransformer(item_id,implementation_id) VALUES(\"",
                "-                            + \"'\" + itemId + \"',\"",
                "-                            + \"'\" + implementationId + \"');\\n\");",
                "-                }",
                "-            }",
                "-            OUT.write(\"DROP TABLE OrgUnitItem_Transformer;\\n\");",
                "-",
                "-            // PlainSchema",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT DISTINCT validatorClass FROM PlainSchema WHERE validatorClass IS NOT NULL\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String validatorClass = rs.getString(1);",
                "-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "-                            + \"'\" + validatorClass + \"',\"",
                "-                            + \"'VALIDATOR',\"",
                "-                            + \"'JAVA',\"",
                "-                            + \"'\" + validatorClass + \"');\\n\");",
                "-                }",
                "-            }",
                "-            OUT.write(\"UPDATE PlainSchema SET validator_id=validatorClass;\\n\");",
                "-            OUT.write(\"ALTER TABLE PlainSchema DROP COLUMN validatorClass;\\n\");",
                "-",
                "-            // Provision",
                "-            OUT.write(\"UPDATE Provision SET ignoreCaseMatch=0;\\n\");",
                "-",
                "-            // PullPolicy",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT id,specification FROM PullPolicy WHERE specification IS NOT NULL\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String id = rs.getString(1);",
                "-                    ObjectNode specification = (ObjectNode) MAPPER.readTree(rs.getString(2));",
                "-",
                "-                    if (specification.has(\"conflictResolutionAction\")) {",
                "-                        OUT.write(\"UPDATE PullPolicy SET \"",
                "-                                + \"conflictResolutionAction='\"",
                "-                                + specification.get(\"conflictResolutionAction\").asText() + \"' \"",
                "-                                + \"WHERE id='\" + id + \"';\\n\");",
                "-                    }",
                "-                    if (specification.has(\"correlationRules\")) {",
                "-                        specification.get(\"correlationRules\").fields().forEachRemaining(entry -> {",
                "-                            ObjectNode body = MAPPER.createObjectNode();",
                "-                            body.put(\"@class\", \"org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf\");",
                "-                            body.put(\"name\", \"org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf\");",
                "-                            body.set(\"schemas\", entry.getValue());",
                "-",
                "-                            try {",
                "-                                String implementationId = \"PullCorrelationRule_\" + entry.getKey() + \"_\" + id;",
                "-                                OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "-                                        + \"'\" + implementationId + \"',\"",
                "-                                        + \"'PULL_CORRELATION_RULE',\"",
                "-                                        + \"'JAVA',\"",
                "-                                        + \"'\" + MAPPER.writeValueAsString(body) + \"');\\n\");",
                "-",
                "-                                OUT.write(\"INSERT INTO PullCorrelationRuleEntity\"",
                "-                                        + \"(id,pullPolicy_id,anyType_id,implementation_id) VALUES(\"",
                "-                                        + \"'\" + UUID.randomUUID().toString() + \"',\"",
                "-                                        + \"'\" + id + \"',\"",
                "-                                        + \"'\" + entry.getKey() + \"',\"",
                "-                                        + \"'\" + implementationId + \"');\\n\");",
                "-                            } catch (IOException e) {",
                "-                                System.err.println(\"Unexpected error: \" + e.getMessage());",
                "-                                System.exit(2);",
                "-                            }",
                "-                        });",
                "-                    }",
                "-                }",
                "-                OUT.write(\"ALTER TABLE PullPolicy DROP COLUMN specification;\\n\");",
                "-            }",
                "-",
                "-            // AccountPolicy",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT id,accountPolicy_id,serializedInstance FROM AccountRuleConfInstance\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String id = rs.getString(1);",
                "-                    String accountPolicyId = rs.getString(2);",
                "-                    String serializedInstance = rs.getString(3);",
                "-",
                "-                    String implementationId = \"AccountRule_\" + accountPolicyId + \"_\" + id;",
                "-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "-                            + \"'\" + implementationId + \"',\"",
                "-                            + \"'ACCOUNT_RULE',\"",
                "-                            + \"'JAVA',\"",
                "-                            + \"'\" + serializedInstance + \"');\\n\");",
                "-                    OUT.write(\"INSERT INTO AccountPolicyRule(policy_id,implementation_id) VALUES(\"",
                "-                            + \"'\" + accountPolicyId + \"',\"",
                "-                            + \"'\" + implementationId + \"');\\n\");",
                "-                }",
                "-            }",
                "-            OUT.write(\"DROP TABLE AccountRuleConfInstance;\\n\");",
                "-",
                "-            // PasswordPolicy",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT id,passwordPolicy_id,serializedInstance FROM PasswordRuleConfInstance\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String id = rs.getString(1);",
                "-                    String passwordPolicyId = rs.getString(2);",
                "-                    String serializedInstance = rs.getString(3);",
                "-",
                "-                    String implementationId = \"PasswordRule_\" + passwordPolicyId + \"_\" + id;",
                "-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "-                            + \"'\" + implementationId + \"',\"",
                "-                            + \"'ACCOUNT_RULE',\"",
                "-                            + \"'JAVA',\"",
                "-                            + \"'\" + serializedInstance + \"');\\n\");",
                "-                    OUT.write(\"INSERT INTO PasswordPolicyRule(policy_id,implementation_id) VALUES(\"",
                "-                            + \"'\" + passwordPolicyId + \"',\"",
                "-                            + \"'\" + implementationId + \"');\\n\");",
                "-                }",
                "-            }",
                "-            OUT.write(\"DROP TABLE PasswordRuleConfInstance;\\n\");",
                "-",
                "-            // Task",
                "-            OUT.write(\"UPDATE Task SET remediation=0;\\n\");",
                "-            OUT.write(\"UPDATE Task SET active=0 WHERE active IS NULL;\\n\");",
                "-",
                "-            OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "-                    + \"'PullJobDelegate',\"",
                "-                    + \"'TASKJOB_DELEGATE',\"",
                "-                    + \"'JAVA',\"",
                "-                    + \"'org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate');\\n\");",
                "-            OUT.write(\"UPDATE Task SET jobDelegate_id='PullJobDelegate' WHERE DTYPE='PullTask';\\n\");",
                "-",
                "-            OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "-                    + \"'PushJobDelegate',\"",
                "-                    + \"'TASKJOB_DELEGATE',\"",
                "-                    + \"'JAVA',\"",
                "-                    + \"'org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate');\\n\");",
                "-            OUT.write(\"UPDATE Task SET jobDelegate_id='PushJobDelegate' WHERE DTYPE='PushTask';\\n\");",
                "-",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT DISTINCT jobDelegateClassName FROM Task WHERE jobDelegateClassName IS NOT NULL\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String jobDelegateClassName = rs.getString(1);",
                "-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "-                            + \"'\" + jobDelegateClassName + \"',\"",
                "-                            + \"'TASKJOB_DELEGATE',\"",
                "-                            + \"'JAVA',\"",
                "-                            + \"'\" + jobDelegateClassName + \"');\\n\");",
                "-                }",
                "-            }",
                "-            OUT.write(\"UPDATE Task SET jobDelegate_id=jobDelegateClassName;\\n\");",
                "-            OUT.write(\"ALTER TABLE Task DROP COLUMN jobDelegateClassName;\\n\");",
                "-",
                "-            // PullActions",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT DISTINCT actionClassName FROM PullTask_actionsClassNames\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String actionClassName = rs.getString(1);",
                "-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "-                            + \"'\" + actionClassName + \"',\"",
                "-                            + \"'PULL_ACTIONS',\"",
                "-                            + \"'JAVA',\"",
                "-                            + \"'\" + actionClassName + \"');\\n\");",
                "-                }",
                "-            }",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT pullTask_id,actionClassName FROM PullTask_actionsClassNames\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String pullTaskId = rs.getString(1);",
                "-                    String actionClassName = rs.getString(2);",
                "-                    OUT.write(\"INSERT INTO PullTaskAction(task_id,implementation_id) VALUES(\"",
                "-                            + \"'\" + pullTaskId + \"',\"",
                "-                            + \"'\" + actionClassName + \"');\\n\");",
                "-                }",
                "-            }",
                "-            OUT.write(\"DROP TABLE PullTask_actionsClassNames;\\n\");",
                "-",
                "-            // PushActions",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT DISTINCT actionClassName FROM PushTask_actionsClassNames\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String actionClassName = rs.getString(1);",
                "-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "-                            + \"'\" + actionClassName + \"',\"",
                "-                            + \"'PUSH_ACTIONS',\"",
                "-                            + \"'JAVA',\"",
                "-                            + \"'\" + actionClassName + \"');\\n\");",
                "-                }",
                "-            }",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT pushTask_id,actionClassName FROM PushTask_actionsClassNames\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String pushTaskId = rs.getString(1);",
                "-                    String actionClassName = rs.getString(2);",
                "-                    OUT.write(\"INSERT INTO PushTaskAction(task_id,implementation_id) VALUES(\"",
                "-                            + \"'\" + pushTaskId + \"',\"",
                "-                            + \"'\" + actionClassName + \"');\\n\");",
                "-                }",
                "-            }",
                "-            OUT.write(\"DROP TABLE PushTask_actionsClassNames;\\n\");",
                "-",
                "-            // PropagationActions",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT DISTINCT actionClassName FROM ExternalResource_PropActions\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String actionClassName = rs.getString(1);",
                "-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "-                            + \"'\" + actionClassName + \"',\"",
                "-                            + \"'PROPAGATION_ACTIONS',\"",
                "-                            + \"'JAVA',\"",
                "-                            + \"'\" + actionClassName + \"');\\n\");",
                "-                }",
                "-            }",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT resource_id,actionClassName FROM ExternalResource_PropActions\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String resourceId = rs.getString(1);",
                "-                    String actionClassName = rs.getString(2);",
                "-                    OUT.write(\"INSERT INTO ExternalResourcePropAction(resource_id,implementation_id) VALUES(\"",
                "-                            + \"'\" + resourceId + \"',\"",
                "-                            + \"'\" + actionClassName + \"');\\n\");",
                "-                }",
                "-            }",
                "-            OUT.write(\"DROP TABLE ExternalResource_PropActions;\\n\");",
                "-",
                "-            // LogicActions",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT DISTINCT actionClassName FROM Realm_actionsClassNames\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String actionClassName = rs.getString(1);",
                "-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "-                            + \"'\" + actionClassName + \"',\"",
                "-                            + \"'LOGIC_ACTIONS',\"",
                "-                            + \"'JAVA',\"",
                "-                            + \"'\" + actionClassName + \"');\\n\");",
                "-                }",
                "-            }",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT realm_id,actionClassName FROM Realm_actionsClassNames\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String realmId = rs.getString(1);",
                "-                    String actionClassName = rs.getString(2);",
                "-                    OUT.write(\"INSERT INTO RealmAction(realm_id,implementation_id) VALUES(\"",
                "-                            + \"'\" + realmId + \"',\"",
                "-                            + \"'\" + actionClassName + \"');\\n\");",
                "-                }",
                "-            }",
                "-            OUT.write(\"DROP TABLE Realm_actionsClassNames;\\n\");",
                "-",
                "-            // Reportlet",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT id,report_id,serializedInstance FROM ReportletConfInstance\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String id = rs.getString(1);",
                "-                    String reportId = rs.getString(2);",
                "-                    String serializedInstance = rs.getString(3);",
                "-",
                "-                    String implementationId = \"Reportlet_\" + reportId + \"_\" + id;",
                "-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "-                            + \"'\" + implementationId + \"',\"",
                "-                            + \"'REPORTLET',\"",
                "-                            + \"'JAVA',\"",
                "-                            + \"'\" + serializedInstance + \"');\\n\");",
                "-                    OUT.write(\"INSERT INTO ReportReportlet(report_id,implementation_id) VALUES(\"",
                "-                            + \"'\" + reportId + \"',\"",
                "-                            + \"'\" + implementationId + \"');\\n\");",
                "-                }",
                "-            }",
                "-            OUT.write(\"DROP TABLE ReportletConfInstance;\\n\");",
                "-",
                "-            // MappingItemTransformer",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT mappingItem_id,transformerClassName FROM MappingItem_Transformer\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String itemId = rs.getString(1);",
                "-                    String transformerClassName = rs.getString(2);",
                "-",
                "-                    String implementationId = \"MappingItemTransformer_\" + transformerClassName + \"_\" + itemId;",
                "-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "-                            + \"'\" + implementationId + \"',\"",
                "-                            + \"'ITEM_TRANSFORMER',\"",
                "-                            + \"'JAVA',\"",
                "-                            + \"'\" + transformerClassName + \"');\\n\");",
                "-                    OUT.write(\"INSERT INTO MappingItemTransformer(item_id,implementation_id) VALUES(\"",
                "-                            + \"'\" + itemId + \"',\"",
                "-                            + \"'\" + implementationId + \"');\\n\");",
                "-                }",
                "-            }",
                "-            OUT.write(\"DROP TABLE MappingItem_Transformer;\\n\");",
                "-",
                "-            // Notification",
                "-            try (Statement stmt = conn.createStatement();",
                "-                    ResultSet rs = stmt.executeQuery(",
                "-                            \"SELECT DISTINCT recipientsProviderClassName \"",
                "-                            + \"FROM Notification WHERE recipientsProviderClassName IS NOT NULL\")) {",
                "-",
                "-                while (rs.next()) {",
                "-                    String recipientsProviderClassName = rs.getString(1);",
                "-                    OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "-                            + \"'\" + recipientsProviderClassName + \"',\"",
                "-                            + \"'RECIPIENTS_PROVIDER',\"",
                "-                            + \"'JAVA',\"",
                "-                            + \"'\" + recipientsProviderClassName + \"');\\n\");",
                "-                }",
                "+                upgrade(conn);",
                "             }",
                "-            OUT.write(\"UPDATE Notification SET recipientsProvider_id=recipientsProviderClassName;\\n\");",
                "-            OUT.write(\"ALTER TABLE Notification DROP COLUMN recipientsProviderClassName;\\n\");",
                "         } finally {"
            ],
            "changed_files": [
                "core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1369": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "395a4fe15b8ae5999d0d7b1c0556e1a2e3e65357"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1369",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5e854e117594da3a1ba78c0af8d53d89a66a9c5a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540297612,
            "hunks": 10,
            "message": "[SYNCOPE-1387] Clearing up calls between link() and update()",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "index ad45010fd4..c315343079 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "@@ -276,3 +276,3 @@ public class DefaultRealmPullResultHandler",
                "-    private List<ProvisioningReport> update(final SyncDelta delta, final List<String> keys)",
                "+    private List<ProvisioningReport> update(final SyncDelta delta, final List<String> keys, final boolean inLink)",
                "             throws JobExecutionException {",
                "@@ -316,4 +316,6 @@ public class DefaultRealmPullResultHandler",
                "                     try {",
                "-                        for (PullActions action : profile.getActions()) {",
                "-                            action.beforeUpdate(profile, delta, before, null);",
                "+                        if (!inLink) {",
                "+                            for (PullActions action : profile.getActions()) {",
                "+                                action.beforeUpdate(profile, delta, before, null);",
                "+                            }",
                "                         }",
                "@@ -416,11 +418,13 @@ public class DefaultRealmPullResultHandler",
                "+                        RealmTO realmTO;",
                "                         if (unlink) {",
                "                             realm.getResources().remove(profile.getTask().getResource());",
                "-                            output = binder.getRealmTO(realmDAO.save(realm), true);",
                "+                            realmTO = binder.getRealmTO(realmDAO.save(realm), true);",
                "                         } else {",
                "-                            output = binder.getRealmTO(realm, true);",
                "+                            realmTO = binder.getRealmTO(realm, true);",
                "                         }",
                "+                        output = realmTO;",
                "                         for (PullActions action : profile.getActions()) {",
                "-                            action.after(profile, delta, RealmTO.class.cast(output), result);",
                "+                            action.after(profile, delta, realmTO, result);",
                "                         }",
                "@@ -512,7 +516,3 @@ public class DefaultRealmPullResultHandler",
                "                         }",
                "-                        output = update(delta, Collections.singletonList(key));",
                "-",
                "-                        for (PullActions action : profile.getActions()) {",
                "-                            action.after(profile, delta, RealmTO.class.cast(output), result);",
                "-                        }",
                "+                        output = update(delta, Collections.singletonList(key), true);",
                "@@ -689,4 +689,4 @@ public class DefaultRealmPullResultHandler",
                "                 case IGNORE:",
                "-                        throw new IgnoreProvisionException(\"More than one match found for \"",
                "-                                + processed.getObject().getUid().getUidValue() + \": \" + keys);",
                "+                    throw new IgnoreProvisionException(\"More than one match found for \"",
                "+                            + processed.getObject().getUid().getUidValue() + \": \" + keys);",
                "@@ -727,3 +727,3 @@ public class DefaultRealmPullResultHandler",
                "                         case UPDATE:",
                "-                            profile.getResults().addAll(update(processed, keys));",
                "+                            profile.getResults().addAll(update(processed, keys, false));",
                "                             break;"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1387": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6bb67afe241f5bfb584db0a2bb14f007997e5427"
                ],
                [
                    "no-tag",
                    "e851b2818d72137f5e049d4b810504f51d6a0d70"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1387",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4dd8eff0b229fff32e1ec3bbbbbc5c6069a7bb81",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539154327,
            "hunks": 23,
            "message": "[SYNCOPE-1380] Raise IgnoreProvisionException, more appropriate",
            "diff": [
                "diff --git a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/IgnoreProvisionException.java b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/IgnoreProvisionException.java",
                "index bf56246364..95d37e82e8 100644",
                "--- a/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/IgnoreProvisionException.java",
                "+++ b/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/IgnoreProvisionException.java",
                "@@ -21,4 +21,3 @@ package org.apache.syncope.core.provisioning.api.pushpull;",
                " /**",
                "- * Raised by {@link PullActions} or {@link PushActions} methods when the given any object is to be ignored for",
                "- * pull / push.",
                "+ * Raised when the given any object is to be ignored for pull / push.",
                "  */",
                "@@ -28,2 +27,9 @@ public class IgnoreProvisionException extends RuntimeException {",
                "+    public IgnoreProvisionException() {",
                "+        super();",
                "+    }",
                "+",
                "+    public IgnoreProvisionException(final String message) {",
                "+        super(message);",
                "+    }",
                " }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "index 2ea3da94b3..c02077d6da 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "@@ -156,2 +156,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "             ignoreResult.setStatus(ProvisioningReport.Status.IGNORE);",
                "+            ignoreResult.setMessage(e.getMessage());",
                "             ignoreResult.setKey(null);",
                "@@ -783,13 +784,14 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "         try {",
                "-            List<String> anyKeys = pullUtils.match(processed.getObject(), provision, anyUtils);",
                "+            List<String> keys = pullUtils.match(processed.getObject(), provision, anyUtils);",
                "             LOG.debug(\"Match(es) found for {} as {}: {}\",",
                "-                    processed.getUid().getUidValue(), processed.getObject().getObjectClass(), anyKeys);",
                "+                    processed.getUid().getUidValue(), processed.getObject().getObjectClass(), keys);",
                "-            if (anyKeys.size() > 1) {",
                "+            if (keys.size() > 1) {",
                "                 switch (profile.getConflictResolutionAction()) {",
                "                     case IGNORE:",
                "-                        throw new IllegalStateException(\"More than one match: \" + anyKeys);",
                "+                        throw new IgnoreProvisionException(\"More than one match found for \"",
                "+                                + processed.getObject().getUid().getUidValue() + \": \" + keys);",
                "                     case FIRSTMATCH:",
                "-                        anyKeys = anyKeys.subList(0, 1);",
                "+                        keys = keys.subList(0, 1);",
                "                         break;",
                "@@ -797,3 +799,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                     case LASTMATCH:",
                "-                        anyKeys = anyKeys.subList(anyKeys.size() - 1, anyKeys.size());",
                "+                        keys = keys.subList(keys.size() - 1, keys.size());",
                "                         break;",
                "@@ -806,3 +808,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "             if (SyncDeltaType.CREATE_OR_UPDATE == processed.getDeltaType()) {",
                "-                if (anyKeys.isEmpty()) {",
                "+                if (keys.isEmpty()) {",
                "                     switch (profile.getTask().getUnmatchingRule()) {",
                "@@ -827,3 +829,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         Attribute attr = processed.getObject().getAttributeByName(virSchema.getExtAttrName());",
                "-                        for (String anyKey : anyKeys) {",
                "+                        for (String anyKey : keys) {",
                "                             if (attr == null) {",
                "@@ -847,3 +849,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case UPDATE:",
                "-                            profile.getResults().addAll(update(processed, anyKeys, provision));",
                "+                            profile.getResults().addAll(update(processed, keys, provision));",
                "                             break;",
                "@@ -851,3 +853,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case DEPROVISION:",
                "-                            profile.getResults().addAll(deprovision(processed, anyKeys, provision, false));",
                "+                            profile.getResults().addAll(deprovision(processed, keys, provision, false));",
                "                             break;",
                "@@ -855,3 +857,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case UNASSIGN:",
                "-                            profile.getResults().addAll(deprovision(processed, anyKeys, provision, true));",
                "+                            profile.getResults().addAll(deprovision(processed, keys, provision, true));",
                "                             break;",
                "@@ -859,3 +861,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case LINK:",
                "-                            profile.getResults().addAll(link(processed, anyKeys, provision, false));",
                "+                            profile.getResults().addAll(link(processed, keys, provision, false));",
                "                             break;",
                "@@ -863,3 +865,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case UNLINK:",
                "-                            profile.getResults().addAll(link(processed, anyKeys, provision, true));",
                "+                            profile.getResults().addAll(link(processed, keys, provision, true));",
                "                             break;",
                "@@ -867,3 +869,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                         case IGNORE:",
                "-                            profile.getResults().addAll(ignore(processed, anyKeys, provision, true));",
                "+                            profile.getResults().addAll(ignore(processed, keys, provision, true));",
                "                             break;",
                "@@ -875,3 +877,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "             } else if (SyncDeltaType.DELETE == processed.getDeltaType()) {",
                "-                if (anyKeys.isEmpty()) {",
                "+                if (keys.isEmpty()) {",
                "                     finalize(ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, processed);",
                "@@ -879,3 +881,3 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan",
                "                 } else {",
                "-                    profile.getResults().addAll(delete(processed, anyKeys, provision));",
                "+                    profile.getResults().addAll(delete(processed, keys, provision));",
                "                 }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java",
                "index 6c48702727..8ad473ea8d 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java",
                "@@ -210,3 +210,3 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan",
                "         } catch (IgnoreProvisionException e) {",
                "-            ProvisioningReport result = profile.getResults().stream().",
                "+            ProvisioningReport ignoreResult = profile.getResults().stream().",
                "                     filter(report -> anyKey.equalsIgnoreCase(report.getKey())).",
                "@@ -214,12 +214,13 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan",
                "                     orElse(null);",
                "-            if (result == null) {",
                "-                result = new ProvisioningReport();",
                "-                result.setKey(anyKey);",
                "-                result.setAnyType(any == null ? null : any.getType().getKey());",
                "+            if (ignoreResult == null) {",
                "+                ignoreResult = new ProvisioningReport();",
                "+                ignoreResult.setKey(anyKey);",
                "+                ignoreResult.setAnyType(any == null ? null : any.getType().getKey());",
                "-                profile.getResults().add(result);",
                "+                profile.getResults().add(ignoreResult);",
                "             }",
                "-            result.setOperation(ResourceOperation.NONE);",
                "-            result.setStatus(ProvisioningReport.Status.IGNORE);",
                "+            ignoreResult.setOperation(ResourceOperation.NONE);",
                "+            ignoreResult.setStatus(ProvisioningReport.Status.IGNORE);",
                "+            ignoreResult.setMessage(e.getMessage());",
                "@@ -251,3 +252,4 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan",
                "                 case IGNORE:",
                "-                    throw new IllegalStateException(\"More than one match: \" + connObjs);",
                "+                    throw new IgnoreProvisionException(\"More than one match found for \"",
                "+                            + any.getKey() + \": \" + connObjs);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "index 0c5bb6bec1..fb29bd4684 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "@@ -689,3 +689,4 @@ public class DefaultRealmPullResultHandler",
                "                 case IGNORE:",
                "-                    throw new IllegalStateException(\"More than one match \" + keys);",
                "+                        throw new IgnoreProvisionException(\"More than one match found for \"",
                "+                                + processed.getObject().getUid().getUidValue() + \": \" + keys);"
            ],
            "changed_files": [
                "core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/IgnoreProvisionException.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1380": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "2c48533389ee654602effc6deb78ae4587d0c3e1"
                ],
                [
                    "no-tag",
                    "dd09c8a20bc8c4091b6cf635899c8e7fcd49e9f7"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1380",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "689b087b1a6c97f0f3f5a0eb8a06e563eec3ff09",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1533047838,
            "hunks": 2,
            "message": "[SYNCOPE-1335] Generating more meaningful ids for implementations",
            "diff": [
                "diff --git a/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java b/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java",
                "index 01554f3260..cf0a9240b9 100644",
                "--- a/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java",
                "+++ b/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java",
                "@@ -116,3 +116,3 @@ public final class GenerateUpgradeSQL {",
                "-                    String implementationId = \"OrgUnitItemTransformer_\" + itemId;",
                "+                    String implementationId = \"OrgUnitItemTransformer_\" + transformerClassName + \"_\" + itemId;",
                "                     OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\"",
                "@@ -419,3 +419,3 @@ public final class GenerateUpgradeSQL {",
                "-                    String implementationId = \"MappingItemTransformer_\" + itemId;",
                "+                    String implementationId = \"MappingItemTransformer_\" + transformerClassName + \"_\" + itemId;",
                "                     OUT.write(\"INSERT INTO Implementation(id,type,engine,body) VALUES(\""
            ],
            "changed_files": [
                "core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1335": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cf95a35fabffebd73adde14a481508e31b7d29a1"
                ]
            ],
            "tags": [
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1335",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "12330a37dc7311cbfdc9dac47029ace56947e4f1",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536157058,
            "hunks": 2,
            "message": "[SYNCOPE-1361] provides a fix into LoggerLoader",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java b/core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java",
                "index 0a09641670..7a5e2dcdd4 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java",
                "@@ -123,3 +123,4 @@ public class LoggerLoader implements SyncopeLoader {",
                "                             LoggerConfig eventLogConf = ctx.getConfiguration().getLoggerConfig(domainAuditLoggerName);",
                "-                            if (LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName())) {",
                "+                            boolean isRootLogConf = LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName());",
                "+                            if (isRootLogConf) {",
                "                                 eventLogConf = new LoggerConfig(domainAuditLoggerName, null, false);",
                "@@ -128,3 +129,3 @@ public class LoggerLoader implements SyncopeLoader {",
                "                             eventLogConf.setLevel(Level.DEBUG);",
                "-                            if (LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName())) {",
                "+                            if (isRootLogConf) {",
                "                                 ctx.getConfiguration().addLogger(domainAuditLoggerName, eventLogConf);"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1361": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c06920e2e28ab2985763ee1996e746ece8047ae8"
                ],
                [
                    "no-tag",
                    "382a5a05e0676191d46fd5b31fca29471e67c017"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1361",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0162f98ebac0fcc88511602495ddef011bd22f2b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539329255,
            "hunks": 1,
            "message": "[SYNCOPE-1369] Missing support to drop the workflowId column from SyncopeGroup and AnyObject",
            "diff": [
                "diff --git a/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java b/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java",
                "index 37d70620bb..15756f7c37 100644",
                "--- a/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java",
                "+++ b/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java",
                "@@ -419,2 +419,10 @@ public final class GenerateUpgradeSQL {",
                "         OUT.write(\"CREATE VIEW user_search AS SELECT u.id as any_id, u.* FROM SyncopeUser u;\\n\");",
                "+",
                "+        OUT.write(\"DROP VIEW group_search;\\n\");",
                "+        OUT.write(\"ALTER TABLE SyncopeGroup DROP COLUMN workflowId;\\n\");",
                "+        OUT.write(\"CREATE VIEW group_search AS SELECT r.id as any_id, r.* FROM SyncopeGroup r;\\n\");",
                "+",
                "+        OUT.write(\"DROP VIEW anyObject_search;\\n\");",
                "+        OUT.write(\"ALTER TABLE AnyObject DROP COLUMN workflowId;\\n\");",
                "+        OUT.write(\"CREATE VIEW anyObject_search AS SELECT a.id as any_id, a.* FROM AnyObject a;\\n\");",
                "     }"
            ],
            "changed_files": [
                "core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1369": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9612d30ff96778d1027e098ba6db23afb19e8b2c"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1369",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a3aae8591c51459c70c88b52b75d292a8cefeba9",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1542354211,
            "hunks": 6,
            "message": "[SYNCOPE-1392] Small reflection avoidance",
            "diff": [
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "index e09ff638ad..43800e2a6b 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "@@ -22,3 +22,2 @@ import java.lang.annotation.Annotation;",
                " import java.lang.reflect.Field;",
                "-import java.lang.reflect.Method;",
                " import java.util.ArrayList;",
                "@@ -32,3 +31,2 @@ import javax.validation.constraints.Min;",
                " import org.apache.commons.lang3.ArrayUtils;",
                "-import org.apache.commons.lang3.ClassUtils;",
                " import org.apache.commons.lang3.tuple.Pair;",
                "@@ -57,3 +55,2 @@ import org.apache.syncope.core.persistence.api.entity.AnyUtils;",
                " import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;",
                "-import org.apache.syncope.core.persistence.api.entity.Entity;",
                " import org.apache.syncope.core.persistence.api.entity.EntityFactory;",
                "@@ -73,2 +70,4 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "+    protected static final String[] RELATIONSHIP_FIELDS = new String[] { \"realm\", \"userOwner\", \"groupOwner\" };",
                "+",
                "     @Autowired",
                "@@ -216,14 +215,5 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "         // Deal with any fields representing relationships to other entities",
                "-        if (Entity.class.isAssignableFrom(anyField.getType())) {",
                "-            Method relMethod = null;",
                "-            try {",
                "-                relMethod = ClassUtils.getPublicMethod(anyField.getType(), \"getKey\", new Class<?>[0]);",
                "-            } catch (Exception e) {",
                "-                LOG.error(\"Could not find {}#getKey\", anyField.getType(), e);",
                "-            }",
                "-",
                "-            if (relMethod != null && String.class.isAssignableFrom(relMethod.getReturnType())) {",
                "-                computed.setSchema(computed.getSchema() + \"_id\");",
                "-                schema.setType(AttrSchemaType.String);",
                "-            }",
                "+        if (ArrayUtils.contains(RELATIONSHIP_FIELDS, computed.getSchema())) {",
                "+            computed.setSchema(computed.getSchema() + \"_id\");",
                "+            schema.setType(AttrSchemaType.String);",
                "         }",
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "index 58102072ac..02e2535cf7 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "@@ -67,4 +67,2 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "-    protected static final String[] RELATIONSHIP_FIELDS = new String[] { \"realm\", \"userOwner\", \"groupOwner\" };",
                "-",
                "     private Pair<String, Set<String>> getAdminRealmsFilter("
            ],
            "changed_files": [
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1392": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "62102ef4b777e1bc7df6def6c701d8d77a196f8a"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1392",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b0d75aedfb1e1fe5fa42aa3408a269fa4302739e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1532677183,
            "hunks": 2,
            "message": "[SYNCOPE-1346] Ensure PropagationTask is not already in the JPA context before creating new one",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java",
                "index ce1b9cc3ca..6d2edbf830 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java",
                "@@ -236,3 +236,3 @@ public class TaskLogic extends AbstractExecutableLogic<TaskTO> {",
                "             case PROPAGATION:",
                "-                TaskExec propExec = taskExecutor.execute((PropagationTaskTO) binder.getTaskTO(task, taskUtil, false));",
                "+                TaskExec propExec = taskExecutor.execute(binder.<PropagationTaskTO>getTaskTO(task, taskUtil, false));",
                "                 result = binder.getExecTO(propExec);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "index 3c4532119e..178b19d3a6 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java",
                "@@ -368,11 +368,16 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask",
                "     protected TaskExec execute(final PropagationTaskTO taskTO, final PropagationReporter reporter) {",
                "-        PropagationTask task = entityFactory.newEntity(PropagationTask.class);",
                "-        task.setResource(resourceDAO.find(taskTO.getResource()));",
                "-        task.setObjectClassName(taskTO.getObjectClassName());",
                "-        task.setAnyTypeKind(taskTO.getAnyTypeKind());",
                "-        task.setAnyType(taskTO.getAnyType());",
                "-        task.setEntityKey(taskTO.getEntityKey());",
                "-        task.setOperation(taskTO.getOperation());",
                "-        task.setConnObjectKey(taskTO.getConnObjectKey());",
                "-        task.setOldConnObjectKey(taskTO.getOldConnObjectKey());",
                "+        PropagationTask task;",
                "+        if (taskTO.getKey() == null) {",
                "+            task = entityFactory.newEntity(PropagationTask.class);",
                "+            task.setResource(resourceDAO.find(taskTO.getResource()));",
                "+            task.setObjectClassName(taskTO.getObjectClassName());",
                "+            task.setAnyTypeKind(taskTO.getAnyTypeKind());",
                "+            task.setAnyType(taskTO.getAnyType());",
                "+            task.setEntityKey(taskTO.getEntityKey());",
                "+            task.setOperation(taskTO.getOperation());",
                "+            task.setConnObjectKey(taskTO.getConnObjectKey());",
                "+            task.setOldConnObjectKey(taskTO.getOldConnObjectKey());",
                "+        } else {",
                "+            task = taskDAO.find(taskTO.getKey());",
                "+        }",
                "         Set<Attribute> attributes = new HashSet<>();"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1346": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ae058846238567128f1ff4969e5f8709750c35ae"
                ],
                [
                    "no-tag",
                    "110e4bae2831ee1d93891885c84ff5ded74576fc"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1346",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c92c34a9e49f0f883ed718c6aa6cb3673e5d9c5b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1542097731,
            "hunks": 13,
            "message": "[SYNCOPE-1396] Configuration option for TLSClientParameters",
            "diff": [
                "diff --git a/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java b/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java",
                "index 466b266ab8..26bc71b3a5 100644",
                "--- a/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java",
                "+++ b/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java",
                "@@ -34,2 +34,3 @@ import javax.ws.rs.core.Response;",
                " import org.apache.commons.lang3.tuple.Pair;",
                "+import org.apache.cxf.configuration.jsse.TLSClientParameters;",
                " import org.apache.cxf.jaxrs.client.Client;",
                "@@ -40,2 +41,3 @@ import org.apache.cxf.transport.common.gzip.GZIPInInterceptor;",
                " import org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;",
                "+import org.apache.cxf.transport.http.HTTPConduit;",
                " import org.apache.cxf.transport.http.URLConnectionHTTPConduit;",
                "@@ -72,2 +74,4 @@ public class SyncopeClient {",
                "+    private final TLSClientParameters tlsClientParameters;",
                "+",
                "     public SyncopeClient(",
                "@@ -77,3 +81,4 @@ public class SyncopeClient {",
                "             final AuthenticationHandler handler,",
                "-            final boolean useCompression) {",
                "+            final boolean useCompression,",
                "+            final TLSClientParameters tlsClientParameters) {",
                "@@ -85,2 +90,3 @@ public class SyncopeClient {",
                "         this.exceptionMapper = exceptionMapper;",
                "+        this.tlsClientParameters = tlsClientParameters;",
                "         init(handler);",
                "@@ -249,2 +255,6 @@ public class SyncopeClient {",
                "             }",
                "+            if (tlsClientParameters != null) {",
                "+                HTTPConduit httpConduit = (HTTPConduit) config.getConduit();",
                "+                httpConduit.setTlsClientParameters(tlsClientParameters);",
                "+            }",
                "diff --git a/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java b/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java",
                "index 90105d0806..f055f83dfe 100644",
                "--- a/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java",
                "+++ b/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java",
                "@@ -31,2 +31,3 @@ import javax.xml.bind.Marshaller;",
                " import org.apache.commons.lang3.StringUtils;",
                "+import org.apache.cxf.configuration.jsse.TLSClientParameters;",
                " import org.apache.cxf.feature.Feature;",
                "@@ -85,2 +86,4 @@ public class SyncopeClientFactoryBean {",
                "+    private TLSClientParameters tlsClientParameters;",
                "+",
                "     private JAXRSClientFactoryBean restClientFactoryBean;",
                "@@ -228,2 +231,15 @@ public class SyncopeClientFactoryBean {",
                "+    /**",
                "+     * Sets the client TLS configuration.",
                "+     *",
                "+     * @param tlsClientParameters client TLS configuration",
                "+     */",
                "+    public void setTlsClientParameters(final TLSClientParameters tlsClientParameters) {",
                "+        this.tlsClientParameters = tlsClientParameters;",
                "+    }",
                "+",
                "+    public TLSClientParameters getTlsClientParameters() {",
                "+        return tlsClientParameters;",
                "+    }",
                "+",
                "     public JAXRSClientFactoryBean getRestClientFactoryBean() {",
                "@@ -287,3 +303,4 @@ public class SyncopeClientFactoryBean {",
                "                 handler,",
                "-                useCompression);",
                "+                useCompression,",
                "+                tlsClientParameters);",
                "     }",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc",
                "index 4dd6b2b63a..0e9ce1af86 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc",
                "@@ -552,4 +552,6 @@ SyncopeClientFactoryBean clientFactory = new SyncopeClientFactoryBean().",
                " You might also select a specific <<domains,domain>> - other than `Master`, choose to exchange XML payloads - rather",
                "-than JSON (default), or to select ",
                "-https://en.wikipedia.org/wiki/HTTP_compression[HTTP compression^] (more options in the",
                "+than JSON (default), to select ",
                "+https://en.wikipedia.org/wiki/HTTP_compression[HTTP compression^] or to set the",
                "+https://cxf.apache.org/javadoc/latest/org/apache/cxf/configuration/jsse/TLSClientParameters.html[TLS client configuration^]",
                "+(more options in the",
                " http://syncope.apache.org/apidocs/2.1/org/apache/syncope/client/lib/SyncopeClientFactoryBean.html[Javadoc^]):",
                "@@ -558,2 +560,3 @@ http://syncope.apache.org/apidocs/2.1/org/apache/syncope/client/lib/SyncopeClien",
                " ----",
                "+TLSClientParameters tlsClientParameters = ...;",
                " SyncopeClientFactoryBean clientFactory = new SyncopeClientFactoryBean().",
                "@@ -562,3 +565,4 @@ SyncopeClientFactoryBean clientFactory = new SyncopeClientFactoryBean().",
                "               setContentType(SyncopeClientFactoryBean.ContentType.XML).",
                "-              setUseCompression(true);",
                "+              setUseCompression(true).",
                "+              setTlsClientParameters(tlsClientParameters);",
                " ----"
            ],
            "changed_files": [
                "client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java",
                "client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1396": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7e18895fe85809aaee27da5fd617db83aa56150c"
                ],
                [
                    "no-tag",
                    "480a0e78c02757c9d91cffd71cf8b8b9cbcc6a51"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1396",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "afb53952bf56775d1848e7d090aa9f6d03ca5e84",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1532530317,
            "hunks": 4,
            "message": "[SYNCOPE-1343] added support to update plain attributes with empty and/or null values while pulling from resource",
            "diff": [
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java b/common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java",
                "index 02d3d4aca0..c8e7eb6986 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java",
                "@@ -124,3 +124,3 @@ public final class AnyOperations {",
                "         updatedAttrs.values().forEach(attrTO -> {",
                "-            if (attrTO.getValues().isEmpty()) {",
                "+            if (isEmpty(attrTO)) {",
                "                 if (!incremental) {",
                "@@ -239,3 +239,3 @@ public final class AnyOperations {",
                "         result.getPlainAttrs().addAll(updated.getPlainAttrs().stream().",
                "-                filter(attrTO -> !attrTO.getValues().isEmpty() && !NULL_SINGLETON.equals(attrTO.getValues())).",
                "+                filter(attrTO -> !isEmpty(attrTO)).",
                "                 collect(Collectors.toSet()));",
                "@@ -620,2 +620,23 @@ public final class AnyOperations {",
                "     }",
                "+",
                "+    /**",
                "+     * Add PLAIN attribute DELETE patch for those attributes of the input AnyTO without values or containing null value",
                "+     *",
                "+     * @param anyTO",
                "+     * @param result",
                "+     */",
                "+    public static void cleanEmptyAttrs(final AnyTO anyTO, final AnyPatch result) {",
                "+        anyTO.getPlainAttrs().stream()",
                "+                .filter(plainAttrTO -> isEmpty(plainAttrTO))",
                "+                .forEach(plainAttrTO -> {",
                "+                    result.getPlainAttrs().add(new AttrPatch.Builder().",
                "+                            operation(PatchOperation.DELETE).",
                "+                            attrTO(new AttrTO.Builder().schema(plainAttrTO.getSchema()).build()).",
                "+                            build());",
                "+                });",
                "+    }",
                "+",
                "+    private static boolean isEmpty(final AttrTO attrTO) {",
                "+        return attrTO.getValues().isEmpty() || NULL_SINGLETON.equals(attrTO.getValues());",
                "+    }",
                " }",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java",
                "index 26b1156e15..f5905fd8e7 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java",
                "@@ -298,3 +298,6 @@ public class ConnObjectUtils {",
                "         }",
                "-",
                "+        // SYNCOPE-1343, remove null or empty values from the patch plain attributes",
                "+        if (anyPatch != null) {",
                "+            AnyOperations.cleanEmptyAttrs(updated, anyPatch);",
                "+        }",
                "         return anyPatch;"
            ],
            "changed_files": [
                "common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1343": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "2672157859e319a148971f03fb9cdc72851bef9c"
                ],
                [
                    "no-tag",
                    "0bb9d9d5645d14da525003a88439c55ee32d0860"
                ]
            ],
            "tags": [
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1343",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8705dac32415147afd704787fe047b4fdf93fa53",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539245721,
            "hunks": 2,
            "message": "[SYNCOPE-1382] improves string check conditions",
            "diff": [
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "index 3ce2702c5c..c6ebca16dc 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java",
                "@@ -717,3 +717,3 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "         String column = (cond instanceof AnyCond) ? cond.getSchema() : svs.fieldName(schema.getType());",
                "-        if (ignoreCase) {",
                "+        if ((schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum) && ignoreCase) {",
                "             column = \"LOWER (\" + column + \")\";",
                "@@ -768,3 +768,4 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {",
                "                 }",
                "-                if (ignoreCase) {",
                "+                if ((schema.getType() == AttrSchemaType.String ",
                "+                        || schema.getType() == AttrSchemaType.Enum) && ignoreCase) {",
                "                     query.append(\"LOWER(?\").append(setParameter(parameters, attrValue.getValue())).append(')');"
            ],
            "changed_files": [
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1382": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4242ae52944ae764b1613b83a943c017c95879da"
                ],
                [
                    "no-tag",
                    "3c3c00877e8249f52f64aa3ba4b71c9635b27717"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1382",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cabb62b78ca8f96c67d11d72af8021990350e781",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537446077,
            "hunks": 1,
            "message": "[SYNCOPE-1374] Removing unnecessary @Transactional",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java",
                "index 9967549142..9f7aff4846 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java",
                "@@ -36,5 +36,3 @@ import org.springframework.security.core.context.SecurityContextHolder;",
                " import org.springframework.security.core.userdetails.User;",
                "-import org.springframework.transaction.annotation.Transactional;",
                "-@Transactional(rollbackFor = { Throwable.class })",
                " public class DefaultPropagationTaskCallable implements PropagationTaskCallable {"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1374": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "43e07b3537489a60eba067a7f4deb1fc317c61bd"
                ],
                [
                    "no-tag",
                    "7c94b93a6755f06ece72ac052f156ab7e1d1c46d"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1374",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fed7aaff7b38dbba1b788755356c6e3dafc5b152",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1535899265,
            "hunks": 6,
            "message": "[SYNCOPE-1220] Adjusting doc text",
            "diff": [
                "diff --git a/src/main/asciidoc/getting-started/obtain.adoc b/src/main/asciidoc/getting-started/obtain.adoc",
                "index fa6e16502f..d23e06b988 100644",
                "--- a/src/main/asciidoc/getting-started/obtain.adoc",
                "+++ b/src/main/asciidoc/getting-started/obtain.adoc",
                "@@ -937,4 +937,5 @@ image::netbeans12.png[netbeans12]",
                "-Once a connection to the given Apache Syncope deployment is established, a panel showing Mail and Report templates will",
                "-appear on the left; by double-clicking on each folder, the list of available templates is shown:",
                "+Once a connection to the given Apache Syncope deployment is established, a panel showing Mail Templates, Report XSLTs",
                "+and Groovy implementations will appear on the left; by double-clicking on each folder, the list of available items",
                "+is shown:",
                "@@ -942,3 +943,3 @@ image::netbeans08.png[netbeans08]",
                "-To refresh the list of available templates, or to update the connection details, right-click on the",
                "+To refresh the list of available items, or to update the connection details, right-click on the",
                " `Apache Syncope` root node:",
                "@@ -947,3 +948,4 @@ image::netbeans09.png[netbeans09]",
                "-To create a new template, right-click on the `Mail Templates`, `Report XSLTs` or `Groovy Implementations` folder and then click on `New`:",
                "+To create a new item, right-click on the `Mail Templates`, `Report XSLTs` or `Groovy Implementations` folder and then",
                "+click on `New` label:",
                "@@ -953,3 +955,3 @@ image::netbeans10.png[netbeans10]",
                " ====",
                "-Before creating or editing a template, a modal window will be shown to select the edit format:",
                "+Before creating or editing a mail or report template, a modal window will be shown to select the edit format:",
                "@@ -958,6 +960,6 @@ image::netbeans13.png[netbeans13]",
                "-To edit a template, double-click on the template name and an editor will appear. On save, the template content will be",
                "+To edit am item, double-click on the item name and an editor will appear. On save, the item content will be",
                " uploaded to the configured Apache Syncope deployment.",
                "-To delete an existing template, right-click on the template and then click on `Delete`:",
                "+To delete an existing item, right-click on the item name and then click on `Delete`:"
            ],
            "changed_files": [
                "src/main/asciidoc/getting-started/obtain.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1220": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f3974f89556f5a782f853cfb87dc05a03bb19b61"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1220",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f6d4d5d00f758ad49eb45771856d59a8cf211c1c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540392084,
            "hunks": 1,
            "message": "[SYNCOPE-1389] provides the fix",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java",
                "index 0fee2ccf6e..1e5ab436d3 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java",
                "@@ -359,3 +359,5 @@ public class PropagationManagerImpl implements PropagationManager {",
                "-                propByRes.add(ResourceOperation.UPDATE, schema.getProvision().getResource().getKey());",
                "+                if (!propByRes.contains(ResourceOperation.CREATE, schema.getProvision().getResource().getKey())) {",
                "+                    propByRes.add(ResourceOperation.UPDATE, schema.getProvision().getResource().getKey());",
                "+                }",
                "             } else {"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1389": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6d285b20104369f1afcb85f162386b1eae827038"
                ],
                [
                    "no-tag",
                    "e559417870aa7fa1330147b4d238538a4350f30b"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1389",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0895017a2447e915eb17c822cad865bab368c2ed",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1532590008,
            "hunks": 2,
            "message": "[SYNCOPE-1343] Reflow",
            "diff": [
                "diff --git a/common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java b/common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java",
                "index c8e7eb6986..966b1f3a8d 100644",
                "--- a/common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java",
                "+++ b/common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java",
                "@@ -624,14 +624,12 @@ public final class AnyOperations {",
                "      *",
                "-     * @param anyTO",
                "-     * @param result",
                "+     * @param anyTO User, Group or Any Object to look for attributes with no value",
                "+     * @param patch patch to enrich with DELETE statements",
                "      */",
                "-    public static void cleanEmptyAttrs(final AnyTO anyTO, final AnyPatch result) {",
                "-        anyTO.getPlainAttrs().stream()",
                "-                .filter(plainAttrTO -> isEmpty(plainAttrTO))",
                "-                .forEach(plainAttrTO -> {",
                "-                    result.getPlainAttrs().add(new AttrPatch.Builder().",
                "-                            operation(PatchOperation.DELETE).",
                "-                            attrTO(new AttrTO.Builder().schema(plainAttrTO.getSchema()).build()).",
                "-                            build());",
                "-                });",
                "+    public static void cleanEmptyAttrs(final AnyTO anyTO, final AnyPatch patch) {",
                "+        patch.getPlainAttrs().addAll(anyTO.getPlainAttrs().stream().",
                "+                filter(plainAttrTO -> isEmpty(plainAttrTO)).",
                "+                map(plainAttrTO -> new AttrPatch.Builder().",
                "+                operation(PatchOperation.DELETE).",
                "+                attrTO(new AttrTO.Builder().schema(plainAttrTO.getSchema()).build()).",
                "+                build()).collect(Collectors.toSet()));",
                "     }"
            ],
            "changed_files": [
                "common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1343": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cfb7b31daf057fd42967b3be42e11cacad5a6b70"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1343",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "99dfafb846f28ff7bc3e86e7cacd70e2aea0600d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1533822957,
            "hunks": 20,
            "message": "[SYNCOPE-1350] Docs",
            "diff": [
                "diff --git a/src/main/asciidoc/getting-started/movingForward.adoc b/src/main/asciidoc/getting-started/movingForward.adoc",
                "index 36819a86dd..1834986f48 100644",
                "--- a/src/main/asciidoc/getting-started/movingForward.adoc",
                "+++ b/src/main/asciidoc/getting-started/movingForward.adoc",
                "@@ -39,6 +39,6 @@ The following values must be changed from the defaults in the `security.properti",
                " ** the value for \"*adminPasswordAlgorithm*\" is \"AES\" or",
                "-** the configuration parameter \"password.cipher.algorithm\" is changed to \"AES\" (See section 4.6.12 \"Configuration Parameters\" of",
                "+** the configuration parameter \"password.cipher.algorithm\" is changed to \"AES\" (See section 4.6.14 \"Configuration Parameters\" of",
                " the Reference Guide for more information).",
                " * *anonymousKey* - The key value to use for anonymous requests.",
                "-* *jwsKey* - The symmetric signing key used to sign access tokens (Syncope 2.0.3 onwards only). See section 4.4.1 \"REST Authentication and ",
                "+* *jwsKey* - The symmetric signing key used to sign access tokens. See section 4.4.1 \"REST Authentication and ",
                " Authorization\" of the Reference Guide for more information.",
                "@@ -46,4 +46,3 @@ Authorization\" of the Reference Guide for more information.",
                " Note that if you installed Syncope using either the installer or the maven archetype methods, then you will have already",
                "-supplied custom values for \"*secretKey*\" and \"*anonymousKey*\". From Syncope 2.0.4 onwards, both installation methods will also",
                "+supplied custom values for \"*secretKey*\" and \"*anonymousKey*\". Both installation methods will also",
                " query for \"*jwsKey*\", and the installer method will prompt for the \"*adminPassword*\" as well. ",
                "-",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc",
                "index 6a13c6fe6a..c5c1886598 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc",
                "@@ -34,3 +34,3 @@ where `protocol`, `host` and `port` reflect your Java EE container installation.",
                " A complete REST reference generated from https://en.wikipedia.org/wiki/Web_Application_Description_Language[WADL^] is",
                "-http://syncope.apache.org/rest/2.0/index.html[published^] as well as made available with each deployment at",
                "+http://syncope.apache.org/rest/2.1/index.html[published^] as well as made available with each deployment at",
                "@@ -168,6 +168,3 @@ when communicating with <<external-resource-details,External Resources>> with no",
                "-Some REST endpoints - typically for creating, updating or deleting Users, Groups or Any Objects - return the",
                "-entity in the response payload by default. +",
                "-If this is not required, the `Prefer` request header can be set to `return-no-content` (`return-content` will instead",
                "-keep the default behavior).",
                "+Some REST endpoints allow the clients to request certain behavior; this is done via the `Prefer` header.",
                "@@ -176,4 +173,15 @@ to the effective preference applied.",
                "+====== return-content / return-no-content",
                "+ ",
                "+REST endpoints for creating, updating or deleting Users, Groups or Any Objects return the entity in the response payload",
                "+by default. +",
                "+If this is not required, the `Prefer` request header can be set to `return-no-content` (`return-content` will instead",
                "+keep the default behavior).",
                "+",
                " [TIP]",
                "-Use `Prefer` in scenarios where it is important to avoid unnecessary data in the response payload.",
                "+Use `Prefer: return-no-content` in scenarios where it is important to avoid unnecessary data in the response payload.",
                "+",
                "+====== respond-async",
                "+",
                "+The <<batch>> endpoint can be requested for <<asynchronous-batch-processing,asynchronous processing>>.",
                "@@ -203,38 +211,169 @@ the <<privileges,privileges>> owned by the requesting user.",
                "-==== Bulk Operations",
                "-",
                "-Some REST endpoints feature the _bulk mode_, e.g. the capability to perform a given operation onto several items at the",
                "-same time.",
                "+==== Batch",
                "-The table below shows the bulk operations available.",
                "+Batch requests allow grouping multiple operations into a single HTTP request payload. +",
                "+A batch request is represented as a https://tools.ietf.org/html/rfc2046[Multipart MIME v1.0 message^], a standard format",
                "+allowing the representation of multiple parts, each of which may have a different content type (currently",
                "+JSON, YAML or XML), within a single request.",
                "-[cols=\"1,5a\"]",
                "-|===",
                "+Batch requests are handled by the `/batch` REST endpoint: via HTTP `POST` method to submit requests, via HTTP `GET`",
                "+method to fetch responses <<asynchronous-batch-processing,asynchronously>>.",
                "-|Any Objects",
                "-| * `DELETE` - remove several any objects at once",
                "-",
                "-|Groups",
                "-| * `PROVISION` - provision all members of the given group onto all the associated external resources",
                "- * `DEPROVISION` - deprovision all members of the given group from all the associated external resources",
                "- * `DELETE` - remove several groups at once",
                "-",
                "-|Users",
                "-| * `SUSPEND` - suspend several users at once",
                "-* `REACTIVATE` - set several users at once back to the active state",
                "-* `MUSTCHANGEPASSWORD` - force several users at once to change their passwords",
                "-* `DELETE` - remove several users at once",
                "-",
                "-| Tasks",
                "-| * `DRYRUN` - executes several tasks at once, with the <<dryrun>> option set",
                "-* `EXECUTE` - executes several tasks at once",
                "-* `DELETE` - remove several tasks at once",
                "-",
                "-| External Resources",
                "-| * `DEPROVISION` - delete several users, groups or any objects at once from an external resource but keep in the",
                "-internal storage and leave the external resource associated",
                "- * `UNLINK` - remove the association between several users, groups or any objects at once and an external resource,",
                "-without performing any deprovisioning operation",
                "- * `UNASSIGN` - unlink and deprovision several users, groups or any objects at once from an external resource",
                "-|===",
                "+[NOTE]",
                "+The specification and implementation of batch processing in Apache Syncope is inspired by the standards defined",
                "+by http://docs.oasis-open.org/odata/odata/v4.0/os/part1-protocol/odata-v4.0-os-part1-protocol.html#_Toc372793748[OData 4.0^]",
                "+",
                "+===== Batch requests",
                "+",
                "+The batch request must contain a `Content-Type` header specifying a content type of `multipart/mixed` and a boundary",
                "+specification as defined in https://tools.ietf.org/html/rfc2046[RFC2046^].",
                "+",
                "+The body of a batch request is made up of a series of individual requests, each represented as a distinct MIME part",
                "+(i.e. separated by the boundary defined in the `Content-Type` header).",
                "+",
                "+Core will process the requests within a batch request sequentially.",
                "+",
                "+An individual request must include a `Content-Type` header with value `application/http` and a",
                "+`Content-Transfer-Encoding` header with value `binary`.",
                "+",
                "+.Sample batch request",
                "+====",
                "+----",
                "+--batch_61bfef8d-0a00-41aa-b775-7b6efff37652 // <1>",
                "+Content-Type: application/http",
                "+Content-Transfer-Encoding: binary",
                "+^M // <2>",
                "+POST /users HTTP/1.1 // <3>",
                "+Accept: application/json",
                "+Content-Length: 1157",
                "+Content-Type: application/json",
                "+^M",
                "+{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"key\":null,\"type\":\"USER\",\"realm\":\"/\"}",
                "+--batch_61bfef8d-0a00-41aa-b775-7b6efff37652",
                "+Content-Type: application/http",
                "+Content-Transfer-Encoding: binary",
                "+^M",
                "+POST /groups HTTP/1.1 // <4>",
                "+Accept: application/xml",
                "+Content-Length: 628",
                "+Content-Type: application/xml",
                "+^M",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><syncope21:group xmlns:syncope21=\"http://syncope.apache.org/2.1\">",
                "+</syncope21:group>",
                "+--batch_61bfef8d-0a00-41aa-b775-7b6efff37652",
                "+Content-Type: application/http",
                "+Content-Transfer-Encoding: binary",
                "+^M",
                "+PATCH /users/24eb15aebatch@syncope.apache.org HTTP/1.1 // <5>",
                "+Accept: application/json",
                "+Content-Length: 362",
                "+Content-Type: application/json",
                "+Prefer: return-no-content",
                "+^M",
                "+{\"@class\":\"org.apache.syncope.common.lib.patch.UserPatch\",\"key\":\"24eb15aebatch@syncope.apache.org\"}",
                "+--batch_61bfef8d-0a00-41aa-b775-7b6efff37652",
                "+Content-Type: application/http",
                "+Content-Transfer-Encoding: binary",
                "+^M",
                "+DELETE /groups/287ede7c-98eb-44e8-979d-8777fa077e12 HTTP/1.1 // <6>",
                "+--batch_61bfef8d-0a00-41aa-b775-7b6efff37652--",
                "+----",
                "+<1> message boundary",
                "+<2> represents CR LF",
                "+<3> user create, with JSON payload (shortened)",
                "+<4> group create, with XML payload (shortened)",
                "+<5> user update, with JSON payload (shortened)",
                "+<6> group delete",
                "+====",
                "+",
                "+===== Batch responses",
                "+",
                "+Requests within a batch are evaluated according to the same semantics used when the request appears outside the context",
                "+of a batch.",
                "+",
                "+The order of individual requests in a batch request is significant.",
                "+",
                "+If the set of request headers of a batch request are valid (the `Content-Type` is set to `multipart/mixed`, etc.)",
                "+Core will return a `200 OK` HTTP response code to indicate that the request was accepted for processing, and the",
                "+related execution results.",
                "+",
                "+If Core receives a batch request with an invalid set of headers it will return a `400 Bad Request` code and perform no",
                "+further processing of the request.",
                "+",
                "+A response to a batch request must contain a `Content-Type` header with value `multipart/mixed`.",
                "+",
                "+Structurally, a batch response body must match one-to-one with the corresponding batch request body, such that the same ",
                "+multipart MIME message structure defined for requests is used for responses",
                "+",
                "+.Sample batch response",
                "+====",
                "+----",
                "+--batch_61bfef8d-0a00-41aa-b775-7b6efff37652 // <1>",
                "+Content-Type: application/http",
                "+Content-Transfer-Encoding: binary",
                "+^M // <2>",
                "+HTTP/1.1 201 Created // <3>",
                "+Content-Type: application/json",
                "+Date: Thu, 09 Aug 2018 09:55:46 GMT",
                "+ETag: \"1533808545975\"",
                "+Location: http://localhost:9080/syncope/rest/users/d399ba84-12e3-43d0-99ba-8412e303d083",
                "+X-Syncope-Domain: Master",
                "+X-Syncope-Key: d399ba84-12e3-43d0-99ba-8412e303d083",
                "+^M",
                "+{\"entity\":{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\"}",
                "+--batch_61bfef8d-0a00-41aa-b775-7b6efff37652",
                "+Content-Type: application/http",
                "+Content-Transfer-Encoding: binary",
                "+^M",
                "+HTTP/1.1 201 Created // <4>",
                "+Content-Type: application/xml",
                "+Date: Thu, 09 Aug 2018 09:55:46 GMT",
                "+ETag: \"1533808546342\"",
                "+Location: http://localhost:9080/syncope/rest/groups/843b2fc3-b8a8-4a8b-bb2f-c3b8a87a8b2e",
                "+X-Syncope-Domain: Master",
                "+X-Syncope-Key: 843b2fc3-b8a8-4a8b-bb2f-c3b8a87a8b2e",
                "+^M",
                "+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>",
                "+<syncope21:provisioningResult xmlns:syncope21=\"http://syncope.apache.org/2.1\"></syncope21:provisioningResult>",
                "+--batch_61bfef8d-0a00-41aa-b775-7b6efff37652",
                "+Content-Type: application/http",
                "+Content-Transfer-Encoding: binary",
                "+^M",
                "+HTTP/1.1 204 No Content // <5>",
                "+Content-Length: 0",
                "+Date: Thu, 09 Aug 2018 09:55:47 GMT",
                "+Preference-Applied: return-no-content",
                "+X-Syncope-Domain: Master",
                "+^M",
                "+--batch_61bfef8d-0a00-41aa-b775-7b6efff37652",
                "+Content-Type: application/http",
                "+Content-Transfer-Encoding: binary",
                "+^M",
                "+HTTP/1.1 200 OK // <6>",
                "+Content-Type: application/json",
                "+Date: Thu, 09 Aug 2018 09:55:47 GMT",
                "+X-Syncope-Domain: Master",
                "+^M",
                "+{\"entity\":{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\"}",
                "+--batch_61bfef8d-0a00-41aa-b775-7b6efff37652--",
                "+----",
                "+<1> message boundary (same as request)",
                "+<2> represents CR LF",
                "+<3> user create response, with JSON payload (shortened)",
                "+<4> group create respose, with XML payload (shortened)",
                "+<5> user update, no content as `Prefer: return-no-content` <<return-content-return-no-content,was specified>>",
                "+<6> group delete response, with JSON payload (shortened)",
                "+====",
                "+",
                "+===== Asynchronous Batch Processing",
                "+",
                "+Batch requests may be executed asynchronously by <<respond-async,including>> the `respond-async` preference in the",
                "+`Prefer` header.",
                "+",
                "+Core will return an empty response, with status `202 Accepted`.",
                "+",
                "+Clients can poll the `/batch` endpoint in `GET` by passing the same boundary used for request: if `202 Accepted` is",
                "+returned, then the request is still under processing; otherwise, `200 OK` will be returned, along with the full batch",
                "+response. +",
                "+Once retrieved, the batch response is not available any more from the `/batch` endpoint any more.",
                "@@ -415,3 +554,3 @@ than JSON (default), or to select",
                " https://en.wikipedia.org/wiki/HTTP_compression[HTTP compression^] (more options in the",
                "-http://syncope.apache.org/apidocs/2.0/org/apache/syncope/client/lib/SyncopeClientFactoryBean.html[Javadoc^]):",
                "+http://syncope.apache.org/apidocs/2.1/org/apache/syncope/client/lib/SyncopeClientFactoryBean.html[Javadoc^]):",
                "@@ -446,3 +585,3 @@ SyncopeClient client = new SyncopeClientFactoryBean().",
                " Select one of the",
                "-http://syncope.apache.org/apidocs/2.0/org/apache/syncope/common/rest/api/service/package-summary.html[RESTful services^]",
                "+http://syncope.apache.org/apidocs/2.1/org/apache/syncope/common/rest/api/service/package-summary.html[RESTful services^]",
                " and invoke one of the available methods:",
                "@@ -461,6 +600,6 @@ loggerService.update(LoggerType.LOG, loggerTO);",
                " More RESTful services could be available besides the ",
                "-http://syncope.apache.org/apidocs/2.0/org/apache/syncope/common/rest/api/service/package-summary.html[default set^],",
                "+http://syncope.apache.org/apidocs/2.1/org/apache/syncope/common/rest/api/service/package-summary.html[default set^],",
                " as there might be <<extensions,extensions>> installed in the given deployment; the",
                " <<apache-camel-provisioning-manager>> provides the",
                "-http://syncope.apache.org/apidocs/2.0/org/apache/syncope/common/rest/api/service/CamelRouteService.html[CamelRouteService^],",
                "+http://syncope.apache.org/apidocs/2.1/org/apache/syncope/common/rest/api/service/CamelRouteService.html[CamelRouteService^],",
                " for instance.",
                "@@ -469,3 +608,3 @@ for instance.",
                " Advanced REST features are also available from `SyncopeClient` instances: check",
                "-http://syncope.apache.org/apidocs/2.0/org/apache/syncope/client/lib/SyncopeClient.html[the javadoc^]",
                "+http://syncope.apache.org/apidocs/2.1/org/apache/syncope/client/lib/SyncopeClient.html[the javadoc^]",
                " for more information.",
                "@@ -475,3 +614,3 @@ for more information.",
                " All search operations return",
                "-http://syncope.apache.org/apidocs/2.0/org/apache/syncope/common/lib/to/PagedResult.html[paged result handlers^]",
                "+http://syncope.apache.org/apidocs/2.1/org/apache/syncope/common/lib/to/PagedResult.html[paged result handlers^]",
                " which can be exploited both for getting the actual results and for extrapolating pagination coordinates.",
                "@@ -528,6 +667,5 @@ where each page contains 150 items",
                " ----",
                "-UserService userService = client.getService(UserService.class);",
                "+BatchRequest batchRequest = client.batch(); // <1>",
                "-BulkAction bulkAction = new BulkAction();",
                "-bulkAction.setType(BulkAction.Type.DELETE);",
                "+UserService batchUserService = batchRequest.getService(UserService.class);",
                "@@ -535,20 +673,20 @@ final int pageSize = 100;",
                " final int count = userService.search(",
                "-        new AnyQuery.Builder().page(0).size(0).build()).getTotalCount(); // <1>",
                "+        new AnyQuery.Builder().page(0).size(0).build()).getTotalCount(); // <2>",
                " for (int page = 1; page <= (count / pageSize) + 1; page++) {",
                "     for (UserTO user : userService.search(",
                "-            new AnyQuery.Builder().page(page).size(pageSize).build()).getResult()) {  // <2>",
                "+            new AnyQuery.Builder().page(page).size(pageSize).build()).getResult()) {  // <3>  ",
                "-        bulkAction.getTargets().add(user.getKey()); // <3>",
                "-    }",
                "-}",
                "+        batchUserService.delete(user.getKey()); // <4>",
                "+    }       ",
                "+}       ",
                "-BulkActionResult bulkResult = userService.bulk(bulkAction).",
                "-        readEntity(BulkActionResult.class); // <4>",
                "-Map<String, BulkActionResult.Status> results = bulkResult.getResults(); // <5>",
                "+BatchResponse batchResponse = batchRequest.commit();  // <5>  ",
                "+List<BatchResponseItem> batchResponseItems = batchResponse.getItems(); // <6>",
                " ----",
                "-<1> get the total number of users available in the given deployment (and <<domains,domain>>)",
                "-<2> loop through all users available, using paginated search",
                "-<3> add each user to the bulk action",
                "-<4> execute the `DELETE` bulk action",
                "-<5> examine the bulk action results",
                "+<1> begin the batch request",
                "+<2> get the total number of users available in the given deployment (and <<domains,domain>>)",
                "+<3> loop through all users available, using paginated search",
                "+<4> add each user's deletion to the batch request",
                "+<5> send the batch request for processing",
                "+<6> examine the batch results",
                " ====",
                "@@ -563,3 +701,3 @@ Map<String, Set<String>> realm2entitlements = self.getLeft(); // <2>",
                " ----",
                "-<1> http://syncope.apache.org/apidocs/2.0/org/apache/syncope/common/lib/to/UserTO.html[UserTO^] of the requesting user",
                "+<1> http://syncope.apache.org/apidocs/2.1/org/apache/syncope/common/lib/to/UserTO.html[UserTO^] of the requesting user",
                " <2> for each <<realms,realm>>, the owned <<entitlements,entitlements>>"
            ],
            "changed_files": [
                "src/main/asciidoc/getting-started/movingForward.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1350": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8b8e9336baa5470a457c90e158b8ec9a1402525d"
                ]
            ],
            "tags": [
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1350",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2791f74fceabc047f08436723403afe2be1e413a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538749351,
            "hunks": 7,
            "message": "[SYNCOPE-1376] Use absolute path but no protocol, host or port",
            "diff": [
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java",
                "index c3134b6637..69adcbb068 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java",
                "@@ -21,2 +21,3 @@ package org.apache.syncope.core.rest.cxf;",
                " import io.swagger.v3.jaxrs2.Reader;",
                "+import io.swagger.v3.oas.integration.api.OpenAPIConfiguration;",
                " import io.swagger.v3.oas.models.OpenAPI;",
                "@@ -32,2 +33,3 @@ import io.swagger.v3.oas.models.responses.ApiResponse;",
                " import io.swagger.v3.oas.models.responses.ApiResponses;",
                "+import io.swagger.v3.oas.models.servers.Server;",
                " import io.swagger.v3.oas.models.tags.Tag;",
                "@@ -43,2 +45,3 @@ import org.apache.commons.lang3.StringUtils;",
                " import org.apache.commons.lang3.tuple.Pair;",
                "+import org.apache.cxf.jaxrs.ext.MessageContext;",
                " import org.apache.cxf.jaxrs.model.ClassResourceInfo;",
                "@@ -47,2 +50,3 @@ import org.apache.cxf.jaxrs.model.doc.JavaDocProvider;",
                " import org.apache.cxf.jaxrs.openapi.OpenApiCustomizer;",
                "+import org.apache.cxf.jaxrs.utils.JAXRSUtils;",
                " import org.apache.syncope.common.lib.SyncopeConstants;",
                "@@ -91,2 +95,15 @@ public class SyncopeOpenApiCustomizer extends OpenApiCustomizer {",
                "+    @Override",
                "+    public OpenAPIConfiguration customize(final OpenAPIConfiguration configuration) {",
                "+        super.customize(configuration);",
                "+",
                "+        MessageContext ctx = JAXRSUtils.createContextValue(",
                "+                JAXRSUtils.getCurrentMessage(), null, MessageContext.class);",
                "+",
                "+        String url = StringUtils.substringBeforeLast(ctx.getUriInfo().getRequestUri().getRawPath(), \"/\");",
                "+        configuration.getOpenAPI().setServers(Collections.singletonList(new Server().url(url)));",
                "+",
                "+        return configuration;",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/core/rest-cxf/src/main/resources/restCXFContext.xml b/core/rest-cxf/src/main/resources/restCXFContext.xml",
                "index b68b33f109..b611a9bc4a 100644",
                "--- a/core/rest-cxf/src/main/resources/restCXFContext.xml",
                "+++ b/core/rest-cxf/src/main/resources/restCXFContext.xml",
                "@@ -117,3 +117,3 @@ under the License.",
                "   <bean id=\"openApiCustomizer\" class=\"org.apache.syncope.core.rest.cxf.SyncopeOpenApiCustomizer\">",
                "-    <property name=\"dynamicBasePath\" value=\"true\"/>",
                "+    <property name=\"dynamicBasePath\" value=\"false\"/>",
                "     <property name=\"replaceTags\" value=\"false\"/>",
                "diff --git a/fit/core-reference/src/main/resources/jboss/restCXFContext.xml b/fit/core-reference/src/main/resources/jboss/restCXFContext.xml",
                "index 7bb4b94a8a..044f926072 100644",
                "--- a/fit/core-reference/src/main/resources/jboss/restCXFContext.xml",
                "+++ b/fit/core-reference/src/main/resources/jboss/restCXFContext.xml",
                "@@ -124,3 +124,3 @@ under the License.",
                "   <bean id=\"openApiCustomizer\" class=\"org.apache.syncope.core.rest.cxf.SyncopeOpenApiCustomizer\">",
                "-    <property name=\"dynamicBasePath\" value=\"true\"/>",
                "+    <property name=\"dynamicBasePath\" value=\"false\"/>",
                "     <property name=\"replaceTags\" value=\"false\"/>"
            ],
            "changed_files": [
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java",
                "core/rest-cxf/src/main/resources/restCXFContext.xml",
                "fit/core-reference/src/main/resources/jboss/restCXFContext.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1376": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1310349e36d04724d2f1c5d1890133ad41424b91"
                ],
                [
                    "no-tag",
                    "887349382d460e1fb3096650e5a56317cdd82c1e"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1376",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "77829bfb0f4b1d94a01345914eefd37636a47f00",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541159492,
            "hunks": 92,
            "message": "Reverting back to 2.1.2-SNAPSHOT to create again tag 2.1.2",
            "diff": [
                "diff --git a/archetype/pom.xml b/archetype/pom.xml",
                "index f01ac8fd99..d0bbd783c3 100644",
                "--- a/archetype/pom.xml",
                "+++ b/archetype/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/cli/pom.xml b/client/cli/pom.xml",
                "index 96fadae751..1c32c849b2 100644",
                "--- a/client/cli/pom.xml",
                "+++ b/client/cli/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/console/pom.xml b/client/console/pom.xml",
                "index 5374376c2f..1adb7f4568 100644",
                "--- a/client/console/pom.xml",
                "+++ b/client/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/enduser/pom.xml b/client/enduser/pom.xml",
                "index b92935df43..7b6e97176f 100644",
                "--- a/client/enduser/pom.xml",
                "+++ b/client/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/lib/pom.xml b/client/lib/pom.xml",
                "index 27c802442a..737b9204fe 100644",
                "--- a/client/lib/pom.xml",
                "+++ b/client/lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-client</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/client/pom.xml b/client/pom.xml",
                "index 330b96ad09..5f1748d1ed 100644",
                "--- a/client/pom.xml",
                "+++ b/client/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/common/lib/pom.xml b/common/lib/pom.xml",
                "index b808db4d05..978d7905c9 100644",
                "--- a/common/lib/pom.xml",
                "+++ b/common/lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-common</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/common/pom.xml b/common/pom.xml",
                "index 8d1cb9074a..0735dfae6f 100644",
                "--- a/common/pom.xml",
                "+++ b/common/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/common/rest-api/pom.xml b/common/rest-api/pom.xml",
                "index 9fca44b47a..d23b6bbb30 100644",
                "--- a/common/rest-api/pom.xml",
                "+++ b/common/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-common</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/logic/pom.xml b/core/logic/pom.xml",
                "index 40b7b29e58..cb8177099c 100644",
                "--- a/core/logic/pom.xml",
                "+++ b/core/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/persistence-api/pom.xml b/core/persistence-api/pom.xml",
                "index 9ae5a8ee7c..e70606023c 100644",
                "--- a/core/persistence-api/pom.xml",
                "+++ b/core/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/persistence-jpa/pom.xml b/core/persistence-jpa/pom.xml",
                "index 6ce92f83c9..aafb24710b 100644",
                "--- a/core/persistence-jpa/pom.xml",
                "+++ b/core/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/pom.xml b/core/pom.xml",
                "index 0c430b4e06..39f6df9fc3 100644",
                "--- a/core/pom.xml",
                "+++ b/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/provisioning-api/pom.xml b/core/provisioning-api/pom.xml",
                "index 44c469b119..9b757dae83 100644",
                "--- a/core/provisioning-api/pom.xml",
                "+++ b/core/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/provisioning-java/pom.xml b/core/provisioning-java/pom.xml",
                "index 9ce59fe652..e5428a1416 100644",
                "--- a/core/provisioning-java/pom.xml",
                "+++ b/core/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/rest-cxf/pom.xml b/core/rest-cxf/pom.xml",
                "index b52b4252ae..2aecc12559 100644",
                "--- a/core/rest-cxf/pom.xml",
                "+++ b/core/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/spring/pom.xml b/core/spring/pom.xml",
                "index dd01d4860c..4c59003493 100644",
                "--- a/core/spring/pom.xml",
                "+++ b/core/spring/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/upgrade/pom.xml b/core/upgrade/pom.xml",
                "index df780df46f..35267d336e 100644",
                "--- a/core/upgrade/pom.xml",
                "+++ b/core/upgrade/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/workflow-api/pom.xml b/core/workflow-api/pom.xml",
                "index 6f5cc291ab..30d4f0ab33 100644",
                "--- a/core/workflow-api/pom.xml",
                "+++ b/core/workflow-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/core/workflow-java/pom.xml b/core/workflow-java/pom.xml",
                "index fbe4b02236..a0f4587716 100644",
                "--- a/core/workflow-java/pom.xml",
                "+++ b/core/workflow-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/console/pom.xml b/deb/console/pom.xml",
                "index 3d76fc2ce8..5ffdcd24b6 100644",
                "--- a/deb/console/pom.xml",
                "+++ b/deb/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/core/pom.xml b/deb/core/pom.xml",
                "index 9c0f0afbac..47341d43f4 100644",
                "--- a/deb/core/pom.xml",
                "+++ b/deb/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/enduser/pom.xml b/deb/enduser/pom.xml",
                "index 21903210c2..ba1b13070e 100644",
                "--- a/deb/enduser/pom.xml",
                "+++ b/deb/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-deb</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/deb/pom.xml b/deb/pom.xml",
                "index 8c82d46628..1e97bba60e 100644",
                "--- a/deb/pom.xml",
                "+++ b/deb/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/docker/console/pom.xml b/docker/console/pom.xml",
                "index 327f359ea3..a7b630c78c 100644",
                "--- a/docker/console/pom.xml",
                "+++ b/docker/console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-docker</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/docker/core/pom.xml b/docker/core/pom.xml",
                "index c355b35659..0354d6975f 100644",
                "--- a/docker/core/pom.xml",
                "+++ b/docker/core/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-docker</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/docker/enduser/pom.xml b/docker/enduser/pom.xml",
                "index 55f25ae30d..cd64407b39 100644",
                "--- a/docker/enduser/pom.xml",
                "+++ b/docker/enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-docker</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/docker/pom.xml b/docker/pom.xml",
                "index 875483e4ad..6329281097 100644",
                "--- a/docker/pom.xml",
                "+++ b/docker/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/client-console/pom.xml b/ext/camel/client-console/pom.xml",
                "index c1e918c444..f55ec16bf2 100644",
                "--- a/ext/camel/client-console/pom.xml",
                "+++ b/ext/camel/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/common-lib/pom.xml b/ext/camel/common-lib/pom.xml",
                "index 34d0660a16..b13ab82f4d 100644",
                "--- a/ext/camel/common-lib/pom.xml",
                "+++ b/ext/camel/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/logic/pom.xml b/ext/camel/logic/pom.xml",
                "index 00dc5878e8..e99b7ade73 100644",
                "--- a/ext/camel/logic/pom.xml",
                "+++ b/ext/camel/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/persistence-api/pom.xml b/ext/camel/persistence-api/pom.xml",
                "index 3c0568df24..3c55ce4a22 100644",
                "--- a/ext/camel/persistence-api/pom.xml",
                "+++ b/ext/camel/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/persistence-jpa/pom.xml b/ext/camel/persistence-jpa/pom.xml",
                "index a1abbbaad5..b1cffcb890 100644",
                "--- a/ext/camel/persistence-jpa/pom.xml",
                "+++ b/ext/camel/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/pom.xml b/ext/camel/pom.xml",
                "index a0d5466cfd..67d36f0ef6 100644",
                "--- a/ext/camel/pom.xml",
                "+++ b/ext/camel/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/provisioning-api/pom.xml b/ext/camel/provisioning-api/pom.xml",
                "index 0ad7c45879..4a73960bbd 100644",
                "--- a/ext/camel/provisioning-api/pom.xml",
                "+++ b/ext/camel/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/provisioning-camel/pom.xml b/ext/camel/provisioning-camel/pom.xml",
                "index 47d5a50f8f..970f6c5f80 100644",
                "--- a/ext/camel/provisioning-camel/pom.xml",
                "+++ b/ext/camel/provisioning-camel/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/rest-api/pom.xml b/ext/camel/rest-api/pom.xml",
                "index 035f374330..9db81f1de2 100644",
                "--- a/ext/camel/rest-api/pom.xml",
                "+++ b/ext/camel/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/camel/rest-cxf/pom.xml b/ext/camel/rest-cxf/pom.xml",
                "index de460cb5e6..6f7d775415 100644",
                "--- a/ext/camel/rest-cxf/pom.xml",
                "+++ b/ext/camel/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-camel</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/client-elasticsearch/pom.xml b/ext/elasticsearch/client-elasticsearch/pom.xml",
                "index 2bfa8cd73d..07df7fa102 100644",
                "--- a/ext/elasticsearch/client-elasticsearch/pom.xml",
                "+++ b/ext/elasticsearch/client-elasticsearch/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/persistence-jpa/pom.xml b/ext/elasticsearch/persistence-jpa/pom.xml",
                "index 2081d52e84..d023a5e964 100644",
                "--- a/ext/elasticsearch/persistence-jpa/pom.xml",
                "+++ b/ext/elasticsearch/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/pom.xml b/ext/elasticsearch/pom.xml",
                "index b6a529ab42..59ee042398 100644",
                "--- a/ext/elasticsearch/pom.xml",
                "+++ b/ext/elasticsearch/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/elasticsearch/provisioning-java/pom.xml b/ext/elasticsearch/provisioning-java/pom.xml",
                "index 0f855b1302..f3154d477d 100644",
                "--- a/ext/elasticsearch/provisioning-java/pom.xml",
                "+++ b/ext/elasticsearch/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-elasticsearch</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/flowable/client-console/pom.xml b/ext/flowable/client-console/pom.xml",
                "index c0dee7de6b..4a7dceeb08 100644",
                "--- a/ext/flowable/client-console/pom.xml",
                "+++ b/ext/flowable/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-flowable</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/flowable/common-lib/pom.xml b/ext/flowable/common-lib/pom.xml",
                "index 781875b8c9..8d00e20c61 100644",
                "--- a/ext/flowable/common-lib/pom.xml",
                "+++ b/ext/flowable/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-flowable</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/flowable/flowable-bpmn/pom.xml b/ext/flowable/flowable-bpmn/pom.xml",
                "index 3e0d45356e..0cdbee6b00 100644",
                "--- a/ext/flowable/flowable-bpmn/pom.xml",
                "+++ b/ext/flowable/flowable-bpmn/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-flowable</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/flowable/logic/pom.xml b/ext/flowable/logic/pom.xml",
                "index 46bdce850f..3ba752cd20 100644",
                "--- a/ext/flowable/logic/pom.xml",
                "+++ b/ext/flowable/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-flowable</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/flowable/pom.xml b/ext/flowable/pom.xml",
                "index dfe532ded5..764cebdb0d 100644",
                "--- a/ext/flowable/pom.xml",
                "+++ b/ext/flowable/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/flowable/rest-api/pom.xml b/ext/flowable/rest-api/pom.xml",
                "index e609e5251c..2938b056c1 100644",
                "--- a/ext/flowable/rest-api/pom.xml",
                "+++ b/ext/flowable/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-flowable</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/flowable/rest-cxf/pom.xml b/ext/flowable/rest-cxf/pom.xml",
                "index 1dd8aebcf5..adc476f0e7 100644",
                "--- a/ext/flowable/rest-cxf/pom.xml",
                "+++ b/ext/flowable/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-flowable</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/agent/pom.xml b/ext/oidcclient/agent/pom.xml",
                "index d39bbed909..5f7030902f 100644",
                "--- a/ext/oidcclient/agent/pom.xml",
                "+++ b/ext/oidcclient/agent/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/client-console/pom.xml b/ext/oidcclient/client-console/pom.xml",
                "index f212eb8752..23f82551e4 100644",
                "--- a/ext/oidcclient/client-console/pom.xml",
                "+++ b/ext/oidcclient/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/client-enduser/pom.xml b/ext/oidcclient/client-enduser/pom.xml",
                "index debbb2e711..2e30b7d94f 100644",
                "--- a/ext/oidcclient/client-enduser/pom.xml",
                "+++ b/ext/oidcclient/client-enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/common-lib/pom.xml b/ext/oidcclient/common-lib/pom.xml",
                "index c59d871daf..402bac4bbc 100644",
                "--- a/ext/oidcclient/common-lib/pom.xml",
                "+++ b/ext/oidcclient/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/logic/pom.xml b/ext/oidcclient/logic/pom.xml",
                "index b128f47fd0..a46fb7d091 100644",
                "--- a/ext/oidcclient/logic/pom.xml",
                "+++ b/ext/oidcclient/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/persistence-api/pom.xml b/ext/oidcclient/persistence-api/pom.xml",
                "index 6c5ee61962..f775b6edda 100644",
                "--- a/ext/oidcclient/persistence-api/pom.xml",
                "+++ b/ext/oidcclient/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/persistence-jpa/pom.xml b/ext/oidcclient/persistence-jpa/pom.xml",
                "index 862ad1eaa3..df6705b60f 100644",
                "--- a/ext/oidcclient/persistence-jpa/pom.xml",
                "+++ b/ext/oidcclient/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/pom.xml b/ext/oidcclient/pom.xml",
                "index d0cec8a81e..265189d638 100644",
                "--- a/ext/oidcclient/pom.xml",
                "+++ b/ext/oidcclient/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/provisioning-api/pom.xml b/ext/oidcclient/provisioning-api/pom.xml",
                "index d1454e19fe..58a82337b5 100644",
                "--- a/ext/oidcclient/provisioning-api/pom.xml",
                "+++ b/ext/oidcclient/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/provisioning-java/pom.xml b/ext/oidcclient/provisioning-java/pom.xml",
                "index 4ba4081a63..74089d4b22 100644",
                "--- a/ext/oidcclient/provisioning-java/pom.xml",
                "+++ b/ext/oidcclient/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/rest-api/pom.xml b/ext/oidcclient/rest-api/pom.xml",
                "index f870386135..0e78bc7e61 100644",
                "--- a/ext/oidcclient/rest-api/pom.xml",
                "+++ b/ext/oidcclient/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/oidcclient/rest-cxf/pom.xml b/ext/oidcclient/rest-cxf/pom.xml",
                "index 2231d7934f..439e41ab90 100644",
                "--- a/ext/oidcclient/rest-cxf/pom.xml",
                "+++ b/ext/oidcclient/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-oidcclient</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/pom.xml b/ext/pom.xml",
                "index bf79ed0cf9..23b799c7ca 100644",
                "--- a/ext/pom.xml",
                "+++ b/ext/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/agent/pom.xml b/ext/saml2sp/agent/pom.xml",
                "index 9f817c8db4..314374198c 100644",
                "--- a/ext/saml2sp/agent/pom.xml",
                "+++ b/ext/saml2sp/agent/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/client-console/pom.xml b/ext/saml2sp/client-console/pom.xml",
                "index 807c2f139f..b9916d4dba 100644",
                "--- a/ext/saml2sp/client-console/pom.xml",
                "+++ b/ext/saml2sp/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/client-enduser/pom.xml b/ext/saml2sp/client-enduser/pom.xml",
                "index d6aa197788..5d8389eed3 100644",
                "--- a/ext/saml2sp/client-enduser/pom.xml",
                "+++ b/ext/saml2sp/client-enduser/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/common-lib/pom.xml b/ext/saml2sp/common-lib/pom.xml",
                "index 5026e18b8c..b0065bf061 100644",
                "--- a/ext/saml2sp/common-lib/pom.xml",
                "+++ b/ext/saml2sp/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/logic/pom.xml b/ext/saml2sp/logic/pom.xml",
                "index 32ea8bed69..641805bb6d 100644",
                "--- a/ext/saml2sp/logic/pom.xml",
                "+++ b/ext/saml2sp/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/persistence-api/pom.xml b/ext/saml2sp/persistence-api/pom.xml",
                "index 4f29a27e50..4c61561e4c 100644",
                "--- a/ext/saml2sp/persistence-api/pom.xml",
                "+++ b/ext/saml2sp/persistence-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/persistence-jpa/pom.xml b/ext/saml2sp/persistence-jpa/pom.xml",
                "index 2228d41e27..fbe1e28be3 100644",
                "--- a/ext/saml2sp/persistence-jpa/pom.xml",
                "+++ b/ext/saml2sp/persistence-jpa/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/pom.xml b/ext/saml2sp/pom.xml",
                "index 41a43d6b60..702f4623ce 100644",
                "--- a/ext/saml2sp/pom.xml",
                "+++ b/ext/saml2sp/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/provisioning-api/pom.xml b/ext/saml2sp/provisioning-api/pom.xml",
                "index bc7ba62fe9..23b8b4a899 100644",
                "--- a/ext/saml2sp/provisioning-api/pom.xml",
                "+++ b/ext/saml2sp/provisioning-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/provisioning-java/pom.xml b/ext/saml2sp/provisioning-java/pom.xml",
                "index b449eb8e34..a323802450 100644",
                "--- a/ext/saml2sp/provisioning-java/pom.xml",
                "+++ b/ext/saml2sp/provisioning-java/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/rest-api/pom.xml b/ext/saml2sp/rest-api/pom.xml",
                "index 86bb17e529..73fef72f9e 100644",
                "--- a/ext/saml2sp/rest-api/pom.xml",
                "+++ b/ext/saml2sp/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/saml2sp/rest-cxf/pom.xml b/ext/saml2sp/rest-cxf/pom.xml",
                "index d961813256..4ba22530d7 100644",
                "--- a/ext/saml2sp/rest-cxf/pom.xml",
                "+++ b/ext/saml2sp/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-saml2sp</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/client-console/pom.xml b/ext/scimv2/client-console/pom.xml",
                "index edd9880054..49d1a317ca 100644",
                "--- a/ext/scimv2/client-console/pom.xml",
                "+++ b/ext/scimv2/client-console/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/common-lib/pom.xml b/ext/scimv2/common-lib/pom.xml",
                "index 1111507288..0195969b9e 100644",
                "--- a/ext/scimv2/common-lib/pom.xml",
                "+++ b/ext/scimv2/common-lib/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/logic/pom.xml b/ext/scimv2/logic/pom.xml",
                "index 51c5e61398..e6e2b823c3 100644",
                "--- a/ext/scimv2/logic/pom.xml",
                "+++ b/ext/scimv2/logic/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/pom.xml b/ext/scimv2/pom.xml",
                "index 8b3870e1e7..f6157b0d43 100644",
                "--- a/ext/scimv2/pom.xml",
                "+++ b/ext/scimv2/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/rest-api/pom.xml b/ext/scimv2/rest-api/pom.xml",
                "index 633b191801..d24bf7073b 100644",
                "--- a/ext/scimv2/rest-api/pom.xml",
                "+++ b/ext/scimv2/rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/rest-cxf/pom.xml b/ext/scimv2/rest-cxf/pom.xml",
                "index 479663fe91..a8c815b8c7 100644",
                "--- a/ext/scimv2/rest-cxf/pom.xml",
                "+++ b/ext/scimv2/rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/scim-rest-api/pom.xml b/ext/scimv2/scim-rest-api/pom.xml",
                "index 414c2d09df..36313b7510 100644",
                "--- a/ext/scimv2/scim-rest-api/pom.xml",
                "+++ b/ext/scimv2/scim-rest-api/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/scimv2/scim-rest-cxf/pom.xml b/ext/scimv2/scim-rest-cxf/pom.xml",
                "index ad2d7f4572..2f9dcb5283 100644",
                "--- a/ext/scimv2/scim-rest-cxf/pom.xml",
                "+++ b/ext/scimv2/scim-rest-cxf/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext-scimv2</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ext/swagger-ui/pom.xml b/ext/swagger-ui/pom.xml",
                "index 04e466bb4b..72876732a8 100644",
                "--- a/ext/swagger-ui/pom.xml",
                "+++ b/ext/swagger-ui/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ext</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/build-tools/pom.xml b/fit/build-tools/pom.xml",
                "index e2d6d3e344..7379a2fa0c 100644",
                "--- a/fit/build-tools/pom.xml",
                "+++ b/fit/build-tools/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/console-reference/pom.xml b/fit/console-reference/pom.xml",
                "index 476ac716e9..6524158455 100644",
                "--- a/fit/console-reference/pom.xml",
                "+++ b/fit/console-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index 67482647d3..aaf47c042b 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/enduser-reference/pom.xml b/fit/enduser-reference/pom.xml",
                "index 47de321524..1c8308b84b 100644",
                "--- a/fit/enduser-reference/pom.xml",
                "+++ b/fit/enduser-reference/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-fit</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/fit/pom.xml b/fit/pom.xml",
                "index e67ba2b371..b0e04d04f8 100644",
                "--- a/fit/pom.xml",
                "+++ b/fit/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/ide/pom.xml b/ide/pom.xml",
                "index efef4ba878..6576c08334 100644",
                "--- a/ide/pom.xml",
                "+++ b/ide/pom.xml",
                "@@ -24,3 +24,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/installer/pom.xml b/installer/pom.xml",
                "index eade3bcd79..2f02a61b77 100644",
                "--- a/installer/pom.xml",
                "+++ b/installer/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>",
                "diff --git a/pom.xml b/pom.xml",
                "index 068e55a5cd..2889bfd70a 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -28,3 +28,3 @@ under the License.",
                "   <artifactId>syncope</artifactId>",
                "-  <version>2.1.3-SNAPSHOT</version>",
                "+  <version>2.1.2-SNAPSHOT</version>",
                "   <packaging>pom</packaging>",
                "diff --git a/standalone/pom.xml b/standalone/pom.xml",
                "index 4cc1525be0..72508812e2 100644",
                "--- a/standalone/pom.xml",
                "+++ b/standalone/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>2.1.2-SNAPSHOT</version>",
                "   </parent>"
            ],
            "changed_files": [
                "archetype/pom.xml",
                "client/cli/pom.xml",
                "client/console/pom.xml",
                "client/enduser/pom.xml",
                "client/lib/pom.xml",
                "client/pom.xml",
                "common/lib/pom.xml",
                "common/pom.xml",
                "common/rest-api/pom.xml",
                "core/logic/pom.xml",
                "core/persistence-api/pom.xml",
                "core/persistence-jpa/pom.xml",
                "core/pom.xml",
                "core/provisioning-api/pom.xml",
                "core/provisioning-java/pom.xml",
                "core/rest-cxf/pom.xml",
                "core/spring/pom.xml",
                "core/upgrade/pom.xml",
                "core/workflow-api/pom.xml",
                "core/workflow-java/pom.xml",
                "deb/console/pom.xml",
                "deb/core/pom.xml",
                "deb/enduser/pom.xml",
                "deb/pom.xml",
                "docker/console/pom.xml",
                "docker/core/pom.xml",
                "docker/enduser/pom.xml",
                "docker/pom.xml",
                "ext/camel/client-console/pom.xml",
                "ext/camel/common-lib/pom.xml",
                "ext/camel/logic/pom.xml",
                "ext/camel/persistence-api/pom.xml",
                "ext/camel/persistence-jpa/pom.xml",
                "ext/camel/pom.xml",
                "ext/camel/provisioning-api/pom.xml",
                "ext/camel/provisioning-camel/pom.xml",
                "ext/camel/rest-api/pom.xml",
                "ext/camel/rest-cxf/pom.xml",
                "ext/elasticsearch/client-elasticsearch/pom.xml",
                "ext/elasticsearch/persistence-jpa/pom.xml",
                "ext/elasticsearch/pom.xml",
                "ext/elasticsearch/provisioning-java/pom.xml",
                "ext/flowable/client-console/pom.xml",
                "ext/flowable/common-lib/pom.xml",
                "ext/flowable/flowable-bpmn/pom.xml",
                "ext/flowable/logic/pom.xml",
                "ext/flowable/pom.xml",
                "ext/flowable/rest-api/pom.xml",
                "ext/flowable/rest-cxf/pom.xml",
                "ext/oidcclient/agent/pom.xml",
                "ext/oidcclient/client-console/pom.xml",
                "ext/oidcclient/client-enduser/pom.xml",
                "ext/oidcclient/common-lib/pom.xml",
                "ext/oidcclient/logic/pom.xml",
                "ext/oidcclient/persistence-api/pom.xml",
                "ext/oidcclient/persistence-jpa/pom.xml",
                "ext/oidcclient/pom.xml",
                "ext/oidcclient/provisioning-api/pom.xml",
                "ext/oidcclient/provisioning-java/pom.xml",
                "ext/oidcclient/rest-api/pom.xml",
                "ext/oidcclient/rest-cxf/pom.xml",
                "ext/pom.xml",
                "ext/saml2sp/agent/pom.xml",
                "ext/saml2sp/client-console/pom.xml",
                "ext/saml2sp/client-enduser/pom.xml",
                "ext/saml2sp/common-lib/pom.xml",
                "ext/saml2sp/logic/pom.xml",
                "ext/saml2sp/persistence-api/pom.xml",
                "ext/saml2sp/persistence-jpa/pom.xml",
                "ext/saml2sp/pom.xml",
                "ext/saml2sp/provisioning-api/pom.xml",
                "ext/saml2sp/provisioning-java/pom.xml",
                "ext/saml2sp/rest-api/pom.xml",
                "ext/saml2sp/rest-cxf/pom.xml",
                "ext/scimv2/client-console/pom.xml",
                "ext/scimv2/common-lib/pom.xml",
                "ext/scimv2/logic/pom.xml",
                "ext/scimv2/pom.xml",
                "ext/scimv2/rest-api/pom.xml",
                "ext/scimv2/rest-cxf/pom.xml",
                "ext/scimv2/scim-rest-api/pom.xml",
                "ext/scimv2/scim-rest-cxf/pom.xml",
                "ext/swagger-ui/pom.xml",
                "fit/build-tools/pom.xml",
                "fit/console-reference/pom.xml",
                "fit/core-reference/pom.xml",
                "fit/enduser-reference/pom.xml",
                "fit/pom.xml",
                "ide/pom.xml",
                "installer/pom.xml",
                "pom.xml",
                "standalone/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console, user",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "0e542bdb2ebf5c6389330486faff2babd5b60be2",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536837513,
            "hunks": 2,
            "message": "[SYNCOPE-1371] Fixing LOGIC_ACTIONS and PUSH_ACTIONS",
            "diff": [
                "diff --git a/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java b/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java",
                "index 1fe72b4efe..ccbf6e6ffd 100644",
                "--- a/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java",
                "+++ b/core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java",
                "@@ -312,3 +312,3 @@ public final class GenerateUpgradeSQL {",
                "                             + \"'\" + actionClassName + \"',\"",
                "-                            + \"'PULL_ACTIONS',\"",
                "+                            + \"'PUSH_ACTIONS',\"",
                "                             + \"'JAVA',\"",
                "@@ -368,3 +368,3 @@ public final class GenerateUpgradeSQL {",
                "                             + \"'\" + actionClassName + \"',\"",
                "-                            + \"'PULL_ACTIONS',\"",
                "+                            + \"'LOGIC_ACTIONS',\"",
                "                             + \"'JAVA',\""
            ],
            "changed_files": [
                "core/upgrade/src/main/java/org/apache/syncope/core/upgrade/GenerateUpgradeSQL.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1371": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b8d40101e6b7db1e52c1fe60fae1cca5bfefbbc3"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1371",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8fbedbf6ab7a123bb7f67d22e4d32fe1b2e7dada",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1542367099,
            "hunks": 1,
            "message": "[SYNCOPE-1395] POM fix",
            "diff": [
                "diff --git a/core/persistence-jpa-pgjsonb/pom.xml b/core/persistence-jpa-pgjsonb/pom.xml",
                "index 0fe11d740a..da125d258a 100644",
                "--- a/core/persistence-jpa-pgjsonb/pom.xml",
                "+++ b/core/persistence-jpa-pgjsonb/pom.xml",
                "@@ -94,3 +94,3 @@ under the License.",
                "         <configuration>",
                "-          <persistenceXmlFile>src/main/resources/persistence-enhance.xml</persistenceXmlFile> ",
                "+          <persistenceXmlFile>${project.basedir}/src/main/resources/persistence-enhance.xml</persistenceXmlFile> ",
                "           <includes>org/apache/syncope/core/persistence/jpa/entity/**/*.class</includes>"
            ],
            "changed_files": [
                "core/persistence-jpa-pgjsonb/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1395": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d29aa7e8dde16643ed03874b0984acfaeea57c0b"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1395",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b8d0ff704e15e9a60322f595528db211ee64ecf7",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1535362598,
            "hunks": 2,
            "message": "[SYNCOPE-1220] updated documentation about netbeans plugin",
            "diff": [
                "diff --git a/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/PluginConstants.java b/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/PluginConstants.java",
                "index c1359bf309..b598421d2c 100644",
                "--- a/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/PluginConstants.java",
                "+++ b/ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/PluginConstants.java",
                "@@ -29,3 +29,3 @@ public final class PluginConstants {",
                "-    public static final String GROOVY_SCRIPTS = \"Groovy Scripts\";",
                "+    public static final String GROOVY_SCRIPTS = \"Groovy Implementations\";",
                "diff --git a/src/main/asciidoc/getting-started/obtain.adoc b/src/main/asciidoc/getting-started/obtain.adoc",
                "index 0185de39b1..62b0f55366 100644",
                "--- a/src/main/asciidoc/getting-started/obtain.adoc",
                "+++ b/src/main/asciidoc/getting-started/obtain.adoc",
                "@@ -947,3 +947,3 @@ image::netbeans09.png[netbeans09]",
                "-To create a new template, right-click on the `Mail Templates` or `Report XSLTs` folder and then click on `New`:",
                "+To create a new template, right-click on the `Mail Templates`, `Report XSLTs` or `Groovy Implementations` folder and then click on `New`:",
                "diff --git a/src/main/asciidoc/images/netbeans08.png b/src/main/asciidoc/images/netbeans08.png",
                "index a7a8b3da96..fe4afa851d 100644",
                "Binary files a/src/main/asciidoc/images/netbeans08.png and b/src/main/asciidoc/images/netbeans08.png differ",
                "diff --git a/src/main/asciidoc/images/netbeans09.png b/src/main/asciidoc/images/netbeans09.png",
                "index 9445b67b69..6a4694c080 100644",
                "Binary files a/src/main/asciidoc/images/netbeans09.png and b/src/main/asciidoc/images/netbeans09.png differ",
                "diff --git a/src/main/asciidoc/images/netbeans10.png b/src/main/asciidoc/images/netbeans10.png",
                "index 71a87a261f..ba7130d0c7 100644",
                "Binary files a/src/main/asciidoc/images/netbeans10.png and b/src/main/asciidoc/images/netbeans10.png differ",
                "diff --git a/src/main/asciidoc/images/netbeans11.png b/src/main/asciidoc/images/netbeans11.png",
                "index 885a9454e3..8d1701a874 100644",
                "Binary files a/src/main/asciidoc/images/netbeans11.png and b/src/main/asciidoc/images/netbeans11.png differ"
            ],
            "changed_files": [
                "ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/PluginConstants.java",
                "src/main/asciidoc/getting-started/obtain.adoc",
                "src/main/asciidoc/images/netbeans08.png",
                "src/main/asciidoc/images/netbeans09.png",
                "src/main/asciidoc/images/netbeans10.png",
                "src/main/asciidoc/images/netbeans11.png"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1220": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cb8cc4102c8d9fe1c55960b87d758a0ecd4a7bff"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1220",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5564d51aa0a5341e8ec48085d9030b76fbe3f329",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537881495,
            "hunks": 6,
            "message": "[SYNCOPE-1369] Minor fixes to the docs",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/architecture/core.adoc b/src/main/asciidoc/reference-guide/architecture/core.adoc",
                "index 33a70354ae..88b0ce3d10 100644",
                "--- a/src/main/asciidoc/reference-guide/architecture/core.adoc",
                "+++ b/src/main/asciidoc/reference-guide/architecture/core.adoc",
                "@@ -77,3 +77,4 @@ Besides the default engine, another engine is available based on http://www.flow",
                " reference open source http://www.bpmn.org/[BPMN 2.0^] implementation. It enables advanced features such",
                "-as approval management and new statuses definitions. An optional web-based GUI editor is also available.",
                "+as approval management and new statuses definitions; a web-based GUI editor, the",
                "+http://www.flowable.org/docs/userguide/index.html#flowableModelerApp[Flowable Modeler^], is also available.",
                "diff --git a/src/main/asciidoc/reference-guide/concepts/workflow.adoc b/src/main/asciidoc/reference-guide/concepts/workflow.adoc",
                "index fae85c977f..8f3e5608ca 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/workflow.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/workflow.adoc",
                "@@ -106,6 +106,6 @@ The",
                " ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java[FlowableUserWorkflowAdapter^]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java[FlowableUserWorkflowAdapter^]",
                " endif::[]",
                " ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/2_1_X/core/workflow-flowable/src/main/java/org/apache/syncope/core/workflow/flowable/FlowableUserWorkflowAdapter.java[FlowableUserWorkflowAdapter^]",
                "+https://github.com/apache/syncope/blob/2_1_X/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java[FlowableUserWorkflowAdapter^]",
                " endif::[]",
                "@@ -113,6 +113,6 @@ is bootstrapped from",
                " ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/workflow-flowable/src/main/resources/userWorkflow.bpmn20.xml[userWorkflow.bpmn20.xml^]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/flowable/flowable-bpmn/src/main/resources/userWorkflow.bpmn20.xml[userWorkflow.bpmn20.xml^]",
                " endif::[]",
                " ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/2_1_X/core/workflow-flowable/src/main/resources/userWorkflow.bpmn20.xml[userWorkflow.bpmn20.xml^]",
                "+https://github.com/apache/syncope/blob/2_1_X/ext/flowable/flowable-bpmn/src/main/resources/userWorkflow.bpmn20.xml[userWorkflow.bpmn20.xml^]",
                " endif::[]",
                "@@ -126,3 +126,3 @@ Additional statuses and transitions allow the internal processes of Apache Synco",
                " . http://www.flowable.org/docs/userguide/index.html#forms[Flowable forms^] are used for implementing <<approval,approval>>.",
                "-. The http://www.flowable.org/docs/userguide/index.html#flowableModelerApp[Flowable Modeler^] can be enabled in the",
                "+. The http://www.flowable.org/docs/userguide/index.html#flowableModelerApp[Flowable Modeler^] is available with the",
                " <<admin-console,admin console>>, thus allowing web-based graphical modeling of the workflow definition."
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/architecture/core.adoc",
                "src/main/asciidoc/reference-guide/concepts/workflow.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1369": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "46a8a2fd43b0c7643c09f52c5b42572ecba8d002"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1369",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "473b5a5bfd93c6045042b46963ff401706d501ec",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1533044580,
            "hunks": 9,
            "message": "Upgrading IzPack and various Maven plugins",
            "diff": [
                "diff --git a/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardMgtButtonBar.java b/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardMgtButtonBar.java",
                "index 0a192d94aa..cbedd48ad2 100644",
                "--- a/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardMgtButtonBar.java",
                "+++ b/client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardMgtButtonBar.java",
                "@@ -111,3 +111,3 @@ public class AjaxWizardMgtButtonBar<T extends Serializable> extends WizardButton",
                "             @Override",
                "-            public final boolean isEnabled() {",
                "+            public boolean isEnabled() {",
                "                 switch (mode) {",
                "diff --git a/ext/scimv2/logic/pom.xml b/ext/scimv2/logic/pom.xml",
                "index 9d3f88c4bf..aed4416dcd 100644",
                "--- a/ext/scimv2/logic/pom.xml",
                "+++ b/ext/scimv2/logic/pom.xml",
                "@@ -77,3 +77,3 @@ under the License.",
                "         <configuration>",
                "-          <sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>",
                "+          <sourceDirectories>${project.build.sourceDirectory}</sourceDirectories>",
                "         </configuration>",
                "diff --git a/installer/src/main/resources/izpack/install.xml b/installer/src/main/resources/izpack/install.xml",
                "index 8129202625..7ec67f077a 100644",
                "--- a/installer/src/main/resources/izpack/install.xml",
                "+++ b/installer/src/main/resources/izpack/install.xml",
                "@@ -138,3 +138,3 @@ under the License.",
                "   <jar src=\"lib/httpmime-@{httpclient.version}.jar\"/>",
                "-  <jar src=\"lib/httpcore-4.4.9.jar\"/>",
                "+  <jar src=\"lib/httpcore-4.4.10.jar\"/>",
                "   <jar src=\"lib/jackson-databind-@{jackson.version}.jar\"/>",
                "diff --git a/pom.xml b/pom.xml",
                "index ad26bc59df..264496a207 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -485,4 +485,4 @@ under the License.",
                "-    <izpack.version>5.1.2</izpack.version>",
                "-    <httpclient.version>4.5.5</httpclient.version>",
                "+    <izpack.version>5.1.3</izpack.version>",
                "+    <httpclient.version>4.5.6</httpclient.version>",
                "     <maven-invoker.version>3.0.1</maven-invoker.version>",
                "@@ -1765,3 +1765,3 @@ under the License.",
                "         <artifactId>bcpkix-jdk15on</artifactId>",
                "-        <version>1.59</version>",
                "+        <version>1.60</version>",
                "         <scope>test</scope>",
                "@@ -1816,3 +1816,3 @@ under the License.",
                "           <artifactId>maven-compiler-plugin</artifactId>",
                "-          <version>3.7.0</version> ",
                "+          <version>3.8.0</version> ",
                "           <configuration>",
                "@@ -2014,3 +2014,3 @@ under the License.",
                "           <artifactId>maven-checkstyle-plugin</artifactId>",
                "-          <version>2.17</version>",
                "+          <version>3.0.0</version>",
                "           <configuration>",
                "@@ -2030,3 +2030,3 @@ under the License.",
                "           <artifactId>docker-maven-plugin</artifactId>",
                "-          <version>0.26.0</version>",
                "+          <version>0.26.1</version>",
                "         </plugin>",
                "@@ -2337,3 +2337,3 @@ under the License.",
                "         <artifactId>maven-project-info-reports-plugin</artifactId>",
                "-        <version>2.9</version>",
                "+        <version>3.0.0</version>",
                "         <configuration>"
            ],
            "changed_files": [
                "client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardMgtButtonBar.java",
                "ext/scimv2/logic/pom.xml",
                "installer/src/main/resources/izpack/install.xml",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: console",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1899d51dcf079476bc1ff9fe92830d661cc53cad",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540539641,
            "hunks": 1,
            "message": "Increasing Travis CI timeout to 30 mins",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 03cf1ec156..b0bf69654b 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -22,3 +22,3 @@ before_install:",
                " # default install is mvn install --quiet -DskipTests=true",
                "-install: travis_wait mvn --show-version --quiet -T 1C -P all,skipTests,without-eclipse",
                "+install: travis_wait 30 mvn --show-version --quiet -T 1C -P all,skipTests,without-eclipse",
                " before_script:"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b60d983aff716bec68b0d74ed0d85fd0c0e9eee1"
                ],
                [
                    "no-tag",
                    "91f149059d3358e0ee2716432b0cf3a710cb36e1"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c1b1b74563740969951dcb9fa89cff2143b6f634",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540903429,
            "hunks": 16,
            "message": "Upgrading CXF",
            "diff": [
                "diff --git a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java",
                "index 69adcbb068..267652176c 100644",
                "--- a/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java",
                "+++ b/core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java",
                "@@ -20,7 +20,4 @@ package org.apache.syncope.core.rest.cxf;",
                "-import io.swagger.v3.jaxrs2.Reader;",
                " import io.swagger.v3.oas.integration.api.OpenAPIConfiguration;",
                "-import io.swagger.v3.oas.models.OpenAPI;",
                " import io.swagger.v3.oas.models.Operation;",
                "-import io.swagger.v3.oas.models.PathItem;",
                " import io.swagger.v3.oas.models.headers.Header;",
                "@@ -34,3 +31,2 @@ import io.swagger.v3.oas.models.responses.ApiResponses;",
                " import io.swagger.v3.oas.models.servers.Server;",
                "-import io.swagger.v3.oas.models.tags.Tag;",
                " import java.net.URL;",
                "@@ -38,3 +34,2 @@ import java.util.ArrayList;",
                " import java.util.Collections;",
                "-import java.util.HashMap;",
                " import java.util.LinkedHashMap;",
                "@@ -44,5 +39,3 @@ import java.util.Optional;",
                " import org.apache.commons.lang3.StringUtils;",
                "-import org.apache.commons.lang3.tuple.Pair;",
                " import org.apache.cxf.jaxrs.ext.MessageContext;",
                "-import org.apache.cxf.jaxrs.model.ClassResourceInfo;",
                " import org.apache.cxf.jaxrs.model.OperationResourceInfo;",
                "@@ -59,11 +52,4 @@ public class SyncopeOpenApiCustomizer extends OpenApiCustomizer {",
                "-    // remove the line below with CXF 3.2.7",
                "     private JavaDocProvider javadocProvider;",
                "-    // remove the line below with CXF 3.2.7",
                "-    private boolean replaceTags;",
                "-",
                "-    // remove the line below with CXF 3.2.7",
                "-    private List<ClassResourceInfo> cris;",
                "-",
                "     private List<String> domains;",
                "@@ -75,5 +61,4 @@ public class SyncopeOpenApiCustomizer extends OpenApiCustomizer {",
                "         if (javaDocURLs != null) {",
                "-            // remove the line below with CXF 3.2.7",
                "             this.javadocProvider = new JavaDocProvider(javaDocURLs);",
                "-            super.setJavaDocURLs(javaDocURLs);",
                "+            super.setJavadocProvider(javadocProvider);",
                "         }",
                "@@ -81,16 +66,2 @@ public class SyncopeOpenApiCustomizer extends OpenApiCustomizer {",
                "-    @Override",
                "-    public void setReplaceTags(final boolean replaceTags) {",
                "-        // remove this method with CXF 3.2.7",
                "-        this.replaceTags = replaceTags;",
                "-        super.setReplaceTags(replaceTags);",
                "-    }",
                "-",
                "-    @Override",
                "-    public void setClassResourceInfos(final List<ClassResourceInfo> classResourceInfos) {",
                "-        // remove this method with CXF 3.2.7",
                "-        this.cris = classResourceInfos;",
                "-        super.setClassResourceInfos(classResourceInfos);",
                "-    }",
                "-",
                "     @Override",
                "@@ -108,71 +79,2 @@ public class SyncopeOpenApiCustomizer extends OpenApiCustomizer {",
                "-    @Override",
                "-    public void customize(final OpenAPI oas) {",
                "-        // remove this method with CXF 3.2.7",
                "-        if (replaceTags || javadocProvider != null) {",
                "-            Map<String, ClassResourceInfo> operations = new HashMap<>();",
                "-            Map<Pair<String, String>, OperationResourceInfo> methods = new HashMap<>();",
                "-            cris.forEach(cri -> {",
                "-                cri.getMethodDispatcher().getOperationResourceInfos().forEach(ori -> {",
                "-                    String normalizedPath = getNormalizedPath(",
                "-                            cri.getURITemplate().getValue(), ori.getURITemplate().getValue());",
                "-",
                "-                    operations.put(normalizedPath, cri);",
                "-                    methods.put(Pair.of(ori.getHttpMethod(), normalizedPath), ori);",
                "-                });",
                "-            });",
                "-",
                "-            List<Tag> tags = new ArrayList<>();",
                "-            oas.getPaths().forEach((pathKey, pathItem) -> {",
                "-                Tag tag = null;",
                "-                if (replaceTags && operations.containsKey(pathKey)) {",
                "-                    ClassResourceInfo cri = operations.get(pathKey);",
                "-",
                "-                    tag = new Tag();",
                "-                    tag.setName(cri.getURITemplate().getValue().replaceAll(\"/\", \"_\"));",
                "-                    if (javadocProvider != null) {",
                "-                        tag.setDescription(javadocProvider.getClassDoc(cri));",
                "-                    }",
                "-",
                "-                    if (!tags.contains(tag)) {",
                "-                        tags.add(tag);",
                "-                    }",
                "-                }",
                "-",
                "-                for (Map.Entry<PathItem.HttpMethod, Operation> subentry : pathItem.readOperationsMap().entrySet()) {",
                "-                    if (replaceTags && tag != null) {",
                "-                        subentry.getValue().setTags(Collections.singletonList(tag.getName()));",
                "-                    }",
                "-",
                "-                    Pair<String, String> key = Pair.of(subentry.getKey().name(), pathKey);",
                "-                    if (methods.containsKey(key) && javadocProvider != null) {",
                "-                        OperationResourceInfo ori = methods.get(key);",
                "-",
                "-                        if (StringUtils.isBlank(subentry.getValue().getSummary())) {",
                "-                            subentry.getValue().setSummary(javadocProvider.getMethodDoc(ori));",
                "-                        }",
                "-                        if (subentry.getValue().getParameters() == null) {",
                "-                            List<Parameter> parameters = new ArrayList<>();",
                "-                            addParameters(parameters);",
                "-                            subentry.getValue().setParameters(parameters);",
                "-                        } else {",
                "-                            for (int i = 0; i < subentry.getValue().getParameters().size(); i++) {",
                "-                                if (StringUtils.isBlank(subentry.getValue().getParameters().get(i).getDescription())) {",
                "-                                    subentry.getValue().getParameters().get(i).",
                "-                                            setDescription(javadocProvider.getMethodParameterDoc(ori, i));",
                "-                                }",
                "-                            }",
                "-                            addParameters(subentry.getValue().getParameters());",
                "-                        }",
                "-",
                "-                        customizeResponses(subentry.getValue(), ori);",
                "-                    }",
                "-                }",
                "-            });",
                "-            if (replaceTags && oas.getTags() != null) {",
                "-                oas.setTags(tags);",
                "-            }",
                "-        }",
                "-    }",
                "-",
                "     @Override",
                "@@ -203,14 +105,5 @@ public class SyncopeOpenApiCustomizer extends OpenApiCustomizer {",
                "+    @Override",
                "     protected void customizeResponses(final Operation operation, final OperationResourceInfo ori) {",
                "-        // this will be replaced by super.customizeResponses(operation, ori);",
                "-        if (operation.getResponses() != null && !operation.getResponses().isEmpty()) {",
                "-            ApiResponse response = operation.getResponses().entrySet().iterator().next().getValue();",
                "-            if (StringUtils.isBlank(response.getDescription())",
                "-                    || (StringUtils.isNotBlank(javadocProvider.getMethodResponseDoc(ori))",
                "-                    && Reader.DEFAULT_DESCRIPTION.equals(response.getDescription()))) {",
                "-",
                "-                response.setDescription(javadocProvider.getMethodResponseDoc(ori));",
                "-            }",
                "-        }",
                "-        //",
                "+        super.customizeResponses(operation, ori);",
                "diff --git a/pom.xml b/pom.xml",
                "index 55942d7ab4..f7411ad4cd 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -391,3 +391,3 @@ under the License.",
                "-    <cxf.version>3.2.6</cxf.version>",
                "+    <cxf.version>3.2.7</cxf.version>"
            ],
            "changed_files": [
                "core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e996cafc1a88408d07e1482cb13e7e5381fb20fa"
                ],
                [
                    "no-tag",
                    "cdad0abb49ba332bffa212db1447a767e018e46f"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6fcd4143cd7563143cb0db0a09cd72e69fd30800",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541574589,
            "hunks": 1,
            "message": "Upgrading Swagger UI",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index c0e0687054..0d62cc6fa4 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -443,3 +443,3 @@ under the License.",
                "     <swagger-core.version>2.0.5</swagger-core.version>    ",
                "-    <swagger-ui.version>3.19.4</swagger-ui.version>",
                "+    <swagger-ui.version>3.19.5</swagger-ui.version>",
                "     <guava.version>20.0</guava.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "90aa804eb3e331afe511ba5c4471b91bec463a95"
                ],
                [
                    "no-tag",
                    "7e4d9d99a78ab208e28430da0527c25cab5c9373"
                ],
                [
                    "no-tag",
                    "22a821cc72111c15682da1a923adc715a2f6a908"
                ],
                [
                    "no-tag",
                    "5eb95854960c9758e5c16f607e089343483b001e"
                ],
                [
                    "no-tag",
                    "292006e4c2016ac015363c1e6c9d977577cb727c"
                ],
                [
                    "no-tag",
                    "62102d176d0a52cf6ceff501b77918b824aee3b8"
                ],
                [
                    "no-tag",
                    "a8a131e609f5603ded90df652c4745cbd21d5861"
                ],
                [
                    "no-tag",
                    "ea46b82b7fca82e7ba2feddca23fb62e1daa6648"
                ],
                [
                    "no-tag",
                    "c75aae8608f8f93a74d12ce7a6d6e872703c43aa"
                ],
                [
                    "no-tag",
                    "f07fadc4b654904f46ca2bc1b46143229487d68e"
                ],
                [
                    "no-tag",
                    "d9a879af89a98fc170ea211b0e2f769ddb8c8a5c"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "823baa649fc4794670dd6f5bcc03630c70a5c37b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534493619,
            "hunks": 8,
            "message": "Site management adjustments",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 6226c8594c..42f460f699 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -2278,4 +2278,4 @@ under the License.",
                "               <report>index</report>",
                "-              <report>project-team</report>",
                "-              <report>issue-tracking</report>",
                "+              <report>team</report>",
                "+              <report>issue-management</report>",
                "             </reports>",
                "diff --git a/src/site/site.xml b/src/site/site.xml",
                "index cdfb9f96fb..4d5a4c4aad 100644",
                "--- a/src/site/site.xml",
                "+++ b/src/site/site.xml",
                "@@ -66,3 +66,3 @@ under the License.",
                "       <item name=\"Mailing Lists\" href=\"mailing-lists\"/>",
                "-      <item name=\"Project Team\" href=\"team-list\"/>",
                "+      <item name=\"Team\" href=\"team\"/>",
                "       <item name=\"License\" href=\"https://www.apache.org/licenses/\"/>",
                "@@ -76,3 +76,3 @@ under the License.",
                "       <item name=\"Continuous Integration\" href=\"integration\"/>",
                "-      <item name=\"Issue Tracking\" href=\"issue-tracking\"/>",
                "+      <item name=\"Issue Management\" href=\"issue-management\"/>",
                "       <item name=\"Building\" href=\"building\"/>",
                "@@ -110,2 +110,2 @@ Apache, Syncope, Apache Syncope, the Apache feather logo and the Apache Syncope",
                "-</project>",
                "\\ No newline at end of file",
                "+</project>",
                "diff --git a/src/site/xdoc/release-process.xml b/src/site/xdoc/release-process.xml",
                "index 0c880ff0cb..099bf621fa 100644",
                "--- a/src/site/xdoc/release-process.xml",
                "+++ b/src/site/xdoc/release-process.xml",
                "@@ -329,3 +329,3 @@ sed -i 's/\\/syncope\\/webjars\\/highlightjs\\/9.8.0\\/highlight.min.js/http:\\/\\/cdnj",
                " # else if releasing from 2_1_X",
                "-curl -o /tmp/schema_1_syncope21.html http://localhost:9080/syncope/schema_1_syncope21.html",
                "+curl -o /tmp/schema_1_syncope2.html http://localhost:9080/syncope/schema_1_syncope21.html",
                " sed -i 's/\\/syncope\\/webjars\\/highlightjs\\/9.8.0\\/styles\\/default.min.css/http:\\/\\/cdnjs.cloudflare.com\\/ajax\\/libs\\/highlight.js\\/9.8.0\\/styles\\/default.min.css/' /tmp/schema_1_syncope21.html ",
                "@@ -358,2 +358,3 @@ svn copy apidocs/2.1 $VERSION/apidocs/",
                " svn copy rest/2.1 $VERSION/rest/",
                "+svn copy docs/2.1/ $VERSION/docs/",
                "@@ -375,2 +376,3 @@ svn copy apidocs/2.0 $VERSION/apidocs/",
                " svn copy rest/2.0 $VERSION/rest/",
                "+svn copy docs/2.0/ $VERSION/docs/"
            ],
            "changed_files": [
                "pom.xml",
                "src/site/site.xml",
                "src/site/xdoc/release-process.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "985ada6c3decf247307a1a9b52ee93207ec5a227"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a36a2d29340491511127b6fa423aca2fc102182b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1542029914,
            "hunks": 1,
            "message": "Added Active Directory pull actions",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/ADMembershipPullActions.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/ADMembershipPullActions.java",
                "new file mode 100644",
                "index 0000000000..a0af06533c",
                "--- /dev/null",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/ADMembershipPullActions.java",
                "@@ -0,0 +1,56 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.provisioning.java.pushpull;",
                "+",
                "+import org.apache.commons.collections4.IterableUtils;",
                "+import org.apache.commons.collections4.Predicate;",
                "+import org.apache.syncope.common.lib.types.ConnConfProperty;",
                "+import org.apache.syncope.core.provisioning.api.Connector;",
                "+",
                "+/**",
                "+ * Simple action for pulling LDAP groups memberships to Syncope group memberships, when the same resource is",
                "+ * configured for both users and groups.",
                "+ *",
                "+ * @see org.apache.syncope.core.provisioning.java.propagation.LDAPMembershipPropagationActions",
                "+ */",
                "+public class ADMembershipPullActions extends LDAPMembershipPullActions {",
                "+",
                "+    /**",
                "+     * Allows easy subclassing for the ConnId AD connector bundle.",
                "+     *",
                "+     * @param connector A Connector instance to query for the groupMemberAttribute property name",
                "+     * @return the name of the attribute used to keep track of group memberships",
                "+     */",
                "+    @Override",
                "+    protected String getGroupMembershipAttrName(final Connector connector) {",
                "+",
                "+        ConnConfProperty groupMembership = IterableUtils.find(connector.getConnInstance().getConf(),",
                "+                new Predicate<ConnConfProperty>() {",
                "+",
                "+            @Override",
                "+            public boolean evaluate(final ConnConfProperty property) {",
                "+                return \"groupMemberReferenceAttribute\".equals(property.getSchema().getName())",
                "+                        && property.getValues() != null && !property.getValues().isEmpty();",
                "+            }",
                "+        });",
                "+",
                "+        return groupMembership == null ? \"member\" : groupMembership.getValues().get(0).toString();",
                "+    }",
                "+",
                "+}"
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/ADMembershipPullActions.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0278599e17294fb81596f615763562de6bf098d8"
                ],
                [
                    "no-tag",
                    "5937c0844cafab71cfcabbcd502625a59b4f512c"
                ]
            ],
            "tags": [
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "36909584156437e0b424cee04fe3e6641325c0aa",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534231214,
            "hunks": 3,
            "message": "Upgrading JUnit",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index b8571048a3..4ddbaae020 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -435,3 +435,3 @@ under the License.",
                "-    <junit.version>5.3.0-M1</junit.version>",
                "+    <junit.version>5.3.0-RC1</junit.version>",
                "@@ -1912,3 +1912,3 @@ under the License.",
                "               <artifactId>junit-platform-surefire-provider</artifactId>",
                "-              <version>1.3.0-M1</version>",
                "+              <version>1.3.0-RC1</version>",
                "             </dependency>",
                "@@ -1930,3 +1930,3 @@ under the License.",
                "               <artifactId>junit-platform-surefire-provider</artifactId>",
                "-              <version>1.3.0-M1</version>",
                "+              <version>1.3.0-RC1</version>",
                "             </dependency>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5e38f0b61f69ae34a7bfb37be10b094fcdd025b4"
                ],
                [
                    "no-tag",
                    "215f9d397562178953ef5f41d4610c802fd19398"
                ],
                [
                    "no-tag",
                    "15843b583bf8859bb826a4004e952a29223a191f"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f89b408d92bd0e270b2d7cb2b616b66a11c6be5f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536567043,
            "hunks": 2,
            "message": "Upgrading Spring and cargo-maven2-plugin",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index d9fa726bfb..1aad2d753c 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -395,3 +395,3 @@ under the License.",
                "-    <spring.version>4.3.18.RELEASE</spring.version>",
                "+    <spring.version>4.3.19.RELEASE</spring.version>",
                "     <spring-security.version>4.2.7.RELEASE</spring-security.version>",
                "@@ -1964,3 +1964,3 @@ under the License.",
                "           <artifactId>cargo-maven2-plugin</artifactId>",
                "-          <version>1.6.9</version>",
                "+          <version>1.6.10</version>",
                "           <configuration>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "524c9687dbfd0098227491b958920c2016507677"
                ],
                [
                    "no-tag",
                    "e1972f84a4cfef01e0789efcf3796a60610c3d4e"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "741f34fa00cb50910fa16ba24b6a742f1e8e764c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541143728,
            "hunks": 2,
            "message": "Upgrading Cargo",
            "diff": [
                "diff --git a/appveyor.yml b/appveyor.yml",
                "index f58a884c6d..95610eefe9 100644",
                "--- a/appveyor.yml",
                "+++ b/appveyor.yml",
                "@@ -22,2 +22,3 @@ install:",
                "   - cinst git",
                "+  - cinst patch",
                "   - ps: |",
                "diff --git a/pom.xml b/pom.xml",
                "index 4bd68b356d..90155e5e4c 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1984,3 +1984,3 @@ under the License.",
                "           <artifactId>cargo-maven2-plugin</artifactId>",
                "-          <version>1.6.11</version>",
                "+          <version>1.7.0</version>",
                "           <configuration>"
            ],
            "changed_files": [
                "appveyor.yml",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cef9509642da7fdeb7ceef92a8388c34b3c1fc5a"
                ],
                [
                    "no-tag",
                    "639c314cd6aa922f6036e803ca7772d478b21165"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8c1a4f3153035a1eb4ba867f9e7197ab0f407bf1",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538981878,
            "hunks": 1,
            "message": "Upgrading docker-maven-plugin",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index ea4be0565c..de54e42ef8 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -2023,3 +2023,3 @@ under the License.",
                "           <artifactId>docker-maven-plugin</artifactId>",
                "-          <version>0.27.1</version>",
                "+          <version>0.27.2</version>",
                "         </plugin>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "88891b155c953b1885daa8ab2af328b4d74de6d8"
                ],
                [
                    "no-tag",
                    "0e73508a2312f97176427f414bddcd053b26f735"
                ],
                [
                    "no-tag",
                    "f0398c7d70a1e107e38d4dcb77bcf30b5d1265ef"
                ],
                [
                    "no-tag",
                    "56ee47a224aae780d1428da0d64fb68f80761709"
                ],
                [
                    "no-tag",
                    "c2cc8c9779e529468ad8e58e75ef5c1335589691"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4f5e12127bc39c9b8d38b6f78541887c5a4df24f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539667774,
            "hunks": 2,
            "message": "Allow to exclude the Eclipse module from the build, always causing troubles because of the P2 update site unreachable",
            "diff": [
                "diff --git a/ide/pom.xml b/ide/pom.xml",
                "index 362a938d9c..e142343aaa 100644",
                "--- a/ide/pom.xml",
                "+++ b/ide/pom.xml",
                "@@ -37,8 +37,28 @@ under the License.",
                "-  <modules>",
                "-    <module>eclipse</module>",
                "-    <module>netbeans</module>",
                "-  </modules>",
                "-",
                "   <profiles>",
                "+    <profile>",
                "+      <id>without-eclipse</id>",
                "+",
                "+      <activation>",
                "+\t<activeByDefault>false</activeByDefault>",
                "+      </activation>",
                "+",
                "+      <modules>",
                "+\t<module>netbeans</module>",
                "+      </modules>",
                "+    </profile>",
                "+",
                "+    <profile>",
                "+      <id>with-eclipse</id>",
                "+",
                "+      <activation>",
                "+\t<activeByDefault>true</activeByDefault>",
                "+      </activation>",
                "+",
                "+      <modules>",
                "+\t<module>eclipse</module>",
                "+\t<module>netbeans</module>",
                "+      </modules>",
                "+    </profile>",
                "+",
                "     <profile>"
            ],
            "changed_files": [
                "ide/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a9854644a50d1377f112c0e6e37e6637553dfada"
                ],
                [
                    "no-tag",
                    "5b898b23270a7b6f404b653a7d58f7fcf39ef7b9"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5521e436e39ad9b54c89c3a6fabe629996793020",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534497377,
            "hunks": 2,
            "message": "Finally remove MD5...",
            "diff": [
                "diff --git a/src/site/xdoc/release-process.xml b/src/site/xdoc/release-process.xml",
                "index 099bf621fa..781bfdfcf1 100644",
                "--- a/src/site/xdoc/release-process.xml",
                "+++ b/src/site/xdoc/release-process.xml",
                "@@ -299,3 +299,2 @@ done",
                " for file in `find . -name '*.deb' -or -name '*.jar' -or -name '*.zip' -or -name '*.nbm'`; do",
                "- openssl md5 $file | sed 's/.*= //' > $file.md5",
                "  openssl sha1 $file | sed 's/.*= //' > $file.sha1",
                "@@ -409,3 +408,2 @@ svn commit -m \"Staging site for release\"]]></source>",
                "                     <code>.asc</code> (GPG signature) and ",
                "-                    <code>.md5</code>",
                "                     files"
            ],
            "changed_files": [
                "src/site/xdoc/release-process.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "313070bc4871163842ef1131dcf597df00ada94b"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d7f034adaaa3a76028ffc00454f2496f27fdbe3b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1535971375,
            "hunks": 2,
            "message": "Upgrading Swagger UI and GreenMail",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index ff22dd2d46..da318f41aa 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -444,3 +444,3 @@ under the License.",
                "     <swagger-core.version>2.0.3</swagger-core.version>    ",
                "-    <swagger-ui.version>3.18.1</swagger-ui.version>",
                "+    <swagger-ui.version>3.18.2</swagger-ui.version>",
                "     <guava.version>20.0</guava.version>",
                "@@ -1657,3 +1657,3 @@ under the License.",
                "         <artifactId>greenmail</artifactId>",
                "-        <version>1.5.7</version>",
                "+        <version>1.5.8</version>",
                "         <scope>test</scope>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "865bd701720bcf93a4f3739892c02fe40691fce6"
                ],
                [
                    "no-tag",
                    "484dd1a4633aa902c46cef676f69bbe5e934e35c"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b7277204df286e48de459eb20e5b1c5c99bd711b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537943749,
            "hunks": 2,
            "message": "Upgrading Swagger UI and asciidoctor-maven-plugin",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index b42629b0af..fdcf6b9368 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -448,3 +448,3 @@ under the License.",
                "     <swagger-core.version>1.5.17</swagger-core.version>    ",
                "-    <swagger-ui.version>3.18.2</swagger-ui.version>",
                "+    <swagger-ui.version>3.19.0</swagger-ui.version>",
                "     <guava.version>20.0</guava.version>",
                "@@ -2456,3 +2456,3 @@ under the License.",
                "             <artifactId>asciidoctor-maven-plugin</artifactId>",
                "-            <version>1.5.6</version>",
                "+            <version>1.5.7</version>",
                "             <dependencies>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d9ca0d4732cffe93ec42c8152f6dae29d14a21c4"
                ],
                [
                    "no-tag",
                    "e7a7520035a5a76d3189a1c1ad6d095cd7d0c38c"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "350f650aecb35b1e74f75f7f6f1ce1789bb3b528",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539147004,
            "hunks": 1,
            "message": "Upgrading Tika",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index de54e42ef8..86213cdeb0 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -432,3 +432,3 @@ under the License.",
                "-    <tika.version>1.19</tika.version>",
                "+    <tika.version>1.19.1</tika.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "cf5a50298106988dab77393b65703895d7b3f336"
                ],
                [
                    "no-tag",
                    "cbd3c33e3f31a29afed59b84d247abb246736130"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ed45f24d1e879a3996b05745b4c838aa6c4d325d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541747222,
            "hunks": 1,
            "message": "Upgrading Tomcat",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 300d94f459..7e5e888306 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -514,3 +514,3 @@ under the License.",
                "-    <tomcat.version>9.0.12</tomcat.version>",
                "+    <tomcat.version>9.0.13</tomcat.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "21b937811332ff19f38751447275ebed8a2c42e6"
                ],
                [
                    "no-tag",
                    "1106f4916859f16d9755cc41911e68687d964b61"
                ],
                [
                    "no-tag",
                    "68c27fa27c13d55d5b1215ccac52b8848ec7339d"
                ],
                [
                    "no-tag",
                    "ae6c4bc75cf0d0ac494b915294701444442b4dd8"
                ],
                [
                    "no-tag",
                    "bbf47be01908c1a77db4eb6489e1c423147f3cc2"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f9edfc2e9565dd29ba9740e9605794102a458b79",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539668194,
            "hunks": 1,
            "message": "Also Appveyor to exclude Eclise build by default",
            "diff": [
                "diff --git a/appveyor.yml b/appveyor.yml",
                "index 5fc0c02eb8..c39b21e0df 100644",
                "--- a/appveyor.yml",
                "+++ b/appveyor.yml",
                "@@ -34,3 +34,3 @@ install:",
                " build_script:",
                "-  - mvn --show-version --quiet -T 1C -PskipTests,all --batch-mode",
                "+  - mvn --show-version --quiet -T 1C -PskipTests,all,without-eclipse --batch-mode",
                " test_script:"
            ],
            "changed_files": [
                "appveyor.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c2ba360bbebd0b8f57e90fb3a2077f904aa5f224"
                ],
                [
                    "no-tag",
                    "2177d2d3a529d1324beeec9000c443b975d8d876"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0c8b404d5edd25a2c17bc45cfc2dc4bdd61ce522",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1535098273,
            "hunks": 2,
            "message": "Upgrading Elasticsearch",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 78c5c75a5a..d4f3ba621d 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -417,3 +417,3 @@ under the License.",
                "-    <elasticsearch.version>6.3.2</elasticsearch.version>",
                "+    <elasticsearch.version>6.4.0</elasticsearch.version>",
                "@@ -2315,3 +2315,3 @@ under the License.",
                "             <link>https://build.shibboleth.net/nexus/content/sites/site/java-opensaml/3.3.0/apidocs/</link>",
                "-            <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/client/transport/6.3.2/index.html</link>",
                "+\t    <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/elasticsearch/6.4.0/index.html</link>",
                "           </links>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7df844d618ac6b2a2cf5e7146a1e72b81a556df2"
                ],
                [
                    "no-tag",
                    "d2f95947a4e4f8f2abc552c1abc3a37dd65e96b1"
                ],
                [
                    "no-tag",
                    "c4c5ebad047a8d2e79e7359ce90058720ee52c95"
                ],
                [
                    "no-tag",
                    "ac360d99b2a9f5ebb5d62315933fa9b73269ec69"
                ],
                [
                    "no-tag",
                    "ed5f601009cab72c8cfa0715f4a8fe6b8847ce4d"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cf67005cfad21f8eff66afcbdae546fc7b82641a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537536621,
            "hunks": 1,
            "message": "Upgrading Spring",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index da901dd597..987057bb67 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -395,3 +395,3 @@ under the License.",
                "-    <spring.version>5.0.9.RELEASE</spring.version>",
                "+    <spring.version>5.1.0.RELEASE</spring.version>",
                "     <spring-security.version>5.0.8.RELEASE</spring-security.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0005e6765054b70cbb3393dfebf95275eb50e4c0"
                ],
                [
                    "no-tag",
                    "c536f8d52274f87d87ceea14afc600a84570d5cb"
                ],
                [
                    "no-tag",
                    "2870e90cc4e0409f736334f8a5353b0b7e876b56"
                ],
                [
                    "no-tag",
                    "001a1d8bf4534fef8fcbb613fb7e5aaef6751083"
                ],
                [
                    "no-tag",
                    "79535b0532d6226074e487fee02b11e5137d47ba"
                ],
                [
                    "no-tag",
                    "6d1c8738328c7b507bf35f2a3c263d24e2d4a0a7"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4b37077552c366531afc7a37c6a01607ff4aae01",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534755742,
            "hunks": 5,
            "message": "Upgrading ApacheDS",
            "diff": [
                "diff --git a/fit/build-tools/pom.xml b/fit/build-tools/pom.xml",
                "index 037696e609..d85e820048 100644",
                "--- a/fit/build-tools/pom.xml",
                "+++ b/fit/build-tools/pom.xml",
                "@@ -53,3 +53,3 @@ under the License.",
                "       <groupId>org.apache.directory.server</groupId>",
                "-      <artifactId>apacheds-all</artifactId>",
                "+      <artifactId>apacheds-service</artifactId>",
                "     </dependency>",
                "@@ -195,19 +195,3 @@ under the License.",
                "     </dependency>",
                "-        ",
                "-    <dependency>",
                "-      <groupId>org.slf4j</groupId>",
                "-      <artifactId>slf4j-api</artifactId>",
                "-    </dependency>",
                "-    <dependency>",
                "-      <groupId>org.apache.logging.log4j</groupId>",
                "-      <artifactId>log4j-core</artifactId>",
                "-    </dependency>",
                "-    <dependency>",
                "-      <groupId>com.lmax</groupId>",
                "-      <artifactId>disruptor</artifactId>",
                "-    </dependency>",
                "-    <dependency>",
                "-      <groupId>org.apache.logging.log4j</groupId>",
                "-      <artifactId>log4j-slf4j-impl</artifactId>",
                "-    </dependency>",
                "+    ",
                "     <dependency>",
                "diff --git a/fit/build-tools/src/main/resources/log4j2.xml b/fit/build-tools/src/main/resources/log4j2.xml",
                "deleted file mode 100644",
                "index ffe88f671e..0000000000",
                "--- a/fit/build-tools/src/main/resources/log4j2.xml",
                "+++ /dev/null",
                "@@ -1,39 +0,0 @@",
                "-<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                "-<!--",
                "-Licensed to the Apache Software Foundation (ASF) under one",
                "-or more contributor license agreements.  See the NOTICE file",
                "-distributed with this work for additional information",
                "-regarding copyright ownership.  The ASF licenses this file",
                "-to you under the Apache License, Version 2.0 (the",
                "-\"License\"); you may not use this file except in compliance",
                "-with the License.  You may obtain a copy of the License at",
                "-",
                "-  http://www.apache.org/licenses/LICENSE-2.0",
                "-",
                "-Unless required by applicable law or agreed to in writing,",
                "-software distributed under the License is distributed on an",
                "-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "-KIND, either express or implied.  See the License for the",
                "-specific language governing permissions and limitations",
                "-under the License.",
                "--->",
                "-<configuration status=\"WARN\">",
                "-",
                "-  <appenders>",
                "-    ",
                "-    <Console name=\"main\" target=\"SYSTEM_OUT\">",
                "-      <PatternLayout>",
                "-        <pattern>%d{HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>",
                "-      </PatternLayout>",
                "-    </Console>",
                "-",
                "-  </appenders>",
                "-  ",
                "-  <loggers>",
                "-        ",
                "-    <root level=\"INFO\">",
                "-      <appender-ref ref=\"main\"/>",
                "-    </root>",
                "-    ",
                "-  </loggers>",
                "-</configuration>",
                "diff --git a/fit/build-tools/src/main/resources/simplelogger.properties b/fit/build-tools/src/main/resources/simplelogger.properties",
                "new file mode 100644",
                "index 0000000000..aefa3dd3c1",
                "--- /dev/null",
                "+++ b/fit/build-tools/src/main/resources/simplelogger.properties",
                "@@ -0,0 +1,20 @@",
                "+# Licensed to the Apache Software Foundation (ASF) under one",
                "+# or more contributor license agreements.  See the NOTICE file",
                "+# distributed with this work for additional information",
                "+# regarding copyright ownership.  The ASF licenses this file",
                "+# to you under the Apache License, Version 2.0 (the",
                "+# \"License\"); you may not use this file except in compliance",
                "+# with the License.  You may obtain a copy of the License at",
                "+#",
                "+#   http://www.apache.org/licenses/LICENSE-2.0",
                "+#",
                "+# Unless required by applicable law or agreed to in writing,",
                "+# software distributed under the License is distributed on an",
                "+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+# KIND, either express or implied.  See the License for the",
                "+# specific language governing permissions and limitations",
                "+# under the License.",
                "+",
                "+# See http://www.slf4j.org/api/org/slf4j/impl/SimpleLogger.html",
                "+# Possible values: \"trace\", \"debug\", \"info\", \"warn\", or \"error\"",
                "+org.slf4j.simpleLogger.defaultLogLevel=error",
                "diff --git a/pom.xml b/pom.xml",
                "index aad4cfecd5..5a24ba3a81 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1124,4 +1124,4 @@ under the License.",
                "         <groupId>org.apache.directory.server</groupId>",
                "-        <artifactId>apacheds-all</artifactId>",
                "-        <version>2.0.0-M24</version>",
                "+        <artifactId>apacheds-service</artifactId>",
                "+        <version>2.0.0.AM25</version>",
                "       </dependency>"
            ],
            "changed_files": [
                "fit/build-tools/pom.xml",
                "fit/build-tools/src/main/resources/log4j2.xml",
                "fit/build-tools/src/main/resources/simplelogger.properties",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "101760ae3b6cb10e09e420902fc0ad694eceb8c2"
                ],
                [
                    "no-tag",
                    "22877e980b6ec0f3b5102f48d5b832af01fb8da7"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "87e1562abf651718617b6442b3c80295f10813bc",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1535900365,
            "hunks": 2,
            "message": "Marking elecharny and simonetripodi as emeritus PMC members",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 4cfe67c5e1..3209c323d3 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -173,3 +173,3 @@ under the License.",
                "         <role>ASF member</role>",
                "-        <role>PMC member</role>",
                "+        <role>Emeritus PMC member</role>",
                "       </roles>",
                "@@ -184,3 +184,3 @@ under the License.",
                "         <role>ASF member</role>",
                "-        <role>PMC member</role>",
                "+        <role>Emeritus PMC member</role>",
                "       </roles>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "65a373151ef680c5a665803d310a1c908a4b810a"
                ],
                [
                    "no-tag",
                    "78bd84649a0c0c635c48fb6098409c3af8d7e37e"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "12f1d82f828289afcaa2c54bf204721423e6b711",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534515935,
            "hunks": 22,
            "message": "Remove SHA1, use SHA512",
            "diff": [
                "diff --git a/src/site/xdoc/downloads.xml b/src/site/xdoc/downloads.xml",
                "index a9e27b6728..6603c17462 100644",
                "--- a/src/site/xdoc/downloads.xml",
                "+++ b/src/site/xdoc/downloads.xml",
                "@@ -71,3 +71,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-2.1.1-source-release.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-2.1.1-source-release.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-2.1.1-source-release.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -80,3 +80,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-standalone-2.1.1-distribution.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-standalone-2.1.1-distribution.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-standalone-2.1.1-distribution.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -89,3 +89,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.1.1/apache-syncope-2.1.1.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/apache-syncope-2.1.1.deb.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.1/apache-syncope-2.1.1.deb.sha512\">sha512</a>",
                "               </td>",
                "@@ -98,3 +98,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.1.1/apache-syncope-console-2.1.1.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/apache-syncope-console-2.1.1.deb.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.1/apache-syncope-console-2.1.1.deb.sha512\">sha512</a>",
                "               </td>",
                "@@ -107,3 +107,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.1.1/apache-syncope-enduser-2.1.1.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/apache-syncope-enduser-2.1.1.deb.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.1/apache-syncope-enduser-2.1.1.deb.sha512\">sha512</a>",
                "               </td>",
                "@@ -116,3 +116,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-installer-2.1.1-uber.jar.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-installer-2.1.1-uber.jar.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-installer-2.1.1-uber.jar.sha512\">sha512</a>",
                "               </td>",
                "@@ -125,3 +125,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-client-cli-2.1.1.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-client-cli-2.1.1.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-client-cli-2.1.1.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -134,3 +134,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-core-upgrade-2.1.1.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-core-upgrade-2.1.1.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-core-upgrade-2.1.1.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -143,3 +143,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.1.1/org.apache.syncope.ide.eclipse.site-2.1.1.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/org.apache.syncope.ide.eclipse.site-2.1.1.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.1/org.apache.syncope.ide.eclipse.site-2.1.1.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -152,3 +152,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-ide-netbeans-2.1.1.nbm.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-ide-netbeans-2.1.1.nbm.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-ide-netbeans-2.1.1.nbm.sha512\">sha512</a>",
                "               </td>",
                "@@ -192,3 +192,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-2.0.10-source-release.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-2.0.10-source-release.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-2.0.10-source-release.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -201,3 +201,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-standalone-2.0.10-distribution.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-standalone-2.0.10-distribution.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-standalone-2.0.10-distribution.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -210,3 +210,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.0.10/apache-syncope-2.0.10.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/apache-syncope-2.0.10.deb.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.10/apache-syncope-2.0.10.deb.sha512\">sha512</a>",
                "               </td>",
                "@@ -219,3 +219,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.0.10/apache-syncope-console-2.0.10.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/apache-syncope-console-2.0.10.deb.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.10/apache-syncope-console-2.0.10.deb.sha512\">sha512</a>",
                "               </td>",
                "@@ -228,3 +228,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.0.10/apache-syncope-enduser-2.0.10.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/apache-syncope-enduser-2.0.10.deb.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.10/apache-syncope-enduser-2.0.10.deb.sha512\">sha512</a>",
                "               </td>",
                "@@ -237,3 +237,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-installer-2.0.10-uber.jar.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-installer-2.0.10-uber.jar.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-installer-2.0.10-uber.jar.sha512\">sha512</a>",
                "               </td>",
                "@@ -246,3 +246,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-client-cli-2.0.10.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-client-cli-2.0.10.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-client-cli-2.0.10.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -255,3 +255,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.0.10/org.apache.syncope.ide.eclipse.site-2.0.10.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/org.apache.syncope.ide.eclipse.site-2.0.10.zip.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.10/org.apache.syncope.ide.eclipse.site-2.0.10.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -264,3 +264,3 @@ under the License.",
                "                 <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-ide-netbeans-2.0.10.nbm.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-ide-netbeans-2.0.10.nbm.sha1\">sha1</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-ide-netbeans-2.0.10.nbm.sha512\">sha512</a>",
                "               </td>",
                "@@ -277,3 +277,3 @@ under the License.",
                "     <section name=\"Verifying Releases\">",
                "-      <p>When downloading from a mirror please check the SHA1 checksums as well as verifying the OpenPGP compatible",
                "+      <p>When downloading from a mirror please check the SHA512 checksums as well as verifying the OpenPGP compatible",
                "         signature available from the main Apache site.",
                "@@ -286,4 +286,4 @@ gpg --verify *syncope*.asc]]></source>",
                "-      <p>You can check the SHA1 checksum with:</p>",
                "-      <source><![CDATA[sha1sum --check *syncope*.sha1]]></source>",
                "+      <p>You can check the SHA512 checksum with:</p>",
                "+      <source><![CDATA[sha512sum --check *syncope*.sha512]]></source>",
                "     </section>",
                "diff --git a/src/site/xdoc/release-process.xml b/src/site/xdoc/release-process.xml",
                "index 781bfdfcf1..5c0c52c172 100644",
                "--- a/src/site/xdoc/release-process.xml",
                "+++ b/src/site/xdoc/release-process.xml",
                "@@ -299,3 +299,3 @@ done",
                " for file in `find . -name '*.deb' -or -name '*.jar' -or -name '*.zip' -or -name '*.nbm'`; do",
                "- openssl sha1 $file | sed 's/.*= //' > $file.sha1",
                "+ openssl sha512 $file | sed 's/.*= //' > $file.sha512",
                " done"
            ],
            "changed_files": [
                "src/site/xdoc/downloads.xml",
                "src/site/xdoc/release-process.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a3d0f09c5b0111842d605ccb07e0b6c1532d0cc9"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c0e0afb77ed9d11cd15e83b220dc44e41be4a86f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540991925,
            "hunks": 1,
            "message": "Switching to GitBox",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 799928d761..d5e81300b2 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -51,5 +51,5 @@ under the License.",
                "   <scm>",
                "-    <connection>scm:git:https://git-wip-us.apache.org/repos/asf/syncope.git</connection>",
                "-    <developerConnection>scm:git:https://git-wip-us.apache.org/repos/asf/syncope.git</developerConnection>",
                "-    <url>https://git-wip-us.apache.org/repos/asf?p=syncope.git</url>",
                "+    <connection>scm:git:https://gitbox.apache.org/repos/asf/syncope.git</connection>",
                "+    <developerConnection>scm:git:https://gitbox.apache.org/repos/asf/syncope.git</developerConnection>",
                "+    <url>https://gitbox.apache.org/repos/asf?p=syncope.git</url>",
                "     <tag>HEAD</tag>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "32027d75e1a5b461cee34d8e68d6bf350cd6b5ce"
                ],
                [
                    "no-tag",
                    "99a5c37de8d555813df4bfcfae40c0789aa2a118"
                ],
                [
                    "no-tag",
                    "fa770c1a7de7eaa1102abe02b7accbd1329fc478"
                ]
            ],
            "tags": [],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "19410a65891e1f0bbcd867e44a82dc65386a2bd1",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541167108,
            "hunks": 3,
            "message": "Updating Eclipse files for release",
            "diff": [
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "index 1ebc5d1038..bc46f8d659 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "@@ -4,3 +4,3 @@ Bundle-Name: Apache Syncope Eclipse Plugin",
                " Bundle-SymbolicName: org.apache.syncope.ide.eclipse.plugin;singleton:=true",
                "-Bundle-Version: 2.0.11.qualifier",
                "+Bundle-Version: 2.0.11",
                " Bundle-Activator: org.apache.syncope.ide.eclipse.plugin.Activator",
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "index 8b9b5168c8..ff5a58daf1 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "@@ -4,3 +4,3 @@ Bundle-Name: org.apache.syncope.ide.eclipse.tests",
                " Bundle-SymbolicName: org.apache.syncope.ide.eclipse.tests;singleton:=true",
                "-Bundle-Version: 2.0.11.qualifier",
                "+Bundle-Version: 2.0.11",
                " Bundle-ActivationPolicy: lazy",
                "diff --git a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml",
                "index 877957f0b4..7fb11c4c4d 100644",
                "--- a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml",
                "+++ b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml",
                "@@ -20,3 +20,3 @@ under the License.",
                " <site>",
                "-   <bundle id=\"org.apache.syncope.ide.eclipse.plugin\" version=\"2.0.11.qualifier\">",
                "+   <bundle id=\"org.apache.syncope.ide.eclipse.plugin\" version=\"2.0.11\">",
                "       <category name=\"apachesyncope\"/>"
            ],
            "changed_files": [
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "16fbc7ab72712842a90e507334095b4e59ae1387"
                ],
                [
                    "no-tag",
                    "56270131fb24a07dfcd5a66c0be021a750b43ac0"
                ],
                [
                    "no-tag",
                    "a0f1e9c1bf46aab835aed23336f5548228378712"
                ],
                [
                    "no-tag",
                    "e35e895b1e49ff631c7e319412ef14bb173234c5"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "65578cf09886bb56505cfbe6c95c76778e5d307d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540805853,
            "hunks": 1,
            "message": "Upgrading Joda",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index e3cb6eb13f..e5d5f2c6d4 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -431,3 +431,3 @@ under the License.",
                "-    <joda.version>2.10</joda.version>",
                "+    <joda.version>2.10.1</joda.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8e03fae11f54c24f99534f61cd68e0d017b12b71"
                ],
                [
                    "no-tag",
                    "5c336c978bcb5b06cefd47b9a84cad93ef13955d"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "774ba5999de999366d1da3674b184825ebf2432f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1532179222,
            "hunks": 1,
            "message": "Upgrading the Apache root POM",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 7729564c18..bc191cd47c 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -34,3 +34,3 @@ under the License.",
                "     <artifactId>apache</artifactId>",
                "-    <version>19</version>",
                "+    <version>20</version>",
                "     <relativePath />"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8465be431314c2643d60f1ceece4522c8fbb8bc5"
                ],
                [
                    "no-tag",
                    "eec3e257ed1e53604b92766ccad75fd97770822f"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2e1e86a6486a446b4705a7c905fb6471e59cc03e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541171106,
            "hunks": 4,
            "message": "Updating Eclipse files for next development iteration",
            "diff": [
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "index bc46f8d659..0707e26b59 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "@@ -4,3 +4,3 @@ Bundle-Name: Apache Syncope Eclipse Plugin",
                " Bundle-SymbolicName: org.apache.syncope.ide.eclipse.plugin;singleton:=true",
                "-Bundle-Version: 2.0.11",
                "+Bundle-Version: 2.0.12.qualifier",
                " Bundle-Activator: org.apache.syncope.ide.eclipse.plugin.Activator",
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "index ff5a58daf1..2208d20ad5 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "@@ -4,3 +4,3 @@ Bundle-Name: org.apache.syncope.ide.eclipse.tests",
                " Bundle-SymbolicName: org.apache.syncope.ide.eclipse.tests;singleton:=true",
                "-Bundle-Version: 2.0.11",
                "+Bundle-Version: 2.0.12.qualifier",
                " Bundle-ActivationPolicy: lazy",
                "diff --git a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/pom.xml b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/pom.xml",
                "index 30020bc2cc..bc30b933cb 100644",
                "--- a/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/pom.xml",
                "+++ b/ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-ide-eclipse</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.12-SNAPSHOT</version>",
                "     <relativePath>../../</relativePath>",
                "diff --git a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml",
                "index 7fb11c4c4d..bbce159000 100644",
                "--- a/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml",
                "+++ b/ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml",
                "@@ -20,3 +20,3 @@ under the License.",
                " <site>",
                "-   <bundle id=\"org.apache.syncope.ide.eclipse.plugin\" version=\"2.0.11\">",
                "+   <bundle id=\"org.apache.syncope.ide.eclipse.plugin\" version=\"2.0.12.qualifier\">",
                "       <category name=\"apachesyncope\"/>"
            ],
            "changed_files": [
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF",
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/META-INF/MANIFEST.MF",
                "ide/eclipse/bundles/org.apache.syncope.ide.eclipse.tests/pom.xml",
                "ide/eclipse/releng/org.apache.syncope.ide.eclipse.site/category.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5a33ec0e2176e8e1c5e3ada6a19fb901525af2aa"
                ],
                [
                    "no-tag",
                    "872dc4030a54e7cdbd2690c0dabab481a71c5d5d"
                ]
            ],
            "tags": [
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "84ce68f898bb170ccd9eb3be1680359e16ea681f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538721139,
            "hunks": 1,
            "message": "Upgrading PDFBox",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 9f2a8b45d8..c78151fe2e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1303,3 +1303,3 @@ under the License.",
                "         <artifactId>pdfbox</artifactId>",
                "-        <version>2.0.11</version>",
                "+        <version>2.0.12</version>",
                "       </dependency>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "81b214af72c475631409a2cb252a2d08d0b31121"
                ],
                [
                    "no-tag",
                    "394530c1bc00e6ed49890035c3af767f9f39bda4"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "96569beea8cefed71f3d649c44d93021040f77a9",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540883269,
            "hunks": 2,
            "message": "Upgrading PostgreSQL Docker image version",
            "diff": [
                "diff --git a/docker/src/main/resources/docker-compose/docker-compose-postgresql.yml b/docker/src/main/resources/docker-compose/docker-compose-postgresql.yml",
                "index 862a051b22..0c42ede971 100644",
                "--- a/docker/src/main/resources/docker-compose/docker-compose-postgresql.yml",
                "+++ b/docker/src/main/resources/docker-compose/docker-compose-postgresql.yml",
                "@@ -23,3 +23,3 @@ services:",
                "    db:",
                "-     image: crunchydata/crunchy-postgres:centos7-10.3-1.8.2",
                "+     image: crunchydata/crunchy-postgres:centos7-10.5-2.1.0",
                "      restart: always",
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index ae6e7fd300..f9d4daa09b 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -619,3 +619,3 @@ under the License.",
                "                 <image>",
                "-                  <name>crunchydata/crunchy-postgres:centos7-10.3-1.8.2</name>",
                "+                  <name>crunchydata/crunchy-postgres:centos7-10.5-2.1.0</name>",
                "                   <run>"
            ],
            "changed_files": [
                "docker/src/main/resources/docker-compose/docker-compose-postgresql.yml",
                "fit/core-reference/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "65e5f787d95ff1c7e3c46fd42af6e1c5704bdaab"
                ],
                [
                    "no-tag",
                    "3fe7d82ff6cdf681476d17ab06d460c698ec1734"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c3c91e31e635b28886ed9eb0f4a2773dce055f7e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1542098641,
            "hunks": 2,
            "message": "[SYNCOPE-1396] Fix build",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc",
                "index 71e6bc60a5..baeafcf988 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc",
                "@@ -410,5 +410,5 @@ than JSON (default), to select",
                " https://en.wikipedia.org/wiki/HTTP_compression[HTTP compression^] or to set the",
                "-https://cxf.apache.org/javadoc/latest/org/apache/cxf/configuration/jsse/TLSClientParameters.html[TLS client configuration^]",
                "+http://cxf.apache.org/javadoc/latest-3.0.x/org/apache/cxf/configuration/jsse/TLSClientParameters.html[TLS client configuration^]",
                " (more options in the",
                "-http://cxf.apache.org/javadoc/latest-3.0.x/org/apache/cxf/configuration/jsse/TLSClientParameters.html[Javadoc^]):",
                "+http://syncope.apache.org/apidocs/2.0/org/apache/syncope/client/lib/SyncopeClientFactoryBean.html[Javadoc^]):"
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1396": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1396",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fbdca6337af79b93267a9384a61181eaf3c1cb5a",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541166278,
            "hunks": 6,
            "message": "Adjusting release process",
            "diff": [
                "diff --git a/ide/pom.xml b/ide/pom.xml",
                "index efef4ba878..bca25039ef 100644",
                "--- a/ide/pom.xml",
                "+++ b/ide/pom.xml",
                "@@ -124,2 +124,7 @@ under the License.",
                "       </build>",
                "+",
                "+      <modules>",
                "+\t<module>eclipse</module>",
                "+\t<module>netbeans</module>",
                "+      </modules>",
                "     </profile>",
                "diff --git a/src/site/xdoc/release-process.xml b/src/site/xdoc/release-process.xml",
                "index d77b2f3d27..d6f32dc21c 100644",
                "--- a/src/site/xdoc/release-process.xml",
                "+++ b/src/site/xdoc/release-process.xml",
                "@@ -313,3 +313,3 @@ mvn -PskipTests,all",
                "-cd standalone/target/standalone/apache-tomcat-* && ./bin/startup.sh",
                "+cd standalone/target/standalone/apache-tomcat-* && chmod 755 bin/*.sh && ./bin/startup.sh",
                "@@ -318,5 +318,5 @@ curl -o /tmp/syncope.wadl http://localhost:9080/syncope/syncope.wadl",
                " curl -o /tmp/index.html http://localhost:9080/syncope/index.html",
                "-sed -i 's/\\/syncope\\/webjars\\/jquery\\/2.2.4\\/jquery.min.js/https:\\/\\/code.jquery.com\\/jquery-2.2.4.min.js/' /tmp/index.html ",
                "-sed -i 's/\\/syncope\\/webjars\\/jquery-ui\\/1.11.4\\/jquery-ui.min.js/http:\\/\\/code.jquery.com\\/ui\\/1.11.4\\/jquery-ui.min.js/' /tmp/index.html               ",
                "-sed -i 's/\\/syncope\\/webjars\\/jquery-ui-themes\\/1.11.4\\/smoothness\\/jquery-ui.min.css/https:\\/\\/code.jquery.com\\/ui\\/1.11.4\\/themes\\/smoothness\\/jquery-ui.css/' /tmp/index.html ",
                "+sed -i 's/\\/syncope\\/webjars\\/jquery\\/3.3.1-1\\/jquery.min.js/https:\\/\\/code.jquery.com\\/jquery-3.3.1.min.js/' /tmp/index.html ",
                "+sed -i 's/\\/syncope\\/webjars\\/jquery-ui\\/1.12.1\\/jquery-ui.min.js/http:\\/\\/code.jquery.com\\/ui\\/1.12.1\\/jquery-ui.min.js/' /tmp/index.html               ",
                "+sed -i 's/\\/syncope\\/webjars\\/jquery-ui-themes\\/1.12.1\\/smoothness\\/jquery-ui.min.css/https:\\/\\/code.jquery.com\\/ui\\/1.12.1\\/themes\\/smoothness\\/jquery-ui.css/' /tmp/index.html ",
                "@@ -328,3 +328,3 @@ sed -i 's/\\/syncope\\/webjars\\/highlightjs\\/9.8.0\\/highlight.min.js/http:\\/\\/cdnj",
                " # else if releasing from 2_1_X",
                "-curl -o /tmp/schema_1_syncope2.html http://localhost:9080/syncope/schema_1_syncope21.html",
                "+curl -o /tmp/schema_1_syncope21.html http://localhost:9080/syncope/schema_1_syncope21.html",
                " sed -i 's/\\/syncope\\/webjars\\/highlightjs\\/9.8.0\\/styles\\/default.min.css/http:\\/\\/cdnjs.cloudflare.com\\/ajax\\/libs\\/highlight.js\\/9.8.0\\/styles\\/default.min.css/' /tmp/schema_1_syncope21.html ",
                "@@ -342,6 +342,6 @@ cd <absolute path to/site>/$VERSION",
                " # if releasing from 2_0_X",
                "-mkdir -p $VERSION/rest/2.0",
                "-mv /tmp/index.html $VERSION/rest/2.0",
                "-mv /tmp/schema_1_syncope2.html $VERSION/rest/2.0",
                "-mv /tmp/syncope.wadl $VERSION/rest/2.0",
                "+mkdir -p rest/2.0",
                "+mv /tmp/index.html rest/2.0",
                "+mv /tmp/schema_1_syncope2.html rest/2.0",
                "+mv /tmp/syncope.wadl rest/2.0",
                " cp $SYNCOPE_SITE_DIR/target/generated-docs/getting-started.* docs/2.0/",
                "@@ -360,6 +360,6 @@ svn copy docs/2.1/ $VERSION/docs/",
                " # else if releasing from 2_1_X",
                "-mkdir -p $VERSION/rest/2.1",
                "-mv /tmp/index.html $VERSION/rest/2.1",
                "-mv /tmp/schema_1_syncope21.html $VERSION/rest/2.1",
                "-mv /tmp/syncope.wadl $VERSION/rest/2.1",
                "+mkdir -p rest/2.1",
                "+mv /tmp/index.html rest/2.1",
                "+mv /tmp/schema_1_syncope21.html rest/2.1",
                "+mv /tmp/syncope.wadl rest/2.1",
                " cp $SYNCOPE_SITE_DIR/target/generated-docs/getting-started.* docs/2.1/"
            ],
            "changed_files": [
                "ide/pom.xml",
                "src/site/xdoc/release-process.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c59eaf84101105fd57e5c1d56a36b5c760d94be1"
                ],
                [
                    "no-tag",
                    "58192595ae4ec7341f834a35b763b121abaa0c30"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d0b2c67b33789258c6162a6925cd91f9cbdf4231",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537511334,
            "hunks": 6,
            "message": "Upgrading Jackson, Elasticsearch, Tika and Swagger",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index ee8e6f6eec..da901dd597 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -393,3 +393,3 @@ under the License.",
                "-    <jackson.version>2.9.6</jackson.version>",
                "+    <jackson.version>2.9.7</jackson.version>",
                "@@ -417,3 +417,3 @@ under the License.",
                "-    <elasticsearch.version>6.4.0</elasticsearch.version>",
                "+    <elasticsearch.version>6.4.1</elasticsearch.version>",
                "@@ -429,3 +429,3 @@ under the License.",
                "-    <tika.version>1.18</tika.version>",
                "+    <tika.version>1.19</tika.version>",
                "@@ -443,3 +443,3 @@ under the License.",
                "-    <swagger-core.version>2.0.4</swagger-core.version>    ",
                "+    <swagger-core.version>2.0.5</swagger-core.version>    ",
                "     <swagger-ui.version>3.18.2</swagger-ui.version>",
                "@@ -2298,3 +2298,3 @@ under the License.",
                "             <link>https://commons.apache.org/proper/commons-jexl/apidocs/</link>",
                "-            <link>https://tika.apache.org/1.18/api/</link>",
                "+            <link>https://tika.apache.org/1.19/api/</link>",
                "             <link>https://docs.spring.io/spring/docs/5.0.x/javadoc-api/</link>",
                "@@ -2303,3 +2303,4 @@ under the License.",
                "             <link>https://build.shibboleth.net/nexus/content/sites/site/java-opensaml/3.3.0/apidocs/</link>",
                "-\t    <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/elasticsearch/6.4.0/index.html</link>",
                "+\t    <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/elasticsearch/6.4.1/index.html</link>",
                "+\t    <link>http://docs.swagger.io/swagger-core/v2.0.5/apidocs/</link>",
                "           </links>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b4f448e69a6b38e8b7c5c26f0b226cadd721eea3"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d7093b5dbde9e7b703075ba378cf00155bf12794",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540986297,
            "hunks": 1,
            "message": "Adding skip of buildnumber-maven-plugin to the skipTests profile",
            "diff": [
                "diff --git a/core/logic/pom.xml b/core/logic/pom.xml",
                "index 445552e9c2..981884eba7 100644",
                "--- a/core/logic/pom.xml",
                "+++ b/core/logic/pom.xml",
                "@@ -109,2 +109,3 @@ under the License.",
                "           <doUpdate>false</doUpdate>",
                "+          <skip>${skipTests}</skip>",
                "         </configuration>"
            ],
            "changed_files": [
                "core/logic/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "bfd92295d145ec3996a1094d90212f6e87f048a8"
                ],
                [
                    "no-tag",
                    "198abc2983da3b31df9db39905ae51258bb5bc41"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8973b910e7e0195a709caf36f293f268e579cca3",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540905797,
            "hunks": 1,
            "message": "Upgrading Maven on AppVeyor",
            "diff": [
                "diff --git a/appveyor.yml b/appveyor.yml",
                "index c94ff32b71..8ebe203a58 100644",
                "--- a/appveyor.yml",
                "+++ b/appveyor.yml",
                "@@ -25,3 +25,3 @@ install:",
                "       if (!(Test-Path -Path \"C:\\maven\" )) {",
                "-        (new-object System.Net.WebClient).DownloadFile('https://www.apache.org/dist/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.zip', 'C:\\maven-bin.zip')",
                "+        (new-object System.Net.WebClient).DownloadFile('https://www.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.zip', 'C:\\maven-bin.zip')",
                "         [System.IO.Compression.ZipFile]::ExtractToDirectory(\"C:\\maven-bin.zip\", \"C:\\maven\")"
            ],
            "changed_files": [
                "appveyor.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9fc33d2dc0d26d49059c3c14b51e41adcd1419d9"
                ],
                [
                    "no-tag",
                    "54ea52c7f5468630f5b3159bfd13c387ffa61dc5"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e16293b36986a0598f693d87829ed11a410c7ad9",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539272604,
            "hunks": 2,
            "message": "Remove unused import",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java",
                "index 7883558122..d5837fc766 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java",
                "@@ -78,3 +78,2 @@ import org.identityconnectors.framework.common.objects.ObjectClass;",
                " import org.identityconnectors.framework.common.objects.OperationOptions;",
                "-import org.identityconnectors.framework.common.objects.ResultsHandler;",
                " import org.identityconnectors.framework.common.objects.SearchResult;",
                "@@ -409,20 +408,20 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {",
                "-        SearchResult searchResult = connFactory.getConnector(resource).search(",
                "-                objectClass, null, new SearchResultsHandler() {",
                "+        SearchResult searchResult = connFactory.getConnector(resource).",
                "+                search(objectClass, null, new SearchResultsHandler() {",
                "-            private int count;",
                "+                    private int count;",
                "-            @Override",
                "-            public boolean handle(final ConnectorObject connectorObject) {",
                "-                connObjects.add(ConnObjectUtils.getConnObjectTO(connectorObject));",
                "-                // safety protection against uncontrolled result size",
                "-                count++;",
                "-                return count < size;",
                "-            }",
                "+                    @Override",
                "+                    public boolean handle(final ConnectorObject connectorObject) {",
                "+                        connObjects.add(ConnObjectUtils.getConnObjectTO(connectorObject));",
                "+                        // safety protection against uncontrolled result size",
                "+                        count++;",
                "+                        return count < size;",
                "+                    }",
                "-            @Override",
                "-            public void handleResult(final SearchResult sr) {",
                "-                // do nothing",
                "-            }",
                "-        }, size, pagedResultsCookie, orderBy, options);",
                "+                    @Override",
                "+                    public void handleResult(final SearchResult sr) {",
                "+                        // do nothing",
                "+                    }",
                "+                }, size, pagedResultsCookie, orderBy, options);"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "295f0e95c87f992978841f9fd68627c95fe805a4"
                ],
                [
                    "no-tag",
                    "239bdd48fc6241ae859d4ee78d3f597edad9827c"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fca5bd7663b2eec07837876ac6020ebb9174dea6",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541152986,
            "hunks": 4,
            "message": "Small optimimzation",
            "diff": [
                "diff --git a/core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java b/core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java",
                "index 86a1847133..3da062e00a 100644",
                "--- a/core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java",
                "+++ b/core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java",
                "@@ -122,5 +122,3 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {",
                "         PropagationByResource propByRes = new PropagationByResource();",
                "-        realm.getResourceKeys().forEach(resource -> {",
                "-            propByRes.add(ResourceOperation.CREATE, resource);",
                "-        });",
                "+        propByRes.addAll(ResourceOperation.CREATE, realm.getResourceKeys());",
                "         List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "@@ -187,5 +185,3 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {",
                "         PropagationByResource propByRes = new PropagationByResource();",
                "-        realm.getResourceKeys().forEach(resource -> {",
                "-            propByRes.add(ResourceOperation.DELETE, resource);",
                "-        });",
                "+        propByRes.addAll(ResourceOperation.DELETE, realm.getResourceKeys());",
                "         List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);",
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "index 82c507cd58..e0dd7285df 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java",
                "@@ -238,5 +238,3 @@ public class DefaultRealmPullResultHandler",
                "             PropagationByResource propByRes = new PropagationByResource();",
                "-            for (String resource : realm.getResourceKeys()) {",
                "-                propByRes.add(ResourceOperation.CREATE, resource);",
                "-            }",
                "+            propByRes.addAll(ResourceOperation.CREATE, realm.getResourceKeys());",
                "             if (unmatchingRule == UnmatchingRule.ASSIGN) {",
                "@@ -611,5 +609,3 @@ public class DefaultRealmPullResultHandler",
                "                         PropagationByResource propByRes = new PropagationByResource();",
                "-                        for (String resource : realm.getResourceKeys()) {",
                "-                            propByRes.add(ResourceOperation.DELETE, resource);",
                "-                        }",
                "+                        propByRes.addAll(ResourceOperation.DELETE, realm.getResourceKeys());",
                "                         List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);"
            ],
            "changed_files": [
                "core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java",
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5b8846b2ac7dd48523bd03e73f714c3584c72c0e"
                ],
                [
                    "no-tag",
                    "e4c92705c6fb918bddd8859681071b6a4610dddd"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f0fa7c4f6b7d7a476eab75081ef339de5d9f5421",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1533025834,
            "hunks": 3,
            "message": "Upgrading Spring, Spring Security, Log4J and Swagger UI",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 5e8aec3e80..3025c0ac9a 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -395,4 +395,4 @@ under the License.",
                "-    <spring.version>5.0.7.RELEASE</spring.version>",
                "-    <spring-security.version>5.0.6.RELEASE</spring-security.version>",
                "+    <spring.version>5.0.8.RELEASE</spring.version>",
                "+    <spring-security.version>5.0.7.RELEASE</spring-security.version>",
                "@@ -419,3 +419,3 @@ under the License.",
                "-    <log4j.version>2.11.0</log4j.version>",
                "+    <log4j.version>2.11.1</log4j.version>",
                "     <disruptor.version>3.4.2</disruptor.version>",
                "@@ -444,3 +444,3 @@ under the License.",
                "     <swagger-core.version>2.0.2</swagger-core.version>    ",
                "-    <swagger-ui.version>3.17.4</swagger-ui.version>",
                "+    <swagger-ui.version>3.17.6</swagger-ui.version>",
                "     <guava.version>20.0</guava.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "37859273bc6b68a8444516f15ef4609ffe6fed64"
                ]
            ],
            "tags": [
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "52b4d30c22bb7c58903b2f88155a7608a7824bd8",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540190461,
            "hunks": 1,
            "message": "Upgrading AngularJS",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 27ddd58b61..43af407371 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -473,3 +473,3 @@ under the License.",
                "-    <angular.version>1.7.3</angular.version>",
                "+    <angular.version>1.7.5</angular.version>",
                "     <angular-resource.version>1.7.0</angular-resource.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "30286d96515deb9a03c551d37129f9584ac31793"
                ],
                [
                    "no-tag",
                    "f863108666cca398ff188d28dd70b5bd46e48152"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b76cb876c602e90d1199728aca532defe0393ba8",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534487550,
            "hunks": 1,
            "message": "Small link fix",
            "diff": [
                "diff --git a/src/site/xdoc/release-process.xml b/src/site/xdoc/release-process.xml",
                "index 203466ad25..c9c8cadea8 100644",
                "--- a/src/site/xdoc/release-process.xml",
                "+++ b/src/site/xdoc/release-process.xml",
                "@@ -148,3 +148,3 @@ under the License.",
                "         <p>",
                "-          For more information please take a look at <a href=\"building#fitcore-reference\">build instructions</a>.",
                "+          For more information please take a look at <a href=\"building#fit.2Fcore-reference\">build instructions</a>.",
                "         </p>"
            ],
            "changed_files": [
                "src/site/xdoc/release-process.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8e632632359391b49047c42c91e170ba2a602369"
                ],
                [
                    "no-tag",
                    "dd7273027ffe1e2a83d9f6588bb39e4d93fa8579"
                ]
            ],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ee34e7fcba0e1e5f9338be5e13cda6dc8015a5d7",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534144138,
            "hunks": 3,
            "message": "Upgrading CXF and Swagger",
            "diff": [
                "diff --git a/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchClientFactoryBean.java b/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchClientFactoryBean.java",
                "index a8858dc209..32732e9b09 100644",
                "--- a/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchClientFactoryBean.java",
                "+++ b/client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchClientFactoryBean.java",
                "@@ -37,16 +37,2 @@ public class BatchClientFactoryBean extends JAXRSClientFactoryBean {",
                "-    private ClassLoader proxyLoader;",
                "-",
                "-    private boolean inheritHeaders;",
                "-",
                "-    @Override",
                "-    public void setClassLoader(final ClassLoader loader) {",
                "-        this.proxyLoader = loader;",
                "-    }",
                "-",
                "-    @Override",
                "-    public void setInheritHeaders(final boolean inheritHeaders) {",
                "-        this.inheritHeaders = inheritHeaders;",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/pom.xml b/pom.xml",
                "index 02188ab912..5aa6d05e62 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -391,3 +391,3 @@ under the License.",
                "-    <cxf.version>3.2.5</cxf.version>",
                "+    <cxf.version>3.2.6</cxf.version>",
                "@@ -443,3 +443,3 @@ under the License.",
                "-    <swagger-core.version>2.0.2</swagger-core.version>    ",
                "+    <swagger-core.version>2.0.3</swagger-core.version>    ",
                "     <swagger-ui.version>3.17.6</swagger-ui.version>"
            ],
            "changed_files": [
                "client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchClientFactoryBean.java",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7edc502e5da698ba768ce255c9306fe6017f05f0"
                ]
            ],
            "tags": [
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "aa799d29eb30d1e080e93359f6dd69d594c684f2",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536215997,
            "hunks": 1,
            "message": "Upgrading Swagger Core",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 79487d7851..aaa11f56e7 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -443,3 +443,3 @@ under the License.",
                "-    <swagger-core.version>2.0.3</swagger-core.version>    ",
                "+    <swagger-core.version>2.0.4</swagger-core.version>    ",
                "     <swagger-ui.version>3.18.2</swagger-ui.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fb6529e75850b1159dab6553687f999dcf1b13f7"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0c9772723c94bfb8a8df40b45a8c97567c3901f3",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541830032,
            "hunks": 1,
            "message": "Ouch, checkstyle...",
            "diff": [
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "index 6800dbe283..0dbc686445 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java",
                "@@ -358,3 +358,3 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement",
                "                     filter(clause -> !ArrayUtils.contains(ORDER_BY_NOT_ALLOWED, clause.getField())).",
                "-                    collect(Collectors.toList());;",
                "+                    collect(Collectors.toList());",
                "         }"
            ],
            "changed_files": [
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "17203fef07ef135ad11bd2a3b452e95c3ca5298e"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "23c6d6a4ce8c3882192596e8edff47925481cdd1",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539585346,
            "hunks": 1,
            "message": "Upgrading Groovy",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 0b3d7c1161..7417327e87 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -408,3 +408,3 @@ under the License.",
                "-    <groovy.version>2.5.2</groovy.version>",
                "+    <groovy.version>2.5.3</groovy.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a7fce10cd086f0be5a736d61b58d8bb7a4df8468"
                ],
                [
                    "no-tag",
                    "42c5d525726513e4282d86aeacfde2276a6c23f9"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "55ff9918c3e813777001557e6906d1d3fb87b70b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536222523,
            "hunks": 1,
            "message": "Adding small guide to select the appropriate workflow adapter",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/concepts/workflow.adoc b/src/main/asciidoc/reference-guide/concepts/workflow.adoc",
                "index 4b8002d472..b7b339ba71 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/workflow.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/workflow.adoc",
                "@@ -77,2 +77,24 @@ https://camunda.org/[Camunda^] or http://jbpm.jboss.org/[jBPM^].",
                "+[[which-user-worflow-adapter]]",
                "+[TIP]",
                "+.Which workflow adapter for users?",
                "+====",
                "+. Do you need <<approval,approval>> management? <<flowable-user-workflow-adapter,Flowable>>",
                "+. If approval management is not needed, do you want to customize the internal user processing, or attach custom logic",
                "+to it? Provide a Java class with your customizations, extending",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java[DefaultUserWorkflowAdapter^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/tree/2_1_X/core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java[DefaultUserWorkflowAdapter^]",
                "+endif::[]",
                "+. No approval nor customizations needed? Stick with",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java[DefaultUserWorkflowAdapter^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/tree/2_1_X/core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java[DefaultUserWorkflowAdapter^]",
                "+endif::[]",
                "+====",
                "+",
                " ==== Flowable User Workflow Adapter"
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/concepts/workflow.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f1b6a47cc50c700b9318337566f17335cc30c3b2"
                ],
                [
                    "no-tag",
                    "98179a4a115eb642076c8ac2e8133b6226499bdf"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "70008957946681927fa4d3eeb60f51fcc29426c9",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1542094942,
            "hunks": 2,
            "message": "Reference ADMembershipPullActions in the docs",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc b/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc",
                "index 628158f1ad..8e0a1c7391 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc",
                "@@ -134,3 +134,3 @@ https://github.com/apache/syncope/tree/2_0_X/core/provisioning-java/src/main/jav",
                " endif::[]",
                "-| If a User is associated with a Group in Syncope, keep the corresponding User as a member of the corresponding Group in LDAP.",
                "+| If a User is associated with a Group in Syncope, keep the corresponding User as a member of the corresponding Group in LDAP or AD.",
                "diff --git a/src/main/asciidoc/reference-guide/concepts/provisioning/pull.adoc b/src/main/asciidoc/reference-guide/concepts/provisioning/pull.adoc",
                "index dfc775a8d5..14897af3d1 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/provisioning/pull.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/provisioning/pull.adoc",
                "@@ -105,2 +105,11 @@ Some examples are included by default, see the table below.",
                "+|",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/ADMembershipPullActions.java[ADMembershipPullActions^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/2_0_X/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/ADMembershipPullActions.java[ADMembershipPullActions^]",
                "+endif::[]",
                "+| If a User is associated with a Group in AD, keep the corresponding User as a member of the corresponding Group in Syncope.",
                "+",
                " | "
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc",
                "src/main/asciidoc/reference-guide/concepts/provisioning/pull.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b5f4cb42d3ed31f96cb85e0aafe00c20a89e96dd"
                ],
                [
                    "no-tag",
                    "b9779f3c38626444750852328bd5a8a7ed511937"
                ]
            ],
            "tags": [
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "54e25ff08b0beb6d11e80ac6e724c4e90b33943f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541157552,
            "hunks": 40,
            "message": "Updating downloads site page for release",
            "diff": [
                "diff --git a/src/site/xdoc/downloads.xml b/src/site/xdoc/downloads.xml",
                "index 6603c17462..a6907a5ac5 100644",
                "--- a/src/site/xdoc/downloads.xml",
                "+++ b/src/site/xdoc/downloads.xml",
                "@@ -38,4 +38,4 @@ under the License.",
                "-      <subsection name=\"2.1.1 Fusion\">",
                "-        <p>Release date: August 17th 2018</p>",
                "+      <subsection name=\"2.1.2 Fusion\">",
                "+        <p>Release date: November 2nd 2018</p>",
                "         <p>",
                "@@ -67,7 +67,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.1/syncope-2.1.1-source-release.zip\">syncope-2.1.1-source-release.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.2/syncope-2.1.2-source-release.zip\">syncope-2.1.2-source-release.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-2.1.1-source-release.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-2.1.1-source-release.zip.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/syncope-2.1.2-source-release.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/syncope-2.1.2-source-release.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -76,7 +76,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.1/syncope-standalone-2.1.1-distribution.zip\">syncope-standalone-2.1.1-distribution.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.2/syncope-standalone-2.1.2-distribution.zip\">syncope-standalone-2.1.2-distribution.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-standalone-2.1.1-distribution.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-standalone-2.1.1-distribution.zip.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/syncope-standalone-2.1.2-distribution.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/syncope-standalone-2.1.2-distribution.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -85,7 +85,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.1/apache-syncope-2.1.1.deb\">apache-syncope-2.1.1.deb</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.2/apache-syncope-2.1.2.deb\">apache-syncope-2.1.2.deb</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/apache-syncope-2.1.1.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/apache-syncope-2.1.1.deb.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/apache-syncope-2.1.2.deb.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/apache-syncope-2.1.2.deb.sha512\">sha512</a>",
                "               </td>",
                "@@ -94,7 +94,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.1/apache-syncope-console-2.1.1.deb\">apache-syncope-console-2.1.1.deb</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.2/apache-syncope-console-2.1.2.deb\">apache-syncope-console-2.1.2.deb</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/apache-syncope-console-2.1.1.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/apache-syncope-console-2.1.1.deb.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/apache-syncope-console-2.1.2.deb.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/apache-syncope-console-2.1.2.deb.sha512\">sha512</a>",
                "               </td>",
                "@@ -103,7 +103,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.1/apache-syncope-enduser-2.1.1.deb\">apache-syncope-enduser-2.1.1.deb</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.2/apache-syncope-enduser-2.1.2.deb\">apache-syncope-enduser-2.1.2.deb</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/apache-syncope-enduser-2.1.1.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/apache-syncope-enduser-2.1.1.deb.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/apache-syncope-enduser-2.1.2.deb.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/apache-syncope-enduser-2.1.2.deb.sha512\">sha512</a>",
                "               </td>",
                "@@ -112,7 +112,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.1/syncope-installer-2.1.1-uber.jar\">syncope-installer-2.1.1.jar</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.2/syncope-installer-2.1.2-uber.jar\">syncope-installer-2.1.2.jar</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-installer-2.1.1-uber.jar.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-installer-2.1.1-uber.jar.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/syncope-installer-2.1.2-uber.jar.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/syncope-installer-2.1.2-uber.jar.sha512\">sha512</a>",
                "               </td>",
                "@@ -121,7 +121,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.1/syncope-client-cli-2.1.1.zip\">syncope-client-cli-2.1.1.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.2/syncope-client-cli-2.1.2.zip\">syncope-client-cli-2.1.2.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-client-cli-2.1.1.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-client-cli-2.1.1.zip.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/syncope-client-cli-2.1.2.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/syncope-client-cli-2.1.2.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -130,7 +130,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.1/syncope-core-upgrade-2.1.1.zip\">syncope-core-upgrade-2.1.1.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.2/syncope-core-upgrade-2.1.2.zip\">syncope-core-upgrade-2.1.2.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-core-upgrade-2.1.1.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-core-upgrade-2.1.1.zip.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/syncope-core-upgrade-2.1.2.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/syncope-core-upgrade-2.1.2.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -139,7 +139,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.1/org.apache.syncope.ide.eclipse.site-2.1.1.zip\">org.apache.syncope.ide.eclipse.site-2.1.1.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.2/org.apache.syncope.ide.eclipse.site-2.1.2.zip\">org.apache.syncope.ide.eclipse.site-2.1.2.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/org.apache.syncope.ide.eclipse.site-2.1.1.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/org.apache.syncope.ide.eclipse.site-2.1.1.zip.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/org.apache.syncope.ide.eclipse.site-2.1.2.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/org.apache.syncope.ide.eclipse.site-2.1.2.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -148,7 +148,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.1/syncope-ide-netbeans-2.1.1.nbm\">syncope-ide-netbeans-2.1.1.nbm</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.1.2/syncope-ide-netbeans-2.1.2.nbm\">syncope-ide-netbeans-2.1.2.nbm</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-ide-netbeans-2.1.1.nbm.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.1.1/syncope-ide-netbeans-2.1.1.nbm.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/syncope-ide-netbeans-2.1.2.nbm.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.1.2/syncope-ide-netbeans-2.1.2.nbm.sha512\">sha512</a>",
                "               </td>",
                "@@ -159,4 +159,4 @@ under the License.",
                "-      <subsection name=\"2.0.10 Jazz\">",
                "-        <p>Release date: August 17th 2018</p>",
                "+      <subsection name=\"2.0.11 Jazz\">",
                "+        <p>Release date: November 2nd 2018</p>",
                "         <p>",
                "@@ -188,7 +188,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.10/syncope-2.0.10-source-release.zip\">syncope-2.0.10-source-release.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.11/syncope-2.0.11-source-release.zip\">syncope-2.0.11-source-release.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-2.0.10-source-release.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-2.0.10-source-release.zip.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/syncope-2.0.11-source-release.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/syncope-2.0.11-source-release.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -197,7 +197,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.10/syncope-standalone-2.0.10-distribution.zip\">syncope-standalone-2.0.10-distribution.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.11/syncope-standalone-2.0.11-distribution.zip\">syncope-standalone-2.0.11-distribution.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-standalone-2.0.10-distribution.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-standalone-2.0.10-distribution.zip.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/syncope-standalone-2.0.11-distribution.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/syncope-standalone-2.0.11-distribution.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -206,7 +206,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.10/apache-syncope-2.0.10.deb\">apache-syncope-2.0.10.deb</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.11/apache-syncope-2.0.11.deb\">apache-syncope-2.0.11.deb</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/apache-syncope-2.0.10.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/apache-syncope-2.0.10.deb.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/apache-syncope-2.0.11.deb.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/apache-syncope-2.0.11.deb.sha512\">sha512</a>",
                "               </td>",
                "@@ -215,7 +215,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.10/apache-syncope-console-2.0.10.deb\">apache-syncope-console-2.0.10.deb</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.11/apache-syncope-console-2.0.11.deb\">apache-syncope-console-2.0.11.deb</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/apache-syncope-console-2.0.10.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/apache-syncope-console-2.0.10.deb.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/apache-syncope-console-2.0.11.deb.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/apache-syncope-console-2.0.11.deb.sha512\">sha512</a>",
                "               </td>",
                "@@ -224,7 +224,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.10/apache-syncope-enduser-2.0.10.deb\">apache-syncope-enduser-2.0.10.deb</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.11/apache-syncope-enduser-2.0.11.deb\">apache-syncope-enduser-2.0.11.deb</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/apache-syncope-enduser-2.0.10.deb.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/apache-syncope-enduser-2.0.10.deb.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/apache-syncope-enduser-2.0.11.deb.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/apache-syncope-enduser-2.0.11.deb.sha512\">sha512</a>",
                "               </td>",
                "@@ -233,7 +233,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.10/syncope-installer-2.0.10-uber.jar\">syncope-installer-2.0.10.jar</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.11/syncope-installer-2.0.11-uber.jar\">syncope-installer-2.0.11.jar</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-installer-2.0.10-uber.jar.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-installer-2.0.10-uber.jar.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/syncope-installer-2.0.11-uber.jar.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/syncope-installer-2.0.11-uber.jar.sha512\">sha512</a>",
                "               </td>",
                "@@ -242,7 +242,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.10/syncope-client-cli-2.0.10.zip\">syncope-client-cli-2.0.10.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.11/syncope-client-cli-2.0.11.zip\">syncope-client-cli-2.0.11.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-client-cli-2.0.10.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-client-cli-2.0.10.zip.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/syncope-client-cli-2.0.11.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/syncope-client-cli-2.0.11.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -251,7 +251,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.10/org.apache.syncope.ide.eclipse.site-2.0.10.zip\">org.apache.syncope.ide.eclipse.site-2.0.10.zip</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.11/org.apache.syncope.ide.eclipse.site-2.0.11.zip\">org.apache.syncope.ide.eclipse.site-2.0.11.zip</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/org.apache.syncope.ide.eclipse.site-2.0.10.zip.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/org.apache.syncope.ide.eclipse.site-2.0.10.zip.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/org.apache.syncope.ide.eclipse.site-2.0.11.zip.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/org.apache.syncope.ide.eclipse.site-2.0.11.zip.sha512\">sha512</a>",
                "               </td>",
                "@@ -260,7 +260,7 @@ under the License.",
                "               <td>",
                "-                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.10/syncope-ide-netbeans-2.0.10.nbm\">syncope-ide-netbeans-2.0.10.nbm</a>",
                "+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/2.0.11/syncope-ide-netbeans-2.0.11.nbm\">syncope-ide-netbeans-2.0.11.nbm</a>",
                "               </td>",
                "               <td>",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-ide-netbeans-2.0.10.nbm.asc\">asc</a> ",
                "-                <a href=\"https://www.apache.org/dist/syncope/2.0.10/syncope-ide-netbeans-2.0.10.nbm.sha512\">sha512</a>",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/syncope-ide-netbeans-2.0.11.nbm.asc\">asc</a> ",
                "+                <a href=\"https://www.apache.org/dist/syncope/2.0.11/syncope-ide-netbeans-2.0.11.nbm.sha512\">sha512</a>",
                "               </td>"
            ],
            "changed_files": [
                "src/site/xdoc/downloads.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "251f6211da12d88d95d35348c86d707087b24fab"
                ],
                [
                    "no-tag",
                    "7f11c4b546c2d0941457703b595cec0307006433"
                ],
                [
                    "no-tag",
                    "d95da46884b986fa2bd1cffdb62b9340da03b733"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3f7046b829b212ef145e87136e2471891f61d6e8",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536319233,
            "hunks": 2,
            "message": "Upgrading Camel",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index cd97574746..03a6219ca2 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -412,3 +412,3 @@ under the License.",
                "-    <camel.version>2.22.0</camel.version>\t",
                "+    <camel.version>2.22.1</camel.version>\t",
                "@@ -2304,4 +2304,4 @@ under the License.",
                "             <link>http://fasterxml.github.io/jackson-datatype-joda/javadoc/2.9/</link>",
                "-            <link>http://www.javadoc.io/doc/org.apache.camel/camel-core/2.22.0/</link>",
                "-            <link>http://www.javadoc.io/doc/org.apache.camel/camel-spring/2.22.0/</link>",
                "+            <link>http://www.javadoc.io/doc/org.apache.camel/camel-core/2.22.1/</link>",
                "+            <link>http://www.javadoc.io/doc/org.apache.camel/camel-spring/2.22.1/</link>",
                "             <link>https://ci.apache.org/projects/wicket/apidocs/8.x/</link>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ff64430b84a47913222a6f9d085e670402c229d7"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "348f150640e49bec33165e3cd214a1297b783780",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1533046902,
            "hunks": 17,
            "message": "Clarifying about default account and password rules with Syncope 2.1 and later",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/concepts/policies.adoc b/src/main/asciidoc/reference-guide/concepts/policies.adoc",
                "index d5463cec12..9909fcb626 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/policies.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/policies.adoc",
                "@@ -60,2 +60,42 @@ Account rules define constraints to apply to username values.",
                "+Some implementations are provided out-of-the-box, custom ones can be provided on given deployment.",
                "+",
                "+[TIP]",
                "+====",
                "+As `JAVA` <<implementations,implementation>>, writing custom account rules means:",
                "+",
                "+. providing configuration parameters in an implementation of",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountRuleConf.java[AccountRuleConf^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/master/common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountRuleConf.java[AccountRuleConf^]",
                "+endif::[]",
                "+. enforcing in an implementation of",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java[AccountRule^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java[AccountRule^]",
                "+endif::[]",
                "+annotated via",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRuleConfClass.java[@AccountRuleConfClass^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRuleConfClass.java[@AccountRuleConfClass^]",
                "+endif::[]",
                "+referring to the configuration class.",
                "+",
                "+As `GROOVY` <<implementations,implementation>>, writing custom account rules means implementing",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java[AccountRule^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java[AccountRule^]",
                "+endif::[]",
                "+====",
                "+",
                "+====== Default Account Rule",
                "+",
                " The default account rule (enforced by",
                "@@ -78,3 +118,3 @@ endif::[]",
                " * minimum length - the minimum length to allow; `0` means no limit set;",
                "-* pattern - http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html[Java regular expression pattern^] to",
                "+* pattern - http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html[Java regular expression pattern^] to",
                " match; `NULL` means no match is attempted;",
                "@@ -87,29 +127,6 @@ match; `NULL` means no match is attempted;",
                "-[TIP]",
                "-====",
                "-Writing custom account rules means:",
                "-",
                "-. providing configuration parameters in an implementation of",
                "-ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountRuleConf.java[AccountRuleConf^]",
                "-endif::[]",
                "-ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/master/common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountRuleConf.java[AccountRuleConf^]",
                "-endif::[]",
                "-. implementing enforcement in an implementation of",
                "-ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java[AccountRule^]",
                "-endif::[]",
                "-ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java[AccountRule^]",
                "-endif::[]",
                "-annotated via",
                "-ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRuleConfClass.java[@AccountRuleConfClass^]",
                "-endif::[]",
                "-ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRuleConfClass.java[@AccountRuleConfClass^]",
                "-endif::[]",
                "-referring to the configuration class",
                "-====",
                "+[NOTE]",
                "+Before being able to configure the default account rule as mentioned above, you will need to first create a `JAVA`",
                "+`ACCOUNT_RULE` <<implementations,implementation>> for the `org.apache.syncope.common.lib.policy.DefaultAccountRuleConf`",
                "+class.",
                "@@ -151,3 +168,3 @@ Some implementations are provided out-of-the-box, custom ones can be provided on",
                " ====",
                "-Writing custom account rules means:",
                "+As `JAVA` <<implementations,implementation>>, writing custom password rules means:",
                "@@ -155,13 +172,13 @@ Writing custom account rules means:",
                " ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountRuleConf.java[AccountRuleConf^]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordRuleConf.java[PasswordRuleConf^]",
                " endif::[]",
                " ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/master/common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountRuleConf.java[AccountRuleConf^]",
                "+https://github.com/apache/syncope/blob/master/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordRuleConf.java[PasswordRuleConf^]",
                " endif::[]",
                "-. implementing enforcement in an implementation of",
                "+. enforcing in an implementation of",
                " ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java[AccountRule^]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRule.java[PasswordRule^]",
                " endif::[]",
                " ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java[AccountRule^]",
                "+https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRule.java[PasswordRule^]",
                " endif::[]",
                "@@ -169,8 +186,16 @@ annotated via",
                " ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRuleConfClass.java[@AccountRuleConfClass^]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRuleConfClass.java[@PasswordRuleConfClass^]",
                " endif::[]",
                " ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRuleConfClass.java[@AccountRuleConfClass^]",
                "+https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRuleConfClass.java[@PasswordRuleConfClass^]",
                "+endif::[]",
                "+referring to the configuration class.",
                "+",
                "+As `GROOVY` <<implementations,implementation>>, writing custom account rules means implementing",
                "+ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRule.java[PasswordRule^]",
                "+endif::[]",
                "+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "+https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRule.java[PasswordRule^]",
                " endif::[]",
                "-referring to the configuration class",
                " ====",
                "@@ -220,2 +245,7 @@ endif::[]",
                "+[NOTE]",
                "+Before being able to configure the default password rule as mentioned above, you will need to first create a `JAVA`",
                "+`PASSWORD_RULE` <<implementations,implementation>> for the `org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf`",
                "+class.",
                "+",
                " ====== \"Have I Been Pwned?\" Password Rule",
                "@@ -239,2 +269,7 @@ https://haveibeenpwned.com[\"Have I Been Pwned?\"^] service.",
                "+[NOTE]",
                "+Before being able to configure the \"Have I Been Pwned?\" password rule as mentioned above, you will need to first create",
                "+a `JAVA` `PASSWORD_RULE` <<implementations,implementation>> for the",
                "+`org.apache.syncope.common.lib.policy.HaveIBeenPwnedPasswordRuleConf` class.",
                "+",
                " [[policies-pull]]",
                "diff --git a/src/main/asciidoc/reference-guide/concepts/typemanagement.adoc b/src/main/asciidoc/reference-guide/concepts/typemanagement.adoc",
                "index a38c33b523..ea7f6d617f 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/typemanagement.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/typemanagement.adoc",
                "@@ -38,8 +38,8 @@ When defining a plain schema, the following information must be provided:",
                " ** `Long` - allows to specify a _conversion pattern_ to / from string, according to ",
                "-http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html[DecimalFormat^]",
                "+http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html[DecimalFormat^]",
                " ** `Double` - allows to specify a _conversion pattern_ to / from string, according to ",
                "-http://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html[DecimalFormat^]",
                "+http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html[DecimalFormat^]",
                " ** `Boolean`",
                " ** `Date` - allows to specify a _conversion pattern_ to / from string, according to ",
                "-http://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html[DateFormat^]",
                "+http://docs.oracle.com/javase/8/docs/api/java/text/DateFormat.html[DateFormat^]",
                " ** `Enum`"
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/concepts/policies.adoc",
                "src/main/asciidoc/reference-guide/concepts/typemanagement.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "174588acc8fdd82dbcc21201f8e3cfd707b14ff9"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a27cbdedccfd8e895e4fd38e056807b6583a6dee",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534935513,
            "hunks": 1,
            "message": "Upgrading Commons Lang 3",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 02710d9acb..4136d2860f 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -425,3 +425,3 @@ under the License.",
                "     <commons-jexl.version>3.1</commons-jexl.version>",
                "-    <commons-lang.version>3.7</commons-lang.version>",
                "+    <commons-lang.version>3.8</commons-lang.version>",
                "     <commons-text.version>1.4</commons-text.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3c6e810db2e9897e370a402a2adc4cf99174d107"
                ],
                [
                    "no-tag",
                    "63e1cfd150fd75aa10e415efee40472ed17f2a3e"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b1ad9766d61c1a33d4cf1fc54c057838b4832feb",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540479942,
            "hunks": 2,
            "message": "upgrading aspectjweaver and ui-bootstrap",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 1ca2866714..1387c25cef 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -471,3 +471,3 @@ under the License.",
                "     <angular-ui-router.version>1.0.20</angular-ui-router.version>",
                "-    <ui-bootstrap.version>3.0.4</ui-bootstrap.version>",
                "+    <ui-bootstrap.version>3.0.5</ui-bootstrap.version>",
                "     <angular-ui-select.version>0.19.8</angular-ui-select.version>",
                "@@ -974,3 +974,3 @@ under the License.",
                "         <artifactId>aspectjweaver</artifactId>",
                "-        <version>1.9.1</version>",
                "+        <version>1.9.2</version>",
                "       </dependency>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "09b430a55b37ca06a5db5d922896ff8fe94dac08"
                ],
                [
                    "no-tag",
                    "0d9c5656b2373873dd29c06044e252d0be8e158f"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "96cb078f0bf572f445eeeb9d3221b52009eb7666",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539596015,
            "hunks": 2,
            "message": "Removing junit-platform-surefire-provider",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index da4fb6e8ad..fca1219e47 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1911,9 +1911,2 @@ under the License.",
                "           </configuration>",
                "-          <dependencies>",
                "-            <dependency>",
                "-              <groupId>org.junit.platform</groupId>",
                "-              <artifactId>junit-platform-surefire-provider</artifactId>",
                "-              <version>1.3.1</version>",
                "-            </dependency>",
                "-          </dependencies>",
                "         </plugin>",
                "@@ -1929,9 +1922,2 @@ under the License.",
                "           </configuration>",
                "-          <dependencies>",
                "-            <dependency>",
                "-              <groupId>org.junit.platform</groupId>",
                "-              <artifactId>junit-platform-surefire-provider</artifactId>",
                "-              <version>1.3.1</version>",
                "-            </dependency>",
                "-          </dependencies>",
                "           <executions>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5e2b47541679d72ae3562585a0f32fa0af6ffb2d"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "aebb4460fa7304dd412ea9ad9949c010e345516b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537340918,
            "hunks": 1,
            "message": "Upgrading Wicket",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 03e9c0e1ca..ee8e6f6eec 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -465,5 +465,5 @@ under the License.",
                "-    <wicket.version>8.0.0</wicket.version>",
                "-    <wicket-jqueryui.version>8.0.0</wicket-jqueryui.version>",
                "-    <wicket-bootstrap.version>2.0.3</wicket-bootstrap.version>",
                "+    <wicket.version>8.1.0</wicket.version>",
                "+    <wicket-jqueryui.version>8.1.0</wicket-jqueryui.version>",
                "+    <wicket-bootstrap.version>2.0.4</wicket-bootstrap.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5bdfc7d63d6a5e7c37eea8e62440d8dc9ae37f17"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a3d0345f692ccaaa782fdad4cb995a7bfa214c3b",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1535969915,
            "hunks": 1,
            "message": "AD bundle version upgrade",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 3209c323d3..aa07ba3791 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -385,3 +385,3 @@ under the License.",
                "     <connid.ldap.version>1.5.2</connid.ldap.version>",
                "-    <connid.ad.version>1.3.4</connid.ad.version>",
                "+    <connid.ad.version>1.3.5</connid.ad.version>",
                "     <connid.googleapps.version>1.4.1</connid.googleapps.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6ad136fa611b59d292a8b05bda8aeb516781f85b"
                ],
                [
                    "no-tag",
                    "02eb5fdce8c90bbb3453669b621cf96a7cfffd5b"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d5f8c4756c72b0214028a15e607a2427419e8d0e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536234078,
            "hunks": 1,
            "message": "Unnedded dependency",
            "diff": [
                "diff --git a/core/persistence-jpa/pom.xml b/core/persistence-jpa/pom.xml",
                "index 0e7f64c3bb..9b3db97ca5 100644",
                "--- a/core/persistence-jpa/pom.xml",
                "+++ b/core/persistence-jpa/pom.xml",
                "@@ -104,7 +104,2 @@ under the License.",
                "-    <dependency>",
                "-      <groupId>org.apache.syncope.core</groupId>",
                "-      <artifactId>syncope-core-workflow-api</artifactId>",
                "-      <version>${project.version}</version>",
                "-    </dependency>",
                "     <dependency>"
            ],
            "changed_files": [
                "core/persistence-jpa/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a02b1b6908eb2b592a2976163a3f050e2b075abc"
                ],
                [
                    "no-tag",
                    "c29d6f27c3cad6e795a902db5ba4a42dc76144e6"
                ]
            ],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6c6ccebe20a7569dbc16dbe80bbfecf5d9f062da",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1535118581,
            "hunks": 4,
            "message": "Adding proper LICENSE and NOTICE files to build-tools, as the WAR artifact is now distributed via Maven",
            "diff": [
                "diff --git a/fit/build-tools/pom.xml b/fit/build-tools/pom.xml",
                "index efcc5ff66f..7379a2fa0c 100644",
                "--- a/fit/build-tools/pom.xml",
                "+++ b/fit/build-tools/pom.xml",
                "@@ -216,8 +216,19 @@ under the License.",
                "       </plugin>",
                "-                ",
                "+",
                "       <plugin>",
                "-        <groupId>org.codehaus.mojo</groupId>",
                "-        <artifactId>ianal-maven-plugin</artifactId>",
                "+        <groupId>org.apache.maven.plugins</groupId>",
                "+        <artifactId>maven-war-plugin</artifactId>",
                "+        <inherited>true</inherited>",
                "         <configuration>",
                "-          <skip>true</skip>",
                "+          <webResources>",
                "+            <resource>",
                "+              <directory>${basedir}</directory>",
                "+              <targetPath>META-INF</targetPath>",
                "+              <includes>",
                "+                <include>LICENSE</include>",
                "+                <include>NOTICE</include>",
                "+              </includes>",
                "+            </resource>",
                "+          </webResources>",
                "+          <packagingExcludes>WEB-INF/classes/META-INF/LICENSE*,WEB-INF/classes/META-INF/NOTICE*,WEB-INF/classes/META-INF/DEPENDENCIES*</packagingExcludes>",
                "         </configuration>",
                "@@ -231,2 +242,10 @@ under the License.",
                "       </resource>",
                "+      <resource>",
                "+        <directory>${basedir}</directory>",
                "+        <targetPath>META-INF</targetPath>",
                "+        <includes>",
                "+          <include>LICENSE</include>",
                "+          <include>NOTICE</include>",
                "+        </includes>",
                "+      </resource>",
                "     </resources>"
            ],
            "changed_files": [
                "fit/build-tools/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "2f012f7e5f1f5c3507b591dc76b6302071aa6cd3"
                ],
                [
                    "no-tag",
                    "93ff61906287060635a7a0f0007fbc9e9b8aa5c1"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "be1dba8150d765193b086e4b7b3d62529f130de5",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539668128,
            "hunks": 1,
            "message": "Also Travis CI to exclude Eclise build by default",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 6e008aa5eb..9c09fa5406 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -26,3 +26,3 @@ before_install:",
                " # default install is mvn install --quiet -DskipTests=true",
                "-install: travis_wait mvn --show-version --quiet -T 1C -P all,skipTests",
                "+install: travis_wait mvn --show-version --quiet -T 1C -P all,skipTests,without-eclipse",
                " before_script:"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d43825204b9a7227dfb1917136b1f2ccab3cde5d"
                ],
                [
                    "no-tag",
                    "100aa328b35b014b69300c222da0f0ba3c1e1b98"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6b8f216eb0b55108e51fc4443b72874e548e999e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1542010818,
            "hunks": 3,
            "message": "Upgrading Camel and modernizer-maven-plugin",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 85dc435f59..c6a068251c 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -412,3 +412,3 @@ under the License.",
                "-    <camel.version>2.22.1</camel.version>\t",
                "+    <camel.version>2.22.2</camel.version>\t",
                "@@ -2076,3 +2076,3 @@ under the License.",
                "         <artifactId>modernizer-maven-plugin</artifactId>",
                "-        <version>1.6.0</version>",
                "+        <version>1.7.0</version>",
                "         <configuration>",
                "@@ -2320,4 +2320,4 @@ under the License.",
                "             <link>http://fasterxml.github.io/jackson-datatype-joda/javadoc/2.9/</link>",
                "-            <link>http://www.javadoc.io/doc/org.apache.camel/camel-core/2.22.1/</link>",
                "-            <link>http://www.javadoc.io/doc/org.apache.camel/camel-spring/2.22.1/</link>",
                "+            <link>http://www.javadoc.io/doc/org.apache.camel/camel-core/2.22.2/</link>",
                "+            <link>http://www.javadoc.io/doc/org.apache.camel/camel-spring/2.22.2/</link>",
                "             <link>https://ci.apache.org/projects/wicket/apidocs/8.x/</link>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "66a90c9ac7f58acecd1dcfae41d06973346b5e0d"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a2bb602c4e307fd1d484c7a1846f570b470e111d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538549569,
            "hunks": 5,
            "message": "Upgrading Elasticsearch and asciidoctor-maven-plugin",
            "diff": [
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "index 15fd7a4f49..8230ce190b 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "@@ -20,3 +20,2 @@ package org.apache.syncope.core.flowable.impl;",
                "-import org.apache.syncope.core.flowable.support.SyncopeTaskQueryImpl;",
                " import java.util.Base64;",
                "@@ -29,2 +28,3 @@ import org.apache.syncope.common.lib.to.UserTO;",
                " import org.apache.syncope.core.flowable.support.DomainProcessEngine;",
                "+import org.apache.syncope.core.flowable.support.SyncopeTaskQueryImpl;",
                " import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;",
                "diff --git a/pom.xml b/pom.xml",
                "index 2014447bd7..e7695ee89b 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -417,3 +417,3 @@ under the License.",
                "-    <elasticsearch.version>6.4.1</elasticsearch.version>",
                "+    <elasticsearch.version>6.4.2</elasticsearch.version>",
                "@@ -2318,3 +2318,3 @@ under the License.",
                "             <link>https://build.shibboleth.net/nexus/content/sites/site/java-opensaml/3.3.0/apidocs/</link>",
                "-            <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/elasticsearch/6.4.1/index.html</link>",
                "+            <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/elasticsearch/6.4.2/index.html</link>",
                "             <link>http://docs.swagger.io/swagger-core/v2.0.5/apidocs/</link>",
                "@@ -2402,3 +2402,3 @@ under the License.",
                "             <artifactId>asciidoctor-maven-plugin</artifactId>",
                "-            <version>1.5.7</version>",
                "+            <version>1.5.7.1</version>",
                "             <dependencies>"
            ],
            "changed_files": [
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b653b0033b99a7137bad393dd24546b85026b0f5"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4ae9a74c1381c16e9bab8ae0099afa2b2eca59ae",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539603019,
            "hunks": 1,
            "message": "Wicket tester requires JUnit 4.12...",
            "diff": [
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index 49a6521747..8b9e987825 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -429,2 +429,12 @@ under the License.",
                "+      <dependencies>",
                "+        <!-- required by wicket tester -->",
                "+        <dependency>",
                "+          <groupId>junit</groupId>",
                "+          <artifactId>junit</artifactId>",
                "+          <version>4.12</version>",
                "+          <scope>test</scope>",
                "+        </dependency>",
                "+      </dependencies>",
                "+",
                "       <build>"
            ],
            "changed_files": [
                "fit/core-reference/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3f947363a9cc2cf75a5211fab8010b2db778fc9a"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5daece32b19b2a00d5627d41c67e939fc2eac9f7",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538489944,
            "hunks": 87,
            "message": "Upgrading Flowable",
            "diff": [
                "diff --git a/ext/flowable/flowable-bpmn/pom.xml b/ext/flowable/flowable-bpmn/pom.xml",
                "index 9d1306698c..72180347bc 100644",
                "--- a/ext/flowable/flowable-bpmn/pom.xml",
                "+++ b/ext/flowable/flowable-bpmn/pom.xml",
                "@@ -61,2 +61,6 @@ under the License.",
                "     </dependency>",
                "+    <dependency>",
                "+      <groupId>org.flowable</groupId>",
                "+      <artifactId>flowable-idm-spring-configurator</artifactId>",
                "+    </dependency>",
                "     <dependency>",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "index cdf035d239..15fd7a4f49 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "@@ -20,2 +20,3 @@ package org.apache.syncope.core.flowable.impl;",
                "+import org.apache.syncope.core.flowable.support.SyncopeTaskQueryImpl;",
                " import java.util.Base64;",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeTaskQueryImpl.java b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeTaskQueryImpl.java",
                "new file mode 100644",
                "index 0000000000..833fe6bcf3",
                "--- /dev/null",
                "+++ b/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeTaskQueryImpl.java",
                "@@ -0,0 +1,49 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *   http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing,",
                "+ * software distributed under the License is distributed on an",
                "+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
                "+ * KIND, either express or implied.  See the License for the",
                "+ * specific language governing permissions and limitations",
                "+ * under the License.",
                "+ */",
                "+package org.apache.syncope.core.flowable.support;",
                "+",
                "+import org.flowable.common.engine.impl.interceptor.CommandExecutor;",
                "+import org.flowable.task.api.TaskQuery;",
                "+import org.flowable.task.service.impl.TaskQueryImpl;",
                "+",
                "+public class SyncopeTaskQueryImpl extends TaskQueryImpl {",
                "+",
                "+    private static final long serialVersionUID = 734215641378485689L;",
                "+",
                "+    protected boolean withFormKey;",
                "+",
                "+    protected SyncopeTaskQueryImpl currentOrQueryObject;",
                "+",
                "+    public SyncopeTaskQueryImpl(final CommandExecutor commandExecutor) {",
                "+        super(commandExecutor);",
                "+    }",
                "+",
                "+    public TaskQuery taskWithFormKey() {",
                "+        if (orActive) {",
                "+            currentOrQueryObject.withFormKey = true;",
                "+        } else {",
                "+            this.withFormKey = true;",
                "+        }",
                "+        return this;",
                "+    }",
                "+",
                "+    public boolean isWithFormKey() {",
                "+        return withFormKey;",
                "+    }",
                "+}",
                "diff --git a/ext/flowable/flowable-bpmn/src/main/resources/org/apache/syncope/ext/flowable/Task.xml b/ext/flowable/flowable-bpmn/src/main/resources/org/apache/syncope/ext/flowable/Task.xml",
                "index cc905a3e97..bf5c06f707 100644",
                "--- a/ext/flowable/flowable-bpmn/src/main/resources/org/apache/syncope/ext/flowable/Task.xml",
                "+++ b/ext/flowable/flowable-bpmn/src/main/resources/org/apache/syncope/ext/flowable/Task.xml",
                "@@ -27,35 +27,35 @@ under the License.",
                "     insert into ${prefix}ACT_RU_TASK (ID_, REV_, NAME_, PARENT_TASK_ID_, DESCRIPTION_, PRIORITY_, CREATE_TIME_, OWNER_, ASSIGNEE_, DELEGATION_, ",
                "-    EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_,",
                "-    TASK_DEF_KEY_, DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_, FORM_KEY_, CLAIM_TIME_, ",
                "-    IS_COUNT_ENABLED_, VAR_COUNT_, ID_LINK_COUNT_, SUB_TASK_COUNT_)",
                "+                      EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_,",
                "+                      TASK_DEF_KEY_, DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_, FORM_KEY_, CLAIM_TIME_, ",
                "+                      IS_COUNT_ENABLED_, VAR_COUNT_, ID_LINK_COUNT_, SUB_TASK_COUNT_)",
                "     values (#{id, jdbcType=VARCHAR},",
                "-    1,",
                "-    #{name, jdbcType=VARCHAR},",
                "-    #{parentTaskId, jdbcType=VARCHAR},",
                "-    #{description, jdbcType=VARCHAR},",
                "-    #{priority, jdbcType=INTEGER},",
                "-    #{createTime, jdbcType=TIMESTAMP},",
                "-    #{owner, jdbcType=VARCHAR},",
                "-    #{assignee, jdbcType=VARCHAR},",
                "-    #{delegationStateString, jdbcType=VARCHAR},",
                "-    #{executionId, jdbcType=VARCHAR},",
                "-    #{processInstanceId, jdbcType=VARCHAR},",
                "-    #{processDefinitionId, jdbcType=VARCHAR},",
                "-    #{taskDefinitionId, jdbcType=VARCHAR},",
                "-    #{scopeId, jdbcType=VARCHAR},",
                "-    #{subScopeId, jdbcType=VARCHAR},",
                "-    #{scopeType, jdbcType=VARCHAR},",
                "-    #{scopeDefinitionId, jdbcType=VARCHAR},",
                "-    #{taskDefinitionKey, jdbcType=VARCHAR},",
                "-    #{dueDate, jdbcType=TIMESTAMP},",
                "-    #{category, jdbcType=VARCHAR},",
                "-    #{suspensionState, jdbcType=INTEGER},",
                "-    #{tenantId, jdbcType=VARCHAR},",
                "-    #{formKey, jdbcType=VARCHAR},",
                "-    #{claimTime, jdbcType=TIMESTAMP},",
                "-    #{isCountEnabled, jdbcType=BOOLEAN},",
                "-    #{variableCount, jdbcType=INTEGER},",
                "-    #{identityLinkCount, jdbcType=INTEGER},",
                "-    #{subTaskCount, jdbcType=INTEGER}",
                "-    )",
                "+            1,",
                "+            #{name, jdbcType=VARCHAR},",
                "+            #{parentTaskId, jdbcType=VARCHAR},",
                "+            #{description, jdbcType=VARCHAR},",
                "+            #{priority, jdbcType=INTEGER},",
                "+            #{createTime, jdbcType=TIMESTAMP},",
                "+            #{owner, jdbcType=VARCHAR},",
                "+            #{assignee, jdbcType=VARCHAR},",
                "+            #{delegationStateString, jdbcType=VARCHAR},",
                "+            #{executionId, jdbcType=VARCHAR},",
                "+            #{processInstanceId, jdbcType=VARCHAR},",
                "+            #{processDefinitionId, jdbcType=VARCHAR},",
                "+            #{taskDefinitionId, jdbcType=VARCHAR},",
                "+            #{scopeId, jdbcType=VARCHAR},",
                "+            #{subScopeId, jdbcType=VARCHAR},",
                "+            #{scopeType, jdbcType=VARCHAR},",
                "+            #{scopeDefinitionId, jdbcType=VARCHAR},",
                "+            #{taskDefinitionKey, jdbcType=VARCHAR},",
                "+            #{dueDate, jdbcType=TIMESTAMP},",
                "+            #{category, jdbcType=VARCHAR},",
                "+            #{suspensionState, jdbcType=INTEGER},",
                "+            #{tenantId, jdbcType=VARCHAR},",
                "+            #{formKey, jdbcType=VARCHAR},",
                "+            #{claimTime, jdbcType=TIMESTAMP},",
                "+            #{isCountEnabled, jdbcType=BOOLEAN},",
                "+            #{variableCount, jdbcType=INTEGER},",
                "+            #{identityLinkCount, jdbcType=INTEGER},",
                "+            #{subTaskCount, jdbcType=INTEGER}",
                "+           )",
                "   </insert>",
                "@@ -64,37 +64,37 @@ under the License.",
                "     INSERT INTO ${prefix}ACT_RU_TASK (ID_, REV_, NAME_, PARENT_TASK_ID_, DESCRIPTION_, PRIORITY_, CREATE_TIME_, OWNER_, ASSIGNEE_, DELEGATION_, ",
                "-    EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_, ",
                "-    TASK_DEF_KEY_, DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_, FORM_KEY_, CLAIM_TIME_, ",
                "-    IS_COUNT_ENABLED_, VAR_COUNT_, ID_LINK_COUNT_, SUB_TASK_COUNT_)",
                "+        EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_, ",
                "+        TASK_DEF_KEY_, DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_, FORM_KEY_, CLAIM_TIME_, ",
                "+        IS_COUNT_ENABLED_, VAR_COUNT_, ID_LINK_COUNT_, SUB_TASK_COUNT_)",
                "     VALUES ",
                "-    <foreach collection=\"list\" item=\"task\" index=\"index\" separator=\",\"> ",
                "-      (#{task.id, jdbcType=VARCHAR},",
                "-      1,",
                "-      #{task.name, jdbcType=VARCHAR},",
                "-      #{task.parentTaskId, jdbcType=VARCHAR},",
                "-      #{task.description, jdbcType=VARCHAR},",
                "-      #{task.priority, jdbcType=INTEGER},",
                "-      #{task.createTime, jdbcType=TIMESTAMP},",
                "-      #{task.owner, jdbcType=VARCHAR},",
                "-      #{task.assignee, jdbcType=VARCHAR},",
                "-      #{task.delegationStateString, jdbcType=VARCHAR},",
                "-      #{task.executionId, jdbcType=VARCHAR},",
                "-      #{task.processInstanceId, jdbcType=VARCHAR},",
                "-      #{task.processDefinitionId, jdbcType=VARCHAR},",
                "-      #{task.taskDefinitionId, jdbcType=VARCHAR},",
                "-      #{task.scopeId, jdbcType=VARCHAR},",
                "-      #{task.subScopeId, jdbcType=VARCHAR},",
                "-      #{task.scopeType, jdbcType=VARCHAR},",
                "-      #{task.scopeDefinitionId, jdbcType=VARCHAR},",
                "-      #{task.taskDefinitionKey, jdbcType=VARCHAR},",
                "-      #{task.dueDate, jdbcType=TIMESTAMP},",
                "-      #{task.category, jdbcType=VARCHAR},",
                "-      #{task.suspensionState, jdbcType=INTEGER},",
                "-      #{task.tenantId, jdbcType=VARCHAR},",
                "-      #{task.formKey, jdbcType=VARCHAR},",
                "-      #{task.claimTime, jdbcType=TIMESTAMP},",
                "-      #{task.isCountEnabled, jdbcType=BOOLEAN},",
                "-      #{task.variableCount, jdbcType=INTEGER},",
                "-      #{task.identityLinkCount, jdbcType=INTEGER},",
                "-      #{task.subTaskCount, jdbcType=INTEGER}",
                "-      )",
                "+      <foreach collection=\"list\" item=\"task\" index=\"index\" separator=\",\"> ",
                "+        (#{task.id, jdbcType=VARCHAR},",
                "+         1,",
                "+         #{task.name, jdbcType=VARCHAR},",
                "+         #{task.parentTaskId, jdbcType=VARCHAR},",
                "+         #{task.description, jdbcType=VARCHAR},",
                "+         #{task.priority, jdbcType=INTEGER},",
                "+         #{task.createTime, jdbcType=TIMESTAMP},",
                "+         #{task.owner, jdbcType=VARCHAR},",
                "+         #{task.assignee, jdbcType=VARCHAR},",
                "+         #{task.delegationStateString, jdbcType=VARCHAR},",
                "+         #{task.executionId, jdbcType=VARCHAR},",
                "+         #{task.processInstanceId, jdbcType=VARCHAR},",
                "+         #{task.processDefinitionId, jdbcType=VARCHAR},",
                "+         #{task.taskDefinitionId, jdbcType=VARCHAR},",
                "+         #{task.scopeId, jdbcType=VARCHAR},",
                "+         #{task.subScopeId, jdbcType=VARCHAR},",
                "+         #{task.scopeType, jdbcType=VARCHAR},",
                "+         #{task.scopeDefinitionId, jdbcType=VARCHAR},",
                "+         #{task.taskDefinitionKey, jdbcType=VARCHAR},",
                "+         #{task.dueDate, jdbcType=TIMESTAMP},",
                "+         #{task.category, jdbcType=VARCHAR},",
                "+         #{task.suspensionState, jdbcType=INTEGER},",
                "+         #{task.tenantId, jdbcType=VARCHAR},",
                "+         #{task.formKey, jdbcType=VARCHAR},",
                "+         #{task.claimTime, jdbcType=TIMESTAMP},",
                "+         #{task.isCountEnabled, jdbcType=BOOLEAN},",
                "+         #{task.variableCount, jdbcType=INTEGER},",
                "+         #{task.identityLinkCount, jdbcType=INTEGER},",
                "+         #{task.subTaskCount, jdbcType=INTEGER}",
                "+         )",
                "     </foreach>",
                "@@ -104,37 +104,37 @@ under the License.",
                "     INSERT ALL ",
                "-    <foreach collection=\"list\" item=\"task\" index=\"index\">",
                "-      INTO ${prefix}ACT_RU_TASK (ID_, REV_, NAME_, PARENT_TASK_ID_, DESCRIPTION_, PRIORITY_, CREATE_TIME_, OWNER_, ASSIGNEE_, DELEGATION_, ",
                "-      EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_, TASK_DEF_KEY_, ",
                "-      DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_, FORM_KEY_, CLAIM_TIME_, ",
                "-      IS_COUNT_ENABLED_, VAR_COUNT_, ID_LINK_COUNT_, SUB_TASK_COUNT_) VALUES",
                "-      (#{task.id, jdbcType=VARCHAR},",
                "-      1,",
                "-      #{task.name, jdbcType=VARCHAR},",
                "-      #{task.parentTaskId, jdbcType=VARCHAR},",
                "-      #{task.description, jdbcType=VARCHAR},",
                "-      #{task.priority, jdbcType=INTEGER},",
                "-      #{task.createTime, jdbcType=TIMESTAMP},",
                "-      #{task.owner, jdbcType=VARCHAR},",
                "-      #{task.assignee, jdbcType=VARCHAR},",
                "-      #{task.delegationStateString, jdbcType=VARCHAR},",
                "-      #{task.executionId, jdbcType=VARCHAR},",
                "-      #{task.processInstanceId, jdbcType=VARCHAR},",
                "-      #{task.processDefinitionId, jdbcType=VARCHAR},",
                "-      #{task.taskDefinitionId, jdbcType=VARCHAR},",
                "-      #{task.scopeId, jdbcType=VARCHAR},",
                "-      #{task.subScopeId, jdbcType=VARCHAR},",
                "-      #{task.scopeType, jdbcType=VARCHAR},",
                "-      #{task.scopeDefinitionId, jdbcType=VARCHAR},",
                "-      #{task.taskDefinitionKey, jdbcType=VARCHAR},",
                "-      #{task.dueDate, jdbcType=TIMESTAMP},",
                "-      #{task.category, jdbcType=VARCHAR},",
                "-      #{task.suspensionState, jdbcType=INTEGER},",
                "-      #{task.tenantId, jdbcType=VARCHAR},",
                "-      #{task.formKey, jdbcType=VARCHAR},",
                "-      #{task.claimTime, jdbcType=TIMESTAMP},",
                "-      #{task.isCountEnabled, jdbcType=BOOLEAN},",
                "-      #{task.variableCount, jdbcType=INTEGER},",
                "-      #{task.identityLinkCount, jdbcType=INTEGER},",
                "-      #{task.subTaskCount, jdbcType=INTEGER}",
                "-      )",
                "+      <foreach collection=\"list\" item=\"task\" index=\"index\">",
                "+        INTO ${prefix}ACT_RU_TASK (ID_, REV_, NAME_, PARENT_TASK_ID_, DESCRIPTION_, PRIORITY_, CREATE_TIME_, OWNER_, ASSIGNEE_, DELEGATION_, ",
                "+              EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_, TASK_DEF_KEY_, ",
                "+              DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_, FORM_KEY_, CLAIM_TIME_, ",
                "+              IS_COUNT_ENABLED_, VAR_COUNT_, ID_LINK_COUNT_, SUB_TASK_COUNT_) VALUES",
                "+        (#{task.id, jdbcType=VARCHAR},",
                "+         1,",
                "+         #{task.name, jdbcType=VARCHAR},",
                "+         #{task.parentTaskId, jdbcType=VARCHAR},",
                "+         #{task.description, jdbcType=VARCHAR},",
                "+         #{task.priority, jdbcType=INTEGER},",
                "+         #{task.createTime, jdbcType=TIMESTAMP},",
                "+         #{task.owner, jdbcType=VARCHAR},",
                "+         #{task.assignee, jdbcType=VARCHAR},",
                "+         #{task.delegationStateString, jdbcType=VARCHAR},",
                "+         #{task.executionId, jdbcType=VARCHAR},",
                "+         #{task.processInstanceId, jdbcType=VARCHAR},",
                "+         #{task.processDefinitionId, jdbcType=VARCHAR},",
                "+         #{task.taskDefinitionId, jdbcType=VARCHAR},",
                "+         #{task.scopeId, jdbcType=VARCHAR},",
                "+         #{task.subScopeId, jdbcType=VARCHAR},",
                "+         #{task.scopeType, jdbcType=VARCHAR},",
                "+         #{task.scopeDefinitionId, jdbcType=VARCHAR},",
                "+         #{task.taskDefinitionKey, jdbcType=VARCHAR},",
                "+         #{task.dueDate, jdbcType=TIMESTAMP},",
                "+         #{task.category, jdbcType=VARCHAR},",
                "+         #{task.suspensionState, jdbcType=INTEGER},",
                "+         #{task.tenantId, jdbcType=VARCHAR},",
                "+         #{task.formKey, jdbcType=VARCHAR},",
                "+         #{task.claimTime, jdbcType=TIMESTAMP},",
                "+         #{task.isCountEnabled, jdbcType=BOOLEAN},",
                "+         #{task.variableCount, jdbcType=INTEGER},",
                "+         #{task.identityLinkCount, jdbcType=INTEGER},",
                "+         #{task.subTaskCount, jdbcType=INTEGER}",
                "+         )",
                "     </foreach>",
                "@@ -150,72 +150,75 @@ under the License.",
                "       <if test=\"originalPersistentState.name != name\">",
                "-        NAME_ = #{name, jdbcType=VARCHAR},",
                "+          NAME_ = #{name, jdbcType=VARCHAR},",
                "       </if>",
                "       <if test=\"originalPersistentState.parentTaskId != parentTaskId\">",
                "-        PARENT_TASK_ID_ = #{parentTaskId, jdbcType=VARCHAR},",
                "+          PARENT_TASK_ID_ = #{parentTaskId, jdbcType=VARCHAR},",
                "       </if>",
                "       <if test=\"originalPersistentState.priority != priority\">",
                "-        PRIORITY_ = #{priority, jdbcType=INTEGER},",
                "+          PRIORITY_ = #{priority, jdbcType=INTEGER},",
                "       </if>",
                "       <if test=\"originalPersistentState.createTime != createTime\">",
                "-        CREATE_TIME_ = #{createTime, jdbcType=TIMESTAMP},",
                "+          CREATE_TIME_ = #{createTime, jdbcType=TIMESTAMP},",
                "       </if>",
                "       <if test=\"originalPersistentState.owner != owner\">",
                "-        OWNER_ = #{owner, jdbcType=VARCHAR},",
                "+          OWNER_ = #{owner, jdbcType=VARCHAR},",
                "       </if>",
                "       <if test=\"originalPersistentState.assignee != assignee\">",
                "-        ASSIGNEE_ = #{assignee, jdbcType=VARCHAR},",
                "+          ASSIGNEE_ = #{assignee, jdbcType=VARCHAR},",
                "       </if>",
                "       <if test=\"originalPersistentState.delegationStateString != delegationStateString\">",
                "-        DELEGATION_ = #{delegationStateString, jdbcType=VARCHAR},",
                "+          DELEGATION_ = #{delegationStateString, jdbcType=VARCHAR},",
                "       </if>",
                "       <if test=\"originalPersistentState.executionId != executionId\">",
                "-        EXECUTION_ID_ = #{executionId, jdbcType=VARCHAR},",
                "+          EXECUTION_ID_ = #{executionId, jdbcType=VARCHAR},",
                "       </if>",
                "       <if test=\"originalPersistentState.processDefinitionId != processDefinitionId\">",
                "-        PROC_DEF_ID_ = #{processDefinitionId, jdbcType=VARCHAR},",
                "+          PROC_DEF_ID_ = #{processDefinitionId, jdbcType=VARCHAR},",
                "       </if>",
                "       <if test=\"originalPersistentState.taskDefinitionId != taskDefinitionId\">",
                "-        TASK_DEF_ID_ = #{taskDefinitionId, jdbcType=VARCHAR},",
                "+          TASK_DEF_ID_ = #{taskDefinitionId, jdbcType=VARCHAR},",
                "+      </if>",
                "+      <if test=\"originalPersistentState.taskDefinitionKey != taskDefinitionKey\">",
                "+          TASK_DEF_KEY_ = #{taskDefinitionKey, jdbcType=VARCHAR},",
                "       </if>",
                "       <if test=\"originalPersistentState.scopeId != scopeId\">",
                "-        SCOPE_ID_ = #{scopeId, jdbcType=VARCHAR}",
                "+          SCOPE_ID_ = #{scopeId, jdbcType=VARCHAR}",
                "       </if>",
                "       <if test=\"originalPersistentState.subScopeId != subScopeId\">",
                "-        SUB_SCOPE_ID_ = #{subScopeId, jdbcType=VARCHAR}",
                "+          SUB_SCOPE_ID_ = #{subScopeId, jdbcType=VARCHAR}",
                "       </if>",
                "       <if test=\"originalPersistentState.scopeType != scopeType\">",
                "-        SCOPE_TYPE_ = #{scopeType, jdbcType=VARCHAR}",
                "+          SCOPE_TYPE_ = #{scopeType, jdbcType=VARCHAR}",
                "       </if>",
                "-      <if test=\"originalPersistentState.scopeDefinitionId != scopeDefinitionId\">",
                "-        SCOPE_DEFINITION_ID_ = #{scopeDefinitionId, jdbcType=VARCHAR}",
                "+       <if test=\"originalPersistentState.scopeDefinitionId != scopeDefinitionId\">",
                "+          SCOPE_DEFINITION_ID_ = #{scopeDefinitionId, jdbcType=VARCHAR}",
                "       </if>",
                "       <if test=\"originalPersistentState.description != description\">",
                "-        DESCRIPTION_ = #{description, jdbcType=VARCHAR},",
                "+          DESCRIPTION_ = #{description, jdbcType=VARCHAR},",
                "       </if>",
                "       <if test=\"originalPersistentState.dueDate != dueDate\">",
                "-        DUE_DATE_ = #{dueDate, jdbcType=TIMESTAMP},",
                "+          DUE_DATE_ = #{dueDate, jdbcType=TIMESTAMP},",
                "       </if>",
                "       <if test=\"originalPersistentState.category != category\">",
                "-        CATEGORY_ = #{category, jdbcType=VARCHAR},",
                "+          CATEGORY_ = #{category, jdbcType=VARCHAR},",
                "       </if>",
                "       <if test=\"originalPersistentState.suspensionState != suspensionState\">",
                "-        SUSPENSION_STATE_ = #{suspensionState, jdbcType=INTEGER},",
                "+          SUSPENSION_STATE_ = #{suspensionState, jdbcType=INTEGER},",
                "       </if>",
                "       <if test=\"originalPersistentState.formKey != formKey\">",
                "-        FORM_KEY_ = #{formKey, jdbcType=VARCHAR},",
                "+          FORM_KEY_ = #{formKey, jdbcType=VARCHAR},",
                "       </if>",
                "       <if test=\"originalPersistentState.claimTime != claimTime\">",
                "-        CLAIM_TIME_ = #{claimTime, jdbcType=TIMESTAMP},",
                "+          CLAIM_TIME_ = #{claimTime, jdbcType=TIMESTAMP},",
                "       </if>",
                "       <if test=\"originalPersistentState.isCountEnabled != isCountEnabled\">",
                "-        IS_COUNT_ENABLED_ = #{isCountEnabled, jdbcType=BOOLEAN},",
                "+          IS_COUNT_ENABLED_ = #{isCountEnabled, jdbcType=BOOLEAN},",
                "       </if>",
                "       <if test=\"originalPersistentState.variableCount != variableCount\">",
                "-        VAR_COUNT_ = #{variableCount, jdbcType=INTEGER},",
                "+          VAR_COUNT_ = #{variableCount, jdbcType=INTEGER},",
                "       </if>",
                "       <if test=\"originalPersistentState.identityLinkCount != identityLinkCount\">",
                "-        ID_LINK_COUNT_ = #{identityLinkCount, jdbcType=INTEGER},",
                "+          ID_LINK_COUNT_ = #{identityLinkCount, jdbcType=INTEGER},",
                "       </if>",
                "       <if test=\"originalPersistentState.subTaskCount != subTaskCount\">",
                "-        SUB_TASK_COUNT_ = #{subTaskCount, jdbcType=INTEGER}",
                "+          SUB_TASK_COUNT_ = #{subTaskCount, jdbcType=INTEGER}",
                "       </if>",
                "@@ -223,3 +226,3 @@ under the License.",
                "     where ID_= #{id, jdbcType=VARCHAR}",
                "-    and REV_ = #{revision, jdbcType=INTEGER}",
                "+      and REV_ = #{revision, jdbcType=INTEGER}",
                "   </update>",
                "@@ -228,29 +231,29 @@ under the License.",
                "     update ${prefix}ACT_RU_TASK set",
                "-    TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}",
                "+      TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}",
                "     where",
                "-    ID_ in (",
                "-    SELECT T.ID_ from ${prefix}ACT_RU_TASK T",
                "-    inner join ${prefix}ACT_RE_PROCDEF P on T.PROC_DEF_ID_  = P.ID_",
                "-    inner join ${prefix}ACT_RE_DEPLOYMENT D on P.DEPLOYMENT_ID_ = D.ID_ ",
                "-    where D.ID_ = #{deploymentId, jdbcType=VARCHAR}",
                "-    ) ",
                "+      ID_ in (",
                "+        SELECT T.ID_ from ${prefix}ACT_RU_TASK T",
                "+        inner join ${prefix}ACT_RE_PROCDEF P on T.PROC_DEF_ID_  = P.ID_",
                "+        inner join ${prefix}ACT_RE_DEPLOYMENT D on P.DEPLOYMENT_ID_ = D.ID_ ",
                "+        where D.ID_ = #{deploymentId, jdbcType=VARCHAR}",
                "+      ) ",
                "   </update>",
                "-  <!-- See http://stackoverflow.com/questions/4429319/you-cant-specify-target-table-for-update-in-from-clause",
                "-  Tested this on MySQL 5.6: does NOT use a temporary table (so good, performance0 -->",
                "+    <!-- See http://stackoverflow.com/questions/4429319/you-cant-specify-target-table-for-update-in-from-clause",
                "+       Tested this on MySQL 5.6: does NOT use a temporary table (so good, performance0 -->",
                "   <update id=\"updateTaskTenantIdForDeployment\" databaseId=\"mysql\" parameterType=\"java.util.Map\">",
                "     update ${prefix}ACT_RU_TASK set",
                "-    TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}",
                "+      TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}",
                "     where",
                "-    ID_ in (",
                "+      ID_ in (",
                "-    SELECT tempTask.tempId",
                "-    FROM (",
                "-    SELECT T.ID_ as tempId",
                "-    FROM  ${prefix}ACT_RU_TASK T",
                "-    inner join ${prefix}ACT_RE_PROCDEF P on T.PROC_DEF_ID_  = P.ID_",
                "-    inner join ${prefix}ACT_RE_DEPLOYMENT D on P.DEPLOYMENT_ID_ = D.ID_ ",
                "-    where D.ID_ = #{deploymentId, jdbcType=VARCHAR}",
                "+          SELECT tempTask.tempId",
                "+          FROM (",
                "+                SELECT T.ID_ as tempId",
                "+                FROM  ${prefix}ACT_RU_TASK T",
                "+                inner join ${prefix}ACT_RE_PROCDEF P on T.PROC_DEF_ID_  = P.ID_",
                "+                inner join ${prefix}ACT_RE_DEPLOYMENT D on P.DEPLOYMENT_ID_ = D.ID_ ",
                "+                where D.ID_ = #{deploymentId, jdbcType=VARCHAR}",
                "-    ) AS tempTask ",
                "+        ) AS tempTask ",
                "@@ -277,3 +280,3 @@ under the License.",
                "     <foreach item=\"task\" collection=\"list\" index=\"index\" separator=\" or \">",
                "-      ID_ = #{task.id, jdbcType=VARCHAR}",
                "+        ID_ = #{task.id, jdbcType=VARCHAR}",
                "     </foreach>",
                "@@ -373,3 +376,3 @@ under the License.",
                "   <select id=\"selectTask\" parameterType=\"string\" resultMap=\"taskResultMap\">",
                "-    select * from ${prefix}ACT_RU_TASK where ID_ = #{id, jdbcType=VARCHAR}",
                "+   select * from ${prefix}ACT_RU_TASK where ID_ = #{id, jdbcType=VARCHAR}",
                "   </select>",
                "@@ -405,6 +408,5 @@ under the License.",
                "   <!-- Using distinct here because a task can appear multiple times in a resultset when -->",
                "-  <select id=\"selectTaskByQueryCriteria\" parameterType=\"org.apache.syncope.core.flowable.impl.SyncopeTaskQueryImpl\" resultMap=\"taskResultMap\">",
                "+  <select id=\"selectTaskByQueryCriteria\" parameterType=\"org.apache.syncope.core.flowable.support.SyncopeTaskQueryImpl\" resultMap=\"taskResultMap\">",
                "     <if test=\"firstResult != null and firstResult &gt;= 0\">${limitBefore}</if>",
                "-    select distinct RES.* <if test=\"nullHandlingColumn != null\">, ${nullHandlingColumn}</if> ",
                "-    <if test=\"firstResult != null and firstResult &gt;= 0\">${limitBetween}</if>",
                "+    select distinct RES.* <if test=\"nullHandlingColumn != null\">, ${nullHandlingColumn}</if> <if test=\"firstResult != null and firstResult &gt;= 0\">${limitBetween}</if>",
                "     <include refid=\"selectTaskByQueryCriteriaSql\"/> ",
                "@@ -414,3 +416,3 @@ under the License.",
                "-  <select id=\"selectTaskCountByQueryCriteria\" parameterType=\"org.apache.syncope.core.flowable.impl.SyncopeTaskQueryImpl\" resultType=\"long\">",
                "+  <select id=\"selectTaskCountByQueryCriteria\" parameterType=\"org.apache.syncope.core.flowable.support.SyncopeTaskQueryImpl\" resultType=\"long\">",
                "     select count(distinct RES.ID_)",
                "@@ -424,3 +426,3 @@ under the License.",
                "-  <select id=\"selectTasksWithRelatedEntitiesByQueryCriteria\" parameterType=\"org.apache.syncope.core.flowable.impl.SyncopeTaskQueryImpl\" resultMap=\"taskAndRelatedEntitiesResultMap\">",
                "+  <select id=\"selectTasksWithRelatedEntitiesByQueryCriteria\" parameterType=\"org.apache.syncope.core.flowable.support.SyncopeTaskQueryImpl\" resultMap=\"taskAndRelatedEntitiesResultMap\">",
                "     <include refid=\"selectTasksWithRelatedEntitiesByQueryCriteriaColumns\"/>",
                "@@ -433,4 +435,4 @@ under the License.",
                "     <if test=\"firstResult != null and firstResult &gt;= 0\">${limitBefore}</if>",
                "-    <if test=\"_databaseId != 'db2' and _databaseId != 'mssql'\">",
                "-      select RES.*,",
                "+  \t<if test=\"_databaseId != 'db2' and _databaseId != 'mssql'\">",
                "+    select RES.*,",
                "       <if test=\"includeTaskLocalVariables or includeProcessVariables\">",
                "@@ -449,3 +451,3 @@ under the License.",
                "       </if>",
                "-      <if test=\"firstResult != null and firstResult &gt;= 0\">${limitBetween}</if>",
                "+    <if test=\"firstResult != null and firstResult &gt;= 0\">${limitBetween}</if>",
                "     </if>",
                "@@ -520,21 +522,14 @@ under the License.",
                "   </sql>",
                "-  ",
                "+",
                "   <sql id=\"commonSelectTaskByQueryCriteriaSql\">",
                "-    <if test=\"candidateUser != null || candidateGroups != null || bothCandidateAndAssigned\">",
                "-      <choose>",
                "-        <when test=\"bothCandidateAndAssigned\">left</when>",
                "-        <otherwise>inner</otherwise>",
                "-      </choose>",
                "-      join ${prefix}ACT_RU_IDENTITYLINK I on I.TASK_ID_ = RES.ID_",
                "-    </if>",
                "     <foreach collection=\"queryVariableValues\" index=\"index\" item=\"var\">",
                "       <if test=\"!var.operator.equals('EXISTS') &amp;&amp; !var.operator.equals('NOT_EXISTS')\">",
                "-        <choose>",
                "-          <when test=\"var.local\">",
                "-            inner join ${prefix}ACT_RU_VARIABLE A${index} on RES.ID_ = A${index}.TASK_ID_ ",
                "-          </when>",
                "-          <otherwise>",
                "-            inner join ${prefix}ACT_RU_VARIABLE A${index} on RES.PROC_INST_ID_ = A${index}.PROC_INST_ID_ ",
                "-          </otherwise>",
                "-        </choose>",
                "+          <choose>",
                "+            <when test=\"var.local\">",
                "+              inner join ${prefix}ACT_RU_VARIABLE A${index} on RES.ID_ = A${index}.TASK_ID_ ",
                "+            </when>",
                "+            <otherwise>",
                "+              inner join ${prefix}ACT_RU_VARIABLE A${index} on RES.PROC_INST_ID_ = A${index}.PROC_INST_ID_ ",
                "+            </otherwise>",
                "+          </choose>",
                "       </if>       ",
                "@@ -542,17 +537,10 @@ under the License.",
                "     <foreach collection=\"orQueryObjects\" index=\"orIndex\" item=\"orQueryObject\">",
                "-      <if test=\"orQueryObject.candidateUser != null || orQueryObject.candidateGroups != null || orQueryObject.bothCandidateAndAssigned\">",
                "-        <choose>",
                "-          <when test=\"orQueryObject.bothCandidateAndAssigned\">left</when>",
                "-          <otherwise>inner</otherwise>",
                "-        </choose>",
                "-        join ${prefix}ACT_RU_IDENTITYLINK I_OR${orIndex} on I_OR${orIndex}.TASK_ID_ = RES.ID_",
                "-      </if>",
                "       <if test=\"orQueryObject.queryVariableValues.size() &gt; 0\">",
                "         <if test=\"orQueryObject.hasValueComparisonQueryVariables()\">",
                "-          <if test=\"orQueryObject.hasLocalQueryVariableValue()\">",
                "-            left outer join ${prefix}ACT_RU_VARIABLE A_L_OR${orIndex} on RES.ID_ = A_L_OR${orIndex}.TASK_ID_",
                "-          </if>",
                "-          <if test=\"orQueryObject.hasNonLocalQueryVariableValue()\">",
                "-            left outer join ${prefix}ACT_RU_VARIABLE A_OR${orIndex} on RES.PROC_INST_ID_ = A_OR${orIndex}.PROC_INST_ID_",
                "-          </if>",
                "+            <if test=\"orQueryObject.hasLocalQueryVariableValue()\">",
                "+              left outer join ${prefix}ACT_RU_VARIABLE A_L_OR${orIndex} on RES.ID_ = A_L_OR${orIndex}.TASK_ID_",
                "+            </if>",
                "+            <if test=\"orQueryObject.hasNonLocalQueryVariableValue()\">",
                "+              left outer join ${prefix}ACT_RU_VARIABLE A_OR${orIndex} on RES.PROC_INST_ID_ = A_OR${orIndex}.PROC_INST_ID_",
                "+            </if>",
                "         </if>",
                "@@ -655,3 +643,3 @@ under the License.",
                "       </if>",
                "-      <if test=\"ownerLikeIgnoreCase != null\">",
                "+       <if test=\"ownerLikeIgnoreCase != null\">",
                "         and lower(RES.OWNER_) like #{ownerLikeIgnoreCase}${wildcardEscapeClause}",
                "@@ -782,11 +770,11 @@ under the License.",
                "         and (",
                "-        DEPLOY_P.DEPLOYMENT_ID_ IN",
                "-        <foreach item=\"deployment\" index=\"index\" collection=\"deploymentIds\" open=\"(\" separator=\",\" close=\")\">",
                "-          #{deployment}",
                "-        </foreach>",
                "-        or",
                "-        DEPLOY_C.DEPLOYMENT_ID_ IN",
                "-        <foreach item=\"cmmnDeployment\" index=\"index\" collection=\"cmmnDeploymentIds\" open=\"(\" separator=\",\" close=\")\">",
                "-          #{cmmnDeployment}",
                "-        </foreach>",
                "+            DEPLOY_P.DEPLOYMENT_ID_ IN",
                "+            <foreach item=\"deployment\" index=\"index\" collection=\"deploymentIds\" open=\"(\" separator=\",\" close=\")\">",
                "+                #{deployment}",
                "+            </foreach>",
                "+            or",
                "+            DEPLOY_C.DEPLOYMENT_ID_ IN",
                "+            <foreach item=\"cmmnDeployment\" index=\"index\" collection=\"cmmnDeploymentIds\" open=\"(\" separator=\",\" close=\")\">",
                "+                #{cmmnDeployment}",
                "+            </foreach>",
                "         )",
                "@@ -821,20 +809,21 @@ under the License.",
                "         <if test=\"!ignoreAssigneeValue\">",
                "-          and RES.ASSIGNEE_ is null",
                "-        </if>",
                "-        and I.TYPE_ = 'candidate'",
                "-        and ",
                "-        ( ",
                "-        <if test=\"candidateUser != null\">",
                "-          I.USER_ID_ = #{candidateUser}          ",
                "-        </if>",
                "-        <if test=\"candidateUser != null &amp;&amp; candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0\">",
                "-          or",
                "-        </if>",
                "-        <if test=\"candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0\">",
                "-          I.GROUP_ID_ IN",
                "-          <foreach item=\"group\" index=\"index\" collection=\"candidateGroups\" ",
                "-                     open=\"(\" separator=\",\" close=\")\">",
                "-            #{group}",
                "-          </foreach>",
                "+            and RES.ASSIGNEE_ is null",
                "         </if>",
                "+        and exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TYPE_ = 'candidate' and LINK.TASK_ID_ = RES.ID_",
                "+            and ",
                "+            ( ",
                "+              <if test=\"candidateUser != null\">",
                "+                LINK.USER_ID_ = #{candidateUser}          ",
                "+              </if>",
                "+              <if test=\"candidateUser != null &amp;&amp; candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0\">",
                "+                or",
                "+              </if>",
                "+              <if test=\"candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0\">",
                "+                LINK.GROUP_ID_ IN",
                "+                <foreach item=\"group\" index=\"index\" collection=\"candidateGroups\" ",
                "+                         open=\"(\" separator=\",\" close=\")\">",
                "+                  #{group}",
                "+                </foreach>",
                "+              </if>",
                "+            )",
                "         )",
                "@@ -843,5 +832,13 @@ under the License.",
                "         and (",
                "-        exists(select LINK.USER_ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where USER_ID_ = #{involvedUser} and LINK.TASK_ID_ = RES.ID_)",
                "-        or RES.ASSIGNEE_ = #{involvedUser}",
                "-        or RES.OWNER_ = #{involvedUser}",
                "+          exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.USER_ID_ = #{involvedUser} and LINK.TASK_ID_ = RES.ID_)",
                "+          or RES.ASSIGNEE_ = #{involvedUser}",
                "+          or RES.OWNER_ = #{involvedUser}",
                "+          )",
                "+      </if>",
                "+      <if test=\"involvedGroups != null\">",
                "+        and EXISTS(",
                "+          select ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_ and LINK.GROUP_ID_ in",
                "+          <foreach item=\"involvedGroup\" index=\"index\" collection=\"involvedGroups\" open=\"(\" separator=\",\" close=\")\">",
                "+              #{involvedGroup}",
                "+          </foreach>",
                "         )",
                "@@ -850,96 +847,92 @@ under the License.",
                "         <choose>",
                "-          <when test=\"var.operator.equals('EXISTS')\">",
                "-            and EXISTS (",
                "-            select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}",
                "-            <if test=\"!var.local\">",
                "-              and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null",
                "-            </if>",
                "-            <if test=\"var.local\">",
                "-              and RES.ID_ = TASK_ID_ ",
                "-            </if>",
                "-            )",
                "-          </when>",
                "-          <when test=\"var.operator.equals('NOT_EXISTS')\">",
                "-            and NOT EXISTS (",
                "-            select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}",
                "-            <if test=\"!var.local\">",
                "-              and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null",
                "-            </if>",
                "-            <if test=\"var.local\">",
                "-              and RES.ID_ = TASK_ID_ ",
                "-            </if>",
                "-            )",
                "-          </when>",
                "-          <otherwise>",
                "-            <if test=\"!var.local\">",
                "-              <!-- When process instance variable is queried for, taskId should be null -->",
                "-              and A${index}.TASK_ID_ is null",
                "-            </if>",
                "-            <if test=\"var.name != null\">",
                "-              <!-- Match-all variable-names when name is null -->",
                "-              and A${index}.NAME_= #{var.name}",
                "-            </if>",
                "-            <if test=\"var.name == null\">",
                "-              and A${index}.NAME_ is not null",
                "-            </if>",
                "-            <if test=\"!var.type.equals('null')\">",
                "-              and A${index}.TYPE_ = #{var.type}",
                "-            </if>",
                "+            <when test=\"var.operator.equals('EXISTS')\">",
                "+              and EXISTS (",
                "+                select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}",
                "+                <if test=\"!var.local\">",
                "+                    and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null",
                "+                </if>",
                "+                <if test=\"var.local\">",
                "+                    and RES.ID_ = TASK_ID_ ",
                "+                </if>",
                "+              )",
                "+            </when>",
                "+            <when test=\"var.operator.equals('NOT_EXISTS')\">",
                "+              and NOT EXISTS (",
                "+                select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}",
                "+                <if test=\"!var.local\">",
                "+                    and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null",
                "+                </if>",
                "+                <if test=\"var.local\">",
                "+                    and RES.ID_ = TASK_ID_ ",
                "+                </if>",
                "+              )",
                "+            </when>",
                "+            <otherwise>",
                "+                <if test=\"!var.local\">",
                "+                  <!-- When process instance variable is queried for, taskId should be null -->",
                "+                  and A${index}.TASK_ID_ is null",
                "+                </if>",
                "+                <if test=\"var.name != null\">",
                "+                  <!-- Match-all variable-names when name is null -->",
                "+                  and A${index}.NAME_= #{var.name}",
                "+                </if>",
                "+                <if test=\"var.name == null\">",
                "+                  and A${index}.NAME_ is not null",
                "+                </if>",
                "+                <if test=\"!var.type.equals('null')\">",
                "+                  and A${index}.TYPE_ = #{var.type}",
                "+                </if>",
                "-            <!-- Variable value -->",
                "-            <if test=\"var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">",
                "-              <choose>",
                "-                <when test=\"var.operator.equals('EQUALS_IGNORE_CASE') || var.operator.equals('NOT_EQUALS_IGNORE_CASE') || var.operator.equals('LIKE_IGNORE_CASE')\">",
                "-                  and lower(A${index}.TEXT_)",
                "-                </when>",
                "-                <otherwise>",
                "-                  and A${index}.TEXT_",
                "-                </otherwise>",
                "-              </choose> ",
                "-              <choose>",
                "-                <when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">LIKE</when>",
                "-                <otherwise>",
                "+                <!-- Variable value -->",
                "+                <if test=\"var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">",
                "+                  <choose>",
                "+                    <when test=\"var.operator.equals('EQUALS_IGNORE_CASE') || var.operator.equals('NOT_EQUALS_IGNORE_CASE') || var.operator.equals('LIKE_IGNORE_CASE')\">",
                "+                      and lower(A${index}.TEXT_)",
                "+                    </when>",
                "+                    <otherwise>",
                "+                      and A${index}.TEXT_",
                "+                    </otherwise>",
                "+                  </choose> ",
                "+                  <choose>",
                "+                      <when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">LIKE</when>",
                "+                      <otherwise><include refid=\"executionVariableOperator\" /></otherwise>",
                "+                  </choose>          ",
                "+                  #{var.textValue}",
                "+                  <choose>",
                "+        \t\t\t<when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">${wildcardEscapeClause}</when>",
                "+        \t\t  </choose>",
                "+                </if>",
                "+                <if test=\"var.textValue2 != null\">",
                "+                  and A${index}.TEXT2_ ",
                "+                  <choose>",
                "+                    <when test=\"var.operator.equals('LIKE')\">LIKE</when>",
                "+                    <otherwise><include refid=\"executionVariableOperator\" /></otherwise>",
                "+                  </choose>          ",
                "+                  #{var.textValue2}",
                "+                  <choose>",
                "+        \t\t\t<when test=\"var.operator.equals('LIKE')\">${wildcardEscapeClause}</when>",
                "+        \t\t  </choose>",
                "+                </if>",
                "+                <if test=\"var.longValue != null\">",
                "+                  and A${index}.LONG_",
                "                   <include refid=\"executionVariableOperator\" />",
                "-                </otherwise>",
                "-              </choose>          ",
                "-              #{var.textValue}",
                "-              <choose>",
                "-                <when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">${wildcardEscapeClause}</when>",
                "-              </choose>",
                "-            </if>",
                "-            <if test=\"var.textValue2 != null\">",
                "-              and A${index}.TEXT2_ ",
                "-              <choose>",
                "-                <when test=\"var.operator.equals('LIKE')\">LIKE</when>",
                "-                <otherwise>",
                "+                  #{var.longValue}",
                "+                </if>",
                "+                <if test=\"var.doubleValue != null\">",
                "+                  and A${index}.DOUBLE_ ",
                "                   <include refid=\"executionVariableOperator\" />",
                "-                </otherwise>",
                "-              </choose>          ",
                "-              #{var.textValue2}",
                "-              <choose>",
                "-                <when test=\"var.operator.equals('LIKE')\">${wildcardEscapeClause}</when>",
                "-              </choose>",
                "-            </if>",
                "-            <if test=\"var.longValue != null\">",
                "-              and A${index}.LONG_",
                "-              <include refid=\"executionVariableOperator\" />",
                "-              #{var.longValue}",
                "-            </if>",
                "-            <if test=\"var.doubleValue != null\">",
                "-              and A${index}.DOUBLE_ ",
                "-              <include refid=\"executionVariableOperator\" />",
                "-              #{var.doubleValue}",
                "-            </if>",
                "-            <!-- Null variable type -->",
                "-            <if test=\"var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">",
                "-              <choose>",
                "-                <when test=\"var.operator.equals('NOT_EQUALS')\">",
                "-                  and (A${index}.TEXT_ is not null or A${index}.TEXT2_ is not null or A${index}.LONG_ is not null or A${index}.DOUBLE_ is not null or A${index}.BYTEARRAY_ID_ is not null)",
                "-                </when>",
                "-                <otherwise>",
                "-                  and A${index}.TEXT_ is null and A${index}.TEXT2_ is null and A${index}.LONG_ is null and A${index}.DOUBLE_ is null and A${index}.BYTEARRAY_ID_ is null",
                "-                </otherwise>",
                "-              </choose>          ",
                "-            </if>",
                "-          </otherwise>",
                "+                  #{var.doubleValue}",
                "+                </if>",
                "+                <!-- Null variable type -->",
                "+                <if test=\"var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">",
                "+                  <choose>",
                "+                    <when test=\"var.operator.equals('NOT_EQUALS')\">",
                "+                      and (A${index}.TEXT_ is not null or A${index}.TEXT2_ is not null or A${index}.LONG_ is not null or A${index}.DOUBLE_ is not null or A${index}.BYTEARRAY_ID_ is not null)",
                "+                    </when>",
                "+                    <otherwise>",
                "+                      and A${index}.TEXT_ is null and A${index}.TEXT2_ is null and A${index}.LONG_ is null and A${index}.DOUBLE_ is null and A${index}.BYTEARRAY_ID_ is null",
                "+                    </otherwise>",
                "+                  </choose>          ",
                "+                </if>",
                "+            </otherwise>",
                "         </choose>",
                "@@ -948,6 +941,6 @@ under the License.",
                "         <if test=\"suspensionState.stateCode == 1\">",
                "-          and RES.SUSPENSION_STATE_ = 1",
                "+            and RES.SUSPENSION_STATE_ = 1",
                "         </if>",
                "         <if test=\"suspensionState.stateCode == 2\">",
                "-          and RES.SUSPENSION_STATE_ = 2",
                "+            and RES.SUSPENSION_STATE_ = 2",
                "         </if>",
                "@@ -969,8 +962,9 @@ under the License.",
                "               and (RES.ASSIGNEE_ = #{userIdForCandidateAndAssignee}",
                "-              or (",
                "-              <if test=\"!ignoreAssigneeValue\">",
                "-                RES.ASSIGNEE_ is null",
                "-              </if>",
                "-              and (I.USER_ID_ = #{userIdForCandidateAndAssignee}",
                "-              or I.GROUP_ID_ IN (select g.GROUP_ID_ from ${prefix}ACT_ID_MEMBERSHIP g where g.USER_ID_ = #{userIdForCandidateAndAssignee} ) ) ) )",
                "+                or (",
                "+                <if test=\"!ignoreAssigneeValue\">",
                "+                    RES.ASSIGNEE_ is null and",
                "+                </if>",
                "+                exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_",
                "+                and (LINK.USER_ID_ = #{userIdForCandidateAndAssignee}",
                "+                or LINK.GROUP_ID_ IN (select g.GROUP_ID_ from ${prefix}ACT_ID_MEMBERSHIP g where g.USER_ID_ = #{userIdForCandidateAndAssignee} )))))",
                "             </if>",
                "@@ -980,15 +974,15 @@ under the License.",
                "             and (RES.ASSIGNEE_ = #{userIdForCandidateAndAssignee}",
                "-            ",
                "-            or (",
                "-            <if test=\"!ignoreAssigneeValue\">",
                "-              RES.ASSIGNEE_ is null and",
                "-            </if>",
                "-            I.TYPE_ = 'candidate' and (I.USER_ID_ = #{userIdForCandidateAndAssignee}",
                "-            <if test=\"candidateGroups.size() &gt; 0\">",
                "-              or I.GROUP_ID_ IN",
                "-              <foreach item=\"group\" index=\"index\" collection=\"candidateGroups\" open=\"(\" separator=\",\" close=\")\">",
                "-                #{group}",
                "-              </foreach>",
                "-            </if>",
                "-            )))",
                "+              or (",
                "+              <if test=\"!ignoreAssigneeValue\">",
                "+                RES.ASSIGNEE_ is null and",
                "+              </if>",
                "+                exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_",
                "+                and LINK.TYPE_ = 'candidate' and (LINK.USER_ID_ = #{userIdForCandidateAndAssignee}",
                "+                <if test=\"candidateGroups.size() &gt; 0\">",
                "+                    or LINK.GROUP_ID_ IN",
                "+                    <foreach item=\"group\" index=\"index\" collection=\"candidateGroups\" open=\"(\" separator=\",\" close=\")\">",
                "+                        #{group}",
                "+                    </foreach>",
                "+                </if>",
                "+                ))))",
                "           </if>",
                "@@ -999,397 +993,406 @@ under the License.",
                "         <trim prefix=\"(\" prefixOverrides=\"OR\" suffix=\")\">",
                "-          <if test=\"orQueryObject.taskId != null\">",
                "-            RES.ID_ = #{orQueryObject.taskId}",
                "-          </if>",
                "-          <if test=\"orQueryObject.name != null\">",
                "-            or RES.NAME_ = #{orQueryObject.name}",
                "-          </if>",
                "-          <if test=\"orQueryObject.nameLike != null\">",
                "-            or RES.NAME_ like #{orQueryObject.nameLike}${wildcardEscapeClause}",
                "-          </if>",
                "-          <if test=\"orQueryObject.nameLikeIgnoreCase != null\">",
                "-            or lower(RES.NAME_) like #{orQueryObject.nameLikeIgnoreCase}${wildcardEscapeClause}",
                "-          </if>",
                "-          <if test=\"orQueryObject.nameList != null &amp;&amp; orQueryObject.nameList.size() &gt; 0\">",
                "-            or RES.NAME_ IN",
                "-            <foreach item=\"name\" index=\"index\" collection=\"orQueryObject.nameList\"",
                "-                       open=\"(\" separator=\",\" close=\")\">",
                "-              #{name}",
                "-            </foreach>",
                "-          </if>",
                "-          <if test=\"orQueryObject.nameListIgnoreCase != null &amp;&amp; orQueryObject.nameListIgnoreCase.size() &gt; 0\">",
                "-            or lower(RES.NAME_) IN",
                "-            <foreach item=\"name\" index=\"index\" collection=\"orQueryObject.nameListIgnoreCase\"",
                "-                       open=\"(\" separator=\",\" close=\")\">",
                "-              #{name}",
                "-            </foreach>",
                "-          </if>",
                "-          <if test=\"orQueryObject.description != null\">",
                "-            or RES.DESCRIPTION_ = #{orQueryObject.description}",
                "-          </if>",
                "-          <if test=\"orQueryObject.descriptionLike != null\">",
                "-            or RES.DESCRIPTION_ like #{orQueryObject.descriptionLike}${wildcardEscapeClause}",
                "-          </if>",
                "-          <if test=\"orQueryObject.descriptionLikeIgnoreCase != null\">",
                "-            or lower(RES.DESCRIPTION_) like #{orQueryObject.descriptionLikeIgnoreCase}${wildcardEscapeClause}",
                "-          </if>",
                "-          <if test=\"orQueryObject.priority != null\">",
                "-            or RES.PRIORITY_ = #{orQueryObject.priority}",
                "-          </if> ",
                "-          <if test=\"orQueryObject.minPriority != null\">",
                "-            or RES.PRIORITY_ &gt;= #{orQueryObject.minPriority}",
                "-          </if> ",
                "-          <if test=\"orQueryObject.maxPriority != null\">",
                "-            or RES.PRIORITY_ &lt;= #{orQueryObject.maxPriority}",
                "-          </if> ",
                "-          <if test=\"orQueryObject.assignee != null\">",
                "-            or RES.ASSIGNEE_ = #{orQueryObject.assignee}",
                "-          </if>",
                "-          <if test=\"orQueryObject.assigneeLike != null\">",
                "-            or RES.ASSIGNEE_ like #{orQueryObject.assigneeLike}${wildcardEscapeClause}",
                "-          </if>",
                "-          <if test=\"orQueryObject.assigneeLikeIgnoreCase != null\">",
                "-            or lower(RES.ASSIGNEE_) like #{orQueryObject.assigneeLikeIgnoreCase}${wildcardEscapeClause}",
                "-          </if>",
                "-          <if test=\"orQueryObject.assigneeIds != null &amp;&amp; orQueryObject.assigneeIds.size() &gt; 0\">",
                "-            or RES.ASSIGNEE_ IN",
                "-            <foreach item=\"assigneeId\" index=\"index\" collection=\"orQueryObject.assigneeIds\" ",
                "+            <if test=\"orQueryObject.taskId != null\">",
                "+              RES.ID_ = #{orQueryObject.taskId}",
                "+            </if>",
                "+            <if test=\"orQueryObject.name != null\">",
                "+              or RES.NAME_ = #{orQueryObject.name}",
                "+            </if>",
                "+            <if test=\"orQueryObject.nameLike != null\">",
                "+              or RES.NAME_ like #{orQueryObject.nameLike}${wildcardEscapeClause}",
                "+            </if>",
                "+            <if test=\"orQueryObject.nameLikeIgnoreCase != null\">",
                "+              or lower(RES.NAME_) like #{orQueryObject.nameLikeIgnoreCase}${wildcardEscapeClause}",
                "+            </if>",
                "+            <if test=\"orQueryObject.nameList != null &amp;&amp; orQueryObject.nameList.size() &gt; 0\">",
                "+              or RES.NAME_ IN",
                "+              <foreach item=\"name\" index=\"index\" collection=\"orQueryObject.nameList\"",
                "+                      open=\"(\" separator=\",\" close=\")\">",
                "+                #{name}",
                "+              </foreach>",
                "+            </if>",
                "+            <if test=\"orQueryObject.nameListIgnoreCase != null &amp;&amp; orQueryObject.nameListIgnoreCase.size() &gt; 0\">",
                "+              or lower(RES.NAME_) IN",
                "+              <foreach item=\"name\" index=\"index\" collection=\"orQueryObject.nameListIgnoreCase\"",
                "                        open=\"(\" separator=\",\" close=\")\">",
                "-              #{assigneeId}",
                "-            </foreach>",
                "-          </if>",
                "-          <if test=\"orQueryObject.owner != null\">",
                "-            or RES.OWNER_ = #{orQueryObject.owner}",
                "-          </if>",
                "-          <if test=\"orQueryObject.ownerLike != null\">",
                "-            or RES.OWNER_ like #{orQueryObject.ownerLike}${wildcardEscapeClause}",
                "-          </if>",
                "-          <if test=\"orQueryObject.ownerLikeIgnoreCase != null\">",
                "-            or RES.OWNER_ like #{orQueryObject.ownerLikeIgnoreCase}${wildcardEscapeClause}",
                "-          </if>",
                "-          <if test=\"orQueryObject.unassigned\">",
                "-            or RES.ASSIGNEE_ IS NULL",
                "-          </if>",
                "-          <if test=\"orQueryObject.noDelegationState\">",
                "-            or RES.DELEGATION_ IS NULL",
                "-          </if>",
                "-          <if test=\"orQueryObject.delegationState != null\">",
                "-            or RES.DELEGATION_ = #{orQueryObject.delegationStateString}",
                "-          </if>",
                "-          <if test=\"orQueryObject.processInstanceId != null\">",
                "-            or RES.PROC_INST_ID_ = #{orQueryObject.processInstanceId}",
                "-          </if>",
                "-          <if test=\"orQueryObject.processInstanceIds != null &amp;&amp; orQueryObject.processInstanceIds.size() &gt; 0\">",
                "-            or RES.PROC_INST_ID_ IN",
                "-            <foreach item=\"processInstance\" index=\"index\" collection=\"orQueryObject.processInstanceIds\" ",
                "+                #{name}",
                "+              </foreach>",
                "+            </if>",
                "+            <if test=\"orQueryObject.description != null\">",
                "+              or RES.DESCRIPTION_ = #{orQueryObject.description}",
                "+            </if>",
                "+            <if test=\"orQueryObject.descriptionLike != null\">",
                "+              or RES.DESCRIPTION_ like #{orQueryObject.descriptionLike}${wildcardEscapeClause}",
                "+            </if>",
                "+             <if test=\"orQueryObject.descriptionLikeIgnoreCase != null\">",
                "+              or lower(RES.DESCRIPTION_) like #{orQueryObject.descriptionLikeIgnoreCase}${wildcardEscapeClause}",
                "+            </if>",
                "+            <if test=\"orQueryObject.priority != null\">",
                "+              or RES.PRIORITY_ = #{orQueryObject.priority}",
                "+            </if> ",
                "+            <if test=\"orQueryObject.minPriority != null\">",
                "+              or RES.PRIORITY_ &gt;= #{orQueryObject.minPriority}",
                "+            </if> ",
                "+            <if test=\"orQueryObject.maxPriority != null\">",
                "+              or RES.PRIORITY_ &lt;= #{orQueryObject.maxPriority}",
                "+            </if> ",
                "+            <if test=\"orQueryObject.assignee != null\">",
                "+              or RES.ASSIGNEE_ = #{orQueryObject.assignee}",
                "+            </if>",
                "+            <if test=\"orQueryObject.assigneeLike != null\">",
                "+              or RES.ASSIGNEE_ like #{orQueryObject.assigneeLike}${wildcardEscapeClause}",
                "+            </if>",
                "+            <if test=\"orQueryObject.assigneeLikeIgnoreCase != null\">",
                "+              or lower(RES.ASSIGNEE_) like #{orQueryObject.assigneeLikeIgnoreCase}${wildcardEscapeClause}",
                "+            </if>",
                "+            <if test=\"orQueryObject.assigneeIds != null &amp;&amp; orQueryObject.assigneeIds.size() &gt; 0\">",
                "+\t\t      or RES.ASSIGNEE_ IN",
                "+\t\t      <foreach item=\"assigneeId\" index=\"index\" collection=\"orQueryObject.assigneeIds\" ",
                "+\t\t               open=\"(\" separator=\",\" close=\")\">",
                "+\t\t        #{assigneeId}",
                "+\t\t      </foreach>",
                "+\t\t    </if>",
                "+            <if test=\"orQueryObject.owner != null\">",
                "+              or RES.OWNER_ = #{orQueryObject.owner}",
                "+            </if>",
                "+            <if test=\"orQueryObject.ownerLike != null\">",
                "+              or RES.OWNER_ like #{orQueryObject.ownerLike}${wildcardEscapeClause}",
                "+            </if>",
                "+            <if test=\"orQueryObject.ownerLikeIgnoreCase != null\">",
                "+              or RES.OWNER_ like #{orQueryObject.ownerLikeIgnoreCase}${wildcardEscapeClause}",
                "+            </if>",
                "+            <if test=\"orQueryObject.unassigned\">",
                "+              or RES.ASSIGNEE_ IS NULL",
                "+            </if>",
                "+            <if test=\"orQueryObject.noDelegationState\">",
                "+              or RES.DELEGATION_ IS NULL",
                "+            </if>",
                "+            <if test=\"orQueryObject.delegationState != null\">",
                "+              or RES.DELEGATION_ = #{orQueryObject.delegationStateString}",
                "+            </if>",
                "+            <if test=\"orQueryObject.processInstanceId != null\">",
                "+              or RES.PROC_INST_ID_ = #{orQueryObject.processInstanceId}",
                "+            </if>",
                "+            <if test=\"orQueryObject.processInstanceIds != null &amp;&amp; orQueryObject.processInstanceIds.size() &gt; 0\">",
                "+              or RES.PROC_INST_ID_ IN",
                "+              <foreach item=\"processInstance\" index=\"index\" collection=\"orQueryObject.processInstanceIds\" ",
                "                        open=\"(\" separator=\",\" close=\")\">",
                "-              #{processInstance}",
                "-            </foreach>",
                "-          </if>",
                "-          <if test=\"orQueryObject.processInstanceBusinessKey != null\">",
                "-            or E_OR${orIndex}.BUSINESS_KEY_ = #{orQueryObject.processInstanceBusinessKey}",
                "-          </if>",
                "-          <if test=\"orQueryObject.processInstanceBusinessKeyLike != null\">",
                "-            or E_OR${orIndex}.BUSINESS_KEY_ like #{orQueryObject.processInstanceBusinessKeyLike}${wildcardEscapeClause}",
                "-          </if>      ",
                "-          <if test=\"orQueryObject.processInstanceBusinessKeyLikeIgnoreCase != null\">",
                "-            or lower(E.BUSINESS_KEY_) like #{orQueryObject.processInstanceBusinessKeyLikeIgnoreCase}${wildcardEscapeClause}",
                "-          </if>         ",
                "-          <if test=\"orQueryObject.executionId != null\">",
                "-            or RES.EXECUTION_ID_ = #{orQueryObject.executionId}",
                "-          </if>",
                "-          <if test=\"orQueryObject.scopeId != null\">",
                "-            and RES.SCOPE_ID_ = #{orQueryObject.scopeId}",
                "-          </if>",
                "-          <if test=\"orQueryObject.subScopeId != null\">",
                "-            and RES.SUB_SCOPE_ID_ = #{orQueryObject.subScopeId}",
                "-          </if>",
                "-          <if test=\"orQueryObject.scopeType != null\">",
                "-            and RES.SCOPE_TYPE_ = #{orQueryObject.scopeType}",
                "-          </if>",
                "-          <if test=\"orQueryObject.scopeDefinitionId != null\">",
                "-            and RES.SCOPE_DEFINITION_ID_ = #{orQueryObject.scopeDefinitionId}",
                "-          </if>",
                "-          <if test=\"orQueryObject.createTime != null\">",
                "-            or RES.CREATE_TIME_ = #{orQueryObject.createTime}",
                "-          </if>",
                "-          <if test=\"orQueryObject.createTimeBefore != null\">",
                "-            or RES.CREATE_TIME_ &lt; #{orQueryObject.createTimeBefore}",
                "-          </if>",
                "-          <if test=\"orQueryObject.createTimeAfter != null\">",
                "-            or RES.CREATE_TIME_ &gt; #{orQueryObject.createTimeAfter}",
                "-          </if>",
                "-          <if test=\"orQueryObject.key != null\">",
                "-            or RES.TASK_DEF_KEY_ = #{orQueryObject.key}",
                "-          </if>",
                "-          <if test=\"orQueryObject.keyLike != null\">",
                "-            or RES.TASK_DEF_KEY_ like #{orQueryObject.keyLike}${wildcardEscapeClause}",
                "-          </if>",
                "-          <if test=\"orQueryObject.processDefinitionId != null\">",
                "-            or RES.PROC_DEF_ID_ = #{orQueryObject.processDefinitionId}",
                "-          </if>",
                "-          <if test=\"orQueryObject.taskDefinitionId != null\">",
                "-            or RES.TASK_DEF_ID_ = #{orQueryObject.taskDefinitionId}",
                "-          </if>",
                "-          <if test=\"orQueryObject.processDefinitionKey != null\">",
                "-            or D_OR${orIndex}.KEY_ = #{orQueryObject.processDefinitionKey}",
                "-          </if>",
                "-          <if test=\"orQueryObject.processDefinitionKeyLike != null\">",
                "-            or D_OR${orIndex}.KEY_ like #{orQueryObject.processDefinitionKeyLike}${wildcardEscapeClause}",
                "-          </if>",
                "-          <if test=\"orQueryObject.processDefinitionKeyLikeIgnoreCase != null\">",
                "-            or lower(D_OR${orIndex}.KEY_) like #{orQueryObject.processDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}",
                "-          </if>",
                "-          <if test=\"orQueryObject.processDefinitionKeys != null &amp;&amp; orQueryObject.processDefinitionKeys.size() &gt; 0\">",
                "-            or D_OR${orIndex}.KEY_ in",
                "-            <foreach item=\"item\" index=\"index\" collection=\"orQueryObject.processDefinitionKeys\" open=\"(\" separator=\",\" close=\")\">",
                "-              #{item}",
                "-            </foreach>",
                "-          </if>",
                "-          <if test=\"orQueryObject.processDefinitionName != null\">",
                "-            or D_OR${orIndex}.NAME_ = #{orQueryObject.processDefinitionName}",
                "-          </if>",
                "-          <if test=\"orQueryObject.processDefinitionNameLike != null\">",
                "-            or D_OR${orIndex}.NAME_ like #{orQueryObject.processDefinitionNameLike}${wildcardEscapeClause}",
                "-          </if>",
                "-          <if test=\"orQueryObject.processCategoryInList != null &amp;&amp; orQueryObject.processCategoryInList.size() &gt; 0\">",
                "-            or D_OR${orIndex}.CATEGORY_ IN",
                "-            <foreach item=\"processCategory\" index=\"index\" collection=\"orQueryObject.processCategoryInList\"",
                "+                #{processInstance}",
                "+              </foreach>",
                "+            </if>",
                "+            <if test=\"orQueryObject.processInstanceBusinessKey != null\">",
                "+              or E_OR${orIndex}.BUSINESS_KEY_ = #{orQueryObject.processInstanceBusinessKey}",
                "+            </if>",
                "+            <if test=\"orQueryObject.processInstanceBusinessKeyLike != null\">",
                "+              or E_OR${orIndex}.BUSINESS_KEY_ like #{orQueryObject.processInstanceBusinessKeyLike}${wildcardEscapeClause}",
                "+            </if>      ",
                "+            <if test=\"orQueryObject.processInstanceBusinessKeyLikeIgnoreCase != null\">",
                "+              or lower(E.BUSINESS_KEY_) like #{orQueryObject.processInstanceBusinessKeyLikeIgnoreCase}${wildcardEscapeClause}",
                "+            </if>         ",
                "+            <if test=\"orQueryObject.executionId != null\">",
                "+              or RES.EXECUTION_ID_ = #{orQueryObject.executionId}",
                "+            </if>",
                "+            <if test=\"orQueryObject.scopeId != null\">",
                "+              and RES.SCOPE_ID_ = #{orQueryObject.scopeId}",
                "+            </if>",
                "+            <if test=\"orQueryObject.subScopeId != null\">",
                "+              and RES.SUB_SCOPE_ID_ = #{orQueryObject.subScopeId}",
                "+            </if>",
                "+            <if test=\"orQueryObject.scopeType != null\">",
                "+              and RES.SCOPE_TYPE_ = #{orQueryObject.scopeType}",
                "+            </if>",
                "+            <if test=\"orQueryObject.scopeDefinitionId != null\">",
                "+              and RES.SCOPE_DEFINITION_ID_ = #{orQueryObject.scopeDefinitionId}",
                "+            </if>",
                "+            <if test=\"orQueryObject.createTime != null\">",
                "+              or RES.CREATE_TIME_ = #{orQueryObject.createTime}",
                "+            </if>",
                "+            <if test=\"orQueryObject.createTimeBefore != null\">",
                "+              or RES.CREATE_TIME_ &lt; #{orQueryObject.createTimeBefore}",
                "+            </if>",
                "+            <if test=\"orQueryObject.createTimeAfter != null\">",
                "+              or RES.CREATE_TIME_ &gt; #{orQueryObject.createTimeAfter}",
                "+            </if>",
                "+            <if test=\"orQueryObject.key != null\">",
                "+              or RES.TASK_DEF_KEY_ = #{orQueryObject.key}",
                "+            </if>",
                "+            <if test=\"orQueryObject.keyLike != null\">",
                "+              or RES.TASK_DEF_KEY_ like #{orQueryObject.keyLike}${wildcardEscapeClause}",
                "+            </if>",
                "+            <if test=\"orQueryObject.processDefinitionId != null\">",
                "+              or RES.PROC_DEF_ID_ = #{orQueryObject.processDefinitionId}",
                "+            </if>",
                "+            <if test=\"orQueryObject.taskDefinitionId != null\">",
                "+              or RES.TASK_DEF_ID_ = #{orQueryObject.taskDefinitionId}",
                "+            </if>",
                "+            <if test=\"orQueryObject.processDefinitionKey != null\">",
                "+              or D_OR${orIndex}.KEY_ = #{orQueryObject.processDefinitionKey}",
                "+            </if>",
                "+            <if test=\"orQueryObject.processDefinitionKeyLike != null\">",
                "+              or D_OR${orIndex}.KEY_ like #{orQueryObject.processDefinitionKeyLike}${wildcardEscapeClause}",
                "+            </if>",
                "+             <if test=\"orQueryObject.processDefinitionKeyLikeIgnoreCase != null\">",
                "+              or lower(D_OR${orIndex}.KEY_) like #{orQueryObject.processDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}",
                "+            </if>",
                "+            <if test=\"orQueryObject.processDefinitionKeys != null &amp;&amp; orQueryObject.processDefinitionKeys.size() &gt; 0\">",
                "+              or D_OR${orIndex}.KEY_ in",
                "+              <foreach item=\"item\" index=\"index\" collection=\"orQueryObject.processDefinitionKeys\" open=\"(\" separator=\",\" close=\")\">",
                "+                #{item}",
                "+              </foreach>",
                "+            </if>",
                "+            <if test=\"orQueryObject.processDefinitionName != null\">",
                "+              or D_OR${orIndex}.NAME_ = #{orQueryObject.processDefinitionName}",
                "+            </if>",
                "+            <if test=\"orQueryObject.processDefinitionNameLike != null\">",
                "+              or D_OR${orIndex}.NAME_ like #{orQueryObject.processDefinitionNameLike}${wildcardEscapeClause}",
                "+            </if>",
                "+            <if test=\"orQueryObject.processCategoryInList != null &amp;&amp; orQueryObject.processCategoryInList.size() &gt; 0\">",
                "+              or D_OR${orIndex}.CATEGORY_ IN",
                "+              <foreach item=\"processCategory\" index=\"index\" collection=\"orQueryObject.processCategoryInList\"",
                "                        open=\"(\" separator=\",\" close=\")\">",
                "-              #{processCategory}",
                "-            </foreach>",
                "-          </if>",
                "-          <if test=\"orQueryObject.processCategoryNotInList != null &amp;&amp; orQueryObject.processCategoryNotInList.size() &gt; 0\">",
                "-            or D_OR${orIndex}.CATEGORY_ NOT IN",
                "-            <foreach item=\"processCategory\" index=\"index\" collection=\"orQueryObject.processCategoryNotInList\"",
                "+                #{processCategory}",
                "+              </foreach>",
                "+            </if>",
                "+            <if test=\"orQueryObject.processCategoryNotInList != null &amp;&amp; orQueryObject.processCategoryNotInList.size() &gt; 0\">",
                "+              or D_OR${orIndex}.CATEGORY_ NOT IN",
                "+              <foreach item=\"processCategory\" index=\"index\" collection=\"orQueryObject.processCategoryNotInList\"",
                "                        open=\"(\" separator=\",\" close=\")\">",
                "-              #{processCategory}",
                "-            </foreach>",
                "-          </if>",
                "-          <if test=\"orQueryObject.deploymentId != null\">",
                "-            or DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_ = #{orQueryObject.deploymentId}",
                "-          </if>",
                "-          <if test=\"orQueryObject.deploymentIds != null &amp;&amp; orQueryObject.deploymentIds.size() &gt; 0\">",
                "-            or DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_ IN",
                "-            <foreach item=\"deployment\" index=\"index\" collection=\"orQueryObject.deploymentIds\" ",
                "+                #{processCategory}",
                "+              </foreach>",
                "+            </if>",
                "+            <if test=\"orQueryObject.deploymentId != null\">",
                "+              or DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_ = #{orQueryObject.deploymentId}",
                "+            </if>",
                "+            <if test=\"orQueryObject.deploymentIds != null &amp;&amp; orQueryObject.deploymentIds.size() &gt; 0\">",
                "+              or DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_ IN",
                "+              <foreach item=\"deployment\" index=\"index\" collection=\"orQueryObject.deploymentIds\" ",
                "                        open=\"(\" separator=\",\" close=\")\">",
                "-              #{deployment}",
                "-            </foreach>",
                "-          </if>",
                "-          <if test=\"orQueryObject.cmmnDeploymentId != null\">",
                "-            or DEPLOY_C_OR${orIndex}.DEPLOYMENT_ID_ = #{orQueryObject.cmmnDeploymentId}",
                "-          </if>",
                "-          <if test=\"orQueryObject.cmmnDeploymentIds != null &amp;&amp; orQueryObject.cmmnDeploymentIds.size() &gt; 0\">",
                "-            or DEPLOY_C_OR${orIndex}.DEPLOYMENT_ID_ IN",
                "-            <foreach item=\"deployment\" index=\"index\" collection=\"orQueryObject.cmmnDeploymentIds\" ",
                "+                #{deployment}",
                "+              </foreach>",
                "+            </if>",
                "+            <if test=\"orQueryObject.cmmnDeploymentId != null\">",
                "+              or DEPLOY_C_OR${orIndex}.DEPLOYMENT_ID_ = #{orQueryObject.cmmnDeploymentId}",
                "+            </if>",
                "+            <if test=\"orQueryObject.cmmnDeploymentIds != null &amp;&amp; orQueryObject.cmmnDeploymentIds.size() &gt; 0\">",
                "+              or DEPLOY_C_OR${orIndex}.DEPLOYMENT_ID_ IN",
                "+              <foreach item=\"deployment\" index=\"index\" collection=\"orQueryObject.cmmnDeploymentIds\" ",
                "                        open=\"(\" separator=\",\" close=\")\">",
                "-              #{deployment}",
                "-            </foreach>",
                "-          </if>",
                "-          <if test=\"orQueryObject.dueDate != null\">",
                "-            or RES.DUE_DATE_ = #{orQueryObject.dueDate}",
                "-          </if>",
                "-          <if test=\"orQueryObject.dueBefore != null\">",
                "-            or (RES.DUE_DATE_ &lt; #{orQueryObject.dueBefore} and RES.DUE_DATE_ is not null)",
                "-          </if>",
                "-          <if test=\"orQueryObject.dueAfter != null\">",
                "-            or (RES.DUE_DATE_ &gt; #{orQueryObject.dueAfter} and RES.DUE_DATE_ is not null)",
                "-          </if>",
                "-          <if test=\"orQueryObject.withoutDueDate\">",
                "-            or RES.DUE_DATE_ is null",
                "-          </if>",
                "-          <if test=\"orQueryObject.category != null\">",
                "-            or RES.CATEGORY_ = #{orQueryObject.category}",
                "-          </if>",
                "-          <if test=\"orQueryObject.excludeSubtasks\">",
                "-            or RES.PARENT_TASK_ID_ IS NULL",
                "-          </if>",
                "-            ",
                "-          <if test=\"!orQueryObject.bothCandidateAndAssigned &amp;&amp; (orQueryObject.candidateUser != null || orQueryObject.candidateGroups != null)\">",
                "-            or (",
                "-            <if test=\"!orQueryObject.ignoreAssigneeValue\">",
                "-              RES.ASSIGNEE_ is null and",
                "+                #{deployment}",
                "+              </foreach>",
                "             </if>",
                "-            I_OR${orIndex}.TYPE_ = 'candidate'",
                "-            and ",
                "-            ( ",
                "-            <if test=\"orQueryObject.candidateUser != null\">",
                "-              I_OR${orIndex}.USER_ID_ = #{orQueryObject.candidateUser}          ",
                "+            <if test=\"orQueryObject.dueDate != null\">",
                "+              or RES.DUE_DATE_ = #{orQueryObject.dueDate}",
                "             </if>",
                "-            <if test=\"orQueryObject.candidateUser != null &amp;&amp; orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0\">",
                "-              or",
                "+            <if test=\"orQueryObject.dueBefore != null\">",
                "+              or (RES.DUE_DATE_ &lt; #{orQueryObject.dueBefore} and RES.DUE_DATE_ is not null)",
                "             </if>",
                "-            <if test=\"orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0\">",
                "-              I_OR${orIndex}.GROUP_ID_ IN",
                "-              <foreach item=\"group\" index=\"index\" collection=\"orQueryObject.candidateGroups\" ",
                "-                           open=\"(\" separator=\",\" close=\")\">",
                "-                #{group}",
                "-              </foreach>",
                "+            <if test=\"orQueryObject.dueAfter != null\">",
                "+              or (RES.DUE_DATE_ &gt; #{orQueryObject.dueAfter} and RES.DUE_DATE_ is not null)",
                "             </if>",
                "-            ))",
                "-          </if>",
                "-          <if test=\"orQueryObject.involvedUser != null\">",
                "-            or (",
                "-            exists(select LINK.USER_ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where USER_ID_ = #{orQueryObject.involvedUser} and LINK.TASK_ID_ = RES.ID_)",
                "-            or RES.ASSIGNEE_ = #{orQueryObject.involvedUser}",
                "-            or RES.OWNER_ = #{orQueryObject.involvedUser}",
                "-            )",
                "-          </if>",
                "-          <foreach item=\"var\" collection=\"orQueryObject.queryVariableValues\" index=\"index\">",
                "-            or ",
                "-            <trim prefix=\"(\" prefixOverrides=\"AND\" suffix=\")\">",
                "-              <choose>",
                "-                <when test=\"var.operator.equals('EXISTS')\">",
                "-                  and EXISTS (",
                "-                  select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}",
                "-                  <if test=\"!var.local\">",
                "-                    and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null",
                "-                  </if>",
                "-                  <if test=\"var.local\">",
                "-                    and RES.ID_ = TASK_ID_ ",
                "-                  </if>",
                "-                  )",
                "-                </when>",
                "-                <when test=\"var.operator.equals('NOT_EXISTS')\">",
                "-                  and NOT EXISTS (",
                "-                  select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}",
                "-                  <if test=\"!var.local\">",
                "-                    and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null",
                "-                  </if>",
                "-                  <if test=\"var.local\">",
                "-                    and RES.ID_ = TASK_ID_ ",
                "-                  </if>",
                "-                  )",
                "-                </when>",
                "-                <otherwise>",
                "-                  <choose>",
                "-                    <when test=\"!var.local\">",
                "-                      <bind name=\"orLocal\" value=\"''\" />",
                "-                      <!-- When process instance variable is queried for, taskId should be null -->",
                "-                      and A_OR${orIndex}.TASK_ID_ is null",
                "+            <if test=\"orQueryObject.withoutDueDate\">",
                "+              or RES.DUE_DATE_ is null",
                "+            </if>",
                "+            <if test=\"orQueryObject.category != null\">",
                "+              or RES.CATEGORY_ = #{orQueryObject.category}",
                "+            </if>",
                "+            <if test=\"orQueryObject.excludeSubtasks\">",
                "+              or RES.PARENT_TASK_ID_ IS NULL",
                "+            </if>",
                "+            ",
                "+            <if test=\"!orQueryObject.bothCandidateAndAssigned &amp;&amp; (orQueryObject.candidateUser != null || orQueryObject.candidateGroups != null)\">",
                "+              or (",
                "+                <if test=\"!orQueryObject.ignoreAssigneeValue\">",
                "+                    RES.ASSIGNEE_ is null and",
                "+                </if>",
                "+                exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TYPE_ = 'candidate' and LINK.TASK_ID_ = RES.ID_",
                "+                    and ",
                "+                    ( ",
                "+                    <if test=\"orQueryObject.candidateUser != null\">",
                "+                      LINK.USER_ID_ = #{orQueryObject.candidateUser}          ",
                "+                    </if>",
                "+                    <if test=\"orQueryObject.candidateUser != null &amp;&amp; orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0\">",
                "+                      or",
                "+                    </if>",
                "+                    <if test=\"orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0\">",
                "+                      LINK.GROUP_ID_ IN",
                "+                      <foreach item=\"group\" index=\"index\" collection=\"orQueryObject.candidateGroups\" ",
                "+                               open=\"(\" separator=\",\" close=\")\">",
                "+                        #{group}",
                "+                      </foreach>",
                "+                    </if>",
                "+                    )",
                "+                )",
                "+              )",
                "+            </if>",
                "+            <if test=\"orQueryObject.involvedUser != null\">",
                "+              or (",
                "+                exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.USER_ID_ = #{orQueryObject.involvedUser} and LINK.TASK_ID_ = RES.ID_)",
                "+                or RES.ASSIGNEE_ = #{orQueryObject.involvedUser}",
                "+                or RES.OWNER_ = #{orQueryObject.involvedUser}",
                "+                )",
                "+            </if>",
                "+            <if test=\"orQueryObject.involvedGroups != null\">",
                "+              or (",
                "+                EXISTS(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_ and LINK.GROUP_ID_ in",
                "+                <foreach item=\"involvedGroup\" index=\"index\" collection=\"orQueryObject.involvedGroups\" open=\"(\" separator=\",\" close=\")\">",
                "+                    #{involvedGroup}",
                "+                </foreach>",
                "+                )",
                "+              )",
                "+            </if>",
                "+            <foreach item=\"var\" collection=\"orQueryObject.queryVariableValues\" index=\"index\">",
                "+              or ",
                "+              <trim prefix=\"(\" prefixOverrides=\"AND\" suffix=\")\">",
                "+                <choose>",
                "+                    <when test=\"var.operator.equals('EXISTS')\">",
                "+                        and EXISTS (",
                "+                            select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}",
                "+                        <if test=\"!var.local\">",
                "+                            and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null",
                "+                        </if>",
                "+                        <if test=\"var.local\">",
                "+                            and RES.ID_ = TASK_ID_ ",
                "+                        </if>",
                "+                        )",
                "+                    </when>",
                "+                    <when test=\"var.operator.equals('NOT_EXISTS')\">",
                "+                        and NOT EXISTS (",
                "+                            select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}",
                "+                        <if test=\"!var.local\">",
                "+                            and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null",
                "+                        </if>",
                "+                        <if test=\"var.local\">",
                "+                            and RES.ID_ = TASK_ID_ ",
                "+                        </if>",
                "+                        )",
                "                     </when>",
                "                     <otherwise>",
                "-                      <bind name=\"orLocal\" value=\"'L_'\" />",
                "-                    </otherwise>",
                "-                  </choose>",
                "-                  <if test=\"var.name != null\">",
                "-                    <!-- Match-all variable-names when name is null -->",
                "-                    and A_${orLocal}OR${orIndex}.NAME_= #{var.name}",
                "-                  </if>",
                "-                  <if test=\"var.name == null\">",
                "-                    and A_${orLocal}OR${orIndex}.NAME_ is not null",
                "-                  </if>",
                "-                  <if test=\"!var.type.equals('null')\">",
                "-                    and A_${orLocal}OR${orIndex}.TYPE_ = #{var.type}",
                "-                  </if>",
                "-                  <!-- Variable value -->",
                "-                  <if test=\"var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">",
                "-                    <choose>",
                "-                      <when test=\"var.operator.equals('EQUALS_IGNORE_CASE') || var.operator.equals('NOT_EQUALS_IGNORE_CASE') || var.operator.equals('LIKE_IGNORE_CASE')\">",
                "-                        and lower(A_${orLocal}OR${orIndex}.TEXT_)",
                "-                      </when>",
                "-                      <otherwise>",
                "-                        and A_${orLocal}OR${orIndex}.TEXT_",
                "-                      </otherwise>",
                "-                    </choose> ",
                "-                    <choose>",
                "-                      <when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">LIKE</when>",
                "-                      <otherwise>",
                "+                      <choose>",
                "+                        <when test=\"!var.local\">",
                "+                          <bind name=\"orLocal\" value=\"''\" />",
                "+                          <!-- When process instance variable is queried for, taskId should be null -->",
                "+                          and A_OR${orIndex}.TASK_ID_ is null",
                "+                        </when>",
                "+                        <otherwise>",
                "+                          <bind name=\"orLocal\" value=\"'L_'\" />",
                "+                        </otherwise>",
                "+                      </choose>",
                "+                      <if test=\"var.name != null\">",
                "+                        <!-- Match-all variable-names when name is null -->",
                "+                        and A_${orLocal}OR${orIndex}.NAME_= #{var.name}",
                "+                      </if>",
                "+                      <if test=\"var.name == null\">",
                "+                        and A_${orLocal}OR${orIndex}.NAME_ is not null",
                "+                      </if>",
                "+                      <if test=\"!var.type.equals('null')\">",
                "+                        and A_${orLocal}OR${orIndex}.TYPE_ = #{var.type}",
                "+                      </if>",
                "+                      <!-- Variable value -->",
                "+                      <if test=\"var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">",
                "+                        <choose>",
                "+                          <when test=\"var.operator.equals('EQUALS_IGNORE_CASE') || var.operator.equals('NOT_EQUALS_IGNORE_CASE') || var.operator.equals('LIKE_IGNORE_CASE')\">",
                "+                            and lower(A_${orLocal}OR${orIndex}.TEXT_)",
                "+                          </when>",
                "+                          <otherwise>",
                "+                            and A_${orLocal}OR${orIndex}.TEXT_",
                "+                          </otherwise>",
                "+                        </choose> ",
                "+                        <choose>",
                "+                            <when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">LIKE</when>",
                "+                            <otherwise><include refid=\"executionVariableOperator\" /></otherwise>",
                "+                        </choose>          ",
                "+                        #{var.textValue}",
                "+                        <choose>",
                "+                            <when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">${wildcardEscapeClause}</when>",
                "+                        </choose>",
                "+                      </if>",
                "+                      <if test=\"var.textValue2 != null\">",
                "+                        and A_${orLocal}OR${orIndex}.TEXT2_",
                "+                        <choose>",
                "+                          <when test=\"var.operator.equals('LIKE')\">LIKE</when>",
                "+                          <otherwise><include refid=\"executionVariableOperator\" /></otherwise>",
                "+                        </choose>          ",
                "+                        #{var.textValue2}",
                "+                        <choose>",
                "+                          <when test=\"var.operator.equals('LIKE')\">${wildcardEscapeClause}</when>",
                "+                        </choose>",
                "+                      </if>",
                "+                      <if test=\"var.longValue != null\">",
                "+                        and A_${orLocal}OR${orIndex}.LONG_",
                "                         <include refid=\"executionVariableOperator\" />",
                "-                      </otherwise>",
                "-                    </choose>          ",
                "-                    #{var.textValue}",
                "-                    <choose>",
                "-                      <when test=\"var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')\">${wildcardEscapeClause}</when>",
                "-                    </choose>",
                "-                  </if>",
                "-                  <if test=\"var.textValue2 != null\">",
                "-                    and A_${orLocal}OR${orIndex}.TEXT2_",
                "-                    <choose>",
                "-                      <when test=\"var.operator.equals('LIKE')\">LIKE</when>",
                "-                      <otherwise>",
                "+                        #{var.longValue}",
                "+                      </if>",
                "+                      <if test=\"var.doubleValue != null\">",
                "+                        and A_${orLocal}OR${orIndex}.DOUBLE_",
                "                         <include refid=\"executionVariableOperator\" />",
                "-                      </otherwise>",
                "-                    </choose>          ",
                "-                    #{var.textValue2}",
                "-                    <choose>",
                "-                      <when test=\"var.operator.equals('LIKE')\">${wildcardEscapeClause}</when>",
                "-                    </choose>",
                "-                  </if>",
                "-                  <if test=\"var.longValue != null\">",
                "-                    and A_${orLocal}OR${orIndex}.LONG_",
                "-                    <include refid=\"executionVariableOperator\" />",
                "-                    #{var.longValue}",
                "-                  </if>",
                "-                  <if test=\"var.doubleValue != null\">",
                "-                    and A_${orLocal}OR${orIndex}.DOUBLE_",
                "-                    <include refid=\"executionVariableOperator\" />",
                "-                    #{var.doubleValue}",
                "-                  </if>",
                "-                  <!-- Null variable type -->",
                "-                  <if test=\"var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">",
                "-                    <choose>",
                "-                      <when test=\"var.operator.equals('NOT_EQUALS')\">",
                "-                        and (A_${orLocal}OR${orIndex}.TEXT_ is not null or A_${orLocal}OR${orIndex}.TEXT2_ is not null or A_${orLocal}OR${orIndex}.LONG_ is not null or A_${orLocal}OR${orIndex}.DOUBLE_ is not null or A_${orLocal}OR${orIndex}.BYTEARRAY_ID_ is not null)",
                "-                      </when>",
                "-                      <otherwise>",
                "-                        and A_${orLocal}OR${orIndex}.TEXT_ is null and A_${orLocal}OR${orIndex}.TEXT2_ is null and A_${orLocal}OR${orIndex}.LONG_ is null and A_${orLocal}OR${orIndex}.DOUBLE_ is null and A_${orLocal}OR${orIndex}.BYTEARRAY_ID_ is null",
                "-                      </otherwise>",
                "-                    </choose>          ",
                "-                  </if>",
                "-                </otherwise>",
                "-              </choose>",
                "-            </trim>",
                "-          </foreach>",
                "-          <if test=\"orQueryObject.suspensionState != null\">",
                "-            <if test=\"orQueryObject.suspensionState.stateCode == 1\">",
                "-              or RES.SUSPENSION_STATE_ = 1",
                "+                        #{var.doubleValue}",
                "+                      </if>",
                "+                      <!-- Null variable type -->",
                "+                      <if test=\"var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null\">",
                "+                        <choose>",
                "+                          <when test=\"var.operator.equals('NOT_EQUALS')\">",
                "+                            and (A_${orLocal}OR${orIndex}.TEXT_ is not null or A_${orLocal}OR${orIndex}.TEXT2_ is not null or A_${orLocal}OR${orIndex}.LONG_ is not null or A_${orLocal}OR${orIndex}.DOUBLE_ is not null or A_${orLocal}OR${orIndex}.BYTEARRAY_ID_ is not null)",
                "+                          </when>",
                "+                          <otherwise>",
                "+                            and A_${orLocal}OR${orIndex}.TEXT_ is null and A_${orLocal}OR${orIndex}.TEXT2_ is null and A_${orLocal}OR${orIndex}.LONG_ is null and A_${orLocal}OR${orIndex}.DOUBLE_ is null and A_${orLocal}OR${orIndex}.BYTEARRAY_ID_ is null",
                "+                          </otherwise>",
                "+                        </choose>          ",
                "+                      </if>",
                "+                    </otherwise>",
                "+                </choose>",
                "+              </trim>",
                "+            </foreach>",
                "+            <if test=\"orQueryObject.suspensionState != null\">",
                "+              <if test=\"orQueryObject.suspensionState.stateCode == 1\">",
                "+                  or RES.SUSPENSION_STATE_ = 1",
                "+              </if>",
                "+              <if test=\"orQueryObject.suspensionState.stateCode == 2\">",
                "+                  or RES.SUSPENSION_STATE_ = 2",
                "+              </if>",
                "             </if>",
                "-            <if test=\"orQueryObject.suspensionState.stateCode == 2\">",
                "-              or RES.SUSPENSION_STATE_ = 2",
                "+            <if test=\"orQueryObject.tenantId != null\">",
                "+              or RES.TENANT_ID_ = #{orQueryObject.tenantId}",
                "             </if>",
                "-          </if>",
                "-          <if test=\"orQueryObject.tenantId != null\">",
                "-            or RES.TENANT_ID_ = #{orQueryObject.tenantId}",
                "-          </if>",
                "-          <if test=\"orQueryObject.tenantIdLike != null\">",
                "-            or RES.TENANT_ID_ like #{orQueryObject.tenantIdLike}${wildcardEscapeClause}",
                "-          </if>",
                "-          <if test=\"orQueryObject.withoutTenantId\">",
                "-            or (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)",
                "-          </if>",
                "-          <choose>",
                "-            <when test=\"orQueryObject.bothCandidateAndAssigned\">",
                "-              <!-- if dbIdentityUsed set true in process engine configuration -->",
                "-              <if test=\"orQueryObject.userIdForCandidateAndAssignee != null\">",
                "-                <if test=\"orQueryObject.candidateGroups == null\">",
                "-                  or (RES.ASSIGNEE_ = #{orQueryObject.userIdForCandidateAndAssignee}",
                "-                  or (",
                "-                  <if test=\"!orQueryObject.ignoreAssigneeValue\">",
                "-                    RES.ASSIGNEE_ is null and",
                "+            <if test=\"orQueryObject.tenantIdLike != null\">",
                "+              or RES.TENANT_ID_ like #{orQueryObject.tenantIdLike}${wildcardEscapeClause}",
                "+            </if>",
                "+            <if test=\"orQueryObject.withoutTenantId\">",
                "+              or (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)",
                "+            </if>",
                "+            <choose>",
                "+              <when test=\"orQueryObject.bothCandidateAndAssigned\">",
                "+                <!-- if dbIdentityUsed set true in process engine configuration -->",
                "+                <if test=\"orQueryObject.userIdForCandidateAndAssignee != null\">",
                "+                  <if test=\"orQueryObject.candidateGroups == null\">",
                "+                    or (RES.ASSIGNEE_ = #{orQueryObject.userIdForCandidateAndAssignee}",
                "+                        or (",
                "+                        <if test=\"!orQueryObject.ignoreAssigneeValue\">",
                "+                            RES.ASSIGNEE_ is null and",
                "+                        </if>",
                "+                        exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_",
                "+                        and (LINK.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee}",
                "+                        or LINK.GROUP_ID_ IN (select g.GROUP_ID_ from ${prefix}ACT_ID_MEMBERSHIP g where g.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee} )))))",
                "                   </if>",
                "-                  (I_OR${orIndex}.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee}",
                "-                  or I_OR${orIndex}.GROUP_ID_ IN (select g.GROUP_ID_ from ${prefix}ACT_ID_MEMBERSHIP g where g.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee} ) ) ) )",
                "-                </if>",
                "-              </if>",
                "-              <!-- if dbIdentityUsed set false in process engine configuration of using custom session factory of GroupIdentityManager -->",
                "-              <if test=\"orQueryObject.candidateGroups != null\">",
                "-                or (RES.ASSIGNEE_ = #{orQueryObject.userIdForCandidateAndAssignee}",
                "-                or (",
                "-                <if test=\"!orQueryObject.ignoreAssigneeValue\">",
                "-                  RES.ASSIGNEE_ is null and",
                "                 </if>",
                "-                I_OR${orIndex}.TYPE_ = 'candidate' and (I_OR${orIndex}.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee}",
                "-                <if test=\"orQueryObject.candidateGroups.size() &gt; 0\">",
                "-                  or I_OR${orIndex}.GROUP_ID_ IN",
                "-                  <foreach item=\"group\" index=\"index\" collection=\"orQueryObject.candidateGroups\" open=\"(\" separator=\",\" close=\")\">",
                "-                    #{group}",
                "-                  </foreach>",
                "+                <!-- if dbIdentityUsed set false in process engine configuration of using custom session factory of GroupIdentityManager -->",
                "+                <if test=\"orQueryObject.candidateGroups != null\">",
                "+                  or (RES.ASSIGNEE_ = #{orQueryObject.userIdForCandidateAndAssignee}",
                "+                  or (",
                "+                    <if test=\"!orQueryObject.ignoreAssigneeValue\">",
                "+                        RES.ASSIGNEE_ is null and",
                "+                    </if>",
                "+                    exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_",
                "+                    and LINK.TYPE_ = 'candidate' and (LINK.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee}",
                "+                    <if test=\"orQueryObject.candidateGroups.size() &gt; 0\">",
                "+                        or LINK.GROUP_ID_ IN",
                "+                        <foreach item=\"group\" index=\"index\" collection=\"orQueryObject.candidateGroups\" open=\"(\" separator=\",\" close=\")\">",
                "+                            #{group}",
                "+                        </foreach>",
                "+                    </if>",
                "+                  ))))",
                "                 </if>",
                "-                )))",
                "-              </if>",
                "-            </when>",
                "-          </choose>",
                "-        </trim>",
                "-      </foreach>",
                "-    </where>",
                "+              </when>",
                "+            </choose>",
                "+          </trim>",
                "+        </foreach>",
                "+     </where>",
                "   </sql>",
                "@@ -1406,3 +1409,3 @@ under the License.",
                "       <when test=\"var.operator.equals('LESS_THAN_OR_EQUAL')\">&lt;=</when>",
                "-    </choose>",
                "+   </choose>",
                "   </sql>  ",
                "@@ -1410,3 +1413,3 @@ under the License.",
                "   <select id=\"selectTaskByNativeQuery\" parameterType=\"java.util.Map\" resultMap=\"taskResultMap\">",
                "-    <include refid=\"org.flowable.task.service.db.common.selectByNativeQuery\"/>",
                "+  \t<include refid=\"org.flowable.task.service.db.common.selectByNativeQuery\"/>",
                "   </select>",
                "@@ -1414,3 +1417,3 @@ under the License.",
                "   <select id=\"selectTaskCountByNativeQuery\" parameterType=\"java.util.Map\" resultType=\"long\">",
                "-    ${sql}",
                "+     ${sql}",
                "   </select>",
                "diff --git a/pom.xml b/pom.xml",
                "index a04a9e5993..2014447bd7 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -410,3 +410,3 @@ under the License.",
                "-    <flowable.version>6.3.1</flowable.version>",
                "+    <flowable.version>6.4.0</flowable.version>",
                "@@ -1150,2 +1150,7 @@ under the License.",
                "       </dependency>",
                "+      <dependency>",
                "+        <groupId>org.flowable</groupId>",
                "+        <artifactId>flowable-idm-spring-configurator</artifactId>",
                "+        <version>${flowable.version}</version>",
                "+      </dependency>",
                "       <dependency>"
            ],
            "changed_files": [
                "ext/flowable/flowable-bpmn/pom.xml",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java",
                "ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeTaskQueryImpl.java",
                "ext/flowable/flowable-bpmn/src/main/resources/org/apache/syncope/ext/flowable/Task.xml",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c193001d8336e8eb7d1e78072af458a39668bebd"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cec57fc5280cb119b5f84d6ee04e7db9a698ff8e",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1534411182,
            "hunks": 12,
            "message": "White noise: reflow",
            "diff": [
                "diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java",
                "index 301e33f20a..b7e8338f90 100644",
                "--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java",
                "+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java",
                "@@ -36,2 +36,3 @@ import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;",
                " import org.apache.syncope.core.persistence.api.dao.UserDAO;",
                "+import org.apache.syncope.core.persistence.api.entity.resource.Provision;",
                " import org.identityconnectors.framework.common.objects.Attribute;",
                "@@ -45,3 +46,2 @@ import org.slf4j.LoggerFactory;",
                " import org.springframework.beans.factory.annotation.Autowired;",
                "-import org.apache.syncope.core.persistence.api.entity.task.PullTask;",
                " import org.apache.syncope.core.provisioning.java.job.SetUMembershipsJob;",
                "@@ -81,3 +81,4 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {",
                "                 filter(property -> \"groupMemberAttribute\".equals(property.getSchema().getName())",
                "-                && property.getValues() != null && !property.getValues().isEmpty()).findFirst();",
                "+                && !property.getValues().isEmpty()).",
                "+                findFirst();",
                "@@ -98,3 +99,2 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {",
                "     protected List<Object> getMembAttrValues(final SyncDelta delta, final Connector connector) {",
                "-        List<Object> result = Collections.<Object>emptyList();",
                "         String groupMemberName = getGroupMembershipAttrName(connector);",
                "@@ -105,4 +105,3 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {",
                "         if (membAttr == null) {",
                "-            OperationOptionsBuilder oob = new OperationOptionsBuilder();",
                "-            oob.setAttributesToGet(groupMemberName);",
                "+            OperationOptionsBuilder oob = new OperationOptionsBuilder().setAttributesToGet(groupMemberName);",
                "             ConnectorObject remoteObj = connector.getObject(ObjectClass.GROUP, delta.getUid(), false, oob.build());",
                "@@ -114,7 +113,6 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {",
                "         }",
                "-        if (membAttr != null && membAttr.getValue() != null) {",
                "-            result = membAttr.getValue();",
                "-        }",
                "-        return result;",
                "+        return membAttr == null || membAttr.getValue() == null",
                "+                ? Collections.emptyList()",
                "+                : membAttr.getValue();",
                "     }",
                "@@ -133,4 +131,3 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {",
                "-        Connector connector = profile.getConnector();",
                "-        getMembAttrValues(delta, connector).stream().map(membValue -> {",
                "+        getMembAttrValues(delta, profile.getConnector()).forEach(membValue -> {",
                "             Set<String> memb = memberships.get(membValue.toString());",
                "@@ -140,4 +137,2 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {",
                "             }",
                "-            return memb;",
                "-        }).forEachOrdered(memb -> {",
                "             memb.add(groupTO.getKey());",
                "@@ -157,13 +152,12 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {",
                "-        if (!(profile.getTask() instanceof PullTask)) {",
                "-            return;",
                "+        if (!(entity instanceof GroupTO)) {",
                "+            super.after(profile, delta, entity, result);",
                "         }",
                "-        if (!(entity instanceof GroupTO)",
                "-                || !profile.getTask().getResource().getProvision(anyTypeDAO.findUser()).isPresent()",
                "-                || profile.getTask().getResource().getProvision(anyTypeDAO.findUser()).get().getMapping() == null) {",
                "-",
                "-            super.after(profile, delta, entity, result);",
                "-        } else {",
                "+        Optional<? extends Provision> provision = profile.getTask().getResource().getProvision(anyTypeDAO.findUser()).",
                "+                filter(p -> p.getMapping() != null);",
                "+        if (provision.isPresent()) {",
                "             populateMemberships(profile, delta, (GroupTO) entity);",
                "+        } else {",
                "+            super.after(profile, delta, entity, result);",
                "         }",
                "@@ -174,3 +168,4 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {",
                "         Map<String, Set<String>> resolvedMemberships = new HashMap<>();",
                "-        this.memberships.forEach((name, memb) -> {",
                "+",
                "+        memberships.forEach((name, memb) -> {",
                "             Optional<String> userKey = pullUtils.match("
            ],
            "changed_files": [
                "core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3eaf7103b94860a332fcce14f3dabe5a61b19f9f"
                ]
            ],
            "tags": [
                "syncope-2.1.1",
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6cb67137513198919cb62afb728d3206fbe96e8d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538751975,
            "hunks": 1,
            "message": "Upgrading commons-text",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index c78151fe2e..6006b924c7 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -426,3 +426,3 @@ under the License.",
                "     <commons-lang.version>3.8.1</commons-lang.version>",
                "-    <commons-text.version>1.4</commons-text.version>",
                "+    <commons-text.version>1.5</commons-text.version>",
                "     <commons-logging.version>1.1.3</commons-logging.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fd70550a865846229128ac5b708a4d7e7db7b667"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d0db28ba7089f67bdca0bc2a02d80656572071b8",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539339400,
            "hunks": 1,
            "message": "Upgrading ConnId to 1.5.0.0",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 8c86300e1e..4856242bcf 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -379,3 +379,3 @@ under the License.",
                "-    <connid.version>1.4.4.0</connid.version>",
                "+    <connid.version>1.5.0.0</connid.version>",
                "     <connid.soap.version>1.4.2</connid.soap.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b82f6c13386a41d6e78ebb6412c318c6b5733601"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9bdd9641e5f27f20a490d50a64220bc4ae2412f5",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541331099,
            "hunks": 1,
            "message": "Updating ASF parent POM",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 8333c52aa7..62b96f41bc 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -34,3 +34,3 @@ under the License.",
                "     <artifactId>apache</artifactId>",
                "-    <version>20</version>",
                "+    <version>21</version>",
                "     <relativePath />"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6f981d21d8d9a0712e315127ddbf39032a246f27"
                ],
                [
                    "no-tag",
                    "7a0d2677647de5af030d8e6716e1b25ed7c89c9f"
                ]
            ],
            "tags": [
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "443f5a38ea45f15c092c41abb202f897c795c5f2",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539930382,
            "hunks": 1,
            "message": "Minor: use getter to allow easier override",
            "diff": [
                "diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java",
                "index f67adefa26..7bdcc552c5 100644",
                "--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java",
                "+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java",
                "@@ -63,3 +63,3 @@ public abstract class AbstractPlainAttr<O extends Any<?>> extends AbstractGenera",
                "     private void checkNonNullSchema() {",
                "-        if (schema == null) {",
                "+        if (getSchema() == null) {",
                "             throw new IllegalStateException(\"First set owner then schema and finally add values\");"
            ],
            "changed_files": [
                "core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7050d4d6f803f62edb43ee0bd2089b4a9c7e55f6"
                ],
                [
                    "no-tag",
                    "1b5a993163720cad6a8b14a2c4d286ab4f9c48af"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ca771ac2dfe3f6135051099d8ef84245730dc90c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1541772427,
            "hunks": 1,
            "message": "[SYNCOPE-1395] Fix version on Master",
            "diff": [
                "diff --git a/core/persistence-jpa-pgjsonb/pom.xml b/core/persistence-jpa-pgjsonb/pom.xml",
                "index de080840fd..aedaa10959 100644",
                "--- a/core/persistence-jpa-pgjsonb/pom.xml",
                "+++ b/core/persistence-jpa-pgjsonb/pom.xml",
                "@@ -26,3 +26,3 @@ under the License.",
                "     <artifactId>syncope-core</artifactId>",
                "-    <version>2.1.3-SNAPSHOT</version>",
                "+    <version>3.0.0-SNAPSHOT</version>",
                "   </parent>"
            ],
            "changed_files": [
                "core/persistence-jpa-pgjsonb/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1395": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1395",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "baf93da9e73cd4c8065a96f4de7e793e53b83778",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538732181,
            "hunks": 2,
            "message": "Supporting Payara Server 5.183",
            "diff": [
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index 5cac7648a3..49a6521747 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -1206,3 +1206,3 @@ under the License.",
                "                 <zipUrlInstaller>",
                "-                  <url>https://s3-eu-west-1.amazonaws.com/payara.fish/Payara+Downloads/5.182/payara-5.182.zip</url>",
                "+                  <url>https://s3-eu-west-1.amazonaws.com/payara.fish/Payara+Downloads/5.183/payara-5.183.zip</url>",
                "                   <downloadDir>${settings.localRepository}/org/codehaus/cargo/cargo-container-archives</downloadDir>",
                "diff --git a/src/main/asciidoc/getting-started/systemRequirements.adoc b/src/main/asciidoc/getting-started/systemRequirements.adoc",
                "index 3e568cf25f..dfad95e183 100644",
                "--- a/src/main/asciidoc/getting-started/systemRequirements.adoc",
                "+++ b/src/main/asciidoc/getting-started/systemRequirements.adoc",
                "@@ -41,3 +41,3 @@ Apache Syncope {docVersion} is verified with the following Java EE containers:",
                "  . http://www.payara.fish/[Payara Server 5^]",
                "- . http://www.wildfly.org/[Wildfly 13^]",
                "+ . http://www.wildfly.org/[Wildfly 14^]"
            ],
            "changed_files": [
                "fit/core-reference/pom.xml",
                "src/main/asciidoc/getting-started/systemRequirements.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3ddfa934a16073f24a7e9ac9503c12cabc3418cc"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "75f4fc4730d4aa3f412b0e9ef27aa8e762a1fe9c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539327458,
            "hunks": 2,
            "message": "Upgrading maven-surefire-plugin and maven-failsafe-plugin",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index cc85f9e43d..8c86300e1e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1904,3 +1904,3 @@ under the License.",
                "           <artifactId>maven-surefire-plugin</artifactId>",
                "-          <version>2.22.0</version>",
                "+          <version>2.22.1</version>",
                "           <configuration>",
                "@@ -1922,3 +1922,3 @@ under the License.",
                "           <artifactId>maven-failsafe-plugin</artifactId>",
                "-          <version>2.22.0</version>",
                "+          <version>2.22.1</version>",
                "           <configuration>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e2eb2f144b44c113f0bf550f025660a0fb7af049"
                ],
                [
                    "no-tag",
                    "b043febae3e08bf657ecfb1c23b80d2973bd68a6"
                ]
            ],
            "tags": [
                "syncope-2.1.10",
                "syncope-2.1.11",
                "syncope-2.1.12",
                "syncope-2.1.13",
                "syncope-2.1.14",
                "syncope-2.1.2",
                "syncope-2.1.3",
                "syncope-2.1.4",
                "syncope-2.1.5",
                "syncope-2.1.6",
                "syncope-2.1.7",
                "syncope-2.1.8",
                "syncope-2.1.9"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "46332ac684db9fe24db4086d7f73d98c69a6f0f7",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536589580,
            "hunks": 3,
            "message": "[SYNCOPE-1019] Fix in docs",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "index d6527cee54..785f2da891 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "@@ -865,8 +865,7 @@ The configurations for that sample are in",
                " ifeval::[\"{snapshotOrRelease}\" == \"release\"]",
                "-https://github.com/apache/syncope/blob/syncope-{docVersion}/client/enduser/src/test/resources/customTemplate.json",
                "+https://github.com/apache/syncope/blob/syncope-{docVersion}/client/enduser/src/test/resources/customTemplate.json[customTemplate.json^].",
                " endif::[]",
                " ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/2_0_X/client/enduser/src/test/resources/customTemplate.json",
                "+https://github.com/apache/syncope/blob/2_0_X/client/enduser/src/test/resources/customTemplate.json[customTemplate.json^].",
                " endif::[]",
                "-.",
                " In order to apply them, that content must be copied to your `customTemplate.json` file."
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "SYNCOPE-1019": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: SYNCOPE-1019",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8c281c28564f0628de727f85d7ddf5fbbaa4e7f3",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539841895,
            "hunks": 6,
            "message": "Upgrading cargo-maven2-plugin, jdeb, commons-text",
            "diff": [
                "diff --git a/fit/core-reference/pom.xml b/fit/core-reference/pom.xml",
                "index 8b9e987825..ae6e7fd300 100644",
                "--- a/fit/core-reference/pom.xml",
                "+++ b/fit/core-reference/pom.xml",
                "@@ -1291,3 +1291,3 @@ under the License.",
                "               <container>",
                "-                <containerId>wildfly13x</containerId>",
                "+                <containerId>wildfly14x</containerId>",
                "                 <zipUrlInstaller>",
                "diff --git a/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml b/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "index eefc77d28f..86d9ba4529 100644",
                "--- a/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "+++ b/fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "@@ -103,3 +103,3 @@ under the License.",
                "         <entry key=\"openjpa.MetaDataFactory\" ",
                "-               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly13x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "+               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly14x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "       </map>",
                "diff --git a/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml b/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml",
                "index a340788aca..f8838388b7 100644",
                "--- a/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml",
                "+++ b/fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml",
                "@@ -103,3 +103,3 @@ under the License.",
                "         <entry key=\"openjpa.MetaDataFactory\" ",
                "-               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly13x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "+               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly14x/deployments/syncope.war/WEB-INF/lib/syncope-core-persistence-jpa-${syncope.version}.jar, Resources=${Master.orm})\"/>",
                "       </map>",
                "diff --git a/pom.xml b/pom.xml",
                "index af142155ee..f83bd4337d 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -426,3 +426,3 @@ under the License.",
                "     <commons-lang.version>3.8.1</commons-lang.version>",
                "-    <commons-text.version>1.5</commons-text.version>",
                "+    <commons-text.version>1.6</commons-text.version>",
                "     <commons-logging.version>1.1.3</commons-logging.version>",
                "@@ -1912,3 +1912,3 @@ under the License.",
                "           <artifactId>cargo-maven2-plugin</artifactId>",
                "-          <version>1.6.10</version>",
                "+          <version>1.6.11</version>",
                "           <configuration>",
                "@@ -1972,3 +1972,3 @@ under the License.",
                "           <artifactId>jdeb</artifactId>",
                "-          <version>1.6</version>",
                "+          <version>1.7</version>",
                "         </plugin>"
            ],
            "changed_files": [
                "fit/core-reference/pom.xml",
                "fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml",
                "fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "245f76fffed6b16617fafdcb6ade2568ee45dc95"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ab489cb9d756afe12780c45f77322c4a47f1eda3",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1536674362,
            "hunks": 3,
            "message": "Upgrading Tomcat and junit-platform-surefire-provider",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index ed7fd6c61a..03e9c0e1ca 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -515,3 +515,3 @@ under the License.",
                "-    <tomcat.version>9.0.11</tomcat.version>",
                "+    <tomcat.version>9.0.12</tomcat.version>",
                "@@ -1900,3 +1900,3 @@ under the License.",
                "               <artifactId>junit-platform-surefire-provider</artifactId>",
                "-              <version>1.3.0</version>",
                "+              <version>1.3.1</version>",
                "             </dependency>",
                "@@ -1918,3 +1918,3 @@ under the License.",
                "               <artifactId>junit-platform-surefire-provider</artifactId>",
                "-              <version>1.3.0</version>",
                "+              <version>1.3.1</version>",
                "             </dependency>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c2b3ed7b6cdd5f6ab156c734ed0f4125da7514ae"
                ]
            ],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d3be6a3dca33c7351a75a3749acdd6e0acbafd63",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539843423,
            "hunks": 1,
            "message": "Switch Travis CI to OpenJDK 11 as Oracle JDK 10 seems not to be available anymore",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 16031fcf1f..b705416413 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -18,3 +18,3 @@ language: java",
                " jdk:",
                "-  - oraclejdk10",
                "+  - openjdk11",
                " before_install:"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "42fc3b0d815b688666f394fa14ac7d826dd4d661",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537510317,
            "hunks": 5,
            "message": "Upgrading Jackson, Elasticsearch and Tika",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index c538716661..1e0a4c2de9 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -393,3 +393,3 @@ under the License.",
                "-    <jackson.version>2.9.6</jackson.version>",
                "+    <jackson.version>2.9.7</jackson.version>",
                "@@ -418,3 +418,3 @@ under the License.",
                "-    <elasticsearch.version>5.6.11</elasticsearch.version>",
                "+    <elasticsearch.version>5.6.12</elasticsearch.version>",
                "@@ -432,3 +432,3 @@ under the License.",
                "-    <tika.version>1.18</tika.version>",
                "+    <tika.version>1.19</tika.version>",
                "@@ -2367,3 +2367,3 @@ under the License.",
                "             <link>https://commons.apache.org/proper/commons-collections/javadocs/api-release/</link>",
                "-            <link>https://tika.apache.org/1.17/api/</link>",
                "+            <link>https://tika.apache.org/1.19/api/</link>",
                "             <link>http://docs.spring.io/spring/docs/4.3.x/javadoc-api/</link>",
                "@@ -2373,3 +2373,3 @@ under the License.",
                "             <link>https://build.shibboleth.net/nexus/content/sites/site/java-opensaml/3.3.0/apidocs/</link>",
                "-            <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/elasticsearch/5.6.11/index.html</link>",
                "+            <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/elasticsearch/5.6.12/index.html</link>",
                "           </links>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c46ec383242552f381e8d27cad3b6dfc3977cf2d",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539841575,
            "hunks": 1,
            "message": "Upgrading cargo-maven2-plugin",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 4a8806e6d8..27ddd58b61 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1984,3 +1984,3 @@ under the License.",
                "           <artifactId>cargo-maven2-plugin</artifactId>",
                "-          <version>1.6.10</version>",
                "+          <version>1.6.11</version>",
                "           <configuration>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "5d6efba760346d2db294b32cf1754d5eae41058f",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1533223462,
            "hunks": 1,
            "message": "Upgrading cargo",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 264496a207..6f1154b9b5 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1964,3 +1964,3 @@ under the License.",
                "           <artifactId>cargo-maven2-plugin</artifactId>",
                "-          <version>1.6.8</version>",
                "+          <version>1.6.9</version>",
                "           <configuration>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "61ef41de75f3a49311252210681bea8c0c02ce27",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1533025293,
            "hunks": 2,
            "message": "Upgrading Log4J and Swagger UI",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 0e26cc8be2..ad26bc59df 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -420,3 +420,3 @@ under the License.",
                "-    <log4j.version>2.11.0</log4j.version>",
                "+    <log4j.version>2.11.1</log4j.version>",
                "     <disruptor.version>3.4.2</disruptor.version>",
                "@@ -448,3 +448,3 @@ under the License.",
                "     <swagger-core.version>1.5.17</swagger-core.version>    ",
                "-    <swagger-ui.version>3.17.4</swagger-ui.version>",
                "+    <swagger-ui.version>3.17.6</swagger-ui.version>",
                "     <guava.version>20.0</guava.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.10",
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "965bed1c38e3994a6cd356a61c7b883f26e77523",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539339386,
            "hunks": 1,
            "message": "Upgrading ConnId to 1.4.5.0",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index cfcf323474..0b3d7c1161 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -379,3 +379,3 @@ under the License.",
                "-    <connid.version>1.4.4.0</connid.version>",
                "+    <connid.version>1.4.5.0</connid.version>",
                "     <connid.soap.version>1.4.2</connid.soap.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "28e8cd3fe21025f760ad84feb9fd8388cec4cff4",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539328825,
            "hunks": 3,
            "message": "Fix references to master branch",
            "diff": [
                "diff --git a/src/main/asciidoc/reference-guide/concepts/workflow.adoc b/src/main/asciidoc/reference-guide/concepts/workflow.adoc",
                "index b5e2e1f8d7..c739530d1a 100644",
                "--- a/src/main/asciidoc/reference-guide/concepts/workflow.adoc",
                "+++ b/src/main/asciidoc/reference-guide/concepts/workflow.adoc",
                "@@ -267,3 +267,3 @@ endif::[]",
                " ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/2_1_X/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/DropdownValueProvider.java[DropdownValueProvider^]",
                "+https://github.com/apache/syncope/blob/master/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/DropdownValueProvider.java[DropdownValueProvider^]",
                " endif::[]",
                "@@ -276,3 +276,3 @@ endif::[]",
                " ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/2_1_X/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/FlowableServiceTask.java[FlowableServiceTask^]",
                "+https://github.com/apache/syncope/blob/master/ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/FlowableServiceTask.java[FlowableServiceTask^]",
                " endif::[]",
                "diff --git a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "index 504590cdcf..891c25a325 100644",
                "--- a/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "+++ b/src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc",
                "@@ -875,3 +875,3 @@ endif::[]",
                " ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]",
                "-https://github.com/apache/syncope/blob/2_1_X/client/enduser/src/test/resources/customTemplate.json[customTemplate.json^].",
                "+https://github.com/apache/syncope/blob/master/client/enduser/src/test/resources/customTemplate.json[customTemplate.json^].",
                " endif::[]"
            ],
            "changed_files": [
                "src/main/asciidoc/reference-guide/concepts/workflow.adoc",
                "src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "fed7c97c87afefc6ac6de170e4d89be78bb147e0",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1540298430,
            "hunks": 2,
            "message": "Trying with OpenJDK 10 on Travis CI",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index d510cf4667..03cf1ec156 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -18,3 +18,3 @@ language: java",
                " jdk:",
                "-  - openjdk11",
                "+  - openjdk10",
                " before_install:",
                "@@ -22,3 +22,3 @@ before_install:",
                " # default install is mvn install --quiet -DskipTests=true",
                "-install: travis_wait mvn --show-version --quiet -T 1C -P java9-plus,all,skipTests,without-eclipse",
                "+install: travis_wait mvn --show-version --quiet -T 1C -P all,skipTests,without-eclipse",
                " before_script:"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "c8204d3b053ec3299646ca23a72faaf1cf93b029",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1538549628,
            "hunks": 1,
            "message": "Upgrading asciidoctor-maven-plugin",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 180c3d32c6..904461d4f1 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -2461,3 +2461,3 @@ under the License.",
                "             <artifactId>asciidoctor-maven-plugin</artifactId>",
                "-            <version>1.5.7</version>",
                "+            <version>1.5.7.1</version>",
                "             <dependencies>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4a7ebffdc093435027fe46b986a785f3e9f929c6",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1537774030,
            "hunks": 1,
            "message": "Upgrading Commons Lang",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 1e0a4c2de9..b42629b0af 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -427,3 +427,3 @@ under the License.",
                "     <commons-jexl.version>3.1</commons-jexl.version>",
                "-    <commons-lang.version>3.8</commons-lang.version>",
                "+    <commons-lang.version>3.8.1</commons-lang.version>",
                "     <commons-text.version>1.3</commons-text.version>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-2.0.11",
                "syncope-2.0.12",
                "syncope-2.0.13",
                "syncope-2.0.14",
                "syncope-2.0.15",
                "syncope-2.0.16"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "7d239c2ac9449fb632c946281fcd3ad1645eb34c",
            "repository": "https://github.com/apache/syncope",
            "timestamp": 1539844251,
            "hunks": 1,
            "message": "Adding explicitely the java9-plus profile for Travis CI, which does not seem to get activated",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index b705416413..d510cf4667 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -22,3 +22,3 @@ before_install:",
                " # default install is mvn install --quiet -DskipTests=true",
                "-install: travis_wait mvn --show-version --quiet -T 1C -P all,skipTests,without-eclipse",
                "+install: travis_wait mvn --show-version --quiet -T 1C -P java9-plus,all,skipTests,without-eclipse",
                " before_script:"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "syncope-3.0.0",
                "syncope-3.0.0-M0",
                "syncope-3.0.0-M1",
                "syncope-3.0.0-M2",
                "syncope-3.0.1",
                "syncope-3.0.2",
                "syncope-3.0.3",
                "syncope-3.0.4",
                "syncope-3.0.5",
                "syncope-3.0.6",
                "syncope-3.0.7"
            ],
            "matched_rules": []
        }
    ]
}
