{
    "advisory_record": {
        "cve_id": "CVE-2018-11799",
        "description": "Vulnerability allows a user of Apache Oozie 3.1.3-incubating to 5.0.0 to impersonate other users. The malicious user can construct an XML that results workflows running in other user's name.",
        "reserved_timestamp": 1528156800,
        "published_timestamp": 1545249600,
        "updated_timestamp": 1545389821,
        "repository_url": null,
        "references": {
            "": 3,
            "https://lists.apache.org/thread.html/347e7a8cb86014b7ca37e49eb00b8d088203bdc0bcfb4799f8e5955a%40%3Cuser.oozie.apache.org%3E": 2,
            "http://www.securityfocus.com/bid/106266": 2
        },
        "affected_products": [
            "Apache Oozie",
            "Apache",
            "Oozie"
        ],
        "versions": {
            "status": "affected",
            "version": "Apache Oozie 3.1.3-incubating to 5.0.0"
        },
        "files": [
            "XML"
        ],
        "keywords": [
            "incubating",
            "result",
            "user",
            "name",
            "allow",
            "apache",
            "workflow",
            "oozie",
            "impersonate",
            "vulnerability",
            "construct"
        ],
        "files_extension": [],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "442ffd6963ec30b33088018cf0fb2648a32e9571",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1529407612,
            "hunks": 2,
            "message": "OOZIE-3275 [docs] Update AG_Install.twiki with Access Control List documentation (andras.piros)",
            "diff": [
                "diff --git a/docs/src/site/twiki/AG_Install.twiki b/docs/src/site/twiki/AG_Install.twiki",
                "index 2d48d437f..46363a3b3 100644",
                "--- a/docs/src/site/twiki/AG_Install.twiki",
                "+++ b/docs/src/site/twiki/AG_Install.twiki",
                "@@ -526,2 +526,4 @@ in =oozie-site.xml=:",
                "+---++++ Defining Admin Users",
                "+",
                " Admin users are determined from the list of admin groups, specified in",
                "@@ -543,2 +545,34 @@ of the admin users found in the adminusers.txt and those specified with =oozie.s",
                "+---++++ Defining Access Control Lists",
                "+",
                "+Access Control Lists are defined in the following ways:",
                "+   * workflow job submission over CLI: configuration property =group.name= of =job.properties=",
                "+   * workflow job submission over HTTP: configuration property =group.name= of the XML submitted over HTTP",
                "+   * workflow job re-run: configuration property =oozie.job.acl= (preferred) or configuration property =group.name= of",
                "+   =job.properties=",
                "+   * coordinator job submission over CLI: configuration property =oozie.job.acl= (preferred) or configuration property =group.name=",
                "+   of =job.properties=",
                "+   * bundle job submission over CLI: configuration property =oozie.job.acl= (preferred) or configuration property =group.name= of",
                "+   =job.properties=",
                "+",
                "+For all other workflow, coordinator, or bundle actions the ACL set in beforehand will be used as basis.",
                "+",
                "+Once the ACL for the job is defined, Oozie will check over HDFS whether the user trying to perform a specific action is part of the",
                "+necessary group(s). For implementation details please check out =org.apache.hadoop.security.Groups#getGroups(String user)=.",
                "+",
                "+Note that it's enough that the submitting user be part of at least one group of the ACL. Note also that the ACL can contain user",
                "+names as well. If there is an ACL defined and the submitting user isn't part of any group or user name present in the ACL, an",
                "+=AuthorizationException= is thrown.",
                "+",
                "+*Example: A typical ACL setup*",
                "+",
                "+Detail of =job.properties= on workflow job submission:",
                "+<verbatim>",
                "+user.name=joe",
                "+group.name=marketing,admin,qa,root",
                "+<verbatim>",
                "+",
                "+HDFS group membership of HDFS user =joe= is =qa=. That is, the check to =org.apache.hadoop.security.Groups#getGroups(\"joe\")= returns",
                "+=qa=. Hence, ACL check will pass inside =AuthorizationService=, because the =user.name= provided belongs to at least of the ACL list",
                "+elements provided as =group.name=."
            ],
            "changed_files": [
                "docs/src/site/twiki/AG_Install.twiki"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3275": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: XML",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3275",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2a26670eae11c46086dcf683f0896bd278f116c5",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1532957718,
            "hunks": 5,
            "message": "OOZIE-2718 Improve -dryrun for bundles (zhengxb2005, asalamon74 via andras.piros)",
            "diff": [
                "diff --git a/client/src/main/java/org/apache/oozie/cli/OozieCLI.java b/client/src/main/java/org/apache/oozie/cli/OozieCLI.java",
                "index c289971a8..9507a70c9 100644",
                "--- a/client/src/main/java/org/apache/oozie/cli/OozieCLI.java",
                "+++ b/client/src/main/java/org/apache/oozie/cli/OozieCLI.java",
                "@@ -328,4 +328,4 @@ public class OozieCLI {",
                "                 \"rerun a job  (coordinator requires -action or -date, bundle requires -coordinator or -date)\");",
                "-        Option dryrun = new Option(DRYRUN_OPTION, false, \"Dryrun a workflow (since 3.3.2) or coordinator (since 2.0) job without\"",
                "-                + \" actually executing it\");",
                "+        Option dryrun = new Option(DRYRUN_OPTION, false, \"Dryrun a workflow (since 3.3.2), a coordinator (since 2.0) \"",
                "+                + \" or a bundle (since 5.1) job without actually executing it\");",
                "         Option update = new Option(UPDATE_OPTION, true, \"Update coord definition and properties\");",
                "@@ -1022,3 +1022,10 @@ public class OozieCLI {",
                "                     System.out.println(\"OK\");",
                "-                } else {                        // coordinator",
                "+                }",
                "+                else if (dryrunStr.contains(\"<bundle-app\")) {",
                "+                    // bundle",
                "+                    System.out.println(\"***Bundle job after parsing: ***\");",
                "+                    System.out.println(dryrunStr);",
                "+                }",
                "+                else {",
                "+                    // coordinator",
                "                     String[] dryrunStrs = dryrunStr.split(\"action for new instance\");",
                "diff --git a/core/src/main/java/org/apache/oozie/command/bundle/BundleSubmitXCommand.java b/core/src/main/java/org/apache/oozie/command/bundle/BundleSubmitXCommand.java",
                "index f94e87157..c06759eaf 100644",
                "--- a/core/src/main/java/org/apache/oozie/command/bundle/BundleSubmitXCommand.java",
                "+++ b/core/src/main/java/org/apache/oozie/command/bundle/BundleSubmitXCommand.java",
                "@@ -145,10 +145,2 @@ public class BundleSubmitXCommand extends SubmitTransitionXCommand {",
                "             if (dryrun) {",
                "-                Date startTime = bundleBean.getStartTime();",
                "-                long startTimeMilli = startTime.getTime();",
                "-                long endTimeMilli = startTimeMilli + (3600 * 1000);",
                "-                Date jobEndTime = bundleBean.getEndTime();",
                "-                Date endTime = new Date(endTimeMilli);",
                "-                if (endTime.compareTo(jobEndTime) > 0) {",
                "-                    endTime = jobEndTime;",
                "-                }",
                "                 jobId = bundleBean.getId();",
                "diff --git a/docs/src/site/twiki/DG_CommandLineTool.twiki b/docs/src/site/twiki/DG_CommandLineTool.twiki",
                "index d1d302a7c..8d33c508e 100644",
                "--- a/docs/src/site/twiki/DG_CommandLineTool.twiki",
                "+++ b/docs/src/site/twiki/DG_CommandLineTool.twiki",
                "@@ -55,4 +55,4 @@ oozie job <OPTIONS>           : job operations",
                "           -doas <arg>           doAs user, impersonates as the specified user",
                "-          -dryrun               Dryrun a workflow (since 3.3.2) or coordinator (since 2.0)",
                "-                                job without actually executing it",
                "+          -dryrun               Dryrun a coordinator (since 2.0), a workflow (since 3.3.2) or a bundle (since 5.1)",
                "+                                without actually executing it.",
                "           -failed               re-runs the failed workflow actions of the coordinator actions (requires -rerun)",
                "@@ -892,2 +892,51 @@ an error message describing why it was rejected.",
                "+---+++ Dryrun of Bundle Job",
                "+",
                "+* This feature is only supported in Oozie 5.1 or later.",
                "+",
                "+Example:",
                "+",
                "+<verbatim>",
                "+",
                "+$ oozie job -oozie http://localhost:11000/oozie -dryrun -config job.properties",
                "+***Bundle job after parsing: ***",
                "+<bundle-app xmlns=\"uri:oozie:bundle:0.2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" name=\"My Bundle\">",
                "+  <parameters>",
                "+    <property>",
                "+      <name>oozie.use.system.libpath</name>",
                "+      <value>true</value>",
                "+    </property>",
                "+  </parameters>",
                "+  <controls>",
                "+    <kick-off-time>2017-02-14T00:13Z</kick-off-time>",
                "+  </controls>",
                "+  <coordinator name=\"My Coordinator-0\">",
                "+    <app-path>hdfs://localhost:8020/user/hue/oozie/deployments/_admin_-oozie-24-1487060026.39</app-path>",
                "+    <configuration>",
                "+      <property>",
                "+        <name>wf_application_path</name>",
                "+        <value>hdfs://localhost:8020/user/hue/oozie/workspaces/hue-oozie-1486786607.01</value>",
                "+      </property>",
                "+      <property>",
                "+        <name>start_date</name>",
                "+        <value>2017-02-14T08:12Z</value>",
                "+      </property>",
                "+      <property>",
                "+        <name>end_date</name>",
                "+        <value>2017-02-21T08:12Z</value>",
                "+      </property>",
                "+    </configuration>",
                "+  </coordinator>",
                "+</bundle-app>",
                "+",
                "+</verbatim>",
                "+",
                "+The =dryrun= option tests running a bundle job with given job properties and does not create the job.",
                "+",
                "+The parameters for the job must be provided in a file, either a Java Properties file (.properties) or a Hadoop XML",
                "+Configuration file (.xml). This file must be specified with the <code>-config</code> option.",
                "+",
                "+If the bundle job is accepted (i.e. Oozie is able to successfully read and parse it), it will return the parsed bundle job in xml;",
                "+otherwise, it will return an error message describing why it was rejected.",
                "+",
                " ---+++ Updating coordinator definition and properties"
            ],
            "changed_files": [
                "client/src/main/java/org/apache/oozie/cli/OozieCLI.java",
                "core/src/main/java/org/apache/oozie/command/bundle/BundleSubmitXCommand.java",
                "docs/src/site/twiki/DG_CommandLineTool.twiki"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-2718": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: XML",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-2718",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "12c863e5bff6963509e0bc6615acc8184761bdcf",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1527248640,
            "hunks": 4,
            "message": "OOZIE-2211 Remove OozieCLI#validateCommandV41 (dbist13 via andras.piros)",
            "diff": [
                "diff --git a/client/src/main/java/org/apache/oozie/cli/OozieCLI.java b/client/src/main/java/org/apache/oozie/cli/OozieCLI.java",
                "index 28286338d..08e2b91e6 100644",
                "--- a/client/src/main/java/org/apache/oozie/cli/OozieCLI.java",
                "+++ b/client/src/main/java/org/apache/oozie/cli/OozieCLI.java",
                "@@ -52,3 +52,2 @@ import org.xml.sax.SAXException;",
                "-import javax.xml.XMLConstants;",
                " import javax.xml.parsers.DocumentBuilder;",
                "@@ -56,6 +55,2 @@ import javax.xml.parsers.DocumentBuilderFactory;",
                " import javax.xml.parsers.ParserConfigurationException;",
                "-import javax.xml.transform.stream.StreamSource;",
                "-import javax.xml.validation.Schema;",
                "-import javax.xml.validation.SchemaFactory;",
                "-import javax.xml.validation.Validator;",
                " import java.io.File;",
                "@@ -2079,5 +2074,2 @@ public class OozieCLI {",
                "             if (result == null) {",
                "-                // TODO This is only for backward compatibility. Need to remove after 4.2.0 higher version.",
                "-                System.out.println(\"Using client-side validation. Check out Oozie server version.\");",
                "-                validateCommandV41(commandLine);",
                "                 return;",
                "@@ -2090,105 +2082,2 @@ public class OozieCLI {",
                "-    /**",
                "-     * Validate on client-side. This is only for backward compatibility. Need to removed after <tt>4.2.0</tt> higher version.",
                "-     * @param commandLine",
                "-     * @throws OozieCLIException",
                "-     */",
                "-    @Deprecated",
                "-    @VisibleForTesting",
                "-    void validateCommandV41(CommandLine commandLine) throws OozieCLIException {",
                "-        String[] args = commandLine.getArgs();",
                "-        if (args.length != 1) {",
                "-            throw new OozieCLIException(\"One file must be specified\");",
                "-        }",
                "-        File file = new File(args[0]);",
                "-        if (file.exists()) {",
                "-            try {",
                "-                List<StreamSource> sources = new ArrayList<StreamSource>();",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"oozie-workflow-0.1.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"shell-action-0.1.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"shell-action-0.2.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"shell-action-0.3.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"email-action-0.1.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"email-action-0.2.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"distcp-action-0.1.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"distcp-action-0.2.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"oozie-workflow-0.2.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"oozie-workflow-0.2.5.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"oozie-workflow-0.3.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"oozie-workflow-0.4.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"oozie-workflow-0.4.5.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"oozie-workflow-0.5.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"oozie-coordinator-0.1.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"oozie-coordinator-0.2.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"oozie-coordinator-0.3.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"oozie-coordinator-0.4.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"oozie-bundle-0.1.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"oozie-bundle-0.2.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"oozie-sla-0.1.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"oozie-sla-0.2.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"hive-action-0.2.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"hive-action-0.3.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"hive-action-0.4.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"hive-action-0.5.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"hive-action-0.6.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"sqoop-action-0.2.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"sqoop-action-0.3.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"sqoop-action-0.4.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"ssh-action-0.1.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"ssh-action-0.2.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"hive2-action-0.1.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"hive2-action-0.2.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"spark-action-0.1.xsd\")));",
                "-                sources.add(new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(",
                "-                        \"spark-action-0.2.xsd\")));",
                "-                SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);",
                "-                Schema schema = factory.newSchema(sources.toArray(new StreamSource[sources.size()]));",
                "-                Validator validator = schema.newValidator();",
                "-                validator.validate(new StreamSource(new FileReader(file)));",
                "-                System.out.println(\"Valid workflow-app\");",
                "-            }",
                "-            catch (Exception ex) {",
                "-                throw new OozieCLIException(\"Invalid app definition, \" + ex.toString(), ex);",
                "-            }",
                "-        }",
                "-        else {",
                "-            throw new OozieCLIException(\"File does not exists\");",
                "-        }",
                "-    }",
                "-",
                "     private void scriptLanguageCommand(CommandLine commandLine, String jobType) throws IOException, OozieCLIException {"
            ],
            "changed_files": [
                "client/src/main/java/org/apache/oozie/cli/OozieCLI.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-2211": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: XML",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-2211",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b4bbc46f884d3970c1448721ff539adfe308efb5",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1527148616,
            "hunks": 2,
            "message": "OOZIE-2883 ProxyUserService: invalid configuration error message is misleading (yangfang via andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/service/ProxyUserService.java b/core/src/main/java/org/apache/oozie/service/ProxyUserService.java",
                "index 39b57743f..4bfd52779 100644",
                "--- a/core/src/main/java/org/apache/oozie/service/ProxyUserService.java",
                "+++ b/core/src/main/java/org/apache/oozie/service/ProxyUserService.java",
                "@@ -81,3 +81,3 @@ public class ProxyUserService implements Service {",
                "                 if (services.getConf().get(proxyUser + HOSTS) == null) {",
                "-                    throw new ServiceException(ErrorCode.E0551, CONF_PREFIX + proxyUser + HOSTS);",
                "+                    throw new ServiceException(ErrorCode.E0551, proxyUser + HOSTS);",
                "                 }",
                "@@ -95,3 +95,3 @@ public class ProxyUserService implements Service {",
                "                 if (services.getConf().get(proxyUser + GROUPS) == null) {",
                "-                    throw new ServiceException(ErrorCode.E0551, CONF_PREFIX + proxyUser + GROUPS);",
                "+                    throw new ServiceException(ErrorCode.E0551, proxyUser + GROUPS);",
                "                 }"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/service/ProxyUserService.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-2883": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-2883",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d5b9e3690de783df389818fa920cdc7d11dabe4d",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1530526023,
            "hunks": 113,
            "message": "OOZIE-2955 [oozie-client] Fix Findbugs warnings (Jan Hentschel, kmarton via andras.piros)",
            "diff": [
                "diff --git a/client/src/main/java/org/apache/oozie/cli/CLIParser.java b/client/src/main/java/org/apache/oozie/cli/CLIParser.java",
                "index bbdb80356..f6b49b52b 100644",
                "--- a/client/src/main/java/org/apache/oozie/cli/CLIParser.java",
                "+++ b/client/src/main/java/org/apache/oozie/cli/CLIParser.java",
                "@@ -20,2 +20,3 @@ package org.apache.oozie.cli;",
                "+import com.google.common.base.Charsets;",
                " import org.apache.commons.cli.MissingOptionException;",
                "@@ -26,4 +27,6 @@ import org.apache.commons.cli.CommandLine;",
                " import org.apache.commons.cli.HelpFormatter;",
                "-import org.apache.commons.cli.UnrecognizedOptionException;",
                "+import java.io.OutputStreamWriter;",
                "+import java.io.UnsupportedEncodingException;",
                "+import java.io.Writer;",
                " import java.util.Arrays;",
                "@@ -44,5 +47,5 @@ public class CLIParser {",
                "     private String[] cliHelp;",
                "-    private Map<String, Options> commands = new LinkedHashMap<String, Options>();",
                "-    private Map<String, Boolean> commandWithArgs = new LinkedHashMap<String, Boolean>();",
                "-    private Map<String, String> commandsHelp = new LinkedHashMap<String, String>();",
                "+    private Map<String, Options> commands = new LinkedHashMap<>();",
                "+    private Map<String, Boolean> commandWithArgs = new LinkedHashMap<>();",
                "+    private Map<String, String> commandsHelp = new LinkedHashMap<>();",
                "@@ -167,3 +170,4 @@ public class CLIParser {",
                "     public void showHelp(CommandLine commandLine) {",
                "-        PrintWriter pw = new PrintWriter(System.out);",
                "+        Writer writer = new OutputStreamWriter(System.out, Charsets.UTF_8);",
                "+        PrintWriter pw = new PrintWriter(writer);",
                "         pw.println(\"usage: \");",
                "@@ -177,3 +181,3 @@ public class CLIParser {",
                "         if (args.length > 0 && commandsToPrint.contains(args[0])) {",
                "-            commandsToPrint = new HashSet<String>();",
                "+            commandsToPrint = new HashSet<>();",
                "             commandsToPrint.add(args[0]);",
                "@@ -204,6 +208,3 @@ public class CLIParser {",
                "         protected void checkRequiredOptions() throws MissingOptionException {",
                "-            if (ignoreMissingOption) {",
                "-                return;",
                "-            }",
                "-            else {",
                "+            if (!ignoreMissingOption) {",
                "                 super.checkRequiredOptions();",
                "diff --git a/client/src/main/java/org/apache/oozie/cli/OozieCLI.java b/client/src/main/java/org/apache/oozie/cli/OozieCLI.java",
                "index bc234e318..c289971a8 100644",
                "--- a/client/src/main/java/org/apache/oozie/cli/OozieCLI.java",
                "+++ b/client/src/main/java/org/apache/oozie/cli/OozieCLI.java",
                "@@ -21,2 +21,3 @@ package org.apache.oozie.cli;",
                " import com.google.common.annotations.VisibleForTesting;",
                "+import com.google.common.base.Charsets;",
                " import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
                "@@ -63,5 +64,5 @@ import java.io.File;",
                " import java.io.FileInputStream;",
                "-import java.io.FileReader;",
                " import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.io.InputStreamReader;",
                " import java.io.PrintStream;",
                "@@ -715,37 +716,38 @@ public class OozieCLI {",
                "     public void processCommand(CLIParser parser, CLIParser.Command command) throws Exception {",
                "-        if (command.getName().equals(HELP_CMD)) {",
                "-            parser.showHelp(command.getCommandLine());",
                "-        }",
                "-        else if (command.getName().equals(JOB_CMD)) {",
                "-            jobCommand(command.getCommandLine());",
                "-        }",
                "-        else if (command.getName().equals(JOBS_CMD)) {",
                "-            jobsCommand(command.getCommandLine());",
                "-        }",
                "-        else if (command.getName().equals(ADMIN_CMD)) {",
                "-            adminCommand(command.getCommandLine());",
                "-        }",
                "-        else if (command.getName().equals(VERSION_CMD)) {",
                "-            versionCommand();",
                "-        }",
                "-        else if (command.getName().equals(VALIDATE_CMD)) {",
                "-            validateCommand(command.getCommandLine());",
                "-        }",
                "-        else if (command.getName().equals(SLA_CMD)) {",
                "-            slaCommand(command.getCommandLine());",
                "-        }",
                "-        else if (command.getName().equals(PIG_CMD)) {",
                "-            scriptLanguageCommand(command.getCommandLine(), PIG_CMD);",
                "-        }",
                "-        else if (command.getName().equals(HIVE_CMD)) {",
                "-            scriptLanguageCommand(command.getCommandLine(), HIVE_CMD);",
                "-        }",
                "-        else if (command.getName().equals(SQOOP_CMD)) {",
                "-            sqoopCommand(command.getCommandLine());",
                "-        }",
                "-        else if (command.getName().equals(INFO_CMD)) {",
                "-            infoCommand(command.getCommandLine());",
                "-        }",
                "-        else if (command.getName().equals(MR_CMD)){",
                "-            mrCommand(command.getCommandLine());",
                "+        switch (command.getName()) {",
                "+            case JOB_CMD:",
                "+                jobCommand(command.getCommandLine());",
                "+                break;",
                "+            case JOBS_CMD:",
                "+                jobsCommand(command.getCommandLine());",
                "+                break;",
                "+            case ADMIN_CMD:",
                "+                adminCommand(command.getCommandLine());",
                "+                break;",
                "+            case VERSION_CMD:",
                "+                versionCommand();",
                "+                break;",
                "+            case VALIDATE_CMD:",
                "+                validateCommand(command.getCommandLine());",
                "+                break;",
                "+            case SLA_CMD:",
                "+                slaCommand(command.getCommandLine());",
                "+                break;",
                "+            case PIG_CMD:",
                "+                scriptLanguageCommand(command.getCommandLine(), PIG_CMD);",
                "+                break;",
                "+            case HIVE_CMD:",
                "+                scriptLanguageCommand(command.getCommandLine(), HIVE_CMD);",
                "+                break;",
                "+            case SQOOP_CMD:",
                "+                sqoopCommand(command.getCommandLine());",
                "+                break;",
                "+            case INFO_CMD:",
                "+                infoCommand(command.getCommandLine());",
                "+                break;",
                "+            case MR_CMD:",
                "+                mrCommand(command.getCommandLine());",
                "+                break;",
                "+            default:",
                "+                parser.showHelp(command.getCommandLine());",
                "         }",
                "@@ -794,6 +796,3 @@ public class OozieCLI {",
                "         }",
                "-        catch (SAXException e) {",
                "-            throw new IOException(e);",
                "-        }",
                "-        catch (ParserConfigurationException e) {",
                "+        catch (SAXException | ParserConfigurationException e) {",
                "             throw new IOException(e);",
                "@@ -859,3 +858,3 @@ public class OozieCLI {",
                "             if (configFile.endsWith(\".properties\")) {",
                "-                conf.load(new FileReader(file));",
                "+                conf.load(new InputStreamReader(new FileInputStream(file), Charsets.UTF_8));",
                "             }",
                "@@ -883,3 +882,3 @@ public class OozieCLI {",
                "     private boolean isConfigurationSpecified(OozieClient wc, CommandLine commandLine) throws IOException {",
                "-        boolean isConf = false;",
                "+        boolean isConf;",
                "         String configFile = commandLine.getOptionValue(CONFIG_OPTION);",
                "@@ -1007,3 +1006,3 @@ public class OozieCLI {",
                "-        List<String> options = new ArrayList<String>();",
                "+        List<String> options = new ArrayList<>();",
                "         for (Option option : commandLine.getOptions()) {",
                "@@ -1060,4 +1059,4 @@ public class OozieCLI {",
                "                     String coordJobId = commandLine.getOptionValue(KILL_OPTION);",
                "-                    String scope = null;",
                "-                    String rangeType = null;",
                "+                    String scope;",
                "+                    String rangeType;",
                "                     if (options.contains(DATE_OPTION) && options.contains(ACTION_OPTION)) {",
                "@@ -1135,4 +1134,4 @@ public class OozieCLI {",
                "                     String coordJobId = commandLine.getOptionValue(RERUN_OPTION);",
                "-                    String scope = null;",
                "-                    String rerunType = null;",
                "+                    String scope;",
                "+                    String rerunType;",
                "                     boolean refresh = false;",
                "@@ -1268,18 +1267,10 @@ public class OozieCLI {",
                "             else if (options.contains(ERROR_LOG_OPTION)) {",
                "-                PrintStream ps = System.out;",
                "-                try {",
                "+                try (PrintStream ps = System.out) {",
                "                     wc.getJobErrorLog(commandLine.getOptionValue(ERROR_LOG_OPTION), ps);",
                "                 }",
                "-                finally {",
                "-                    ps.close();",
                "-                }",
                "             }",
                "             else if (options.contains(AUDIT_LOG_OPTION)) {",
                "-                PrintStream ps = System.out;",
                "-                try {",
                "+                try (PrintStream ps = System.out) {",
                "                     wc.getJobAuditLog(commandLine.getOptionValue(AUDIT_LOG_OPTION), ps);",
                "                 }",
                "-                finally {",
                "-                    ps.close();",
                "-                }",
                "             }",
                "@@ -1730,3 +1721,3 @@ public class OozieCLI {",
                "-        List<String> options = new ArrayList<String>();",
                "+        List<String> options = new ArrayList<>();",
                "         for (Option option : commandLine.getOptions()) {",
                "@@ -1972,3 +1963,3 @@ public class OozieCLI {",
                "-        List<String> options = new ArrayList<String>();",
                "+        List<String> options = new ArrayList<>();",
                "         for (Option option : commandLine.getOptions()) {",
                "@@ -1978,3 +1969,3 @@ public class OozieCLI {",
                "         try {",
                "-            SYSTEM_MODE status = SYSTEM_MODE.NORMAL;",
                "+            SYSTEM_MODE status;",
                "             if (options.contains(VERSION_OPTION)) {",
                "@@ -2025,3 +2016,3 @@ public class OozieCLI {",
                "             else if (options.contains(AVAILABLE_SERVERS_OPTION)) {",
                "-                Map<String, String> availableOozieServers = new TreeMap<String, String>(wc.getAvailableOozieServers());",
                "+                Map<String, String> availableOozieServers = new TreeMap<>(wc.getAvailableOozieServers());",
                "                 for (Map.Entry<String, String> ent : availableOozieServers.entrySet()) {",
                "@@ -2030,3 +2021,3 @@ public class OozieCLI {",
                "             } else if (options.contains(SERVER_CONFIGURATION_OPTION)) {",
                "-                Map<String, String> serverConfig = new TreeMap<String, String>(wc.getServerConfiguration());",
                "+                Map<String, String> serverConfig = new TreeMap<>(wc.getServerConfiguration());",
                "                 for (Map.Entry<String, String> ent : serverConfig.entrySet()) {",
                "@@ -2035,3 +2026,3 @@ public class OozieCLI {",
                "             } else if (options.contains(SERVER_OS_ENV_OPTION)) {",
                "-                Map<String, String> osEnv = new TreeMap<String, String>(wc.getOSEnv());",
                "+                Map<String, String> osEnv = new TreeMap<>(wc.getOSEnv());",
                "                 for (Map.Entry<String, String> ent : osEnv.entrySet()) {",
                "@@ -2040,3 +2031,3 @@ public class OozieCLI {",
                "             } else if (options.contains(SERVER_JAVA_SYSTEM_PROPERTIES_OPTION)) {",
                "-                Map<String, String> javaSysProps = new TreeMap<String, String>(wc.getJavaSystemProperties());",
                "+                Map<String, String> javaSysProps = new TreeMap<>(wc.getJavaSystemProperties());",
                "                 for (Map.Entry<String, String> ent : javaSysProps.entrySet()) {",
                "@@ -2155,3 +2146,3 @@ public class OozieCLI {",
                "-        SimpleDateFormat dateFormater = null;",
                "+        SimpleDateFormat dateFormater;",
                "         if (verbose) {",
                "@@ -2183,3 +2174,3 @@ public class OozieCLI {",
                "             XOozieClient wc = createXOozieClient(commandLine);",
                "-            String result = wc.validateXML(args[0].toString());",
                "+            String result = wc.validateXML(args[0]);",
                "             if (result == null) {",
                "@@ -2215,3 +2206,3 @@ public class OozieCLI {",
                "             String script = commandLine.getOptionValue(SCRIPTFILE_OPTION);",
                "-            List<String> paramsList = new ArrayList<String>();",
                "+            List<String> paramsList = new ArrayList<>();",
                "             if (commandLine.hasOption(\"P\")) {",
                "@@ -2368,3 +2359,3 @@ public class OozieCLI {",
                "         System.out.println(\"--------\");",
                "-        Map<String, Long> counters = new TreeMap<String, Long>(metrics.getCounters());",
                "+        Map<String, Long> counters = new TreeMap<>(metrics.getCounters());",
                "         for (Map.Entry<String, Long> ent : counters.entrySet()) {",
                "@@ -2374,3 +2365,3 @@ public class OozieCLI {",
                "         System.out.println(\"------\");",
                "-        Map<String, Object> gauges = new TreeMap<String, Object>(metrics.getGauges());",
                "+        Map<String, Object> gauges = new TreeMap<>(metrics.getGauges());",
                "         for (Map.Entry<String, Object> ent : gauges.entrySet()) {",
                "@@ -2380,3 +2371,3 @@ public class OozieCLI {",
                "         System.out.println(\"------\");",
                "-        Map<String, OozieClient.Metrics.Timer> timers = new TreeMap<String, OozieClient.Metrics.Timer>(metrics.getTimers());",
                "+        Map<String, OozieClient.Metrics.Timer> timers = new TreeMap<>(metrics.getTimers());",
                "         for (Map.Entry<String, OozieClient.Metrics.Timer> ent : timers.entrySet()) {",
                "@@ -2387,4 +2378,3 @@ public class OozieCLI {",
                "         System.out.println(\"----------\");",
                "-        Map<String, OozieClient.Metrics.Histogram> histograms =",
                "-                new TreeMap<String, OozieClient.Metrics.Histogram>(metrics.getHistograms());",
                "+        Map<String, OozieClient.Metrics.Histogram> histograms = new TreeMap<>(metrics.getHistograms());",
                "         for (Map.Entry<String, OozieClient.Metrics.Histogram> ent : histograms.entrySet()) {",
                "@@ -2398,3 +2388,3 @@ public class OozieCLI {",
                "         System.out.println(\"--------\");",
                "-        Map<String, Long> counters = new TreeMap<String, Long>(instrumentation.getCounters());",
                "+        Map<String, Long> counters = new TreeMap<>(instrumentation.getCounters());",
                "         for (Map.Entry<String, Long> ent : counters.entrySet()) {",
                "@@ -2404,3 +2394,3 @@ public class OozieCLI {",
                "         System.out.println(\"---------\");",
                "-        Map<String, Object> variables = new TreeMap<String, Object>(instrumentation.getVariables());",
                "+        Map<String, Object> variables = new TreeMap<>(instrumentation.getVariables());",
                "         for (Map.Entry<String, Object> ent : variables.entrySet()) {",
                "@@ -2410,3 +2400,3 @@ public class OozieCLI {",
                "         System.out.println(\"---------\");",
                "-        Map<String, Double> samplers = new TreeMap<String, Double>(instrumentation.getSamplers());",
                "+        Map<String, Double> samplers = new TreeMap<>(instrumentation.getSamplers());",
                "         for (Map.Entry<String, Double> ent : samplers.entrySet()) {",
                "@@ -2416,4 +2406,3 @@ public class OozieCLI {",
                "         System.out.println(\"---------\");",
                "-        Map<String, OozieClient.Instrumentation.Timer> timers =",
                "-                new TreeMap<String, OozieClient.Instrumentation.Timer>(instrumentation.getTimers());",
                "+        Map<String, OozieClient.Instrumentation.Timer> timers = new TreeMap<>(instrumentation.getTimers());",
                "         for (Map.Entry<String, OozieClient.Instrumentation.Timer> ent : timers.entrySet()) {",
                "diff --git a/client/src/main/java/org/apache/oozie/client/AuthOozieClient.java b/client/src/main/java/org/apache/oozie/client/AuthOozieClient.java",
                "index 98f421f32..3a8b5ab62 100644",
                "--- a/client/src/main/java/org/apache/oozie/client/AuthOozieClient.java",
                "+++ b/client/src/main/java/org/apache/oozie/client/AuthOozieClient.java",
                "@@ -22,5 +22,7 @@ import java.io.BufferedReader;",
                " import java.io.File;",
                "-import java.io.FileReader;",
                "-import java.io.FileWriter;",
                "+import java.io.FileInputStream;",
                "+import java.io.FileOutputStream;",
                " import java.io.IOException;",
                "+import java.io.InputStreamReader;",
                "+import java.io.OutputStreamWriter;",
                " import java.io.Writer;",
                "@@ -34,2 +36,3 @@ import java.util.Map;",
                "+import com.google.common.base.Charsets;",
                " import org.apache.hadoop.security.authentication.client.AuthenticatedURL;",
                "@@ -63,3 +66,3 @@ public class AuthOozieClient extends XOozieClient {",
                "-    public static enum AuthType {",
                "+    public enum AuthType {",
                "         KERBEROS, SIMPLE",
                "@@ -109,3 +112,3 @@ public class AuthOozieClient extends XOozieClient {",
                "         AuthenticatedURL.Token readToken = null;",
                "-        AuthenticatedURL.Token currentToken = null;",
                "+        AuthenticatedURL.Token currentToken;",
                "@@ -217,3 +220,4 @@ public class AuthOozieClient extends XOozieClient {",
                "             try {",
                "-                BufferedReader reader = new BufferedReader(new FileReader(AUTH_TOKEN_CACHE_FILE));",
                "+                BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(AUTH_TOKEN_CACHE_FILE),",
                "+                        Charsets.UTF_8));",
                "                 String line = reader.readLine();",
                "@@ -247,3 +251,3 @@ public class AuthOozieClient extends XOozieClient {",
                "             tmpTokenFile.deleteOnExit();",
                "-            Writer writer = new FileWriter(tmpTokenFile);",
                "+            Writer writer = new OutputStreamWriter(new FileOutputStream(tmpTokenFile), Charsets.UTF_8);",
                "             writer.write(authToken.toString());",
                "@@ -294,8 +298,3 @@ public class AuthOozieClient extends XOozieClient {",
                "             }",
                "-            catch (InstantiationException ex) {",
                "-                throw new OozieClientException(OozieClientException.AUTHENTICATION,",
                "-                        \"Could not instantiate Authenticator for option [\" + authOption + \"], \" +",
                "-                        ex.getMessage(), ex);",
                "-            }",
                "-            catch (IllegalAccessException ex) {",
                "+            catch (InstantiationException | IllegalAccessException ex) {",
                "                 throw new OozieClientException(OozieClientException.AUTHENTICATION,",
                "@@ -311,3 +310,3 @@ public class AuthOozieClient extends XOozieClient {",
                "                 ClassLoader cl = Thread.currentThread().getContextClassLoader();",
                "-                Class<? extends Object> klass = (cl != null) ? cl.loadClass(className) :",
                "+                Class<?> klass = (cl != null) ? cl.loadClass(className) :",
                "                     getClass().getClassLoader().loadClass(className);",
                "@@ -341,3 +340,3 @@ public class AuthOozieClient extends XOozieClient {",
                "     protected Map<String, Class<? extends Authenticator>> getAuthenticators() {",
                "-        Map<String, Class<? extends Authenticator>> authClasses = new HashMap<String, Class<? extends Authenticator>>();",
                "+        Map<String, Class<? extends Authenticator>> authClasses = new HashMap<>();",
                "         authClasses.put(AuthType.KERBEROS.toString(), KerberosAuthenticator.class);",
                "@@ -356,3 +355,2 @@ public class AuthOozieClient extends XOozieClient {",
                "     }",
                "-",
                " }",
                "diff --git a/client/src/main/java/org/apache/oozie/client/OozieClient.java b/client/src/main/java/org/apache/oozie/client/OozieClient.java",
                "index 2cc169230..949b4532f 100644",
                "--- a/client/src/main/java/org/apache/oozie/client/OozieClient.java",
                "+++ b/client/src/main/java/org/apache/oozie/client/OozieClient.java",
                "@@ -22,6 +22,5 @@ import com.fasterxml.jackson.core.type.TypeReference;",
                " import com.fasterxml.jackson.databind.ObjectMapper;",
                "+import com.google.common.base.Charsets;",
                " import com.google.common.base.Strings;",
                " import com.google.common.collect.Lists;",
                "-import org.apache.commons.io.IOUtils;",
                "-import com.google.common.collect.Lists;",
                " import org.apache.oozie.BuildInfo;",
                "@@ -56,3 +55,2 @@ import java.net.URL;",
                " import java.net.URLEncoder;",
                "-import java.nio.charset.StandardCharsets;",
                " import java.util.Collections;",
                "@@ -215,3 +213,3 @@ public class OozieClient {",
                "-    public static enum SYSTEM_MODE {",
                "+    public enum SYSTEM_MODE {",
                "         NORMAL, NOWEBSERVICE, SAFEMODE",
                "@@ -246,3 +244,2 @@ public class OozieClient {",
                "-",
                "     private String baseUrl;",
                "@@ -416,3 +413,3 @@ public class OozieClient {",
                "         if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {",
                "-            versions = (JSONArray) JSONValue.parse(new InputStreamReader(conn.getInputStream()));",
                "+            versions = (JSONArray) JSONValue.parse(new InputStreamReader(conn.getInputStream(), Charsets.UTF_8));",
                "         }",
                "@@ -500,4 +497,4 @@ public class OozieClient {",
                "                 if (param.getValue() != null) {",
                "-                    sb.append(separator).append(URLEncoder.encode(param.getKey(), \"UTF-8\")).append(\"=\").append(",
                "-                            URLEncoder.encode(param.getValue(), \"UTF-8\"));",
                "+                    sb.append(separator).append(URLEncoder.encode(param.getKey(), Charsets.UTF_8.name())).append(\"=\").append(",
                "+                            URLEncoder.encode(param.getValue(), Charsets.UTF_8.name()));",
                "                     separator = \"&\";",
                "@@ -531,4 +528,3 @@ public class OozieClient {",
                "             public Object doExecute(URL url, String method) throws IOException, OozieClientException {",
                "-                HttpURLConnection conn = createConnection(url, method);",
                "-                return conn;",
                "+                return createConnection(url, method);",
                "             }",
                "@@ -610,3 +606,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -733,3 +729,3 @@ public class OozieClient {",
                "             if (conn.getResponseCode() == HttpURLConnection.HTTP_CREATED) {",
                "-                JSONObject json = (JSONObject) JSONValue.parse(new InputStreamReader(conn.getInputStream()));",
                "+                JSONObject json = (JSONObject) JSONValue.parse(new InputStreamReader(conn.getInputStream(), Charsets.UTF_8));",
                "                 return (String) json.get(JsonTags.JOB_ID);",
                "@@ -794,5 +790,4 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "-                JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "-                return json;",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "+                return (JSONObject) JSONValue.parse(reader);",
                "             }",
                "@@ -855,3 +850,3 @@ public class OozieClient {",
                "             if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {",
                "-                JSONObject json = (JSONObject) JSONValue.parse(new InputStreamReader(conn.getInputStream()));",
                "+                JSONObject json = (JSONObject) JSONValue.parse(new InputStreamReader(conn.getInputStream(), Charsets.UTF_8));",
                "                 JSONObject update = (JSONObject) json.get(JsonTags.COORD_UPDATE);",
                "@@ -1014,3 +1009,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1033,3 +1028,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1053,3 +1048,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1074,3 +1069,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1246,3 +1241,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1310,3 +1305,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8);",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1340,5 +1335,4 @@ public class OozieClient {",
                "                                 if (inputDependenciesList != null) {",
                "-                                    Iterator<String> iterator = inputDependenciesList.iterator();",
                "-                                    while (iterator.hasNext()) {",
                "-                                        printStream.println(\"\\t  \" + iterator.next());",
                "+                                    for (String anInputDependenciesList : (Iterable<String>) inputDependenciesList) {",
                "+                                        printStream.println(\"\\t  \" + anInputDependenciesList);",
                "                                     }",
                "@@ -1396,8 +1390,6 @@ public class OozieClient {",
                "                 InputStream is = conn.getInputStream();",
                "-                InputStreamReader isr = new InputStreamReader(is);",
                "-                try {",
                "+                try (InputStreamReader isr = new InputStreamReader(is, Charsets.UTF_8)) {",
                "                     if (printStream != null) {",
                "                         sendToOutputStream(isr, -1, printStream);",
                "-                    }",
                "-                    else {",
                "+                    } else {",
                "                         returnVal = getReaderAsString(isr, -1);",
                "@@ -1405,5 +1397,2 @@ public class OozieClient {",
                "                 }",
                "-                finally {",
                "-                    isr.close();",
                "-                }",
                "             }",
                "@@ -1484,3 +1473,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1505,3 +1494,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1531,3 +1520,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1551,3 +1540,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1642,3 +1631,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1669,3 +1658,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1696,3 +1685,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1722,3 +1711,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1749,3 +1738,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1772,3 +1761,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -1802,3 +1791,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -2017,5 +2006,3 @@ public class OozieClient {",
                "         StringBuilder sb = new StringBuilder();",
                "-        Iterator<Entry<String, String>> it = map.entrySet().iterator();",
                "-        while (it.hasNext()) {",
                "-            Entry<String, String> e = (Entry<String, String>) it.next();",
                "+        for (Entry<String, String> e : map.entrySet()) {",
                "             sb.append(e.getKey()).append(\"=\").append(e.getValue()).append(\";\");",
                "@@ -2076,4 +2063,4 @@ public class OozieClient {",
                "                 if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));",
                "-                    String line = null;",
                "+                    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), Charsets.UTF_8));",
                "+                    String line;",
                "                     while ((line = br.readLine()) != null) {",
                "@@ -2099,3 +2086,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -2159,3 +2146,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -2201,3 +2188,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -2228,3 +2215,3 @@ public class OozieClient {",
                "                 byte[] buffer = new byte[1024];",
                "-                int n = 0;",
                "+                int n;",
                "                 while (-1 != (n = fi.read(buffer))) {",
                "@@ -2234,3 +2221,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -2275,4 +2262,4 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "-                Object sharelib = (Object) JSONValue.parse(reader);",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "+                Object sharelib = JSONValue.parse(reader);",
                "                 bf.append(\"[ShareLib update status]\").append(System.getProperty(\"line.separator\"));",
                "@@ -2317,3 +2304,3 @@ public class OozieClient {",
                "                 StringBuffer bf = new StringBuffer();",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -2400,3 +2387,3 @@ public class OozieClient {",
                "             if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8);",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject jsonObject = (JSONObject) JSONValue.parse(reader);",
                "@@ -2561,3 +2548,3 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -2584,3 +2571,3 @@ public class OozieClient {",
                "-            Reader reader = new InputStreamReader(conn.getInputStream());",
                "+            Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "             JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "@@ -2726,6 +2713,5 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "-                Metrics metrics = new Metrics(json);",
                "-                return metrics;",
                "+                return new Metrics(json);",
                "             }",
                "@@ -2751,3 +2737,3 @@ public class OozieClient {",
                "             JSONObject jCounters = (JSONObject) json.get(\"counters\");",
                "-            counters = new HashMap<String, Long>(jCounters.size());",
                "+            counters = new HashMap<>(jCounters.size());",
                "             for (Object entO : jCounters.entrySet()) {",
                "@@ -2758,3 +2744,3 @@ public class OozieClient {",
                "             JSONObject jGuages = (JSONObject) json.get(\"gauges\");",
                "-            gauges = new HashMap<String, Object>(jGuages.size());",
                "+            gauges = new HashMap<>(jGuages.size());",
                "             for (Object entO : jGuages.entrySet()) {",
                "@@ -2765,3 +2751,3 @@ public class OozieClient {",
                "             JSONObject jTimers = (JSONObject) json.get(\"timers\");",
                "-            timers = new HashMap<String, Timer>(jTimers.size());",
                "+            timers = new HashMap<>(jTimers.size());",
                "             for (Object entO : jTimers.entrySet()) {",
                "@@ -2772,3 +2758,3 @@ public class OozieClient {",
                "             JSONObject jHistograms = (JSONObject) json.get(\"histograms\");",
                "-            histograms = new HashMap<String, Histogram>(jHistograms.size());",
                "+            histograms = new HashMap<>(jHistograms.size());",
                "             for (Object entO : jHistograms.entrySet()) {",
                "@@ -2959,6 +2945,5 @@ public class OozieClient {",
                "             if ((conn.getResponseCode() == HttpURLConnection.HTTP_OK)) {",
                "-                Reader reader = new InputStreamReader(conn.getInputStream());",
                "+                Reader reader = new InputStreamReader(conn.getInputStream(), Charsets.UTF_8);",
                "                 JSONObject json = (JSONObject) JSONValue.parse(reader);",
                "-                Instrumentation instrumentation = new Instrumentation(json);",
                "-                return instrumentation;",
                "+                return new Instrumentation(json);",
                "             }",
                "@@ -2983,3 +2968,3 @@ public class OozieClient {",
                "             JSONArray jCounters = (JSONArray) json.get(\"counters\");",
                "-            counters = new HashMap<String, Long>(jCounters.size());",
                "+            counters = new HashMap<>(jCounters.size());",
                "             for (Object groupO : jCounters) {",
                "@@ -2995,3 +2980,3 @@ public class OozieClient {",
                "             JSONArray jVariables = (JSONArray) json.get(\"variables\");",
                "-            variables = new HashMap<String, Object>(jVariables.size());",
                "+            variables = new HashMap<>(jVariables.size());",
                "             for (Object groupO : jVariables) {",
                "@@ -3007,3 +2992,3 @@ public class OozieClient {",
                "             JSONArray jSamplers = (JSONArray) json.get(\"samplers\");",
                "-            samplers = new HashMap<String, Double>(jSamplers.size());",
                "+            samplers = new HashMap<>(jSamplers.size());",
                "             for (Object groupO : jSamplers) {",
                "@@ -3019,3 +3004,3 @@ public class OozieClient {",
                "             JSONArray jTimers = (JSONArray) json.get(\"timers\");",
                "-            timers = new HashMap<String, Timer>(jTimers.size());",
                "+            timers = new HashMap<>(jTimers.size());",
                "             for (Object groupO : jTimers) {",
                "@@ -3164,3 +3149,2 @@ public class OozieClient {",
                "     }",
                "-",
                " }",
                "diff --git a/client/src/main/java/org/apache/oozie/client/XOozieClient.java b/client/src/main/java/org/apache/oozie/client/XOozieClient.java",
                "index ba60f8e75..7761d11af 100644",
                "--- a/client/src/main/java/org/apache/oozie/client/XOozieClient.java",
                "+++ b/client/src/main/java/org/apache/oozie/client/XOozieClient.java",
                "@@ -22,3 +22,3 @@ import java.io.BufferedReader;",
                " import java.io.File;",
                "-import java.io.FileReader;",
                "+import java.io.FileInputStream;",
                " import java.io.IOException;",
                "@@ -28,2 +28,5 @@ import java.util.Properties;",
                "+import com.google.common.base.Charsets;",
                "+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
                "+import org.apache.commons.io.FilenameUtils;",
                " import org.apache.oozie.cli.OozieCLI;",
                "@@ -73,2 +76,3 @@ public class XOozieClient extends OozieClient {",
                "+    @SuppressFBWarnings(value = \"PATH_TRAVERSAL_IN\", justification = \"FilenameUtils is used to filter user input. JDK8+ is used.\")",
                "     private String readScript(String script) throws IOException {",
                "@@ -80,3 +84,4 @@ public class XOozieClient extends OozieClient {",
                "         try {",
                "-            br = new BufferedReader(new FileReader(script));",
                "+            br = new BufferedReader(new InputStreamReader(new FileInputStream(",
                "+                    FilenameUtils.getFullPath(script) + FilenameUtils.getName(script)), Charsets.UTF_8));",
                "             StringBuilder sb = new StringBuilder();",
                "@@ -202,18 +207,19 @@ public class XOozieClient extends OozieClient {",
                "-        String script = \"\";",
                "-        String options = \"\";",
                "-        String scriptParams = \"\";",
                "-",
                "-        if (jobType.equals(OozieCLI.HIVE_CMD)) {",
                "-            script = XOozieClient.HIVE_SCRIPT;",
                "-            options = XOozieClient.HIVE_OPTIONS;",
                "-            scriptParams = XOozieClient.HIVE_SCRIPT_PARAMS;",
                "-        }",
                "-        else if (jobType.equals(OozieCLI.PIG_CMD)) {",
                "-            script =  XOozieClient.PIG_SCRIPT;",
                "-            options = XOozieClient.PIG_OPTIONS;",
                "-            scriptParams = XOozieClient.PIG_SCRIPT_PARAMS;",
                "-        }",
                "-        else {",
                "-            throw new IllegalArgumentException(\"jobType must be either pig or hive\");",
                "+        String script;",
                "+        String options;",
                "+        String scriptParams;",
                "+",
                "+        switch (jobType) {",
                "+            case OozieCLI.HIVE_CMD:",
                "+                script = XOozieClient.HIVE_SCRIPT;",
                "+                options = XOozieClient.HIVE_OPTIONS;",
                "+                scriptParams = XOozieClient.HIVE_SCRIPT_PARAMS;",
                "+                break;",
                "+            case OozieCLI.PIG_CMD:",
                "+                script = XOozieClient.PIG_SCRIPT;",
                "+                options = XOozieClient.PIG_OPTIONS;",
                "+                scriptParams = XOozieClient.PIG_SCRIPT_PARAMS;",
                "+                break;",
                "+            default:",
                "+                throw new IllegalArgumentException(\"jobType must be either pig or hive\");",
                "         }",
                "@@ -275,3 +281,3 @@ public class XOozieClient extends OozieClient {",
                "             if (conn.getResponseCode() == HttpURLConnection.HTTP_CREATED) {",
                "-                JSONObject json = (JSONObject) JSONValue.parse(new InputStreamReader(conn.getInputStream()));",
                "+                JSONObject json = (JSONObject) JSONValue.parse(new InputStreamReader(conn.getInputStream(), Charsets.UTF_8));",
                "                 return (String) json.get(JsonTags.JOB_ID);"
            ],
            "changed_files": [
                "client/src/main/java/org/apache/oozie/cli/CLIParser.java",
                "client/src/main/java/org/apache/oozie/cli/OozieCLI.java",
                "client/src/main/java/org/apache/oozie/client/AuthOozieClient.java",
                "client/src/main/java/org/apache/oozie/client/OozieClient.java",
                "client/src/main/java/org/apache/oozie/client/XOozieClient.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-2955": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: XML",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-2955",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7804e74474130c2905c3404740ab467055fe16cb",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1525792517,
            "hunks": 33,
            "message": "OOZIE-3232 Reduce heap waste by reducing duplicate string count (Misha Dmitriev via andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/StringBlob.java b/core/src/main/java/org/apache/oozie/StringBlob.java",
                "index cb5aff45a..b453f0933 100644",
                "--- a/core/src/main/java/org/apache/oozie/StringBlob.java",
                "+++ b/core/src/main/java/org/apache/oozie/StringBlob.java",
                "@@ -23,3 +23,2 @@ import java.io.DataInputStream;",
                " import java.io.IOException;",
                "-import java.io.UnsupportedEncodingException;",
                "@@ -27,2 +26,3 @@ import org.apache.oozie.compression.CodecFactory;",
                " import org.apache.oozie.compression.CompressionCodec;",
                "+import org.apache.oozie.util.StringUtils;",
                "@@ -51,3 +51,3 @@ public class StringBlob {",
                "     public StringBlob(String inputString) {",
                "-        this.string = inputString;",
                "+        this.string = StringUtils.intern(inputString);",
                "         this.rawBlob = null;",
                "@@ -61,3 +61,3 @@ public class StringBlob {",
                "     public void setString(String str) {",
                "-        this.string = str;",
                "+        this.string = StringUtils.intern(str);",
                "         this.rawBlob = null;",
                "@@ -81,6 +81,6 @@ public class StringBlob {",
                "             if (codec != null) {",
                "-                string = codec.decompressToString(dais);",
                "+                string = StringUtils.intern(codec.decompressToString(dais));",
                "             }",
                "             else {",
                "-                string = new String(rawBlob, CodecFactory.UTF_8_ENCODING);",
                "+                string = StringUtils.intern((new String(rawBlob, CodecFactory.UTF_8_ENCODING)));",
                "             }",
                "diff --git a/core/src/main/java/org/apache/oozie/WorkflowActionBean.java b/core/src/main/java/org/apache/oozie/WorkflowActionBean.java",
                "index 32bebae78..2d75e1670 100644",
                "--- a/core/src/main/java/org/apache/oozie/WorkflowActionBean.java",
                "+++ b/core/src/main/java/org/apache/oozie/WorkflowActionBean.java",
                "@@ -46,2 +46,3 @@ import org.apache.oozie.util.ParamChecker;",
                " import org.apache.oozie.util.PropertiesUtils;",
                "+import org.apache.oozie.util.StringUtils;",
                " import org.apache.oozie.util.WritableUtils;",
                "@@ -374,3 +375,3 @@ public class WorkflowActionBean implements Writable, WorkflowAction, JsonBean {",
                "         setErrorInfo(WritableUtils.readStr(dataInput), WritableUtils.readStr(dataInput));",
                "-        wfId = WritableUtils.readStr(dataInput);",
                "+        setJobId(WritableUtils.readStr(dataInput));",
                "         executionPath = WritableUtils.readStr(dataInput);",
                "@@ -679,3 +680,3 @@ public class WorkflowActionBean implements Writable, WorkflowAction, JsonBean {",
                "     public void setJobId(String id) {",
                "-        this.wfId = id;",
                "+        this.wfId = StringUtils.intern(id);",
                "     }",
                "@@ -709,3 +710,3 @@ public class WorkflowActionBean implements Writable, WorkflowAction, JsonBean {",
                "     public void setStatus(Status val) {",
                "-        this.statusStr = val.toString();",
                "+        this.statusStr = StringUtils.intern(val.toString());",
                "     }",
                "@@ -723,3 +724,3 @@ public class WorkflowActionBean implements Writable, WorkflowAction, JsonBean {",
                "     public void setStatusStr(String statusStr) {",
                "-        this.statusStr = statusStr;",
                "+        this.statusStr = StringUtils.intern(statusStr);",
                "     }",
                "@@ -922,3 +923,3 @@ public class WorkflowActionBean implements Writable, WorkflowAction, JsonBean {",
                "     public void setId(String id) {",
                "-        this.id = id;",
                "+        this.id = StringUtils.intern(id);",
                "     }",
                "@@ -943,3 +944,3 @@ public class WorkflowActionBean implements Writable, WorkflowAction, JsonBean {",
                "     public void setName(String name) {",
                "-        this.name = name;",
                "+        this.name = StringUtils.intern(name);",
                "     }",
                "@@ -961,3 +962,3 @@ public class WorkflowActionBean implements Writable, WorkflowAction, JsonBean {",
                "     public void setType(String type) {",
                "-        this.type = type;",
                "+        this.type = StringUtils.intern(type);",
                "     }",
                "@@ -1110,3 +1111,3 @@ public class WorkflowActionBean implements Writable, WorkflowAction, JsonBean {",
                "     public void setExternalId(String externalId) {",
                "-        this.externalId = externalId;",
                "+        this.externalId = StringUtils.intern(externalId);",
                "     }",
                "@@ -1124,3 +1125,3 @@ public class WorkflowActionBean implements Writable, WorkflowAction, JsonBean {",
                "     public void setExternalStatus(String externalStatus) {",
                "-        this.externalStatus = externalStatus;",
                "+        this.externalStatus = StringUtils.intern(externalStatus);",
                "     }",
                "@@ -1138,3 +1139,3 @@ public class WorkflowActionBean implements Writable, WorkflowAction, JsonBean {",
                "     public void setTrackerUri(String trackerUri) {",
                "-        this.trackerUri = trackerUri;",
                "+        this.trackerUri = StringUtils.intern(trackerUri);",
                "     }",
                "diff --git a/core/src/main/java/org/apache/oozie/WorkflowJobBean.java b/core/src/main/java/org/apache/oozie/WorkflowJobBean.java",
                "index 22a01d31c..1e55884cc 100644",
                "--- a/core/src/main/java/org/apache/oozie/WorkflowJobBean.java",
                "+++ b/core/src/main/java/org/apache/oozie/WorkflowJobBean.java",
                "@@ -27,2 +27,3 @@ import org.apache.oozie.client.rest.JsonUtils;",
                " import org.apache.oozie.util.DateUtils;",
                "+import org.apache.oozie.util.StringUtils;",
                " import org.apache.oozie.util.WritableUtils;",
                "@@ -439,9 +440,5 @@ public class WorkflowJobBean implements Writable, WorkflowJob, JsonBean {",
                "-    public void setStatusStr (String statusStr) {",
                "-        this.statusStr = statusStr;",
                "-    }",
                "+    public void setStatusStr (String statusStr) { this.statusStr = StringUtils.intern(statusStr); }",
                "-    public void setStatus(Status val) {",
                "-        this.statusStr = val.toString();",
                "-    }",
                "+    public void setStatus(Status val) { this.statusStr = StringUtils.intern(val.toString()); }",
                "@@ -457,3 +454,3 @@ public class WorkflowJobBean implements Writable, WorkflowJob, JsonBean {",
                "     public void setExternalId(String externalId) {",
                "-        this.externalId = externalId;",
                "+        this.externalId = StringUtils.intern(externalId);",
                "     }",
                "@@ -535,5 +532,3 @@ public class WorkflowJobBean implements Writable, WorkflowJob, JsonBean {",
                "-    public void setAppPath(String appPath) {",
                "-        this.appPath = appPath;",
                "-    }",
                "+    public void setAppPath(String appPath) { this.appPath = StringUtils.intern(appPath); }",
                "@@ -543,5 +538,3 @@ public class WorkflowJobBean implements Writable, WorkflowJob, JsonBean {",
                "-    public void setAppName(String appName) {",
                "-        this.appName = appName;",
                "-    }",
                "+    public void setAppName(String appName) { this.appName = StringUtils.intern(appName); }",
                "@@ -551,5 +544,3 @@ public class WorkflowJobBean implements Writable, WorkflowJob, JsonBean {",
                "-    public void setId(String id) {",
                "-        this.id = id;",
                "-    }",
                "+    public void setId(String id) { this.id = StringUtils.intern(id); }",
                "@@ -580,5 +571,3 @@ public class WorkflowJobBean implements Writable, WorkflowJob, JsonBean {",
                "-    public void setUser(String user) {",
                "-        this.user = user;",
                "-    }",
                "+    public void setUser(String user) { this.user = StringUtils.intern(user); }",
                "@@ -594,3 +583,3 @@ public class WorkflowJobBean implements Writable, WorkflowJob, JsonBean {",
                "     public void setGroup(String group) {",
                "-        this.group = group;",
                "+        this.group = StringUtils.intern(group);",
                "     }",
                "@@ -630,5 +619,3 @@ public class WorkflowJobBean implements Writable, WorkflowJob, JsonBean {",
                "      */",
                "-    public void setParentId(String parentId) {",
                "-        this.parentId = parentId;",
                "-    }",
                "+    public void setParentId(String parentId) { this.parentId = StringUtils.intern(parentId); }",
                "@@ -640,3 +627,3 @@ public class WorkflowJobBean implements Writable, WorkflowJob, JsonBean {",
                "     public void setConsoleUrl(String consoleUrl) {",
                "-        this.consoleUrl = consoleUrl;",
                "+        this.consoleUrl = StringUtils.intern(consoleUrl);",
                "     }",
                "diff --git a/core/src/main/java/org/apache/oozie/command/wf/ActionEndXCommand.java b/core/src/main/java/org/apache/oozie/command/wf/ActionEndXCommand.java",
                "index ef0ed6611..8bf4fc75e 100644",
                "--- a/core/src/main/java/org/apache/oozie/command/wf/ActionEndXCommand.java",
                "+++ b/core/src/main/java/org/apache/oozie/command/wf/ActionEndXCommand.java",
                "@@ -56,2 +56,3 @@ import org.apache.oozie.util.Instrumentation;",
                " import org.apache.oozie.util.LogUtils;",
                "+import org.apache.oozie.util.StringUtils;",
                " import org.apache.oozie.util.XLog;",
                "@@ -76,3 +77,3 @@ public class ActionEndXCommand extends ActionXCommand<Void> {",
                "         super(\"action.end\", type, 0);",
                "-        this.actionId = actionId;",
                "+        this.actionId = StringUtils.intern(actionId);",
                "         this.jobId = Services.get().get(UUIDService.class).getId(actionId);",
                "diff --git a/core/src/main/java/org/apache/oozie/service/CallableQueueService.java b/core/src/main/java/org/apache/oozie/service/CallableQueueService.java",
                "index cfd208a4a..7b899646c 100644",
                "--- a/core/src/main/java/org/apache/oozie/service/CallableQueueService.java",
                "+++ b/core/src/main/java/org/apache/oozie/service/CallableQueueService.java",
                "@@ -47,2 +47,3 @@ import org.apache.oozie.util.PriorityDelayQueue;",
                " import org.apache.oozie.util.PriorityDelayQueue.QueueElement;",
                "+import org.apache.oozie.util.StringUtils;",
                " import org.apache.oozie.util.XCallable;",
                "@@ -281,3 +282,3 @@ public class CallableQueueService implements Service, Instrumentable {",
                "             sb.append(\"]\");",
                "-            name = sb.toString();",
                "+            name = StringUtils.intern(sb.toString());",
                "         }",
                "diff --git a/core/src/main/java/org/apache/oozie/util/StringUtils.java b/core/src/main/java/org/apache/oozie/util/StringUtils.java",
                "index 280c83a6d..26079be93 100644",
                "--- a/core/src/main/java/org/apache/oozie/util/StringUtils.java",
                "+++ b/core/src/main/java/org/apache/oozie/util/StringUtils.java",
                "@@ -39,2 +39,15 @@ public class StringUtils {",
                "     }",
                "+",
                "+    /**",
                "+     * Return the internalized string, or null if the given string is null.",
                "+     * @param str The string to intern",
                "+     * @return The identical string cached in the JVM string pool.",
                "+     */",
                "+    public static String intern(String str) {",
                "+        if (str == null) {",
                "+            return null;",
                "+        }",
                "+        return str.intern();",
                "+    }",
                " }",
                "+"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/StringBlob.java",
                "core/src/main/java/org/apache/oozie/WorkflowActionBean.java",
                "core/src/main/java/org/apache/oozie/WorkflowJobBean.java",
                "core/src/main/java/org/apache/oozie/command/wf/ActionEndXCommand.java",
                "core/src/main/java/org/apache/oozie/service/CallableQueueService.java",
                "core/src/main/java/org/apache/oozie/util/StringUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3232": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "438ba6df78fcecf92553db875c1e4624d4555d1f"
                ]
            ],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: workflow",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3232",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6a3764f817eb27b9a4d768f4453f7663f38004fa",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1526460607,
            "hunks": 14,
            "message": "OOZIE-3217 Enable definition of admin users using oozie-site.xml (orova via andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/service/AuthorizationService.java b/core/src/main/java/org/apache/oozie/service/AuthorizationService.java",
                "index 33fd9c3c4..251838ce7 100644",
                "--- a/core/src/main/java/org/apache/oozie/service/AuthorizationService.java",
                "+++ b/core/src/main/java/org/apache/oozie/service/AuthorizationService.java",
                "@@ -27,2 +27,3 @@ import java.io.InputStreamReader;",
                " import java.net.URI;",
                "+import java.nio.charset.StandardCharsets;",
                " import java.util.HashSet;",
                "@@ -32,3 +33,5 @@ import java.util.ArrayList;",
                " import java.util.Set;",
                "-",
                "+import java.util.LinkedHashSet;",
                "+import com.google.common.collect.Sets;",
                "+import org.apache.commons.io.FilenameUtils;",
                " import org.apache.commons.lang.StringUtils;",
                "@@ -84,2 +87,7 @@ public class AuthorizationService implements Service {",
                "+    /**",
                "+     * Configuration parameter to define admin users in oozie-site.xml.",
                "+     * These admin users shall be added to the admin users found in adminusers.txt",
                "+     */",
                "+    public static final String CONF_ADMIN_USERS = CONF_PREFIX + \"admin.users\";",
                "@@ -142,3 +150,4 @@ public class AuthorizationService implements Service {",
                "                 adminUsers = new HashSet<String>();",
                "-                loadAdminUsers();",
                "+                loadAdminUsersFromFile();",
                "+                loadAdminUsersFromConfiguration();",
                "             }",
                "@@ -179,9 +188,11 @@ public class AuthorizationService implements Service {",
                "      */",
                "-    private void loadAdminUsers() throws ServiceException {",
                "+    private void loadAdminUsersFromFile() throws ServiceException {",
                "         String configDir = Services.get().get(ConfigurationService.class).getConfigDir();",
                "         if (configDir != null) {",
                "-            File file = new File(configDir, ADMIN_USERS_FILE);",
                "+            File file = new File(FilenameUtils.getFullPath(configDir)+FilenameUtils.getBaseName(configDir),",
                "+                    FilenameUtils.getName(ADMIN_USERS_FILE));",
                "             if (file.exists()) {",
                "                 try {",
                "-                    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file)));",
                "+                    BufferedReader br = new BufferedReader(",
                "+                            new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8));",
                "                     try {",
                "@@ -199,4 +210,7 @@ public class AuthorizationService implements Service {",
                "                     }",
                "+                    finally {",
                "+                        br.close();",
                "+                    }",
                "                 }",
                "-                catch (FileNotFoundException ex) {",
                "+                catch (IOException ex) {",
                "                     throw new ServiceException(ErrorCode.E0160, file.getAbsolutePath(), ex);",
                "@@ -205,3 +219,3 @@ public class AuthorizationService implements Service {",
                "             else {",
                "-                log.warn(\"Admin users file not available in config dir [{0}], running without admin users\", configDir);",
                "+                log.warn(\"Admin users file not available in config dir [{0}]\", configDir);",
                "             }",
                "@@ -213,2 +227,11 @@ public class AuthorizationService implements Service {",
                "+    private void loadAdminUsersFromConfiguration() {",
                "+        LinkedHashSet<String> adminsFromOozieSite = Sets.newLinkedHashSet();",
                "+        adminsFromOozieSite.addAll(Services.get().get(ConfigurationService.class).getConf().getStringCollection(CONF_ADMIN_USERS));",
                "+        if (!adminsFromOozieSite.isEmpty()) {",
                "+            log.info(\"{0} admin users found in oozie-site.xml\", adminsFromOozieSite.size());",
                "+            adminUsers.addAll(adminsFromOozieSite);",
                "+        }",
                "+    }",
                "+",
                "     /**",
                "diff --git a/core/src/main/resources/oozie-default.xml b/core/src/main/resources/oozie-default.xml",
                "index 6f8925828..c54db34ff 100644",
                "--- a/core/src/main/resources/oozie-default.xml",
                "+++ b/core/src/main/resources/oozie-default.xml",
                "@@ -331,2 +331,10 @@",
                "+    <property>",
                "+        <name>oozie.serviceAuthorizationService.admin.users</name>",
                "+        <value></value>",
                "+        <description>",
                "+            Comma separated list of users with admin access for the Authorization service.",
                "+        </description>",
                "+    </property>",
                "+",
                "     <property>",
                "diff --git a/docs/src/site/twiki/AG_Install.twiki b/docs/src/site/twiki/AG_Install.twiki",
                "index 77ee4ee23..2d48d437f 100644",
                "--- a/docs/src/site/twiki/AG_Install.twiki",
                "+++ b/docs/src/site/twiki/AG_Install.twiki",
                "@@ -530,4 +530,4 @@ and ENTER characters are trimmed.",
                "-If the above property for admin groups is not set, then the admin users are the users specified in the",
                "- =conf/adminusers.txt= file. The syntax of this file is:",
                "+If the above property for admin groups is not set, then defining the admin users can happen in the following manners.",
                "+The list of admin users can be in the =conf/adminusers.txt= file. The syntax of this file is:",
                "@@ -536,2 +536,10 @@ If the above property for admin groups is not set, then the admin users are the",
                "+Admin users can also be defined in",
                "+=oozie.serviceAuthorizationService.admin.users= property. Use commas to separate multiple admin users, spaces, tabs",
                "+and ENTER characters are trimmed.",
                "+",
                "+In case there are admin users defined using both methods, the effective list of admin users will be the union",
                "+of the admin users found in the adminusers.txt and those specified with =oozie.serviceAuthorizationService.admin.users=.",
                "+",
                "+",
                " ---+++ Oozie System ID Configuration"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/service/AuthorizationService.java",
                "core/src/main/resources/oozie-default.xml",
                "docs/src/site/twiki/AG_Install.twiki"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3217": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3217",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "19f87e24fd5ed953cff82ef96fb63ef739fa4f4f",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1524216262,
            "hunks": 4,
            "message": "OOZIE-3221 Rename DEFAULT_LAUNCHER_MAX_ATTEMPS (dbist13 via andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java b/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java",
                "index 427f43d73..0ba3cbf99 100644",
                "--- a/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java",
                "+++ b/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java",
                "@@ -132,3 +132,3 @@ public class JavaActionExecutor extends ActionExecutor {",
                "     public static final String DEFAULT_LAUNCHER_QUEUE = \"oozie.launcher.default.queue\";",
                "-    public static final String DEFAULT_LAUNCHER_MAX_ATTEMPS = \"oozie.launcher.default.max.attempts\";",
                "+    public static final String DEFAULT_LAUNCHER_MAX_ATTEMPTS = \"oozie.launcher.default.max.attempts\";",
                "     public static final String LAUNCER_MODIFY_ACL = \"oozie.launcher.modify.acl\";",
                "@@ -1182,3 +1182,3 @@ public class JavaActionExecutor extends ActionExecutor {",
                "         int launcherMaxAttempts;",
                "-        final int defaultLauncherMaxAttempts = ConfigurationService.getInt(DEFAULT_LAUNCHER_MAX_ATTEMPS);",
                "+        final int defaultLauncherMaxAttempts = ConfigurationService.getInt(DEFAULT_LAUNCHER_MAX_ATTEMPTS);",
                "         if (launcherJobConf.get(LauncherAM.OOZIE_LAUNCHER_MAX_ATTEMPTS) != null) {",
                "@@ -1918,2 +1918,2 @@ public class JavaActionExecutor extends ActionExecutor {",
                "     }",
                "-}",
                "\\ No newline at end of file",
                "+}"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3221": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: name",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3221",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6257e20668ae6ea4a8d0518be2e7ac7fe1bf3651",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1529411709,
            "hunks": 11,
            "message": "OOZIE-3270 Upgrade Derby to 10.14.1.0 (gezapeti) Change-Id: I5cc8c63f0f29468483336221738e5509bb34ce1b",
            "diff": [
                "diff --git a/docs/src/site/twiki/DG_Overview.twiki b/docs/src/site/twiki/DG_Overview.twiki",
                "index 8f9b06e44..3ec94a2f1 100644",
                "--- a/docs/src/site/twiki/DG_Overview.twiki",
                "+++ b/docs/src/site/twiki/DG_Overview.twiki",
                "@@ -21,2 +21,6 @@ callback Oozie to notify the action completion, at this point Oozie proceeds to",
                "+Oozie uses a custom SecurityManager inside it's launcher to catch exit() calls from the user code. Make sure to delegate checkExit()",
                "+calls to Oozie's SecurityManager if the user code uses its own SecurityManager. The Launcher also grants java.security.AllPermission",
                "+by default to the user code.",
                "+",
                " Oozie workflows contain control flow nodes and action nodes.",
                "diff --git a/pom.xml b/pom.xml",
                "index 7f03e6d0b..0c39d6459 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1343,3 +1343,3 @@",
                "                 <artifactId>derby</artifactId>",
                "-                <version>10.11.1.1</version>",
                "+                <version>10.14.1.0</version>",
                "                 <scope>compile</scope>",
                "diff --git a/sharelib/oozie/pom.xml b/sharelib/oozie/pom.xml",
                "index 6da319e14..a791ae8e3 100644",
                "--- a/sharelib/oozie/pom.xml",
                "+++ b/sharelib/oozie/pom.xml",
                "@@ -40,3 +40,2 @@",
                "     <dependencies>",
                "-",
                "         <dependency>",
                "diff --git a/sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherAM.java b/sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherAM.java",
                "index cab145274..4a4194179 100644",
                "--- a/sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherAM.java",
                "+++ b/sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherAM.java",
                "@@ -25,3 +25,2 @@ import java.lang.reflect.InvocationTargetException;",
                " import java.lang.reflect.Method;",
                "-import java.security.Permission;",
                " import java.security.PrivilegedExceptionAction;",
                "@@ -39,3 +38,2 @@ import org.apache.hadoop.io.Text;",
                " import org.apache.hadoop.security.Credentials;",
                "-import org.apache.hadoop.security.SecurityUtil;",
                " import org.apache.hadoop.security.UserGroupInformation;",
                "@@ -54,2 +52,3 @@ import com.google.common.base.Preconditions;",
                " import org.apache.hadoop.yarn.security.AMRMTokenIdentifier;",
                "+import org.apache.oozie.action.hadoop.security.LauncherSecurityManager;",
                "@@ -153,3 +152,2 @@ public class LauncherAM {",
                "                         launcherConf);",
                "-",
                "                     launcher.run();",
                "@@ -412,3 +410,2 @@ public class LauncherAM {",
                "             mainMethod.invoke(null, (Object) mainArgs);",
                "-",
                "             System.out.println();",
                "@@ -583,62 +580,2 @@ public class LauncherAM {",
                "-    public static class LauncherSecurityManager extends SecurityManager {",
                "-        private boolean exitInvoked;",
                "-        private int exitCode;",
                "-        private SecurityManager originalSecurityManager;",
                "-",
                "-        public LauncherSecurityManager() {",
                "-            exitInvoked = false;",
                "-            exitCode = 0;",
                "-            originalSecurityManager = System.getSecurityManager();",
                "-        }",
                "-",
                "-        @Override",
                "-        public void checkPermission(Permission perm, Object context) {",
                "-            if (originalSecurityManager != null) {",
                "-                // check everything with the original SecurityManager",
                "-                originalSecurityManager.checkPermission(perm, context);",
                "-            }",
                "-        }",
                "-",
                "-        @Override",
                "-        public void checkPermission(Permission perm) {",
                "-            if (originalSecurityManager != null) {",
                "-                // check everything with the original SecurityManager",
                "-                originalSecurityManager.checkPermission(perm);",
                "-            }",
                "-        }",
                "-",
                "-        @Override",
                "-        public void checkExit(int status) throws SecurityException {",
                "-            exitInvoked = true;",
                "-            exitCode = status;",
                "-            throw new SecurityException(\"Intercepted System.exit(\" + status + \")\");",
                "-        }",
                "-",
                "-        public boolean getExitInvoked() {",
                "-            return exitInvoked;",
                "-        }",
                "-",
                "-        public int getExitCode() {",
                "-            return exitCode;",
                "-        }",
                "-",
                "-        public void enable() {",
                "-            if (System.getSecurityManager() != this) {",
                "-                System.setSecurityManager(this);",
                "-            }",
                "-        }",
                "-",
                "-        public void disable() {",
                "-            if (System.getSecurityManager() == this) {",
                "-                System.setSecurityManager(originalSecurityManager);",
                "-            }",
                "-        }",
                "-",
                "-        public void reset() {",
                "-            exitInvoked = false;",
                "-            exitCode = 0;",
                "-        }",
                "-    }",
                "-",
                "     public enum OozieActionResult {",
                "diff --git a/sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/security/AllowAllPolicy.java b/sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/security/AllowAllPolicy.java",
                "new file mode 100644",
                "index 000000000..0f8036bde",
                "--- /dev/null",
                "+++ b/sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/security/AllowAllPolicy.java",
                "@@ -0,0 +1,76 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.oozie.action.hadoop.security;",
                "+",
                "+import java.security.AllPermission;",
                "+import java.security.CodeSource;",
                "+import java.security.Permission;",
                "+import java.security.PermissionCollection;",
                "+import java.security.Policy;",
                "+import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.Enumeration;",
                "+import java.util.List;",
                "+",
                "+/**",
                "+ * A security policy that grants AllPermissions.",
                "+ * <p>",
                "+ * LauncherAM uses Security Manager to handle exits.  With Derby version 10.12.1.1 and above, if a",
                "+ * security manager is configured, embedded Derby requires usederbyinternals permission, and",
                "+ * that is checked directly using AccessController.checkPermission.  This class will be used to",
                "+ * setup a security policy to grant AllPermissions to prevent failures related to Derby and other",
                "+ * similar dependencies in the future.",
                "+ * </p>",
                "+ */",
                "+class AllowAllPolicy extends Policy {",
                "+",
                "+    private PermissionCollection perms;",
                "+",
                "+    public AllowAllPolicy() {",
                "+        super();",
                "+        perms = new AllPermissionCollection();",
                "+        perms.add(new AllPermission());",
                "+    }",
                "+",
                "+    @Override",
                "+    public PermissionCollection getPermissions(CodeSource codesource) {",
                "+        return perms;",
                "+    }",
                "+",
                "+    static class AllPermissionCollection extends PermissionCollection {",
                "+",
                "+        List<Permission> perms = new ArrayList<>();",
                "+",
                "+        public void add(Permission p) {",
                "+            perms.add(p);",
                "+        }",
                "+",
                "+        public boolean implies(Permission p) {",
                "+            return true;",
                "+        }",
                "+",
                "+        public Enumeration<Permission> elements() {",
                "+            return Collections.enumeration(perms);",
                "+        }",
                "+",
                "+        public boolean isReadOnly() {",
                "+            return false;",
                "+        }",
                "+    }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/security/LauncherSecurityManager.java b/sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/security/LauncherSecurityManager.java",
                "new file mode 100644",
                "index 000000000..82838aa6c",
                "--- /dev/null",
                "+++ b/sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/security/LauncherSecurityManager.java",
                "@@ -0,0 +1,86 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *     http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.oozie.action.hadoop.security;",
                "+",
                "+import java.security.Permission;",
                "+import java.security.Policy;",
                "+",
                "+public class LauncherSecurityManager extends SecurityManager {",
                "+    private boolean exitInvoked;",
                "+    private int exitCode;",
                "+    private SecurityManager originalSecurityManager;",
                "+    private Policy originalPolicy;",
                "+",
                "+    public LauncherSecurityManager() {",
                "+        exitInvoked = false;",
                "+        exitCode = 0;",
                "+        originalSecurityManager = System.getSecurityManager();",
                "+        originalPolicy = Policy.getPolicy();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void checkPermission(Permission perm, Object context) {",
                "+        if (originalSecurityManager != null) {",
                "+            // check everything with the original SecurityManager",
                "+            originalSecurityManager.checkPermission(perm, context);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void checkPermission(Permission perm) {",
                "+        if (originalSecurityManager != null) {",
                "+            // check everything with the original SecurityManager",
                "+            originalSecurityManager.checkPermission(perm);",
                "+        }",
                "+    }",
                "+",
                "+    @Override",
                "+    public void checkExit(int status) throws SecurityException {",
                "+        exitInvoked = true;",
                "+        exitCode = status;",
                "+        throw new SecurityException(\"Intercepted System.exit(\" + status + \")\");",
                "+    }",
                "+",
                "+    public boolean getExitInvoked() {",
                "+        return exitInvoked;",
                "+    }",
                "+",
                "+    public int getExitCode() {",
                "+        return exitCode;",
                "+    }",
                "+",
                "+    public void enable() {",
                "+        if (System.getSecurityManager() != this) {",
                "+            Policy.setPolicy(new AllowAllPolicy());",
                "+            System.setSecurityManager(this);",
                "+        }",
                "+    }",
                "+",
                "+    public void disable() {",
                "+        if (System.getSecurityManager() == this) {",
                "+            System.setSecurityManager(originalSecurityManager);",
                "+            Policy.setPolicy(originalPolicy);",
                "+        }",
                "+    }",
                "+",
                "+    public void reset() {",
                "+        exitInvoked = false;",
                "+        exitCode = 0;",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "docs/src/site/twiki/DG_Overview.twiki",
                "pom.xml",
                "sharelib/oozie/pom.xml",
                "sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherAM.java",
                "sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/security/AllowAllPolicy.java",
                "sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/security/LauncherSecurityManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3270": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: allow",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3270",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9911ebbf43f09aca2696ec5385c97c4f6c649dcb",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1528361209,
            "hunks": 10,
            "message": "OOZIE-1393 Allow sending emails via TLS (mbalakrishnan, dionusos via andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/action/email/EmailActionExecutor.java b/core/src/main/java/org/apache/oozie/action/email/EmailActionExecutor.java",
                "index f93b7ad84..a094d93ec 100644",
                "--- a/core/src/main/java/org/apache/oozie/action/email/EmailActionExecutor.java",
                "+++ b/core/src/main/java/org/apache/oozie/action/email/EmailActionExecutor.java",
                "@@ -76,2 +76,3 @@ public class EmailActionExecutor extends ActionExecutor {",
                "     public static final String EMAIL_SMTP_FROM = CONF_PREFIX + \"from.address\";",
                "+    public static final String EMAIL_SMTP_STARTTLS = CONF_PREFIX + \"smtp.starttls.enable\";",
                "     public static final String EMAIL_SMTP_SOCKET_TIMEOUT_MS = CONF_PREFIX + \"smtp.socket.timeout.ms\";",
                "@@ -187,2 +188,3 @@ public class EmailActionExecutor extends ActionExecutor {",
                "         String smtpPassword = ConfigurationService.getPassword(EMAIL_SMTP_PASS, \"\");",
                "+        Boolean smtpStarttlsBool = ConfigurationService.getBoolean(EMAIL_SMTP_STARTTLS);",
                "         String fromAddr = ConfigurationService.get(EMAIL_SMTP_FROM);",
                "@@ -194,2 +196,3 @@ public class EmailActionExecutor extends ActionExecutor {",
                "         properties.setProperty(\"mail.smtp.auth\", smtpAuthBool.toString());",
                "+        properties.setProperty(\"mail.smtp.starttls.enable\", smtpStarttlsBool.toString());",
                "diff --git a/core/src/main/java/org/apache/oozie/sla/listener/SLAEmailEventListener.java b/core/src/main/java/org/apache/oozie/sla/listener/SLAEmailEventListener.java",
                "index 6e863df43..96020538d 100644",
                "--- a/core/src/main/java/org/apache/oozie/sla/listener/SLAEmailEventListener.java",
                "+++ b/core/src/main/java/org/apache/oozie/sla/listener/SLAEmailEventListener.java",
                "@@ -73,2 +73,3 @@ public class SLAEmailEventListener extends SLAEventListener {",
                "     private final boolean SMTP_AUTH_DEFAULT = false;",
                "+    private final boolean SMTP_STARTTLS_DEFAULT = false;",
                "     private final String SMTP_SOURCE_DEFAULT = \"oozie@localhost\";",
                "@@ -111,2 +112,3 @@ public class SLAEmailEventListener extends SLAEventListener {",
                "         Boolean smtpAuth = conf.getBoolean(EmailActionExecutor.EMAIL_SMTP_AUTH, SMTP_AUTH_DEFAULT);",
                "+        Boolean smtpStarttls = conf.getBoolean(EmailActionExecutor.EMAIL_SMTP_STARTTLS, SMTP_STARTTLS_DEFAULT);",
                "         String smtpUser = conf.get(EmailActionExecutor.EMAIL_SMTP_USER, \"\");",
                "@@ -134,2 +136,3 @@ public class SLAEmailEventListener extends SLAEventListener {",
                "         properties.setProperty(\"mail.smtp.auth\", smtpAuth.toString());",
                "+        properties.setProperty(\"mail.smtp.starttls.enable\", smtpStarttls.toString());",
                "         properties.setProperty(\"mail.smtp.connectiontimeout\", smtpConnectTimeout);",
                "diff --git a/core/src/main/resources/oozie-default.xml b/core/src/main/resources/oozie-default.xml",
                "index b828c8096..3d627be53 100644",
                "--- a/core/src/main/resources/oozie-default.xml",
                "+++ b/core/src/main/resources/oozie-default.xml",
                "@@ -3028,2 +3028,10 @@ will be the requeue interval for the actions which are waiting for a long time w",
                "+    <property>",
                "+        <name>oozie.email.smtp.starttls.enable</name>",
                "+        <value>false</value>",
                "+        <description>",
                "+            Boolean property that toggles if use TLS in communication or not.",
                "+        </description>",
                "+    </property>",
                "+",
                "     <property>",
                "diff --git a/docs/src/site/twiki/DG_EmailActionExtension.twiki b/docs/src/site/twiki/DG_EmailActionExtension.twiki",
                "index 588a413f6..4de290ccf 100644",
                "--- a/docs/src/site/twiki/DG_EmailActionExtension.twiki",
                "+++ b/docs/src/site/twiki/DG_EmailActionExtension.twiki",
                "@@ -52,3 +52,4 @@ From uri:oozie:email-action:0.2 one can also specify mail content type as <conte",
                "-The =attachment= is used to attach a file(s) on HDFS to the mail. Multiple attachment can be provided using comma-separated values. Non fully qualified path is considered as a file on default HDFS. A local file cannot be attached.",
                "+The =attachment= is used to attach a file(s) on HDFS to the mail. Multiple attachment can be provided using comma-separated values.",
                "+Non fully qualified path is considered as a file on default HDFS. A local file cannot be attached.",
                "@@ -58,11 +59,12 @@ The =email= action requires some SMTP server configuration to be present (in ooz",
                " it looks for:",
                "-",
                "-=oozie.email.smtp.host= - The host where the email action may find the SMTP server (localhost by default).",
                "-=oozie.email.smtp.port= - The port to connect to for the SMTP server (25 by default).",
                "-=oozie.email.from.address= - The from address to be used for mailing all emails (oozie@localhost by default).",
                "-=oozie.email.smtp.auth= - Boolean property that toggles if authentication is to be done or not. (false by default).",
                "-=oozie.email.smtp.username= - If authentication is enabled, the username to login as (empty by default).",
                "-=oozie.email.smtp.password= - If authentication is enabled, the username's password (empty by default).",
                "-=oozie.email.attachment.enabled= - Boolean property that toggles if configured attachments are to be placed into the emails. (false by default).",
                "-=oozie.email.smtp.socket.timeout.ms= - The timeout to apply over all SMTP server socket operations (10000ms by default).",
                "+   * =oozie.email.smtp.host= - The host where the email action may find the SMTP server (localhost by default).",
                "+   * =oozie.email.smtp.port= - The port to connect to for the SMTP server (25 by default).",
                "+   * =oozie.email.from.address= - The from address to be used for mailing all emails (oozie@localhost by default).",
                "+   * =oozie.email.smtp.auth= - Boolean property that toggles if authentication is to be done or not. (false by default).",
                "+   * =oozie.email.smtp.starttls.enable= - Boolean property that toggles if use TLS communication or not. (false by default).",
                "+   * =oozie.email.smtp.username= - If authentication is enabled, the username to login as (empty by default).",
                "+   * =oozie.email.smtp.password= - If authentication is enabled, the username's password (empty by default).",
                "+   * =oozie.email.attachment.enabled= - Boolean property that toggles if configured attachments are to be placed into the emails.",
                "+   (false by default).",
                "+   * =oozie.email.smtp.socket.timeout.ms= - The timeout to apply over all SMTP server socket operations (10000ms by default).",
                "@@ -114,2 +116,14 @@ with the subject and body both containing the workflow ID after substitution.",
                "+*GMail example to oozie-site.xml*",
                "+",
                "+<verbatim>",
                "+oozie.email.smtp.host=smtp.gmail.com",
                "+oozie.email.smtp.port=587",
                "+oozie.email.from.address=<some email address>",
                "+oozie.email.smtp.auth=true",
                "+oozie.email.smtp.starttls.enable=true",
                "+oozie.email.smtp.username=<Gmail Id>",
                "+oozie.email.smtp.password=<Gmail Pass>",
                "+</verbatim>",
                "+",
                " [[index][::Go back to Oozie Documentation Index::]]"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/action/email/EmailActionExecutor.java",
                "core/src/main/java/org/apache/oozie/sla/listener/SLAEmailEventListener.java",
                "core/src/main/resources/oozie-default.xml",
                "docs/src/site/twiki/DG_EmailActionExtension.twiki"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-1393": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: allow",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-1393",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "05636799ea12c348474205fb7379d70ab5ef9395",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1533157792,
            "hunks": 3,
            "message": "OOZIE-3193 Applications are not killed when submitted via subworkflow (kmarton via gezapeti, andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/action/ActionExecutor.java b/core/src/main/java/org/apache/oozie/action/ActionExecutor.java",
                "index 71bd36ae6..1770b973a 100644",
                "--- a/core/src/main/java/org/apache/oozie/action/ActionExecutor.java",
                "+++ b/core/src/main/java/org/apache/oozie/action/ActionExecutor.java",
                "@@ -605,3 +605,3 @@ public abstract class ActionExecutor {",
                "     public static String getActionYarnTag(Configuration conf, WorkflowJob wfJob, WorkflowAction action) {",
                "-        if (conf.get(OOZIE_ACTION_YARN_TAG) != null) {",
                "+        if (conf != null && conf.get(OOZIE_ACTION_YARN_TAG) != null) {",
                "             return conf.get(OOZIE_ACTION_YARN_TAG) + \"@\" + action.getName();",
                "diff --git a/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java b/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java",
                "index a1a9671ab..8f0f24401 100644",
                "--- a/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java",
                "+++ b/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java",
                "@@ -1779,3 +1779,3 @@ public class JavaActionExecutor extends ActionExecutor {",
                "             final Configuration jobConf = createBaseHadoopConf(context, actionXml);",
                "-            String launcherTag = LauncherHelper.getActionYarnTag(jobConf, context.getWorkflow().getParentId(), action);",
                "+            String launcherTag = getActionYarnTag(context, action);",
                "             jobConf.set(LauncherMain.CHILD_MAPREDUCE_JOB_TAGS, LauncherHelper.getTag(launcherTag));",
                "@@ -1830,2 +1830,6 @@ public class JavaActionExecutor extends ActionExecutor {",
                "+    private String getActionYarnTag(Context context, WorkflowAction action) {",
                "+        return LauncherHelper.getActionYarnTag(context.getProtoActionConf(), context.getWorkflow().getParentId(), action);",
                "+    }",
                "+",
                "     private static Set<String> FINAL_STATUS = new HashSet<String>();"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/action/ActionExecutor.java",
                "core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3193": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: workflow",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3193",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "32db0181843c98743b94c96e83611356914f69e6",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1524082192,
            "hunks": 2,
            "message": "OOZIE-3222 The description for DAG is not accurate in the documentation (gongchuanjie via gezapeti)",
            "diff": [
                "diff --git a/docs/src/site/twiki/DG_Overview.twiki b/docs/src/site/twiki/DG_Overview.twiki",
                "index 216f18dbd..8f9b06e44 100644",
                "--- a/docs/src/site/twiki/DG_Overview.twiki",
                "+++ b/docs/src/site/twiki/DG_Overview.twiki",
                "@@ -12,3 +12,3 @@ Oozie is a Java Web-Application that runs in a Java servlet-container.",
                " For the purposes of Oozie, a workflow is a collection of actions (i.e. Hadoop Map/Reduce jobs, Pig jobs) arranged in",
                "-a control dependency DAG (Direct Acyclic Graph). \"control dependency\" from one action to another means that the second",
                "+a control dependency DAG (Directed Acyclic Graph). \"control dependency\" from one action to another means that the second",
                " action can't run until the first action has completed.",
                "diff --git a/docs/src/site/twiki/WorkflowFunctionalSpec.twiki b/docs/src/site/twiki/WorkflowFunctionalSpec.twiki",
                "index 5df6024bf..76cbe21ec 100644",
                "--- a/docs/src/site/twiki/WorkflowFunctionalSpec.twiki",
                "+++ b/docs/src/site/twiki/WorkflowFunctionalSpec.twiki",
                "@@ -158,3 +158,3 @@ schema 0.4",
                "-*Workflow:* A collection of actions arranged in a control dependency DAG (Direct Acyclic Graph). \"control dependency\"",
                "+*Workflow:* A collection of actions arranged in a control dependency DAG (Directed Acyclic Graph). \"control dependency\"",
                " from one action to another means that the second action can't run until the first action has completed."
            ],
            "changed_files": [
                "docs/src/site/twiki/DG_Overview.twiki",
                "docs/src/site/twiki/WorkflowFunctionalSpec.twiki"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3222": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: workflow",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3222",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2f6bced4fdfe6a438183b3e3fb0f4e2cadc89770",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1530518285,
            "hunks": 172,
            "message": "OOZIE-2956 Fix Findbugs warnings related to reliance on default encoding in oozie-core (Jan Hentschel, kmarton via andras.piros)",
            "diff": [
                "diff --git a/core/pom.xml b/core/pom.xml",
                "index a5a776ca6..92236bca0 100644",
                "--- a/core/pom.xml",
                "+++ b/core/pom.xml",
                "@@ -509,2 +509,7 @@",
                "         </dependency>",
                "+        <dependency>",
                "+            <groupId>com.google.code.findbugs</groupId>",
                "+            <artifactId>annotations</artifactId>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "     </dependencies>",
                "diff --git a/core/src/main/java/org/apache/oozie/StringBlob.java b/core/src/main/java/org/apache/oozie/StringBlob.java",
                "index 6c776011c..eba1313a4 100644",
                "--- a/core/src/main/java/org/apache/oozie/StringBlob.java",
                "+++ b/core/src/main/java/org/apache/oozie/StringBlob.java",
                "@@ -23,3 +23,5 @@ import java.io.DataInputStream;",
                " import java.io.IOException;",
                "+import java.io.UnsupportedEncodingException;",
                "+import com.google.common.base.Charsets;",
                " import org.apache.oozie.compression.CodecFactory;",
                "@@ -119,3 +121,3 @@ public class StringBlob {",
                "         else {",
                "-            rawBlob = ByteArrayUtils.weakIntern(string.getBytes());",
                "+            rawBlob = ByteArrayUtils.weakIntern(string.getBytes(Charsets.UTF_8));",
                "         }",
                "diff --git a/core/src/main/java/org/apache/oozie/action/ActionExecutor.java b/core/src/main/java/org/apache/oozie/action/ActionExecutor.java",
                "index 919509d35..71bd36ae6 100644",
                "--- a/core/src/main/java/org/apache/oozie/action/ActionExecutor.java",
                "+++ b/core/src/main/java/org/apache/oozie/action/ActionExecutor.java",
                "@@ -20,2 +20,3 @@ package org.apache.oozie.action;",
                "+import com.google.common.base.Charsets;",
                " import org.apache.commons.lang.StringUtils;",
                "@@ -36,2 +37,3 @@ import java.io.IOException;",
                " import java.io.PrintStream;",
                "+import java.io.UnsupportedEncodingException;",
                " import java.net.URISyntaxException;",
                "@@ -60,3 +62,2 @@ public abstract class ActionExecutor {",
                "-",
                "     /**",
                "@@ -66,3 +67,3 @@ public abstract class ActionExecutor {",
                "-    public static enum RETRYPOLICY {",
                "+    public enum RETRYPOLICY {",
                "         EXPONENTIAL, PERIODIC",
                "@@ -83,3 +84,3 @@ public abstract class ActionExecutor {",
                "     private static boolean initMode = false;",
                "-    private static Map<String, Map<String, ErrorInfo>> ERROR_INFOS = new HashMap<String, Map<String, ErrorInfo>>();",
                "+    private static Map<String, Map<String, ErrorInfo>> ERROR_INFOS = new HashMap<>();",
                "@@ -352,4 +353,9 @@ public abstract class ActionExecutor {",
                "             ByteArrayOutputStream baos = new ByteArrayOutputStream();",
                "-            err.printStackTrace(new PrintStream(baos));",
                "-            XLog.getLog(getClass()).warn(baos.toString());",
                "+",
                "+            try {",
                "+                err.printStackTrace(new PrintStream(baos, false, Charsets.UTF_8.name()));",
                "+                XLog.getLog(getClass()).warn(baos.toString(Charsets.UTF_8.name()));",
                "+            } catch (UnsupportedEncodingException e) {",
                "+                throw new RuntimeException(e);",
                "+            }",
                "         }",
                "diff --git a/core/src/main/java/org/apache/oozie/action/hadoop/LauncherHelper.java b/core/src/main/java/org/apache/oozie/action/hadoop/LauncherHelper.java",
                "index 21c9b7e4e..a71d93091 100644",
                "--- a/core/src/main/java/org/apache/oozie/action/hadoop/LauncherHelper.java",
                "+++ b/core/src/main/java/org/apache/oozie/action/hadoop/LauncherHelper.java",
                "@@ -24,2 +24,3 @@ import java.io.InputStream;",
                " import java.io.InputStreamReader;",
                "+import java.io.UnsupportedEncodingException;",
                " import java.math.BigInteger;",
                "@@ -35,3 +36,5 @@ import java.util.Properties;",
                "+import com.google.common.base.Charsets;",
                " import org.apache.hadoop.conf.Configuration;",
                "+import org.apache.hadoop.fs.FileStatus;",
                " import org.apache.hadoop.fs.FileSystem;",
                "@@ -66,3 +69,3 @@ public class LauncherHelper {",
                "             InputStream is = fs.open(recoveryFile);",
                "-            BufferedReader reader = new BufferedReader(new InputStreamReader(is));",
                "+            BufferedReader reader = new BufferedReader(new InputStreamReader(is, Charsets.UTF_8));",
                "             jobId = reader.readLine();",
                "@@ -71,3 +74,2 @@ public class LauncherHelper {",
                "         return jobId;",
                "-",
                "     }",
                "@@ -132,3 +134,3 @@ public class LauncherHelper {",
                "         if (Services.get().getConf().getBoolean(\"oozie.hadoop-2.0.2-alpha.workaround.for.distributed.cache\", false)) {",
                "-          List<String> purgedEntries = new ArrayList<String>();",
                "+          List<String> purgedEntries = new ArrayList<>();",
                "           Collection<String> entries = actionConf.getStringCollection(\"mapreduce.job.cache.files\");",
                "@@ -157,5 +159,4 @@ public class LauncherHelper {",
                "         MessageDigest digest = MessageDigest.getInstance(\"MD5\");",
                "-        digest.update(launcherTag.getBytes(), 0, launcherTag.length());",
                "-        String md5 = \"oozie-\" + new BigInteger(1, digest.digest()).toString(16);",
                "-        return md5;",
                "+        digest.update(launcherTag.getBytes(Charsets.UTF_8), 0, launcherTag.length());",
                "+        return \"oozie-\" + new BigInteger(1, digest.digest()).toString(16);",
                "     }",
                "@@ -248,3 +249,3 @@ public class LauncherHelper {",
                "             public Map<String, String> run() throws IOException {",
                "-                Map<String, String> ret = new HashMap<String, String>();",
                "+                Map<String, String> ret = new HashMap<>();",
                "                 Path seqFilePath = getActionDataSequenceFilePath(actionDir);",
                "@@ -261,16 +262,15 @@ public class LauncherHelper {",
                "                     InputStream is;",
                "-                    BufferedReader reader = null;",
                "+                    BufferedReader reader;",
                "                     Properties props;",
                "                     if (files != null && files.length > 0) {",
                "-                        for (int x = 0; x < files.length; x++) {",
                "-                            Path file = files[x].getPath();",
                "-                            if (file.equals(new Path(actionDir, \"externalChildIds.properties\"))) {",
                "-                                is = fs.open(file);",
                "-                                reader = new BufferedReader(new InputStreamReader(is));",
                "+                        for (FileStatus fileStatus : files) {",
                "+                            Path path = fileStatus.getPath();",
                "+                            if (path.equals(new Path(actionDir, \"externalChildIds.properties\"))) {",
                "+                                is = fs.open(path);",
                "+                                reader = new BufferedReader(new InputStreamReader(is, Charsets.UTF_8));",
                "                                 ret.put(LauncherAMUtils.ACTION_DATA_EXTERNAL_CHILD_IDS,",
                "                                         IOUtils.getReaderAsString(reader, -1));",
                "-                            }",
                "-                            else if (file.equals(new Path(actionDir, \"newId.properties\"))) {",
                "-                                is = fs.open(file);",
                "-                                reader = new BufferedReader(new InputStreamReader(is));",
                "+                            } else if (path.equals(new Path(actionDir, \"newId.properties\"))) {",
                "+                                is = fs.open(path);",
                "+                                reader = new BufferedReader(new InputStreamReader(is, Charsets.UTF_8));",
                "                                 props = PropertiesUtils.readProperties(reader, -1);",
                "@@ -278,7 +278,7 @@ public class LauncherHelper {",
                "                             }",
                "-                            else if (file.equals(new Path(actionDir, LauncherAMUtils.ACTION_DATA_OUTPUT_PROPS))) {",
                "+                            else if (path.equals(new Path(actionDir, LauncherAMUtils.ACTION_DATA_OUTPUT_PROPS))) {",
                "                                 int maxOutputData = conf.getInt(LauncherAMUtils.CONF_OOZIE_ACTION_MAX_OUTPUT_DATA,",
                "                                         2 * 1024);",
                "-                                is = fs.open(file);",
                "-                                reader = new BufferedReader(new InputStreamReader(is));",
                "+                                is = fs.open(path);",
                "+                                reader = new BufferedReader(new InputStreamReader(is, Charsets.UTF_8));",
                "                                 ret.put(LauncherAMUtils.ACTION_DATA_OUTPUT_PROPS, PropertiesUtils",
                "@@ -286,7 +286,7 @@ public class LauncherHelper {",
                "                             }",
                "-                            else if (file.equals(new Path(actionDir, LauncherAMUtils.ACTION_DATA_STATS))) {",
                "+                            else if (path.equals(new Path(actionDir, LauncherAMUtils.ACTION_DATA_STATS))) {",
                "                                 int statsMaxOutputData = conf.getInt(LauncherAMUtils.CONF_OOZIE_EXTERNAL_STATS_MAX_SIZE,",
                "                                         Integer.MAX_VALUE);",
                "-                                is = fs.open(file);",
                "-                                reader = new BufferedReader(new InputStreamReader(is));",
                "+                                is = fs.open(path);",
                "+                                reader = new BufferedReader(new InputStreamReader(is, Charsets.UTF_8));",
                "                                 ret.put(LauncherAMUtils.ACTION_DATA_STATS, PropertiesUtils",
                "@@ -294,5 +294,5 @@ public class LauncherHelper {",
                "                             }",
                "-                            else if (file.equals(new Path(actionDir, LauncherAMUtils.ACTION_DATA_ERROR_PROPS))) {",
                "-                                is = fs.open(file);",
                "-                                reader = new BufferedReader(new InputStreamReader(is));",
                "+                            else if (path.equals(new Path(actionDir, LauncherAMUtils.ACTION_DATA_ERROR_PROPS))) {",
                "+                                is = fs.open(path);",
                "+                                reader = new BufferedReader(new InputStreamReader(is, Charsets.UTF_8));",
                "                                 ret.put(LauncherAMUtils.ACTION_DATA_ERROR_PROPS, IOUtils.getReaderAsString(reader, -1));",
                "diff --git a/core/src/main/java/org/apache/oozie/action/hadoop/MapReduceActionExecutor.java b/core/src/main/java/org/apache/oozie/action/hadoop/MapReduceActionExecutor.java",
                "index d0b807423..83a23f522 100644",
                "--- a/core/src/main/java/org/apache/oozie/action/hadoop/MapReduceActionExecutor.java",
                "+++ b/core/src/main/java/org/apache/oozie/action/hadoop/MapReduceActionExecutor.java",
                "@@ -23,3 +23,2 @@ import java.io.StringReader;",
                " import java.util.ArrayList;",
                "-import java.util.Collections;",
                " import java.util.List;",
                "@@ -27,2 +26,3 @@ import java.util.Map;",
                "+import com.google.common.base.Charsets;",
                " import org.apache.hadoop.conf.Configuration;",
                "@@ -61,3 +61,3 @@ public class MapReduceActionExecutor extends JavaActionExecutor {",
                "     public List<Class<?>> getLauncherClasses() {",
                "-        List<Class<?>> classes = new ArrayList<Class<?>>();",
                "+        List<Class<?>> classes = new ArrayList<>();",
                "         try {",
                "@@ -120,4 +120,3 @@ public class MapReduceActionExecutor extends JavaActionExecutor {",
                "     protected Configuration createBaseHadoopConf(Context context, Element actionXml, boolean loadResources) {",
                "-        Configuration conf = super.createBaseHadoopConf(context, actionXml, loadResources);",
                "-        return conf;",
                "+        return super.createBaseHadoopConf(context, actionXml, loadResources);",
                "     }",
                "@@ -244,3 +243,3 @@ public class MapReduceActionExecutor extends JavaActionExecutor {",
                "                             OOZIE_ACTION_EXTERNAL_STATS_WRITE, \"false\"))",
                "-                            && (statsJsonString.getBytes().length <= getMaxExternalStatsSize())) {",
                "+                            && (statsJsonString.getBytes(Charsets.UTF_8).length <= getMaxExternalStatsSize())) {",
                "                         context.setExecutionStats(statsJsonString);",
                "@@ -341,4 +340,4 @@ public class MapReduceActionExecutor extends JavaActionExecutor {",
                "     public void check(Context context, WorkflowAction action) throws ActionExecutorException {",
                "-        Map<String, String> actionData = Collections.emptyMap();",
                "-        Configuration jobConf = null;",
                "+        Map<String, String> actionData;",
                "+        Configuration jobConf;",
                "diff --git a/core/src/main/java/org/apache/oozie/action/hadoop/SqoopActionExecutor.java b/core/src/main/java/org/apache/oozie/action/hadoop/SqoopActionExecutor.java",
                "index 69d5e7e9b..556f2cfd1 100644",
                "--- a/core/src/main/java/org/apache/oozie/action/hadoop/SqoopActionExecutor.java",
                "+++ b/core/src/main/java/org/apache/oozie/action/hadoop/SqoopActionExecutor.java",
                "@@ -26,2 +26,3 @@ import java.util.StringTokenizer;",
                "+import com.google.common.base.Charsets;",
                " import org.apache.hadoop.conf.Configuration;",
                "@@ -53,3 +54,3 @@ public class SqoopActionExecutor extends JavaActionExecutor {",
                "     public List<Class<?>> getLauncherClasses() {",
                "-        List<Class<?>> classes = new ArrayList<Class<?>>();",
                "+        List<Class<?>> classes = new ArrayList<>();",
                "         try {",
                "@@ -184,3 +185,3 @@ public class SqoopActionExecutor extends JavaActionExecutor {",
                "                             OOZIE_ACTION_EXTERNAL_STATS_WRITE, \"true\"))",
                "-                            && (statsJsonString.getBytes().length <= getMaxExternalStatsSize())) {",
                "+                            && (statsJsonString.getBytes(Charsets.UTF_8).length <= getMaxExternalStatsSize())) {",
                "                         context.setExecutionStats(statsJsonString);",
                "diff --git a/core/src/main/java/org/apache/oozie/action/ssh/SshActionExecutor.java b/core/src/main/java/org/apache/oozie/action/ssh/SshActionExecutor.java",
                "index 128feee72..1c76a8788 100644",
                "--- a/core/src/main/java/org/apache/oozie/action/ssh/SshActionExecutor.java",
                "+++ b/core/src/main/java/org/apache/oozie/action/ssh/SshActionExecutor.java",
                "@@ -22,5 +22,6 @@ import java.io.BufferedReader;",
                " import java.io.File;",
                "-import java.io.FileWriter;",
                "+import java.io.FileOutputStream;",
                " import java.io.IOException;",
                " import java.io.InputStreamReader;",
                "+import java.io.OutputStreamWriter;",
                " import java.util.Arrays;",
                "@@ -28,2 +29,5 @@ import java.util.List;",
                " import java.util.concurrent.Callable;",
                "+",
                "+import com.google.common.base.Charsets;",
                "+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
                " import org.apache.hadoop.util.StringUtils;",
                "@@ -120,2 +124,4 @@ public class SshActionExecutor extends ActionExecutor {",
                "      */",
                "+    @SuppressFBWarnings(value = {\"COMMAND_INJECTION\", \"PATH_TRAVERSAL_OUT\"},",
                "+            justification = \"Tracker URI is specified in the WF action, and action dir path is from context\")",
                "     @Override",
                "@@ -124,3 +130,3 @@ public class SshActionExecutor extends ActionExecutor {",
                "         Status status = getActionStatus(context, action);",
                "-        boolean captureOutput = false;",
                "+        boolean captureOutput;",
                "         try {",
                "@@ -230,3 +236,2 @@ public class SshActionExecutor extends ActionExecutor {",
                "             }",
                "-",
                "         });",
                "@@ -288,3 +293,2 @@ public class SshActionExecutor extends ActionExecutor {",
                "                     }",
                "-",
                "                 });",
                "@@ -301,3 +305,2 @@ public class SshActionExecutor extends ActionExecutor {",
                "     private String checkIfRunning(String host, final Context context, final WorkflowAction action) {",
                "-        String pid = null;",
                "         String outFile = getRemoteFileName(context, action, \"pid\", false, false);",
                "@@ -308,3 +311,3 @@ public class SshActionExecutor extends ActionExecutor {",
                "             drainBuffers(process, buffer, null, maxLen);",
                "-            pid = getFirstLine(buffer);",
                "+            String pid = getFirstLine(buffer);",
                "@@ -360,5 +363,4 @@ public class SshActionExecutor extends ActionExecutor {",
                "-        String error = null;",
                "         if (exitValue != 0) {",
                "-            error = getTruncatedString(errorBuffer);",
                "+            String error = getTruncatedString(errorBuffer);",
                "             throw new IOException(XLog.format(\"Not able to perform operation [{0}]\", command) + \" | \" + \"ErrorStream: \"",
                "@@ -446,3 +448,2 @@ public class SshActionExecutor extends ActionExecutor {",
                "         final Process p = runtime.exec(finalCommand);",
                "-        final String pid;",
                "@@ -452,7 +453,6 @@ public class SshActionExecutor extends ActionExecutor {",
                "-        pid = getFirstLine(inputBuffer);",
                "+        final String pid = getFirstLine(inputBuffer);",
                "-        String error = null;",
                "         if (exitValue != 0) {",
                "-            error = getTruncatedString(errorBuffer);",
                "+            String error = getTruncatedString(errorBuffer);",
                "             throw new IOException(XLog.format(\"Not able to execute ssh-base.sh on {0}\", host) + \" | \" + \"ErrorStream: \"",
                "@@ -524,2 +524,3 @@ public class SshActionExecutor extends ActionExecutor {",
                "      */",
                "+    @SuppressFBWarnings(value =\"PATH_TRAVERSAL_OUT\", justification = \"Path is created runtime\")",
                "     private void initSshScripts() {",
                "@@ -532,6 +533,6 @@ public class SshActionExecutor extends ActionExecutor {",
                "         try {",
                "-            IOUtils.copyCharStream(IOUtils.getResourceAsReader(\"ssh-base.sh\", -1), new FileWriter(dirLocation",
                "-                    + \"/ssh-base.sh\"));",
                "-            IOUtils.copyCharStream(IOUtils.getResourceAsReader(\"ssh-wrapper.sh\", -1), new FileWriter(dirLocation",
                "-                    + \"/ssh-wrapper.sh\"));",
                "+            IOUtils.copyCharStream(IOUtils.getResourceAsReader(\"ssh-base.sh\", -1), new OutputStreamWriter(",
                "+                    new FileOutputStream(dirLocation + \"/ssh-base.sh\"), Charsets.UTF_8));",
                "+            IOUtils.copyCharStream(IOUtils.getResourceAsReader(\"ssh-wrapper.sh\", -1), new OutputStreamWriter(",
                "+                    new FileOutputStream(dirLocation + \"/ssh-wrapper.sh\"), Charsets.UTF_8));",
                "         }",
                "@@ -721,3 +722,2 @@ public class SshActionExecutor extends ActionExecutor {",
                "     private String getTruncatedString(StringBuffer strBuffer) {",
                "-",
                "         if (strBuffer.length() <= maxLen) {",
                "@@ -745,4 +745,2 @@ public class SshActionExecutor extends ActionExecutor {",
                "         int exitValue = -1;",
                "-        BufferedReader ir = new BufferedReader(new InputStreamReader(p.getInputStream()));",
                "-        BufferedReader er = new BufferedReader(new InputStreamReader(p.getErrorStream()));",
                "@@ -753,3 +751,4 @@ public class SshActionExecutor extends ActionExecutor {",
                "-        try {",
                "+        try (BufferedReader ir = new BufferedReader(new InputStreamReader(p.getInputStream(), Charsets.UTF_8));",
                "+             BufferedReader er = new BufferedReader(new InputStreamReader(p.getErrorStream(), Charsets.UTF_8))) {",
                "             while (!processEnded) {",
                "@@ -768,7 +767,2 @@ public class SshActionExecutor extends ActionExecutor {",
                "         }",
                "-        finally {",
                "-            ir.close();",
                "-            er.close();",
                "-        }",
                "-",
                "         return exitValue;",
                "@@ -812,4 +806,3 @@ public class SshActionExecutor extends ActionExecutor {",
                "     private String getFirstLine(StringBuffer buffer) {",
                "-        int newLineIndex = 0;",
                "-        newLineIndex = buffer.indexOf(\"\\n\");",
                "+        int newLineIndex = buffer.indexOf(\"\\n\");",
                "         if (newLineIndex == -1) {",
                "diff --git a/core/src/main/java/org/apache/oozie/command/bundle/BundleSubmitXCommand.java b/core/src/main/java/org/apache/oozie/command/bundle/BundleSubmitXCommand.java",
                "index 80e7d5d4b..f94e87157 100644",
                "--- a/core/src/main/java/org/apache/oozie/command/bundle/BundleSubmitXCommand.java",
                "+++ b/core/src/main/java/org/apache/oozie/command/bundle/BundleSubmitXCommand.java",
                "@@ -36,2 +36,3 @@ import javax.xml.validation.Validator;",
                "+import com.google.common.base.Charsets;",
                " import org.apache.hadoop.conf.Configuration;",
                "@@ -82,4 +83,4 @@ public class BundleSubmitXCommand extends SubmitTransitionXCommand {",
                "     private String jobId;",
                "-    private static final Set<String> DISALLOWED_USER_PROPERTIES = new HashSet<String>();",
                "-    private static final Set<String> DISALLOWED_DEFAULT_PROPERTIES = new HashSet<String>();",
                "+    private static final Set<String> DISALLOWED_USER_PROPERTIES = new HashSet<>();",
                "+    private static final Set<String> DISALLOWED_DEFAULT_PROPERTIES = new HashSet<>();",
                "@@ -161,4 +162,4 @@ public class BundleSubmitXCommand extends SubmitTransitionXCommand {",
                "                 }",
                "-                String output = bundleBean.getJobXml() + System.getProperty(\"line.separator\");",
                "-                return output;",
                "+",
                "+                return bundleBean.getJobXml() + System.getProperty(\"line.separator\");",
                "             }",
                "@@ -299,3 +300,3 @@ public class BundleSubmitXCommand extends SubmitTransitionXCommand {",
                "             FileSystem fs = has.createFileSystem(user, uri, fsConf);",
                "-            Path appDefPath = null;",
                "+            Path appDefPath;",
                "@@ -309,3 +310,3 @@ public class BundleSubmitXCommand extends SubmitTransitionXCommand {",
                "-            Reader reader = new InputStreamReader(fs.open(appDefPath));",
                "+            Reader reader = new InputStreamReader(fs.open(appDefPath), Charsets.UTF_8);",
                "             StringWriter writer = new StringWriter();",
                "@@ -355,3 +356,3 @@ public class BundleSubmitXCommand extends SubmitTransitionXCommand {",
                "      *",
                "-     * @param Bundle job bean",
                "+     * @param bundleJob job bean",
                "      * @return job id",
                "@@ -458,3 +459,3 @@ public class BundleSubmitXCommand extends SubmitTransitionXCommand {",
                "      *",
                "-     * @param resolved job xml",
                "+     * @param resolvedJobXml job xml",
                "      * @throws CommandException thrown if failed to verify the uniqueness of coordinator names",
                "@@ -463,3 +464,3 @@ public class BundleSubmitXCommand extends SubmitTransitionXCommand {",
                "     private Void verifyCoordNameUnique(String resolvedJobXml) throws CommandException {",
                "-        Set<String> set = new HashSet<String>();",
                "+        Set<String> set = new HashSet<>();",
                "         try {",
                "@@ -470,3 +471,3 @@ public class BundleSubmitXCommand extends SubmitTransitionXCommand {",
                "                 if (name != null) {",
                "-                    String coordName = name.getValue();",
                "+                    String coordName;",
                "                     try {",
                "diff --git a/core/src/main/java/org/apache/oozie/command/coord/CoordSubmitXCommand.java b/core/src/main/java/org/apache/oozie/command/coord/CoordSubmitXCommand.java",
                "index 8bfa634f8..2e25e0392 100644",
                "--- a/core/src/main/java/org/apache/oozie/command/coord/CoordSubmitXCommand.java",
                "+++ b/core/src/main/java/org/apache/oozie/command/coord/CoordSubmitXCommand.java",
                "@@ -41,2 +41,3 @@ import javax.xml.validation.Validator;",
                "+import com.google.common.base.Charsets;",
                " import org.apache.hadoop.conf.Configuration;",
                "@@ -115,4 +116,4 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "-    private static final Set<String> DISALLOWED_USER_PROPERTIES = new HashSet<String>();",
                "-    private static final Set<String> DISALLOWED_DEFAULT_PROPERTIES = new HashSet<String>();",
                "+    private static final Set<String> DISALLOWED_USER_PROPERTIES = new HashSet<>();",
                "+    private static final Set<String> DISALLOWED_DEFAULT_PROPERTIES = new HashSet<>();",
                "@@ -208,3 +209,3 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "     protected String submitJob() throws CommandException {",
                "-        String jobId = null;",
                "+        String jobId;",
                "         InstrumentUtils.incrJobCounter(getName(), 1, getInstrumentation());",
                "@@ -317,5 +318,4 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "                 endTime).materializeActions(true);",
                "-        String output = coordJob.getJobXml() + System.getProperty(\"line.separator\")",
                "-        + \"***actions for instance***\" + action;",
                "-        return output;",
                "+",
                "+        return coordJob.getJobXml() + System.getProperty(\"line.separator\") + \"***actions for instance***\" + action;",
                "     }",
                "@@ -490,2 +490,3 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "     }",
                "+",
                "     /**",
                "@@ -608,3 +609,3 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "     public Element basicResolveAndIncludeDS(String appXml, Configuration conf, CoordinatorJobBean coordJob)",
                "-    throws CoordinatorJobException, Exception {",
                "+            throws Exception {",
                "         Element basicResolvedApp = resolveInitial(conf, appXml, coordJob);",
                "@@ -668,3 +669,2 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "         evalInitialInstance = CoordELEvaluator.createELEvaluatorForGroup(conf, \"coord-job-submit-initial-instance\");",
                "-",
                "     }",
                "@@ -683,3 +683,3 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "     protected Element resolveInitial(Configuration conf, String appXml, CoordinatorJobBean coordJob)",
                "-    throws CoordinatorJobException, Exception {",
                "+            throws Exception {",
                "         Element eAppXml = XmlUtils.parseXml(appXml);",
                "@@ -688,3 +688,2 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "         String val = resolveAttribute(\"frequency\", eAppXml, evalFreq);",
                "-        int ival = 0;",
                "@@ -757,3 +756,3 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "-        ival = ParamChecker.checkInteger(val, \"timeout\");",
                "+        int ival = ParamChecker.checkInteger(val, \"timeout\");",
                "         if (ival < 0 || ival > ConfigurationService.getInt(CONF_DEFAULT_MAX_TIMEOUT)) {",
                "@@ -772,4 +771,3 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "         if (val == null || val.isEmpty()) {",
                "-            int defaultThrottle = ConfigurationService.getInt(CONF_DEFAULT_THROTTLE);",
                "-            ival = defaultThrottle;",
                "+            ival = ConfigurationService.getInt(CONF_DEFAULT_THROTTLE);",
                "         }",
                "@@ -889,3 +887,3 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "         if (inputList != null) {",
                "-            TreeSet<String> eventNameSet = new TreeSet<String>();",
                "+            TreeSet<String> eventNameSet = new TreeSet<>();",
                "             for (Element dataIn : (List<Element>) inputList.getChildren(\"data-in\", eJob.getNamespace())) {",
                "@@ -909,3 +907,3 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "         if (outputList != null) {",
                "-            TreeSet<String> eventNameSet = new TreeSet<String>();",
                "+            TreeSet<String> eventNameSet = new TreeSet<>();",
                "             for (Element dataOut : (List<Element>) outputList.getChildren(\"data-out\", eJob.getNamespace())) {",
                "@@ -950,3 +948,3 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "      *",
                "-     * @param eJob : Job element",
                "+     * @param eAppXml : Job element",
                "      * @throws CoordinatorJobException thrown if failed to resolve input and output events",
                "@@ -968,6 +966,4 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "                 resolveAttribute(\"dataset\", dataOut, evalInst);",
                "-",
                "             }",
                "         }",
                "-",
                "     }",
                "@@ -996,3 +992,2 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "         if (datasetList != null) {",
                "-",
                "             List<Element> dsElems = datasetList.getChildren(\"dataset\", eAppXml.getNamespace());",
                "@@ -1020,5 +1015,5 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "             addAnAttribute(\"freq_timeunit\", dsElem, evalFreq.getVariable(\"timeunit\") == null ? TimeUnit.MINUTE",
                "-                    .toString() : ((TimeUnit) evalFreq.getVariable(\"timeunit\")).toString());",
                "+                    .toString() : evalFreq.getVariable(\"timeunit\").toString());",
                "             addAnAttribute(\"end_of_duration\", dsElem, evalFreq.getVariable(\"endOfDuration\") == null ? TimeUnit.NONE",
                "-                    .toString() : ((TimeUnit) evalFreq.getVariable(\"endOfDuration\")).toString());",
                "+                    .toString() : evalFreq.getVariable(\"endOfDuration\").toString());",
                "             val = resolveAttribute(\"initial-instance\", dsElem, evalInitialInstance);",
                "@@ -1100,3 +1095,3 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "         Element allDataSets = new Element(\"all_datasets\", resolvedXml.getNamespace());",
                "-        List<String> dsList = new ArrayList<String>();",
                "+        List<String> dsList = new ArrayList<>();",
                "         if (datasets != null) {",
                "@@ -1134,3 +1129,3 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "     throws CoordinatorJobException {",
                "-        Element tmpDataSets = null;",
                "+        Element tmpDataSets;",
                "         try {",
                "@@ -1200,3 +1195,3 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "             FileSystem fs = has.createFileSystem(user, uri, fsConf);",
                "-            Path appDefPath = null;",
                "+            Path appDefPath;",
                "@@ -1214,3 +1209,3 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "-            Reader reader = new InputStreamReader(fs.open(appDefPath));",
                "+            Reader reader = new InputStreamReader(fs.open(appDefPath), Charsets.UTF_8);",
                "             StringWriter writer = new StringWriter();",
                "@@ -1321,3 +1316,2 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "         setJob(coordJob);",
                "-",
                "     }",
                "@@ -1326,3 +1320,2 @@ public class CoordSubmitXCommand extends SubmitTransitionXCommand {",
                "     protected void verifyPrecondition() throws CommandException {",
                "-",
                "     }",
                "diff --git a/core/src/main/java/org/apache/oozie/command/coord/CoordUpdateXCommand.java b/core/src/main/java/org/apache/oozie/command/coord/CoordUpdateXCommand.java",
                "index 502a800fb..9efff120b 100644",
                "--- a/core/src/main/java/org/apache/oozie/command/coord/CoordUpdateXCommand.java",
                "+++ b/core/src/main/java/org/apache/oozie/command/coord/CoordUpdateXCommand.java",
                "@@ -18,3 +18,2 @@",
                "-",
                " package org.apache.oozie.command.coord;",
                "@@ -26,2 +25,3 @@ import java.util.Date;",
                "+import com.google.common.base.Charsets;",
                " import org.apache.commons.lang.StringUtils;",
                "@@ -67,3 +67,3 @@ public class CoordUpdateXCommand extends CoordSubmitXCommand {",
                "         this.jobId = jobId;",
                "-        isConfChange = conf.size() == 0 ? false : true;",
                "+        isConfChange = conf.size() != 0;",
                "     }",
                "@@ -74,3 +74,3 @@ public class CoordUpdateXCommand extends CoordSubmitXCommand {",
                "         this.showDiff = showDiff;",
                "-        isConfChange = conf.size() == 0 ? false : true;",
                "+        isConfChange = conf.size() != 0;",
                "     }",
                "@@ -92,3 +92,2 @@ public class CoordUpdateXCommand extends CoordSubmitXCommand {",
                "-",
                "         if (!dryrun) {",
                "@@ -148,3 +147,2 @@ public class CoordUpdateXCommand extends CoordSubmitXCommand {",
                "         LogUtils.setLogInfo(coordJob);",
                "-",
                "     }",
                "@@ -166,3 +164,2 @@ public class CoordUpdateXCommand extends CoordSubmitXCommand {",
                "      */",
                "-",
                "     private void computeDiff(Element eJob) {",
                "@@ -197,4 +194,4 @@ public class CoordUpdateXCommand extends CoordSubmitXCommand {",
                "         ByteArrayOutputStream out = new ByteArrayOutputStream();",
                "-        RawText rt1 = new RawText(string1.getBytes());",
                "-        RawText rt2 = new RawText(string2.getBytes());",
                "+        RawText rt1 = new RawText(string1.getBytes(Charsets.UTF_8));",
                "+        RawText rt2 = new RawText(string2.getBytes(Charsets.UTF_8));",
                "         EditList diffList = new EditList();",
                "@@ -202,3 +199,3 @@ public class CoordUpdateXCommand extends CoordSubmitXCommand {",
                "         new DiffFormatter(out).format(diffList, rt1, rt2);",
                "-        return out.toString();",
                "+        return out.toString(Charsets.UTF_8.name());",
                "     }",
                "diff --git a/core/src/main/java/org/apache/oozie/service/AuthorizationService.java b/core/src/main/java/org/apache/oozie/service/AuthorizationService.java",
                "index 251838ce7..6f72c4193 100644",
                "--- a/core/src/main/java/org/apache/oozie/service/AuthorizationService.java",
                "+++ b/core/src/main/java/org/apache/oozie/service/AuthorizationService.java",
                "@@ -23,3 +23,2 @@ import java.io.File;",
                " import java.io.FileInputStream;",
                "-import java.io.FileNotFoundException;",
                " import java.io.IOException;",
                "@@ -27,3 +26,2 @@ import java.io.InputStreamReader;",
                " import java.net.URI;",
                "-import java.nio.charset.StandardCharsets;",
                " import java.util.HashSet;",
                "@@ -31,5 +29,6 @@ import java.util.List;",
                " import java.util.Map;",
                "-import java.util.ArrayList;",
                " import java.util.Set;",
                " import java.util.LinkedHashSet;",
                "+",
                "+import com.google.common.base.Charsets;",
                " import com.google.common.collect.Sets;",
                "@@ -142,3 +141,3 @@ public class AuthorizationService implements Service {",
                "                 log.info(\"Admin users will be checked against the defined admin groups\");",
                "-                adminGroups = new HashSet<String>();",
                "+                adminGroups = new HashSet<>();",
                "                 for (String s : str) {",
                "@@ -149,3 +148,3 @@ public class AuthorizationService implements Service {",
                "                 log.info(\"Admin users will be checked against the 'adminusers.txt' file contents\");",
                "-                adminUsers = new HashSet<String>();",
                "+                adminUsers = new HashSet<>();",
                "                 loadAdminUsersFromFile();",
                "@@ -196,3 +195,3 @@ public class AuthorizationService implements Service {",
                "                     BufferedReader br = new BufferedReader(",
                "-                            new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8));",
                "+                            new InputStreamReader(new FileInputStream(file), Charsets.UTF_8));",
                "                     try {",
                "@@ -488,3 +487,3 @@ public class AuthorizationService implements Service {",
                "                 if (jobId.endsWith(\"-W\")) {",
                "-                    WorkflowJobBean jobBean = null;",
                "+                    WorkflowJobBean jobBean;",
                "                     JPAService jpaService = Services.get().get(JPAService.class);",
                "@@ -532,3 +531,3 @@ public class AuthorizationService implements Service {",
                "                 else {",
                "-                    CoordinatorJobBean jobBean = null;",
                "+                    CoordinatorJobBean jobBean;",
                "                     JPAService jpaService = Services.get().get(JPAService.class);",
                "@@ -575,72 +574,70 @@ public class AuthorizationService implements Service {",
                "                 // handle workflow jobs",
                "-                if (jobType.equals(\"wf\")) {",
                "-                    List<WorkflowJobBean> jobBeans = new ArrayList<WorkflowJobBean>();",
                "-                    JPAService jpaService = Services.get().get(JPAService.class);",
                "-                    if (jpaService != null) {",
                "-                        try {",
                "-                            jobBeans = jpaService.execute(new WorkflowsJobGetJPAExecutor(",
                "-                                    filter, start, len)).getWorkflows();",
                "-                        }",
                "-                        catch (JPAExecutorException je) {",
                "-                            throw new AuthorizationException(je);",
                "+                switch (jobType) {",
                "+                    case \"wf\": {",
                "+                        List<WorkflowJobBean> jobBeans;",
                "+                        JPAService jpaService = Services.get().get(JPAService.class);",
                "+                        if (jpaService != null) {",
                "+                            try {",
                "+                                jobBeans = jpaService.execute(new WorkflowsJobGetJPAExecutor(",
                "+                                        filter, start, len)).getWorkflows();",
                "+                            } catch (JPAExecutorException je) {",
                "+                                throw new AuthorizationException(je);",
                "+                            }",
                "+                        } else {",
                "+                            throw new AuthorizationException(ErrorCode.E0610);",
                "                         }",
                "-                    }",
                "-                    else {",
                "-                        throw new AuthorizationException(ErrorCode.E0610);",
                "-                    }",
                "-                    for (WorkflowJobBean jobBean : jobBeans) {",
                "-                        if (jobBean != null && !jobBean.getUser().equals(user)) {",
                "-                            if (!isUserInAcl(user, jobBean.getGroup())) {",
                "+                        for (WorkflowJobBean jobBean : jobBeans) {",
                "+                            if (jobBean != null && !jobBean.getUser().equals(user)) {",
                "+                                if (!isUserInAcl(user, jobBean.getGroup())) {",
                "                                     incrCounter(INSTR_FAILED_AUTH_COUNTER, 1);",
                "-                                throw new AuthorizationException(ErrorCode.E0508, user, jobBean.getId());",
                "+                                    throw new AuthorizationException(ErrorCode.E0508, user, jobBean.getId());",
                "+                                }",
                "                             }",
                "                         }",
                "+                        break;",
                "                     }",
                "-                }",
                "-                // handle bundle jobs",
                "-                else if (jobType.equals(\"bundle\")) {",
                "-                    List<BundleJobBean> jobBeans = new ArrayList<BundleJobBean>();",
                "-                    JPAService jpaService = Services.get().get(JPAService.class);",
                "-                    if (jpaService != null) {",
                "-                        try {",
                "-                            jobBeans = jpaService.execute(new BundleJobInfoGetJPAExecutor(",
                "-                                    filter, start, len)).getBundleJobs();",
                "-                        }",
                "-                        catch (JPAExecutorException je) {",
                "-                            throw new AuthorizationException(je);",
                "+                    // handle bundle jobs",
                "+                    case \"bundle\": {",
                "+                        List<BundleJobBean> jobBeans;",
                "+                        JPAService jpaService = Services.get().get(JPAService.class);",
                "+                        if (jpaService != null) {",
                "+                            try {",
                "+                                jobBeans = jpaService.execute(new BundleJobInfoGetJPAExecutor(",
                "+                                        filter, start, len)).getBundleJobs();",
                "+                            } catch (JPAExecutorException je) {",
                "+                                throw new AuthorizationException(je);",
                "+                            }",
                "+                        } else {",
                "+                            throw new AuthorizationException(ErrorCode.E0610);",
                "                         }",
                "-                    }",
                "-                    else {",
                "-                        throw new AuthorizationException(ErrorCode.E0610);",
                "-                    }",
                "-                    for (BundleJobBean jobBean : jobBeans){",
                "-                        if (jobBean != null && !jobBean.getUser().equals(user)) {",
                "-                            if (!isUserInAcl(user, jobBean.getGroup())) {",
                "-                                incrCounter(INSTR_FAILED_AUTH_COUNTER, 1);",
                "-                                throw new AuthorizationException(ErrorCode.E0509, user, jobBean.getId());",
                "+                        for (BundleJobBean jobBean : jobBeans) {",
                "+                            if (jobBean != null && !jobBean.getUser().equals(user)) {",
                "+                                if (!isUserInAcl(user, jobBean.getGroup())) {",
                "+                                    incrCounter(INSTR_FAILED_AUTH_COUNTER, 1);",
                "+                                    throw new AuthorizationException(ErrorCode.E0509, user, jobBean.getId());",
                "+                                }",
                "                             }",
                "                         }",
                "+                        break;",
                "                     }",
                "-                }",
                "-                // handle coordinator jobs",
                "-                else {",
                "-                    List<CoordinatorJobBean> jobBeans = new ArrayList<CoordinatorJobBean>();",
                "-                    JPAService jpaService = Services.get().get(JPAService.class);",
                "-                    if (jpaService != null) {",
                "-                        try {",
                "-                            jobBeans = jpaService.execute(new CoordJobInfoGetJPAExecutor(",
                "-                                    filter, start, len)).getCoordJobs();",
                "-                        }",
                "-                        catch (JPAExecutorException je) {",
                "-                            throw new AuthorizationException(je);",
                "+                    // handle coordinator jobs",
                "+                    default: {",
                "+                        List<CoordinatorJobBean> jobBeans;",
                "+                        JPAService jpaService = Services.get().get(JPAService.class);",
                "+                        if (jpaService != null) {",
                "+                            try {",
                "+                                jobBeans = jpaService.execute(new CoordJobInfoGetJPAExecutor(",
                "+                                        filter, start, len)).getCoordJobs();",
                "+                            } catch (JPAExecutorException je) {",
                "+                                throw new AuthorizationException(je);",
                "+                            }",
                "+                        } else {",
                "+                            throw new AuthorizationException(ErrorCode.E0610);",
                "                         }",
                "-                    }",
                "-                    else {",
                "-                        throw new AuthorizationException(ErrorCode.E0610);",
                "-                    }",
                "-                    for (CoordinatorJobBean jobBean : jobBeans) {",
                "-                        if (jobBean != null && !jobBean.getUser().equals(user)) {",
                "-                            if (!isUserInAcl(user, jobBean.getGroup())) {",
                "-                                incrCounter(INSTR_FAILED_AUTH_COUNTER, 1);",
                "-                                throw new AuthorizationException(ErrorCode.E0509, user, jobBean.getId());",
                "+                        for (CoordinatorJobBean jobBean : jobBeans) {",
                "+                            if (jobBean != null && !jobBean.getUser().equals(user)) {",
                "+                                if (!isUserInAcl(user, jobBean.getGroup())) {",
                "+                                    incrCounter(INSTR_FAILED_AUTH_COUNTER, 1);",
                "+                                    throw new AuthorizationException(ErrorCode.E0509, user, jobBean.getId());",
                "+                                }",
                "                             }",
                "diff --git a/core/src/main/java/org/apache/oozie/service/WorkflowAppService.java b/core/src/main/java/org/apache/oozie/service/WorkflowAppService.java",
                "index c725f493e..17d1d2e1e 100644",
                "--- a/core/src/main/java/org/apache/oozie/service/WorkflowAppService.java",
                "+++ b/core/src/main/java/org/apache/oozie/service/WorkflowAppService.java",
                "@@ -20,2 +20,3 @@ package org.apache.oozie.service;",
                "+import com.google.common.base.Charsets;",
                " import org.apache.hadoop.conf.Configuration;",
                "@@ -106,3 +107,2 @@ public abstract class WorkflowAppService implements Service {",
                "      *",
                "-     *",
                "      * @param appPath application path.",
                "@@ -131,3 +131,3 @@ public abstract class WorkflowAppService implements Service {",
                "-            Reader reader = new InputStreamReader(fs.open(path));",
                "+            Reader reader = new InputStreamReader(fs.open(path), Charsets.UTF_8);",
                "             StringWriter writer = new StringWriter();",
                "@@ -153,2 +153,3 @@ public abstract class WorkflowAppService implements Service {",
                "     }",
                "+",
                "     /**",
                "@@ -171,3 +172,2 @@ public abstract class WorkflowAppService implements Service {",
                "-",
                "             String user = jobConf.get(OozieClient.USER_NAME);",
                "@@ -193,3 +193,3 @@ public abstract class WorkflowAppService implements Service {",
                "             else {",
                "-                filePaths = new LinkedHashSet<String>();",
                "+                filePaths = new LinkedHashSet<>();",
                "             }",
                "@@ -198,6 +198,6 @@ public abstract class WorkflowAppService implements Service {",
                "             if (libPaths != null && libPaths.length > 0) {",
                "-                for (int i = 0; i < libPaths.length; i++) {",
                "-                    if (libPaths[i].trim().length() > 0) {",
                "-                        Path libPath = new Path(libPaths[i].trim());",
                "-                        Collection<String> libFilePaths = getLibFiles(fs, libPath);",
                "+                for (String libPath : libPaths) {",
                "+                    if (libPath.trim().length() > 0) {",
                "+                        Path path = new Path(libPath.trim());",
                "+                        Collection<String> libFilePaths = getLibFiles(fs, path);",
                "                         filePaths.addAll(libFilePaths);",
                "@@ -220,3 +220,3 @@ public abstract class WorkflowAppService implements Service {",
                "                     Arrays.sort(filePathsNames);",
                "-                    List<String> nonDuplicateParentFilePaths = new ArrayList<String>();",
                "+                    List<String> nonDuplicateParentFilePaths = new ArrayList<>();",
                "                     for (String parentFilePath : parentFilePaths) {",
                "@@ -299,3 +299,3 @@ public abstract class WorkflowAppService implements Service {",
                "     private Collection<String> getLibFiles(FileSystem fs, Path libPath) throws IOException {",
                "-        Set<String> libPaths = new LinkedHashSet<String>();",
                "+        Set<String> libPaths = new LinkedHashSet<>();",
                "         if (fs.exists(libPath)) {",
                "diff --git a/core/src/main/java/org/apache/oozie/servlet/V1JobServlet.java b/core/src/main/java/org/apache/oozie/servlet/V1JobServlet.java",
                "index 361141b0d..9acd5719a 100644",
                "--- a/core/src/main/java/org/apache/oozie/servlet/V1JobServlet.java",
                "+++ b/core/src/main/java/org/apache/oozie/servlet/V1JobServlet.java",
                "@@ -28,2 +28,3 @@ import javax.servlet.http.HttpServletResponse;",
                "+import com.google.common.base.Charsets;",
                " import com.google.common.base.Strings;",
                "@@ -51,3 +52,2 @@ import org.json.simple.JSONObject;",
                "-",
                " @SuppressWarnings(\"serial\")",
                "@@ -60,3 +60,2 @@ public class V1JobServlet extends BaseJobServlet {",
                "-",
                "     public V1JobServlet() {",
                "@@ -93,3 +92,2 @@ public class V1JobServlet extends BaseJobServlet {",
                "         }",
                "-",
                "     }",
                "@@ -229,6 +227,6 @@ public class V1JobServlet extends BaseJobServlet {",
                "         while (is.readLine(b, 0, 100) != -1) {",
                "-            XLog.getLog(getClass()).warn(\"Printing :\" + new String(b));",
                "+            XLog.getLog(getClass()).warn(\"Printing :\" + new String(b, Charsets.UTF_8));",
                "         }",
                "-        JsonBean jobBean = null;",
                "+        JsonBean jobBean;",
                "         String jobId = getResourceName(request);",
                "@@ -593,6 +591,3 @@ public class V1JobServlet extends BaseJobServlet {",
                "         }",
                "-        catch (CoordinatorEngineException ex) {",
                "-            throw new XServletException(HttpServletResponse.SC_BAD_REQUEST, ex);",
                "-        }",
                "-        catch (CommandException ex) {",
                "+        catch (CoordinatorEngineException | CommandException ex) {",
                "             throw new XServletException(HttpServletResponse.SC_BAD_REQUEST, ex);",
                "@@ -692,3 +687,2 @@ public class V1JobServlet extends BaseJobServlet {",
                "             throws XServletException {",
                "-        JSONObject json = new JSONObject();",
                "         BundleEngine bundleEngine = Services.get().get(BundleEngineService.class).getBundleEngine(getUser(request));",
                "@@ -755,6 +749,3 @@ public class V1JobServlet extends BaseJobServlet {",
                "         }",
                "-        catch (BaseEngineException ex) {",
                "-            throw new XServletException(HttpServletResponse.SC_BAD_REQUEST, ex);",
                "-        }",
                "-        catch (CommandException ex) {",
                "+        catch (BaseEngineException | CommandException ex) {",
                "             throw new XServletException(HttpServletResponse.SC_BAD_REQUEST, ex);",
                "@@ -765,4 +756,2 @@ public class V1JobServlet extends BaseJobServlet {",
                "-",
                "-",
                "     /**",
                "@@ -791,3 +780,3 @@ public class V1JobServlet extends BaseJobServlet {",
                "     protected JsonBean getWorkflowJobBean(HttpServletRequest request, HttpServletResponse response) throws XServletException {",
                "-        JsonBean jobBean = null;",
                "+        JsonBean jobBean;",
                "         String jobId = getResourceName(request);",
                "@@ -831,3 +820,3 @@ public class V1JobServlet extends BaseJobServlet {",
                "     private String getConsoleBase(String url) {",
                "-        String consoleBase = null;",
                "+        String consoleBase;",
                "         if (url.indexOf(\"application\") != -1) {",
                "@@ -851,3 +840,2 @@ public class V1JobServlet extends BaseJobServlet {",
                "             throws XServletException {",
                "-",
                "         JsonBean actionBean = getWorkflowActionBean(request, response);",
                "@@ -884,3 +872,3 @@ public class V1JobServlet extends BaseJobServlet {",
                "             throws XServletException, BaseEngineException {",
                "-        JsonBean jobBean = null;",
                "+        JsonBean jobBean;",
                "         CoordinatorEngine coordEngine = Services.get().get(CoordinatorEngineService.class).getCoordinatorEngine(",
                "@@ -933,3 +921,3 @@ public class V1JobServlet extends BaseJobServlet {",
                "             BaseEngineException {",
                "-        JsonBean jobBean = null;",
                "+        JsonBean jobBean;",
                "         BundleEngine bundleEngine = Services.get().get(BundleEngineService.class).getBundleEngine(getUser(request));",
                "@@ -938,3 +926,3 @@ public class V1JobServlet extends BaseJobServlet {",
                "         try {",
                "-            jobBean = (JsonBean) bundleEngine.getBundleJob(jobId);",
                "+            jobBean = bundleEngine.getBundleJob(jobId);",
                "@@ -958,3 +946,3 @@ public class V1JobServlet extends BaseJobServlet {",
                "             throws XServletException, BaseEngineException {",
                "-        JsonBean actionBean = null;",
                "+        JsonBean actionBean;",
                "         CoordinatorEngine coordEngine = Services.get().get(CoordinatorEngineService.class).getCoordinatorEngine(",
                "@@ -1100,6 +1088,3 @@ public class V1JobServlet extends BaseJobServlet {",
                "         }",
                "-        catch (BaseEngineException ex) {",
                "-            throw new XServletException(HttpServletResponse.SC_BAD_REQUEST, ex);",
                "-        }",
                "-        catch (CommandException ex) {",
                "+        catch (BaseEngineException | CommandException ex) {",
                "             throw new XServletException(HttpServletResponse.SC_BAD_REQUEST, ex);",
                "diff --git a/core/src/main/java/org/apache/oozie/servlet/V2ValidateServlet.java b/core/src/main/java/org/apache/oozie/servlet/V2ValidateServlet.java",
                "index 36a9de22f..8a0da9310 100644",
                "--- a/core/src/main/java/org/apache/oozie/servlet/V2ValidateServlet.java",
                "+++ b/core/src/main/java/org/apache/oozie/servlet/V2ValidateServlet.java",
                "@@ -20,2 +20,3 @@ package org.apache.oozie.servlet;",
                "+import com.google.common.base.Charsets;",
                " import org.apache.hadoop.conf.Configuration;",
                "@@ -57,3 +58,2 @@ public class V2ValidateServlet extends JsonRestServlet {",
                "-",
                "     public V2ValidateServlet() {",
                "@@ -84,4 +84,3 @@ public class V2ValidateServlet extends JsonRestServlet {",
                "                 Path path = new Path(uri.getPath());",
                "-                IOUtils.copyCharStream(new InputStreamReader(fs.open(path)), stringWriter);",
                "-",
                "+                IOUtils.copyCharStream(new InputStreamReader(fs.open(path), Charsets.UTF_8), stringWriter);",
                "             } catch (Exception e) {",
                "@@ -92,3 +91,3 @@ public class V2ValidateServlet extends JsonRestServlet {",
                "         else {",
                "-            IOUtils.copyCharStream(new InputStreamReader(request.getInputStream()), stringWriter);",
                "+            IOUtils.copyCharStream(new InputStreamReader(request.getInputStream(), Charsets.UTF_8), stringWriter);",
                "         }",
                "@@ -149,3 +148,2 @@ public class V2ValidateServlet extends JsonRestServlet {",
                "     }",
                "-",
                " }",
                "\\ No newline at end of file",
                "diff --git a/core/src/main/java/org/apache/oozie/util/AuthUrlClient.java b/core/src/main/java/org/apache/oozie/util/AuthUrlClient.java",
                "index 4fc8f5726..d7f19b2f1 100644",
                "--- a/core/src/main/java/org/apache/oozie/util/AuthUrlClient.java",
                "+++ b/core/src/main/java/org/apache/oozie/util/AuthUrlClient.java",
                "@@ -18,3 +18,2 @@",
                "-",
                " package org.apache.oozie.util;",
                "@@ -32,2 +31,3 @@ import java.util.Map;",
                "+import com.google.common.base.Charsets;",
                " import org.apache.hadoop.security.UserGroupInformation;",
                "@@ -66,9 +66,3 @@ public class AuthUrlClient {",
                "         }",
                "-        catch (AuthenticationException ex) {",
                "-            throw new IOException(\"Could not authenticate, \" + ex.getMessage(), ex);",
                "-        }",
                "-        catch (InstantiationException ex) {",
                "-            throw new IOException(\"Could not authenticate, \" + ex.getMessage(), ex);",
                "-        }",
                "-        catch (IllegalAccessException ex) {",
                "+        catch (AuthenticationException | InstantiationException | IllegalAccessException ex) {",
                "             throw new IOException(\"Could not authenticate, \" + ex.getMessage(), ex);",
                "@@ -96,10 +90,12 @@ public class AuthUrlClient {",
                "         authName = authName.trim();",
                "-        if (authName.equals(\"simple\")) {",
                "-            authClassName = PseudoAuthenticator.class.getName();",
                "-        }",
                "-        else if (authName.equals(\"kerberos\")) {",
                "-            authClassName = KerberosAuthenticator.class.getName();",
                "-        }",
                "-        else {",
                "-            authClassName = authName;",
                "+        switch (authName) {",
                "+            case \"simple\":",
                "+                authClassName = PseudoAuthenticator.class.getName();",
                "+                break;",
                "+            case \"kerberos\":",
                "+                authClassName = KerberosAuthenticator.class.getName();",
                "+                break;",
                "+            default:",
                "+                authClassName = authName;",
                "+                break;",
                "         }",
                "@@ -125,3 +121,3 @@ public class AuthUrlClient {",
                "         final URL url = new URL(server);",
                "-        BufferedReader reader = null;",
                "+        BufferedReader reader;",
                "         try {",
                "@@ -135,3 +131,3 @@ public class AuthUrlClient {",
                "                         InputStream is = conn.getInputStream();",
                "-                        reader = new BufferedReader(new InputStreamReader(is));",
                "+                        reader = new BufferedReader(new InputStreamReader(is, Charsets.UTF_8));",
                "                     }",
                "@@ -158,3 +154,3 @@ public class AuthUrlClient {",
                "                 stringBuilder.append(\"=\");",
                "-                stringBuilder.append(URLEncoder.encode(value,\"UTF-8\"));",
                "+                stringBuilder.append(URLEncoder.encode(value,Charsets.UTF_8.name()));",
                "             }",
                "@@ -163,3 +159,2 @@ public class AuthUrlClient {",
                "     }",
                "-",
                " }",
                "diff --git a/core/src/main/java/org/apache/oozie/util/IOUtils.java b/core/src/main/java/org/apache/oozie/util/IOUtils.java",
                "index 3674dc48b..94db257b1 100644",
                "--- a/core/src/main/java/org/apache/oozie/util/IOUtils.java",
                "+++ b/core/src/main/java/org/apache/oozie/util/IOUtils.java",
                "@@ -20,2 +20,4 @@ package org.apache.oozie.util;",
                "+import com.google.common.base.Charsets;",
                "+",
                " import java.io.IOException;",
                "@@ -118,3 +120,3 @@ public abstract class IOUtils {",
                "     public static Reader getResourceAsReader(String path, int maxLen) throws IOException {",
                "-        return new InputStreamReader(getResourceAsStream(path, maxLen));",
                "+        return new InputStreamReader(getResourceAsStream(path, maxLen), Charsets.UTF_8);",
                "     }",
                "@@ -135,3 +137,3 @@ public abstract class IOUtils {",
                "         }",
                "-        Reader reader = new InputStreamReader(is);",
                "+        Reader reader = new InputStreamReader(is, Charsets.UTF_8);",
                "         return getReaderAsString(reader, maxLen);",
                "diff --git a/core/src/main/java/org/apache/oozie/util/MultiFileReader.java b/core/src/main/java/org/apache/oozie/util/MultiFileReader.java",
                "index 1ab5a7af2..9078f3698 100644",
                "--- a/core/src/main/java/org/apache/oozie/util/MultiFileReader.java",
                "+++ b/core/src/main/java/org/apache/oozie/util/MultiFileReader.java",
                "@@ -20,2 +20,4 @@ package org.apache.oozie.util;",
                "+import com.google.common.base.Charsets;",
                "+",
                " import java.io.File;",
                "@@ -81,3 +83,3 @@ public class MultiFileReader extends Reader {",
                "                 GZIPInputStream gzipInputStream = new GZIPInputStream(new FileInputStream(files.get(index)));",
                "-                reader = new InputStreamReader(gzipInputStream);",
                "+                reader = new InputStreamReader(gzipInputStream, Charsets.UTF_8);",
                "             }",
                "@@ -85,3 +87,3 @@ public class MultiFileReader extends Reader {",
                "             else {",
                "-                reader = new FileReader(files.get(index));",
                "+                reader = new InputStreamReader(new FileInputStream(files.get(index)), Charsets.UTF_8);",
                "             }",
                "diff --git a/core/src/main/java/org/apache/oozie/util/XConfiguration.java b/core/src/main/java/org/apache/oozie/util/XConfiguration.java",
                "index e3591db32..d9e16e915 100644",
                "--- a/core/src/main/java/org/apache/oozie/util/XConfiguration.java",
                "+++ b/core/src/main/java/org/apache/oozie/util/XConfiguration.java",
                "@@ -20,2 +20,3 @@ package org.apache.oozie.util;",
                "+import com.google.common.base.Charsets;",
                " import org.apache.hadoop.conf.Configuration;",
                "@@ -285,6 +286,3 @@ public class XConfiguration extends Configuration {",
                "         }",
                "-        catch (SAXException e) {",
                "-            throw new IOException(e);",
                "-        }",
                "-        catch (ParserConfigurationException e) {",
                "+        catch (SAXException | ParserConfigurationException e) {",
                "             throw new IOException(e);",
                "@@ -299,6 +297,3 @@ public class XConfiguration extends Configuration {",
                "         }",
                "-        catch (SAXException e) {",
                "-            throw new IOException(e);",
                "-        }",
                "-        catch (ParserConfigurationException e) {",
                "+        catch (SAXException | ParserConfigurationException e) {",
                "             throw new IOException(e);",
                "@@ -353,3 +348,2 @@ public class XConfiguration extends Configuration {",
                "             }",
                "-",
                "         }",
                "@@ -375,3 +369,3 @@ public class XConfiguration extends Configuration {",
                "             baos.close();",
                "-            xml = new String(baos.toByteArray());",
                "+            xml = new String(baos.toByteArray(), Charsets.UTF_8);",
                "         }",
                "diff --git a/core/src/main/java/org/apache/oozie/util/XmlUtils.java b/core/src/main/java/org/apache/oozie/util/XmlUtils.java",
                "index 9db46b365..054d5d92a 100644",
                "--- a/core/src/main/java/org/apache/oozie/util/XmlUtils.java",
                "+++ b/core/src/main/java/org/apache/oozie/util/XmlUtils.java",
                "@@ -48,2 +48,3 @@ import javax.xml.validation.Validator;",
                "+import com.google.common.base.Charsets;",
                " import org.apache.hadoop.conf.Configuration;",
                "@@ -166,6 +167,3 @@ public class XmlUtils {",
                "         }",
                "-        catch (JDOMException e) {",
                "-            throw new RuntimeException();",
                "-        }",
                "-        catch (IOException e) {",
                "+        catch (JDOMException | IOException e) {",
                "             throw new RuntimeException();",
                "@@ -223,3 +221,2 @@ public class XmlUtils {",
                "         return new PrettyPrint(element);",
                "-",
                "     }",
                "@@ -273,3 +270,3 @@ public class XmlUtils {",
                "         Validator validator = SchemaService.getValidator(schema);",
                "-        validator.validate(new StreamSource(new ByteArrayInputStream(xml.getBytes())));",
                "+        validator.validate(new StreamSource(new ByteArrayInputStream(xml.getBytes(Charsets.UTF_8))));",
                "     }",
                "@@ -404,5 +401,4 @@ public class XmlUtils {",
                "         Element eSla_2 = elem.getChild(\"info\", Namespace.getNamespace(SchemaService.SLA_NAMESPACE_URI_2));",
                "-        Element eSla = (eSla_2 != null) ? eSla_2 : eSla_1;",
                "-        return eSla;",
                "+        return (eSla_2 != null) ? eSla_2 : eSla_1;",
                "     }"
            ],
            "changed_files": [
                "core/pom.xml",
                "core/src/main/java/org/apache/oozie/StringBlob.java",
                "core/src/main/java/org/apache/oozie/action/ActionExecutor.java",
                "core/src/main/java/org/apache/oozie/action/hadoop/LauncherHelper.java",
                "core/src/main/java/org/apache/oozie/action/hadoop/MapReduceActionExecutor.java",
                "core/src/main/java/org/apache/oozie/action/hadoop/SqoopActionExecutor.java",
                "core/src/main/java/org/apache/oozie/action/ssh/SshActionExecutor.java",
                "core/src/main/java/org/apache/oozie/command/bundle/BundleSubmitXCommand.java",
                "core/src/main/java/org/apache/oozie/command/coord/CoordSubmitXCommand.java",
                "core/src/main/java/org/apache/oozie/command/coord/CoordUpdateXCommand.java",
                "core/src/main/java/org/apache/oozie/service/AuthorizationService.java",
                "core/src/main/java/org/apache/oozie/service/WorkflowAppService.java",
                "core/src/main/java/org/apache/oozie/servlet/V1JobServlet.java",
                "core/src/main/java/org/apache/oozie/servlet/V2ValidateServlet.java",
                "core/src/main/java/org/apache/oozie/util/AuthUrlClient.java",
                "core/src/main/java/org/apache/oozie/util/IOUtils.java",
                "core/src/main/java/org/apache/oozie/util/MultiFileReader.java",
                "core/src/main/java/org/apache/oozie/util/XConfiguration.java",
                "core/src/main/java/org/apache/oozie/util/XmlUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-2956": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: workflow",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-2956",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "53c1c81ef7195beb56ded42cec4c840f921ec084",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1528103302,
            "hunks": 9,
            "message": "OOZIE-3227 Eliminate duplicate dependencies when using Hadoop 3 DistributedCache (dionusos via andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/action/hadoop/DependencyDeduplicator.java b/core/src/main/java/org/apache/oozie/action/hadoop/DependencyDeduplicator.java",
                "new file mode 100644",
                "index 000000000..11c62bcbc",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/apache/oozie/action/hadoop/DependencyDeduplicator.java",
                "@@ -0,0 +1,82 @@",
                "+/**",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.oozie.action.hadoop;",
                "+",
                "+import com.google.common.base.Strings;",
                "+import java.io.File;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+import org.apache.hadoop.conf.Configuration;",
                "+import org.apache.oozie.util.XLog;",
                "+",
                "+public class DependencyDeduplicator {",
                "+    public static final XLog LOG = XLog.getLog(DependencyDeduplicator.class);",
                "+",
                "+    private static final String SYMLINK_SEPARATOR = \"#\";",
                "+    private static final String DEPENDENCY_SEPARATOR = \",\";",
                "+",
                "+    public void deduplicate(final Configuration conf, final String key) {",
                "+        if(conf == null || key == null) {",
                "+            return;",
                "+        }",
                "+",
                "+        final String commaSeparatedFilePaths = conf.get(key);",
                "+        LOG.debug(\"Oozie tries to deduplicate dependencies with key [{0}], which has value of [{1}]\",",
                "+                key,",
                "+                commaSeparatedFilePaths);",
                "+",
                "+        if(Strings.isNullOrEmpty(commaSeparatedFilePaths)) {",
                "+            return;",
                "+        }",
                "+",
                "+        final Map<String, String> nameToPath = new HashMap<>();",
                "+        final StringBuilder uniqList = new StringBuilder();",
                "+",
                "+        final String[] dependencyPaths = commaSeparatedFilePaths.split(DEPENDENCY_SEPARATOR);",
                "+        for (String dependencyPath : dependencyPaths) {",
                "+            try {",
                "+                final String dependencyName = resolveName(",
                "+                        dependencyPath.substring(",
                "+                                dependencyPath.lastIndexOf(File.separator) + DEPENDENCY_SEPARATOR.length()",
                "+                        )",
                "+                );",
                "+",
                "+                if (nameToPath.putIfAbsent(dependencyName, dependencyPath) == null) {",
                "+                    uniqList.append(dependencyPath).append(DEPENDENCY_SEPARATOR);",
                "+                } else {",
                "+                    LOG.warn(\"{0}[{1}] is already defined in {2}. Skipping.\",",
                "+                            dependencyName, dependencyPath, key);",
                "+                }",
                "+            } catch (final IndexOutOfBoundsException e) {",
                "+                LOG.warn(\"Dependency [{0}] is malformed. Skipping.\", dependencyPath);",
                "+            }",
                "+        }",
                "+        if(uniqList.length() > 0) {",
                "+            uniqList.setLength(uniqList.length() - 1);",
                "+        }",
                "+        conf.set(key, uniqList.toString());",
                "+        LOG.info(\"{0} dependencies are unified by their filename or symlink name.\", key);",
                "+    }",
                "+",
                "+    private String resolveName(final String dependencyName) {",
                "+        if(dependencyName.contains(SYMLINK_SEPARATOR)) {",
                "+            return dependencyName.split(SYMLINK_SEPARATOR)[1];",
                "+        }",
                "+        return dependencyName;",
                "+    }",
                "+}",
                "diff --git a/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java b/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java",
                "index 0ba3cbf99..ed809ef08 100644",
                "--- a/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java",
                "+++ b/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java",
                "@@ -57,2 +57,3 @@ import org.apache.hadoop.mapred.JobClient;",
                " import org.apache.hadoop.mapred.TaskLog;",
                "+import org.apache.hadoop.mapreduce.MRJobConfig;",
                " import org.apache.hadoop.mapreduce.filecache.ClientDistributedCacheManager;",
                "@@ -167,2 +168,3 @@ public class JavaActionExecutor extends ActionExecutor {",
                "     private final static String ACTION_SHARELIB_FOR = \"oozie.action.sharelib.for.\";",
                "+    public static final String OOZIE_ACTION_DEPENDENCY_DEDUPLICATE = \"oozie.action.dependency.deduplicate\";",
                "@@ -177,2 +179,4 @@ public class JavaActionExecutor extends ActionExecutor {",
                "+    private static DependencyDeduplicator dependencyDeduplicator = new DependencyDeduplicator();",
                "+",
                "     public XConfiguration workflowConf = null;",
                "@@ -877,2 +881,3 @@ public class JavaActionExecutor extends ActionExecutor {",
                "             }",
                "+            checkAndDeduplicate(actionConf);",
                "             LauncherHelper.setupLauncherInfo(launcherJobConf, jobId, actionId, actionDir, recoveryId, actionConf,",
                "@@ -927,2 +932,3 @@ public class JavaActionExecutor extends ActionExecutor {",
                "+            checkAndDeduplicate(launcherJobConf);",
                "             return launcherJobConf;",
                "@@ -934,2 +940,9 @@ public class JavaActionExecutor extends ActionExecutor {",
                "+    private void checkAndDeduplicate(final Configuration conf) {",
                "+        if(ConfigurationService.getBoolean(OOZIE_ACTION_DEPENDENCY_DEDUPLICATE, false)) {",
                "+            dependencyDeduplicator.deduplicate(conf, MRJobConfig.CACHE_FILES);",
                "+            dependencyDeduplicator.deduplicate(conf, MRJobConfig.CACHE_ARCHIVES);",
                "+        }",
                "+    }",
                "+",
                "     @VisibleForTesting",
                "diff --git a/core/src/main/resources/oozie-default.xml b/core/src/main/resources/oozie-default.xml",
                "index c54db34ff..14bb20091 100644",
                "--- a/core/src/main/resources/oozie-default.xml",
                "+++ b/core/src/main/resources/oozie-default.xml",
                "@@ -89,2 +89,15 @@",
                "+    <property>",
                "+        <name>oozie.action.dependency.deduplicate</name>",
                "+        <value>false</value>",
                "+        <description>",
                "+            If true, then Oozie will remove all the duplicates from the list of dependencies when they are passed to",
                "+            the jobtracker. Higher priority dependencies will remain as the following:",
                "+            Original list: \"/a/a.jar#a.jar,/a/b.jar#b.jar,/b/a.jar,/b/b.jar,/c/d.jar\"",
                "+            Deduplicated list: \"/a/a.jar#a.jar,/a/b.jar#b.jar,/c/d.jar\"",
                "+            With other words, priority order is: action jar > user workflow libs > action libs > system lib,",
                "+            where dependency with greater prio is used.",
                "+        </description>",
                "+    </property>",
                "+",
                "     <property>",
                "diff --git a/docs/src/site/twiki/AG_ActionConfiguration.twiki b/docs/src/site/twiki/AG_ActionConfiguration.twiki",
                "index f6ffdb222..8c032a754 100644",
                "--- a/docs/src/site/twiki/AG_ActionConfiguration.twiki",
                "+++ b/docs/src/site/twiki/AG_ActionConfiguration.twiki",
                "@@ -52,2 +52,32 @@ By default Oozie does not define any default action configurations.",
                "+---++ Dependency deduplication",
                "+",
                "+Using Oozie with Hadoop 3 may require to have dependency file names distinguishable,",
                "+ which means having two files on sharelib and in your app's dependencies with identical names, leads to job submission failure.",
                "+To avoid this you can enable the deduplicator by setting oozie.action.dependency.deduplicate=true in oozie-site.xml",
                "+(false, by default).",
                "+Dependencies which are closer to your application has higher priority: action jar > user workflow libs > action libs > system lib,",
                "+where dependency with greater prio is used.",
                "+",
                "+Real world example:",
                "+You have an application workflow which is uploaded to HDFS in /apps/app directory. You have your app.jar and dependency jars.",
                "+You also define a spark action in your workflow and set use system libs; the HDFS tree is similar to this:",
                "+<verbatim>",
                "+ + /apps/app/",
                "+   - app.jar",
                "+   - workflow.xml",
                "+   + libs",
                "+     - app.jar",
                "+     - jackson-annotations-1.0.jar",
                "+ + share/lib/",
                "+   + spark",
                "+     - app.jar",
                "+     - jackson-annotations-1.0.jar",
                "+   + oozie",
                "+     - jackson-annotations-1.0.jar",
                "+</verbatim>",
                "+The deduplicator code will create the following list of files:",
                "+=/apps/app/app.jar,/apps/app/libs/jackson-annotations-1.0.jar=",
                "+And no other files will be passed at job submission.",
                "+",
                " [[index][::Go back to Oozie Documentation Index::]]"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/action/hadoop/DependencyDeduplicator.java",
                "core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java",
                "core/src/main/resources/oozie-default.xml",
                "docs/src/site/twiki/AG_ActionConfiguration.twiki"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3227": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3227",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f638381dacf5d0720f9f1f9786ea30d4493ada2a",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1530521491,
            "hunks": 13,
            "message": "OOZIE-3109 [log-streaming] Escape HTML-specific characters (dionusos via andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/service/XLogStreamingService.java b/core/src/main/java/org/apache/oozie/service/XLogStreamingService.java",
                "index 3cfbeac47..f841425e2 100644",
                "--- a/core/src/main/java/org/apache/oozie/service/XLogStreamingService.java",
                "+++ b/core/src/main/java/org/apache/oozie/service/XLogStreamingService.java",
                "@@ -20,2 +20,3 @@ package org.apache.oozie.service;",
                "+import org.apache.commons.lang.StringEscapeUtils;",
                " import org.apache.commons.lang.StringUtils;",
                "@@ -94,3 +95,3 @@ public class XLogStreamingService implements Service, Instrumentable {",
                "         if (!logStreamer.isLogEnabled()) {",
                "-            writer.write(logStreamer.getLogDisableMessage());",
                "+            writer.write(StringEscapeUtils.escapeHtml(logStreamer.getLogDisableMessage()));",
                "             return;",
                "diff --git a/core/src/main/java/org/apache/oozie/service/ZKXLogStreamingService.java b/core/src/main/java/org/apache/oozie/service/ZKXLogStreamingService.java",
                "index 3a5081c55..9aa3276a9 100644",
                "--- a/core/src/main/java/org/apache/oozie/service/ZKXLogStreamingService.java",
                "+++ b/core/src/main/java/org/apache/oozie/service/ZKXLogStreamingService.java",
                "@@ -29,2 +29,3 @@ import java.util.TreeMap;",
                "+import org.apache.commons.lang.StringEscapeUtils;",
                " import org.apache.commons.lang.StringUtils;",
                "@@ -105,3 +106,3 @@ public class ZKXLogStreamingService extends XLogStreamingService implements Serv",
                "         if (!logStreamer.isLogEnabled()) {",
                "-            writer.write(logStreamer.getLogDisableMessage());",
                "+            writer.write(StringEscapeUtils.escapeHtml(logStreamer.getLogDisableMessage()));",
                "             return;",
                "@@ -189,3 +190,3 @@ public class ZKXLogStreamingService extends XLogStreamingService implements Serv",
                "             if(!StringUtils.isEmpty(logStreamer.getXLogFilter().getTruncatedMessage())){",
                "-                writer.write(logStreamer.getXLogFilter().getTruncatedMessage());",
                "+                writer.write(StringEscapeUtils.escapeHtml(logStreamer.getXLogFilter().getTruncatedMessage()));",
                "             }",
                "@@ -193,3 +194,3 @@ public class ZKXLogStreamingService extends XLogStreamingService implements Serv",
                "             if (logStreamer.getXLogFilter().isDebugMode()) {",
                "-                writer.write(logStreamer.getXLogFilter().getDebugMessage());",
                "+                writer.write(StringEscapeUtils.escapeHtml(logStreamer.getXLogFilter().getDebugMessage()));",
                "             }",
                "@@ -228,3 +229,3 @@ public class ZKXLogStreamingService extends XLogStreamingService implements Serv",
                "                     // Write the message from that parser at that timestamp",
                "-                    writer.write(earliestParser.getLastMessage());",
                "+                    writer.write(StringEscapeUtils.escapeHtml(earliestParser.getLastMessage()));",
                "                     if (logStreamer.shouldFlushOutput(earliestParser.getLastMessage().length())) {",
                "@@ -241,3 +242,4 @@ public class ZKXLogStreamingService extends XLogStreamingService implements Serv",
                "                     TimestampedMessageParser parser = timestampMap.values().iterator().next();",
                "-                    writer.write(parser.getLastMessage());  // don't forget the last message read by the parser",
                "+                    // don't forget the last message read by the parser",
                "+                    writer.write(StringEscapeUtils.escapeHtml(parser.getLastMessage()));",
                "                     parser.processRemaining(writer, logStreamer);",
                "diff --git a/core/src/main/java/org/apache/oozie/util/TimestampedMessageParser.java b/core/src/main/java/org/apache/oozie/util/TimestampedMessageParser.java",
                "index 1b876054f..5c71ea1f8 100644",
                "--- a/core/src/main/java/org/apache/oozie/util/TimestampedMessageParser.java",
                "+++ b/core/src/main/java/org/apache/oozie/util/TimestampedMessageParser.java",
                "@@ -26,2 +26,3 @@ import java.util.regex.Pattern;",
                "+import org.apache.commons.lang.StringEscapeUtils;",
                " import org.apache.oozie.service.Services;",
                "@@ -206,3 +207,3 @@ public class TimestampedMessageParser {",
                "         while (increment()) {",
                "-            writer.write(lastMessage);",
                "+            writer.write(StringEscapeUtils.escapeHtml(lastMessage));",
                "             if (logStreamer.shouldFlushOutput(lastMessage.length())) {",
                "diff --git a/core/src/main/java/org/apache/oozie/util/XLogStreamer.java b/core/src/main/java/org/apache/oozie/util/XLogStreamer.java",
                "index f0291af23..6edfa22df 100644",
                "--- a/core/src/main/java/org/apache/oozie/util/XLogStreamer.java",
                "+++ b/core/src/main/java/org/apache/oozie/util/XLogStreamer.java",
                "@@ -32,2 +32,3 @@ import java.io.BufferedReader;",
                "+import org.apache.commons.lang.StringEscapeUtils;",
                " import org.apache.commons.lang.StringUtils;",
                "@@ -116,6 +117,6 @@ public class XLogStreamer {",
                "                 if (!StringUtils.isEmpty(logFilter.getTruncatedMessage())) {",
                "-                    writer.write(logFilter.getTruncatedMessage());",
                "+                    writer.write(StringEscapeUtils.escapeHtml(logFilter.getTruncatedMessage()));",
                "                 }",
                "                 if (logFilter.isDebugMode()) {",
                "-                    writer.write(logFilter.getDebugMessage());",
                "+                    writer.write(StringEscapeUtils.escapeHtml(logFilter.getDebugMessage()));",
                "                 }"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/service/XLogStreamingService.java",
                "core/src/main/java/org/apache/oozie/service/ZKXLogStreamingService.java",
                "core/src/main/java/org/apache/oozie/util/TimestampedMessageParser.java",
                "core/src/main/java/org/apache/oozie/util/XLogStreamer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3109": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3109",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "87b3d0fff47de3e25251a0b667050a8ffc36f615",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1528807034,
            "hunks": 14,
            "message": "OOZIE-3260 [sla] Remove stale item above max retries on JPA related errors from in-memory SLA map (andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/sla/SLACalcStatus.java b/core/src/main/java/org/apache/oozie/sla/SLACalcStatus.java",
                "index 7be16f075..3d7d6e8a5 100644",
                "--- a/core/src/main/java/org/apache/oozie/sla/SLACalcStatus.java",
                "+++ b/core/src/main/java/org/apache/oozie/sla/SLACalcStatus.java",
                "@@ -18,3 +18,2 @@",
                "-",
                " package org.apache.oozie.sla;",
                "@@ -48,2 +47,3 @@ public class SLACalcStatus extends SLAEvent {",
                "     private String jobId;",
                "+    private int retryCount = 0;",
                "@@ -309,2 +309,13 @@ public class SLACalcStatus extends SLAEvent {",
                "+    int getRetryCount() {",
                "+        return retryCount;",
                "+    }",
                "+",
                "+    void incrementRetryCount() {",
                "+        this.retryCount++;",
                "+    }",
                "+",
                "+    void resetRetryCount() {",
                "+        this.retryCount = 0;",
                "+    }",
                " }",
                "diff --git a/core/src/main/java/org/apache/oozie/sla/SLACalculatorMemory.java b/core/src/main/java/org/apache/oozie/sla/SLACalculatorMemory.java",
                "index a6ed0ffc2..c7ccfcc6f 100644",
                "--- a/core/src/main/java/org/apache/oozie/sla/SLACalculatorMemory.java",
                "+++ b/core/src/main/java/org/apache/oozie/sla/SLACalculatorMemory.java",
                "@@ -76,3 +76,3 @@ public class SLACalculatorMemory implements SLACalculator {",
                "     // TODO optimization priority based insertion/processing/bumping up-down",
                "-    protected Map<String, SLACalcStatus> slaMap;",
                "+    private Map<String, SLACalcStatus> slaMap;",
                "     protected Set<String> historySet;",
                "@@ -86,2 +86,3 @@ public class SLACalculatorMemory implements SLACalculator {",
                "     public static final String SLA_MAP = \"sla-map\";",
                "+    private int maxRetryCount;",
                "@@ -91,2 +92,3 @@ public class SLACalculatorMemory implements SLACalculator {",
                "         jobEventLatency = ConfigurationService.getInt(conf, SLAService.CONF_JOB_EVENT_LATENCY);",
                "+        maxRetryCount = ConfigurationService.getInt(conf, SLAService.CONF_MAXIMUM_RETRY_COUNT);",
                "         slaMap = new ConcurrentHashMap<String, SLACalcStatus>();",
                "@@ -220,5 +222,10 @@ public class SLACalculatorMemory implements SLACalculator {",
                "     /**",
                "-     * Invoked via periodic run, update the SLA for registered jobs",
                "+     * Invoked via periodic run, update the SLA for registered jobs.",
                "+     * <p>",
                "+     * Track the number of times the {@link SLACalcStatus} entry has not been processed successfully, and when a preconfigured",
                "+     * {code oozie.sla.service.SLAService.maximum.retry.count} is reached, remove any {@link SLACalculatorMemory#slaMap} entries",
                "+     * that are causing {@code JPAExecutorException}s of certain {@link ErrorCode}s.",
                "+     * @param jobId the workflow or coordinator job or action ID the SLA is tracked against",
                "      */",
                "-    protected void updateJobSla(String jobId) throws Exception {",
                "+    void updateJobSla(String jobId) throws Exception {",
                "         SLACalcStatus slaCalc = slaMap.get(jobId);",
                "@@ -233,9 +240,12 @@ public class SLACalculatorMemory implements SLACalculator {",
                "         try {",
                "-            summaryBean = ((SLASummaryQueryExecutor) SLASummaryQueryExecutor.getInstance())",
                "+            summaryBean = SLASummaryQueryExecutor.getInstance()",
                "                     .get(SLASummaryQuery.GET_SLA_SUMMARY_EVENTPROCESSED_LAST_MODIFIED, jobId);",
                "-        }",
                "-        catch (JPAExecutorException e) {",
                "-            if (e.getErrorCode().equals(ErrorCode.E0604) || e.getErrorCode().equals(ErrorCode.E0605)) {",
                "-                LOG.debug(\"job [{0}] is is not in DB, removing from Memory\", jobId);",
                "-                removeAndDecrement(jobId);",
                "+            resetRetryCount(jobId);",
                "+        }",
                "+        catch (final JPAExecutorException e) {",
                "+            if (e.getErrorCode().equals(ErrorCode.E0603)",
                "+                    || e.getErrorCode().equals(ErrorCode.E0604)",
                "+                    || e.getErrorCode().equals(ErrorCode.E0605)) {",
                "+                LOG.debug(\"job [{0}] is not in DB, removing from Memory\", jobId);",
                "+                incrementRetryCountAndRemove(jobId);",
                "                 return;",
                "@@ -691,2 +701,27 @@ public class SLACalculatorMemory implements SLACalculator {",
                "     }",
                "+",
                "+    private void resetRetryCount(final String jobId) {",
                "+        if (slaMap.containsKey(jobId)) {",
                "+            LOG.debug(\"Resetting retry count on [{0}]\", jobId);",
                "+            final SLACalcStatus existingStatus = slaMap.get(jobId);",
                "+            existingStatus.resetRetryCount();",
                "+            putAndIncrement(jobId, existingStatus);",
                "+        }",
                "+    }",
                "+",
                "+    private void incrementRetryCountAndRemove(final String jobId) {",
                "+        LOG.debug(\"Checking SLA calculator status [{0}] for retry count\", jobId);",
                "+        if (slaMap.containsKey(jobId)) {",
                "+            final SLACalcStatus existingStatus = slaMap.get(jobId);",
                "+            if (existingStatus.getRetryCount() < maxRetryCount) {",
                "+                existingStatus.incrementRetryCount();",
                "+                LOG.debug(\"Retrying with SLA calculator status [{0}] retry count [{1}]\", jobId, existingStatus.getRetryCount());",
                "+                putAndIncrement(jobId, existingStatus);",
                "+            }",
                "+            else {",
                "+                LOG.debug(\"Removing [{0}] from SLA map as maximum retry count reached\", jobId);",
                "+                removeAndDecrement(jobId);",
                "+            }",
                "+        }",
                "+    }",
                " }",
                "diff --git a/core/src/main/java/org/apache/oozie/sla/service/SLAService.java b/core/src/main/java/org/apache/oozie/sla/service/SLAService.java",
                "index 2d23a220a..646fe292c 100644",
                "--- a/core/src/main/java/org/apache/oozie/sla/service/SLAService.java",
                "+++ b/core/src/main/java/org/apache/oozie/sla/service/SLAService.java",
                "@@ -55,2 +55,3 @@ public class SLAService implements Service {",
                "     public static final String CONF_SLA_HISTORY_PURGE_INTERVAL = CONF_PREFIX + \"history.purge.interval\";",
                "+    public static final String CONF_MAXIMUM_RETRY_COUNT = CONF_PREFIX + \"maximum.retry.count\";",
                "diff --git a/core/src/main/resources/oozie-default.xml b/core/src/main/resources/oozie-default.xml",
                "index 3d627be53..8d7465c27 100644",
                "--- a/core/src/main/resources/oozie-default.xml",
                "+++ b/core/src/main/resources/oozie-default.xml",
                "@@ -2568,2 +2568,13 @@ will be the requeue interval for the actions which are waiting for a long time w",
                "+    <property>",
                "+        <name>oozie.sla.service.SLAService.maximum.retry.count</name>",
                "+        <value>3</value>",
                "+        <description>",
                "+            Number of times an SLA calculator status will be tried to get updated when any database related error occurs.",
                "+            It's possible that multiple WorkflowJobBean / CoordActionBean instances being inserted won't have SLACalcStatus entries",
                "+            inside SLACalculatorMemory#slaMap by the time written to database, and thus, no SLA will be tracked.",
                "+            In those rare cases, preconfigured maximum retry count can be extended.",
                "+        </description>",
                "+    </property>",
                "+",
                "     <!-- ZooKeeper configuration -->",
                "diff --git a/docs/src/site/twiki/DG_SLAMonitoring.twiki b/docs/src/site/twiki/DG_SLAMonitoring.twiki",
                "index 29dd395be..c91c227dc 100644",
                "--- a/docs/src/site/twiki/DG_SLAMonitoring.twiki",
                "+++ b/docs/src/site/twiki/DG_SLAMonitoring.twiki",
                "@@ -410,2 +410,13 @@ Refer the REST API [[WebServicesAPI#Changing_job_SLA_definition_and_alerting][Ch",
                "+---++ In-memory SLA entries and database content",
                "+",
                "+There are special circumstances when the in-memory =SLACalcStatus= entries can exist without the workflow or coordinator job or",
                "+action instances in database. For example:",
                "+   * SLA tracked database content may already have been deleted, and =SLA_SUMMARY= entry is not present anymore in database",
                "+   * SLA tracked database content and =SLA_SUMMARY= entry aren't yet present in database",
                "+",
                "+By the time =SLAService= scheduled job will be running, SLA map contents are checked. When the =SLA_SUMMARY= entry for the in-memory",
                "+SLA entry is missing, a counter is increased. When this counter reaches the server-wide preconfigured value",
                "+=oozie.sla.service.SLAService.maximum.retry.count= (by default =3=), in-memory SLA entry will get purged.",
                "+",
                " ---++ Known issues"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/sla/SLACalcStatus.java",
                "core/src/main/java/org/apache/oozie/sla/SLACalculatorMemory.java",
                "core/src/main/java/org/apache/oozie/sla/service/SLAService.java",
                "core/src/main/resources/oozie-default.xml",
                "docs/src/site/twiki/DG_SLAMonitoring.twiki"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3260": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3260",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5334d0641df2b7ec8c09ec91a2a485dbf2a42055",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1527154425,
            "hunks": 1,
            "message": "OOZIE-3185 Upgrade org.apache.derby to 10.11.1.1 (PandaMonkey via andras.piros)",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index fd488572b..87de3f1e3 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1306,3 +1306,3 @@",
                "                 <artifactId>derby</artifactId>",
                "-                <version>10.10.1.1</version>",
                "+                <version>10.11.1.1</version>",
                "                 <scope>compile</scope>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3185": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3185",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "647682940e3944d84ba4bcb3c950ce471c9ffdb6",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1532956440,
            "hunks": 1,
            "message": "OOZIE-3156 amend Retry SSH action check when cannot connect to remote host (txsing, matijhs via andras.piros)",
            "diff": [
                "diff --git a/core/src/main/resources/oozie-default.xml b/core/src/main/resources/oozie-default.xml",
                "index ff1820c0d..b69d2c9aa 100644",
                "--- a/core/src/main/resources/oozie-default.xml",
                "+++ b/core/src/main/resources/oozie-default.xml",
                "@@ -2062,3 +2062,3 @@ will be the requeue interval for the actions which are waiting for a long time w",
                "     <property>",
                "-        <name>ooozie.action.ssh.check.retries.max</name>",
                "+        <name>oozie.action.ssh.check.retries.max</name>",
                "         <value>3</value>"
            ],
            "changed_files": [
                "core/src/main/resources/oozie-default.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3156": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3156",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "eba35f0108fa762559a2ffd229f76a6258a09b2b",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1527249813,
            "hunks": 27,
            "message": "OOZIE-2352 Unportable shebang in shell scripts (dbist13 via andras.piros)",
            "diff": [
                "diff --git a/bin/create-release-artifact b/bin/create-release-artifact",
                "index e017b3be8..86d4d5df3 100755",
                "--- a/bin/create-release-artifact",
                "+++ b/bin/create-release-artifact",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                "diff --git a/bin/mkdistro.sh b/bin/mkdistro.sh",
                "index e0cff3615..550780cca 100755",
                "--- a/bin/mkdistro.sh",
                "+++ b/bin/mkdistro.sh",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/bin/test-patch b/bin/test-patch",
                "index 461497890..ce74d70fb 100755",
                "--- a/bin/test-patch",
                "+++ b/bin/test-patch",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/bin/test-patch-00-clean b/bin/test-patch-00-clean",
                "index d2009868c..ee0ca964b 100755",
                "--- a/bin/test-patch-00-clean",
                "+++ b/bin/test-patch-00-clean",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/bin/test-patch-05-patch-raw-analysis b/bin/test-patch-05-patch-raw-analysis",
                "index 1f231f20b..cec71384f 100755",
                "--- a/bin/test-patch-05-patch-raw-analysis",
                "+++ b/bin/test-patch-05-patch-raw-analysis",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/bin/test-patch-08-rat b/bin/test-patch-08-rat",
                "index 7eea74a22..2df19c003 100755",
                "--- a/bin/test-patch-08-rat",
                "+++ b/bin/test-patch-08-rat",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/bin/test-patch-09-javadoc b/bin/test-patch-09-javadoc",
                "index 2a16b0c0f..a272b7c23 100755",
                "--- a/bin/test-patch-09-javadoc",
                "+++ b/bin/test-patch-09-javadoc",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/bin/test-patch-10-compile b/bin/test-patch-10-compile",
                "index 949a46c69..59c94e0e3 100755",
                "--- a/bin/test-patch-10-compile",
                "+++ b/bin/test-patch-10-compile",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/bin/test-patch-11-findbugs-diff b/bin/test-patch-11-findbugs-diff",
                "index 8001bb85c..c884daaa3 100755",
                "--- a/bin/test-patch-11-findbugs-diff",
                "+++ b/bin/test-patch-11-findbugs-diff",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/bin/test-patch-15-backwards-compatibility b/bin/test-patch-15-backwards-compatibility",
                "index bf0f21fc9..0023261b0 100755",
                "--- a/bin/test-patch-15-backwards-compatibility",
                "+++ b/bin/test-patch-15-backwards-compatibility",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/bin/test-patch-20-tests b/bin/test-patch-20-tests",
                "index e8cb96e0e..65f9f4a83 100755",
                "--- a/bin/test-patch-20-tests",
                "+++ b/bin/test-patch-20-tests",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/bin/test-patch-30-distro b/bin/test-patch-30-distro",
                "index fbfe7b90c..f72d516d7 100755",
                "--- a/bin/test-patch-30-distro",
                "+++ b/bin/test-patch-30-distro",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/bin/test-patch-XX-template b/bin/test-patch-XX-template",
                "index 71f79968e..6a1129765 100755",
                "--- a/bin/test-patch-XX-template",
                "+++ b/bin/test-patch-XX-template",
                "@@ -1,2 +1,2 @@",
                "-!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/bin/test-patch-find-new-patch-available-jiras b/bin/test-patch-find-new-patch-available-jiras",
                "index 0d493d5e2..c5a7c8dda 100755",
                "--- a/bin/test-patch-find-new-patch-available-jiras",
                "+++ b/bin/test-patch-find-new-patch-available-jiras",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/client/src/main/bin/oozie b/client/src/main/bin/oozie",
                "index 88b06e8e9..b8db5ee81 100644",
                "--- a/client/src/main/bin/oozie",
                "+++ b/client/src/main/bin/oozie",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/core/src/main/conf/oozie-env.sh b/core/src/main/conf/oozie-env.sh",
                "index 3cdfbe22b..f03baee7d 100644",
                "--- a/core/src/main/conf/oozie-env.sh",
                "+++ b/core/src/main/conf/oozie-env.sh",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/core/src/main/resources/ssh-wrapper.sh b/core/src/main/resources/ssh-wrapper.sh",
                "index 9dff4e7f0..e2e6f7f9b 100644",
                "--- a/core/src/main/resources/ssh-wrapper.sh",
                "+++ b/core/src/main/resources/ssh-wrapper.sh",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/distro/src/main/bin/addtowar.sh b/distro/src/main/bin/addtowar.sh",
                "index 688ba6bbf..9b0512494 100644",
                "--- a/distro/src/main/bin/addtowar.sh",
                "+++ b/distro/src/main/bin/addtowar.sh",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/distro/src/main/bin/oozie-jetty-server.sh b/distro/src/main/bin/oozie-jetty-server.sh",
                "index 228a5c1f4..711b5219a 100644",
                "--- a/distro/src/main/bin/oozie-jetty-server.sh",
                "+++ b/distro/src/main/bin/oozie-jetty-server.sh",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/distro/src/main/bin/oozie-run.sh b/distro/src/main/bin/oozie-run.sh",
                "index 8d4017027..7336cb954 100755",
                "--- a/distro/src/main/bin/oozie-run.sh",
                "+++ b/distro/src/main/bin/oozie-run.sh",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/distro/src/main/bin/oozie-setup.sh b/distro/src/main/bin/oozie-setup.sh",
                "index 0b3974e88..f21b9966b 100644",
                "--- a/distro/src/main/bin/oozie-setup.sh",
                "+++ b/distro/src/main/bin/oozie-setup.sh",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/distro/src/main/bin/oozie-start.sh b/distro/src/main/bin/oozie-start.sh",
                "index c1a38d4ca..dd9e994ca 100644",
                "--- a/distro/src/main/bin/oozie-start.sh",
                "+++ b/distro/src/main/bin/oozie-start.sh",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/distro/src/main/bin/oozie-stop.sh b/distro/src/main/bin/oozie-stop.sh",
                "index 92d77f5a2..f0a92fbbb 100644",
                "--- a/distro/src/main/bin/oozie-stop.sh",
                "+++ b/distro/src/main/bin/oozie-stop.sh",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/distro/src/main/bin/oozie-sys.sh b/distro/src/main/bin/oozie-sys.sh",
                "index 55f101cf8..f53590460 100755",
                "--- a/distro/src/main/bin/oozie-sys.sh",
                "+++ b/distro/src/main/bin/oozie-sys.sh",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/distro/src/main/bin/oozied.sh b/distro/src/main/bin/oozied.sh",
                "index 0b1b9877a..7162fd0dc 100644",
                "--- a/distro/src/main/bin/oozied.sh",
                "+++ b/distro/src/main/bin/oozied.sh",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/tools/src/main/bin/oozie-diag-bundle-collector.sh b/tools/src/main/bin/oozie-diag-bundle-collector.sh",
                "index 68929e174..55e9d189f 100755",
                "--- a/tools/src/main/bin/oozie-diag-bundle-collector.sh",
                "+++ b/tools/src/main/bin/oozie-diag-bundle-collector.sh",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #",
                "diff --git a/tools/src/main/bin/ooziedb.sh b/tools/src/main/bin/ooziedb.sh",
                "index b57cff1ff..b9e38af9d 100644",
                "--- a/tools/src/main/bin/ooziedb.sh",
                "+++ b/tools/src/main/bin/ooziedb.sh",
                "@@ -1,2 +1,2 @@",
                "-#!/bin/bash",
                "+#!/usr/bin/env bash",
                " #"
            ],
            "changed_files": [
                "bin/create-release-artifact",
                "bin/mkdistro.sh",
                "bin/test-patch",
                "bin/test-patch-00-clean",
                "bin/test-patch-05-patch-raw-analysis",
                "bin/test-patch-08-rat",
                "bin/test-patch-09-javadoc",
                "bin/test-patch-10-compile",
                "bin/test-patch-11-findbugs-diff",
                "bin/test-patch-15-backwards-compatibility",
                "bin/test-patch-20-tests",
                "bin/test-patch-30-distro",
                "bin/test-patch-XX-template",
                "bin/test-patch-find-new-patch-available-jiras",
                "client/src/main/bin/oozie",
                "core/src/main/conf/oozie-env.sh",
                "core/src/main/resources/ssh-wrapper.sh",
                "distro/src/main/bin/addtowar.sh",
                "distro/src/main/bin/oozie-jetty-server.sh",
                "distro/src/main/bin/oozie-run.sh",
                "distro/src/main/bin/oozie-setup.sh",
                "distro/src/main/bin/oozie-start.sh",
                "distro/src/main/bin/oozie-stop.sh",
                "distro/src/main/bin/oozie-sys.sh",
                "distro/src/main/bin/oozied.sh",
                "tools/src/main/bin/oozie-diag-bundle-collector.sh",
                "tools/src/main/bin/ooziedb.sh"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-2352": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-2352",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6ac783009bd6ec0efb4607923f1df278f6a43080",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1525429380,
            "hunks": 1,
            "message": "OOZIE-2934 [sharelib/spark] Fix Findbugs error (Jan Hentschel via andras.piros)",
            "diff": [
                "diff --git a/sharelib/spark/src/main/java/org/apache/oozie/action/hadoop/SparkMain.java b/sharelib/spark/src/main/java/org/apache/oozie/action/hadoop/SparkMain.java",
                "index d12df189e..bef08e8cd 100644",
                "--- a/sharelib/spark/src/main/java/org/apache/oozie/action/hadoop/SparkMain.java",
                "+++ b/sharelib/spark/src/main/java/org/apache/oozie/action/hadoop/SparkMain.java",
                "@@ -121,4 +121,9 @@ public class SparkMain extends LauncherMain {",
                "         if(!pythonLibDir.exists()){",
                "-            pythonLibDir.mkdirs();",
                "-            System.out.println(\"PySpark lib folder \" + pythonLibDir.getAbsolutePath() + \" folder created.\");",
                "+            boolean pythonLibDirCreated = pythonLibDir.mkdirs();",
                "+",
                "+            if (pythonLibDirCreated) {",
                "+                System.out.println(\"PySpark lib folder \" + pythonLibDir.getAbsolutePath() + \" folder created.\");",
                "+            } else {",
                "+                System.out.println(\"PySpark lib folder not created at \" + pythonLibDir.getAbsolutePath());",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "sharelib/spark/src/main/java/org/apache/oozie/action/hadoop/SparkMain.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-2934": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-2934",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ef32fbb0e3ebefd43db5e04149b65d641cdf6ec5",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1526897738,
            "hunks": 12,
            "message": "OOZIE-2867 [Coordinators] Emphasize Region/City timezone format (dbist13 via rkanter, andras.piros)",
            "diff": [
                "diff --git a/client/src/main/java/org/apache/oozie/cli/OozieCLI.java b/client/src/main/java/org/apache/oozie/cli/OozieCLI.java",
                "index 4abc7502c..28286338d 100644",
                "--- a/client/src/main/java/org/apache/oozie/cli/OozieCLI.java",
                "+++ b/client/src/main/java/org/apache/oozie/cli/OozieCLI.java",
                "@@ -2269,3 +2269,4 @@ public class OozieCLI {",
                "     private void printAvailableTimeZones() {",
                "-        System.out.println(\"The format is \\\"SHORT_NAME (ID)\\\"\\nGive the ID to the -timezone argument\");",
                "+        System.out.println(\"The format is \\\"SHORT_NAME (ID)\\\"\\nGive the ID (GMT, UTC or Region/City)\" +",
                "+        \"to the -timezone argument\");",
                "         System.out.println(\"GMT offsets can also be used (e.g. GMT-07:00, GMT-0700, GMT+05:30, GMT+0530)\");",
                "diff --git a/core/src/main/java/org/apache/oozie/util/DateUtils.java b/core/src/main/java/org/apache/oozie/util/DateUtils.java",
                "index 261dc3d29..e63a1fb5e 100644",
                "--- a/core/src/main/java/org/apache/oozie/util/DateUtils.java",
                "+++ b/core/src/main/java/org/apache/oozie/util/DateUtils.java",
                "@@ -20,2 +20,3 @@ package org.apache.oozie.util;",
                "+import com.google.common.annotations.VisibleForTesting;",
                " import java.sql.Timestamp;",
                "@@ -31,3 +32,2 @@ import java.util.regex.Matcher;",
                " import java.util.regex.Pattern;",
                "-",
                " import org.apache.hadoop.conf.Configuration;",
                "@@ -40,5 +40,5 @@ import org.apache.oozie.service.ConfigurationService;",
                " public class DateUtils {",
                "-",
                "+    private static final XLog LOG = XLog.getLog(DateUtils.class);",
                "     private static final Pattern GMT_OFFSET_COLON_PATTERN = Pattern.compile(\"^GMT(\\\\-|\\\\+)(\\\\d{2})(\\\\d{2})$\");",
                "-",
                "+    private static final Pattern THREE_LETTER_ID_PATTERN = Pattern.compile(\"[A-Z]{3}\");",
                "     public static final TimeZone UTC = getTimeZone(\"UTC\");",
                "@@ -143,2 +143,8 @@ public class DateUtils {",
                "         TimeZone tz = TimeZone.getTimeZone(tzId);",
                "+",
                "+        // Check whether tzID can handle DST shifts",
                "+        if (!isThreeLetterTZName(tzId)) {",
                "+            LOG.warn(\"GMT, UTC or Region/City Timezone formats are preferred instead of \" + tzId);",
                "+        }",
                "+",
                "         // If these are not equal, it means that the tzId is not valid (invalid tzId's return GMT)",
                "@@ -150,2 +156,15 @@ public class DateUtils {",
                "+    /**",
                "+     * Check whether 3-letter timezone ID is in preferred format,",
                "+     * UTC, GMT or Region/City, the other three-letter codes may not handle",
                "+     * DST shifts properly.",
                "+     * @param tzId",
                "+     * @return true if format is not appropriate for DST shift",
                "+     */",
                "+    @VisibleForTesting",
                "+    static boolean isThreeLetterTZName(String tzId) {",
                "+        Matcher m = THREE_LETTER_ID_PATTERN.matcher(tzId);",
                "+        return m.matches() && !tzId.equalsIgnoreCase(\"UTC\") && !tzId.equalsIgnoreCase(\"GMT\");",
                "+    }",
                "+",
                "     /**",
                "diff --git a/docs/src/site/twiki/CoordinatorFunctionalSpec.twiki b/docs/src/site/twiki/CoordinatorFunctionalSpec.twiki",
                "index bc3280652..cd416d4cd 100644",
                "--- a/docs/src/site/twiki/CoordinatorFunctionalSpec.twiki",
                "+++ b/docs/src/site/twiki/CoordinatorFunctionalSpec.twiki",
                "@@ -138,3 +138,3 @@ For example, a datetime in =UTC=  is =2012-08-12T00:00Z=, the same datetime in =",
                "-For simplicity, there rest of this specification uses =UTC= datetimes.",
                "+For simplicity, the rest of this specification uses =UTC= datetimes.",
                "@@ -168,4 +168,9 @@ Oozie Coordinator will understand the following timezone identifiers:",
                "    * Generic NON-DST timezone identifier: =GMT[+/-]##:##= (i.e.: GMT+05:30)",
                "+   * UTC timezone identifier: =UTC= (i.e.: 2009-06-06T00:00Z)",
                "    * ZoneInfo identifiers, with DST support, understood by Java JDK (about 600 IDs) (i.e.: America/Los_Angeles)",
                "+Due to DST shift from PST to PDT, it is preferred that GMT, UTC or Region/City timezone notation is used in",
                "+favor of direct three-letter ID (PST, PDT, BST, etc.). For example, America/Los_Angeles switches from PST to PDT",
                "+at a DST shift. If used directly, PST will not handle DST shift when time is switched to PDT.",
                "+",
                " Oozie Coordinator must provide a tool for developers to list all supported timezone identifiers.",
                "@@ -3447,3 +3452,3 @@ account for daylight saving time based on the given =baseDate= and =timezone=.",
                " The =timezone= argument accepts any timezone or GMT offset that is returned by the",
                "-[[DG_CommandLineTool#Getting_a_list_of_time_zones][\"info -timezones\"]] command.  For example, \"America/Los_Angeles\" or \"PST\".",
                "+[[DG_CommandLineTool#Getting_a_list_of_time_zones][\"info -timezones\"]] command.  For example, \"America/Los_Angeles\".",
                "@@ -3452,3 +3457,3 @@ For example, if =baseDate= is '2012-06-13T00:00Z' and =timezone= is 'America/Los",
                " in return dates occurs because the former occurs during Summer when DST is in effect (UTC-0700) and the latter occurs during Winter",
                "-when DST is no in effect (UTC-0800).",
                "+when DST is not in effect (UTC-0800)."
            ],
            "changed_files": [
                "client/src/main/java/org/apache/oozie/cli/OozieCLI.java",
                "core/src/main/java/org/apache/oozie/util/DateUtils.java",
                "docs/src/site/twiki/CoordinatorFunctionalSpec.twiki"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-2867": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-2867",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4de5533c5c754c44d23d39eb450ffef9235ca65c",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1532015374,
            "hunks": 3,
            "message": "OOZIE-3306 Make it possible to override maven dependency plugin version number (asalamon74 via andras.piros)",
            "diff": [
                "diff --git a/docs/src/site/twiki/ENG_Building.twiki b/docs/src/site/twiki/ENG_Building.twiki",
                "index 5466e15e5..b86102683 100644",
                "--- a/docs/src/site/twiki/ENG_Building.twiki",
                "+++ b/docs/src/site/twiki/ENG_Building.twiki",
                "@@ -203,2 +203,16 @@ the 'SKIPPING TEST...\" message would appear in the testcase log file of both tes",
                "+---+++ Testing using dist_test and grind",
                "+",
                "+Testing using [[https://github.com/cloudera/dist_test][dist_test]] framework with",
                "+[[https://github.com/cloudera/dist_test/blob/master/docs/grind.md][grind]] front end might not work using the default 3.0.2",
                "+version of the maven dependency plugin. It is necessary to downgrade to version 2.10 using",
                "+<code>-Dmaven-dependency-plugin.version=2.10</code> .",
                "+",
                "+Maven flags for grind can be specified using <code>GRIND_MAVEN_FLAGS</code> environment variable:",
                "+",
                "+<verbatim>",
                "+export GRIND_MAVEN_FLAGS=-Dmaven.dependency.plugin.version=2.10",
                "+grind test --java-version 8",
                "+</verbatim>",
                "+",
                " ---++ Building an Oozie Distribution",
                "diff --git a/pom.xml b/pom.xml",
                "index 0c39d6459..92358aa24 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -73,2 +73,3 @@",
                "         <maven.javadoc.opts>-Xdoclint:all</maven.javadoc.opts>",
                "+        <maven-dependency-plugin.version>3.0.2</maven-dependency-plugin.version>",
                "@@ -1750,3 +1751,3 @@",
                "                     <artifactId>maven-dependency-plugin</artifactId>",
                "-                    <version>3.0.2</version>",
                "+                    <version>${maven-dependency-plugin.version}</version>",
                "                 </plugin>"
            ],
            "changed_files": [
                "docs/src/site/twiki/ENG_Building.twiki",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3306": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3306",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6cdc4d5d883f42d12e67a6d3dc49c25fbceddd82",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1526461150,
            "hunks": 2,
            "message": "OOZIE-3235 Upgrade ActiveMQ to 5.15.3 (matijhs via andras.piros)",
            "diff": [
                "diff --git a/client/pom.xml b/client/pom.xml",
                "index 795a92d4a..7d36e2d59 100644",
                "--- a/client/pom.xml",
                "+++ b/client/pom.xml",
                "@@ -76,3 +76,8 @@",
                "             <artifactId>activemq-client</artifactId>",
                "-            <scope>compile</scope>",
                "+            <scope>test</scope>",
                "+        </dependency>",
                "+        <dependency>",
                "+            <groupId>javax.jms</groupId>",
                "+            <artifactId>jms</artifactId>",
                "+            <version>1.1</version>",
                "         </dependency>",
                "diff --git a/pom.xml b/pom.xml",
                "index d9fe1b20f..90ba8e2eb 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -114,3 +114,3 @@",
                "          <log4j.version>1.2.17</log4j.version>",
                "-         <activemq.version>5.13.3</activemq.version>",
                "+         <activemq.version>5.15.3</activemq.version>",
                "          <httpcore.version>4.3.3</httpcore.version>"
            ],
            "changed_files": [
                "client/pom.xml",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3235": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3235",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "85a8be7db0c38054691acfb35078dc011f721e29",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1526917655,
            "hunks": 1,
            "message": "OOZIE-3094 [Docs] Fix for grammar mistake in DG_ActionAuthentication.twiki (dbist13 via andras.piros)",
            "diff": [
                "diff --git a/docs/src/site/twiki/DG_ActionAuthentication.twiki b/docs/src/site/twiki/DG_ActionAuthentication.twiki",
                "index 4d4efa233..bbf2d57d3 100644",
                "--- a/docs/src/site/twiki/DG_ActionAuthentication.twiki",
                "+++ b/docs/src/site/twiki/DG_ActionAuthentication.twiki",
                "@@ -119,4 +119,4 @@ to a secure Hive Metastore, though the property names would still start with \"hc",
                "-HBase does not require any additional properties since the hbase-site.xml on the Oozie server provides necessary information to the",
                "-obtain delegation token; though properties can be overwritten here if desired.",
                "+HBase does not require any additional properties since the hbase-site.xml on the Oozie server provides necessary information",
                "+to obtain a delegation token; though properties can be overwritten here if desired."
            ],
            "changed_files": [
                "docs/src/site/twiki/DG_ActionAuthentication.twiki"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3094": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3094",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3269decd20a487224598e3859017e83d164e2b37",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1525362261,
            "hunks": 1,
            "message": "OOZIE-3225 [Kerberos] Webconsole disabled message shown instead of 401 error (kmarton via andras.piros)",
            "diff": [
                "diff --git a/server/src/main/java/org/apache/oozie/server/FilterMapper.java b/server/src/main/java/org/apache/oozie/server/FilterMapper.java",
                "index 9e14f39e7..3dc9be815 100644",
                "--- a/server/src/main/java/org/apache/oozie/server/FilterMapper.java",
                "+++ b/server/src/main/java/org/apache/oozie/server/FilterMapper.java",
                "@@ -58,3 +58,4 @@ public class FilterMapper {",
                "     private void mapFilter(FilterHolder authFilter, String pathSpec) {",
                "-        servletContextHandler.addFilter(authFilter, pathSpec, EnumSet.of(DispatcherType.REQUEST));",
                "+        servletContextHandler.addFilter(authFilter, pathSpec,",
                "+                EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE));",
                "     }"
            ],
            "changed_files": [
                "server/src/main/java/org/apache/oozie/server/FilterMapper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3225": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3225",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2805ab66fb28114c7d3de892c0f6f317626cb65c",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1527184834,
            "hunks": 13,
            "message": "OOZIE-3178 ./bin/mkdistro.sh -Papache-release fails due to javadoc errors (dbist13 via gezapeti)",
            "diff": [
                "diff --git a/bin/test-patch-09-javadoc b/bin/test-patch-09-javadoc",
                "index 01ec9a4f3..2a16b0c0f 100755",
                "--- a/bin/test-patch-09-javadoc",
                "+++ b/bin/test-patch-09-javadoc",
                "@@ -83,3 +83,3 @@ checkForWarnings() {",
                "   if [[ $newWarns -le 0 ]] ; then",
                "-    REPORT+=(\"{color:green}+1{color} the patch does not seem to introduce new Javadoc warnings\")",
                "+    REPORT+=(\"{color:green}+1{color} the patch does not seem to introduce new Javadoc warning(s)\")",
                "     newWarns=0",
                "@@ -94,2 +94,18 @@ checkForWarnings() {",
                " ###############################################################################",
                "+checkForErrors() {",
                "+  cleanErrs=`grep '\\[ERROR\\]' ${REPORTDIR}/${TASKNAME}-clean.txt | grep error | awk 'BEGIN {total = 0} {total += 1} END {print total}'`",
                "+  patchErrs=`grep '\\[ERROR\\]' ${REPORTDIR}/${TASKNAME}-patch.txt | grep error | awk 'BEGIN {total = 0} {total += 1} END {print total}'`",
                "+  newErrs=`expr $patchErrs - $cleanErrs`",
                "+  if [[ $newErrs -le 0 ]] ; then",
                "+    REPORT+=(\"{color:green}+1{color} the patch does not seem to introduce new Javadoc error(s)\")",
                "+    newErrs=0",
                "+  else",
                "+    REPORT+=(\"{color:red}-1{color} the patch seems to introduce $newErrs new Javadoc error(s)\")",
                "+    newErrs=1",
                "+  fi",
                "+  if [[ $cleanErrs != 0 ]] ; then",
                "+    REPORT+=(\"{color:red}ERROR{color}: the current HEAD has $cleanErrs Javadoc error(s)\")",
                "+  fi",
                "+}",
                "+###############################################################################",
                "@@ -111,2 +127,8 @@ case $OP in",
                "     fi",
                "+    checkForErrors",
                "+    if [[ $newErrs == 0 ]] ; then",
                "+      echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE",
                "+    else",
                "+      echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE",
                "+    fi",
                "     for line in \"${REPORT[@]}\" ; do",
                "diff --git a/core/src/main/java/org/apache/oozie/compression/CodecFactory.java b/core/src/main/java/org/apache/oozie/compression/CodecFactory.java",
                "index c0f906eb5..ef9fb043e 100644",
                "--- a/core/src/main/java/org/apache/oozie/compression/CodecFactory.java",
                "+++ b/core/src/main/java/org/apache/oozie/compression/CodecFactory.java",
                "@@ -45,3 +45,3 @@ public class CodecFactory {",
                "     private static boolean isEnabled;",
                "-    private static XLog LOG = XLog.getLog(CodecFactory.class);;",
                "+    private static XLog LOG = XLog.getLog(CodecFactory.class);",
                "     private static byte[] headerBytes;",
                "diff --git a/pom.xml b/pom.xml",
                "index 87de3f1e3..0208047e2 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1635,3 +1635,3 @@",
                "                     <artifactId>maven-javadoc-plugin</artifactId>",
                "-                    <version>2.10.4</version>",
                "+                    <version>3.0.0</version>",
                "                     <configuration>",
                "diff --git a/tools/src/main/java/org/apache/oozie/tools/OozieDBExportCLI.java b/tools/src/main/java/org/apache/oozie/tools/OozieDBExportCLI.java",
                "index ba74ef1f6..ac315f8f7 100644",
                "--- a/tools/src/main/java/org/apache/oozie/tools/OozieDBExportCLI.java",
                "+++ b/tools/src/main/java/org/apache/oozie/tools/OozieDBExportCLI.java",
                "@@ -43,3 +43,2 @@ import java.util.zip.ZipOutputStream;",
                "  * This class provides the following functionality:",
                "- * <p/>",
                "  * <ul>",
                "@@ -48,3 +47,2 @@ import java.util.zip.ZipOutputStream;",
                "  * </ul>",
                "- * <p/>",
                "  */",
                "@@ -199,2 +197,2 @@ public class OozieDBExportCLI {",
                "     }",
                "-}",
                "\\ No newline at end of file",
                "+}",
                "diff --git a/tools/src/main/java/org/apache/oozie/tools/OozieDBImportCLI.java b/tools/src/main/java/org/apache/oozie/tools/OozieDBImportCLI.java",
                "index f21fd3bde..784782d2e 100644",
                "--- a/tools/src/main/java/org/apache/oozie/tools/OozieDBImportCLI.java",
                "+++ b/tools/src/main/java/org/apache/oozie/tools/OozieDBImportCLI.java",
                "@@ -81,3 +81,2 @@ import static org.apache.oozie.tools.OozieDBExportCLI.OOZIEDB_WF_JSON;",
                "  * This class provides the following functionality:",
                "- * <p/>",
                "  *  <ul>",
                "@@ -87,3 +86,2 @@ import static org.apache.oozie.tools.OozieDBExportCLI.OOZIEDB_WF_JSON;",
                "  *  </ul>",
                "- * <p/>",
                "  */",
                "@@ -587,2 +585,2 @@ public class OozieDBImportCLI {",
                "     }",
                "-}",
                "\\ No newline at end of file",
                "+}"
            ],
            "changed_files": [
                "bin/test-patch-09-javadoc",
                "core/src/main/java/org/apache/oozie/compression/CodecFactory.java",
                "pom.xml",
                "tools/src/main/java/org/apache/oozie/tools/OozieDBExportCLI.java",
                "tools/src/main/java/org/apache/oozie/tools/OozieDBImportCLI.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3178": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3178",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6c01dc7ffbedddbecda2e54b512091d88a414f23",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1533037059,
            "hunks": 1,
            "message": "OOZIE-3310 SQL error during /v2/sla filtering (asalamon74 via andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/executor/jpa/sla/SLASummaryGetForFilterJPAExecutor.java b/core/src/main/java/org/apache/oozie/executor/jpa/sla/SLASummaryGetForFilterJPAExecutor.java",
                "index 3fd4793d8..b54161e98 100644",
                "--- a/core/src/main/java/org/apache/oozie/executor/jpa/sla/SLASummaryGetForFilterJPAExecutor.java",
                "+++ b/core/src/main/java/org/apache/oozie/executor/jpa/sla/SLASummaryGetForFilterJPAExecutor.java",
                "@@ -89,3 +89,8 @@ public class SLASummaryGetForFilterJPAExecutor implements JPAExecutor<List<SLASu",
                "         if (filter.getBundleId() != null || filter.getBundleName() != null) {",
                "-            firstCondition = false;",
                "+            if (firstCondition) {",
                "+                firstCondition = false;",
                "+            }",
                "+            else {",
                "+                sb.append(\" AND \");",
                "+            }",
                "             Query bq;"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/executor/jpa/sla/SLASummaryGetForFilterJPAExecutor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3310": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3310",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f8cbce617c51ff2a05918af6d5ac5ab06701e3f4",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1528980734,
            "hunks": 3,
            "message": "OOZIE-3224 Upgrade Jetty to 9.3 (kmarton via andras.piros)",
            "diff": [
                "diff --git a/docs/src/site/twiki/DG_QuickStart.twiki b/docs/src/site/twiki/DG_QuickStart.twiki",
                "index 65c59a4fb..d6a0069ac 100644",
                "--- a/docs/src/site/twiki/DG_QuickStart.twiki",
                "+++ b/docs/src/site/twiki/DG_QuickStart.twiki",
                "@@ -50,3 +50,3 @@ available to customise the versions of the dependencies:",
                " -Dsqoop.classifier=<classifier> - default hadoop100",
                "--Djetty.version=<version> - default 9.2.19.v20160908",
                "+-Djetty.version=<version> - default 9.3.20.v20170531",
                " -Dopenjpa.version=<version> - default 2.2.2",
                "diff --git a/docs/src/site/twiki/ENG_Building.twiki b/docs/src/site/twiki/ENG_Building.twiki",
                "index 1f32de1e7..5466e15e5 100644",
                "--- a/docs/src/site/twiki/ENG_Building.twiki",
                "+++ b/docs/src/site/twiki/ENG_Building.twiki",
                "@@ -220,3 +220,3 @@ as the execution engine for those applications.",
                " -Dsqoop.classifier=<classifier> - default hadoop100",
                "--jetty.version=<version> - default 9.2.19.v20160908",
                "+-jetty.version=<version> - default 9.3.20.v20170531",
                " -Dopenjpa.version=<version> - default 2.2.2",
                "diff --git a/pom.xml b/pom.xml",
                "index 3e90531c8..8c34cf446 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -106,3 +106,3 @@",
                "-         <jetty.version>9.2.19.v20160908</jetty.version>",
                "+         <jetty.version>9.3.20.v20170531</jetty.version>"
            ],
            "changed_files": [
                "docs/src/site/twiki/DG_QuickStart.twiki",
                "docs/src/site/twiki/ENG_Building.twiki",
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3224": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3224",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "03b1a9f1e8d9443b337770bb3ecf7b43aeec49e8",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1531226914,
            "hunks": 17,
            "message": "OOZIE-3208 \"It should never happen\" error messages should be more specific to root cause (kmarton via andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/DagELFunctions.java b/core/src/main/java/org/apache/oozie/DagELFunctions.java",
                "index 179585243..8593d9985 100644",
                "--- a/core/src/main/java/org/apache/oozie/DagELFunctions.java",
                "+++ b/core/src/main/java/org/apache/oozie/DagELFunctions.java",
                "@@ -80,3 +80,3 @@ public class DagELFunctions {",
                "         catch (IOException ex) {",
                "-            throw new RuntimeException(\"It should not happen\", ex);",
                "+            throw new RuntimeException(\"Failed to read the configuration\", ex);",
                "         }",
                "diff --git a/core/src/main/java/org/apache/oozie/ErrorCode.java b/core/src/main/java/org/apache/oozie/ErrorCode.java",
                "index 168c4fa30..9cc153bb0 100644",
                "--- a/core/src/main/java/org/apache/oozie/ErrorCode.java",
                "+++ b/core/src/main/java/org/apache/oozie/ErrorCode.java",
                "@@ -38,3 +38,2 @@ public enum ErrorCode {",
                "     E0024(XLog.OPS, \"Oozie configuration directory does not exist [{0}]\"),",
                "-    E0025(XLog.OPS, \"Configuration service internal error, it should never happen, {0}\"),",
                "     E0026(XLog.OPS, \"Missing required configuration property [{0}]\"),",
                "diff --git a/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java b/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java",
                "index ed809ef08..a1a9671ab 100644",
                "--- a/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java",
                "+++ b/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java",
                "@@ -628,3 +628,3 @@ public class JavaActionExecutor extends ActionExecutor {",
                "             catch (IOException ex) {",
                "-                throw new ActionExecutorException(ActionExecutorException.ErrorType.FAILED, \"It should never happen\",",
                "+                throw new ActionExecutorException(ActionExecutorException.ErrorType.FAILED, \"Failed to add libpaths to cache\",",
                "                         ex.getMessage());",
                "@@ -648,4 +648,4 @@ public class JavaActionExecutor extends ActionExecutor {",
                "             catch (IOException ex) {",
                "-                throw new ActionExecutorException(ActionExecutorException.ErrorType.FAILED, \"It should never happen\",",
                "-                        ex.getMessage());",
                "+                throw new ActionExecutorException(ActionExecutorException.ErrorType.FAILED,",
                "+                        \"Failed to add action specific sharelib\", ex.getMessage());",
                "             }",
                "@@ -712,3 +712,3 @@ public class JavaActionExecutor extends ActionExecutor {",
                "                 throw new ActionExecutorException(ActionExecutorException.ErrorType.FAILED,",
                "-                        \"It should never happen\", ex.getMessage());",
                "+                        \"Failed to add action specific lib\", ex.getMessage());",
                "             }",
                "@@ -773,3 +773,3 @@ public class JavaActionExecutor extends ActionExecutor {",
                "         catch (IOException ioe) {",
                "-            throw new ActionExecutorException(ActionExecutorException.ErrorType.FAILED, \"It should never happen\",",
                "+            throw new ActionExecutorException(ActionExecutorException.ErrorType.FAILED, \"Failed to add action specific sharelib\",",
                "                     ioe.getMessage());",
                "diff --git a/core/src/main/java/org/apache/oozie/command/coord/CoordActionReadyXCommand.java b/core/src/main/java/org/apache/oozie/command/coord/CoordActionReadyXCommand.java",
                "index 40bd93184..a63784d71 100644",
                "--- a/core/src/main/java/org/apache/oozie/command/coord/CoordActionReadyXCommand.java",
                "+++ b/core/src/main/java/org/apache/oozie/command/coord/CoordActionReadyXCommand.java",
                "@@ -138,6 +138,4 @@ public class CoordActionReadyXCommand extends CoordinatorXCommand<Void> {",
                "                     }",
                "-                } catch (ParseException e) {",
                "-                    LOG.error(\"Should not happen\", e);",
                "-                } catch (JDOMException e) {",
                "-                    LOG.error(\"Should not happen\", e);",
                "+                } catch (ParseException | JDOMException e) {",
                "+                    LOG.error(\"Failed to calculate next nominal time\", e);",
                "                 }",
                "diff --git a/core/src/main/java/org/apache/oozie/command/wf/ActionXCommand.java b/core/src/main/java/org/apache/oozie/command/wf/ActionXCommand.java",
                "index 290a07be6..22075464a 100644",
                "--- a/core/src/main/java/org/apache/oozie/command/wf/ActionXCommand.java",
                "+++ b/core/src/main/java/org/apache/oozie/command/wf/ActionXCommand.java",
                "@@ -315,3 +315,3 @@ public abstract class ActionXCommand<T> extends WorkflowXCommand<T> {",
                "                 catch (IOException ex) {",
                "-                    throw new RuntimeException(\"It should not happen\", ex);",
                "+                    throw new RuntimeException(\"Failed to construct the proto configuration\", ex);",
                "                 }",
                "diff --git a/core/src/main/java/org/apache/oozie/service/CallableQueueService.java b/core/src/main/java/org/apache/oozie/service/CallableQueueService.java",
                "index dace26c92..ef8d58da5 100644",
                "--- a/core/src/main/java/org/apache/oozie/service/CallableQueueService.java",
                "+++ b/core/src/main/java/org/apache/oozie/service/CallableQueueService.java",
                "@@ -127,3 +127,3 @@ public class CallableQueueService implements Service, Instrumentable {",
                "             if (counter == null) {",
                "-                throw new IllegalStateException(\"It should not happen\");",
                "+                throw new IllegalStateException(\"Counter value should not be null\");",
                "             }",
                "diff --git a/core/src/main/java/org/apache/oozie/service/ConfigurationService.java b/core/src/main/java/org/apache/oozie/service/ConfigurationService.java",
                "index 618d5e6a6..702a8f1f9 100644",
                "--- a/core/src/main/java/org/apache/oozie/service/ConfigurationService.java",
                "+++ b/core/src/main/java/org/apache/oozie/service/ConfigurationService.java",
                "@@ -258,14 +258,8 @@ public class ConfigurationService implements Service, Instrumentable {",
                "         if (log.isTraceEnabled()) {",
                "-            try {",
                "-                StringWriter writer = new StringWriter();",
                "-                for (Map.Entry<String, String> entry : configuration) {",
                "-                    String value = getValue(configuration, entry.getKey());",
                "-                    writer.write(\" \" + entry.getKey() + \" = \" + value + \"\\n\");",
                "-                }",
                "-                writer.close();",
                "-                log.trace(\"Configuration:\\n{0}---\", writer.toString());",
                "-            }",
                "-            catch (IOException ex) {",
                "-                throw new ServiceException(ErrorCode.E0025, ex.getMessage(), ex);",
                "+            StringWriter writer = new StringWriter();",
                "+            for (Map.Entry<String, String> entry : configuration) {",
                "+                String value = getValue(configuration, entry.getKey());",
                "+                writer.write(\" \" + entry.getKey() + \" = \" + value + \"\\n\");",
                "             }",
                "+            log.trace(\"Configuration:\\n{0}---\", writer.toString());",
                "         }",
                "diff --git a/core/src/main/java/org/apache/oozie/util/ELConstantsFunctions.java b/core/src/main/java/org/apache/oozie/util/ELConstantsFunctions.java",
                "index 7039c489d..731b4898e 100644",
                "--- a/core/src/main/java/org/apache/oozie/util/ELConstantsFunctions.java",
                "+++ b/core/src/main/java/org/apache/oozie/util/ELConstantsFunctions.java",
                "@@ -181,7 +181,8 @@ public class ELConstantsFunctions {",
                "     public static String urlEncode(String input) {",
                "+        final String encoding = \"UTF-8\";",
                "         try {",
                "-            return (input == null) ? \"\" : URLEncoder.encode(input, \"UTF-8\");",
                "+            return (input == null) ? \"\" : URLEncoder.encode(input, encoding);",
                "         }",
                "         catch (UnsupportedEncodingException uee) {",
                "-            throw new RuntimeException(\"It should never happen\");",
                "+            throw new RuntimeException(encoding + \" encoding is not supported\", uee);",
                "         }",
                "diff --git a/core/src/main/java/org/apache/oozie/util/XConfiguration.java b/core/src/main/java/org/apache/oozie/util/XConfiguration.java",
                "index d9e16e915..d6e59a63d 100644",
                "--- a/core/src/main/java/org/apache/oozie/util/XConfiguration.java",
                "+++ b/core/src/main/java/org/apache/oozie/util/XConfiguration.java",
                "@@ -372,3 +372,3 @@ public class XConfiguration extends Configuration {",
                "         catch (IOException ex) {",
                "-            throw new RuntimeException(\"It should not happen, \" + ex.getMessage(), ex);",
                "+            throw new RuntimeException(\"Xml writing failed, \" + ex.getMessage(), ex);",
                "         }",
                "diff --git a/core/src/main/java/org/apache/oozie/util/XmlUtils.java b/core/src/main/java/org/apache/oozie/util/XmlUtils.java",
                "index 054d5d92a..177fb625b 100644",
                "--- a/core/src/main/java/org/apache/oozie/util/XmlUtils.java",
                "+++ b/core/src/main/java/org/apache/oozie/util/XmlUtils.java",
                "@@ -95,3 +95,3 @@ public class XmlUtils {",
                "         catch (IOException ex) {",
                "-            throw new RuntimeException(\"It should not happen, \" + ex.getMessage(), ex);",
                "+            throw new RuntimeException(\"Xml parsing failed \" + ex.getMessage(), ex);",
                "         }",
                "@@ -132,3 +132,3 @@ public class XmlUtils {",
                "         catch (IOException ex) {",
                "-            throw new RuntimeException(\"It should not happen, \" + ex.getMessage(), ex);",
                "+            throw new RuntimeException(\"Xml parsing failed, \" + ex.getMessage(), ex);",
                "         }"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/DagELFunctions.java",
                "core/src/main/java/org/apache/oozie/ErrorCode.java",
                "core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java",
                "core/src/main/java/org/apache/oozie/command/coord/CoordActionReadyXCommand.java",
                "core/src/main/java/org/apache/oozie/command/wf/ActionXCommand.java",
                "core/src/main/java/org/apache/oozie/service/CallableQueueService.java",
                "core/src/main/java/org/apache/oozie/service/ConfigurationService.java",
                "core/src/main/java/org/apache/oozie/util/ELConstantsFunctions.java",
                "core/src/main/java/org/apache/oozie/util/XConfiguration.java",
                "core/src/main/java/org/apache/oozie/util/XmlUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3208": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3208",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9e786aaea0ef70808e42aa2caa845400f6a43fd2",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1532954785,
            "hunks": 1,
            "message": "OOZIE-3303 Oozie UI does not work after Jetty 9.3 upgrade (asalamon74 via gezapeti)",
            "diff": [
                "diff --git a/webapp/pom.xml b/webapp/pom.xml",
                "index 4a32b5437..fd3f89fee 100644",
                "--- a/webapp/pom.xml",
                "+++ b/webapp/pom.xml",
                "@@ -150,2 +150,7 @@",
                "         </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.eclipse.jetty</groupId>",
                "+            <artifactId>apache-jsp</artifactId>",
                "+        </dependency>",
                "     </dependencies>"
            ],
            "changed_files": [
                "webapp/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3303": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3303",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2fd0b66b5eb4edc1256a630da8fb37e7c4565800",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1528121765,
            "hunks": 6,
            "message": "OOZIE-3156 Retry SSH action check when cannot connect to remote host (txsing via andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/action/ssh/SshActionExecutor.java b/core/src/main/java/org/apache/oozie/action/ssh/SshActionExecutor.java",
                "index db0bcd61d..128feee72 100644",
                "--- a/core/src/main/java/org/apache/oozie/action/ssh/SshActionExecutor.java",
                "+++ b/core/src/main/java/org/apache/oozie/action/ssh/SshActionExecutor.java",
                "@@ -83,4 +83,10 @@ public class SshActionExecutor extends ActionExecutor {",
                "+    public static final String CHECK_MAX_RETRIES = \"oozie.action.ssh.check.retries.max\";",
                "+",
                "+    public static final String CHECK_INITIAL_RETRY_WAIT_TIME = \"oozie.action.ssh.check.initial.retry.wait.time\";",
                "+",
                "     private static final String EXT_STATUS_VAR = \"#status\";",
                "+    private static final int SSH_CONNECT_ERROR_CODE = 255;",
                "+",
                "     private static int maxLen;",
                "@@ -549,2 +555,17 @@ public class SshActionExecutor extends ActionExecutor {",
                "         int returnValue = getReturnValue(command);",
                "+        if (returnValue == SSH_CONNECT_ERROR_CODE) {",
                "+            int maxRetryCount = ConfigurationService.getInt(CHECK_MAX_RETRIES, 3);",
                "+            long waitTime = ConfigurationService.getLong(CHECK_INITIAL_RETRY_WAIT_TIME, 3000);",
                "+            for (int retries = 1; retries <= maxRetryCount; retries++) {",
                "+                waitTime = handleRetry(waitTime, retries);",
                "+                returnValue = getReturnValue(command);",
                "+                if (returnValue != SSH_CONNECT_ERROR_CODE) {",
                "+                    break;",
                "+                }",
                "+            }",
                "+            if (returnValue == SSH_CONNECT_ERROR_CODE) {",
                "+                throw new ActionExecutorException(ActionExecutorException.ErrorType.FAILED, ERR_COULD_NOT_CONNECT,",
                "+                        \"Failed to connect to host [\" + action.getTrackerUri() + \"] for ssh action status check.\");",
                "+            }",
                "+        }",
                "         if (returnValue == 0) {",
                "@@ -566,2 +587,14 @@ public class SshActionExecutor extends ActionExecutor {",
                "+    private long handleRetry(long sleepBeforeRetryMs, final int retries) {",
                "+        LOG.warn(\"failed to check ssh action status, sleeping {0} milliseconds before retry #{1}\", sleepBeforeRetryMs,",
                "+                retries);",
                "+        try {",
                "+            Thread.sleep(sleepBeforeRetryMs);",
                "+        } catch (InterruptedException e) {",
                "+            LOG.error(\"ssh action status check retry get interrupted during wait, caused by {0}\", e.getMessage());",
                "+        }",
                "+        sleepBeforeRetryMs *= 2;",
                "+        return sleepBeforeRetryMs;",
                "+    }",
                "+",
                "     /**",
                "diff --git a/core/src/main/resources/oozie-default.xml b/core/src/main/resources/oozie-default.xml",
                "index 14bb20091..b828c8096 100644",
                "--- a/core/src/main/resources/oozie-default.xml",
                "+++ b/core/src/main/resources/oozie-default.xml",
                "@@ -2061,2 +2061,18 @@ will be the requeue interval for the actions which are waiting for a long time w",
                "+    <property>",
                "+        <name>ooozie.action.ssh.check.retries.max</name>",
                "+        <value>3</value>",
                "+        <description>",
                "+            Maximal retry count for ssh action status check",
                "+        </description>",
                "+    </property>",
                "+",
                "+    <property>",
                "+        <name>oozie.action.ssh.check.initial.retry.wait.time</name>",
                "+        <value>3000</value>",
                "+        <description>",
                "+            init wait time that the first retry check needs to wait",
                "+        </description>",
                "+    </property>",
                "+",
                "     <!-- SubworkflowActionExecutor -->",
                "diff --git a/docs/src/site/twiki/DG_SshActionExtension.twiki b/docs/src/site/twiki/DG_SshActionExtension.twiki",
                "index 99b96f7fa..5a51d49c5 100644",
                "--- a/docs/src/site/twiki/DG_SshActionExtension.twiki",
                "+++ b/docs/src/site/twiki/DG_SshActionExtension.twiki",
                "@@ -29,2 +29,7 @@ user contains ls -a).",
                "+Note: Ssh Action will fail if oozie fails to ssh connect to host for action status check",
                "+(e.g., the host is under heavy load, or network is bad) after a configurable number (3 by default) of retries.",
                "+The first retry will wait a configurable period of time ( 3 seconds by default) before check.",
                "+The following retries will wait 2 times of previous wait time.",
                "+",
                " *Syntax:*"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/action/ssh/SshActionExecutor.java",
                "core/src/main/resources/oozie-default.xml",
                "docs/src/site/twiki/DG_SshActionExtension.twiki"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3156": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3156",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "09e053264b78787aa79ff0fc81da5f8d4fa09124",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1528972615,
            "hunks": 8,
            "message": "OOZIE-3278 Oozie fails to start with Hadoop 2.6.0 (kmarton via andras.piros)",
            "diff": [
                "diff --git a/docs/src/site/twiki/DG_QuickStart.twiki b/docs/src/site/twiki/DG_QuickStart.twiki",
                "index cc1bb6dcf..65c59a4fb 100644",
                "--- a/docs/src/site/twiki/DG_QuickStart.twiki",
                "+++ b/docs/src/site/twiki/DG_QuickStart.twiki",
                "@@ -57,2 +57,4 @@ available to customise the versions of the dependencies:",
                " -Dtez.version=<version> - default 0.8.4",
                "+",
                "+*IMPORTANT:* Profile hadoop-3 must be activated if building against Hadoop 3",
                " </verbatim>",
                "diff --git a/docs/src/site/twiki/ENG_Building.twiki b/docs/src/site/twiki/ENG_Building.twiki",
                "index 79a772674..1f32de1e7 100644",
                "--- a/docs/src/site/twiki/ENG_Building.twiki",
                "+++ b/docs/src/site/twiki/ENG_Building.twiki",
                "@@ -229,2 +229,4 @@ as the execution engine for those applications.",
                "+*IMPORTANT:* Profile hadoop-3 must be activated if building against Hadoop 3",
                "+",
                " The following properties should be specified when building a release:",
                "diff --git a/examples/pom.xml b/examples/pom.xml",
                "index c13febc81..420b4f8df 100644",
                "--- a/examples/pom.xml",
                "+++ b/examples/pom.xml",
                "@@ -40,8 +40,2 @@",
                "-        <dependency>",
                "-            <groupId>org.apache.hadoop</groupId>",
                "-            <artifactId>hadoop-common</artifactId>",
                "-            <scope>provided</scope>",
                "-        </dependency>",
                "-",
                "         <dependency>",
                "@@ -197,2 +191,15 @@",
                "         </profile>",
                "+        <profile>",
                "+            <id>hadoop-3</id>",
                "+            <activation>",
                "+                <activeByDefault>false</activeByDefault>",
                "+            </activation>",
                "+            <dependencies>",
                "+                <dependency>",
                "+                    <groupId>org.apache.hadoop</groupId>",
                "+                    <artifactId>hadoop-common</artifactId>",
                "+                    <scope>provided</scope>",
                "+                </dependency>",
                "+            </dependencies>",
                "+        </profile>",
                "     </profiles>",
                "diff --git a/sharelib/pig/pom.xml b/sharelib/pig/pom.xml",
                "index 6619a0a82..e5482473b 100644",
                "--- a/sharelib/pig/pom.xml",
                "+++ b/sharelib/pig/pom.xml",
                "@@ -109,7 +109,2 @@",
                "         </dependency>",
                "-        <dependency>",
                "-            <groupId>org.apache.hadoop</groupId>",
                "-            <artifactId>hadoop-common</artifactId>",
                "-            <scope>provided</scope>",
                "-        </dependency>",
                "         <dependency>",
                "@@ -267,2 +262,15 @@",
                "         </profile>",
                "+        <profile>",
                "+            <id>hadoop-3</id>",
                "+            <activation>",
                "+                <activeByDefault>false</activeByDefault>",
                "+            </activation>",
                "+            <dependencies>",
                "+                <dependency>",
                "+                    <groupId>org.apache.hadoop</groupId>",
                "+                    <artifactId>hadoop-common</artifactId>",
                "+                    <scope>provided</scope>",
                "+                </dependency>",
                "+            </dependencies>",
                "+        </profile>",
                "     </profiles>",
                "diff --git a/webapp/pom.xml b/webapp/pom.xml",
                "index 67526d953..4a32b5437 100644",
                "--- a/webapp/pom.xml",
                "+++ b/webapp/pom.xml",
                "@@ -150,8 +150,2 @@",
                "         </dependency>",
                "-",
                "-        <dependency>",
                "-            <groupId>org.apache.hadoop</groupId>",
                "-            <artifactId>hadoop-common</artifactId>",
                "-            <scope>provided</scope>",
                "-        </dependency>",
                "     </dependencies>",
                "@@ -311,2 +305,14 @@",
                "         </profile>",
                "+        <profile>",
                "+            <id>hadoop-3</id>",
                "+            <activation>",
                "+                <activeByDefault>false</activeByDefault>",
                "+            </activation>",
                "+            <dependencies>",
                "+                <dependency>",
                "+                    <groupId>org.apache.hadoop</groupId>",
                "+                    <artifactId>hadoop-common</artifactId>",
                "+                </dependency>",
                "+            </dependencies>",
                "+        </profile>",
                "     </profiles>"
            ],
            "changed_files": [
                "docs/src/site/twiki/DG_QuickStart.twiki",
                "docs/src/site/twiki/ENG_Building.twiki",
                "examples/pom.xml",
                "sharelib/pig/pom.xml",
                "webapp/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3278": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3278",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "648009e35ef2c0dceab725c76c933009a1e0f964",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1526378306,
            "hunks": 12,
            "message": "OOZIE-3219 Cannot compile with hadoop 3.1.0 (dbist13, andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/util/db/FailingConnectionWrapper.java b/core/src/main/java/org/apache/oozie/util/db/FailingConnectionWrapper.java",
                "index 3b87cc9e7..9e603ed03 100644",
                "--- a/core/src/main/java/org/apache/oozie/util/db/FailingConnectionWrapper.java",
                "+++ b/core/src/main/java/org/apache/oozie/util/db/FailingConnectionWrapper.java",
                "@@ -22,4 +22,4 @@ import com.google.common.base.Preconditions;",
                " import com.google.common.base.Predicate;",
                "+import com.google.common.base.Strings;",
                " import com.google.common.collect.Sets;",
                "-import org.apache.directory.api.util.Strings;",
                " import org.apache.oozie.util.XLog;",
                "@@ -356,3 +356,3 @@ public class FailingConnectionWrapper implements Connection {",
                "         public boolean apply(@Nullable String input) {",
                "-            Preconditions.checkArgument(Strings.isNotEmpty(input));",
                "+            Preconditions.checkArgument(!Strings.isNullOrEmpty(input));",
                "diff --git a/examples/pom.xml b/examples/pom.xml",
                "index 2bfc7c8b3..c13febc81 100644",
                "--- a/examples/pom.xml",
                "+++ b/examples/pom.xml",
                "@@ -40,2 +40,8 @@",
                "+        <dependency>",
                "+            <groupId>org.apache.hadoop</groupId>",
                "+            <artifactId>hadoop-common</artifactId>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "+",
                "         <dependency>",
                "diff --git a/sharelib/pig/pom.xml b/sharelib/pig/pom.xml",
                "index 5084b61af..6619a0a82 100644",
                "--- a/sharelib/pig/pom.xml",
                "+++ b/sharelib/pig/pom.xml",
                "@@ -109,2 +109,7 @@",
                "         </dependency>",
                "+        <dependency>",
                "+            <groupId>org.apache.hadoop</groupId>",
                "+            <artifactId>hadoop-common</artifactId>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "         <dependency>",
                "diff --git a/sharelib/spark/src/main/java/org/apache/oozie/action/hadoop/SparkArgsExtractor.java b/sharelib/spark/src/main/java/org/apache/oozie/action/hadoop/SparkArgsExtractor.java",
                "index 2f3cfbe4d..5af39cda5 100644",
                "--- a/sharelib/spark/src/main/java/org/apache/oozie/action/hadoop/SparkArgsExtractor.java",
                "+++ b/sharelib/spark/src/main/java/org/apache/oozie/action/hadoop/SparkArgsExtractor.java",
                "@@ -21,5 +21,5 @@ package org.apache.oozie.action.hadoop;",
                " import com.google.common.annotations.VisibleForTesting;",
                "+import com.google.common.base.Strings;",
                " import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
                " import org.apache.commons.lang.StringUtils;",
                "-import org.apache.directory.api.util.Strings;",
                " import org.apache.hadoop.conf.Configuration;",
                "@@ -426,3 +426,3 @@ class SparkArgsExtractor {",
                "             for (final String file : userList.split(OPT_VALUE_SEPARATOR)) {",
                "-                if (!Strings.isEmpty(file)) {",
                "+                if (!Strings.isNullOrEmpty(file)) {",
                "                     final Path p = new Path(file);",
                "diff --git a/tools/src/main/java/org/apache/oozie/tools/OozieDBImportCLI.java b/tools/src/main/java/org/apache/oozie/tools/OozieDBImportCLI.java",
                "index 852940909..f21fd3bde 100644",
                "--- a/tools/src/main/java/org/apache/oozie/tools/OozieDBImportCLI.java",
                "+++ b/tools/src/main/java/org/apache/oozie/tools/OozieDBImportCLI.java",
                "@@ -21,2 +21,3 @@ package org.apache.oozie.tools;",
                " import com.google.common.base.Charsets;",
                "+import com.google.common.base.Strings;",
                " import com.google.common.collect.Lists;",
                "@@ -28,3 +29,2 @@ import org.apache.commons.cli.Options;",
                " import org.apache.commons.cli.ParseException;",
                "-import org.apache.directory.api.util.Strings;",
                " import org.apache.oozie.BundleActionBean;",
                "@@ -168,3 +168,3 @@ public class OozieDBImportCLI {",
                "     private static void setImportBatchSize() {",
                "-        if (Strings.isNotEmpty(System.getProperty(OOZIE_DB_IMPORT_BATCH_SIZE_KEY))) {",
                "+        if (!Strings.isNullOrEmpty(System.getProperty(OOZIE_DB_IMPORT_BATCH_SIZE_KEY))) {",
                "             try {",
                "diff --git a/webapp/pom.xml b/webapp/pom.xml",
                "index 797996912..67526d953 100644",
                "--- a/webapp/pom.xml",
                "+++ b/webapp/pom.xml",
                "@@ -150,2 +150,8 @@",
                "         </dependency>",
                "+",
                "+        <dependency>",
                "+            <groupId>org.apache.hadoop</groupId>",
                "+            <artifactId>hadoop-common</artifactId>",
                "+            <scope>provided</scope>",
                "+        </dependency>",
                "     </dependencies>"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/util/db/FailingConnectionWrapper.java",
                "examples/pom.xml",
                "sharelib/pig/pom.xml",
                "sharelib/spark/src/main/java/org/apache/oozie/action/hadoop/SparkArgsExtractor.java",
                "tools/src/main/java/org/apache/oozie/tools/OozieDBImportCLI.java",
                "webapp/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3219": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3219",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3c9b299a87cc500826707a752d4a830f198e1e2a",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1525357762,
            "hunks": 6,
            "message": "OOZIE-2494 Cron syntax not handling DST properly (kmarton via andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/command/coord/CoordMaterializeTransitionXCommand.java b/core/src/main/java/org/apache/oozie/command/coord/CoordMaterializeTransitionXCommand.java",
                "index ff1aa37f9..92e0dabd8 100644",
                "--- a/core/src/main/java/org/apache/oozie/command/coord/CoordMaterializeTransitionXCommand.java",
                "+++ b/core/src/main/java/org/apache/oozie/command/coord/CoordMaterializeTransitionXCommand.java",
                "@@ -474,5 +474,6 @@ public class CoordMaterializeTransitionXCommand extends MaterializeTransitionXCo",
                "                 }",
                "-",
                "                 nextTime = CoordCommandUtils.getNextValidActionTimeForCronFrequency(effStart.getTime(), coordJob);",
                "+                Date prevTime = new Date(effStart.getTimeInMillis());",
                "                 effStart.setTime(nextTime);",
                "+                addDSTChangeToNominalTime(prevTime, nextTime, coordJob);",
                "             }",
                "@@ -533,2 +534,27 @@ public class CoordMaterializeTransitionXCommand extends MaterializeTransitionXCo",
                "+    /**",
                "+     * Apply DST correction according the job`s timezone, if the difference between the previous nominal time and the actual one",
                "+     * is greater or equal than 24 hours.",
                "+     * Calendar uses a similar approach: applies DST change if the TimeUnit is lower or equal than TimeUnit.DAY. With this approach",
                "+     * a similar behaviour can be achieved.",
                "+     *",
                "+     * @see {@http://oozie.apache.org/docs/5.0.0/CoordinatorFunctionalSpec.html#a7._Handling_Timezones_and_Daylight_Saving_Time}",
                "+     *",
                "+     * @param prevTime nominal time of the previous coordinator action",
                "+     * @param nextTime nominal time of the actual coordinator action",
                "+     * @param coordJob the coordinator job",
                "+     */",
                "+    private void addDSTChangeToNominalTime(Date prevTime, Date nextTime, CoordinatorJobBean coordJob) {",
                "+        final long differenceBetweenTwoActionsInSec = java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds",
                "+                (Math.abs(prevTime.getTime() - nextTime.getTime()));",
                "+        final long oneDayInSeconds = java.util.concurrent.TimeUnit.DAYS.toSeconds(1);",
                "+        if (differenceBetweenTwoActionsInSec < oneDayInSeconds) {",
                "+            return;",
                "+        }",
                "+        final long dstOffset = DaylightOffsetCalculator.getDSTOffset(DateUtils",
                "+                .getTimeZone(coordJob.getTimeZone()), coordJob.getStartTime(), nextTime);",
                "+        LOG.debug(\"[{0}] ms DST offset applied to nominal time for coordinator job: [{1}]\", dstOffset, coordJob.getId());",
                "+        nextTime.setTime(nextTime.getTime() + dstOffset);",
                "+    }",
                "+",
                "     private void storeToDB(CoordinatorActionBean actionBean, String actionXml, Configuration jobConf) throws Exception {",
                "@@ -562,3 +588,2 @@ public class CoordMaterializeTransitionXCommand extends MaterializeTransitionXCo",
                "-",
                "         if (job.getStatus() == CoordinatorJob.Status.PREP){",
                "diff --git a/docs/src/site/twiki/CoordinatorFunctionalSpec.twiki b/docs/src/site/twiki/CoordinatorFunctionalSpec.twiki",
                "index 69e1b337b..bc3280652 100644",
                "--- a/docs/src/site/twiki/CoordinatorFunctionalSpec.twiki",
                "+++ b/docs/src/site/twiki/CoordinatorFunctionalSpec.twiki",
                "@@ -3663,2 +3663,20 @@ As mentioned in section #4.1.1 'Timezones and Daylight-Saving', the coordinator",
                "+",
                "+*%GREEN% Example of nominal times in case of DST change: %ENDCOLOR%*",
                "+",
                "+| *Frequency* | *Timezone* | *Nominal times in local time* | *Comments* |",
                "+| =${coord:months(1)}= or =${10 23 1 1-12 *}= | America/Los_Angeles | 2016-03-01T15:10 <br/> 2016-04-01T15:10 <br/> 2016-05-01T15:10  <br/> ...  <br/> 2016-11-01T15:10 <br/> 2016-12-01T15:10 | <br/>DST Start on March 13, 2:00 am <br/><br/><br/><br/> DST End on November 6, 2:00 am|",
                "+| =${coord:month(3)} or =${10 13 1 */3 *}= | America/Los_Angeles |2016-01-01T05:10 <br/> 2016-04-01T05:10 <br/> 2016-07-01T05:10 <br/> 2016-10-01T05:10 <br/> 2017-01-01T05:10 <br/> 2017-04-01T05:10 <br/> 2017-07-01T05:10 | <br/> DST Start on 2016 March 13, 2:00 am <br/><br/><br/>DST End on 2016 November 6, 2:00 am <br/> DST Start on 2017 March 12, 2:00 am|",
                "+| =${coord:days(20)}=| America/Los_Angeles | 2016-03-12T05:10 <br/> 2016-04-01T05:10 <br/> 2016-04-21T05:10 <br/> ... <br/> 2016-11-07T05:10 <br/> 2016-11-27T05:10 |<br/> DST Start on March 13, 2:00 am <br/><br/><br/> DST End on November 6, 2:00 am|",
                "+| =${10 13 */20 * *}= | America/Los_Angeles | 2016-03-01T05:10 <br/> 2016-03-21T05:10 <br/> 2016-11-01T05:10 <br/> 2016-11-21T05:10 <br/> 2016-12-01T05:10 | <br/> DST Start on March 13, 2:00 am <br/><br/> DST End on November 6, 2:00|",
                "+| =${coord:days(1)}= or =${10 23 * * *}= | America/Los_Angeles | 2016-03-11T15:10 <br/> 2016-03-12T15:10 <br/> 2016-03-13T15:10 <br/> 2016-03-14T15:10 | <br/> DST Start on March 13, 2:00 am|",
                "+| =${coord:hours(24)}=| America/Los_Angeles | 2016-03-11T15:10 <br/> 2016-03-12T15:10 <br/> 2016-03-13T16:10 <br/> 2016-03-14T16:10 | <br/><br/> DST Start on March 13, 2:00 am, but since the time unit is in hours, there will be a shift in local time|",
                "+| =${coord:hours(1)}= or =${10 * * * *}= | America/Los_Angeles | 2017-03-12T00:10 <br/> 2017-03-12T01:10 <br/> 2017-03-12T03:10 <br/> 2017-03-12T04:10 | <br/><br/> DST Start on March 12, 2:00 am, so hour 2 will be skipped|",
                "+| =${coord:hours(1)}= or =${10 * * * *}= | America/Los_Angeles | 2017-11-05T00:10 <br/> 2017-11-05T01:10 <br/> 2017-11-05T01:10 <br/> 2017-11-05T02:10 <br/> 2017-11-05T03:10 | <br/><br/> DST End on November 5, 2:00 am, so hour 1 will be doubled|",
                "+| =${10 */20 12-14 3 *}= | America/Los_Angeles | 2016-03-12T12:10  <br/> 2016-03-12T16:10 <br/> 2016-03-13T13:10 <br/> 2016-03-13T17:10 <br/> 2016-03-14T13:10 <br/> ... <br/> 2016-11-05T17:10 <br/> 2016-11-06T12:10 <br/> 2016-11-06T16:10 | <br/> <br/> DST Start on March 13, 2:00 am, so after this time the nominal times will be shifted <br/><br/><br/> <br/> DST End on November 6, 2:00 am|",
                "+| =${coord:hours(20)}= | America/Los_Angeles |2016-03-12T05:10 <br/> 2016-03-13T01:10 <br/> 2016-03-13T22:10 <br/> 2016-03-14T18:10 <br/> 2016-03-15T14:10 <br/> ... <br/> 2016-11-05T12:10 <br/> 2016-11-06T07:10 <br/> 2016-11-07T03:10 <br/> 2016-11-07T23:10 | <br/><br/> DST Start on March 13, 2:00, so here will be 21 hours in local time between the two materialization times <br/><br/><br/><br/><br/> DST End on November 6, 2:00 am, so here will be a 19 hour difference in local time|",
                "+| =${coord:minutes(30)}= or =${*/30 * * * *}= | America/Los_Angeles | 2016-03-13T01:00 <br/> 2016-03-13T01:30 <br/> 2016-03-13T02:00 <br/> 2016-03-13T02:30 <br/> 2016-03-13T04:00 <br/> 2016-03-13T04:30 | <br/><br/><br/> DST Start on March 13, 2:00 am|",
                "+",
                "+*IMPORTANT:* Please note, that in the actual implementation, DST corrections are not applied in case of higher frequencies than one day, so for this frequencies, some shifting in nominal times are expected.",
                "+",
                " ---+++ 7.1. Handling Timezones with No Day Light Saving Time"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/command/coord/CoordMaterializeTransitionXCommand.java",
                "docs/src/site/twiki/CoordinatorFunctionalSpec.twiki"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-2494": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-2494",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "553d5d4dbe50d73133443b1bf4bc44f841e19dbd",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1525430591,
            "hunks": 12,
            "message": "OOZIE-2914 Consolidate trim calls (Jan Hentschel via andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/action/hadoop/CredentialsProviderFactory.java b/core/src/main/java/org/apache/oozie/action/hadoop/CredentialsProviderFactory.java",
                "index a353e15e6..095cdd27c 100644",
                "--- a/core/src/main/java/org/apache/oozie/action/hadoop/CredentialsProviderFactory.java",
                "+++ b/core/src/main/java/org/apache/oozie/action/hadoop/CredentialsProviderFactory.java",
                "@@ -29,2 +29,3 @@ import org.apache.hadoop.security.token.Token;",
                " import org.apache.oozie.service.ConfigurationService;",
                "+import org.apache.oozie.util.StringUtils;",
                " import org.apache.oozie.util.XLog;",
                "@@ -55,3 +56,3 @@ public class CredentialsProviderFactory {",
                "         for (String function : ConfigurationService.getStrings(CRED_KEY)) {",
                "-            function = trim(function);",
                "+            function = StringUtils.trim(function);",
                "             LOG.debug(\"Creating Credential class for : \" + function);",
                "@@ -114,17 +115,2 @@ public class CredentialsProviderFactory {",
                "     }",
                "-",
                "-    /**",
                "-     * To trim string",
                "-     *",
                "-     * @param str",
                "-     * @return trim string",
                "-     */",
                "-    public String trim(String str) {",
                "-        if (str != null) {",
                "-            str = str.replaceAll(\"\\\\n\", \"\");",
                "-            str = str.replaceAll(\"\\\\t\", \"\");",
                "-            str = str.trim();",
                "-        }",
                "-        return str;",
                "-    }",
                " }",
                "diff --git a/core/src/main/java/org/apache/oozie/action/hadoop/DistcpActionExecutor.java b/core/src/main/java/org/apache/oozie/action/hadoop/DistcpActionExecutor.java",
                "index 89c84407c..a64d128e3 100644",
                "--- a/core/src/main/java/org/apache/oozie/action/hadoop/DistcpActionExecutor.java",
                "+++ b/core/src/main/java/org/apache/oozie/action/hadoop/DistcpActionExecutor.java",
                "@@ -25,2 +25,3 @@ import org.apache.oozie.action.ActionExecutorException;",
                " import org.apache.oozie.service.ConfigurationService;",
                "+import org.apache.oozie.util.StringUtils;",
                " import org.apache.oozie.util.XLog;",
                "@@ -65,3 +66,3 @@ public class DistcpActionExecutor extends JavaActionExecutor{",
                "     public List<Class<?>> getLauncherClasses() {",
                "-        List<Class<?>> classes = new ArrayList<Class<?>>();",
                "+        List<Class<?>> classes = new ArrayList<>();",
                "         try {",
                "@@ -84,3 +85,3 @@ public class DistcpActionExecutor extends JavaActionExecutor{",
                "         for (String function : ConfigurationService.getStrings(CLASS_NAMES)) {",
                "-            function = DistcpActionExecutor.Trim(function);",
                "+            function = StringUtils.trim(function);",
                "             LOG.debug(\"class for Distcp Action: \" + function);",
                "@@ -96,17 +97,2 @@ public class DistcpActionExecutor extends JavaActionExecutor{",
                "-    /**",
                "-     * To trim string",
                "-     *",
                "-     * @param str",
                "-     * @return trim string",
                "-     */",
                "-    public static String Trim(String str) {",
                "-        if (str != null) {",
                "-            str = str.replaceAll(\"\\\\n\", \"\");",
                "-            str = str.replaceAll(\"\\\\t\", \"\");",
                "-            str = str.trim();",
                "-        }",
                "-        return str;",
                "-    }",
                "-",
                "     /**",
                "diff --git a/core/src/main/java/org/apache/oozie/util/ELConstantsFunctions.java b/core/src/main/java/org/apache/oozie/util/ELConstantsFunctions.java",
                "index 87db66eb5..7039c489d 100644",
                "--- a/core/src/main/java/org/apache/oozie/util/ELConstantsFunctions.java",
                "+++ b/core/src/main/java/org/apache/oozie/util/ELConstantsFunctions.java",
                "@@ -21,9 +21,6 @@ package org.apache.oozie.util;",
                " import org.apache.hadoop.conf.Configuration;",
                "-import org.jdom.Element;",
                " import org.json.simple.JSONValue;",
                "-import java.text.SimpleDateFormat;",
                " import java.util.Map;",
                " import java.util.Properties;",
                "-import java.util.TimeZone;",
                " import java.util.Date;",
                "@@ -163,3 +160,3 @@ public class ELConstantsFunctions {",
                "     public static String trim(String input) {",
                "-        return (input == null) ? \"\" : input.trim();",
                "+        return org.apache.commons.lang.StringUtils.trimToEmpty(input);",
                "     }",
                "diff --git a/core/src/main/java/org/apache/oozie/util/StringUtils.java b/core/src/main/java/org/apache/oozie/util/StringUtils.java",
                "new file mode 100644",
                "index 000000000..280c83a6d",
                "--- /dev/null",
                "+++ b/core/src/main/java/org/apache/oozie/util/StringUtils.java",
                "@@ -0,0 +1,40 @@",
                "+/**",
                "+ * Licensed to the Apache Software Foundation (ASF) under one",
                "+ * or more contributor license agreements.  See the NOTICE file",
                "+ * distributed with this work for additional information",
                "+ * regarding copyright ownership.  The ASF licenses this file",
                "+ * to you under the Apache License, Version 2.0 (the",
                "+ * \"License\"); you may not use this file except in compliance",
                "+ * with the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.oozie.util;",
                "+",
                "+/**",
                "+ * Utility methods for working with {@link String} objects.",
                "+ */",
                "+public class StringUtils {",
                "+    /**",
                "+     * Trims leading and trailing whitespaces of a {@link String} object. Also replaces new lines characters and tab characters by",
                "+     * empty Strings.",
                "+     *",
                "+     * @param str the {@link String} to trim",
                "+     * @return the trimmed {@link String}",
                "+     */",
                "+    public static String trim(String str) {",
                "+        if (str != null) {",
                "+            str = str.replaceAll(\"\\\\n\", \"\");",
                "+            str = str.replaceAll(\"\\\\t\", \"\");",
                "+            str = str.trim();",
                "+        }",
                "+        return str;",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/action/hadoop/CredentialsProviderFactory.java",
                "core/src/main/java/org/apache/oozie/action/hadoop/DistcpActionExecutor.java",
                "core/src/main/java/org/apache/oozie/util/ELConstantsFunctions.java",
                "core/src/main/java/org/apache/oozie/util/StringUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-2914": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-2914",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "35451d50529634c9ce8730abe782bd4cf182b9a1",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1524472917,
            "hunks": 1,
            "message": "OOZIE-2427 [Kerberos] Authentication failure for the javascript resources under /ext-2.2 (lianggz via andras.piros)",
            "diff": [
                "diff --git a/webapp/src/main/webapp/WEB-INF/web.xml b/webapp/src/main/webapp/WEB-INF/web.xml",
                "index c02109203..2edbdf153 100644",
                "--- a/webapp/src/main/webapp/WEB-INF/web.xml",
                "+++ b/webapp/src/main/webapp/WEB-INF/web.xml",
                "@@ -313,7 +313,2 @@",
                "-    <filter-mapping>",
                "-        <filter-name>authenticationfilter</filter-name>",
                "-        <url-pattern>/ext-2.2/*</url-pattern>",
                "-    </filter-mapping>",
                "-",
                "     <filter-mapping>"
            ],
            "changed_files": [
                "webapp/src/main/webapp/WEB-INF/web.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-2427": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-2427",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "34fb27a61ef7bf77bb521fb9289d69b2c18907dd",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1528973538,
            "hunks": 1,
            "message": "OOZIE-3284 Upgrade maven-javadoc-plugin to 3.0.1 (kmarton via pbacsko, andras.piros)",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 6f358689e..3e90531c8 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1635,3 +1635,3 @@",
                "                     <artifactId>maven-javadoc-plugin</artifactId>",
                "-                    <version>3.0.0</version>",
                "+                    <version>3.0.1</version>",
                "                     <configuration>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3284": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3284",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d90670c13346f4c5539e46131fd30ca04bc3bed5",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1527508760,
            "hunks": 1,
            "message": "OOZIE-3258 Surefire should not trim stack traces (pbacsko)",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 0208047e2..6f358689e 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1908,2 +1908,3 @@",
                "                     </classpathDependencyExcludes>",
                "+                    <trimStackTrace>false</trimStackTrace>",
                "                 </configuration>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3258": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3258",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3c03d03fe606659fd80c430b13f413fbdfa21faa",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1532954571,
            "hunks": 13,
            "message": "OOZIE-2829 Improve sharelib upload to accept multiple source folders (kmarton via gezapeti)",
            "diff": [
                "diff --git a/docs/src/site/twiki/AG_Install.twiki b/docs/src/site/twiki/AG_Install.twiki",
                "index 46363a3b3..b8031c82e 100644",
                "--- a/docs/src/site/twiki/AG_Install.twiki",
                "+++ b/docs/src/site/twiki/AG_Install.twiki",
                "@@ -49,3 +49,3 @@ The =oozie-setup.sh= script options are:",
                " Usage  : oozie-setup.sh <Command and OPTIONS>",
                "-          sharelib create -fs FS_URI [-locallib SHARED_LIBRARY] [-concurrency CONCURRENCY]",
                "+          sharelib create -fs FS_URI [-locallib SHARED_LIBRARY] [-extralib EXTRA_SHARED_LIBRARY] [-concurrency CONCURRENCY]",
                "                                                                 (create sharelib for oozie,",
                "@@ -57,2 +57,8 @@ Usage  : oozie-setup.sh <Command and OPTIONS>",
                "                                                                 installation directory will be used.",
                "+                                                                EXTRA_SHARED_LIBRARY represents extra sharelib resources.",
                "+                                                                This option requires a pair of sharelibname",
                "+                                                                and comma-separated list of pathnames in the following format:",
                "+                                                                sharelib-name=path-name-1,path-name-2",
                "+                                                                In case of more than one sharelib, this option can be specified",
                "+                                                                multiple times.",
                "                                                                 CONCURRENCY is a number of threads to be used",
                "diff --git a/tools/src/main/java/org/apache/oozie/tools/OozieSharelibCLI.java b/tools/src/main/java/org/apache/oozie/tools/OozieSharelibCLI.java",
                "index 75e932c02..312770c5a 100644",
                "--- a/tools/src/main/java/org/apache/oozie/tools/OozieSharelibCLI.java",
                "+++ b/tools/src/main/java/org/apache/oozie/tools/OozieSharelibCLI.java",
                "@@ -28,3 +28,5 @@ import java.util.Collections;",
                " import java.util.Date;",
                "+import java.util.HashMap;",
                " import java.util.List;",
                "+import java.util.Map;",
                " import java.util.Set;",
                "@@ -39,2 +41,3 @@ import com.google.common.annotations.VisibleForTesting;",
                " import com.google.common.base.Preconditions;",
                "+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
                " import org.apache.commons.cli.Option;",
                "@@ -43,2 +46,3 @@ import org.apache.commons.cli.ParseException;",
                " import org.apache.commons.io.FileUtils;",
                "+import org.apache.commons.io.FilenameUtils;",
                " import org.apache.commons.io.filefilter.WildcardFileFilter;",
                "@@ -66,2 +70,3 @@ public class OozieSharelibCLI {",
                "     public static final String LIB_OPT = \"locallib\";",
                "+    public static final String EXTRALIBS = \"extralib\";",
                "     public static final String FS_OPT = \"fs\";",
                "@@ -70,2 +75,20 @@ public class OozieSharelibCLI {",
                "     public static final String SHARE_LIB_PREFIX = \"lib_\";",
                "+    public static final String NEW_LINE = System.lineSeparator();",
                "+    public static final String EXTRALIBS_USAGE = \"Extra sharelib resources. \" +",
                "+            \"This option requires a pair of sharelibname and coma-separated list of pathnames\" +",
                "+            \" in the following format:\" + NEW_LINE +",
                "+            \"\\\"sharelib_name=pathname[,pathname...]\\\"\" + NEW_LINE +",
                "+            \"Caveats:\" + NEW_LINE +",
                "+            \"* Each pathname is either a directory or a regular file (compressed files are not extracted prior to \" +",
                "+            \"the upload operation).\" + NEW_LINE +",
                "+            \"* Sharelibname shall be specified only once.\" + NEW_LINE + NEW_LINE +",
                "+            \"* Do not upload multiple conflicting library versions for an extra sharelib directory as it may \" +",
                "+            \"cause runtime issues.\" + NEW_LINE +",
                "+            \"This option can be present multiple times, in case of more than one sharelib\" + NEW_LINE +",
                "+            \"Example command:\" + NEW_LINE + NEW_LINE +",
                "+            \"$ oozie-setup.sh sharelib create -fs hdfs://localhost:9000 -locallib oozie-sharelib.tar.gz \" +",
                "+            \"-extralib share2=dir2,file2 -extralib share3=file3\";",
                "+    public static final String EXTRALIBS_PATH_SEPARATOR = \",\";",
                "+    public static final String EXTRALIBS_SHARELIB_KEY_VALUE_SEPARATOR = \"=\";",
                "+",
                "     private boolean used;",
                "@@ -88,2 +111,4 @@ public class OozieSharelibCLI {",
                "         options.addOption(concurrency);",
                "+        Option addLibsOption = new Option(EXTRALIBS, true, EXTRALIBS_USAGE);",
                "+        options.addOption(addLibsOption);",
                "         return options;",
                "@@ -91,2 +116,3 @@ public class OozieSharelibCLI {",
                "+    @SuppressFBWarnings(value = \"PATH_TRAVERSAL_IN\", justification = \"False positive\")",
                "     public synchronized int run(String[] args) throws Exception{",
                "@@ -143,2 +169,8 @@ public class OozieSharelibCLI {",
                "+            Map<String, String> extraLibs = new HashMap<>();",
                "+            if (command.getCommandLine().hasOption(EXTRALIBS)) {",
                "+                String[] param = command.getCommandLine().getOptionValues(EXTRALIBS);",
                "+                extraLibs = getExtraLibs(param);",
                "+            }",
                "+",
                "             File temp = File.createTempFile(\"oozie\", \".dir\");",
                "@@ -185,17 +217,5 @@ public class OozieSharelibCLI {",
                "-            if (!srcFile.exists()){",
                "-                throw new IOException(srcPath + \" cannot be found\");",
                "-            }",
                "-",
                "-            if (threadPoolSize > 1) {",
                "-                long fsLimitsMinBlockSize = fs.getConf()",
                "-                        .getLong(DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_KEY, DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_DEFAULT);",
                "-                long bytesPerChecksum = fs.getConf()",
                "-                        .getLong(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY, DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_DEFAULT);",
                "-                new ConcurrentCopyFromLocal(threadPoolSize, fsLimitsMinBlockSize, bytesPerChecksum)",
                "-                        .concurrentCopyFromLocal(fs, srcFile, dstPath);",
                "-",
                "-            } else {",
                "-                fs.copyFromLocalFile(false, srcPath, dstPath);",
                "-            }",
                "+            checkIfSourceFilesExist(srcFile);",
                "+            copyToSharelib(threadPoolSize, srcFile, srcPath, dstPath, fs);",
                "+            copyExtraLibs(threadPoolSize, extraLibs, dstPath, fs);",
                "@@ -222,2 +242,65 @@ public class OozieSharelibCLI {",
                "+    @VisibleForTesting",
                "+    static Map<String,String> getExtraLibs(String[] param) {",
                "+        Map<String, String> extraLibs = new HashMap<>();",
                "+",
                "+        for (String lib : param) {",
                "+            String[] addLibParts = lib.split(EXTRALIBS_SHARELIB_KEY_VALUE_SEPARATOR);",
                "+            if (addLibParts.length != 2) {",
                "+                printExtraSharelibUsage();",
                "+                throw new IllegalArgumentException(String",
                "+                        .format(\"Argument of extralibs '%s' is in a wrong format. Exiting.\", param));",
                "+            }",
                "+            String sharelibName = addLibParts[0];",
                "+            String sharelibPaths = addLibParts[1];",
                "+            if (extraLibs.containsKey(sharelibName)) {",
                "+                printExtraSharelibUsage();",
                "+                throw new IllegalArgumentException(String",
                "+                        .format(\"Extra sharelib, '%s', has been specified multiple times. \" + \"Exiting.\", param));",
                "+            }",
                "+            extraLibs.put(sharelibName, sharelibPaths);",
                "+        }",
                "+        return extraLibs;",
                "+    }",
                "+",
                "+    private static void printExtraSharelibUsage() {",
                "+        System.err.println(EXTRALIBS_USAGE);",
                "+    }",
                "+",
                "+",
                "+    @VisibleForTesting",
                "+    @SuppressFBWarnings(value = \"PATH_TRAVERSAL_IN\", justification = \"FilenameUtils is used to filter user input. JDK8+ is used.\")",
                "+    void copyExtraLibs(int threadPoolSize, Map<String, String> extraLibs, Path dstPath, FileSystem fs) throws IOException {",
                "+        for (Map.Entry<String, String> sharelib : extraLibs.entrySet()) {",
                "+            Path libDestPath = new Path(dstPath.toString() + Path.SEPARATOR + sharelib.getKey());",
                "+            for (String libPath : sharelib.getValue().split(EXTRALIBS_PATH_SEPARATOR)) {",
                "+                File srcFile = new File(FilenameUtils.getFullPath(libPath) + FilenameUtils.getName(libPath));",
                "+                Path srcPath = new Path(FilenameUtils.getFullPath(libPath) + FilenameUtils.getName(libPath));",
                "+                checkIfSourceFilesExist(srcFile);",
                "+                copyToSharelib(threadPoolSize, srcFile, srcPath, libDestPath, fs);",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    @VisibleForTesting",
                "+    protected void copyToSharelib(int threadPoolSize, File srcFile, Path srcPath, Path dstPath, FileSystem fs) throws IOException {",
                "+        if (threadPoolSize > 1) {",
                "+            long fsLimitsMinBlockSize = fs.getConf()",
                "+                    .getLong(DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_KEY, DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_DEFAULT);",
                "+            long bytesPerChecksum = fs.getConf()",
                "+                    .getLong(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY, DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_DEFAULT);",
                "+            new ConcurrentCopyFromLocal(threadPoolSize, fsLimitsMinBlockSize, bytesPerChecksum)",
                "+                    .concurrentCopyFromLocal(fs, srcFile, dstPath);",
                "+",
                "+        } else {",
                "+            fs.copyFromLocalFile(false, srcPath, dstPath);",
                "+        }",
                "+    }",
                "+",
                "+    @VisibleForTesting",
                "+    protected void checkIfSourceFilesExist(File srcFile) throws IOException {",
                "+        if (!srcFile.exists()){",
                "+            throw new IOException(srcFile + \" cannot be found\");",
                "+        }",
                "+    }"
            ],
            "changed_files": [
                "docs/src/site/twiki/AG_Install.twiki",
                "tools/src/main/java/org/apache/oozie/tools/OozieSharelibCLI.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-2829": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-2829",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a299d4a6d435a2c92cd1d0ffce7f35a2ef8d639b",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1530604908,
            "hunks": 2,
            "message": "OOZIE-3297 Retry logic does not handle the exception from BulkJPAExecutor properly (andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/executor/jpa/BulkJPAExecutor.java b/core/src/main/java/org/apache/oozie/executor/jpa/BulkJPAExecutor.java",
                "index d258d85b9..42961157a 100644",
                "--- a/core/src/main/java/org/apache/oozie/executor/jpa/BulkJPAExecutor.java",
                "+++ b/core/src/main/java/org/apache/oozie/executor/jpa/BulkJPAExecutor.java",
                "@@ -33,2 +33,3 @@ import java.util.regex.Pattern;",
                " import javax.persistence.EntityManager;",
                "+import javax.persistence.NoResultException;",
                " import javax.persistence.Query;",
                "@@ -132,3 +133,4 @@ public class BulkJPAExecutor implements JPAExecutor<BulkResponseInfo> {",
                "             if (bundleObjs.isEmpty()) {",
                "-                throw new JPAExecutorException(ErrorCode.E0603, \"No entries found for given bundle(s)\");",
                "+                final String message = \"No entries found for given bundle(s)\";",
                "+                throw new JPAExecutorException(ErrorCode.E0603, message, new NoResultException(message));",
                "             }"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/executor/jpa/BulkJPAExecutor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3297": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3297",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6b89aba4227326cd125a9ec409f418824cc2cada",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1530700168,
            "hunks": 20,
            "message": "OOZIE-2791 ShareLib installation may fail on busy Hadoop clusters (asasvari, kmarton via pbacsko, andras.piros)",
            "diff": [
                "diff --git a/tools/src/main/java/org/apache/oozie/tools/OozieSharelibCLI.java b/tools/src/main/java/org/apache/oozie/tools/OozieSharelibCLI.java",
                "index dce1c559b..75e932c02 100644",
                "--- a/tools/src/main/java/org/apache/oozie/tools/OozieSharelibCLI.java",
                "+++ b/tools/src/main/java/org/apache/oozie/tools/OozieSharelibCLI.java",
                "@@ -22,2 +22,3 @@ import java.io.IOException;",
                " import java.net.URI;",
                "+import java.nio.file.Files;",
                " import java.text.SimpleDateFormat;",
                "@@ -28,2 +29,3 @@ import java.util.Date;",
                " import java.util.List;",
                "+import java.util.Set;",
                " import java.util.concurrent.Callable;",
                "@@ -35,2 +37,4 @@ import java.util.concurrent.Future;",
                "+import com.google.common.annotations.VisibleForTesting;",
                "+import com.google.common.base.Preconditions;",
                " import org.apache.commons.cli.Option;",
                "@@ -41,2 +45,4 @@ import org.apache.commons.io.filefilter.WildcardFileFilter;",
                " import org.apache.hadoop.conf.Configuration;",
                "+import org.apache.hadoop.fs.CommonConfigurationKeysPublic;",
                "+import org.apache.hadoop.fs.FSDataOutputStream;",
                " import org.apache.hadoop.fs.FileSystem;",
                "@@ -44,2 +50,3 @@ import org.apache.hadoop.fs.FileUtil;",
                " import org.apache.hadoop.fs.Path;",
                "+import org.apache.hadoop.hdfs.DFSConfigKeys;",
                " import org.apache.oozie.cli.CLIParser;",
                "@@ -48,2 +55,3 @@ import org.apache.oozie.service.Services;",
                " import org.apache.oozie.service.WorkflowAppService;",
                "+import org.eclipse.jetty.util.ConcurrentHashSet;",
                "@@ -62,3 +70,2 @@ public class OozieSharelibCLI {",
                "     public static final String SHARE_LIB_PREFIX = \"lib_\";",
                "-",
                "     private boolean used;",
                "@@ -183,3 +190,9 @@ public class OozieSharelibCLI {",
                "             if (threadPoolSize > 1) {",
                "-                concurrentCopyFromLocal(fs, threadPoolSize, srcFile, dstPath);",
                "+                long fsLimitsMinBlockSize = fs.getConf()",
                "+                        .getLong(DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_KEY, DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_DEFAULT);",
                "+                long bytesPerChecksum = fs.getConf()",
                "+                        .getLong(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY, DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_DEFAULT);",
                "+                new ConcurrentCopyFromLocal(threadPoolSize, fsLimitsMinBlockSize, bytesPerChecksum)",
                "+                        .concurrentCopyFromLocal(fs, srcFile, dstPath);",
                "+",
                "             } else {",
                "@@ -199,2 +212,6 @@ public class OozieSharelibCLI {",
                "         }",
                "+        catch (NumberFormatException ex) {",
                "+            logError(\"Invalid configuration value: \", ex);",
                "+            return 1;",
                "+        }",
                "         catch (Exception ex) {",
                "@@ -205,3 +222,5 @@ public class OozieSharelibCLI {",
                "-    private void logError(String errorMessage, Throwable ex) {",
                "+",
                "+",
                "+    private static void logError(String errorMessage, Throwable ex) {",
                "         System.err.println();",
                "@@ -222,63 +241,225 @@ public class OozieSharelibCLI {",
                "-    private void concurrentCopyFromLocal(final FileSystem fs, int threadPoolSize,",
                "-            File srcFile, final Path dstPath) throws IOException {",
                "-        List<Future<Void>> futures = Collections.emptyList();",
                "-        ExecutorService threadPool = Executors.newFixedThreadPool(threadPoolSize);",
                "-        try {",
                "-            futures = copyFolderRecursively(fs, threadPool, srcFile, dstPath);",
                "-            System.out.println(\"Running \" + futures.size() + \" copy tasks on \" + threadPoolSize + \" threads\");",
                "-        } finally {",
                "+    @VisibleForTesting",
                "+    static final class CopyTaskConfiguration {",
                "+        private final FileSystem fs;",
                "+        private final File srcFile;",
                "+        private final Path dstPath;",
                "+",
                "+        CopyTaskConfiguration(FileSystem fs, File srcFile, Path dstPath) {",
                "+            this.fs = fs;",
                "+            this.srcFile = srcFile;",
                "+            this.dstPath = dstPath;",
                "+        }",
                "+",
                "+        @Override",
                "+        public boolean equals(Object o) {",
                "+            if (this == o) {",
                "+                return true;",
                "+            }",
                "+            if (o == null || getClass() != o.getClass()) {",
                "+                return false;",
                "+            }",
                "+",
                "+            CopyTaskConfiguration that = (CopyTaskConfiguration) o;",
                "+            if (!srcFile.equals(that.srcFile)) {",
                "+                return false;",
                "+            }",
                "+            return dstPath.equals(that.dstPath);",
                "+        }",
                "+",
                "+        @Override",
                "+        public int hashCode() {",
                "+            int result = srcFile.hashCode();",
                "+            result = 31 * result + dstPath.hashCode();",
                "+            return result;",
                "+        }",
                "+",
                "+    }",
                "+",
                "+    @VisibleForTesting",
                "+    static final class BlockSizeCalculator {",
                "+",
                "+        protected static long getValidBlockSize (long fileLenght, long fsLimitsMinBlockSize, long bytesPerChecksum) {",
                "+            if (fsLimitsMinBlockSize > fileLenght) {",
                "+                return fsLimitsMinBlockSize;",
                "+            }",
                "+            // bytesPerChecksum must divide block size",
                "+            if (fileLenght % bytesPerChecksum == 0) {",
                "+                return fileLenght;",
                "+            }",
                "+            long ratio = fileLenght/bytesPerChecksum;",
                "+            return (ratio + 1) * bytesPerChecksum;",
                "+        }",
                "+    }",
                "+",
                "+    @VisibleForTesting",
                "+    static final class CopyTaskCallable implements Callable<CopyTaskConfiguration> {",
                "+",
                "+        private final static short REPLICATION_FACTOR = 3;",
                "+        private final FileSystem fileSystem;",
                "+        private final File file;",
                "+        private final Path destinationPath;",
                "+        private final Path targetName;",
                "+        private final long blockSize;",
                "+",
                "+        private final Set<CopyTaskConfiguration> failedCopyTasks;",
                "+",
                "+        CopyTaskCallable(CopyTaskConfiguration copyTask, File file, Path trgName, long blockSize,",
                "+                                 Set<CopyTaskConfiguration> failedCopyTasks) {",
                "+            Preconditions.checkNotNull(copyTask);",
                "+            Preconditions.checkNotNull(file);",
                "+            Preconditions.checkNotNull(trgName);",
                "+            Preconditions.checkNotNull(failedCopyTasks);",
                "+            Preconditions.checkNotNull(copyTask.dstPath);",
                "+            Preconditions.checkNotNull(copyTask.fs);",
                "+            this.file = file;",
                "+            this.destinationPath = copyTask.dstPath;",
                "+            this.failedCopyTasks = failedCopyTasks;",
                "+            this.fileSystem = copyTask.fs;",
                "+            this.blockSize = blockSize;",
                "+            this.targetName = trgName;",
                "+        }",
                "+",
                "+        @Override",
                "+        public CopyTaskConfiguration call() throws Exception {",
                "+            CopyTaskConfiguration cp = new CopyTaskConfiguration(fileSystem, file, targetName);",
                "+            failedCopyTasks.add(cp);",
                "+            final Path destinationFilePath = new Path(destinationPath + File.separator +  file.getName());",
                "+            final boolean overwrite = true;",
                "+            final int bufferSize = CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_DEFAULT;",
                "+            try (FSDataOutputStream out = fileSystem",
                "+                    .create(destinationFilePath, overwrite, bufferSize, REPLICATION_FACTOR, blockSize)) {",
                "+                Files.copy(file.toPath(), out);",
                "+            }",
                "+            return cp;",
                "+        }",
                "+    }",
                "+",
                "+    @VisibleForTesting",
                "+    static final class ConcurrentCopyFromLocal {",
                "+",
                "+        private static final int DEFAULT_RETRY_COUNT = 5;",
                "+        private static final int STARTING_RETRY_DELAY_IN_MS = 1000;",
                "+        private int retryCount;",
                "+        private int retryDelayInMs;",
                "+        private long fsLimitsMinBlockSize;",
                "+        private long bytesPerChecksum;",
                "+",
                "+        private final int threadPoolSize;",
                "+        private final ExecutorService threadPool;",
                "+        private final Set<CopyTaskConfiguration> failedCopyTasks = new ConcurrentHashSet<>();",
                "+",
                "+        public ConcurrentCopyFromLocal(int threadPoolSize, long fsLimitsMinBlockSize, long bytesPerChecksum) {",
                "+            Preconditions.checkArgument(threadPoolSize > 0, \"Thread Pool size must be greater than 0\");",
                "+            Preconditions.checkArgument(fsLimitsMinBlockSize > 0, \"Minimun block size must be greater than 0\");",
                "+            Preconditions.checkArgument(bytesPerChecksum > 0, \"Bytes per checksum must be greater than 0\");",
                "+            this.bytesPerChecksum = bytesPerChecksum;",
                "+            this.fsLimitsMinBlockSize = fsLimitsMinBlockSize;",
                "+            this.threadPoolSize = threadPoolSize;",
                "+            this.threadPool = Executors.newFixedThreadPool(threadPoolSize);",
                "+            this.retryCount = DEFAULT_RETRY_COUNT;",
                "+            this.retryDelayInMs = STARTING_RETRY_DELAY_IN_MS;",
                "+        }",
                "+",
                "+        @VisibleForTesting",
                "+        void concurrentCopyFromLocal(FileSystem fs, File srcFile, Path dstPath) throws IOException {",
                "+            List<Future<CopyTaskConfiguration>> futures = Collections.emptyList();",
                "+            CopyTaskConfiguration copyTask = new CopyTaskConfiguration(fs, srcFile, dstPath);",
                "             try {",
                "-                threadPool.shutdown();",
                "+                futures = copyFolderRecursively(copyTask);",
                "+                System.out.println(\"Running \" + futures.size() + \" copy tasks on \" + threadPoolSize + \" threads\");",
                "             } finally {",
                "                 checkCopyResults(futures);",
                "+                System.out.println(\"Copy tasks are done\");",
                "+                threadPool.shutdown();",
                "             }",
                "         }",
                "-    }",
                "-    private void checkCopyResults(List<Future<Void>> futures) throws IOException {",
                "-        Throwable t = null;",
                "-        for (Future<Void> future : futures) {",
                "-            try {",
                "-                future.get();",
                "-            } catch (CancellationException ce) {",
                "-                t = ce;",
                "-                logError(\"Copy task was cancelled\", ce);",
                "-            } catch (ExecutionException ee) {",
                "-                t = ee.getCause();",
                "-                logError(\"Copy task failed with exception\", t);",
                "-            } catch (InterruptedException ie) {",
                "-                Thread.currentThread().interrupt();",
                "+        private List<Future<CopyTaskConfiguration>> copyFolderRecursively(final CopyTaskConfiguration copyTask) {",
                "+            List<Future<CopyTaskConfiguration>> taskList = new ArrayList<>();",
                "+            File[] fileList = copyTask.srcFile.listFiles();",
                "+            if (fileList != null) {",
                "+                for (final File file : fileList) {",
                "+                    final Path trgName = new Path(copyTask.dstPath, file.getName());",
                "+                    if (file.isDirectory()) {",
                "+                        taskList.addAll(copyFolderRecursively(",
                "+                                new CopyTaskConfiguration(copyTask.fs, file, trgName)));",
                "+                    } else {",
                "+                        final long blockSize = BlockSizeCalculator",
                "+                                .getValidBlockSize(file.length(), fsLimitsMinBlockSize, bytesPerChecksum);",
                "+                        taskList.add(threadPool",
                "+                                .submit(new CopyTaskCallable(copyTask, file, trgName, blockSize, failedCopyTasks)));",
                "+                    }",
                "+                }",
                "             }",
                "+            return taskList;",
                "         }",
                "-        if (t != null) {",
                "-            throw new IOException (\"At least one copy task failed with exception\", t);",
                "+",
                "+        private void checkCopyResults(final List<Future<CopyTaskConfiguration>> futures)",
                "+                throws IOException {",
                "+            boolean exceptionOccurred = false;",
                "+            for (Future<CopyTaskConfiguration> future : futures) {",
                "+                CopyTaskConfiguration cp;",
                "+                try {",
                "+                    cp = future.get();",
                "+                    if (cp != null) {",
                "+                        failedCopyTasks.remove(cp);",
                "+                    }",
                "+                } catch (CancellationException ce) {",
                "+                    exceptionOccurred = true;",
                "+                    logError(\"Copy task was cancelled\", ce);",
                "+                } catch (ExecutionException ee) {",
                "+                    exceptionOccurred = true;",
                "+                    logError(\"Copy task failed with exception\", ee.getCause());",
                "+                } catch (InterruptedException ie) {",
                "+                    exceptionOccurred = true;",
                "+                    Thread.currentThread().interrupt();",
                "+                }",
                "+            }",
                "+            if (exceptionOccurred) {",
                "+                System.err.println(\"At least one copy task failed with exception. Retrying failed copy tasks.\");",
                "+                retryFailedCopyTasks();",
                "+",
                "+                if (!failedCopyTasks.isEmpty() && retryCount == 0) {",
                "+                    throw new IOException(\"At least one copy task failed with exception\");",
                "+                }",
                "+            }",
                "         }",
                "-    }",
                "-    private List<Future<Void>> copyFolderRecursively(final FileSystem fs, final ExecutorService threadPool,",
                "-            File srcFile, final Path dstPath) throws IOException {",
                "-        List<Future<Void>> taskList = new ArrayList<Future<Void>>();",
                "-        File[] files = srcFile.listFiles();",
                "-",
                "-        if (files != null) {",
                "-            for (final File file : files) {",
                "-                final Path trgName = new Path(dstPath, file.getName());",
                "-                if (file.isDirectory()) {",
                "-                    taskList.addAll(copyFolderRecursively(fs, threadPool, file, trgName));",
                "-                } else {",
                "-                    taskList.add(threadPool.submit(new Callable<Void>() {",
                "-                        @Override",
                "-                        public Void call() throws Exception {",
                "-                            fs.copyFromLocalFile(new Path(file.toURI()), trgName);",
                "-                            return null;",
                "-                        }",
                "-                    }));",
                "+        private void retryFailedCopyTasks() throws IOException {",
                "+",
                "+            while (retryCount > 0 && !failedCopyTasks.isEmpty()) {",
                "+                try {",
                "+                    System.err.println(\"Waiting \" + retryDelayInMs + \" ms before retrying failed copy tasks.\");",
                "+                    Thread.sleep(retryDelayInMs);",
                "+                    retryDelayInMs = retryDelayInMs * 2;",
                "+                } catch (InterruptedException e) {",
                "+                    System.err.println(e.getMessage());",
                "                 }",
                "+",
                "+                for (CopyTaskConfiguration cp : failedCopyTasks) {",
                "+                    System.err.println(\"Retrying to copy \" + cp.srcFile + \" to \" + cp.dstPath);",
                "+                    try {",
                "+                        copyFromLocalFile(cp);",
                "+                        failedCopyTasks.remove(cp);",
                "+                    }",
                "+                    catch (IOException e) {",
                "+                        System.err.printf(\"Copying [%s] to [%s] failed with exception: [%s]%n. Proceed to next file.%n\"",
                "+                                ,cp.srcFile, cp.dstPath, e.getMessage());",
                "+                    }",
                "+                }",
                "+",
                "+                --retryCount;",
                "+            }",
                "+",
                "+            if (!failedCopyTasks.isEmpty() && retryCount == 0) {",
                "+                throw new IOException(\"Could not install Oozie ShareLib properly.\");",
                "             }",
                "-        } else {",
                "-            System.out.println(\"WARNING: directory listing of \" + srcFile.getAbsolutePath().toString() + \" returned null\");",
                "         }",
                "-        return taskList;",
                "+        private void copyFromLocalFile(CopyTaskConfiguration cp) throws IOException{",
                "+            final FileSystem fs = cp.fs;",
                "+            fs.delete(cp.dstPath, false);",
                "+            fs.copyFromLocalFile(false, new Path(cp.srcFile.toURI()), cp.dstPath);",
                "+        }",
                "     }"
            ],
            "changed_files": [
                "tools/src/main/java/org/apache/oozie/tools/OozieSharelibCLI.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-2791": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-2791",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8103901558938b017d06a03010b485818d3f8d0f",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1533027209,
            "hunks": 4,
            "message": "OOZIE-2942 [examples] Fix Findbugs warnings (Jan Hentschel, kmarton via andras.piros)",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/oozie/example/DateList.java b/examples/src/main/java/org/apache/oozie/example/DateList.java",
                "index 7e574cbec..731fe4130 100644",
                "--- a/examples/src/main/java/org/apache/oozie/example/DateList.java",
                "+++ b/examples/src/main/java/org/apache/oozie/example/DateList.java",
                "@@ -31,70 +31,62 @@ import java.util.TimeZone;",
                " public class DateList {",
                "-\tprivate static final TimeZone UTC = getTimeZone(\"UTC\");",
                "-\tprivate static String DATE_LIST_SEPARATOR = \",\";",
                "+    private static final TimeZone UTC = getTimeZone(\"UTC\");",
                "+    private static String DATE_LIST_SEPARATOR = \",\";",
                "-\tpublic static void main(String[] args) throws Exception {",
                "-\t\tif (args.length < 5) {",
                "-\t\t\tSystem.out",
                "-\t\t\t\t\t.println(\"Usage: java DateList <start_time>  <end_time> <frequency> <timeunit> <timezone>\");",
                "-\t\t\tSystem.out",
                "-\t\t\t\t\t.println(\"Example: java DateList 2009-02-01T01:00Z 2009-02-01T02:00Z 15 MINUTES UTC\");",
                "-\t\t\tSystem.exit(1);",
                "-\t\t}",
                "-\t\tDate startTime = parseDateUTC(args[0]);",
                "-\t\tDate endTime = parseDateUTC(args[1]);",
                "-\t\tRepeatable rep = new Repeatable();",
                "-\t\trep.setBaseline(startTime);",
                "-\t\trep.setFrequency(Integer.parseInt(args[2]));",
                "-\t\trep.setTimeUnit(TimeUnit.valueOf(args[3]));",
                "-\t\trep.setTimeZone(getTimeZone(args[4]));",
                "-\t\tDate date = null;",
                "-\t\tint occurrence = 0;",
                "-\t\tStringBuilder dateList = new StringBuilder();",
                "-\t\tdo {",
                "-\t\t\tdate = rep.getOccurrenceTime(startTime, occurrence++, null);",
                "-\t\t\tif (!date.before(endTime)) {",
                "-\t\t\t\tbreak;",
                "-\t\t\t}",
                "-\t\t\tif (occurrence > 1) {",
                "-\t\t\t\tdateList.append(DATE_LIST_SEPARATOR);",
                "-\t\t\t}",
                "-\t\t\tdateList.append(formatDateUTC(date));",
                "-\t\t} while (date != null);",
                "+    public static void main(String[] args) throws Exception {",
                "+        if (args.length < 5) {",
                "+            System.out",
                "+                    .println(\"Usage: java DateList <start_time>  <end_time> <frequency> <timeunit> <timezone>\");",
                "+            System.out",
                "+                    .println(\"Example: java DateList 2009-02-01T01:00Z 2009-02-01T02:00Z 15 MINUTES UTC\");",
                "+            System.exit(1);",
                "+        }",
                "+        Date startTime = parseDateUTC(args[0]);",
                "+        Date endTime = parseDateUTC(args[1]);",
                "+        Repeatable rep = new Repeatable();",
                "+        rep.setBaseline(startTime);",
                "+        rep.setFrequency(Integer.parseInt(args[2]));",
                "+        rep.setTimeUnit(TimeUnit.valueOf(args[3]));",
                "+        rep.setTimeZone(getTimeZone(args[4]));",
                "+        int occurrence = 0;",
                "+        Date date = rep.getOccurrenceTime(startTime, occurrence++, null);",
                "+        StringBuilder dateList = new StringBuilder();",
                "+        while (date != null && date.before(endTime)) {",
                "+            date = rep.getOccurrenceTime(startTime, occurrence++, null);",
                "+            if (occurrence > 1) {",
                "+                dateList.append(DATE_LIST_SEPARATOR);",
                "+            }",
                "+            dateList.append(formatDateUTC(date));",
                "+        }",
                "-\t\tSystem.out.println(\"datelist :\" + dateList+ \":\");",
                "-\t\t//Passing the variable to WF that could be referred by subsequent actions",
                "-\t\tFile file = new File(System.getProperty(\"oozie.action.output.properties\"));",
                "-\t\tProperties props = new Properties();",
                "-\t\tprops.setProperty(\"datelist\", dateList.toString());",
                "-\t\tOutputStream os = new FileOutputStream(file);",
                "-        \tprops.store(os, \"\");",
                "-        \tos.close();",
                "-\t}",
                "+        System.out.println(\"datelist :\" + dateList+ \":\");",
                "+        //Passing the variable to WF that could be referred by subsequent actions",
                "+        File file = new File(System.getProperty(\"oozie.action.output.properties\"));",
                "+        Properties props = new Properties();",
                "+        props.setProperty(\"datelist\", dateList.toString());",
                "+        try (OutputStream os = new FileOutputStream(file)) {",
                "+            props.store(os, \"\");",
                "+        }",
                "+    }",
                "+    //Utility methods",
                "+    private static DateFormat getISO8601DateFormat() {",
                "+        DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm'Z'\");",
                "+        dateFormat.setTimeZone(UTC);",
                "+        return dateFormat;",
                "+    }",
                "-\t//Utility methods",
                "-\tprivate static DateFormat getISO8601DateFormat() {",
                "-\t\tDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm'Z'\");",
                "-\t\tdateFormat.setTimeZone(UTC);",
                "-\t\treturn dateFormat;",
                "-\t}",
                "+    private static TimeZone getTimeZone(String tzId) {",
                "+        TimeZone tz = TimeZone.getTimeZone(tzId);",
                "+        if (!tz.getID().equals(tzId)) {",
                "+            throw new IllegalArgumentException(\"Invalid TimeZone: \" + tzId);",
                "+        }",
                "+        return tz;",
                "+    }",
                "-\tprivate static TimeZone getTimeZone(String tzId) {",
                "-\t\tTimeZone tz = TimeZone.getTimeZone(tzId);",
                "-\t\tif (!tz.getID().equals(tzId)) {",
                "-\t\t\tthrow new IllegalArgumentException(\"Invalid TimeZone: \" + tzId);",
                "-\t\t}",
                "-\t\treturn tz;",
                "-\t}",
                "-",
                "-\tprivate static Date parseDateUTC(String s) throws Exception {",
                "-\t\treturn getISO8601DateFormat().parse(s);",
                "-\t}",
                "-\tprivate static String formatDateUTC(Date d) throws Exception {",
                "-\t\treturn (d != null) ? getISO8601DateFormat().format(d) : \"NULL\";",
                "-\t}",
                "-",
                "-\tprivate static String formatDateUTC(Calendar c) throws Exception {",
                "-\t\treturn (c != null) ? formatDateUTC(c.getTime()) : \"NULL\";",
                "-\t}",
                "+    private static Date parseDateUTC(String s) throws Exception {",
                "+        return getISO8601DateFormat().parse(s);",
                "+    }",
                "+    private static String formatDateUTC(Date d) throws Exception {",
                "+        return (d != null) ? getISO8601DateFormat().format(d) : \"NULL\";",
                "+    }",
                " }",
                "diff --git a/examples/src/main/java/org/apache/oozie/example/LocalOozieExample.java b/examples/src/main/java/org/apache/oozie/example/LocalOozieExample.java",
                "index c9f5697c2..7cb8ed253 100644",
                "--- a/examples/src/main/java/org/apache/oozie/example/LocalOozieExample.java",
                "+++ b/examples/src/main/java/org/apache/oozie/example/LocalOozieExample.java",
                "@@ -71,3 +71,5 @@ public class LocalOozieExample {",
                "             if (propertiesFile != null) {",
                "-                conf.load(new FileInputStream(propertiesFile));",
                "+                try (FileInputStream properties = new FileInputStream(propertiesFile)) {",
                "+                    conf.load(properties);",
                "+                }",
                "             }",
                "@@ -114,3 +116,2 @@ public class LocalOozieExample {",
                "     }",
                "-",
                " }",
                "diff --git a/examples/src/main/java/org/apache/oozie/example/Repeatable.java b/examples/src/main/java/org/apache/oozie/example/Repeatable.java",
                "index ee8632518..198f3873f 100644",
                "--- a/examples/src/main/java/org/apache/oozie/example/Repeatable.java",
                "+++ b/examples/src/main/java/org/apache/oozie/example/Repeatable.java",
                "@@ -25,174 +25,177 @@ import java.util.Calendar;",
                " public class Repeatable {",
                "-\tprivate String name;",
                "-\tprivate Date baseline;",
                "-\tprivate TimeZone timeZone;",
                "-\tprivate int frequency;",
                "-\tprivate TimeUnit timeUnit;",
                "-\tpublic static final TimeZone UTC = TimeZone.getTimeZone(\"UTC\");",
                "-",
                "-\t/**",
                "-\t * Compute the occurrence number for the given nominal time using a TZ-DST",
                "-\t * sensitive frequency If nominal time is before baseline return -1",
                "-\t *",
                "-\t * @param nominalTime",
                "-\t *            :baseline time",
                "-\t * @param timeLimit",
                "-\t *            : Max end time",
                "-\t * @return occurrence number",
                "-\t */",
                "-\tint getOccurrence(Date nominalTime, Date timeLimit) {",
                "-\t\tint occurrence = -1;",
                "-\t\t// ensure nominal time is greater than initial-instance",
                "-\t\tlong positiveDiff = nominalTime.getTime() - getBaseline().getTime();",
                "-\t\tif (positiveDiff >= 0) {",
                "-\t\t\tCalendar calendar = Calendar.getInstance(getTimeZone());",
                "-\t\t\tcalendar.setLenient(true);",
                "-\t\t\tcalendar.setTime(getBaseline());",
                "-\t\t\toccurrence = 0;",
                "-\t\t\t// starting from initial instance increment frequencies until",
                "-\t\t\t// passing nominal time",
                "-\t\t\twhile (calendar.getTime().compareTo(nominalTime) < 0) {",
                "-\t\t\t\tif (timeLimit != null",
                "-\t\t\t\t\t\t&& calendar.getTime().compareTo(timeLimit) > 0) {",
                "-\t\t\t\t\treturn -1;",
                "-\t\t\t\t}",
                "-\t\t\t\tcalendar.add(getTimeUnit().getCalendarUnit(), getFrequency());",
                "-\t\t\t\toccurrence++;",
                "-\t\t\t}",
                "-\t\t\t// compute reminder delta between nominal time and closest greater",
                "-\t\t\t// frequency tick time",
                "-\t\t\tlong nominalCurrentDelta = nominalTime.getTime()",
                "-\t\t\t\t\t- calendar.getTime().getTime();",
                "-\t\t\t// ensure that computed current is greater than initial-instance",
                "-\t\t\t// the nominalCurrentDelta has to be used to cover the case when the",
                "-\t\t\t// computed current",
                "-\t\t\t// falls between (-1*f ... 0*f)",
                "-\t\t\tpositiveDiff = calendar.getTime().getTime()",
                "-\t\t\t\t\t- getBaseline().getTime() + nominalCurrentDelta;",
                "-\t\t\tif (positiveDiff < 0) {",
                "-\t\t\t\toccurrence = -1;",
                "-\t\t\t}",
                "-\t\t}",
                "-\t\treturn occurrence;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Compute the occurrence number for the given nominal time using a TZ-DST",
                "-\t * sensitive frequency If nominal time is before baseline return -1",
                "-\t *",
                "-\t * @param nominalTime",
                "-\t *            :baseline time",
                "-\t * @return occurrence number",
                "-\t */",
                "-\tpublic int getOccurrence(Date nominalTime) {",
                "-\t\treturn getOccurrence(nominalTime, null);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Compute the occurrence nominal time for the given nominal-time and",
                "-\t * occurrence-offset using a TZ-DST sensitive frequency If the computed",
                "-\t * occurrence is before baseline time returns NULL",
                "-\t *",
                "-\t * @param nominalTime",
                "-\t *            :baseline time",
                "-\t * @param occurrenceOffset",
                "-\t *            : offset",
                "-\t * @param timeLimit",
                "-\t *            : Max end time",
                "-\t * @return Date after 'occurrenceOffset' instance",
                "-\t */",
                "-\tDate getOccurrenceTime(Date nominalTime, int occurrenceOffset,",
                "-\t\t\tDate timeLimit) {",
                "-\t\tDate date = null;",
                "-\t\tint occurrence = getOccurrence(nominalTime, timeLimit);",
                "-\t\tif (occurrence > -1) {",
                "-\t\t\toccurrence += occurrenceOffset;",
                "-\t\t\toccurrence = (occurrence >= 0) ? occurrence : -1;",
                "-\t\t}",
                "-\t\tif (occurrence > -1) {",
                "-\t\t\tCalendar calendar = Calendar.getInstance(getTimeZone());",
                "-\t\t\tcalendar.setLenient(true);",
                "-\t\t\tcalendar.setTime(getBaseline());",
                "-\t\t\tcalendar.add(getTimeUnit().getCalendarUnit(), getFrequency()",
                "-\t\t\t\t\t* occurrence);",
                "-\t\t\tdate = calendar.getTime();",
                "-",
                "-\t\t}",
                "-\t\treturn date;",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * Compute the occurrence nominal time for the given nominal-time and",
                "-\t * occurrence-offset using a TZ-DST sensitive frequency If the computed",
                "-\t * occurrence is before baseline time returns NULL",
                "-\t *",
                "-\t * @param nominalTime",
                "-\t *            :baseline time",
                "-\t * @param occurrenceOffset",
                "-\t *            : offset",
                "-\t * @return Date after 'occurrenceOffset' instance",
                "-\t */",
                "-\tpublic Date getOccurrenceTime(Date nominalTime, int occurrenceOffset) {",
                "-\t\treturn getOccurrenceTime(nominalTime, occurrenceOffset, null);",
                "-\t}",
                "-",
                "-\t/**",
                "-\t * computes the nominal time for the Nth occurrence of the Repeatable",
                "-\t *",
                "-\t * @param occurrence",
                "-\t *            : instance numbner",
                "-\t * @return TimeStamp of the Nth instance",
                "-\t */",
                "-\tpublic Date getTime(int occurrence) {",
                "-\t\tif (occurrence < 0) {",
                "-\t\t\tthrow new IllegalArgumentException(\"occurrence cannot be <0\");",
                "-\t\t}",
                "-\t\tCalendar calendar = Calendar.getInstance(getTimeZone());",
                "-\t\tcalendar.setLenient(true);",
                "-\t\tcalendar.setTime(getBaseline());",
                "-\t\tcalendar.add(getTimeUnit().getCalendarUnit(), getFrequency()",
                "-\t\t\t\t* occurrence);",
                "-\t\treturn calendar.getTime();",
                "-\t}",
                "-",
                "-\t// Setters and getters",
                "-\tpublic String getName() {",
                "-\t\treturn name;",
                "-\t}",
                "-",
                "-\tpublic void setName(String name) {",
                "-\t\tthis.name = name;",
                "-\t}",
                "-",
                "-\tpublic Date getBaseline() {",
                "-\t\treturn baseline;",
                "-\t}",
                "-",
                "-\tpublic void setBaseline(Date baseline) {",
                "-\t\tthis.baseline = baseline;",
                "-\t}",
                "-",
                "-\tpublic TimeZone getTimeZone() {",
                "-\t\treturn timeZone;",
                "-\t}",
                "-",
                "-\tpublic void setTimeZone(TimeZone timeZone) {",
                "-\t\tthis.timeZone = timeZone;",
                "-\t}",
                "-",
                "-\tpublic int getFrequency() {",
                "-\t\treturn frequency;",
                "-\t}",
                "-",
                "-\tpublic void setFrequency(int frequency) {",
                "-\t\tthis.frequency = frequency;",
                "-\t}",
                "-",
                "-\tpublic TimeUnit getTimeUnit() {",
                "-\t\treturn timeUnit;",
                "-\t}",
                "-",
                "-\tpublic void setTimeUnit(TimeUnit timeUnit) {",
                "-\t\tthis.timeUnit = timeUnit;",
                "-\t}",
                "+    private String name;",
                "+    private Date baseline;",
                "+    private TimeZone timeZone;",
                "+    private int frequency;",
                "+    private TimeUnit timeUnit;",
                "+    public static final TimeZone UTC = TimeZone.getTimeZone(\"UTC\");",
                "+",
                "+    /**",
                "+     * Compute the occurrence number for the given nominal time using a TZ-DST",
                "+     * sensitive frequency If nominal time is before baseline return -1",
                "+     *",
                "+     * @param nominalTime",
                "+     *            :baseline time",
                "+     * @param timeLimit",
                "+     *            : Max end time",
                "+     * @return occurrence number",
                "+     */",
                "+    int getOccurrence(Date nominalTime, Date timeLimit) {",
                "+        int occurrence = -1;",
                "+        // ensure nominal time is greater than initial-instance",
                "+        long positiveDiff = nominalTime.getTime() - getBaseline().getTime();",
                "+        if (positiveDiff >= 0) {",
                "+            Calendar calendar = Calendar.getInstance(getTimeZone());",
                "+            calendar.setLenient(true);",
                "+            calendar.setTime(getBaseline());",
                "+            occurrence = 0;",
                "+            // starting from initial instance increment frequencies until",
                "+            // passing nominal time",
                "+            while (calendar.getTime().compareTo(nominalTime) < 0) {",
                "+                if (timeLimit != null",
                "+                        && calendar.getTime().compareTo(timeLimit) > 0) {",
                "+                    return -1;",
                "+                }",
                "+                calendar.add(getTimeUnit().getCalendarUnit(), getFrequency());",
                "+                occurrence++;",
                "+            }",
                "+            // compute reminder delta between nominal time and closest greater",
                "+            // frequency tick time",
                "+            long nominalCurrentDelta = nominalTime.getTime()",
                "+                    - calendar.getTime().getTime();",
                "+            // ensure that computed current is greater than initial-instance",
                "+            // the nominalCurrentDelta has to be used to cover the case when the",
                "+            // computed current",
                "+            // falls between (-1*f ... 0*f)",
                "+            positiveDiff = calendar.getTime().getTime()",
                "+                    - getBaseline().getTime() + nominalCurrentDelta;",
                "+            if (positiveDiff < 0) {",
                "+                occurrence = -1;",
                "+            }",
                "+        }",
                "+        return occurrence;",
                "+    }",
                "+",
                "+    /**",
                "+     * Compute the occurrence number for the given nominal time using a TZ-DST",
                "+     * sensitive frequency If nominal time is before baseline return -1",
                "+     *",
                "+     * @param nominalTime",
                "+     *            :baseline time",
                "+     * @return occurrence number",
                "+     */",
                "+    public int getOccurrence(Date nominalTime) {",
                "+        return getOccurrence(nominalTime, null);",
                "+    }",
                "+",
                "+    /**",
                "+     * Compute the occurrence nominal time for the given nominal-time and",
                "+     * occurrence-offset using a TZ-DST sensitive frequency If the computed",
                "+     * occurrence is before baseline time returns NULL",
                "+     *",
                "+     * @param nominalTime",
                "+     *            :baseline time",
                "+     * @param occurrenceOffset",
                "+     *            : offset",
                "+     * @param timeLimit",
                "+     *            : Max end time",
                "+     * @return Date after 'occurrenceOffset' instance",
                "+     */",
                "+    Date getOccurrenceTime(Date nominalTime, int occurrenceOffset,",
                "+            Date timeLimit) {",
                "+        Date date = null;",
                "+        int occurrence = getOccurrence(nominalTime, timeLimit);",
                "+        if (occurrence > -1) {",
                "+            occurrence += occurrenceOffset;",
                "+            occurrence = (occurrence >= 0) ? occurrence : -1;",
                "+        }",
                "+        if (occurrence > -1) {",
                "+            Calendar calendar = Calendar.getInstance(getTimeZone());",
                "+            calendar.setLenient(true);",
                "+            calendar.setTime(getBaseline());",
                "+            calendar.add(getTimeUnit().getCalendarUnit(), getFrequency()",
                "+                    * occurrence);",
                "+            date = calendar.getTime();",
                "+",
                "+        }",
                "+        return date;",
                "+    }",
                "+",
                "+    /**",
                "+     * Compute the occurrence nominal time for the given nominal-time and",
                "+     * occurrence-offset using a TZ-DST sensitive frequency If the computed",
                "+     * occurrence is before baseline time returns NULL",
                "+     *",
                "+     * @param nominalTime",
                "+     *            :baseline time",
                "+     * @param occurrenceOffset",
                "+     *            : offset",
                "+     * @return Date after 'occurrenceOffset' instance",
                "+     */",
                "+    public Date getOccurrenceTime(Date nominalTime, int occurrenceOffset) {",
                "+        return getOccurrenceTime(nominalTime, occurrenceOffset, null);",
                "+    }",
                "+",
                "+    /**",
                "+     * computes the nominal time for the Nth occurrence of the Repeatable",
                "+     *",
                "+     * @param occurrence",
                "+     *            : instance numbner",
                "+     * @return TimeStamp of the Nth instance",
                "+     */",
                "+    public Date getTime(int occurrence) {",
                "+        if (occurrence < 0) {",
                "+            throw new IllegalArgumentException(\"occurrence cannot be <0\");",
                "+        }",
                "+        Calendar calendar = Calendar.getInstance(getTimeZone());",
                "+        calendar.setLenient(true);",
                "+        calendar.setTime(getBaseline());",
                "+        calendar.add(getTimeUnit().getCalendarUnit(), getFrequency()",
                "+                * occurrence);",
                "+        return calendar.getTime();",
                "+    }",
                "+",
                "+    // Setters and getters",
                "+    public String getName() {",
                "+        return name;",
                "+    }",
                "+",
                "+    public void setName(String name) {",
                "+        this.name = name;",
                "+    }",
                "+",
                "+    public Date getBaseline() {",
                "+        if (this.baseline == null) {",
                "+            this.baseline = new Date();",
                "+        }",
                "+        return new Date(baseline.getTime());",
                "+    }",
                "+",
                "+    public void setBaseline(Date baseline) {",
                "+        this.baseline = baseline;",
                "+    }",
                "+",
                "+    public TimeZone getTimeZone() {",
                "+        return timeZone;",
                "+    }",
                "+",
                "+    public void setTimeZone(TimeZone timeZone) {",
                "+        this.timeZone = timeZone;",
                "+    }",
                "+",
                "+    public int getFrequency() {",
                "+        return frequency;",
                "+    }",
                "+",
                "+    public void setFrequency(int frequency) {",
                "+        this.frequency = frequency;",
                "+    }",
                "+",
                "+    public TimeUnit getTimeUnit() {",
                "+        return timeUnit;",
                "+    }",
                "+",
                "+    public void setTimeUnit(TimeUnit timeUnit) {",
                "+        this.timeUnit = timeUnit;",
                "+    }"
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/oozie/example/DateList.java",
                "examples/src/main/java/org/apache/oozie/example/LocalOozieExample.java",
                "examples/src/main/java/org/apache/oozie/example/Repeatable.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-2942": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-2942",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3dc9c7865db139f52f885e59b92b3998724c17a7",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1533223723,
            "hunks": 1,
            "message": "OOZIE-3313 Hive example action fails (daniel.becker via gezapeti)",
            "diff": [
                "diff --git a/core/src/main/conf/action-conf/hive.xml b/core/src/main/conf/action-conf/hive.xml",
                "index 7ae0f9536..fc02e25b6 100644",
                "--- a/core/src/main/conf/action-conf/hive.xml",
                "+++ b/core/src/main/conf/action-conf/hive.xml",
                "@@ -27,3 +27,3 @@",
                "       <name>mapreduce.input.fileinputformat.split.maxsize</name>",
                "-      <value>256000000L</value>",
                "+      <value>256000000</value>",
                "    </property>"
            ],
            "changed_files": [
                "core/src/main/conf/action-conf/hive.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3313": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3313",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2dd10ff0fb7d7b53c0c177d5d4439fa065366f4c",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1532937527,
            "hunks": 1,
            "message": "OOZIE-3309 Runtime error during /v2/sla filtering for bundle (asalamon74 via andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/servlet/V2SLAServlet.java b/core/src/main/java/org/apache/oozie/servlet/V2SLAServlet.java",
                "index d578eafc5..3982d1e06 100644",
                "--- a/core/src/main/java/org/apache/oozie/servlet/V2SLAServlet.java",
                "+++ b/core/src/main/java/org/apache/oozie/servlet/V2SLAServlet.java",
                "@@ -192,4 +192,6 @@ public class V2SLAServlet extends SLAServlet {",
                "             List<String> jobIds = new ArrayList<String>();",
                "-            for(SLASummaryBean summaryBean:slaSummaryList){",
                "-                jobIds.add(summaryBean.getId());",
                "+            if (slaSummaryList != null) {",
                "+                for (SLASummaryBean summaryBean : slaSummaryList) {",
                "+                    jobIds.add(summaryBean.getId());",
                "+                }",
                "             }"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/servlet/V2SLAServlet.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3309": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3309",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "550850da7d3cb4ac2e50a90cbdada42d8203f360",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1528361932,
            "hunks": 3,
            "message": "OOZIE-3233 Remove DST shift from the coordinator job's end time (kmarton via andras.piros)",
            "diff": [
                "diff --git a/core/src/main/java/org/apache/oozie/command/coord/CoordMaterializeTransitionXCommand.java b/core/src/main/java/org/apache/oozie/command/coord/CoordMaterializeTransitionXCommand.java",
                "index abea2b7c4..ec9ef4181 100644",
                "--- a/core/src/main/java/org/apache/oozie/command/coord/CoordMaterializeTransitionXCommand.java",
                "+++ b/core/src/main/java/org/apache/oozie/command/coord/CoordMaterializeTransitionXCommand.java",
                "@@ -439,4 +439,2 @@ public class CoordMaterializeTransitionXCommand extends MaterializeTransitionXCo",
                "-        end = new DaylightOffsetCalculator(startMatdTime, endMatdTime).calculate(appTz, end);",
                "-",
                "         while (effStart.compareTo(end) < 0 && (ignoreMaxActions || maxActionToBeCreated-- > 0)) {",
                "@@ -575,4 +573,2 @@ public class CoordMaterializeTransitionXCommand extends MaterializeTransitionXCo",
                "-        end = calculateEndTimeWithDSTOffset(end);",
                "-",
                "         if (end.getTime().compareTo(endMatdTime) <= 0) {",
                "@@ -587,10 +583,2 @@ public class CoordMaterializeTransitionXCommand extends MaterializeTransitionXCo",
                "-    private Calendar calculateEndTimeWithDSTOffset(final Calendar endTime) {",
                "-        final TimeZone appTz = DateUtils.getTimeZone(coordJob.getTimeZone());",
                "-        final Calendar start = Calendar.getInstance(appTz);",
                "-        start.setTime(startMatdTime);",
                "-",
                "-        return new DaylightOffsetCalculator(startMatdTime, endMatdTime).calculate(appTz, endTime);",
                "-    }",
                "-",
                "     @Override"
            ],
            "changed_files": [
                "core/src/main/java/org/apache/oozie/command/coord/CoordMaterializeTransitionXCommand.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3233": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3233",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5b21530aaee04f7f3af8e43af7f9ccd01935f589",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1526480376,
            "hunks": 7,
            "message": "OOZIE-3228 [Spark action] Can't load properties from spark-defaults.conf (andras.piros)",
            "diff": [
                "diff --git a/docs/src/site/twiki/DG_SparkActionExtension.twiki b/docs/src/site/twiki/DG_SparkActionExtension.twiki",
                "index 66076ff9d..ce80e45fc 100644",
                "--- a/docs/src/site/twiki/DG_SparkActionExtension.twiki",
                "+++ b/docs/src/site/twiki/DG_SparkActionExtension.twiki",
                "@@ -111,6 +111,6 @@ Some examples of the =spark-opts= element:",
                " There are several ways to define properties that will be passed to Spark. They are processed in the following order:",
                "-    * propagated from =oozie.service.SparkConfigurationService.spark.configurations=",
                "-    * read from a localized =spark-defaults.conf= file",
                "-    * read from a file defined in =spark-opts= via the =--properties-file=",
                "-    * properties defined in =spark-opts= element",
                "+   * propagated from =oozie.service.SparkConfigurationService.spark.configurations=",
                "+   * read from a localized =spark-defaults.conf= file",
                "+   * read from a file defined in =spark-opts= via the =--properties-file=",
                "+   * properties defined in =spark-opts= element",
                "@@ -122,2 +122,11 @@ The =arg= element if present, contains arguments that can be passed to spark app",
                "+In case some property values are present both in =spark-defaults.conf= and as property key/value pairs generated by Oozie, the user",
                "+configured values from =spark-defaults.conf= are prepended to the ones generated by Oozie, as part of the Spark arguments list.",
                "+",
                "+Following properties to prepend to Spark arguments:",
                "+   * =spark.executor.extraClassPath=",
                "+   * =spark.driver.extraClassPath=",
                "+   * =spark.executor.extraJavaOptions=",
                "+   * =spark.driver.extraJavaOptions=",
                "+",
                " All the above elements can be parameterized (templatized) using EL",
                "diff --git a/sharelib/spark/src/main/java/org/apache/oozie/action/hadoop/SparkArgsExtractor.java b/sharelib/spark/src/main/java/org/apache/oozie/action/hadoop/SparkArgsExtractor.java",
                "index 5af39cda5..28d9c5cc4 100644",
                "--- a/sharelib/spark/src/main/java/org/apache/oozie/action/hadoop/SparkArgsExtractor.java",
                "+++ b/sharelib/spark/src/main/java/org/apache/oozie/action/hadoop/SparkArgsExtractor.java",
                "@@ -44,2 +44,3 @@ import java.util.Collection;",
                " import java.util.List;",
                "+import java.util.ListIterator;",
                " import java.util.Map;",
                "@@ -78,2 +79,4 @@ class SparkArgsExtractor {",
                "     private static final String OPT_VALUE_SEPARATOR = \",\";",
                "+    private static final String SPARK_OPT_SEPARATOR = \":\";",
                "+    private static final String JAVA_OPT_SEPARATOR = \" \";",
                "     private static final String CONF_OPTION = \"--conf\";",
                "@@ -86,3 +89,3 @@ class SparkArgsExtractor {",
                "     private static final String OPT_PROPERTIES_FILE = \"--properties-file\";",
                "-    public static final String SPARK_DEFAULTS_GENERATED_PROPERTIES = \"spark-defaults-oozie-generated.properties\";",
                "+    static final String SPARK_DEFAULTS_GENERATED_PROPERTIES = \"spark-defaults-oozie-generated.properties\";",
                "@@ -353,2 +356,4 @@ class SparkArgsExtractor {",
                "             sparkArgs.add(SPARK_DEFAULTS_GENERATED_PROPERTIES);",
                "+",
                "+            checkPropertiesAndPrependArgs(properties, sparkArgs);",
                "         }",
                "@@ -373,2 +378,53 @@ class SparkArgsExtractor {",
                "+    /**",
                "+     * In case some property values are present both in {@code spark-defaults.conf} and as property key/value pairs generated by",
                "+     * Oozie, prepend the user configured values from {@code spark-defaults.conf} to the ones generated by Oozie, as part of the",
                "+     * Spark arguments list. Users don't want to lose the configured values, and we don't want to lose the generated ones, either.",
                "+     * <p>",
                "+     * Following properties to prepend to Spark arguments:",
                "+     * <ul>",
                "+     *     <li>{@code spark.executor.extraClassPath}</li>",
                "+     *     <li>{@code spark.driver.extraClassPath}</li>",
                "+     *     <li>{@code spark.executor.extraJavaOptions}</li>",
                "+     *     <li>{@code spark.driver.extraJavaOptions}</li>",
                "+     * </ul>",
                "+     * @param source {@link Properties} defined in {@code spark-defaults.conf} by the user",
                "+     * @param target Spark options",
                "+     */",
                "+    private void checkPropertiesAndPrependArgs(final Properties source, final List<String> target) {",
                "+        checkPropertiesAndPrependArg(EXECUTOR_CLASSPATH, SPARK_OPT_SEPARATOR, source, target);",
                "+        checkPropertiesAndPrependArg(DRIVER_CLASSPATH, SPARK_OPT_SEPARATOR, source, target);",
                "+        checkPropertiesAndPrependArg(EXECUTOR_EXTRA_JAVA_OPTIONS, JAVA_OPT_SEPARATOR, source, target);",
                "+        checkPropertiesAndPrependArg(DRIVER_EXTRA_JAVA_OPTIONS, JAVA_OPT_SEPARATOR, source, target);",
                "+    }",
                "+",
                "+    /**",
                "+     * Prepend one  user defined property value from {@code spark-defaults.properties} to the Oozie generated value, and store to",
                "+     * Spark options.",
                "+     * @param key key of the user defined property key/value pair",
                "+     * @param separator user defined and generated values must be separated, depending on the context",
                "+     * @param source {@link Properties} defined in {@code spark-defaults.conf} by the user",
                "+     * @param target Spark options",
                "+     */",
                "+    private void checkPropertiesAndPrependArg(final String key,",
                "+                                              final String separator,",
                "+                                              final Properties source,",
                "+                                              final List<String> target) {",
                "+        final String propertiesKey = key.replace(OPT_SEPARATOR, \"\");",
                "+        if (source.containsKey(propertiesKey)) {",
                "+            final ListIterator<String> targetIterator = target.listIterator();",
                "+            while (targetIterator.hasNext()) {",
                "+                final String arg = targetIterator.next();",
                "+                if (arg.startsWith(key)) {",
                "+                    final String valueToPrepend = source.getProperty(propertiesKey);",
                "+                    final String oldValue = arg.substring(arg.indexOf(key) + key.length());",
                "+                    String newValue = valueToPrepend + separator + oldValue;",
                "+                    System.out.println(String.format(\"Spark argument to replace: [%s=%s]\", propertiesKey, oldValue));",
                "+                    targetIterator.set(key + newValue);",
                "+                    System.out.println(String.format(\"Spark argument replaced with: [%s=%s]\", propertiesKey, newValue));",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "     private void loadUserDefinedPropertiesFile(final String userDefinedPropertiesFile, final Properties properties) {"
            ],
            "changed_files": [
                "docs/src/site/twiki/DG_SparkActionExtension.twiki",
                "sharelib/spark/src/main/java/org/apache/oozie/action/hadoop/SparkArgsExtractor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3228": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3228",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c2f48f5d83b00b1c3e075830251b281cd9bb3180",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1526979051,
            "hunks": 2,
            "message": "OOZIE-2826 Upgrade joda-time to 2.9.9 (dbist13 via andras.piros)",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 90ba8e2eb..fd488572b 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -1537,4 +1537,5 @@",
                "                 <artifactId>joda-time</artifactId>",
                "-                <version>2.1</version>",
                "+                <version>2.9.9</version>",
                "             </dependency>",
                "+",
                "             <dependency>"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-2826": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-2826",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d55245667b259d858d4dded849ded001896ba2af",
            "repository": "https://github.com/apache/oozie",
            "timestamp": 1523264949,
            "hunks": 2,
            "message": "OOZIE-3192 OozieDBCLI does not clean up temporary files (Prabhu Joseph via gezapeti)",
            "diff": [
                "diff --git a/tools/src/main/java/org/apache/oozie/tools/OozieDBCLI.java b/tools/src/main/java/org/apache/oozie/tools/OozieDBCLI.java",
                "index ce18e1c86..eeaaa60c4 100644",
                "--- a/tools/src/main/java/org/apache/oozie/tools/OozieDBCLI.java",
                "+++ b/tools/src/main/java/org/apache/oozie/tools/OozieDBCLI.java",
                "@@ -167,3 +167,3 @@ public class OozieDBCLI {",
                "-    private Map<String, String> getJdbcConf() throws Exception {",
                "+    protected Map<String, String> getJdbcConf() throws Exception {",
                "         Services services = new Services();",
                "@@ -182,2 +182,3 @@ public class OozieDBCLI {",
                "         jdbcConf.put(\"dbtype\", dbType);",
                "+        services.destroy();",
                "         return jdbcConf;"
            ],
            "changed_files": [
                "tools/src/main/java/org/apache/oozie/tools/OozieDBCLI.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "OOZIE-3192": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "release-5.1.0",
                "release-5.1.0-rc0",
                "release-5.1.0-rc1",
                "release-5.1.0-rc2",
                "release-5.2.0",
                "release-5.2.0-rc0",
                "release-5.2.1",
                "release-5.2.1-rc0",
                "release-5.2.1-rc1"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: OOZIE-3192",
                    "relevance": 2
                }
            ]
        }
    ]
}
